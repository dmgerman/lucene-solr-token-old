begin_unit
begin_comment
comment|/* The following code was generated by JFlex 1.5.0-SNAPSHOT on 7/26/12 6:22 PM */
end_comment
begin_package
DECL|package|org.apache.lucene.analysis.standard
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|standard
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|CharTermAttribute
import|;
end_import
begin_comment
comment|/**  * This class implements Word Break rules from the Unicode Text Segmentation   * algorithm, as specified in   *<a href="http://unicode.org/reports/tr29/">Unicode Standard Annex #29</a>.   *<p/>  * Tokens produced are of the following types:  *<ul>  *<li>&lt;ALPHANUM&gt;: A sequence of alphabetic and numeric characters</li>  *<li>&lt;NUM&gt;: A number</li>  *<li>&lt;SOUTHEAST_ASIAN&gt;: A sequence of characters from South and Southeast  *       Asian languages, including Thai, Lao, Myanmar, and Khmer</li>  *<li>&lt;IDEOGRAPHIC&gt;: A single CJKV ideographic character</li>  *<li>&lt;HIRAGANA&gt;: A single hiragana character</li>  *</ul>  */
end_comment
begin_class
DECL|class|StandardTokenizerImpl
specifier|public
specifier|final
class|class
name|StandardTokenizerImpl
implements|implements
name|StandardTokenizerInterface
block|{
comment|/** This character denotes the end of file */
DECL|field|YYEOF
specifier|public
specifier|static
specifier|final
name|int
name|YYEOF
init|=
operator|-
literal|1
decl_stmt|;
comment|/** initial size of the lookahead buffer */
DECL|field|ZZ_BUFFERSIZE
specifier|private
specifier|static
specifier|final
name|int
name|ZZ_BUFFERSIZE
init|=
literal|16384
decl_stmt|;
comment|/** lexical states */
DECL|field|YYINITIAL
specifier|public
specifier|static
specifier|final
name|int
name|YYINITIAL
init|=
literal|0
decl_stmt|;
comment|/**    * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l    * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l    *                  at the beginning of a line    * l is of the form l = 2*k, k a non negative integer    */
DECL|field|ZZ_LEXSTATE
specifier|private
specifier|static
specifier|final
name|int
name|ZZ_LEXSTATE
index|[]
init|=
block|{
literal|0
block|,
literal|0
block|}
decl_stmt|;
comment|/**     * Translates characters to character classes    */
DECL|field|ZZ_CMAP_PACKED
specifier|private
specifier|static
specifier|final
name|String
name|ZZ_CMAP_PACKED
init|=
literal|"\47\0\1\202\4\0\1\201\1\0\1\202\1\0\12\176\1\200\1\201"
operator|+
literal|"\5\0\32\174\4\0\1\203\1\0\32\174\57\0\1\174\2\0\1\175"
operator|+
literal|"\7\0\1\174\1\0\1\200\2\0\1\174\5\0\27\174\1\0\37\174"
operator|+
literal|"\1\0\u01ca\174\4\0\14\174\16\0\5\174\7\0\1\174\1\0\1\174"
operator|+
literal|"\21\0\160\175\5\174\1\0\2\174\2\0\4\174\1\201\7\0\1\174"
operator|+
literal|"\1\200\3\174\1\0\1\174\1\0\24\174\1\0\123\174\1\0\213\174"
operator|+
literal|"\1\0\7\175\236\174\11\0\46\174\2\0\1\174\7\0\47\174\1\0"
operator|+
literal|"\1\201\7\0\55\175\1\0\1\175\1\0\2\175\1\0\2\175\1\0"
operator|+
literal|"\1\175\10\0\33\174\5\0\4\174\1\200\13\0\5\175\7\0\2\201"
operator|+
literal|"\2\0\13\175\5\0\53\174\25\175\12\176\1\0\1\176\1\201\1\0"
operator|+
literal|"\2\174\1\175\143\174\1\0\1\174\7\175\1\175\1\0\6\175\2\174"
operator|+
literal|"\2\175\1\0\4\175\2\174\12\176\3\174\2\0\1\174\17\0\1\175"
operator|+
literal|"\1\174\1\175\36\174\33\175\2\0\131\174\13\175\1\174\16\0\12\176"
operator|+
literal|"\41\174\11\175\2\174\2\0\1\201\1\0\1\174\5\0\26\174\4\175"
operator|+
literal|"\1\174\11\175\1\174\3\175\1\174\5\175\22\0\31\174\3\175\104\0"
operator|+
literal|"\1\174\1\0\13\174\67\0\33\175\1\0\4\175\66\174\3\175\1\174"
operator|+
literal|"\22\175\1\174\7\175\12\174\2\175\2\0\12\176\1\0\7\174\1\0"
operator|+
literal|"\7\174\1\0\3\175\1\0\10\174\2\0\2\174\2\0\26\174\1\0"
operator|+
literal|"\7\174\1\0\1\174\3\0\4\174\2\0\1\175\1\174\7\175\2\0"
operator|+
literal|"\2\175\2\0\3\175\1\174\10\0\1\175\4\0\2\174\1\0\3\174"
operator|+
literal|"\2\175\2\0\12\176\2\174\17\0\3\175\1\0\6\174\4\0\2\174"
operator|+
literal|"\2\0\26\174\1\0\7\174\1\0\2\174\1\0\2\174\1\0\2\174"
operator|+
literal|"\2\0\1\175\1\0\5\175\4\0\2\175\2\0\3\175\3\0\1\175"
operator|+
literal|"\7\0\4\174\1\0\1\174\7\0\12\176\2\175\3\174\1\175\13\0"
operator|+
literal|"\3\175\1\0\11\174\1\0\3\174\1\0\26\174\1\0\7\174\1\0"
operator|+
literal|"\2\174\1\0\5\174\2\0\1\175\1\174\10\175\1\0\3\175\1\0"
operator|+
literal|"\3\175\2\0\1\174\17\0\2\174\2\175\2\0\12\176\21\0\3\175"
operator|+
literal|"\1\0\10\174\2\0\2\174\2\0\26\174\1\0\7\174\1\0\2\174"
operator|+
literal|"\1\0\5\174\2\0\1\175\1\174\7\175\2\0\2\175\2\0\3\175"
operator|+
literal|"\10\0\2\175\4\0\2\174\1\0\3\174\2\175\2\0\12\176\1\0"
operator|+
literal|"\1\174\20\0\1\175\1\174\1\0\6\174\3\0\3\174\1\0\4\174"
operator|+
literal|"\3\0\2\174\1\0\1\174\1\0\2\174\3\0\2\174\3\0\3\174"
operator|+
literal|"\3\0\14\174\4\0\5\175\3\0\3\175\1\0\4\175\2\0\1\174"
operator|+
literal|"\6\0\1\175\16\0\12\176\21\0\3\175\1\0\10\174\1\0\3\174"
operator|+
literal|"\1\0\27\174\1\0\12\174\1\0\5\174\3\0\1\174\7\175\1\0"
operator|+
literal|"\3\175\1\0\4\175\7\0\2\175\1\0\2\174\6\0\2\174\2\175"
operator|+
literal|"\2\0\12\176\22\0\2\175\1\0\10\174\1\0\3\174\1\0\27\174"
operator|+
literal|"\1\0\12\174\1\0\5\174\2\0\1\175\1\174\7\175\1\0\3\175"
operator|+
literal|"\1\0\4\175\7\0\2\175\7\0\1\174\1\0\2\174\2\175\2\0"
operator|+
literal|"\12\176\1\0\2\174\17\0\2\175\1\0\10\174\1\0\3\174\1\0"
operator|+
literal|"\51\174\2\0\1\174\7\175\1\0\3\175\1\0\4\175\1\174\10\0"
operator|+
literal|"\1\175\10\0\2\174\2\175\2\0\12\176\12\0\6\174\2\0\2\175"
operator|+
literal|"\1\0\22\174\3\0\30\174\1\0\11\174\1\0\1\174\2\0\7\174"
operator|+
literal|"\3\0\1\175\4\0\6\175\1\0\1\175\1\0\10\175\22\0\2\175"
operator|+
literal|"\15\0\60\204\1\205\2\204\7\205\5\0\7\204\10\205\1\0\12\176"
operator|+
literal|"\47\0\2\204\1\0\1\204\2\0\2\204\1\0\1\204\2\0\1\204"
operator|+
literal|"\6\0\4\204\1\0\7\204\1\0\3\204\1\0\1\204\1\0\1\204"
operator|+
literal|"\2\0\2\204\1\0\4\204\1\205\2\204\6\205\1\0\2\205\1\204"
operator|+
literal|"\2\0\5\204\1\0\1\204\1\0\6\205\2\0\12\176\2\0\4\204"
operator|+
literal|"\40\0\1\174\27\0\2\175\6\0\12\176\13\0\1\175\1\0\1\175"
operator|+
literal|"\1\0\1\175\4\0\2\175\10\174\1\0\44\174\4\0\24\175\1\0"
operator|+
literal|"\2\175\5\174\13\175\1\0\44\175\11\0\1\175\71\0\53\204\24\205"
operator|+
literal|"\1\204\12\176\6\0\6\204\4\205\4\204\3\205\1\204\3\205\2\204"
operator|+
literal|"\7\205\3\204\4\205\15\204\14\205\1\204\1\205\12\176\4\205\2\204"
operator|+
literal|"\46\174\1\0\1\174\5\0\1\174\2\0\53\174\1\0\4\174\u0100\210"
operator|+
literal|"\111\174\1\0\4\174\2\0\7\174\1\0\1\174\1\0\4\174\2\0"
operator|+
literal|"\51\174\1\0\4\174\2\0\41\174\1\0\4\174\2\0\7\174\1\0"
operator|+
literal|"\1\174\1\0\4\174\2\0\17\174\1\0\71\174\1\0\4\174\2\0"
operator|+
literal|"\103\174\2\0\3\175\40\0\20\174\20\0\125\174\14\0\u026c\174\2\0"
operator|+
literal|"\21\174\1\0\32\174\5\0\113\174\3\0\3\174\17\0\15\174\1\0"
operator|+
literal|"\4\174\3\175\13\0\22\174\3\175\13\0\22\174\2\175\14\0\15\174"
operator|+
literal|"\1\0\3\174\1\0\2\175\14\0\64\204\40\205\3\0\1\204\4\0"
operator|+
literal|"\1\204\1\205\2\0\12\176\41\0\3\175\2\0\12\176\6\0\130\174"
operator|+
literal|"\10\0\51\174\1\175\1\174\5\0\106\174\12\0\35\174\3\0\14\175"
operator|+
literal|"\4\0\14\175\12\0\12\176\36\204\2\0\5\204\13\0\54\204\4\0"
operator|+
literal|"\21\205\7\204\2\205\6\0\12\176\1\204\3\0\2\204\40\0\27\174"
operator|+
literal|"\5\175\4\0\65\204\12\205\1\0\35\205\2\0\1\175\12\176\6\0"
operator|+
literal|"\12\176\6\0\16\204\122\0\5\175\57\174\21\175\7\174\4\0\12\176"
operator|+
literal|"\21\0\11\175\14\0\3\175\36\174\15\175\2\174\12\176\54\174\16\175"
operator|+
literal|"\14\0\44\174\24\175\10\0\12\176\3\0\3\174\12\176\44\174\122\0"
operator|+
literal|"\3\175\1\0\25\175\4\174\1\175\4\174\3\175\2\174\11\0\300\174"
operator|+
literal|"\47\175\25\0\4\175\u0116\174\2\0\6\174\2\0\46\174\2\0\6\174"
operator|+
literal|"\2\0\10\174\1\0\1\174\1\0\1\174\1\0\1\174\1\0\37\174"
operator|+
literal|"\2\0\65\174\1\0\7\174\1\0\1\174\3\0\3\174\1\0\7\174"
operator|+
literal|"\3\0\4\174\2\0\6\174\4\0\15\174\5\0\3\174\1\0\7\174"
operator|+
literal|"\17\0\2\175\2\175\10\0\2\202\12\0\1\202\2\0\1\200\2\0"
operator|+
literal|"\5\175\20\0\2\203\3\0\1\201\17\0\1\203\13\0\5\175\5\0"
operator|+
literal|"\6\175\1\0\1\174\15\0\1\174\20\0\15\174\63\0\41\175\21\0"
operator|+
literal|"\1\174\4\0\1\174\2\0\12\174\1\0\1\174\3\0\5\174\6\0"
operator|+
literal|"\1\174\1\0\1\174\1\0\1\174\1\0\4\174\1\0\13\174\2\0"
operator|+
literal|"\4\174\5\0\5\174\4\0\1\174\21\0\51\174\u032d\0\64\174\u0716\0"
operator|+
literal|"\57\174\1\0\57\174\1\0\205\174\6\0\4\174\3\175\2\174\14\0"
operator|+
literal|"\46\174\1\0\1\174\5\0\1\174\2\0\70\174\7\0\1\174\17\0"
operator|+
literal|"\1\175\27\174\11\0\7\174\1\0\7\174\1\0\7\174\1\0\7\174"
operator|+
literal|"\1\0\7\174\1\0\7\174\1\0\7\174\1\0\7\174\1\0\40\175"
operator|+
literal|"\57\0\1\174\120\0\32\206\1\0\131\206\14\0\326\206\57\0\1\174"
operator|+
literal|"\1\0\1\206\31\0\11\206\4\175\2\175\1\0\5\177\2\0\3\206"
operator|+
literal|"\1\174\1\174\4\0\126\207\2\0\2\175\2\177\3\207\133\177\1\0"
operator|+
literal|"\4\177\5\0\51\174\3\0\136\210\21\0\33\174\65\0\20\177\37\0"
operator|+
literal|"\101\0\37\0\121\0\57\177\1\0\130\177\250\0\u19b6\206\112\0\u51cd\206"
operator|+
literal|"\63\0\u048d\174\103\0\56\174\2\0\u010d\174\3\0\20\174\12\176\2\174"
operator|+
literal|"\24\0\57\174\4\175\1\0\12\175\1\0\31\174\7\0\1\175\120\174"
operator|+
literal|"\2\175\45\0\11\174\2\0\147\174\2\0\4\174\1\0\4\174\14\0"
operator|+
literal|"\13\174\115\0\12\174\1\175\3\174\1\175\4\174\1\175\27\174\5\175"
operator|+
literal|"\30\0\64\174\14\0\2\175\62\174\21\175\13\0\12\176\6\0\22\175"
operator|+
literal|"\6\174\3\0\1\174\4\0\12\176\34\174\10\175\2\0\27\174\15\175"
operator|+
literal|"\14\0\35\210\3\0\4\175\57\174\16\175\16\0\1\174\12\176\46\0"
operator|+
literal|"\51\174\16\175\11\0\3\174\1\175\10\174\2\175\2\0\12\176\6\0"
operator|+
literal|"\33\204\1\205\4\0\60\204\1\205\1\204\3\205\2\204\2\205\5\204"
operator|+
literal|"\2\205\1\204\1\205\1\204\30\0\5\204\13\174\5\175\2\0\3\174"
operator|+
literal|"\2\175\12\0\6\174\2\0\6\174\2\0\6\174\11\0\7\174\1\0"
operator|+
literal|"\7\174\221\0\43\174\10\175\1\0\2\175\2\0\12\176\6\0\u2ba4\210"
operator|+
literal|"\14\0\27\210\4\0\61\210\4\0\1\44\1\40\1\67\1\64\1\33"
operator|+
literal|"\1\30\2\0\1\24\1\21\2\0\1\17\1\15\14\0\1\3\1\6"
operator|+
literal|"\20\0\1\156\7\0\1\111\1\10\5\0\1\1\1\172\3\0\1\163"
operator|+
literal|"\1\163\1\163\1\163\1\163\1\163\1\163\1\163\1\163\1\163\1\163"
operator|+
literal|"\1\163\1\163\1\163\1\163\1\163\1\163\1\163\1\163\1\163\1\163"
operator|+
literal|"\1\163\1\163\1\163\1\163\1\163\1\163\1\163\1\163\1\163\1\163"
operator|+
literal|"\1\163\1\163\1\163\1\163\1\163\1\163\1\163\1\163\1\163\1\163"
operator|+
literal|"\1\164\1\163\1\163\1\163\1\170\1\166\17\0\1\160\u02c1\0\1\114"
operator|+
literal|"\277\0\1\157\1\115\1\16\3\167\2\62\1\167\1\62\2\167\1\36"
operator|+
literal|"\21\167\2\106\7\117\1\116\7\117\7\102\1\37\1\102\1\130\2\66"
operator|+
literal|"\1\65\1\130\1\66\1\65\10\130\2\107\5\103\2\75\5\103\1\22"
operator|+
literal|"\10\53\5\23\3\41\12\147\20\41\3\63\32\43\1\42\2\61\2\154"
operator|+
literal|"\1\155\2\154\2\155\2\154\1\155\3\61\1\60\2\61\12\110\1\126"
operator|+
literal|"\1\50\1\45\1\110\6\50\1\45\13\50\31\61\7\50\12\150\1\50"
operator|+
literal|"\5\13\3\127\3\101\1\100\4\101\2\100\10\101\1\100\7\35\1\34"
operator|+
literal|"\2\35\7\101\16\127\1\141\4\152\1\4\4\151\1\4\5\140\1\137"
operator|+
literal|"\1\140\3\137\7\140\1\137\23\140\5\113\3\140\6\113\2\113\6\112"
operator|+
literal|"\5\112\3\134\2\101\7\133\36\101\4\133\5\101\5\127\6\125\2\127"
operator|+
literal|"\1\125\4\35\13\136\12\151\26\136\15\13\1\135\2\13\1\173\3\142"
operator|+
literal|"\1\13\2\142\5\161\4\142\4\162\1\161\3\162\1\161\5\162\2\70"
operator|+
literal|"\1\73\2\70\1\73\1\70\2\73\1\70\1\73\12\70\1\73\4\5"
operator|+
literal|"\1\144\1\143\1\145\1\12\3\165\1\145\2\165\1\131\2\132\2\165"
operator|+
literal|"\1\12\1\165\1\12\1\165\1\12\1\165\3\12\1\165\2\12\1\165"
operator|+
literal|"\1\12\2\165\1\12\1\165\1\12\1\165\1\12\1\165\1\12\1\165"
operator|+
literal|"\1\12\1\76\2\72\1\76\1\72\2\76\4\72\1\76\7\72\1\76"
operator|+
literal|"\4\72\1\76\4\72\1\165\1\12\1\165\12\31\1\57\21\31\1\57"
operator|+
literal|"\3\32\1\57\3\31\1\57\1\31\2\2\2\31\1\57\15\124\4\47"
operator|+
literal|"\4\54\1\146\1\56\10\146\7\54\6\165\4\25\1\27\37\25\1\27"
operator|+
literal|"\4\25\25\105\1\171\11\105\21\26\5\105\1\7\12\55\5\105\6\104"
operator|+
literal|"\4\76\1\77\1\26\5\123\12\121\17\123\1\74\3\71\14\120\1\11"
operator|+
literal|"\11\46\1\52\5\46\4\122\13\51\2\14\11\46\1\52\31\46\1\52"
operator|+
literal|"\4\11\4\46\2\52\2\153\1\20\5\153\52\20\u1900\0\u016e\206\2\0"
operator|+
literal|"\152\206\46\0\7\174\14\0\5\174\5\0\1\174\1\175\12\174\1\0"
operator|+
literal|"\15\174\1\0\5\174\1\0\1\174\1\0\2\174\1\0\2\174\1\0"
operator|+
literal|"\154\174\41\0\u016b\174\22\0\100\174\2\0\66\174\50\0\14\174\4\0"
operator|+
literal|"\20\175\1\201\2\0\1\200\1\201\13\0\7\175\14\0\2\203\30\0"
operator|+
literal|"\3\203\1\201\1\0\1\202\1\0\1\201\1\200\32\0\5\174\1\0"
operator|+
literal|"\207\174\2\0\1\175\7\0\1\202\4\0\1\201\1\0\1\202\1\0"
operator|+
literal|"\12\176\1\200\1\201\5\0\32\174\4\0\1\203\1\0\32\174\13\0"
operator|+
literal|"\70\177\2\175\37\210\3\0\6\210\2\0\6\210\2\0\6\210\2\0"
operator|+
literal|"\3\210\34\0\3\175\4\0"
decl_stmt|;
comment|/**     * Translates characters to character classes    */
DECL|field|ZZ_CMAP
specifier|private
specifier|static
specifier|final
name|char
index|[]
name|ZZ_CMAP
init|=
name|zzUnpackCMap
argument_list|(
name|ZZ_CMAP_PACKED
argument_list|)
decl_stmt|;
comment|/**     * Translates DFA states to action switch labels.    */
DECL|field|ZZ_ACTION
specifier|private
specifier|static
specifier|final
name|int
index|[]
name|ZZ_ACTION
init|=
name|zzUnpackAction
argument_list|()
decl_stmt|;
DECL|field|ZZ_ACTION_PACKED_0
specifier|private
specifier|static
specifier|final
name|String
name|ZZ_ACTION_PACKED_0
init|=
literal|"\1\0\26\1\1\2\1\3\1\4\1\1\1\5\1\6"
operator|+
literal|"\1\7\1\10\20\0\1\2\1\0\1\2\12\0\1\3"
operator|+
literal|"\21\0\1\2\115\0"
decl_stmt|;
DECL|method|zzUnpackAction
specifier|private
specifier|static
name|int
index|[]
name|zzUnpackAction
parameter_list|()
block|{
name|int
index|[]
name|result
init|=
operator|new
name|int
index|[
literal|156
index|]
decl_stmt|;
name|int
name|offset
init|=
literal|0
decl_stmt|;
name|offset
operator|=
name|zzUnpackAction
argument_list|(
name|ZZ_ACTION_PACKED_0
argument_list|,
name|offset
argument_list|,
name|result
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
DECL|method|zzUnpackAction
specifier|private
specifier|static
name|int
name|zzUnpackAction
parameter_list|(
name|String
name|packed
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
index|[]
name|result
parameter_list|)
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|/* index in packed string  */
name|int
name|j
init|=
name|offset
decl_stmt|;
comment|/* index in unpacked array */
name|int
name|l
init|=
name|packed
operator|.
name|length
argument_list|()
decl_stmt|;
while|while
condition|(
name|i
operator|<
name|l
condition|)
block|{
name|int
name|count
init|=
name|packed
operator|.
name|charAt
argument_list|(
name|i
operator|++
argument_list|)
decl_stmt|;
name|int
name|value
init|=
name|packed
operator|.
name|charAt
argument_list|(
name|i
operator|++
argument_list|)
decl_stmt|;
do|do
name|result
index|[
name|j
operator|++
index|]
operator|=
name|value
expr_stmt|;
do|while
condition|(
operator|--
name|count
operator|>
literal|0
condition|)
do|;
block|}
return|return
name|j
return|;
block|}
comment|/**     * Translates a state to a row index in the transition table    */
DECL|field|ZZ_ROWMAP
specifier|private
specifier|static
specifier|final
name|int
index|[]
name|ZZ_ROWMAP
init|=
name|zzUnpackRowMap
argument_list|()
decl_stmt|;
DECL|field|ZZ_ROWMAP_PACKED_0
specifier|private
specifier|static
specifier|final
name|String
name|ZZ_ROWMAP_PACKED_0
init|=
literal|"\0\0\0\211\0\u0112\0\u019b\0\u0224\0\u02ad\0\u0336\0\u03bf"
operator|+
literal|"\0\u0448\0\u04d1\0\u055a\0\u05e3\0\u066c\0\u06f5\0\u077e\0\u0807"
operator|+
literal|"\0\u0890\0\u0919\0\u09a2\0\u0a2b\0\u0ab4\0\u0b3d\0\u0bc6\0\u0c4f"
operator|+
literal|"\0\u0cd8\0\u0d61\0\u0dea\0\u0e73\0\u0efc\0\u0f85\0\u100e\0\u0112"
operator|+
literal|"\0\u019b\0\u1097\0\u1120\0\u0336\0\u03bf\0\u0448\0\u04d1\0\u11a9"
operator|+
literal|"\0\u1232\0\u12bb\0\u1344\0\u077e\0\u13cd\0\u1456\0\u14df\0\u1568"
operator|+
literal|"\0\u15f1\0\u167a\0\u1703\0\u02ad\0\u178c\0\u1815\0\u066c\0\u189e"
operator|+
literal|"\0\u1927\0\u19b0\0\u1a39\0\u1ac2\0\u1b4b\0\u1bd4\0\u1c5d\0\u1ce6"
operator|+
literal|"\0\u1d6f\0\u1df8\0\u1e81\0\u1f0a\0\u1f93\0\u201c\0\u20a5\0\u212e"
operator|+
literal|"\0\u21b7\0\u2240\0\u22c9\0\u2352\0\u23db\0\u0dea\0\u2464\0\u24ed"
operator|+
literal|"\0\u2576\0\u25ff\0\u2688\0\u2711\0\u279a\0\u2823\0\u28ac\0\u2935"
operator|+
literal|"\0\u29be\0\u2a47\0\u2ad0\0\u2b59\0\u2be2\0\u2c6b\0\u2cf4\0\u2d7d"
operator|+
literal|"\0\u2e06\0\u2e8f\0\u2f18\0\u2fa1\0\u302a\0\u30b3\0\u313c\0\u31c5"
operator|+
literal|"\0\u324e\0\u32d7\0\u3360\0\u33e9\0\u3472\0\u34fb\0\u3584\0\u360d"
operator|+
literal|"\0\u3696\0\u371f\0\u37a8\0\u3831\0\u38ba\0\u3943\0\u39cc\0\u3a55"
operator|+
literal|"\0\u3ade\0\u3b67\0\u3bf0\0\u3c79\0\u3d02\0\u3d8b\0\u3e14\0\u3e9d"
operator|+
literal|"\0\u3f26\0\u3faf\0\u4038\0\u40c1\0\u414a\0\u41d3\0\u425c\0\u42e5"
operator|+
literal|"\0\u436e\0\u43f7\0\u4480\0\u4509\0\u4592\0\u461b\0\u46a4\0\u472d"
operator|+
literal|"\0\u47b6\0\u483f\0\u48c8\0\u4951\0\u49da\0\u4a63\0\u4aec\0\u4b75"
operator|+
literal|"\0\u4bfe\0\u4c87\0\u4d10\0\u4d99"
decl_stmt|;
DECL|method|zzUnpackRowMap
specifier|private
specifier|static
name|int
index|[]
name|zzUnpackRowMap
parameter_list|()
block|{
name|int
index|[]
name|result
init|=
operator|new
name|int
index|[
literal|156
index|]
decl_stmt|;
name|int
name|offset
init|=
literal|0
decl_stmt|;
name|offset
operator|=
name|zzUnpackRowMap
argument_list|(
name|ZZ_ROWMAP_PACKED_0
argument_list|,
name|offset
argument_list|,
name|result
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
DECL|method|zzUnpackRowMap
specifier|private
specifier|static
name|int
name|zzUnpackRowMap
parameter_list|(
name|String
name|packed
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
index|[]
name|result
parameter_list|)
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|/* index in packed string  */
name|int
name|j
init|=
name|offset
decl_stmt|;
comment|/* index in unpacked array */
name|int
name|l
init|=
name|packed
operator|.
name|length
argument_list|()
decl_stmt|;
while|while
condition|(
name|i
operator|<
name|l
condition|)
block|{
name|int
name|high
init|=
name|packed
operator|.
name|charAt
argument_list|(
name|i
operator|++
argument_list|)
operator|<<
literal|16
decl_stmt|;
name|result
index|[
name|j
operator|++
index|]
operator|=
name|high
operator||
name|packed
operator|.
name|charAt
argument_list|(
name|i
operator|++
argument_list|)
expr_stmt|;
block|}
return|return
name|j
return|;
block|}
comment|/**     * The transition table of the DFA    */
DECL|field|ZZ_TRANS
specifier|private
specifier|static
specifier|final
name|int
index|[]
name|ZZ_TRANS
init|=
name|zzUnpackTrans
argument_list|()
decl_stmt|;
DECL|field|ZZ_TRANS_PACKED_0
specifier|private
specifier|static
specifier|final
name|String
name|ZZ_TRANS_PACKED_0
init|=
literal|"\1\2\1\3\1\2\1\4\2\2\1\5\1\2\1\6"
operator|+
literal|"\4\2\1\7\1\2\1\10\1\2\1\11\2\2\1\12"
operator|+
literal|"\3\2\1\13\2\2\1\14\4\2\1\15\3\2\1\16"
operator|+
literal|"\17\2\1\17\2\2\1\20\66\2\1\21\1\2\1\22"
operator|+
literal|"\2\2\1\23\1\24\1\2\1\25\1\2\1\26\1\2"
operator|+
literal|"\1\27\1\2\1\30\1\2\1\31\1\32\3\2\1\33"
operator|+
literal|"\2\34\1\35\1\36\1\37\213\0\1\30\2\0\1\30"
operator|+
literal|"\4\0\1\30\16\0\1\30\15\0\1\30\20\0\1\30"
operator|+
literal|"\1\0\1\30\31\0\1\30\4\0\1\30\10\0\2\30"
operator|+
literal|"\15\0\2\30\10\0\1\30\21\0\2\30\5\0\1\30"
operator|+
literal|"\2\0\1\30\3\0\2\30\10\0\4\30\1\0\3\30"
operator|+
literal|"\1\0\1\30\2\0\1\30\2\0\1\30\4\0\4\30"
operator|+
literal|"\1\0\2\30\1\0\1\30\2\0\1\30\1\0\1\30"
operator|+
literal|"\2\0\4\30\2\0\3\30\1\0\2\30\1\0\3\30"
operator|+
literal|"\5\0\4\30\2\0\10\30\1\0\1\30\2\0\4\30"
operator|+
literal|"\1\0\2\30\1\0\1\30\1\0\2\30\4\0\1\30"
operator|+
literal|"\3\0\1\30\24\0\1\30\4\0\1\30\11\0\1\30"
operator|+
literal|"\22\0\1\30\3\0\1\30\27\0\1\30\63\0\1\30"
operator|+
literal|"\24\0\1\30\3\0\4\30\1\0\1\30\1\0\1\31"
operator|+
literal|"\2\0\1\30\1\0\2\30\2\0\2\30\2\0\3\30"
operator|+
literal|"\1\0\1\30\1\0\1\30\2\0\4\30\1\0\3\30"
operator|+
literal|"\1\0\1\30\1\0\3\30\1\0\2\30\1\0\4\30"
operator|+
literal|"\1\0\2\30\2\0\10\30\1\0\2\30\1\0\11\30"
operator|+
literal|"\1\0\10\30\1\0\13\30\1\31\1\0\1\30\1\0"
operator|+
literal|"\1\30\1\0\2\30\2\0\1\30\1\0\1\30\3\0"
operator|+
literal|"\1\30\33\0\1\30\17\0\1\30\23\0\1\30\23\0"
operator|+
literal|"\1\30\6\0\3\30\37\0\1\30\7\0\1\30\23\0"
operator|+
literal|"\1\30\1\0\2\30\1\0\1\30\1\0\4\30\1\0"
operator|+
literal|"\1\30\1\0\1\30\1\0\2\30\1\0\3\30\1\0"
operator|+
literal|"\2\30\1\0\4\30\1\0\3\30\1\0\17\30\1\0"
operator|+
literal|"\2\30\1\0\21\30\1\0\2\30\1\0\41\30\1\0"
operator|+
literal|"\1\30\1\0\2\30\2\0\1\30\1\0\1\30\1\0"
operator|+
literal|"\1\30\1\0\1\30\33\0\1\30\3\0\2\30\12\0"
operator|+
literal|"\2\30\13\0\1\30\6\0\1\30\2\0\2\30\6\0"
operator|+
literal|"\1\30\4\0\2\30\2\0\2\30\5\0\3\30\10\0"
operator|+
literal|"\1\30\26\0\1\30\7\0\1\30\23\0\1\30\1\0"
operator|+
literal|"\2\30\1\0\1\30\2\0\2\30\2\0\1\30\3\0"
operator|+
literal|"\2\30\1\0\3\30\1\0\2\30\1\0\4\30\1\0"
operator|+
literal|"\3\30\1\0\1\30\1\0\2\30\2\0\11\30\1\0"
operator|+
literal|"\2\30\1\0\1\30\1\0\2\30\1\0\14\30\1\0"
operator|+
literal|"\2\30\1\0\3\30\1\0\1\30\1\0\30\30\1\0"
operator|+
literal|"\2\30\1\0\1\30\1\0\2\30\2\0\1\30\1\0"
operator|+
literal|"\1\30\1\0\1\30\1\0\1\30\17\0\1\30\26\0"
operator|+
literal|"\2\30\23\0\1\31\1\30\66\0\1\31\46\0\1\31"
operator|+
literal|"\27\0\4\30\2\0\2\30\14\0\3\30\15\0\3\30"
operator|+
literal|"\3\0\1\30\7\0\2\30\13\0\1\30\13\0\4\31"
operator|+
literal|"\1\0\2\30\11\0\1\30\37\0\1\30\3\0\2\30"
operator|+
literal|"\12\0\2\30\1\0\3\30\7\0\1\30\6\0\2\30"
operator|+
literal|"\1\0\2\30\6\0\1\30\4\0\2\30\2\0\2\30"
operator|+
literal|"\5\0\3\30\10\0\1\30\16\0\1\30\4\0\2\31"
operator|+
literal|"\1\0\1\30\7\0\1\30\23\0\1\30\4\0\1\30"
operator|+
literal|"\6\0\1\30\3\0\1\30\6\0\1\30\5\0\1\30"
operator|+
literal|"\2\0\2\30\1\0\17\30\2\0\1\30\13\0\7\30"
operator|+
literal|"\2\0\1\30\1\0\1\30\1\0\1\30\2\0\1\30"
operator|+
literal|"\1\0\1\30\1\0\1\30\1\0\1\30\6\0\2\30"
operator|+
literal|"\5\0\1\30\1\0\1\30\2\0\3\30\1\0\1\30"
operator|+
literal|"\7\0\1\30\1\0\1\30\35\0\1\30\17\0\2\30"
operator|+
literal|"\22\0\1\30\2\0\2\30\13\0\1\30\3\0\2\30"
operator|+
literal|"\5\0\3\30\10\0\1\30\26\0\1\30\7\0\1\30"
operator|+
literal|"\30\0\1\30\6\0\1\30\3\0\1\30\3\0\1\30"
operator|+
literal|"\7\0\1\30\31\0\20\30\5\0\3\30\3\0\1\30"
operator|+
literal|"\3\0\2\30\2\0\2\30\4\0\1\30\10\0\1\30"
operator|+
literal|"\4\0\1\30\2\0\1\30\4\0\1\30\1\0\1\30"
operator|+
literal|"\1\0\1\30\132\0\1\36\41\0\1\32\35\0\1\35"
operator|+
literal|"\6\0\1\35\2\0\1\35\3\0\2\35\10\0\4\35"
operator|+
literal|"\1\0\3\35\1\0\1\35\2\0\1\35\2\0\1\35"
operator|+
literal|"\4\0\4\35\1\0\2\35\6\0\1\35\2\0\4\35"
operator|+
literal|"\2\0\3\35\1\0\2\35\1\0\3\35\5\0\4\35"
operator|+
literal|"\2\0\10\35\4\0\4\35\1\0\2\35\1\0\1\35"
operator|+
literal|"\1\0\2\35\4\0\1\35\3\0\1\35\17\0\1\35"
operator|+
literal|"\1\0\2\35\1\0\1\35\1\0\4\35\1\0\1\35"
operator|+
literal|"\1\0\1\35\1\0\2\35\1\0\3\35\1\0\2\35"
operator|+
literal|"\1\0\4\35\1\0\3\35\1\0\17\35\1\0\2\35"
operator|+
literal|"\1\0\21\35\1\0\2\35\1\0\41\35\1\0\1\35"
operator|+
literal|"\1\0\2\35\2\0\1\35\1\0\1\35\1\0\1\35"
operator|+
literal|"\1\0\1\35\17\0\1\35\1\0\2\35\1\0\1\35"
operator|+
literal|"\1\0\4\35\1\0\1\35\1\0\1\35\1\0\2\35"
operator|+
literal|"\2\0\1\35\2\0\2\35\1\0\4\35\1\0\3\35"
operator|+
literal|"\1\0\17\35\1\0\2\35\1\0\21\35\1\0\2\35"
operator|+
literal|"\1\0\41\35\1\0\1\35\1\0\2\35\2\0\1\35"
operator|+
literal|"\1\0\1\35\1\0\1\35\1\0\1\35\33\0\1\35"
operator|+
literal|"\17\0\1\35\23\0\1\35\32\0\1\35\41\0\1\35"
operator|+
literal|"\7\0\1\35\23\0\1\35\1\0\2\35\3\0\4\35"
operator|+
literal|"\1\0\1\35\1\0\1\35\1\0\2\35\1\0\3\35"
operator|+
literal|"\1\0\2\35\1\0\4\35\1\0\3\35\1\0\10\35"
operator|+
literal|"\1\0\6\35\1\0\2\35\1\0\21\35\1\0\2\35"
operator|+
literal|"\1\0\41\35\1\0\1\35\1\0\2\35\2\0\1\35"
operator|+
literal|"\1\0\1\35\1\0\1\35\1\0\1\35\210\0\1\36"
operator|+
literal|"\16\0\1\40\1\0\1\41\2\0\1\42\1\0\1\43"
operator|+
literal|"\4\0\1\44\1\0\1\45\1\0\1\46\2\0\1\47"
operator|+
literal|"\3\0\1\50\2\0\1\51\4\0\1\52\3\0\1\53"
operator|+
literal|"\17\0\1\54\2\0\1\55\21\0\1\56\2\0\1\57"
operator|+
literal|"\57\0\2\30\1\60\1\0\1\61\1\0\1\61\1\62"
operator|+
literal|"\1\0\1\30\2\0\1\30\1\0\1\40\1\0\1\41"
operator|+
literal|"\2\0\1\63\1\0\1\64\4\0\1\44\1\0\1\45"
operator|+
literal|"\1\0\1\46\2\0\1\47\3\0\1\65\2\0\1\66"
operator|+
literal|"\4\0\1\67\3\0\1\70\17\0\1\54\2\0\1\71"
operator|+
literal|"\21\0\1\72\2\0\1\73\57\0\1\30\2\31\2\0"
operator|+
literal|"\2\74\1\75\1\0\1\31\2\0\1\30\6\0\1\76"
operator|+
literal|"\21\0\1\77\2\0\1\100\10\0\1\101\22\0\1\102"
operator|+
literal|"\21\0\1\103\2\0\1\104\41\0\1\105\16\0\1\32"
operator|+
literal|"\1\0\1\32\3\0\1\62\1\0\1\32\4\0\1\40"
operator|+
literal|"\1\0\1\41\2\0\1\106\1\0\1\64\4\0\1\44"
operator|+
literal|"\1\0\1\45\1\0\1\46\2\0\1\47\3\0\1\107"
operator|+
literal|"\2\0\1\110\4\0\1\67\3\0\1\111\17\0\1\54"
operator|+
literal|"\2\0\1\112\21\0\1\113\2\0\1\114\41\0\1\115"
operator|+
literal|"\15\0\1\30\1\116\1\31\1\117\3\0\1\116\1\0"
operator|+
literal|"\1\116\2\0\1\30\204\0\2\34\11\0\1\120\21\0"
operator|+
literal|"\1\121\2\0\1\122\10\0\1\123\22\0\1\124\21\0"
operator|+
literal|"\1\125\2\0\1\126\60\0\1\35\7\0\1\35\11\0"
operator|+
literal|"\1\127\21\0\1\130\2\0\1\131\10\0\1\132\22\0"
operator|+
literal|"\1\133\21\0\1\134\2\0\1\135\60\0\1\36\7\0"
operator|+
literal|"\1\36\4\0\1\40\1\0\1\41\2\0\1\136\1\0"
operator|+
literal|"\1\43\4\0\1\44\1\0\1\45\1\0\1\46\2\0"
operator|+
literal|"\1\47\3\0\1\137\2\0\1\140\4\0\1\52\3\0"
operator|+
literal|"\1\141\17\0\1\54\2\0\1\142\21\0\1\143\2\0"
operator|+
literal|"\1\144\57\0\1\30\1\37\1\60\1\0\1\61\1\0"
operator|+
literal|"\1\61\1\62\1\0\1\37\2\0\1\37\7\0\1\30"
operator|+
literal|"\4\0\1\30\11\0\1\30\22\0\1\30\3\0\1\30"
operator|+
literal|"\13\0\1\30\2\0\1\30\10\0\1\30\12\0\4\30"
operator|+
literal|"\45\0\1\30\24\0\1\30\3\0\4\30\1\0\1\30"
operator|+
literal|"\1\0\1\60\2\0\1\30\1\0\2\30\2\0\2\30"
operator|+
literal|"\2\0\3\30\1\0\1\30\1\0\1\30\2\0\4\30"
operator|+
literal|"\1\0\3\30\1\0\1\30\1\0\3\30\1\0\2\30"
operator|+
literal|"\1\0\4\30\1\0\2\30\2\0\10\30\1\0\2\30"
operator|+
literal|"\1\0\11\30\1\0\10\30\1\0\13\30\1\60\1\0"
operator|+
literal|"\1\30\1\0\1\30\1\0\2\30\2\0\1\30\1\0"
operator|+
literal|"\1\30\3\0\1\30\17\0\1\30\26\0\2\30\23\0"
operator|+
literal|"\1\60\1\30\44\0\1\30\21\0\1\60\46\0\1\60"
operator|+
literal|"\11\0\1\30\15\0\4\30\2\0\2\30\14\0\4\30"
operator|+
literal|"\1\0\2\30\11\0\3\30\3\0\1\30\1\0\1\30"
operator|+
literal|"\4\0\3\30\5\0\4\30\2\0\2\30\12\0\4\60"
operator|+
literal|"\1\0\2\30\1\0\1\30\7\0\1\30\37\0\1\30"
operator|+
literal|"\3\0\2\30\12\0\2\30\1\0\3\30\7\0\1\30"
operator|+
literal|"\6\0\2\30\1\0\2\30\6\0\1\30\4\0\2\30"
operator|+
literal|"\2\0\2\30\5\0\3\30\10\0\1\30\16\0\1\30"
operator|+
literal|"\4\0\2\60\1\0\1\30\7\0\1\30\23\0\1\30"
operator|+
literal|"\4\0\1\30\6\0\1\30\3\0\1\30\6\0\1\30"
operator|+
literal|"\5\0\1\30\2\0\2\30\1\0\17\30\2\0\1\30"
operator|+
literal|"\13\0\7\30\2\0\1\30\1\0\1\30\1\0\1\30"
operator|+
literal|"\2\0\1\30\1\0\1\30\1\0\1\30\1\0\1\30"
operator|+
literal|"\4\0\1\30\1\0\2\30\5\0\1\30\1\0\1\30"
operator|+
literal|"\2\0\3\30\1\0\1\30\7\0\1\30\1\0\1\30"
operator|+
literal|"\26\0\1\30\6\0\1\30\3\0\1\30\3\0\1\30"
operator|+
literal|"\7\0\1\30\31\0\20\30\5\0\3\30\3\0\1\30"
operator|+
literal|"\3\0\2\30\2\0\2\30\4\0\5\30\4\0\1\30"
operator|+
literal|"\4\0\1\30\2\0\1\30\4\0\1\30\1\0\1\30"
operator|+
literal|"\1\0\1\30\127\0\2\30\15\0\4\30\60\0\1\30"
operator|+
literal|"\15\0\2\30\10\0\2\30\1\0\1\30\1\0\1\30"
operator|+
literal|"\11\0\1\30\11\0\2\30\6\0\1\30\2\0\4\30"
operator|+
literal|"\3\0\1\30\2\0\2\30\1\0\3\30\5\0\1\30"
operator|+
literal|"\1\0\2\30\2\0\2\30\1\0\4\30\5\0\1\30"
operator|+
literal|"\1\0\2\30\37\0\1\40\1\0\1\41\2\0\1\145"
operator|+
literal|"\1\0\1\43\4\0\1\44\1\0\1\45\1\0\1\46"
operator|+
literal|"\2\0\1\47\3\0\1\146\2\0\1\147\4\0\1\52"
operator|+
literal|"\3\0\1\150\17\0\1\54\2\0\1\151\21\0\1\152"
operator|+
literal|"\2\0\1\153\57\0\1\30\2\60\2\0\2\154\1\62"
operator|+
literal|"\1\0\1\60\2\0\1\30\1\0\1\40\1\0\1\41"
operator|+
literal|"\2\0\1\155\1\0\1\156\4\0\1\44\1\0\1\45"
operator|+
literal|"\1\0\1\46\2\0\1\47\3\0\1\157\2\0\1\160"
operator|+
literal|"\4\0\1\161\3\0\1\162\17\0\1\54\2\0\1\163"
operator|+
literal|"\21\0\1\164\2\0\1\165\57\0\1\30\1\61\7\0"
operator|+
literal|"\1\61\2\0\1\30\1\0\1\40\1\0\1\41\2\0"
operator|+
literal|"\1\166\1\0\1\43\4\0\1\44\1\0\1\45\1\0"
operator|+
literal|"\1\46\2\0\1\47\3\0\1\167\2\0\1\170\4\0"
operator|+
literal|"\1\52\3\0\1\171\17\0\1\54\2\0\1\172\21\0"
operator|+
literal|"\1\173\2\0\1\174\41\0\1\115\15\0\1\30\1\62"
operator|+
literal|"\1\60\1\117\3\0\1\62\1\0\1\62\2\0\1\30"
operator|+
literal|"\7\0\1\30\4\0\1\30\11\0\1\30\22\0\1\30"
operator|+
literal|"\3\0\1\30\13\0\1\31\2\0\1\31\10\0\1\30"
operator|+
literal|"\12\0\4\31\45\0\1\30\21\0\1\30\26\0\2\30"
operator|+
literal|"\23\0\1\31\1\30\44\0\1\31\21\0\1\31\46\0"
operator|+
literal|"\1\31\11\0\1\31\15\0\4\30\2\0\2\30\14\0"
operator|+
literal|"\3\30\1\31\1\0\2\31\11\0\3\30\3\0\1\30"
operator|+
literal|"\1\0\1\31\4\0\1\31\2\30\5\0\4\31\2\0"
operator|+
literal|"\1\30\1\31\12\0\4\31\1\0\2\30\1\0\1\31"
operator|+
literal|"\7\0\1\30\23\0\1\30\4\0\1\30\6\0\1\30"
operator|+
literal|"\3\0\1\30\6\0\1\30\5\0\1\30\2\0\2\30"
operator|+
literal|"\1\0\17\30\2\0\1\30\13\0\7\30\2\0\1\30"
operator|+
literal|"\1\0\1\30\1\0\1\30\2\0\1\30\1\0\1\30"
operator|+
literal|"\1\0\1\30\1\0\1\30\4\0\1\31\1\0\2\30"
operator|+
literal|"\5\0\1\30\1\0\1\30\2\0\3\30\1\0\1\30"
operator|+
literal|"\7\0\1\30\1\0\1\30\26\0\1\30\6\0\1\30"
operator|+
literal|"\3\0\1\30\3\0\1\30\7\0\1\30\31\0\20\30"
operator|+
literal|"\5\0\3\30\3\0\1\30\3\0\2\30\2\0\2\30"
operator|+
literal|"\4\0\1\30\4\31\4\0\1\30\4\0\1\30\2\0"
operator|+
literal|"\1\30\4\0\1\30\1\0\1\30\1\0\1\30\127\0"
operator|+
literal|"\2\31\15\0\4\31\60\0\1\31\15\0\2\31\10\0"
operator|+
literal|"\2\31\1\0\1\31\1\0\1\31\11\0\1\31\11\0"
operator|+
literal|"\2\31\6\0\1\31\2\0\4\31\3\0\1\31\2\0"
operator|+
literal|"\2\31\1\0\3\31\5\0\1\31\1\0\2\31\2\0"
operator|+
literal|"\2\31\1\0\4\31\5\0\1\31\1\0\2\31\44\0"
operator|+
literal|"\1\175\1\0\1\176\17\0\1\177\2\0\1\200\4\0"
operator|+
literal|"\1\201\3\0\1\202\22\0\1\203\21\0\1\204\2\0"
operator|+
literal|"\1\205\60\0\1\74\1\31\6\0\1\74\4\0\1\40"
operator|+
literal|"\1\0\1\41\2\0\1\206\1\0\1\64\4\0\1\44"
operator|+
literal|"\1\0\1\45\1\0\1\46\2\0\1\47\3\0\1\207"
operator|+
literal|"\2\0\1\210\4\0\1\67\3\0\1\211\17\0\1\54"
operator|+
literal|"\2\0\1\212\21\0\1\213\2\0\1\214\41\0\1\115"
operator|+
literal|"\15\0\1\30\1\75\1\31\1\117\3\0\1\75\1\0"
operator|+
literal|"\1\75\2\0\1\30\71\0\1\32\2\0\1\32\23\0"
operator|+
literal|"\4\32\211\0\1\32\102\0\1\32\44\0\1\32\1\0"
operator|+
literal|"\2\32\21\0\1\32\4\0\1\32\7\0\4\32\3\0"
operator|+
literal|"\1\32\22\0\1\32\166\0\1\32\215\0\4\32\155\0"
operator|+
literal|"\2\32\15\0\4\32\60\0\1\32\15\0\2\32\10\0"
operator|+
literal|"\2\32\1\0\1\32\1\0\1\32\11\0\1\32\11\0"
operator|+
literal|"\2\32\6\0\1\32\2\0\4\32\3\0\1\32\2\0"
operator|+
literal|"\2\32\1\0\3\32\5\0\1\32\1\0\2\32\2\0"
operator|+
literal|"\2\32\1\0\4\32\5\0\1\32\1\0\2\32\215\0"
operator|+
literal|"\1\32\40\0\1\30\4\0\1\30\11\0\1\30\22\0"
operator|+
literal|"\1\30\3\0\1\30\13\0\1\116\2\0\1\116\10\0"
operator|+
literal|"\1\30\12\0\4\116\45\0\1\30\21\0\1\30\26\0"
operator|+
literal|"\2\30\23\0\1\31\1\30\44\0\1\116\21\0\1\31"
operator|+
literal|"\46\0\1\31\11\0\1\116\15\0\4\30\2\0\2\30"
operator|+
literal|"\14\0\3\30\1\116\1\0\2\116\11\0\3\30\3\0"
operator|+
literal|"\1\30\1\0\1\116\4\0\1\116\2\30\5\0\4\116"
operator|+
literal|"\2\0\1\30\1\116\12\0\4\31\1\0\2\30\1\0"
operator|+
literal|"\1\116\7\0\1\30\23\0\1\30\4\0\1\30\6\0"
operator|+
literal|"\1\30\3\0\1\30\6\0\1\30\5\0\1\30\2\0"
operator|+
literal|"\2\30\1\0\17\30\2\0\1\30\13\0\7\30\2\0"
operator|+
literal|"\1\30\1\0\1\30\1\0\1\30\2\0\1\30\1\0"
operator|+
literal|"\1\30\1\0\1\30\1\0\1\30\4\0\1\116\1\0"
operator|+
literal|"\2\30\5\0\1\30\1\0\1\30\2\0\3\30\1\0"
operator|+
literal|"\1\30\7\0\1\30\1\0\1\30\26\0\1\30\6\0"
operator|+
literal|"\1\30\3\0\1\30\3\0\1\30\7\0\1\30\31\0"
operator|+
literal|"\20\30\5\0\3\30\3\0\1\30\3\0\2\30\2\0"
operator|+
literal|"\2\30\4\0\1\30\4\116\4\0\1\30\4\0\1\30"
operator|+
literal|"\2\0\1\30\4\0\1\30\1\0\1\30\1\0\1\30"
operator|+
literal|"\127\0\2\116\15\0\4\116\60\0\1\116\15\0\2\116"
operator|+
literal|"\10\0\2\116\1\0\1\116\1\0\1\116\11\0\1\116"
operator|+
literal|"\11\0\2\116\6\0\1\116\2\0\4\116\3\0\1\116"
operator|+
literal|"\2\0\2\116\1\0\3\116\5\0\1\116\1\0\2\116"
operator|+
literal|"\2\0\2\116\1\0\4\116\5\0\1\116\1\0\2\116"
operator|+
literal|"\215\0\1\117\37\0\1\215\21\0\1\216\2\0\1\217"
operator|+
literal|"\10\0\1\220\22\0\1\221\21\0\1\222\2\0\1\223"
operator|+
literal|"\41\0\1\115\16\0\1\117\1\0\1\117\3\0\1\62"
operator|+
literal|"\1\0\1\117\74\0\1\35\2\0\1\35\23\0\4\35"
operator|+
literal|"\211\0\1\35\102\0\1\35\44\0\1\35\1\0\2\35"
operator|+
literal|"\21\0\1\35\4\0\1\35\7\0\4\35\3\0\1\35"
operator|+
literal|"\22\0\1\35\166\0\1\35\215\0\4\35\155\0\2\35"
operator|+
literal|"\15\0\4\35\60\0\1\35\15\0\2\35\10\0\2\35"
operator|+
literal|"\1\0\1\35\1\0\1\35\11\0\1\35\11\0\2\35"
operator|+
literal|"\6\0\1\35\2\0\4\35\3\0\1\35\2\0\2\35"
operator|+
literal|"\1\0\3\35\5\0\1\35\1\0\2\35\2\0\2\35"
operator|+
literal|"\1\0\4\35\5\0\1\35\1\0\2\35\127\0\1\36"
operator|+
literal|"\2\0\1\36\23\0\4\36\211\0\1\36\102\0\1\36"
operator|+
literal|"\44\0\1\36\1\0\2\36\21\0\1\36\4\0\1\36"
operator|+
literal|"\7\0\4\36\3\0\1\36\22\0\1\36\166\0\1\36"
operator|+
literal|"\215\0\4\36\155\0\2\36\15\0\4\36\60\0\1\36"
operator|+
literal|"\15\0\2\36\10\0\2\36\1\0\1\36\1\0\1\36"
operator|+
literal|"\11\0\1\36\11\0\2\36\6\0\1\36\2\0\4\36"
operator|+
literal|"\3\0\1\36\2\0\2\36\1\0\3\36\5\0\1\36"
operator|+
literal|"\1\0\2\36\2\0\2\36\1\0\4\36\5\0\1\36"
operator|+
literal|"\1\0\2\36\45\0\1\30\4\0\1\30\11\0\1\30"
operator|+
literal|"\22\0\1\30\3\0\1\30\13\0\1\37\2\0\1\37"
operator|+
literal|"\10\0\1\30\12\0\4\37\45\0\1\30\21\0\1\30"
operator|+
literal|"\26\0\2\30\23\0\1\60\1\30\44\0\1\37\21\0"
operator|+
literal|"\1\60\46\0\1\60\11\0\1\37\15\0\4\30\2\0"
operator|+
literal|"\2\30\14\0\3\30\1\37\1\0\2\37\11\0\3\30"
operator|+
literal|"\3\0\1\30\1\0\1\37\4\0\1\37\2\30\5\0"
operator|+
literal|"\4\37\2\0\1\30\1\37\12\0\4\60\1\0\2\30"
operator|+
literal|"\1\0\1\37\7\0\1\30\23\0\1\30\4\0\1\30"
operator|+
literal|"\6\0\1\30\3\0\1\30\6\0\1\30\5\0\1\30"
operator|+
literal|"\2\0\2\30\1\0\17\30\2\0\1\30\13\0\7\30"
operator|+
literal|"\2\0\1\30\1\0\1\30\1\0\1\30\2\0\1\30"
operator|+
literal|"\1\0\1\30\1\0\1\30\1\0\1\30\4\0\1\37"
operator|+
literal|"\1\0\2\30\5\0\1\30\1\0\1\30\2\0\3\30"
operator|+
literal|"\1\0\1\30\7\0\1\30\1\0\1\30\26\0\1\30"
operator|+
literal|"\6\0\1\30\3\0\1\30\3\0\1\30\7\0\1\30"
operator|+
literal|"\31\0\20\30\5\0\3\30\3\0\1\30\3\0\2\30"
operator|+
literal|"\2\0\2\30\4\0\1\30\4\37\4\0\1\30\4\0"
operator|+
literal|"\1\30\2\0\1\30\4\0\1\30\1\0\1\30\1\0"
operator|+
literal|"\1\30\127\0\2\37\15\0\4\37\60\0\1\37\15\0"
operator|+
literal|"\2\37\10\0\2\37\1\0\1\37\1\0\1\37\11\0"
operator|+
literal|"\1\37\11\0\2\37\6\0\1\37\2\0\4\37\3\0"
operator|+
literal|"\1\37\2\0\2\37\1\0\3\37\5\0\1\37\1\0"
operator|+
literal|"\2\37\2\0\2\37\1\0\4\37\5\0\1\37\1\0"
operator|+
literal|"\2\37\45\0\1\30\4\0\1\30\11\0\1\30\22\0"
operator|+
literal|"\1\30\3\0\1\30\13\0\1\60\2\0\1\60\10\0"
operator|+
literal|"\1\30\12\0\4\60\45\0\1\30\21\0\1\30\26\0"
operator|+
literal|"\2\30\23\0\1\60\1\30\44\0\1\60\21\0\1\60"
operator|+
literal|"\46\0\1\60\11\0\1\60\15\0\4\30\2\0\2\30"
operator|+
literal|"\14\0\3\30\1\60\1\0\2\60\11\0\3\30\3\0"
operator|+
literal|"\1\30\1\0\1\60\4\0\1\60\2\30\5\0\4\60"
operator|+
literal|"\2\0\1\30\1\60\12\0\4\60\1\0\2\30\1\0"
operator|+
literal|"\1\60\7\0\1\30\23\0\1\30\4\0\1\30\6\0"
operator|+
literal|"\1\30\3\0\1\30\6\0\1\30\5\0\1\30\2\0"
operator|+
literal|"\2\30\1\0\17\30\2\0\1\30\13\0\7\30\2\0"
operator|+
literal|"\1\30\1\0\1\30\1\0\1\30\2\0\1\30\1\0"
operator|+
literal|"\1\30\1\0\1\30\1\0\1\30\4\0\1\60\1\0"
operator|+
literal|"\2\30\5\0\1\30\1\0\1\30\2\0\3\30\1\0"
operator|+
literal|"\1\30\7\0\1\30\1\0\1\30\26\0\1\30\6\0"
operator|+
literal|"\1\30\3\0\1\30\3\0\1\30\7\0\1\30\31\0"
operator|+
literal|"\20\30\5\0\3\30\3\0\1\30\3\0\2\30\2\0"
operator|+
literal|"\2\30\4\0\1\30\4\60\4\0\1\30\4\0\1\30"
operator|+
literal|"\2\0\1\30\4\0\1\30\1\0\1\30\1\0\1\30"
operator|+
literal|"\127\0\2\60\15\0\4\60\60\0\1\60\15\0\2\60"
operator|+
literal|"\10\0\2\60\1\0\1\60\1\0\1\60\11\0\1\60"
operator|+
literal|"\11\0\2\60\6\0\1\60\2\0\4\60\3\0\1\60"
operator|+
literal|"\2\0\2\60\1\0\3\60\5\0\1\60\1\0\2\60"
operator|+
literal|"\2\0\2\60\1\0\4\60\5\0\1\60\1\0\2\60"
operator|+
literal|"\44\0\1\224\1\0\1\225\17\0\1\226\2\0\1\227"
operator|+
literal|"\4\0\1\230\3\0\1\231\22\0\1\232\21\0\1\233"
operator|+
literal|"\2\0\1\234\60\0\1\154\1\60\6\0\1\154\12\0"
operator|+
literal|"\1\30\4\0\1\30\11\0\1\30\22\0\1\30\3\0"
operator|+
literal|"\1\30\13\0\1\61\2\0\1\61\10\0\1\30\12\0"
operator|+
literal|"\4\61\45\0\1\30\24\0\1\30\3\0\4\30\1\0"
operator|+
literal|"\1\30\4\0\1\30\1\0\2\30\2\0\2\30\2\0"
operator|+
literal|"\3\30\1\0\1\30\1\0\1\30\2\0\4\30\1\0"
operator|+
literal|"\3\30\1\0\1\30\1\0\3\30\1\0\2\30\1\0"
operator|+
literal|"\4\30\1\0\2\30\2\0\10\30\1\0\2\30\1\0"
operator|+
literal|"\11\30\1\0\10\30\1\0\13\30\2\0\1\30\1\0"
operator|+
literal|"\1\30\1\0\2\30\2\0\1\30\1\0\1\30\3\0"
operator|+
literal|"\1\30\17\0\1\30\26\0\2\30\24\0\1\30\44\0"
operator|+
literal|"\1\61\102\0\1\61\15\0\4\30\2\0\2\30\14\0"
operator|+
literal|"\3\30\1\61\1\0\2\61\11\0\3\30\3\0\1\30"
operator|+
literal|"\1\0\1\61\4\0\1\61\2\30\5\0\4\61\2\0"
operator|+
literal|"\1\30\1\61\17\0\2\30\1\0\1\61\7\0\1\30"
operator|+
literal|"\37\0\1\30\3\0\2\30\12\0\2\30\1\0\3\30"
operator|+
literal|"\7\0\1\30\6\0\2\30\1\0\2\30\6\0\1\30"
operator|+
literal|"\4\0\2\30\2\0\2\30\5\0\3\30\10\0\1\30"
operator|+
literal|"\16\0\1\30\7\0\1\30\7\0\1\30\23\0\1\30"
operator|+
literal|"\4\0\1\30\6\0\1\30\3\0\1\30\6\0\1\30"
operator|+
literal|"\5\0\1\30\2\0\2\30\1\0\17\30\2\0\1\30"
operator|+
literal|"\13\0\7\30\2\0\1\30\1\0\1\30\1\0\1\30"
operator|+
literal|"\2\0\1\30\1\0\1\30\1\0\1\30\1\0\1\30"
operator|+
literal|"\4\0\1\61\1\0\2\30\5\0\1\30\1\0\1\30"
operator|+
literal|"\2\0\3\30\1\0\1\30\7\0\1\30\1\0\1\30"
operator|+
literal|"\26\0\1\30\6\0\1\30\3\0\1\30\3\0\1\30"
operator|+
literal|"\7\0\1\30\31\0\20\30\5\0\3\30\3\0\1\30"
operator|+
literal|"\3\0\2\30\2\0\2\30\4\0\1\30\4\61\4\0"
operator|+
literal|"\1\30\4\0\1\30\2\0\1\30\4\0\1\30\1\0"
operator|+
literal|"\1\30\1\0\1\30\127\0\2\61\15\0\4\61\60\0"
operator|+
literal|"\1\61\15\0\2\61\10\0\2\61\1\0\1\61\1\0"
operator|+
literal|"\1\61\11\0\1\61\11\0\2\61\6\0\1\61\2\0"
operator|+
literal|"\4\61\3\0\1\61\2\0\2\61\1\0\3\61\5\0"
operator|+
literal|"\1\61\1\0\2\61\2\0\2\61\1\0\4\61\5\0"
operator|+
literal|"\1\61\1\0\2\61\45\0\1\30\4\0\1\30\11\0"
operator|+
literal|"\1\30\22\0\1\30\3\0\1\30\13\0\1\62\2\0"
operator|+
literal|"\1\62\10\0\1\30\12\0\4\62\45\0\1\30\21\0"
operator|+
literal|"\1\30\26\0\2\30\23\0\1\60\1\30\44\0\1\62"
operator|+
literal|"\21\0\1\60\46\0\1\60\11\0\1\62\15\0\4\30"
operator|+
literal|"\2\0\2\30\14\0\3\30\1\62\1\0\2\62\11\0"
operator|+
literal|"\3\30\3\0\1\30\1\0\1\62\4\0\1\62\2\30"
operator|+
literal|"\5\0\4\62\2\0\1\30\1\62\12\0\4\60\1\0"
operator|+
literal|"\2\30\1\0\1\62\7\0\1\30\23\0\1\30\4\0"
operator|+
literal|"\1\30\6\0\1\30\3\0\1\30\6\0\1\30\5\0"
operator|+
literal|"\1\30\2\0\2\30\1\0\17\30\2\0\1\30\13\0"
operator|+
literal|"\7\30\2\0\1\30\1\0\1\30\1\0\1\30\2\0"
operator|+
literal|"\1\30\1\0\1\30\1\0\1\30\1\0\1\30\4\0"
operator|+
literal|"\1\62\1\0\2\30\5\0\1\30\1\0\1\30\2\0"
operator|+
literal|"\3\30\1\0\1\30\7\0\1\30\1\0\1\30\26\0"
operator|+
literal|"\1\30\6\0\1\30\3\0\1\30\3\0\1\30\7\0"
operator|+
literal|"\1\30\31\0\20\30\5\0\3\30\3\0\1\30\3\0"
operator|+
literal|"\2\30\2\0\2\30\4\0\1\30\4\62\4\0\1\30"
operator|+
literal|"\4\0\1\30\2\0\1\30\4\0\1\30\1\0\1\30"
operator|+
literal|"\1\0\1\30\127\0\2\62\15\0\4\62\60\0\1\62"
operator|+
literal|"\15\0\2\62\10\0\2\62\1\0\1\62\1\0\1\62"
operator|+
literal|"\11\0\1\62\11\0\2\62\6\0\1\62\2\0\4\62"
operator|+
literal|"\3\0\1\62\2\0\2\62\1\0\3\62\5\0\1\62"
operator|+
literal|"\1\0\2\62\2\0\2\62\1\0\4\62\5\0\1\62"
operator|+
literal|"\1\0\2\62\127\0\1\74\2\0\1\74\23\0\4\74"
operator|+
literal|"\105\0\1\31\132\0\1\31\113\0\1\31\45\0\1\74"
operator|+
literal|"\21\0\1\31\46\0\1\31\11\0\1\74\44\0\1\74"
operator|+
literal|"\1\0\2\74\21\0\1\74\4\0\1\74\7\0\4\74"
operator|+
literal|"\3\0\1\74\12\0\4\31\4\0\1\74\205\0\2\31"
operator|+
literal|"\170\0\1\74\215\0\4\74\155\0\2\74\15\0\4\74"
operator|+
literal|"\60\0\1\74\15\0\2\74\10\0\2\74\1\0\1\74"
operator|+
literal|"\1\0\1\74\11\0\1\74\11\0\2\74\6\0\1\74"
operator|+
literal|"\2\0\4\74\3\0\1\74\2\0\2\74\1\0\3\74"
operator|+
literal|"\5\0\1\74\1\0\2\74\2\0\2\74\1\0\4\74"
operator|+
literal|"\5\0\1\74\1\0\2\74\45\0\1\30\4\0\1\30"
operator|+
literal|"\11\0\1\30\22\0\1\30\3\0\1\30\13\0\1\75"
operator|+
literal|"\2\0\1\75\10\0\1\30\12\0\4\75\45\0\1\30"
operator|+
literal|"\21\0\1\30\26\0\2\30\23\0\1\31\1\30\44\0"
operator|+
literal|"\1\75\21\0\1\31\46\0\1\31\11\0\1\75\15\0"
operator|+
literal|"\4\30\2\0\2\30\14\0\3\30\1\75\1\0\2\75"
operator|+
literal|"\11\0\3\30\3\0\1\30\1\0\1\75\4\0\1\75"
operator|+
literal|"\2\30\5\0\4\75\2\0\1\30\1\75\12\0\4\31"
operator|+
literal|"\1\0\2\30\1\0\1\75\7\0\1\30\23\0\1\30"
operator|+
literal|"\4\0\1\30\6\0\1\30\3\0\1\30\6\0\1\30"
operator|+
literal|"\5\0\1\30\2\0\2\30\1\0\17\30\2\0\1\30"
operator|+
literal|"\13\0\7\30\2\0\1\30\1\0\1\30\1\0\1\30"
operator|+
literal|"\2\0\1\30\1\0\1\30\1\0\1\30\1\0\1\30"
operator|+
literal|"\4\0\1\75\1\0\2\30\5\0\1\30\1\0\1\30"
operator|+
literal|"\2\0\3\30\1\0\1\30\7\0\1\30\1\0\1\30"
operator|+
literal|"\26\0\1\30\6\0\1\30\3\0\1\30\3\0\1\30"
operator|+
literal|"\7\0\1\30\31\0\20\30\5\0\3\30\3\0\1\30"
operator|+
literal|"\3\0\2\30\2\0\2\30\4\0\1\30\4\75\4\0"
operator|+
literal|"\1\30\4\0\1\30\2\0\1\30\4\0\1\30\1\0"
operator|+
literal|"\1\30\1\0\1\30\127\0\2\75\15\0\4\75\60\0"
operator|+
literal|"\1\75\15\0\2\75\10\0\2\75\1\0\1\75\1\0"
operator|+
literal|"\1\75\11\0\1\75\11\0\2\75\6\0\1\75\2\0"
operator|+
literal|"\4\75\3\0\1\75\2\0\2\75\1\0\3\75\5\0"
operator|+
literal|"\1\75\1\0\2\75\2\0\2\75\1\0\4\75\5\0"
operator|+
literal|"\1\75\1\0\2\75\127\0\1\117\2\0\1\117\23\0"
operator|+
literal|"\4\117\211\0\1\117\102\0\1\117\44\0\1\117\1\0"
operator|+
literal|"\2\117\21\0\1\117\4\0\1\117\7\0\4\117\3\0"
operator|+
literal|"\1\117\22\0\1\117\166\0\1\117\215\0\4\117\155\0"
operator|+
literal|"\2\117\15\0\4\117\60\0\1\117\15\0\2\117\10\0"
operator|+
literal|"\2\117\1\0\1\117\1\0\1\117\11\0\1\117\11\0"
operator|+
literal|"\2\117\6\0\1\117\2\0\4\117\3\0\1\117\2\0"
operator|+
literal|"\2\117\1\0\3\117\5\0\1\117\1\0\2\117\2\0"
operator|+
literal|"\2\117\1\0\4\117\5\0\1\117\1\0\2\117\127\0"
operator|+
literal|"\1\154\2\0\1\154\23\0\4\154\105\0\1\60\132\0"
operator|+
literal|"\1\60\113\0\1\60\45\0\1\154\21\0\1\60\46\0"
operator|+
literal|"\1\60\11\0\1\154\44\0\1\154\1\0\2\154\21\0"
operator|+
literal|"\1\154\4\0\1\154\7\0\4\154\3\0\1\154\12\0"
operator|+
literal|"\4\60\4\0\1\154\205\0\2\60\170\0\1\154\215\0"
operator|+
literal|"\4\154\155\0\2\154\15\0\4\154\60\0\1\154\15\0"
operator|+
literal|"\2\154\10\0\2\154\1\0\1\154\1\0\1\154\11\0"
operator|+
literal|"\1\154\11\0\2\154\6\0\1\154\2\0\4\154\3\0"
operator|+
literal|"\1\154\2\0\2\154\1\0\3\154\5\0\1\154\1\0"
operator|+
literal|"\2\154\2\0\2\154\1\0\4\154\5\0\1\154\1\0"
operator|+
literal|"\2\154\36\0"
decl_stmt|;
DECL|method|zzUnpackTrans
specifier|private
specifier|static
name|int
index|[]
name|zzUnpackTrans
parameter_list|()
block|{
name|int
index|[]
name|result
init|=
operator|new
name|int
index|[
literal|20002
index|]
decl_stmt|;
name|int
name|offset
init|=
literal|0
decl_stmt|;
name|offset
operator|=
name|zzUnpackTrans
argument_list|(
name|ZZ_TRANS_PACKED_0
argument_list|,
name|offset
argument_list|,
name|result
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
DECL|method|zzUnpackTrans
specifier|private
specifier|static
name|int
name|zzUnpackTrans
parameter_list|(
name|String
name|packed
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
index|[]
name|result
parameter_list|)
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|/* index in packed string  */
name|int
name|j
init|=
name|offset
decl_stmt|;
comment|/* index in unpacked array */
name|int
name|l
init|=
name|packed
operator|.
name|length
argument_list|()
decl_stmt|;
while|while
condition|(
name|i
operator|<
name|l
condition|)
block|{
name|int
name|count
init|=
name|packed
operator|.
name|charAt
argument_list|(
name|i
operator|++
argument_list|)
decl_stmt|;
name|int
name|value
init|=
name|packed
operator|.
name|charAt
argument_list|(
name|i
operator|++
argument_list|)
decl_stmt|;
name|value
operator|--
expr_stmt|;
do|do
name|result
index|[
name|j
operator|++
index|]
operator|=
name|value
expr_stmt|;
do|while
condition|(
operator|--
name|count
operator|>
literal|0
condition|)
do|;
block|}
return|return
name|j
return|;
block|}
comment|/* error codes */
DECL|field|ZZ_UNKNOWN_ERROR
specifier|private
specifier|static
specifier|final
name|int
name|ZZ_UNKNOWN_ERROR
init|=
literal|0
decl_stmt|;
DECL|field|ZZ_NO_MATCH
specifier|private
specifier|static
specifier|final
name|int
name|ZZ_NO_MATCH
init|=
literal|1
decl_stmt|;
DECL|field|ZZ_PUSHBACK_2BIG
specifier|private
specifier|static
specifier|final
name|int
name|ZZ_PUSHBACK_2BIG
init|=
literal|2
decl_stmt|;
comment|/* error messages for the codes above */
DECL|field|ZZ_ERROR_MSG
specifier|private
specifier|static
specifier|final
name|String
name|ZZ_ERROR_MSG
index|[]
init|=
block|{
literal|"Unkown internal scanner error"
block|,
literal|"Error: could not match input"
block|,
literal|"Error: pushback value was too large"
block|}
decl_stmt|;
comment|/**    * ZZ_ATTRIBUTE[aState] contains the attributes of state<code>aState</code>    */
DECL|field|ZZ_ATTRIBUTE
specifier|private
specifier|static
specifier|final
name|int
index|[]
name|ZZ_ATTRIBUTE
init|=
name|zzUnpackAttribute
argument_list|()
decl_stmt|;
DECL|field|ZZ_ATTRIBUTE_PACKED_0
specifier|private
specifier|static
specifier|final
name|String
name|ZZ_ATTRIBUTE_PACKED_0
init|=
literal|"\1\0\1\11\35\1\20\0\1\1\1\0\1\1\12\0"
operator|+
literal|"\1\1\21\0\1\1\115\0"
decl_stmt|;
DECL|method|zzUnpackAttribute
specifier|private
specifier|static
name|int
index|[]
name|zzUnpackAttribute
parameter_list|()
block|{
name|int
index|[]
name|result
init|=
operator|new
name|int
index|[
literal|156
index|]
decl_stmt|;
name|int
name|offset
init|=
literal|0
decl_stmt|;
name|offset
operator|=
name|zzUnpackAttribute
argument_list|(
name|ZZ_ATTRIBUTE_PACKED_0
argument_list|,
name|offset
argument_list|,
name|result
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
DECL|method|zzUnpackAttribute
specifier|private
specifier|static
name|int
name|zzUnpackAttribute
parameter_list|(
name|String
name|packed
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
index|[]
name|result
parameter_list|)
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|/* index in packed string  */
name|int
name|j
init|=
name|offset
decl_stmt|;
comment|/* index in unpacked array */
name|int
name|l
init|=
name|packed
operator|.
name|length
argument_list|()
decl_stmt|;
while|while
condition|(
name|i
operator|<
name|l
condition|)
block|{
name|int
name|count
init|=
name|packed
operator|.
name|charAt
argument_list|(
name|i
operator|++
argument_list|)
decl_stmt|;
name|int
name|value
init|=
name|packed
operator|.
name|charAt
argument_list|(
name|i
operator|++
argument_list|)
decl_stmt|;
do|do
name|result
index|[
name|j
operator|++
index|]
operator|=
name|value
expr_stmt|;
do|while
condition|(
operator|--
name|count
operator|>
literal|0
condition|)
do|;
block|}
return|return
name|j
return|;
block|}
comment|/** the input device */
DECL|field|zzReader
specifier|private
name|java
operator|.
name|io
operator|.
name|Reader
name|zzReader
decl_stmt|;
comment|/** the current state of the DFA */
DECL|field|zzState
specifier|private
name|int
name|zzState
decl_stmt|;
comment|/** the current lexical state */
DECL|field|zzLexicalState
specifier|private
name|int
name|zzLexicalState
init|=
name|YYINITIAL
decl_stmt|;
comment|/** this buffer contains the current text to be matched and is       the source of the yytext() string */
DECL|field|zzBuffer
specifier|private
name|char
name|zzBuffer
index|[]
init|=
operator|new
name|char
index|[
name|ZZ_BUFFERSIZE
index|]
decl_stmt|;
comment|/** the textposition at the last accepting state */
DECL|field|zzMarkedPos
specifier|private
name|int
name|zzMarkedPos
decl_stmt|;
comment|/** the current text position in the buffer */
DECL|field|zzCurrentPos
specifier|private
name|int
name|zzCurrentPos
decl_stmt|;
comment|/** startRead marks the beginning of the yytext() string in the buffer */
DECL|field|zzStartRead
specifier|private
name|int
name|zzStartRead
decl_stmt|;
comment|/** endRead marks the last character in the buffer, that has been read       from input */
DECL|field|zzEndRead
specifier|private
name|int
name|zzEndRead
decl_stmt|;
comment|/** number of newlines encountered up to the start of the matched text */
DECL|field|yyline
specifier|private
name|int
name|yyline
decl_stmt|;
comment|/** the number of characters up to the start of the matched text */
DECL|field|yychar
specifier|private
name|int
name|yychar
decl_stmt|;
comment|/**    * the number of characters from the last newline up to the start of the     * matched text    */
DECL|field|yycolumn
specifier|private
name|int
name|yycolumn
decl_stmt|;
comment|/**     * zzAtBOL == true<=> the scanner is currently at the beginning of a line    */
DECL|field|zzAtBOL
specifier|private
name|boolean
name|zzAtBOL
init|=
literal|true
decl_stmt|;
comment|/** zzAtEOF == true<=> the scanner is at the EOF */
DECL|field|zzAtEOF
specifier|private
name|boolean
name|zzAtEOF
decl_stmt|;
comment|/** denotes if the user-EOF-code has already been executed */
DECL|field|zzEOFDone
specifier|private
name|boolean
name|zzEOFDone
decl_stmt|;
comment|/* user code: */
comment|/** Alphanumeric sequences */
DECL|field|WORD_TYPE
specifier|public
specifier|static
specifier|final
name|int
name|WORD_TYPE
init|=
name|StandardTokenizer
operator|.
name|ALPHANUM
decl_stmt|;
comment|/** Numbers */
DECL|field|NUMERIC_TYPE
specifier|public
specifier|static
specifier|final
name|int
name|NUMERIC_TYPE
init|=
name|StandardTokenizer
operator|.
name|NUM
decl_stmt|;
comment|/**    * Chars in class \p{Line_Break = Complex_Context} are from South East Asian    * scripts (Thai, Lao, Myanmar, Khmer, etc.).  Sequences of these are kept     * together as as a single token rather than broken up, because the logic    * required to break them at word boundaries is too complex for UAX#29.    *<p>    * See Unicode Line Breaking Algorithm: http://www.unicode.org/reports/tr14/#SA    */
DECL|field|SOUTH_EAST_ASIAN_TYPE
specifier|public
specifier|static
specifier|final
name|int
name|SOUTH_EAST_ASIAN_TYPE
init|=
name|StandardTokenizer
operator|.
name|SOUTHEAST_ASIAN
decl_stmt|;
DECL|field|IDEOGRAPHIC_TYPE
specifier|public
specifier|static
specifier|final
name|int
name|IDEOGRAPHIC_TYPE
init|=
name|StandardTokenizer
operator|.
name|IDEOGRAPHIC
decl_stmt|;
DECL|field|HIRAGANA_TYPE
specifier|public
specifier|static
specifier|final
name|int
name|HIRAGANA_TYPE
init|=
name|StandardTokenizer
operator|.
name|HIRAGANA
decl_stmt|;
DECL|field|KATAKANA_TYPE
specifier|public
specifier|static
specifier|final
name|int
name|KATAKANA_TYPE
init|=
name|StandardTokenizer
operator|.
name|KATAKANA
decl_stmt|;
DECL|field|HANGUL_TYPE
specifier|public
specifier|static
specifier|final
name|int
name|HANGUL_TYPE
init|=
name|StandardTokenizer
operator|.
name|HANGUL
decl_stmt|;
DECL|method|yychar
specifier|public
specifier|final
name|int
name|yychar
parameter_list|()
block|{
return|return
name|yychar
return|;
block|}
comment|/**    * Fills CharTermAttribute with the current token text.    */
DECL|method|getText
specifier|public
specifier|final
name|void
name|getText
parameter_list|(
name|CharTermAttribute
name|t
parameter_list|)
block|{
name|t
operator|.
name|copyBuffer
argument_list|(
name|zzBuffer
argument_list|,
name|zzStartRead
argument_list|,
name|zzMarkedPos
operator|-
name|zzStartRead
argument_list|)
expr_stmt|;
block|}
comment|/**    * Creates a new scanner    * There is also a java.io.InputStream version of this constructor.    *    * @param   in  the java.io.Reader to read input from.    */
DECL|method|StandardTokenizerImpl
specifier|public
name|StandardTokenizerImpl
parameter_list|(
name|java
operator|.
name|io
operator|.
name|Reader
name|in
parameter_list|)
block|{
name|this
operator|.
name|zzReader
operator|=
name|in
expr_stmt|;
block|}
comment|/**     * Unpacks the compressed character translation table.    *    * @param packed   the packed character translation table    * @return         the unpacked character translation table    */
DECL|method|zzUnpackCMap
specifier|private
specifier|static
name|char
index|[]
name|zzUnpackCMap
parameter_list|(
name|String
name|packed
parameter_list|)
block|{
name|char
index|[]
name|map
init|=
operator|new
name|char
index|[
literal|0x10000
index|]
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|/* index in packed string  */
name|int
name|j
init|=
literal|0
decl_stmt|;
comment|/* index in unpacked array */
while|while
condition|(
name|i
operator|<
literal|2848
condition|)
block|{
name|int
name|count
init|=
name|packed
operator|.
name|charAt
argument_list|(
name|i
operator|++
argument_list|)
decl_stmt|;
name|char
name|value
init|=
name|packed
operator|.
name|charAt
argument_list|(
name|i
operator|++
argument_list|)
decl_stmt|;
do|do
name|map
index|[
name|j
operator|++
index|]
operator|=
name|value
expr_stmt|;
do|while
condition|(
operator|--
name|count
operator|>
literal|0
condition|)
do|;
block|}
return|return
name|map
return|;
block|}
comment|/**    * Refills the input buffer.    *    * @return<code>false</code>, iff there was new input.    *     * @exception   java.io.IOException  if any I/O-Error occurs    */
DECL|method|zzRefill
specifier|private
name|boolean
name|zzRefill
parameter_list|()
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
comment|/* first: make room (if you can) */
if|if
condition|(
name|zzStartRead
operator|>
literal|0
condition|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|zzBuffer
argument_list|,
name|zzStartRead
argument_list|,
name|zzBuffer
argument_list|,
literal|0
argument_list|,
name|zzEndRead
operator|-
name|zzStartRead
argument_list|)
expr_stmt|;
comment|/* translate stored positions */
name|zzEndRead
operator|-=
name|zzStartRead
expr_stmt|;
name|zzCurrentPos
operator|-=
name|zzStartRead
expr_stmt|;
name|zzMarkedPos
operator|-=
name|zzStartRead
expr_stmt|;
name|zzStartRead
operator|=
literal|0
expr_stmt|;
block|}
comment|/* is the buffer big enough? */
if|if
condition|(
name|zzCurrentPos
operator|>=
name|zzBuffer
operator|.
name|length
condition|)
block|{
comment|/* if not: blow it up */
name|char
name|newBuffer
index|[]
init|=
operator|new
name|char
index|[
name|zzCurrentPos
operator|*
literal|2
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|zzBuffer
argument_list|,
literal|0
argument_list|,
name|newBuffer
argument_list|,
literal|0
argument_list|,
name|zzBuffer
operator|.
name|length
argument_list|)
expr_stmt|;
name|zzBuffer
operator|=
name|newBuffer
expr_stmt|;
block|}
comment|/* finally: fill the buffer with new input */
name|int
name|numRead
init|=
name|zzReader
operator|.
name|read
argument_list|(
name|zzBuffer
argument_list|,
name|zzEndRead
argument_list|,
name|zzBuffer
operator|.
name|length
operator|-
name|zzEndRead
argument_list|)
decl_stmt|;
if|if
condition|(
name|numRead
operator|>
literal|0
condition|)
block|{
name|zzEndRead
operator|+=
name|numRead
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// unlikely but not impossible: read 0 characters, but not at end of stream
if|if
condition|(
name|numRead
operator|==
literal|0
condition|)
block|{
name|int
name|c
init|=
name|zzReader
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|c
operator|==
operator|-
literal|1
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
name|zzBuffer
index|[
name|zzEndRead
operator|++
index|]
operator|=
operator|(
name|char
operator|)
name|c
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
comment|// numRead< 0
return|return
literal|true
return|;
block|}
comment|/**    * Closes the input stream.    */
DECL|method|yyclose
specifier|public
specifier|final
name|void
name|yyclose
parameter_list|()
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
name|zzAtEOF
operator|=
literal|true
expr_stmt|;
comment|/* indicate end of file */
name|zzEndRead
operator|=
name|zzStartRead
expr_stmt|;
comment|/* invalidate buffer    */
if|if
condition|(
name|zzReader
operator|!=
literal|null
condition|)
name|zzReader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * Resets the scanner to read from a new input stream.    * Does not close the old reader.    *    * All internal variables are reset, the old input stream     *<b>cannot</b> be reused (internal buffer is discarded and lost).    * Lexical state is set to<tt>ZZ_INITIAL</tt>.    *    * Internal scan buffer is resized down to its initial length, if it has grown.    *    * @param reader   the new input stream     */
DECL|method|yyreset
specifier|public
specifier|final
name|void
name|yyreset
parameter_list|(
name|java
operator|.
name|io
operator|.
name|Reader
name|reader
parameter_list|)
block|{
name|zzReader
operator|=
name|reader
expr_stmt|;
name|zzAtBOL
operator|=
literal|true
expr_stmt|;
name|zzAtEOF
operator|=
literal|false
expr_stmt|;
name|zzEOFDone
operator|=
literal|false
expr_stmt|;
name|zzEndRead
operator|=
name|zzStartRead
operator|=
literal|0
expr_stmt|;
name|zzCurrentPos
operator|=
name|zzMarkedPos
operator|=
literal|0
expr_stmt|;
name|yyline
operator|=
name|yychar
operator|=
name|yycolumn
operator|=
literal|0
expr_stmt|;
name|zzLexicalState
operator|=
name|YYINITIAL
expr_stmt|;
if|if
condition|(
name|zzBuffer
operator|.
name|length
operator|>
name|ZZ_BUFFERSIZE
condition|)
name|zzBuffer
operator|=
operator|new
name|char
index|[
name|ZZ_BUFFERSIZE
index|]
expr_stmt|;
block|}
comment|/**    * Returns the current lexical state.    */
DECL|method|yystate
specifier|public
specifier|final
name|int
name|yystate
parameter_list|()
block|{
return|return
name|zzLexicalState
return|;
block|}
comment|/**    * Enters a new lexical state    *    * @param newState the new lexical state    */
DECL|method|yybegin
specifier|public
specifier|final
name|void
name|yybegin
parameter_list|(
name|int
name|newState
parameter_list|)
block|{
name|zzLexicalState
operator|=
name|newState
expr_stmt|;
block|}
comment|/**    * Returns the text matched by the current regular expression.    */
DECL|method|yytext
specifier|public
specifier|final
name|String
name|yytext
parameter_list|()
block|{
return|return
operator|new
name|String
argument_list|(
name|zzBuffer
argument_list|,
name|zzStartRead
argument_list|,
name|zzMarkedPos
operator|-
name|zzStartRead
argument_list|)
return|;
block|}
comment|/**    * Returns the character at position<tt>pos</tt> from the     * matched text.     *     * It is equivalent to yytext().charAt(pos), but faster    *    * @param pos the position of the character to fetch.     *            A value from 0 to yylength()-1.    *    * @return the character at position pos    */
DECL|method|yycharat
specifier|public
specifier|final
name|char
name|yycharat
parameter_list|(
name|int
name|pos
parameter_list|)
block|{
return|return
name|zzBuffer
index|[
name|zzStartRead
operator|+
name|pos
index|]
return|;
block|}
comment|/**    * Returns the length of the matched text region.    */
DECL|method|yylength
specifier|public
specifier|final
name|int
name|yylength
parameter_list|()
block|{
return|return
name|zzMarkedPos
operator|-
name|zzStartRead
return|;
block|}
comment|/**    * Reports an error that occured while scanning.    *    * In a wellformed scanner (no or only correct usage of     * yypushback(int) and a match-all fallback rule) this method     * will only be called with things that "Can't Possibly Happen".    * If this method is called, something is seriously wrong    * (e.g. a JFlex bug producing a faulty scanner etc.).    *    * Usual syntax/scanner level error handling should be done    * in error fallback rules.    *    * @param   errorCode  the code of the errormessage to display    */
DECL|method|zzScanError
specifier|private
name|void
name|zzScanError
parameter_list|(
name|int
name|errorCode
parameter_list|)
block|{
name|String
name|message
decl_stmt|;
try|try
block|{
name|message
operator|=
name|ZZ_ERROR_MSG
index|[
name|errorCode
index|]
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArrayIndexOutOfBoundsException
name|e
parameter_list|)
block|{
name|message
operator|=
name|ZZ_ERROR_MSG
index|[
name|ZZ_UNKNOWN_ERROR
index|]
expr_stmt|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
name|message
argument_list|)
throw|;
block|}
comment|/**    * Pushes the specified amount of characters back into the input stream.    *    * They will be read again by then next call of the scanning method    *    * @param number  the number of characters to be read again.    *                This number must not be greater than yylength()!    */
DECL|method|yypushback
specifier|public
name|void
name|yypushback
parameter_list|(
name|int
name|number
parameter_list|)
block|{
if|if
condition|(
name|number
operator|>
name|yylength
argument_list|()
condition|)
name|zzScanError
argument_list|(
name|ZZ_PUSHBACK_2BIG
argument_list|)
expr_stmt|;
name|zzMarkedPos
operator|-=
name|number
expr_stmt|;
block|}
comment|/**    * Resumes scanning until the next regular expression is matched,    * the end of input is encountered or an I/O-Error occurs.    *    * @return      the next token    * @exception   java.io.IOException  if any I/O-Error occurs    */
DECL|method|getNextToken
specifier|public
name|int
name|getNextToken
parameter_list|()
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
name|int
name|zzInput
decl_stmt|;
name|int
name|zzAction
decl_stmt|;
comment|// cached fields:
name|int
name|zzCurrentPosL
decl_stmt|;
name|int
name|zzMarkedPosL
decl_stmt|;
name|int
name|zzEndReadL
init|=
name|zzEndRead
decl_stmt|;
name|char
index|[]
name|zzBufferL
init|=
name|zzBuffer
decl_stmt|;
name|char
index|[]
name|zzCMapL
init|=
name|ZZ_CMAP
decl_stmt|;
name|int
index|[]
name|zzTransL
init|=
name|ZZ_TRANS
decl_stmt|;
name|int
index|[]
name|zzRowMapL
init|=
name|ZZ_ROWMAP
decl_stmt|;
name|int
index|[]
name|zzAttrL
init|=
name|ZZ_ATTRIBUTE
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|zzMarkedPosL
operator|=
name|zzMarkedPos
expr_stmt|;
name|yychar
operator|+=
name|zzMarkedPosL
operator|-
name|zzStartRead
expr_stmt|;
name|zzAction
operator|=
operator|-
literal|1
expr_stmt|;
name|zzCurrentPosL
operator|=
name|zzCurrentPos
operator|=
name|zzStartRead
operator|=
name|zzMarkedPosL
expr_stmt|;
name|zzState
operator|=
name|ZZ_LEXSTATE
index|[
name|zzLexicalState
index|]
expr_stmt|;
comment|// set up zzAction for empty match case:
name|int
name|zzAttributes
init|=
name|zzAttrL
index|[
name|zzState
index|]
decl_stmt|;
if|if
condition|(
operator|(
name|zzAttributes
operator|&
literal|1
operator|)
operator|==
literal|1
condition|)
block|{
name|zzAction
operator|=
name|zzState
expr_stmt|;
block|}
name|zzForAction
label|:
block|{
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
name|zzCurrentPosL
operator|<
name|zzEndReadL
condition|)
name|zzInput
operator|=
name|zzBufferL
index|[
name|zzCurrentPosL
operator|++
index|]
expr_stmt|;
elseif|else
if|if
condition|(
name|zzAtEOF
condition|)
block|{
name|zzInput
operator|=
name|YYEOF
expr_stmt|;
break|break
name|zzForAction
break|;
block|}
else|else
block|{
comment|// store back cached positions
name|zzCurrentPos
operator|=
name|zzCurrentPosL
expr_stmt|;
name|zzMarkedPos
operator|=
name|zzMarkedPosL
expr_stmt|;
name|boolean
name|eof
init|=
name|zzRefill
argument_list|()
decl_stmt|;
comment|// get translated positions and possibly new buffer
name|zzCurrentPosL
operator|=
name|zzCurrentPos
expr_stmt|;
name|zzMarkedPosL
operator|=
name|zzMarkedPos
expr_stmt|;
name|zzBufferL
operator|=
name|zzBuffer
expr_stmt|;
name|zzEndReadL
operator|=
name|zzEndRead
expr_stmt|;
if|if
condition|(
name|eof
condition|)
block|{
name|zzInput
operator|=
name|YYEOF
expr_stmt|;
break|break
name|zzForAction
break|;
block|}
else|else
block|{
name|zzInput
operator|=
name|zzBufferL
index|[
name|zzCurrentPosL
operator|++
index|]
expr_stmt|;
block|}
block|}
name|int
name|zzNext
init|=
name|zzTransL
index|[
name|zzRowMapL
index|[
name|zzState
index|]
operator|+
name|zzCMapL
index|[
name|zzInput
index|]
index|]
decl_stmt|;
if|if
condition|(
name|zzNext
operator|==
operator|-
literal|1
condition|)
break|break
name|zzForAction
break|;
name|zzState
operator|=
name|zzNext
expr_stmt|;
name|zzAttributes
operator|=
name|zzAttrL
index|[
name|zzState
index|]
expr_stmt|;
if|if
condition|(
operator|(
name|zzAttributes
operator|&
literal|1
operator|)
operator|==
literal|1
condition|)
block|{
name|zzAction
operator|=
name|zzState
expr_stmt|;
name|zzMarkedPosL
operator|=
name|zzCurrentPosL
expr_stmt|;
if|if
condition|(
operator|(
name|zzAttributes
operator|&
literal|8
operator|)
operator|==
literal|8
condition|)
break|break
name|zzForAction
break|;
block|}
block|}
block|}
comment|// store back cached position
name|zzMarkedPos
operator|=
name|zzMarkedPosL
expr_stmt|;
switch|switch
condition|(
name|zzAction
operator|<
literal|0
condition|?
name|zzAction
else|:
name|ZZ_ACTION
index|[
name|zzAction
index|]
condition|)
block|{
case|case
literal|2
case|:
block|{
return|return
name|WORD_TYPE
return|;
block|}
case|case
literal|9
case|:
break|break;
case|case
literal|5
case|:
block|{
return|return
name|SOUTH_EAST_ASIAN_TYPE
return|;
block|}
case|case
literal|10
case|:
break|break;
case|case
literal|4
case|:
block|{
return|return
name|KATAKANA_TYPE
return|;
block|}
case|case
literal|11
case|:
break|break;
case|case
literal|6
case|:
block|{
return|return
name|IDEOGRAPHIC_TYPE
return|;
block|}
case|case
literal|12
case|:
break|break;
case|case
literal|8
case|:
block|{
return|return
name|HANGUL_TYPE
return|;
block|}
case|case
literal|13
case|:
break|break;
case|case
literal|3
case|:
block|{
return|return
name|NUMERIC_TYPE
return|;
block|}
case|case
literal|14
case|:
break|break;
case|case
literal|7
case|:
block|{
return|return
name|HIRAGANA_TYPE
return|;
block|}
case|case
literal|15
case|:
break|break;
case|case
literal|1
case|:
block|{
comment|/* Break so we don't hit fall-through warning: */
break|break;
comment|/* Not numeric, word, ideographic, hiragana, or SE Asian -- ignore it. */
block|}
case|case
literal|16
case|:
break|break;
default|default:
if|if
condition|(
name|zzInput
operator|==
name|YYEOF
operator|&&
name|zzStartRead
operator|==
name|zzCurrentPos
condition|)
block|{
name|zzAtEOF
operator|=
literal|true
expr_stmt|;
block|{
return|return
name|StandardTokenizerInterface
operator|.
name|YYEOF
return|;
block|}
block|}
else|else
block|{
name|zzScanError
argument_list|(
name|ZZ_NO_MATCH
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class
end_unit
