begin_unit
begin_comment
comment|/* The following code was generated by JFlex 1.5.0-SNAPSHOT on 7/15/12 1:57 AM */
end_comment
begin_package
DECL|package|org.apache.lucene.analysis.standard
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|standard
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|CharTermAttribute
import|;
end_import
begin_comment
comment|/**  * This class implements Word Break rules from the Unicode Text Segmentation   * algorithm, as specified in   *<a href="http://unicode.org/reports/tr29/">Unicode Standard Annex #29</a>.   *<p/>  * Tokens produced are of the following types:  *<ul>  *<li>&lt;ALPHANUM&gt;: A sequence of alphabetic and numeric characters</li>  *<li>&lt;NUM&gt;: A number</li>  *<li>&lt;SOUTHEAST_ASIAN&gt;: A sequence of characters from South and Southeast  *       Asian languages, including Thai, Lao, Myanmar, and Khmer</li>  *<li>&lt;IDEOGRAPHIC&gt;: A single CJKV ideographic character</li>  *<li>&lt;HIRAGANA&gt;: A single hiragana character</li>  *</ul>  */
end_comment
begin_class
DECL|class|StandardTokenizerImpl
specifier|public
specifier|final
class|class
name|StandardTokenizerImpl
implements|implements
name|StandardTokenizerInterface
block|{
comment|/** This character denotes the end of file */
DECL|field|YYEOF
specifier|public
specifier|static
specifier|final
name|int
name|YYEOF
init|=
operator|-
literal|1
decl_stmt|;
comment|/** initial size of the lookahead buffer */
DECL|field|ZZ_BUFFERSIZE
specifier|private
specifier|static
specifier|final
name|int
name|ZZ_BUFFERSIZE
init|=
literal|16384
decl_stmt|;
comment|/** lexical states */
DECL|field|YYINITIAL
specifier|public
specifier|static
specifier|final
name|int
name|YYINITIAL
init|=
literal|0
decl_stmt|;
comment|/**    * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l    * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l    *                  at the beginning of a line    * l is of the form l = 2*k, k a non negative integer    */
DECL|field|ZZ_LEXSTATE
specifier|private
specifier|static
specifier|final
name|int
name|ZZ_LEXSTATE
index|[]
init|=
block|{
literal|0
block|,
literal|0
block|}
decl_stmt|;
comment|/**     * Translates characters to character classes    */
DECL|field|ZZ_CMAP_PACKED
specifier|private
specifier|static
specifier|final
name|String
name|ZZ_CMAP_PACKED
init|=
literal|"\12\0\1\221\34\0\1\242\4\0\1\241\1\215\1\242\1\0\10\236"
operator|+
literal|"\1\230\1\236\1\214\1\241\1\0\1\225\3\0\1\203\2\234\1\216"
operator|+
literal|"\1\234\1\227\2\234\1\211\1\202\1\234\1\210\1\234\1\212\1\207"
operator|+
literal|"\1\172\2\234\1\213\1\206\1\226\1\204\4\234\4\0\1\205\1\0"
operator|+
literal|"\2\234\1\174\1\177\1\176\1\217\1\224\1\234\1\173\1\234\1\175"
operator|+
literal|"\1\220\1\234\1\222\1\223\1\201\4\234\1\200\5\234\57\0\1\234"
operator|+
literal|"\2\0\1\235\7\0\1\234\1\0\1\240\2\0\1\234\5\0\27\234"
operator|+
literal|"\1\0\37\234\1\0\u01ca\234\4\0\14\234\16\0\5\234\7\0\1\234"
operator|+
literal|"\1\0\1\234\21\0\160\235\5\234\1\0\2\234\2\0\4\234\1\241"
operator|+
literal|"\7\0\1\234\1\240\3\234\1\0\1\234\1\0\24\234\1\0\123\234"
operator|+
literal|"\1\0\213\234\1\0\7\235\236\234\11\0\46\234\2\0\1\234\7\0"
operator|+
literal|"\47\234\1\0\1\241\7\0\55\235\1\0\1\235\1\0\2\235\1\0"
operator|+
literal|"\2\235\1\0\1\235\10\0\33\234\5\0\4\234\1\240\13\0\5\235"
operator|+
literal|"\7\0\2\241\2\0\13\235\5\0\53\234\25\235\12\236\1\0\1\236"
operator|+
literal|"\1\241\1\0\2\234\1\235\143\234\1\0\1\234\7\235\1\235\1\0"
operator|+
literal|"\6\235\2\234\2\235\1\0\4\235\2\234\12\236\3\234\2\0\1\234"
operator|+
literal|"\17\0\1\235\1\234\1\235\36\234\33\235\2\0\131\234\13\235\1\234"
operator|+
literal|"\16\0\12\236\41\234\11\235\2\234\2\0\1\241\1\0\1\234\5\0"
operator|+
literal|"\26\234\4\235\1\234\11\235\1\234\3\235\1\234\5\235\22\0\31\234"
operator|+
literal|"\3\235\104\0\1\234\1\0\13\234\67\0\33\235\1\0\4\235\66\234"
operator|+
literal|"\3\235\1\234\22\235\1\234\7\235\12\234\2\235\2\0\12\236\1\0"
operator|+
literal|"\7\234\1\0\7\234\1\0\3\235\1\0\10\234\2\0\2\234\2\0"
operator|+
literal|"\26\234\1\0\7\234\1\0\1\234\3\0\4\234\2\0\1\235\1\234"
operator|+
literal|"\7\235\2\0\2\235\2\0\3\235\1\234\10\0\1\235\4\0\2\234"
operator|+
literal|"\1\0\3\234\2\235\2\0\12\236\2\234\17\0\3\235\1\0\6\234"
operator|+
literal|"\4\0\2\234\2\0\26\234\1\0\7\234\1\0\2\234\1\0\2\234"
operator|+
literal|"\1\0\2\234\2\0\1\235\1\0\5\235\4\0\2\235\2\0\3\235"
operator|+
literal|"\3\0\1\235\7\0\4\234\1\0\1\234\7\0\12\236\2\235\3\234"
operator|+
literal|"\1\235\13\0\3\235\1\0\11\234\1\0\3\234\1\0\26\234\1\0"
operator|+
literal|"\7\234\1\0\2\234\1\0\5\234\2\0\1\235\1\234\10\235\1\0"
operator|+
literal|"\3\235\1\0\3\235\2\0\1\234\17\0\2\234\2\235\2\0\12\236"
operator|+
literal|"\21\0\3\235\1\0\10\234\2\0\2\234\2\0\26\234\1\0\7\234"
operator|+
literal|"\1\0\2\234\1\0\5\234\2\0\1\235\1\234\7\235\2\0\2\235"
operator|+
literal|"\2\0\3\235\10\0\2\235\4\0\2\234\1\0\3\234\2\235\2\0"
operator|+
literal|"\12\236\1\0\1\234\20\0\1\235\1\234\1\0\6\234\3\0\3\234"
operator|+
literal|"\1\0\4\234\3\0\2\234\1\0\1\234\1\0\2\234\3\0\2\234"
operator|+
literal|"\3\0\3\234\3\0\14\234\4\0\5\235\3\0\3\235\1\0\4\235"
operator|+
literal|"\2\0\1\234\6\0\1\235\16\0\12\236\21\0\3\235\1\0\10\234"
operator|+
literal|"\1\0\3\234\1\0\27\234\1\0\12\234\1\0\5\234\3\0\1\234"
operator|+
literal|"\7\235\1\0\3\235\1\0\4\235\7\0\2\235\1\0\2\234\6\0"
operator|+
literal|"\2\234\2\235\2\0\12\236\22\0\2\235\1\0\10\234\1\0\3\234"
operator|+
literal|"\1\0\27\234\1\0\12\234\1\0\5\234\2\0\1\235\1\234\7\235"
operator|+
literal|"\1\0\3\235\1\0\4\235\7\0\2\235\7\0\1\234\1\0\2\234"
operator|+
literal|"\2\235\2\0\12\236\1\0\2\234\17\0\2\235\1\0\10\234\1\0"
operator|+
literal|"\3\234\1\0\51\234\2\0\1\234\7\235\1\0\3\235\1\0\4\235"
operator|+
literal|"\1\234\10\0\1\235\10\0\2\234\2\235\2\0\12\236\12\0\6\234"
operator|+
literal|"\2\0\2\235\1\0\22\234\3\0\30\234\1\0\11\234\1\0\1\234"
operator|+
literal|"\2\0\7\234\3\0\1\235\4\0\6\235\1\0\1\235\1\0\10\235"
operator|+
literal|"\22\0\2\235\15\0\60\244\1\245\2\244\7\245\5\0\7\244\10\245"
operator|+
literal|"\1\0\12\236\47\0\2\244\1\0\1\244\2\0\2\244\1\0\1\244"
operator|+
literal|"\2\0\1\244\6\0\4\244\1\0\7\244\1\0\3\244\1\0\1\244"
operator|+
literal|"\1\0\1\244\2\0\2\244\1\0\4\244\1\245\2\244\6\245\1\0"
operator|+
literal|"\2\245\1\244\2\0\5\244\1\0\1\244\1\0\6\245\2\0\12\236"
operator|+
literal|"\2\0\4\244\40\0\1\234\27\0\2\235\6\0\12\236\13\0\1\235"
operator|+
literal|"\1\0\1\235\1\0\1\235\4\0\2\235\10\234\1\0\44\234\4\0"
operator|+
literal|"\24\235\1\0\2\235\5\234\13\235\1\0\44\235\11\0\1\235\71\0"
operator|+
literal|"\53\244\24\245\1\244\12\236\6\0\6\244\4\245\4\244\3\245\1\244"
operator|+
literal|"\3\245\2\244\7\245\3\244\4\245\15\244\14\245\1\244\1\245\12\236"
operator|+
literal|"\4\245\2\244\46\234\1\0\1\234\5\0\1\234\2\0\53\234\1\0"
operator|+
literal|"\4\234\u0100\250\111\234\1\0\4\234\2\0\7\234\1\0\1\234\1\0"
operator|+
literal|"\4\234\2\0\51\234\1\0\4\234\2\0\41\234\1\0\4\234\2\0"
operator|+
literal|"\7\234\1\0\1\234\1\0\4\234\2\0\17\234\1\0\71\234\1\0"
operator|+
literal|"\4\234\2\0\103\234\2\0\3\235\40\0\20\234\20\0\125\234\14\0"
operator|+
literal|"\u026c\234\2\0\21\234\1\0\32\234\5\0\113\234\3\0\3\234\17\0"
operator|+
literal|"\15\234\1\0\4\234\3\235\13\0\22\234\3\235\13\0\22\234\2\235"
operator|+
literal|"\14\0\15\234\1\0\3\234\1\0\2\235\14\0\64\244\40\245\3\0"
operator|+
literal|"\1\244\4\0\1\244\1\245\2\0\12\236\41\0\3\235\2\0\12\236"
operator|+
literal|"\6\0\130\234\10\0\51\234\1\235\1\234\5\0\106\234\12\0\35\234"
operator|+
literal|"\3\0\14\235\4\0\14\235\12\0\12\236\36\244\2\0\5\244\13\0"
operator|+
literal|"\54\244\4\0\21\245\7\244\2\245\6\0\12\236\1\244\3\0\2\244"
operator|+
literal|"\40\0\27\234\5\235\4\0\65\244\12\245\1\0\35\245\2\0\1\235"
operator|+
literal|"\12\236\6\0\12\236\6\0\16\244\122\0\5\235\57\234\21\235\7\234"
operator|+
literal|"\4\0\12\236\21\0\11\235\14\0\3\235\36\234\15\235\2\234\12\236"
operator|+
literal|"\54\234\16\235\14\0\44\234\24\235\10\0\12\236\3\0\3\234\12\236"
operator|+
literal|"\44\234\122\0\3\235\1\0\25\235\4\234\1\235\4\234\3\235\2\234"
operator|+
literal|"\11\0\300\234\47\235\25\0\4\235\u0116\234\2\0\6\234\2\0\46\234"
operator|+
literal|"\2\0\6\234\2\0\10\234\1\0\1\234\1\0\1\234\1\0\1\234"
operator|+
literal|"\1\0\37\234\2\0\65\234\1\0\7\234\1\0\1\234\3\0\3\234"
operator|+
literal|"\1\0\7\234\3\0\4\234\2\0\6\234\4\0\15\234\5\0\3\234"
operator|+
literal|"\1\0\7\234\17\0\2\235\2\235\10\0\2\242\12\0\1\242\2\0"
operator|+
literal|"\1\240\2\0\5\235\20\0\2\243\3\0\1\241\17\0\1\243\13\0"
operator|+
literal|"\5\235\5\0\6\235\1\0\1\234\15\0\1\234\20\0\15\234\63\0"
operator|+
literal|"\41\235\21\0\1\234\4\0\1\234\2\0\12\234\1\0\1\234\3\0"
operator|+
literal|"\5\234\6\0\1\234\1\0\1\234\1\0\1\234\1\0\4\234\1\0"
operator|+
literal|"\13\234\2\0\4\234\5\0\5\234\4\0\1\234\21\0\51\234\u032d\0"
operator|+
literal|"\64\234\u0716\0\57\234\1\0\57\234\1\0\205\234\6\0\4\234\3\235"
operator|+
literal|"\2\234\14\0\46\234\1\0\1\234\5\0\1\234\2\0\70\234\7\0"
operator|+
literal|"\1\234\17\0\1\235\27\234\11\0\7\234\1\0\7\234\1\0\7\234"
operator|+
literal|"\1\0\7\234\1\0\7\234\1\0\7\234\1\0\7\234\1\0\7\234"
operator|+
literal|"\1\0\40\235\57\0\1\234\120\0\32\246\1\0\131\246\14\0\326\246"
operator|+
literal|"\57\0\1\234\1\0\1\246\31\0\11\246\4\235\2\235\1\0\5\237"
operator|+
literal|"\2\0\3\246\1\234\1\234\4\0\126\247\2\0\2\235\2\237\3\247"
operator|+
literal|"\133\237\1\0\4\237\5\0\51\234\3\0\136\250\21\0\33\234\65\0"
operator|+
literal|"\20\237\37\0\101\0\37\0\121\0\57\237\1\0\130\237\250\0\u19b6\246"
operator|+
literal|"\112\0\u51cd\246\63\0\u048d\234\103\0\56\234\2\0\u010d\234\3\0\20\234"
operator|+
literal|"\12\236\2\234\24\0\57\234\4\235\1\0\12\235\1\0\31\234\7\0"
operator|+
literal|"\1\235\120\234\2\235\45\0\11\234\2\0\147\234\2\0\4\234\1\0"
operator|+
literal|"\4\234\14\0\13\234\115\0\12\234\1\235\3\234\1\235\4\234\1\235"
operator|+
literal|"\27\234\5\235\30\0\64\234\14\0\2\235\62\234\21\235\13\0\12\236"
operator|+
literal|"\6\0\22\235\6\234\3\0\1\234\4\0\12\236\34\234\10\235\2\0"
operator|+
literal|"\27\234\15\235\14\0\35\250\3\0\4\235\57\234\16\235\16\0\1\234"
operator|+
literal|"\12\236\46\0\51\234\16\235\11\0\3\234\1\235\10\234\2\235\2\0"
operator|+
literal|"\12\236\6\0\33\244\1\245\4\0\60\244\1\245\1\244\3\245\2\244"
operator|+
literal|"\2\245\5\244\2\245\1\244\1\245\1\244\30\0\5\244\13\234\5\235"
operator|+
literal|"\2\0\3\234\2\235\12\0\6\234\2\0\6\234\2\0\6\234\11\0"
operator|+
literal|"\7\234\1\0\7\234\221\0\43\234\10\235\1\0\2\235\2\0\12\236"
operator|+
literal|"\6\0\u2ba4\250\14\0\27\250\4\0\61\250\4\0\1\44\1\40\1\67"
operator|+
literal|"\1\64\1\33\1\30\2\0\1\24\1\21\2\0\1\17\1\15\14\0"
operator|+
literal|"\1\3\1\6\20\0\1\156\7\0\1\111\1\10\5\0\1\1\1\232"
operator|+
literal|"\3\0\1\163\1\163\1\163\1\163\1\163\1\163\1\163\1\163\1\163"
operator|+
literal|"\1\163\1\163\1\163\1\163\1\163\1\231\1\163\1\163\1\163\1\163"
operator|+
literal|"\1\163\1\163\1\163\1\163\1\163\1\163\1\163\1\163\1\163\1\163"
operator|+
literal|"\1\163\1\163\1\163\1\163\1\163\1\163\1\163\1\163\1\163\1\163"
operator|+
literal|"\1\163\1\163\1\164\1\163\1\163\1\163\1\170\1\166\17\0\1\160"
operator|+
literal|"\u02c1\0\1\114\277\0\1\157\1\115\1\16\3\167\2\62\1\167\1\62"
operator|+
literal|"\2\167\1\36\21\167\2\106\7\117\1\116\7\117\7\102\1\37\1\102"
operator|+
literal|"\1\130\2\66\1\65\1\130\1\66\1\65\10\130\2\107\5\103\2\75"
operator|+
literal|"\5\103\1\22\10\53\5\23\3\41\12\147\20\41\3\63\32\43\1\42"
operator|+
literal|"\2\61\2\154\1\155\2\154\2\155\2\154\1\155\3\61\1\60\2\61"
operator|+
literal|"\12\110\1\126\1\50\1\45\1\110\6\50\1\45\13\50\31\61\7\50"
operator|+
literal|"\12\150\1\50\5\13\3\127\3\101\1\100\4\101\2\100\10\101\1\100"
operator|+
literal|"\7\35\1\34\2\35\7\101\16\127\1\141\4\152\1\4\4\151\1\4"
operator|+
literal|"\5\140\1\137\1\140\3\137\7\140\1\137\23\140\5\113\3\140\6\113"
operator|+
literal|"\2\113\6\112\5\112\3\134\2\101\7\133\36\101\4\133\5\101\5\127"
operator|+
literal|"\6\125\2\127\1\125\4\35\13\136\12\151\26\136\15\13\1\135\2\13"
operator|+
literal|"\1\233\3\142\1\13\2\142\5\161\4\142\4\162\1\161\3\162\1\161"
operator|+
literal|"\5\162\2\70\1\73\2\70\1\73\1\70\2\73\1\70\1\73\12\70"
operator|+
literal|"\1\73\4\5\1\144\1\143\1\145\1\12\3\165\1\145\2\165\1\131"
operator|+
literal|"\2\132\2\165\1\12\1\165\1\12\1\165\1\12\1\165\3\12\1\165"
operator|+
literal|"\2\12\1\165\1\12\2\165\1\12\1\165\1\12\1\165\1\12\1\165"
operator|+
literal|"\1\12\1\165\1\12\1\76\2\72\1\76\1\72\2\76\4\72\1\76"
operator|+
literal|"\7\72\1\76\4\72\1\76\4\72\1\165\1\12\1\165\12\31\1\57"
operator|+
literal|"\21\31\1\57\3\32\1\57\3\31\1\57\1\31\2\2\2\31\1\57"
operator|+
literal|"\15\124\4\47\4\54\1\146\1\56\10\146\7\54\6\165\4\25\1\27"
operator|+
literal|"\37\25\1\27\4\25\25\105\1\171\11\105\21\26\5\105\1\7\12\55"
operator|+
literal|"\5\105\6\104\4\76\1\77\1\26\5\123\12\121\17\123\1\74\3\71"
operator|+
literal|"\14\120\1\11\11\46\1\52\5\46\4\122\13\51\2\14\11\46\1\52"
operator|+
literal|"\31\46\1\52\4\11\4\46\2\52\2\153\1\20\5\153\52\20\u1900\0"
operator|+
literal|"\u016e\246\2\0\152\246\46\0\7\234\14\0\5\234\5\0\1\234\1\235"
operator|+
literal|"\12\234\1\0\15\234\1\0\5\234\1\0\1\234\1\0\2\234\1\0"
operator|+
literal|"\2\234\1\0\154\234\41\0\u016b\234\22\0\100\234\2\0\66\234\50\0"
operator|+
literal|"\14\234\4\0\20\235\1\241\2\0\1\240\1\241\13\0\7\235\14\0"
operator|+
literal|"\2\243\30\0\3\243\1\241\1\0\1\242\1\0\1\241\1\240\32\0"
operator|+
literal|"\5\234\1\0\207\234\2\0\1\235\7\0\1\242\4\0\1\241\1\0"
operator|+
literal|"\1\242\1\0\12\236\1\240\1\241\5\0\32\234\4\0\1\243\1\0"
operator|+
literal|"\32\234\13\0\70\237\2\235\37\250\3\0\6\250\2\0\6\250\2\0"
operator|+
literal|"\6\250\2\0\3\250\34\0\3\235\4\0"
decl_stmt|;
comment|/**     * Translates characters to character classes    */
DECL|field|ZZ_CMAP
specifier|private
specifier|static
specifier|final
name|char
index|[]
name|ZZ_CMAP
init|=
name|zzUnpackCMap
argument_list|(
name|ZZ_CMAP_PACKED
argument_list|)
decl_stmt|;
comment|/**     * Translates DFA states to action switch labels.    */
DECL|field|ZZ_ACTION
specifier|private
specifier|static
specifier|final
name|int
index|[]
name|ZZ_ACTION
init|=
name|zzUnpackAction
argument_list|()
decl_stmt|;
DECL|field|ZZ_ACTION_PACKED_0
specifier|private
specifier|static
specifier|final
name|String
name|ZZ_ACTION_PACKED_0
init|=
literal|"\1\0\25\1\2\2\1\1\1\3\1\1\1\4\1\5"
operator|+
literal|"\1\6\1\7\1\10\20\0\2\2\1\0\1\2\13\0"
operator|+
literal|"\1\2\7\0\1\3\36\0\1\2\57\0\1\2\11\0"
operator|+
literal|"\25\2\27\0"
decl_stmt|;
DECL|method|zzUnpackAction
specifier|private
specifier|static
name|int
index|[]
name|zzUnpackAction
parameter_list|()
block|{
name|int
index|[]
name|result
init|=
operator|new
name|int
index|[
literal|204
index|]
decl_stmt|;
name|int
name|offset
init|=
literal|0
decl_stmt|;
name|offset
operator|=
name|zzUnpackAction
argument_list|(
name|ZZ_ACTION_PACKED_0
argument_list|,
name|offset
argument_list|,
name|result
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
DECL|method|zzUnpackAction
specifier|private
specifier|static
name|int
name|zzUnpackAction
parameter_list|(
name|String
name|packed
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
index|[]
name|result
parameter_list|)
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|/* index in packed string  */
name|int
name|j
init|=
name|offset
decl_stmt|;
comment|/* index in unpacked array */
name|int
name|l
init|=
name|packed
operator|.
name|length
argument_list|()
decl_stmt|;
while|while
condition|(
name|i
operator|<
name|l
condition|)
block|{
name|int
name|count
init|=
name|packed
operator|.
name|charAt
argument_list|(
name|i
operator|++
argument_list|)
decl_stmt|;
name|int
name|value
init|=
name|packed
operator|.
name|charAt
argument_list|(
name|i
operator|++
argument_list|)
decl_stmt|;
do|do
name|result
index|[
name|j
operator|++
index|]
operator|=
name|value
expr_stmt|;
do|while
condition|(
operator|--
name|count
operator|>
literal|0
condition|)
do|;
block|}
return|return
name|j
return|;
block|}
comment|/**     * Translates a state to a row index in the transition table    */
DECL|field|ZZ_ROWMAP
specifier|private
specifier|static
specifier|final
name|int
index|[]
name|ZZ_ROWMAP
init|=
name|zzUnpackRowMap
argument_list|()
decl_stmt|;
DECL|field|ZZ_ROWMAP_PACKED_0
specifier|private
specifier|static
specifier|final
name|String
name|ZZ_ROWMAP_PACKED_0
init|=
literal|"\0\0\0\251\0\u0152\0\u01fb\0\u02a4\0\u034d\0\u03f6\0\u049f"
operator|+
literal|"\0\u0548\0\u05f1\0\u069a\0\u0743\0\u07ec\0\u0895\0\u093e\0\u09e7"
operator|+
literal|"\0\u0a90\0\u0b39\0\u0be2\0\u0c8b\0\u0d34\0\u0ddd\0\u0e86\0\u0f2f"
operator|+
literal|"\0\u0fd8\0\u1081\0\u112a\0\u11d3\0\u127c\0\u1325\0\u13ce\0\u1477"
operator|+
literal|"\0\u0152\0\u01fb\0\u1520\0\u15c9\0\u03f6\0\u049f\0\u0548\0\u05f1"
operator|+
literal|"\0\u1672\0\u171b\0\u17c4\0\u186d\0\u093e\0\u1916\0\u19bf\0\u1a68"
operator|+
literal|"\0\u1b11\0\u1bba\0\u1c63\0\u1d0c\0\u1db5\0\u034d\0\u1e5e\0\u1f07"
operator|+
literal|"\0\u07ec\0\u1fb0\0\u2059\0\u2102\0\u21ab\0\u2254\0\u0fd8\0\u22fd"
operator|+
literal|"\0\u23a6\0\u244f\0\u24f8\0\u25a1\0\u264a\0\u26f3\0\u279c\0\u2845"
operator|+
literal|"\0\u28ee\0\u2997\0\u2a40\0\u2ae9\0\u2b92\0\u2c3b\0\u2ce4\0\u2d8d"
operator|+
literal|"\0\u2e36\0\u2edf\0\u2f88\0\u3031\0\u30da\0\u3183\0\u322c\0\u32d5"
operator|+
literal|"\0\u337e\0\u3427\0\u34d0\0\u3579\0\u3622\0\u36cb\0\u3774\0\u381d"
operator|+
literal|"\0\u38c6\0\u396f\0\u3a18\0\u3ac1\0\u3b6a\0\u3c13\0\u3cbc\0\u3d65"
operator|+
literal|"\0\u3e0e\0\u3eb7\0\u3f60\0\u4009\0\u40b2\0\u415b\0\u4204\0\u42ad"
operator|+
literal|"\0\u4356\0\u43ff\0\u44a8\0\u4551\0\u45fa\0\u46a3\0\u474c\0\u47f5"
operator|+
literal|"\0\u489e\0\u4947\0\u49f0\0\u4a99\0\u4b42\0\u4beb\0\u4c94\0\u4d3d"
operator|+
literal|"\0\u4de6\0\u4e8f\0\u4f38\0\u4fe1\0\u508a\0\u5133\0\u51dc\0\u5285"
operator|+
literal|"\0\u532e\0\u53d7\0\u5480\0\u5529\0\u55d2\0\u567b\0\u5724\0\u57cd"
operator|+
literal|"\0\u5876\0\u591f\0\u59c8\0\u5a71\0\u5b1a\0\u5bc3\0\u5c6c\0\u5d15"
operator|+
literal|"\0\u5dbe\0\u5e67\0\u5f10\0\u5fb9\0\u6062\0\u610b\0\u61b4\0\u625d"
operator|+
literal|"\0\u6306\0\u63af\0\u6458\0\u6501\0\u65aa\0\u6653\0\u66fc\0\u67a5"
operator|+
literal|"\0\u684e\0\u68f7\0\u69a0\0\u6a49\0\u6af2\0\u6b9b\0\u6c44\0\u6ced"
operator|+
literal|"\0\u6d96\0\u6e3f\0\u6ee8\0\u6f91\0\u703a\0\u70e3\0\u718c\0\u7235"
operator|+
literal|"\0\u72de\0\u7387\0\u7430\0\u74d9\0\u7582\0\u762b\0\u76d4\0\u777d"
operator|+
literal|"\0\u7826\0\u78cf\0\u7978\0\u7a21\0\u7aca\0\u7b73\0\u7c1c\0\u7cc5"
operator|+
literal|"\0\u7d6e\0\u7e17\0\u7ec0\0\u0be2"
decl_stmt|;
DECL|method|zzUnpackRowMap
specifier|private
specifier|static
name|int
index|[]
name|zzUnpackRowMap
parameter_list|()
block|{
name|int
index|[]
name|result
init|=
operator|new
name|int
index|[
literal|204
index|]
decl_stmt|;
name|int
name|offset
init|=
literal|0
decl_stmt|;
name|offset
operator|=
name|zzUnpackRowMap
argument_list|(
name|ZZ_ROWMAP_PACKED_0
argument_list|,
name|offset
argument_list|,
name|result
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
DECL|method|zzUnpackRowMap
specifier|private
specifier|static
name|int
name|zzUnpackRowMap
parameter_list|(
name|String
name|packed
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
index|[]
name|result
parameter_list|)
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|/* index in packed string  */
name|int
name|j
init|=
name|offset
decl_stmt|;
comment|/* index in unpacked array */
name|int
name|l
init|=
name|packed
operator|.
name|length
argument_list|()
decl_stmt|;
while|while
condition|(
name|i
operator|<
name|l
condition|)
block|{
name|int
name|high
init|=
name|packed
operator|.
name|charAt
argument_list|(
name|i
operator|++
argument_list|)
operator|<<
literal|16
decl_stmt|;
name|result
index|[
name|j
operator|++
index|]
operator|=
name|high
operator||
name|packed
operator|.
name|charAt
argument_list|(
name|i
operator|++
argument_list|)
expr_stmt|;
block|}
return|return
name|j
return|;
block|}
comment|/**     * The transition table of the DFA    */
DECL|field|ZZ_TRANS
specifier|private
specifier|static
specifier|final
name|int
index|[]
name|ZZ_TRANS
init|=
name|zzUnpackTrans
argument_list|()
decl_stmt|;
DECL|field|ZZ_TRANS_PACKED_0
specifier|private
specifier|static
specifier|final
name|String
name|ZZ_TRANS_PACKED_0
init|=
literal|"\1\2\1\3\1\2\1\4\2\2\1\5\1\2\1\6"
operator|+
literal|"\4\2\1\7\1\2\1\10\1\2\1\11\2\2\1\12"
operator|+
literal|"\3\2\1\13\2\2\1\14\4\2\1\15\3\2\1\16"
operator|+
literal|"\17\2\1\17\2\2\1\20\66\2\1\21\1\2\1\22"
operator|+
literal|"\2\2\1\23\1\24\1\2\1\25\1\2\1\26\1\2"
operator|+
literal|"\1\27\12\30\1\31\6\30\2\2\3\30\1\2\3\30"
operator|+
literal|"\1\2\2\30\1\32\1\2\1\33\1\2\1\30\1\2"
operator|+
literal|"\1\32\1\34\3\2\1\31\2\35\1\36\1\37\1\40"
operator|+
literal|"\253\0\1\30\2\0\1\30\4\0\1\30\16\0\1\30"
operator|+
literal|"\15\0\1\30\20\0\1\30\1\0\1\30\31\0\1\30"
operator|+
literal|"\4\0\1\30\10\0\2\30\15\0\2\30\50\0\1\30"
operator|+
literal|"\21\0\2\30\5\0\1\30\2\0\1\30\3\0\2\30"
operator|+
literal|"\10\0\4\30\1\0\3\30\1\0\1\30\2\0\1\30"
operator|+
literal|"\2\0\1\30\4\0\4\30\1\0\2\30\1\0\1\30"
operator|+
literal|"\2\0\1\30\1\0\1\30\2\0\4\30\2\0\3\30"
operator|+
literal|"\1\0\2\30\1\0\3\30\5\0\4\30\2\0\10\30"
operator|+
literal|"\1\0\1\30\2\0\4\30\1\0\2\30\1\0\1\30"
operator|+
literal|"\1\0\2\30\4\0\1\30\43\0\1\30\24\0\1\30"
operator|+
literal|"\4\0\1\30\11\0\1\30\22\0\1\30\3\0\1\30"
operator|+
literal|"\27\0\1\30\63\0\1\30\64\0\1\30\3\0\4\30"
operator|+
literal|"\1\0\1\30\1\0\1\32\2\0\1\30\1\0\2\30"
operator|+
literal|"\2\0\2\30\2\0\3\30\1\0\1\30\1\0\1\30"
operator|+
literal|"\2\0\4\30\1\0\3\30\1\0\1\30\1\0\3\30"
operator|+
literal|"\1\0\2\30\1\0\4\30\1\0\2\30\2\0\10\30"
operator|+
literal|"\1\0\2\30\1\0\11\30\1\0\10\30\1\0\13\30"
operator|+
literal|"\1\32\1\0\1\30\1\0\1\30\1\0\2\30\2\0"
operator|+
literal|"\1\30\1\0\1\30\43\0\1\30\33\0\1\30\17\0"
operator|+
literal|"\1\30\23\0\1\30\23\0\1\30\6\0\3\30\37\0"
operator|+
literal|"\1\30\7\0\1\30\63\0\1\30\1\0\2\30\1\0"
operator|+
literal|"\1\30\1\0\4\30\1\0\1\30\1\0\1\30\1\0"
operator|+
literal|"\2\30\1\0\3\30\1\0\2\30\1\0\4\30\1\0"
operator|+
literal|"\3\30\1\0\17\30\1\0\2\30\1\0\21\30\1\0"
operator|+
literal|"\2\30\1\0\41\30\1\0\1\30\1\0\2\30\2\0"
operator|+
literal|"\1\30\1\0\1\30\1\0\1\30\41\0\1\30\33\0"
operator|+
literal|"\1\30\3\0\2\30\12\0\2\30\13\0\1\30\6\0"
operator|+
literal|"\1\30\2\0\2\30\6\0\1\30\4\0\2\30\2\0"
operator|+
literal|"\2\30\5\0\3\30\10\0\1\30\26\0\1\30\7\0"
operator|+
literal|"\1\30\63\0\1\30\1\0\2\30\1\0\1\30\2\0"
operator|+
literal|"\2\30\2\0\1\30\3\0\2\30\1\0\3\30\1\0"
operator|+
literal|"\2\30\1\0\4\30\1\0\3\30\1\0\1\30\1\0"
operator|+
literal|"\2\30\2\0\11\30\1\0\2\30\1\0\1\30\1\0"
operator|+
literal|"\2\30\1\0\14\30\1\0\2\30\1\0\3\30\1\0"
operator|+
literal|"\1\30\1\0\30\30\1\0\2\30\1\0\1\30\1\0"
operator|+
literal|"\2\30\2\0\1\30\1\0\1\30\1\0\1\30\41\0"
operator|+
literal|"\1\30\17\0\1\30\26\0\2\30\23\0\1\32\1\30"
operator|+
literal|"\66\0\1\32\106\0\1\32\27\0\4\30\2\0\2\30"
operator|+
literal|"\14\0\3\30\15\0\3\30\3\0\1\30\7\0\2\30"
operator|+
literal|"\13\0\1\30\13\0\4\32\1\0\2\30\11\0\1\30"
operator|+
literal|"\77\0\1\30\3\0\2\30\12\0\2\30\1\0\3\30"
operator|+
literal|"\7\0\1\30\6\0\2\30\1\0\2\30\6\0\1\30"
operator|+
literal|"\4\0\2\30\2\0\2\30\5\0\3\30\10\0\1\30"
operator|+
literal|"\16\0\1\30\4\0\2\32\1\0\1\30\7\0\1\30"
operator|+
literal|"\63\0\1\30\4\0\1\30\6\0\1\30\3\0\1\30"
operator|+
literal|"\6\0\1\30\5\0\1\30\2\0\2\30\1\0\17\30"
operator|+
literal|"\2\0\1\30\13\0\7\30\2\0\1\30\1\0\1\30"
operator|+
literal|"\1\0\1\30\2\0\1\30\1\0\1\30\1\0\1\30"
operator|+
literal|"\1\0\1\30\6\0\2\30\5\0\1\30\1\0\1\30"
operator|+
literal|"\2\0\3\30\1\0\1\30\7\0\1\30\1\0\1\30"
operator|+
literal|"\75\0\1\30\17\0\2\30\22\0\1\30\2\0\2\30"
operator|+
literal|"\13\0\1\30\3\0\2\30\5\0\3\30\10\0\1\30"
operator|+
literal|"\26\0\1\30\7\0\1\30\70\0\1\30\6\0\1\30"
operator|+
literal|"\3\0\1\30\3\0\1\30\7\0\1\30\31\0\20\30"
operator|+
literal|"\5\0\3\30\3\0\1\30\3\0\2\30\2\0\2\30"
operator|+
literal|"\4\0\1\30\10\0\1\30\4\0\1\30\2\0\1\30"
operator|+
literal|"\4\0\1\30\1\0\1\30\41\0\1\30\132\0\1\37"
operator|+
literal|"\41\0\1\34\75\0\1\36\6\0\1\36\2\0\1\36"
operator|+
literal|"\3\0\2\36\10\0\4\36\1\0\3\36\1\0\1\36"
operator|+
literal|"\2\0\1\36\2\0\1\36\4\0\4\36\1\0\2\36"
operator|+
literal|"\6\0\1\36\2\0\4\36\2\0\3\36\1\0\2\36"
operator|+
literal|"\1\0\3\36\5\0\4\36\2\0\10\36\4\0\4\36"
operator|+
literal|"\1\0\2\36\1\0\1\36\1\0\2\36\4\0\1\36"
operator|+
literal|"\43\0\1\36\17\0\1\36\1\0\2\36\1\0\1\36"
operator|+
literal|"\1\0\4\36\1\0\1\36\1\0\1\36\1\0\2\36"
operator|+
literal|"\1\0\3\36\1\0\2\36\1\0\4\36\1\0\3\36"
operator|+
literal|"\1\0\17\36\1\0\2\36\1\0\21\36\1\0\2\36"
operator|+
literal|"\1\0\41\36\1\0\1\36\1\0\2\36\2\0\1\36"
operator|+
literal|"\1\0\1\36\1\0\1\36\41\0\1\36\17\0\1\36"
operator|+
literal|"\1\0\2\36\1\0\1\36\1\0\4\36\1\0\1\36"
operator|+
literal|"\1\0\1\36\1\0\2\36\2\0\1\36\2\0\2\36"
operator|+
literal|"\1\0\4\36\1\0\3\36\1\0\17\36\1\0\2\36"
operator|+
literal|"\1\0\21\36\1\0\2\36\1\0\41\36\1\0\1\36"
operator|+
literal|"\1\0\2\36\2\0\1\36\1\0\1\36\1\0\1\36"
operator|+
literal|"\41\0\1\36\33\0\1\36\17\0\1\36\23\0\1\36"
operator|+
literal|"\32\0\1\36\41\0\1\36\7\0\1\36\63\0\1\36"
operator|+
literal|"\1\0\2\36\3\0\4\36\1\0\1\36\1\0\1\36"
operator|+
literal|"\1\0\2\36\1\0\3\36\1\0\2\36\1\0\4\36"
operator|+
literal|"\1\0\3\36\1\0\10\36\1\0\6\36\1\0\2\36"
operator|+
literal|"\1\0\21\36\1\0\2\36\1\0\41\36\1\0\1\36"
operator|+
literal|"\1\0\2\36\2\0\1\36\1\0\1\36\1\0\1\36"
operator|+
literal|"\41\0\1\36\16\0\1\41\1\0\1\42\2\0\1\43"
operator|+
literal|"\1\0\1\44\4\0\1\45\1\0\1\46\1\0\1\47"
operator|+
literal|"\2\0\1\50\3\0\1\51\2\0\1\52\4\0\1\53"
operator|+
literal|"\3\0\1\54\17\0\1\55\2\0\1\56\21\0\1\57"
operator|+
literal|"\2\0\1\60\55\0\1\30\1\61\11\30\1\62\6\30"
operator|+
literal|"\1\63\1\0\3\30\1\0\3\30\1\0\2\30\1\64"
operator|+
literal|"\3\0\2\30\1\64\1\0\1\63\1\0\1\63\1\62"
operator|+
literal|"\1\0\1\30\2\0\1\30\1\0\1\41\1\0\1\42"
operator|+
literal|"\2\0\1\43\1\0\1\44\4\0\1\45\1\0\1\46"
operator|+
literal|"\1\0\1\47\2\0\1\50\3\0\1\51\2\0\1\52"
operator|+
literal|"\4\0\1\53\3\0\1\54\17\0\1\55\2\0\1\56"
operator|+
literal|"\21\0\1\57\2\0\1\60\55\0\13\30\1\62\6\30"
operator|+
literal|"\1\63\1\0\3\30\1\0\3\30\1\0\2\30\1\64"
operator|+
literal|"\3\0\2\30\1\64\1\0\1\63\1\0\1\63\1\62"
operator|+
literal|"\1\0\1\30\2\0\1\30\1\0\1\41\1\0\1\42"
operator|+
literal|"\2\0\1\65\1\0\1\66\4\0\1\45\1\0\1\46"
operator|+
literal|"\1\0\1\47\2\0\1\50\3\0\1\67\2\0\1\70"
operator|+
literal|"\4\0\1\71\3\0\1\72\17\0\1\55\2\0\1\73"
operator|+
literal|"\21\0\1\74\2\0\1\75\41\0\1\76\13\0\13\30"
operator|+
literal|"\1\77\6\30\2\0\3\30\1\0\3\30\1\0\2\30"
operator|+
literal|"\1\32\3\0\1\30\1\77\1\32\1\100\3\0\1\77"
operator|+
literal|"\1\0\1\77\2\0\1\30\1\0\1\41\1\0\1\42"
operator|+
literal|"\2\0\1\101\1\0\1\66\4\0\1\45\1\0\1\46"
operator|+
literal|"\1\0\1\47\2\0\1\50\3\0\1\102\2\0\1\103"
operator|+
literal|"\4\0\1\71\3\0\1\104\17\0\1\55\2\0\1\105"
operator|+
literal|"\21\0\1\106\2\0\1\107\55\0\13\30\1\110\6\30"
operator|+
literal|"\2\0\3\30\1\0\3\30\1\0\2\30\1\32\3\0"
operator|+
literal|"\1\30\2\32\2\0\2\111\1\110\1\0\1\32\2\0"
operator|+
literal|"\1\30\233\0\1\37\23\0\1\112\21\0\1\113\2\0"
operator|+
literal|"\1\114\10\0\1\115\22\0\1\116\21\0\1\117\2\0"
operator|+
literal|"\1\120\41\0\1\121\26\0\1\62\27\0\1\34\1\0"
operator|+
literal|"\1\34\3\0\1\62\1\0\1\34\247\0\2\35\11\0"
operator|+
literal|"\1\122\21\0\1\123\2\0\1\124\10\0\1\125\22\0"
operator|+
literal|"\1\126\21\0\1\127\2\0\1\130\120\0\1\36\7\0"
operator|+
literal|"\1\36\11\0\1\131\21\0\1\132\2\0\1\133\10\0"
operator|+
literal|"\1\134\22\0\1\135\21\0\1\136\2\0\1\137\120\0"
operator|+
literal|"\1\37\7\0\1\37\4\0\1\41\1\0\1\42\2\0"
operator|+
literal|"\1\140\1\0\1\44\4\0\1\45\1\0\1\46\1\0"
operator|+
literal|"\1\47\2\0\1\50\3\0\1\141\2\0\1\142\4\0"
operator|+
literal|"\1\53\3\0\1\143\17\0\1\55\2\0\1\144\21\0"
operator|+
literal|"\1\145\2\0\1\146\55\0\13\30\1\62\6\30\1\63"
operator|+
literal|"\1\0\3\30\1\0\3\30\1\0\2\30\1\64\3\0"
operator|+
literal|"\1\30\1\40\1\64\1\0\1\63\1\0\1\63\1\62"
operator|+
literal|"\1\0\1\40\2\0\1\40\7\0\1\30\4\0\1\30"
operator|+
literal|"\11\0\1\30\22\0\1\30\3\0\1\30\13\0\1\30"
operator|+
literal|"\2\0\1\30\10\0\1\30\12\0\4\30\45\0\1\30"
operator|+
literal|"\64\0\1\30\3\0\4\30\1\0\1\30\1\0\1\64"
operator|+
literal|"\2\0\1\30\1\0\2\30\2\0\2\30\2\0\3\30"
operator|+
literal|"\1\0\1\30\1\0\1\30\2\0\4\30\1\0\3\30"
operator|+
literal|"\1\0\1\30\1\0\3\30\1\0\2\30\1\0\4\30"
operator|+
literal|"\1\0\2\30\2\0\10\30\1\0\2\30\1\0\11\30"
operator|+
literal|"\1\0\10\30\1\0\13\30\1\64\1\0\1\30\1\0"
operator|+
literal|"\1\30\1\0\2\30\2\0\1\30\1\0\1\30\43\0"
operator|+
literal|"\1\30\17\0\1\30\26\0\2\30\23\0\1\64\1\30"
operator|+
literal|"\44\0\1\30\21\0\1\64\106\0\1\64\11\0\1\30"
operator|+
literal|"\15\0\4\30\2\0\2\30\14\0\4\30\1\0\2\30"
operator|+
literal|"\11\0\3\30\3\0\1\30\1\0\1\30\4\0\3\30"
operator|+
literal|"\5\0\4\30\2\0\2\30\12\0\4\64\1\0\2\30"
operator|+
literal|"\1\0\1\30\7\0\1\30\77\0\1\30\3\0\2\30"
operator|+
literal|"\12\0\2\30\1\0\3\30\7\0\1\30\6\0\2\30"
operator|+
literal|"\1\0\2\30\6\0\1\30\4\0\2\30\2\0\2\30"
operator|+
literal|"\5\0\3\30\10\0\1\30\16\0\1\30\4\0\2\64"
operator|+
literal|"\1\0\1\30\7\0\1\30\63\0\1\30\4\0\1\30"
operator|+
literal|"\6\0\1\30\3\0\1\30\6\0\1\30\5\0\1\30"
operator|+
literal|"\2\0\2\30\1\0\17\30\2\0\1\30\13\0\7\30"
operator|+
literal|"\2\0\1\30\1\0\1\30\1\0\1\30\2\0\1\30"
operator|+
literal|"\1\0\1\30\1\0\1\30\1\0\1\30\4\0\1\30"
operator|+
literal|"\1\0\2\30\5\0\1\30\1\0\1\30\2\0\3\30"
operator|+
literal|"\1\0\1\30\7\0\1\30\1\0\1\30\66\0\1\30"
operator|+
literal|"\6\0\1\30\3\0\1\30\3\0\1\30\7\0\1\30"
operator|+
literal|"\31\0\20\30\5\0\3\30\3\0\1\30\3\0\2\30"
operator|+
literal|"\2\0\2\30\4\0\5\30\4\0\1\30\4\0\1\30"
operator|+
literal|"\2\0\1\30\4\0\1\30\1\0\1\30\41\0\1\30"
operator|+
literal|"\127\0\2\30\15\0\4\30\120\0\1\30\15\0\2\30"
operator|+
literal|"\10\0\2\30\1\0\1\30\1\0\1\30\11\0\1\30"
operator|+
literal|"\11\0\2\30\6\0\1\30\2\0\4\30\3\0\1\30"
operator|+
literal|"\2\0\2\30\1\0\3\30\5\0\1\30\1\0\2\30"
operator|+
literal|"\2\0\2\30\1\0\4\30\5\0\1\30\1\0\2\30"
operator|+
literal|"\77\0\1\41\1\0\1\42\2\0\1\43\1\0\1\44"
operator|+
literal|"\4\0\1\45\1\0\1\46\1\0\1\47\2\0\1\50"
operator|+
literal|"\3\0\1\51\2\0\1\52\4\0\1\53\3\0\1\54"
operator|+
literal|"\17\0\1\55\2\0\1\56\21\0\1\57\2\0\1\60"
operator|+
literal|"\55\0\2\30\1\147\10\30\1\62\6\30\1\63\1\0"
operator|+
literal|"\3\30\1\0\3\30\1\0\2\30\1\64\3\0\2\30"
operator|+
literal|"\1\64\1\0\1\63\1\0\1\63\1\62\1\0\1\30"
operator|+
literal|"\2\0\1\30\1\0\1\41\1\0\1\42\2\0\1\150"
operator|+
literal|"\1\0\1\44\4\0\1\45\1\0\1\46\1\0\1\47"
operator|+
literal|"\2\0\1\50\3\0\1\151\2\0\1\152\4\0\1\53"
operator|+
literal|"\3\0\1\153\17\0\1\55\2\0\1\154\21\0\1\155"
operator|+
literal|"\2\0\1\156\41\0\1\76\13\0\13\30\1\62\6\30"
operator|+
literal|"\2\0\3\30\1\0\3\30\1\0\2\30\1\64\3\0"
operator|+
literal|"\1\30\1\62\1\64\1\100\3\0\1\62\1\0\1\62"
operator|+
literal|"\2\0\1\30\1\0\1\41\1\0\1\42\2\0\1\157"
operator|+
literal|"\1\0\1\160\4\0\1\45\1\0\1\46\1\0\1\47"
operator|+
literal|"\2\0\1\50\3\0\1\161\2\0\1\162\4\0\1\163"
operator|+
literal|"\3\0\1\164\17\0\1\55\2\0\1\165\21\0\1\166"
operator|+
literal|"\2\0\1\167\55\0\13\30\1\0\6\30\2\0\3\30"
operator|+
literal|"\1\0\3\30\1\0\2\30\4\0\1\30\1\63\7\0"
operator|+
literal|"\1\63\2\0\1\30\1\0\1\41\1\0\1\42\2\0"
operator|+
literal|"\1\170\1\0\1\44\4\0\1\45\1\0\1\46\1\0"
operator|+
literal|"\1\47\2\0\1\50\3\0\1\171\2\0\1\172\4\0"
operator|+
literal|"\1\53\3\0\1\173\17\0\1\55\2\0\1\174\21\0"
operator|+
literal|"\1\175\2\0\1\176\55\0\13\30\1\62\6\30\2\0"
operator|+
literal|"\3\30\1\0\3\30\1\0\2\30\1\64\3\0\1\30"
operator|+
literal|"\2\64\2\0\2\177\1\62\1\0\1\64\2\0\1\30"
operator|+
literal|"\7\0\1\30\4\0\1\30\11\0\1\30\22\0\1\30"
operator|+
literal|"\3\0\1\30\13\0\1\77\2\0\1\77\10\0\1\30"
operator|+
literal|"\12\0\4\77\45\0\1\30\61\0\1\30\26\0\2\30"
operator|+
literal|"\23\0\1\32\1\30\44\0\1\77\21\0\1\32\106\0"
operator|+
literal|"\1\32\11\0\1\77\15\0\4\30\2\0\2\30\14\0"
operator|+
literal|"\3\30\1\77\1\0\2\77\11\0\3\30\3\0\1\30"
operator|+
literal|"\1\0\1\77\4\0\1\77\2\30\5\0\4\77\2\0"
operator|+
literal|"\1\30\1\77\12\0\4\32\1\0\2\30\1\0\1\77"
operator|+
literal|"\7\0\1\30\63\0\1\30\4\0\1\30\6\0\1\30"
operator|+
literal|"\3\0\1\30\6\0\1\30\5\0\1\30\2\0\2\30"
operator|+
literal|"\1\0\17\30\2\0\1\30\13\0\7\30\2\0\1\30"
operator|+
literal|"\1\0\1\30\1\0\1\30\2\0\1\30\1\0\1\30"
operator|+
literal|"\1\0\1\30\1\0\1\30\4\0\1\77\1\0\2\30"
operator|+
literal|"\5\0\1\30\1\0\1\30\2\0\3\30\1\0\1\30"
operator|+
literal|"\7\0\1\30\1\0\1\30\66\0\1\30\6\0\1\30"
operator|+
literal|"\3\0\1\30\3\0\1\30\7\0\1\30\31\0\20\30"
operator|+
literal|"\5\0\3\30\3\0\1\30\3\0\2\30\2\0\2\30"
operator|+
literal|"\4\0\1\30\4\77\4\0\1\30\4\0\1\30\2\0"
operator|+
literal|"\1\30\4\0\1\30\1\0\1\30\41\0\1\30\127\0"
operator|+
literal|"\2\77\15\0\4\77\120\0\1\77\15\0\2\77\10\0"
operator|+
literal|"\2\77\1\0\1\77\1\0\1\77\11\0\1\77\11\0"
operator|+
literal|"\2\77\6\0\1\77\2\0\4\77\3\0\1\77\2\0"
operator|+
literal|"\2\77\1\0\3\77\5\0\1\77\1\0\2\77\2\0"
operator|+
literal|"\2\77\1\0\4\77\5\0\1\77\1\0\2\77\255\0"
operator|+
literal|"\1\100\77\0\1\200\21\0\1\201\2\0\1\202\10\0"
operator|+
literal|"\1\203\22\0\1\204\21\0\1\205\2\0\1\206\41\0"
operator|+
literal|"\1\76\26\0\1\62\27\0\1\100\1\0\1\100\3\0"
operator|+
literal|"\1\62\1\0\1\100\12\0\1\30\4\0\1\30\11\0"
operator|+
literal|"\1\30\22\0\1\30\3\0\1\30\13\0\1\32\2\0"
operator|+
literal|"\1\32\10\0\1\30\12\0\4\32\45\0\1\30\61\0"
operator|+
literal|"\1\30\26\0\2\30\23\0\1\32\1\30\44\0\1\32"
operator|+
literal|"\21\0\1\32\106\0\1\32\11\0\1\32\15\0\4\30"
operator|+
literal|"\2\0\2\30\14\0\3\30\1\32\1\0\2\32\11\0"
operator|+
literal|"\3\30\3\0\1\30\1\0\1\32\4\0\1\32\2\30"
operator|+
literal|"\5\0\4\32\2\0\1\30\1\32\12\0\4\32\1\0"
operator|+
literal|"\2\30\1\0\1\32\7\0\1\30\63\0\1\30\4\0"
operator|+
literal|"\1\30\6\0\1\30\3\0\1\30\6\0\1\30\5\0"
operator|+
literal|"\1\30\2\0\2\30\1\0\17\30\2\0\1\30\13\0"
operator|+
literal|"\7\30\2\0\1\30\1\0\1\30\1\0\1\30\2\0"
operator|+
literal|"\1\30\1\0\1\30\1\0\1\30\1\0\1\30\4\0"
operator|+
literal|"\1\32\1\0\2\30\5\0\1\30\1\0\1\30\2\0"
operator|+
literal|"\3\30\1\0\1\30\7\0\1\30\1\0\1\30\66\0"
operator|+
literal|"\1\30\6\0\1\30\3\0\1\30\3\0\1\30\7\0"
operator|+
literal|"\1\30\31\0\20\30\5\0\3\30\3\0\1\30\3\0"
operator|+
literal|"\2\30\2\0\2\30\4\0\1\30\4\32\4\0\1\30"
operator|+
literal|"\4\0\1\30\2\0\1\30\4\0\1\30\1\0\1\30"
operator|+
literal|"\41\0\1\30\127\0\2\32\15\0\4\32\120\0\1\32"
operator|+
literal|"\15\0\2\32\10\0\2\32\1\0\1\32\1\0\1\32"
operator|+
literal|"\11\0\1\32\11\0\2\32\6\0\1\32\2\0\4\32"
operator|+
literal|"\3\0\1\32\2\0\2\32\1\0\3\32\5\0\1\32"
operator|+
literal|"\1\0\2\32\2\0\2\32\1\0\4\32\5\0\1\32"
operator|+
literal|"\1\0\2\32\77\0\1\41\1\0\1\42\2\0\1\207"
operator|+
literal|"\1\0\1\66\4\0\1\45\1\0\1\46\1\0\1\47"
operator|+
literal|"\2\0\1\50\3\0\1\210\2\0\1\211\4\0\1\71"
operator|+
literal|"\3\0\1\212\17\0\1\55\2\0\1\213\21\0\1\214"
operator|+
literal|"\2\0\1\215\41\0\1\76\13\0\13\30\1\110\6\30"
operator|+
literal|"\2\0\3\30\1\0\3\30\1\0\2\30\1\32\3\0"
operator|+
literal|"\1\30\1\110\1\32\1\100\3\0\1\110\1\0\1\110"
operator|+
literal|"\2\0\1\30\6\0\1\216\1\0\1\217\17\0\1\220"
operator|+
literal|"\2\0\1\221\4\0\1\222\3\0\1\223\22\0\1\224"
operator|+
literal|"\21\0\1\225\2\0\1\226\113\0\1\32\4\0\1\111"
operator|+
literal|"\1\32\6\0\1\111\74\0\1\34\2\0\1\34\23\0"
operator|+
literal|"\4\34\251\0\1\34\142\0\1\34\44\0\1\34\1\0"
operator|+
literal|"\2\34\21\0\1\34\4\0\1\34\7\0\4\34\3\0"
operator|+
literal|"\1\34\22\0\1\34\226\0\1\34\255\0\4\34\215\0"
operator|+
literal|"\2\34\15\0\4\34\120\0\1\34\15\0\2\34\10\0"
operator|+
literal|"\2\34\1\0\1\34\1\0\1\34\11\0\1\34\11\0"
operator|+
literal|"\2\34\6\0\1\34\2\0\4\34\3\0\1\34\2\0"
operator|+
literal|"\2\34\1\0\3\34\5\0\1\34\1\0\2\34\2\0"
operator|+
literal|"\2\34\1\0\4\34\5\0\1\34\1\0\2\34\255\0"
operator|+
literal|"\1\34\162\0\1\36\2\0\1\36\23\0\4\36\251\0"
operator|+
literal|"\1\36\142\0\1\36\44\0\1\36\1\0\2\36\21\0"
operator|+
literal|"\1\36\4\0\1\36\7\0\4\36\3\0\1\36\22\0"
operator|+
literal|"\1\36\226\0\1\36\255\0\4\36\215\0\2\36\15\0"
operator|+
literal|"\4\36\120\0\1\36\15\0\2\36\10\0\2\36\1\0"
operator|+
literal|"\1\36\1\0\1\36\11\0\1\36\11\0\2\36\6\0"
operator|+
literal|"\1\36\2\0\4\36\3\0\1\36\2\0\2\36\1\0"
operator|+
literal|"\3\36\5\0\1\36\1\0\2\36\2\0\2\36\1\0"
operator|+
literal|"\4\36\5\0\1\36\1\0\2\36\167\0\1\37\2\0"
operator|+
literal|"\1\37\23\0\4\37\251\0\1\37\142\0\1\37\44\0"
operator|+
literal|"\1\37\1\0\2\37\21\0\1\37\4\0\1\37\7\0"
operator|+
literal|"\4\37\3\0\1\37\22\0\1\37\226\0\1\37\255\0"
operator|+
literal|"\4\37\215\0\2\37\15\0\4\37\120\0\1\37\15\0"
operator|+
literal|"\2\37\10\0\2\37\1\0\1\37\1\0\1\37\11\0"
operator|+
literal|"\1\37\11\0\2\37\6\0\1\37\2\0\4\37\3\0"
operator|+
literal|"\1\37\2\0\2\37\1\0\3\37\5\0\1\37\1\0"
operator|+
literal|"\2\37\2\0\2\37\1\0\4\37\5\0\1\37\1\0"
operator|+
literal|"\2\37\105\0\1\30\4\0\1\30\11\0\1\30\22\0"
operator|+
literal|"\1\30\3\0\1\30\13\0\1\40\2\0\1\40\10\0"
operator|+
literal|"\1\30\12\0\4\40\45\0\1\30\61\0\1\30\26\0"
operator|+
literal|"\2\30\23\0\1\64\1\30\44\0\1\40\21\0\1\64"
operator|+
literal|"\106\0\1\64\11\0\1\40\15\0\4\30\2\0\2\30"
operator|+
literal|"\14\0\3\30\1\40\1\0\2\40\11\0\3\30\3\0"
operator|+
literal|"\1\30\1\0\1\40\4\0\1\40\2\30\5\0\4\40"
operator|+
literal|"\2\0\1\30\1\40\12\0\4\64\1\0\2\30\1\0"
operator|+
literal|"\1\40\7\0\1\30\63\0\1\30\4\0\1\30\6\0"
operator|+
literal|"\1\30\3\0\1\30\6\0\1\30\5\0\1\30\2\0"
operator|+
literal|"\2\30\1\0\17\30\2\0\1\30\13\0\7\30\2\0"
operator|+
literal|"\1\30\1\0\1\30\1\0\1\30\2\0\1\30\1\0"
operator|+
literal|"\1\30\1\0\1\30\1\0\1\30\4\0\1\40\1\0"
operator|+
literal|"\2\30\5\0\1\30\1\0\1\30\2\0\3\30\1\0"
operator|+
literal|"\1\30\7\0\1\30\1\0\1\30\66\0\1\30\6\0"
operator|+
literal|"\1\30\3\0\1\30\3\0\1\30\7\0\1\30\31\0"
operator|+
literal|"\20\30\5\0\3\30\3\0\1\30\3\0\2\30\2\0"
operator|+
literal|"\2\30\4\0\1\30\4\40\4\0\1\30\4\0\1\30"
operator|+
literal|"\2\0\1\30\4\0\1\30\1\0\1\30\41\0\1\30"
operator|+
literal|"\127\0\2\40\15\0\4\40\120\0\1\40\15\0\2\40"
operator|+
literal|"\10\0\2\40\1\0\1\40\1\0\1\40\11\0\1\40"
operator|+
literal|"\11\0\2\40\6\0\1\40\2\0\4\40\3\0\1\40"
operator|+
literal|"\2\0\2\40\1\0\3\40\5\0\1\40\1\0\2\40"
operator|+
literal|"\2\0\2\40\1\0\4\40\5\0\1\40\1\0\2\40"
operator|+
literal|"\77\0\1\41\1\0\1\42\2\0\1\43\1\0\1\44"
operator|+
literal|"\4\0\1\45\1\0\1\46\1\0\1\47\2\0\1\50"
operator|+
literal|"\3\0\1\51\2\0\1\52\4\0\1\53\3\0\1\54"
operator|+
literal|"\17\0\1\55\2\0\1\56\21\0\1\57\2\0\1\60"
operator|+
literal|"\55\0\3\30\1\227\7\30\1\62\6\30\1\63\1\0"
operator|+
literal|"\3\30\1\0\3\30\1\0\2\30\1\64\3\0\2\30"
operator|+
literal|"\1\64\1\0\1\63\1\0\1\63\1\62\1\0\1\30"
operator|+
literal|"\2\0\1\30\7\0\1\30\4\0\1\30\11\0\1\30"
operator|+
literal|"\22\0\1\30\3\0\1\30\13\0\1\62\2\0\1\62"
operator|+
literal|"\10\0\1\30\12\0\4\62\45\0\1\30\61\0\1\30"
operator|+
literal|"\26\0\2\30\23\0\1\64\1\30\44\0\1\62\21\0"
operator|+
literal|"\1\64\106\0\1\64\11\0\1\62\15\0\4\30\2\0"
operator|+
literal|"\2\30\14\0\3\30\1\62\1\0\2\62\11\0\3\30"
operator|+
literal|"\3\0\1\30\1\0\1\62\4\0\1\62\2\30\5\0"
operator|+
literal|"\4\62\2\0\1\30\1\62\12\0\4\64\1\0\2\30"
operator|+
literal|"\1\0\1\62\7\0\1\30\63\0\1\30\4\0\1\30"
operator|+
literal|"\6\0\1\30\3\0\1\30\6\0\1\30\5\0\1\30"
operator|+
literal|"\2\0\2\30\1\0\17\30\2\0\1\30\13\0\7\30"
operator|+
literal|"\2\0\1\30\1\0\1\30\1\0\1\30\2\0\1\30"
operator|+
literal|"\1\0\1\30\1\0\1\30\1\0\1\30\4\0\1\62"
operator|+
literal|"\1\0\2\30\5\0\1\30\1\0\1\30\2\0\3\30"
operator|+
literal|"\1\0\1\30\7\0\1\30\1\0\1\30\66\0\1\30"
operator|+
literal|"\6\0\1\30\3\0\1\30\3\0\1\30\7\0\1\30"
operator|+
literal|"\31\0\20\30\5\0\3\30\3\0\1\30\3\0\2\30"
operator|+
literal|"\2\0\2\30\4\0\1\30\4\62\4\0\1\30\4\0"
operator|+
literal|"\1\30\2\0\1\30\4\0\1\30\1\0\1\30\41\0"
operator|+
literal|"\1\30\127\0\2\62\15\0\4\62\120\0\1\62\15\0"
operator|+
literal|"\2\62\10\0\2\62\1\0\1\62\1\0\1\62\11\0"
operator|+
literal|"\1\62\11\0\2\62\6\0\1\62\2\0\4\62\3\0"
operator|+
literal|"\1\62\2\0\2\62\1\0\3\62\5\0\1\62\1\0"
operator|+
literal|"\2\62\2\0\2\62\1\0\4\62\5\0\1\62\1\0"
operator|+
literal|"\2\62\105\0\1\30\4\0\1\30\11\0\1\30\22\0"
operator|+
literal|"\1\30\3\0\1\30\13\0\1\63\2\0\1\63\10\0"
operator|+
literal|"\1\30\12\0\4\63\45\0\1\30\64\0\1\30\3\0"
operator|+
literal|"\4\30\1\0\1\30\4\0\1\30\1\0\2\30\2\0"
operator|+
literal|"\2\30\2\0\3\30\1\0\1\30\1\0\1\30\2\0"
operator|+
literal|"\4\30\1\0\3\30\1\0\1\30\1\0\3\30\1\0"
operator|+
literal|"\2\30\1\0\4\30\1\0\2\30\2\0\10\30\1\0"
operator|+
literal|"\2\30\1\0\11\30\1\0\10\30\1\0\13\30\2\0"
operator|+
literal|"\1\30\1\0\1\30\1\0\2\30\2\0\1\30\1\0"
operator|+
literal|"\1\30\43\0\1\30\17\0\1\30\26\0\2\30\24\0"
operator|+
literal|"\1\30\44\0\1\63\142\0\1\63\15\0\4\30\2\0"
operator|+
literal|"\2\30\14\0\3\30\1\63\1\0\2\63\11\0\3\30"
operator|+
literal|"\3\0\1\30\1\0\1\63\4\0\1\63\2\30\5\0"
operator|+
literal|"\4\63\2\0\1\30\1\63\17\0\2\30\1\0\1\63"
operator|+
literal|"\7\0\1\30\77\0\1\30\3\0\2\30\12\0\2\30"
operator|+
literal|"\1\0\3\30\7\0\1\30\6\0\2\30\1\0\2\30"
operator|+
literal|"\6\0\1\30\4\0\2\30\2\0\2\30\5\0\3\30"
operator|+
literal|"\10\0\1\30\16\0\1\30\7\0\1\30\7\0\1\30"
operator|+
literal|"\63\0\1\30\4\0\1\30\6\0\1\30\3\0\1\30"
operator|+
literal|"\6\0\1\30\5\0\1\30\2\0\2\30\1\0\17\30"
operator|+
literal|"\2\0\1\30\13\0\7\30\2\0\1\30\1\0\1\30"
operator|+
literal|"\1\0\1\30\2\0\1\30\1\0\1\30\1\0\1\30"
operator|+
literal|"\1\0\1\30\4\0\1\63\1\0\2\30\5\0\1\30"
operator|+
literal|"\1\0\1\30\2\0\3\30\1\0\1\30\7\0\1\30"
operator|+
literal|"\1\0\1\30\66\0\1\30\6\0\1\30\3\0\1\30"
operator|+
literal|"\3\0\1\30\7\0\1\30\31\0\20\30\5\0\3\30"
operator|+
literal|"\3\0\1\30\3\0\2\30\2\0\2\30\4\0\1\30"
operator|+
literal|"\4\63\4\0\1\30\4\0\1\30\2\0\1\30\4\0"
operator|+
literal|"\1\30\1\0\1\30\41\0\1\30\127\0\2\63\15\0"
operator|+
literal|"\4\63\120\0\1\63\15\0\2\63\10\0\2\63\1\0"
operator|+
literal|"\1\63\1\0\1\63\11\0\1\63\11\0\2\63\6\0"
operator|+
literal|"\1\63\2\0\4\63\3\0\1\63\2\0\2\63\1\0"
operator|+
literal|"\3\63\5\0\1\63\1\0\2\63\2\0\2\63\1\0"
operator|+
literal|"\4\63\5\0\1\63\1\0\2\63\105\0\1\30\4\0"
operator|+
literal|"\1\30\11\0\1\30\22\0\1\30\3\0\1\30\13\0"
operator|+
literal|"\1\64\2\0\1\64\10\0\1\30\12\0\4\64\45\0"
operator|+
literal|"\1\30\61\0\1\30\26\0\2\30\23\0\1\64\1\30"
operator|+
literal|"\44\0\1\64\21\0\1\64\106\0\1\64\11\0\1\64"
operator|+
literal|"\15\0\4\30\2\0\2\30\14\0\3\30\1\64\1\0"
operator|+
literal|"\2\64\11\0\3\30\3\0\1\30\1\0\1\64\4\0"
operator|+
literal|"\1\64\2\30\5\0\4\64\2\0\1\30\1\64\12\0"
operator|+
literal|"\4\64\1\0\2\30\1\0\1\64\7\0\1\30\63\0"
operator|+
literal|"\1\30\4\0\1\30\6\0\1\30\3\0\1\30\6\0"
operator|+
literal|"\1\30\5\0\1\30\2\0\2\30\1\0\17\30\2\0"
operator|+
literal|"\1\30\13\0\7\30\2\0\1\30\1\0\1\30\1\0"
operator|+
literal|"\1\30\2\0\1\30\1\0\1\30\1\0\1\30\1\0"
operator|+
literal|"\1\30\4\0\1\64\1\0\2\30\5\0\1\30\1\0"
operator|+
literal|"\1\30\2\0\3\30\1\0\1\30\7\0\1\30\1\0"
operator|+
literal|"\1\30\66\0\1\30\6\0\1\30\3\0\1\30\3\0"
operator|+
literal|"\1\30\7\0\1\30\31\0\20\30\5\0\3\30\3\0"
operator|+
literal|"\1\30\3\0\2\30\2\0\2\30\4\0\1\30\4\64"
operator|+
literal|"\4\0\1\30\4\0\1\30\2\0\1\30\4\0\1\30"
operator|+
literal|"\1\0\1\30\41\0\1\30\127\0\2\64\15\0\4\64"
operator|+
literal|"\120\0\1\64\15\0\2\64\10\0\2\64\1\0\1\64"
operator|+
literal|"\1\0\1\64\11\0\1\64\11\0\2\64\6\0\1\64"
operator|+
literal|"\2\0\4\64\3\0\1\64\2\0\2\64\1\0\3\64"
operator|+
literal|"\5\0\1\64\1\0\2\64\2\0\2\64\1\0\4\64"
operator|+
literal|"\5\0\1\64\1\0\2\64\104\0\1\230\1\0\1\231"
operator|+
literal|"\17\0\1\232\2\0\1\233\4\0\1\234\3\0\1\235"
operator|+
literal|"\22\0\1\236\21\0\1\237\2\0\1\240\113\0\1\64"
operator|+
literal|"\4\0\1\177\1\64\6\0\1\177\74\0\1\100\2\0"
operator|+
literal|"\1\100\23\0\4\100\251\0\1\100\142\0\1\100\44\0"
operator|+
literal|"\1\100\1\0\2\100\21\0\1\100\4\0\1\100\7\0"
operator|+
literal|"\4\100\3\0\1\100\22\0\1\100\226\0\1\100\255\0"
operator|+
literal|"\4\100\215\0\2\100\15\0\4\100\120\0\1\100\15\0"
operator|+
literal|"\2\100\10\0\2\100\1\0\1\100\1\0\1\100\11\0"
operator|+
literal|"\1\100\11\0\2\100\6\0\1\100\2\0\4\100\3\0"
operator|+
literal|"\1\100\2\0\2\100\1\0\3\100\5\0\1\100\1\0"
operator|+
literal|"\2\100\2\0\2\100\1\0\4\100\5\0\1\100\1\0"
operator|+
literal|"\2\100\105\0\1\30\4\0\1\30\11\0\1\30\22\0"
operator|+
literal|"\1\30\3\0\1\30\13\0\1\110\2\0\1\110\10\0"
operator|+
literal|"\1\30\12\0\4\110\45\0\1\30\61\0\1\30\26\0"
operator|+
literal|"\2\30\23\0\1\32\1\30\44\0\1\110\21\0\1\32"
operator|+
literal|"\106\0\1\32\11\0\1\110\15\0\4\30\2\0\2\30"
operator|+
literal|"\14\0\3\30\1\110\1\0\2\110\11\0\3\30\3\0"
operator|+
literal|"\1\30\1\0\1\110\4\0\1\110\2\30\5\0\4\110"
operator|+
literal|"\2\0\1\30\1\110\12\0\4\32\1\0\2\30\1\0"
operator|+
literal|"\1\110\7\0\1\30\63\0\1\30\4\0\1\30\6\0"
operator|+
literal|"\1\30\3\0\1\30\6\0\1\30\5\0\1\30\2\0"
operator|+
literal|"\2\30\1\0\17\30\2\0\1\30\13\0\7\30\2\0"
operator|+
literal|"\1\30\1\0\1\30\1\0\1\30\2\0\1\30\1\0"
operator|+
literal|"\1\30\1\0\1\30\1\0\1\30\4\0\1\110\1\0"
operator|+
literal|"\2\30\5\0\1\30\1\0\1\30\2\0\3\30\1\0"
operator|+
literal|"\1\30\7\0\1\30\1\0\1\30\66\0\1\30\6\0"
operator|+
literal|"\1\30\3\0\1\30\3\0\1\30\7\0\1\30\31\0"
operator|+
literal|"\20\30\5\0\3\30\3\0\1\30\3\0\2\30\2\0"
operator|+
literal|"\2\30\4\0\1\30\4\110\4\0\1\30\4\0\1\30"
operator|+
literal|"\2\0\1\30\4\0\1\30\1\0\1\30\41\0\1\30"
operator|+
literal|"\127\0\2\110\15\0\4\110\120\0\1\110\15\0\2\110"
operator|+
literal|"\10\0\2\110\1\0\1\110\1\0\1\110\11\0\1\110"
operator|+
literal|"\11\0\2\110\6\0\1\110\2\0\4\110\3\0\1\110"
operator|+
literal|"\2\0\2\110\1\0\3\110\5\0\1\110\1\0\2\110"
operator|+
literal|"\2\0\2\110\1\0\4\110\5\0\1\110\1\0\2\110"
operator|+
literal|"\167\0\1\111\2\0\1\111\23\0\4\111\145\0\1\32"
operator|+
literal|"\132\0\1\32\153\0\1\32\45\0\1\111\21\0\1\32"
operator|+
literal|"\106\0\1\32\11\0\1\111\44\0\1\111\1\0\2\111"
operator|+
literal|"\21\0\1\111\4\0\1\111\7\0\4\111\3\0\1\111"
operator|+
literal|"\12\0\4\32\4\0\1\111\245\0\2\32\230\0\1\111"
operator|+
literal|"\255\0\4\111\215\0\2\111\15\0\4\111\120\0\1\111"
operator|+
literal|"\15\0\2\111\10\0\2\111\1\0\1\111\1\0\1\111"
operator|+
literal|"\11\0\1\111\11\0\2\111\6\0\1\111\2\0\4\111"
operator|+
literal|"\3\0\1\111\2\0\2\111\1\0\3\111\5\0\1\111"
operator|+
literal|"\1\0\2\111\2\0\2\111\1\0\4\111\5\0\1\111"
operator|+
literal|"\1\0\2\111\77\0\1\41\1\0\1\42\2\0\1\43"
operator|+
literal|"\1\0\1\44\4\0\1\45\1\0\1\46\1\0\1\47"
operator|+
literal|"\2\0\1\50\3\0\1\51\2\0\1\52\4\0\1\53"
operator|+
literal|"\3\0\1\54\17\0\1\55\2\0\1\56\21\0\1\57"
operator|+
literal|"\2\0\1\60\55\0\4\30\1\241\6\30\1\62\6\30"
operator|+
literal|"\1\63\1\0\3\30\1\0\3\30\1\0\2\30\1\64"
operator|+
literal|"\3\0\2\30\1\64\1\0\1\63\1\0\1\63\1\62"
operator|+
literal|"\1\0\1\30\2\0\1\30\71\0\1\177\2\0\1\177"
operator|+
literal|"\23\0\4\177\145\0\1\64\132\0\1\64\153\0\1\64"
operator|+
literal|"\45\0\1\177\21\0\1\64\106\0\1\64\11\0\1\177"
operator|+
literal|"\44\0\1\177\1\0\2\177\21\0\1\177\4\0\1\177"
operator|+
literal|"\7\0\4\177\3\0\1\177\12\0\4\64\4\0\1\177"
operator|+
literal|"\245\0\2\64\230\0\1\177\255\0\4\177\215\0\2\177"
operator|+
literal|"\15\0\4\177\120\0\1\177\15\0\2\177\10\0\2\177"
operator|+
literal|"\1\0\1\177\1\0\1\177\11\0\1\177\11\0\2\177"
operator|+
literal|"\6\0\1\177\2\0\4\177\3\0\1\177\2\0\2\177"
operator|+
literal|"\1\0\3\177\5\0\1\177\1\0\2\177\2\0\2\177"
operator|+
literal|"\1\0\4\177\5\0\1\177\1\0\2\177\77\0\1\41"
operator|+
literal|"\1\0\1\42\2\0\1\43\1\0\1\44\4\0\1\45"
operator|+
literal|"\1\0\1\46\1\0\1\47\2\0\1\50\3\0\1\51"
operator|+
literal|"\2\0\1\52\4\0\1\53\3\0\1\54\17\0\1\55"
operator|+
literal|"\2\0\1\56\21\0\1\57\2\0\1\60\55\0\5\30"
operator|+
literal|"\1\242\5\30\1\62\6\30\1\63\1\0\3\30\1\0"
operator|+
literal|"\3\30\1\0\2\30\1\64\3\0\2\30\1\64\1\0"
operator|+
literal|"\1\63\1\0\1\63\1\62\1\0\1\30\2\0\1\30"
operator|+
literal|"\1\0\1\41\1\0\1\42\2\0\1\43\1\0\1\44"
operator|+
literal|"\4\0\1\45\1\0\1\46\1\0\1\47\2\0\1\50"
operator|+
literal|"\3\0\1\51\2\0\1\52\4\0\1\53\3\0\1\54"
operator|+
literal|"\17\0\1\55\2\0\1\56\21\0\1\57\2\0\1\60"
operator|+
literal|"\55\0\6\30\1\243\4\30\1\62\6\30\1\63\1\0"
operator|+
literal|"\3\30\1\0\3\30\1\0\2\30\1\64\3\0\2\30"
operator|+
literal|"\1\64\1\0\1\63\1\0\1\63\1\62\1\0\1\30"
operator|+
literal|"\2\0\1\30\1\0\1\41\1\0\1\42\2\0\1\43"
operator|+
literal|"\1\0\1\44\4\0\1\45\1\0\1\46\1\0\1\47"
operator|+
literal|"\2\0\1\50\3\0\1\51\2\0\1\52\4\0\1\53"
operator|+
literal|"\3\0\1\54\17\0\1\55\2\0\1\56\21\0\1\57"
operator|+
literal|"\2\0\1\60\55\0\7\30\1\244\3\30\1\62\6\30"
operator|+
literal|"\1\63\1\0\3\30\1\0\3\30\1\0\2\30\1\64"
operator|+
literal|"\3\0\2\30\1\64\1\0\1\63\1\0\1\63\1\62"
operator|+
literal|"\1\0\1\30\2\0\1\30\1\0\1\41\1\0\1\42"
operator|+
literal|"\2\0\1\43\1\0\1\44\4\0\1\45\1\0\1\46"
operator|+
literal|"\1\0\1\47\2\0\1\50\3\0\1\51\2\0\1\52"
operator|+
literal|"\4\0\1\53\3\0\1\54\17\0\1\55\2\0\1\56"
operator|+
literal|"\21\0\1\57\2\0\1\60\55\0\10\30\1\245\2\30"
operator|+
literal|"\1\62\6\30\1\63\1\0\3\30\1\0\3\30\1\0"
operator|+
literal|"\2\30\1\64\3\0\2\30\1\64\1\0\1\63\1\0"
operator|+
literal|"\1\63\1\62\1\0\1\30\2\0\1\30\1\0\1\41"
operator|+
literal|"\1\0\1\42\2\0\1\43\1\0\1\44\4\0\1\45"
operator|+
literal|"\1\0\1\46\1\0\1\47\2\0\1\50\3\0\1\51"
operator|+
literal|"\2\0\1\52\4\0\1\53\3\0\1\54\17\0\1\55"
operator|+
literal|"\2\0\1\56\21\0\1\57\2\0\1\60\55\0\11\30"
operator|+
literal|"\1\246\1\30\1\62\6\30\1\63\1\0\3\30\1\0"
operator|+
literal|"\3\30\1\0\2\30\1\64\3\0\2\30\1\64\1\0"
operator|+
literal|"\1\63\1\0\1\63\1\62\1\0\1\30\2\0\1\30"
operator|+
literal|"\1\0\1\41\1\0\1\42\2\0\1\43\1\0\1\44"
operator|+
literal|"\4\0\1\45\1\0\1\46\1\0\1\47\2\0\1\50"
operator|+
literal|"\3\0\1\51\2\0\1\52\4\0\1\53\3\0\1\54"
operator|+
literal|"\17\0\1\55\2\0\1\56\21\0\1\57\2\0\1\60"
operator|+
literal|"\55\0\12\30\1\247\1\62\6\30\1\63\1\0\3\30"
operator|+
literal|"\1\0\3\30\1\0\2\30\1\64\3\0\2\30\1\64"
operator|+
literal|"\1\0\1\63\1\0\1\63\1\62\1\0\1\30\2\0"
operator|+
literal|"\1\30\1\0\1\41\1\0\1\42\2\0\1\43\1\0"
operator|+
literal|"\1\44\4\0\1\45\1\0\1\46\1\0\1\47\2\0"
operator|+
literal|"\1\50\3\0\1\51\2\0\1\52\4\0\1\53\3\0"
operator|+
literal|"\1\54\17\0\1\55\2\0\1\56\21\0\1\57\2\0"
operator|+
literal|"\1\60\55\0\11\30\1\250\1\30\1\62\6\30\1\63"
operator|+
literal|"\1\0\3\30\1\0\3\30\1\0\2\30\1\64\3\0"
operator|+
literal|"\2\30\1\64\1\0\1\63\1\0\1\63\1\62\1\0"
operator|+
literal|"\1\30\2\0\1\30\1\0\1\41\1\0\1\42\2\0"
operator|+
literal|"\1\43\1\0\1\44\4\0\1\45\1\0\1\46\1\0"
operator|+
literal|"\1\47\2\0\1\50\3\0\1\51\2\0\1\52\4\0"
operator|+
literal|"\1\53\3\0\1\54\17\0\1\55\2\0\1\56\21\0"
operator|+
literal|"\1\57\2\0\1\60\55\0\13\30\1\251\6\30\1\63"
operator|+
literal|"\1\0\3\30\1\0\3\30\1\0\2\30\1\64\3\0"
operator|+
literal|"\2\30\1\64\1\0\1\63\1\0\1\63\1\62\1\0"
operator|+
literal|"\1\30\2\0\1\30\1\0\1\41\1\0\1\42\2\0"
operator|+
literal|"\1\150\1\0\1\44\4\0\1\45\1\0\1\46\1\0"
operator|+
literal|"\1\47\2\0\1\50\3\0\1\151\2\0\1\152\4\0"
operator|+
literal|"\1\53\3\0\1\153\17\0\1\55\2\0\1\154\21\0"
operator|+
literal|"\1\155\2\0\1\156\41\0\1\76\13\0\13\30\1\62"
operator|+
literal|"\1\252\5\30\2\0\3\30\1\0\3\30\1\0\2\30"
operator|+
literal|"\1\64\3\0\1\30\1\62\1\64\1\100\3\0\1\62"
operator|+
literal|"\1\0\1\62\2\0\1\30\1\0\1\41\1\0\1\42"
operator|+
literal|"\2\0\1\43\1\0\1\44\4\0\1\45\1\0\1\46"
operator|+
literal|"\1\0\1\47\2\0\1\50\3\0\1\51\2\0\1\52"
operator|+
literal|"\4\0\1\53\3\0\1\54\17\0\1\55\2\0\1\56"
operator|+
literal|"\21\0\1\57\2\0\1\60\55\0\13\30\1\62\1\30"
operator|+
literal|"\1\253\4\30\1\63\1\0\3\30\1\0\3\30\1\0"
operator|+
literal|"\2\30\1\64\3\0\2\30\1\64\1\0\1\63\1\0"
operator|+
literal|"\1\63\1\62\1\0\1\30\2\0\1\30\1\0\1\41"
operator|+
literal|"\1\0\1\42\2\0\1\43\1\0\1\44\4\0\1\45"
operator|+
literal|"\1\0\1\46\1\0\1\47\2\0\1\50\3\0\1\51"
operator|+
literal|"\2\0\1\52\4\0\1\53\3\0\1\54\17\0\1\55"
operator|+
literal|"\2\0\1\56\21\0\1\57\2\0\1\60\55\0\13\30"
operator|+
literal|"\1\62\1\30\1\254\4\30\1\63\1\0\3\30\1\0"
operator|+
literal|"\3\30\1\0\2\30\1\64\3\0\2\30\1\64\1\0"
operator|+
literal|"\1\63\1\0\1\63\1\62\1\0\1\30\2\0\1\30"
operator|+
literal|"\1\0\1\41\1\0\1\42\2\0\1\43\1\0\1\44"
operator|+
literal|"\4\0\1\45\1\0\1\46\1\0\1\47\2\0\1\50"
operator|+
literal|"\3\0\1\51\2\0\1\52\4\0\1\53\3\0\1\54"
operator|+
literal|"\17\0\1\55\2\0\1\56\21\0\1\57\2\0\1\60"
operator|+
literal|"\55\0\13\30\1\62\2\30\1\255\3\30\1\63\1\0"
operator|+
literal|"\3\30\1\0\3\30\1\0\2\30\1\64\3\0\2\30"
operator|+
literal|"\1\64\1\0\1\63\1\0\1\63\1\62\1\0\1\30"
operator|+
literal|"\2\0\1\30\1\0\1\41\1\0\1\42\2\0\1\43"
operator|+
literal|"\1\0\1\44\4\0\1\45\1\0\1\46\1\0\1\47"
operator|+
literal|"\2\0\1\50\3\0\1\51\2\0\1\52\4\0\1\53"
operator|+
literal|"\3\0\1\54\17\0\1\55\2\0\1\56\21\0\1\57"
operator|+
literal|"\2\0\1\60\55\0\13\30\1\256\6\30\1\63\1\0"
operator|+
literal|"\3\30\1\0\3\30\1\0\2\30\1\64\3\0\2\30"
operator|+
literal|"\1\64\1\0\1\63\1\0\1\63\1\62\1\0\1\30"
operator|+
literal|"\2\0\1\30\1\0\1\41\1\0\1\42\2\0\1\150"
operator|+
literal|"\1\0\1\44\4\0\1\45\1\0\1\46\1\0\1\47"
operator|+
literal|"\2\0\1\50\3\0\1\151\2\0\1\152\4\0\1\53"
operator|+
literal|"\3\0\1\153\17\0\1\55\2\0\1\154\21\0\1\155"
operator|+
literal|"\2\0\1\156\41\0\1\76\13\0\13\30\1\62\1\30"
operator|+
literal|"\1\257\4\30\2\0\3\30\1\0\3\30\1\0\2\30"
operator|+
literal|"\1\64\3\0\1\30\1\62\1\64\1\100\3\0\1\62"
operator|+
literal|"\1\0\1\62\2\0\1\30\1\0\1\41\1\0\1\42"
operator|+
literal|"\2\0\1\43\1\0\1\44\4\0\1\45\1\0\1\46"
operator|+
literal|"\1\0\1\47\2\0\1\50\3\0\1\51\2\0\1\52"
operator|+
literal|"\4\0\1\53\3\0\1\54\17\0\1\55\2\0\1\56"
operator|+
literal|"\21\0\1\57\2\0\1\60\55\0\1\260\12\30\1\62"
operator|+
literal|"\6\30\1\63\1\0\3\30\1\0\3\30\1\0\2\30"
operator|+
literal|"\1\64\3\0\2\30\1\64\1\0\1\63\1\0\1\63"
operator|+
literal|"\1\62\1\0\1\30\2\0\1\30\1\0\1\41\1\0"
operator|+
literal|"\1\42\2\0\1\43\1\0\1\44\4\0\1\45\1\0"
operator|+
literal|"\1\46\1\0\1\47\2\0\1\50\3\0\1\51\2\0"
operator|+
literal|"\1\52\4\0\1\53\3\0\1\54\17\0\1\55\2\0"
operator|+
literal|"\1\56\21\0\1\57\2\0\1\60\55\0\13\30\1\62"
operator|+
literal|"\1\261\5\30\1\63\1\0\3\30\1\0\3\30\1\0"
operator|+
literal|"\2\30\1\64\3\0\2\30\1\64\1\0\1\63\1\0"
operator|+
literal|"\1\63\1\62\1\0\1\30\2\0\1\30\1\0\1\41"
operator|+
literal|"\1\0\1\42\2\0\1\43\1\0\1\44\4\0\1\45"
operator|+
literal|"\1\0\1\46\1\0\1\47\2\0\1\50\3\0\1\51"
operator|+
literal|"\2\0\1\52\4\0\1\53\3\0\1\54\17\0\1\55"
operator|+
literal|"\2\0\1\56\21\0\1\57\2\0\1\60\55\0\13\30"
operator|+
literal|"\1\62\3\30\1\262\2\30\1\63\1\0\3\30\1\0"
operator|+
literal|"\3\30\1\0\2\30\1\64\3\0\2\30\1\64\1\0"
operator|+
literal|"\1\63\1\0\1\63\1\62\1\0\1\30\2\0\1\30"
operator|+
literal|"\1\0\1\41\1\0\1\42\2\0\1\43\1\0\1\44"
operator|+
literal|"\4\0\1\45\1\0\1\46\1\0\1\47\2\0\1\50"
operator|+
literal|"\3\0\1\51\2\0\1\52\4\0\1\53\3\0\1\54"
operator|+
literal|"\17\0\1\55\2\0\1\56\21\0\1\57\2\0\1\60"
operator|+
literal|"\55\0\13\30\1\62\1\30\1\263\4\30\1\63\1\0"
operator|+
literal|"\3\30\1\0\3\30\1\0\2\30\1\64\3\0\2\30"
operator|+
literal|"\1\64\1\0\1\63\1\0\1\63\1\62\1\0\1\30"
operator|+
literal|"\2\0\1\30\1\0\1\41\1\0\1\42\2\0\1\43"
operator|+
literal|"\1\0\1\44\4\0\1\45\1\0\1\46\1\0\1\47"
operator|+
literal|"\2\0\1\50\3\0\1\51\2\0\1\52\4\0\1\53"
operator|+
literal|"\3\0\1\54\17\0\1\55\2\0\1\56\21\0\1\57"
operator|+
literal|"\2\0\1\60\55\0\13\30\1\62\4\30\1\264\1\30"
operator|+
literal|"\1\63\1\0\3\30\1\0\3\30\1\0\2\30\1\64"
operator|+
literal|"\3\0\2\30\1\64\1\0\1\63\1\0\1\63\1\62"
operator|+
literal|"\1\0\1\30\2\0\1\30\1\0\1\41\1\0\1\42"
operator|+
literal|"\2\0\1\43\1\0\1\44\4\0\1\45\1\0\1\46"
operator|+
literal|"\1\0\1\47\2\0\1\50\3\0\1\51\2\0\1\52"
operator|+
literal|"\4\0\1\53\3\0\1\54\17\0\1\55\2\0\1\56"
operator|+
literal|"\21\0\1\57\2\0\1\60\55\0\13\30\1\62\5\30"
operator|+
literal|"\1\265\1\63\1\0\3\30\1\0\3\30\1\0\2\30"
operator|+
literal|"\1\64\3\0\2\30\1\64\1\0\1\63\1\0\1\63"
operator|+
literal|"\1\62\1\0\1\30\2\0\1\30\1\0\1\41\1\0"
operator|+
literal|"\1\42\2\0\1\43\1\0\1\44\4\0\1\45\1\0"
operator|+
literal|"\1\46\1\0\1\47\2\0\1\50\3\0\1\51\2\0"
operator|+
literal|"\1\52\4\0\1\53\3\0\1\54\17\0\1\55\2\0"
operator|+
literal|"\1\56\21\0\1\57\2\0\1\60\55\0\13\30\1\62"
operator|+
literal|"\6\30\1\266\1\0\3\30\1\0\3\30\1\0\2\30"
operator|+
literal|"\1\64\3\0\2\30\1\64\1\0\1\63\1\0\1\63"
operator|+
literal|"\1\62\1\0\1\30\2\0\1\30\1\0\1\41\1\0"
operator|+
literal|"\1\42\2\0\1\157\1\0\1\160\4\0\1\45\1\0"
operator|+
literal|"\1\46\1\0\1\47\2\0\1\50\3\0\1\161\2\0"
operator|+
literal|"\1\162\4\0\1\163\3\0\1\164\17\0\1\55\2\0"
operator|+
literal|"\1\165\21\0\1\166\2\0\1\167\55\0\13\30\1\0"
operator|+
literal|"\6\30\1\0\1\267\3\30\1\0\3\30\1\0\2\30"
operator|+
literal|"\4\0\1\30\1\63\7\0\1\63\2\0\1\30\216\0"
operator|+
literal|"\1\270\251\0\1\271\224\0\1\272\275\0\1\273\226\0"
operator|+
literal|"\1\274\52\0\221\275\1\0\27\275\176\0\1\276\274\0"
operator|+
literal|"\1\277\222\0\1\300\277\0\1\301\224\0\1\302\244\0"
operator|+
literal|"\1\303\277\0\1\304\252\0\1\305\251\0\1\306\251\0"
operator|+
literal|"\1\307\230\0\1\310\271\0\1\311\236\0\1\312\263\0"
operator|+
literal|"\1\313\251\0\1\314\17\0"
decl_stmt|;
DECL|method|zzUnpackTrans
specifier|private
specifier|static
name|int
index|[]
name|zzUnpackTrans
parameter_list|()
block|{
name|int
index|[]
name|result
init|=
operator|new
name|int
index|[
literal|32617
index|]
decl_stmt|;
name|int
name|offset
init|=
literal|0
decl_stmt|;
name|offset
operator|=
name|zzUnpackTrans
argument_list|(
name|ZZ_TRANS_PACKED_0
argument_list|,
name|offset
argument_list|,
name|result
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
DECL|method|zzUnpackTrans
specifier|private
specifier|static
name|int
name|zzUnpackTrans
parameter_list|(
name|String
name|packed
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
index|[]
name|result
parameter_list|)
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|/* index in packed string  */
name|int
name|j
init|=
name|offset
decl_stmt|;
comment|/* index in unpacked array */
name|int
name|l
init|=
name|packed
operator|.
name|length
argument_list|()
decl_stmt|;
while|while
condition|(
name|i
operator|<
name|l
condition|)
block|{
name|int
name|count
init|=
name|packed
operator|.
name|charAt
argument_list|(
name|i
operator|++
argument_list|)
decl_stmt|;
name|int
name|value
init|=
name|packed
operator|.
name|charAt
argument_list|(
name|i
operator|++
argument_list|)
decl_stmt|;
name|value
operator|--
expr_stmt|;
do|do
name|result
index|[
name|j
operator|++
index|]
operator|=
name|value
expr_stmt|;
do|while
condition|(
operator|--
name|count
operator|>
literal|0
condition|)
do|;
block|}
return|return
name|j
return|;
block|}
comment|/* error codes */
DECL|field|ZZ_UNKNOWN_ERROR
specifier|private
specifier|static
specifier|final
name|int
name|ZZ_UNKNOWN_ERROR
init|=
literal|0
decl_stmt|;
DECL|field|ZZ_NO_MATCH
specifier|private
specifier|static
specifier|final
name|int
name|ZZ_NO_MATCH
init|=
literal|1
decl_stmt|;
DECL|field|ZZ_PUSHBACK_2BIG
specifier|private
specifier|static
specifier|final
name|int
name|ZZ_PUSHBACK_2BIG
init|=
literal|2
decl_stmt|;
comment|/* error messages for the codes above */
DECL|field|ZZ_ERROR_MSG
specifier|private
specifier|static
specifier|final
name|String
name|ZZ_ERROR_MSG
index|[]
init|=
block|{
literal|"Unkown internal scanner error"
block|,
literal|"Error: could not match input"
block|,
literal|"Error: pushback value was too large"
block|}
decl_stmt|;
comment|/**    * ZZ_ATTRIBUTE[aState] contains the attributes of state<code>aState</code>    */
DECL|field|ZZ_ATTRIBUTE
specifier|private
specifier|static
specifier|final
name|int
index|[]
name|ZZ_ATTRIBUTE
init|=
name|zzUnpackAttribute
argument_list|()
decl_stmt|;
DECL|field|ZZ_ATTRIBUTE_PACKED_0
specifier|private
specifier|static
specifier|final
name|String
name|ZZ_ATTRIBUTE_PACKED_0
init|=
literal|"\1\0\1\11\36\1\20\0\2\1\1\0\1\1\13\0"
operator|+
literal|"\1\1\7\0\1\1\36\0\1\1\57\0\1\1\11\0"
operator|+
literal|"\25\1\27\0"
decl_stmt|;
DECL|method|zzUnpackAttribute
specifier|private
specifier|static
name|int
index|[]
name|zzUnpackAttribute
parameter_list|()
block|{
name|int
index|[]
name|result
init|=
operator|new
name|int
index|[
literal|204
index|]
decl_stmt|;
name|int
name|offset
init|=
literal|0
decl_stmt|;
name|offset
operator|=
name|zzUnpackAttribute
argument_list|(
name|ZZ_ATTRIBUTE_PACKED_0
argument_list|,
name|offset
argument_list|,
name|result
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
DECL|method|zzUnpackAttribute
specifier|private
specifier|static
name|int
name|zzUnpackAttribute
parameter_list|(
name|String
name|packed
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
index|[]
name|result
parameter_list|)
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|/* index in packed string  */
name|int
name|j
init|=
name|offset
decl_stmt|;
comment|/* index in unpacked array */
name|int
name|l
init|=
name|packed
operator|.
name|length
argument_list|()
decl_stmt|;
while|while
condition|(
name|i
operator|<
name|l
condition|)
block|{
name|int
name|count
init|=
name|packed
operator|.
name|charAt
argument_list|(
name|i
operator|++
argument_list|)
decl_stmt|;
name|int
name|value
init|=
name|packed
operator|.
name|charAt
argument_list|(
name|i
operator|++
argument_list|)
decl_stmt|;
do|do
name|result
index|[
name|j
operator|++
index|]
operator|=
name|value
expr_stmt|;
do|while
condition|(
operator|--
name|count
operator|>
literal|0
condition|)
do|;
block|}
return|return
name|j
return|;
block|}
comment|/** the input device */
DECL|field|zzReader
specifier|private
name|java
operator|.
name|io
operator|.
name|Reader
name|zzReader
decl_stmt|;
comment|/** the current state of the DFA */
DECL|field|zzState
specifier|private
name|int
name|zzState
decl_stmt|;
comment|/** the current lexical state */
DECL|field|zzLexicalState
specifier|private
name|int
name|zzLexicalState
init|=
name|YYINITIAL
decl_stmt|;
comment|/** this buffer contains the current text to be matched and is       the source of the yytext() string */
DECL|field|zzBuffer
specifier|private
name|char
name|zzBuffer
index|[]
init|=
operator|new
name|char
index|[
name|ZZ_BUFFERSIZE
index|]
decl_stmt|;
comment|/** the textposition at the last accepting state */
DECL|field|zzMarkedPos
specifier|private
name|int
name|zzMarkedPos
decl_stmt|;
comment|/** the current text position in the buffer */
DECL|field|zzCurrentPos
specifier|private
name|int
name|zzCurrentPos
decl_stmt|;
comment|/** startRead marks the beginning of the yytext() string in the buffer */
DECL|field|zzStartRead
specifier|private
name|int
name|zzStartRead
decl_stmt|;
comment|/** endRead marks the last character in the buffer, that has been read       from input */
DECL|field|zzEndRead
specifier|private
name|int
name|zzEndRead
decl_stmt|;
comment|/** number of newlines encountered up to the start of the matched text */
DECL|field|yyline
specifier|private
name|int
name|yyline
decl_stmt|;
comment|/** the number of characters up to the start of the matched text */
DECL|field|yychar
specifier|private
name|int
name|yychar
decl_stmt|;
comment|/**    * the number of characters from the last newline up to the start of the     * matched text    */
DECL|field|yycolumn
specifier|private
name|int
name|yycolumn
decl_stmt|;
comment|/**     * zzAtBOL == true<=> the scanner is currently at the beginning of a line    */
DECL|field|zzAtBOL
specifier|private
name|boolean
name|zzAtBOL
init|=
literal|true
decl_stmt|;
comment|/** zzAtEOF == true<=> the scanner is at the EOF */
DECL|field|zzAtEOF
specifier|private
name|boolean
name|zzAtEOF
decl_stmt|;
comment|/** denotes if the user-EOF-code has already been executed */
DECL|field|zzEOFDone
specifier|private
name|boolean
name|zzEOFDone
decl_stmt|;
comment|/* user code: */
comment|/** Alphanumeric sequences */
DECL|field|WORD_TYPE
specifier|public
specifier|static
specifier|final
name|int
name|WORD_TYPE
init|=
name|StandardTokenizer
operator|.
name|ALPHANUM
decl_stmt|;
comment|/** Numbers */
DECL|field|NUMERIC_TYPE
specifier|public
specifier|static
specifier|final
name|int
name|NUMERIC_TYPE
init|=
name|StandardTokenizer
operator|.
name|NUM
decl_stmt|;
comment|/**    * Chars in class \p{Line_Break = Complex_Context} are from South East Asian    * scripts (Thai, Lao, Myanmar, Khmer, etc.).  Sequences of these are kept     * together as as a single token rather than broken up, because the logic    * required to break them at word boundaries is too complex for UAX#29.    *<p>    * See Unicode Line Breaking Algorithm: http://www.unicode.org/reports/tr14/#SA    */
DECL|field|SOUTH_EAST_ASIAN_TYPE
specifier|public
specifier|static
specifier|final
name|int
name|SOUTH_EAST_ASIAN_TYPE
init|=
name|StandardTokenizer
operator|.
name|SOUTHEAST_ASIAN
decl_stmt|;
DECL|field|IDEOGRAPHIC_TYPE
specifier|public
specifier|static
specifier|final
name|int
name|IDEOGRAPHIC_TYPE
init|=
name|StandardTokenizer
operator|.
name|IDEOGRAPHIC
decl_stmt|;
DECL|field|HIRAGANA_TYPE
specifier|public
specifier|static
specifier|final
name|int
name|HIRAGANA_TYPE
init|=
name|StandardTokenizer
operator|.
name|HIRAGANA
decl_stmt|;
DECL|field|KATAKANA_TYPE
specifier|public
specifier|static
specifier|final
name|int
name|KATAKANA_TYPE
init|=
name|StandardTokenizer
operator|.
name|KATAKANA
decl_stmt|;
DECL|field|HANGUL_TYPE
specifier|public
specifier|static
specifier|final
name|int
name|HANGUL_TYPE
init|=
name|StandardTokenizer
operator|.
name|HANGUL
decl_stmt|;
DECL|method|yychar
specifier|public
specifier|final
name|int
name|yychar
parameter_list|()
block|{
return|return
name|yychar
return|;
block|}
comment|/**    * Fills CharTermAttribute with the current token text.    */
DECL|method|getText
specifier|public
specifier|final
name|void
name|getText
parameter_list|(
name|CharTermAttribute
name|t
parameter_list|)
block|{
name|t
operator|.
name|copyBuffer
argument_list|(
name|zzBuffer
argument_list|,
name|zzStartRead
argument_list|,
name|zzMarkedPos
operator|-
name|zzStartRead
argument_list|)
expr_stmt|;
block|}
comment|/**    * Creates a new scanner    * There is also a java.io.InputStream version of this constructor.    *    * @param   in  the java.io.Reader to read input from.    */
DECL|method|StandardTokenizerImpl
specifier|public
name|StandardTokenizerImpl
parameter_list|(
name|java
operator|.
name|io
operator|.
name|Reader
name|in
parameter_list|)
block|{
name|this
operator|.
name|zzReader
operator|=
name|in
expr_stmt|;
block|}
comment|/**     * Unpacks the compressed character translation table.    *    * @param packed   the packed character translation table    * @return         the unpacked character translation table    */
DECL|method|zzUnpackCMap
specifier|private
specifier|static
name|char
index|[]
name|zzUnpackCMap
parameter_list|(
name|String
name|packed
parameter_list|)
block|{
name|char
index|[]
name|map
init|=
operator|new
name|char
index|[
literal|0x10000
index|]
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|/* index in packed string  */
name|int
name|j
init|=
literal|0
decl_stmt|;
comment|/* index in unpacked array */
while|while
condition|(
name|i
operator|<
literal|2932
condition|)
block|{
name|int
name|count
init|=
name|packed
operator|.
name|charAt
argument_list|(
name|i
operator|++
argument_list|)
decl_stmt|;
name|char
name|value
init|=
name|packed
operator|.
name|charAt
argument_list|(
name|i
operator|++
argument_list|)
decl_stmt|;
do|do
name|map
index|[
name|j
operator|++
index|]
operator|=
name|value
expr_stmt|;
do|while
condition|(
operator|--
name|count
operator|>
literal|0
condition|)
do|;
block|}
return|return
name|map
return|;
block|}
comment|/**    * Refills the input buffer.    *    * @return<code>false</code>, iff there was new input.    *     * @exception   java.io.IOException  if any I/O-Error occurs    */
DECL|method|zzRefill
specifier|private
name|boolean
name|zzRefill
parameter_list|()
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
comment|/* first: make room (if you can) */
if|if
condition|(
name|zzStartRead
operator|>
literal|0
condition|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|zzBuffer
argument_list|,
name|zzStartRead
argument_list|,
name|zzBuffer
argument_list|,
literal|0
argument_list|,
name|zzEndRead
operator|-
name|zzStartRead
argument_list|)
expr_stmt|;
comment|/* translate stored positions */
name|zzEndRead
operator|-=
name|zzStartRead
expr_stmt|;
name|zzCurrentPos
operator|-=
name|zzStartRead
expr_stmt|;
name|zzMarkedPos
operator|-=
name|zzStartRead
expr_stmt|;
name|zzStartRead
operator|=
literal|0
expr_stmt|;
block|}
comment|/* is the buffer big enough? */
if|if
condition|(
name|zzCurrentPos
operator|>=
name|zzBuffer
operator|.
name|length
condition|)
block|{
comment|/* if not: blow it up */
name|char
name|newBuffer
index|[]
init|=
operator|new
name|char
index|[
name|zzCurrentPos
operator|*
literal|2
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|zzBuffer
argument_list|,
literal|0
argument_list|,
name|newBuffer
argument_list|,
literal|0
argument_list|,
name|zzBuffer
operator|.
name|length
argument_list|)
expr_stmt|;
name|zzBuffer
operator|=
name|newBuffer
expr_stmt|;
block|}
comment|/* finally: fill the buffer with new input */
name|int
name|numRead
init|=
name|zzReader
operator|.
name|read
argument_list|(
name|zzBuffer
argument_list|,
name|zzEndRead
argument_list|,
name|zzBuffer
operator|.
name|length
operator|-
name|zzEndRead
argument_list|)
decl_stmt|;
if|if
condition|(
name|numRead
operator|>
literal|0
condition|)
block|{
name|zzEndRead
operator|+=
name|numRead
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// unlikely but not impossible: read 0 characters, but not at end of stream
if|if
condition|(
name|numRead
operator|==
literal|0
condition|)
block|{
name|int
name|c
init|=
name|zzReader
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|c
operator|==
operator|-
literal|1
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
name|zzBuffer
index|[
name|zzEndRead
operator|++
index|]
operator|=
operator|(
name|char
operator|)
name|c
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
comment|// numRead< 0
return|return
literal|true
return|;
block|}
comment|/**    * Closes the input stream.    */
DECL|method|yyclose
specifier|public
specifier|final
name|void
name|yyclose
parameter_list|()
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
name|zzAtEOF
operator|=
literal|true
expr_stmt|;
comment|/* indicate end of file */
name|zzEndRead
operator|=
name|zzStartRead
expr_stmt|;
comment|/* invalidate buffer    */
if|if
condition|(
name|zzReader
operator|!=
literal|null
condition|)
name|zzReader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * Resets the scanner to read from a new input stream.    * Does not close the old reader.    *    * All internal variables are reset, the old input stream     *<b>cannot</b> be reused (internal buffer is discarded and lost).    * Lexical state is set to<tt>ZZ_INITIAL</tt>.    *    * Internal scan buffer is resized down to its initial length, if it has grown.    *    * @param reader   the new input stream     */
DECL|method|yyreset
specifier|public
specifier|final
name|void
name|yyreset
parameter_list|(
name|java
operator|.
name|io
operator|.
name|Reader
name|reader
parameter_list|)
block|{
name|zzReader
operator|=
name|reader
expr_stmt|;
name|zzAtBOL
operator|=
literal|true
expr_stmt|;
name|zzAtEOF
operator|=
literal|false
expr_stmt|;
name|zzEOFDone
operator|=
literal|false
expr_stmt|;
name|zzEndRead
operator|=
name|zzStartRead
operator|=
literal|0
expr_stmt|;
name|zzCurrentPos
operator|=
name|zzMarkedPos
operator|=
literal|0
expr_stmt|;
name|yyline
operator|=
name|yychar
operator|=
name|yycolumn
operator|=
literal|0
expr_stmt|;
name|zzLexicalState
operator|=
name|YYINITIAL
expr_stmt|;
if|if
condition|(
name|zzBuffer
operator|.
name|length
operator|>
name|ZZ_BUFFERSIZE
condition|)
name|zzBuffer
operator|=
operator|new
name|char
index|[
name|ZZ_BUFFERSIZE
index|]
expr_stmt|;
block|}
comment|/**    * Returns the current lexical state.    */
DECL|method|yystate
specifier|public
specifier|final
name|int
name|yystate
parameter_list|()
block|{
return|return
name|zzLexicalState
return|;
block|}
comment|/**    * Enters a new lexical state    *    * @param newState the new lexical state    */
DECL|method|yybegin
specifier|public
specifier|final
name|void
name|yybegin
parameter_list|(
name|int
name|newState
parameter_list|)
block|{
name|zzLexicalState
operator|=
name|newState
expr_stmt|;
block|}
comment|/**    * Returns the text matched by the current regular expression.    */
DECL|method|yytext
specifier|public
specifier|final
name|String
name|yytext
parameter_list|()
block|{
return|return
operator|new
name|String
argument_list|(
name|zzBuffer
argument_list|,
name|zzStartRead
argument_list|,
name|zzMarkedPos
operator|-
name|zzStartRead
argument_list|)
return|;
block|}
comment|/**    * Returns the character at position<tt>pos</tt> from the     * matched text.     *     * It is equivalent to yytext().charAt(pos), but faster    *    * @param pos the position of the character to fetch.     *            A value from 0 to yylength()-1.    *    * @return the character at position pos    */
DECL|method|yycharat
specifier|public
specifier|final
name|char
name|yycharat
parameter_list|(
name|int
name|pos
parameter_list|)
block|{
return|return
name|zzBuffer
index|[
name|zzStartRead
operator|+
name|pos
index|]
return|;
block|}
comment|/**    * Returns the length of the matched text region.    */
DECL|method|yylength
specifier|public
specifier|final
name|int
name|yylength
parameter_list|()
block|{
return|return
name|zzMarkedPos
operator|-
name|zzStartRead
return|;
block|}
comment|/**    * Reports an error that occured while scanning.    *    * In a wellformed scanner (no or only correct usage of     * yypushback(int) and a match-all fallback rule) this method     * will only be called with things that "Can't Possibly Happen".    * If this method is called, something is seriously wrong    * (e.g. a JFlex bug producing a faulty scanner etc.).    *    * Usual syntax/scanner level error handling should be done    * in error fallback rules.    *    * @param   errorCode  the code of the errormessage to display    */
DECL|method|zzScanError
specifier|private
name|void
name|zzScanError
parameter_list|(
name|int
name|errorCode
parameter_list|)
block|{
name|String
name|message
decl_stmt|;
try|try
block|{
name|message
operator|=
name|ZZ_ERROR_MSG
index|[
name|errorCode
index|]
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArrayIndexOutOfBoundsException
name|e
parameter_list|)
block|{
name|message
operator|=
name|ZZ_ERROR_MSG
index|[
name|ZZ_UNKNOWN_ERROR
index|]
expr_stmt|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
name|message
argument_list|)
throw|;
block|}
comment|/**    * Pushes the specified amount of characters back into the input stream.    *    * They will be read again by then next call of the scanning method    *    * @param number  the number of characters to be read again.    *                This number must not be greater than yylength()!    */
DECL|method|yypushback
specifier|public
name|void
name|yypushback
parameter_list|(
name|int
name|number
parameter_list|)
block|{
if|if
condition|(
name|number
operator|>
name|yylength
argument_list|()
condition|)
name|zzScanError
argument_list|(
name|ZZ_PUSHBACK_2BIG
argument_list|)
expr_stmt|;
name|zzMarkedPos
operator|-=
name|number
expr_stmt|;
block|}
comment|/**    * Resumes scanning until the next regular expression is matched,    * the end of input is encountered or an I/O-Error occurs.    *    * @return      the next token    * @exception   java.io.IOException  if any I/O-Error occurs    */
DECL|method|getNextToken
specifier|public
name|int
name|getNextToken
parameter_list|()
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
name|int
name|zzInput
decl_stmt|;
name|int
name|zzAction
decl_stmt|;
comment|// cached fields:
name|int
name|zzCurrentPosL
decl_stmt|;
name|int
name|zzMarkedPosL
decl_stmt|;
name|int
name|zzEndReadL
init|=
name|zzEndRead
decl_stmt|;
name|char
index|[]
name|zzBufferL
init|=
name|zzBuffer
decl_stmt|;
name|char
index|[]
name|zzCMapL
init|=
name|ZZ_CMAP
decl_stmt|;
name|int
index|[]
name|zzTransL
init|=
name|ZZ_TRANS
decl_stmt|;
name|int
index|[]
name|zzRowMapL
init|=
name|ZZ_ROWMAP
decl_stmt|;
name|int
index|[]
name|zzAttrL
init|=
name|ZZ_ATTRIBUTE
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|zzMarkedPosL
operator|=
name|zzMarkedPos
expr_stmt|;
name|yychar
operator|+=
name|zzMarkedPosL
operator|-
name|zzStartRead
expr_stmt|;
name|zzAction
operator|=
operator|-
literal|1
expr_stmt|;
name|zzCurrentPosL
operator|=
name|zzCurrentPos
operator|=
name|zzStartRead
operator|=
name|zzMarkedPosL
expr_stmt|;
name|zzState
operator|=
name|ZZ_LEXSTATE
index|[
name|zzLexicalState
index|]
expr_stmt|;
comment|// set up zzAction for empty match case:
name|int
name|zzAttributes
init|=
name|zzAttrL
index|[
name|zzState
index|]
decl_stmt|;
if|if
condition|(
operator|(
name|zzAttributes
operator|&
literal|1
operator|)
operator|==
literal|1
condition|)
block|{
name|zzAction
operator|=
name|zzState
expr_stmt|;
block|}
name|zzForAction
label|:
block|{
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
name|zzCurrentPosL
operator|<
name|zzEndReadL
condition|)
name|zzInput
operator|=
name|zzBufferL
index|[
name|zzCurrentPosL
operator|++
index|]
expr_stmt|;
elseif|else
if|if
condition|(
name|zzAtEOF
condition|)
block|{
name|zzInput
operator|=
name|YYEOF
expr_stmt|;
break|break
name|zzForAction
break|;
block|}
else|else
block|{
comment|// store back cached positions
name|zzCurrentPos
operator|=
name|zzCurrentPosL
expr_stmt|;
name|zzMarkedPos
operator|=
name|zzMarkedPosL
expr_stmt|;
name|boolean
name|eof
init|=
name|zzRefill
argument_list|()
decl_stmt|;
comment|// get translated positions and possibly new buffer
name|zzCurrentPosL
operator|=
name|zzCurrentPos
expr_stmt|;
name|zzMarkedPosL
operator|=
name|zzMarkedPos
expr_stmt|;
name|zzBufferL
operator|=
name|zzBuffer
expr_stmt|;
name|zzEndReadL
operator|=
name|zzEndRead
expr_stmt|;
if|if
condition|(
name|eof
condition|)
block|{
name|zzInput
operator|=
name|YYEOF
expr_stmt|;
break|break
name|zzForAction
break|;
block|}
else|else
block|{
name|zzInput
operator|=
name|zzBufferL
index|[
name|zzCurrentPosL
operator|++
index|]
expr_stmt|;
block|}
block|}
name|int
name|zzNext
init|=
name|zzTransL
index|[
name|zzRowMapL
index|[
name|zzState
index|]
operator|+
name|zzCMapL
index|[
name|zzInput
index|]
index|]
decl_stmt|;
if|if
condition|(
name|zzNext
operator|==
operator|-
literal|1
condition|)
break|break
name|zzForAction
break|;
name|zzState
operator|=
name|zzNext
expr_stmt|;
name|zzAttributes
operator|=
name|zzAttrL
index|[
name|zzState
index|]
expr_stmt|;
if|if
condition|(
operator|(
name|zzAttributes
operator|&
literal|1
operator|)
operator|==
literal|1
condition|)
block|{
name|zzAction
operator|=
name|zzState
expr_stmt|;
name|zzMarkedPosL
operator|=
name|zzCurrentPosL
expr_stmt|;
if|if
condition|(
operator|(
name|zzAttributes
operator|&
literal|8
operator|)
operator|==
literal|8
condition|)
break|break
name|zzForAction
break|;
block|}
block|}
block|}
comment|// store back cached position
name|zzMarkedPos
operator|=
name|zzMarkedPosL
expr_stmt|;
switch|switch
condition|(
name|zzAction
operator|<
literal|0
condition|?
name|zzAction
else|:
name|ZZ_ACTION
index|[
name|zzAction
index|]
condition|)
block|{
case|case
literal|2
case|:
block|{
return|return
name|WORD_TYPE
return|;
block|}
case|case
literal|9
case|:
break|break;
case|case
literal|5
case|:
block|{
return|return
name|SOUTH_EAST_ASIAN_TYPE
return|;
block|}
case|case
literal|10
case|:
break|break;
case|case
literal|4
case|:
block|{
return|return
name|KATAKANA_TYPE
return|;
block|}
case|case
literal|11
case|:
break|break;
case|case
literal|6
case|:
block|{
return|return
name|IDEOGRAPHIC_TYPE
return|;
block|}
case|case
literal|12
case|:
break|break;
case|case
literal|8
case|:
block|{
return|return
name|HANGUL_TYPE
return|;
block|}
case|case
literal|13
case|:
break|break;
case|case
literal|3
case|:
block|{
return|return
name|NUMERIC_TYPE
return|;
block|}
case|case
literal|14
case|:
break|break;
case|case
literal|7
case|:
block|{
return|return
name|HIRAGANA_TYPE
return|;
block|}
case|case
literal|15
case|:
break|break;
case|case
literal|1
case|:
block|{
comment|/* Break so we don't hit fall-through warning: */
break|break;
comment|/* Not numeric, word, ideographic, hiragana, or SE Asian -- ignore it. */
block|}
case|case
literal|16
case|:
break|break;
default|default:
if|if
condition|(
name|zzInput
operator|==
name|YYEOF
operator|&&
name|zzStartRead
operator|==
name|zzCurrentPos
condition|)
block|{
name|zzAtEOF
operator|=
literal|true
expr_stmt|;
block|{
return|return
name|StandardTokenizerInterface
operator|.
name|YYEOF
return|;
block|}
block|}
else|else
block|{
name|zzScanError
argument_list|(
name|ZZ_NO_MATCH
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class
end_unit
