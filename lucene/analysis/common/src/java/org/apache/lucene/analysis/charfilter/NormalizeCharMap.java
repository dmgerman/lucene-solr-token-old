begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.analysis.charfilter
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|charfilter
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|CharsRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IntsRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|fst
operator|.
name|Builder
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|fst
operator|.
name|CharSequenceOutputs
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|fst
operator|.
name|FST
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|fst
operator|.
name|Outputs
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|fst
operator|.
name|Util
import|;
end_import
begin_comment
comment|// TODO: save/load?
end_comment
begin_comment
comment|/**  * Holds a map of String input to String output, to be used  * with {@link MappingCharFilter}.  Use the {@link Builder}  * to create this.  */
end_comment
begin_class
DECL|class|NormalizeCharMap
specifier|public
class|class
name|NormalizeCharMap
block|{
DECL|field|map
specifier|final
name|FST
argument_list|<
name|CharsRef
argument_list|>
name|map
decl_stmt|;
DECL|field|cachedRootArcs
specifier|final
name|Map
argument_list|<
name|Character
argument_list|,
name|FST
operator|.
name|Arc
argument_list|<
name|CharsRef
argument_list|>
argument_list|>
name|cachedRootArcs
init|=
operator|new
name|HashMap
argument_list|<
name|Character
argument_list|,
name|FST
operator|.
name|Arc
argument_list|<
name|CharsRef
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
comment|// Use the builder to create:
DECL|method|NormalizeCharMap
specifier|private
name|NormalizeCharMap
parameter_list|(
name|FST
argument_list|<
name|CharsRef
argument_list|>
name|map
parameter_list|)
block|{
name|this
operator|.
name|map
operator|=
name|map
expr_stmt|;
if|if
condition|(
name|map
operator|!=
literal|null
condition|)
block|{
try|try
block|{
comment|// Pre-cache root arcs:
specifier|final
name|FST
operator|.
name|Arc
argument_list|<
name|CharsRef
argument_list|>
name|scratchArc
init|=
operator|new
name|FST
operator|.
name|Arc
argument_list|<
name|CharsRef
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|FST
operator|.
name|BytesReader
name|fstReader
init|=
name|map
operator|.
name|getBytesReader
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|map
operator|.
name|getFirstArc
argument_list|(
name|scratchArc
argument_list|)
expr_stmt|;
if|if
condition|(
name|FST
operator|.
name|targetHasArcs
argument_list|(
name|scratchArc
argument_list|)
condition|)
block|{
name|map
operator|.
name|readFirstRealTargetArc
argument_list|(
name|scratchArc
operator|.
name|target
argument_list|,
name|scratchArc
argument_list|,
name|fstReader
argument_list|)
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
assert|assert
name|scratchArc
operator|.
name|label
operator|!=
name|FST
operator|.
name|END_LABEL
assert|;
name|cachedRootArcs
operator|.
name|put
argument_list|(
name|Character
operator|.
name|valueOf
argument_list|(
operator|(
name|char
operator|)
name|scratchArc
operator|.
name|label
argument_list|)
argument_list|,
operator|new
name|FST
operator|.
name|Arc
argument_list|<
name|CharsRef
argument_list|>
argument_list|()
operator|.
name|copyFrom
argument_list|(
name|scratchArc
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|scratchArc
operator|.
name|isLast
argument_list|()
condition|)
block|{
break|break;
block|}
name|map
operator|.
name|readNextRealArc
argument_list|(
name|scratchArc
argument_list|,
name|fstReader
argument_list|)
expr_stmt|;
block|}
block|}
comment|//System.out.println("cached " + cachedRootArcs.size() + " root arcs");
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
comment|// Bogus FST IOExceptions!!  (will never happen)
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**    * Builds an NormalizeCharMap.    *<p>    * Call add() until you have added all the mappings, then call build() to get a NormalizeCharMap    * @lucene.experimental    */
DECL|class|Builder
specifier|public
specifier|static
class|class
name|Builder
block|{
DECL|field|pendingPairs
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|pendingPairs
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|/** Records a replacement to be applied to the input      *  stream.  Whenever<code>singleMatch</code> occurs in      *  the input, it will be replaced with      *<code>replacement</code>.      *      * @param match input String to be replaced      * @param replacement output String      * @throws IllegalArgumentException if      *<code>match</code> is the empty string, or was      * already previously added      */
DECL|method|add
specifier|public
name|void
name|add
parameter_list|(
name|String
name|match
parameter_list|,
name|String
name|replacement
parameter_list|)
block|{
if|if
condition|(
name|match
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"cannot match the empty string"
argument_list|)
throw|;
block|}
if|if
condition|(
name|pendingPairs
operator|.
name|containsKey
argument_list|(
name|match
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"match \""
operator|+
name|match
operator|+
literal|"\" was already added"
argument_list|)
throw|;
block|}
name|pendingPairs
operator|.
name|put
argument_list|(
name|match
argument_list|,
name|replacement
argument_list|)
expr_stmt|;
block|}
comment|/** Builds the NormalizeCharMap; call this once you      *  are done calling {@link #add}. */
DECL|method|build
specifier|public
name|NormalizeCharMap
name|build
parameter_list|()
block|{
specifier|final
name|FST
argument_list|<
name|CharsRef
argument_list|>
name|map
decl_stmt|;
try|try
block|{
specifier|final
name|Outputs
argument_list|<
name|CharsRef
argument_list|>
name|outputs
init|=
name|CharSequenceOutputs
operator|.
name|getSingleton
argument_list|()
decl_stmt|;
specifier|final
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|fst
operator|.
name|Builder
argument_list|<
name|CharsRef
argument_list|>
name|builder
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|fst
operator|.
name|Builder
argument_list|<
name|CharsRef
argument_list|>
argument_list|(
name|FST
operator|.
name|INPUT_TYPE
operator|.
name|BYTE2
argument_list|,
name|outputs
argument_list|)
decl_stmt|;
specifier|final
name|IntsRef
name|scratch
init|=
operator|new
name|IntsRef
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|ent
range|:
name|pendingPairs
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|builder
operator|.
name|add
argument_list|(
name|Util
operator|.
name|toUTF32
argument_list|(
name|ent
operator|.
name|getKey
argument_list|()
argument_list|,
name|scratch
argument_list|)
argument_list|,
operator|new
name|CharsRef
argument_list|(
name|ent
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|map
operator|=
name|builder
operator|.
name|finish
argument_list|()
expr_stmt|;
name|pendingPairs
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
comment|// Bogus FST IOExceptions!!  (will never happen)
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
return|return
operator|new
name|NormalizeCharMap
argument_list|(
name|map
argument_list|)
return|;
block|}
block|}
block|}
end_class
end_unit
