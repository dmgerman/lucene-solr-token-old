begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.analysis.util
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|util
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|IntPredicate
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|IntUnaryOperator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Tokenizer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|core
operator|.
name|LetterTokenizer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|core
operator|.
name|LowerCaseFilter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|core
operator|.
name|LowerCaseTokenizer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|core
operator|.
name|WhitespaceTokenizer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|OffsetAttribute
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|CharTermAttribute
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|AttributeFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|util
operator|.
name|CharacterUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|util
operator|.
name|CharacterUtils
operator|.
name|CharacterBuffer
import|;
end_import
begin_comment
comment|/**  * An abstract base class for simple, character-oriented tokenizers.  *<p>  * The base class also provides factories to create instances of  * {@code CharTokenizer} using Java 8 lambdas or method references.  * It is possible to create an instance which behaves exactly like  * {@link LetterTokenizer}:  *<pre class="prettyprint lang-java">  * Tokenizer tok = CharTokenizer.fromTokenCharPredicate(Character::isLetter);  *</pre>  */
end_comment
begin_class
DECL|class|CharTokenizer
specifier|public
specifier|abstract
class|class
name|CharTokenizer
extends|extends
name|Tokenizer
block|{
comment|/**    * Creates a new {@link CharTokenizer} instance    */
DECL|method|CharTokenizer
specifier|public
name|CharTokenizer
parameter_list|()
block|{   }
comment|/**    * Creates a new {@link CharTokenizer} instance    *     * @param factory    *          the attribute factory to use for this {@link Tokenizer}    */
DECL|method|CharTokenizer
specifier|public
name|CharTokenizer
parameter_list|(
name|AttributeFactory
name|factory
parameter_list|)
block|{
name|super
argument_list|(
name|factory
argument_list|)
expr_stmt|;
block|}
comment|/**    * Creates a new instance of CharTokenizer using a custom predicate, supplied as method reference or lambda expression.    * The predicate should return {@code true} for all valid token characters.    *<p>    * This factory is intended to be used with lambdas or method references. E.g., an elegant way    * to create an instance which behaves exactly as {@link LetterTokenizer} is:    *<pre class="prettyprint lang-java">    * Tokenizer tok = CharTokenizer.fromTokenCharPredicate(Character::isLetter);    *</pre>    */
DECL|method|fromTokenCharPredicate
specifier|public
specifier|static
name|CharTokenizer
name|fromTokenCharPredicate
parameter_list|(
specifier|final
name|IntPredicate
name|tokenCharPredicate
parameter_list|)
block|{
return|return
name|fromTokenCharPredicate
argument_list|(
name|DEFAULT_TOKEN_ATTRIBUTE_FACTORY
argument_list|,
name|tokenCharPredicate
argument_list|)
return|;
block|}
comment|/**    * Creates a new instance of CharTokenizer with the supplied attribute factory using a custom predicate, supplied as method reference or lambda expression.    * The predicate should return {@code true} for all valid token characters.    *<p>    * This factory is intended to be used with lambdas or method references. E.g., an elegant way    * to create an instance which behaves exactly as {@link LetterTokenizer} is:    *<pre class="prettyprint lang-java">    * Tokenizer tok = CharTokenizer.fromTokenCharPredicate(factory, Character::isLetter);    *</pre>    */
DECL|method|fromTokenCharPredicate
specifier|public
specifier|static
name|CharTokenizer
name|fromTokenCharPredicate
parameter_list|(
name|AttributeFactory
name|factory
parameter_list|,
specifier|final
name|IntPredicate
name|tokenCharPredicate
parameter_list|)
block|{
return|return
name|fromTokenCharPredicate
argument_list|(
name|factory
argument_list|,
name|tokenCharPredicate
argument_list|,
name|IntUnaryOperator
operator|.
name|identity
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Creates a new instance of CharTokenizer using a custom predicate, supplied as method reference or lambda expression.    * The predicate should return {@code true} for all valid token characters.    * This factory also takes a function to normalize chars, e.g., lowercasing them, supplied as method reference or lambda expression.    *<p>    * This factory is intended to be used with lambdas or method references. E.g., an elegant way    * to create an instance which behaves exactly as {@link LowerCaseTokenizer} is:    *<pre class="prettyprint lang-java">    * Tokenizer tok = CharTokenizer.fromTokenCharPredicate(Character::isLetter, Character::toLowerCase);    *</pre>    */
DECL|method|fromTokenCharPredicate
specifier|public
specifier|static
name|CharTokenizer
name|fromTokenCharPredicate
parameter_list|(
specifier|final
name|IntPredicate
name|tokenCharPredicate
parameter_list|,
specifier|final
name|IntUnaryOperator
name|normalizer
parameter_list|)
block|{
return|return
name|fromTokenCharPredicate
argument_list|(
name|DEFAULT_TOKEN_ATTRIBUTE_FACTORY
argument_list|,
name|tokenCharPredicate
argument_list|,
name|normalizer
argument_list|)
return|;
block|}
comment|/**    * Creates a new instance of CharTokenizer with the supplied attribute factory using a custom predicate, supplied as method reference or lambda expression.    * The predicate should return {@code true} for all valid token characters.    * This factory also takes a function to normalize chars, e.g., lowercasing them, supplied as method reference or lambda expression.    *<p>    * This factory is intended to be used with lambdas or method references. E.g., an elegant way    * to create an instance which behaves exactly as {@link LowerCaseTokenizer} is:    *<pre class="prettyprint lang-java">    * Tokenizer tok = CharTokenizer.fromTokenCharPredicate(factory, Character::isLetter, Character::toLowerCase);    *</pre>    */
DECL|method|fromTokenCharPredicate
specifier|public
specifier|static
name|CharTokenizer
name|fromTokenCharPredicate
parameter_list|(
name|AttributeFactory
name|factory
parameter_list|,
specifier|final
name|IntPredicate
name|tokenCharPredicate
parameter_list|,
specifier|final
name|IntUnaryOperator
name|normalizer
parameter_list|)
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|tokenCharPredicate
argument_list|,
literal|"predicate must not be null."
argument_list|)
expr_stmt|;
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|normalizer
argument_list|,
literal|"normalizer must not be null"
argument_list|)
expr_stmt|;
return|return
operator|new
name|CharTokenizer
argument_list|(
name|factory
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|boolean
name|isTokenChar
parameter_list|(
name|int
name|c
parameter_list|)
block|{
return|return
name|tokenCharPredicate
operator|.
name|test
argument_list|(
name|c
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|int
name|normalize
parameter_list|(
name|int
name|c
parameter_list|)
block|{
return|return
name|normalizer
operator|.
name|applyAsInt
argument_list|(
name|c
argument_list|)
return|;
block|}
block|}
return|;
block|}
comment|/**    * Creates a new instance of CharTokenizer using a custom predicate, supplied as method reference or lambda expression.    * The predicate should return {@code true} for all valid token separator characters.    * This method is provided for convenience to easily use predicates that are negated    * (they match the separator characters, not the token characters).    *<p>    * This factory is intended to be used with lambdas or method references. E.g., an elegant way    * to create an instance which behaves exactly as {@link WhitespaceTokenizer} is:    *<pre class="prettyprint lang-java">    * Tokenizer tok = CharTokenizer.fromSeparatorCharPredicate(Character::isWhitespace);    *</pre>    */
DECL|method|fromSeparatorCharPredicate
specifier|public
specifier|static
name|CharTokenizer
name|fromSeparatorCharPredicate
parameter_list|(
specifier|final
name|IntPredicate
name|separatorCharPredicate
parameter_list|)
block|{
return|return
name|fromSeparatorCharPredicate
argument_list|(
name|DEFAULT_TOKEN_ATTRIBUTE_FACTORY
argument_list|,
name|separatorCharPredicate
argument_list|)
return|;
block|}
comment|/**    * Creates a new instance of CharTokenizer with the supplied attribute factory using a custom predicate, supplied as method reference or lambda expression.    * The predicate should return {@code true} for all valid token separator characters.    *<p>    * This factory is intended to be used with lambdas or method references. E.g., an elegant way    * to create an instance which behaves exactly as {@link WhitespaceTokenizer} is:    *<pre class="prettyprint lang-java">    * Tokenizer tok = CharTokenizer.fromSeparatorCharPredicate(factory, Character::isWhitespace);    *</pre>    */
DECL|method|fromSeparatorCharPredicate
specifier|public
specifier|static
name|CharTokenizer
name|fromSeparatorCharPredicate
parameter_list|(
name|AttributeFactory
name|factory
parameter_list|,
specifier|final
name|IntPredicate
name|separatorCharPredicate
parameter_list|)
block|{
return|return
name|fromSeparatorCharPredicate
argument_list|(
name|factory
argument_list|,
name|separatorCharPredicate
argument_list|,
name|IntUnaryOperator
operator|.
name|identity
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Creates a new instance of CharTokenizer using a custom predicate, supplied as method reference or lambda expression.    * The predicate should return {@code true} for all valid token separator characters.    * This factory also takes a function to normalize chars, e.g., lowercasing them, supplied as method reference or lambda expression.    *<p>    * This factory is intended to be used with lambdas or method references. E.g., an elegant way    * to create an instance which behaves exactly as the combination {@link WhitespaceTokenizer} and {@link LowerCaseFilter} is:    *<pre class="prettyprint lang-java">    * Tokenizer tok = CharTokenizer.fromSeparatorCharPredicate(Character::isWhitespace, Character::toLowerCase);    *</pre>    */
DECL|method|fromSeparatorCharPredicate
specifier|public
specifier|static
name|CharTokenizer
name|fromSeparatorCharPredicate
parameter_list|(
specifier|final
name|IntPredicate
name|separatorCharPredicate
parameter_list|,
specifier|final
name|IntUnaryOperator
name|normalizer
parameter_list|)
block|{
return|return
name|fromSeparatorCharPredicate
argument_list|(
name|DEFAULT_TOKEN_ATTRIBUTE_FACTORY
argument_list|,
name|separatorCharPredicate
argument_list|,
name|normalizer
argument_list|)
return|;
block|}
comment|/**    * Creates a new instance of CharTokenizer with the supplied attribute factory using a custom predicate.    * The predicate should return {@code true} for all valid token separator characters.    * This factory also takes a function to normalize chars, e.g., lowercasing them, supplied as method reference or lambda expression.    *<p>    * This factory is intended to be used with lambdas or method references. E.g., an elegant way    * to create an instance which behaves exactly as {@link WhitespaceTokenizer} and {@link LowerCaseFilter} is:    *<pre class="prettyprint lang-java">    * Tokenizer tok = CharTokenizer.fromSeparatorCharPredicate(factory, Character::isWhitespace, Character::toLowerCase);    *</pre>    */
DECL|method|fromSeparatorCharPredicate
specifier|public
specifier|static
name|CharTokenizer
name|fromSeparatorCharPredicate
parameter_list|(
name|AttributeFactory
name|factory
parameter_list|,
specifier|final
name|IntPredicate
name|separatorCharPredicate
parameter_list|,
specifier|final
name|IntUnaryOperator
name|normalizer
parameter_list|)
block|{
return|return
name|fromTokenCharPredicate
argument_list|(
name|factory
argument_list|,
name|separatorCharPredicate
operator|.
name|negate
argument_list|()
argument_list|,
name|normalizer
argument_list|)
return|;
block|}
DECL|field|offset
DECL|field|bufferIndex
DECL|field|dataLen
DECL|field|finalOffset
specifier|private
name|int
name|offset
init|=
literal|0
decl_stmt|,
name|bufferIndex
init|=
literal|0
decl_stmt|,
name|dataLen
init|=
literal|0
decl_stmt|,
name|finalOffset
init|=
literal|0
decl_stmt|;
DECL|field|MAX_WORD_LEN
specifier|private
specifier|static
specifier|final
name|int
name|MAX_WORD_LEN
init|=
literal|255
decl_stmt|;
DECL|field|IO_BUFFER_SIZE
specifier|private
specifier|static
specifier|final
name|int
name|IO_BUFFER_SIZE
init|=
literal|4096
decl_stmt|;
DECL|field|termAtt
specifier|private
specifier|final
name|CharTermAttribute
name|termAtt
init|=
name|addAttribute
argument_list|(
name|CharTermAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|offsetAtt
specifier|private
specifier|final
name|OffsetAttribute
name|offsetAtt
init|=
name|addAttribute
argument_list|(
name|OffsetAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|charUtils
specifier|private
specifier|final
name|CharacterUtils
name|charUtils
init|=
name|CharacterUtils
operator|.
name|getInstance
argument_list|()
decl_stmt|;
DECL|field|ioBuffer
specifier|private
specifier|final
name|CharacterBuffer
name|ioBuffer
init|=
name|CharacterUtils
operator|.
name|newCharacterBuffer
argument_list|(
name|IO_BUFFER_SIZE
argument_list|)
decl_stmt|;
comment|/**    * Returns true iff a codepoint should be included in a token. This tokenizer    * generates as tokens adjacent sequences of codepoints which satisfy this    * predicate. Codepoints for which this is false are used to define token    * boundaries and are not included in tokens.    */
DECL|method|isTokenChar
specifier|protected
specifier|abstract
name|boolean
name|isTokenChar
parameter_list|(
name|int
name|c
parameter_list|)
function_decl|;
comment|/**    * Called on each token character to normalize it before it is added to the    * token. The default implementation does nothing. Subclasses may use this to,    * e.g., lowercase tokens.    */
DECL|method|normalize
specifier|protected
name|int
name|normalize
parameter_list|(
name|int
name|c
parameter_list|)
block|{
return|return
name|c
return|;
block|}
annotation|@
name|Override
DECL|method|incrementToken
specifier|public
specifier|final
name|boolean
name|incrementToken
parameter_list|()
throws|throws
name|IOException
block|{
name|clearAttributes
argument_list|()
expr_stmt|;
name|int
name|length
init|=
literal|0
decl_stmt|;
name|int
name|start
init|=
operator|-
literal|1
decl_stmt|;
comment|// this variable is always initialized
name|int
name|end
init|=
operator|-
literal|1
decl_stmt|;
name|char
index|[]
name|buffer
init|=
name|termAtt
operator|.
name|buffer
argument_list|()
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
name|bufferIndex
operator|>=
name|dataLen
condition|)
block|{
name|offset
operator|+=
name|dataLen
expr_stmt|;
name|charUtils
operator|.
name|fill
argument_list|(
name|ioBuffer
argument_list|,
name|input
argument_list|)
expr_stmt|;
comment|// read supplementary char aware with CharacterUtils
if|if
condition|(
name|ioBuffer
operator|.
name|getLength
argument_list|()
operator|==
literal|0
condition|)
block|{
name|dataLen
operator|=
literal|0
expr_stmt|;
comment|// so next offset += dataLen won't decrement offset
if|if
condition|(
name|length
operator|>
literal|0
condition|)
block|{
break|break;
block|}
else|else
block|{
name|finalOffset
operator|=
name|correctOffset
argument_list|(
name|offset
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
name|dataLen
operator|=
name|ioBuffer
operator|.
name|getLength
argument_list|()
expr_stmt|;
name|bufferIndex
operator|=
literal|0
expr_stmt|;
block|}
comment|// use CharacterUtils here to support< 3.1 UTF-16 code unit behavior if the char based methods are gone
specifier|final
name|int
name|c
init|=
name|charUtils
operator|.
name|codePointAt
argument_list|(
name|ioBuffer
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|bufferIndex
argument_list|,
name|ioBuffer
operator|.
name|getLength
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|int
name|charCount
init|=
name|Character
operator|.
name|charCount
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|bufferIndex
operator|+=
name|charCount
expr_stmt|;
if|if
condition|(
name|isTokenChar
argument_list|(
name|c
argument_list|)
condition|)
block|{
comment|// if it's a token char
if|if
condition|(
name|length
operator|==
literal|0
condition|)
block|{
comment|// start of token
assert|assert
name|start
operator|==
operator|-
literal|1
assert|;
name|start
operator|=
name|offset
operator|+
name|bufferIndex
operator|-
name|charCount
expr_stmt|;
name|end
operator|=
name|start
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|length
operator|>=
name|buffer
operator|.
name|length
operator|-
literal|1
condition|)
block|{
comment|// check if a supplementary could run out of bounds
name|buffer
operator|=
name|termAtt
operator|.
name|resizeBuffer
argument_list|(
literal|2
operator|+
name|length
argument_list|)
expr_stmt|;
comment|// make sure a supplementary fits in the buffer
block|}
name|end
operator|+=
name|charCount
expr_stmt|;
name|length
operator|+=
name|Character
operator|.
name|toChars
argument_list|(
name|normalize
argument_list|(
name|c
argument_list|)
argument_list|,
name|buffer
argument_list|,
name|length
argument_list|)
expr_stmt|;
comment|// buffer it, normalized
if|if
condition|(
name|length
operator|>=
name|MAX_WORD_LEN
condition|)
comment|// buffer overflow! make sure to check for>= surrogate pair could break == test
break|break;
block|}
elseif|else
if|if
condition|(
name|length
operator|>
literal|0
condition|)
comment|// at non-Letter w/ chars
break|break;
comment|// return 'em
block|}
name|termAtt
operator|.
name|setLength
argument_list|(
name|length
argument_list|)
expr_stmt|;
assert|assert
name|start
operator|!=
operator|-
literal|1
assert|;
name|offsetAtt
operator|.
name|setOffset
argument_list|(
name|correctOffset
argument_list|(
name|start
argument_list|)
argument_list|,
name|finalOffset
operator|=
name|correctOffset
argument_list|(
name|end
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|end
specifier|public
specifier|final
name|void
name|end
parameter_list|()
throws|throws
name|IOException
block|{
name|super
operator|.
name|end
argument_list|()
expr_stmt|;
comment|// set final offset
name|offsetAtt
operator|.
name|setOffset
argument_list|(
name|finalOffset
argument_list|,
name|finalOffset
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|reset
specifier|public
name|void
name|reset
parameter_list|()
throws|throws
name|IOException
block|{
name|super
operator|.
name|reset
argument_list|()
expr_stmt|;
name|bufferIndex
operator|=
literal|0
expr_stmt|;
name|offset
operator|=
literal|0
expr_stmt|;
name|dataLen
operator|=
literal|0
expr_stmt|;
name|finalOffset
operator|=
literal|0
expr_stmt|;
name|ioBuffer
operator|.
name|reset
argument_list|()
expr_stmt|;
comment|// make sure to reset the IO buffer!!
block|}
block|}
end_class
end_unit
