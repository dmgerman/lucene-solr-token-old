begin_unit
begin_package
DECL|package|org.apache.lucene.analysis.hunspell2
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|hunspell2
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_comment
comment|/**  * Stem represents all information known about a stem of a word.  This includes the stem, and the prefixes and suffixes  * that were used to change the word into the stem.  */
end_comment
begin_class
DECL|class|Stem
specifier|final
class|class
name|Stem
block|{
DECL|field|prefixes
specifier|final
name|List
argument_list|<
name|Affix
argument_list|>
name|prefixes
init|=
operator|new
name|ArrayList
argument_list|<
name|Affix
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|suffixes
specifier|final
name|List
argument_list|<
name|Affix
argument_list|>
name|suffixes
init|=
operator|new
name|ArrayList
argument_list|<
name|Affix
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|stem
specifier|final
name|char
name|stem
index|[]
decl_stmt|;
DECL|field|stemLength
specifier|final
name|int
name|stemLength
decl_stmt|;
comment|/**    * Creates a new Stem wrapping the given word stem    *    * @param stem Stem of a word    */
DECL|method|Stem
specifier|public
name|Stem
parameter_list|(
name|char
name|stem
index|[]
parameter_list|,
name|int
name|stemLength
parameter_list|)
block|{
name|this
operator|.
name|stem
operator|=
name|stem
expr_stmt|;
name|this
operator|.
name|stemLength
operator|=
name|stemLength
expr_stmt|;
block|}
comment|/**    * Adds a prefix to the list of prefixes used to generate this stem.  Because it is assumed that prefixes are added    * depth first, the prefix is added to the front of the list    *    * @param prefix Prefix to add to the list of prefixes for this stem    */
DECL|method|addPrefix
specifier|public
name|void
name|addPrefix
parameter_list|(
name|Affix
name|prefix
parameter_list|)
block|{
name|prefixes
operator|.
name|add
argument_list|(
literal|0
argument_list|,
name|prefix
argument_list|)
expr_stmt|;
block|}
comment|/**    * Adds a suffix to the list of suffixes used to generate this stem.  Because it is assumed that suffixes are added    * depth first, the suffix is added to the end of the list    *    * @param suffix Suffix to add to the list of suffixes for this stem    */
DECL|method|addSuffix
specifier|public
name|void
name|addSuffix
parameter_list|(
name|Affix
name|suffix
parameter_list|)
block|{
name|suffixes
operator|.
name|add
argument_list|(
name|suffix
argument_list|)
expr_stmt|;
block|}
comment|/**    * Returns the list of prefixes used to generate the stem    *    * @return List of prefixes used to generate the stem or an empty list if no prefixes were required    */
DECL|method|getPrefixes
specifier|public
name|List
argument_list|<
name|Affix
argument_list|>
name|getPrefixes
parameter_list|()
block|{
return|return
name|prefixes
return|;
block|}
comment|/**    * Returns the list of suffixes used to generate the stem    *     * @return List of suffixes used to generate the stem or an empty list if no suffixes were required    */
DECL|method|getSuffixes
specifier|public
name|List
argument_list|<
name|Affix
argument_list|>
name|getSuffixes
parameter_list|()
block|{
return|return
name|suffixes
return|;
block|}
comment|/**    * Returns the text of the word's stem.    * @see #getStemLength()    */
DECL|method|getStem
specifier|public
name|char
index|[]
name|getStem
parameter_list|()
block|{
return|return
name|stem
return|;
block|}
comment|/** Returns the valid length of the text in {@link #getStem()} */
DECL|method|getStemLength
specifier|public
name|int
name|getStemLength
parameter_list|()
block|{
return|return
name|stemLength
return|;
block|}
comment|/** Only use this if you really need a string (e.g. for testing) */
DECL|method|getStemString
specifier|public
name|String
name|getStemString
parameter_list|()
block|{
return|return
operator|new
name|String
argument_list|(
name|stem
argument_list|,
literal|0
argument_list|,
name|stemLength
argument_list|)
return|;
block|}
block|}
end_class
end_unit
