begin_unit
begin_package
DECL|package|org.apache.lucene.analysis.util
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|util
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_comment
comment|/**  * A StringBuilder that allows one to access the array.  */
end_comment
begin_class
DECL|class|OpenStringBuilder
specifier|public
class|class
name|OpenStringBuilder
implements|implements
name|Appendable
implements|,
name|CharSequence
block|{
DECL|field|buf
specifier|protected
name|char
index|[]
name|buf
decl_stmt|;
DECL|field|len
specifier|protected
name|int
name|len
decl_stmt|;
DECL|method|OpenStringBuilder
specifier|public
name|OpenStringBuilder
parameter_list|()
block|{
name|this
argument_list|(
literal|32
argument_list|)
expr_stmt|;
block|}
DECL|method|OpenStringBuilder
specifier|public
name|OpenStringBuilder
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|buf
operator|=
operator|new
name|char
index|[
name|size
index|]
expr_stmt|;
block|}
DECL|method|OpenStringBuilder
specifier|public
name|OpenStringBuilder
parameter_list|(
name|char
index|[]
name|arr
parameter_list|,
name|int
name|len
parameter_list|)
block|{
name|set
argument_list|(
name|arr
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
DECL|method|setLength
specifier|public
name|void
name|setLength
parameter_list|(
name|int
name|len
parameter_list|)
block|{
name|this
operator|.
name|len
operator|=
name|len
expr_stmt|;
block|}
DECL|method|set
specifier|public
name|void
name|set
parameter_list|(
name|char
index|[]
name|arr
parameter_list|,
name|int
name|end
parameter_list|)
block|{
name|this
operator|.
name|buf
operator|=
name|arr
expr_stmt|;
name|this
operator|.
name|len
operator|=
name|end
expr_stmt|;
block|}
DECL|method|getArray
specifier|public
name|char
index|[]
name|getArray
parameter_list|()
block|{
return|return
name|buf
return|;
block|}
DECL|method|size
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|len
return|;
block|}
annotation|@
name|Override
DECL|method|length
specifier|public
name|int
name|length
parameter_list|()
block|{
return|return
name|len
return|;
block|}
DECL|method|capacity
specifier|public
name|int
name|capacity
parameter_list|()
block|{
return|return
name|buf
operator|.
name|length
return|;
block|}
annotation|@
name|Override
DECL|method|append
specifier|public
name|Appendable
name|append
parameter_list|(
name|CharSequence
name|csq
parameter_list|)
block|{
return|return
name|append
argument_list|(
name|csq
argument_list|,
literal|0
argument_list|,
name|csq
operator|.
name|length
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|append
specifier|public
name|Appendable
name|append
parameter_list|(
name|CharSequence
name|csq
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
block|{
name|reserve
argument_list|(
name|end
operator|-
name|start
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|start
init|;
name|i
operator|<
name|end
condition|;
name|i
operator|++
control|)
block|{
name|unsafeWrite
argument_list|(
name|csq
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|append
specifier|public
name|Appendable
name|append
parameter_list|(
name|char
name|c
parameter_list|)
block|{
name|write
argument_list|(
name|c
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|charAt
specifier|public
name|char
name|charAt
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|buf
index|[
name|index
index|]
return|;
block|}
DECL|method|setCharAt
specifier|public
name|void
name|setCharAt
parameter_list|(
name|int
name|index
parameter_list|,
name|char
name|ch
parameter_list|)
block|{
name|buf
index|[
name|index
index|]
operator|=
name|ch
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|subSequence
specifier|public
name|CharSequence
name|subSequence
parameter_list|(
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
comment|// todo
block|}
DECL|method|unsafeWrite
specifier|public
name|void
name|unsafeWrite
parameter_list|(
name|char
name|b
parameter_list|)
block|{
name|buf
index|[
name|len
operator|++
index|]
operator|=
name|b
expr_stmt|;
block|}
DECL|method|unsafeWrite
specifier|public
name|void
name|unsafeWrite
parameter_list|(
name|int
name|b
parameter_list|)
block|{
name|unsafeWrite
argument_list|(
operator|(
name|char
operator|)
name|b
argument_list|)
expr_stmt|;
block|}
DECL|method|unsafeWrite
specifier|public
name|void
name|unsafeWrite
parameter_list|(
name|char
name|b
index|[]
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|buf
argument_list|,
name|this
operator|.
name|len
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|this
operator|.
name|len
operator|+=
name|len
expr_stmt|;
block|}
DECL|method|resize
specifier|protected
name|void
name|resize
parameter_list|(
name|int
name|len
parameter_list|)
block|{
name|char
name|newbuf
index|[]
init|=
operator|new
name|char
index|[
name|Math
operator|.
name|max
argument_list|(
name|buf
operator|.
name|length
operator|<<
literal|1
argument_list|,
name|len
argument_list|)
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|newbuf
argument_list|,
literal|0
argument_list|,
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|buf
operator|=
name|newbuf
expr_stmt|;
block|}
DECL|method|reserve
specifier|public
name|void
name|reserve
parameter_list|(
name|int
name|num
parameter_list|)
block|{
if|if
condition|(
name|len
operator|+
name|num
operator|>
name|buf
operator|.
name|length
condition|)
name|resize
argument_list|(
name|len
operator|+
name|num
argument_list|)
expr_stmt|;
block|}
DECL|method|write
specifier|public
name|void
name|write
parameter_list|(
name|char
name|b
parameter_list|)
block|{
if|if
condition|(
name|len
operator|>=
name|buf
operator|.
name|length
condition|)
block|{
name|resize
argument_list|(
name|len
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
name|unsafeWrite
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
DECL|method|write
specifier|public
name|void
name|write
parameter_list|(
name|int
name|b
parameter_list|)
block|{
name|write
argument_list|(
operator|(
name|char
operator|)
name|b
argument_list|)
expr_stmt|;
block|}
DECL|method|write
specifier|public
specifier|final
name|void
name|write
parameter_list|(
name|char
index|[]
name|b
parameter_list|)
block|{
name|write
argument_list|(
name|b
argument_list|,
literal|0
argument_list|,
name|b
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
DECL|method|write
specifier|public
name|void
name|write
parameter_list|(
name|char
name|b
index|[]
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
block|{
name|reserve
argument_list|(
name|len
argument_list|)
expr_stmt|;
name|unsafeWrite
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
DECL|method|write
specifier|public
specifier|final
name|void
name|write
parameter_list|(
name|OpenStringBuilder
name|arr
parameter_list|)
block|{
name|write
argument_list|(
name|arr
operator|.
name|buf
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
DECL|method|write
specifier|public
name|void
name|write
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|reserve
argument_list|(
name|s
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|s
operator|.
name|getChars
argument_list|(
literal|0
argument_list|,
name|s
operator|.
name|length
argument_list|()
argument_list|,
name|buf
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|len
operator|+=
name|s
operator|.
name|length
argument_list|()
expr_stmt|;
block|}
DECL|method|flush
specifier|public
name|void
name|flush
parameter_list|()
block|{   }
DECL|method|reset
specifier|public
specifier|final
name|void
name|reset
parameter_list|()
block|{
name|len
operator|=
literal|0
expr_stmt|;
block|}
DECL|method|toCharArray
specifier|public
name|char
index|[]
name|toCharArray
parameter_list|()
block|{
name|char
name|newbuf
index|[]
init|=
operator|new
name|char
index|[
name|size
argument_list|()
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|newbuf
argument_list|,
literal|0
argument_list|,
name|size
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|newbuf
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
operator|new
name|String
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|size
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class
end_unit
