begin_unit
begin_package
DECL|package|org.apache.lucene.analysis.util
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|util
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import
begin_comment
comment|/**  * Simple {@link ResourceLoader} that uses {@link ClassLoader#getResourceAsStream(String)}  * and {@link Class#forName(String,boolean,ClassLoader)} to open resources and  * classes, respectively.  */
end_comment
begin_class
DECL|class|ClasspathResourceLoader
specifier|public
specifier|final
class|class
name|ClasspathResourceLoader
implements|implements
name|ResourceLoader
block|{
DECL|field|clazz
specifier|private
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
decl_stmt|;
DECL|field|loader
specifier|private
specifier|final
name|ClassLoader
name|loader
decl_stmt|;
comment|/**    * Creates an instance using the context classloader to load Resources and classes.    * Resource paths must be absolute.    */
DECL|method|ClasspathResourceLoader
specifier|public
name|ClasspathResourceLoader
parameter_list|()
block|{
name|this
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Creates an instance using the given classloader to load Resources and classes.    * Resource paths must be absolute.    */
DECL|method|ClasspathResourceLoader
specifier|public
name|ClasspathResourceLoader
parameter_list|(
name|ClassLoader
name|loader
parameter_list|)
block|{
name|this
argument_list|(
literal|null
argument_list|,
name|loader
argument_list|)
expr_stmt|;
block|}
comment|/**    * Creates an instance using the context classloader to load Resources and classes    * Resources are resolved relative to the given class, if path is not absolute.    */
DECL|method|ClasspathResourceLoader
specifier|public
name|ClasspathResourceLoader
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|)
block|{
name|this
argument_list|(
name|clazz
argument_list|,
name|clazz
operator|.
name|getClassLoader
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|ClasspathResourceLoader
specifier|private
name|ClasspathResourceLoader
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|,
name|ClassLoader
name|loader
parameter_list|)
block|{
name|this
operator|.
name|clazz
operator|=
name|clazz
expr_stmt|;
name|this
operator|.
name|loader
operator|=
name|loader
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|openResource
specifier|public
name|InputStream
name|openResource
parameter_list|(
name|String
name|resource
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|InputStream
name|stream
init|=
operator|(
name|clazz
operator|!=
literal|null
operator|)
condition|?
name|clazz
operator|.
name|getResourceAsStream
argument_list|(
name|resource
argument_list|)
else|:
name|loader
operator|.
name|getResourceAsStream
argument_list|(
name|resource
argument_list|)
decl_stmt|;
if|if
condition|(
name|stream
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Resource not found: "
operator|+
name|resource
argument_list|)
throw|;
return|return
name|stream
return|;
block|}
annotation|@
name|Override
DECL|method|newInstance
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|newInstance
parameter_list|(
name|String
name|cname
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|expectedType
parameter_list|)
block|{
try|try
block|{
specifier|final
name|Class
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|clazz
init|=
name|Class
operator|.
name|forName
argument_list|(
name|cname
argument_list|,
literal|true
argument_list|,
name|loader
argument_list|)
operator|.
name|asSubclass
argument_list|(
name|expectedType
argument_list|)
decl_stmt|;
return|return
name|clazz
operator|.
name|newInstance
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Cannot instantiate class: "
operator|+
name|cname
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class
end_unit
