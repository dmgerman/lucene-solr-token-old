begin_unit
begin_package
DECL|package|org.apache.lucene.analysis.hunspell2
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|hunspell2
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|util
operator|.
name|ResourceLoader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|util
operator|.
name|ResourceLoaderAware
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|util
operator|.
name|TokenFilterFactory
import|;
end_import
begin_comment
comment|/**  * TokenFilterFactory that creates instances of {@link Hunspell2StemFilter}.  * Example config for British English:  *<pre class="prettyprint">  *&lt;filter class=&quot;solr.Hunspell2StemFilterFactory&quot;  *         dictionary=&quot;en_GB.dic&quot;  *         affix=&quot;en_GB.aff&quot; /&gt;</pre>  * Both parameters dictionary and affix are mandatory.  * Dictionaries for many languages are available through the OpenOffice project.  *   * See<a href="http://wiki.apache.org/solr/Hunspell">http://wiki.apache.org/solr/Hunspell</a>  * @lucene.experimental  */
end_comment
begin_class
DECL|class|Hunspell2StemFilterFactory
specifier|public
class|class
name|Hunspell2StemFilterFactory
extends|extends
name|TokenFilterFactory
implements|implements
name|ResourceLoaderAware
block|{
DECL|field|PARAM_DICTIONARY
specifier|private
specifier|static
specifier|final
name|String
name|PARAM_DICTIONARY
init|=
literal|"dictionary"
decl_stmt|;
DECL|field|PARAM_AFFIX
specifier|private
specifier|static
specifier|final
name|String
name|PARAM_AFFIX
init|=
literal|"affix"
decl_stmt|;
DECL|field|PARAM_RECURSION_CAP
specifier|private
specifier|static
specifier|final
name|String
name|PARAM_RECURSION_CAP
init|=
literal|"recursionCap"
decl_stmt|;
DECL|field|dictionaryFile
specifier|private
specifier|final
name|String
name|dictionaryFile
decl_stmt|;
DECL|field|affixFile
specifier|private
specifier|final
name|String
name|affixFile
decl_stmt|;
DECL|field|dictionary
specifier|private
name|Dictionary
name|dictionary
decl_stmt|;
DECL|field|recursionCap
specifier|private
name|int
name|recursionCap
decl_stmt|;
comment|/** Creates a new Hunspell2StemFilterFactory */
DECL|method|Hunspell2StemFilterFactory
specifier|public
name|Hunspell2StemFilterFactory
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|args
parameter_list|)
block|{
name|super
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|dictionaryFile
operator|=
name|require
argument_list|(
name|args
argument_list|,
name|PARAM_DICTIONARY
argument_list|)
expr_stmt|;
name|affixFile
operator|=
name|get
argument_list|(
name|args
argument_list|,
name|PARAM_AFFIX
argument_list|)
expr_stmt|;
name|recursionCap
operator|=
name|getInt
argument_list|(
name|args
argument_list|,
name|PARAM_RECURSION_CAP
argument_list|,
literal|2
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|args
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unknown parameters: "
operator|+
name|args
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|inform
specifier|public
name|void
name|inform
parameter_list|(
name|ResourceLoader
name|loader
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|InputStream
name|affix
init|=
name|loader
operator|.
name|openResource
argument_list|(
name|affixFile
argument_list|)
init|;
name|InputStream
name|dictionary
operator|=
name|loader
operator|.
name|openResource
argument_list|(
name|dictionaryFile
argument_list|)
init|)
block|{
try|try
block|{
name|this
operator|.
name|dictionary
operator|=
operator|new
name|Dictionary
argument_list|(
name|affix
argument_list|,
name|dictionary
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|create
specifier|public
name|TokenStream
name|create
parameter_list|(
name|TokenStream
name|tokenStream
parameter_list|)
block|{
return|return
operator|new
name|Hunspell2StemFilter
argument_list|(
name|tokenStream
argument_list|,
name|dictionary
argument_list|,
name|recursionCap
argument_list|)
return|;
block|}
block|}
end_class
end_unit
