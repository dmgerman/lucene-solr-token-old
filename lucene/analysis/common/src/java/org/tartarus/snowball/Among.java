begin_unit
begin_comment
comment|/*  Copyright (c) 2001, Dr Martin Porter Copyright (c) 2002, Richard Boulton All rights reserved.  Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:      * Redistributions of source code must retain the above copyright notice,     * this list of conditions and the following disclaimer.     * Redistributions in binary form must reproduce the above copyright     * notice, this list of conditions and the following disclaimer in the     * documentation and/or other materials provided with the distribution.     * Neither the name of the copyright holders nor the names of its contributors     * may be used to endorse or promote products derived from this software     * without specific prior written permission.  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.   */
end_comment
begin_package
DECL|package|org.tartarus.snowball
package|package
name|org
operator|.
name|tartarus
operator|.
name|snowball
package|;
end_package
begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|invoke
operator|.
name|MethodHandle
import|;
end_import
begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|invoke
operator|.
name|MethodHandles
import|;
end_import
begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|invoke
operator|.
name|MethodType
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import
begin_comment
comment|/**  * This is the rev 502 of the Snowball SVN trunk,  * now located at<a target="_blank" href="https://github.com/snowballstem/snowball/tree/e103b5c257383ee94a96e7fc58cab3c567bf079b">GitHub</a>,  * but modified:  *<ul>  *<li>made abstract and introduced abstract method stem to avoid expensive reflection in filter class.  *<li>refactored StringBuffers to StringBuilder  *<li>uses char[] as buffer instead of StringBuffer/StringBuilder  *<li>eq_s,eq_s_b,insert,replace_s take CharSequence like eq_v and eq_v_b  *<li>use MethodHandles and fix<a target="_blank" href="http://article.gmane.org/gmane.comp.search.snowball/1139">method visibility bug</a>.  *</ul>  */
end_comment
begin_class
DECL|class|Among
specifier|public
specifier|final
class|class
name|Among
block|{
DECL|method|Among
specifier|public
name|Among
parameter_list|(
name|String
name|s
parameter_list|,
name|int
name|substring_i
parameter_list|,
name|int
name|result
parameter_list|,
name|String
name|methodname
parameter_list|,
name|MethodHandles
operator|.
name|Lookup
name|methodobject
parameter_list|)
block|{
name|this
operator|.
name|s_size
operator|=
name|s
operator|.
name|length
argument_list|()
expr_stmt|;
name|this
operator|.
name|s
operator|=
name|s
operator|.
name|toCharArray
argument_list|()
expr_stmt|;
name|this
operator|.
name|substring_i
operator|=
name|substring_i
expr_stmt|;
name|this
operator|.
name|result
operator|=
name|result
expr_stmt|;
if|if
condition|(
name|methodname
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|this
operator|.
name|method
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|Class
argument_list|<
name|?
extends|extends
name|SnowballProgram
argument_list|>
name|clazz
init|=
name|methodobject
operator|.
name|lookupClass
argument_list|()
operator|.
name|asSubclass
argument_list|(
name|SnowballProgram
operator|.
name|class
argument_list|)
decl_stmt|;
try|try
block|{
name|this
operator|.
name|method
operator|=
name|methodobject
operator|.
name|findVirtual
argument_list|(
name|clazz
argument_list|,
name|methodname
argument_list|,
name|MethodType
operator|.
name|methodType
argument_list|(
name|boolean
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|asType
argument_list|(
name|MethodType
operator|.
name|methodType
argument_list|(
name|boolean
operator|.
name|class
argument_list|,
name|SnowballProgram
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
decl||
name|IllegalAccessException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ENGLISH
argument_list|,
literal|"Snowball program '%s' is broken, cannot access method: boolean %s()"
argument_list|,
name|clazz
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|methodname
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
DECL|field|s_size
specifier|final
name|int
name|s_size
decl_stmt|;
comment|/* search string */
DECL|field|s
specifier|final
name|char
index|[]
name|s
decl_stmt|;
comment|/* search string */
DECL|field|substring_i
specifier|final
name|int
name|substring_i
decl_stmt|;
comment|/* index to longest matching substring */
DECL|field|result
specifier|final
name|int
name|result
decl_stmt|;
comment|/* result of the lookup */
comment|// Make sure this is not accessible outside package for Java security reasons!
DECL|field|method
specifier|final
name|MethodHandle
name|method
decl_stmt|;
comment|/* method to use if substring matches */
block|}
end_class
end_unit
