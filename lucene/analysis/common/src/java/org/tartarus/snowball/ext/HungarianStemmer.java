begin_unit
begin_comment
comment|// This file was generated automatically by the Snowball to Java compiler
end_comment
begin_package
DECL|package|org.tartarus.snowball.ext
package|package
name|org
operator|.
name|tartarus
operator|.
name|snowball
operator|.
name|ext
package|;
end_package
begin_import
import|import
name|org
operator|.
name|tartarus
operator|.
name|snowball
operator|.
name|Among
import|;
end_import
begin_import
import|import
name|org
operator|.
name|tartarus
operator|.
name|snowball
operator|.
name|SnowballProgram
import|;
end_import
begin_comment
comment|/**   * This class was automatically generated by a Snowball to Java compiler    * It implements the stemming algorithm defined by a snowball script.   */
end_comment
begin_class
DECL|class|HungarianStemmer
specifier|public
class|class
name|HungarianStemmer
extends|extends
name|SnowballProgram
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
DECL|field|methodObject
specifier|private
specifier|final
specifier|static
name|HungarianStemmer
name|methodObject
init|=
operator|new
name|HungarianStemmer
argument_list|()
decl_stmt|;
DECL|field|a_0
specifier|private
specifier|final
specifier|static
name|Among
name|a_0
index|[]
init|=
block|{
operator|new
name|Among
argument_list|(
literal|"cs"
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"dzs"
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"gy"
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ly"
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ny"
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"sz"
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ty"
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"zs"
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|}
decl_stmt|;
DECL|field|a_1
specifier|private
specifier|final
specifier|static
name|Among
name|a_1
index|[]
init|=
block|{
operator|new
name|Among
argument_list|(
literal|"\u00E1"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"\u00E9"
argument_list|,
operator|-
literal|1
argument_list|,
literal|2
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|}
decl_stmt|;
DECL|field|a_2
specifier|private
specifier|final
specifier|static
name|Among
name|a_2
index|[]
init|=
block|{
operator|new
name|Among
argument_list|(
literal|"bb"
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"cc"
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"dd"
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ff"
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"gg"
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"jj"
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"kk"
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ll"
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"mm"
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"nn"
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"pp"
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"rr"
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ccs"
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ss"
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"zzs"
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"tt"
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"vv"
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ggy"
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"lly"
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"nny"
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"tty"
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ssz"
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"zz"
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|}
decl_stmt|;
DECL|field|a_3
specifier|private
specifier|final
specifier|static
name|Among
name|a_3
index|[]
init|=
block|{
operator|new
name|Among
argument_list|(
literal|"al"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"el"
argument_list|,
operator|-
literal|1
argument_list|,
literal|2
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|}
decl_stmt|;
DECL|field|a_4
specifier|private
specifier|final
specifier|static
name|Among
name|a_4
index|[]
init|=
block|{
operator|new
name|Among
argument_list|(
literal|"ba"
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ra"
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"be"
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"re"
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ig"
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"nak"
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"nek"
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"val"
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"vel"
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ul"
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"n\u00E1l"
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"n\u00E9l"
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"b\u00F3l"
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"r\u00F3l"
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"t\u00F3l"
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"b\u00F5l"
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"r\u00F5l"
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"t\u00F5l"
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"\u00FCl"
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"n"
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"an"
argument_list|,
literal|19
argument_list|,
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ban"
argument_list|,
literal|20
argument_list|,
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"en"
argument_list|,
literal|19
argument_list|,
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ben"
argument_list|,
literal|22
argument_list|,
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"k\u00E9ppen"
argument_list|,
literal|22
argument_list|,
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"on"
argument_list|,
literal|19
argument_list|,
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"\u00F6n"
argument_list|,
literal|19
argument_list|,
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"k\u00E9pp"
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"kor"
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"t"
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"at"
argument_list|,
literal|29
argument_list|,
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"et"
argument_list|,
literal|29
argument_list|,
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"k\u00E9nt"
argument_list|,
literal|29
argument_list|,
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ank\u00E9nt"
argument_list|,
literal|32
argument_list|,
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"enk\u00E9nt"
argument_list|,
literal|32
argument_list|,
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"onk\u00E9nt"
argument_list|,
literal|32
argument_list|,
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ot"
argument_list|,
literal|29
argument_list|,
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"\u00E9rt"
argument_list|,
literal|29
argument_list|,
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"\u00F6t"
argument_list|,
literal|29
argument_list|,
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"hez"
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"hoz"
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"h\u00F6z"
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"v\u00E1"
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"v\u00E9"
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|}
decl_stmt|;
DECL|field|a_5
specifier|private
specifier|final
specifier|static
name|Among
name|a_5
index|[]
init|=
block|{
operator|new
name|Among
argument_list|(
literal|"\u00E1n"
argument_list|,
operator|-
literal|1
argument_list|,
literal|2
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"\u00E9n"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"\u00E1nk\u00E9nt"
argument_list|,
operator|-
literal|1
argument_list|,
literal|3
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|}
decl_stmt|;
DECL|field|a_6
specifier|private
specifier|final
specifier|static
name|Among
name|a_6
index|[]
init|=
block|{
operator|new
name|Among
argument_list|(
literal|"stul"
argument_list|,
operator|-
literal|1
argument_list|,
literal|2
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"astul"
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"\u00E1stul"
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"st\u00FCl"
argument_list|,
operator|-
literal|1
argument_list|,
literal|2
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"est\u00FCl"
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"\u00E9st\u00FCl"
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|}
decl_stmt|;
DECL|field|a_7
specifier|private
specifier|final
specifier|static
name|Among
name|a_7
index|[]
init|=
block|{
operator|new
name|Among
argument_list|(
literal|"\u00E1"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"\u00E9"
argument_list|,
operator|-
literal|1
argument_list|,
literal|2
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|}
decl_stmt|;
DECL|field|a_8
specifier|private
specifier|final
specifier|static
name|Among
name|a_8
index|[]
init|=
block|{
operator|new
name|Among
argument_list|(
literal|"k"
argument_list|,
operator|-
literal|1
argument_list|,
literal|7
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ak"
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ek"
argument_list|,
literal|0
argument_list|,
literal|6
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ok"
argument_list|,
literal|0
argument_list|,
literal|5
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"\u00E1k"
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"\u00E9k"
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"\u00F6k"
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|}
decl_stmt|;
DECL|field|a_9
specifier|private
specifier|final
specifier|static
name|Among
name|a_9
index|[]
init|=
block|{
operator|new
name|Among
argument_list|(
literal|"\u00E9i"
argument_list|,
operator|-
literal|1
argument_list|,
literal|7
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"\u00E1\u00E9i"
argument_list|,
literal|0
argument_list|,
literal|6
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"\u00E9\u00E9i"
argument_list|,
literal|0
argument_list|,
literal|5
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"\u00E9"
argument_list|,
operator|-
literal|1
argument_list|,
literal|9
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"k\u00E9"
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ak\u00E9"
argument_list|,
literal|4
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ek\u00E9"
argument_list|,
literal|4
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ok\u00E9"
argument_list|,
literal|4
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"\u00E1k\u00E9"
argument_list|,
literal|4
argument_list|,
literal|3
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"\u00E9k\u00E9"
argument_list|,
literal|4
argument_list|,
literal|2
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"\u00F6k\u00E9"
argument_list|,
literal|4
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"\u00E9\u00E9"
argument_list|,
literal|3
argument_list|,
literal|8
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|}
decl_stmt|;
DECL|field|a_10
specifier|private
specifier|final
specifier|static
name|Among
name|a_10
index|[]
init|=
block|{
operator|new
name|Among
argument_list|(
literal|"a"
argument_list|,
operator|-
literal|1
argument_list|,
literal|18
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ja"
argument_list|,
literal|0
argument_list|,
literal|17
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"d"
argument_list|,
operator|-
literal|1
argument_list|,
literal|16
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ad"
argument_list|,
literal|2
argument_list|,
literal|13
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ed"
argument_list|,
literal|2
argument_list|,
literal|13
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"od"
argument_list|,
literal|2
argument_list|,
literal|13
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"\u00E1d"
argument_list|,
literal|2
argument_list|,
literal|14
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"\u00E9d"
argument_list|,
literal|2
argument_list|,
literal|15
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"\u00F6d"
argument_list|,
literal|2
argument_list|,
literal|13
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"e"
argument_list|,
operator|-
literal|1
argument_list|,
literal|18
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"je"
argument_list|,
literal|9
argument_list|,
literal|17
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"nk"
argument_list|,
operator|-
literal|1
argument_list|,
literal|4
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"unk"
argument_list|,
literal|11
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"\u00E1nk"
argument_list|,
literal|11
argument_list|,
literal|2
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"\u00E9nk"
argument_list|,
literal|11
argument_list|,
literal|3
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"\u00FCnk"
argument_list|,
literal|11
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"uk"
argument_list|,
operator|-
literal|1
argument_list|,
literal|8
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"juk"
argument_list|,
literal|16
argument_list|,
literal|7
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"\u00E1juk"
argument_list|,
literal|17
argument_list|,
literal|5
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"\u00FCk"
argument_list|,
operator|-
literal|1
argument_list|,
literal|8
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"j\u00FCk"
argument_list|,
literal|19
argument_list|,
literal|7
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"\u00E9j\u00FCk"
argument_list|,
literal|20
argument_list|,
literal|6
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"m"
argument_list|,
operator|-
literal|1
argument_list|,
literal|12
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"am"
argument_list|,
literal|22
argument_list|,
literal|9
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"em"
argument_list|,
literal|22
argument_list|,
literal|9
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"om"
argument_list|,
literal|22
argument_list|,
literal|9
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"\u00E1m"
argument_list|,
literal|22
argument_list|,
literal|10
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"\u00E9m"
argument_list|,
literal|22
argument_list|,
literal|11
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"o"
argument_list|,
operator|-
literal|1
argument_list|,
literal|18
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"\u00E1"
argument_list|,
operator|-
literal|1
argument_list|,
literal|19
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"\u00E9"
argument_list|,
operator|-
literal|1
argument_list|,
literal|20
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|}
decl_stmt|;
DECL|field|a_11
specifier|private
specifier|final
specifier|static
name|Among
name|a_11
index|[]
init|=
block|{
operator|new
name|Among
argument_list|(
literal|"id"
argument_list|,
operator|-
literal|1
argument_list|,
literal|10
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"aid"
argument_list|,
literal|0
argument_list|,
literal|9
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"jaid"
argument_list|,
literal|1
argument_list|,
literal|6
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"eid"
argument_list|,
literal|0
argument_list|,
literal|9
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"jeid"
argument_list|,
literal|3
argument_list|,
literal|6
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"\u00E1id"
argument_list|,
literal|0
argument_list|,
literal|7
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"\u00E9id"
argument_list|,
literal|0
argument_list|,
literal|8
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"i"
argument_list|,
operator|-
literal|1
argument_list|,
literal|15
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ai"
argument_list|,
literal|7
argument_list|,
literal|14
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"jai"
argument_list|,
literal|8
argument_list|,
literal|11
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ei"
argument_list|,
literal|7
argument_list|,
literal|14
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"jei"
argument_list|,
literal|10
argument_list|,
literal|11
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"\u00E1i"
argument_list|,
literal|7
argument_list|,
literal|12
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"\u00E9i"
argument_list|,
literal|7
argument_list|,
literal|13
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"itek"
argument_list|,
operator|-
literal|1
argument_list|,
literal|24
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"eitek"
argument_list|,
literal|14
argument_list|,
literal|21
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"jeitek"
argument_list|,
literal|15
argument_list|,
literal|20
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"\u00E9itek"
argument_list|,
literal|14
argument_list|,
literal|23
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ik"
argument_list|,
operator|-
literal|1
argument_list|,
literal|29
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"aik"
argument_list|,
literal|18
argument_list|,
literal|26
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"jaik"
argument_list|,
literal|19
argument_list|,
literal|25
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"eik"
argument_list|,
literal|18
argument_list|,
literal|26
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"jeik"
argument_list|,
literal|21
argument_list|,
literal|25
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"\u00E1ik"
argument_list|,
literal|18
argument_list|,
literal|27
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"\u00E9ik"
argument_list|,
literal|18
argument_list|,
literal|28
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ink"
argument_list|,
operator|-
literal|1
argument_list|,
literal|20
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"aink"
argument_list|,
literal|25
argument_list|,
literal|17
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"jaink"
argument_list|,
literal|26
argument_list|,
literal|16
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"eink"
argument_list|,
literal|25
argument_list|,
literal|17
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"jeink"
argument_list|,
literal|28
argument_list|,
literal|16
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"\u00E1ink"
argument_list|,
literal|25
argument_list|,
literal|18
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"\u00E9ink"
argument_list|,
literal|25
argument_list|,
literal|19
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"aitok"
argument_list|,
operator|-
literal|1
argument_list|,
literal|21
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"jaitok"
argument_list|,
literal|32
argument_list|,
literal|20
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"\u00E1itok"
argument_list|,
operator|-
literal|1
argument_list|,
literal|22
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"im"
argument_list|,
operator|-
literal|1
argument_list|,
literal|5
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"aim"
argument_list|,
literal|35
argument_list|,
literal|4
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"jaim"
argument_list|,
literal|36
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"eim"
argument_list|,
literal|35
argument_list|,
literal|4
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"jeim"
argument_list|,
literal|38
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"\u00E1im"
argument_list|,
literal|35
argument_list|,
literal|2
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"\u00E9im"
argument_list|,
literal|35
argument_list|,
literal|3
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|}
decl_stmt|;
DECL|field|g_v
specifier|private
specifier|static
specifier|final
name|char
name|g_v
index|[]
init|=
block|{
literal|17
block|,
literal|65
block|,
literal|16
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|1
block|,
literal|17
block|,
literal|52
block|,
literal|14
block|}
decl_stmt|;
DECL|field|I_p1
specifier|private
name|int
name|I_p1
decl_stmt|;
DECL|method|copy_from
specifier|private
name|void
name|copy_from
parameter_list|(
name|HungarianStemmer
name|other
parameter_list|)
block|{
name|I_p1
operator|=
name|other
operator|.
name|I_p1
expr_stmt|;
name|super
operator|.
name|copy_from
argument_list|(
name|other
argument_list|)
expr_stmt|;
block|}
DECL|method|r_mark_regions
specifier|private
name|boolean
name|r_mark_regions
parameter_list|()
block|{
name|int
name|v_1
decl_stmt|;
name|int
name|v_2
decl_stmt|;
name|int
name|v_3
decl_stmt|;
comment|// (, line 44
name|I_p1
operator|=
name|limit
expr_stmt|;
comment|// or, line 51
name|lab0
label|:
do|do
block|{
name|v_1
operator|=
name|cursor
expr_stmt|;
name|lab1
label|:
do|do
block|{
comment|// (, line 48
if|if
condition|(
operator|!
operator|(
name|in_grouping
argument_list|(
name|g_v
argument_list|,
literal|97
argument_list|,
literal|252
argument_list|)
operator|)
condition|)
block|{
break|break
name|lab1
break|;
block|}
comment|// goto, line 48
name|golab2
label|:
while|while
condition|(
literal|true
condition|)
block|{
name|v_2
operator|=
name|cursor
expr_stmt|;
name|lab3
label|:
do|do
block|{
if|if
condition|(
operator|!
operator|(
name|out_grouping
argument_list|(
name|g_v
argument_list|,
literal|97
argument_list|,
literal|252
argument_list|)
operator|)
condition|)
block|{
break|break
name|lab3
break|;
block|}
name|cursor
operator|=
name|v_2
expr_stmt|;
break|break
name|golab2
break|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|v_2
expr_stmt|;
if|if
condition|(
name|cursor
operator|>=
name|limit
condition|)
block|{
break|break
name|lab1
break|;
block|}
name|cursor
operator|++
expr_stmt|;
block|}
comment|// or, line 49
name|lab4
label|:
do|do
block|{
name|v_3
operator|=
name|cursor
expr_stmt|;
name|lab5
label|:
do|do
block|{
comment|// among, line 49
if|if
condition|(
name|find_among
argument_list|(
name|a_0
argument_list|,
literal|8
argument_list|)
operator|==
literal|0
condition|)
block|{
break|break
name|lab5
break|;
block|}
break|break
name|lab4
break|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|v_3
expr_stmt|;
comment|// next, line 49
if|if
condition|(
name|cursor
operator|>=
name|limit
condition|)
block|{
break|break
name|lab1
break|;
block|}
name|cursor
operator|++
expr_stmt|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
comment|// setmark p1, line 50
name|I_p1
operator|=
name|cursor
expr_stmt|;
break|break
name|lab0
break|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|v_1
expr_stmt|;
comment|// (, line 53
if|if
condition|(
operator|!
operator|(
name|out_grouping
argument_list|(
name|g_v
argument_list|,
literal|97
argument_list|,
literal|252
argument_list|)
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// gopast, line 53
name|golab6
label|:
while|while
condition|(
literal|true
condition|)
block|{
name|lab7
label|:
do|do
block|{
if|if
condition|(
operator|!
operator|(
name|in_grouping
argument_list|(
name|g_v
argument_list|,
literal|97
argument_list|,
literal|252
argument_list|)
operator|)
condition|)
block|{
break|break
name|lab7
break|;
block|}
break|break
name|golab6
break|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
if|if
condition|(
name|cursor
operator|>=
name|limit
condition|)
block|{
return|return
literal|false
return|;
block|}
name|cursor
operator|++
expr_stmt|;
block|}
comment|// setmark p1, line 53
name|I_p1
operator|=
name|cursor
expr_stmt|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
return|return
literal|true
return|;
block|}
DECL|method|r_R1
specifier|private
name|boolean
name|r_R1
parameter_list|()
block|{
if|if
condition|(
operator|!
operator|(
name|I_p1
operator|<=
name|cursor
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|r_v_ending
specifier|private
name|boolean
name|r_v_ending
parameter_list|()
block|{
name|int
name|among_var
decl_stmt|;
comment|// (, line 60
comment|// [, line 61
name|ket
operator|=
name|cursor
expr_stmt|;
comment|// substring, line 61
name|among_var
operator|=
name|find_among_b
argument_list|(
name|a_1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
if|if
condition|(
name|among_var
operator|==
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// ], line 61
name|bra
operator|=
name|cursor
expr_stmt|;
comment|// call R1, line 61
if|if
condition|(
operator|!
name|r_R1
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
switch|switch
condition|(
name|among_var
condition|)
block|{
case|case
literal|0
case|:
return|return
literal|false
return|;
case|case
literal|1
case|:
comment|// (, line 62
comment|//<-, line 62
name|slice_from
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|2
case|:
comment|// (, line 63
comment|//<-, line 63
name|slice_from
argument_list|(
literal|"e"
argument_list|)
expr_stmt|;
break|break;
block|}
return|return
literal|true
return|;
block|}
DECL|method|r_double
specifier|private
name|boolean
name|r_double
parameter_list|()
block|{
name|int
name|v_1
decl_stmt|;
comment|// (, line 67
comment|// test, line 68
name|v_1
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
comment|// among, line 68
if|if
condition|(
name|find_among_b
argument_list|(
name|a_2
argument_list|,
literal|23
argument_list|)
operator|==
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
name|cursor
operator|=
name|limit
operator|-
name|v_1
expr_stmt|;
return|return
literal|true
return|;
block|}
DECL|method|r_undouble
specifier|private
name|boolean
name|r_undouble
parameter_list|()
block|{
comment|// (, line 72
comment|// next, line 73
if|if
condition|(
name|cursor
operator|<=
name|limit_backward
condition|)
block|{
return|return
literal|false
return|;
block|}
name|cursor
operator|--
expr_stmt|;
comment|// [, line 73
name|ket
operator|=
name|cursor
expr_stmt|;
comment|// hop, line 73
block|{
name|int
name|c
init|=
name|cursor
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|limit_backward
operator|>
name|c
operator|||
name|c
operator|>
name|limit
condition|)
block|{
return|return
literal|false
return|;
block|}
name|cursor
operator|=
name|c
expr_stmt|;
block|}
comment|// ], line 73
name|bra
operator|=
name|cursor
expr_stmt|;
comment|// delete, line 73
name|slice_del
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
DECL|method|r_instrum
specifier|private
name|boolean
name|r_instrum
parameter_list|()
block|{
name|int
name|among_var
decl_stmt|;
comment|// (, line 76
comment|// [, line 77
name|ket
operator|=
name|cursor
expr_stmt|;
comment|// substring, line 77
name|among_var
operator|=
name|find_among_b
argument_list|(
name|a_3
argument_list|,
literal|2
argument_list|)
expr_stmt|;
if|if
condition|(
name|among_var
operator|==
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// ], line 77
name|bra
operator|=
name|cursor
expr_stmt|;
comment|// call R1, line 77
if|if
condition|(
operator|!
name|r_R1
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
switch|switch
condition|(
name|among_var
condition|)
block|{
case|case
literal|0
case|:
return|return
literal|false
return|;
case|case
literal|1
case|:
comment|// (, line 78
comment|// call double, line 78
if|if
condition|(
operator|!
name|r_double
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
break|break;
case|case
literal|2
case|:
comment|// (, line 79
comment|// call double, line 79
if|if
condition|(
operator|!
name|r_double
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
break|break;
block|}
comment|// delete, line 81
name|slice_del
argument_list|()
expr_stmt|;
comment|// call undouble, line 82
if|if
condition|(
operator|!
name|r_undouble
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|r_case
specifier|private
name|boolean
name|r_case
parameter_list|()
block|{
comment|// (, line 86
comment|// [, line 87
name|ket
operator|=
name|cursor
expr_stmt|;
comment|// substring, line 87
if|if
condition|(
name|find_among_b
argument_list|(
name|a_4
argument_list|,
literal|44
argument_list|)
operator|==
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// ], line 87
name|bra
operator|=
name|cursor
expr_stmt|;
comment|// call R1, line 87
if|if
condition|(
operator|!
name|r_R1
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// delete, line 111
name|slice_del
argument_list|()
expr_stmt|;
comment|// call v_ending, line 112
if|if
condition|(
operator|!
name|r_v_ending
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|r_case_special
specifier|private
name|boolean
name|r_case_special
parameter_list|()
block|{
name|int
name|among_var
decl_stmt|;
comment|// (, line 115
comment|// [, line 116
name|ket
operator|=
name|cursor
expr_stmt|;
comment|// substring, line 116
name|among_var
operator|=
name|find_among_b
argument_list|(
name|a_5
argument_list|,
literal|3
argument_list|)
expr_stmt|;
if|if
condition|(
name|among_var
operator|==
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// ], line 116
name|bra
operator|=
name|cursor
expr_stmt|;
comment|// call R1, line 116
if|if
condition|(
operator|!
name|r_R1
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
switch|switch
condition|(
name|among_var
condition|)
block|{
case|case
literal|0
case|:
return|return
literal|false
return|;
case|case
literal|1
case|:
comment|// (, line 117
comment|//<-, line 117
name|slice_from
argument_list|(
literal|"e"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|2
case|:
comment|// (, line 118
comment|//<-, line 118
name|slice_from
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|3
case|:
comment|// (, line 119
comment|//<-, line 119
name|slice_from
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
break|break;
block|}
return|return
literal|true
return|;
block|}
DECL|method|r_case_other
specifier|private
name|boolean
name|r_case_other
parameter_list|()
block|{
name|int
name|among_var
decl_stmt|;
comment|// (, line 123
comment|// [, line 124
name|ket
operator|=
name|cursor
expr_stmt|;
comment|// substring, line 124
name|among_var
operator|=
name|find_among_b
argument_list|(
name|a_6
argument_list|,
literal|6
argument_list|)
expr_stmt|;
if|if
condition|(
name|among_var
operator|==
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// ], line 124
name|bra
operator|=
name|cursor
expr_stmt|;
comment|// call R1, line 124
if|if
condition|(
operator|!
name|r_R1
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
switch|switch
condition|(
name|among_var
condition|)
block|{
case|case
literal|0
case|:
return|return
literal|false
return|;
case|case
literal|1
case|:
comment|// (, line 125
comment|// delete, line 125
name|slice_del
argument_list|()
expr_stmt|;
break|break;
case|case
literal|2
case|:
comment|// (, line 126
comment|// delete, line 126
name|slice_del
argument_list|()
expr_stmt|;
break|break;
case|case
literal|3
case|:
comment|// (, line 127
comment|//<-, line 127
name|slice_from
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|4
case|:
comment|// (, line 128
comment|//<-, line 128
name|slice_from
argument_list|(
literal|"e"
argument_list|)
expr_stmt|;
break|break;
block|}
return|return
literal|true
return|;
block|}
DECL|method|r_factive
specifier|private
name|boolean
name|r_factive
parameter_list|()
block|{
name|int
name|among_var
decl_stmt|;
comment|// (, line 132
comment|// [, line 133
name|ket
operator|=
name|cursor
expr_stmt|;
comment|// substring, line 133
name|among_var
operator|=
name|find_among_b
argument_list|(
name|a_7
argument_list|,
literal|2
argument_list|)
expr_stmt|;
if|if
condition|(
name|among_var
operator|==
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// ], line 133
name|bra
operator|=
name|cursor
expr_stmt|;
comment|// call R1, line 133
if|if
condition|(
operator|!
name|r_R1
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
switch|switch
condition|(
name|among_var
condition|)
block|{
case|case
literal|0
case|:
return|return
literal|false
return|;
case|case
literal|1
case|:
comment|// (, line 134
comment|// call double, line 134
if|if
condition|(
operator|!
name|r_double
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
break|break;
case|case
literal|2
case|:
comment|// (, line 135
comment|// call double, line 135
if|if
condition|(
operator|!
name|r_double
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
break|break;
block|}
comment|// delete, line 137
name|slice_del
argument_list|()
expr_stmt|;
comment|// call undouble, line 138
if|if
condition|(
operator|!
name|r_undouble
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|r_plural
specifier|private
name|boolean
name|r_plural
parameter_list|()
block|{
name|int
name|among_var
decl_stmt|;
comment|// (, line 141
comment|// [, line 142
name|ket
operator|=
name|cursor
expr_stmt|;
comment|// substring, line 142
name|among_var
operator|=
name|find_among_b
argument_list|(
name|a_8
argument_list|,
literal|7
argument_list|)
expr_stmt|;
if|if
condition|(
name|among_var
operator|==
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// ], line 142
name|bra
operator|=
name|cursor
expr_stmt|;
comment|// call R1, line 142
if|if
condition|(
operator|!
name|r_R1
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
switch|switch
condition|(
name|among_var
condition|)
block|{
case|case
literal|0
case|:
return|return
literal|false
return|;
case|case
literal|1
case|:
comment|// (, line 143
comment|//<-, line 143
name|slice_from
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|2
case|:
comment|// (, line 144
comment|//<-, line 144
name|slice_from
argument_list|(
literal|"e"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|3
case|:
comment|// (, line 145
comment|// delete, line 145
name|slice_del
argument_list|()
expr_stmt|;
break|break;
case|case
literal|4
case|:
comment|// (, line 146
comment|// delete, line 146
name|slice_del
argument_list|()
expr_stmt|;
break|break;
case|case
literal|5
case|:
comment|// (, line 147
comment|// delete, line 147
name|slice_del
argument_list|()
expr_stmt|;
break|break;
case|case
literal|6
case|:
comment|// (, line 148
comment|// delete, line 148
name|slice_del
argument_list|()
expr_stmt|;
break|break;
case|case
literal|7
case|:
comment|// (, line 149
comment|// delete, line 149
name|slice_del
argument_list|()
expr_stmt|;
break|break;
block|}
return|return
literal|true
return|;
block|}
DECL|method|r_owned
specifier|private
name|boolean
name|r_owned
parameter_list|()
block|{
name|int
name|among_var
decl_stmt|;
comment|// (, line 153
comment|// [, line 154
name|ket
operator|=
name|cursor
expr_stmt|;
comment|// substring, line 154
name|among_var
operator|=
name|find_among_b
argument_list|(
name|a_9
argument_list|,
literal|12
argument_list|)
expr_stmt|;
if|if
condition|(
name|among_var
operator|==
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// ], line 154
name|bra
operator|=
name|cursor
expr_stmt|;
comment|// call R1, line 154
if|if
condition|(
operator|!
name|r_R1
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
switch|switch
condition|(
name|among_var
condition|)
block|{
case|case
literal|0
case|:
return|return
literal|false
return|;
case|case
literal|1
case|:
comment|// (, line 155
comment|// delete, line 155
name|slice_del
argument_list|()
expr_stmt|;
break|break;
case|case
literal|2
case|:
comment|// (, line 156
comment|//<-, line 156
name|slice_from
argument_list|(
literal|"e"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|3
case|:
comment|// (, line 157
comment|//<-, line 157
name|slice_from
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|4
case|:
comment|// (, line 158
comment|// delete, line 158
name|slice_del
argument_list|()
expr_stmt|;
break|break;
case|case
literal|5
case|:
comment|// (, line 159
comment|//<-, line 159
name|slice_from
argument_list|(
literal|"e"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|6
case|:
comment|// (, line 160
comment|//<-, line 160
name|slice_from
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|7
case|:
comment|// (, line 161
comment|// delete, line 161
name|slice_del
argument_list|()
expr_stmt|;
break|break;
case|case
literal|8
case|:
comment|// (, line 162
comment|//<-, line 162
name|slice_from
argument_list|(
literal|"e"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|9
case|:
comment|// (, line 163
comment|// delete, line 163
name|slice_del
argument_list|()
expr_stmt|;
break|break;
block|}
return|return
literal|true
return|;
block|}
DECL|method|r_sing_owner
specifier|private
name|boolean
name|r_sing_owner
parameter_list|()
block|{
name|int
name|among_var
decl_stmt|;
comment|// (, line 167
comment|// [, line 168
name|ket
operator|=
name|cursor
expr_stmt|;
comment|// substring, line 168
name|among_var
operator|=
name|find_among_b
argument_list|(
name|a_10
argument_list|,
literal|31
argument_list|)
expr_stmt|;
if|if
condition|(
name|among_var
operator|==
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// ], line 168
name|bra
operator|=
name|cursor
expr_stmt|;
comment|// call R1, line 168
if|if
condition|(
operator|!
name|r_R1
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
switch|switch
condition|(
name|among_var
condition|)
block|{
case|case
literal|0
case|:
return|return
literal|false
return|;
case|case
literal|1
case|:
comment|// (, line 169
comment|// delete, line 169
name|slice_del
argument_list|()
expr_stmt|;
break|break;
case|case
literal|2
case|:
comment|// (, line 170
comment|//<-, line 170
name|slice_from
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|3
case|:
comment|// (, line 171
comment|//<-, line 171
name|slice_from
argument_list|(
literal|"e"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|4
case|:
comment|// (, line 172
comment|// delete, line 172
name|slice_del
argument_list|()
expr_stmt|;
break|break;
case|case
literal|5
case|:
comment|// (, line 173
comment|//<-, line 173
name|slice_from
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|6
case|:
comment|// (, line 174
comment|//<-, line 174
name|slice_from
argument_list|(
literal|"e"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|7
case|:
comment|// (, line 175
comment|// delete, line 175
name|slice_del
argument_list|()
expr_stmt|;
break|break;
case|case
literal|8
case|:
comment|// (, line 176
comment|// delete, line 176
name|slice_del
argument_list|()
expr_stmt|;
break|break;
case|case
literal|9
case|:
comment|// (, line 177
comment|// delete, line 177
name|slice_del
argument_list|()
expr_stmt|;
break|break;
case|case
literal|10
case|:
comment|// (, line 178
comment|//<-, line 178
name|slice_from
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|11
case|:
comment|// (, line 179
comment|//<-, line 179
name|slice_from
argument_list|(
literal|"e"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|12
case|:
comment|// (, line 180
comment|// delete, line 180
name|slice_del
argument_list|()
expr_stmt|;
break|break;
case|case
literal|13
case|:
comment|// (, line 181
comment|// delete, line 181
name|slice_del
argument_list|()
expr_stmt|;
break|break;
case|case
literal|14
case|:
comment|// (, line 182
comment|//<-, line 182
name|slice_from
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|15
case|:
comment|// (, line 183
comment|//<-, line 183
name|slice_from
argument_list|(
literal|"e"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|16
case|:
comment|// (, line 184
comment|// delete, line 184
name|slice_del
argument_list|()
expr_stmt|;
break|break;
case|case
literal|17
case|:
comment|// (, line 185
comment|// delete, line 185
name|slice_del
argument_list|()
expr_stmt|;
break|break;
case|case
literal|18
case|:
comment|// (, line 186
comment|// delete, line 186
name|slice_del
argument_list|()
expr_stmt|;
break|break;
case|case
literal|19
case|:
comment|// (, line 187
comment|//<-, line 187
name|slice_from
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|20
case|:
comment|// (, line 188
comment|//<-, line 188
name|slice_from
argument_list|(
literal|"e"
argument_list|)
expr_stmt|;
break|break;
block|}
return|return
literal|true
return|;
block|}
DECL|method|r_plur_owner
specifier|private
name|boolean
name|r_plur_owner
parameter_list|()
block|{
name|int
name|among_var
decl_stmt|;
comment|// (, line 192
comment|// [, line 193
name|ket
operator|=
name|cursor
expr_stmt|;
comment|// substring, line 193
name|among_var
operator|=
name|find_among_b
argument_list|(
name|a_11
argument_list|,
literal|42
argument_list|)
expr_stmt|;
if|if
condition|(
name|among_var
operator|==
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// ], line 193
name|bra
operator|=
name|cursor
expr_stmt|;
comment|// call R1, line 193
if|if
condition|(
operator|!
name|r_R1
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
switch|switch
condition|(
name|among_var
condition|)
block|{
case|case
literal|0
case|:
return|return
literal|false
return|;
case|case
literal|1
case|:
comment|// (, line 194
comment|// delete, line 194
name|slice_del
argument_list|()
expr_stmt|;
break|break;
case|case
literal|2
case|:
comment|// (, line 195
comment|//<-, line 195
name|slice_from
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|3
case|:
comment|// (, line 196
comment|//<-, line 196
name|slice_from
argument_list|(
literal|"e"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|4
case|:
comment|// (, line 197
comment|// delete, line 197
name|slice_del
argument_list|()
expr_stmt|;
break|break;
case|case
literal|5
case|:
comment|// (, line 198
comment|// delete, line 198
name|slice_del
argument_list|()
expr_stmt|;
break|break;
case|case
literal|6
case|:
comment|// (, line 199
comment|// delete, line 199
name|slice_del
argument_list|()
expr_stmt|;
break|break;
case|case
literal|7
case|:
comment|// (, line 200
comment|//<-, line 200
name|slice_from
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|8
case|:
comment|// (, line 201
comment|//<-, line 201
name|slice_from
argument_list|(
literal|"e"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|9
case|:
comment|// (, line 202
comment|// delete, line 202
name|slice_del
argument_list|()
expr_stmt|;
break|break;
case|case
literal|10
case|:
comment|// (, line 203
comment|// delete, line 203
name|slice_del
argument_list|()
expr_stmt|;
break|break;
case|case
literal|11
case|:
comment|// (, line 204
comment|// delete, line 204
name|slice_del
argument_list|()
expr_stmt|;
break|break;
case|case
literal|12
case|:
comment|// (, line 205
comment|//<-, line 205
name|slice_from
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|13
case|:
comment|// (, line 206
comment|//<-, line 206
name|slice_from
argument_list|(
literal|"e"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|14
case|:
comment|// (, line 207
comment|// delete, line 207
name|slice_del
argument_list|()
expr_stmt|;
break|break;
case|case
literal|15
case|:
comment|// (, line 208
comment|// delete, line 208
name|slice_del
argument_list|()
expr_stmt|;
break|break;
case|case
literal|16
case|:
comment|// (, line 209
comment|// delete, line 209
name|slice_del
argument_list|()
expr_stmt|;
break|break;
case|case
literal|17
case|:
comment|// (, line 210
comment|// delete, line 210
name|slice_del
argument_list|()
expr_stmt|;
break|break;
case|case
literal|18
case|:
comment|// (, line 211
comment|//<-, line 211
name|slice_from
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|19
case|:
comment|// (, line 212
comment|//<-, line 212
name|slice_from
argument_list|(
literal|"e"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|20
case|:
comment|// (, line 214
comment|// delete, line 214
name|slice_del
argument_list|()
expr_stmt|;
break|break;
case|case
literal|21
case|:
comment|// (, line 215
comment|// delete, line 215
name|slice_del
argument_list|()
expr_stmt|;
break|break;
case|case
literal|22
case|:
comment|// (, line 216
comment|//<-, line 216
name|slice_from
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|23
case|:
comment|// (, line 217
comment|//<-, line 217
name|slice_from
argument_list|(
literal|"e"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|24
case|:
comment|// (, line 218
comment|// delete, line 218
name|slice_del
argument_list|()
expr_stmt|;
break|break;
case|case
literal|25
case|:
comment|// (, line 219
comment|// delete, line 219
name|slice_del
argument_list|()
expr_stmt|;
break|break;
case|case
literal|26
case|:
comment|// (, line 220
comment|// delete, line 220
name|slice_del
argument_list|()
expr_stmt|;
break|break;
case|case
literal|27
case|:
comment|// (, line 221
comment|//<-, line 221
name|slice_from
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|28
case|:
comment|// (, line 222
comment|//<-, line 222
name|slice_from
argument_list|(
literal|"e"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|29
case|:
comment|// (, line 223
comment|// delete, line 223
name|slice_del
argument_list|()
expr_stmt|;
break|break;
block|}
return|return
literal|true
return|;
block|}
DECL|method|stem
specifier|public
name|boolean
name|stem
parameter_list|()
block|{
name|int
name|v_1
decl_stmt|;
name|int
name|v_2
decl_stmt|;
name|int
name|v_3
decl_stmt|;
name|int
name|v_4
decl_stmt|;
name|int
name|v_5
decl_stmt|;
name|int
name|v_6
decl_stmt|;
name|int
name|v_7
decl_stmt|;
name|int
name|v_8
decl_stmt|;
name|int
name|v_9
decl_stmt|;
name|int
name|v_10
decl_stmt|;
comment|// (, line 228
comment|// do, line 229
name|v_1
operator|=
name|cursor
expr_stmt|;
name|lab0
label|:
do|do
block|{
comment|// call mark_regions, line 229
if|if
condition|(
operator|!
name|r_mark_regions
argument_list|()
condition|)
block|{
break|break
name|lab0
break|;
block|}
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|v_1
expr_stmt|;
comment|// backwards, line 230
name|limit_backward
operator|=
name|cursor
expr_stmt|;
name|cursor
operator|=
name|limit
expr_stmt|;
comment|// (, line 230
comment|// do, line 231
name|v_2
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
name|lab1
label|:
do|do
block|{
comment|// call instrum, line 231
if|if
condition|(
operator|!
name|r_instrum
argument_list|()
condition|)
block|{
break|break
name|lab1
break|;
block|}
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|limit
operator|-
name|v_2
expr_stmt|;
comment|// do, line 232
name|v_3
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
name|lab2
label|:
do|do
block|{
comment|// call case, line 232
if|if
condition|(
operator|!
name|r_case
argument_list|()
condition|)
block|{
break|break
name|lab2
break|;
block|}
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|limit
operator|-
name|v_3
expr_stmt|;
comment|// do, line 233
name|v_4
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
name|lab3
label|:
do|do
block|{
comment|// call case_special, line 233
if|if
condition|(
operator|!
name|r_case_special
argument_list|()
condition|)
block|{
break|break
name|lab3
break|;
block|}
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|limit
operator|-
name|v_4
expr_stmt|;
comment|// do, line 234
name|v_5
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
name|lab4
label|:
do|do
block|{
comment|// call case_other, line 234
if|if
condition|(
operator|!
name|r_case_other
argument_list|()
condition|)
block|{
break|break
name|lab4
break|;
block|}
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|limit
operator|-
name|v_5
expr_stmt|;
comment|// do, line 235
name|v_6
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
name|lab5
label|:
do|do
block|{
comment|// call factive, line 235
if|if
condition|(
operator|!
name|r_factive
argument_list|()
condition|)
block|{
break|break
name|lab5
break|;
block|}
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|limit
operator|-
name|v_6
expr_stmt|;
comment|// do, line 236
name|v_7
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
name|lab6
label|:
do|do
block|{
comment|// call owned, line 236
if|if
condition|(
operator|!
name|r_owned
argument_list|()
condition|)
block|{
break|break
name|lab6
break|;
block|}
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|limit
operator|-
name|v_7
expr_stmt|;
comment|// do, line 237
name|v_8
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
name|lab7
label|:
do|do
block|{
comment|// call sing_owner, line 237
if|if
condition|(
operator|!
name|r_sing_owner
argument_list|()
condition|)
block|{
break|break
name|lab7
break|;
block|}
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|limit
operator|-
name|v_8
expr_stmt|;
comment|// do, line 238
name|v_9
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
name|lab8
label|:
do|do
block|{
comment|// call plur_owner, line 238
if|if
condition|(
operator|!
name|r_plur_owner
argument_list|()
condition|)
block|{
break|break
name|lab8
break|;
block|}
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|limit
operator|-
name|v_9
expr_stmt|;
comment|// do, line 239
name|v_10
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
name|lab9
label|:
do|do
block|{
comment|// call plural, line 239
if|if
condition|(
operator|!
name|r_plural
argument_list|()
condition|)
block|{
break|break
name|lab9
break|;
block|}
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|limit
operator|-
name|v_10
expr_stmt|;
name|cursor
operator|=
name|limit_backward
expr_stmt|;
return|return
literal|true
return|;
block|}
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
name|o
operator|instanceof
name|HungarianStemmer
return|;
block|}
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|HungarianStemmer
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|.
name|hashCode
argument_list|()
return|;
block|}
block|}
end_class
end_unit
