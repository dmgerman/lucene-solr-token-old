begin_unit
begin_comment
comment|// This file was generated automatically by the Snowball to Java compiler
end_comment
begin_package
DECL|package|org.tartarus.snowball.ext
package|package
name|org
operator|.
name|tartarus
operator|.
name|snowball
operator|.
name|ext
package|;
end_package
begin_import
import|import
name|org
operator|.
name|tartarus
operator|.
name|snowball
operator|.
name|Among
import|;
end_import
begin_import
import|import
name|org
operator|.
name|tartarus
operator|.
name|snowball
operator|.
name|SnowballProgram
import|;
end_import
begin_comment
comment|/**   * This class was automatically generated by a Snowball to Java compiler    * It implements the stemming algorithm defined by a snowball script.   */
end_comment
begin_class
DECL|class|KpStemmer
specifier|public
class|class
name|KpStemmer
extends|extends
name|SnowballProgram
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
DECL|field|methodObject
specifier|private
specifier|final
specifier|static
name|KpStemmer
name|methodObject
init|=
operator|new
name|KpStemmer
argument_list|()
decl_stmt|;
DECL|field|a_0
specifier|private
specifier|final
specifier|static
name|Among
name|a_0
index|[]
init|=
block|{
operator|new
name|Among
argument_list|(
literal|"nde"
argument_list|,
operator|-
literal|1
argument_list|,
literal|7
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"en"
argument_list|,
operator|-
literal|1
argument_list|,
literal|6
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"s"
argument_list|,
operator|-
literal|1
argument_list|,
literal|2
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"'s"
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"es"
argument_list|,
literal|2
argument_list|,
literal|4
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ies"
argument_list|,
literal|4
argument_list|,
literal|3
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"aus"
argument_list|,
literal|2
argument_list|,
literal|5
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|}
decl_stmt|;
DECL|field|a_1
specifier|private
specifier|final
specifier|static
name|Among
name|a_1
index|[]
init|=
block|{
operator|new
name|Among
argument_list|(
literal|"de"
argument_list|,
operator|-
literal|1
argument_list|,
literal|5
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ge"
argument_list|,
operator|-
literal|1
argument_list|,
literal|2
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ische"
argument_list|,
operator|-
literal|1
argument_list|,
literal|4
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"je"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"lijke"
argument_list|,
operator|-
literal|1
argument_list|,
literal|3
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"le"
argument_list|,
operator|-
literal|1
argument_list|,
literal|9
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ene"
argument_list|,
operator|-
literal|1
argument_list|,
literal|10
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"re"
argument_list|,
operator|-
literal|1
argument_list|,
literal|8
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"se"
argument_list|,
operator|-
literal|1
argument_list|,
literal|7
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"te"
argument_list|,
operator|-
literal|1
argument_list|,
literal|6
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ieve"
argument_list|,
operator|-
literal|1
argument_list|,
literal|11
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|}
decl_stmt|;
DECL|field|a_2
specifier|private
specifier|final
specifier|static
name|Among
name|a_2
index|[]
init|=
block|{
operator|new
name|Among
argument_list|(
literal|"heid"
argument_list|,
operator|-
literal|1
argument_list|,
literal|3
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"fie"
argument_list|,
operator|-
literal|1
argument_list|,
literal|7
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"gie"
argument_list|,
operator|-
literal|1
argument_list|,
literal|8
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"atie"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"isme"
argument_list|,
operator|-
literal|1
argument_list|,
literal|5
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ing"
argument_list|,
operator|-
literal|1
argument_list|,
literal|5
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"arij"
argument_list|,
operator|-
literal|1
argument_list|,
literal|6
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"erij"
argument_list|,
operator|-
literal|1
argument_list|,
literal|5
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"sel"
argument_list|,
operator|-
literal|1
argument_list|,
literal|3
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"rder"
argument_list|,
operator|-
literal|1
argument_list|,
literal|4
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ster"
argument_list|,
operator|-
literal|1
argument_list|,
literal|3
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"iteit"
argument_list|,
operator|-
literal|1
argument_list|,
literal|2
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"dst"
argument_list|,
operator|-
literal|1
argument_list|,
literal|10
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"tst"
argument_list|,
operator|-
literal|1
argument_list|,
literal|9
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|}
decl_stmt|;
DECL|field|a_3
specifier|private
specifier|final
specifier|static
name|Among
name|a_3
index|[]
init|=
block|{
operator|new
name|Among
argument_list|(
literal|"end"
argument_list|,
operator|-
literal|1
argument_list|,
literal|10
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"atief"
argument_list|,
operator|-
literal|1
argument_list|,
literal|2
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"erig"
argument_list|,
operator|-
literal|1
argument_list|,
literal|10
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"achtig"
argument_list|,
operator|-
literal|1
argument_list|,
literal|9
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ioneel"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"baar"
argument_list|,
operator|-
literal|1
argument_list|,
literal|3
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"laar"
argument_list|,
operator|-
literal|1
argument_list|,
literal|5
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"naar"
argument_list|,
operator|-
literal|1
argument_list|,
literal|4
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"raar"
argument_list|,
operator|-
literal|1
argument_list|,
literal|6
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"eriger"
argument_list|,
operator|-
literal|1
argument_list|,
literal|10
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"achtiger"
argument_list|,
operator|-
literal|1
argument_list|,
literal|9
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"lijker"
argument_list|,
operator|-
literal|1
argument_list|,
literal|8
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"tant"
argument_list|,
operator|-
literal|1
argument_list|,
literal|7
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"erigst"
argument_list|,
operator|-
literal|1
argument_list|,
literal|10
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"achtigst"
argument_list|,
operator|-
literal|1
argument_list|,
literal|9
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"lijkst"
argument_list|,
operator|-
literal|1
argument_list|,
literal|8
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|}
decl_stmt|;
DECL|field|a_4
specifier|private
specifier|final
specifier|static
name|Among
name|a_4
index|[]
init|=
block|{
operator|new
name|Among
argument_list|(
literal|"ig"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"iger"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"igst"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|}
decl_stmt|;
DECL|field|a_5
specifier|private
specifier|final
specifier|static
name|Among
name|a_5
index|[]
init|=
block|{
operator|new
name|Among
argument_list|(
literal|"ft"
argument_list|,
operator|-
literal|1
argument_list|,
literal|2
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"kt"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"pt"
argument_list|,
operator|-
literal|1
argument_list|,
literal|3
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|}
decl_stmt|;
DECL|field|a_6
specifier|private
specifier|final
specifier|static
name|Among
name|a_6
index|[]
init|=
block|{
operator|new
name|Among
argument_list|(
literal|"bb"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"cc"
argument_list|,
operator|-
literal|1
argument_list|,
literal|2
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"dd"
argument_list|,
operator|-
literal|1
argument_list|,
literal|3
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ff"
argument_list|,
operator|-
literal|1
argument_list|,
literal|4
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"gg"
argument_list|,
operator|-
literal|1
argument_list|,
literal|5
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"hh"
argument_list|,
operator|-
literal|1
argument_list|,
literal|6
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"jj"
argument_list|,
operator|-
literal|1
argument_list|,
literal|7
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"kk"
argument_list|,
operator|-
literal|1
argument_list|,
literal|8
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ll"
argument_list|,
operator|-
literal|1
argument_list|,
literal|9
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"mm"
argument_list|,
operator|-
literal|1
argument_list|,
literal|10
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"nn"
argument_list|,
operator|-
literal|1
argument_list|,
literal|11
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"pp"
argument_list|,
operator|-
literal|1
argument_list|,
literal|12
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"qq"
argument_list|,
operator|-
literal|1
argument_list|,
literal|13
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"rr"
argument_list|,
operator|-
literal|1
argument_list|,
literal|14
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ss"
argument_list|,
operator|-
literal|1
argument_list|,
literal|15
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"tt"
argument_list|,
operator|-
literal|1
argument_list|,
literal|16
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"v"
argument_list|,
operator|-
literal|1
argument_list|,
literal|21
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"vv"
argument_list|,
literal|16
argument_list|,
literal|17
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ww"
argument_list|,
operator|-
literal|1
argument_list|,
literal|18
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"xx"
argument_list|,
operator|-
literal|1
argument_list|,
literal|19
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"z"
argument_list|,
operator|-
literal|1
argument_list|,
literal|22
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"zz"
argument_list|,
literal|20
argument_list|,
literal|20
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|}
decl_stmt|;
DECL|field|a_7
specifier|private
specifier|final
specifier|static
name|Among
name|a_7
index|[]
init|=
block|{
operator|new
name|Among
argument_list|(
literal|"d"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"t"
argument_list|,
operator|-
literal|1
argument_list|,
literal|2
argument_list|,
literal|""
argument_list|,
name|methodObject
argument_list|)
block|}
decl_stmt|;
DECL|field|g_v
specifier|private
specifier|static
specifier|final
name|char
name|g_v
index|[]
init|=
block|{
literal|17
block|,
literal|65
block|,
literal|16
block|,
literal|1
block|}
decl_stmt|;
DECL|field|g_v_WX
specifier|private
specifier|static
specifier|final
name|char
name|g_v_WX
index|[]
init|=
block|{
literal|17
block|,
literal|65
block|,
literal|208
block|,
literal|1
block|}
decl_stmt|;
DECL|field|g_AOU
specifier|private
specifier|static
specifier|final
name|char
name|g_AOU
index|[]
init|=
block|{
literal|1
block|,
literal|64
block|,
literal|16
block|}
decl_stmt|;
DECL|field|g_AIOU
specifier|private
specifier|static
specifier|final
name|char
name|g_AIOU
index|[]
init|=
block|{
literal|1
block|,
literal|65
block|,
literal|16
block|}
decl_stmt|;
DECL|field|B_GE_removed
specifier|private
name|boolean
name|B_GE_removed
decl_stmt|;
DECL|field|B_stemmed
specifier|private
name|boolean
name|B_stemmed
decl_stmt|;
DECL|field|B_Y_found
specifier|private
name|boolean
name|B_Y_found
decl_stmt|;
DECL|field|I_p2
specifier|private
name|int
name|I_p2
decl_stmt|;
DECL|field|I_p1
specifier|private
name|int
name|I_p1
decl_stmt|;
DECL|field|I_x
specifier|private
name|int
name|I_x
decl_stmt|;
DECL|field|S_ch
specifier|private
name|java
operator|.
name|lang
operator|.
name|StringBuilder
name|S_ch
init|=
operator|new
name|java
operator|.
name|lang
operator|.
name|StringBuilder
argument_list|()
decl_stmt|;
DECL|method|copy_from
specifier|private
name|void
name|copy_from
parameter_list|(
name|KpStemmer
name|other
parameter_list|)
block|{
name|B_GE_removed
operator|=
name|other
operator|.
name|B_GE_removed
expr_stmt|;
name|B_stemmed
operator|=
name|other
operator|.
name|B_stemmed
expr_stmt|;
name|B_Y_found
operator|=
name|other
operator|.
name|B_Y_found
expr_stmt|;
name|I_p2
operator|=
name|other
operator|.
name|I_p2
expr_stmt|;
name|I_p1
operator|=
name|other
operator|.
name|I_p1
expr_stmt|;
name|I_x
operator|=
name|other
operator|.
name|I_x
expr_stmt|;
name|S_ch
operator|=
name|other
operator|.
name|S_ch
expr_stmt|;
name|super
operator|.
name|copy_from
argument_list|(
name|other
argument_list|)
expr_stmt|;
block|}
DECL|method|r_R1
specifier|private
name|boolean
name|r_R1
parameter_list|()
block|{
comment|// (, line 32
comment|// setmark x, line 32
name|I_x
operator|=
name|cursor
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|I_x
operator|>=
name|I_p1
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|r_R2
specifier|private
name|boolean
name|r_R2
parameter_list|()
block|{
comment|// (, line 33
comment|// setmark x, line 33
name|I_x
operator|=
name|cursor
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|I_x
operator|>=
name|I_p2
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|r_V
specifier|private
name|boolean
name|r_V
parameter_list|()
block|{
name|int
name|v_1
decl_stmt|;
name|int
name|v_2
decl_stmt|;
comment|// test, line 35
name|v_1
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
comment|// (, line 35
comment|// or, line 35
name|lab0
label|:
do|do
block|{
name|v_2
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
name|lab1
label|:
do|do
block|{
if|if
condition|(
operator|!
operator|(
name|in_grouping_b
argument_list|(
name|g_v
argument_list|,
literal|97
argument_list|,
literal|121
argument_list|)
operator|)
condition|)
block|{
break|break
name|lab1
break|;
block|}
break|break
name|lab0
break|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|limit
operator|-
name|v_2
expr_stmt|;
comment|// literal, line 35
if|if
condition|(
operator|!
operator|(
name|eq_s_b
argument_list|(
literal|2
argument_list|,
literal|"ij"
argument_list|)
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|limit
operator|-
name|v_1
expr_stmt|;
return|return
literal|true
return|;
block|}
DECL|method|r_VX
specifier|private
name|boolean
name|r_VX
parameter_list|()
block|{
name|int
name|v_1
decl_stmt|;
name|int
name|v_2
decl_stmt|;
comment|// test, line 36
name|v_1
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
comment|// (, line 36
comment|// next, line 36
if|if
condition|(
name|cursor
operator|<=
name|limit_backward
condition|)
block|{
return|return
literal|false
return|;
block|}
name|cursor
operator|--
expr_stmt|;
comment|// or, line 36
name|lab0
label|:
do|do
block|{
name|v_2
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
name|lab1
label|:
do|do
block|{
if|if
condition|(
operator|!
operator|(
name|in_grouping_b
argument_list|(
name|g_v
argument_list|,
literal|97
argument_list|,
literal|121
argument_list|)
operator|)
condition|)
block|{
break|break
name|lab1
break|;
block|}
break|break
name|lab0
break|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|limit
operator|-
name|v_2
expr_stmt|;
comment|// literal, line 36
if|if
condition|(
operator|!
operator|(
name|eq_s_b
argument_list|(
literal|2
argument_list|,
literal|"ij"
argument_list|)
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|limit
operator|-
name|v_1
expr_stmt|;
return|return
literal|true
return|;
block|}
DECL|method|r_C
specifier|private
name|boolean
name|r_C
parameter_list|()
block|{
name|int
name|v_1
decl_stmt|;
name|int
name|v_2
decl_stmt|;
comment|// test, line 37
name|v_1
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
comment|// (, line 37
comment|// not, line 37
block|{
name|v_2
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
name|lab0
label|:
do|do
block|{
comment|// literal, line 37
if|if
condition|(
operator|!
operator|(
name|eq_s_b
argument_list|(
literal|2
argument_list|,
literal|"ij"
argument_list|)
operator|)
condition|)
block|{
break|break
name|lab0
break|;
block|}
return|return
literal|false
return|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|limit
operator|-
name|v_2
expr_stmt|;
block|}
if|if
condition|(
operator|!
operator|(
name|out_grouping_b
argument_list|(
name|g_v
argument_list|,
literal|97
argument_list|,
literal|121
argument_list|)
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|cursor
operator|=
name|limit
operator|-
name|v_1
expr_stmt|;
return|return
literal|true
return|;
block|}
DECL|method|r_lengthen_V
specifier|private
name|boolean
name|r_lengthen_V
parameter_list|()
block|{
name|int
name|v_1
decl_stmt|;
name|int
name|v_2
decl_stmt|;
name|int
name|v_3
decl_stmt|;
name|int
name|v_4
decl_stmt|;
name|int
name|v_5
decl_stmt|;
name|int
name|v_6
decl_stmt|;
name|int
name|v_7
decl_stmt|;
name|int
name|v_8
decl_stmt|;
comment|// do, line 39
name|v_1
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
name|lab0
label|:
do|do
block|{
comment|// (, line 39
if|if
condition|(
operator|!
operator|(
name|out_grouping_b
argument_list|(
name|g_v_WX
argument_list|,
literal|97
argument_list|,
literal|121
argument_list|)
operator|)
condition|)
block|{
break|break
name|lab0
break|;
block|}
comment|// [, line 40
name|ket
operator|=
name|cursor
expr_stmt|;
comment|// or, line 40
name|lab1
label|:
do|do
block|{
name|v_2
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
name|lab2
label|:
do|do
block|{
comment|// (, line 40
if|if
condition|(
operator|!
operator|(
name|in_grouping_b
argument_list|(
name|g_AOU
argument_list|,
literal|97
argument_list|,
literal|117
argument_list|)
operator|)
condition|)
block|{
break|break
name|lab2
break|;
block|}
comment|// ], line 40
name|bra
operator|=
name|cursor
expr_stmt|;
comment|// test, line 40
name|v_3
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
comment|// (, line 40
comment|// or, line 40
name|lab3
label|:
do|do
block|{
name|v_4
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
name|lab4
label|:
do|do
block|{
if|if
condition|(
operator|!
operator|(
name|out_grouping_b
argument_list|(
name|g_v
argument_list|,
literal|97
argument_list|,
literal|121
argument_list|)
operator|)
condition|)
block|{
break|break
name|lab4
break|;
block|}
break|break
name|lab3
break|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|limit
operator|-
name|v_4
expr_stmt|;
comment|// atlimit, line 40
if|if
condition|(
name|cursor
operator|>
name|limit_backward
condition|)
block|{
break|break
name|lab2
break|;
block|}
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|limit
operator|-
name|v_3
expr_stmt|;
break|break
name|lab1
break|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|limit
operator|-
name|v_2
expr_stmt|;
comment|// (, line 41
comment|// literal, line 41
if|if
condition|(
operator|!
operator|(
name|eq_s_b
argument_list|(
literal|1
argument_list|,
literal|"e"
argument_list|)
operator|)
condition|)
block|{
break|break
name|lab0
break|;
block|}
comment|// ], line 41
name|bra
operator|=
name|cursor
expr_stmt|;
comment|// test, line 41
name|v_5
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
comment|// (, line 41
comment|// or, line 41
name|lab5
label|:
do|do
block|{
name|v_6
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
name|lab6
label|:
do|do
block|{
if|if
condition|(
operator|!
operator|(
name|out_grouping_b
argument_list|(
name|g_v
argument_list|,
literal|97
argument_list|,
literal|121
argument_list|)
operator|)
condition|)
block|{
break|break
name|lab6
break|;
block|}
break|break
name|lab5
break|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|limit
operator|-
name|v_6
expr_stmt|;
comment|// atlimit, line 41
if|if
condition|(
name|cursor
operator|>
name|limit_backward
condition|)
block|{
break|break
name|lab0
break|;
block|}
block|}
do|while
condition|(
literal|false
condition|)
do|;
comment|// not, line 42
block|{
name|v_7
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
name|lab7
label|:
do|do
block|{
if|if
condition|(
operator|!
operator|(
name|in_grouping_b
argument_list|(
name|g_AIOU
argument_list|,
literal|97
argument_list|,
literal|117
argument_list|)
operator|)
condition|)
block|{
break|break
name|lab7
break|;
block|}
break|break
name|lab0
break|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|limit
operator|-
name|v_7
expr_stmt|;
block|}
comment|// not, line 43
block|{
name|v_8
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
name|lab8
label|:
do|do
block|{
comment|// (, line 43
comment|// next, line 43
if|if
condition|(
name|cursor
operator|<=
name|limit_backward
condition|)
block|{
break|break
name|lab8
break|;
block|}
name|cursor
operator|--
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|in_grouping_b
argument_list|(
name|g_AIOU
argument_list|,
literal|97
argument_list|,
literal|117
argument_list|)
operator|)
condition|)
block|{
break|break
name|lab8
break|;
block|}
if|if
condition|(
operator|!
operator|(
name|out_grouping_b
argument_list|(
name|g_v
argument_list|,
literal|97
argument_list|,
literal|121
argument_list|)
operator|)
condition|)
block|{
break|break
name|lab8
break|;
block|}
break|break
name|lab0
break|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|limit
operator|-
name|v_8
expr_stmt|;
block|}
name|cursor
operator|=
name|limit
operator|-
name|v_5
expr_stmt|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
comment|// -> ch, line 44
name|S_ch
operator|=
name|slice_to
argument_list|(
name|S_ch
argument_list|)
expr_stmt|;
comment|//<+ ch, line 44
block|{
name|int
name|c
init|=
name|cursor
decl_stmt|;
name|insert
argument_list|(
name|cursor
argument_list|,
name|cursor
argument_list|,
name|S_ch
argument_list|)
expr_stmt|;
name|cursor
operator|=
name|c
expr_stmt|;
block|}
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|limit
operator|-
name|v_1
expr_stmt|;
return|return
literal|true
return|;
block|}
DECL|method|r_Step_1
specifier|private
name|boolean
name|r_Step_1
parameter_list|()
block|{
name|int
name|among_var
decl_stmt|;
name|int
name|v_1
decl_stmt|;
name|int
name|v_2
decl_stmt|;
name|int
name|v_3
decl_stmt|;
name|int
name|v_4
decl_stmt|;
comment|// (, line 48
comment|// [, line 49
name|ket
operator|=
name|cursor
expr_stmt|;
comment|// among, line 49
name|among_var
operator|=
name|find_among_b
argument_list|(
name|a_0
argument_list|,
literal|7
argument_list|)
expr_stmt|;
if|if
condition|(
name|among_var
operator|==
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// (, line 49
comment|// ], line 49
name|bra
operator|=
name|cursor
expr_stmt|;
switch|switch
condition|(
name|among_var
condition|)
block|{
case|case
literal|0
case|:
return|return
literal|false
return|;
case|case
literal|1
case|:
comment|// (, line 51
comment|// delete, line 51
name|slice_del
argument_list|()
expr_stmt|;
break|break;
case|case
literal|2
case|:
comment|// (, line 52
comment|// call R1, line 52
if|if
condition|(
operator|!
name|r_R1
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// not, line 52
block|{
name|v_1
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
name|lab0
label|:
do|do
block|{
comment|// (, line 52
comment|// literal, line 52
if|if
condition|(
operator|!
operator|(
name|eq_s_b
argument_list|(
literal|1
argument_list|,
literal|"t"
argument_list|)
operator|)
condition|)
block|{
break|break
name|lab0
break|;
block|}
comment|// call R1, line 52
if|if
condition|(
operator|!
name|r_R1
argument_list|()
condition|)
block|{
break|break
name|lab0
break|;
block|}
return|return
literal|false
return|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|limit
operator|-
name|v_1
expr_stmt|;
block|}
comment|// call C, line 52
if|if
condition|(
operator|!
name|r_C
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// delete, line 52
name|slice_del
argument_list|()
expr_stmt|;
break|break;
case|case
literal|3
case|:
comment|// (, line 53
comment|// call R1, line 53
if|if
condition|(
operator|!
name|r_R1
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|//<-, line 53
name|slice_from
argument_list|(
literal|"ie"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|4
case|:
comment|// (, line 55
comment|// or, line 55
name|lab1
label|:
do|do
block|{
name|v_2
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
name|lab2
label|:
do|do
block|{
comment|// (, line 55
comment|// literal, line 55
if|if
condition|(
operator|!
operator|(
name|eq_s_b
argument_list|(
literal|2
argument_list|,
literal|"ar"
argument_list|)
operator|)
condition|)
block|{
break|break
name|lab2
break|;
block|}
comment|// call R1, line 55
if|if
condition|(
operator|!
name|r_R1
argument_list|()
condition|)
block|{
break|break
name|lab2
break|;
block|}
comment|// call C, line 55
if|if
condition|(
operator|!
name|r_C
argument_list|()
condition|)
block|{
break|break
name|lab2
break|;
block|}
comment|// ], line 55
name|bra
operator|=
name|cursor
expr_stmt|;
comment|// delete, line 55
name|slice_del
argument_list|()
expr_stmt|;
comment|// call lengthen_V, line 55
if|if
condition|(
operator|!
name|r_lengthen_V
argument_list|()
condition|)
block|{
break|break
name|lab2
break|;
block|}
break|break
name|lab1
break|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|limit
operator|-
name|v_2
expr_stmt|;
name|lab3
label|:
do|do
block|{
comment|// (, line 56
comment|// literal, line 56
if|if
condition|(
operator|!
operator|(
name|eq_s_b
argument_list|(
literal|2
argument_list|,
literal|"er"
argument_list|)
operator|)
condition|)
block|{
break|break
name|lab3
break|;
block|}
comment|// call R1, line 56
if|if
condition|(
operator|!
name|r_R1
argument_list|()
condition|)
block|{
break|break
name|lab3
break|;
block|}
comment|// call C, line 56
if|if
condition|(
operator|!
name|r_C
argument_list|()
condition|)
block|{
break|break
name|lab3
break|;
block|}
comment|// ], line 56
name|bra
operator|=
name|cursor
expr_stmt|;
comment|// delete, line 56
name|slice_del
argument_list|()
expr_stmt|;
break|break
name|lab1
break|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|limit
operator|-
name|v_2
expr_stmt|;
comment|// (, line 57
comment|// call R1, line 57
if|if
condition|(
operator|!
name|r_R1
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// call C, line 57
if|if
condition|(
operator|!
name|r_C
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|//<-, line 57
name|slice_from
argument_list|(
literal|"e"
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
break|break;
case|case
literal|5
case|:
comment|// (, line 59
comment|// call R1, line 59
if|if
condition|(
operator|!
name|r_R1
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// call V, line 59
if|if
condition|(
operator|!
name|r_V
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|//<-, line 59
name|slice_from
argument_list|(
literal|"au"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|6
case|:
comment|// (, line 60
comment|// or, line 60
name|lab4
label|:
do|do
block|{
name|v_3
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
name|lab5
label|:
do|do
block|{
comment|// (, line 60
comment|// literal, line 60
if|if
condition|(
operator|!
operator|(
name|eq_s_b
argument_list|(
literal|3
argument_list|,
literal|"hed"
argument_list|)
operator|)
condition|)
block|{
break|break
name|lab5
break|;
block|}
comment|// call R1, line 60
if|if
condition|(
operator|!
name|r_R1
argument_list|()
condition|)
block|{
break|break
name|lab5
break|;
block|}
comment|// ], line 60
name|bra
operator|=
name|cursor
expr_stmt|;
comment|//<-, line 60
name|slice_from
argument_list|(
literal|"heid"
argument_list|)
expr_stmt|;
break|break
name|lab4
break|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|limit
operator|-
name|v_3
expr_stmt|;
name|lab6
label|:
do|do
block|{
comment|// (, line 61
comment|// literal, line 61
if|if
condition|(
operator|!
operator|(
name|eq_s_b
argument_list|(
literal|2
argument_list|,
literal|"nd"
argument_list|)
operator|)
condition|)
block|{
break|break
name|lab6
break|;
block|}
comment|// delete, line 61
name|slice_del
argument_list|()
expr_stmt|;
break|break
name|lab4
break|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|limit
operator|-
name|v_3
expr_stmt|;
name|lab7
label|:
do|do
block|{
comment|// (, line 62
comment|// literal, line 62
if|if
condition|(
operator|!
operator|(
name|eq_s_b
argument_list|(
literal|1
argument_list|,
literal|"d"
argument_list|)
operator|)
condition|)
block|{
break|break
name|lab7
break|;
block|}
comment|// call R1, line 62
if|if
condition|(
operator|!
name|r_R1
argument_list|()
condition|)
block|{
break|break
name|lab7
break|;
block|}
comment|// call C, line 62
if|if
condition|(
operator|!
name|r_C
argument_list|()
condition|)
block|{
break|break
name|lab7
break|;
block|}
comment|// ], line 62
name|bra
operator|=
name|cursor
expr_stmt|;
comment|// delete, line 62
name|slice_del
argument_list|()
expr_stmt|;
break|break
name|lab4
break|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|limit
operator|-
name|v_3
expr_stmt|;
name|lab8
label|:
do|do
block|{
comment|// (, line 63
comment|// or, line 63
name|lab9
label|:
do|do
block|{
name|v_4
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
name|lab10
label|:
do|do
block|{
comment|// literal, line 63
if|if
condition|(
operator|!
operator|(
name|eq_s_b
argument_list|(
literal|1
argument_list|,
literal|"i"
argument_list|)
operator|)
condition|)
block|{
break|break
name|lab10
break|;
block|}
break|break
name|lab9
break|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|limit
operator|-
name|v_4
expr_stmt|;
comment|// literal, line 63
if|if
condition|(
operator|!
operator|(
name|eq_s_b
argument_list|(
literal|1
argument_list|,
literal|"j"
argument_list|)
operator|)
condition|)
block|{
break|break
name|lab8
break|;
block|}
block|}
do|while
condition|(
literal|false
condition|)
do|;
comment|// call V, line 63
if|if
condition|(
operator|!
name|r_V
argument_list|()
condition|)
block|{
break|break
name|lab8
break|;
block|}
comment|// delete, line 63
name|slice_del
argument_list|()
expr_stmt|;
break|break
name|lab4
break|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|limit
operator|-
name|v_3
expr_stmt|;
comment|// (, line 64
comment|// call R1, line 64
if|if
condition|(
operator|!
name|r_R1
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// call C, line 64
if|if
condition|(
operator|!
name|r_C
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// delete, line 64
name|slice_del
argument_list|()
expr_stmt|;
comment|// call lengthen_V, line 64
if|if
condition|(
operator|!
name|r_lengthen_V
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
do|while
condition|(
literal|false
condition|)
do|;
break|break;
case|case
literal|7
case|:
comment|// (, line 65
comment|//<-, line 65
name|slice_from
argument_list|(
literal|"nd"
argument_list|)
expr_stmt|;
break|break;
block|}
return|return
literal|true
return|;
block|}
DECL|method|r_Step_2
specifier|private
name|boolean
name|r_Step_2
parameter_list|()
block|{
name|int
name|among_var
decl_stmt|;
name|int
name|v_1
decl_stmt|;
comment|// (, line 70
comment|// [, line 71
name|ket
operator|=
name|cursor
expr_stmt|;
comment|// among, line 71
name|among_var
operator|=
name|find_among_b
argument_list|(
name|a_1
argument_list|,
literal|11
argument_list|)
expr_stmt|;
if|if
condition|(
name|among_var
operator|==
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// (, line 71
comment|// ], line 71
name|bra
operator|=
name|cursor
expr_stmt|;
switch|switch
condition|(
name|among_var
condition|)
block|{
case|case
literal|0
case|:
return|return
literal|false
return|;
case|case
literal|1
case|:
comment|// (, line 72
comment|// or, line 72
name|lab0
label|:
do|do
block|{
name|v_1
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
name|lab1
label|:
do|do
block|{
comment|// (, line 72
comment|// literal, line 72
if|if
condition|(
operator|!
operator|(
name|eq_s_b
argument_list|(
literal|2
argument_list|,
literal|"'t"
argument_list|)
operator|)
condition|)
block|{
break|break
name|lab1
break|;
block|}
comment|// ], line 72
name|bra
operator|=
name|cursor
expr_stmt|;
comment|// delete, line 72
name|slice_del
argument_list|()
expr_stmt|;
break|break
name|lab0
break|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|limit
operator|-
name|v_1
expr_stmt|;
name|lab2
label|:
do|do
block|{
comment|// (, line 73
comment|// literal, line 73
if|if
condition|(
operator|!
operator|(
name|eq_s_b
argument_list|(
literal|2
argument_list|,
literal|"et"
argument_list|)
operator|)
condition|)
block|{
break|break
name|lab2
break|;
block|}
comment|// ], line 73
name|bra
operator|=
name|cursor
expr_stmt|;
comment|// call R1, line 73
if|if
condition|(
operator|!
name|r_R1
argument_list|()
condition|)
block|{
break|break
name|lab2
break|;
block|}
comment|// call C, line 73
if|if
condition|(
operator|!
name|r_C
argument_list|()
condition|)
block|{
break|break
name|lab2
break|;
block|}
comment|// delete, line 73
name|slice_del
argument_list|()
expr_stmt|;
break|break
name|lab0
break|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|limit
operator|-
name|v_1
expr_stmt|;
name|lab3
label|:
do|do
block|{
comment|// (, line 74
comment|// literal, line 74
if|if
condition|(
operator|!
operator|(
name|eq_s_b
argument_list|(
literal|3
argument_list|,
literal|"rnt"
argument_list|)
operator|)
condition|)
block|{
break|break
name|lab3
break|;
block|}
comment|// ], line 74
name|bra
operator|=
name|cursor
expr_stmt|;
comment|//<-, line 74
name|slice_from
argument_list|(
literal|"rn"
argument_list|)
expr_stmt|;
break|break
name|lab0
break|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|limit
operator|-
name|v_1
expr_stmt|;
name|lab4
label|:
do|do
block|{
comment|// (, line 75
comment|// literal, line 75
if|if
condition|(
operator|!
operator|(
name|eq_s_b
argument_list|(
literal|1
argument_list|,
literal|"t"
argument_list|)
operator|)
condition|)
block|{
break|break
name|lab4
break|;
block|}
comment|// ], line 75
name|bra
operator|=
name|cursor
expr_stmt|;
comment|// call R1, line 75
if|if
condition|(
operator|!
name|r_R1
argument_list|()
condition|)
block|{
break|break
name|lab4
break|;
block|}
comment|// call VX, line 75
if|if
condition|(
operator|!
name|r_VX
argument_list|()
condition|)
block|{
break|break
name|lab4
break|;
block|}
comment|// delete, line 75
name|slice_del
argument_list|()
expr_stmt|;
break|break
name|lab0
break|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|limit
operator|-
name|v_1
expr_stmt|;
name|lab5
label|:
do|do
block|{
comment|// (, line 76
comment|// literal, line 76
if|if
condition|(
operator|!
operator|(
name|eq_s_b
argument_list|(
literal|3
argument_list|,
literal|"ink"
argument_list|)
operator|)
condition|)
block|{
break|break
name|lab5
break|;
block|}
comment|// ], line 76
name|bra
operator|=
name|cursor
expr_stmt|;
comment|//<-, line 76
name|slice_from
argument_list|(
literal|"ing"
argument_list|)
expr_stmt|;
break|break
name|lab0
break|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|limit
operator|-
name|v_1
expr_stmt|;
name|lab6
label|:
do|do
block|{
comment|// (, line 77
comment|// literal, line 77
if|if
condition|(
operator|!
operator|(
name|eq_s_b
argument_list|(
literal|2
argument_list|,
literal|"mp"
argument_list|)
operator|)
condition|)
block|{
break|break
name|lab6
break|;
block|}
comment|// ], line 77
name|bra
operator|=
name|cursor
expr_stmt|;
comment|//<-, line 77
name|slice_from
argument_list|(
literal|"m"
argument_list|)
expr_stmt|;
break|break
name|lab0
break|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|limit
operator|-
name|v_1
expr_stmt|;
name|lab7
label|:
do|do
block|{
comment|// (, line 78
comment|// literal, line 78
if|if
condition|(
operator|!
operator|(
name|eq_s_b
argument_list|(
literal|1
argument_list|,
literal|"'"
argument_list|)
operator|)
condition|)
block|{
break|break
name|lab7
break|;
block|}
comment|// ], line 78
name|bra
operator|=
name|cursor
expr_stmt|;
comment|// call R1, line 78
if|if
condition|(
operator|!
name|r_R1
argument_list|()
condition|)
block|{
break|break
name|lab7
break|;
block|}
comment|// delete, line 78
name|slice_del
argument_list|()
expr_stmt|;
break|break
name|lab0
break|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|limit
operator|-
name|v_1
expr_stmt|;
comment|// (, line 79
comment|// ], line 79
name|bra
operator|=
name|cursor
expr_stmt|;
comment|// call R1, line 79
if|if
condition|(
operator|!
name|r_R1
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// call C, line 79
if|if
condition|(
operator|!
name|r_C
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// delete, line 79
name|slice_del
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
break|break;
case|case
literal|2
case|:
comment|// (, line 80
comment|// call R1, line 80
if|if
condition|(
operator|!
name|r_R1
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|//<-, line 80
name|slice_from
argument_list|(
literal|"g"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|3
case|:
comment|// (, line 81
comment|// call R1, line 81
if|if
condition|(
operator|!
name|r_R1
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|//<-, line 81
name|slice_from
argument_list|(
literal|"lijk"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|4
case|:
comment|// (, line 82
comment|// call R1, line 82
if|if
condition|(
operator|!
name|r_R1
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|//<-, line 82
name|slice_from
argument_list|(
literal|"isch"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|5
case|:
comment|// (, line 83
comment|// call R1, line 83
if|if
condition|(
operator|!
name|r_R1
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// call C, line 83
if|if
condition|(
operator|!
name|r_C
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// delete, line 83
name|slice_del
argument_list|()
expr_stmt|;
break|break;
case|case
literal|6
case|:
comment|// (, line 84
comment|// call R1, line 84
if|if
condition|(
operator|!
name|r_R1
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|//<-, line 84
name|slice_from
argument_list|(
literal|"t"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|7
case|:
comment|// (, line 85
comment|// call R1, line 85
if|if
condition|(
operator|!
name|r_R1
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|//<-, line 85
name|slice_from
argument_list|(
literal|"s"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|8
case|:
comment|// (, line 86
comment|// call R1, line 86
if|if
condition|(
operator|!
name|r_R1
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|//<-, line 86
name|slice_from
argument_list|(
literal|"r"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|9
case|:
comment|// (, line 87
comment|// call R1, line 87
if|if
condition|(
operator|!
name|r_R1
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// delete, line 87
name|slice_del
argument_list|()
expr_stmt|;
comment|// attach, line 87
name|insert
argument_list|(
name|cursor
argument_list|,
name|cursor
argument_list|,
literal|"l"
argument_list|)
expr_stmt|;
comment|// call lengthen_V, line 87
if|if
condition|(
operator|!
name|r_lengthen_V
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
break|break;
case|case
literal|10
case|:
comment|// (, line 88
comment|// call R1, line 88
if|if
condition|(
operator|!
name|r_R1
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// call C, line 88
if|if
condition|(
operator|!
name|r_C
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// delete, line 88
name|slice_del
argument_list|()
expr_stmt|;
comment|// attach, line 88
name|insert
argument_list|(
name|cursor
argument_list|,
name|cursor
argument_list|,
literal|"en"
argument_list|)
expr_stmt|;
comment|// call lengthen_V, line 88
if|if
condition|(
operator|!
name|r_lengthen_V
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
break|break;
case|case
literal|11
case|:
comment|// (, line 89
comment|// call R1, line 89
if|if
condition|(
operator|!
name|r_R1
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// call C, line 89
if|if
condition|(
operator|!
name|r_C
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|//<-, line 89
name|slice_from
argument_list|(
literal|"ief"
argument_list|)
expr_stmt|;
break|break;
block|}
return|return
literal|true
return|;
block|}
DECL|method|r_Step_3
specifier|private
name|boolean
name|r_Step_3
parameter_list|()
block|{
name|int
name|among_var
decl_stmt|;
comment|// (, line 94
comment|// [, line 95
name|ket
operator|=
name|cursor
expr_stmt|;
comment|// among, line 95
name|among_var
operator|=
name|find_among_b
argument_list|(
name|a_2
argument_list|,
literal|14
argument_list|)
expr_stmt|;
if|if
condition|(
name|among_var
operator|==
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// (, line 95
comment|// ], line 95
name|bra
operator|=
name|cursor
expr_stmt|;
switch|switch
condition|(
name|among_var
condition|)
block|{
case|case
literal|0
case|:
return|return
literal|false
return|;
case|case
literal|1
case|:
comment|// (, line 96
comment|// call R1, line 96
if|if
condition|(
operator|!
name|r_R1
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|//<-, line 96
name|slice_from
argument_list|(
literal|"eer"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|2
case|:
comment|// (, line 97
comment|// call R1, line 97
if|if
condition|(
operator|!
name|r_R1
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// delete, line 97
name|slice_del
argument_list|()
expr_stmt|;
comment|// call lengthen_V, line 97
if|if
condition|(
operator|!
name|r_lengthen_V
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
break|break;
case|case
literal|3
case|:
comment|// (, line 100
comment|// call R1, line 100
if|if
condition|(
operator|!
name|r_R1
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// delete, line 100
name|slice_del
argument_list|()
expr_stmt|;
break|break;
case|case
literal|4
case|:
comment|// (, line 101
comment|//<-, line 101
name|slice_from
argument_list|(
literal|"r"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|5
case|:
comment|// (, line 104
comment|// call R1, line 104
if|if
condition|(
operator|!
name|r_R1
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// delete, line 104
name|slice_del
argument_list|()
expr_stmt|;
comment|// call lengthen_V, line 104
if|if
condition|(
operator|!
name|r_lengthen_V
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
break|break;
case|case
literal|6
case|:
comment|// (, line 105
comment|// call R1, line 105
if|if
condition|(
operator|!
name|r_R1
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// call C, line 105
if|if
condition|(
operator|!
name|r_C
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|//<-, line 105
name|slice_from
argument_list|(
literal|"aar"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|7
case|:
comment|// (, line 106
comment|// call R2, line 106
if|if
condition|(
operator|!
name|r_R2
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// delete, line 106
name|slice_del
argument_list|()
expr_stmt|;
comment|// attach, line 106
name|insert
argument_list|(
name|cursor
argument_list|,
name|cursor
argument_list|,
literal|"f"
argument_list|)
expr_stmt|;
comment|// call lengthen_V, line 106
if|if
condition|(
operator|!
name|r_lengthen_V
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
break|break;
case|case
literal|8
case|:
comment|// (, line 107
comment|// call R2, line 107
if|if
condition|(
operator|!
name|r_R2
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// delete, line 107
name|slice_del
argument_list|()
expr_stmt|;
comment|// attach, line 107
name|insert
argument_list|(
name|cursor
argument_list|,
name|cursor
argument_list|,
literal|"g"
argument_list|)
expr_stmt|;
comment|// call lengthen_V, line 107
if|if
condition|(
operator|!
name|r_lengthen_V
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
break|break;
case|case
literal|9
case|:
comment|// (, line 108
comment|// call R1, line 108
if|if
condition|(
operator|!
name|r_R1
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// call C, line 108
if|if
condition|(
operator|!
name|r_C
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|//<-, line 108
name|slice_from
argument_list|(
literal|"t"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|10
case|:
comment|// (, line 109
comment|// call R1, line 109
if|if
condition|(
operator|!
name|r_R1
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// call C, line 109
if|if
condition|(
operator|!
name|r_C
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|//<-, line 109
name|slice_from
argument_list|(
literal|"d"
argument_list|)
expr_stmt|;
break|break;
block|}
return|return
literal|true
return|;
block|}
DECL|method|r_Step_4
specifier|private
name|boolean
name|r_Step_4
parameter_list|()
block|{
name|int
name|among_var
decl_stmt|;
name|int
name|v_1
decl_stmt|;
comment|// (, line 114
comment|// or, line 134
name|lab0
label|:
do|do
block|{
name|v_1
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
name|lab1
label|:
do|do
block|{
comment|// (, line 115
comment|// [, line 115
name|ket
operator|=
name|cursor
expr_stmt|;
comment|// among, line 115
name|among_var
operator|=
name|find_among_b
argument_list|(
name|a_3
argument_list|,
literal|16
argument_list|)
expr_stmt|;
if|if
condition|(
name|among_var
operator|==
literal|0
condition|)
block|{
break|break
name|lab1
break|;
block|}
comment|// (, line 115
comment|// ], line 115
name|bra
operator|=
name|cursor
expr_stmt|;
switch|switch
condition|(
name|among_var
condition|)
block|{
case|case
literal|0
case|:
break|break
name|lab1
break|;
case|case
literal|1
case|:
comment|// (, line 116
comment|// call R1, line 116
if|if
condition|(
operator|!
name|r_R1
argument_list|()
condition|)
block|{
break|break
name|lab1
break|;
block|}
comment|//<-, line 116
name|slice_from
argument_list|(
literal|"ie"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|2
case|:
comment|// (, line 117
comment|// call R1, line 117
if|if
condition|(
operator|!
name|r_R1
argument_list|()
condition|)
block|{
break|break
name|lab1
break|;
block|}
comment|//<-, line 117
name|slice_from
argument_list|(
literal|"eer"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|3
case|:
comment|// (, line 118
comment|// call R1, line 118
if|if
condition|(
operator|!
name|r_R1
argument_list|()
condition|)
block|{
break|break
name|lab1
break|;
block|}
comment|// delete, line 118
name|slice_del
argument_list|()
expr_stmt|;
break|break;
case|case
literal|4
case|:
comment|// (, line 119
comment|// call R1, line 119
if|if
condition|(
operator|!
name|r_R1
argument_list|()
condition|)
block|{
break|break
name|lab1
break|;
block|}
comment|// call V, line 119
if|if
condition|(
operator|!
name|r_V
argument_list|()
condition|)
block|{
break|break
name|lab1
break|;
block|}
comment|//<-, line 119
name|slice_from
argument_list|(
literal|"n"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|5
case|:
comment|// (, line 120
comment|// call R1, line 120
if|if
condition|(
operator|!
name|r_R1
argument_list|()
condition|)
block|{
break|break
name|lab1
break|;
block|}
comment|// call V, line 120
if|if
condition|(
operator|!
name|r_V
argument_list|()
condition|)
block|{
break|break
name|lab1
break|;
block|}
comment|//<-, line 120
name|slice_from
argument_list|(
literal|"l"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|6
case|:
comment|// (, line 121
comment|// call R1, line 121
if|if
condition|(
operator|!
name|r_R1
argument_list|()
condition|)
block|{
break|break
name|lab1
break|;
block|}
comment|// call V, line 121
if|if
condition|(
operator|!
name|r_V
argument_list|()
condition|)
block|{
break|break
name|lab1
break|;
block|}
comment|//<-, line 121
name|slice_from
argument_list|(
literal|"r"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|7
case|:
comment|// (, line 122
comment|// call R1, line 122
if|if
condition|(
operator|!
name|r_R1
argument_list|()
condition|)
block|{
break|break
name|lab1
break|;
block|}
comment|//<-, line 122
name|slice_from
argument_list|(
literal|"teer"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|8
case|:
comment|// (, line 124
comment|// call R1, line 124
if|if
condition|(
operator|!
name|r_R1
argument_list|()
condition|)
block|{
break|break
name|lab1
break|;
block|}
comment|//<-, line 124
name|slice_from
argument_list|(
literal|"lijk"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|9
case|:
comment|// (, line 127
comment|// call R1, line 127
if|if
condition|(
operator|!
name|r_R1
argument_list|()
condition|)
block|{
break|break
name|lab1
break|;
block|}
comment|// delete, line 127
name|slice_del
argument_list|()
expr_stmt|;
break|break;
case|case
literal|10
case|:
comment|// (, line 131
comment|// call R1, line 131
if|if
condition|(
operator|!
name|r_R1
argument_list|()
condition|)
block|{
break|break
name|lab1
break|;
block|}
comment|// call C, line 131
if|if
condition|(
operator|!
name|r_C
argument_list|()
condition|)
block|{
break|break
name|lab1
break|;
block|}
comment|// delete, line 131
name|slice_del
argument_list|()
expr_stmt|;
comment|// call lengthen_V, line 131
if|if
condition|(
operator|!
name|r_lengthen_V
argument_list|()
condition|)
block|{
break|break
name|lab1
break|;
block|}
break|break;
block|}
break|break
name|lab0
break|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|limit
operator|-
name|v_1
expr_stmt|;
comment|// (, line 135
comment|// [, line 135
name|ket
operator|=
name|cursor
expr_stmt|;
comment|// among, line 135
name|among_var
operator|=
name|find_among_b
argument_list|(
name|a_4
argument_list|,
literal|3
argument_list|)
expr_stmt|;
if|if
condition|(
name|among_var
operator|==
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// (, line 135
comment|// ], line 135
name|bra
operator|=
name|cursor
expr_stmt|;
switch|switch
condition|(
name|among_var
condition|)
block|{
case|case
literal|0
case|:
return|return
literal|false
return|;
case|case
literal|1
case|:
comment|// (, line 138
comment|// call R1, line 138
if|if
condition|(
operator|!
name|r_R1
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// call C, line 138
if|if
condition|(
operator|!
name|r_C
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// delete, line 138
name|slice_del
argument_list|()
expr_stmt|;
comment|// call lengthen_V, line 138
if|if
condition|(
operator|!
name|r_lengthen_V
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
break|break;
block|}
block|}
do|while
condition|(
literal|false
condition|)
do|;
return|return
literal|true
return|;
block|}
DECL|method|r_Step_7
specifier|private
name|boolean
name|r_Step_7
parameter_list|()
block|{
name|int
name|among_var
decl_stmt|;
comment|// (, line 144
comment|// [, line 145
name|ket
operator|=
name|cursor
expr_stmt|;
comment|// among, line 145
name|among_var
operator|=
name|find_among_b
argument_list|(
name|a_5
argument_list|,
literal|3
argument_list|)
expr_stmt|;
if|if
condition|(
name|among_var
operator|==
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// (, line 145
comment|// ], line 145
name|bra
operator|=
name|cursor
expr_stmt|;
switch|switch
condition|(
name|among_var
condition|)
block|{
case|case
literal|0
case|:
return|return
literal|false
return|;
case|case
literal|1
case|:
comment|// (, line 146
comment|//<-, line 146
name|slice_from
argument_list|(
literal|"k"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|2
case|:
comment|// (, line 147
comment|//<-, line 147
name|slice_from
argument_list|(
literal|"f"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|3
case|:
comment|// (, line 148
comment|//<-, line 148
name|slice_from
argument_list|(
literal|"p"
argument_list|)
expr_stmt|;
break|break;
block|}
return|return
literal|true
return|;
block|}
DECL|method|r_Step_6
specifier|private
name|boolean
name|r_Step_6
parameter_list|()
block|{
name|int
name|among_var
decl_stmt|;
comment|// (, line 153
comment|// [, line 154
name|ket
operator|=
name|cursor
expr_stmt|;
comment|// among, line 154
name|among_var
operator|=
name|find_among_b
argument_list|(
name|a_6
argument_list|,
literal|22
argument_list|)
expr_stmt|;
if|if
condition|(
name|among_var
operator|==
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// (, line 154
comment|// ], line 154
name|bra
operator|=
name|cursor
expr_stmt|;
switch|switch
condition|(
name|among_var
condition|)
block|{
case|case
literal|0
case|:
return|return
literal|false
return|;
case|case
literal|1
case|:
comment|// (, line 155
comment|//<-, line 155
name|slice_from
argument_list|(
literal|"b"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|2
case|:
comment|// (, line 156
comment|//<-, line 156
name|slice_from
argument_list|(
literal|"c"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|3
case|:
comment|// (, line 157
comment|//<-, line 157
name|slice_from
argument_list|(
literal|"d"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|4
case|:
comment|// (, line 158
comment|//<-, line 158
name|slice_from
argument_list|(
literal|"f"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|5
case|:
comment|// (, line 159
comment|//<-, line 159
name|slice_from
argument_list|(
literal|"g"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|6
case|:
comment|// (, line 160
comment|//<-, line 160
name|slice_from
argument_list|(
literal|"h"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|7
case|:
comment|// (, line 161
comment|//<-, line 161
name|slice_from
argument_list|(
literal|"j"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|8
case|:
comment|// (, line 162
comment|//<-, line 162
name|slice_from
argument_list|(
literal|"k"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|9
case|:
comment|// (, line 163
comment|//<-, line 163
name|slice_from
argument_list|(
literal|"l"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|10
case|:
comment|// (, line 164
comment|//<-, line 164
name|slice_from
argument_list|(
literal|"m"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|11
case|:
comment|// (, line 165
comment|//<-, line 165
name|slice_from
argument_list|(
literal|"n"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|12
case|:
comment|// (, line 166
comment|//<-, line 166
name|slice_from
argument_list|(
literal|"p"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|13
case|:
comment|// (, line 167
comment|//<-, line 167
name|slice_from
argument_list|(
literal|"q"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|14
case|:
comment|// (, line 168
comment|//<-, line 168
name|slice_from
argument_list|(
literal|"r"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|15
case|:
comment|// (, line 169
comment|//<-, line 169
name|slice_from
argument_list|(
literal|"s"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|16
case|:
comment|// (, line 170
comment|//<-, line 170
name|slice_from
argument_list|(
literal|"t"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|17
case|:
comment|// (, line 171
comment|//<-, line 171
name|slice_from
argument_list|(
literal|"v"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|18
case|:
comment|// (, line 172
comment|//<-, line 172
name|slice_from
argument_list|(
literal|"w"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|19
case|:
comment|// (, line 173
comment|//<-, line 173
name|slice_from
argument_list|(
literal|"x"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|20
case|:
comment|// (, line 174
comment|//<-, line 174
name|slice_from
argument_list|(
literal|"z"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|21
case|:
comment|// (, line 175
comment|//<-, line 175
name|slice_from
argument_list|(
literal|"f"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|22
case|:
comment|// (, line 176
comment|//<-, line 176
name|slice_from
argument_list|(
literal|"s"
argument_list|)
expr_stmt|;
break|break;
block|}
return|return
literal|true
return|;
block|}
DECL|method|r_Step_1c
specifier|private
name|boolean
name|r_Step_1c
parameter_list|()
block|{
name|int
name|among_var
decl_stmt|;
name|int
name|v_1
decl_stmt|;
name|int
name|v_2
decl_stmt|;
comment|// (, line 181
comment|// [, line 182
name|ket
operator|=
name|cursor
expr_stmt|;
comment|// among, line 182
name|among_var
operator|=
name|find_among_b
argument_list|(
name|a_7
argument_list|,
literal|2
argument_list|)
expr_stmt|;
if|if
condition|(
name|among_var
operator|==
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// (, line 182
comment|// ], line 182
name|bra
operator|=
name|cursor
expr_stmt|;
comment|// call R1, line 182
if|if
condition|(
operator|!
name|r_R1
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// call C, line 182
if|if
condition|(
operator|!
name|r_C
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
switch|switch
condition|(
name|among_var
condition|)
block|{
case|case
literal|0
case|:
return|return
literal|false
return|;
case|case
literal|1
case|:
comment|// (, line 183
comment|// not, line 183
block|{
name|v_1
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
name|lab0
label|:
do|do
block|{
comment|// (, line 183
comment|// literal, line 183
if|if
condition|(
operator|!
operator|(
name|eq_s_b
argument_list|(
literal|1
argument_list|,
literal|"n"
argument_list|)
operator|)
condition|)
block|{
break|break
name|lab0
break|;
block|}
comment|// call R1, line 183
if|if
condition|(
operator|!
name|r_R1
argument_list|()
condition|)
block|{
break|break
name|lab0
break|;
block|}
return|return
literal|false
return|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|limit
operator|-
name|v_1
expr_stmt|;
block|}
comment|// delete, line 183
name|slice_del
argument_list|()
expr_stmt|;
break|break;
case|case
literal|2
case|:
comment|// (, line 184
comment|// not, line 184
block|{
name|v_2
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
name|lab1
label|:
do|do
block|{
comment|// (, line 184
comment|// literal, line 184
if|if
condition|(
operator|!
operator|(
name|eq_s_b
argument_list|(
literal|1
argument_list|,
literal|"h"
argument_list|)
operator|)
condition|)
block|{
break|break
name|lab1
break|;
block|}
comment|// call R1, line 184
if|if
condition|(
operator|!
name|r_R1
argument_list|()
condition|)
block|{
break|break
name|lab1
break|;
block|}
return|return
literal|false
return|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|limit
operator|-
name|v_2
expr_stmt|;
block|}
comment|// delete, line 184
name|slice_del
argument_list|()
expr_stmt|;
break|break;
block|}
return|return
literal|true
return|;
block|}
DECL|method|r_Lose_prefix
specifier|private
name|boolean
name|r_Lose_prefix
parameter_list|()
block|{
name|int
name|v_1
decl_stmt|;
name|int
name|v_2
decl_stmt|;
name|int
name|v_3
decl_stmt|;
comment|// (, line 189
comment|// [, line 190
name|bra
operator|=
name|cursor
expr_stmt|;
comment|// literal, line 190
if|if
condition|(
operator|!
operator|(
name|eq_s
argument_list|(
literal|2
argument_list|,
literal|"ge"
argument_list|)
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// ], line 190
name|ket
operator|=
name|cursor
expr_stmt|;
comment|// test, line 190
name|v_1
operator|=
name|cursor
expr_stmt|;
comment|// hop, line 190
block|{
name|int
name|c
init|=
name|cursor
operator|+
literal|3
decl_stmt|;
if|if
condition|(
literal|0
operator|>
name|c
operator|||
name|c
operator|>
name|limit
condition|)
block|{
return|return
literal|false
return|;
block|}
name|cursor
operator|=
name|c
expr_stmt|;
block|}
name|cursor
operator|=
name|v_1
expr_stmt|;
comment|// (, line 190
comment|// goto, line 190
name|golab0
label|:
while|while
condition|(
literal|true
condition|)
block|{
name|v_2
operator|=
name|cursor
expr_stmt|;
name|lab1
label|:
do|do
block|{
if|if
condition|(
operator|!
operator|(
name|in_grouping
argument_list|(
name|g_v
argument_list|,
literal|97
argument_list|,
literal|121
argument_list|)
operator|)
condition|)
block|{
break|break
name|lab1
break|;
block|}
name|cursor
operator|=
name|v_2
expr_stmt|;
break|break
name|golab0
break|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|v_2
expr_stmt|;
if|if
condition|(
name|cursor
operator|>=
name|limit
condition|)
block|{
return|return
literal|false
return|;
block|}
name|cursor
operator|++
expr_stmt|;
block|}
comment|// goto, line 190
name|golab2
label|:
while|while
condition|(
literal|true
condition|)
block|{
name|v_3
operator|=
name|cursor
expr_stmt|;
name|lab3
label|:
do|do
block|{
if|if
condition|(
operator|!
operator|(
name|out_grouping
argument_list|(
name|g_v
argument_list|,
literal|97
argument_list|,
literal|121
argument_list|)
operator|)
condition|)
block|{
break|break
name|lab3
break|;
block|}
name|cursor
operator|=
name|v_3
expr_stmt|;
break|break
name|golab2
break|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|v_3
expr_stmt|;
if|if
condition|(
name|cursor
operator|>=
name|limit
condition|)
block|{
return|return
literal|false
return|;
block|}
name|cursor
operator|++
expr_stmt|;
block|}
comment|// set GE_removed, line 191
name|B_GE_removed
operator|=
literal|true
expr_stmt|;
comment|// delete, line 192
name|slice_del
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
DECL|method|r_Lose_infix
specifier|private
name|boolean
name|r_Lose_infix
parameter_list|()
block|{
name|int
name|v_2
decl_stmt|;
name|int
name|v_3
decl_stmt|;
name|int
name|v_4
decl_stmt|;
comment|// (, line 195
comment|// next, line 196
if|if
condition|(
name|cursor
operator|>=
name|limit
condition|)
block|{
return|return
literal|false
return|;
block|}
name|cursor
operator|++
expr_stmt|;
comment|// gopast, line 197
name|golab0
label|:
while|while
condition|(
literal|true
condition|)
block|{
name|lab1
label|:
do|do
block|{
comment|// (, line 197
comment|// [, line 197
name|bra
operator|=
name|cursor
expr_stmt|;
comment|// literal, line 197
if|if
condition|(
operator|!
operator|(
name|eq_s
argument_list|(
literal|2
argument_list|,
literal|"ge"
argument_list|)
operator|)
condition|)
block|{
break|break
name|lab1
break|;
block|}
comment|// ], line 197
name|ket
operator|=
name|cursor
expr_stmt|;
break|break
name|golab0
break|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
if|if
condition|(
name|cursor
operator|>=
name|limit
condition|)
block|{
return|return
literal|false
return|;
block|}
name|cursor
operator|++
expr_stmt|;
block|}
comment|// test, line 197
name|v_2
operator|=
name|cursor
expr_stmt|;
comment|// hop, line 197
block|{
name|int
name|c
init|=
name|cursor
operator|+
literal|3
decl_stmt|;
if|if
condition|(
literal|0
operator|>
name|c
operator|||
name|c
operator|>
name|limit
condition|)
block|{
return|return
literal|false
return|;
block|}
name|cursor
operator|=
name|c
expr_stmt|;
block|}
name|cursor
operator|=
name|v_2
expr_stmt|;
comment|// (, line 197
comment|// goto, line 197
name|golab2
label|:
while|while
condition|(
literal|true
condition|)
block|{
name|v_3
operator|=
name|cursor
expr_stmt|;
name|lab3
label|:
do|do
block|{
if|if
condition|(
operator|!
operator|(
name|in_grouping
argument_list|(
name|g_v
argument_list|,
literal|97
argument_list|,
literal|121
argument_list|)
operator|)
condition|)
block|{
break|break
name|lab3
break|;
block|}
name|cursor
operator|=
name|v_3
expr_stmt|;
break|break
name|golab2
break|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|v_3
expr_stmt|;
if|if
condition|(
name|cursor
operator|>=
name|limit
condition|)
block|{
return|return
literal|false
return|;
block|}
name|cursor
operator|++
expr_stmt|;
block|}
comment|// goto, line 197
name|golab4
label|:
while|while
condition|(
literal|true
condition|)
block|{
name|v_4
operator|=
name|cursor
expr_stmt|;
name|lab5
label|:
do|do
block|{
if|if
condition|(
operator|!
operator|(
name|out_grouping
argument_list|(
name|g_v
argument_list|,
literal|97
argument_list|,
literal|121
argument_list|)
operator|)
condition|)
block|{
break|break
name|lab5
break|;
block|}
name|cursor
operator|=
name|v_4
expr_stmt|;
break|break
name|golab4
break|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|v_4
expr_stmt|;
if|if
condition|(
name|cursor
operator|>=
name|limit
condition|)
block|{
return|return
literal|false
return|;
block|}
name|cursor
operator|++
expr_stmt|;
block|}
comment|// set GE_removed, line 198
name|B_GE_removed
operator|=
literal|true
expr_stmt|;
comment|// delete, line 199
name|slice_del
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
DECL|method|r_measure
specifier|private
name|boolean
name|r_measure
parameter_list|()
block|{
name|int
name|v_1
decl_stmt|;
name|int
name|v_2
decl_stmt|;
name|int
name|v_5
decl_stmt|;
name|int
name|v_6
decl_stmt|;
name|int
name|v_9
decl_stmt|;
name|int
name|v_10
decl_stmt|;
comment|// (, line 202
comment|// do, line 203
name|v_1
operator|=
name|cursor
expr_stmt|;
name|lab0
label|:
do|do
block|{
comment|// (, line 203
comment|// tolimit, line 204
name|cursor
operator|=
name|limit
expr_stmt|;
comment|// setmark p1, line 205
name|I_p1
operator|=
name|cursor
expr_stmt|;
comment|// setmark p2, line 206
name|I_p2
operator|=
name|cursor
expr_stmt|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|v_1
expr_stmt|;
comment|// do, line 208
name|v_2
operator|=
name|cursor
expr_stmt|;
name|lab1
label|:
do|do
block|{
comment|// (, line 208
comment|// repeat, line 209
name|replab2
label|:
while|while
condition|(
literal|true
condition|)
block|{
name|lab3
label|:
do|do
block|{
if|if
condition|(
operator|!
operator|(
name|out_grouping
argument_list|(
name|g_v
argument_list|,
literal|97
argument_list|,
literal|121
argument_list|)
operator|)
condition|)
block|{
break|break
name|lab3
break|;
block|}
continue|continue
name|replab2
continue|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
break|break
name|replab2
break|;
block|}
comment|// atleast, line 209
block|{
name|int
name|v_4
init|=
literal|1
decl_stmt|;
comment|// atleast, line 209
name|replab4
label|:
while|while
condition|(
literal|true
condition|)
block|{
name|v_5
operator|=
name|cursor
expr_stmt|;
name|lab5
label|:
do|do
block|{
comment|// (, line 209
comment|// or, line 209
name|lab6
label|:
do|do
block|{
name|v_6
operator|=
name|cursor
expr_stmt|;
name|lab7
label|:
do|do
block|{
comment|// literal, line 209
if|if
condition|(
operator|!
operator|(
name|eq_s
argument_list|(
literal|2
argument_list|,
literal|"ij"
argument_list|)
operator|)
condition|)
block|{
break|break
name|lab7
break|;
block|}
break|break
name|lab6
break|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|v_6
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|in_grouping
argument_list|(
name|g_v
argument_list|,
literal|97
argument_list|,
literal|121
argument_list|)
operator|)
condition|)
block|{
break|break
name|lab5
break|;
block|}
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|v_4
operator|--
expr_stmt|;
continue|continue
name|replab4
continue|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|v_5
expr_stmt|;
break|break
name|replab4
break|;
block|}
if|if
condition|(
name|v_4
operator|>
literal|0
condition|)
block|{
break|break
name|lab1
break|;
block|}
block|}
if|if
condition|(
operator|!
operator|(
name|out_grouping
argument_list|(
name|g_v
argument_list|,
literal|97
argument_list|,
literal|121
argument_list|)
operator|)
condition|)
block|{
break|break
name|lab1
break|;
block|}
comment|// setmark p1, line 209
name|I_p1
operator|=
name|cursor
expr_stmt|;
comment|// repeat, line 210
name|replab8
label|:
while|while
condition|(
literal|true
condition|)
block|{
name|lab9
label|:
do|do
block|{
if|if
condition|(
operator|!
operator|(
name|out_grouping
argument_list|(
name|g_v
argument_list|,
literal|97
argument_list|,
literal|121
argument_list|)
operator|)
condition|)
block|{
break|break
name|lab9
break|;
block|}
continue|continue
name|replab8
continue|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
break|break
name|replab8
break|;
block|}
comment|// atleast, line 210
block|{
name|int
name|v_8
init|=
literal|1
decl_stmt|;
comment|// atleast, line 210
name|replab10
label|:
while|while
condition|(
literal|true
condition|)
block|{
name|v_9
operator|=
name|cursor
expr_stmt|;
name|lab11
label|:
do|do
block|{
comment|// (, line 210
comment|// or, line 210
name|lab12
label|:
do|do
block|{
name|v_10
operator|=
name|cursor
expr_stmt|;
name|lab13
label|:
do|do
block|{
comment|// literal, line 210
if|if
condition|(
operator|!
operator|(
name|eq_s
argument_list|(
literal|2
argument_list|,
literal|"ij"
argument_list|)
operator|)
condition|)
block|{
break|break
name|lab13
break|;
block|}
break|break
name|lab12
break|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|v_10
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|in_grouping
argument_list|(
name|g_v
argument_list|,
literal|97
argument_list|,
literal|121
argument_list|)
operator|)
condition|)
block|{
break|break
name|lab11
break|;
block|}
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|v_8
operator|--
expr_stmt|;
continue|continue
name|replab10
continue|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|v_9
expr_stmt|;
break|break
name|replab10
break|;
block|}
if|if
condition|(
name|v_8
operator|>
literal|0
condition|)
block|{
break|break
name|lab1
break|;
block|}
block|}
if|if
condition|(
operator|!
operator|(
name|out_grouping
argument_list|(
name|g_v
argument_list|,
literal|97
argument_list|,
literal|121
argument_list|)
operator|)
condition|)
block|{
break|break
name|lab1
break|;
block|}
comment|// setmark p2, line 210
name|I_p2
operator|=
name|cursor
expr_stmt|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|v_2
expr_stmt|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|stem
specifier|public
name|boolean
name|stem
parameter_list|()
block|{
name|int
name|v_1
decl_stmt|;
name|int
name|v_2
decl_stmt|;
name|int
name|v_3
decl_stmt|;
name|int
name|v_4
decl_stmt|;
name|int
name|v_5
decl_stmt|;
name|int
name|v_6
decl_stmt|;
name|int
name|v_7
decl_stmt|;
name|int
name|v_8
decl_stmt|;
name|int
name|v_9
decl_stmt|;
name|int
name|v_10
decl_stmt|;
name|int
name|v_11
decl_stmt|;
name|int
name|v_12
decl_stmt|;
name|int
name|v_13
decl_stmt|;
name|int
name|v_14
decl_stmt|;
name|int
name|v_15
decl_stmt|;
name|int
name|v_16
decl_stmt|;
name|int
name|v_18
decl_stmt|;
name|int
name|v_19
decl_stmt|;
name|int
name|v_20
decl_stmt|;
comment|// (, line 214
comment|// unset Y_found, line 216
name|B_Y_found
operator|=
literal|false
expr_stmt|;
comment|// unset stemmed, line 217
name|B_stemmed
operator|=
literal|false
expr_stmt|;
comment|// do, line 218
name|v_1
operator|=
name|cursor
expr_stmt|;
name|lab0
label|:
do|do
block|{
comment|// (, line 218
comment|// [, line 218
name|bra
operator|=
name|cursor
expr_stmt|;
comment|// literal, line 218
if|if
condition|(
operator|!
operator|(
name|eq_s
argument_list|(
literal|1
argument_list|,
literal|"y"
argument_list|)
operator|)
condition|)
block|{
break|break
name|lab0
break|;
block|}
comment|// ], line 218
name|ket
operator|=
name|cursor
expr_stmt|;
comment|//<-, line 218
name|slice_from
argument_list|(
literal|"Y"
argument_list|)
expr_stmt|;
comment|// set Y_found, line 218
name|B_Y_found
operator|=
literal|true
expr_stmt|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|v_1
expr_stmt|;
comment|// do, line 219
name|v_2
operator|=
name|cursor
expr_stmt|;
name|lab1
label|:
do|do
block|{
comment|// repeat, line 219
name|replab2
label|:
while|while
condition|(
literal|true
condition|)
block|{
name|v_3
operator|=
name|cursor
expr_stmt|;
name|lab3
label|:
do|do
block|{
comment|// (, line 219
comment|// goto, line 219
name|golab4
label|:
while|while
condition|(
literal|true
condition|)
block|{
name|v_4
operator|=
name|cursor
expr_stmt|;
name|lab5
label|:
do|do
block|{
comment|// (, line 219
if|if
condition|(
operator|!
operator|(
name|in_grouping
argument_list|(
name|g_v
argument_list|,
literal|97
argument_list|,
literal|121
argument_list|)
operator|)
condition|)
block|{
break|break
name|lab5
break|;
block|}
comment|// [, line 219
name|bra
operator|=
name|cursor
expr_stmt|;
comment|// literal, line 219
if|if
condition|(
operator|!
operator|(
name|eq_s
argument_list|(
literal|1
argument_list|,
literal|"y"
argument_list|)
operator|)
condition|)
block|{
break|break
name|lab5
break|;
block|}
comment|// ], line 219
name|ket
operator|=
name|cursor
expr_stmt|;
name|cursor
operator|=
name|v_4
expr_stmt|;
break|break
name|golab4
break|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|v_4
expr_stmt|;
if|if
condition|(
name|cursor
operator|>=
name|limit
condition|)
block|{
break|break
name|lab3
break|;
block|}
name|cursor
operator|++
expr_stmt|;
block|}
comment|//<-, line 219
name|slice_from
argument_list|(
literal|"Y"
argument_list|)
expr_stmt|;
comment|// set Y_found, line 219
name|B_Y_found
operator|=
literal|true
expr_stmt|;
continue|continue
name|replab2
continue|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|v_3
expr_stmt|;
break|break
name|replab2
break|;
block|}
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|v_2
expr_stmt|;
comment|// call measure, line 221
if|if
condition|(
operator|!
name|r_measure
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// backwards, line 223
name|limit_backward
operator|=
name|cursor
expr_stmt|;
name|cursor
operator|=
name|limit
expr_stmt|;
comment|// (, line 223
comment|// do, line 224
name|v_5
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
name|lab6
label|:
do|do
block|{
comment|// (, line 224
comment|// call Step_1, line 224
if|if
condition|(
operator|!
name|r_Step_1
argument_list|()
condition|)
block|{
break|break
name|lab6
break|;
block|}
comment|// set stemmed, line 224
name|B_stemmed
operator|=
literal|true
expr_stmt|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|limit
operator|-
name|v_5
expr_stmt|;
comment|// do, line 225
name|v_6
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
name|lab7
label|:
do|do
block|{
comment|// (, line 225
comment|// call Step_2, line 225
if|if
condition|(
operator|!
name|r_Step_2
argument_list|()
condition|)
block|{
break|break
name|lab7
break|;
block|}
comment|// set stemmed, line 225
name|B_stemmed
operator|=
literal|true
expr_stmt|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|limit
operator|-
name|v_6
expr_stmt|;
comment|// do, line 226
name|v_7
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
name|lab8
label|:
do|do
block|{
comment|// (, line 226
comment|// call Step_3, line 226
if|if
condition|(
operator|!
name|r_Step_3
argument_list|()
condition|)
block|{
break|break
name|lab8
break|;
block|}
comment|// set stemmed, line 226
name|B_stemmed
operator|=
literal|true
expr_stmt|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|limit
operator|-
name|v_7
expr_stmt|;
comment|// do, line 227
name|v_8
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
name|lab9
label|:
do|do
block|{
comment|// (, line 227
comment|// call Step_4, line 227
if|if
condition|(
operator|!
name|r_Step_4
argument_list|()
condition|)
block|{
break|break
name|lab9
break|;
block|}
comment|// set stemmed, line 227
name|B_stemmed
operator|=
literal|true
expr_stmt|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|limit
operator|-
name|v_8
expr_stmt|;
name|cursor
operator|=
name|limit_backward
expr_stmt|;
comment|// unset GE_removed, line 229
name|B_GE_removed
operator|=
literal|false
expr_stmt|;
comment|// do, line 230
name|v_9
operator|=
name|cursor
expr_stmt|;
name|lab10
label|:
do|do
block|{
comment|// (, line 230
comment|// and, line 230
name|v_10
operator|=
name|cursor
expr_stmt|;
comment|// call Lose_prefix, line 230
if|if
condition|(
operator|!
name|r_Lose_prefix
argument_list|()
condition|)
block|{
break|break
name|lab10
break|;
block|}
name|cursor
operator|=
name|v_10
expr_stmt|;
comment|// call measure, line 230
if|if
condition|(
operator|!
name|r_measure
argument_list|()
condition|)
block|{
break|break
name|lab10
break|;
block|}
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|v_9
expr_stmt|;
comment|// backwards, line 231
name|limit_backward
operator|=
name|cursor
expr_stmt|;
name|cursor
operator|=
name|limit
expr_stmt|;
comment|// (, line 231
comment|// do, line 232
name|v_11
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
name|lab11
label|:
do|do
block|{
comment|// (, line 232
comment|// Boolean test GE_removed, line 232
if|if
condition|(
operator|!
operator|(
name|B_GE_removed
operator|)
condition|)
block|{
break|break
name|lab11
break|;
block|}
comment|// call Step_1c, line 232
if|if
condition|(
operator|!
name|r_Step_1c
argument_list|()
condition|)
block|{
break|break
name|lab11
break|;
block|}
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|limit
operator|-
name|v_11
expr_stmt|;
name|cursor
operator|=
name|limit_backward
expr_stmt|;
comment|// unset GE_removed, line 234
name|B_GE_removed
operator|=
literal|false
expr_stmt|;
comment|// do, line 235
name|v_12
operator|=
name|cursor
expr_stmt|;
name|lab12
label|:
do|do
block|{
comment|// (, line 235
comment|// and, line 235
name|v_13
operator|=
name|cursor
expr_stmt|;
comment|// call Lose_infix, line 235
if|if
condition|(
operator|!
name|r_Lose_infix
argument_list|()
condition|)
block|{
break|break
name|lab12
break|;
block|}
name|cursor
operator|=
name|v_13
expr_stmt|;
comment|// call measure, line 235
if|if
condition|(
operator|!
name|r_measure
argument_list|()
condition|)
block|{
break|break
name|lab12
break|;
block|}
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|v_12
expr_stmt|;
comment|// backwards, line 236
name|limit_backward
operator|=
name|cursor
expr_stmt|;
name|cursor
operator|=
name|limit
expr_stmt|;
comment|// (, line 236
comment|// do, line 237
name|v_14
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
name|lab13
label|:
do|do
block|{
comment|// (, line 237
comment|// Boolean test GE_removed, line 237
if|if
condition|(
operator|!
operator|(
name|B_GE_removed
operator|)
condition|)
block|{
break|break
name|lab13
break|;
block|}
comment|// call Step_1c, line 237
if|if
condition|(
operator|!
name|r_Step_1c
argument_list|()
condition|)
block|{
break|break
name|lab13
break|;
block|}
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|limit
operator|-
name|v_14
expr_stmt|;
name|cursor
operator|=
name|limit_backward
expr_stmt|;
comment|// backwards, line 239
name|limit_backward
operator|=
name|cursor
expr_stmt|;
name|cursor
operator|=
name|limit
expr_stmt|;
comment|// (, line 239
comment|// do, line 240
name|v_15
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
name|lab14
label|:
do|do
block|{
comment|// (, line 240
comment|// call Step_7, line 240
if|if
condition|(
operator|!
name|r_Step_7
argument_list|()
condition|)
block|{
break|break
name|lab14
break|;
block|}
comment|// set stemmed, line 240
name|B_stemmed
operator|=
literal|true
expr_stmt|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|limit
operator|-
name|v_15
expr_stmt|;
comment|// do, line 241
name|v_16
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
name|lab15
label|:
do|do
block|{
comment|// (, line 241
comment|// or, line 241
name|lab16
label|:
do|do
block|{
name|lab17
label|:
do|do
block|{
comment|// Boolean test stemmed, line 241
if|if
condition|(
operator|!
operator|(
name|B_stemmed
operator|)
condition|)
block|{
break|break
name|lab17
break|;
block|}
break|break
name|lab16
break|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
comment|// Boolean test GE_removed, line 241
if|if
condition|(
operator|!
operator|(
name|B_GE_removed
operator|)
condition|)
block|{
break|break
name|lab15
break|;
block|}
block|}
do|while
condition|(
literal|false
condition|)
do|;
comment|// call Step_6, line 241
if|if
condition|(
operator|!
name|r_Step_6
argument_list|()
condition|)
block|{
break|break
name|lab15
break|;
block|}
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|limit
operator|-
name|v_16
expr_stmt|;
name|cursor
operator|=
name|limit_backward
expr_stmt|;
comment|// do, line 243
name|v_18
operator|=
name|cursor
expr_stmt|;
name|lab18
label|:
do|do
block|{
comment|// (, line 243
comment|// Boolean test Y_found, line 243
if|if
condition|(
operator|!
operator|(
name|B_Y_found
operator|)
condition|)
block|{
break|break
name|lab18
break|;
block|}
comment|// repeat, line 243
name|replab19
label|:
while|while
condition|(
literal|true
condition|)
block|{
name|v_19
operator|=
name|cursor
expr_stmt|;
name|lab20
label|:
do|do
block|{
comment|// (, line 243
comment|// goto, line 243
name|golab21
label|:
while|while
condition|(
literal|true
condition|)
block|{
name|v_20
operator|=
name|cursor
expr_stmt|;
name|lab22
label|:
do|do
block|{
comment|// (, line 243
comment|// [, line 243
name|bra
operator|=
name|cursor
expr_stmt|;
comment|// literal, line 243
if|if
condition|(
operator|!
operator|(
name|eq_s
argument_list|(
literal|1
argument_list|,
literal|"Y"
argument_list|)
operator|)
condition|)
block|{
break|break
name|lab22
break|;
block|}
comment|// ], line 243
name|ket
operator|=
name|cursor
expr_stmt|;
name|cursor
operator|=
name|v_20
expr_stmt|;
break|break
name|golab21
break|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|v_20
expr_stmt|;
if|if
condition|(
name|cursor
operator|>=
name|limit
condition|)
block|{
break|break
name|lab20
break|;
block|}
name|cursor
operator|++
expr_stmt|;
block|}
comment|//<-, line 243
name|slice_from
argument_list|(
literal|"y"
argument_list|)
expr_stmt|;
continue|continue
name|replab19
continue|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|v_19
expr_stmt|;
break|break
name|replab19
break|;
block|}
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|v_18
expr_stmt|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
name|o
operator|instanceof
name|KpStemmer
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|KpStemmer
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|.
name|hashCode
argument_list|()
return|;
block|}
block|}
end_class
end_unit
