begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.analysis.miscellaneous
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|miscellaneous
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|BaseTokenStreamTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_comment
comment|/**  * Test the truncate token filter.  */
end_comment
begin_class
DECL|class|TestTruncateTokenFilter
specifier|public
class|class
name|TestTruncateTokenFilter
extends|extends
name|BaseTokenStreamTestCase
block|{
DECL|method|testTruncating
specifier|public
name|void
name|testTruncating
parameter_list|()
throws|throws
name|Exception
block|{
name|TokenStream
name|stream
init|=
name|whitespaceMockTokenizer
argument_list|(
literal|"abcdefg 1234567 ABCDEFG abcde abc 12345 123"
argument_list|)
decl_stmt|;
name|stream
operator|=
operator|new
name|TruncateTokenFilter
argument_list|(
name|stream
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|assertTokenStreamContents
argument_list|(
name|stream
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"abcde"
block|,
literal|"12345"
block|,
literal|"ABCDE"
block|,
literal|"abcde"
block|,
literal|"abc"
block|,
literal|"12345"
block|,
literal|"123"
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
DECL|method|testNonPositiveLength
specifier|public
name|void
name|testNonPositiveLength
parameter_list|()
throws|throws
name|Exception
block|{
operator|new
name|TruncateTokenFilter
argument_list|(
name|whitespaceMockTokenizer
argument_list|(
literal|"length must be a positive number"
argument_list|)
argument_list|,
operator|-
literal|48
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
