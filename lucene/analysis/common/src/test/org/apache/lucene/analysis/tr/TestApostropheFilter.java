begin_unit
begin_package
DECL|package|org.apache.lucene.analysis.tr
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tr
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|BaseTokenStreamTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenStream
import|;
end_import
begin_class
DECL|class|TestApostropheFilter
specifier|public
class|class
name|TestApostropheFilter
extends|extends
name|BaseTokenStreamTestCase
block|{
DECL|method|testApostropheFilter
specifier|public
name|void
name|testApostropheFilter
parameter_list|()
throws|throws
name|Exception
block|{
name|TokenStream
name|stream
init|=
name|whitespaceMockTokenizer
argument_list|(
literal|"TÃ¼rkiye'de 2003'te Van GÃ¶lÃ¼'nÃ¼ gÃ¶rdÃ¼m"
argument_list|)
decl_stmt|;
name|stream
operator|=
operator|new
name|TurkishLowerCaseFilter
argument_list|(
name|stream
argument_list|)
expr_stmt|;
name|stream
operator|=
operator|new
name|ApostropheFilter
argument_list|(
name|stream
argument_list|)
expr_stmt|;
name|assertTokenStreamContents
argument_list|(
name|stream
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"tÃ¼rkiye"
block|,
literal|"2003"
block|,
literal|"van"
block|,
literal|"gÃ¶lÃ¼"
block|,
literal|"gÃ¶rdÃ¼m"
block|}
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
