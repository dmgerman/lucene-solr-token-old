begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.analysis.pattern
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|pattern
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Analyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|BaseTokenStreamTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|MockTokenizer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Tokenizer
import|;
end_import
begin_class
DECL|class|TestPatternCaptureGroupTokenFilter
specifier|public
class|class
name|TestPatternCaptureGroupTokenFilter
extends|extends
name|BaseTokenStreamTestCase
block|{
DECL|method|testNoPattern
specifier|public
name|void
name|testNoPattern
parameter_list|()
throws|throws
name|Exception
block|{
name|testPatterns
argument_list|(
literal|"foobarbaz"
argument_list|,
operator|new
name|String
index|[]
block|{}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"foobarbaz"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|9
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|}
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|testPatterns
argument_list|(
literal|"foobarbaz"
argument_list|,
operator|new
name|String
index|[]
block|{}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"foobarbaz"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|9
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|}
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|testPatterns
argument_list|(
literal|"foo bar baz"
argument_list|,
operator|new
name|String
index|[]
block|{}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"foo"
block|,
literal|"bar"
block|,
literal|"baz"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|4
block|,
literal|8
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|3
block|,
literal|7
block|,
literal|11
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|1
block|,
literal|1
block|}
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|testPatterns
argument_list|(
literal|"foo bar baz"
argument_list|,
operator|new
name|String
index|[]
block|{}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"foo"
block|,
literal|"bar"
block|,
literal|"baz"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|4
block|,
literal|8
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|3
block|,
literal|7
block|,
literal|11
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|1
block|,
literal|1
block|}
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|testNoMatch
specifier|public
name|void
name|testNoMatch
parameter_list|()
throws|throws
name|Exception
block|{
name|testPatterns
argument_list|(
literal|"foobarbaz"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"xx"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"foobarbaz"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|9
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|}
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|testPatterns
argument_list|(
literal|"foobarbaz"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"xx"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"foobarbaz"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|9
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|}
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|testPatterns
argument_list|(
literal|"foo bar baz"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"xx"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"foo"
block|,
literal|"bar"
block|,
literal|"baz"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|4
block|,
literal|8
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|3
block|,
literal|7
block|,
literal|11
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|1
block|,
literal|1
block|}
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|testPatterns
argument_list|(
literal|"foo bar baz"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"xx"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"foo"
block|,
literal|"bar"
block|,
literal|"baz"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|4
block|,
literal|8
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|3
block|,
literal|7
block|,
literal|11
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|1
block|,
literal|1
block|}
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|testNoCapture
specifier|public
name|void
name|testNoCapture
parameter_list|()
throws|throws
name|Exception
block|{
name|testPatterns
argument_list|(
literal|"foobarbaz"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|".."
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"foobarbaz"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|9
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|}
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|testPatterns
argument_list|(
literal|"foobarbaz"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|".."
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"foobarbaz"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|9
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|}
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|testPatterns
argument_list|(
literal|"foo bar baz"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|".."
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"foo"
block|,
literal|"bar"
block|,
literal|"baz"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|4
block|,
literal|8
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|3
block|,
literal|7
block|,
literal|11
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|1
block|,
literal|1
block|}
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|testPatterns
argument_list|(
literal|"foo bar baz"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|".."
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"foo"
block|,
literal|"bar"
block|,
literal|"baz"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|4
block|,
literal|8
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|3
block|,
literal|7
block|,
literal|11
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|1
block|,
literal|1
block|}
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|testEmptyCapture
specifier|public
name|void
name|testEmptyCapture
parameter_list|()
throws|throws
name|Exception
block|{
name|testPatterns
argument_list|(
literal|"foobarbaz"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|".(y*)"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"foobarbaz"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|9
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|}
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|testPatterns
argument_list|(
literal|"foobarbaz"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|".(y*)"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"foobarbaz"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|9
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|}
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|testPatterns
argument_list|(
literal|"foo bar baz"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|".(y*)"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"foo"
block|,
literal|"bar"
block|,
literal|"baz"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|4
block|,
literal|8
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|3
block|,
literal|7
block|,
literal|11
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|1
block|,
literal|1
block|}
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|testPatterns
argument_list|(
literal|"foo bar baz"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|".(y*)"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"foo"
block|,
literal|"bar"
block|,
literal|"baz"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|4
block|,
literal|8
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|3
block|,
literal|7
block|,
literal|11
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|1
block|,
literal|1
block|}
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|testCaptureAll
specifier|public
name|void
name|testCaptureAll
parameter_list|()
throws|throws
name|Exception
block|{
name|testPatterns
argument_list|(
literal|"foobarbaz"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"(.+)"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"foobarbaz"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|9
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|}
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|testPatterns
argument_list|(
literal|"foobarbaz"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"(.+)"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"foobarbaz"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|9
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|}
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|testPatterns
argument_list|(
literal|"foo bar baz"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"(.+)"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"foo"
block|,
literal|"bar"
block|,
literal|"baz"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|4
block|,
literal|8
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|3
block|,
literal|7
block|,
literal|11
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|1
block|,
literal|1
block|}
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|testPatterns
argument_list|(
literal|"foo bar baz"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"(.+)"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"foo"
block|,
literal|"bar"
block|,
literal|"baz"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|4
block|,
literal|8
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|3
block|,
literal|7
block|,
literal|11
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|1
block|,
literal|1
block|}
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|testCaptureStart
specifier|public
name|void
name|testCaptureStart
parameter_list|()
throws|throws
name|Exception
block|{
name|testPatterns
argument_list|(
literal|"foobarbaz"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"^(.)"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"f"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|9
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|}
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|testPatterns
argument_list|(
literal|"foobarbaz"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"^(.)"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"foobarbaz"
block|,
literal|"f"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|0
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|9
block|,
literal|9
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|0
block|}
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|testPatterns
argument_list|(
literal|"foo bar baz"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"^(.)"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"f"
block|,
literal|"b"
block|,
literal|"b"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|4
block|,
literal|8
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|3
block|,
literal|7
block|,
literal|11
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|1
block|,
literal|1
block|}
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|testPatterns
argument_list|(
literal|"foo bar baz"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"^(.)"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"foo"
block|,
literal|"f"
block|,
literal|"bar"
block|,
literal|"b"
block|,
literal|"baz"
block|,
literal|"b"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|0
block|,
literal|4
block|,
literal|4
block|,
literal|8
block|,
literal|8
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|3
block|,
literal|3
block|,
literal|7
block|,
literal|7
block|,
literal|11
block|,
literal|11
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|}
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|testCaptureMiddle
specifier|public
name|void
name|testCaptureMiddle
parameter_list|()
throws|throws
name|Exception
block|{
name|testPatterns
argument_list|(
literal|"foobarbaz"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"^.(.)."
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"o"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|9
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|}
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|testPatterns
argument_list|(
literal|"foobarbaz"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"^.(.)."
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"foobarbaz"
block|,
literal|"o"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|0
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|9
block|,
literal|9
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|0
block|}
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|testPatterns
argument_list|(
literal|"foo bar baz"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"^.(.)."
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"o"
block|,
literal|"a"
block|,
literal|"a"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|4
block|,
literal|8
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|3
block|,
literal|7
block|,
literal|11
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|1
block|,
literal|1
block|}
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|testPatterns
argument_list|(
literal|"foo bar baz"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"^.(.)."
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"foo"
block|,
literal|"o"
block|,
literal|"bar"
block|,
literal|"a"
block|,
literal|"baz"
block|,
literal|"a"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|0
block|,
literal|4
block|,
literal|4
block|,
literal|8
block|,
literal|8
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|3
block|,
literal|3
block|,
literal|7
block|,
literal|7
block|,
literal|11
block|,
literal|11
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|}
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|testCaptureEnd
specifier|public
name|void
name|testCaptureEnd
parameter_list|()
throws|throws
name|Exception
block|{
name|testPatterns
argument_list|(
literal|"foobarbaz"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"(.)$"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"z"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|9
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|}
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|testPatterns
argument_list|(
literal|"foobarbaz"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"(.)$"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"foobarbaz"
block|,
literal|"z"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|0
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|9
block|,
literal|9
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|0
block|}
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|testPatterns
argument_list|(
literal|"foo bar baz"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"(.)$"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"o"
block|,
literal|"r"
block|,
literal|"z"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|4
block|,
literal|8
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|3
block|,
literal|7
block|,
literal|11
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|1
block|,
literal|1
block|}
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|testPatterns
argument_list|(
literal|"foo bar baz"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"(.)$"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"foo"
block|,
literal|"o"
block|,
literal|"bar"
block|,
literal|"r"
block|,
literal|"baz"
block|,
literal|"z"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|0
block|,
literal|4
block|,
literal|4
block|,
literal|8
block|,
literal|8
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|3
block|,
literal|3
block|,
literal|7
block|,
literal|7
block|,
literal|11
block|,
literal|11
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|}
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|testCaptureStartMiddle
specifier|public
name|void
name|testCaptureStartMiddle
parameter_list|()
throws|throws
name|Exception
block|{
name|testPatterns
argument_list|(
literal|"foobarbaz"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"^(.)(.)"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"f"
block|,
literal|"o"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|0
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|9
block|,
literal|9
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|0
block|}
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|testPatterns
argument_list|(
literal|"foobarbaz"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"^(.)(.)"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"foobarbaz"
block|,
literal|"f"
block|,
literal|"o"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|9
block|,
literal|9
block|,
literal|9
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|0
block|,
literal|0
block|}
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|testPatterns
argument_list|(
literal|"foo bar baz"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"^(.)(.)"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"f"
block|,
literal|"o"
block|,
literal|"b"
block|,
literal|"a"
block|,
literal|"b"
block|,
literal|"a"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|0
block|,
literal|4
block|,
literal|4
block|,
literal|8
block|,
literal|8
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|3
block|,
literal|3
block|,
literal|7
block|,
literal|7
block|,
literal|11
block|,
literal|11
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|}
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|testPatterns
argument_list|(
literal|"foo bar baz"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"^(.)(.)"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"foo"
block|,
literal|"f"
block|,
literal|"o"
block|,
literal|"bar"
block|,
literal|"b"
block|,
literal|"a"
block|,
literal|"baz"
block|,
literal|"b"
block|,
literal|"a"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|4
block|,
literal|4
block|,
literal|4
block|,
literal|8
block|,
literal|8
block|,
literal|8
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|3
block|,
literal|3
block|,
literal|3
block|,
literal|7
block|,
literal|7
block|,
literal|7
block|,
literal|11
block|,
literal|11
block|,
literal|11
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|0
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|0
block|}
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|testCaptureStartEnd
specifier|public
name|void
name|testCaptureStartEnd
parameter_list|()
throws|throws
name|Exception
block|{
name|testPatterns
argument_list|(
literal|"foobarbaz"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"^(.).+(.)$"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"f"
block|,
literal|"z"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|0
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|9
block|,
literal|9
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|0
block|}
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|testPatterns
argument_list|(
literal|"foobarbaz"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"^(.).+(.)$"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"foobarbaz"
block|,
literal|"f"
block|,
literal|"z"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|9
block|,
literal|9
block|,
literal|9
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|0
block|,
literal|0
block|}
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|testPatterns
argument_list|(
literal|"foo bar baz"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"^(.).+(.)$"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"f"
block|,
literal|"o"
block|,
literal|"b"
block|,
literal|"r"
block|,
literal|"b"
block|,
literal|"z"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|0
block|,
literal|4
block|,
literal|4
block|,
literal|8
block|,
literal|8
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|3
block|,
literal|3
block|,
literal|7
block|,
literal|7
block|,
literal|11
block|,
literal|11
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|}
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|testPatterns
argument_list|(
literal|"foo bar baz"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"^(.).+(.)$"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"foo"
block|,
literal|"f"
block|,
literal|"o"
block|,
literal|"bar"
block|,
literal|"b"
block|,
literal|"r"
block|,
literal|"baz"
block|,
literal|"b"
block|,
literal|"z"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|4
block|,
literal|4
block|,
literal|4
block|,
literal|8
block|,
literal|8
block|,
literal|8
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|3
block|,
literal|3
block|,
literal|3
block|,
literal|7
block|,
literal|7
block|,
literal|7
block|,
literal|11
block|,
literal|11
block|,
literal|11
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|0
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|0
block|}
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|testCaptureMiddleEnd
specifier|public
name|void
name|testCaptureMiddleEnd
parameter_list|()
throws|throws
name|Exception
block|{
name|testPatterns
argument_list|(
literal|"foobarbaz"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"(.)(.)$"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"z"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|0
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|9
block|,
literal|9
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|0
block|}
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|testPatterns
argument_list|(
literal|"foobarbaz"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"(.)(.)$"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"foobarbaz"
block|,
literal|"a"
block|,
literal|"z"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|9
block|,
literal|9
block|,
literal|9
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|0
block|,
literal|0
block|}
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|testPatterns
argument_list|(
literal|"foo bar baz"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"(.)(.)$"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"o"
block|,
literal|"o"
block|,
literal|"a"
block|,
literal|"r"
block|,
literal|"a"
block|,
literal|"z"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|0
block|,
literal|4
block|,
literal|4
block|,
literal|8
block|,
literal|8
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|3
block|,
literal|3
block|,
literal|7
block|,
literal|7
block|,
literal|11
block|,
literal|11
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|}
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|testPatterns
argument_list|(
literal|"foo bar baz"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"(.)(.)$"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"foo"
block|,
literal|"o"
block|,
literal|"o"
block|,
literal|"bar"
block|,
literal|"a"
block|,
literal|"r"
block|,
literal|"baz"
block|,
literal|"a"
block|,
literal|"z"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|4
block|,
literal|4
block|,
literal|4
block|,
literal|8
block|,
literal|8
block|,
literal|8
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|3
block|,
literal|3
block|,
literal|3
block|,
literal|7
block|,
literal|7
block|,
literal|7
block|,
literal|11
block|,
literal|11
block|,
literal|11
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|0
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|0
block|}
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|testMultiCaptureOverlap
specifier|public
name|void
name|testMultiCaptureOverlap
parameter_list|()
throws|throws
name|Exception
block|{
name|testPatterns
argument_list|(
literal|"foobarbaz"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"(.(.(.)))"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"foo"
block|,
literal|"oo"
block|,
literal|"o"
block|,
literal|"bar"
block|,
literal|"ar"
block|,
literal|"r"
block|,
literal|"baz"
block|,
literal|"az"
block|,
literal|"z"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|9
block|,
literal|9
block|,
literal|9
block|,
literal|9
block|,
literal|9
block|,
literal|9
block|,
literal|9
block|,
literal|9
block|,
literal|9
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|testPatterns
argument_list|(
literal|"foobarbaz"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"(.(.(.)))"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"foobarbaz"
block|,
literal|"foo"
block|,
literal|"oo"
block|,
literal|"o"
block|,
literal|"bar"
block|,
literal|"ar"
block|,
literal|"r"
block|,
literal|"baz"
block|,
literal|"az"
block|,
literal|"z"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|9
block|,
literal|9
block|,
literal|9
block|,
literal|9
block|,
literal|9
block|,
literal|9
block|,
literal|9
block|,
literal|9
block|,
literal|9
block|,
literal|9
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|testPatterns
argument_list|(
literal|"foo bar baz"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"(.(.(.)))"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"foo"
block|,
literal|"oo"
block|,
literal|"o"
block|,
literal|"bar"
block|,
literal|"ar"
block|,
literal|"r"
block|,
literal|"baz"
block|,
literal|"az"
block|,
literal|"z"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|4
block|,
literal|4
block|,
literal|4
block|,
literal|8
block|,
literal|8
block|,
literal|8
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|3
block|,
literal|3
block|,
literal|3
block|,
literal|7
block|,
literal|7
block|,
literal|7
block|,
literal|11
block|,
literal|11
block|,
literal|11
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|0
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|0
block|}
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|testPatterns
argument_list|(
literal|"foo bar baz"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"(.(.(.)))"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"foo"
block|,
literal|"oo"
block|,
literal|"o"
block|,
literal|"bar"
block|,
literal|"ar"
block|,
literal|"r"
block|,
literal|"baz"
block|,
literal|"az"
block|,
literal|"z"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|4
block|,
literal|4
block|,
literal|4
block|,
literal|8
block|,
literal|8
block|,
literal|8
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|3
block|,
literal|3
block|,
literal|3
block|,
literal|7
block|,
literal|7
block|,
literal|7
block|,
literal|11
block|,
literal|11
block|,
literal|11
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|0
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|0
block|}
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|testMultiPattern
specifier|public
name|void
name|testMultiPattern
parameter_list|()
throws|throws
name|Exception
block|{
name|testPatterns
argument_list|(
literal|"aaabbbaaa"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"(aaa)"
block|,
literal|"(bbb)"
block|,
literal|"(ccc)"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"aaa"
block|,
literal|"bbb"
block|,
literal|"aaa"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|9
block|,
literal|9
block|,
literal|9
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|0
block|,
literal|0
block|}
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|testPatterns
argument_list|(
literal|"aaabbbaaa"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"(aaa)"
block|,
literal|"(bbb)"
block|,
literal|"(ccc)"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"aaabbbaaa"
block|,
literal|"aaa"
block|,
literal|"bbb"
block|,
literal|"aaa"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|9
block|,
literal|9
block|,
literal|9
block|,
literal|9
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|testPatterns
argument_list|(
literal|"aaa bbb aaa"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"(aaa)"
block|,
literal|"(bbb)"
block|,
literal|"(ccc)"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"aaa"
block|,
literal|"bbb"
block|,
literal|"aaa"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|4
block|,
literal|8
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|3
block|,
literal|7
block|,
literal|11
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|1
block|,
literal|1
block|}
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|testPatterns
argument_list|(
literal|"aaa bbb aaa"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"(aaa)"
block|,
literal|"(bbb)"
block|,
literal|"(ccc)"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"aaa"
block|,
literal|"bbb"
block|,
literal|"aaa"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|4
block|,
literal|8
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|3
block|,
literal|7
block|,
literal|11
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|1
block|,
literal|1
block|}
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|testCamelCase
specifier|public
name|void
name|testCamelCase
parameter_list|()
throws|throws
name|Exception
block|{
name|testPatterns
argument_list|(
literal|"letsPartyLIKEits1999_dude"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"([A-Z]{2,})"
block|,
literal|"(?<![A-Z])([A-Z][a-z]+)"
block|,
literal|"(?:^|\\b|(?<=[0-9_])|(?<=[A-Z]{2}))([a-z]+)"
block|,
literal|"([0-9]+)"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"lets"
block|,
literal|"Party"
block|,
literal|"LIKE"
block|,
literal|"its"
block|,
literal|"1999"
block|,
literal|"dude"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|25
block|,
literal|25
block|,
literal|25
block|,
literal|25
block|,
literal|25
block|,
literal|25
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|testPatterns
argument_list|(
literal|"letsPartyLIKEits1999_dude"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"([A-Z]{2,})"
block|,
literal|"(?<![A-Z])([A-Z][a-z]+)"
block|,
literal|"(?:^|\\b|(?<=[0-9_])|(?<=[A-Z]{2}))([a-z]+)"
block|,
literal|"([0-9]+)"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"letsPartyLIKEits1999_dude"
block|,
literal|"lets"
block|,
literal|"Party"
block|,
literal|"LIKE"
block|,
literal|"its"
block|,
literal|"1999"
block|,
literal|"dude"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|25
block|,
literal|25
block|,
literal|25
block|,
literal|25
block|,
literal|25
block|,
literal|25
block|,
literal|25
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|testRandomString
specifier|public
name|void
name|testRandomString
parameter_list|()
throws|throws
name|Exception
block|{
name|Analyzer
name|a
init|=
operator|new
name|Analyzer
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|TokenStreamComponents
name|createComponents
parameter_list|(
name|String
name|fieldName
parameter_list|)
block|{
name|Tokenizer
name|tokenizer
init|=
operator|new
name|MockTokenizer
argument_list|(
name|MockTokenizer
operator|.
name|WHITESPACE
argument_list|,
literal|false
argument_list|)
decl_stmt|;
return|return
operator|new
name|TokenStreamComponents
argument_list|(
name|tokenizer
argument_list|,
operator|new
name|PatternCaptureGroupTokenFilter
argument_list|(
name|tokenizer
argument_list|,
literal|false
argument_list|,
name|Pattern
operator|.
name|compile
argument_list|(
literal|"((..)(..))"
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|checkRandomData
argument_list|(
name|random
argument_list|()
argument_list|,
name|a
argument_list|,
literal|1000
operator|*
name|RANDOM_MULTIPLIER
argument_list|)
expr_stmt|;
name|a
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testPatterns
specifier|private
name|void
name|testPatterns
parameter_list|(
name|String
name|input
parameter_list|,
name|String
index|[]
name|regexes
parameter_list|,
name|String
index|[]
name|tokens
parameter_list|,
name|int
index|[]
name|startOffsets
parameter_list|,
name|int
index|[]
name|endOffsets
parameter_list|,
name|int
index|[]
name|positions
parameter_list|,
name|boolean
name|preserveOriginal
parameter_list|)
throws|throws
name|Exception
block|{
name|Pattern
index|[]
name|patterns
init|=
operator|new
name|Pattern
index|[
name|regexes
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|regexes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|patterns
index|[
name|i
index|]
operator|=
name|Pattern
operator|.
name|compile
argument_list|(
name|regexes
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|Tokenizer
name|tokenizer
init|=
operator|new
name|MockTokenizer
argument_list|(
name|MockTokenizer
operator|.
name|WHITESPACE
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|tokenizer
operator|.
name|setReader
argument_list|(
operator|new
name|StringReader
argument_list|(
name|input
argument_list|)
argument_list|)
expr_stmt|;
name|TokenStream
name|ts
init|=
operator|new
name|PatternCaptureGroupTokenFilter
argument_list|(
name|tokenizer
argument_list|,
name|preserveOriginal
argument_list|,
name|patterns
argument_list|)
decl_stmt|;
name|assertTokenStreamContents
argument_list|(
name|ts
argument_list|,
name|tokens
argument_list|,
name|startOffsets
argument_list|,
name|endOffsets
argument_list|,
name|positions
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
