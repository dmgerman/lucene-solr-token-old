begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.analysis.pattern
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|pattern
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|MockTokenizer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|util
operator|.
name|BaseTokenStreamFactoryTestCase
import|;
end_import
begin_comment
comment|/**  * Simple tests to ensure this factory is working  */
end_comment
begin_class
DECL|class|TestPatternReplaceCharFilterFactory
specifier|public
class|class
name|TestPatternReplaceCharFilterFactory
extends|extends
name|BaseTokenStreamFactoryTestCase
block|{
comment|//           1111
comment|// 01234567890123
comment|// this is test.
DECL|method|testNothingChange
specifier|public
name|void
name|testNothingChange
parameter_list|()
throws|throws
name|Exception
block|{
name|Reader
name|reader
init|=
operator|new
name|StringReader
argument_list|(
literal|"this is test."
argument_list|)
decl_stmt|;
name|reader
operator|=
name|charFilterFactory
argument_list|(
literal|"PatternReplace"
argument_list|,
literal|"pattern"
argument_list|,
literal|"(aa)\\s+(bb)\\s+(cc)"
argument_list|,
literal|"replacement"
argument_list|,
literal|"$1$2$3"
argument_list|)
operator|.
name|create
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|TokenStream
name|ts
init|=
name|whitespaceMockTokenizer
argument_list|(
name|reader
argument_list|)
decl_stmt|;
name|assertTokenStreamContents
argument_list|(
name|ts
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"this"
block|,
literal|"is"
block|,
literal|"test."
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|5
block|,
literal|8
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|4
block|,
literal|7
block|,
literal|13
block|}
argument_list|)
expr_stmt|;
block|}
comment|// 012345678
comment|// aa bb cc
DECL|method|testReplaceByEmpty
specifier|public
name|void
name|testReplaceByEmpty
parameter_list|()
throws|throws
name|Exception
block|{
name|Reader
name|reader
init|=
operator|new
name|StringReader
argument_list|(
literal|"aa bb cc"
argument_list|)
decl_stmt|;
name|reader
operator|=
name|charFilterFactory
argument_list|(
literal|"PatternReplace"
argument_list|,
literal|"pattern"
argument_list|,
literal|"(aa)\\s+(bb)\\s+(cc)"
argument_list|)
operator|.
name|create
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|TokenStream
name|ts
init|=
name|whitespaceMockTokenizer
argument_list|(
name|reader
argument_list|)
decl_stmt|;
name|assertTokenStreamContents
argument_list|(
name|ts
argument_list|,
operator|new
name|String
index|[]
block|{}
argument_list|)
expr_stmt|;
block|}
comment|// 012345678
comment|// aa bb cc
comment|// aa#bb#cc
DECL|method|test1block1matchSameLength
specifier|public
name|void
name|test1block1matchSameLength
parameter_list|()
throws|throws
name|Exception
block|{
name|Reader
name|reader
init|=
operator|new
name|StringReader
argument_list|(
literal|"aa bb cc"
argument_list|)
decl_stmt|;
name|reader
operator|=
name|charFilterFactory
argument_list|(
literal|"PatternReplace"
argument_list|,
literal|"pattern"
argument_list|,
literal|"(aa)\\s+(bb)\\s+(cc)"
argument_list|,
literal|"replacement"
argument_list|,
literal|"$1#$2#$3"
argument_list|)
operator|.
name|create
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|TokenStream
name|ts
init|=
name|whitespaceMockTokenizer
argument_list|(
name|reader
argument_list|)
decl_stmt|;
name|assertTokenStreamContents
argument_list|(
name|ts
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"aa#bb#cc"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|8
block|}
argument_list|)
expr_stmt|;
block|}
comment|/** Test that bogus arguments result in exception */
DECL|method|testBogusArguments
specifier|public
name|void
name|testBogusArguments
parameter_list|()
throws|throws
name|Exception
block|{
name|IllegalArgumentException
name|expected
init|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|charFilterFactory
argument_list|(
literal|"PatternReplace"
argument_list|,
literal|"pattern"
argument_list|,
literal|"something"
argument_list|,
literal|"bogusArg"
argument_list|,
literal|"bogusValue"
argument_list|)
expr_stmt|;
block|}
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|expected
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Unknown parameters"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
