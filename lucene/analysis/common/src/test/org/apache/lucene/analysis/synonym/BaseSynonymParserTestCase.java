begin_unit
begin_package
DECL|package|org.apache.lucene.analysis.synonym
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|synonym
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Analyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|BaseTokenStreamTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|ByteArrayDataInput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|CharsRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IntsRefBuilder
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|fst
operator|.
name|Util
import|;
end_import
begin_comment
comment|/**  * Base class for testing synonym parsers.  */
end_comment
begin_class
DECL|class|BaseSynonymParserTestCase
specifier|public
specifier|abstract
class|class
name|BaseSynonymParserTestCase
extends|extends
name|BaseTokenStreamTestCase
block|{
comment|/**    * Helper method to validate synonym parsing.    *    * @param synonynMap  the generated synonym map after parsing    * @param word        word (phrase) we are validating the synonyms for. Should be the value that comes out of the analyzer.    *                    All spaces will be replaced by word separators.    * @param includeOrig if synonyms should include original    * @param synonyms    actual synonyms. All word separators are replaced with a single space.    */
DECL|method|assertEntryEquals
specifier|public
specifier|static
name|void
name|assertEntryEquals
parameter_list|(
name|SynonymMap
name|synonynMap
parameter_list|,
name|String
name|word
parameter_list|,
name|boolean
name|includeOrig
parameter_list|,
name|String
index|[]
name|synonyms
parameter_list|)
throws|throws
name|Exception
block|{
name|word
operator|=
name|word
operator|.
name|replace
argument_list|(
literal|' '
argument_list|,
name|SynonymMap
operator|.
name|WORD_SEPARATOR
argument_list|)
expr_stmt|;
name|BytesRef
name|value
init|=
name|Util
operator|.
name|get
argument_list|(
name|synonynMap
operator|.
name|fst
argument_list|,
name|Util
operator|.
name|toUTF32
argument_list|(
operator|new
name|CharsRef
argument_list|(
name|word
argument_list|)
argument_list|,
operator|new
name|IntsRefBuilder
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"No synonyms found for: "
operator|+
name|word
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|ByteArrayDataInput
name|bytesReader
init|=
operator|new
name|ByteArrayDataInput
argument_list|(
name|value
operator|.
name|bytes
argument_list|,
name|value
operator|.
name|offset
argument_list|,
name|value
operator|.
name|length
argument_list|)
decl_stmt|;
specifier|final
name|int
name|code
init|=
name|bytesReader
operator|.
name|readVInt
argument_list|()
decl_stmt|;
specifier|final
name|boolean
name|keepOrig
init|=
operator|(
name|code
operator|&
literal|0x1
operator|)
operator|==
literal|0
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Include original different than expected. Expected "
operator|+
name|includeOrig
operator|+
literal|" was "
operator|+
name|keepOrig
argument_list|,
name|includeOrig
argument_list|,
name|keepOrig
argument_list|)
expr_stmt|;
specifier|final
name|int
name|count
init|=
name|code
operator|>>>
literal|1
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Invalid synonym count. Expected "
operator|+
name|synonyms
operator|.
name|length
operator|+
literal|" was "
operator|+
name|count
argument_list|,
name|synonyms
operator|.
name|length
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|synonymSet
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|synonyms
argument_list|)
argument_list|)
decl_stmt|;
name|BytesRef
name|scratchBytes
init|=
operator|new
name|BytesRef
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|synonynMap
operator|.
name|words
operator|.
name|get
argument_list|(
name|bytesReader
operator|.
name|readVInt
argument_list|()
argument_list|,
name|scratchBytes
argument_list|)
expr_stmt|;
name|String
name|synonym
init|=
name|scratchBytes
operator|.
name|utf8ToString
argument_list|()
operator|.
name|replace
argument_list|(
name|SynonymMap
operator|.
name|WORD_SEPARATOR
argument_list|,
literal|' '
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Unexpected synonym found: "
operator|+
name|synonym
argument_list|,
name|synonymSet
operator|.
name|contains
argument_list|(
name|synonym
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Validates that there are no synonyms for the given word.    * @param synonynMap  the generated synonym map after parsing    * @param word        word (phrase) we are validating the synonyms for. Should be the value that comes out of the analyzer.    *                    All spaces will be replaced by word separators.    */
DECL|method|assertEntryAbsent
specifier|public
specifier|static
name|void
name|assertEntryAbsent
parameter_list|(
name|SynonymMap
name|synonynMap
parameter_list|,
name|String
name|word
parameter_list|)
throws|throws
name|IOException
block|{
name|word
operator|=
name|word
operator|.
name|replace
argument_list|(
literal|' '
argument_list|,
name|SynonymMap
operator|.
name|WORD_SEPARATOR
argument_list|)
expr_stmt|;
name|BytesRef
name|value
init|=
name|Util
operator|.
name|get
argument_list|(
name|synonynMap
operator|.
name|fst
argument_list|,
name|Util
operator|.
name|toUTF32
argument_list|(
operator|new
name|CharsRef
argument_list|(
name|word
argument_list|)
argument_list|,
operator|new
name|IntsRefBuilder
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
literal|"There should be no synonyms for: "
operator|+
name|word
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
DECL|method|assertEntryEquals
specifier|public
specifier|static
name|void
name|assertEntryEquals
parameter_list|(
name|SynonymMap
name|synonynMap
parameter_list|,
name|String
name|word
parameter_list|,
name|boolean
name|includeOrig
parameter_list|,
name|String
name|synonym
parameter_list|)
throws|throws
name|Exception
block|{
name|assertEntryEquals
argument_list|(
name|synonynMap
argument_list|,
name|word
argument_list|,
name|includeOrig
argument_list|,
operator|new
name|String
index|[]
block|{
name|synonym
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|assertAnalyzesToPositions
specifier|public
specifier|static
name|void
name|assertAnalyzesToPositions
parameter_list|(
name|Analyzer
name|a
parameter_list|,
name|String
name|input
parameter_list|,
name|String
index|[]
name|output
parameter_list|,
name|String
index|[]
name|types
parameter_list|,
name|int
index|[]
name|posIncrements
parameter_list|,
name|int
index|[]
name|posLengths
parameter_list|)
throws|throws
name|IOException
block|{
name|assertAnalyzesTo
argument_list|(
name|a
argument_list|,
name|input
argument_list|,
name|output
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|types
argument_list|,
name|posIncrements
argument_list|,
name|posLengths
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
