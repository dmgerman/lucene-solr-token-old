begin_unit
begin_package
DECL|package|org.apache.lucene.analysis.charfilter
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|charfilter
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Analyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|BaseTokenStreamTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|CharReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|MockTokenizer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Tokenizer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|_TestUtil
import|;
end_import
begin_class
DECL|class|HTMLStripCharFilterTest
specifier|public
class|class
name|HTMLStripCharFilterTest
extends|extends
name|BaseTokenStreamTestCase
block|{
DECL|method|newTestAnalyzer
specifier|static
specifier|private
name|Analyzer
name|newTestAnalyzer
parameter_list|()
block|{
return|return
operator|new
name|Analyzer
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|TokenStreamComponents
name|createComponents
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|Reader
name|reader
parameter_list|)
block|{
name|Tokenizer
name|tokenizer
init|=
operator|new
name|MockTokenizer
argument_list|(
name|reader
argument_list|,
name|MockTokenizer
operator|.
name|WHITESPACE
argument_list|,
literal|false
argument_list|)
decl_stmt|;
return|return
operator|new
name|TokenStreamComponents
argument_list|(
name|tokenizer
argument_list|,
name|tokenizer
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|Reader
name|initReader
parameter_list|(
name|Reader
name|reader
parameter_list|)
block|{
return|return
operator|new
name|HTMLStripCharFilter
argument_list|(
name|CharReader
operator|.
name|get
argument_list|(
name|reader
argument_list|)
argument_list|)
return|;
block|}
block|}
return|;
block|}
comment|//this is some text  here is a  link  and another  link . This is an entity:& plus a<.  Here is an&
comment|//
DECL|method|test
specifier|public
name|void
name|test
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|html
init|=
literal|"<div class=\"foo\">this is some text</div> here is a<a href=\"#bar\">link</a> and "
operator|+
literal|"another<a href=\"http://lucene.apache.org/\">link</a>. "
operator|+
literal|"This is an entity:&amp; plus a&lt;.  Here is an&.<!-- is a comment -->"
decl_stmt|;
name|String
name|gold
init|=
literal|"\nthis is some text\n here is a link and "
operator|+
literal|"another link. "
operator|+
literal|"This is an entity:& plus a<.  Here is an&. "
decl_stmt|;
name|HTMLStripCharFilter
name|reader
init|=
operator|new
name|HTMLStripCharFilter
argument_list|(
name|CharReader
operator|.
name|get
argument_list|(
operator|new
name|StringReader
argument_list|(
name|html
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|int
name|ch
init|=
operator|-
literal|1
decl_stmt|;
name|char
index|[]
name|goldArray
init|=
name|gold
operator|.
name|toCharArray
argument_list|()
decl_stmt|;
name|int
name|position
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|(
name|ch
operator|=
name|reader
operator|.
name|read
argument_list|()
operator|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|char
name|theChar
init|=
operator|(
name|char
operator|)
name|ch
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|theChar
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"\""
operator|+
name|theChar
operator|+
literal|"\""
operator|+
literal|" at position: "
operator|+
name|position
operator|+
literal|" does not equal: "
operator|+
name|goldArray
index|[
name|position
index|]
operator|+
literal|" Buffer so far: "
operator|+
name|builder
operator|+
literal|"<EOB>"
argument_list|,
name|theChar
operator|==
name|goldArray
index|[
name|position
index|]
argument_list|)
expr_stmt|;
name|position
operator|++
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"'"
operator|+
name|builder
operator|.
name|toString
argument_list|()
operator|+
literal|"' is not equal to '"
operator|+
name|gold
operator|+
literal|"'"
argument_list|,
name|gold
argument_list|,
name|builder
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//Some sanity checks, but not a full-fledged check
DECL|method|testHTML
specifier|public
name|void
name|testHTML
parameter_list|()
throws|throws
name|Exception
block|{
name|InputStream
name|stream
init|=
name|getClass
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
literal|"htmlStripReaderTest.html"
argument_list|)
decl_stmt|;
name|HTMLStripCharFilter
name|reader
init|=
operator|new
name|HTMLStripCharFilter
argument_list|(
name|CharReader
operator|.
name|get
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|stream
argument_list|,
literal|"UTF-8"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|int
name|ch
init|=
operator|-
literal|1
decl_stmt|;
while|while
condition|(
operator|(
name|ch
operator|=
name|reader
operator|.
name|read
argument_list|()
operator|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
name|ch
argument_list|)
expr_stmt|;
block|}
name|String
name|str
init|=
name|builder
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Entity not properly escaped"
argument_list|,
name|str
operator|.
name|indexOf
argument_list|(
literal|"&lt;"
argument_list|)
operator|==
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|//there is one> in the text
name|assertTrue
argument_list|(
literal|"Forrest should have been stripped out"
argument_list|,
name|str
operator|.
name|indexOf
argument_list|(
literal|"forrest"
argument_list|)
operator|==
operator|-
literal|1
operator|&&
name|str
operator|.
name|indexOf
argument_list|(
literal|"Forrest"
argument_list|)
operator|==
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"File should start with 'Welcome to Solr' after trimming"
argument_list|,
name|str
operator|.
name|trim
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"Welcome to Solr"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"File should start with 'Foundation.' after trimming"
argument_list|,
name|str
operator|.
name|trim
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"Foundation."
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testMSWord14GeneratedHTML
specifier|public
name|void
name|testMSWord14GeneratedHTML
parameter_list|()
throws|throws
name|Exception
block|{
name|InputStream
name|stream
init|=
name|getClass
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
literal|"MS-Word 14 generated.htm"
argument_list|)
decl_stmt|;
name|HTMLStripCharFilter
name|reader
init|=
operator|new
name|HTMLStripCharFilter
argument_list|(
name|CharReader
operator|.
name|get
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|stream
argument_list|,
literal|"UTF-8"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|gold
init|=
literal|"This is a test"
decl_stmt|;
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|int
name|ch
init|=
literal|0
decl_stmt|;
try|try
block|{
while|while
condition|(
operator|(
name|ch
operator|=
name|reader
operator|.
name|read
argument_list|()
operator|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
name|ch
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
comment|// System.out.println("String: " + builder.toString());
block|}
name|assertEquals
argument_list|(
literal|"'"
operator|+
name|builder
operator|.
name|toString
argument_list|()
operator|.
name|trim
argument_list|()
operator|+
literal|"' is not equal to '"
operator|+
name|gold
operator|+
literal|"'"
argument_list|,
name|gold
argument_list|,
name|builder
operator|.
name|toString
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testGamma
specifier|public
name|void
name|testGamma
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|test
init|=
literal|"&Gamma;"
decl_stmt|;
name|String
name|gold
init|=
literal|"\u0393"
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|set
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|set
operator|.
name|add
argument_list|(
literal|"reserved"
argument_list|)
expr_stmt|;
name|Reader
name|reader
init|=
operator|new
name|HTMLStripCharFilter
argument_list|(
name|CharReader
operator|.
name|get
argument_list|(
operator|new
name|StringReader
argument_list|(
name|test
argument_list|)
argument_list|)
argument_list|,
name|set
argument_list|)
decl_stmt|;
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|int
name|ch
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|(
name|ch
operator|=
name|reader
operator|.
name|read
argument_list|()
operator|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
name|ch
argument_list|)
expr_stmt|;
block|}
name|String
name|result
init|=
name|builder
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"'"
operator|+
name|result
operator|+
literal|"' is not equal to '"
operator|+
name|gold
operator|+
literal|"<EOS>'"
argument_list|,
name|gold
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
DECL|method|testEntities
specifier|public
name|void
name|testEntities
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|test
init|=
literal|"&nbsp;&lt;foo&gt;&Uuml;bermensch&#61;&Gamma; bar&#x393;"
decl_stmt|;
name|String
name|gold
init|=
literal|"<foo> \u00DCbermensch = \u0393 bar \u0393"
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|set
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|set
operator|.
name|add
argument_list|(
literal|"reserved"
argument_list|)
expr_stmt|;
name|Reader
name|reader
init|=
operator|new
name|HTMLStripCharFilter
argument_list|(
name|CharReader
operator|.
name|get
argument_list|(
operator|new
name|StringReader
argument_list|(
name|test
argument_list|)
argument_list|)
argument_list|,
name|set
argument_list|)
decl_stmt|;
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|int
name|ch
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|(
name|ch
operator|=
name|reader
operator|.
name|read
argument_list|()
operator|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
name|ch
argument_list|)
expr_stmt|;
block|}
name|String
name|result
init|=
name|builder
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"'"
operator|+
name|result
operator|+
literal|"' is not equal to '"
operator|+
name|gold
operator|+
literal|"<EOS>'"
argument_list|,
name|gold
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
DECL|method|testMoreEntities
specifier|public
name|void
name|testMoreEntities
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|test
init|=
literal|"&nbsp;&lt;junk/&gt;&nbsp;&#33;&#64; and&#8217;"
decl_stmt|;
name|String
name|gold
init|=
literal|"<junk/>   ! @ and â"
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|set
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|set
operator|.
name|add
argument_list|(
literal|"reserved"
argument_list|)
expr_stmt|;
name|Reader
name|reader
init|=
operator|new
name|HTMLStripCharFilter
argument_list|(
name|CharReader
operator|.
name|get
argument_list|(
operator|new
name|StringReader
argument_list|(
name|test
argument_list|)
argument_list|)
argument_list|,
name|set
argument_list|)
decl_stmt|;
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|int
name|ch
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|(
name|ch
operator|=
name|reader
operator|.
name|read
argument_list|()
operator|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
name|ch
argument_list|)
expr_stmt|;
block|}
name|String
name|result
init|=
name|builder
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"'"
operator|+
name|result
operator|+
literal|"' is not equal to '"
operator|+
name|gold
operator|+
literal|"<EOS>'"
argument_list|,
name|gold
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
DECL|method|testReserved
specifier|public
name|void
name|testReserved
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|test
init|=
literal|"aaa bbb<reserved ccc=\"ddddd\"> eeee</reserved> ffff<reserved ggg=\"hhhh\"/><other/>"
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|set
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|set
operator|.
name|add
argument_list|(
literal|"reserved"
argument_list|)
expr_stmt|;
name|Reader
name|reader
init|=
operator|new
name|HTMLStripCharFilter
argument_list|(
name|CharReader
operator|.
name|get
argument_list|(
operator|new
name|StringReader
argument_list|(
name|test
argument_list|)
argument_list|)
argument_list|,
name|set
argument_list|)
decl_stmt|;
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|int
name|ch
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|(
name|ch
operator|=
name|reader
operator|.
name|read
argument_list|()
operator|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
name|ch
argument_list|)
expr_stmt|;
block|}
name|String
name|result
init|=
name|builder
operator|.
name|toString
argument_list|()
decl_stmt|;
comment|// System.out.println("Result: " + result);
name|assertTrue
argument_list|(
literal|"Escaped tag not preserved: "
operator|+
name|result
operator|.
name|indexOf
argument_list|(
literal|"reserved"
argument_list|)
argument_list|,
name|result
operator|.
name|indexOf
argument_list|(
literal|"reserved"
argument_list|)
operator|==
literal|9
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Escaped tag not preserved: "
operator|+
name|result
operator|.
name|indexOf
argument_list|(
literal|"reserved"
argument_list|,
literal|15
argument_list|)
argument_list|,
name|result
operator|.
name|indexOf
argument_list|(
literal|"reserved"
argument_list|,
literal|15
argument_list|)
operator|==
literal|38
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Escaped tag not preserved: "
operator|+
name|result
operator|.
name|indexOf
argument_list|(
literal|"reserved"
argument_list|,
literal|41
argument_list|)
argument_list|,
name|result
operator|.
name|indexOf
argument_list|(
literal|"reserved"
argument_list|,
literal|41
argument_list|)
operator|==
literal|54
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Other tag should be removed"
argument_list|,
name|result
operator|.
name|indexOf
argument_list|(
literal|"other"
argument_list|)
operator|==
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|method|testMalformedHTML
specifier|public
name|void
name|testMalformedHTML
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|testGold
init|=
block|{
literal|"a<a hr<ef=aa<a>></close</a>"
block|,
literal|"a<a hr<ef=aa></close"
block|,
literal|"<a href=http://dmoz.org/cgi-bin/add.cgi?where=/arts/\" class=lu style=\"font-size: 9px\" target=dmoz>Submit a Site</a>"
block|,
literal|"Submit a Site"
block|,
literal|"<a href=javascript:ioSwitch('p8','http://www.csmonitor.com/') title=expand id=e8 class=expanded rel=http://www.csmonitor.com/>Christian Science"
block|,
literal|"Christian Science"
block|,
literal|"<link rel=\"alternate\" type=\"application/rss+xml\" title=\"San Francisco \" 2008 RSS Feed\" href=\"http://2008.sf.wordcamp.org/feed/\" />"
block|,
literal|"\n"
block|,
comment|// "<" before ">" inhibits tag recognition
literal|"<a href=\" http://www.surgery4was.happyhost.org/video-of-arthroscopic-knee-surgery symptoms.html, heat congestive heart failure<a href=\" http://www.symptoms1bad.happyhost.org/canine"
block|,
literal|"<a href=\" http://www.surgery4was.happyhost.org/video-of-arthroscopic-knee-surgery symptoms.html, heat congestive heart failure<a href=\" http://www.symptoms1bad.happyhost.org/canine"
block|,
literal|"<a href=\"http://ucblibraries.colorado.edu/how/index.htm\"class=\"pageNavAreaText\">"
block|,
literal|""
block|,
literal|"<link title=\"^\\\" 21Sta's Blog\" rel=\"search\"  type=\"application/opensearchdescription+xml\"  href=\"http://21sta.com/blog/inc/opensearch.php\" />"
block|,
literal|"\n"
block|,
literal|"<a href=\"#postcomment\" title=\"\"Leave a comment\";\">?"
block|,
literal|"?"
block|,
literal|"<a href='/modern-furniture'   ' id='21txt' class='offtab'   onMouseout=\"this.className='offtab';  return true;\" onMouseover=\"this.className='ontab';  return true;\">"
block|,
literal|""
block|,
literal|"<a href='http://alievi.wordpress.com/category/01-todos-posts/' style='font-size: 275%; padding: 1px; margin: 1px;' title='01 - Todos Post's (83)'>"
block|,
literal|""
block|,
literal|"The<a href=<a href=\"http://www.advancedmd.com>medical\">http://www.advancedmd.com>medical</a> practice software</a>"
block|,
literal|"The<a href=medical\">http://www.advancedmd.com>medical practice software"
block|,
literal|"<a href=\"node/21426\" class=\"clipTitle2\" title=\"Levi.com/BMX 2008 Clip of the Week 29 \"Morgan Wade Leftover Clips\"\">Levi.com/BMX 2008 Clip of the Week 29..."
block|,
literal|"Levi.com/BMX 2008 Clip of the Week 29..."
block|,
literal|"<a href=\"printer_friendly.php?branch=&year=&submit=go&screen=\";\">Printer Friendly"
block|,
literal|"Printer Friendly"
block|,
literal|"<a href=#\" ondragstart=\"return false\" onclick=\"window.external.AddFavorite('http://www.amazingtextures.com', 'Amazing Textures');return false\" onmouseover=\"window.status='Add to Favorites';return true\">Add to Favorites"
block|,
literal|"Add to Favorites"
block|,
literal|"<a href=\"../at_home/at_home_search.html\"../_home/at_home_search.html\">At"
block|,
literal|"At"
block|,
literal|"E-mail:<a href=\"\"mailto:XXXXXX@example.com\" \">XXXXXX@example.com</a>"
block|,
literal|"E-mail: XXXXXX@example.com "
block|,
literal|"<li class=\"farsi\"><a title=\"A'13?\" alt=\"A'13?\" href=\"http://www.america.gov/persian\" alt=\"\" name=\"A'13?\"A'13? title=\"A'13?\">A'13?</a></li>"
block|,
literal|"\nA'13?\n"
block|,
literal|"<li><a href=\"#28\" title=\"Hubert \"Geese\" Ausby\">Hubert \"Geese\" Ausby</a></li>"
block|,
literal|"\nHubert \"Geese\" Ausby\n"
block|,
literal|"<href=\"http://anbportal.com/mms/login.asp\">"
block|,
literal|"\n"
block|,
literal|"<a href=\""
block|,
literal|"<a href=\""
block|,
literal|"<a href=\">"
block|,
literal|""
block|,
literal|"<a rel=\"nofollow\" href=\"http://anissanina31.skyrock.com/1895039493-Hi-tout-le-monde.html\" title=\" Hi, tout le monde !>#</a>"
block|,
literal|"#"
block|,
literal|"<a href=\"http://annunciharleydavidsonusate.myblog.it/\" title=\"Annunci Moto e Accessori Harley Davidson\" target=\"_blank\"><img src=\"http://annunciharleydavidsonusate.myblog.it/images/Antipixel.gif\" /></a>"
block|,
literal|""
block|,
literal|"<a href=\"video/addvideo&v=120838887181\" onClick=\"return confirm('Are you sure you want  add this video to your profile? If it exists some video in your profile will be overlapped by this video!!')\" \" onmouseover=\"this.className='border2'\" onmouseout=\"this.className=''\">"
block|,
literal|""
block|,
literal|"<a href=#Services& Support>"
block|,
literal|""
block|,
comment|// "<" and ">" chars are accepted in on[Event] attribute values
literal|"<input type=\"image\" src=\"http://apologyindex.com/ThemeFiles/83401-72905/images/btn_search.gif\"value=\"Search\" name=\"Search\" alt=\"Search\" class=\"searchimage\" onclick=\"incom ='&sc=' + document.getElementById('sel').value ; var dt ='&dt=' + document.getElementById('dt').value; var searchKeyword = document.getElementById('q').value ; searchKeyword = searchKeyword.replace(/\\s/g,''); if (searchKeyword.length< 3){alert('Nothing to search. Search keyword should contain atleast 3 chars.'); return false; } var al='&al=' +  document.getElementById('advancedlink').style.display ;  document.location.href='http://apologyindex.com/search.aspx?q=' + document.getElementById('q').value + incom + dt + al;\" />"
block|,
literal|""
block|,
literal|"<input type=\"image\" src=\"images/afbe.gif\" width=\"22\" height=\"22\"  hspace=\"4\" title=\"Add to Favorite\" alt=\"Add to Favorite\"onClick=\" if(window.sidebar){ window.sidebar.addPanel(document.title,location.href,''); }else if(window.external){ window.external.AddFavorite(location.href,document.title); }else if(window.opera&&window.print) { return true; }\">"
block|,
literal|""
block|,
literal|"<area shape=\"rect\" coords=\"12,153,115,305\" href=\"http://statenislandtalk.com/v-web/gallery/Osmundsen-family\"Art's Norwegian Roots in Rogaland\">"
block|,
literal|"\n"
block|,
literal|"<a rel=\"nofollow\" href=\"http://arth26.skyrock.com/660188240-bonzai.html\" title=\"bonza>#"
block|,
literal|"#"
block|,
literal|"<a href=>"
block|,
literal|""
block|,
literal|"<ahref=http:.."
block|,
literal|"<ahref=http:.."
block|,
literal|"<ahref=http:..>"
block|,
literal|"\n"
block|,
literal|"<ahref=\"http://aseigo.bddf.ca/cms/1025\">A"
block|,
literal|"\nA"
block|,
literal|"<a href=\"javascript:calendar_window=window.open('/calendar.aspx?formname=frmCalendar.txtDate','calendar_window','width=154,height=188');calendar_window.focus()\">"
block|,
literal|""
block|,
literal|"<a href=\"/applications/defenseaerospace/19+rackmounts\" title=\"19\" Rackmounts\">"
block|,
literal|""
block|,
literal|"<a href=http://www.azimprimerie.fr/flash/backup/lewes-zip-code/savage-model-110-manual.html title=savage model 110 manual rel=dofollow>"
block|,
literal|""
block|,
literal|"<a class=\"at\" name=\"Lamborghini  href=\"http://lamborghini.coolbegin.com\">Lamborghini /a>"
block|,
literal|"Lamborghini /a>"
block|,
literal|"<A href='newslink.php?news_link=http%3A%2F%2Fwww.worldnetdaily.com%2Findex.php%3Ffa%3DPAGE.view%26pageId%3D85729&news_title=Florida QB makes 'John 3:16' hottest Google search Tebow inscribed Bible reference on eye black for championship game' TARGET=_blank>"
block|,
literal|""
block|,
literal|"<a href=/myspace !style='color:#993333'>"
block|,
literal|""
block|,
literal|"<meta name=3DProgId content=3DExcel.Sheet>"
block|,
literal|"\n"
block|,
literal|"<link id=3D\"shLink\" href=3D\"PSABrKelly-BADMINTONCupResults08FINAL2008_09_19=_files/sheet004.htm\">"
block|,
literal|"\n"
block|,
literal|"<td bgcolor=3D\"#FFFFFF\" nowrap>"
block|,
literal|"\n"
block|,
literal|"<a href=\"http://basnect.info/usersearch/\"predicciones-mundiales-2009\".html\">\"predicciones mundiales 2009\"</a>"
block|,
literal|"\"predicciones mundiales 2009\""
block|,
literal|"<a class=\"comment-link\" href=\"https://www.blogger.com/comment.g?blogID=19402125&postID=114070605958684588\"location.href=https://www.blogger.com/comment.g?blogID=19402125&postID=114070605958684588;>"
block|,
literal|""
block|,
literal|"<a href = \"/videos/Bishop\"/\" title = \"click to see more Bishop\" videos\">Bishop\"</a>"
block|,
literal|"Bishop\""
block|,
literal|"<a href=\"http://bhaa.ie/calendar/event.php?eid=20081203150127531\"\">BHAA Eircom 2&amp; 5 miles CC combined start</a>"
block|,
literal|"BHAA Eircom 2& 5 miles CC combined start"
block|,
literal|"<a href=\"http://people.tribe.net/wolfmana\" onClick='setClick(\"Application[tribe].Person[bb7df210-9dc0-478c-917f-436b896bcb79]\")'\" title=\"Mana\">"
block|,
literal|""
block|,
literal|"<a  href=\"http://blog.edu-cyberpg.com/ct.ashx?id=6143c528-080c-4bb2-b765-5ec56c8256d3&url=http%3a%2f%2fwww.gsa.ac.uk%2fmackintoshsketchbook%2f\"\" eudora=\"autourl\">"
block|,
literal|""
block|,
comment|// "<" before ">" inhibits tag recognition
literal|"<input type=\"text\" value=\"<search here>\">"
block|,
literal|"<input type=\"text\" value=\"\n\">"
block|,
literal|"<input type=\"text\" value=\"<search here\">"
block|,
literal|"<input type=\"text\" value=\"\n"
block|,
literal|"<input type=\"text\" value=\"search here>\">"
block|,
literal|"\">"
block|,
comment|// "<" and ">" chars are accepted in on[Event] attribute values
literal|"<input type=\"text\" value=\"&lt;search here&gt;\" onFocus=\"this.value='<search here>'\">"
block|,
literal|""
block|,
literal|"<![if ! IE]>\n<link href=\"http://i.deviantart.com/icons/favicon.png\" rel=\"shortcut icon\"/>\n<![endif]>"
block|,
literal|"\n\n\n"
block|,
literal|"<![if supportMisalignedColumns]>\n<tr height=0 style='display:none'>\n<td width=64 style='width:48pt'></td>\n</tr>\n<![endif]>"
block|,
literal|"\n\n\n\n\n\n\n\n"
block|,     }
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|testGold
operator|.
name|length
condition|;
name|i
operator|+=
literal|2
control|)
block|{
name|String
name|test
init|=
name|testGold
index|[
name|i
index|]
decl_stmt|;
name|String
name|gold
init|=
name|testGold
index|[
name|i
operator|+
literal|1
index|]
decl_stmt|;
name|Reader
name|reader
init|=
operator|new
name|HTMLStripCharFilter
argument_list|(
name|CharReader
operator|.
name|get
argument_list|(
operator|new
name|StringReader
argument_list|(
name|test
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|int
name|ch
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|(
name|ch
operator|=
name|reader
operator|.
name|read
argument_list|()
operator|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
name|ch
argument_list|)
expr_stmt|;
block|}
name|String
name|result
init|=
name|builder
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Test: '"
operator|+
name|test
operator|+
literal|"'"
argument_list|,
name|gold
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testBufferOverflow
specifier|public
name|void
name|testBufferOverflow
parameter_list|()
throws|throws
name|Exception
block|{
name|StringBuilder
name|testBuilder
init|=
operator|new
name|StringBuilder
argument_list|(
name|HTMLStripCharFilter
operator|.
name|getInitialBufferSize
argument_list|()
operator|+
literal|50
argument_list|)
decl_stmt|;
name|testBuilder
operator|.
name|append
argument_list|(
literal|"ah<?> ??????"
argument_list|)
expr_stmt|;
name|appendChars
argument_list|(
name|testBuilder
argument_list|,
name|HTMLStripCharFilter
operator|.
name|getInitialBufferSize
argument_list|()
operator|+
literal|500
argument_list|)
expr_stmt|;
name|processBuffer
argument_list|(
name|testBuilder
operator|.
name|toString
argument_list|()
argument_list|,
literal|"Failed on pseudo proc. instr."
argument_list|)
expr_stmt|;
comment|//processing instructions
name|testBuilder
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|testBuilder
operator|.
name|append
argument_list|(
literal|"<!--"
argument_list|)
expr_stmt|;
comment|//comments
name|appendChars
argument_list|(
name|testBuilder
argument_list|,
literal|3
operator|*
name|HTMLStripCharFilter
operator|.
name|getInitialBufferSize
argument_list|()
operator|+
literal|500
argument_list|)
expr_stmt|;
comment|//comments have two lookaheads
name|testBuilder
operator|.
name|append
argument_list|(
literal|"-->foo"
argument_list|)
expr_stmt|;
name|String
name|gold
init|=
literal|"foo"
decl_stmt|;
name|Reader
name|reader
init|=
operator|new
name|HTMLStripCharFilter
argument_list|(
name|CharReader
operator|.
name|get
argument_list|(
operator|new
name|StringReader
argument_list|(
name|testBuilder
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|ch
init|=
literal|0
decl_stmt|;
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
try|try
block|{
while|while
condition|(
operator|(
name|ch
operator|=
name|reader
operator|.
name|read
argument_list|()
operator|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
name|ch
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
comment|// System.out.println("String: " + builder.toString());
block|}
name|assertEquals
argument_list|(
literal|"'"
operator|+
name|builder
operator|.
name|toString
argument_list|()
operator|+
literal|"' is not equal to '"
operator|+
name|gold
operator|+
literal|"'"
argument_list|,
name|gold
argument_list|,
name|builder
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|testBuilder
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|testBuilder
operator|.
name|append
argument_list|(
literal|"<?"
argument_list|)
expr_stmt|;
name|appendChars
argument_list|(
name|testBuilder
argument_list|,
name|HTMLStripCharFilter
operator|.
name|getInitialBufferSize
argument_list|()
operator|+
literal|500
argument_list|)
expr_stmt|;
name|testBuilder
operator|.
name|append
argument_list|(
literal|"?>"
argument_list|)
expr_stmt|;
name|gold
operator|=
literal|""
expr_stmt|;
name|reader
operator|=
operator|new
name|HTMLStripCharFilter
argument_list|(
name|CharReader
operator|.
name|get
argument_list|(
operator|new
name|StringReader
argument_list|(
name|testBuilder
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|ch
operator|=
literal|0
expr_stmt|;
name|builder
operator|=
operator|new
name|StringBuilder
argument_list|()
expr_stmt|;
try|try
block|{
while|while
condition|(
operator|(
name|ch
operator|=
name|reader
operator|.
name|read
argument_list|()
operator|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
name|ch
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
comment|// System.out.println("String: " + builder.toString());
block|}
name|assertEquals
argument_list|(
literal|"'"
operator|+
name|builder
operator|.
name|toString
argument_list|()
operator|+
literal|"' is not equal to '"
operator|+
name|gold
operator|+
literal|"'"
argument_list|,
name|gold
argument_list|,
name|builder
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|testBuilder
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|testBuilder
operator|.
name|append
argument_list|(
literal|"<b "
argument_list|)
expr_stmt|;
name|appendChars
argument_list|(
name|testBuilder
argument_list|,
name|HTMLStripCharFilter
operator|.
name|getInitialBufferSize
argument_list|()
operator|+
literal|500
argument_list|)
expr_stmt|;
name|testBuilder
operator|.
name|append
argument_list|(
literal|"/>"
argument_list|)
expr_stmt|;
name|gold
operator|=
literal|""
expr_stmt|;
name|reader
operator|=
operator|new
name|HTMLStripCharFilter
argument_list|(
name|CharReader
operator|.
name|get
argument_list|(
operator|new
name|StringReader
argument_list|(
name|testBuilder
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|ch
operator|=
literal|0
expr_stmt|;
name|builder
operator|=
operator|new
name|StringBuilder
argument_list|()
expr_stmt|;
try|try
block|{
while|while
condition|(
operator|(
name|ch
operator|=
name|reader
operator|.
name|read
argument_list|()
operator|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
name|ch
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
comment|// System.out.println("String: " + builder.toString());
block|}
name|assertEquals
argument_list|(
literal|"'"
operator|+
name|builder
operator|.
name|toString
argument_list|()
operator|+
literal|"' is not equal to '"
operator|+
name|gold
operator|+
literal|"'"
argument_list|,
name|gold
argument_list|,
name|builder
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|appendChars
specifier|private
name|void
name|appendChars
parameter_list|(
name|StringBuilder
name|testBuilder
parameter_list|,
name|int
name|numChars
parameter_list|)
block|{
name|int
name|i1
init|=
name|numChars
operator|/
literal|2
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|i1
condition|;
name|i
operator|++
control|)
block|{
name|testBuilder
operator|.
name|append
argument_list|(
literal|'a'
argument_list|)
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
comment|//tack on enough to go beyond the mark readahead limit, since<?> makes HTMLStripCharFilter think it is a processing instruction
block|}
block|}
DECL|method|processBuffer
specifier|private
name|void
name|processBuffer
parameter_list|(
name|String
name|test
parameter_list|,
name|String
name|assertMsg
parameter_list|)
throws|throws
name|IOException
block|{
comment|// System.out.println("-------------------processBuffer----------");
name|Reader
name|reader
init|=
operator|new
name|HTMLStripCharFilter
argument_list|(
name|CharReader
operator|.
name|get
argument_list|(
operator|new
name|BufferedReader
argument_list|(
operator|new
name|StringReader
argument_list|(
name|test
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
comment|//force the use of BufferedReader
name|int
name|ch
init|=
literal|0
decl_stmt|;
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
try|try
block|{
while|while
condition|(
operator|(
name|ch
operator|=
name|reader
operator|.
name|read
argument_list|()
operator|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
name|ch
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
comment|// System.out.println("String (trimmed): " + builder.toString().trim() + "<EOS>");
block|}
name|assertEquals
argument_list|(
name|assertMsg
operator|+
literal|"::: "
operator|+
name|builder
operator|.
name|toString
argument_list|()
operator|+
literal|" is not equal to "
operator|+
name|test
argument_list|,
name|test
argument_list|,
name|builder
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testComment
specifier|public
name|void
name|testComment
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|test
init|=
literal|"<!--- three dashes, still a valid comment ---> "
decl_stmt|;
name|String
name|gold
init|=
literal|" "
decl_stmt|;
name|Reader
name|reader
init|=
operator|new
name|HTMLStripCharFilter
argument_list|(
name|CharReader
operator|.
name|get
argument_list|(
operator|new
name|BufferedReader
argument_list|(
operator|new
name|StringReader
argument_list|(
name|test
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
comment|//force the use of BufferedReader
name|int
name|ch
init|=
literal|0
decl_stmt|;
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
try|try
block|{
while|while
condition|(
operator|(
name|ch
operator|=
name|reader
operator|.
name|read
argument_list|()
operator|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
name|ch
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
comment|// System.out.println("String: " + builder.toString());
block|}
name|assertEquals
argument_list|(
literal|"'"
operator|+
name|builder
operator|.
name|toString
argument_list|()
operator|+
literal|"' is not equal to '"
operator|+
name|gold
operator|+
literal|"'"
argument_list|,
name|gold
argument_list|,
name|builder
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|doTestOffsets
specifier|public
name|void
name|doTestOffsets
parameter_list|(
name|String
name|in
parameter_list|)
throws|throws
name|Exception
block|{
name|HTMLStripCharFilter
name|reader
init|=
operator|new
name|HTMLStripCharFilter
argument_list|(
name|CharReader
operator|.
name|get
argument_list|(
operator|new
name|BufferedReader
argument_list|(
operator|new
name|StringReader
argument_list|(
name|in
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|ch
init|=
literal|0
decl_stmt|;
name|int
name|off
init|=
literal|0
decl_stmt|;
comment|// offset in the reader
name|int
name|strOff
init|=
operator|-
literal|1
decl_stmt|;
comment|// offset in the original string
while|while
condition|(
operator|(
name|ch
operator|=
name|reader
operator|.
name|read
argument_list|()
operator|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|int
name|correctedOff
init|=
name|reader
operator|.
name|correctOffset
argument_list|(
name|off
argument_list|)
decl_stmt|;
if|if
condition|(
name|ch
operator|==
literal|'X'
condition|)
block|{
name|strOff
operator|=
name|in
operator|.
name|indexOf
argument_list|(
literal|'X'
argument_list|,
name|strOff
operator|+
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|strOff
argument_list|,
name|correctedOff
argument_list|)
expr_stmt|;
block|}
name|off
operator|++
expr_stmt|;
block|}
block|}
DECL|method|testOffsets
specifier|public
name|void
name|testOffsets
parameter_list|()
throws|throws
name|Exception
block|{
comment|//    doTestOffsets("hello X how X are you");
name|doTestOffsets
argument_list|(
literal|"hello<p> X<p> how<p>X are you"
argument_list|)
expr_stmt|;
name|doTestOffsets
argument_list|(
literal|"X&amp; X&#40; X&lt;&gt; X"
argument_list|)
expr_stmt|;
comment|// test backtracking
name|doTestOffsets
argument_list|(
literal|"X<&zz>X&#< X><&l>&g< X"
argument_list|)
expr_stmt|;
block|}
DECL|method|assertLegalOffsets
specifier|static
name|void
name|assertLegalOffsets
parameter_list|(
name|String
name|in
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|length
init|=
name|in
operator|.
name|length
argument_list|()
decl_stmt|;
name|HTMLStripCharFilter
name|reader
init|=
operator|new
name|HTMLStripCharFilter
argument_list|(
name|CharReader
operator|.
name|get
argument_list|(
operator|new
name|BufferedReader
argument_list|(
operator|new
name|StringReader
argument_list|(
name|in
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|ch
init|=
literal|0
decl_stmt|;
name|int
name|off
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|(
name|ch
operator|=
name|reader
operator|.
name|read
argument_list|()
operator|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|int
name|correction
init|=
name|reader
operator|.
name|correctOffset
argument_list|(
name|off
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"invalid offset correction: "
operator|+
name|off
operator|+
literal|"->"
operator|+
name|correction
operator|+
literal|" for doc of length: "
operator|+
name|length
argument_list|,
name|correction
operator|<=
name|length
argument_list|)
expr_stmt|;
name|off
operator|++
expr_stmt|;
block|}
block|}
DECL|method|testLegalOffsets
specifier|public
name|void
name|testLegalOffsets
parameter_list|()
throws|throws
name|Exception
block|{
name|assertLegalOffsets
argument_list|(
literal|"hello world"
argument_list|)
expr_stmt|;
name|assertLegalOffsets
argument_list|(
literal|"hello&#x world"
argument_list|)
expr_stmt|;
block|}
DECL|method|testRandom
specifier|public
name|void
name|testRandom
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|numRounds
init|=
name|RANDOM_MULTIPLIER
operator|*
literal|10000
decl_stmt|;
name|checkRandomData
argument_list|(
name|random
argument_list|()
argument_list|,
name|newTestAnalyzer
argument_list|()
argument_list|,
name|numRounds
argument_list|)
expr_stmt|;
block|}
DECL|method|testRandomHugeStrings
specifier|public
name|void
name|testRandomHugeStrings
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|numRounds
init|=
name|RANDOM_MULTIPLIER
operator|*
literal|200
decl_stmt|;
name|checkRandomData
argument_list|(
name|random
argument_list|()
argument_list|,
name|newTestAnalyzer
argument_list|()
argument_list|,
name|numRounds
argument_list|,
literal|8192
argument_list|)
expr_stmt|;
block|}
DECL|method|testCloseBR
specifier|public
name|void
name|testCloseBR
parameter_list|()
throws|throws
name|Exception
block|{
name|checkAnalysisConsistency
argument_list|(
name|random
argument_list|()
argument_list|,
name|newTestAnalyzer
argument_list|()
argument_list|,
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
argument_list|,
literal|" Secretary)</br> [[M"
argument_list|)
expr_stmt|;
block|}
DECL|method|testServerSideIncludes
specifier|public
name|void
name|testServerSideIncludes
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|test
init|=
literal|"one<img src=\"image.png\"\n"
operator|+
literal|" alt =  \"Alt:<!--#echo var='${IMAGE_CAPTION:<!--comment-->\\'Comment\\'}'  -->\"\n\n"
operator|+
literal|" title=\"Title:<!--#echo var=\"IMAGE_CAPTION\"-->\">two"
decl_stmt|;
name|String
name|gold
init|=
literal|"onetwo"
decl_stmt|;
name|Reader
name|reader
init|=
operator|new
name|HTMLStripCharFilter
argument_list|(
name|CharReader
operator|.
name|get
argument_list|(
operator|new
name|StringReader
argument_list|(
name|test
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|ch
init|=
literal|0
decl_stmt|;
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
try|try
block|{
while|while
condition|(
operator|(
name|ch
operator|=
name|reader
operator|.
name|read
argument_list|()
operator|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
name|ch
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
comment|// System.out.println("String: " + builder.toString());
block|}
name|assertTrue
argument_list|(
name|builder
operator|.
name|toString
argument_list|()
operator|+
literal|" is not equal to "
operator|+
name|gold
argument_list|,
name|builder
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|gold
argument_list|)
argument_list|)
expr_stmt|;
name|test
operator|=
literal|"one<script><!--<!--#config comment=\"<!-- \\\"comment\\\"-->\"--> --></script>two"
expr_stmt|;
name|gold
operator|=
literal|"one\ntwo"
expr_stmt|;
name|reader
operator|=
operator|new
name|HTMLStripCharFilter
argument_list|(
name|CharReader
operator|.
name|get
argument_list|(
operator|new
name|StringReader
argument_list|(
name|test
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|ch
operator|=
literal|0
expr_stmt|;
name|builder
operator|=
operator|new
name|StringBuilder
argument_list|()
expr_stmt|;
try|try
block|{
while|while
condition|(
operator|(
name|ch
operator|=
name|reader
operator|.
name|read
argument_list|()
operator|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
name|ch
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
comment|// System.out.println("String: " + builder.toString());
block|}
name|assertEquals
argument_list|(
literal|"'"
operator|+
name|builder
operator|.
name|toString
argument_list|()
operator|+
literal|"' is not equal to '"
operator|+
name|gold
operator|+
literal|"'"
argument_list|,
name|gold
argument_list|,
name|builder
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testScriptQuotes
specifier|public
name|void
name|testScriptQuotes
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|test
init|=
literal|"one<script attr= bare><!-- action('<!-- comment -->', \"\\\"-->\\\"\"); --></script>two"
decl_stmt|;
name|String
name|gold
init|=
literal|"one\ntwo"
decl_stmt|;
name|Reader
name|reader
init|=
operator|new
name|HTMLStripCharFilter
argument_list|(
name|CharReader
operator|.
name|get
argument_list|(
operator|new
name|StringReader
argument_list|(
name|test
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|ch
init|=
literal|0
decl_stmt|;
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
try|try
block|{
while|while
condition|(
operator|(
name|ch
operator|=
name|reader
operator|.
name|read
argument_list|()
operator|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
name|ch
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
comment|// System.out.println("String: " + builder.toString());
block|}
name|assertEquals
argument_list|(
literal|"'"
operator|+
name|builder
operator|.
name|toString
argument_list|()
operator|+
literal|"' is not equal to '"
operator|+
name|gold
operator|+
literal|"'"
argument_list|,
name|gold
argument_list|,
name|builder
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|test
operator|=
literal|"hello<script><!-- f('<!--internal--></script>'); --></script>"
expr_stmt|;
name|gold
operator|=
literal|"hello\n"
expr_stmt|;
name|reader
operator|=
operator|new
name|HTMLStripCharFilter
argument_list|(
name|CharReader
operator|.
name|get
argument_list|(
operator|new
name|StringReader
argument_list|(
name|test
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|ch
operator|=
literal|0
expr_stmt|;
name|builder
operator|=
operator|new
name|StringBuilder
argument_list|()
expr_stmt|;
try|try
block|{
while|while
condition|(
operator|(
name|ch
operator|=
name|reader
operator|.
name|read
argument_list|()
operator|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
name|ch
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
comment|// System.out.println("String: " + builder.toString());
block|}
name|assertEquals
argument_list|(
literal|"'"
operator|+
name|builder
operator|.
name|toString
argument_list|()
operator|+
literal|"' is not equal to '"
operator|+
name|gold
operator|+
literal|"'"
argument_list|,
name|gold
argument_list|,
name|builder
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testEscapeScript
specifier|public
name|void
name|testEscapeScript
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|test
init|=
literal|"one<script no-value-attr>callSomeMethod();</script>two"
decl_stmt|;
name|String
name|gold
init|=
literal|"one<script no-value-attr></script>two"
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|escapedTags
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"SCRIPT"
argument_list|)
argument_list|)
decl_stmt|;
name|Reader
name|reader
init|=
operator|new
name|HTMLStripCharFilter
argument_list|(
name|CharReader
operator|.
name|get
argument_list|(
operator|new
name|StringReader
argument_list|(
name|test
argument_list|)
argument_list|)
argument_list|,
name|escapedTags
argument_list|)
decl_stmt|;
name|int
name|ch
init|=
literal|0
decl_stmt|;
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
try|try
block|{
while|while
condition|(
operator|(
name|ch
operator|=
name|reader
operator|.
name|read
argument_list|()
operator|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
name|ch
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
comment|// System.out.println("String: " + builder.toString());
block|}
name|assertEquals
argument_list|(
literal|"'"
operator|+
name|builder
operator|.
name|toString
argument_list|()
operator|+
literal|"' is not equal to '"
operator|+
name|gold
operator|+
literal|"'"
argument_list|,
name|gold
argument_list|,
name|builder
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testStyle
specifier|public
name|void
name|testStyle
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|test
init|=
literal|"one<style type=\"text/css\">\n"
operator|+
literal|"<!--\n"
operator|+
literal|"@import url('http://www.lasletrasdecanciones.com/css.css');\n"
operator|+
literal|"-->\n"
operator|+
literal|"</style>two"
decl_stmt|;
name|String
name|gold
init|=
literal|"one\ntwo"
decl_stmt|;
name|Reader
name|reader
init|=
operator|new
name|HTMLStripCharFilter
argument_list|(
name|CharReader
operator|.
name|get
argument_list|(
operator|new
name|StringReader
argument_list|(
name|test
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|ch
init|=
literal|0
decl_stmt|;
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
try|try
block|{
while|while
condition|(
operator|(
name|ch
operator|=
name|reader
operator|.
name|read
argument_list|()
operator|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
name|ch
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
comment|// System.out.println("String: " + builder.toString());
block|}
name|assertEquals
argument_list|(
literal|"'"
operator|+
name|builder
operator|.
name|toString
argument_list|()
operator|+
literal|"' is not equal to '"
operator|+
name|gold
operator|+
literal|"'"
argument_list|,
name|gold
argument_list|,
name|builder
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testEscapeStyle
specifier|public
name|void
name|testEscapeStyle
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|test
init|=
literal|"one<style type=\"text/css\"> body,font,a { font-family:arial; }</style>two"
decl_stmt|;
name|String
name|gold
init|=
literal|"one<style type=\"text/css\"></style>two"
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|escapedTags
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"STYLE"
argument_list|)
argument_list|)
decl_stmt|;
name|Reader
name|reader
init|=
operator|new
name|HTMLStripCharFilter
argument_list|(
name|CharReader
operator|.
name|get
argument_list|(
operator|new
name|StringReader
argument_list|(
name|test
argument_list|)
argument_list|)
argument_list|,
name|escapedTags
argument_list|)
decl_stmt|;
name|int
name|ch
init|=
literal|0
decl_stmt|;
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
try|try
block|{
while|while
condition|(
operator|(
name|ch
operator|=
name|reader
operator|.
name|read
argument_list|()
operator|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
name|ch
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
comment|// System.out.println("String: " + builder.toString());
block|}
name|assertEquals
argument_list|(
literal|"'"
operator|+
name|builder
operator|.
name|toString
argument_list|()
operator|+
literal|"' is not equal to '"
operator|+
name|gold
operator|+
literal|"'"
argument_list|,
name|gold
argument_list|,
name|builder
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testBR
specifier|public
name|void
name|testBR
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|testGold
init|=
block|{
literal|"one<BR />two<br>three"
block|,
literal|"one\ntwo\nthree"
block|,
literal|"one<BR some stuff here too>two</BR>"
block|,
literal|"one\ntwo\n"
block|,     }
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|testGold
operator|.
name|length
condition|;
name|i
operator|+=
literal|2
control|)
block|{
name|String
name|test
init|=
name|testGold
index|[
name|i
index|]
decl_stmt|;
name|String
name|gold
init|=
name|testGold
index|[
name|i
operator|+
literal|1
index|]
decl_stmt|;
name|Reader
name|reader
init|=
operator|new
name|HTMLStripCharFilter
argument_list|(
name|CharReader
operator|.
name|get
argument_list|(
operator|new
name|StringReader
argument_list|(
name|test
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|int
name|ch
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|(
name|ch
operator|=
name|reader
operator|.
name|read
argument_list|()
operator|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
name|ch
argument_list|)
expr_stmt|;
block|}
name|String
name|result
init|=
name|builder
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Test: '"
operator|+
name|test
operator|+
literal|"'"
argument_list|,
name|gold
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testEscapeBR
specifier|public
name|void
name|testEscapeBR
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|test
init|=
literal|"one<BR class='whatever'>two</\nBR\n>"
decl_stmt|;
name|String
name|gold
init|=
literal|"one<BR class='whatever'>two</\nBR\n>"
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|escapedTags
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"BR"
argument_list|)
argument_list|)
decl_stmt|;
name|Reader
name|reader
init|=
operator|new
name|HTMLStripCharFilter
argument_list|(
name|CharReader
operator|.
name|get
argument_list|(
operator|new
name|StringReader
argument_list|(
name|test
argument_list|)
argument_list|)
argument_list|,
name|escapedTags
argument_list|)
decl_stmt|;
name|int
name|ch
init|=
literal|0
decl_stmt|;
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
try|try
block|{
while|while
condition|(
operator|(
name|ch
operator|=
name|reader
operator|.
name|read
argument_list|()
operator|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
name|ch
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
comment|// System.out.println("String: " + builder.toString());
block|}
name|assertEquals
argument_list|(
literal|"'"
operator|+
name|builder
operator|.
name|toString
argument_list|()
operator|+
literal|"' is not equal to '"
operator|+
name|gold
operator|+
literal|"'"
argument_list|,
name|gold
argument_list|,
name|builder
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testInlineTagsNoSpace
specifier|public
name|void
name|testInlineTagsNoSpace
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|test
init|=
literal|"one<sPAn class=\"invisible\">two<sup>2<sup>e</sup></sup>.</SpaN>three"
decl_stmt|;
name|String
name|gold
init|=
literal|"onetwo2e.three"
decl_stmt|;
name|Reader
name|reader
init|=
operator|new
name|HTMLStripCharFilter
argument_list|(
name|CharReader
operator|.
name|get
argument_list|(
operator|new
name|StringReader
argument_list|(
name|test
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|ch
init|=
literal|0
decl_stmt|;
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
try|try
block|{
while|while
condition|(
operator|(
name|ch
operator|=
name|reader
operator|.
name|read
argument_list|()
operator|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
name|ch
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
comment|// System.out.println("String: " + builder.toString());
block|}
name|assertEquals
argument_list|(
literal|"'"
operator|+
name|builder
operator|.
name|toString
argument_list|()
operator|+
literal|"' is not equal to '"
operator|+
name|gold
operator|+
literal|"'"
argument_list|,
name|gold
argument_list|,
name|builder
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testCDATA
specifier|public
name|void
name|testCDATA
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|test
init|=
literal|"one<![CDATA[<one><two>three<four></four></two></one>]]>two"
decl_stmt|;
name|String
name|gold
init|=
literal|"one<one><two>three<four></four></two></one>two"
decl_stmt|;
name|Reader
name|reader
init|=
operator|new
name|HTMLStripCharFilter
argument_list|(
name|CharReader
operator|.
name|get
argument_list|(
operator|new
name|StringReader
argument_list|(
name|test
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|ch
init|=
literal|0
decl_stmt|;
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
try|try
block|{
while|while
condition|(
operator|(
name|ch
operator|=
name|reader
operator|.
name|read
argument_list|()
operator|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
name|ch
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
comment|// System.out.println("String: " + builder.toString());
block|}
name|assertEquals
argument_list|(
literal|"'"
operator|+
name|builder
operator|.
name|toString
argument_list|()
operator|+
literal|"' is not equal to '"
operator|+
name|gold
operator|+
literal|"'"
argument_list|,
name|gold
argument_list|,
name|builder
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|test
operator|=
literal|"one<![CDATA[two<![CDATA[three]]]]><![CDATA[>four]]>five"
expr_stmt|;
name|gold
operator|=
literal|"onetwo<![CDATA[three]]>fourfive"
expr_stmt|;
name|reader
operator|=
operator|new
name|HTMLStripCharFilter
argument_list|(
name|CharReader
operator|.
name|get
argument_list|(
operator|new
name|StringReader
argument_list|(
name|test
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|ch
operator|=
literal|0
expr_stmt|;
name|builder
operator|=
operator|new
name|StringBuilder
argument_list|()
expr_stmt|;
try|try
block|{
while|while
condition|(
operator|(
name|ch
operator|=
name|reader
operator|.
name|read
argument_list|()
operator|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
name|ch
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
comment|// System.out.println("String: " + builder.toString());
block|}
name|assertEquals
argument_list|(
literal|"'"
operator|+
name|builder
operator|.
name|toString
argument_list|()
operator|+
literal|"' is not equal to '"
operator|+
name|gold
operator|+
literal|"'"
argument_list|,
name|gold
argument_list|,
name|builder
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testUppercaseCharacterEntityVariants
specifier|public
name|void
name|testUppercaseCharacterEntityVariants
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|test
init|=
literal|"&QUOT;-&COPY;&GT;>&LT;<&REG;&AMP;"
decl_stmt|;
name|String
name|gold
init|=
literal|" \"-\u00A9>><<\u00AE&"
decl_stmt|;
name|Reader
name|reader
init|=
operator|new
name|HTMLStripCharFilter
argument_list|(
name|CharReader
operator|.
name|get
argument_list|(
operator|new
name|StringReader
argument_list|(
name|test
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|ch
init|=
literal|0
decl_stmt|;
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
try|try
block|{
while|while
condition|(
operator|(
name|ch
operator|=
name|reader
operator|.
name|read
argument_list|()
operator|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
name|ch
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
comment|// System.out.println("String: " + builder.toString());
block|}
name|assertEquals
argument_list|(
literal|"'"
operator|+
name|builder
operator|.
name|toString
argument_list|()
operator|+
literal|"' is not equal to '"
operator|+
name|gold
operator|+
literal|"'"
argument_list|,
name|gold
argument_list|,
name|builder
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testMSWordMalformedProcessingInstruction
specifier|public
name|void
name|testMSWordMalformedProcessingInstruction
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|test
init|=
literal|"one<?xml:namespace prefix = o ns = \"urn:schemas-microsoft-com:office:office\" />two"
decl_stmt|;
name|String
name|gold
init|=
literal|"onetwo"
decl_stmt|;
name|Reader
name|reader
init|=
operator|new
name|HTMLStripCharFilter
argument_list|(
name|CharReader
operator|.
name|get
argument_list|(
operator|new
name|StringReader
argument_list|(
name|test
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|ch
init|=
literal|0
decl_stmt|;
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
try|try
block|{
while|while
condition|(
operator|(
name|ch
operator|=
name|reader
operator|.
name|read
argument_list|()
operator|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
name|ch
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
comment|// System.out.println("String: " + builder.toString());
block|}
name|assertEquals
argument_list|(
literal|"'"
operator|+
name|builder
operator|.
name|toString
argument_list|()
operator|+
literal|"' is not equal to '"
operator|+
name|gold
operator|+
literal|"'"
argument_list|,
name|gold
argument_list|,
name|builder
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testSupplementaryCharsInTags
specifier|public
name|void
name|testSupplementaryCharsInTags
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|test
init|=
literal|"one<ð©¬è±éä¹æ¯ç>two<çæ¯ð©¬>three çæ¯ð©¬</çæ¯ð©¬>four</ð©¬è±éä¹æ¯ç>five<ð ð >six<ð ð />seven"
decl_stmt|;
name|String
name|gold
init|=
literal|"one\ntwo\nthree çæ¯ð©¬\nfour\nfive\nsix\nseven"
decl_stmt|;
name|Reader
name|reader
init|=
operator|new
name|HTMLStripCharFilter
argument_list|(
name|CharReader
operator|.
name|get
argument_list|(
operator|new
name|StringReader
argument_list|(
name|test
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|ch
init|=
literal|0
decl_stmt|;
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
try|try
block|{
while|while
condition|(
operator|(
name|ch
operator|=
name|reader
operator|.
name|read
argument_list|()
operator|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
name|ch
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
comment|// System.out.println("String: " + builder.toString());
block|}
name|assertEquals
argument_list|(
literal|"'"
operator|+
name|builder
operator|.
name|toString
argument_list|()
operator|+
literal|"' is not equal to '"
operator|+
name|gold
operator|+
literal|"'"
argument_list|,
name|gold
argument_list|,
name|builder
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testRandomBrokenHTML
specifier|public
name|void
name|testRandomBrokenHTML
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|maxNumElements
init|=
literal|10000
decl_stmt|;
name|String
name|text
init|=
name|_TestUtil
operator|.
name|randomHtmlishString
argument_list|(
name|random
argument_list|()
argument_list|,
name|maxNumElements
argument_list|)
decl_stmt|;
name|checkAnalysisConsistency
argument_list|(
name|random
argument_list|()
argument_list|,
name|newTestAnalyzer
argument_list|()
argument_list|,
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
argument_list|,
name|text
argument_list|)
expr_stmt|;
block|}
DECL|method|testRandomText
specifier|public
name|void
name|testRandomText
parameter_list|()
throws|throws
name|Exception
block|{
name|StringBuilder
name|text
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|int
name|minNumWords
init|=
literal|10
decl_stmt|;
name|int
name|maxNumWords
init|=
literal|10000
decl_stmt|;
name|int
name|minWordLength
init|=
literal|3
decl_stmt|;
name|int
name|maxWordLength
init|=
literal|20
decl_stmt|;
name|int
name|numWords
init|=
name|_TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
name|minNumWords
argument_list|,
name|maxNumWords
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|_TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|)
condition|)
block|{
case|case
literal|0
case|:
block|{
for|for
control|(
name|int
name|wordNum
init|=
literal|0
init|;
name|wordNum
operator|<
name|numWords
condition|;
operator|++
name|wordNum
control|)
block|{
name|text
operator|.
name|append
argument_list|(
name|_TestUtil
operator|.
name|randomUnicodeString
argument_list|(
name|random
argument_list|()
argument_list|,
name|maxWordLength
argument_list|)
argument_list|)
expr_stmt|;
name|text
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
case|case
literal|1
case|:
block|{
for|for
control|(
name|int
name|wordNum
init|=
literal|0
init|;
name|wordNum
operator|<
name|numWords
condition|;
operator|++
name|wordNum
control|)
block|{
name|text
operator|.
name|append
argument_list|(
name|_TestUtil
operator|.
name|randomRealisticUnicodeString
argument_list|(
name|random
argument_list|()
argument_list|,
name|minWordLength
argument_list|,
name|maxWordLength
argument_list|)
argument_list|)
expr_stmt|;
name|text
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
default|default:
block|{
comment|// ASCII 50% of the time
for|for
control|(
name|int
name|wordNum
init|=
literal|0
init|;
name|wordNum
operator|<
name|numWords
condition|;
operator|++
name|wordNum
control|)
block|{
name|text
operator|.
name|append
argument_list|(
name|_TestUtil
operator|.
name|randomSimpleString
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|text
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|Reader
name|reader
init|=
operator|new
name|HTMLStripCharFilter
argument_list|(
name|CharReader
operator|.
name|get
argument_list|(
operator|new
name|StringReader
argument_list|(
name|text
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
while|while
condition|(
name|reader
operator|.
name|read
argument_list|()
operator|!=
operator|-
literal|1
condition|)
empty_stmt|;
block|}
DECL|method|testUTF16Surrogates
specifier|public
name|void
name|testUTF16Surrogates
parameter_list|()
throws|throws
name|Exception
block|{
name|Analyzer
name|analyzer
init|=
name|newTestAnalyzer
argument_list|()
decl_stmt|;
comment|// Paired surrogates
name|assertAnalyzesTo
argument_list|(
name|analyzer
argument_list|,
literal|" one two&#xD86C;&#XdC01;three"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"one"
block|,
literal|"two"
block|,
literal|"\uD86C\uDC01three"
block|}
argument_list|)
expr_stmt|;
name|assertAnalyzesTo
argument_list|(
name|analyzer
argument_list|,
literal|"&#55404;&#XdC01;"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"\uD86C\uDC01"
block|}
argument_list|)
expr_stmt|;
name|assertAnalyzesTo
argument_list|(
name|analyzer
argument_list|,
literal|"&#xD86C;&#56321;"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"\uD86C\uDC01"
block|}
argument_list|)
expr_stmt|;
name|assertAnalyzesTo
argument_list|(
name|analyzer
argument_list|,
literal|"&#55404;&#56321;"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"\uD86C\uDC01"
block|}
argument_list|)
expr_stmt|;
comment|// Improperly paired surrogates
name|assertAnalyzesTo
argument_list|(
name|analyzer
argument_list|,
literal|"&#55404;&#57999;"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"\uFFFD\uE28F"
block|}
argument_list|)
expr_stmt|;
name|assertAnalyzesTo
argument_list|(
name|analyzer
argument_list|,
literal|"&#xD86C;&#57999;"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"\uFFFD\uE28F"
block|}
argument_list|)
expr_stmt|;
name|assertAnalyzesTo
argument_list|(
name|analyzer
argument_list|,
literal|"&#55002;&#XdC01;"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"\uD6DA\uFFFD"
block|}
argument_list|)
expr_stmt|;
name|assertAnalyzesTo
argument_list|(
name|analyzer
argument_list|,
literal|"&#55002;&#56321;"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"\uD6DA\uFFFD"
block|}
argument_list|)
expr_stmt|;
comment|// Unpaired high surrogates
name|assertAnalyzesTo
argument_list|(
name|analyzer
argument_list|,
literal|"&#Xd921;"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"\uFFFD"
block|}
argument_list|)
expr_stmt|;
name|assertAnalyzesTo
argument_list|(
name|analyzer
argument_list|,
literal|"&#Xd921"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"\uFFFD"
block|}
argument_list|)
expr_stmt|;
name|assertAnalyzesTo
argument_list|(
name|analyzer
argument_list|,
literal|"&#Xd921<br>"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"&#Xd921"
block|}
argument_list|)
expr_stmt|;
name|assertAnalyzesTo
argument_list|(
name|analyzer
argument_list|,
literal|"&#55528;"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"\uFFFD"
block|}
argument_list|)
expr_stmt|;
name|assertAnalyzesTo
argument_list|(
name|analyzer
argument_list|,
literal|"&#55528"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"\uFFFD"
block|}
argument_list|)
expr_stmt|;
name|assertAnalyzesTo
argument_list|(
name|analyzer
argument_list|,
literal|"&#55528<br>"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"&#55528"
block|}
argument_list|)
expr_stmt|;
comment|// Unpaired low surrogates
name|assertAnalyzesTo
argument_list|(
name|analyzer
argument_list|,
literal|"&#xdfdb;"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"\uFFFD"
block|}
argument_list|)
expr_stmt|;
name|assertAnalyzesTo
argument_list|(
name|analyzer
argument_list|,
literal|"&#xdfdb"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"\uFFFD"
block|}
argument_list|)
expr_stmt|;
name|assertAnalyzesTo
argument_list|(
name|analyzer
argument_list|,
literal|"&#xdfdb<br>"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"&#xdfdb"
block|}
argument_list|)
expr_stmt|;
name|assertAnalyzesTo
argument_list|(
name|analyzer
argument_list|,
literal|"&#57209;"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"\uFFFD"
block|}
argument_list|)
expr_stmt|;
name|assertAnalyzesTo
argument_list|(
name|analyzer
argument_list|,
literal|"&#57209"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"\uFFFD"
block|}
argument_list|)
expr_stmt|;
name|assertAnalyzesTo
argument_list|(
name|analyzer
argument_list|,
literal|"&#57209<br>"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"&#57209"
block|}
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
