begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.analysis.util
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|util
package|;
end_package
begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|BaseTokenStreamTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Version
import|;
end_import
begin_comment
comment|/**   * Base class for testing tokenstream factories.   *<p>  * Example usage:  *<pre class="prettyprint">  *   Reader reader = new StringReader("Some Text to Analyze");  *   reader = charFilterFactory("htmlstrip").create(reader);  *   TokenStream stream = tokenizerFactory("standard").create(reader);  *   stream = tokenFilterFactory("lowercase").create(stream);  *   stream = tokenFilterFactory("asciifolding").create(stream);  *   assertTokenStreamContents(stream, new String[] { "some", "text", "to", "analyze" });  *</pre>  */
end_comment
begin_comment
comment|// TODO: this has to be here, since the abstract factories are not in lucene-core,
end_comment
begin_comment
comment|// so test-framework doesnt know about them...
end_comment
begin_comment
comment|// this also means we currently cannot use this in other analysis modules :(
end_comment
begin_comment
comment|// TODO: maybe after we improve the abstract factory/SPI apis, they can sit in core and resolve this.
end_comment
begin_class
DECL|class|BaseTokenStreamFactoryTestCase
specifier|public
specifier|abstract
class|class
name|BaseTokenStreamFactoryTestCase
extends|extends
name|BaseTokenStreamTestCase
block|{
DECL|method|analysisFactory
specifier|private
name|AbstractAnalysisFactory
name|analysisFactory
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|AbstractAnalysisFactory
argument_list|>
name|clazz
parameter_list|,
name|Version
name|matchVersion
parameter_list|,
name|ResourceLoader
name|loader
parameter_list|,
name|String
modifier|...
name|keysAndValues
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|keysAndValues
operator|.
name|length
operator|%
literal|2
operator|==
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"invalid keysAndValues map"
argument_list|)
throw|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|args
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|keysAndValues
operator|.
name|length
condition|;
name|i
operator|+=
literal|2
control|)
block|{
name|String
name|previous
init|=
name|args
operator|.
name|put
argument_list|(
name|keysAndValues
index|[
name|i
index|]
argument_list|,
name|keysAndValues
index|[
name|i
operator|+
literal|1
index|]
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
literal|"duplicate values for key: "
operator|+
name|keysAndValues
index|[
name|i
index|]
argument_list|,
name|previous
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|matchVersion
operator|!=
literal|null
condition|)
block|{
name|String
name|previous
init|=
name|args
operator|.
name|put
argument_list|(
literal|"luceneMatchVersion"
argument_list|,
name|matchVersion
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
literal|"duplicate values for key: luceneMatchVersion"
argument_list|,
name|previous
argument_list|)
expr_stmt|;
block|}
name|AbstractAnalysisFactory
name|factory
init|=
literal|null
decl_stmt|;
try|try
block|{
name|factory
operator|=
name|clazz
operator|.
name|getConstructor
argument_list|(
name|Map
operator|.
name|class
argument_list|)
operator|.
name|newInstance
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|e
parameter_list|)
block|{
comment|// to simplify tests that check for illegal parameters
if|if
condition|(
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|IllegalArgumentException
condition|)
block|{
throw|throw
operator|(
name|IllegalArgumentException
operator|)
name|e
operator|.
name|getCause
argument_list|()
throw|;
block|}
else|else
block|{
throw|throw
name|e
throw|;
block|}
block|}
if|if
condition|(
name|factory
operator|instanceof
name|ResourceLoaderAware
condition|)
block|{
operator|(
operator|(
name|ResourceLoaderAware
operator|)
name|factory
operator|)
operator|.
name|inform
argument_list|(
name|loader
argument_list|)
expr_stmt|;
block|}
return|return
name|factory
return|;
block|}
comment|/**     * Returns a fully initialized TokenizerFactory with the specified name and key-value arguments.    * {@link ClasspathResourceLoader} is used for loading resources, so any required ones should    * be on the test classpath.    */
DECL|method|tokenizerFactory
specifier|protected
name|TokenizerFactory
name|tokenizerFactory
parameter_list|(
name|String
name|name
parameter_list|,
name|String
modifier|...
name|keysAndValues
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|tokenizerFactory
argument_list|(
name|name
argument_list|,
name|Version
operator|.
name|LATEST
argument_list|,
name|keysAndValues
argument_list|)
return|;
block|}
comment|/**     * Returns a fully initialized TokenizerFactory with the specified name and key-value arguments.    * {@link ClasspathResourceLoader} is used for loading resources, so any required ones should    * be on the test classpath.    */
DECL|method|tokenizerFactory
specifier|protected
name|TokenizerFactory
name|tokenizerFactory
parameter_list|(
name|String
name|name
parameter_list|,
name|Version
name|version
parameter_list|,
name|String
modifier|...
name|keysAndValues
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|tokenizerFactory
argument_list|(
name|name
argument_list|,
name|version
argument_list|,
operator|new
name|ClasspathResourceLoader
argument_list|(
name|getClass
argument_list|()
argument_list|)
argument_list|,
name|keysAndValues
argument_list|)
return|;
block|}
comment|/**     * Returns a fully initialized TokenizerFactory with the specified name, version, resource loader,     * and key-value arguments.    */
DECL|method|tokenizerFactory
specifier|protected
name|TokenizerFactory
name|tokenizerFactory
parameter_list|(
name|String
name|name
parameter_list|,
name|Version
name|matchVersion
parameter_list|,
name|ResourceLoader
name|loader
parameter_list|,
name|String
modifier|...
name|keysAndValues
parameter_list|)
throws|throws
name|Exception
block|{
return|return
operator|(
name|TokenizerFactory
operator|)
name|analysisFactory
argument_list|(
name|TokenizerFactory
operator|.
name|lookupClass
argument_list|(
name|name
argument_list|)
argument_list|,
name|matchVersion
argument_list|,
name|loader
argument_list|,
name|keysAndValues
argument_list|)
return|;
block|}
comment|/**     * Returns a fully initialized TokenFilterFactory with the specified name and key-value arguments.    * {@link ClasspathResourceLoader} is used for loading resources, so any required ones should    * be on the test classpath.    */
DECL|method|tokenFilterFactory
specifier|protected
name|TokenFilterFactory
name|tokenFilterFactory
parameter_list|(
name|String
name|name
parameter_list|,
name|Version
name|version
parameter_list|,
name|String
modifier|...
name|keysAndValues
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|tokenFilterFactory
argument_list|(
name|name
argument_list|,
name|version
argument_list|,
operator|new
name|ClasspathResourceLoader
argument_list|(
name|getClass
argument_list|()
argument_list|)
argument_list|,
name|keysAndValues
argument_list|)
return|;
block|}
comment|/**     * Returns a fully initialized TokenFilterFactory with the specified name and key-value arguments.    * {@link ClasspathResourceLoader} is used for loading resources, so any required ones should    * be on the test classpath.    */
DECL|method|tokenFilterFactory
specifier|protected
name|TokenFilterFactory
name|tokenFilterFactory
parameter_list|(
name|String
name|name
parameter_list|,
name|String
modifier|...
name|keysAndValues
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|tokenFilterFactory
argument_list|(
name|name
argument_list|,
name|Version
operator|.
name|LATEST
argument_list|,
name|keysAndValues
argument_list|)
return|;
block|}
comment|/**     * Returns a fully initialized TokenFilterFactory with the specified name, version, resource loader,     * and key-value arguments.    */
DECL|method|tokenFilterFactory
specifier|protected
name|TokenFilterFactory
name|tokenFilterFactory
parameter_list|(
name|String
name|name
parameter_list|,
name|Version
name|matchVersion
parameter_list|,
name|ResourceLoader
name|loader
parameter_list|,
name|String
modifier|...
name|keysAndValues
parameter_list|)
throws|throws
name|Exception
block|{
return|return
operator|(
name|TokenFilterFactory
operator|)
name|analysisFactory
argument_list|(
name|TokenFilterFactory
operator|.
name|lookupClass
argument_list|(
name|name
argument_list|)
argument_list|,
name|matchVersion
argument_list|,
name|loader
argument_list|,
name|keysAndValues
argument_list|)
return|;
block|}
comment|/**     * Returns a fully initialized CharFilterFactory with the specified name and key-value arguments.    * {@link ClasspathResourceLoader} is used for loading resources, so any required ones should    * be on the test classpath.    */
DECL|method|charFilterFactory
specifier|protected
name|CharFilterFactory
name|charFilterFactory
parameter_list|(
name|String
name|name
parameter_list|,
name|String
modifier|...
name|keysAndValues
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|charFilterFactory
argument_list|(
name|name
argument_list|,
name|Version
operator|.
name|LATEST
argument_list|,
operator|new
name|ClasspathResourceLoader
argument_list|(
name|getClass
argument_list|()
argument_list|)
argument_list|,
name|keysAndValues
argument_list|)
return|;
block|}
comment|/**     * Returns a fully initialized CharFilterFactory with the specified name, version, resource loader,     * and key-value arguments.    */
DECL|method|charFilterFactory
specifier|protected
name|CharFilterFactory
name|charFilterFactory
parameter_list|(
name|String
name|name
parameter_list|,
name|Version
name|matchVersion
parameter_list|,
name|ResourceLoader
name|loader
parameter_list|,
name|String
modifier|...
name|keysAndValues
parameter_list|)
throws|throws
name|Exception
block|{
return|return
operator|(
name|CharFilterFactory
operator|)
name|analysisFactory
argument_list|(
name|CharFilterFactory
operator|.
name|lookupClass
argument_list|(
name|name
argument_list|)
argument_list|,
name|matchVersion
argument_list|,
name|loader
argument_list|,
name|keysAndValues
argument_list|)
return|;
block|}
block|}
end_class
end_unit
