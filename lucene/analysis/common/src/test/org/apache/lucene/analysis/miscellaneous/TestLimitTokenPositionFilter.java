begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.analysis.miscellaneous
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|miscellaneous
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Analyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|BaseTokenStreamTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|MockTokenizer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|synonym
operator|.
name|SynonymFilter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|synonym
operator|.
name|SynonymMap
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|CharsRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|CharsRefBuilder
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import
begin_class
DECL|class|TestLimitTokenPositionFilter
specifier|public
class|class
name|TestLimitTokenPositionFilter
extends|extends
name|BaseTokenStreamTestCase
block|{
DECL|method|testMaxPosition2
specifier|public
name|void
name|testMaxPosition2
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
specifier|final
name|boolean
name|consumeAll
range|:
operator|new
name|boolean
index|[]
block|{
literal|true
block|,
literal|false
block|}
control|)
block|{
name|Analyzer
name|a
init|=
operator|new
name|Analyzer
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|TokenStreamComponents
name|createComponents
parameter_list|(
name|String
name|fieldName
parameter_list|)
block|{
name|MockTokenizer
name|tokenizer
init|=
operator|new
name|MockTokenizer
argument_list|(
name|MockTokenizer
operator|.
name|WHITESPACE
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// if we are consuming all tokens, we can use the checks, otherwise we can't
name|tokenizer
operator|.
name|setEnableChecks
argument_list|(
name|consumeAll
argument_list|)
expr_stmt|;
return|return
operator|new
name|TokenStreamComponents
argument_list|(
name|tokenizer
argument_list|,
operator|new
name|LimitTokenPositionFilter
argument_list|(
name|tokenizer
argument_list|,
literal|2
argument_list|,
name|consumeAll
argument_list|)
argument_list|)
return|;
block|}
block|}
decl_stmt|;
comment|// don't use assertAnalyzesTo here, as the end offset is not the end of the string (unless consumeAll is true, in which case it's correct)!
name|assertTokenStreamContents
argument_list|(
name|a
operator|.
name|tokenStream
argument_list|(
literal|"dummy"
argument_list|,
literal|"1  2     3  4  5"
argument_list|)
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"1"
block|,
literal|"2"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|3
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|4
block|}
argument_list|,
name|consumeAll
condition|?
literal|16
else|:
literal|null
argument_list|)
expr_stmt|;
name|assertTokenStreamContents
argument_list|(
name|a
operator|.
name|tokenStream
argument_list|(
literal|"dummy"
argument_list|,
operator|new
name|StringReader
argument_list|(
literal|"1 2 3 4 5"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"1"
block|,
literal|"2"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|2
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|3
block|}
argument_list|,
name|consumeAll
condition|?
literal|9
else|:
literal|null
argument_list|)
expr_stmt|;
comment|// less than the limit, ensure we behave correctly
name|assertTokenStreamContents
argument_list|(
name|a
operator|.
name|tokenStream
argument_list|(
literal|"dummy"
argument_list|,
literal|"1  "
argument_list|)
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"1"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|}
argument_list|,
name|consumeAll
condition|?
literal|3
else|:
literal|null
argument_list|)
expr_stmt|;
comment|// equal to limit
name|assertTokenStreamContents
argument_list|(
name|a
operator|.
name|tokenStream
argument_list|(
literal|"dummy"
argument_list|,
literal|"1  2  "
argument_list|)
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"1"
block|,
literal|"2"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|3
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|4
block|}
argument_list|,
name|consumeAll
condition|?
literal|6
else|:
literal|null
argument_list|)
expr_stmt|;
name|a
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|testMaxPosition3WithSynomyms
specifier|public
name|void
name|testMaxPosition3WithSynomyms
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
specifier|final
name|boolean
name|consumeAll
range|:
operator|new
name|boolean
index|[]
block|{
literal|true
block|,
literal|false
block|}
control|)
block|{
name|MockTokenizer
name|tokenizer
init|=
name|whitespaceMockTokenizer
argument_list|(
literal|"one two three four five"
argument_list|)
decl_stmt|;
comment|// if we are consuming all tokens, we can use the checks, otherwise we can't
name|tokenizer
operator|.
name|setEnableChecks
argument_list|(
name|consumeAll
argument_list|)
expr_stmt|;
name|SynonymMap
operator|.
name|Builder
name|builder
init|=
operator|new
name|SynonymMap
operator|.
name|Builder
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|builder
operator|.
name|add
argument_list|(
operator|new
name|CharsRef
argument_list|(
literal|"one"
argument_list|)
argument_list|,
operator|new
name|CharsRef
argument_list|(
literal|"first"
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
operator|new
name|CharsRef
argument_list|(
literal|"one"
argument_list|)
argument_list|,
operator|new
name|CharsRef
argument_list|(
literal|"alpha"
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
operator|new
name|CharsRef
argument_list|(
literal|"one"
argument_list|)
argument_list|,
operator|new
name|CharsRef
argument_list|(
literal|"beguine"
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|CharsRefBuilder
name|multiWordCharsRef
init|=
operator|new
name|CharsRefBuilder
argument_list|()
decl_stmt|;
name|SynonymMap
operator|.
name|Builder
operator|.
name|join
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"and"
block|,
literal|"indubitably"
block|,
literal|"single"
block|,
literal|"only"
block|}
argument_list|,
name|multiWordCharsRef
argument_list|)
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
operator|new
name|CharsRef
argument_list|(
literal|"one"
argument_list|)
argument_list|,
name|multiWordCharsRef
operator|.
name|get
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|SynonymMap
operator|.
name|Builder
operator|.
name|join
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"dopple"
block|,
literal|"ganger"
block|}
argument_list|,
name|multiWordCharsRef
argument_list|)
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
operator|new
name|CharsRef
argument_list|(
literal|"two"
argument_list|)
argument_list|,
name|multiWordCharsRef
operator|.
name|get
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|SynonymMap
name|synonymMap
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|TokenStream
name|stream
init|=
operator|new
name|SynonymFilter
argument_list|(
name|tokenizer
argument_list|,
name|synonymMap
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|stream
operator|=
operator|new
name|LimitTokenPositionFilter
argument_list|(
name|stream
argument_list|,
literal|3
argument_list|,
name|consumeAll
argument_list|)
expr_stmt|;
comment|// "only", the 4th word of multi-word synonym "and indubitably single only" is not emitted, since its position is greater than 3.
name|assertTokenStreamContents
argument_list|(
name|stream
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"one"
block|,
literal|"first"
block|,
literal|"alpha"
block|,
literal|"beguine"
block|,
literal|"and"
block|,
literal|"two"
block|,
literal|"indubitably"
block|,
literal|"dopple"
block|,
literal|"three"
block|,
literal|"single"
block|,
literal|"ganger"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|0
block|}
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
DECL|method|testIllegalArguments
specifier|public
name|void
name|testIllegalArguments
parameter_list|()
throws|throws
name|Exception
block|{
operator|new
name|LimitTokenPositionFilter
argument_list|(
name|whitespaceMockTokenizer
argument_list|(
literal|"one two three four five"
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
