begin_unit
begin_package
DECL|package|org.apache.lucene.geo3d
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|geo3d
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_class
DECL|class|XYZSolidTest
specifier|public
class|class
name|XYZSolidTest
extends|extends
name|LuceneTestCase
block|{
annotation|@
name|Test
DECL|method|testNonDegenerateRelationships
specifier|public
name|void
name|testNonDegenerateRelationships
parameter_list|()
block|{
name|XYZSolid
name|s
decl_stmt|;
name|GeoShape
name|shape
decl_stmt|;
comment|// Something bigger than the world
name|s
operator|=
operator|new
name|StandardXYZSolid
argument_list|(
name|PlanetModel
operator|.
name|SPHERE
argument_list|,
operator|-
literal|2.0
argument_list|,
literal|2.0
argument_list|,
operator|-
literal|2.0
argument_list|,
literal|2.0
argument_list|,
operator|-
literal|2.0
argument_list|,
literal|2.0
argument_list|)
expr_stmt|;
comment|// Any shape, except whole world, should be within.
name|shape
operator|=
operator|new
name|GeoStandardCircle
argument_list|(
name|PlanetModel
operator|.
name|SPHERE
argument_list|,
literal|0.0
argument_list|,
literal|0.0
argument_list|,
literal|0.1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|GeoArea
operator|.
name|WITHIN
argument_list|,
name|s
operator|.
name|getRelationship
argument_list|(
name|shape
argument_list|)
argument_list|)
expr_stmt|;
name|shape
operator|=
operator|new
name|GeoWorld
argument_list|(
name|PlanetModel
operator|.
name|SPHERE
argument_list|)
expr_stmt|;
comment|// An XYZSolid represents a surface shape, which when larger than the world is in fact
comment|// the entire world, so it should overlap the world.
name|assertEquals
argument_list|(
name|GeoArea
operator|.
name|OVERLAPS
argument_list|,
name|s
operator|.
name|getRelationship
argument_list|(
name|shape
argument_list|)
argument_list|)
expr_stmt|;
comment|// Something overlapping the world on only one side
name|s
operator|=
operator|new
name|StandardXYZSolid
argument_list|(
name|PlanetModel
operator|.
name|SPHERE
argument_list|,
operator|-
literal|2.0
argument_list|,
literal|0.0
argument_list|,
operator|-
literal|2.0
argument_list|,
literal|2.0
argument_list|,
operator|-
literal|2.0
argument_list|,
literal|2.0
argument_list|)
expr_stmt|;
comment|// Some things should be disjoint...
name|shape
operator|=
operator|new
name|GeoStandardCircle
argument_list|(
name|PlanetModel
operator|.
name|SPHERE
argument_list|,
literal|0.0
argument_list|,
literal|0.0
argument_list|,
literal|0.1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|GeoArea
operator|.
name|DISJOINT
argument_list|,
name|s
operator|.
name|getRelationship
argument_list|(
name|shape
argument_list|)
argument_list|)
expr_stmt|;
comment|// And, some things should be within...
name|shape
operator|=
operator|new
name|GeoStandardCircle
argument_list|(
name|PlanetModel
operator|.
name|SPHERE
argument_list|,
literal|0.0
argument_list|,
name|Math
operator|.
name|PI
argument_list|,
literal|0.1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|GeoArea
operator|.
name|WITHIN
argument_list|,
name|s
operator|.
name|getRelationship
argument_list|(
name|shape
argument_list|)
argument_list|)
expr_stmt|;
comment|// And, some things should overlap.
name|shape
operator|=
operator|new
name|GeoStandardCircle
argument_list|(
name|PlanetModel
operator|.
name|SPHERE
argument_list|,
literal|0.0
argument_list|,
name|Math
operator|.
name|PI
operator|*
literal|0.5
argument_list|,
literal|0.1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|GeoArea
operator|.
name|OVERLAPS
argument_list|,
name|s
operator|.
name|getRelationship
argument_list|(
name|shape
argument_list|)
argument_list|)
expr_stmt|;
comment|// Partial world should be contained by GeoWorld object...
name|shape
operator|=
operator|new
name|GeoWorld
argument_list|(
name|PlanetModel
operator|.
name|SPHERE
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|GeoArea
operator|.
name|CONTAINS
argument_list|,
name|s
operator|.
name|getRelationship
argument_list|(
name|shape
argument_list|)
argument_list|)
expr_stmt|;
comment|// Something inside the world
name|s
operator|=
operator|new
name|StandardXYZSolid
argument_list|(
name|PlanetModel
operator|.
name|SPHERE
argument_list|,
operator|-
literal|0.1
argument_list|,
literal|0.1
argument_list|,
operator|-
literal|0.1
argument_list|,
literal|0.1
argument_list|,
operator|-
literal|0.1
argument_list|,
literal|0.1
argument_list|)
expr_stmt|;
comment|// All shapes should be disjoint
name|shape
operator|=
operator|new
name|GeoStandardCircle
argument_list|(
name|PlanetModel
operator|.
name|SPHERE
argument_list|,
literal|0.0
argument_list|,
literal|0.0
argument_list|,
literal|0.1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|GeoArea
operator|.
name|DISJOINT
argument_list|,
name|s
operator|.
name|getRelationship
argument_list|(
name|shape
argument_list|)
argument_list|)
expr_stmt|;
name|shape
operator|=
operator|new
name|GeoWorld
argument_list|(
name|PlanetModel
operator|.
name|SPHERE
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|GeoArea
operator|.
name|DISJOINT
argument_list|,
name|s
operator|.
name|getRelationship
argument_list|(
name|shape
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDegenerateRelationships
specifier|public
name|void
name|testDegenerateRelationships
parameter_list|()
block|{
name|GeoArea
name|solid
decl_stmt|;
name|GeoShape
name|shape
decl_stmt|;
comment|// Basic test of the factory method - non-degenerate
name|solid
operator|=
name|GeoAreaFactory
operator|.
name|makeGeoArea
argument_list|(
name|PlanetModel
operator|.
name|SPHERE
argument_list|,
operator|-
literal|2.0
argument_list|,
literal|2.0
argument_list|,
operator|-
literal|2.0
argument_list|,
literal|2.0
argument_list|,
operator|-
literal|2.0
argument_list|,
literal|2.0
argument_list|)
expr_stmt|;
comment|// Any shape, except whole world, should be within.
name|shape
operator|=
operator|new
name|GeoStandardCircle
argument_list|(
name|PlanetModel
operator|.
name|SPHERE
argument_list|,
literal|0.0
argument_list|,
literal|0.0
argument_list|,
literal|0.1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|GeoArea
operator|.
name|WITHIN
argument_list|,
name|solid
operator|.
name|getRelationship
argument_list|(
name|shape
argument_list|)
argument_list|)
expr_stmt|;
name|shape
operator|=
operator|new
name|GeoWorld
argument_list|(
name|PlanetModel
operator|.
name|SPHERE
argument_list|)
expr_stmt|;
comment|// An XYZSolid represents a surface shape, which when larger than the world is in fact
comment|// the entire world, so it should overlap the world.
name|assertEquals
argument_list|(
name|GeoArea
operator|.
name|OVERLAPS
argument_list|,
name|solid
operator|.
name|getRelationship
argument_list|(
name|shape
argument_list|)
argument_list|)
expr_stmt|;
comment|// Build a degenerate point, not on sphere
name|solid
operator|=
name|GeoAreaFactory
operator|.
name|makeGeoArea
argument_list|(
name|PlanetModel
operator|.
name|SPHERE
argument_list|,
literal|0.0
argument_list|,
literal|0.0
argument_list|,
literal|0.0
argument_list|,
literal|0.0
argument_list|,
literal|0.0
argument_list|,
literal|0.0
argument_list|)
expr_stmt|;
comment|// disjoint with everything?
name|shape
operator|=
operator|new
name|GeoStandardCircle
argument_list|(
name|PlanetModel
operator|.
name|SPHERE
argument_list|,
literal|0.0
argument_list|,
literal|0.0
argument_list|,
literal|0.1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|GeoArea
operator|.
name|DISJOINT
argument_list|,
name|solid
operator|.
name|getRelationship
argument_list|(
name|shape
argument_list|)
argument_list|)
expr_stmt|;
name|shape
operator|=
operator|new
name|GeoWorld
argument_list|(
name|PlanetModel
operator|.
name|SPHERE
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|GeoArea
operator|.
name|DISJOINT
argument_list|,
name|solid
operator|.
name|getRelationship
argument_list|(
name|shape
argument_list|)
argument_list|)
expr_stmt|;
comment|// Build a degenerate point that IS on the sphere
name|solid
operator|=
name|GeoAreaFactory
operator|.
name|makeGeoArea
argument_list|(
name|PlanetModel
operator|.
name|SPHERE
argument_list|,
literal|1.0
argument_list|,
literal|1.0
argument_list|,
literal|0.0
argument_list|,
literal|0.0
argument_list|,
literal|0.0
argument_list|,
literal|0.0
argument_list|)
expr_stmt|;
comment|// inside everything that it touches?
name|shape
operator|=
operator|new
name|GeoStandardCircle
argument_list|(
name|PlanetModel
operator|.
name|SPHERE
argument_list|,
literal|0.0
argument_list|,
literal|0.0
argument_list|,
literal|0.1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|GeoArea
operator|.
name|CONTAINS
argument_list|,
name|solid
operator|.
name|getRelationship
argument_list|(
name|shape
argument_list|)
argument_list|)
expr_stmt|;
name|shape
operator|=
operator|new
name|GeoWorld
argument_list|(
name|PlanetModel
operator|.
name|SPHERE
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|GeoArea
operator|.
name|CONTAINS
argument_list|,
name|solid
operator|.
name|getRelationship
argument_list|(
name|shape
argument_list|)
argument_list|)
expr_stmt|;
name|shape
operator|=
operator|new
name|GeoStandardCircle
argument_list|(
name|PlanetModel
operator|.
name|SPHERE
argument_list|,
literal|0.0
argument_list|,
name|Math
operator|.
name|PI
argument_list|,
literal|0.1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|GeoArea
operator|.
name|DISJOINT
argument_list|,
name|solid
operator|.
name|getRelationship
argument_list|(
name|shape
argument_list|)
argument_list|)
expr_stmt|;
comment|// Build a shape degenerate in (x,y), which has no points on sphere
name|solid
operator|=
name|GeoAreaFactory
operator|.
name|makeGeoArea
argument_list|(
name|PlanetModel
operator|.
name|SPHERE
argument_list|,
literal|0.0
argument_list|,
literal|0.0
argument_list|,
literal|0.0
argument_list|,
literal|0.0
argument_list|,
operator|-
literal|0.1
argument_list|,
literal|0.1
argument_list|)
expr_stmt|;
comment|// disjoint with everything?
name|shape
operator|=
operator|new
name|GeoStandardCircle
argument_list|(
name|PlanetModel
operator|.
name|SPHERE
argument_list|,
literal|0.0
argument_list|,
literal|0.0
argument_list|,
literal|0.1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|GeoArea
operator|.
name|DISJOINT
argument_list|,
name|solid
operator|.
name|getRelationship
argument_list|(
name|shape
argument_list|)
argument_list|)
expr_stmt|;
name|shape
operator|=
operator|new
name|GeoWorld
argument_list|(
name|PlanetModel
operator|.
name|SPHERE
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|GeoArea
operator|.
name|DISJOINT
argument_list|,
name|solid
operator|.
name|getRelationship
argument_list|(
name|shape
argument_list|)
argument_list|)
expr_stmt|;
comment|// Build a shape degenerate in (x,y) which has one point on sphere
name|solid
operator|=
name|GeoAreaFactory
operator|.
name|makeGeoArea
argument_list|(
name|PlanetModel
operator|.
name|SPHERE
argument_list|,
literal|0.0
argument_list|,
literal|0.0
argument_list|,
literal|0.0
argument_list|,
literal|0.0
argument_list|,
operator|-
literal|0.1
argument_list|,
literal|1.1
argument_list|)
expr_stmt|;
comment|// inside everything that it touches?
name|shape
operator|=
operator|new
name|GeoStandardCircle
argument_list|(
name|PlanetModel
operator|.
name|SPHERE
argument_list|,
literal|0.0
argument_list|,
literal|0.0
argument_list|,
literal|0.1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|GeoArea
operator|.
name|DISJOINT
argument_list|,
name|solid
operator|.
name|getRelationship
argument_list|(
name|shape
argument_list|)
argument_list|)
expr_stmt|;
name|shape
operator|=
operator|new
name|GeoWorld
argument_list|(
name|PlanetModel
operator|.
name|SPHERE
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|GeoArea
operator|.
name|CONTAINS
argument_list|,
name|solid
operator|.
name|getRelationship
argument_list|(
name|shape
argument_list|)
argument_list|)
expr_stmt|;
name|shape
operator|=
operator|new
name|GeoStandardCircle
argument_list|(
name|PlanetModel
operator|.
name|SPHERE
argument_list|,
name|Math
operator|.
name|PI
operator|*
literal|0.5
argument_list|,
literal|0.0
argument_list|,
literal|0.1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|GeoArea
operator|.
name|CONTAINS
argument_list|,
name|solid
operator|.
name|getRelationship
argument_list|(
name|shape
argument_list|)
argument_list|)
expr_stmt|;
name|shape
operator|=
operator|new
name|GeoStandardCircle
argument_list|(
name|PlanetModel
operator|.
name|SPHERE
argument_list|,
operator|-
name|Math
operator|.
name|PI
operator|*
literal|0.5
argument_list|,
literal|0.0
argument_list|,
literal|0.1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|GeoArea
operator|.
name|DISJOINT
argument_list|,
name|solid
operator|.
name|getRelationship
argument_list|(
name|shape
argument_list|)
argument_list|)
expr_stmt|;
comment|// Build a shape degenerate in (x,y) which has two points on sphere
name|solid
operator|=
name|GeoAreaFactory
operator|.
name|makeGeoArea
argument_list|(
name|PlanetModel
operator|.
name|SPHERE
argument_list|,
literal|0.0
argument_list|,
literal|0.0
argument_list|,
literal|0.0
argument_list|,
literal|0.0
argument_list|,
operator|-
literal|1.1
argument_list|,
literal|1.1
argument_list|)
expr_stmt|;
comment|// inside everything that it touches?
name|shape
operator|=
operator|new
name|GeoStandardCircle
argument_list|(
name|PlanetModel
operator|.
name|SPHERE
argument_list|,
literal|0.0
argument_list|,
literal|0.0
argument_list|,
literal|0.1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|GeoArea
operator|.
name|DISJOINT
argument_list|,
name|solid
operator|.
name|getRelationship
argument_list|(
name|shape
argument_list|)
argument_list|)
expr_stmt|;
name|shape
operator|=
operator|new
name|GeoWorld
argument_list|(
name|PlanetModel
operator|.
name|SPHERE
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|GeoArea
operator|.
name|CONTAINS
argument_list|,
name|solid
operator|.
name|getRelationship
argument_list|(
name|shape
argument_list|)
argument_list|)
expr_stmt|;
name|shape
operator|=
operator|new
name|GeoStandardCircle
argument_list|(
name|PlanetModel
operator|.
name|SPHERE
argument_list|,
name|Math
operator|.
name|PI
operator|*
literal|0.5
argument_list|,
literal|0.0
argument_list|,
literal|0.1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|GeoArea
operator|.
name|OVERLAPS
argument_list|,
name|solid
operator|.
name|getRelationship
argument_list|(
name|shape
argument_list|)
argument_list|)
expr_stmt|;
name|shape
operator|=
operator|new
name|GeoStandardCircle
argument_list|(
name|PlanetModel
operator|.
name|SPHERE
argument_list|,
operator|-
name|Math
operator|.
name|PI
operator|*
literal|0.5
argument_list|,
literal|0.0
argument_list|,
literal|0.1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|GeoArea
operator|.
name|OVERLAPS
argument_list|,
name|solid
operator|.
name|getRelationship
argument_list|(
name|shape
argument_list|)
argument_list|)
expr_stmt|;
comment|// Build a shape degenerate in (x,z), which has no points on sphere
name|solid
operator|=
name|GeoAreaFactory
operator|.
name|makeGeoArea
argument_list|(
name|PlanetModel
operator|.
name|SPHERE
argument_list|,
literal|0.0
argument_list|,
literal|0.0
argument_list|,
operator|-
literal|0.1
argument_list|,
literal|0.1
argument_list|,
literal|0.0
argument_list|,
literal|0.0
argument_list|)
expr_stmt|;
comment|// disjoint with everything?
name|shape
operator|=
operator|new
name|GeoStandardCircle
argument_list|(
name|PlanetModel
operator|.
name|SPHERE
argument_list|,
literal|0.0
argument_list|,
literal|0.0
argument_list|,
literal|0.1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|GeoArea
operator|.
name|DISJOINT
argument_list|,
name|solid
operator|.
name|getRelationship
argument_list|(
name|shape
argument_list|)
argument_list|)
expr_stmt|;
name|shape
operator|=
operator|new
name|GeoWorld
argument_list|(
name|PlanetModel
operator|.
name|SPHERE
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|GeoArea
operator|.
name|DISJOINT
argument_list|,
name|solid
operator|.
name|getRelationship
argument_list|(
name|shape
argument_list|)
argument_list|)
expr_stmt|;
comment|// Build a shape degenerate in (x,z) which has one point on sphere
name|solid
operator|=
name|GeoAreaFactory
operator|.
name|makeGeoArea
argument_list|(
name|PlanetModel
operator|.
name|SPHERE
argument_list|,
literal|0.0
argument_list|,
literal|0.0
argument_list|,
operator|-
literal|0.1
argument_list|,
literal|1.1
argument_list|,
literal|0.0
argument_list|,
literal|0.0
argument_list|)
expr_stmt|;
comment|// inside everything that it touches?
name|shape
operator|=
operator|new
name|GeoStandardCircle
argument_list|(
name|PlanetModel
operator|.
name|SPHERE
argument_list|,
literal|0.0
argument_list|,
literal|0.0
argument_list|,
literal|0.1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|GeoArea
operator|.
name|DISJOINT
argument_list|,
name|solid
operator|.
name|getRelationship
argument_list|(
name|shape
argument_list|)
argument_list|)
expr_stmt|;
name|shape
operator|=
operator|new
name|GeoWorld
argument_list|(
name|PlanetModel
operator|.
name|SPHERE
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|GeoArea
operator|.
name|CONTAINS
argument_list|,
name|solid
operator|.
name|getRelationship
argument_list|(
name|shape
argument_list|)
argument_list|)
expr_stmt|;
name|shape
operator|=
operator|new
name|GeoStandardCircle
argument_list|(
name|PlanetModel
operator|.
name|SPHERE
argument_list|,
literal|0.0
argument_list|,
name|Math
operator|.
name|PI
operator|*
literal|0.5
argument_list|,
literal|0.1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|GeoArea
operator|.
name|CONTAINS
argument_list|,
name|solid
operator|.
name|getRelationship
argument_list|(
name|shape
argument_list|)
argument_list|)
expr_stmt|;
name|shape
operator|=
operator|new
name|GeoStandardCircle
argument_list|(
name|PlanetModel
operator|.
name|SPHERE
argument_list|,
literal|0.0
argument_list|,
operator|-
name|Math
operator|.
name|PI
operator|*
literal|0.5
argument_list|,
literal|0.1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|GeoArea
operator|.
name|DISJOINT
argument_list|,
name|solid
operator|.
name|getRelationship
argument_list|(
name|shape
argument_list|)
argument_list|)
expr_stmt|;
comment|// Build a shape degenerate in (x,y) which has two points on sphere
name|solid
operator|=
name|GeoAreaFactory
operator|.
name|makeGeoArea
argument_list|(
name|PlanetModel
operator|.
name|SPHERE
argument_list|,
literal|0.0
argument_list|,
literal|0.0
argument_list|,
operator|-
literal|1.1
argument_list|,
literal|1.1
argument_list|,
literal|0.0
argument_list|,
literal|0.0
argument_list|)
expr_stmt|;
comment|// inside everything that it touches?
name|shape
operator|=
operator|new
name|GeoStandardCircle
argument_list|(
name|PlanetModel
operator|.
name|SPHERE
argument_list|,
literal|0.0
argument_list|,
literal|0.0
argument_list|,
literal|0.1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|GeoArea
operator|.
name|DISJOINT
argument_list|,
name|solid
operator|.
name|getRelationship
argument_list|(
name|shape
argument_list|)
argument_list|)
expr_stmt|;
name|shape
operator|=
operator|new
name|GeoWorld
argument_list|(
name|PlanetModel
operator|.
name|SPHERE
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|GeoArea
operator|.
name|CONTAINS
argument_list|,
name|solid
operator|.
name|getRelationship
argument_list|(
name|shape
argument_list|)
argument_list|)
expr_stmt|;
name|shape
operator|=
operator|new
name|GeoStandardCircle
argument_list|(
name|PlanetModel
operator|.
name|SPHERE
argument_list|,
literal|0.0
argument_list|,
name|Math
operator|.
name|PI
operator|*
literal|0.5
argument_list|,
literal|0.1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|GeoArea
operator|.
name|OVERLAPS
argument_list|,
name|solid
operator|.
name|getRelationship
argument_list|(
name|shape
argument_list|)
argument_list|)
expr_stmt|;
name|shape
operator|=
operator|new
name|GeoStandardCircle
argument_list|(
name|PlanetModel
operator|.
name|SPHERE
argument_list|,
literal|0.0
argument_list|,
operator|-
name|Math
operator|.
name|PI
operator|*
literal|0.5
argument_list|,
literal|0.1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|GeoArea
operator|.
name|OVERLAPS
argument_list|,
name|solid
operator|.
name|getRelationship
argument_list|(
name|shape
argument_list|)
argument_list|)
expr_stmt|;
comment|// MHL for y-z check
comment|// Build a shape that is degenerate in x, which has zero points intersecting sphere
name|solid
operator|=
name|GeoAreaFactory
operator|.
name|makeGeoArea
argument_list|(
name|PlanetModel
operator|.
name|SPHERE
argument_list|,
literal|0.0
argument_list|,
literal|0.0
argument_list|,
operator|-
literal|0.1
argument_list|,
literal|0.1
argument_list|,
operator|-
literal|0.1
argument_list|,
literal|0.1
argument_list|)
expr_stmt|;
comment|// disjoint with everything?
name|shape
operator|=
operator|new
name|GeoStandardCircle
argument_list|(
name|PlanetModel
operator|.
name|SPHERE
argument_list|,
literal|0.0
argument_list|,
literal|0.0
argument_list|,
literal|0.1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|GeoArea
operator|.
name|DISJOINT
argument_list|,
name|solid
operator|.
name|getRelationship
argument_list|(
name|shape
argument_list|)
argument_list|)
expr_stmt|;
name|shape
operator|=
operator|new
name|GeoWorld
argument_list|(
name|PlanetModel
operator|.
name|SPHERE
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|GeoArea
operator|.
name|DISJOINT
argument_list|,
name|solid
operator|.
name|getRelationship
argument_list|(
name|shape
argument_list|)
argument_list|)
expr_stmt|;
comment|// Build a shape that is degenerate in x, which has zero points intersecting sphere, second variation
name|solid
operator|=
name|GeoAreaFactory
operator|.
name|makeGeoArea
argument_list|(
name|PlanetModel
operator|.
name|SPHERE
argument_list|,
literal|0.0
argument_list|,
literal|0.0
argument_list|,
operator|-
literal|0.1
argument_list|,
literal|0.1
argument_list|,
literal|1.1
argument_list|,
literal|1.2
argument_list|)
expr_stmt|;
comment|// disjoint with everything?
name|shape
operator|=
operator|new
name|GeoStandardCircle
argument_list|(
name|PlanetModel
operator|.
name|SPHERE
argument_list|,
literal|0.0
argument_list|,
literal|0.0
argument_list|,
literal|0.1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|GeoArea
operator|.
name|DISJOINT
argument_list|,
name|solid
operator|.
name|getRelationship
argument_list|(
name|shape
argument_list|)
argument_list|)
expr_stmt|;
name|shape
operator|=
operator|new
name|GeoWorld
argument_list|(
name|PlanetModel
operator|.
name|SPHERE
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|GeoArea
operator|.
name|DISJOINT
argument_list|,
name|solid
operator|.
name|getRelationship
argument_list|(
name|shape
argument_list|)
argument_list|)
expr_stmt|;
comment|// Build a shape that is disjoint in X but intersects sphere in a complete circle
name|solid
operator|=
name|GeoAreaFactory
operator|.
name|makeGeoArea
argument_list|(
name|PlanetModel
operator|.
name|SPHERE
argument_list|,
literal|0.0
argument_list|,
literal|0.0
argument_list|,
operator|-
literal|1.1
argument_list|,
literal|1.1
argument_list|,
operator|-
literal|1.1
argument_list|,
literal|1.1
argument_list|)
expr_stmt|;
comment|// inside everything that it touches?
name|shape
operator|=
operator|new
name|GeoWorld
argument_list|(
name|PlanetModel
operator|.
name|SPHERE
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|GeoArea
operator|.
name|CONTAINS
argument_list|,
name|solid
operator|.
name|getRelationship
argument_list|(
name|shape
argument_list|)
argument_list|)
expr_stmt|;
name|shape
operator|=
operator|new
name|GeoStandardCircle
argument_list|(
name|PlanetModel
operator|.
name|SPHERE
argument_list|,
literal|0.0
argument_list|,
literal|0.0
argument_list|,
literal|0.1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|GeoArea
operator|.
name|DISJOINT
argument_list|,
name|solid
operator|.
name|getRelationship
argument_list|(
name|shape
argument_list|)
argument_list|)
expr_stmt|;
name|shape
operator|=
operator|new
name|GeoStandardCircle
argument_list|(
name|PlanetModel
operator|.
name|SPHERE
argument_list|,
literal|0.0
argument_list|,
name|Math
operator|.
name|PI
argument_list|,
literal|0.1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|GeoArea
operator|.
name|DISJOINT
argument_list|,
name|solid
operator|.
name|getRelationship
argument_list|(
name|shape
argument_list|)
argument_list|)
expr_stmt|;
name|shape
operator|=
operator|new
name|GeoStandardCircle
argument_list|(
name|PlanetModel
operator|.
name|SPHERE
argument_list|,
literal|0.0
argument_list|,
name|Math
operator|.
name|PI
operator|*
literal|0.5
argument_list|,
literal|0.1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|GeoArea
operator|.
name|OVERLAPS
argument_list|,
name|solid
operator|.
name|getRelationship
argument_list|(
name|shape
argument_list|)
argument_list|)
expr_stmt|;
name|shape
operator|=
operator|new
name|GeoStandardCircle
argument_list|(
name|PlanetModel
operator|.
name|SPHERE
argument_list|,
literal|0.0
argument_list|,
operator|-
name|Math
operator|.
name|PI
operator|*
literal|0.5
argument_list|,
literal|0.1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|GeoArea
operator|.
name|OVERLAPS
argument_list|,
name|solid
operator|.
name|getRelationship
argument_list|(
name|shape
argument_list|)
argument_list|)
expr_stmt|;
name|shape
operator|=
operator|new
name|GeoStandardCircle
argument_list|(
name|PlanetModel
operator|.
name|SPHERE
argument_list|,
name|Math
operator|.
name|PI
operator|*
literal|0.5
argument_list|,
literal|0.0
argument_list|,
literal|0.1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|GeoArea
operator|.
name|OVERLAPS
argument_list|,
name|solid
operator|.
name|getRelationship
argument_list|(
name|shape
argument_list|)
argument_list|)
expr_stmt|;
name|shape
operator|=
operator|new
name|GeoStandardCircle
argument_list|(
name|PlanetModel
operator|.
name|SPHERE
argument_list|,
operator|-
name|Math
operator|.
name|PI
operator|*
literal|0.5
argument_list|,
literal|0.0
argument_list|,
literal|0.1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|GeoArea
operator|.
name|OVERLAPS
argument_list|,
name|solid
operator|.
name|getRelationship
argument_list|(
name|shape
argument_list|)
argument_list|)
expr_stmt|;
comment|// Build a shape that is disjoint in X but intersects sphere in a half circle in Y
name|solid
operator|=
name|GeoAreaFactory
operator|.
name|makeGeoArea
argument_list|(
name|PlanetModel
operator|.
name|SPHERE
argument_list|,
literal|0.0
argument_list|,
literal|0.0
argument_list|,
literal|0.0
argument_list|,
literal|1.1
argument_list|,
operator|-
literal|1.1
argument_list|,
literal|1.1
argument_list|)
expr_stmt|;
comment|// inside everything that it touches?
name|shape
operator|=
operator|new
name|GeoWorld
argument_list|(
name|PlanetModel
operator|.
name|SPHERE
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|GeoArea
operator|.
name|CONTAINS
argument_list|,
name|solid
operator|.
name|getRelationship
argument_list|(
name|shape
argument_list|)
argument_list|)
expr_stmt|;
name|shape
operator|=
operator|new
name|GeoStandardCircle
argument_list|(
name|PlanetModel
operator|.
name|SPHERE
argument_list|,
literal|0.0
argument_list|,
literal|0.0
argument_list|,
literal|0.1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|GeoArea
operator|.
name|DISJOINT
argument_list|,
name|solid
operator|.
name|getRelationship
argument_list|(
name|shape
argument_list|)
argument_list|)
expr_stmt|;
name|shape
operator|=
operator|new
name|GeoStandardCircle
argument_list|(
name|PlanetModel
operator|.
name|SPHERE
argument_list|,
literal|0.0
argument_list|,
name|Math
operator|.
name|PI
argument_list|,
literal|0.1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|GeoArea
operator|.
name|DISJOINT
argument_list|,
name|solid
operator|.
name|getRelationship
argument_list|(
name|shape
argument_list|)
argument_list|)
expr_stmt|;
name|shape
operator|=
operator|new
name|GeoStandardCircle
argument_list|(
name|PlanetModel
operator|.
name|SPHERE
argument_list|,
literal|0.0
argument_list|,
name|Math
operator|.
name|PI
operator|*
literal|0.5
argument_list|,
literal|0.1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|GeoArea
operator|.
name|OVERLAPS
argument_list|,
name|solid
operator|.
name|getRelationship
argument_list|(
name|shape
argument_list|)
argument_list|)
expr_stmt|;
name|shape
operator|=
operator|new
name|GeoStandardCircle
argument_list|(
name|PlanetModel
operator|.
name|SPHERE
argument_list|,
literal|0.0
argument_list|,
operator|-
name|Math
operator|.
name|PI
operator|*
literal|0.5
argument_list|,
literal|0.1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|GeoArea
operator|.
name|DISJOINT
argument_list|,
name|solid
operator|.
name|getRelationship
argument_list|(
name|shape
argument_list|)
argument_list|)
expr_stmt|;
name|shape
operator|=
operator|new
name|GeoStandardCircle
argument_list|(
name|PlanetModel
operator|.
name|SPHERE
argument_list|,
name|Math
operator|.
name|PI
operator|*
literal|0.5
argument_list|,
literal|0.0
argument_list|,
literal|0.1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|GeoArea
operator|.
name|OVERLAPS
argument_list|,
name|solid
operator|.
name|getRelationship
argument_list|(
name|shape
argument_list|)
argument_list|)
expr_stmt|;
name|shape
operator|=
operator|new
name|GeoStandardCircle
argument_list|(
name|PlanetModel
operator|.
name|SPHERE
argument_list|,
operator|-
name|Math
operator|.
name|PI
operator|*
literal|0.5
argument_list|,
literal|0.0
argument_list|,
literal|0.1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|GeoArea
operator|.
name|OVERLAPS
argument_list|,
name|solid
operator|.
name|getRelationship
argument_list|(
name|shape
argument_list|)
argument_list|)
expr_stmt|;
comment|// MHL for degenerate Y
comment|// MHL for degenerate Z
block|}
block|}
end_class
end_unit
