begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.spatial3d
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial3d
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|Codec
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|FilterCodec
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|PointsFormat
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|PointsReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|PointsWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|lucene60
operator|.
name|Lucene60PointsReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|lucene60
operator|.
name|Lucene60PointsWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|NumericDocValuesField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial3d
operator|.
name|geom
operator|.
name|GeoArea
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial3d
operator|.
name|geom
operator|.
name|GeoAreaFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial3d
operator|.
name|geom
operator|.
name|GeoBBoxFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial3d
operator|.
name|geom
operator|.
name|GeoCircleFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial3d
operator|.
name|geom
operator|.
name|GeoPath
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial3d
operator|.
name|geom
operator|.
name|GeoPoint
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial3d
operator|.
name|geom
operator|.
name|GeoPolygonFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial3d
operator|.
name|geom
operator|.
name|GeoShape
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial3d
operator|.
name|geom
operator|.
name|PlanetModel
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial3d
operator|.
name|geom
operator|.
name|XYZBounds
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DirectoryReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriterConfig
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReaderContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|MultiDocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|NumericDocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SegmentReadState
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SegmentWriteState
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|SimpleCollector
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|FixedBitSet
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|TestUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import
begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|generators
operator|.
name|RandomInts
import|;
end_import
begin_class
DECL|class|TestGeo3DPoint
specifier|public
class|class
name|TestGeo3DPoint
extends|extends
name|LuceneTestCase
block|{
DECL|field|smallBBox
specifier|private
specifier|static
name|boolean
name|smallBBox
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|beforeClass
specifier|public
specifier|static
name|void
name|beforeClass
parameter_list|()
block|{
name|smallBBox
operator|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"TEST: smallBBox="
operator|+
name|smallBBox
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getCodec
specifier|private
specifier|static
name|Codec
name|getCodec
parameter_list|()
block|{
if|if
condition|(
name|Codec
operator|.
name|getDefault
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"Lucene60"
argument_list|)
condition|)
block|{
name|int
name|maxPointsInLeafNode
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|16
argument_list|,
literal|2048
argument_list|)
decl_stmt|;
name|double
name|maxMBSortInHeap
init|=
literal|3.0
operator|+
operator|(
literal|3
operator|*
name|random
argument_list|()
operator|.
name|nextDouble
argument_list|()
operator|)
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TEST: using Lucene60PointsFormat with maxPointsInLeafNode="
operator|+
name|maxPointsInLeafNode
operator|+
literal|" and maxMBSortInHeap="
operator|+
name|maxMBSortInHeap
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|FilterCodec
argument_list|(
literal|"Lucene60"
argument_list|,
name|Codec
operator|.
name|getDefault
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|PointsFormat
name|pointsFormat
parameter_list|()
block|{
return|return
operator|new
name|PointsFormat
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|PointsWriter
name|fieldsWriter
parameter_list|(
name|SegmentWriteState
name|writeState
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|Lucene60PointsWriter
argument_list|(
name|writeState
argument_list|,
name|maxPointsInLeafNode
argument_list|,
name|maxMBSortInHeap
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|PointsReader
name|fieldsReader
parameter_list|(
name|SegmentReadState
name|readState
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|Lucene60PointsReader
argument_list|(
name|readState
argument_list|)
return|;
block|}
block|}
return|;
block|}
block|}
return|;
block|}
else|else
block|{
return|return
name|Codec
operator|.
name|getDefault
argument_list|()
return|;
block|}
block|}
DECL|method|testBasic
specifier|public
name|void
name|testBasic
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|dir
init|=
name|getDirectory
argument_list|()
decl_stmt|;
name|IndexWriterConfig
name|iwc
init|=
name|newIndexWriterConfig
argument_list|()
decl_stmt|;
name|iwc
operator|.
name|setCodec
argument_list|(
name|getCodec
argument_list|()
argument_list|)
expr_stmt|;
name|IndexWriter
name|w
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|iwc
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Geo3DPoint
argument_list|(
literal|"field"
argument_list|,
name|toRadians
argument_list|(
literal|50.7345267
argument_list|)
argument_list|,
name|toRadians
argument_list|(
operator|-
literal|97.5303555
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|IndexReader
name|r
init|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|w
argument_list|)
decl_stmt|;
comment|// We can't wrap with "exotic" readers because the query must see the BKD3DDVFormat:
name|IndexSearcher
name|s
init|=
name|newSearcher
argument_list|(
name|r
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|s
operator|.
name|search
argument_list|(
name|Geo3DPoint
operator|.
name|newShapeQuery
argument_list|(
literal|"field"
argument_list|,
name|GeoCircleFactory
operator|.
name|makeGeoCircle
argument_list|(
name|PlanetModel
operator|.
name|WGS84
argument_list|,
name|toRadians
argument_list|(
literal|50
argument_list|)
argument_list|,
name|toRadians
argument_list|(
operator|-
literal|97
argument_list|)
argument_list|,
name|Math
operator|.
name|PI
operator|/
literal|180.
argument_list|)
argument_list|)
argument_list|,
literal|1
argument_list|)
operator|.
name|totalHits
argument_list|)
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|toRadians
specifier|private
specifier|static
name|double
name|toRadians
parameter_list|(
name|double
name|degrees
parameter_list|)
block|{
return|return
name|Math
operator|.
name|PI
operator|*
operator|(
name|degrees
operator|/
literal|360.0
operator|)
return|;
block|}
DECL|method|getPlanetModel
specifier|private
specifier|static
name|PlanetModel
name|getPlanetModel
parameter_list|()
block|{
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
comment|// Use one of the earth models:
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
return|return
name|PlanetModel
operator|.
name|WGS84
return|;
block|}
else|else
block|{
return|return
name|PlanetModel
operator|.
name|SPHERE
return|;
block|}
block|}
else|else
block|{
comment|// Make a randomly squashed planet:
name|double
name|oblateness
init|=
name|random
argument_list|()
operator|.
name|nextDouble
argument_list|()
operator|*
literal|0.5
operator|-
literal|0.25
decl_stmt|;
return|return
operator|new
name|PlanetModel
argument_list|(
literal|1.0
operator|+
name|oblateness
argument_list|,
literal|1.0
operator|-
name|oblateness
argument_list|)
return|;
block|}
block|}
DECL|class|Cell
specifier|private
specifier|static
class|class
name|Cell
block|{
DECL|field|nextCellID
specifier|static
name|int
name|nextCellID
decl_stmt|;
DECL|field|parent
specifier|final
name|Cell
name|parent
decl_stmt|;
DECL|field|cellID
specifier|final
name|int
name|cellID
decl_stmt|;
DECL|field|xMinEnc
DECL|field|xMaxEnc
specifier|final
name|int
name|xMinEnc
decl_stmt|,
name|xMaxEnc
decl_stmt|;
DECL|field|yMinEnc
DECL|field|yMaxEnc
specifier|final
name|int
name|yMinEnc
decl_stmt|,
name|yMaxEnc
decl_stmt|;
DECL|field|zMinEnc
DECL|field|zMaxEnc
specifier|final
name|int
name|zMinEnc
decl_stmt|,
name|zMaxEnc
decl_stmt|;
DECL|field|splitCount
specifier|final
name|int
name|splitCount
decl_stmt|;
DECL|method|Cell
specifier|public
name|Cell
parameter_list|(
name|Cell
name|parent
parameter_list|,
name|int
name|xMinEnc
parameter_list|,
name|int
name|xMaxEnc
parameter_list|,
name|int
name|yMinEnc
parameter_list|,
name|int
name|yMaxEnc
parameter_list|,
name|int
name|zMinEnc
parameter_list|,
name|int
name|zMaxEnc
parameter_list|,
name|int
name|splitCount
parameter_list|)
block|{
name|this
operator|.
name|parent
operator|=
name|parent
expr_stmt|;
name|this
operator|.
name|xMinEnc
operator|=
name|xMinEnc
expr_stmt|;
name|this
operator|.
name|xMaxEnc
operator|=
name|xMaxEnc
expr_stmt|;
name|this
operator|.
name|yMinEnc
operator|=
name|yMinEnc
expr_stmt|;
name|this
operator|.
name|yMaxEnc
operator|=
name|yMaxEnc
expr_stmt|;
name|this
operator|.
name|zMinEnc
operator|=
name|zMinEnc
expr_stmt|;
name|this
operator|.
name|zMaxEnc
operator|=
name|zMaxEnc
expr_stmt|;
name|this
operator|.
name|cellID
operator|=
name|nextCellID
operator|++
expr_stmt|;
name|this
operator|.
name|splitCount
operator|=
name|splitCount
expr_stmt|;
block|}
comment|/** Returns true if the quantized point lies within this cell, inclusive on all bounds. */
DECL|method|contains
specifier|public
name|boolean
name|contains
parameter_list|(
name|double
name|planetMax
parameter_list|,
name|GeoPoint
name|point
parameter_list|)
block|{
name|int
name|docX
init|=
name|Geo3DUtil
operator|.
name|encodeValue
argument_list|(
name|planetMax
argument_list|,
name|point
operator|.
name|x
argument_list|)
decl_stmt|;
name|int
name|docY
init|=
name|Geo3DUtil
operator|.
name|encodeValue
argument_list|(
name|planetMax
argument_list|,
name|point
operator|.
name|y
argument_list|)
decl_stmt|;
name|int
name|docZ
init|=
name|Geo3DUtil
operator|.
name|encodeValue
argument_list|(
name|planetMax
argument_list|,
name|point
operator|.
name|z
argument_list|)
decl_stmt|;
return|return
name|docX
operator|>=
name|xMinEnc
operator|&&
name|docX
operator|<=
name|xMaxEnc
operator|&&
name|docY
operator|>=
name|yMinEnc
operator|&&
name|docY
operator|<=
name|yMaxEnc
operator|&&
name|docZ
operator|>=
name|zMinEnc
operator|&&
name|docZ
operator|<=
name|zMaxEnc
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"cell="
operator|+
name|cellID
operator|+
operator|(
name|parent
operator|==
literal|null
condition|?
literal|""
else|:
literal|" parentCellID="
operator|+
name|parent
operator|.
name|cellID
operator|)
operator|+
literal|" x: "
operator|+
name|xMinEnc
operator|+
literal|" TO "
operator|+
name|xMaxEnc
operator|+
literal|", y: "
operator|+
name|yMinEnc
operator|+
literal|" TO "
operator|+
name|yMaxEnc
operator|+
literal|", z: "
operator|+
name|zMinEnc
operator|+
literal|" TO "
operator|+
name|zMaxEnc
operator|+
literal|", splits: "
operator|+
name|splitCount
return|;
block|}
block|}
DECL|method|quantize
specifier|private
specifier|static
name|GeoPoint
name|quantize
parameter_list|(
name|double
name|planetMax
parameter_list|,
name|GeoPoint
name|point
parameter_list|)
block|{
return|return
operator|new
name|GeoPoint
argument_list|(
name|Geo3DUtil
operator|.
name|decodeValueCenter
argument_list|(
name|planetMax
argument_list|,
name|Geo3DUtil
operator|.
name|encodeValue
argument_list|(
name|planetMax
argument_list|,
name|point
operator|.
name|x
argument_list|)
argument_list|)
argument_list|,
name|Geo3DUtil
operator|.
name|decodeValueCenter
argument_list|(
name|planetMax
argument_list|,
name|Geo3DUtil
operator|.
name|encodeValue
argument_list|(
name|planetMax
argument_list|,
name|point
operator|.
name|y
argument_list|)
argument_list|)
argument_list|,
name|Geo3DUtil
operator|.
name|decodeValueCenter
argument_list|(
name|planetMax
argument_list|,
name|Geo3DUtil
operator|.
name|encodeValue
argument_list|(
name|planetMax
argument_list|,
name|point
operator|.
name|z
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
comment|/** Tests consistency of GeoArea.getRelationship vs GeoShape.isWithin */
DECL|method|testGeo3DRelations
specifier|public
name|void
name|testGeo3DRelations
parameter_list|()
throws|throws
name|Exception
block|{
name|PlanetModel
name|planetModel
init|=
name|getPlanetModel
argument_list|()
decl_stmt|;
name|int
name|numDocs
init|=
name|atLeast
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TEST: "
operator|+
name|numDocs
operator|+
literal|" docs"
argument_list|)
expr_stmt|;
block|}
name|GeoPoint
index|[]
name|docs
init|=
operator|new
name|GeoPoint
index|[
name|numDocs
index|]
decl_stmt|;
for|for
control|(
name|int
name|docID
init|=
literal|0
init|;
name|docID
operator|<
name|numDocs
condition|;
name|docID
operator|++
control|)
block|{
name|docs
index|[
name|docID
index|]
operator|=
operator|new
name|GeoPoint
argument_list|(
name|planetModel
argument_list|,
name|toRadians
argument_list|(
name|randomLat
argument_list|()
argument_list|)
argument_list|,
name|toRadians
argument_list|(
name|randomLon
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  doc="
operator|+
name|docID
operator|+
literal|": "
operator|+
name|docs
index|[
name|docID
index|]
argument_list|)
expr_stmt|;
block|}
block|}
name|double
name|planetMax
init|=
name|planetModel
operator|.
name|getMaximumMagnitude
argument_list|()
decl_stmt|;
name|int
name|iters
init|=
name|atLeast
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|int
name|recurseDepth
init|=
name|RandomInts
operator|.
name|randomIntBetween
argument_list|(
name|random
argument_list|()
argument_list|,
literal|5
argument_list|,
literal|15
argument_list|)
decl_stmt|;
name|iters
operator|=
name|atLeast
argument_list|(
literal|50
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|iter
init|=
literal|0
init|;
name|iter
operator|<
name|iters
condition|;
name|iter
operator|++
control|)
block|{
name|GeoShape
name|shape
init|=
name|randomShape
argument_list|(
name|planetModel
argument_list|)
decl_stmt|;
name|StringWriter
name|sw
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|PrintWriter
name|log
init|=
operator|new
name|PrintWriter
argument_list|(
name|sw
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|log
operator|.
name|println
argument_list|(
literal|"TEST: iter="
operator|+
name|iter
operator|+
literal|" shape="
operator|+
name|shape
argument_list|)
expr_stmt|;
block|}
name|XYZBounds
name|bounds
init|=
operator|new
name|XYZBounds
argument_list|()
decl_stmt|;
name|shape
operator|.
name|getBounds
argument_list|(
name|bounds
argument_list|)
expr_stmt|;
comment|// Start with the root cell that fully contains the shape:
name|Cell
name|root
init|=
operator|new
name|Cell
argument_list|(
literal|null
argument_list|,
name|Geo3DUtil
operator|.
name|encodeValueLenient
argument_list|(
name|planetMax
argument_list|,
name|bounds
operator|.
name|getMinimumX
argument_list|()
argument_list|)
argument_list|,
name|Geo3DUtil
operator|.
name|encodeValueLenient
argument_list|(
name|planetMax
argument_list|,
name|bounds
operator|.
name|getMaximumX
argument_list|()
argument_list|)
argument_list|,
name|Geo3DUtil
operator|.
name|encodeValueLenient
argument_list|(
name|planetMax
argument_list|,
name|bounds
operator|.
name|getMinimumY
argument_list|()
argument_list|)
argument_list|,
name|Geo3DUtil
operator|.
name|encodeValueLenient
argument_list|(
name|planetMax
argument_list|,
name|bounds
operator|.
name|getMaximumY
argument_list|()
argument_list|)
argument_list|,
name|Geo3DUtil
operator|.
name|encodeValueLenient
argument_list|(
name|planetMax
argument_list|,
name|bounds
operator|.
name|getMinimumZ
argument_list|()
argument_list|)
argument_list|,
name|Geo3DUtil
operator|.
name|encodeValueLenient
argument_list|(
name|planetMax
argument_list|,
name|bounds
operator|.
name|getMaximumZ
argument_list|()
argument_list|)
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|log
operator|.
name|println
argument_list|(
literal|"  root cell: "
operator|+
name|root
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|Cell
argument_list|>
name|queue
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|queue
operator|.
name|add
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Integer
argument_list|>
name|hits
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
while|while
condition|(
name|queue
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Cell
name|cell
init|=
name|queue
operator|.
name|get
argument_list|(
name|queue
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|queue
operator|.
name|remove
argument_list|(
name|queue
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|log
operator|.
name|println
argument_list|(
literal|"  cycle: "
operator|+
name|cell
operator|+
literal|" queue.size()="
operator|+
name|queue
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
operator|==
literal|7
operator|||
name|cell
operator|.
name|splitCount
operator|>
name|recurseDepth
condition|)
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|log
operator|.
name|println
argument_list|(
literal|"    leaf"
argument_list|)
expr_stmt|;
block|}
comment|// Leaf cell: brute force check all docs that fall within this cell:
for|for
control|(
name|int
name|docID
init|=
literal|0
init|;
name|docID
operator|<
name|numDocs
condition|;
name|docID
operator|++
control|)
block|{
name|GeoPoint
name|point
init|=
name|docs
index|[
name|docID
index|]
decl_stmt|;
if|if
condition|(
name|cell
operator|.
name|contains
argument_list|(
name|planetMax
argument_list|,
name|point
argument_list|)
condition|)
block|{
if|if
condition|(
name|shape
operator|.
name|isWithin
argument_list|(
name|quantize
argument_list|(
name|planetMax
argument_list|,
name|point
argument_list|)
argument_list|)
condition|)
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|log
operator|.
name|println
argument_list|(
literal|"    check doc="
operator|+
name|docID
operator|+
literal|": match!"
argument_list|)
expr_stmt|;
block|}
name|hits
operator|.
name|add
argument_list|(
name|docID
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|log
operator|.
name|println
argument_list|(
literal|"    check doc="
operator|+
name|docID
operator|+
literal|": no match"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
else|else
block|{
name|GeoArea
name|xyzSolid
init|=
name|GeoAreaFactory
operator|.
name|makeGeoArea
argument_list|(
name|planetModel
argument_list|,
name|Geo3DUtil
operator|.
name|decodeValueMin
argument_list|(
name|planetMax
argument_list|,
name|cell
operator|.
name|xMinEnc
argument_list|)
argument_list|,
name|Geo3DUtil
operator|.
name|decodeValueMax
argument_list|(
name|planetMax
argument_list|,
name|cell
operator|.
name|xMaxEnc
argument_list|)
argument_list|,
name|Geo3DUtil
operator|.
name|decodeValueMin
argument_list|(
name|planetMax
argument_list|,
name|cell
operator|.
name|yMinEnc
argument_list|)
argument_list|,
name|Geo3DUtil
operator|.
name|decodeValueMax
argument_list|(
name|planetMax
argument_list|,
name|cell
operator|.
name|yMaxEnc
argument_list|)
argument_list|,
name|Geo3DUtil
operator|.
name|decodeValueMin
argument_list|(
name|planetMax
argument_list|,
name|cell
operator|.
name|zMinEnc
argument_list|)
argument_list|,
name|Geo3DUtil
operator|.
name|decodeValueMax
argument_list|(
name|planetMax
argument_list|,
name|cell
operator|.
name|zMaxEnc
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|log
operator|.
name|println
argument_list|(
literal|"    minx="
operator|+
name|Geo3DUtil
operator|.
name|decodeValueMin
argument_list|(
name|planetMax
argument_list|,
name|cell
operator|.
name|xMinEnc
argument_list|)
operator|+
literal|" maxx="
operator|+
name|Geo3DUtil
operator|.
name|decodeValueMax
argument_list|(
name|planetMax
argument_list|,
name|cell
operator|.
name|xMaxEnc
argument_list|)
operator|+
literal|" miny="
operator|+
name|Geo3DUtil
operator|.
name|decodeValueMin
argument_list|(
name|planetMax
argument_list|,
name|cell
operator|.
name|yMinEnc
argument_list|)
operator|+
literal|" maxy="
operator|+
name|Geo3DUtil
operator|.
name|decodeValueMax
argument_list|(
name|planetMax
argument_list|,
name|cell
operator|.
name|yMaxEnc
argument_list|)
operator|+
literal|" minz="
operator|+
name|Geo3DUtil
operator|.
name|decodeValueMin
argument_list|(
name|planetMax
argument_list|,
name|cell
operator|.
name|zMinEnc
argument_list|)
operator|+
literal|" maxz="
operator|+
name|Geo3DUtil
operator|.
name|decodeValueMax
argument_list|(
name|planetMax
argument_list|,
name|cell
operator|.
name|zMaxEnc
argument_list|)
argument_list|)
expr_stmt|;
block|}
switch|switch
condition|(
name|xyzSolid
operator|.
name|getRelationship
argument_list|(
name|shape
argument_list|)
condition|)
block|{
case|case
name|GeoArea
operator|.
name|CONTAINS
case|:
comment|// Shape fully contains the cell: blindly add all docs in this cell:
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|log
operator|.
name|println
argument_list|(
literal|"    GeoArea.CONTAINS: now addAll"
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|docID
init|=
literal|0
init|;
name|docID
operator|<
name|numDocs
condition|;
name|docID
operator|++
control|)
block|{
if|if
condition|(
name|cell
operator|.
name|contains
argument_list|(
name|planetMax
argument_list|,
name|docs
index|[
name|docID
index|]
argument_list|)
condition|)
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|log
operator|.
name|println
argument_list|(
literal|"    addAll doc="
operator|+
name|docID
argument_list|)
expr_stmt|;
block|}
name|hits
operator|.
name|add
argument_list|(
name|docID
argument_list|)
expr_stmt|;
block|}
block|}
continue|continue;
case|case
name|GeoArea
operator|.
name|OVERLAPS
case|:
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|log
operator|.
name|println
argument_list|(
literal|"    GeoArea.OVERLAPS: keep splitting"
argument_list|)
expr_stmt|;
block|}
comment|// They do overlap but neither contains the other:
comment|//log.println("    crosses1");
break|break;
case|case
name|GeoArea
operator|.
name|WITHIN
case|:
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|log
operator|.
name|println
argument_list|(
literal|"    GeoArea.WITHIN: keep splitting"
argument_list|)
expr_stmt|;
block|}
comment|// Cell fully contains the shape:
comment|//log.println("    crosses2");
break|break;
case|case
name|GeoArea
operator|.
name|DISJOINT
case|:
comment|// They do not overlap at all: don't recurse on this cell
comment|//log.println("    outside");
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|log
operator|.
name|println
argument_list|(
literal|"    GeoArea.DISJOINT: drop this cell"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|docID
init|=
literal|0
init|;
name|docID
operator|<
name|numDocs
condition|;
name|docID
operator|++
control|)
block|{
if|if
condition|(
name|cell
operator|.
name|contains
argument_list|(
name|planetMax
argument_list|,
name|docs
index|[
name|docID
index|]
argument_list|)
condition|)
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|log
operator|.
name|println
argument_list|(
literal|"    skip doc="
operator|+
name|docID
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
continue|continue;
default|default:
assert|assert
literal|false
assert|;
block|}
comment|// Randomly split:
switch|switch
condition|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|3
argument_list|)
condition|)
block|{
case|case
literal|0
case|:
comment|// Split on X:
block|{
name|int
name|splitValue
init|=
name|RandomInts
operator|.
name|randomIntBetween
argument_list|(
name|random
argument_list|()
argument_list|,
name|cell
operator|.
name|xMinEnc
argument_list|,
name|cell
operator|.
name|xMaxEnc
argument_list|)
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|log
operator|.
name|println
argument_list|(
literal|"    now split on x="
operator|+
name|splitValue
argument_list|)
expr_stmt|;
block|}
name|Cell
name|cell1
init|=
operator|new
name|Cell
argument_list|(
name|cell
argument_list|,
name|cell
operator|.
name|xMinEnc
argument_list|,
name|splitValue
argument_list|,
name|cell
operator|.
name|yMinEnc
argument_list|,
name|cell
operator|.
name|yMaxEnc
argument_list|,
name|cell
operator|.
name|zMinEnc
argument_list|,
name|cell
operator|.
name|zMaxEnc
argument_list|,
name|cell
operator|.
name|splitCount
operator|+
literal|1
argument_list|)
decl_stmt|;
name|Cell
name|cell2
init|=
operator|new
name|Cell
argument_list|(
name|cell
argument_list|,
name|splitValue
argument_list|,
name|cell
operator|.
name|xMaxEnc
argument_list|,
name|cell
operator|.
name|yMinEnc
argument_list|,
name|cell
operator|.
name|yMaxEnc
argument_list|,
name|cell
operator|.
name|zMinEnc
argument_list|,
name|cell
operator|.
name|zMaxEnc
argument_list|,
name|cell
operator|.
name|splitCount
operator|+
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|log
operator|.
name|println
argument_list|(
literal|"    split cell1: "
operator|+
name|cell1
argument_list|)
expr_stmt|;
name|log
operator|.
name|println
argument_list|(
literal|"    split cell2: "
operator|+
name|cell2
argument_list|)
expr_stmt|;
block|}
name|queue
operator|.
name|add
argument_list|(
name|cell1
argument_list|)
expr_stmt|;
name|queue
operator|.
name|add
argument_list|(
name|cell2
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|1
case|:
comment|// Split on Y:
block|{
name|int
name|splitValue
init|=
name|RandomInts
operator|.
name|randomIntBetween
argument_list|(
name|random
argument_list|()
argument_list|,
name|cell
operator|.
name|yMinEnc
argument_list|,
name|cell
operator|.
name|yMaxEnc
argument_list|)
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|log
operator|.
name|println
argument_list|(
literal|"    now split on y="
operator|+
name|splitValue
argument_list|)
expr_stmt|;
block|}
name|Cell
name|cell1
init|=
operator|new
name|Cell
argument_list|(
name|cell
argument_list|,
name|cell
operator|.
name|xMinEnc
argument_list|,
name|cell
operator|.
name|xMaxEnc
argument_list|,
name|cell
operator|.
name|yMinEnc
argument_list|,
name|splitValue
argument_list|,
name|cell
operator|.
name|zMinEnc
argument_list|,
name|cell
operator|.
name|zMaxEnc
argument_list|,
name|cell
operator|.
name|splitCount
operator|+
literal|1
argument_list|)
decl_stmt|;
name|Cell
name|cell2
init|=
operator|new
name|Cell
argument_list|(
name|cell
argument_list|,
name|cell
operator|.
name|xMinEnc
argument_list|,
name|cell
operator|.
name|xMaxEnc
argument_list|,
name|splitValue
argument_list|,
name|cell
operator|.
name|yMaxEnc
argument_list|,
name|cell
operator|.
name|zMinEnc
argument_list|,
name|cell
operator|.
name|zMaxEnc
argument_list|,
name|cell
operator|.
name|splitCount
operator|+
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|log
operator|.
name|println
argument_list|(
literal|"    split cell1: "
operator|+
name|cell1
argument_list|)
expr_stmt|;
name|log
operator|.
name|println
argument_list|(
literal|"    split cell2: "
operator|+
name|cell2
argument_list|)
expr_stmt|;
block|}
name|queue
operator|.
name|add
argument_list|(
name|cell1
argument_list|)
expr_stmt|;
name|queue
operator|.
name|add
argument_list|(
name|cell2
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// Split on Z:
block|{
name|int
name|splitValue
init|=
name|RandomInts
operator|.
name|randomIntBetween
argument_list|(
name|random
argument_list|()
argument_list|,
name|cell
operator|.
name|zMinEnc
argument_list|,
name|cell
operator|.
name|zMaxEnc
argument_list|)
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|log
operator|.
name|println
argument_list|(
literal|"    now split on z="
operator|+
name|splitValue
argument_list|)
expr_stmt|;
block|}
name|Cell
name|cell1
init|=
operator|new
name|Cell
argument_list|(
name|cell
argument_list|,
name|cell
operator|.
name|xMinEnc
argument_list|,
name|cell
operator|.
name|xMaxEnc
argument_list|,
name|cell
operator|.
name|yMinEnc
argument_list|,
name|cell
operator|.
name|yMaxEnc
argument_list|,
name|cell
operator|.
name|zMinEnc
argument_list|,
name|splitValue
argument_list|,
name|cell
operator|.
name|splitCount
operator|+
literal|1
argument_list|)
decl_stmt|;
name|Cell
name|cell2
init|=
operator|new
name|Cell
argument_list|(
name|cell
argument_list|,
name|cell
operator|.
name|xMinEnc
argument_list|,
name|cell
operator|.
name|xMaxEnc
argument_list|,
name|cell
operator|.
name|yMinEnc
argument_list|,
name|cell
operator|.
name|yMaxEnc
argument_list|,
name|splitValue
argument_list|,
name|cell
operator|.
name|zMaxEnc
argument_list|,
name|cell
operator|.
name|splitCount
operator|+
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|log
operator|.
name|println
argument_list|(
literal|"    split cell1: "
operator|+
name|cell1
argument_list|)
expr_stmt|;
name|log
operator|.
name|println
argument_list|(
literal|"    split cell2: "
operator|+
name|cell2
argument_list|)
expr_stmt|;
block|}
name|queue
operator|.
name|add
argument_list|(
name|cell1
argument_list|)
expr_stmt|;
name|queue
operator|.
name|add
argument_list|(
name|cell2
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
block|}
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|log
operator|.
name|println
argument_list|(
literal|"  "
operator|+
name|hits
operator|.
name|size
argument_list|()
operator|+
literal|" hits"
argument_list|)
expr_stmt|;
block|}
comment|// Done matching, now verify:
name|boolean
name|fail
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|docID
init|=
literal|0
init|;
name|docID
operator|<
name|numDocs
condition|;
name|docID
operator|++
control|)
block|{
name|GeoPoint
name|point
init|=
name|docs
index|[
name|docID
index|]
decl_stmt|;
name|GeoPoint
name|quantized
init|=
name|quantize
argument_list|(
name|planetMax
argument_list|,
name|point
argument_list|)
decl_stmt|;
name|boolean
name|expected
init|=
name|shape
operator|.
name|isWithin
argument_list|(
name|quantized
argument_list|)
decl_stmt|;
if|if
condition|(
name|expected
operator|!=
name|shape
operator|.
name|isWithin
argument_list|(
name|point
argument_list|)
condition|)
block|{
comment|// Quantization changed the result; skip testing this doc:
continue|continue;
block|}
name|boolean
name|actual
init|=
name|hits
operator|.
name|contains
argument_list|(
name|docID
argument_list|)
decl_stmt|;
if|if
condition|(
name|actual
operator|!=
name|expected
condition|)
block|{
if|if
condition|(
name|actual
condition|)
block|{
name|log
operator|.
name|println
argument_list|(
literal|"doc="
operator|+
name|docID
operator|+
literal|" matched but should not"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|println
argument_list|(
literal|"doc="
operator|+
name|docID
operator|+
literal|" did not match but should"
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|println
argument_list|(
literal|"  point="
operator|+
name|docs
index|[
name|docID
index|]
argument_list|)
expr_stmt|;
name|log
operator|.
name|println
argument_list|(
literal|"  quantized="
operator|+
name|quantize
argument_list|(
name|planetMax
argument_list|,
name|docs
index|[
name|docID
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|fail
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|fail
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
name|sw
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"invalid hits for shape="
operator|+
name|shape
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testRandomTiny
specifier|public
name|void
name|testRandomTiny
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Make sure single-leaf-node case is OK:
name|doTestRandom
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
DECL|method|testRandomMedium
specifier|public
name|void
name|testRandomMedium
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestRandom
argument_list|(
literal|10000
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Nightly
DECL|method|testRandomBig
specifier|public
name|void
name|testRandomBig
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestRandom
argument_list|(
literal|200000
argument_list|)
expr_stmt|;
block|}
DECL|method|doTestRandom
specifier|private
name|void
name|doTestRandom
parameter_list|(
name|int
name|count
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|numPoints
init|=
name|atLeast
argument_list|(
name|count
argument_list|)
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"TEST: numPoints="
operator|+
name|numPoints
argument_list|)
expr_stmt|;
block|}
name|double
index|[]
name|lats
init|=
operator|new
name|double
index|[
name|numPoints
index|]
decl_stmt|;
name|double
index|[]
name|lons
init|=
operator|new
name|double
index|[
name|numPoints
index|]
decl_stmt|;
name|boolean
name|haveRealDoc
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|docID
init|=
literal|0
init|;
name|docID
operator|<
name|numPoints
condition|;
name|docID
operator|++
control|)
block|{
name|int
name|x
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|20
argument_list|)
decl_stmt|;
if|if
condition|(
name|x
operator|==
literal|17
condition|)
block|{
comment|// Some docs don't have a point:
name|lats
index|[
name|docID
index|]
operator|=
name|Double
operator|.
name|NaN
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"  doc="
operator|+
name|docID
operator|+
literal|" is missing"
argument_list|)
expr_stmt|;
block|}
continue|continue;
block|}
if|if
condition|(
name|docID
operator|>
literal|0
operator|&&
name|x
operator|<
literal|3
operator|&&
name|haveRealDoc
condition|)
block|{
name|int
name|oldDocID
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|oldDocID
operator|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|docID
argument_list|)
expr_stmt|;
if|if
condition|(
name|Double
operator|.
name|isNaN
argument_list|(
name|lats
index|[
name|oldDocID
index|]
argument_list|)
operator|==
literal|false
condition|)
block|{
break|break;
block|}
block|}
if|if
condition|(
name|x
operator|==
literal|0
condition|)
block|{
comment|// Identical lat to old point
name|lats
index|[
name|docID
index|]
operator|=
name|lats
index|[
name|oldDocID
index|]
expr_stmt|;
name|lons
index|[
name|docID
index|]
operator|=
name|toRadians
argument_list|(
name|randomLon
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"  doc="
operator|+
name|docID
operator|+
literal|" lat="
operator|+
name|lats
index|[
name|docID
index|]
operator|+
literal|" lon="
operator|+
name|lons
index|[
name|docID
index|]
operator|+
literal|" (same lat as doc="
operator|+
name|oldDocID
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|x
operator|==
literal|1
condition|)
block|{
comment|// Identical lon to old point
name|lats
index|[
name|docID
index|]
operator|=
name|toRadians
argument_list|(
name|randomLat
argument_list|()
argument_list|)
expr_stmt|;
name|lons
index|[
name|docID
index|]
operator|=
name|lons
index|[
name|oldDocID
index|]
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"  doc="
operator|+
name|docID
operator|+
literal|" lat="
operator|+
name|lats
index|[
name|docID
index|]
operator|+
literal|" lon="
operator|+
name|lons
index|[
name|docID
index|]
operator|+
literal|" (same lon as doc="
operator|+
name|oldDocID
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
assert|assert
name|x
operator|==
literal|2
assert|;
comment|// Fully identical point:
name|lats
index|[
name|docID
index|]
operator|=
name|lats
index|[
name|oldDocID
index|]
expr_stmt|;
name|lons
index|[
name|docID
index|]
operator|=
name|lons
index|[
name|oldDocID
index|]
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"  doc="
operator|+
name|docID
operator|+
literal|" lat="
operator|+
name|lats
index|[
name|docID
index|]
operator|+
literal|" lon="
operator|+
name|lons
index|[
name|docID
index|]
operator|+
literal|" (same lat/lon as doc="
operator|+
name|oldDocID
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|lats
index|[
name|docID
index|]
operator|=
name|toRadians
argument_list|(
name|randomLat
argument_list|()
argument_list|)
expr_stmt|;
name|lons
index|[
name|docID
index|]
operator|=
name|toRadians
argument_list|(
name|randomLon
argument_list|()
argument_list|)
expr_stmt|;
name|haveRealDoc
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"  doc="
operator|+
name|docID
operator|+
literal|" lat="
operator|+
name|lats
index|[
name|docID
index|]
operator|+
literal|" lon="
operator|+
name|lons
index|[
name|docID
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|verify
argument_list|(
name|lats
argument_list|,
name|lons
argument_list|)
expr_stmt|;
block|}
DECL|method|randomLat
specifier|private
specifier|static
name|double
name|randomLat
parameter_list|()
block|{
if|if
condition|(
name|smallBBox
condition|)
block|{
return|return
literal|2.0
operator|*
operator|(
name|random
argument_list|()
operator|.
name|nextDouble
argument_list|()
operator|-
literal|0.5
operator|)
return|;
block|}
else|else
block|{
return|return
operator|-
literal|90
operator|+
literal|180.0
operator|*
name|random
argument_list|()
operator|.
name|nextDouble
argument_list|()
return|;
block|}
block|}
DECL|method|randomLon
specifier|private
specifier|static
name|double
name|randomLon
parameter_list|()
block|{
if|if
condition|(
name|smallBBox
condition|)
block|{
return|return
literal|2.0
operator|*
operator|(
name|random
argument_list|()
operator|.
name|nextDouble
argument_list|()
operator|-
literal|0.5
operator|)
return|;
block|}
else|else
block|{
return|return
operator|-
literal|180
operator|+
literal|360.0
operator|*
name|random
argument_list|()
operator|.
name|nextDouble
argument_list|()
return|;
block|}
block|}
comment|// Poached from Geo3dRptTest.randomShape:
DECL|method|randomShape
specifier|private
specifier|static
name|GeoShape
name|randomShape
parameter_list|(
name|PlanetModel
name|planetModel
parameter_list|)
block|{
while|while
condition|(
literal|true
condition|)
block|{
specifier|final
name|int
name|shapeType
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|4
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|shapeType
condition|)
block|{
case|case
literal|0
case|:
block|{
comment|// Polygons
specifier|final
name|int
name|vertexCount
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|3
argument_list|)
operator|+
literal|3
decl_stmt|;
specifier|final
name|List
argument_list|<
name|GeoPoint
argument_list|>
name|geoPoints
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
while|while
condition|(
name|geoPoints
operator|.
name|size
argument_list|()
operator|<
name|vertexCount
condition|)
block|{
specifier|final
name|GeoPoint
name|gPt
init|=
operator|new
name|GeoPoint
argument_list|(
name|planetModel
argument_list|,
name|toRadians
argument_list|(
name|randomLat
argument_list|()
argument_list|)
argument_list|,
name|toRadians
argument_list|(
name|randomLon
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|geoPoints
operator|.
name|add
argument_list|(
name|gPt
argument_list|)
expr_stmt|;
block|}
specifier|final
name|int
name|convexPointIndex
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|vertexCount
argument_list|)
decl_stmt|;
comment|//If we get this wrong, hopefully we get IllegalArgumentException
try|try
block|{
return|return
name|GeoPolygonFactory
operator|.
name|makeGeoPolygon
argument_list|(
name|planetModel
argument_list|,
name|geoPoints
argument_list|,
name|convexPointIndex
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|// This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where
comment|// the exception is thrown incorrectly, we aren't going to be able to do that in this random test.
continue|continue;
block|}
block|}
case|case
literal|1
case|:
block|{
comment|// Circles
name|double
name|lat
init|=
name|toRadians
argument_list|(
name|randomLat
argument_list|()
argument_list|)
decl_stmt|;
name|double
name|lon
init|=
name|toRadians
argument_list|(
name|randomLon
argument_list|()
argument_list|)
decl_stmt|;
name|double
name|angle
decl_stmt|;
if|if
condition|(
name|smallBBox
condition|)
block|{
name|angle
operator|=
name|random
argument_list|()
operator|.
name|nextDouble
argument_list|()
operator|*
name|Math
operator|.
name|PI
operator|/
literal|360.0
expr_stmt|;
block|}
else|else
block|{
name|angle
operator|=
name|random
argument_list|()
operator|.
name|nextDouble
argument_list|()
operator|*
name|Math
operator|.
name|PI
operator|/
literal|2.0
expr_stmt|;
block|}
try|try
block|{
return|return
name|GeoCircleFactory
operator|.
name|makeGeoCircle
argument_list|(
name|planetModel
argument_list|,
name|lat
argument_list|,
name|lon
argument_list|,
name|angle
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|iae
parameter_list|)
block|{
comment|// angle is too small; try again:
continue|continue;
block|}
block|}
case|case
literal|2
case|:
block|{
comment|// Rectangles
name|double
name|lat0
init|=
name|toRadians
argument_list|(
name|randomLat
argument_list|()
argument_list|)
decl_stmt|;
name|double
name|lat1
init|=
name|toRadians
argument_list|(
name|randomLat
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|lat1
operator|<
name|lat0
condition|)
block|{
name|double
name|x
init|=
name|lat0
decl_stmt|;
name|lat0
operator|=
name|lat1
expr_stmt|;
name|lat1
operator|=
name|x
expr_stmt|;
block|}
name|double
name|lon0
init|=
name|toRadians
argument_list|(
name|randomLon
argument_list|()
argument_list|)
decl_stmt|;
name|double
name|lon1
init|=
name|toRadians
argument_list|(
name|randomLon
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|lon1
operator|<
name|lon0
condition|)
block|{
name|double
name|x
init|=
name|lon0
decl_stmt|;
name|lon0
operator|=
name|lon1
expr_stmt|;
name|lon1
operator|=
name|x
expr_stmt|;
block|}
return|return
name|GeoBBoxFactory
operator|.
name|makeGeoBBox
argument_list|(
name|planetModel
argument_list|,
name|lat1
argument_list|,
name|lat0
argument_list|,
name|lon0
argument_list|,
name|lon1
argument_list|)
return|;
block|}
case|case
literal|3
case|:
block|{
comment|// Paths
specifier|final
name|int
name|pointCount
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|5
argument_list|)
operator|+
literal|1
decl_stmt|;
specifier|final
name|double
name|width
init|=
name|toRadians
argument_list|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|89
argument_list|)
operator|+
literal|1
argument_list|)
decl_stmt|;
try|try
block|{
specifier|final
name|GeoPath
name|path
init|=
operator|new
name|GeoPath
argument_list|(
name|planetModel
argument_list|,
name|width
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|pointCount
condition|;
name|i
operator|++
control|)
block|{
name|path
operator|.
name|addPoint
argument_list|(
name|toRadians
argument_list|(
name|randomLat
argument_list|()
argument_list|)
argument_list|,
name|toRadians
argument_list|(
name|randomLon
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|path
operator|.
name|done
argument_list|()
expr_stmt|;
return|return
name|path
return|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|// This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where
comment|// the exception is thrown incorrectly, we aren't going to be able to do that in this random test.
continue|continue;
block|}
block|}
default|default:
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unexpected shape type"
argument_list|)
throw|;
block|}
block|}
block|}
DECL|method|verify
specifier|private
specifier|static
name|void
name|verify
parameter_list|(
name|double
index|[]
name|lats
parameter_list|,
name|double
index|[]
name|lons
parameter_list|)
throws|throws
name|Exception
block|{
name|IndexWriterConfig
name|iwc
init|=
name|newIndexWriterConfig
argument_list|()
decl_stmt|;
comment|// Else we can get O(N^2) merging:
name|int
name|mbd
init|=
name|iwc
operator|.
name|getMaxBufferedDocs
argument_list|()
decl_stmt|;
if|if
condition|(
name|mbd
operator|!=
operator|-
literal|1
operator|&&
name|mbd
operator|<
name|lats
operator|.
name|length
operator|/
literal|100
condition|)
block|{
name|iwc
operator|.
name|setMaxBufferedDocs
argument_list|(
name|lats
operator|.
name|length
operator|/
literal|100
argument_list|)
expr_stmt|;
block|}
name|iwc
operator|.
name|setCodec
argument_list|(
name|getCodec
argument_list|()
argument_list|)
expr_stmt|;
name|Directory
name|dir
decl_stmt|;
if|if
condition|(
name|lats
operator|.
name|length
operator|>
literal|100000
condition|)
block|{
name|dir
operator|=
name|newFSDirectory
argument_list|(
name|createTempDir
argument_list|(
literal|"TestBKDTree"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|dir
operator|=
name|getDirectory
argument_list|()
expr_stmt|;
block|}
name|Set
argument_list|<
name|Integer
argument_list|>
name|deleted
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
comment|// RandomIndexWriter is too slow here:
name|IndexWriter
name|w
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|iwc
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|id
init|=
literal|0
init|;
name|id
operator|<
name|lats
operator|.
name|length
condition|;
name|id
operator|++
control|)
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newStringField
argument_list|(
literal|"id"
argument_list|,
literal|""
operator|+
name|id
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|NumericDocValuesField
argument_list|(
literal|"id"
argument_list|,
name|id
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|Double
operator|.
name|isNaN
argument_list|(
name|lats
index|[
name|id
index|]
argument_list|)
operator|==
literal|false
condition|)
block|{
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Geo3DPoint
argument_list|(
literal|"point"
argument_list|,
name|lats
index|[
name|id
index|]
argument_list|,
name|lons
index|[
name|id
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
if|if
condition|(
name|id
operator|>
literal|0
operator|&&
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
operator|==
literal|42
condition|)
block|{
name|int
name|idToDelete
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|w
operator|.
name|deleteDocuments
argument_list|(
operator|new
name|Term
argument_list|(
literal|"id"
argument_list|,
literal|""
operator|+
name|idToDelete
argument_list|)
argument_list|)
expr_stmt|;
name|deleted
operator|.
name|add
argument_list|(
name|idToDelete
argument_list|)
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"  delete id="
operator|+
name|idToDelete
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|w
operator|.
name|forceMerge
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
specifier|final
name|IndexReader
name|r
init|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|w
argument_list|)
decl_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// We can't wrap with "exotic" readers because the geo3d query must see the Geo3DDVFormat:
name|IndexSearcher
name|s
init|=
name|newSearcher
argument_list|(
name|r
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|int
name|numThreads
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|2
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Thread
argument_list|>
name|threads
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|int
name|iters
init|=
name|atLeast
argument_list|(
literal|100
argument_list|)
decl_stmt|;
specifier|final
name|CountDownLatch
name|startingGun
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|AtomicBoolean
name|failed
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numThreads
condition|;
name|i
operator|++
control|)
block|{
name|Thread
name|thread
init|=
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|_run
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|failed
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|_run
parameter_list|()
throws|throws
name|Exception
block|{
name|startingGun
operator|.
name|await
argument_list|()
expr_stmt|;
name|NumericDocValues
name|docIDToID
init|=
name|MultiDocValues
operator|.
name|getNumericValues
argument_list|(
name|r
argument_list|,
literal|"id"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|iter
init|=
literal|0
init|;
name|iter
operator|<
name|iters
operator|&&
name|failed
operator|.
name|get
argument_list|()
operator|==
literal|false
condition|;
name|iter
operator|++
control|)
block|{
name|GeoShape
name|shape
init|=
name|randomShape
argument_list|(
name|PlanetModel
operator|.
name|WGS84
argument_list|)
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"\n"
operator|+
name|Thread
operator|.
name|currentThread
argument_list|()
operator|+
literal|": TEST: iter="
operator|+
name|iter
operator|+
literal|" shape="
operator|+
name|shape
argument_list|)
expr_stmt|;
block|}
name|Query
name|query
init|=
name|Geo3DPoint
operator|.
name|newShapeQuery
argument_list|(
literal|"point"
argument_list|,
name|shape
argument_list|)
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"  using query: "
operator|+
name|query
argument_list|)
expr_stmt|;
block|}
specifier|final
name|FixedBitSet
name|hits
init|=
operator|new
name|FixedBitSet
argument_list|(
name|r
operator|.
name|maxDoc
argument_list|()
argument_list|)
decl_stmt|;
name|s
operator|.
name|search
argument_list|(
name|query
argument_list|,
operator|new
name|SimpleCollector
argument_list|()
block|{
specifier|private
name|int
name|docBase
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|needsScores
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|doSetNextReader
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|docBase
operator|=
name|context
operator|.
name|docBase
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|collect
parameter_list|(
name|int
name|doc
parameter_list|)
block|{
name|hits
operator|.
name|set
argument_list|(
name|docBase
operator|+
name|doc
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"  hitCount: "
operator|+
name|hits
operator|.
name|cardinality
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|docID
init|=
literal|0
init|;
name|docID
operator|<
name|r
operator|.
name|maxDoc
argument_list|()
condition|;
name|docID
operator|++
control|)
block|{
name|int
name|id
init|=
operator|(
name|int
operator|)
name|docIDToID
operator|.
name|get
argument_list|(
name|docID
argument_list|)
decl_stmt|;
if|if
condition|(
name|Double
operator|.
name|isNaN
argument_list|(
name|lats
index|[
name|id
index|]
argument_list|)
operator|==
literal|false
condition|)
block|{
comment|// Accurate point:
name|GeoPoint
name|point1
init|=
operator|new
name|GeoPoint
argument_list|(
name|PlanetModel
operator|.
name|WGS84
argument_list|,
name|lats
index|[
name|id
index|]
argument_list|,
name|lons
index|[
name|id
index|]
argument_list|)
decl_stmt|;
comment|// Quantized point (32 bits per dim):
name|GeoPoint
name|point2
init|=
name|quantize
argument_list|(
name|PlanetModel
operator|.
name|WGS84
operator|.
name|getMaximumMagnitude
argument_list|()
argument_list|,
name|point1
argument_list|)
decl_stmt|;
if|if
condition|(
name|shape
operator|.
name|isWithin
argument_list|(
name|point1
argument_list|)
operator|!=
name|shape
operator|.
name|isWithin
argument_list|(
name|point2
argument_list|)
condition|)
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  skip checking docID="
operator|+
name|docID
operator|+
literal|" quantization changed the expected result from "
operator|+
name|shape
operator|.
name|isWithin
argument_list|(
name|point1
argument_list|)
operator|+
literal|" to "
operator|+
name|shape
operator|.
name|isWithin
argument_list|(
name|point2
argument_list|)
argument_list|)
expr_stmt|;
block|}
continue|continue;
block|}
name|boolean
name|expected
init|=
operator|(
operator|(
name|deleted
operator|.
name|contains
argument_list|(
name|id
argument_list|)
operator|==
literal|false
operator|)
operator|&&
name|shape
operator|.
name|isWithin
argument_list|(
name|point2
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|hits
operator|.
name|get
argument_list|(
name|docID
argument_list|)
operator|!=
name|expected
condition|)
block|{
name|fail
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|": iter="
operator|+
name|iter
operator|+
literal|" id="
operator|+
name|id
operator|+
literal|" docID="
operator|+
name|docID
operator|+
literal|" lat="
operator|+
name|lats
index|[
name|id
index|]
operator|+
literal|" lon="
operator|+
name|lons
index|[
name|id
index|]
operator|+
literal|" expected "
operator|+
name|expected
operator|+
literal|" but got: "
operator|+
name|hits
operator|.
name|get
argument_list|(
name|docID
argument_list|)
operator|+
literal|" deleted?="
operator|+
name|deleted
operator|.
name|contains
argument_list|(
name|id
argument_list|)
operator|+
literal|"\n  point1="
operator|+
name|point1
operator|+
literal|", iswithin="
operator|+
name|shape
operator|.
name|isWithin
argument_list|(
name|point1
argument_list|)
operator|+
literal|"\n  point2="
operator|+
name|point2
operator|+
literal|", iswithin="
operator|+
name|shape
operator|.
name|isWithin
argument_list|(
name|point2
argument_list|)
operator|+
literal|"\n  query="
operator|+
name|query
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|assertFalse
argument_list|(
name|hits
operator|.
name|get
argument_list|(
name|docID
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
decl_stmt|;
name|thread
operator|.
name|setName
argument_list|(
literal|"T"
operator|+
name|i
argument_list|)
expr_stmt|;
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
name|threads
operator|.
name|add
argument_list|(
name|thread
argument_list|)
expr_stmt|;
block|}
name|startingGun
operator|.
name|countDown
argument_list|()
expr_stmt|;
for|for
control|(
name|Thread
name|thread
range|:
name|threads
control|)
block|{
name|thread
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
name|IOUtils
operator|.
name|close
argument_list|(
name|r
argument_list|,
name|dir
argument_list|)
expr_stmt|;
block|}
DECL|method|testToString
specifier|public
name|void
name|testToString
parameter_list|()
block|{
name|Geo3DPoint
name|point
init|=
operator|new
name|Geo3DPoint
argument_list|(
literal|"point"
argument_list|,
name|toRadians
argument_list|(
literal|44.244272
argument_list|)
argument_list|,
name|toRadians
argument_list|(
literal|7.769736
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Geo3DPoint<point: x=0.9248467864160119 y=0.06280434265368656 z=0.37682349005486243>"
argument_list|,
name|point
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testShapeQueryToString
specifier|public
name|void
name|testShapeQueryToString
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"PointInGeo3DShapeQuery: field=point: Shape: GeoStandardCircle: {planetmodel=PlanetModel.WGS84, center=[lat=0.3861041107739683, lon=0.06780373760536706], radius=0.1(5.729577951308232)}"
argument_list|,
name|Geo3DPoint
operator|.
name|newShapeQuery
argument_list|(
literal|"point"
argument_list|,
name|GeoCircleFactory
operator|.
name|makeGeoCircle
argument_list|(
name|PlanetModel
operator|.
name|WGS84
argument_list|,
name|toRadians
argument_list|(
literal|44.244272
argument_list|)
argument_list|,
name|toRadians
argument_list|(
literal|7.769736
argument_list|)
argument_list|,
literal|0.1
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|getDirectory
specifier|private
specifier|static
name|Directory
name|getDirectory
parameter_list|()
block|{
return|return
name|newDirectory
argument_list|()
return|;
block|}
DECL|method|testEquals
specifier|public
name|void
name|testEquals
parameter_list|()
block|{
name|GeoShape
name|shape
init|=
name|randomShape
argument_list|(
name|PlanetModel
operator|.
name|WGS84
argument_list|)
decl_stmt|;
name|Query
name|q
init|=
name|Geo3DPoint
operator|.
name|newShapeQuery
argument_list|(
literal|"point"
argument_list|,
name|shape
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|q
argument_list|,
name|Geo3DPoint
operator|.
name|newShapeQuery
argument_list|(
literal|"point"
argument_list|,
name|shape
argument_list|)
argument_list|)
expr_stmt|;
comment|// make a different random shape:
name|GeoShape
name|shape2
decl_stmt|;
do|do
block|{
name|shape2
operator|=
name|randomShape
argument_list|(
name|PlanetModel
operator|.
name|WGS84
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|shape
operator|.
name|equals
argument_list|(
name|shape2
argument_list|)
condition|)
do|;
name|assertFalse
argument_list|(
name|q
operator|.
name|equals
argument_list|(
name|Geo3DPoint
operator|.
name|newShapeQuery
argument_list|(
literal|"point"
argument_list|,
name|shape2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
