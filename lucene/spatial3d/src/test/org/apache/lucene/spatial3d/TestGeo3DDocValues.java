begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.spatial3d
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial3d
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial3d
operator|.
name|geom
operator|.
name|GeoPoint
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial3d
operator|.
name|geom
operator|.
name|PlanetModel
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|TestUtil
import|;
end_import
begin_class
DECL|class|TestGeo3DDocValues
specifier|public
class|class
name|TestGeo3DDocValues
extends|extends
name|LuceneTestCase
block|{
DECL|method|testBasic
specifier|public
name|void
name|testBasic
parameter_list|()
throws|throws
name|Exception
block|{
name|checkPointEncoding
argument_list|(
literal|0.0
argument_list|,
literal|0.0
argument_list|)
expr_stmt|;
name|checkPointEncoding
argument_list|(
literal|45.0
argument_list|,
literal|72.0
argument_list|)
expr_stmt|;
name|checkPointEncoding
argument_list|(
operator|-
literal|45.0
argument_list|,
operator|-
literal|100.0
argument_list|)
expr_stmt|;
specifier|final
name|int
name|testAmt
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1000
argument_list|,
literal|2000
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|testAmt
condition|;
name|i
operator|++
control|)
block|{
name|checkPointEncoding
argument_list|(
name|random
argument_list|()
operator|.
name|nextDouble
argument_list|()
operator|*
literal|180.0
operator|-
literal|90.0
argument_list|,
name|random
argument_list|()
operator|.
name|nextDouble
argument_list|()
operator|*
literal|360.0
operator|-
literal|180.0
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|checkPointEncoding
name|void
name|checkPointEncoding
parameter_list|(
specifier|final
name|double
name|latitude
parameter_list|,
specifier|final
name|double
name|longitude
parameter_list|)
block|{
specifier|final
name|GeoPoint
name|point
init|=
operator|new
name|GeoPoint
argument_list|(
name|PlanetModel
operator|.
name|WGS84
argument_list|,
name|Geo3DUtil
operator|.
name|fromDegrees
argument_list|(
name|latitude
argument_list|)
argument_list|,
name|Geo3DUtil
operator|.
name|fromDegrees
argument_list|(
name|longitude
argument_list|)
argument_list|)
decl_stmt|;
name|long
name|pointValue
init|=
name|Geo3DDocValuesField
operator|.
name|encodePoint
argument_list|(
name|point
argument_list|)
decl_stmt|;
specifier|final
name|double
name|x
init|=
name|Geo3DDocValuesField
operator|.
name|decodeXValue
argument_list|(
name|pointValue
argument_list|)
decl_stmt|;
specifier|final
name|double
name|y
init|=
name|Geo3DDocValuesField
operator|.
name|decodeYValue
argument_list|(
name|pointValue
argument_list|)
decl_stmt|;
specifier|final
name|double
name|z
init|=
name|Geo3DDocValuesField
operator|.
name|decodeZValue
argument_list|(
name|pointValue
argument_list|)
decl_stmt|;
specifier|final
name|GeoPoint
name|pointR
init|=
operator|new
name|GeoPoint
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
decl_stmt|;
comment|// Check whether stable
name|pointValue
operator|=
name|Geo3DDocValuesField
operator|.
name|encodePoint
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|x
argument_list|,
name|Geo3DDocValuesField
operator|.
name|decodeXValue
argument_list|(
name|pointValue
argument_list|)
argument_list|,
literal|0.0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|y
argument_list|,
name|Geo3DDocValuesField
operator|.
name|decodeYValue
argument_list|(
name|pointValue
argument_list|)
argument_list|,
literal|0.0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|z
argument_list|,
name|Geo3DDocValuesField
operator|.
name|decodeZValue
argument_list|(
name|pointValue
argument_list|)
argument_list|,
literal|0.0
argument_list|)
expr_stmt|;
comment|// Check whether has some relationship with original point
name|assertEquals
argument_list|(
literal|0.0
argument_list|,
name|point
operator|.
name|arcDistance
argument_list|(
name|pointR
argument_list|)
argument_list|,
literal|0.02
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
