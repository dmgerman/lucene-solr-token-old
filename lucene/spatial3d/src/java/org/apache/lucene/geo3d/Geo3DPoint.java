begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.geo3d
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|geo3d
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|FieldType
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|NumericUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|RamUsageEstimator
import|;
end_import
begin_comment
comment|/** Add this to a document to index lat/lon or x/y/z point, indexed as a dimensional value.  *  Multiple values are allowed: just add multiple Geo3DPoint to the document with the  *  same field name.  *  *  @lucene.experimental */
end_comment
begin_class
DECL|class|Geo3DPoint
specifier|public
specifier|final
class|class
name|Geo3DPoint
extends|extends
name|Field
block|{
comment|/** Indexing {@link FieldType}. */
DECL|field|TYPE
specifier|public
specifier|static
specifier|final
name|FieldType
name|TYPE
init|=
operator|new
name|FieldType
argument_list|()
decl_stmt|;
static|static
block|{
name|TYPE
operator|.
name|setDimensions
argument_list|(
literal|3
argument_list|,
name|Integer
operator|.
name|BYTES
argument_list|)
expr_stmt|;
name|TYPE
operator|.
name|freeze
argument_list|()
expr_stmt|;
block|}
comment|/**     * Creates a new Geo3DPoint field with the specified lat, lon (in radians), given a planet model.    *    * @throws IllegalArgumentException if the field name is null or lat or lon are out of bounds    */
DECL|method|Geo3DPoint
specifier|public
name|Geo3DPoint
parameter_list|(
name|String
name|name
parameter_list|,
name|PlanetModel
name|planetModel
parameter_list|,
name|double
name|lat
parameter_list|,
name|double
name|lon
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|,
name|TYPE
argument_list|)
expr_stmt|;
comment|// Translate lat/lon to x,y,z:
specifier|final
name|GeoPoint
name|point
init|=
operator|new
name|GeoPoint
argument_list|(
name|planetModel
argument_list|,
name|lat
argument_list|,
name|lon
argument_list|)
decl_stmt|;
name|fillFieldsData
argument_list|(
name|planetModel
operator|.
name|getMaximumMagnitude
argument_list|()
argument_list|,
name|point
operator|.
name|x
argument_list|,
name|point
operator|.
name|y
argument_list|,
name|point
operator|.
name|z
argument_list|)
expr_stmt|;
block|}
comment|/**     * Creates a new Geo3DPoint field with the specified x,y,z.    *    * @throws IllegalArgumentException if the field name is null or lat or lon are out of bounds    */
DECL|method|Geo3DPoint
specifier|public
name|Geo3DPoint
parameter_list|(
name|String
name|name
parameter_list|,
name|PlanetModel
name|planetModel
parameter_list|,
name|double
name|x
parameter_list|,
name|double
name|y
parameter_list|,
name|double
name|z
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|,
name|TYPE
argument_list|)
expr_stmt|;
name|fillFieldsData
argument_list|(
name|planetModel
operator|.
name|getMaximumMagnitude
argument_list|()
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
DECL|method|fillFieldsData
specifier|private
name|void
name|fillFieldsData
parameter_list|(
name|double
name|planetMax
parameter_list|,
name|double
name|x
parameter_list|,
name|double
name|y
parameter_list|,
name|double
name|z
parameter_list|)
block|{
name|byte
index|[]
name|bytes
init|=
operator|new
name|byte
index|[
literal|12
index|]
decl_stmt|;
name|NumericUtils
operator|.
name|intToBytes
argument_list|(
name|Geo3DUtil
operator|.
name|encodeValue
argument_list|(
name|planetMax
argument_list|,
name|x
argument_list|)
argument_list|,
name|bytes
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|NumericUtils
operator|.
name|intToBytes
argument_list|(
name|Geo3DUtil
operator|.
name|encodeValue
argument_list|(
name|planetMax
argument_list|,
name|y
argument_list|)
argument_list|,
name|bytes
argument_list|,
name|Integer
operator|.
name|BYTES
argument_list|)
expr_stmt|;
name|NumericUtils
operator|.
name|intToBytes
argument_list|(
name|Geo3DUtil
operator|.
name|encodeValue
argument_list|(
name|planetMax
argument_list|,
name|z
argument_list|)
argument_list|,
name|bytes
argument_list|,
literal|2
operator|*
name|Integer
operator|.
name|BYTES
argument_list|)
expr_stmt|;
name|fieldsData
operator|=
operator|new
name|BytesRef
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
