begin_unit
begin_package
DECL|package|org.apache.lucene.geo3d
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|geo3d
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_comment
comment|/**  * 3D rectangle, bounded on six sides by X,Y,Z limits, degenerate in Z  *  * @lucene.internal  */
end_comment
begin_class
DECL|class|XYdZSolid
specifier|public
class|class
name|XYdZSolid
extends|extends
name|BaseXYZSolid
block|{
comment|/** Min-X plane */
DECL|field|minXPlane
specifier|protected
specifier|final
name|SidedPlane
name|minXPlane
decl_stmt|;
comment|/** Max-X plane */
DECL|field|maxXPlane
specifier|protected
specifier|final
name|SidedPlane
name|maxXPlane
decl_stmt|;
comment|/** Min-Y plane */
DECL|field|minYPlane
specifier|protected
specifier|final
name|SidedPlane
name|minYPlane
decl_stmt|;
comment|/** Max-Y plane */
DECL|field|maxYPlane
specifier|protected
specifier|final
name|SidedPlane
name|maxYPlane
decl_stmt|;
comment|/** Z plane */
DECL|field|zPlane
specifier|protected
specifier|final
name|Plane
name|zPlane
decl_stmt|;
comment|/** These are the edge points of the shape, which are defined to be at least one point on    * each surface area boundary.  In the case of a solid, this includes points which represent    * the intersection of XYZ bounding planes and the planet, as well as points representing    * the intersection of single bounding planes with the planet itself.    */
DECL|field|edgePoints
specifier|protected
specifier|final
name|GeoPoint
index|[]
name|edgePoints
decl_stmt|;
comment|/** Notable points for ZPlane */
DECL|field|notableZPoints
specifier|protected
specifier|final
name|GeoPoint
index|[]
name|notableZPoints
decl_stmt|;
comment|/**    * Sole constructor    *    *@param planetModel is the planet model.    *@param minX is the minimum X value.    *@param maxX is the maximum X value.    *@param minY is the minimum Y value.    *@param maxY is the maximum Y value.    *@param Z is the Z value.    */
DECL|method|XYdZSolid
specifier|public
name|XYdZSolid
parameter_list|(
specifier|final
name|PlanetModel
name|planetModel
parameter_list|,
specifier|final
name|double
name|minX
parameter_list|,
specifier|final
name|double
name|maxX
parameter_list|,
specifier|final
name|double
name|minY
parameter_list|,
specifier|final
name|double
name|maxY
parameter_list|,
specifier|final
name|double
name|Z
parameter_list|)
block|{
name|super
argument_list|(
name|planetModel
argument_list|)
expr_stmt|;
comment|// Argument checking
if|if
condition|(
name|maxX
operator|-
name|minX
operator|<
name|Vector
operator|.
name|MINIMUM_RESOLUTION
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"X values in wrong order or identical"
argument_list|)
throw|;
if|if
condition|(
name|maxY
operator|-
name|minY
operator|<
name|Vector
operator|.
name|MINIMUM_RESOLUTION
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Y values in wrong order or identical"
argument_list|)
throw|;
specifier|final
name|double
name|worldMinZ
init|=
name|planetModel
operator|.
name|getMinimumZValue
argument_list|()
decl_stmt|;
specifier|final
name|double
name|worldMaxZ
init|=
name|planetModel
operator|.
name|getMaximumZValue
argument_list|()
decl_stmt|;
comment|// Construct the planes
name|minXPlane
operator|=
operator|new
name|SidedPlane
argument_list|(
name|maxX
argument_list|,
literal|0.0
argument_list|,
literal|0.0
argument_list|,
name|xUnitVector
argument_list|,
operator|-
name|minX
argument_list|)
expr_stmt|;
name|maxXPlane
operator|=
operator|new
name|SidedPlane
argument_list|(
name|minX
argument_list|,
literal|0.0
argument_list|,
literal|0.0
argument_list|,
name|xUnitVector
argument_list|,
operator|-
name|maxX
argument_list|)
expr_stmt|;
name|minYPlane
operator|=
operator|new
name|SidedPlane
argument_list|(
literal|0.0
argument_list|,
name|maxY
argument_list|,
literal|0.0
argument_list|,
name|yUnitVector
argument_list|,
operator|-
name|minY
argument_list|)
expr_stmt|;
name|maxYPlane
operator|=
operator|new
name|SidedPlane
argument_list|(
literal|0.0
argument_list|,
name|minY
argument_list|,
literal|0.0
argument_list|,
name|yUnitVector
argument_list|,
operator|-
name|maxY
argument_list|)
expr_stmt|;
name|zPlane
operator|=
operator|new
name|Plane
argument_list|(
name|zUnitVector
argument_list|,
operator|-
name|Z
argument_list|)
expr_stmt|;
comment|// We need at least one point on the planet surface for each manifestation of the shape.
comment|// There can be up to 2 (on opposite sides of the world).  But we have to go through
comment|// 4 combinations of adjacent planes in order to find out if any have 2 intersection solution.
comment|// Typically, this requires 4 square root operations.
specifier|final
name|GeoPoint
index|[]
name|minXZ
init|=
name|minXPlane
operator|.
name|findIntersections
argument_list|(
name|planetModel
argument_list|,
name|zPlane
argument_list|,
name|maxXPlane
argument_list|,
name|minYPlane
argument_list|,
name|maxYPlane
argument_list|)
decl_stmt|;
specifier|final
name|GeoPoint
index|[]
name|maxXZ
init|=
name|maxXPlane
operator|.
name|findIntersections
argument_list|(
name|planetModel
argument_list|,
name|zPlane
argument_list|,
name|minXPlane
argument_list|,
name|minYPlane
argument_list|,
name|maxYPlane
argument_list|)
decl_stmt|;
specifier|final
name|GeoPoint
index|[]
name|minYZ
init|=
name|minYPlane
operator|.
name|findIntersections
argument_list|(
name|planetModel
argument_list|,
name|zPlane
argument_list|,
name|maxYPlane
argument_list|,
name|minXPlane
argument_list|,
name|maxXPlane
argument_list|)
decl_stmt|;
specifier|final
name|GeoPoint
index|[]
name|maxYZ
init|=
name|maxYPlane
operator|.
name|findIntersections
argument_list|(
name|planetModel
argument_list|,
name|zPlane
argument_list|,
name|minYPlane
argument_list|,
name|minXPlane
argument_list|,
name|maxXPlane
argument_list|)
decl_stmt|;
name|notableZPoints
operator|=
name|glueTogether
argument_list|(
name|minXZ
argument_list|,
name|maxXZ
argument_list|,
name|minYZ
argument_list|,
name|maxYZ
argument_list|)
expr_stmt|;
comment|// Now, compute the edge points.
comment|// This is the trickiest part of setting up an XYZSolid.  We've computed intersections already, so
comment|// we'll start there.  We know that at most there will be two disconnected shapes on the planet surface.
comment|// But there's also a case where exactly one plane slices through the world, and none of the bounding plane
comment|// intersections do.  Thus, if we don't find any of the edge intersection cases, we have to look for that last case.
comment|// If we still haven't encountered anything, we need to look at single-plane/world intersections.
comment|// We detect these by looking at the world model and noting its x, y, and z bounds.
comment|// The cases we are looking for are when the four corner points for any given
comment|// plane are all outside of the world, AND that plane intersects the world.
comment|// There are four corner points all told; we must evaluate these WRT the planet surface.
specifier|final
name|boolean
name|minXminYZ
init|=
name|planetModel
operator|.
name|pointOutside
argument_list|(
name|minX
argument_list|,
name|minY
argument_list|,
name|Z
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|minXmaxYZ
init|=
name|planetModel
operator|.
name|pointOutside
argument_list|(
name|minX
argument_list|,
name|maxY
argument_list|,
name|Z
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|maxXminYZ
init|=
name|planetModel
operator|.
name|pointOutside
argument_list|(
name|maxX
argument_list|,
name|minY
argument_list|,
name|Z
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|maxXmaxYZ
init|=
name|planetModel
operator|.
name|pointOutside
argument_list|(
name|maxX
argument_list|,
name|maxY
argument_list|,
name|Z
argument_list|)
decl_stmt|;
specifier|final
name|GeoPoint
index|[]
name|zEdges
decl_stmt|;
if|if
condition|(
name|Z
operator|-
name|worldMinZ
operator|>=
operator|-
name|Vector
operator|.
name|MINIMUM_RESOLUTION
operator|&&
name|Z
operator|-
name|worldMaxZ
operator|<=
name|Vector
operator|.
name|MINIMUM_RESOLUTION
operator|&&
name|minX
argument_list|<
literal|0.0
operator|&&
name|maxX
argument_list|>
literal|0.0
operator|&&
name|minY
argument_list|<
literal|0.0
operator|&&
name|maxY
argument_list|>
literal|0.0
operator|&&
name|minXminYZ
operator|&&
name|minXmaxYZ
operator|&&
name|maxXminYZ
operator|&&
name|maxXmaxYZ
condition|)
block|{
comment|// Find any point on the minZ plane that intersects the world
comment|// First construct a perpendicular plane that will allow us to find a sample point.
comment|// This plane is vertical and goes through the points (0,0,0) and (1,0,0)
comment|// Then use it to compute a sample point.
name|zEdges
operator|=
operator|new
name|GeoPoint
index|[]
block|{
name|zPlane
operator|.
name|getSampleIntersectionPoint
argument_list|(
name|planetModel
argument_list|,
name|xVerticalPlane
argument_list|)
block|}
expr_stmt|;
block|}
else|else
block|{
name|zEdges
operator|=
name|EMPTY_POINTS
expr_stmt|;
block|}
name|this
operator|.
name|edgePoints
operator|=
name|glueTogether
argument_list|(
name|minXZ
argument_list|,
name|maxXZ
argument_list|,
name|minYZ
argument_list|,
name|maxYZ
argument_list|,
name|zEdges
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getEdgePoints
specifier|protected
name|GeoPoint
index|[]
name|getEdgePoints
parameter_list|()
block|{
return|return
name|edgePoints
return|;
block|}
annotation|@
name|Override
DECL|method|isWithin
specifier|public
name|boolean
name|isWithin
parameter_list|(
specifier|final
name|double
name|x
parameter_list|,
specifier|final
name|double
name|y
parameter_list|,
specifier|final
name|double
name|z
parameter_list|)
block|{
return|return
name|minXPlane
operator|.
name|isWithin
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
operator|&&
name|maxXPlane
operator|.
name|isWithin
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
operator|&&
name|minYPlane
operator|.
name|isWithin
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
operator|&&
name|maxYPlane
operator|.
name|isWithin
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
operator|&&
name|zPlane
operator|.
name|evaluateIsZero
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getRelationship
specifier|public
name|int
name|getRelationship
parameter_list|(
specifier|final
name|GeoShape
name|path
parameter_list|)
block|{
comment|//System.err.println(this+" getrelationship with "+path);
specifier|final
name|int
name|insideRectangle
init|=
name|isShapeInsideArea
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|insideRectangle
operator|==
name|SOME_INSIDE
condition|)
block|{
comment|//System.err.println(" some inside");
return|return
name|OVERLAPS
return|;
block|}
comment|// Figure out if the entire XYZArea is contained by the shape.
specifier|final
name|int
name|insideShape
init|=
name|isAreaInsideShape
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|insideShape
operator|==
name|SOME_INSIDE
condition|)
block|{
return|return
name|OVERLAPS
return|;
block|}
if|if
condition|(
name|insideRectangle
operator|==
name|ALL_INSIDE
operator|&&
name|insideShape
operator|==
name|ALL_INSIDE
condition|)
block|{
comment|//System.err.println(" inside of each other");
return|return
name|OVERLAPS
return|;
block|}
if|if
condition|(
name|path
operator|.
name|intersects
argument_list|(
name|zPlane
argument_list|,
name|notableZPoints
argument_list|,
name|minXPlane
argument_list|,
name|maxXPlane
argument_list|,
name|minYPlane
argument_list|,
name|maxYPlane
argument_list|)
condition|)
block|{
comment|//System.err.println(" edges intersect");
return|return
name|OVERLAPS
return|;
block|}
if|if
condition|(
name|insideRectangle
operator|==
name|ALL_INSIDE
condition|)
block|{
comment|//System.err.println(" shape inside rectangle");
return|return
name|WITHIN
return|;
block|}
if|if
condition|(
name|insideShape
operator|==
name|ALL_INSIDE
condition|)
block|{
comment|//System.err.println(" shape contains rectangle");
return|return
name|CONTAINS
return|;
block|}
comment|//System.err.println(" disjoint");
return|return
name|DISJOINT
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|o
operator|instanceof
name|XYdZSolid
operator|)
condition|)
return|return
literal|false
return|;
name|XYdZSolid
name|other
init|=
operator|(
name|XYdZSolid
operator|)
name|o
decl_stmt|;
if|if
condition|(
operator|!
name|super
operator|.
name|equals
argument_list|(
name|other
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|other
operator|.
name|minXPlane
operator|.
name|equals
argument_list|(
name|minXPlane
argument_list|)
operator|&&
name|other
operator|.
name|maxXPlane
operator|.
name|equals
argument_list|(
name|maxXPlane
argument_list|)
operator|&&
name|other
operator|.
name|minYPlane
operator|.
name|equals
argument_list|(
name|minYPlane
argument_list|)
operator|&&
name|other
operator|.
name|maxYPlane
operator|.
name|equals
argument_list|(
name|maxYPlane
argument_list|)
operator|&&
name|other
operator|.
name|zPlane
operator|.
name|equals
argument_list|(
name|zPlane
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|result
init|=
name|super
operator|.
name|hashCode
argument_list|()
decl_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
name|minXPlane
operator|.
name|hashCode
argument_list|()
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
name|maxXPlane
operator|.
name|hashCode
argument_list|()
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
name|minYPlane
operator|.
name|hashCode
argument_list|()
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
name|maxYPlane
operator|.
name|hashCode
argument_list|()
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
name|zPlane
operator|.
name|hashCode
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"XYdZSolid: {planetmodel="
operator|+
name|planetModel
operator|+
literal|", minXplane="
operator|+
name|minXPlane
operator|+
literal|", maxXplane="
operator|+
name|maxXPlane
operator|+
literal|", minYplane="
operator|+
name|minYPlane
operator|+
literal|", maxYplane="
operator|+
name|maxYPlane
operator|+
literal|", zplane="
operator|+
name|zPlane
operator|+
literal|"}"
return|;
block|}
block|}
end_class
end_unit
