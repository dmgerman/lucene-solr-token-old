begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.spatial3d.geom
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial3d
operator|.
name|geom
package|;
end_package
begin_comment
comment|/**  * Distance computation styles, supporting various ways of computing  * distance to shapes.  *  * @lucene.experimental  */
end_comment
begin_interface
DECL|interface|DistanceStyle
specifier|public
interface|interface
name|DistanceStyle
block|{
comment|// convenient access to built-in styles:
comment|/** Arc distance calculator */
DECL|field|ARC
specifier|public
specifier|static
specifier|final
name|ArcDistance
name|ARC
init|=
name|ArcDistance
operator|.
name|INSTANCE
decl_stmt|;
comment|/** Linear distance calculator */
DECL|field|LINEAR
specifier|public
specifier|static
specifier|final
name|LinearDistance
name|LINEAR
init|=
name|LinearDistance
operator|.
name|INSTANCE
decl_stmt|;
comment|/** Linear distance squared calculator */
DECL|field|LINEAR_SQUARED
specifier|public
specifier|static
specifier|final
name|LinearSquaredDistance
name|LINEAR_SQUARED
init|=
name|LinearSquaredDistance
operator|.
name|INSTANCE
decl_stmt|;
comment|/** Normal distance calculator */
DECL|field|NORMAL
specifier|public
specifier|static
specifier|final
name|NormalDistance
name|NORMAL
init|=
name|NormalDistance
operator|.
name|INSTANCE
decl_stmt|;
comment|/** Normal distance squared calculator */
DECL|field|NORMAL_SQUARED
specifier|public
specifier|static
specifier|final
name|NormalSquaredDistance
name|NORMAL_SQUARED
init|=
name|NormalSquaredDistance
operator|.
name|INSTANCE
decl_stmt|;
comment|/** Compute the distance from a point to another point.    * @param point1 Starting point    * @param point2 Final point    * @return the distance    */
DECL|method|computeDistance
specifier|public
specifier|default
name|double
name|computeDistance
parameter_list|(
specifier|final
name|GeoPoint
name|point1
parameter_list|,
specifier|final
name|GeoPoint
name|point2
parameter_list|)
block|{
return|return
name|computeDistance
argument_list|(
name|point1
argument_list|,
name|point2
operator|.
name|x
argument_list|,
name|point2
operator|.
name|y
argument_list|,
name|point2
operator|.
name|z
argument_list|)
return|;
block|}
comment|/** Compute the distance from a point to another point.    * @param point1 Starting point    * @param x2 Final point x    * @param y2 Final point y    * @param z2 Final point z    * @return the distance    */
DECL|method|computeDistance
specifier|public
name|double
name|computeDistance
parameter_list|(
specifier|final
name|GeoPoint
name|point1
parameter_list|,
specifier|final
name|double
name|x2
parameter_list|,
specifier|final
name|double
name|y2
parameter_list|,
specifier|final
name|double
name|z2
parameter_list|)
function_decl|;
comment|/** Compute the distance from a plane to a point.    * @param planetModel The planet model    * @param plane The plane    * @param point The point    * @param bounds are the plane bounds    * @return the distance    */
DECL|method|computeDistance
specifier|public
specifier|default
name|double
name|computeDistance
parameter_list|(
specifier|final
name|PlanetModel
name|planetModel
parameter_list|,
specifier|final
name|Plane
name|plane
parameter_list|,
specifier|final
name|GeoPoint
name|point
parameter_list|,
specifier|final
name|Membership
modifier|...
name|bounds
parameter_list|)
block|{
return|return
name|computeDistance
argument_list|(
name|planetModel
argument_list|,
name|plane
argument_list|,
name|point
operator|.
name|x
argument_list|,
name|point
operator|.
name|y
argument_list|,
name|point
operator|.
name|z
argument_list|,
name|bounds
argument_list|)
return|;
block|}
comment|/** Compute the distance from a plane to a point.    * @param planetModel The planet model    * @param plane The plane    * @param x The point x    * @param y The point y    * @param z The point z    * @param bounds are the plane bounds    * @return the distance    */
DECL|method|computeDistance
specifier|public
name|double
name|computeDistance
parameter_list|(
specifier|final
name|PlanetModel
name|planetModel
parameter_list|,
specifier|final
name|Plane
name|plane
parameter_list|,
specifier|final
name|double
name|x
parameter_list|,
specifier|final
name|double
name|y
parameter_list|,
specifier|final
name|double
name|z
parameter_list|,
specifier|final
name|Membership
modifier|...
name|bounds
parameter_list|)
function_decl|;
comment|// The following methods are used to go from a distance value back to something
comment|// that can be used to construct a constrained shape.
comment|/**  Find a GeoPoint, at a specified distance from a starting point, within the    * specified bounds.  The GeoPoint must be in the specified plane.    * @param planetModel is the planet model.    * @param distanceValue is the distance to set the new point at, measured from point1 and on the way to point2.    * @param startPoint is the starting point.    * @param plane is the plane that the point must be in.    * @param bounds are the constraints on where the point can be found.    * @return zero, one, or two points at the proper distance from startPoint.    */
DECL|method|findDistancePoints
specifier|public
name|GeoPoint
index|[]
name|findDistancePoints
parameter_list|(
specifier|final
name|PlanetModel
name|planetModel
parameter_list|,
specifier|final
name|double
name|distanceValue
parameter_list|,
specifier|final
name|GeoPoint
name|startPoint
parameter_list|,
specifier|final
name|Plane
name|plane
parameter_list|,
specifier|final
name|Membership
modifier|...
name|bounds
parameter_list|)
function_decl|;
comment|/** Given a distance metric, find the minimum arc distance represented by that distance metric.    * @param planetModel is the planet model.    * @param distanceValue is the distance metric.    * @return the minimum arc distance that that distance value can represent given the planet model.    */
DECL|method|findMinimumArcDistance
specifier|public
name|double
name|findMinimumArcDistance
parameter_list|(
specifier|final
name|PlanetModel
name|planetModel
parameter_list|,
specifier|final
name|double
name|distanceValue
parameter_list|)
function_decl|;
comment|/** Given a distance metric, find the maximum arc distance represented by the distance metric.    * @param planetModel is the planet model.    * @param distanceValue is the distance metric.    * @return the maximum arc distance that that distance value can represent given the planet model.    */
DECL|method|findMaximumArcDistance
specifier|public
name|double
name|findMaximumArcDistance
parameter_list|(
specifier|final
name|PlanetModel
name|planetModel
parameter_list|,
specifier|final
name|double
name|distanceValue
parameter_list|)
function_decl|;
block|}
end_interface
end_unit
