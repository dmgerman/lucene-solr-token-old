begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.spatial3d.geom
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial3d
operator|.
name|geom
package|;
end_package
begin_comment
comment|/**  * 3D rectangle, bounded on six sides by X,Y,Z limits, degenerate in all dimensions  *  * @lucene.internal  */
end_comment
begin_class
DECL|class|dXdYdZSolid
class|class
name|dXdYdZSolid
extends|extends
name|BaseXYZSolid
block|{
comment|/** On surface? */
DECL|field|isOnSurface
specifier|protected
specifier|final
name|boolean
name|isOnSurface
decl_stmt|;
comment|/** The point */
DECL|field|thePoint
specifier|protected
specifier|final
name|GeoPoint
name|thePoint
decl_stmt|;
comment|/** These are the edge points of the shape, which are defined to be at least one point on    * each surface area boundary.  In the case of a solid, this includes points which represent    * the intersection of XYZ bounding planes and the planet, as well as points representing    * the intersection of single bounding planes with the planet itself.    */
DECL|field|edgePoints
specifier|protected
specifier|final
name|GeoPoint
index|[]
name|edgePoints
decl_stmt|;
comment|/** Empty array of {@link GeoPoint}. */
DECL|field|nullPoints
specifier|protected
specifier|static
specifier|final
name|GeoPoint
index|[]
name|nullPoints
init|=
operator|new
name|GeoPoint
index|[
literal|0
index|]
decl_stmt|;
comment|/**    * Sole constructor    *    *@param planetModel is the planet model.    *@param X is the X value.    *@param Y is the Y value.    *@param Z is the Z value.    */
DECL|method|dXdYdZSolid
specifier|public
name|dXdYdZSolid
parameter_list|(
specifier|final
name|PlanetModel
name|planetModel
parameter_list|,
specifier|final
name|double
name|X
parameter_list|,
specifier|final
name|double
name|Y
parameter_list|,
specifier|final
name|double
name|Z
parameter_list|)
block|{
name|super
argument_list|(
name|planetModel
argument_list|)
expr_stmt|;
name|isOnSurface
operator|=
name|planetModel
operator|.
name|pointOnSurface
argument_list|(
name|X
argument_list|,
name|Y
argument_list|,
name|Z
argument_list|)
expr_stmt|;
if|if
condition|(
name|isOnSurface
condition|)
block|{
name|thePoint
operator|=
operator|new
name|GeoPoint
argument_list|(
name|X
argument_list|,
name|Y
argument_list|,
name|Z
argument_list|)
expr_stmt|;
name|edgePoints
operator|=
operator|new
name|GeoPoint
index|[]
block|{
name|thePoint
block|}
expr_stmt|;
block|}
else|else
block|{
name|thePoint
operator|=
literal|null
expr_stmt|;
name|edgePoints
operator|=
name|nullPoints
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getEdgePoints
specifier|protected
name|GeoPoint
index|[]
name|getEdgePoints
parameter_list|()
block|{
return|return
name|edgePoints
return|;
block|}
annotation|@
name|Override
DECL|method|isWithin
specifier|public
name|boolean
name|isWithin
parameter_list|(
specifier|final
name|double
name|x
parameter_list|,
specifier|final
name|double
name|y
parameter_list|,
specifier|final
name|double
name|z
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isOnSurface
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|thePoint
operator|.
name|isIdentical
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getRelationship
specifier|public
name|int
name|getRelationship
parameter_list|(
specifier|final
name|GeoShape
name|path
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isOnSurface
condition|)
block|{
return|return
name|DISJOINT
return|;
block|}
comment|//System.err.println(this+" getrelationship with "+path);
specifier|final
name|int
name|insideRectangle
init|=
name|isShapeInsideArea
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|insideRectangle
operator|==
name|SOME_INSIDE
condition|)
block|{
comment|//System.err.println(" some shape points inside area");
return|return
name|OVERLAPS
return|;
block|}
comment|// Figure out if the entire XYZArea is contained by the shape.
specifier|final
name|int
name|insideShape
init|=
name|isAreaInsideShape
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|insideShape
operator|==
name|SOME_INSIDE
condition|)
block|{
comment|//System.err.println(" some area points inside shape");
return|return
name|OVERLAPS
return|;
block|}
if|if
condition|(
name|insideRectangle
operator|==
name|ALL_INSIDE
operator|&&
name|insideShape
operator|==
name|ALL_INSIDE
condition|)
block|{
comment|//System.err.println(" inside of each other");
return|return
name|OVERLAPS
return|;
block|}
if|if
condition|(
name|insideRectangle
operator|==
name|ALL_INSIDE
condition|)
block|{
comment|//System.err.println(" shape inside area entirely");
return|return
name|WITHIN
return|;
block|}
if|if
condition|(
name|insideShape
operator|==
name|ALL_INSIDE
condition|)
block|{
comment|//System.err.println(" shape contains area entirely");
return|return
name|CONTAINS
return|;
block|}
comment|//System.err.println(" disjoint");
return|return
name|DISJOINT
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|o
operator|instanceof
name|dXdYdZSolid
operator|)
condition|)
return|return
literal|false
return|;
name|dXdYdZSolid
name|other
init|=
operator|(
name|dXdYdZSolid
operator|)
name|o
decl_stmt|;
if|if
condition|(
operator|!
name|super
operator|.
name|equals
argument_list|(
name|other
argument_list|)
operator|||
name|other
operator|.
name|isOnSurface
operator|!=
name|isOnSurface
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|isOnSurface
condition|)
block|{
return|return
name|other
operator|.
name|thePoint
operator|.
name|equals
argument_list|(
name|thePoint
argument_list|)
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|result
init|=
name|super
operator|.
name|hashCode
argument_list|()
decl_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|isOnSurface
condition|?
literal|1
else|:
literal|0
operator|)
expr_stmt|;
if|if
condition|(
name|isOnSurface
condition|)
block|{
name|result
operator|=
literal|31
operator|*
name|result
operator|+
name|thePoint
operator|.
name|hashCode
argument_list|()
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"dXdYdZSolid: {planetmodel="
operator|+
name|planetModel
operator|+
literal|", isOnSurface="
operator|+
name|isOnSurface
operator|+
literal|", thePoint="
operator|+
name|thePoint
operator|+
literal|"}"
return|;
block|}
block|}
end_class
end_unit
