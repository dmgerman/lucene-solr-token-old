begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.spatial3d
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial3d
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial3d
operator|.
name|geom
operator|.
name|PlanetModel
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial3d
operator|.
name|geom
operator|.
name|GeoPolygonFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial3d
operator|.
name|geom
operator|.
name|GeoPathFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial3d
operator|.
name|geom
operator|.
name|GeoCircleFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial3d
operator|.
name|geom
operator|.
name|GeoBBoxFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial3d
operator|.
name|geom
operator|.
name|GeoPath
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial3d
operator|.
name|geom
operator|.
name|GeoPolygon
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial3d
operator|.
name|geom
operator|.
name|GeoCircle
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial3d
operator|.
name|geom
operator|.
name|GeoBBox
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial3d
operator|.
name|geom
operator|.
name|GeoCompositePolygon
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial3d
operator|.
name|geom
operator|.
name|GeoPoint
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|geo
operator|.
name|Polygon
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|geo
operator|.
name|GeoUtils
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_class
DECL|class|Geo3DUtil
class|class
name|Geo3DUtil
block|{
comment|/** How many radians are in one earth surface meter */
DECL|field|RADIANS_PER_METER
specifier|final
specifier|static
name|double
name|RADIANS_PER_METER
init|=
literal|1.0
operator|/
name|PlanetModel
operator|.
name|WGS84_MEAN
decl_stmt|;
comment|/** How many radians are in one degree */
DECL|field|RADIANS_PER_DEGREE
specifier|final
specifier|static
name|double
name|RADIANS_PER_DEGREE
init|=
name|Math
operator|.
name|PI
operator|/
literal|180.0
decl_stmt|;
DECL|field|MAX_VALUE
specifier|private
specifier|static
specifier|final
name|double
name|MAX_VALUE
init|=
name|PlanetModel
operator|.
name|WGS84
operator|.
name|getMaximumMagnitude
argument_list|()
decl_stmt|;
DECL|field|BITS
specifier|private
specifier|static
specifier|final
name|int
name|BITS
init|=
literal|32
decl_stmt|;
DECL|field|MUL
specifier|private
specifier|static
specifier|final
name|double
name|MUL
init|=
operator|(
literal|0x1L
operator|<<
name|BITS
operator|)
operator|/
operator|(
literal|2
operator|*
name|MAX_VALUE
operator|)
decl_stmt|;
DECL|field|DECODE
specifier|static
specifier|final
name|double
name|DECODE
init|=
name|getNextSafeDouble
argument_list|(
literal|1
operator|/
name|MUL
argument_list|)
decl_stmt|;
DECL|field|MIN_ENCODED_VALUE
specifier|private
specifier|static
specifier|final
name|int
name|MIN_ENCODED_VALUE
init|=
name|encodeValue
argument_list|(
operator|-
name|MAX_VALUE
argument_list|)
decl_stmt|;
DECL|field|MAX_ENCODED_VALUE
specifier|private
specifier|static
specifier|final
name|int
name|MAX_ENCODED_VALUE
init|=
name|encodeValue
argument_list|(
name|MAX_VALUE
argument_list|)
decl_stmt|;
DECL|method|encodeValue
specifier|public
specifier|static
name|int
name|encodeValue
parameter_list|(
name|double
name|x
parameter_list|)
block|{
if|if
condition|(
name|x
operator|>
name|MAX_VALUE
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"value="
operator|+
name|x
operator|+
literal|" is out-of-bounds (greater than WGS84's planetMax="
operator|+
name|MAX_VALUE
operator|+
literal|")"
argument_list|)
throw|;
block|}
if|if
condition|(
name|x
operator|<
operator|-
name|MAX_VALUE
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"value="
operator|+
name|x
operator|+
literal|" is out-of-bounds (less than than WGS84's -planetMax="
operator|+
operator|-
name|MAX_VALUE
operator|+
literal|")"
argument_list|)
throw|;
block|}
name|long
name|result
init|=
operator|(
name|long
operator|)
name|Math
operator|.
name|floor
argument_list|(
name|x
operator|/
name|DECODE
argument_list|)
decl_stmt|;
assert|assert
name|result
operator|>=
name|Integer
operator|.
name|MIN_VALUE
assert|;
assert|assert
name|result
operator|<=
name|Integer
operator|.
name|MAX_VALUE
assert|;
return|return
operator|(
name|int
operator|)
name|result
return|;
block|}
DECL|method|decodeValue
specifier|public
specifier|static
name|double
name|decodeValue
parameter_list|(
name|int
name|x
parameter_list|)
block|{
name|double
name|result
decl_stmt|;
if|if
condition|(
name|x
operator|==
name|MIN_ENCODED_VALUE
condition|)
block|{
comment|// We must special case this, because -MAX_VALUE is not guaranteed to land precisely at a floor value, and we don't ever want to
comment|// return a value outside of the planet's range (I think?).  The max value is "safe" because we floor during encode:
name|result
operator|=
operator|-
name|MAX_VALUE
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|x
operator|==
name|MAX_ENCODED_VALUE
condition|)
block|{
name|result
operator|=
name|MAX_VALUE
expr_stmt|;
block|}
else|else
block|{
comment|// We decode to the center value; this keeps the encoding stable
name|result
operator|=
operator|(
name|x
operator|+
literal|0.5
operator|)
operator|*
name|DECODE
expr_stmt|;
block|}
assert|assert
name|result
operator|>=
operator|-
name|MAX_VALUE
operator|&&
name|result
operator|<=
name|MAX_VALUE
assert|;
return|return
name|result
return|;
block|}
comment|/** Returns smallest double that would encode to int x. */
comment|// NOTE: keep this package private!!
DECL|method|decodeValueFloor
specifier|static
name|double
name|decodeValueFloor
parameter_list|(
name|int
name|x
parameter_list|)
block|{
return|return
name|x
operator|*
name|DECODE
return|;
block|}
comment|/** Returns a double value>= x such that if you multiply that value by an int, and then    *  divide it by that int again, you get precisely the same value back */
DECL|method|getNextSafeDouble
specifier|private
specifier|static
name|double
name|getNextSafeDouble
parameter_list|(
name|double
name|x
parameter_list|)
block|{
comment|// Move to double space:
name|long
name|bits
init|=
name|Double
operator|.
name|doubleToLongBits
argument_list|(
name|x
argument_list|)
decl_stmt|;
comment|// Make sure we are beyond the actual maximum value:
name|bits
operator|+=
name|Integer
operator|.
name|MAX_VALUE
expr_stmt|;
comment|// Clear the bottom 32 bits:
name|bits
operator|&=
operator|~
operator|(
operator|(
name|long
operator|)
name|Integer
operator|.
name|MAX_VALUE
operator|)
expr_stmt|;
comment|// Convert back to double:
name|double
name|result
init|=
name|Double
operator|.
name|longBitsToDouble
argument_list|(
name|bits
argument_list|)
decl_stmt|;
assert|assert
name|result
operator|>
name|x
assert|;
return|return
name|result
return|;
block|}
comment|/** Returns largest double that would encode to int x. */
comment|// NOTE: keep this package private!!
DECL|method|decodeValueCeil
specifier|static
name|double
name|decodeValueCeil
parameter_list|(
name|int
name|x
parameter_list|)
block|{
assert|assert
name|x
operator|<
name|Integer
operator|.
name|MAX_VALUE
assert|;
return|return
name|Math
operator|.
name|nextDown
argument_list|(
operator|(
name|x
operator|+
literal|1
operator|)
operator|*
name|DECODE
argument_list|)
return|;
block|}
comment|/** Converts degress to radians */
DECL|method|fromDegrees
specifier|static
name|double
name|fromDegrees
parameter_list|(
specifier|final
name|double
name|degrees
parameter_list|)
block|{
return|return
name|degrees
operator|*
name|RADIANS_PER_DEGREE
return|;
block|}
comment|/** Converts earth-surface meters to radians */
DECL|method|fromMeters
specifier|static
name|double
name|fromMeters
parameter_list|(
specifier|final
name|double
name|meters
parameter_list|)
block|{
return|return
name|meters
operator|*
name|RADIANS_PER_METER
return|;
block|}
comment|/**     * Convert a set of Polygon objects into a GeoPolygon.     * @param polygons are the Polygon objects.     * @return the GeoPolygon.     */
DECL|method|fromPolygon
specifier|static
name|GeoPolygon
name|fromPolygon
parameter_list|(
specifier|final
name|Polygon
modifier|...
name|polygons
parameter_list|)
block|{
comment|//System.err.println("Creating polygon...");
if|if
condition|(
name|polygons
operator|.
name|length
operator|<
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"need at least one polygon"
argument_list|)
throw|;
block|}
specifier|final
name|GeoPolygon
name|shape
decl_stmt|;
if|if
condition|(
name|polygons
operator|.
name|length
operator|==
literal|1
condition|)
block|{
specifier|final
name|GeoPolygon
name|component
init|=
name|fromPolygon
argument_list|(
name|polygons
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|component
operator|==
literal|null
condition|)
block|{
comment|// Polygon is degenerate
name|shape
operator|=
operator|new
name|GeoCompositePolygon
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|shape
operator|=
name|component
expr_stmt|;
block|}
block|}
else|else
block|{
specifier|final
name|GeoCompositePolygon
name|poly
init|=
operator|new
name|GeoCompositePolygon
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|Polygon
name|p
range|:
name|polygons
control|)
block|{
specifier|final
name|GeoPolygon
name|component
init|=
name|fromPolygon
argument_list|(
name|p
argument_list|)
decl_stmt|;
if|if
condition|(
name|component
operator|!=
literal|null
condition|)
block|{
name|poly
operator|.
name|addShape
argument_list|(
name|component
argument_list|)
expr_stmt|;
block|}
block|}
name|shape
operator|=
name|poly
expr_stmt|;
block|}
return|return
name|shape
return|;
comment|//System.err.println("...done");
block|}
comment|/**    * Convert a Polygon object to a large GeoPolygon.    * @param polygons is the list of polygons to convert.    * @return the large GeoPolygon.    */
DECL|method|fromLargePolygon
specifier|static
name|GeoPolygon
name|fromLargePolygon
parameter_list|(
specifier|final
name|Polygon
modifier|...
name|polygons
parameter_list|)
block|{
if|if
condition|(
name|polygons
operator|.
name|length
operator|<
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"need at least one polygon"
argument_list|)
throw|;
block|}
return|return
name|GeoPolygonFactory
operator|.
name|makeLargeGeoPolygon
argument_list|(
name|PlanetModel
operator|.
name|WGS84
argument_list|,
name|convertToDescription
argument_list|(
name|polygons
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Convert input parameters to a path.    * @param pathLatitudes latitude values for points of the path: must be within standard +/-90 coordinate bounds.    * @param pathLongitudes longitude values for points of the path: must be within standard +/-180 coordinate bounds.    * @param pathWidthMeters width of the path in meters.    * @return the path.    */
DECL|method|fromPath
specifier|static
name|GeoPath
name|fromPath
parameter_list|(
specifier|final
name|double
index|[]
name|pathLatitudes
parameter_list|,
specifier|final
name|double
index|[]
name|pathLongitudes
parameter_list|,
specifier|final
name|double
name|pathWidthMeters
parameter_list|)
block|{
if|if
condition|(
name|pathLatitudes
operator|.
name|length
operator|!=
name|pathLongitudes
operator|.
name|length
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"same number of latitudes and longitudes required"
argument_list|)
throw|;
block|}
specifier|final
name|GeoPoint
index|[]
name|points
init|=
operator|new
name|GeoPoint
index|[
name|pathLatitudes
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|pathLatitudes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|double
name|latitude
init|=
name|pathLatitudes
index|[
name|i
index|]
decl_stmt|;
specifier|final
name|double
name|longitude
init|=
name|pathLongitudes
index|[
name|i
index|]
decl_stmt|;
name|GeoUtils
operator|.
name|checkLatitude
argument_list|(
name|latitude
argument_list|)
expr_stmt|;
name|GeoUtils
operator|.
name|checkLongitude
argument_list|(
name|longitude
argument_list|)
expr_stmt|;
name|points
index|[
name|i
index|]
operator|=
operator|new
name|GeoPoint
argument_list|(
name|PlanetModel
operator|.
name|WGS84
argument_list|,
name|fromDegrees
argument_list|(
name|latitude
argument_list|)
argument_list|,
name|fromDegrees
argument_list|(
name|longitude
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|GeoPathFactory
operator|.
name|makeGeoPath
argument_list|(
name|PlanetModel
operator|.
name|WGS84
argument_list|,
name|fromMeters
argument_list|(
name|pathWidthMeters
argument_list|)
argument_list|,
name|points
argument_list|)
return|;
block|}
comment|/**    * Convert input parameters to a circle.    * @param latitude latitude at the center: must be within standard +/-90 coordinate bounds.    * @param longitude longitude at the center: must be within standard +/-180 coordinate bounds.    * @param radiusMeters maximum distance from the center in meters: must be non-negative and finite.    * @return the circle.    */
DECL|method|fromDistance
specifier|static
name|GeoCircle
name|fromDistance
parameter_list|(
specifier|final
name|double
name|latitude
parameter_list|,
specifier|final
name|double
name|longitude
parameter_list|,
specifier|final
name|double
name|radiusMeters
parameter_list|)
block|{
name|GeoUtils
operator|.
name|checkLatitude
argument_list|(
name|latitude
argument_list|)
expr_stmt|;
name|GeoUtils
operator|.
name|checkLongitude
argument_list|(
name|longitude
argument_list|)
expr_stmt|;
return|return
name|GeoCircleFactory
operator|.
name|makeGeoCircle
argument_list|(
name|PlanetModel
operator|.
name|WGS84
argument_list|,
name|fromDegrees
argument_list|(
name|latitude
argument_list|)
argument_list|,
name|fromDegrees
argument_list|(
name|longitude
argument_list|)
argument_list|,
name|fromMeters
argument_list|(
name|radiusMeters
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Convert input parameters to a box.    * @param minLatitude latitude lower bound: must be within standard +/-90 coordinate bounds.    * @param maxLatitude latitude upper bound: must be within standard +/-90 coordinate bounds.    * @param minLongitude longitude lower bound: must be within standard +/-180 coordinate bounds.    * @param maxLongitude longitude upper bound: must be within standard +/-180 coordinate bounds.    * @return the box.    */
DECL|method|fromBox
specifier|static
name|GeoBBox
name|fromBox
parameter_list|(
specifier|final
name|double
name|minLatitude
parameter_list|,
specifier|final
name|double
name|maxLatitude
parameter_list|,
specifier|final
name|double
name|minLongitude
parameter_list|,
specifier|final
name|double
name|maxLongitude
parameter_list|)
block|{
name|GeoUtils
operator|.
name|checkLatitude
argument_list|(
name|minLatitude
argument_list|)
expr_stmt|;
name|GeoUtils
operator|.
name|checkLongitude
argument_list|(
name|minLongitude
argument_list|)
expr_stmt|;
name|GeoUtils
operator|.
name|checkLatitude
argument_list|(
name|maxLatitude
argument_list|)
expr_stmt|;
name|GeoUtils
operator|.
name|checkLongitude
argument_list|(
name|maxLongitude
argument_list|)
expr_stmt|;
return|return
name|GeoBBoxFactory
operator|.
name|makeGeoBBox
argument_list|(
name|PlanetModel
operator|.
name|WGS84
argument_list|,
name|Geo3DUtil
operator|.
name|fromDegrees
argument_list|(
name|maxLatitude
argument_list|)
argument_list|,
name|Geo3DUtil
operator|.
name|fromDegrees
argument_list|(
name|minLatitude
argument_list|)
argument_list|,
name|Geo3DUtil
operator|.
name|fromDegrees
argument_list|(
name|minLongitude
argument_list|)
argument_list|,
name|Geo3DUtil
operator|.
name|fromDegrees
argument_list|(
name|maxLongitude
argument_list|)
argument_list|)
return|;
block|}
comment|/**     * Convert a Polygon object into a GeoPolygon.     * This method uses     * @param polygon is the Polygon object.     * @return the GeoPolygon.     */
DECL|method|fromPolygon
specifier|private
specifier|static
name|GeoPolygon
name|fromPolygon
parameter_list|(
specifier|final
name|Polygon
name|polygon
parameter_list|)
block|{
comment|// First, assemble the "holes".  The geo3d convention is to use the same polygon sense on the inner ring as the
comment|// outer ring, so we process these recursively with reverseMe flipped.
specifier|final
name|Polygon
index|[]
name|theHoles
init|=
name|polygon
operator|.
name|getHoles
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|GeoPolygon
argument_list|>
name|holeList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|theHoles
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
specifier|final
name|Polygon
name|hole
range|:
name|theHoles
control|)
block|{
comment|//System.out.println("Hole: "+hole);
specifier|final
name|GeoPolygon
name|component
init|=
name|fromPolygon
argument_list|(
name|hole
argument_list|)
decl_stmt|;
if|if
condition|(
name|component
operator|!=
literal|null
condition|)
block|{
name|holeList
operator|.
name|add
argument_list|(
name|component
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Now do the polygon itself
specifier|final
name|double
index|[]
name|polyLats
init|=
name|polygon
operator|.
name|getPolyLats
argument_list|()
decl_stmt|;
specifier|final
name|double
index|[]
name|polyLons
init|=
name|polygon
operator|.
name|getPolyLons
argument_list|()
decl_stmt|;
comment|// I presume the arguments have already been checked
specifier|final
name|List
argument_list|<
name|GeoPoint
argument_list|>
name|points
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|polyLats
operator|.
name|length
operator|-
literal|1
argument_list|)
decl_stmt|;
comment|// We skip the last point anyway because the API requires it to be repeated, and geo3d doesn't repeat it.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|polyLats
operator|.
name|length
operator|-
literal|1
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|int
name|index
init|=
name|polyLats
operator|.
name|length
operator|-
literal|2
operator|-
name|i
decl_stmt|;
name|points
operator|.
name|add
argument_list|(
operator|new
name|GeoPoint
argument_list|(
name|PlanetModel
operator|.
name|WGS84
argument_list|,
name|fromDegrees
argument_list|(
name|polyLats
index|[
name|index
index|]
argument_list|)
argument_list|,
name|fromDegrees
argument_list|(
name|polyLons
index|[
name|index
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//System.err.println(" building polygon with "+points.size()+" points...");
specifier|final
name|GeoPolygon
name|rval
init|=
name|GeoPolygonFactory
operator|.
name|makeGeoPolygon
argument_list|(
name|PlanetModel
operator|.
name|WGS84
argument_list|,
name|points
argument_list|,
name|holeList
argument_list|)
decl_stmt|;
comment|//System.err.println(" ...done");
return|return
name|rval
return|;
block|}
comment|/**    * Convert a list of polygons to a list of polygon descriptions.    * @param polygons is the list of polygons to convert.    * @return the list of polygon descriptions.    */
DECL|method|convertToDescription
specifier|private
specifier|static
name|List
argument_list|<
name|GeoPolygonFactory
operator|.
name|PolygonDescription
argument_list|>
name|convertToDescription
parameter_list|(
specifier|final
name|Polygon
modifier|...
name|polygons
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|GeoPolygonFactory
operator|.
name|PolygonDescription
argument_list|>
name|descriptions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|polygons
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
specifier|final
name|Polygon
name|polygon
range|:
name|polygons
control|)
block|{
specifier|final
name|Polygon
index|[]
name|theHoles
init|=
name|polygon
operator|.
name|getHoles
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|GeoPolygonFactory
operator|.
name|PolygonDescription
argument_list|>
name|holes
init|=
name|convertToDescription
argument_list|(
name|theHoles
argument_list|)
decl_stmt|;
comment|// Now do the polygon itself
specifier|final
name|double
index|[]
name|polyLats
init|=
name|polygon
operator|.
name|getPolyLats
argument_list|()
decl_stmt|;
specifier|final
name|double
index|[]
name|polyLons
init|=
name|polygon
operator|.
name|getPolyLons
argument_list|()
decl_stmt|;
comment|// I presume the arguments have already been checked
specifier|final
name|List
argument_list|<
name|GeoPoint
argument_list|>
name|points
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|polyLats
operator|.
name|length
operator|-
literal|1
argument_list|)
decl_stmt|;
comment|// We skip the last point anyway because the API requires it to be repeated, and geo3d doesn't repeat it.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|polyLats
operator|.
name|length
operator|-
literal|1
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|int
name|index
init|=
name|polyLats
operator|.
name|length
operator|-
literal|2
operator|-
name|i
decl_stmt|;
name|points
operator|.
name|add
argument_list|(
operator|new
name|GeoPoint
argument_list|(
name|PlanetModel
operator|.
name|WGS84
argument_list|,
name|fromDegrees
argument_list|(
name|polyLats
index|[
name|index
index|]
argument_list|)
argument_list|,
name|fromDegrees
argument_list|(
name|polyLons
index|[
name|index
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|descriptions
operator|.
name|add
argument_list|(
operator|new
name|GeoPolygonFactory
operator|.
name|PolygonDescription
argument_list|(
name|points
argument_list|,
name|holes
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|descriptions
return|;
block|}
block|}
end_class
end_unit
