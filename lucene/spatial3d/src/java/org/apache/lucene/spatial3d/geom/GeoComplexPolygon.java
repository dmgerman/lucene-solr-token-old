begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.spatial3d.geom
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial3d
operator|.
name|geom
package|;
end_package
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|BitSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_comment
comment|/**  * GeoComplexPolygon objects are structures designed to handle very large numbers of edges.  * They perform very well in this case compared to the alternatives, which all have O(N) evaluation  * and O(N^2) setup times.  Complex polygons have O(N) setup times and best case O(log(N))  * evaluation times.  *  * The tradeoff is that these objects perform object creation when evaluating intersects() and  * isWithin().  *  * @lucene.internal  */
end_comment
begin_class
DECL|class|GeoComplexPolygon
class|class
name|GeoComplexPolygon
extends|extends
name|GeoBasePolygon
block|{
DECL|field|xtree
specifier|private
specifier|final
name|XTree
name|xtree
init|=
operator|new
name|XTree
argument_list|()
decl_stmt|;
DECL|field|ytree
specifier|private
specifier|final
name|YTree
name|ytree
init|=
operator|new
name|YTree
argument_list|()
decl_stmt|;
DECL|field|ztree
specifier|private
specifier|final
name|ZTree
name|ztree
init|=
operator|new
name|ZTree
argument_list|()
decl_stmt|;
DECL|field|testPointInSet
specifier|private
specifier|final
name|boolean
name|testPointInSet
decl_stmt|;
DECL|field|testPointVerticalPlane
specifier|private
specifier|final
name|Plane
name|testPointVerticalPlane
decl_stmt|;
DECL|field|edgePoints
specifier|private
specifier|final
name|GeoPoint
index|[]
name|edgePoints
decl_stmt|;
DECL|field|shapeStartEdges
specifier|private
specifier|final
name|Edge
index|[]
name|shapeStartEdges
decl_stmt|;
comment|/**    * Create a complex polygon from multiple lists of points, and a single point which is known to be in or out of    * set.    *@param planetModel is the planet model.    *@param pointsList is the list of lists of edge points.  The edge points describe edges, and have an implied    *  return boundary, so that N edges require N points.  These points have furthermore been filtered so that    *  no adjacent points are identical (within the bounds of the definition used by this package).  It is assumed    *  that no edges intersect, but the structure can contain both outer rings as well as holes.    *@param testPoint is the point whose in/out of setness is known.    *@param testPointInSet is true if the test point is considered "within" the polygon.    */
DECL|method|GeoComplexPolygon
specifier|public
name|GeoComplexPolygon
parameter_list|(
specifier|final
name|PlanetModel
name|planetModel
parameter_list|,
specifier|final
name|List
argument_list|<
name|List
argument_list|<
name|GeoPoint
argument_list|>
argument_list|>
name|pointsList
parameter_list|,
specifier|final
name|GeoPoint
name|testPoint
parameter_list|,
specifier|final
name|boolean
name|testPointInSet
parameter_list|)
block|{
name|super
argument_list|(
name|planetModel
argument_list|)
expr_stmt|;
name|this
operator|.
name|testPointInSet
operator|=
name|testPointInSet
expr_stmt|;
name|Plane
name|p
init|=
name|Plane
operator|.
name|constructNormalizedZPlane
argument_list|(
name|testPoint
operator|.
name|x
argument_list|,
name|testPoint
operator|.
name|y
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|==
literal|null
condition|)
block|{
name|p
operator|=
operator|new
name|Plane
argument_list|(
literal|1.0
argument_list|,
literal|0.0
argument_list|,
literal|0.0
argument_list|,
literal|0.0
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|testPointVerticalPlane
operator|=
name|p
expr_stmt|;
name|this
operator|.
name|edgePoints
operator|=
operator|new
name|GeoPoint
index|[
name|pointsList
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
name|this
operator|.
name|shapeStartEdges
operator|=
operator|new
name|Edge
index|[
name|pointsList
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
name|int
name|edgePointIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
specifier|final
name|List
argument_list|<
name|GeoPoint
argument_list|>
name|shapePoints
range|:
name|pointsList
control|)
block|{
name|GeoPoint
name|lastGeoPoint
init|=
name|pointsList
operator|.
name|get
argument_list|(
name|shapePoints
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|edgePoints
index|[
name|edgePointIndex
index|]
operator|=
name|lastGeoPoint
expr_stmt|;
name|Edge
name|lastEdge
init|=
literal|null
decl_stmt|;
name|Edge
name|firstEdge
init|=
literal|null
decl_stmt|;
for|for
control|(
specifier|final
name|GeoPoint
name|thisGeoPoint
range|:
name|shapePoints
control|)
block|{
specifier|final
name|Edge
name|edge
init|=
operator|new
name|Edge
argument_list|(
name|planetModel
argument_list|,
name|lastGeoPoint
argument_list|,
name|thisGeoPoint
argument_list|)
decl_stmt|;
name|xtree
operator|.
name|add
argument_list|(
name|edge
argument_list|)
expr_stmt|;
name|ytree
operator|.
name|add
argument_list|(
name|edge
argument_list|)
expr_stmt|;
name|ztree
operator|.
name|add
argument_list|(
name|edge
argument_list|)
expr_stmt|;
comment|// Now, link
if|if
condition|(
name|firstEdge
operator|==
literal|null
condition|)
block|{
name|firstEdge
operator|=
name|edge
expr_stmt|;
block|}
if|if
condition|(
name|lastEdge
operator|!=
literal|null
condition|)
block|{
name|lastEdge
operator|.
name|next
operator|=
name|edge
expr_stmt|;
name|edge
operator|.
name|previous
operator|=
name|lastEdge
expr_stmt|;
block|}
name|lastEdge
operator|=
name|edge
expr_stmt|;
name|lastGeoPoint
operator|=
name|thisGeoPoint
expr_stmt|;
block|}
name|firstEdge
operator|.
name|previous
operator|=
name|lastEdge
expr_stmt|;
name|lastEdge
operator|.
name|next
operator|=
name|firstEdge
expr_stmt|;
name|shapeStartEdges
index|[
name|edgePointIndex
index|]
operator|=
name|firstEdge
expr_stmt|;
name|edgePointIndex
operator|++
expr_stmt|;
block|}
block|}
comment|/** Compute a legal point index from a possibly illegal one, that may have wrapped.    *@param index is the index.    *@return the normalized index.    */
DECL|method|legalIndex
specifier|protected
name|int
name|legalIndex
parameter_list|(
name|int
name|index
parameter_list|)
block|{
while|while
condition|(
name|index
operator|>=
name|points
operator|.
name|size
argument_list|()
condition|)
name|index
operator|-=
name|points
operator|.
name|size
argument_list|()
expr_stmt|;
while|while
condition|(
name|index
operator|<
literal|0
condition|)
block|{
name|index
operator|+=
name|points
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
return|return
name|index
return|;
block|}
annotation|@
name|Override
DECL|method|isWithin
specifier|public
name|boolean
name|isWithin
parameter_list|(
specifier|final
name|double
name|x
parameter_list|,
specifier|final
name|double
name|y
parameter_list|,
specifier|final
name|double
name|z
parameter_list|)
block|{
comment|// MHL
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|getEdgePoints
specifier|public
name|GeoPoint
index|[]
name|getEdgePoints
parameter_list|()
block|{
return|return
name|edgePoints
return|;
block|}
annotation|@
name|Override
DECL|method|intersects
specifier|public
name|boolean
name|intersects
parameter_list|(
specifier|final
name|Plane
name|p
parameter_list|,
specifier|final
name|GeoPoint
index|[]
name|notablePoints
parameter_list|,
specifier|final
name|Membership
modifier|...
name|bounds
parameter_list|)
block|{
comment|// Create the intersector
specifier|final
name|EdgeIterator
name|intersector
init|=
operator|new
name|IntersectorEdgeIterator
argument_list|(
name|p
argument_list|,
name|notablePoints
argument_list|,
name|bounds
argument_list|)
decl_stmt|;
comment|// First, compute the bounds for the the plane
specifier|final
name|XYZBounds
name|xyzBounds
init|=
operator|new
name|XYZBounds
argument_list|()
decl_stmt|;
name|p
operator|.
name|recordBounds
argument_list|(
name|xyzBounds
argument_list|)
expr_stmt|;
comment|// Figure out which tree likely works best
specifier|final
name|double
name|xDelta
init|=
name|xyzBounds
operator|.
name|getMaximumX
argument_list|()
operator|-
name|xyzBounds
operator|.
name|getMinimumX
argument_list|()
decl_stmt|;
specifier|final
name|double
name|yDelta
init|=
name|xyzBounds
operator|.
name|getMaximumY
argument_list|()
operator|-
name|xyzBounds
operator|.
name|getMinimumY
argument_list|()
decl_stmt|;
specifier|final
name|double
name|zDelta
init|=
name|xyzBounds
operator|.
name|getMaximumZ
argument_list|()
operator|-
name|xyzBounds
operator|.
name|getMinimumZ
argument_list|()
decl_stmt|;
comment|// Select the smallest range
if|if
condition|(
name|xDelta
operator|<=
name|yDelta
operator|&&
name|xDelta
operator|<=
name|zDelta
condition|)
block|{
comment|// Drill down in x
return|return
operator|!
name|xtree
operator|.
name|traverse
argument_list|(
name|intersector
argument_list|,
name|xyzBounds
operator|.
name|getMinimumX
argument_list|()
argument_list|,
name|xyzBounds
operator|.
name|getMaximumX
argument_list|()
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|yDelta
operator|<=
name|xDelta
operator|&&
name|yDelta
operator|<=
name|zDelta
condition|)
block|{
comment|// Drill down in y
return|return
operator|!
name|ytree
operator|.
name|traverse
argument_list|(
name|intersector
argument_list|,
name|xyzBounds
operator|.
name|getMinimumY
argument_list|()
argument_list|,
name|xyzBounds
operator|.
name|getMaximumY
argument_list|()
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|zDelta
operator|<=
name|xDelta
operator|&&
name|zDelta
operator|<=
name|yDelta
condition|)
block|{
comment|// Drill down in z
return|return
operator|!
name|ztree
operator|.
name|traverse
argument_list|(
name|intersector
argument_list|,
name|xyzBounds
operator|.
name|getMinimumZ
argument_list|()
argument_list|,
name|xyzBounds
operator|.
name|getMaximumZ
argument_list|()
argument_list|)
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|getBounds
specifier|public
name|void
name|getBounds
parameter_list|(
name|Bounds
name|bounds
parameter_list|)
block|{
name|super
operator|.
name|getBounds
argument_list|(
name|bounds
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|Edge
name|startEdge
range|:
name|shapeStartEdges
control|)
block|{
name|Edge
name|currentEdge
init|=
name|startEdge
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|currentEdge
operator|.
name|plane
operator|.
name|recordBounds
argument_list|(
name|this
operator|.
name|planetModel
argument_list|,
name|currentEdge
operator|.
name|startPlane
argument_list|,
name|currentEdge
operator|.
name|edgePlane
argument_list|)
expr_stmt|;
name|currentEdge
operator|=
name|currentEdge
operator|.
name|next
expr_stmt|;
if|if
condition|(
name|currentEdge
operator|==
name|startEdge
condition|)
block|{
break|break;
block|}
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|outsideDistance
specifier|protected
name|double
name|outsideDistance
parameter_list|(
specifier|final
name|DistanceStyle
name|distanceStyle
parameter_list|,
specifier|final
name|double
name|x
parameter_list|,
specifier|final
name|double
name|y
parameter_list|,
specifier|final
name|double
name|z
parameter_list|)
block|{
comment|// MHL
return|return
literal|0.0
return|;
block|}
comment|/**    * An instance of this class describes a single edge, and includes what is necessary to reliably determine intersection    * in the context of the even/odd algorithm used.    */
DECL|class|Edge
specifier|private
specifier|static
class|class
name|Edge
block|{
DECL|field|startPoint
specifier|public
specifier|final
name|GeoPoint
name|startPoint
decl_stmt|;
DECL|field|endPoint
specifier|public
specifier|final
name|GeoPoint
name|endPoint
decl_stmt|;
DECL|field|notablePoints
specifier|public
specifier|final
name|GeoPoint
index|[]
name|notablePoints
decl_stmt|;
DECL|field|startPlane
specifier|public
specifier|final
name|SidedPlane
name|startPlane
decl_stmt|;
DECL|field|endPlane
specifier|public
specifier|final
name|SidedPlane
name|endPlane
decl_stmt|;
DECL|field|plane
specifier|public
specifier|final
name|Plane
name|plane
decl_stmt|;
DECL|field|planeBounds
specifier|public
specifier|final
name|XYZBounds
name|planeBounds
decl_stmt|;
DECL|field|previous
specifier|public
name|Edge
name|previous
init|=
literal|null
decl_stmt|;
DECL|field|next
specifier|public
name|Edge
name|next
init|=
literal|null
decl_stmt|;
DECL|method|Edge
specifier|public
name|Edge
parameter_list|(
specifier|final
name|PlanetModel
name|pm
parameter_list|,
specifier|final
name|GeoPoint
name|startPoint
parameter_list|,
specifier|final
name|GeoPoint
name|endPoint
parameter_list|)
block|{
name|this
operator|.
name|startPoint
operator|=
name|startPoint
expr_stmt|;
name|this
operator|.
name|endPoint
operator|=
name|endPoint
expr_stmt|;
name|this
operator|.
name|notablePoints
operator|=
operator|new
name|GeoPoint
index|[]
block|{
name|startPoint
block|,
name|endPoint
block|}
expr_stmt|;
name|this
operator|.
name|plane
operator|=
operator|new
name|Plane
argument_list|(
name|startPoint
argument_list|,
name|endPoint
argument_list|)
expr_stmt|;
name|this
operator|.
name|startPlane
operator|=
operator|new
name|SidedPlane
argument_list|(
name|endPoint
argument_list|,
name|plane
argument_list|,
name|startPoint
argument_list|)
expr_stmt|;
name|this
operator|.
name|endPlane
operator|=
operator|new
name|SidedPlane
argument_list|(
name|startPoint
argument_list|,
name|plane
argument_list|,
name|endPoint
argument_list|)
expr_stmt|;
name|this
operator|.
name|planeBounds
operator|=
operator|new
name|XYZBounds
argument_list|()
expr_stmt|;
name|this
operator|.
name|plane
operator|.
name|recordBounds
argument_list|(
name|pm
argument_list|,
name|this
operator|.
name|planeBounds
argument_list|,
name|this
operator|.
name|startPlane
argument_list|,
name|this
operator|.
name|endPlane
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Iterator execution interface, for tree traversal.  Pass an object implementing this interface    * into the traversal method of a tree, and each edge that matches will cause this object to be    * called.    */
DECL|interface|EdgeIterator
specifier|private
specifier|static
interface|interface
name|EdgeIterator
block|{
comment|/**      * @param edge is the edge that matched.      * @return true if the iteration should continue, false otherwise.      */
DECL|method|matches
specifier|public
name|boolean
name|matches
parameter_list|(
specifier|final
name|Edge
name|edge
parameter_list|)
function_decl|;
block|}
comment|/**    * Comparison interface for tree traversal.  An object implementing this interface    * gets to decide the relationship between the Edge object and the criteria being considered.    */
DECL|interface|TraverseComparator
specifier|private
specifier|static
interface|interface
name|TraverseComparator
block|{
comment|/**      * Compare an edge.      * @param edge is the edge to compare.      * @param minValue is the minimum value to compare (bottom of the range)      * @param maxValue is the maximum value to compare (top of the range)      * @return -1 if "less" than this one, 0 if overlaps, or 1 if "greater".      */
DECL|method|compare
specifier|public
name|int
name|compare
parameter_list|(
specifier|final
name|Edge
name|edge
parameter_list|,
specifier|final
name|double
name|minValue
parameter_list|,
specifier|final
name|double
name|maxValue
parameter_list|)
function_decl|;
block|}
comment|/**    * Comparison interface for tree addition.  An object implementing this interface    * gets to decide the relationship between the Edge object and the criteria being considered.    */
DECL|interface|AddComparator
specifier|private
specifier|static
interface|interface
name|AddComparator
block|{
comment|/**      * Compare an edge.      * @param edge is the edge to compare.      * @param addEdge is the edge being added.      * @return -1 if "less" than this one, 0 if overlaps, or 1 if "greater".      */
DECL|method|compare
specifier|public
name|int
name|compare
parameter_list|(
specifier|final
name|Edge
name|edge
parameter_list|,
specifier|final
name|Edge
name|addEdge
parameter_list|)
function_decl|;
block|}
comment|/**    * An instance of this class represents a node in a tree.  The tree is designed to be given    * a value and from that to iterate over a list of edges.    * In order to do this efficiently, each new edge is dropped into the tree using its minimum and    * maximum value.  If the new edge's value does not overlap the range, then it gets added    * either to the lesser side or the greater side, accordingly.  If it does overlap, then the    * "overlapping" chain is instead traversed.    *    * This class is generic and can be used for any definition of "value".    *    */
DECL|class|Node
specifier|private
specifier|static
class|class
name|Node
block|{
DECL|field|edge
specifier|public
specifier|final
name|Edge
name|edge
decl_stmt|;
DECL|field|lesser
specifier|public
name|Node
name|lesser
init|=
literal|null
decl_stmt|;
DECL|field|greater
specifier|public
name|Node
name|greater
init|=
literal|null
decl_stmt|;
DECL|field|overlaps
specifier|public
name|Node
name|overlaps
init|=
literal|null
decl_stmt|;
DECL|method|Node
specifier|public
name|Node
parameter_list|(
specifier|final
name|Edge
name|edge
parameter_list|)
block|{
name|this
operator|.
name|edge
operator|=
name|edge
expr_stmt|;
block|}
DECL|method|add
specifier|public
name|void
name|add
parameter_list|(
specifier|final
name|Edge
name|newEdge
parameter_list|,
specifier|final
name|AddComparator
name|edgeComparator
parameter_list|)
block|{
name|Node
name|currentNode
init|=
name|this
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
specifier|final
name|int
name|result
init|=
name|edgeComparator
operator|.
name|compare
argument_list|(
name|edge
argument_list|,
name|newEdge
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|<
literal|0
condition|)
block|{
if|if
condition|(
name|lesser
operator|==
literal|null
condition|)
block|{
name|lesser
operator|=
operator|new
name|Node
argument_list|(
name|newEdge
argument_list|)
expr_stmt|;
return|return;
block|}
name|currentNode
operator|=
name|lesser
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|result
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|greater
operator|==
literal|null
condition|)
block|{
name|greater
operator|=
operator|new
name|Node
argument_list|(
name|newEdge
argument_list|)
expr_stmt|;
return|return;
block|}
name|currentNode
operator|=
name|greater
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|overlaps
operator|==
literal|null
condition|)
block|{
name|overlaps
operator|=
operator|new
name|Node
argument_list|(
name|newEdge
argument_list|)
expr_stmt|;
return|return;
block|}
name|currentNode
operator|=
name|overlaps
expr_stmt|;
block|}
block|}
block|}
DECL|method|traverse
specifier|public
name|boolean
name|traverse
parameter_list|(
specifier|final
name|EdgeIterator
name|edgeIterator
parameter_list|,
specifier|final
name|TraverseComparator
name|edgeComparator
parameter_list|,
specifier|final
name|double
name|minValue
parameter_list|,
specifier|final
name|double
name|maxValue
parameter_list|)
block|{
name|Node
name|currentNode
init|=
name|this
decl_stmt|;
while|while
condition|(
name|currentNode
operator|!=
literal|null
condition|)
block|{
specifier|final
name|int
name|result
init|=
name|edgeComparator
operator|.
name|compare
argument_list|(
name|currentNode
operator|.
name|edge
argument_list|,
name|minValue
argument_list|,
name|maxValue
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|<
literal|0
condition|)
block|{
name|currentNode
operator|=
name|lesser
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|result
operator|>
literal|0
condition|)
block|{
name|currentNode
operator|=
name|greater
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|edgeIterator
operator|.
name|matches
argument_list|(
name|edge
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|currentNode
operator|=
name|overlaps
expr_stmt|;
block|}
block|}
return|return
literal|true
return|;
block|}
block|}
comment|/** This is the z-tree.    */
DECL|class|ZTree
specifier|private
specifier|static
class|class
name|ZTree
implements|implements
name|TraverseComparator
implements|,
name|AddComparator
block|{
DECL|field|rootNode
specifier|public
name|Node
name|rootNode
init|=
literal|null
decl_stmt|;
DECL|method|ZTree
specifier|public
name|ZTree
parameter_list|()
block|{     }
DECL|method|add
specifier|public
name|void
name|add
parameter_list|(
specifier|final
name|Edge
name|edge
parameter_list|)
block|{
if|if
condition|(
name|rootNode
operator|==
literal|null
condition|)
block|{
name|rootNode
operator|=
operator|new
name|Node
argument_list|(
name|edge
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|rootNode
operator|.
name|add
argument_list|(
name|edge
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|traverse
specifier|public
name|boolean
name|traverse
parameter_list|(
specifier|final
name|EdgeIterator
name|edgeIterator
parameter_list|,
specifier|final
name|double
name|minValue
parameter_list|,
specifier|final
name|double
name|maxValue
parameter_list|)
block|{
if|if
condition|(
name|rootNode
operator|==
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
name|rootNode
operator|.
name|traverse
argument_list|(
name|edgeIterator
argument_list|,
name|this
argument_list|,
name|minValue
argument_list|,
name|maxValue
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|compare
specifier|public
name|int
name|compare
parameter_list|(
specifier|final
name|Edge
name|edge
parameter_list|,
specifier|final
name|Edge
name|addEdge
parameter_list|)
block|{
if|if
condition|(
name|edge
operator|.
name|planeBounds
operator|.
name|getMaximumZ
argument_list|()
operator|<
name|addEdge
operator|.
name|planeBounds
operator|.
name|getMinimumZ
argument_list|()
condition|)
block|{
return|return
literal|1
return|;
block|}
elseif|else
if|if
condition|(
name|edge
operator|.
name|planeBounds
operator|.
name|getMinimumZ
argument_list|()
operator|>
name|addEdge
operator|.
name|planeBounds
operator|.
name|getMaximumZ
argument_list|()
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
return|return
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|compare
specifier|public
name|int
name|compare
parameter_list|(
specifier|final
name|Edge
name|edge
parameter_list|,
specifier|final
name|double
name|minValue
parameter_list|,
specifier|final
name|double
name|maxValue
parameter_list|)
block|{
if|if
condition|(
name|edge
operator|.
name|planeBounds
operator|.
name|getMinimumZ
argument_list|()
operator|>
name|maxValue
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
elseif|else
if|if
condition|(
name|edge
operator|.
name|planeBounds
operator|.
name|getMaximumZ
argument_list|()
operator|<
name|minValue
condition|)
block|{
return|return
literal|1
return|;
block|}
return|return
literal|0
return|;
block|}
block|}
comment|/** This is the y-tree.    */
DECL|class|YTree
specifier|private
specifier|static
class|class
name|YTree
implements|implements
name|TraverseComparator
implements|,
name|AddComparator
block|{
DECL|field|rootNode
specifier|public
name|Node
name|rootNode
init|=
literal|null
decl_stmt|;
DECL|method|YTree
specifier|public
name|YTree
parameter_list|()
block|{     }
DECL|method|add
specifier|public
name|void
name|add
parameter_list|(
specifier|final
name|Edge
name|edge
parameter_list|)
block|{
if|if
condition|(
name|rootNode
operator|==
literal|null
condition|)
block|{
name|rootNode
operator|=
operator|new
name|Node
argument_list|(
name|edge
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|rootNode
operator|.
name|add
argument_list|(
name|edge
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|traverse
specifier|public
name|boolean
name|traverse
parameter_list|(
specifier|final
name|EdgeIterator
name|edgeIterator
parameter_list|,
specifier|final
name|double
name|minValue
parameter_list|,
specifier|final
name|double
name|maxValue
parameter_list|)
block|{
if|if
condition|(
name|rootNode
operator|==
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
name|rootNode
operator|.
name|traverse
argument_list|(
name|edgeIterator
argument_list|,
name|this
argument_list|,
name|minValue
argument_list|,
name|maxValue
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|compare
specifier|public
name|int
name|compare
parameter_list|(
specifier|final
name|Edge
name|edge
parameter_list|,
specifier|final
name|Edge
name|addEdge
parameter_list|)
block|{
if|if
condition|(
name|edge
operator|.
name|planeBounds
operator|.
name|getMaximumY
argument_list|()
operator|<
name|addEdge
operator|.
name|planeBounds
operator|.
name|getMinimumY
argument_list|()
condition|)
block|{
return|return
literal|1
return|;
block|}
elseif|else
if|if
condition|(
name|edge
operator|.
name|planeBounds
operator|.
name|getMinimumY
argument_list|()
operator|>
name|addEdge
operator|.
name|planeBounds
operator|.
name|getMaximumY
argument_list|()
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
return|return
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|compare
specifier|public
name|int
name|compare
parameter_list|(
specifier|final
name|Edge
name|edge
parameter_list|,
specifier|final
name|double
name|minValue
parameter_list|,
specifier|final
name|double
name|maxValue
parameter_list|)
block|{
if|if
condition|(
name|edge
operator|.
name|planeBounds
operator|.
name|getMinimumY
argument_list|()
operator|>
name|maxValue
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
elseif|else
if|if
condition|(
name|edge
operator|.
name|planeBounds
operator|.
name|getMaximumY
argument_list|()
operator|<
name|minValue
condition|)
block|{
return|return
literal|1
return|;
block|}
return|return
literal|0
return|;
block|}
block|}
comment|/** This is the x-tree.    */
DECL|class|XTree
specifier|private
specifier|static
class|class
name|XTree
implements|implements
name|TraverseComparator
implements|,
name|AddComparator
block|{
DECL|field|rootNode
specifier|public
name|Node
name|rootNode
init|=
literal|null
decl_stmt|;
DECL|method|XTree
specifier|public
name|XTree
parameter_list|()
block|{     }
DECL|method|add
specifier|public
name|void
name|add
parameter_list|(
specifier|final
name|Edge
name|edge
parameter_list|)
block|{
if|if
condition|(
name|rootNode
operator|==
literal|null
condition|)
block|{
name|rootNode
operator|=
operator|new
name|Node
argument_list|(
name|edge
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|rootNode
operator|.
name|add
argument_list|(
name|edge
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|traverse
specifier|public
name|boolean
name|traverse
parameter_list|(
specifier|final
name|EdgeIterator
name|edgeIterator
parameter_list|,
specifier|final
name|double
name|minValue
parameter_list|,
specifier|final
name|double
name|maxValue
parameter_list|)
block|{
if|if
condition|(
name|rootNode
operator|==
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
name|rootNode
operator|.
name|traverse
argument_list|(
name|edgeIterator
argument_list|,
name|this
argument_list|,
name|minValue
argument_list|,
name|maxValue
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|compare
specifier|public
name|int
name|compare
parameter_list|(
specifier|final
name|Edge
name|edge
parameter_list|,
specifier|final
name|Edge
name|addEdge
parameter_list|)
block|{
if|if
condition|(
name|edge
operator|.
name|planeBounds
operator|.
name|getMaximumX
argument_list|()
operator|<
name|addEdge
operator|.
name|planeBounds
operator|.
name|getMinimumX
argument_list|()
condition|)
block|{
return|return
literal|1
return|;
block|}
elseif|else
if|if
condition|(
name|edge
operator|.
name|planeBounds
operator|.
name|getMinimumX
argument_list|()
operator|>
name|addEdge
operator|.
name|planeBounds
operator|.
name|getMaximumX
argument_list|()
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
return|return
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|compare
specifier|public
name|int
name|compare
parameter_list|(
specifier|final
name|Edge
name|edge
parameter_list|,
specifier|final
name|double
name|minValue
parameter_list|,
specifier|final
name|double
name|maxValue
parameter_list|)
block|{
if|if
condition|(
name|edge
operator|.
name|planeBounds
operator|.
name|getMinimumX
argument_list|()
operator|>
name|maxValue
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
elseif|else
if|if
condition|(
name|edge
operator|.
name|planeBounds
operator|.
name|getMaximumX
argument_list|()
operator|<
name|minValue
condition|)
block|{
return|return
literal|1
return|;
block|}
return|return
literal|0
return|;
block|}
block|}
comment|/** Assess whether edge intersects the provided plane plus bounds.    */
DECL|class|IntersectorEdgeIterator
specifier|private
class|class
name|IntersectorEdgeIterator
implements|implements
name|EdgeIterator
block|{
DECL|field|plane
specifier|private
specifier|final
name|Plane
name|plane
decl_stmt|;
DECL|field|notablePoints
specifier|private
specifier|final
name|GeoPoint
index|[]
name|notablePoints
decl_stmt|;
DECL|field|bounds
specifier|private
specifier|final
name|Membership
index|[]
name|bounds
decl_stmt|;
DECL|method|IntersectorEdgeIterator
specifier|public
name|IntersectorEdgeIterator
parameter_list|(
specifier|final
name|Plane
name|plane
parameter_list|,
specifier|final
name|GeoPoint
index|[]
name|notablePoints
parameter_list|,
specifier|final
name|Membership
modifier|...
name|bounds
parameter_list|)
block|{
name|this
operator|.
name|plane
operator|=
name|plane
expr_stmt|;
name|this
name|notablePoints
init|=
name|notablePoints
decl_stmt|;
name|this
operator|.
name|bounds
operator|=
name|bounds
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|matches
specifier|public
name|boolean
name|matches
parameter_list|(
specifier|final
name|Edge
name|edge
parameter_list|)
block|{
return|return
operator|!
name|plane
operator|.
name|intersects
argument_list|(
name|planetModel
argument_list|,
name|edge
operator|.
name|plane
argument_list|,
name|notablePoints
argument_list|,
name|edge
operator|.
name|notablePoints
argument_list|,
name|bounds
argument_list|,
name|edge
operator|.
name|startPlane
argument_list|,
name|edge
operator|.
name|endPlane
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
comment|// MHL
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
comment|// MHL
return|return
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"GeoComplexPolygon: {planetmodel="
operator|+
name|planetModel
operator|+
literal|"}"
return|;
block|}
block|}
end_class
end_unit
