begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.spatial3d.geom
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial3d
operator|.
name|geom
package|;
end_package
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|BitSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_comment
comment|/**  * GeoComplexPolygon objects are structures designed to handle very large numbers of edges.  * They perform very well in this case compared to the alternatives, which all have O(N) evaluation  * and O(N^2) setup times.  Complex polygons have O(N) setup times and best case O(log(N))  * evaluation times.  *  * The tradeoff is that these objects perform object creation when evaluating intersects() and  * isWithin().  *  * @lucene.internal  */
end_comment
begin_class
DECL|class|GeoComplexPolygon
class|class
name|GeoComplexPolygon
extends|extends
name|GeoBasePolygon
block|{
comment|/**    * Create a complex polygon from multiple lists of points, and a single point which is known to be in or out of    * set.    *@param planetModel is the planet model.    *@param pointsList is the list of lists of edge points.  The edge points describe edges, and have an implied    *  return boundary, so that N edges require N points.  These points have furthermore been filtered so that    *  no adjacent points are identical (within the bounds of the definition used by this package).  It is assumed    *  that no edges intersect, but the structure can contain both outer rings as well as holes.    *@param testPoint is the point whose in/out of setness is known.    *@param testPointInSet is true if the test point is considered "within" the polygon.    */
DECL|method|GeoComplexPolygon
specifier|public
name|GeoComplexPolygon
parameter_list|(
specifier|final
name|PlanetModel
name|planetModel
parameter_list|,
specifier|final
name|List
argument_list|<
name|List
argument_list|<
name|GeoPoint
argument_list|>
argument_list|>
name|pointsList
parameter_list|,
specifier|final
name|GeoPoint
name|testPoint
parameter_list|,
specifier|final
name|boolean
name|testPointInSet
parameter_list|)
block|{
name|super
argument_list|(
name|planetModel
argument_list|)
expr_stmt|;
comment|// MHL
block|}
comment|/** Compute a legal point index from a possibly illegal one, that may have wrapped.    *@param index is the index.    *@return the normalized index.    */
DECL|method|legalIndex
specifier|protected
name|int
name|legalIndex
parameter_list|(
name|int
name|index
parameter_list|)
block|{
while|while
condition|(
name|index
operator|>=
name|points
operator|.
name|size
argument_list|()
condition|)
name|index
operator|-=
name|points
operator|.
name|size
argument_list|()
expr_stmt|;
while|while
condition|(
name|index
operator|<
literal|0
condition|)
block|{
name|index
operator|+=
name|points
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
return|return
name|index
return|;
block|}
annotation|@
name|Override
DECL|method|isWithin
specifier|public
name|boolean
name|isWithin
parameter_list|(
specifier|final
name|double
name|x
parameter_list|,
specifier|final
name|double
name|y
parameter_list|,
specifier|final
name|double
name|z
parameter_list|)
block|{
comment|// MHL
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|getEdgePoints
specifier|public
name|GeoPoint
index|[]
name|getEdgePoints
parameter_list|()
block|{
return|return
name|edgePoints
return|;
block|}
annotation|@
name|Override
DECL|method|intersects
specifier|public
name|boolean
name|intersects
parameter_list|(
specifier|final
name|Plane
name|p
parameter_list|,
specifier|final
name|GeoPoint
index|[]
name|notablePoints
parameter_list|,
specifier|final
name|Membership
modifier|...
name|bounds
parameter_list|)
block|{
comment|// MHL
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|getBounds
specifier|public
name|void
name|getBounds
parameter_list|(
name|Bounds
name|bounds
parameter_list|)
block|{
name|super
operator|.
name|getBounds
argument_list|(
name|bounds
argument_list|)
expr_stmt|;
comment|// MHL
block|}
annotation|@
name|Override
DECL|method|outsideDistance
specifier|protected
name|double
name|outsideDistance
parameter_list|(
specifier|final
name|DistanceStyle
name|distanceStyle
parameter_list|,
specifier|final
name|double
name|x
parameter_list|,
specifier|final
name|double
name|y
parameter_list|,
specifier|final
name|double
name|z
parameter_list|)
block|{
comment|// MHL
block|}
comment|/**    * An instance of this class describes a single edge, and includes what is necessary to reliably determine intersection    * in the context of the even/odd algorithm used.    */
DECL|class|Edge
specifier|private
specifier|static
class|class
name|Edge
block|{
DECL|field|startPoint
specifier|public
specifier|final
name|GeoPoint
name|startPoint
decl_stmt|;
DECL|field|endPoint
specifier|public
specifier|final
name|GeoPoint
name|endPoint
decl_stmt|;
DECL|field|startPlane
specifier|public
specifier|final
name|SidedPlane
name|startPlane
decl_stmt|;
DECL|field|endPlane
specifier|public
specifier|final
name|SidedPlane
name|endPlane
decl_stmt|;
DECL|field|plane
specifier|public
specifier|final
name|Plane
name|plane
decl_stmt|;
DECL|field|planeBounds
specifier|public
specifier|final
name|XYZBounds
name|planeBounds
decl_stmt|;
DECL|method|Edge
specifier|public
name|Edge
parameter_list|(
specifier|final
name|PlanetModel
name|pm
parameter_list|,
specifier|final
name|GeoPoint
name|startPoint
parameter_list|,
specifier|final
name|GeoPoint
name|endPoint
parameter_list|)
block|{
name|this
operator|.
name|startPoint
operator|=
name|startPoint
expr_stmt|;
name|this
operator|.
name|endPoint
operator|=
name|endPoint
expr_stmt|;
name|this
operator|.
name|plane
operator|=
operator|new
name|Plane
argument_list|(
name|startPoint
argument_list|,
name|endPoint
argument_list|)
expr_stmt|;
name|this
operator|.
name|startPlane
operator|=
operator|new
name|SidedPlane
argument_list|(
name|endPoint
argument_list|,
name|plane
argument_list|,
name|startPoint
argument_list|)
expr_stmt|;
name|this
operator|.
name|endPlane
operator|=
operator|new
name|SidedPlane
argument_list|(
name|startPoint
argument_list|,
name|plane
argument_list|,
name|endPoint
argument_list|)
expr_stmt|;
name|this
operator|.
name|planeBounds
operator|=
operator|new
name|XYZBounds
argument_list|()
expr_stmt|;
name|this
operator|.
name|plane
operator|.
name|recordBounds
argument_list|(
name|pm
argument_list|,
name|this
operator|.
name|planeBounds
argument_list|,
name|this
operator|.
name|startPlane
argument_list|,
name|this
operator|.
name|endPlane
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
comment|// MHL
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
comment|// MHL
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"GeoComplexPolygon: {planetmodel="
operator|+
name|planetModel
operator|+
literal|"}"
return|;
block|}
block|}
end_class
end_unit
