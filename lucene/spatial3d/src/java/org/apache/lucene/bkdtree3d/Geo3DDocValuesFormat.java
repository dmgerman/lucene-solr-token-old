begin_unit
begin_package
DECL|package|org.apache.lucene.bkdtree3d
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|bkdtree3d
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|DocValuesConsumer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|DocValuesFormat
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|DocValuesProducer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|lucene50
operator|.
name|Lucene50DocValuesFormat
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|geo3d
operator|.
name|PlanetModel
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|geo3d
operator|.
name|Vector
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SegmentReadState
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SegmentWriteState
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_comment
comment|/**  * A {@link DocValuesFormat} to efficiently index geo-spatial 3D x,y,z points  * from {@link Geo3DPointField} for fast shape intersection queries using  * ({@link PointInGeo3DShapeQuery})  *  *<p>This wraps {@link Lucene50DocValuesFormat}, but saves its own BKD tree  * structures to disk for fast query-time intersection. See<a  * href="https://www.cs.duke.edu/~pankaj/publications/papers/bkd-sstd.pdf">this paper</a>  * for details.  *  *<p>The BKD tree slices up 3D x,y,z space into smaller and  * smaller 3D rectangles, until the smallest rectangles have approximately  * between X/2 and X (X default is 1024) points in them, at which point  * such leaf cells are written as a block to disk, while the index tree  * structure records how space was sub-divided is loaded into HEAP  * at search time.  At search time, the tree is recursed based on whether  * each of left or right child overlap with the query shape, and once  * a leaf block is reached, all documents in that leaf block are collected  * if the cell is fully enclosed by the query shape, or filtered and then  * collected, if not.  *  *<p>The index is also quite compact, because docs only appear once in  * the tree (no "prefix terms").  *  *<p>In addition to the files written by {@link Lucene50DocValuesFormat}, this format writes:  *<ol>  *<li><tt>.kd3d</tt>: BKD leaf data and index</li>  *<li><tt>.kd3m</tt>: BKD metadata</li>  *</ol>  *  *<p>The disk format is experimental and free to change suddenly, and this code  * likely has new and exciting bugs!  *  * @lucene.experimental */
end_comment
begin_class
DECL|class|Geo3DDocValuesFormat
specifier|public
class|class
name|Geo3DDocValuesFormat
extends|extends
name|DocValuesFormat
block|{
DECL|field|DATA_CODEC_NAME
specifier|static
specifier|final
name|String
name|DATA_CODEC_NAME
init|=
literal|"Geo3DData"
decl_stmt|;
DECL|field|DATA_VERSION_START
specifier|static
specifier|final
name|int
name|DATA_VERSION_START
init|=
literal|0
decl_stmt|;
DECL|field|DATA_VERSION_CURRENT
specifier|static
specifier|final
name|int
name|DATA_VERSION_CURRENT
init|=
name|DATA_VERSION_START
decl_stmt|;
DECL|field|DATA_EXTENSION
specifier|static
specifier|final
name|String
name|DATA_EXTENSION
init|=
literal|"g3dd"
decl_stmt|;
DECL|field|META_CODEC_NAME
specifier|static
specifier|final
name|String
name|META_CODEC_NAME
init|=
literal|"Geo3DMeta"
decl_stmt|;
DECL|field|META_VERSION_START
specifier|static
specifier|final
name|int
name|META_VERSION_START
init|=
literal|0
decl_stmt|;
DECL|field|META_VERSION_CURRENT
specifier|static
specifier|final
name|int
name|META_VERSION_CURRENT
init|=
name|META_VERSION_START
decl_stmt|;
DECL|field|META_EXTENSION
specifier|static
specifier|final
name|String
name|META_EXTENSION
init|=
literal|"g3dm"
decl_stmt|;
DECL|field|maxPointsInLeafNode
specifier|private
specifier|final
name|int
name|maxPointsInLeafNode
decl_stmt|;
DECL|field|maxPointsSortInHeap
specifier|private
specifier|final
name|int
name|maxPointsSortInHeap
decl_stmt|;
DECL|field|delegate
specifier|private
specifier|final
name|DocValuesFormat
name|delegate
init|=
operator|new
name|Lucene50DocValuesFormat
argument_list|()
decl_stmt|;
DECL|field|planetModel
specifier|private
specifier|final
name|PlanetModel
name|planetModel
decl_stmt|;
comment|/** Default constructor */
DECL|method|Geo3DDocValuesFormat
specifier|public
name|Geo3DDocValuesFormat
parameter_list|()
block|{
name|this
argument_list|(
name|PlanetModel
operator|.
name|WGS84
argument_list|,
name|BKD3DTreeWriter
operator|.
name|DEFAULT_MAX_POINTS_IN_LEAF_NODE
argument_list|,
name|BKD3DTreeWriter
operator|.
name|DEFAULT_MAX_POINTS_SORT_IN_HEAP
argument_list|)
expr_stmt|;
block|}
comment|/** Creates this with custom configuration.    *    * @param planetModel the {@link PlanetModel} to use; this is only used when writing    * @param maxPointsInLeafNode Maximum number of points in each leaf cell.  Smaller values create a deeper tree with larger in-heap index and possibly    *    faster searching.  The default is 1024.    * @param maxPointsSortInHeap Maximum number of points where in-heap sort can be used.  When the number of points exceeds this, a (slower)    *    offline sort is used.  The default is 128 * 1024.    *    * @lucene.experimental */
DECL|method|Geo3DDocValuesFormat
specifier|public
name|Geo3DDocValuesFormat
parameter_list|(
name|PlanetModel
name|planetModel
parameter_list|,
name|int
name|maxPointsInLeafNode
parameter_list|,
name|int
name|maxPointsSortInHeap
parameter_list|)
block|{
name|super
argument_list|(
literal|"BKD3DTree"
argument_list|)
expr_stmt|;
name|BKD3DTreeWriter
operator|.
name|verifyParams
argument_list|(
name|maxPointsInLeafNode
argument_list|,
name|maxPointsSortInHeap
argument_list|)
expr_stmt|;
name|this
operator|.
name|maxPointsInLeafNode
operator|=
name|maxPointsInLeafNode
expr_stmt|;
name|this
operator|.
name|maxPointsSortInHeap
operator|=
name|maxPointsSortInHeap
expr_stmt|;
name|this
operator|.
name|planetModel
operator|=
name|planetModel
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|fieldsConsumer
specifier|public
name|DocValuesConsumer
name|fieldsConsumer
parameter_list|(
specifier|final
name|SegmentWriteState
name|state
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|Geo3DDocValuesConsumer
argument_list|(
name|planetModel
argument_list|,
name|delegate
operator|.
name|fieldsConsumer
argument_list|(
name|state
argument_list|)
argument_list|,
name|state
argument_list|,
name|maxPointsInLeafNode
argument_list|,
name|maxPointsSortInHeap
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|fieldsProducer
specifier|public
name|DocValuesProducer
name|fieldsProducer
parameter_list|(
name|SegmentReadState
name|state
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|Geo3DDocValuesProducer
argument_list|(
name|delegate
operator|.
name|fieldsProducer
argument_list|(
name|state
argument_list|)
argument_list|,
name|state
argument_list|)
return|;
block|}
comment|/** Clips the incoming value to the allowed min/max range before encoding, instead of throwing an exception. */
DECL|method|encodeValueLenient
specifier|static
name|int
name|encodeValueLenient
parameter_list|(
name|double
name|planetMax
parameter_list|,
name|double
name|x
parameter_list|)
block|{
if|if
condition|(
name|x
operator|>
name|planetMax
condition|)
block|{
name|x
operator|=
name|planetMax
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|x
operator|<
operator|-
name|planetMax
condition|)
block|{
name|x
operator|=
operator|-
name|planetMax
expr_stmt|;
block|}
return|return
name|encodeValue
argument_list|(
name|planetMax
argument_list|,
name|x
argument_list|)
return|;
block|}
DECL|method|encodeValue
specifier|static
name|int
name|encodeValue
parameter_list|(
name|double
name|planetMax
parameter_list|,
name|double
name|x
parameter_list|)
block|{
if|if
condition|(
name|x
operator|>
name|planetMax
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"value="
operator|+
name|x
operator|+
literal|" is out-of-bounds (greater than planetMax="
operator|+
name|planetMax
operator|+
literal|")"
argument_list|)
throw|;
block|}
if|if
condition|(
name|x
operator|<
operator|-
name|planetMax
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"value="
operator|+
name|x
operator|+
literal|" is out-of-bounds (less than than -planetMax="
operator|+
operator|-
name|planetMax
operator|+
literal|")"
argument_list|)
throw|;
block|}
name|long
name|y
init|=
name|Math
operator|.
name|round
argument_list|(
name|x
operator|*
operator|(
name|Integer
operator|.
name|MAX_VALUE
operator|/
name|planetMax
operator|)
argument_list|)
decl_stmt|;
assert|assert
name|y
operator|>=
name|Integer
operator|.
name|MIN_VALUE
assert|;
assert|assert
name|y
operator|<=
name|Integer
operator|.
name|MAX_VALUE
assert|;
return|return
operator|(
name|int
operator|)
name|y
return|;
block|}
comment|/** Center decode */
DECL|method|decodeValueCenter
specifier|static
name|double
name|decodeValueCenter
parameter_list|(
name|double
name|planetMax
parameter_list|,
name|int
name|x
parameter_list|)
block|{
return|return
name|x
operator|*
operator|(
name|planetMax
operator|/
name|Integer
operator|.
name|MAX_VALUE
operator|)
return|;
block|}
comment|/** More negative decode, at bottom of cell */
DECL|method|decodeValueMin
specifier|static
name|double
name|decodeValueMin
parameter_list|(
name|double
name|planetMax
parameter_list|,
name|int
name|x
parameter_list|)
block|{
return|return
operator|(
operator|(
operator|(
name|double
operator|)
name|x
operator|)
operator|-
literal|0.5
operator|)
operator|*
operator|(
name|planetMax
operator|/
name|Integer
operator|.
name|MAX_VALUE
operator|)
return|;
block|}
comment|/** More positive decode, at top of cell  */
DECL|method|decodeValueMax
specifier|static
name|double
name|decodeValueMax
parameter_list|(
name|double
name|planetMax
parameter_list|,
name|int
name|x
parameter_list|)
block|{
return|return
operator|(
operator|(
operator|(
name|double
operator|)
name|x
operator|)
operator|+
literal|0.5
operator|)
operator|*
operator|(
name|planetMax
operator|/
name|Integer
operator|.
name|MAX_VALUE
operator|)
return|;
block|}
DECL|method|readInt
specifier|static
name|int
name|readInt
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|,
name|int
name|offset
parameter_list|)
block|{
return|return
operator|(
operator|(
name|bytes
index|[
name|offset
index|]
operator|&
literal|0xFF
operator|)
operator|<<
literal|24
operator|)
operator||
operator|(
operator|(
name|bytes
index|[
name|offset
operator|+
literal|1
index|]
operator|&
literal|0xFF
operator|)
operator|<<
literal|16
operator|)
operator||
operator|(
operator|(
name|bytes
index|[
name|offset
operator|+
literal|2
index|]
operator|&
literal|0xFF
operator|)
operator|<<
literal|8
operator|)
operator||
operator|(
name|bytes
index|[
name|offset
operator|+
literal|3
index|]
operator|&
literal|0xFF
operator|)
return|;
block|}
DECL|method|writeInt
specifier|static
name|void
name|writeInt
parameter_list|(
name|int
name|value
parameter_list|,
name|byte
index|[]
name|bytes
parameter_list|,
name|int
name|offset
parameter_list|)
block|{
name|bytes
index|[
name|offset
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
operator|(
name|value
operator|>>
literal|24
operator|)
operator|&
literal|0xff
argument_list|)
expr_stmt|;
name|bytes
index|[
name|offset
operator|+
literal|1
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
operator|(
name|value
operator|>>
literal|16
operator|)
operator|&
literal|0xff
argument_list|)
expr_stmt|;
name|bytes
index|[
name|offset
operator|+
literal|2
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
operator|(
name|value
operator|>>
literal|8
operator|)
operator|&
literal|0xff
argument_list|)
expr_stmt|;
name|bytes
index|[
name|offset
operator|+
literal|3
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|value
operator|&
literal|0xff
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
