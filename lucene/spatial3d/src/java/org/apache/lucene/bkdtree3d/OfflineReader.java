begin_unit
begin_package
DECL|package|org.apache.lucene.bkdtree3d
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|bkdtree3d
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IOContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexInput
import|;
end_import
begin_class
DECL|class|OfflineReader
specifier|final
class|class
name|OfflineReader
implements|implements
name|Reader
block|{
DECL|field|in
specifier|final
name|IndexInput
name|in
decl_stmt|;
DECL|field|countLeft
name|long
name|countLeft
decl_stmt|;
DECL|field|x
specifier|private
name|int
name|x
decl_stmt|;
DECL|field|y
specifier|private
name|int
name|y
decl_stmt|;
DECL|field|z
specifier|private
name|int
name|z
decl_stmt|;
DECL|field|ord
specifier|private
name|long
name|ord
decl_stmt|;
DECL|field|docID
specifier|private
name|int
name|docID
decl_stmt|;
DECL|method|OfflineReader
name|OfflineReader
parameter_list|(
name|Directory
name|tempDir
parameter_list|,
name|String
name|tempFileName
parameter_list|,
name|long
name|start
parameter_list|,
name|long
name|count
parameter_list|)
throws|throws
name|IOException
block|{
name|in
operator|=
name|tempDir
operator|.
name|openInput
argument_list|(
name|tempFileName
argument_list|,
name|IOContext
operator|.
name|READONCE
argument_list|)
expr_stmt|;
name|in
operator|.
name|seek
argument_list|(
name|start
operator|*
name|BKD3DTreeWriter
operator|.
name|BYTES_PER_DOC
argument_list|)
expr_stmt|;
name|this
operator|.
name|countLeft
operator|=
name|count
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|next
specifier|public
name|boolean
name|next
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|countLeft
operator|==
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
name|countLeft
operator|--
expr_stmt|;
name|x
operator|=
name|in
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|y
operator|=
name|in
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|z
operator|=
name|in
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|ord
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|docID
operator|=
name|in
operator|.
name|readInt
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|x
specifier|public
name|int
name|x
parameter_list|()
block|{
return|return
name|x
return|;
block|}
annotation|@
name|Override
DECL|method|y
specifier|public
name|int
name|y
parameter_list|()
block|{
return|return
name|y
return|;
block|}
annotation|@
name|Override
DECL|method|z
specifier|public
name|int
name|z
parameter_list|()
block|{
return|return
name|z
return|;
block|}
annotation|@
name|Override
DECL|method|ord
specifier|public
name|long
name|ord
parameter_list|()
block|{
return|return
name|ord
return|;
block|}
annotation|@
name|Override
DECL|method|docID
specifier|public
name|int
name|docID
parameter_list|()
block|{
return|return
name|docID
return|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class
end_unit
