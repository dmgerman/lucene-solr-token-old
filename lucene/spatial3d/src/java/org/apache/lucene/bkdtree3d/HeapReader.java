begin_unit
begin_package
DECL|package|org.apache.lucene.bkdtree3d
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|bkdtree3d
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_class
DECL|class|HeapReader
specifier|final
class|class
name|HeapReader
implements|implements
name|Reader
block|{
DECL|field|curRead
specifier|private
name|int
name|curRead
decl_stmt|;
DECL|field|xs
specifier|final
name|int
index|[]
name|xs
decl_stmt|;
DECL|field|ys
specifier|final
name|int
index|[]
name|ys
decl_stmt|;
DECL|field|zs
specifier|final
name|int
index|[]
name|zs
decl_stmt|;
DECL|field|ords
specifier|final
name|long
index|[]
name|ords
decl_stmt|;
DECL|field|docIDs
specifier|final
name|int
index|[]
name|docIDs
decl_stmt|;
DECL|field|end
specifier|final
name|int
name|end
decl_stmt|;
DECL|method|HeapReader
name|HeapReader
parameter_list|(
name|int
index|[]
name|xs
parameter_list|,
name|int
index|[]
name|ys
parameter_list|,
name|int
index|[]
name|zs
parameter_list|,
name|long
index|[]
name|ords
parameter_list|,
name|int
index|[]
name|docIDs
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
block|{
name|this
operator|.
name|xs
operator|=
name|xs
expr_stmt|;
name|this
operator|.
name|ys
operator|=
name|ys
expr_stmt|;
name|this
operator|.
name|zs
operator|=
name|zs
expr_stmt|;
name|this
operator|.
name|ords
operator|=
name|ords
expr_stmt|;
name|this
operator|.
name|docIDs
operator|=
name|docIDs
expr_stmt|;
name|curRead
operator|=
name|start
operator|-
literal|1
expr_stmt|;
name|this
operator|.
name|end
operator|=
name|end
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|next
specifier|public
name|boolean
name|next
parameter_list|()
block|{
name|curRead
operator|++
expr_stmt|;
return|return
name|curRead
operator|<
name|end
return|;
block|}
annotation|@
name|Override
DECL|method|x
specifier|public
name|int
name|x
parameter_list|()
block|{
return|return
name|xs
index|[
name|curRead
index|]
return|;
block|}
annotation|@
name|Override
DECL|method|y
specifier|public
name|int
name|y
parameter_list|()
block|{
return|return
name|ys
index|[
name|curRead
index|]
return|;
block|}
annotation|@
name|Override
DECL|method|z
specifier|public
name|int
name|z
parameter_list|()
block|{
return|return
name|zs
index|[
name|curRead
index|]
return|;
block|}
annotation|@
name|Override
DECL|method|docID
specifier|public
name|int
name|docID
parameter_list|()
block|{
return|return
name|docIDs
index|[
name|curRead
index|]
return|;
block|}
annotation|@
name|Override
DECL|method|ord
specifier|public
name|long
name|ord
parameter_list|()
block|{
return|return
name|ords
index|[
name|curRead
index|]
return|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
block|{   }
block|}
end_class
end_unit
