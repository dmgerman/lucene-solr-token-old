begin_unit
begin_package
DECL|package|org.apache.lucene.bkdtree3d
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|bkdtree3d
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|ByteArrayDataOutput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IOContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexOutput
import|;
end_import
begin_class
DECL|class|OfflineWriter
specifier|final
class|class
name|OfflineWriter
implements|implements
name|Writer
block|{
DECL|field|tempDir
specifier|final
name|Directory
name|tempDir
decl_stmt|;
DECL|field|out
specifier|final
name|IndexOutput
name|out
decl_stmt|;
DECL|field|scratchBytes
specifier|final
name|byte
index|[]
name|scratchBytes
init|=
operator|new
name|byte
index|[
name|BKD3DTreeWriter
operator|.
name|BYTES_PER_DOC
index|]
decl_stmt|;
DECL|field|scratchBytesOutput
specifier|final
name|ByteArrayDataOutput
name|scratchBytesOutput
init|=
operator|new
name|ByteArrayDataOutput
argument_list|(
name|scratchBytes
argument_list|)
decl_stmt|;
DECL|field|count
specifier|final
name|long
name|count
decl_stmt|;
DECL|field|countWritten
specifier|private
name|long
name|countWritten
decl_stmt|;
DECL|field|closed
specifier|private
name|boolean
name|closed
decl_stmt|;
DECL|method|OfflineWriter
specifier|public
name|OfflineWriter
parameter_list|(
name|Directory
name|tempDir
parameter_list|,
name|String
name|tempFileNamePrefix
parameter_list|,
name|long
name|count
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|tempDir
operator|=
name|tempDir
expr_stmt|;
name|out
operator|=
name|tempDir
operator|.
name|createTempOutput
argument_list|(
name|tempFileNamePrefix
argument_list|,
literal|"bkd3d"
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
name|this
operator|.
name|count
operator|=
name|count
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|append
specifier|public
name|void
name|append
parameter_list|(
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|,
name|int
name|z
parameter_list|,
name|long
name|ord
parameter_list|,
name|int
name|docID
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeInt
argument_list|(
name|x
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|y
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|z
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
name|ord
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|docID
argument_list|)
expr_stmt|;
name|countWritten
operator|++
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getReader
specifier|public
name|Reader
name|getReader
parameter_list|(
name|long
name|start
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|closed
assert|;
return|return
operator|new
name|OfflineReader
argument_list|(
name|tempDir
argument_list|,
name|out
operator|.
name|getName
argument_list|()
argument_list|,
name|start
argument_list|,
name|count
operator|-
name|start
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|closed
operator|=
literal|true
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|count
operator|!=
name|countWritten
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"wrote "
operator|+
name|countWritten
operator|+
literal|" values, but expected "
operator|+
name|count
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|destroy
specifier|public
name|void
name|destroy
parameter_list|()
throws|throws
name|IOException
block|{
name|tempDir
operator|.
name|deleteFile
argument_list|(
name|out
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"OfflineWriter(count="
operator|+
name|count
operator|+
literal|" tempFileName="
operator|+
name|out
operator|.
name|getName
argument_list|()
operator|+
literal|")"
return|;
block|}
block|}
end_class
end_unit
