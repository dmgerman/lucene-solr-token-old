begin_unit
begin_package
DECL|package|org.apache.lucene.bkdtree3d
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|bkdtree3d
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_class
DECL|class|HeapWriter
specifier|final
class|class
name|HeapWriter
implements|implements
name|Writer
block|{
DECL|field|xs
specifier|final
name|int
index|[]
name|xs
decl_stmt|;
DECL|field|ys
specifier|final
name|int
index|[]
name|ys
decl_stmt|;
DECL|field|zs
specifier|final
name|int
index|[]
name|zs
decl_stmt|;
DECL|field|docIDs
specifier|final
name|int
index|[]
name|docIDs
decl_stmt|;
DECL|field|ords
specifier|final
name|long
index|[]
name|ords
decl_stmt|;
DECL|field|nextWrite
specifier|private
name|int
name|nextWrite
decl_stmt|;
DECL|field|closed
specifier|private
name|boolean
name|closed
decl_stmt|;
DECL|method|HeapWriter
specifier|public
name|HeapWriter
parameter_list|(
name|int
name|count
parameter_list|)
block|{
name|xs
operator|=
operator|new
name|int
index|[
name|count
index|]
expr_stmt|;
name|ys
operator|=
operator|new
name|int
index|[
name|count
index|]
expr_stmt|;
name|zs
operator|=
operator|new
name|int
index|[
name|count
index|]
expr_stmt|;
name|docIDs
operator|=
operator|new
name|int
index|[
name|count
index|]
expr_stmt|;
name|ords
operator|=
operator|new
name|long
index|[
name|count
index|]
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|append
specifier|public
name|void
name|append
parameter_list|(
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|,
name|int
name|z
parameter_list|,
name|long
name|ord
parameter_list|,
name|int
name|docID
parameter_list|)
block|{
name|xs
index|[
name|nextWrite
index|]
operator|=
name|x
expr_stmt|;
name|ys
index|[
name|nextWrite
index|]
operator|=
name|y
expr_stmt|;
name|zs
index|[
name|nextWrite
index|]
operator|=
name|z
expr_stmt|;
name|ords
index|[
name|nextWrite
index|]
operator|=
name|ord
expr_stmt|;
name|docIDs
index|[
name|nextWrite
index|]
operator|=
name|docID
expr_stmt|;
name|nextWrite
operator|++
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getReader
specifier|public
name|Reader
name|getReader
parameter_list|(
name|long
name|start
parameter_list|)
block|{
assert|assert
name|closed
assert|;
return|return
operator|new
name|HeapReader
argument_list|(
name|xs
argument_list|,
name|ys
argument_list|,
name|zs
argument_list|,
name|ords
argument_list|,
name|docIDs
argument_list|,
operator|(
name|int
operator|)
name|start
argument_list|,
name|xs
operator|.
name|length
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
block|{
name|closed
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|nextWrite
operator|!=
name|xs
operator|.
name|length
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"only wrote "
operator|+
name|nextWrite
operator|+
literal|" values, but expected "
operator|+
name|xs
operator|.
name|length
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|destroy
specifier|public
name|void
name|destroy
parameter_list|()
block|{   }
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"HeapWriter(count="
operator|+
name|xs
operator|.
name|length
operator|+
literal|")"
return|;
block|}
block|}
end_class
end_unit
