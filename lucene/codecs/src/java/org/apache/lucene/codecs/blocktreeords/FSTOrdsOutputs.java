begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.codecs.blocktreeords
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|blocktreeords
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|DataInput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|DataOutput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|RamUsageEstimator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|StringHelper
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|fst
operator|.
name|Outputs
import|;
end_import
begin_comment
comment|/** A custom FST outputs implementation that stores block data  *  (BytesRef), long ordStart, long numTerms. */
end_comment
begin_class
DECL|class|FSTOrdsOutputs
specifier|final
class|class
name|FSTOrdsOutputs
extends|extends
name|Outputs
argument_list|<
name|FSTOrdsOutputs
operator|.
name|Output
argument_list|>
block|{
DECL|field|NO_OUTPUT
specifier|public
specifier|static
specifier|final
name|Output
name|NO_OUTPUT
init|=
operator|new
name|Output
argument_list|(
operator|new
name|BytesRef
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
DECL|field|NO_BYTES
specifier|private
specifier|static
specifier|final
name|BytesRef
name|NO_BYTES
init|=
operator|new
name|BytesRef
argument_list|()
decl_stmt|;
DECL|class|Output
specifier|public
specifier|static
specifier|final
class|class
name|Output
block|{
DECL|field|bytes
specifier|public
specifier|final
name|BytesRef
name|bytes
decl_stmt|;
comment|// Inclusive:
DECL|field|startOrd
specifier|public
specifier|final
name|long
name|startOrd
decl_stmt|;
comment|// Inclusive:
DECL|field|endOrd
specifier|public
specifier|final
name|long
name|endOrd
decl_stmt|;
DECL|method|Output
specifier|public
name|Output
parameter_list|(
name|BytesRef
name|bytes
parameter_list|,
name|long
name|startOrd
parameter_list|,
name|long
name|endOrd
parameter_list|)
block|{
assert|assert
name|startOrd
operator|>=
literal|0
operator|:
literal|"startOrd="
operator|+
name|startOrd
assert|;
assert|assert
name|endOrd
operator|>=
literal|0
operator|:
literal|"endOrd="
operator|+
name|endOrd
assert|;
name|this
operator|.
name|bytes
operator|=
name|bytes
expr_stmt|;
name|this
operator|.
name|startOrd
operator|=
name|startOrd
expr_stmt|;
name|this
operator|.
name|endOrd
operator|=
name|endOrd
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|long
name|x
decl_stmt|;
if|if
condition|(
name|endOrd
operator|>
name|Long
operator|.
name|MAX_VALUE
operator|/
literal|2
condition|)
block|{
name|x
operator|=
name|Long
operator|.
name|MAX_VALUE
operator|-
name|endOrd
expr_stmt|;
block|}
else|else
block|{
assert|assert
name|endOrd
operator|>=
literal|0
assert|;
name|x
operator|=
operator|-
name|endOrd
expr_stmt|;
block|}
return|return
name|startOrd
operator|+
literal|" to "
operator|+
name|x
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|hash
init|=
name|bytes
operator|.
name|hashCode
argument_list|()
decl_stmt|;
name|hash
operator|=
call|(
name|int
call|)
argument_list|(
name|hash
operator|^
name|startOrd
argument_list|)
expr_stmt|;
name|hash
operator|=
call|(
name|int
call|)
argument_list|(
name|hash
operator|^
name|endOrd
argument_list|)
expr_stmt|;
return|return
name|hash
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|_other
parameter_list|)
block|{
if|if
condition|(
name|_other
operator|instanceof
name|Output
condition|)
block|{
name|Output
name|other
init|=
operator|(
name|Output
operator|)
name|_other
decl_stmt|;
return|return
name|bytes
operator|.
name|equals
argument_list|(
name|other
operator|.
name|bytes
argument_list|)
operator|&&
name|startOrd
operator|==
name|other
operator|.
name|startOrd
operator|&&
name|endOrd
operator|==
name|other
operator|.
name|endOrd
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|common
specifier|public
name|Output
name|common
parameter_list|(
name|Output
name|output1
parameter_list|,
name|Output
name|output2
parameter_list|)
block|{
name|BytesRef
name|bytes1
init|=
name|output1
operator|.
name|bytes
decl_stmt|;
name|BytesRef
name|bytes2
init|=
name|output2
operator|.
name|bytes
decl_stmt|;
assert|assert
name|bytes1
operator|!=
literal|null
assert|;
assert|assert
name|bytes2
operator|!=
literal|null
assert|;
name|int
name|pos1
init|=
name|bytes1
operator|.
name|offset
decl_stmt|;
name|int
name|pos2
init|=
name|bytes2
operator|.
name|offset
decl_stmt|;
name|int
name|stopAt1
init|=
name|pos1
operator|+
name|Math
operator|.
name|min
argument_list|(
name|bytes1
operator|.
name|length
argument_list|,
name|bytes2
operator|.
name|length
argument_list|)
decl_stmt|;
while|while
condition|(
name|pos1
operator|<
name|stopAt1
condition|)
block|{
if|if
condition|(
name|bytes1
operator|.
name|bytes
index|[
name|pos1
index|]
operator|!=
name|bytes2
operator|.
name|bytes
index|[
name|pos2
index|]
condition|)
block|{
break|break;
block|}
name|pos1
operator|++
expr_stmt|;
name|pos2
operator|++
expr_stmt|;
block|}
name|BytesRef
name|prefixBytes
decl_stmt|;
if|if
condition|(
name|pos1
operator|==
name|bytes1
operator|.
name|offset
condition|)
block|{
comment|// no common prefix
name|prefixBytes
operator|=
name|NO_BYTES
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|pos1
operator|==
name|bytes1
operator|.
name|offset
operator|+
name|bytes1
operator|.
name|length
condition|)
block|{
comment|// bytes1 is a prefix of bytes2
name|prefixBytes
operator|=
name|bytes1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|pos2
operator|==
name|bytes2
operator|.
name|offset
operator|+
name|bytes2
operator|.
name|length
condition|)
block|{
comment|// bytes2 is a prefix of bytes1
name|prefixBytes
operator|=
name|bytes2
expr_stmt|;
block|}
else|else
block|{
name|prefixBytes
operator|=
operator|new
name|BytesRef
argument_list|(
name|bytes1
operator|.
name|bytes
argument_list|,
name|bytes1
operator|.
name|offset
argument_list|,
name|pos1
operator|-
name|bytes1
operator|.
name|offset
argument_list|)
expr_stmt|;
block|}
return|return
name|newOutput
argument_list|(
name|prefixBytes
argument_list|,
name|Math
operator|.
name|min
argument_list|(
name|output1
operator|.
name|startOrd
argument_list|,
name|output2
operator|.
name|startOrd
argument_list|)
argument_list|,
name|Math
operator|.
name|min
argument_list|(
name|output1
operator|.
name|endOrd
argument_list|,
name|output2
operator|.
name|endOrd
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|subtract
specifier|public
name|Output
name|subtract
parameter_list|(
name|Output
name|output
parameter_list|,
name|Output
name|inc
parameter_list|)
block|{
assert|assert
name|output
operator|!=
literal|null
assert|;
assert|assert
name|inc
operator|!=
literal|null
assert|;
if|if
condition|(
name|inc
operator|==
name|NO_OUTPUT
condition|)
block|{
comment|// no prefix removed
return|return
name|output
return|;
block|}
else|else
block|{
assert|assert
name|StringHelper
operator|.
name|startsWith
argument_list|(
name|output
operator|.
name|bytes
argument_list|,
name|inc
operator|.
name|bytes
argument_list|)
assert|;
name|BytesRef
name|suffix
decl_stmt|;
if|if
condition|(
name|inc
operator|.
name|bytes
operator|.
name|length
operator|==
name|output
operator|.
name|bytes
operator|.
name|length
condition|)
block|{
comment|// entire output removed
name|suffix
operator|=
name|NO_BYTES
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|inc
operator|.
name|bytes
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|suffix
operator|=
name|output
operator|.
name|bytes
expr_stmt|;
block|}
else|else
block|{
assert|assert
name|inc
operator|.
name|bytes
operator|.
name|length
operator|<
name|output
operator|.
name|bytes
operator|.
name|length
operator|:
literal|"inc.length="
operator|+
name|inc
operator|.
name|bytes
operator|.
name|length
operator|+
literal|" vs output.length="
operator|+
name|output
operator|.
name|bytes
operator|.
name|length
assert|;
assert|assert
name|inc
operator|.
name|bytes
operator|.
name|length
operator|>
literal|0
assert|;
name|suffix
operator|=
operator|new
name|BytesRef
argument_list|(
name|output
operator|.
name|bytes
operator|.
name|bytes
argument_list|,
name|output
operator|.
name|bytes
operator|.
name|offset
operator|+
name|inc
operator|.
name|bytes
operator|.
name|length
argument_list|,
name|output
operator|.
name|bytes
operator|.
name|length
operator|-
name|inc
operator|.
name|bytes
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
assert|assert
name|output
operator|.
name|startOrd
operator|>=
name|inc
operator|.
name|startOrd
assert|;
assert|assert
name|output
operator|.
name|endOrd
operator|>=
name|inc
operator|.
name|endOrd
assert|;
return|return
name|newOutput
argument_list|(
name|suffix
argument_list|,
name|output
operator|.
name|startOrd
operator|-
name|inc
operator|.
name|startOrd
argument_list|,
name|output
operator|.
name|endOrd
operator|-
name|inc
operator|.
name|endOrd
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|add
specifier|public
name|Output
name|add
parameter_list|(
name|Output
name|prefix
parameter_list|,
name|Output
name|output
parameter_list|)
block|{
assert|assert
name|prefix
operator|!=
literal|null
assert|;
assert|assert
name|output
operator|!=
literal|null
assert|;
if|if
condition|(
name|prefix
operator|==
name|NO_OUTPUT
condition|)
block|{
return|return
name|output
return|;
block|}
elseif|else
if|if
condition|(
name|output
operator|==
name|NO_OUTPUT
condition|)
block|{
return|return
name|prefix
return|;
block|}
else|else
block|{
name|BytesRef
name|bytes
init|=
operator|new
name|BytesRef
argument_list|(
name|prefix
operator|.
name|bytes
operator|.
name|length
operator|+
name|output
operator|.
name|bytes
operator|.
name|length
argument_list|)
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|prefix
operator|.
name|bytes
operator|.
name|bytes
argument_list|,
name|prefix
operator|.
name|bytes
operator|.
name|offset
argument_list|,
name|bytes
operator|.
name|bytes
argument_list|,
literal|0
argument_list|,
name|prefix
operator|.
name|bytes
operator|.
name|length
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|output
operator|.
name|bytes
operator|.
name|bytes
argument_list|,
name|output
operator|.
name|bytes
operator|.
name|offset
argument_list|,
name|bytes
operator|.
name|bytes
argument_list|,
name|prefix
operator|.
name|bytes
operator|.
name|length
argument_list|,
name|output
operator|.
name|bytes
operator|.
name|length
argument_list|)
expr_stmt|;
name|bytes
operator|.
name|length
operator|=
name|prefix
operator|.
name|bytes
operator|.
name|length
operator|+
name|output
operator|.
name|bytes
operator|.
name|length
expr_stmt|;
return|return
name|newOutput
argument_list|(
name|bytes
argument_list|,
name|prefix
operator|.
name|startOrd
operator|+
name|output
operator|.
name|startOrd
argument_list|,
name|prefix
operator|.
name|endOrd
operator|+
name|output
operator|.
name|endOrd
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|write
specifier|public
name|void
name|write
parameter_list|(
name|Output
name|prefix
parameter_list|,
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeVInt
argument_list|(
name|prefix
operator|.
name|bytes
operator|.
name|length
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBytes
argument_list|(
name|prefix
operator|.
name|bytes
operator|.
name|bytes
argument_list|,
name|prefix
operator|.
name|bytes
operator|.
name|offset
argument_list|,
name|prefix
operator|.
name|bytes
operator|.
name|length
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVLong
argument_list|(
name|prefix
operator|.
name|startOrd
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVLong
argument_list|(
name|prefix
operator|.
name|endOrd
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|read
specifier|public
name|Output
name|read
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|len
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
name|BytesRef
name|bytes
decl_stmt|;
if|if
condition|(
name|len
operator|==
literal|0
condition|)
block|{
name|bytes
operator|=
name|NO_BYTES
expr_stmt|;
block|}
else|else
block|{
name|bytes
operator|=
operator|new
name|BytesRef
argument_list|(
name|len
argument_list|)
expr_stmt|;
name|in
operator|.
name|readBytes
argument_list|(
name|bytes
operator|.
name|bytes
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|bytes
operator|.
name|length
operator|=
name|len
expr_stmt|;
block|}
name|long
name|startOrd
init|=
name|in
operator|.
name|readVLong
argument_list|()
decl_stmt|;
name|long
name|endOrd
init|=
name|in
operator|.
name|readVLong
argument_list|()
decl_stmt|;
name|Output
name|result
init|=
name|newOutput
argument_list|(
name|bytes
argument_list|,
name|startOrd
argument_list|,
name|endOrd
argument_list|)
decl_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|skipOutput
specifier|public
name|void
name|skipOutput
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|len
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
name|in
operator|.
name|skipBytes
argument_list|(
name|len
argument_list|)
expr_stmt|;
name|in
operator|.
name|readVLong
argument_list|()
expr_stmt|;
name|in
operator|.
name|readVLong
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|skipFinalOutput
specifier|public
name|void
name|skipFinalOutput
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|skipOutput
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getNoOutput
specifier|public
name|Output
name|getNoOutput
parameter_list|()
block|{
return|return
name|NO_OUTPUT
return|;
block|}
annotation|@
name|Override
DECL|method|outputToString
specifier|public
name|String
name|outputToString
parameter_list|(
name|Output
name|output
parameter_list|)
block|{
if|if
condition|(
operator|(
name|output
operator|.
name|endOrd
operator|==
literal|0
operator|||
name|output
operator|.
name|endOrd
operator|==
name|Long
operator|.
name|MAX_VALUE
operator|)
operator|&&
name|output
operator|.
name|startOrd
operator|==
literal|0
condition|)
block|{
return|return
literal|""
return|;
block|}
else|else
block|{
return|return
name|output
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
DECL|method|newOutput
specifier|public
name|Output
name|newOutput
parameter_list|(
name|BytesRef
name|bytes
parameter_list|,
name|long
name|startOrd
parameter_list|,
name|long
name|endOrd
parameter_list|)
block|{
if|if
condition|(
name|bytes
operator|.
name|length
operator|==
literal|0
operator|&&
name|startOrd
operator|==
literal|0
operator|&&
name|endOrd
operator|==
literal|0
condition|)
block|{
return|return
name|NO_OUTPUT
return|;
block|}
else|else
block|{
return|return
operator|new
name|Output
argument_list|(
name|bytes
argument_list|,
name|startOrd
argument_list|,
name|endOrd
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|ramBytesUsed
specifier|public
name|long
name|ramBytesUsed
parameter_list|(
name|Output
name|output
parameter_list|)
block|{
return|return
literal|2
operator|*
name|RamUsageEstimator
operator|.
name|NUM_BYTES_OBJECT_HEADER
operator|+
literal|2
operator|*
name|RamUsageEstimator
operator|.
name|NUM_BYTES_LONG
operator|+
literal|2
operator|*
name|RamUsageEstimator
operator|.
name|NUM_BYTES_OBJECT_REF
operator|+
name|RamUsageEstimator
operator|.
name|NUM_BYTES_ARRAY_HEADER
operator|+
literal|2
operator|*
name|RamUsageEstimator
operator|.
name|NUM_BYTES_INT
operator|+
name|output
operator|.
name|bytes
operator|.
name|length
return|;
block|}
block|}
end_class
end_unit
