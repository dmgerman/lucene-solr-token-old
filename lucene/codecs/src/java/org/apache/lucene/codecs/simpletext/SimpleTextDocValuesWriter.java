begin_unit
begin_package
DECL|package|org.apache.lucene.codecs.simpletext
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|simpletext
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigInteger
import|;
end_import
begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DecimalFormat
import|;
end_import
begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DecimalFormatSymbols
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|DocValuesConsumer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|FieldInfo
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexFileNames
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SegmentWriteState
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|FieldInfo
operator|.
name|DocValuesType
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexOutput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import
begin_class
DECL|class|SimpleTextDocValuesWriter
class|class
name|SimpleTextDocValuesWriter
extends|extends
name|DocValuesConsumer
block|{
DECL|field|END
specifier|final
specifier|static
name|BytesRef
name|END
init|=
operator|new
name|BytesRef
argument_list|(
literal|"END"
argument_list|)
decl_stmt|;
DECL|field|FIELD
specifier|final
specifier|static
name|BytesRef
name|FIELD
init|=
operator|new
name|BytesRef
argument_list|(
literal|"field "
argument_list|)
decl_stmt|;
DECL|field|TYPE
specifier|final
specifier|static
name|BytesRef
name|TYPE
init|=
operator|new
name|BytesRef
argument_list|(
literal|"  type "
argument_list|)
decl_stmt|;
comment|// used for numerics
DECL|field|MINVALUE
specifier|final
specifier|static
name|BytesRef
name|MINVALUE
init|=
operator|new
name|BytesRef
argument_list|(
literal|"  minvalue "
argument_list|)
decl_stmt|;
DECL|field|PATTERN
specifier|final
specifier|static
name|BytesRef
name|PATTERN
init|=
operator|new
name|BytesRef
argument_list|(
literal|"  pattern "
argument_list|)
decl_stmt|;
comment|// used for bytes
DECL|field|LENGTH
specifier|final
specifier|static
name|BytesRef
name|LENGTH
init|=
operator|new
name|BytesRef
argument_list|(
literal|"length "
argument_list|)
decl_stmt|;
DECL|field|MAXLENGTH
specifier|final
specifier|static
name|BytesRef
name|MAXLENGTH
init|=
operator|new
name|BytesRef
argument_list|(
literal|"  maxlength "
argument_list|)
decl_stmt|;
comment|// used for sorted bytes
DECL|field|NUMVALUES
specifier|final
specifier|static
name|BytesRef
name|NUMVALUES
init|=
operator|new
name|BytesRef
argument_list|(
literal|"  numvalues "
argument_list|)
decl_stmt|;
DECL|field|ORDPATTERN
specifier|final
specifier|static
name|BytesRef
name|ORDPATTERN
init|=
operator|new
name|BytesRef
argument_list|(
literal|"  ordpattern "
argument_list|)
decl_stmt|;
DECL|field|data
name|IndexOutput
name|data
decl_stmt|;
DECL|field|scratch
specifier|final
name|BytesRef
name|scratch
init|=
operator|new
name|BytesRef
argument_list|()
decl_stmt|;
DECL|field|numDocs
specifier|final
name|int
name|numDocs
decl_stmt|;
DECL|field|fieldsSeen
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|fieldsSeen
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
comment|// for asserting
DECL|method|SimpleTextDocValuesWriter
specifier|public
name|SimpleTextDocValuesWriter
parameter_list|(
name|SegmentWriteState
name|state
parameter_list|,
name|String
name|ext
parameter_list|)
throws|throws
name|IOException
block|{
comment|// System.out.println("WRITE: " + IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, ext) + " " + state.segmentInfo.getDocCount() + " docs");
name|data
operator|=
name|state
operator|.
name|directory
operator|.
name|createOutput
argument_list|(
name|IndexFileNames
operator|.
name|segmentFileName
argument_list|(
name|state
operator|.
name|segmentInfo
operator|.
name|name
argument_list|,
name|state
operator|.
name|segmentSuffix
argument_list|,
name|ext
argument_list|)
argument_list|,
name|state
operator|.
name|context
argument_list|)
expr_stmt|;
name|numDocs
operator|=
name|state
operator|.
name|segmentInfo
operator|.
name|getDocCount
argument_list|()
expr_stmt|;
block|}
comment|// for asserting
DECL|method|fieldSeen
specifier|private
name|boolean
name|fieldSeen
parameter_list|(
name|String
name|field
parameter_list|)
block|{
assert|assert
operator|!
name|fieldsSeen
operator|.
name|contains
argument_list|(
name|field
argument_list|)
operator|:
literal|"field \""
operator|+
name|field
operator|+
literal|"\" was added more than once during flush"
assert|;
name|fieldsSeen
operator|.
name|add
argument_list|(
name|field
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|addNumericField
specifier|public
name|void
name|addNumericField
parameter_list|(
name|FieldInfo
name|field
parameter_list|,
name|Iterable
argument_list|<
name|Number
argument_list|>
name|values
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|fieldSeen
argument_list|(
name|field
operator|.
name|name
argument_list|)
assert|;
assert|assert
operator|(
name|field
operator|.
name|getDocValuesType
argument_list|()
operator|==
name|FieldInfo
operator|.
name|DocValuesType
operator|.
name|NUMERIC
operator|||
name|field
operator|.
name|getNormType
argument_list|()
operator|==
name|FieldInfo
operator|.
name|DocValuesType
operator|.
name|NUMERIC
operator|)
assert|;
name|writeFieldEntry
argument_list|(
name|field
argument_list|,
name|FieldInfo
operator|.
name|DocValuesType
operator|.
name|NUMERIC
argument_list|)
expr_stmt|;
comment|// first pass to find min/max
name|long
name|minValue
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
name|long
name|maxValue
init|=
name|Long
operator|.
name|MIN_VALUE
decl_stmt|;
for|for
control|(
name|Number
name|n
range|:
name|values
control|)
block|{
name|long
name|v
init|=
name|n
operator|==
literal|null
condition|?
literal|0
else|:
name|n
operator|.
name|longValue
argument_list|()
decl_stmt|;
name|minValue
operator|=
name|Math
operator|.
name|min
argument_list|(
name|minValue
argument_list|,
name|v
argument_list|)
expr_stmt|;
name|maxValue
operator|=
name|Math
operator|.
name|max
argument_list|(
name|maxValue
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
comment|// write our minimum value to the .dat, all entries are deltas from that
name|SimpleTextUtil
operator|.
name|write
argument_list|(
name|data
argument_list|,
name|MINVALUE
argument_list|)
expr_stmt|;
name|SimpleTextUtil
operator|.
name|write
argument_list|(
name|data
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|minValue
argument_list|)
argument_list|,
name|scratch
argument_list|)
expr_stmt|;
name|SimpleTextUtil
operator|.
name|writeNewline
argument_list|(
name|data
argument_list|)
expr_stmt|;
comment|// build up our fixed-width "simple text packed ints"
comment|// format
name|BigInteger
name|maxBig
init|=
name|BigInteger
operator|.
name|valueOf
argument_list|(
name|maxValue
argument_list|)
decl_stmt|;
name|BigInteger
name|minBig
init|=
name|BigInteger
operator|.
name|valueOf
argument_list|(
name|minValue
argument_list|)
decl_stmt|;
name|BigInteger
name|diffBig
init|=
name|maxBig
operator|.
name|subtract
argument_list|(
name|minBig
argument_list|)
decl_stmt|;
name|int
name|maxBytesPerValue
init|=
name|diffBig
operator|.
name|toString
argument_list|()
operator|.
name|length
argument_list|()
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|maxBytesPerValue
condition|;
name|i
operator|++
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|'0'
argument_list|)
expr_stmt|;
block|}
comment|// write our pattern to the .dat
name|SimpleTextUtil
operator|.
name|write
argument_list|(
name|data
argument_list|,
name|PATTERN
argument_list|)
expr_stmt|;
name|SimpleTextUtil
operator|.
name|write
argument_list|(
name|data
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|,
name|scratch
argument_list|)
expr_stmt|;
name|SimpleTextUtil
operator|.
name|writeNewline
argument_list|(
name|data
argument_list|)
expr_stmt|;
specifier|final
name|String
name|patternString
init|=
name|sb
operator|.
name|toString
argument_list|()
decl_stmt|;
specifier|final
name|DecimalFormat
name|encoder
init|=
operator|new
name|DecimalFormat
argument_list|(
name|patternString
argument_list|,
operator|new
name|DecimalFormatSymbols
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|numDocsWritten
init|=
literal|0
decl_stmt|;
comment|// second pass to write the values
for|for
control|(
name|Number
name|n
range|:
name|values
control|)
block|{
name|long
name|value
init|=
name|n
operator|==
literal|null
condition|?
literal|0
else|:
name|n
operator|.
name|longValue
argument_list|()
decl_stmt|;
assert|assert
name|value
operator|>=
name|minValue
assert|;
name|Number
name|delta
init|=
name|BigInteger
operator|.
name|valueOf
argument_list|(
name|value
argument_list|)
operator|.
name|subtract
argument_list|(
name|BigInteger
operator|.
name|valueOf
argument_list|(
name|minValue
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|s
init|=
name|encoder
operator|.
name|format
argument_list|(
name|delta
argument_list|)
decl_stmt|;
assert|assert
name|s
operator|.
name|length
argument_list|()
operator|==
name|patternString
operator|.
name|length
argument_list|()
assert|;
name|SimpleTextUtil
operator|.
name|write
argument_list|(
name|data
argument_list|,
name|s
argument_list|,
name|scratch
argument_list|)
expr_stmt|;
name|SimpleTextUtil
operator|.
name|writeNewline
argument_list|(
name|data
argument_list|)
expr_stmt|;
if|if
condition|(
name|n
operator|==
literal|null
condition|)
block|{
name|SimpleTextUtil
operator|.
name|write
argument_list|(
name|data
argument_list|,
literal|"F"
argument_list|,
name|scratch
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|SimpleTextUtil
operator|.
name|write
argument_list|(
name|data
argument_list|,
literal|"T"
argument_list|,
name|scratch
argument_list|)
expr_stmt|;
block|}
name|SimpleTextUtil
operator|.
name|writeNewline
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|numDocsWritten
operator|++
expr_stmt|;
assert|assert
name|numDocsWritten
operator|<=
name|numDocs
assert|;
block|}
assert|assert
name|numDocs
operator|==
name|numDocsWritten
operator|:
literal|"numDocs="
operator|+
name|numDocs
operator|+
literal|" numDocsWritten="
operator|+
name|numDocsWritten
assert|;
block|}
annotation|@
name|Override
DECL|method|addBinaryField
specifier|public
name|void
name|addBinaryField
parameter_list|(
name|FieldInfo
name|field
parameter_list|,
name|Iterable
argument_list|<
name|BytesRef
argument_list|>
name|values
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|fieldSeen
argument_list|(
name|field
operator|.
name|name
argument_list|)
assert|;
assert|assert
name|field
operator|.
name|getDocValuesType
argument_list|()
operator|==
name|DocValuesType
operator|.
name|BINARY
assert|;
name|doAddBinary
argument_list|(
name|field
argument_list|,
name|values
argument_list|)
expr_stmt|;
block|}
DECL|method|doAddBinary
specifier|private
name|void
name|doAddBinary
parameter_list|(
name|FieldInfo
name|field
parameter_list|,
name|Iterable
argument_list|<
name|BytesRef
argument_list|>
name|values
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|maxLength
init|=
literal|0
decl_stmt|;
for|for
control|(
name|BytesRef
name|value
range|:
name|values
control|)
block|{
specifier|final
name|int
name|length
init|=
name|value
operator|==
literal|null
condition|?
literal|0
else|:
name|value
operator|.
name|length
decl_stmt|;
name|maxLength
operator|=
name|Math
operator|.
name|max
argument_list|(
name|maxLength
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
name|writeFieldEntry
argument_list|(
name|field
argument_list|,
name|FieldInfo
operator|.
name|DocValuesType
operator|.
name|BINARY
argument_list|)
expr_stmt|;
comment|// write maxLength
name|SimpleTextUtil
operator|.
name|write
argument_list|(
name|data
argument_list|,
name|MAXLENGTH
argument_list|)
expr_stmt|;
name|SimpleTextUtil
operator|.
name|write
argument_list|(
name|data
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|maxLength
argument_list|)
argument_list|,
name|scratch
argument_list|)
expr_stmt|;
name|SimpleTextUtil
operator|.
name|writeNewline
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|int
name|maxBytesLength
init|=
name|Long
operator|.
name|toString
argument_list|(
name|maxLength
argument_list|)
operator|.
name|length
argument_list|()
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|maxBytesLength
condition|;
name|i
operator|++
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|'0'
argument_list|)
expr_stmt|;
block|}
comment|// write our pattern for encoding lengths
name|SimpleTextUtil
operator|.
name|write
argument_list|(
name|data
argument_list|,
name|PATTERN
argument_list|)
expr_stmt|;
name|SimpleTextUtil
operator|.
name|write
argument_list|(
name|data
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|,
name|scratch
argument_list|)
expr_stmt|;
name|SimpleTextUtil
operator|.
name|writeNewline
argument_list|(
name|data
argument_list|)
expr_stmt|;
specifier|final
name|DecimalFormat
name|encoder
init|=
operator|new
name|DecimalFormat
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|,
operator|new
name|DecimalFormatSymbols
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|numDocsWritten
init|=
literal|0
decl_stmt|;
for|for
control|(
name|BytesRef
name|value
range|:
name|values
control|)
block|{
comment|// write length
specifier|final
name|int
name|length
init|=
name|value
operator|==
literal|null
condition|?
literal|0
else|:
name|value
operator|.
name|length
decl_stmt|;
name|SimpleTextUtil
operator|.
name|write
argument_list|(
name|data
argument_list|,
name|LENGTH
argument_list|)
expr_stmt|;
name|SimpleTextUtil
operator|.
name|write
argument_list|(
name|data
argument_list|,
name|encoder
operator|.
name|format
argument_list|(
name|length
argument_list|)
argument_list|,
name|scratch
argument_list|)
expr_stmt|;
name|SimpleTextUtil
operator|.
name|writeNewline
argument_list|(
name|data
argument_list|)
expr_stmt|;
comment|// write bytes -- don't use SimpleText.write
comment|// because it escapes:
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|data
operator|.
name|writeBytes
argument_list|(
name|value
operator|.
name|bytes
argument_list|,
name|value
operator|.
name|offset
argument_list|,
name|value
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
comment|// pad to fit
for|for
control|(
name|int
name|i
init|=
name|length
init|;
name|i
operator|<
name|maxLength
condition|;
name|i
operator|++
control|)
block|{
name|data
operator|.
name|writeByte
argument_list|(
operator|(
name|byte
operator|)
literal|' '
argument_list|)
expr_stmt|;
block|}
name|SimpleTextUtil
operator|.
name|writeNewline
argument_list|(
name|data
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|SimpleTextUtil
operator|.
name|write
argument_list|(
name|data
argument_list|,
literal|"F"
argument_list|,
name|scratch
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|SimpleTextUtil
operator|.
name|write
argument_list|(
name|data
argument_list|,
literal|"T"
argument_list|,
name|scratch
argument_list|)
expr_stmt|;
block|}
name|SimpleTextUtil
operator|.
name|writeNewline
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|numDocsWritten
operator|++
expr_stmt|;
block|}
assert|assert
name|numDocs
operator|==
name|numDocsWritten
assert|;
block|}
annotation|@
name|Override
DECL|method|addSortedField
specifier|public
name|void
name|addSortedField
parameter_list|(
name|FieldInfo
name|field
parameter_list|,
name|Iterable
argument_list|<
name|BytesRef
argument_list|>
name|values
parameter_list|,
name|Iterable
argument_list|<
name|Number
argument_list|>
name|docToOrd
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|fieldSeen
argument_list|(
name|field
operator|.
name|name
argument_list|)
assert|;
assert|assert
name|field
operator|.
name|getDocValuesType
argument_list|()
operator|==
name|DocValuesType
operator|.
name|SORTED
assert|;
name|writeFieldEntry
argument_list|(
name|field
argument_list|,
name|FieldInfo
operator|.
name|DocValuesType
operator|.
name|SORTED
argument_list|)
expr_stmt|;
name|int
name|valueCount
init|=
literal|0
decl_stmt|;
name|int
name|maxLength
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|BytesRef
name|value
range|:
name|values
control|)
block|{
name|maxLength
operator|=
name|Math
operator|.
name|max
argument_list|(
name|maxLength
argument_list|,
name|value
operator|.
name|length
argument_list|)
expr_stmt|;
name|valueCount
operator|++
expr_stmt|;
block|}
comment|// write numValues
name|SimpleTextUtil
operator|.
name|write
argument_list|(
name|data
argument_list|,
name|NUMVALUES
argument_list|)
expr_stmt|;
name|SimpleTextUtil
operator|.
name|write
argument_list|(
name|data
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|valueCount
argument_list|)
argument_list|,
name|scratch
argument_list|)
expr_stmt|;
name|SimpleTextUtil
operator|.
name|writeNewline
argument_list|(
name|data
argument_list|)
expr_stmt|;
comment|// write maxLength
name|SimpleTextUtil
operator|.
name|write
argument_list|(
name|data
argument_list|,
name|MAXLENGTH
argument_list|)
expr_stmt|;
name|SimpleTextUtil
operator|.
name|write
argument_list|(
name|data
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|maxLength
argument_list|)
argument_list|,
name|scratch
argument_list|)
expr_stmt|;
name|SimpleTextUtil
operator|.
name|writeNewline
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|int
name|maxBytesLength
init|=
name|Integer
operator|.
name|toString
argument_list|(
name|maxLength
argument_list|)
operator|.
name|length
argument_list|()
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|maxBytesLength
condition|;
name|i
operator|++
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|'0'
argument_list|)
expr_stmt|;
block|}
comment|// write our pattern for encoding lengths
name|SimpleTextUtil
operator|.
name|write
argument_list|(
name|data
argument_list|,
name|PATTERN
argument_list|)
expr_stmt|;
name|SimpleTextUtil
operator|.
name|write
argument_list|(
name|data
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|,
name|scratch
argument_list|)
expr_stmt|;
name|SimpleTextUtil
operator|.
name|writeNewline
argument_list|(
name|data
argument_list|)
expr_stmt|;
specifier|final
name|DecimalFormat
name|encoder
init|=
operator|new
name|DecimalFormat
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|,
operator|new
name|DecimalFormatSymbols
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|maxOrdBytes
init|=
name|Long
operator|.
name|toString
argument_list|(
name|valueCount
operator|+
literal|1L
argument_list|)
operator|.
name|length
argument_list|()
decl_stmt|;
name|sb
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|maxOrdBytes
condition|;
name|i
operator|++
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|'0'
argument_list|)
expr_stmt|;
block|}
comment|// write our pattern for ords
name|SimpleTextUtil
operator|.
name|write
argument_list|(
name|data
argument_list|,
name|ORDPATTERN
argument_list|)
expr_stmt|;
name|SimpleTextUtil
operator|.
name|write
argument_list|(
name|data
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|,
name|scratch
argument_list|)
expr_stmt|;
name|SimpleTextUtil
operator|.
name|writeNewline
argument_list|(
name|data
argument_list|)
expr_stmt|;
specifier|final
name|DecimalFormat
name|ordEncoder
init|=
operator|new
name|DecimalFormat
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|,
operator|new
name|DecimalFormatSymbols
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
argument_list|)
decl_stmt|;
comment|// for asserts:
name|int
name|valuesSeen
init|=
literal|0
decl_stmt|;
for|for
control|(
name|BytesRef
name|value
range|:
name|values
control|)
block|{
comment|// write length
name|SimpleTextUtil
operator|.
name|write
argument_list|(
name|data
argument_list|,
name|LENGTH
argument_list|)
expr_stmt|;
name|SimpleTextUtil
operator|.
name|write
argument_list|(
name|data
argument_list|,
name|encoder
operator|.
name|format
argument_list|(
name|value
operator|.
name|length
argument_list|)
argument_list|,
name|scratch
argument_list|)
expr_stmt|;
name|SimpleTextUtil
operator|.
name|writeNewline
argument_list|(
name|data
argument_list|)
expr_stmt|;
comment|// write bytes -- don't use SimpleText.write
comment|// because it escapes:
name|data
operator|.
name|writeBytes
argument_list|(
name|value
operator|.
name|bytes
argument_list|,
name|value
operator|.
name|offset
argument_list|,
name|value
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// pad to fit
for|for
control|(
name|int
name|i
init|=
name|value
operator|.
name|length
init|;
name|i
operator|<
name|maxLength
condition|;
name|i
operator|++
control|)
block|{
name|data
operator|.
name|writeByte
argument_list|(
operator|(
name|byte
operator|)
literal|' '
argument_list|)
expr_stmt|;
block|}
name|SimpleTextUtil
operator|.
name|writeNewline
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|valuesSeen
operator|++
expr_stmt|;
assert|assert
name|valuesSeen
operator|<=
name|valueCount
assert|;
block|}
assert|assert
name|valuesSeen
operator|==
name|valueCount
assert|;
for|for
control|(
name|Number
name|ord
range|:
name|docToOrd
control|)
block|{
name|SimpleTextUtil
operator|.
name|write
argument_list|(
name|data
argument_list|,
name|ordEncoder
operator|.
name|format
argument_list|(
name|ord
operator|.
name|longValue
argument_list|()
operator|+
literal|1
argument_list|)
argument_list|,
name|scratch
argument_list|)
expr_stmt|;
name|SimpleTextUtil
operator|.
name|writeNewline
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|addSortedNumericField
specifier|public
name|void
name|addSortedNumericField
parameter_list|(
name|FieldInfo
name|field
parameter_list|,
specifier|final
name|Iterable
argument_list|<
name|Number
argument_list|>
name|docToValueCount
parameter_list|,
specifier|final
name|Iterable
argument_list|<
name|Number
argument_list|>
name|values
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|fieldSeen
argument_list|(
name|field
operator|.
name|name
argument_list|)
assert|;
assert|assert
name|field
operator|.
name|getDocValuesType
argument_list|()
operator|==
name|DocValuesType
operator|.
name|SORTED_NUMERIC
assert|;
name|doAddBinary
argument_list|(
name|field
argument_list|,
operator|new
name|Iterable
argument_list|<
name|BytesRef
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|BytesRef
argument_list|>
name|iterator
parameter_list|()
block|{
specifier|final
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
specifier|final
name|BytesRef
name|scratch
init|=
operator|new
name|BytesRef
argument_list|()
decl_stmt|;
specifier|final
name|Iterator
argument_list|<
name|Number
argument_list|>
name|counts
init|=
name|docToValueCount
operator|.
name|iterator
argument_list|()
decl_stmt|;
specifier|final
name|Iterator
argument_list|<
name|Number
argument_list|>
name|numbers
init|=
name|values
operator|.
name|iterator
argument_list|()
decl_stmt|;
return|return
operator|new
name|Iterator
argument_list|<
name|BytesRef
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|counts
operator|.
name|hasNext
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|BytesRef
name|next
parameter_list|()
block|{
name|builder
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|long
name|count
init|=
name|counts
operator|.
name|next
argument_list|()
operator|.
name|longValue
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|append
argument_list|(
name|Long
operator|.
name|toString
argument_list|(
name|numbers
operator|.
name|next
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|scratch
operator|.
name|copyChars
argument_list|(
name|builder
argument_list|)
expr_stmt|;
return|return
name|scratch
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|addSortedSetField
specifier|public
name|void
name|addSortedSetField
parameter_list|(
name|FieldInfo
name|field
parameter_list|,
name|Iterable
argument_list|<
name|BytesRef
argument_list|>
name|values
parameter_list|,
name|Iterable
argument_list|<
name|Number
argument_list|>
name|docToOrdCount
parameter_list|,
name|Iterable
argument_list|<
name|Number
argument_list|>
name|ords
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|fieldSeen
argument_list|(
name|field
operator|.
name|name
argument_list|)
assert|;
assert|assert
name|field
operator|.
name|getDocValuesType
argument_list|()
operator|==
name|DocValuesType
operator|.
name|SORTED_SET
assert|;
name|writeFieldEntry
argument_list|(
name|field
argument_list|,
name|FieldInfo
operator|.
name|DocValuesType
operator|.
name|SORTED_SET
argument_list|)
expr_stmt|;
name|long
name|valueCount
init|=
literal|0
decl_stmt|;
name|int
name|maxLength
init|=
literal|0
decl_stmt|;
for|for
control|(
name|BytesRef
name|value
range|:
name|values
control|)
block|{
name|maxLength
operator|=
name|Math
operator|.
name|max
argument_list|(
name|maxLength
argument_list|,
name|value
operator|.
name|length
argument_list|)
expr_stmt|;
name|valueCount
operator|++
expr_stmt|;
block|}
comment|// write numValues
name|SimpleTextUtil
operator|.
name|write
argument_list|(
name|data
argument_list|,
name|NUMVALUES
argument_list|)
expr_stmt|;
name|SimpleTextUtil
operator|.
name|write
argument_list|(
name|data
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|valueCount
argument_list|)
argument_list|,
name|scratch
argument_list|)
expr_stmt|;
name|SimpleTextUtil
operator|.
name|writeNewline
argument_list|(
name|data
argument_list|)
expr_stmt|;
comment|// write maxLength
name|SimpleTextUtil
operator|.
name|write
argument_list|(
name|data
argument_list|,
name|MAXLENGTH
argument_list|)
expr_stmt|;
name|SimpleTextUtil
operator|.
name|write
argument_list|(
name|data
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|maxLength
argument_list|)
argument_list|,
name|scratch
argument_list|)
expr_stmt|;
name|SimpleTextUtil
operator|.
name|writeNewline
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|int
name|maxBytesLength
init|=
name|Integer
operator|.
name|toString
argument_list|(
name|maxLength
argument_list|)
operator|.
name|length
argument_list|()
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|maxBytesLength
condition|;
name|i
operator|++
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|'0'
argument_list|)
expr_stmt|;
block|}
comment|// write our pattern for encoding lengths
name|SimpleTextUtil
operator|.
name|write
argument_list|(
name|data
argument_list|,
name|PATTERN
argument_list|)
expr_stmt|;
name|SimpleTextUtil
operator|.
name|write
argument_list|(
name|data
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|,
name|scratch
argument_list|)
expr_stmt|;
name|SimpleTextUtil
operator|.
name|writeNewline
argument_list|(
name|data
argument_list|)
expr_stmt|;
specifier|final
name|DecimalFormat
name|encoder
init|=
operator|new
name|DecimalFormat
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|,
operator|new
name|DecimalFormatSymbols
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
argument_list|)
decl_stmt|;
comment|// compute ord pattern: this is funny, we encode all values for all docs to find the maximum length
name|int
name|maxOrdListLength
init|=
literal|0
decl_stmt|;
name|StringBuilder
name|sb2
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|Number
argument_list|>
name|ordStream
init|=
name|ords
operator|.
name|iterator
argument_list|()
decl_stmt|;
for|for
control|(
name|Number
name|n
range|:
name|docToOrdCount
control|)
block|{
name|sb2
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|int
name|count
init|=
name|n
operator|.
name|intValue
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|long
name|ord
init|=
name|ordStream
operator|.
name|next
argument_list|()
operator|.
name|longValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|sb2
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|sb2
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
name|sb2
operator|.
name|append
argument_list|(
name|Long
operator|.
name|toString
argument_list|(
name|ord
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|maxOrdListLength
operator|=
name|Math
operator|.
name|max
argument_list|(
name|maxOrdListLength
argument_list|,
name|sb2
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|sb2
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|maxOrdListLength
condition|;
name|i
operator|++
control|)
block|{
name|sb2
operator|.
name|append
argument_list|(
literal|'X'
argument_list|)
expr_stmt|;
block|}
comment|// write our pattern for ord lists
name|SimpleTextUtil
operator|.
name|write
argument_list|(
name|data
argument_list|,
name|ORDPATTERN
argument_list|)
expr_stmt|;
name|SimpleTextUtil
operator|.
name|write
argument_list|(
name|data
argument_list|,
name|sb2
operator|.
name|toString
argument_list|()
argument_list|,
name|scratch
argument_list|)
expr_stmt|;
name|SimpleTextUtil
operator|.
name|writeNewline
argument_list|(
name|data
argument_list|)
expr_stmt|;
comment|// for asserts:
name|long
name|valuesSeen
init|=
literal|0
decl_stmt|;
for|for
control|(
name|BytesRef
name|value
range|:
name|values
control|)
block|{
comment|// write length
name|SimpleTextUtil
operator|.
name|write
argument_list|(
name|data
argument_list|,
name|LENGTH
argument_list|)
expr_stmt|;
name|SimpleTextUtil
operator|.
name|write
argument_list|(
name|data
argument_list|,
name|encoder
operator|.
name|format
argument_list|(
name|value
operator|.
name|length
argument_list|)
argument_list|,
name|scratch
argument_list|)
expr_stmt|;
name|SimpleTextUtil
operator|.
name|writeNewline
argument_list|(
name|data
argument_list|)
expr_stmt|;
comment|// write bytes -- don't use SimpleText.write
comment|// because it escapes:
name|data
operator|.
name|writeBytes
argument_list|(
name|value
operator|.
name|bytes
argument_list|,
name|value
operator|.
name|offset
argument_list|,
name|value
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// pad to fit
for|for
control|(
name|int
name|i
init|=
name|value
operator|.
name|length
init|;
name|i
operator|<
name|maxLength
condition|;
name|i
operator|++
control|)
block|{
name|data
operator|.
name|writeByte
argument_list|(
operator|(
name|byte
operator|)
literal|' '
argument_list|)
expr_stmt|;
block|}
name|SimpleTextUtil
operator|.
name|writeNewline
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|valuesSeen
operator|++
expr_stmt|;
assert|assert
name|valuesSeen
operator|<=
name|valueCount
assert|;
block|}
assert|assert
name|valuesSeen
operator|==
name|valueCount
assert|;
name|ordStream
operator|=
name|ords
operator|.
name|iterator
argument_list|()
expr_stmt|;
comment|// write the ords for each doc comma-separated
for|for
control|(
name|Number
name|n
range|:
name|docToOrdCount
control|)
block|{
name|sb2
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|int
name|count
init|=
name|n
operator|.
name|intValue
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|long
name|ord
init|=
name|ordStream
operator|.
name|next
argument_list|()
operator|.
name|longValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|sb2
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|sb2
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
name|sb2
operator|.
name|append
argument_list|(
name|Long
operator|.
name|toString
argument_list|(
name|ord
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// now pad to fit: these are numbers so spaces work well. reader calls trim()
name|int
name|numPadding
init|=
name|maxOrdListLength
operator|-
name|sb2
operator|.
name|length
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numPadding
condition|;
name|i
operator|++
control|)
block|{
name|sb2
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
block|}
name|SimpleTextUtil
operator|.
name|write
argument_list|(
name|data
argument_list|,
name|sb2
operator|.
name|toString
argument_list|()
argument_list|,
name|scratch
argument_list|)
expr_stmt|;
name|SimpleTextUtil
operator|.
name|writeNewline
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** write the header for this field */
DECL|method|writeFieldEntry
specifier|private
name|void
name|writeFieldEntry
parameter_list|(
name|FieldInfo
name|field
parameter_list|,
name|FieldInfo
operator|.
name|DocValuesType
name|type
parameter_list|)
throws|throws
name|IOException
block|{
name|SimpleTextUtil
operator|.
name|write
argument_list|(
name|data
argument_list|,
name|FIELD
argument_list|)
expr_stmt|;
name|SimpleTextUtil
operator|.
name|write
argument_list|(
name|data
argument_list|,
name|field
operator|.
name|name
argument_list|,
name|scratch
argument_list|)
expr_stmt|;
name|SimpleTextUtil
operator|.
name|writeNewline
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|SimpleTextUtil
operator|.
name|write
argument_list|(
name|data
argument_list|,
name|TYPE
argument_list|)
expr_stmt|;
name|SimpleTextUtil
operator|.
name|write
argument_list|(
name|data
argument_list|,
name|type
operator|.
name|toString
argument_list|()
argument_list|,
name|scratch
argument_list|)
expr_stmt|;
name|SimpleTextUtil
operator|.
name|writeNewline
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|data
operator|!=
literal|null
condition|)
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
assert|assert
operator|!
name|fieldsSeen
operator|.
name|isEmpty
argument_list|()
assert|;
comment|// TODO: sheisty to do this here?
name|SimpleTextUtil
operator|.
name|write
argument_list|(
name|data
argument_list|,
name|END
argument_list|)
expr_stmt|;
name|SimpleTextUtil
operator|.
name|writeNewline
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|SimpleTextUtil
operator|.
name|writeChecksum
argument_list|(
name|data
argument_list|,
name|scratch
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|success
condition|)
block|{
name|IOUtils
operator|.
name|close
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|IOUtils
operator|.
name|closeWhileHandlingException
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
name|data
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
block|}
end_class
end_unit
