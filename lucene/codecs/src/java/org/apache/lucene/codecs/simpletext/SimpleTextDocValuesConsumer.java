begin_unit
begin_package
DECL|package|org.apache.lucene.codecs.simpletext
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|simpletext
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements. See the NOTICE file distributed with this  * work for additional information regarding copyright ownership. The ASF  * licenses this file to You under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|DocValuesArraySource
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|DocValuesConsumer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DocValues
operator|.
name|Type
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexFileNames
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|StorableField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IOContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexOutput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|ArrayUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRefHash
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import
begin_comment
comment|/**  * Writes plain-text DocValues.  *<p>  *<b><font color="red">FOR RECREATIONAL USE ONLY</font></B>  *   * @lucene.experimental  */
end_comment
begin_class
DECL|class|SimpleTextDocValuesConsumer
specifier|public
class|class
name|SimpleTextDocValuesConsumer
extends|extends
name|DocValuesConsumer
block|{
DECL|field|ZERO_DOUBLE
specifier|static
specifier|final
name|BytesRef
name|ZERO_DOUBLE
init|=
operator|new
name|BytesRef
argument_list|(
name|Double
operator|.
name|toString
argument_list|(
literal|0d
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|ZERO_INT
specifier|static
specifier|final
name|BytesRef
name|ZERO_INT
init|=
operator|new
name|BytesRef
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|HEADER
specifier|static
specifier|final
name|BytesRef
name|HEADER
init|=
operator|new
name|BytesRef
argument_list|(
literal|"SimpleTextDocValues"
argument_list|)
decl_stmt|;
DECL|field|END
specifier|static
specifier|final
name|BytesRef
name|END
init|=
operator|new
name|BytesRef
argument_list|(
literal|"END"
argument_list|)
decl_stmt|;
DECL|field|VALUE_SIZE
specifier|static
specifier|final
name|BytesRef
name|VALUE_SIZE
init|=
operator|new
name|BytesRef
argument_list|(
literal|"valuesize "
argument_list|)
decl_stmt|;
DECL|field|DOC
specifier|static
specifier|final
name|BytesRef
name|DOC
init|=
operator|new
name|BytesRef
argument_list|(
literal|"  doc "
argument_list|)
decl_stmt|;
DECL|field|VALUE
specifier|static
specifier|final
name|BytesRef
name|VALUE
init|=
operator|new
name|BytesRef
argument_list|(
literal|"    value "
argument_list|)
decl_stmt|;
DECL|field|scratch
specifier|protected
name|BytesRef
name|scratch
init|=
operator|new
name|BytesRef
argument_list|()
decl_stmt|;
DECL|field|maxDocId
specifier|protected
name|int
name|maxDocId
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|segment
specifier|protected
specifier|final
name|String
name|segment
decl_stmt|;
DECL|field|dir
specifier|protected
specifier|final
name|Directory
name|dir
decl_stmt|;
DECL|field|ctx
specifier|protected
specifier|final
name|IOContext
name|ctx
decl_stmt|;
DECL|field|type
specifier|protected
specifier|final
name|Type
name|type
decl_stmt|;
DECL|field|hash
specifier|protected
specifier|final
name|BytesRefHash
name|hash
decl_stmt|;
DECL|field|ords
specifier|private
name|int
index|[]
name|ords
decl_stmt|;
DECL|field|valueSize
specifier|private
name|int
name|valueSize
init|=
name|Integer
operator|.
name|MIN_VALUE
decl_stmt|;
DECL|field|zeroBytes
specifier|private
name|BytesRef
name|zeroBytes
decl_stmt|;
DECL|field|segmentSuffix
specifier|private
specifier|final
name|String
name|segmentSuffix
decl_stmt|;
DECL|method|SimpleTextDocValuesConsumer
specifier|public
name|SimpleTextDocValuesConsumer
parameter_list|(
name|String
name|segment
parameter_list|,
name|Directory
name|dir
parameter_list|,
name|IOContext
name|ctx
parameter_list|,
name|Type
name|type
parameter_list|,
name|String
name|segmentSuffix
parameter_list|)
block|{
name|this
operator|.
name|ctx
operator|=
name|ctx
expr_stmt|;
name|this
operator|.
name|dir
operator|=
name|dir
expr_stmt|;
name|this
operator|.
name|segment
operator|=
name|segment
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|hash
operator|=
operator|new
name|BytesRefHash
argument_list|()
expr_stmt|;
name|ords
operator|=
operator|new
name|int
index|[
literal|0
index|]
expr_stmt|;
name|this
operator|.
name|segmentSuffix
operator|=
name|segmentSuffix
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|add
specifier|public
name|void
name|add
parameter_list|(
name|int
name|docID
parameter_list|,
name|StorableField
name|value
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|docID
operator|>=
literal|0
assert|;
specifier|final
name|int
name|ord
decl_stmt|,
name|vSize
decl_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|BYTES_FIXED_DEREF
case|:
case|case
name|BYTES_FIXED_SORTED
case|:
case|case
name|BYTES_FIXED_STRAIGHT
case|:
name|vSize
operator|=
name|value
operator|.
name|binaryValue
argument_list|()
operator|.
name|length
expr_stmt|;
name|ord
operator|=
name|hash
operator|.
name|add
argument_list|(
name|value
operator|.
name|binaryValue
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|BYTES_VAR_DEREF
case|:
case|case
name|BYTES_VAR_SORTED
case|:
case|case
name|BYTES_VAR_STRAIGHT
case|:
name|vSize
operator|=
operator|-
literal|1
expr_stmt|;
name|ord
operator|=
name|hash
operator|.
name|add
argument_list|(
name|value
operator|.
name|binaryValue
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|FIXED_INTS_16
case|:
name|vSize
operator|=
literal|2
expr_stmt|;
name|scratch
operator|.
name|grow
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|DocValuesArraySource
operator|.
name|copyShort
argument_list|(
name|scratch
argument_list|,
name|value
operator|.
name|numericValue
argument_list|()
operator|.
name|shortValue
argument_list|()
argument_list|)
expr_stmt|;
name|ord
operator|=
name|hash
operator|.
name|add
argument_list|(
name|scratch
argument_list|)
expr_stmt|;
break|break;
case|case
name|FIXED_INTS_32
case|:
name|vSize
operator|=
literal|4
expr_stmt|;
name|scratch
operator|.
name|grow
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|DocValuesArraySource
operator|.
name|copyInt
argument_list|(
name|scratch
argument_list|,
name|value
operator|.
name|numericValue
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|ord
operator|=
name|hash
operator|.
name|add
argument_list|(
name|scratch
argument_list|)
expr_stmt|;
break|break;
case|case
name|FIXED_INTS_8
case|:
name|vSize
operator|=
literal|1
expr_stmt|;
name|scratch
operator|.
name|grow
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|scratch
operator|.
name|bytes
index|[
name|scratch
operator|.
name|offset
index|]
operator|=
name|value
operator|.
name|numericValue
argument_list|()
operator|.
name|byteValue
argument_list|()
expr_stmt|;
name|scratch
operator|.
name|length
operator|=
literal|1
expr_stmt|;
name|ord
operator|=
name|hash
operator|.
name|add
argument_list|(
name|scratch
argument_list|)
expr_stmt|;
break|break;
case|case
name|FIXED_INTS_64
case|:
name|vSize
operator|=
literal|8
expr_stmt|;
name|scratch
operator|.
name|grow
argument_list|(
literal|8
argument_list|)
expr_stmt|;
name|DocValuesArraySource
operator|.
name|copyLong
argument_list|(
name|scratch
argument_list|,
name|value
operator|.
name|numericValue
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|ord
operator|=
name|hash
operator|.
name|add
argument_list|(
name|scratch
argument_list|)
expr_stmt|;
break|break;
case|case
name|VAR_INTS
case|:
name|vSize
operator|=
operator|-
literal|1
expr_stmt|;
name|scratch
operator|.
name|grow
argument_list|(
literal|8
argument_list|)
expr_stmt|;
name|DocValuesArraySource
operator|.
name|copyLong
argument_list|(
name|scratch
argument_list|,
name|value
operator|.
name|numericValue
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|ord
operator|=
name|hash
operator|.
name|add
argument_list|(
name|scratch
argument_list|)
expr_stmt|;
break|break;
case|case
name|FLOAT_32
case|:
name|vSize
operator|=
literal|4
expr_stmt|;
name|scratch
operator|.
name|grow
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|DocValuesArraySource
operator|.
name|copyInt
argument_list|(
name|scratch
argument_list|,
name|Float
operator|.
name|floatToRawIntBits
argument_list|(
name|value
operator|.
name|numericValue
argument_list|()
operator|.
name|floatValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ord
operator|=
name|hash
operator|.
name|add
argument_list|(
name|scratch
argument_list|)
expr_stmt|;
break|break;
case|case
name|FLOAT_64
case|:
name|vSize
operator|=
literal|8
expr_stmt|;
name|scratch
operator|.
name|grow
argument_list|(
literal|8
argument_list|)
expr_stmt|;
name|DocValuesArraySource
operator|.
name|copyLong
argument_list|(
name|scratch
argument_list|,
name|Double
operator|.
name|doubleToRawLongBits
argument_list|(
name|value
operator|.
name|numericValue
argument_list|()
operator|.
name|doubleValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ord
operator|=
name|hash
operator|.
name|add
argument_list|(
name|scratch
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"should not reach this line"
argument_list|)
throw|;
block|}
if|if
condition|(
name|valueSize
operator|==
name|Integer
operator|.
name|MIN_VALUE
condition|)
block|{
assert|assert
name|maxDocId
operator|==
operator|-
literal|1
assert|;
name|valueSize
operator|=
name|vSize
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|valueSize
operator|!=
name|vSize
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"value size must be "
operator|+
name|valueSize
operator|+
literal|" but was: "
operator|+
name|vSize
argument_list|)
throw|;
block|}
block|}
name|maxDocId
operator|=
name|Math
operator|.
name|max
argument_list|(
name|docID
argument_list|,
name|maxDocId
argument_list|)
expr_stmt|;
name|ords
operator|=
name|grow
argument_list|(
name|ords
argument_list|,
name|docID
argument_list|)
expr_stmt|;
name|ords
index|[
name|docID
index|]
operator|=
operator|(
name|ord
operator|<
literal|0
condition|?
operator|(
operator|-
name|ord
operator|)
operator|-
literal|1
else|:
name|ord
operator|)
operator|+
literal|1
expr_stmt|;
block|}
DECL|method|getHeader
specifier|protected
name|BytesRef
name|getHeader
parameter_list|()
block|{
return|return
name|HEADER
return|;
block|}
DECL|method|grow
specifier|private
name|int
index|[]
name|grow
parameter_list|(
name|int
index|[]
name|array
parameter_list|,
name|int
name|upto
parameter_list|)
block|{
if|if
condition|(
name|array
operator|.
name|length
operator|<=
name|upto
condition|)
block|{
return|return
name|ArrayUtil
operator|.
name|grow
argument_list|(
name|array
argument_list|,
literal|1
operator|+
name|upto
argument_list|)
return|;
block|}
return|return
name|array
return|;
block|}
DECL|method|prepareFlush
specifier|private
name|void
name|prepareFlush
parameter_list|(
name|int
name|docCount
parameter_list|)
block|{
assert|assert
name|ords
operator|!=
literal|null
assert|;
name|ords
operator|=
name|grow
argument_list|(
name|ords
argument_list|,
name|docCount
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|finish
specifier|public
name|void
name|finish
parameter_list|(
name|int
name|docCount
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|String
name|fileName
init|=
name|IndexFileNames
operator|.
name|segmentFileName
argument_list|(
name|segment
argument_list|,
literal|""
argument_list|,
name|segmentSuffix
argument_list|)
decl_stmt|;
name|IndexOutput
name|output
init|=
name|dir
operator|.
name|createOutput
argument_list|(
name|fileName
argument_list|,
name|ctx
argument_list|)
decl_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|BytesRef
name|spare
init|=
operator|new
name|BytesRef
argument_list|()
decl_stmt|;
try|try
block|{
name|SimpleTextUtil
operator|.
name|write
argument_list|(
name|output
argument_list|,
name|getHeader
argument_list|()
argument_list|)
expr_stmt|;
name|SimpleTextUtil
operator|.
name|writeNewline
argument_list|(
name|output
argument_list|)
expr_stmt|;
name|SimpleTextUtil
operator|.
name|write
argument_list|(
name|output
argument_list|,
name|VALUE_SIZE
argument_list|)
expr_stmt|;
name|SimpleTextUtil
operator|.
name|write
argument_list|(
name|output
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|this
operator|.
name|valueSize
argument_list|)
argument_list|,
name|scratch
argument_list|)
expr_stmt|;
name|SimpleTextUtil
operator|.
name|writeNewline
argument_list|(
name|output
argument_list|)
expr_stmt|;
name|prepareFlush
argument_list|(
name|docCount
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|docCount
condition|;
name|i
operator|++
control|)
block|{
name|SimpleTextUtil
operator|.
name|write
argument_list|(
name|output
argument_list|,
name|DOC
argument_list|)
expr_stmt|;
name|SimpleTextUtil
operator|.
name|write
argument_list|(
name|output
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|,
name|scratch
argument_list|)
expr_stmt|;
name|SimpleTextUtil
operator|.
name|writeNewline
argument_list|(
name|output
argument_list|)
expr_stmt|;
name|SimpleTextUtil
operator|.
name|write
argument_list|(
name|output
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|writeDoc
argument_list|(
name|output
argument_list|,
name|i
argument_list|,
name|spare
argument_list|)
expr_stmt|;
name|SimpleTextUtil
operator|.
name|writeNewline
argument_list|(
name|output
argument_list|)
expr_stmt|;
block|}
name|SimpleTextUtil
operator|.
name|write
argument_list|(
name|output
argument_list|,
name|END
argument_list|)
expr_stmt|;
name|SimpleTextUtil
operator|.
name|writeNewline
argument_list|(
name|output
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
name|hash
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|success
condition|)
block|{
name|IOUtils
operator|.
name|close
argument_list|(
name|output
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|IOUtils
operator|.
name|closeWhileHandlingException
argument_list|(
name|output
argument_list|)
expr_stmt|;
name|dir
operator|.
name|deleteFile
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|writeDoc
specifier|protected
name|void
name|writeDoc
parameter_list|(
name|IndexOutput
name|output
parameter_list|,
name|int
name|docId
parameter_list|,
name|BytesRef
name|spare
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|ord
init|=
name|ords
index|[
name|docId
index|]
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|ord
operator|!=
operator|-
literal|1
condition|)
block|{
assert|assert
name|ord
operator|>=
literal|0
assert|;
name|hash
operator|.
name|get
argument_list|(
name|ord
argument_list|,
name|spare
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|BYTES_FIXED_DEREF
case|:
case|case
name|BYTES_FIXED_SORTED
case|:
case|case
name|BYTES_FIXED_STRAIGHT
case|:
case|case
name|BYTES_VAR_DEREF
case|:
case|case
name|BYTES_VAR_SORTED
case|:
case|case
name|BYTES_VAR_STRAIGHT
case|:
name|SimpleTextUtil
operator|.
name|write
argument_list|(
name|output
argument_list|,
name|spare
argument_list|)
expr_stmt|;
break|break;
case|case
name|FIXED_INTS_16
case|:
name|SimpleTextUtil
operator|.
name|write
argument_list|(
name|output
argument_list|,
name|Short
operator|.
name|toString
argument_list|(
name|DocValuesArraySource
operator|.
name|asShort
argument_list|(
name|spare
argument_list|)
argument_list|)
argument_list|,
name|scratch
argument_list|)
expr_stmt|;
break|break;
case|case
name|FIXED_INTS_32
case|:
name|SimpleTextUtil
operator|.
name|write
argument_list|(
name|output
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|DocValuesArraySource
operator|.
name|asInt
argument_list|(
name|spare
argument_list|)
argument_list|)
argument_list|,
name|scratch
argument_list|)
expr_stmt|;
break|break;
case|case
name|VAR_INTS
case|:
case|case
name|FIXED_INTS_64
case|:
name|SimpleTextUtil
operator|.
name|write
argument_list|(
name|output
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|DocValuesArraySource
operator|.
name|asLong
argument_list|(
name|spare
argument_list|)
argument_list|)
argument_list|,
name|scratch
argument_list|)
expr_stmt|;
break|break;
case|case
name|FIXED_INTS_8
case|:
assert|assert
name|spare
operator|.
name|length
operator|==
literal|1
operator|:
name|spare
operator|.
name|length
assert|;
name|SimpleTextUtil
operator|.
name|write
argument_list|(
name|output
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|spare
operator|.
name|bytes
index|[
name|spare
operator|.
name|offset
index|]
argument_list|)
argument_list|,
name|scratch
argument_list|)
expr_stmt|;
break|break;
case|case
name|FLOAT_32
case|:
name|float
name|valueFloat
init|=
name|Float
operator|.
name|intBitsToFloat
argument_list|(
name|DocValuesArraySource
operator|.
name|asInt
argument_list|(
name|spare
argument_list|)
argument_list|)
decl_stmt|;
name|SimpleTextUtil
operator|.
name|write
argument_list|(
name|output
argument_list|,
name|Float
operator|.
name|toString
argument_list|(
name|valueFloat
argument_list|)
argument_list|,
name|scratch
argument_list|)
expr_stmt|;
break|break;
case|case
name|FLOAT_64
case|:
name|double
name|valueDouble
init|=
name|Double
operator|.
name|longBitsToDouble
argument_list|(
name|DocValuesArraySource
operator|.
name|asLong
argument_list|(
name|spare
argument_list|)
argument_list|)
decl_stmt|;
name|SimpleTextUtil
operator|.
name|write
argument_list|(
name|output
argument_list|,
name|Double
operator|.
name|toString
argument_list|(
name|valueDouble
argument_list|)
argument_list|,
name|scratch
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"unsupported type: "
operator|+
name|type
argument_list|)
throw|;
block|}
block|}
else|else
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|BYTES_FIXED_DEREF
case|:
case|case
name|BYTES_FIXED_SORTED
case|:
case|case
name|BYTES_FIXED_STRAIGHT
case|:
if|if
condition|(
name|zeroBytes
operator|==
literal|null
condition|)
block|{
assert|assert
name|valueSize
operator|>
literal|0
assert|;
name|zeroBytes
operator|=
operator|new
name|BytesRef
argument_list|(
operator|new
name|byte
index|[
name|valueSize
index|]
argument_list|)
expr_stmt|;
block|}
name|SimpleTextUtil
operator|.
name|write
argument_list|(
name|output
argument_list|,
name|zeroBytes
argument_list|)
expr_stmt|;
break|break;
case|case
name|BYTES_VAR_DEREF
case|:
case|case
name|BYTES_VAR_SORTED
case|:
case|case
name|BYTES_VAR_STRAIGHT
case|:
name|scratch
operator|.
name|length
operator|=
literal|0
expr_stmt|;
name|SimpleTextUtil
operator|.
name|write
argument_list|(
name|output
argument_list|,
name|scratch
argument_list|)
expr_stmt|;
break|break;
case|case
name|FIXED_INTS_16
case|:
case|case
name|FIXED_INTS_32
case|:
case|case
name|FIXED_INTS_64
case|:
case|case
name|FIXED_INTS_8
case|:
case|case
name|VAR_INTS
case|:
name|SimpleTextUtil
operator|.
name|write
argument_list|(
name|output
argument_list|,
name|ZERO_INT
argument_list|)
expr_stmt|;
break|break;
case|case
name|FLOAT_32
case|:
case|case
name|FLOAT_64
case|:
name|SimpleTextUtil
operator|.
name|write
argument_list|(
name|output
argument_list|,
name|ZERO_DOUBLE
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"unsupported type: "
operator|+
name|type
argument_list|)
throw|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|getType
specifier|protected
name|Type
name|getType
parameter_list|()
block|{
return|return
name|type
return|;
block|}
annotation|@
name|Override
DECL|method|getValueSize
specifier|public
name|int
name|getValueSize
parameter_list|()
block|{
return|return
name|valueSize
return|;
block|}
block|}
end_class
end_unit
