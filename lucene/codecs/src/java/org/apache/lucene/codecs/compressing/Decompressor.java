begin_unit
begin_package
DECL|package|org.apache.lucene.codecs.compressing
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|compressing
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|DataInput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|DataOutput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_comment
comment|/**  * An decompressor.  */
end_comment
begin_class
DECL|class|Decompressor
specifier|abstract
class|class
name|Decompressor
implements|implements
name|Cloneable
block|{
comment|/**    * Decompress bytes. This method is free to resize<code>bytes</code> in case    * it is too small to hold all the decompressed data.    */
DECL|method|decompress
specifier|public
specifier|abstract
name|void
name|decompress
parameter_list|(
name|DataInput
name|in
parameter_list|,
name|BytesRef
name|bytes
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Method to use if you are only interested into<code>length</code>    * decompressed bytes starting at offset<code>offset</code>. Some compression    * codecs might have optimizations for this special case.    */
DECL|method|decompress
specifier|public
name|void
name|decompress
parameter_list|(
name|DataInput
name|in
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|,
name|BytesRef
name|bytes
parameter_list|)
throws|throws
name|IOException
block|{
name|decompress
argument_list|(
name|in
argument_list|,
name|bytes
argument_list|)
expr_stmt|;
if|if
condition|(
name|bytes
operator|.
name|length
operator|<
name|offset
operator|+
name|length
condition|)
block|{
throw|throw
operator|new
name|IndexOutOfBoundsException
argument_list|(
operator|(
name|offset
operator|+
name|length
operator|)
operator|+
literal|"> "
operator|+
name|bytes
operator|.
name|length
argument_list|)
throw|;
block|}
name|bytes
operator|.
name|offset
operator|+=
name|offset
expr_stmt|;
name|bytes
operator|.
name|length
operator|=
name|length
expr_stmt|;
block|}
DECL|method|copyCompressedData
specifier|public
specifier|abstract
name|void
name|copyCompressedData
parameter_list|(
name|DataInput
name|in
parameter_list|,
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
function_decl|;
annotation|@
name|Override
DECL|method|clone
specifier|public
specifier|abstract
name|Decompressor
name|clone
parameter_list|()
function_decl|;
block|}
end_class
end_unit
