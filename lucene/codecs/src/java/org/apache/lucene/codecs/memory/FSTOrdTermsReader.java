begin_unit
begin_package
DECL|package|org.apache.lucene.codecs.memory
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|memory
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|BitSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|CorruptIndexException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DocsAndPositionsEnum
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DocsEnum
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|FieldInfo
operator|.
name|IndexOptions
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|FieldInfo
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|FieldInfos
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexFileNames
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SegmentInfo
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SegmentReadState
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|TermState
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Terms
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|TermsEnum
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|ByteArrayDataInput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|ChecksumIndexInput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexInput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|ArrayUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|automaton
operator|.
name|ByteRunAutomaton
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|automaton
operator|.
name|CompiledAutomaton
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Accountable
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Accountables
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Bits
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRefBuilder
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|RamUsageEstimator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|fst
operator|.
name|BytesRefFSTEnum
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|fst
operator|.
name|BytesRefFSTEnum
operator|.
name|InputOutput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|fst
operator|.
name|FST
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|fst
operator|.
name|Outputs
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|fst
operator|.
name|PositiveIntOutputs
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|fst
operator|.
name|Util
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|BlockTermState
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|FieldsProducer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|PostingsReaderBase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|CodecUtil
import|;
end_import
begin_comment
comment|/**   * FST-based terms dictionary reader.  *  * The FST index maps each term and its ord, and during seek   * the ord is used fetch metadata from a single block.  * The term dictionary is fully memory resident.  *  * @lucene.experimental  */
end_comment
begin_class
DECL|class|FSTOrdTermsReader
specifier|public
class|class
name|FSTOrdTermsReader
extends|extends
name|FieldsProducer
block|{
DECL|field|INTERVAL
specifier|static
specifier|final
name|int
name|INTERVAL
init|=
name|FSTOrdTermsWriter
operator|.
name|SKIP_INTERVAL
decl_stmt|;
DECL|field|fields
specifier|final
name|TreeMap
argument_list|<
name|String
argument_list|,
name|TermsReader
argument_list|>
name|fields
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|postingsReader
specifier|final
name|PostingsReaderBase
name|postingsReader
decl_stmt|;
comment|//static final boolean TEST = false;
DECL|method|FSTOrdTermsReader
specifier|public
name|FSTOrdTermsReader
parameter_list|(
name|SegmentReadState
name|state
parameter_list|,
name|PostingsReaderBase
name|postingsReader
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|String
name|termsIndexFileName
init|=
name|IndexFileNames
operator|.
name|segmentFileName
argument_list|(
name|state
operator|.
name|segmentInfo
operator|.
name|name
argument_list|,
name|state
operator|.
name|segmentSuffix
argument_list|,
name|FSTOrdTermsWriter
operator|.
name|TERMS_INDEX_EXTENSION
argument_list|)
decl_stmt|;
specifier|final
name|String
name|termsBlockFileName
init|=
name|IndexFileNames
operator|.
name|segmentFileName
argument_list|(
name|state
operator|.
name|segmentInfo
operator|.
name|name
argument_list|,
name|state
operator|.
name|segmentSuffix
argument_list|,
name|FSTOrdTermsWriter
operator|.
name|TERMS_BLOCK_EXTENSION
argument_list|)
decl_stmt|;
name|this
operator|.
name|postingsReader
operator|=
name|postingsReader
expr_stmt|;
name|ChecksumIndexInput
name|indexIn
init|=
literal|null
decl_stmt|;
name|IndexInput
name|blockIn
init|=
literal|null
decl_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|indexIn
operator|=
name|state
operator|.
name|directory
operator|.
name|openChecksumInput
argument_list|(
name|termsIndexFileName
argument_list|,
name|state
operator|.
name|context
argument_list|)
expr_stmt|;
name|blockIn
operator|=
name|state
operator|.
name|directory
operator|.
name|openInput
argument_list|(
name|termsBlockFileName
argument_list|,
name|state
operator|.
name|context
argument_list|)
expr_stmt|;
name|int
name|version
init|=
name|CodecUtil
operator|.
name|checkSegmentHeader
argument_list|(
name|indexIn
argument_list|,
name|FSTOrdTermsWriter
operator|.
name|TERMS_INDEX_CODEC_NAME
argument_list|,
name|FSTOrdTermsWriter
operator|.
name|VERSION_START
argument_list|,
name|FSTOrdTermsWriter
operator|.
name|VERSION_CURRENT
argument_list|,
name|state
operator|.
name|segmentInfo
operator|.
name|getId
argument_list|()
argument_list|,
name|state
operator|.
name|segmentSuffix
argument_list|)
decl_stmt|;
name|int
name|version2
init|=
name|CodecUtil
operator|.
name|checkSegmentHeader
argument_list|(
name|blockIn
argument_list|,
name|FSTOrdTermsWriter
operator|.
name|TERMS_CODEC_NAME
argument_list|,
name|FSTOrdTermsWriter
operator|.
name|VERSION_START
argument_list|,
name|FSTOrdTermsWriter
operator|.
name|VERSION_CURRENT
argument_list|,
name|state
operator|.
name|segmentInfo
operator|.
name|getId
argument_list|()
argument_list|,
name|state
operator|.
name|segmentSuffix
argument_list|)
decl_stmt|;
if|if
condition|(
name|version
operator|!=
name|version2
condition|)
block|{
throw|throw
operator|new
name|CorruptIndexException
argument_list|(
literal|"Format versions mismatch: index="
operator|+
name|version
operator|+
literal|", terms="
operator|+
name|version2
argument_list|,
name|blockIn
argument_list|)
throw|;
block|}
name|CodecUtil
operator|.
name|checksumEntireFile
argument_list|(
name|blockIn
argument_list|)
expr_stmt|;
name|this
operator|.
name|postingsReader
operator|.
name|init
argument_list|(
name|blockIn
argument_list|)
expr_stmt|;
name|seekDir
argument_list|(
name|blockIn
argument_list|)
expr_stmt|;
specifier|final
name|FieldInfos
name|fieldInfos
init|=
name|state
operator|.
name|fieldInfos
decl_stmt|;
specifier|final
name|int
name|numFields
init|=
name|blockIn
operator|.
name|readVInt
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numFields
condition|;
name|i
operator|++
control|)
block|{
name|FieldInfo
name|fieldInfo
init|=
name|fieldInfos
operator|.
name|fieldInfo
argument_list|(
name|blockIn
operator|.
name|readVInt
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|hasFreq
init|=
name|fieldInfo
operator|.
name|getIndexOptions
argument_list|()
operator|!=
name|IndexOptions
operator|.
name|DOCS_ONLY
decl_stmt|;
name|long
name|numTerms
init|=
name|blockIn
operator|.
name|readVLong
argument_list|()
decl_stmt|;
name|long
name|sumTotalTermFreq
init|=
name|hasFreq
condition|?
name|blockIn
operator|.
name|readVLong
argument_list|()
else|:
operator|-
literal|1
decl_stmt|;
name|long
name|sumDocFreq
init|=
name|blockIn
operator|.
name|readVLong
argument_list|()
decl_stmt|;
name|int
name|docCount
init|=
name|blockIn
operator|.
name|readVInt
argument_list|()
decl_stmt|;
name|int
name|longsSize
init|=
name|blockIn
operator|.
name|readVInt
argument_list|()
decl_stmt|;
name|FST
argument_list|<
name|Long
argument_list|>
name|index
init|=
operator|new
name|FST
argument_list|<>
argument_list|(
name|indexIn
argument_list|,
name|PositiveIntOutputs
operator|.
name|getSingleton
argument_list|()
argument_list|)
decl_stmt|;
name|TermsReader
name|current
init|=
operator|new
name|TermsReader
argument_list|(
name|fieldInfo
argument_list|,
name|blockIn
argument_list|,
name|numTerms
argument_list|,
name|sumTotalTermFreq
argument_list|,
name|sumDocFreq
argument_list|,
name|docCount
argument_list|,
name|longsSize
argument_list|,
name|index
argument_list|)
decl_stmt|;
name|TermsReader
name|previous
init|=
name|fields
operator|.
name|put
argument_list|(
name|fieldInfo
operator|.
name|name
argument_list|,
name|current
argument_list|)
decl_stmt|;
name|checkFieldSummary
argument_list|(
name|state
operator|.
name|segmentInfo
argument_list|,
name|indexIn
argument_list|,
name|blockIn
argument_list|,
name|current
argument_list|,
name|previous
argument_list|)
expr_stmt|;
block|}
name|CodecUtil
operator|.
name|checkFooter
argument_list|(
name|indexIn
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|success
condition|)
block|{
name|IOUtils
operator|.
name|close
argument_list|(
name|indexIn
argument_list|,
name|blockIn
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|IOUtils
operator|.
name|closeWhileHandlingException
argument_list|(
name|indexIn
argument_list|,
name|blockIn
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|seekDir
specifier|private
name|void
name|seekDir
parameter_list|(
name|IndexInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|in
operator|.
name|seek
argument_list|(
name|in
operator|.
name|length
argument_list|()
operator|-
name|CodecUtil
operator|.
name|footerLength
argument_list|()
operator|-
literal|8
argument_list|)
expr_stmt|;
name|in
operator|.
name|seek
argument_list|(
name|in
operator|.
name|readLong
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|checkFieldSummary
specifier|private
name|void
name|checkFieldSummary
parameter_list|(
name|SegmentInfo
name|info
parameter_list|,
name|IndexInput
name|indexIn
parameter_list|,
name|IndexInput
name|blockIn
parameter_list|,
name|TermsReader
name|field
parameter_list|,
name|TermsReader
name|previous
parameter_list|)
throws|throws
name|IOException
block|{
comment|// #docs with field must be<= #docs
if|if
condition|(
name|field
operator|.
name|docCount
argument_list|<
literal|0
operator|||
name|field
operator|.
name|docCount
argument_list|>
name|info
operator|.
name|getDocCount
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|CorruptIndexException
argument_list|(
literal|"invalid docCount: "
operator|+
name|field
operator|.
name|docCount
operator|+
literal|" maxDoc: "
operator|+
name|info
operator|.
name|getDocCount
argument_list|()
operator|+
literal|" (blockIn="
operator|+
name|blockIn
operator|+
literal|")"
argument_list|,
name|indexIn
argument_list|)
throw|;
block|}
comment|// #postings must be>= #docs with field
if|if
condition|(
name|field
operator|.
name|sumDocFreq
operator|<
name|field
operator|.
name|docCount
condition|)
block|{
throw|throw
operator|new
name|CorruptIndexException
argument_list|(
literal|"invalid sumDocFreq: "
operator|+
name|field
operator|.
name|sumDocFreq
operator|+
literal|" docCount: "
operator|+
name|field
operator|.
name|docCount
operator|+
literal|" (blockIn="
operator|+
name|blockIn
operator|+
literal|")"
argument_list|,
name|indexIn
argument_list|)
throw|;
block|}
comment|// #positions must be>= #postings
if|if
condition|(
name|field
operator|.
name|sumTotalTermFreq
operator|!=
operator|-
literal|1
operator|&&
name|field
operator|.
name|sumTotalTermFreq
operator|<
name|field
operator|.
name|sumDocFreq
condition|)
block|{
throw|throw
operator|new
name|CorruptIndexException
argument_list|(
literal|"invalid sumTotalTermFreq: "
operator|+
name|field
operator|.
name|sumTotalTermFreq
operator|+
literal|" sumDocFreq: "
operator|+
name|field
operator|.
name|sumDocFreq
operator|+
literal|" (blockIn="
operator|+
name|blockIn
operator|+
literal|")"
argument_list|,
name|indexIn
argument_list|)
throw|;
block|}
if|if
condition|(
name|previous
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|CorruptIndexException
argument_list|(
literal|"duplicate fields: "
operator|+
name|field
operator|.
name|fieldInfo
operator|.
name|name
operator|+
literal|" (blockIn="
operator|+
name|blockIn
operator|+
literal|")"
argument_list|,
name|indexIn
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|iterator
specifier|public
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableSet
argument_list|(
name|fields
operator|.
name|keySet
argument_list|()
argument_list|)
operator|.
name|iterator
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|terms
specifier|public
name|Terms
name|terms
parameter_list|(
name|String
name|field
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|field
operator|!=
literal|null
assert|;
return|return
name|fields
operator|.
name|get
argument_list|(
name|field
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|size
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|fields
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|IOUtils
operator|.
name|close
argument_list|(
name|postingsReader
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|fields
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|TermsReader
specifier|final
class|class
name|TermsReader
extends|extends
name|Terms
implements|implements
name|Accountable
block|{
DECL|field|fieldInfo
specifier|final
name|FieldInfo
name|fieldInfo
decl_stmt|;
DECL|field|numTerms
specifier|final
name|long
name|numTerms
decl_stmt|;
DECL|field|sumTotalTermFreq
specifier|final
name|long
name|sumTotalTermFreq
decl_stmt|;
DECL|field|sumDocFreq
specifier|final
name|long
name|sumDocFreq
decl_stmt|;
DECL|field|docCount
specifier|final
name|int
name|docCount
decl_stmt|;
DECL|field|longsSize
specifier|final
name|int
name|longsSize
decl_stmt|;
DECL|field|index
specifier|final
name|FST
argument_list|<
name|Long
argument_list|>
name|index
decl_stmt|;
DECL|field|numSkipInfo
specifier|final
name|int
name|numSkipInfo
decl_stmt|;
DECL|field|skipInfo
specifier|final
name|long
index|[]
name|skipInfo
decl_stmt|;
DECL|field|statsBlock
specifier|final
name|byte
index|[]
name|statsBlock
decl_stmt|;
DECL|field|metaLongsBlock
specifier|final
name|byte
index|[]
name|metaLongsBlock
decl_stmt|;
DECL|field|metaBytesBlock
specifier|final
name|byte
index|[]
name|metaBytesBlock
decl_stmt|;
DECL|method|TermsReader
name|TermsReader
parameter_list|(
name|FieldInfo
name|fieldInfo
parameter_list|,
name|IndexInput
name|blockIn
parameter_list|,
name|long
name|numTerms
parameter_list|,
name|long
name|sumTotalTermFreq
parameter_list|,
name|long
name|sumDocFreq
parameter_list|,
name|int
name|docCount
parameter_list|,
name|int
name|longsSize
parameter_list|,
name|FST
argument_list|<
name|Long
argument_list|>
name|index
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|fieldInfo
operator|=
name|fieldInfo
expr_stmt|;
name|this
operator|.
name|numTerms
operator|=
name|numTerms
expr_stmt|;
name|this
operator|.
name|sumTotalTermFreq
operator|=
name|sumTotalTermFreq
expr_stmt|;
name|this
operator|.
name|sumDocFreq
operator|=
name|sumDocFreq
expr_stmt|;
name|this
operator|.
name|docCount
operator|=
name|docCount
expr_stmt|;
name|this
operator|.
name|longsSize
operator|=
name|longsSize
expr_stmt|;
name|this
operator|.
name|index
operator|=
name|index
expr_stmt|;
assert|assert
operator|(
name|numTerms
operator|&
operator|(
operator|~
literal|0xffffffffL
operator|)
operator|)
operator|==
literal|0
assert|;
specifier|final
name|int
name|numBlocks
init|=
call|(
name|int
call|)
argument_list|(
name|numTerms
operator|+
name|INTERVAL
operator|-
literal|1
argument_list|)
operator|/
name|INTERVAL
decl_stmt|;
name|this
operator|.
name|numSkipInfo
operator|=
name|longsSize
operator|+
literal|3
expr_stmt|;
name|this
operator|.
name|skipInfo
operator|=
operator|new
name|long
index|[
name|numBlocks
operator|*
name|numSkipInfo
index|]
expr_stmt|;
name|this
operator|.
name|statsBlock
operator|=
operator|new
name|byte
index|[
operator|(
name|int
operator|)
name|blockIn
operator|.
name|readVLong
argument_list|()
index|]
expr_stmt|;
name|this
operator|.
name|metaLongsBlock
operator|=
operator|new
name|byte
index|[
operator|(
name|int
operator|)
name|blockIn
operator|.
name|readVLong
argument_list|()
index|]
expr_stmt|;
name|this
operator|.
name|metaBytesBlock
operator|=
operator|new
name|byte
index|[
operator|(
name|int
operator|)
name|blockIn
operator|.
name|readVLong
argument_list|()
index|]
expr_stmt|;
name|int
name|last
init|=
literal|0
decl_stmt|,
name|next
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|numBlocks
condition|;
name|i
operator|++
control|)
block|{
name|next
operator|=
name|numSkipInfo
operator|*
name|i
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|numSkipInfo
condition|;
name|j
operator|++
control|)
block|{
name|skipInfo
index|[
name|next
operator|+
name|j
index|]
operator|=
name|skipInfo
index|[
name|last
operator|+
name|j
index|]
operator|+
name|blockIn
operator|.
name|readVLong
argument_list|()
expr_stmt|;
block|}
name|last
operator|=
name|next
expr_stmt|;
block|}
name|blockIn
operator|.
name|readBytes
argument_list|(
name|statsBlock
argument_list|,
literal|0
argument_list|,
name|statsBlock
operator|.
name|length
argument_list|)
expr_stmt|;
name|blockIn
operator|.
name|readBytes
argument_list|(
name|metaLongsBlock
argument_list|,
literal|0
argument_list|,
name|metaLongsBlock
operator|.
name|length
argument_list|)
expr_stmt|;
name|blockIn
operator|.
name|readBytes
argument_list|(
name|metaBytesBlock
argument_list|,
literal|0
argument_list|,
name|metaBytesBlock
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
DECL|method|hasFreqs
specifier|public
name|boolean
name|hasFreqs
parameter_list|()
block|{
return|return
name|fieldInfo
operator|.
name|getIndexOptions
argument_list|()
operator|.
name|compareTo
argument_list|(
name|IndexOptions
operator|.
name|DOCS_AND_FREQS
argument_list|)
operator|>=
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|hasOffsets
specifier|public
name|boolean
name|hasOffsets
parameter_list|()
block|{
return|return
name|fieldInfo
operator|.
name|getIndexOptions
argument_list|()
operator|.
name|compareTo
argument_list|(
name|IndexOptions
operator|.
name|DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS
argument_list|)
operator|>=
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|hasPositions
specifier|public
name|boolean
name|hasPositions
parameter_list|()
block|{
return|return
name|fieldInfo
operator|.
name|getIndexOptions
argument_list|()
operator|.
name|compareTo
argument_list|(
name|IndexOptions
operator|.
name|DOCS_AND_FREQS_AND_POSITIONS
argument_list|)
operator|>=
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|hasPayloads
specifier|public
name|boolean
name|hasPayloads
parameter_list|()
block|{
return|return
name|fieldInfo
operator|.
name|hasPayloads
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|size
specifier|public
name|long
name|size
parameter_list|()
block|{
return|return
name|numTerms
return|;
block|}
annotation|@
name|Override
DECL|method|getSumTotalTermFreq
specifier|public
name|long
name|getSumTotalTermFreq
parameter_list|()
block|{
return|return
name|sumTotalTermFreq
return|;
block|}
annotation|@
name|Override
DECL|method|getSumDocFreq
specifier|public
name|long
name|getSumDocFreq
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|sumDocFreq
return|;
block|}
annotation|@
name|Override
DECL|method|getDocCount
specifier|public
name|int
name|getDocCount
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|docCount
return|;
block|}
annotation|@
name|Override
DECL|method|iterator
specifier|public
name|TermsEnum
name|iterator
parameter_list|(
name|TermsEnum
name|reuse
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|SegmentTermsEnum
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|intersect
specifier|public
name|TermsEnum
name|intersect
parameter_list|(
name|CompiledAutomaton
name|compiled
parameter_list|,
name|BytesRef
name|startTerm
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|IntersectTermsEnum
argument_list|(
name|compiled
argument_list|,
name|startTerm
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|ramBytesUsed
specifier|public
name|long
name|ramBytesUsed
parameter_list|()
block|{
name|long
name|ramBytesUsed
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|index
operator|!=
literal|null
condition|)
block|{
name|ramBytesUsed
operator|+=
name|index
operator|.
name|ramBytesUsed
argument_list|()
expr_stmt|;
name|ramBytesUsed
operator|+=
name|RamUsageEstimator
operator|.
name|sizeOf
argument_list|(
name|metaBytesBlock
argument_list|)
expr_stmt|;
name|ramBytesUsed
operator|+=
name|RamUsageEstimator
operator|.
name|sizeOf
argument_list|(
name|metaLongsBlock
argument_list|)
expr_stmt|;
name|ramBytesUsed
operator|+=
name|RamUsageEstimator
operator|.
name|sizeOf
argument_list|(
name|skipInfo
argument_list|)
expr_stmt|;
name|ramBytesUsed
operator|+=
name|RamUsageEstimator
operator|.
name|sizeOf
argument_list|(
name|statsBlock
argument_list|)
expr_stmt|;
block|}
return|return
name|ramBytesUsed
return|;
block|}
annotation|@
name|Override
DECL|method|getChildResources
specifier|public
name|Iterable
argument_list|<
name|?
extends|extends
name|Accountable
argument_list|>
name|getChildResources
parameter_list|()
block|{
if|if
condition|(
name|index
operator|==
literal|null
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|Collections
operator|.
name|singletonList
argument_list|(
name|Accountables
operator|.
name|namedAccountable
argument_list|(
literal|"terms"
argument_list|,
name|index
argument_list|)
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"FSTOrdTerms(terms="
operator|+
name|numTerms
operator|+
literal|",postings="
operator|+
name|sumDocFreq
operator|+
literal|",positions="
operator|+
name|sumTotalTermFreq
operator|+
literal|",docs="
operator|+
name|docCount
operator|+
literal|")"
return|;
block|}
comment|// Only wraps common operations for PBF interact
DECL|class|BaseTermsEnum
specifier|abstract
class|class
name|BaseTermsEnum
extends|extends
name|TermsEnum
block|{
comment|/* Current term's ord, starts from 0 */
DECL|field|ord
name|long
name|ord
decl_stmt|;
comment|/* Current term stats + decoded metadata (customized by PBF) */
DECL|field|state
specifier|final
name|BlockTermState
name|state
decl_stmt|;
comment|/* Datainput to load stats& metadata */
DECL|field|statsReader
specifier|final
name|ByteArrayDataInput
name|statsReader
init|=
operator|new
name|ByteArrayDataInput
argument_list|()
decl_stmt|;
DECL|field|metaLongsReader
specifier|final
name|ByteArrayDataInput
name|metaLongsReader
init|=
operator|new
name|ByteArrayDataInput
argument_list|()
decl_stmt|;
DECL|field|metaBytesReader
specifier|final
name|ByteArrayDataInput
name|metaBytesReader
init|=
operator|new
name|ByteArrayDataInput
argument_list|()
decl_stmt|;
comment|/* To which block is buffered */
DECL|field|statsBlockOrd
name|int
name|statsBlockOrd
decl_stmt|;
DECL|field|metaBlockOrd
name|int
name|metaBlockOrd
decl_stmt|;
comment|/* Current buffered metadata (long[]& byte[]) */
DECL|field|longs
name|long
index|[]
index|[]
name|longs
decl_stmt|;
DECL|field|bytesStart
name|int
index|[]
name|bytesStart
decl_stmt|;
DECL|field|bytesLength
name|int
index|[]
name|bytesLength
decl_stmt|;
comment|/* Current buffered stats (df& ttf) */
DECL|field|docFreq
name|int
index|[]
name|docFreq
decl_stmt|;
DECL|field|totalTermFreq
name|long
index|[]
name|totalTermFreq
decl_stmt|;
DECL|method|BaseTermsEnum
name|BaseTermsEnum
parameter_list|()
throws|throws
name|IOException
block|{
name|this
operator|.
name|state
operator|=
name|postingsReader
operator|.
name|newTermState
argument_list|()
expr_stmt|;
name|this
operator|.
name|statsReader
operator|.
name|reset
argument_list|(
name|statsBlock
argument_list|)
expr_stmt|;
name|this
operator|.
name|metaLongsReader
operator|.
name|reset
argument_list|(
name|metaLongsBlock
argument_list|)
expr_stmt|;
name|this
operator|.
name|metaBytesReader
operator|.
name|reset
argument_list|(
name|metaBytesBlock
argument_list|)
expr_stmt|;
name|this
operator|.
name|longs
operator|=
operator|new
name|long
index|[
name|INTERVAL
index|]
index|[
name|longsSize
index|]
expr_stmt|;
name|this
operator|.
name|bytesStart
operator|=
operator|new
name|int
index|[
name|INTERVAL
index|]
expr_stmt|;
name|this
operator|.
name|bytesLength
operator|=
operator|new
name|int
index|[
name|INTERVAL
index|]
expr_stmt|;
name|this
operator|.
name|docFreq
operator|=
operator|new
name|int
index|[
name|INTERVAL
index|]
expr_stmt|;
name|this
operator|.
name|totalTermFreq
operator|=
operator|new
name|long
index|[
name|INTERVAL
index|]
expr_stmt|;
name|this
operator|.
name|statsBlockOrd
operator|=
operator|-
literal|1
expr_stmt|;
name|this
operator|.
name|metaBlockOrd
operator|=
operator|-
literal|1
expr_stmt|;
if|if
condition|(
operator|!
name|hasFreqs
argument_list|()
condition|)
block|{
name|Arrays
operator|.
name|fill
argument_list|(
name|totalTermFreq
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Decodes stats data into term state */
DECL|method|decodeStats
name|void
name|decodeStats
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|int
name|upto
init|=
operator|(
name|int
operator|)
name|ord
operator|%
name|INTERVAL
decl_stmt|;
specifier|final
name|int
name|oldBlockOrd
init|=
name|statsBlockOrd
decl_stmt|;
name|statsBlockOrd
operator|=
operator|(
name|int
operator|)
name|ord
operator|/
name|INTERVAL
expr_stmt|;
if|if
condition|(
name|oldBlockOrd
operator|!=
name|statsBlockOrd
condition|)
block|{
name|refillStats
argument_list|()
expr_stmt|;
block|}
name|state
operator|.
name|docFreq
operator|=
name|docFreq
index|[
name|upto
index|]
expr_stmt|;
name|state
operator|.
name|totalTermFreq
operator|=
name|totalTermFreq
index|[
name|upto
index|]
expr_stmt|;
block|}
comment|/** Let PBF decode metadata */
DECL|method|decodeMetaData
name|void
name|decodeMetaData
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|int
name|upto
init|=
operator|(
name|int
operator|)
name|ord
operator|%
name|INTERVAL
decl_stmt|;
specifier|final
name|int
name|oldBlockOrd
init|=
name|metaBlockOrd
decl_stmt|;
name|metaBlockOrd
operator|=
operator|(
name|int
operator|)
name|ord
operator|/
name|INTERVAL
expr_stmt|;
if|if
condition|(
name|metaBlockOrd
operator|!=
name|oldBlockOrd
condition|)
block|{
name|refillMetadata
argument_list|()
expr_stmt|;
block|}
name|metaBytesReader
operator|.
name|setPosition
argument_list|(
name|bytesStart
index|[
name|upto
index|]
argument_list|)
expr_stmt|;
name|postingsReader
operator|.
name|decodeTerm
argument_list|(
name|longs
index|[
name|upto
index|]
argument_list|,
name|metaBytesReader
argument_list|,
name|fieldInfo
argument_list|,
name|state
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/** Load current stats shard */
DECL|method|refillStats
specifier|final
name|void
name|refillStats
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|int
name|offset
init|=
name|statsBlockOrd
operator|*
name|numSkipInfo
decl_stmt|;
specifier|final
name|int
name|statsFP
init|=
operator|(
name|int
operator|)
name|skipInfo
index|[
name|offset
index|]
decl_stmt|;
name|statsReader
operator|.
name|setPosition
argument_list|(
name|statsFP
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|INTERVAL
operator|&&
operator|!
name|statsReader
operator|.
name|eof
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|int
name|code
init|=
name|statsReader
operator|.
name|readVInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|hasFreqs
argument_list|()
condition|)
block|{
name|docFreq
index|[
name|i
index|]
operator|=
operator|(
name|code
operator|>>>
literal|1
operator|)
expr_stmt|;
if|if
condition|(
operator|(
name|code
operator|&
literal|1
operator|)
operator|==
literal|1
condition|)
block|{
name|totalTermFreq
index|[
name|i
index|]
operator|=
name|docFreq
index|[
name|i
index|]
expr_stmt|;
block|}
else|else
block|{
name|totalTermFreq
index|[
name|i
index|]
operator|=
name|docFreq
index|[
name|i
index|]
operator|+
name|statsReader
operator|.
name|readVLong
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|docFreq
index|[
name|i
index|]
operator|=
name|code
expr_stmt|;
block|}
block|}
block|}
comment|/** Load current metadata shard */
DECL|method|refillMetadata
specifier|final
name|void
name|refillMetadata
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|int
name|offset
init|=
name|metaBlockOrd
operator|*
name|numSkipInfo
decl_stmt|;
specifier|final
name|int
name|metaLongsFP
init|=
operator|(
name|int
operator|)
name|skipInfo
index|[
name|offset
operator|+
literal|1
index|]
decl_stmt|;
specifier|final
name|int
name|metaBytesFP
init|=
operator|(
name|int
operator|)
name|skipInfo
index|[
name|offset
operator|+
literal|2
index|]
decl_stmt|;
name|metaLongsReader
operator|.
name|setPosition
argument_list|(
name|metaLongsFP
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|longsSize
condition|;
name|j
operator|++
control|)
block|{
name|longs
index|[
literal|0
index|]
index|[
name|j
index|]
operator|=
name|skipInfo
index|[
name|offset
operator|+
literal|3
operator|+
name|j
index|]
operator|+
name|metaLongsReader
operator|.
name|readVLong
argument_list|()
expr_stmt|;
block|}
name|bytesStart
index|[
literal|0
index|]
operator|=
name|metaBytesFP
expr_stmt|;
name|bytesLength
index|[
literal|0
index|]
operator|=
operator|(
name|int
operator|)
name|metaLongsReader
operator|.
name|readVLong
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|INTERVAL
operator|&&
operator|!
name|metaLongsReader
operator|.
name|eof
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|longsSize
condition|;
name|j
operator|++
control|)
block|{
name|longs
index|[
name|i
index|]
index|[
name|j
index|]
operator|=
name|longs
index|[
name|i
operator|-
literal|1
index|]
index|[
name|j
index|]
operator|+
name|metaLongsReader
operator|.
name|readVLong
argument_list|()
expr_stmt|;
block|}
name|bytesStart
index|[
name|i
index|]
operator|=
name|bytesStart
index|[
name|i
operator|-
literal|1
index|]
operator|+
name|bytesLength
index|[
name|i
operator|-
literal|1
index|]
expr_stmt|;
name|bytesLength
index|[
name|i
index|]
operator|=
operator|(
name|int
operator|)
name|metaLongsReader
operator|.
name|readVLong
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|termState
specifier|public
name|TermState
name|termState
parameter_list|()
throws|throws
name|IOException
block|{
name|decodeMetaData
argument_list|()
expr_stmt|;
return|return
name|state
operator|.
name|clone
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|docFreq
specifier|public
name|int
name|docFreq
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|state
operator|.
name|docFreq
return|;
block|}
annotation|@
name|Override
DECL|method|totalTermFreq
specifier|public
name|long
name|totalTermFreq
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|state
operator|.
name|totalTermFreq
return|;
block|}
annotation|@
name|Override
DECL|method|docs
specifier|public
name|DocsEnum
name|docs
parameter_list|(
name|Bits
name|liveDocs
parameter_list|,
name|DocsEnum
name|reuse
parameter_list|,
name|int
name|flags
parameter_list|)
throws|throws
name|IOException
block|{
name|decodeMetaData
argument_list|()
expr_stmt|;
return|return
name|postingsReader
operator|.
name|docs
argument_list|(
name|fieldInfo
argument_list|,
name|state
argument_list|,
name|liveDocs
argument_list|,
name|reuse
argument_list|,
name|flags
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|docsAndPositions
specifier|public
name|DocsAndPositionsEnum
name|docsAndPositions
parameter_list|(
name|Bits
name|liveDocs
parameter_list|,
name|DocsAndPositionsEnum
name|reuse
parameter_list|,
name|int
name|flags
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|hasPositions
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|decodeMetaData
argument_list|()
expr_stmt|;
return|return
name|postingsReader
operator|.
name|docsAndPositions
argument_list|(
name|fieldInfo
argument_list|,
name|state
argument_list|,
name|liveDocs
argument_list|,
name|reuse
argument_list|,
name|flags
argument_list|)
return|;
block|}
comment|// TODO: this can be achieved by making use of Util.getByOutput()
comment|//           and should have related tests
annotation|@
name|Override
DECL|method|seekExact
specifier|public
name|void
name|seekExact
parameter_list|(
name|long
name|ord
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|ord
specifier|public
name|long
name|ord
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
comment|// Iterates through all terms in this field
DECL|class|SegmentTermsEnum
specifier|private
specifier|final
class|class
name|SegmentTermsEnum
extends|extends
name|BaseTermsEnum
block|{
DECL|field|fstEnum
specifier|final
name|BytesRefFSTEnum
argument_list|<
name|Long
argument_list|>
name|fstEnum
decl_stmt|;
comment|/* Current term, null when enum ends or unpositioned */
DECL|field|term
name|BytesRef
name|term
decl_stmt|;
comment|/* True when current term's metadata is decoded */
DECL|field|decoded
name|boolean
name|decoded
decl_stmt|;
comment|/* True when current enum is 'positioned' by seekExact(TermState) */
DECL|field|seekPending
name|boolean
name|seekPending
decl_stmt|;
DECL|method|SegmentTermsEnum
name|SegmentTermsEnum
parameter_list|()
throws|throws
name|IOException
block|{
name|this
operator|.
name|fstEnum
operator|=
operator|new
name|BytesRefFSTEnum
argument_list|<>
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|this
operator|.
name|decoded
operator|=
literal|false
expr_stmt|;
name|this
operator|.
name|seekPending
operator|=
literal|false
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|term
specifier|public
name|BytesRef
name|term
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|term
return|;
block|}
annotation|@
name|Override
DECL|method|decodeMetaData
name|void
name|decodeMetaData
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|decoded
operator|&&
operator|!
name|seekPending
condition|)
block|{
name|super
operator|.
name|decodeMetaData
argument_list|()
expr_stmt|;
name|decoded
operator|=
literal|true
expr_stmt|;
block|}
block|}
comment|// Update current enum according to FSTEnum
DECL|method|updateEnum
name|void
name|updateEnum
parameter_list|(
specifier|final
name|InputOutput
argument_list|<
name|Long
argument_list|>
name|pair
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|pair
operator|==
literal|null
condition|)
block|{
name|term
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|term
operator|=
name|pair
operator|.
name|input
expr_stmt|;
name|ord
operator|=
name|pair
operator|.
name|output
expr_stmt|;
name|decodeStats
argument_list|()
expr_stmt|;
block|}
name|decoded
operator|=
literal|false
expr_stmt|;
name|seekPending
operator|=
literal|false
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|next
specifier|public
name|BytesRef
name|next
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|seekPending
condition|)
block|{
comment|// previously positioned, but termOutputs not fetched
name|seekPending
operator|=
literal|false
expr_stmt|;
name|SeekStatus
name|status
init|=
name|seekCeil
argument_list|(
name|term
argument_list|)
decl_stmt|;
assert|assert
name|status
operator|==
name|SeekStatus
operator|.
name|FOUND
assert|;
comment|// must positioned on valid term
block|}
name|updateEnum
argument_list|(
name|fstEnum
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|term
return|;
block|}
annotation|@
name|Override
DECL|method|seekExact
specifier|public
name|boolean
name|seekExact
parameter_list|(
name|BytesRef
name|target
parameter_list|)
throws|throws
name|IOException
block|{
name|updateEnum
argument_list|(
name|fstEnum
operator|.
name|seekExact
argument_list|(
name|target
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|term
operator|!=
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|seekCeil
specifier|public
name|SeekStatus
name|seekCeil
parameter_list|(
name|BytesRef
name|target
parameter_list|)
throws|throws
name|IOException
block|{
name|updateEnum
argument_list|(
name|fstEnum
operator|.
name|seekCeil
argument_list|(
name|target
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|term
operator|==
literal|null
condition|)
block|{
return|return
name|SeekStatus
operator|.
name|END
return|;
block|}
else|else
block|{
return|return
name|term
operator|.
name|equals
argument_list|(
name|target
argument_list|)
condition|?
name|SeekStatus
operator|.
name|FOUND
else|:
name|SeekStatus
operator|.
name|NOT_FOUND
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|seekExact
specifier|public
name|void
name|seekExact
parameter_list|(
name|BytesRef
name|target
parameter_list|,
name|TermState
name|otherState
parameter_list|)
block|{
if|if
condition|(
operator|!
name|target
operator|.
name|equals
argument_list|(
name|term
argument_list|)
condition|)
block|{
name|state
operator|.
name|copyFrom
argument_list|(
name|otherState
argument_list|)
expr_stmt|;
name|term
operator|=
name|BytesRef
operator|.
name|deepCopyOf
argument_list|(
name|target
argument_list|)
expr_stmt|;
name|seekPending
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
comment|// Iterates intersect result with automaton (cannot seek!)
DECL|class|IntersectTermsEnum
specifier|private
specifier|final
class|class
name|IntersectTermsEnum
extends|extends
name|BaseTermsEnum
block|{
comment|/* Current term, null when enum ends or unpositioned */
DECL|field|term
name|BytesRefBuilder
name|term
decl_stmt|;
comment|/* True when current term's metadata is decoded */
DECL|field|decoded
name|boolean
name|decoded
decl_stmt|;
comment|/* True when there is pending term when calling next() */
DECL|field|pending
name|boolean
name|pending
decl_stmt|;
comment|/* stack to record how current term is constructed,         * used to accumulate metadata or rewind term:        *   level == term.length + 1,        *         == 0 when term is null */
DECL|field|stack
name|Frame
index|[]
name|stack
decl_stmt|;
DECL|field|level
name|int
name|level
decl_stmt|;
comment|/* term dict fst */
DECL|field|fst
specifier|final
name|FST
argument_list|<
name|Long
argument_list|>
name|fst
decl_stmt|;
DECL|field|fstReader
specifier|final
name|FST
operator|.
name|BytesReader
name|fstReader
decl_stmt|;
DECL|field|fstOutputs
specifier|final
name|Outputs
argument_list|<
name|Long
argument_list|>
name|fstOutputs
decl_stmt|;
comment|/* query automaton to intersect with */
DECL|field|fsa
specifier|final
name|ByteRunAutomaton
name|fsa
decl_stmt|;
DECL|class|Frame
specifier|private
specifier|final
class|class
name|Frame
block|{
comment|/* fst stats */
DECL|field|arc
name|FST
operator|.
name|Arc
argument_list|<
name|Long
argument_list|>
name|arc
decl_stmt|;
comment|/* automaton stats */
DECL|field|state
name|int
name|state
decl_stmt|;
DECL|method|Frame
name|Frame
parameter_list|()
block|{
name|this
operator|.
name|arc
operator|=
operator|new
name|FST
operator|.
name|Arc
argument_list|<>
argument_list|()
expr_stmt|;
name|this
operator|.
name|state
operator|=
operator|-
literal|1
expr_stmt|;
block|}
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"arc="
operator|+
name|arc
operator|+
literal|" state="
operator|+
name|state
return|;
block|}
block|}
DECL|method|IntersectTermsEnum
name|IntersectTermsEnum
parameter_list|(
name|CompiledAutomaton
name|compiled
parameter_list|,
name|BytesRef
name|startTerm
parameter_list|)
throws|throws
name|IOException
block|{
comment|//if (TEST) System.out.println("Enum init, startTerm=" + startTerm);
name|this
operator|.
name|fst
operator|=
name|index
expr_stmt|;
name|this
operator|.
name|fstReader
operator|=
name|fst
operator|.
name|getBytesReader
argument_list|()
expr_stmt|;
name|this
operator|.
name|fstOutputs
operator|=
name|index
operator|.
name|outputs
expr_stmt|;
name|this
operator|.
name|fsa
operator|=
name|compiled
operator|.
name|runAutomaton
expr_stmt|;
name|this
operator|.
name|level
operator|=
operator|-
literal|1
expr_stmt|;
name|this
operator|.
name|stack
operator|=
operator|new
name|Frame
index|[
literal|16
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|stack
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|this
operator|.
name|stack
index|[
name|i
index|]
operator|=
operator|new
name|Frame
argument_list|()
expr_stmt|;
block|}
name|Frame
name|frame
decl_stmt|;
name|frame
operator|=
name|loadVirtualFrame
argument_list|(
name|newFrame
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|level
operator|++
expr_stmt|;
name|frame
operator|=
name|loadFirstFrame
argument_list|(
name|newFrame
argument_list|()
argument_list|)
expr_stmt|;
name|pushFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|this
operator|.
name|decoded
operator|=
literal|false
expr_stmt|;
name|this
operator|.
name|pending
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|startTerm
operator|==
literal|null
condition|)
block|{
name|pending
operator|=
name|isAccept
argument_list|(
name|topFrame
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|doSeekCeil
argument_list|(
name|startTerm
argument_list|)
expr_stmt|;
name|pending
operator|=
operator|(
name|term
operator|==
literal|null
operator|||
operator|!
name|startTerm
operator|.
name|equals
argument_list|(
name|term
operator|.
name|get
argument_list|()
argument_list|)
operator|)
operator|&&
name|isValid
argument_list|(
name|topFrame
argument_list|()
argument_list|)
operator|&&
name|isAccept
argument_list|(
name|topFrame
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|term
specifier|public
name|BytesRef
name|term
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|term
operator|==
literal|null
condition|?
literal|null
else|:
name|term
operator|.
name|get
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|decodeMetaData
name|void
name|decodeMetaData
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|decoded
condition|)
block|{
name|super
operator|.
name|decodeMetaData
argument_list|()
expr_stmt|;
name|decoded
operator|=
literal|true
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|decodeStats
name|void
name|decodeStats
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|FST
operator|.
name|Arc
argument_list|<
name|Long
argument_list|>
name|arc
init|=
name|topFrame
argument_list|()
operator|.
name|arc
decl_stmt|;
assert|assert
name|arc
operator|.
name|nextFinalOutput
operator|==
name|fstOutputs
operator|.
name|getNoOutput
argument_list|()
assert|;
name|ord
operator|=
name|arc
operator|.
name|output
expr_stmt|;
name|super
operator|.
name|decodeStats
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|seekCeil
specifier|public
name|SeekStatus
name|seekCeil
parameter_list|(
name|BytesRef
name|target
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|next
specifier|public
name|BytesRef
name|next
parameter_list|()
throws|throws
name|IOException
block|{
comment|//if (TEST) System.out.println("Enum next()");
if|if
condition|(
name|pending
condition|)
block|{
name|pending
operator|=
literal|false
expr_stmt|;
name|decodeStats
argument_list|()
expr_stmt|;
return|return
name|term
argument_list|()
return|;
block|}
name|decoded
operator|=
literal|false
expr_stmt|;
name|DFS
label|:
while|while
condition|(
name|level
operator|>
literal|0
condition|)
block|{
name|Frame
name|frame
init|=
name|newFrame
argument_list|()
decl_stmt|;
if|if
condition|(
name|loadExpandFrame
argument_list|(
name|topFrame
argument_list|()
argument_list|,
name|frame
argument_list|)
operator|!=
literal|null
condition|)
block|{
comment|// has valid target
name|pushFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
if|if
condition|(
name|isAccept
argument_list|(
name|frame
argument_list|)
condition|)
block|{
comment|// gotcha
break|break;
block|}
continue|continue;
comment|// check next target
block|}
name|frame
operator|=
name|popFrame
argument_list|()
expr_stmt|;
while|while
condition|(
name|level
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|loadNextFrame
argument_list|(
name|topFrame
argument_list|()
argument_list|,
name|frame
argument_list|)
operator|!=
literal|null
condition|)
block|{
comment|// has valid sibling
name|pushFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
if|if
condition|(
name|isAccept
argument_list|(
name|frame
argument_list|)
condition|)
block|{
comment|// gotcha
break|break
name|DFS
break|;
block|}
continue|continue
name|DFS
continue|;
comment|// check next target
block|}
name|frame
operator|=
name|popFrame
argument_list|()
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
name|decodeStats
argument_list|()
expr_stmt|;
return|return
name|term
argument_list|()
return|;
block|}
DECL|method|doSeekCeil
name|BytesRef
name|doSeekCeil
parameter_list|(
name|BytesRef
name|target
parameter_list|)
throws|throws
name|IOException
block|{
comment|//if (TEST) System.out.println("Enum doSeekCeil()");
name|Frame
name|frame
init|=
literal|null
decl_stmt|;
name|int
name|label
decl_stmt|,
name|upto
init|=
literal|0
decl_stmt|,
name|limit
init|=
name|target
operator|.
name|length
decl_stmt|;
while|while
condition|(
name|upto
operator|<
name|limit
condition|)
block|{
comment|// to target prefix, or ceil label (rewind prefix)
name|frame
operator|=
name|newFrame
argument_list|()
expr_stmt|;
name|label
operator|=
name|target
operator|.
name|bytes
index|[
name|upto
index|]
operator|&
literal|0xff
expr_stmt|;
name|frame
operator|=
name|loadCeilFrame
argument_list|(
name|label
argument_list|,
name|topFrame
argument_list|()
argument_list|,
name|frame
argument_list|)
expr_stmt|;
if|if
condition|(
name|frame
operator|==
literal|null
operator|||
name|frame
operator|.
name|arc
operator|.
name|label
operator|!=
name|label
condition|)
block|{
break|break;
block|}
assert|assert
name|isValid
argument_list|(
name|frame
argument_list|)
assert|;
comment|// target must be fetched from automaton
name|pushFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|upto
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|upto
operator|==
name|limit
condition|)
block|{
comment|// got target
return|return
name|term
argument_list|()
return|;
block|}
if|if
condition|(
name|frame
operator|!=
literal|null
condition|)
block|{
comment|// got larger term('s prefix)
name|pushFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
return|return
name|isAccept
argument_list|(
name|frame
argument_list|)
condition|?
name|term
argument_list|()
else|:
name|next
argument_list|()
return|;
block|}
while|while
condition|(
name|level
operator|>
literal|0
condition|)
block|{
comment|// got target's prefix, advance to larger term
name|frame
operator|=
name|popFrame
argument_list|()
expr_stmt|;
while|while
condition|(
name|level
operator|>
literal|0
operator|&&
operator|!
name|canRewind
argument_list|(
name|frame
argument_list|)
condition|)
block|{
name|frame
operator|=
name|popFrame
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|loadNextFrame
argument_list|(
name|topFrame
argument_list|()
argument_list|,
name|frame
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|pushFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
return|return
name|isAccept
argument_list|(
name|frame
argument_list|)
condition|?
name|term
argument_list|()
else|:
name|next
argument_list|()
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/** Virtual frame, never pop */
DECL|method|loadVirtualFrame
name|Frame
name|loadVirtualFrame
parameter_list|(
name|Frame
name|frame
parameter_list|)
throws|throws
name|IOException
block|{
name|frame
operator|.
name|arc
operator|.
name|output
operator|=
name|fstOutputs
operator|.
name|getNoOutput
argument_list|()
expr_stmt|;
name|frame
operator|.
name|arc
operator|.
name|nextFinalOutput
operator|=
name|fstOutputs
operator|.
name|getNoOutput
argument_list|()
expr_stmt|;
name|frame
operator|.
name|state
operator|=
operator|-
literal|1
expr_stmt|;
return|return
name|frame
return|;
block|}
comment|/** Load frame for start arc(node) on fst */
DECL|method|loadFirstFrame
name|Frame
name|loadFirstFrame
parameter_list|(
name|Frame
name|frame
parameter_list|)
throws|throws
name|IOException
block|{
name|frame
operator|.
name|arc
operator|=
name|fst
operator|.
name|getFirstArc
argument_list|(
name|frame
operator|.
name|arc
argument_list|)
expr_stmt|;
name|frame
operator|.
name|state
operator|=
name|fsa
operator|.
name|getInitialState
argument_list|()
expr_stmt|;
return|return
name|frame
return|;
block|}
comment|/** Load frame for target arc(node) on fst */
DECL|method|loadExpandFrame
name|Frame
name|loadExpandFrame
parameter_list|(
name|Frame
name|top
parameter_list|,
name|Frame
name|frame
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|canGrow
argument_list|(
name|top
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|frame
operator|.
name|arc
operator|=
name|fst
operator|.
name|readFirstRealTargetArc
argument_list|(
name|top
operator|.
name|arc
operator|.
name|target
argument_list|,
name|frame
operator|.
name|arc
argument_list|,
name|fstReader
argument_list|)
expr_stmt|;
name|frame
operator|.
name|state
operator|=
name|fsa
operator|.
name|step
argument_list|(
name|top
operator|.
name|state
argument_list|,
name|frame
operator|.
name|arc
operator|.
name|label
argument_list|)
expr_stmt|;
comment|//if (TEST) System.out.println(" loadExpand frame="+frame);
if|if
condition|(
name|frame
operator|.
name|state
operator|==
operator|-
literal|1
condition|)
block|{
return|return
name|loadNextFrame
argument_list|(
name|top
argument_list|,
name|frame
argument_list|)
return|;
block|}
return|return
name|frame
return|;
block|}
comment|/** Load frame for sibling arc(node) on fst */
DECL|method|loadNextFrame
name|Frame
name|loadNextFrame
parameter_list|(
name|Frame
name|top
parameter_list|,
name|Frame
name|frame
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|canRewind
argument_list|(
name|frame
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
while|while
condition|(
operator|!
name|frame
operator|.
name|arc
operator|.
name|isLast
argument_list|()
condition|)
block|{
name|frame
operator|.
name|arc
operator|=
name|fst
operator|.
name|readNextRealArc
argument_list|(
name|frame
operator|.
name|arc
argument_list|,
name|fstReader
argument_list|)
expr_stmt|;
name|frame
operator|.
name|state
operator|=
name|fsa
operator|.
name|step
argument_list|(
name|top
operator|.
name|state
argument_list|,
name|frame
operator|.
name|arc
operator|.
name|label
argument_list|)
expr_stmt|;
if|if
condition|(
name|frame
operator|.
name|state
operator|!=
operator|-
literal|1
condition|)
block|{
break|break;
block|}
block|}
comment|//if (TEST) System.out.println(" loadNext frame="+frame);
if|if
condition|(
name|frame
operator|.
name|state
operator|==
operator|-
literal|1
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|frame
return|;
block|}
comment|/** Load frame for target arc(node) on fst, so that         *  arc.label>= label and !fsa.reject(arc.label) */
DECL|method|loadCeilFrame
name|Frame
name|loadCeilFrame
parameter_list|(
name|int
name|label
parameter_list|,
name|Frame
name|top
parameter_list|,
name|Frame
name|frame
parameter_list|)
throws|throws
name|IOException
block|{
name|FST
operator|.
name|Arc
argument_list|<
name|Long
argument_list|>
name|arc
init|=
name|frame
operator|.
name|arc
decl_stmt|;
name|arc
operator|=
name|Util
operator|.
name|readCeilArc
argument_list|(
name|label
argument_list|,
name|fst
argument_list|,
name|top
operator|.
name|arc
argument_list|,
name|arc
argument_list|,
name|fstReader
argument_list|)
expr_stmt|;
if|if
condition|(
name|arc
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|frame
operator|.
name|state
operator|=
name|fsa
operator|.
name|step
argument_list|(
name|top
operator|.
name|state
argument_list|,
name|arc
operator|.
name|label
argument_list|)
expr_stmt|;
comment|//if (TEST) System.out.println(" loadCeil frame="+frame);
if|if
condition|(
name|frame
operator|.
name|state
operator|==
operator|-
literal|1
condition|)
block|{
return|return
name|loadNextFrame
argument_list|(
name|top
argument_list|,
name|frame
argument_list|)
return|;
block|}
return|return
name|frame
return|;
block|}
DECL|method|isAccept
name|boolean
name|isAccept
parameter_list|(
name|Frame
name|frame
parameter_list|)
block|{
comment|// reach a term both fst&fsa accepts
return|return
name|fsa
operator|.
name|isAccept
argument_list|(
name|frame
operator|.
name|state
argument_list|)
operator|&&
name|frame
operator|.
name|arc
operator|.
name|isFinal
argument_list|()
return|;
block|}
DECL|method|isValid
name|boolean
name|isValid
parameter_list|(
name|Frame
name|frame
parameter_list|)
block|{
comment|// reach a prefix both fst&fsa won't reject
return|return
comment|/*frame != null&&*/
name|frame
operator|.
name|state
operator|!=
operator|-
literal|1
return|;
block|}
DECL|method|canGrow
name|boolean
name|canGrow
parameter_list|(
name|Frame
name|frame
parameter_list|)
block|{
comment|// can walk forward on both fst&fsa
return|return
name|frame
operator|.
name|state
operator|!=
operator|-
literal|1
operator|&&
name|FST
operator|.
name|targetHasArcs
argument_list|(
name|frame
operator|.
name|arc
argument_list|)
return|;
block|}
DECL|method|canRewind
name|boolean
name|canRewind
parameter_list|(
name|Frame
name|frame
parameter_list|)
block|{
comment|// can jump to sibling
return|return
operator|!
name|frame
operator|.
name|arc
operator|.
name|isLast
argument_list|()
return|;
block|}
DECL|method|pushFrame
name|void
name|pushFrame
parameter_list|(
name|Frame
name|frame
parameter_list|)
block|{
specifier|final
name|FST
operator|.
name|Arc
argument_list|<
name|Long
argument_list|>
name|arc
init|=
name|frame
operator|.
name|arc
decl_stmt|;
name|arc
operator|.
name|output
operator|=
name|fstOutputs
operator|.
name|add
argument_list|(
name|topFrame
argument_list|()
operator|.
name|arc
operator|.
name|output
argument_list|,
name|arc
operator|.
name|output
argument_list|)
expr_stmt|;
name|term
operator|=
name|grow
argument_list|(
name|arc
operator|.
name|label
argument_list|)
expr_stmt|;
name|level
operator|++
expr_stmt|;
assert|assert
name|frame
operator|==
name|stack
index|[
name|level
index|]
assert|;
block|}
DECL|method|popFrame
name|Frame
name|popFrame
parameter_list|()
block|{
name|term
operator|=
name|shrink
argument_list|()
expr_stmt|;
return|return
name|stack
index|[
name|level
operator|--
index|]
return|;
block|}
DECL|method|newFrame
name|Frame
name|newFrame
parameter_list|()
block|{
if|if
condition|(
name|level
operator|+
literal|1
operator|==
name|stack
operator|.
name|length
condition|)
block|{
specifier|final
name|Frame
index|[]
name|temp
init|=
operator|new
name|Frame
index|[
name|ArrayUtil
operator|.
name|oversize
argument_list|(
name|level
operator|+
literal|2
argument_list|,
name|RamUsageEstimator
operator|.
name|NUM_BYTES_OBJECT_REF
argument_list|)
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|stack
argument_list|,
literal|0
argument_list|,
name|temp
argument_list|,
literal|0
argument_list|,
name|stack
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|stack
operator|.
name|length
init|;
name|i
operator|<
name|temp
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|temp
index|[
name|i
index|]
operator|=
operator|new
name|Frame
argument_list|()
expr_stmt|;
block|}
name|stack
operator|=
name|temp
expr_stmt|;
block|}
return|return
name|stack
index|[
name|level
operator|+
literal|1
index|]
return|;
block|}
DECL|method|topFrame
name|Frame
name|topFrame
parameter_list|()
block|{
return|return
name|stack
index|[
name|level
index|]
return|;
block|}
DECL|method|grow
name|BytesRefBuilder
name|grow
parameter_list|(
name|int
name|label
parameter_list|)
block|{
if|if
condition|(
name|term
operator|==
literal|null
condition|)
block|{
name|term
operator|=
operator|new
name|BytesRefBuilder
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|term
operator|.
name|append
argument_list|(
operator|(
name|byte
operator|)
name|label
argument_list|)
expr_stmt|;
block|}
return|return
name|term
return|;
block|}
DECL|method|shrink
name|BytesRefBuilder
name|shrink
parameter_list|()
block|{
if|if
condition|(
name|term
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|term
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|term
operator|.
name|setLength
argument_list|(
name|term
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
name|term
return|;
block|}
block|}
block|}
DECL|method|walk
specifier|static
parameter_list|<
name|T
parameter_list|>
name|void
name|walk
parameter_list|(
name|FST
argument_list|<
name|T
argument_list|>
name|fst
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|ArrayList
argument_list|<
name|FST
operator|.
name|Arc
argument_list|<
name|T
argument_list|>
argument_list|>
name|queue
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|BitSet
name|seen
init|=
operator|new
name|BitSet
argument_list|()
decl_stmt|;
specifier|final
name|FST
operator|.
name|BytesReader
name|reader
init|=
name|fst
operator|.
name|getBytesReader
argument_list|()
decl_stmt|;
specifier|final
name|FST
operator|.
name|Arc
argument_list|<
name|T
argument_list|>
name|startArc
init|=
name|fst
operator|.
name|getFirstArc
argument_list|(
operator|new
name|FST
operator|.
name|Arc
argument_list|<
name|T
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
name|queue
operator|.
name|add
argument_list|(
name|startArc
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|queue
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
specifier|final
name|FST
operator|.
name|Arc
argument_list|<
name|T
argument_list|>
name|arc
init|=
name|queue
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|long
name|node
init|=
name|arc
operator|.
name|target
decl_stmt|;
comment|//System.out.println(arc);
if|if
condition|(
name|FST
operator|.
name|targetHasArcs
argument_list|(
name|arc
argument_list|)
operator|&&
operator|!
name|seen
operator|.
name|get
argument_list|(
operator|(
name|int
operator|)
name|node
argument_list|)
condition|)
block|{
name|seen
operator|.
name|set
argument_list|(
operator|(
name|int
operator|)
name|node
argument_list|)
expr_stmt|;
name|fst
operator|.
name|readFirstRealTargetArc
argument_list|(
name|node
argument_list|,
name|arc
argument_list|,
name|reader
argument_list|)
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|queue
operator|.
name|add
argument_list|(
operator|new
name|FST
operator|.
name|Arc
argument_list|<
name|T
argument_list|>
argument_list|()
operator|.
name|copyFrom
argument_list|(
name|arc
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|arc
operator|.
name|isLast
argument_list|()
condition|)
block|{
break|break;
block|}
else|else
block|{
name|fst
operator|.
name|readNextRealArc
argument_list|(
name|arc
argument_list|,
name|reader
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|ramBytesUsed
specifier|public
name|long
name|ramBytesUsed
parameter_list|()
block|{
name|long
name|ramBytesUsed
init|=
name|postingsReader
operator|.
name|ramBytesUsed
argument_list|()
decl_stmt|;
for|for
control|(
name|TermsReader
name|r
range|:
name|fields
operator|.
name|values
argument_list|()
control|)
block|{
name|ramBytesUsed
operator|+=
name|r
operator|.
name|ramBytesUsed
argument_list|()
expr_stmt|;
block|}
return|return
name|ramBytesUsed
return|;
block|}
annotation|@
name|Override
DECL|method|getChildResources
specifier|public
name|Iterable
argument_list|<
name|?
extends|extends
name|Accountable
argument_list|>
name|getChildResources
parameter_list|()
block|{
name|List
argument_list|<
name|Accountable
argument_list|>
name|resources
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|resources
operator|.
name|addAll
argument_list|(
name|Accountables
operator|.
name|namedAccountables
argument_list|(
literal|"field"
argument_list|,
name|fields
argument_list|)
argument_list|)
expr_stmt|;
name|resources
operator|.
name|add
argument_list|(
name|Accountables
operator|.
name|namedAccountable
argument_list|(
literal|"delegate"
argument_list|,
name|postingsReader
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|resources
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|"(fields="
operator|+
name|fields
operator|.
name|size
argument_list|()
operator|+
literal|",delegate="
operator|+
name|postingsReader
operator|+
literal|")"
return|;
block|}
annotation|@
name|Override
DECL|method|checkIntegrity
specifier|public
name|void
name|checkIntegrity
parameter_list|()
throws|throws
name|IOException
block|{
name|postingsReader
operator|.
name|checkIntegrity
argument_list|()
expr_stmt|;
block|}
block|}
end_class
end_unit
