begin_unit
begin_package
DECL|package|org.apache.lucene.codecs.temp
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|temp
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|FieldsConsumer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|FieldsProducer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|PostingsFormat
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|PostingsReaderBase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|PostingsWriterBase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|lucene41
operator|.
name|Lucene41PostingsWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|lucene41
operator|.
name|Lucene41PostingsReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|FieldInfo
operator|.
name|IndexOptions
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SegmentReadState
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SegmentWriteState
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|CodecUtil
import|;
end_import
begin_comment
comment|// javadocs
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|DataOutput
import|;
end_import
begin_comment
comment|// javadocs
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|fst
operator|.
name|FST
import|;
end_import
begin_comment
comment|// javadocs
end_comment
begin_comment
comment|/**   * FST-based term dict, using ord as FST output.  *  * The FST holds the mapping between&lt;term, ord&gt;, and   * term's metadata is delta encoded into a single byte block.  *  * Typically the byte block consists of four parts:  * 1. term statistics: docFreq, totalTermFreq;  * 2. monotonic long[], e.g. the pointer to the postings list for that term;  * 3. generic byte[], e.g. other information customized by postings base.  * 4. single-level skip list to speed up metadata decoding by ord.  *  *<p>  * Files:  *<ul>  *<li><tt>.tix</tt>:<a href="#Termindex">Term Index</a></li>  *<li><tt>.tbk</tt>:<a href="#Termblock">Term Block</a></li>  *</ul>  *</p>  *  *<a name="Termindex" id="Termindex"></a>  *<h3>Term Index</h3>  *<p>  *  The .tix contains a list of FSTs, one for each field.  *  The FST maps a term to its corresponding order in current field.  *</p>  *   *<ul>  *<li>TermIndex(.tix) --&gt; Header, TermFST<sup>NumFields</sup></li>  *<li>TermFST --&gt; {@link FST FST&lt;long&gt;}</li>  *<li>Header --&gt; {@link CodecUtil#writeHeader CodecHeader}</li>  *</ul>  *  *<p>Notes:</p>  *<ul>  *<li>  *  Since terms are already sorted before writing to<a href="#Termblock">Term Block</a>,   *  their ords can directly used to seek term metadata from term block.  *</li>  *</ul>  *  *<a name="Termblock" id="Termblock"></a>  *<h3>Term Block</h3>  *<p>  *  The .tbk contains all the statistics and metadata for terms, along with field summary (e.g.   *  per-field data like number of documents in current field). For each field, there are four blocks:  *<ul>  *<li>statistics bytes block: contains term statistics;</li>  *<li>metadata longs block: delta-encodes monotonical part of metadata;</li>  *<li>metadata bytes block: encodes other parts of metadata;</li>  *<li>skip block: contains skip data, to speed up metadata seeking and decoding</li>  *</ul>  *</p>  *  *<p>File Format:</p>  *<ul>  *<li>TermBlock(.tbk) --&gt; Header,<i>PostingsHeader</i>, FieldSummary, DirOffset</li>  *<li>FieldSummary --&gt; NumFields,&lt;FieldNumber, NumTerms, SumTotalTermFreq?, SumDocFreq,  *                                         DocCount, LongsSize, DataBlock&gt;<sup>NumFields</sup></li>  *  *<li>DataBlock --&gt; StatsBlockLength, MetaLongsBlockLength, MetaBytesBlockLength,   *                       SkipBlock, StatsBlock, MetaLongsBlock, MetaBytesBlock</li>  *<li>SkipBlock --&gt;&lt; StatsFPDelta, MetaLongsSkipFPDelta, MetaBytesSkipFPDelta,   *                            MetaLongsSkipDelta<sup>LongsSize</sup>&gt;<sup>NumTerms</sup>  *<li>StatsBlock --&gt;&lt; DocFreq[Same?], (TotalTermFreq-DocFreq) ?&gt;<sup>NumTerms</sup>  *<li>MetaLongsBlock --&gt;&lt; LongDelta<sup>LongsSize</sup>, BytesSize&gt;<sup>NumTerms</sup>  *<li>MetaBytesBlock --&gt; Byte<sup>MetaBytesBlockLength</sup>  *<li>Header --&gt; {@link CodecUtil#writeHeader CodecHeader}</li>  *<li>DirOffset --&gt; {@link DataOutput#writeLong Uint64}</li>  *<li>NumFields, FieldNumber, DocCount, DocFreq, LongsSize,   *        FieldNumber, DocCount --&gt; {@link DataOutput#writeVInt VInt}</li>  *<li>NumTerms, SumTotalTermFreq, SumDocFreq, StatsBlockLength, MetaLongsBlockLength, MetaBytesBlockLength,  *        StatsFPDelta, MetaLongsSkipFPDelta, MetaBytesSkipFPDelta, MetaLongsSkipStart, TotalTermFreq,   *        LongDelta,--&gt; {@link DataOutput#writeVLong VLong}</li>  *</ul>  *<p>Notes:</p>  *<ul>  *<li>  *   The format of PostingsHeader and MetaBytes are customized by the specific postings implementation:  *   they contain arbitrary per-file data (such as parameters or versioning information), and per-term data   *   (non-monotonical ones like pulsed postings data).  *</li>  *<li>  *   During initialization the reader will load all the blocks into memory. SkipBlock will be decoded, so that during seek  *   term dict can lookup file pointers directly. StatsFPDelta, MetaLongsSkipFPDelta, etc. are file offset  *   for every SkipInterval's term. MetaLongsSkipDelta is the difference from previous one, which indicates  *   the value of preceding metadata longs for every SkipInterval's term.  *</li>  *<li>  *   DocFreq is the count of documents which contain the term. TotalTermFreq is the total number of occurrences of the term.   *   Usually these two values are the same for long tail terms, therefore one bit is stole from DocFreq to check this case,  *   so that encoding of TotalTermFreq may be omitted.  *</li>  *</ul>  *  * @lucene.experimental   */
end_comment
begin_class
DECL|class|TempFSTOrdPostingsFormat
specifier|public
specifier|final
class|class
name|TempFSTOrdPostingsFormat
extends|extends
name|PostingsFormat
block|{
DECL|method|TempFSTOrdPostingsFormat
specifier|public
name|TempFSTOrdPostingsFormat
parameter_list|()
block|{
name|super
argument_list|(
literal|"TempFSTOrd"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getName
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|fieldsConsumer
specifier|public
name|FieldsConsumer
name|fieldsConsumer
parameter_list|(
name|SegmentWriteState
name|state
parameter_list|)
throws|throws
name|IOException
block|{
name|PostingsWriterBase
name|postingsWriter
init|=
operator|new
name|Lucene41PostingsWriter
argument_list|(
name|state
argument_list|)
decl_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|FieldsConsumer
name|ret
init|=
operator|new
name|TempFSTOrdTermsWriter
argument_list|(
name|state
argument_list|,
name|postingsWriter
argument_list|)
decl_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
return|return
name|ret
return|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|IOUtils
operator|.
name|closeWhileHandlingException
argument_list|(
name|postingsWriter
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|fieldsProducer
specifier|public
name|FieldsProducer
name|fieldsProducer
parameter_list|(
name|SegmentReadState
name|state
parameter_list|)
throws|throws
name|IOException
block|{
name|PostingsReaderBase
name|postingsReader
init|=
operator|new
name|Lucene41PostingsReader
argument_list|(
name|state
operator|.
name|directory
argument_list|,
name|state
operator|.
name|fieldInfos
argument_list|,
name|state
operator|.
name|segmentInfo
argument_list|,
name|state
operator|.
name|context
argument_list|,
name|state
operator|.
name|segmentSuffix
argument_list|)
decl_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|FieldsProducer
name|ret
init|=
operator|new
name|TempFSTOrdTermsReader
argument_list|(
name|state
argument_list|,
name|postingsReader
argument_list|)
decl_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
return|return
name|ret
return|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|IOUtils
operator|.
name|closeWhileHandlingException
argument_list|(
name|postingsReader
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class
end_unit
