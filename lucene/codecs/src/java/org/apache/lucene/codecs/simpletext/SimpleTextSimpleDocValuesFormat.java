begin_unit
begin_package
DECL|package|org.apache.lucene.codecs.simpletext
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|simpletext
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import
begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigInteger
import|;
end_import
begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DecimalFormat
import|;
end_import
begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DecimalFormatSymbols
import|;
end_import
begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|BinaryDocValuesConsumer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|NumericDocValuesConsumer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|SimpleDVConsumer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|SimpleDVProducer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|SimpleDocValuesFormat
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|SortedDocValuesConsumer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|BinaryDocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|CorruptIndexException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|FieldInfo
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|FieldInfos
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexFileNames
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|NumericDocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SegmentInfo
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SegmentReadState
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SegmentWriteState
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SortedDocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IOContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexInput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexOutput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|StringHelper
import|;
end_import
begin_comment
comment|/**  * plain text doc values format.  *<p>  *<b><font color="red">FOR RECREATIONAL USE ONLY</font></B>  * @lucene.experimental  */
end_comment
begin_class
DECL|class|SimpleTextSimpleDocValuesFormat
specifier|public
class|class
name|SimpleTextSimpleDocValuesFormat
extends|extends
name|SimpleDocValuesFormat
block|{
DECL|field|END
specifier|final
specifier|static
name|BytesRef
name|END
init|=
operator|new
name|BytesRef
argument_list|(
literal|"END"
argument_list|)
decl_stmt|;
DECL|field|FIELD
specifier|final
specifier|static
name|BytesRef
name|FIELD
init|=
operator|new
name|BytesRef
argument_list|(
literal|"field "
argument_list|)
decl_stmt|;
comment|// used for numerics
DECL|field|MINVALUE
specifier|final
specifier|static
name|BytesRef
name|MINVALUE
init|=
operator|new
name|BytesRef
argument_list|(
literal|"  minvalue "
argument_list|)
decl_stmt|;
DECL|field|MAXVALUE
specifier|final
specifier|static
name|BytesRef
name|MAXVALUE
init|=
operator|new
name|BytesRef
argument_list|(
literal|"  maxvalue "
argument_list|)
decl_stmt|;
DECL|field|PATTERN
specifier|final
specifier|static
name|BytesRef
name|PATTERN
init|=
operator|new
name|BytesRef
argument_list|(
literal|"  pattern "
argument_list|)
decl_stmt|;
comment|// used for bytes
DECL|field|FIXEDLENGTH
specifier|final
specifier|static
name|BytesRef
name|FIXEDLENGTH
init|=
operator|new
name|BytesRef
argument_list|(
literal|"  fixedlength "
argument_list|)
decl_stmt|;
DECL|field|MAXLENGTH
specifier|final
specifier|static
name|BytesRef
name|MAXLENGTH
init|=
operator|new
name|BytesRef
argument_list|(
literal|"  maxlength "
argument_list|)
decl_stmt|;
DECL|field|LENGTH
specifier|final
specifier|static
name|BytesRef
name|LENGTH
init|=
operator|new
name|BytesRef
argument_list|(
literal|"length "
argument_list|)
decl_stmt|;
comment|// used for sorted bytes
DECL|field|NUMVALUES
specifier|final
specifier|static
name|BytesRef
name|NUMVALUES
init|=
operator|new
name|BytesRef
argument_list|(
literal|"  numvalues "
argument_list|)
decl_stmt|;
DECL|field|ORDPATTERN
specifier|final
specifier|static
name|BytesRef
name|ORDPATTERN
init|=
operator|new
name|BytesRef
argument_list|(
literal|"  ordpattern "
argument_list|)
decl_stmt|;
annotation|@
name|Override
DECL|method|fieldsConsumer
specifier|public
name|SimpleDVConsumer
name|fieldsConsumer
parameter_list|(
name|SegmentWriteState
name|state
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|SimpleTextDocValuesWriter
argument_list|(
name|state
operator|.
name|directory
argument_list|,
name|state
operator|.
name|segmentInfo
argument_list|,
name|state
operator|.
name|context
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|fieldsProducer
specifier|public
name|SimpleDVProducer
name|fieldsProducer
parameter_list|(
name|SegmentReadState
name|state
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|SimpleTextDocValuesReader
argument_list|(
name|state
operator|.
name|fieldInfos
argument_list|,
name|state
operator|.
name|dir
argument_list|,
name|state
operator|.
name|segmentInfo
argument_list|,
name|state
operator|.
name|context
argument_list|)
return|;
block|}
comment|/** the .dat file contains the data.    *  for numbers this is a "fixed-width" file, for example a single byte range:    *<pre>    *  field myField    *    minvalue 0    *    maxvalue 234    *    pattern 000    *  005    *  234    *  123    *  ...    *</pre>    *  so a document's value (delta encoded from minvalue) can be retrieved by     *  seeking to startOffset + (1+pattern.length())*docid. The extra 1 is the newline.    *      *  for bytes this is also a "fixed-width" file, for example:    *<pre>    *  field myField    *    fixedlength false    *    maxlength 8    *    pattern 0    *  length 6    *  foobar[space][space]    *  length 3    *  baz[space][space][space][space][space]    *  ...    *</pre>    *  so a doc's value can be retrieved by seeking to startOffset + (9+pattern.length+maxlength)*doc    *  the extra 9 is 2 newlines, plus "length " itself.    *      *  for sorted bytes this is a fixed-width file, for example:    *<pre>    *  field myField    *    numvalues 10    *    maxLength 8    *    pattern 0    *    ordpattern 00    *  length 6    *  foobar[space][space]    *  length 3    *  baz[space][space][space][space][space]    *  ...    *  03    *  06    *  01    *  10    *  ...    *</pre>    *  so the "ord section" begins at startOffset + (9+pattern.length+maxlength)*numValues.    *  a document's ord can be retrieved by seeking to "ord section" + (1+ordpattern.length())*docid    *  an ord's value can be retrieved by seeking to startOffset + (9+pattern.length+maxlength)*ord    *       *  the reader can just scan this file when it opens, skipping over the data blocks    *  and saving the offset/etc for each field.     */
DECL|class|SimpleTextDocValuesWriter
specifier|static
class|class
name|SimpleTextDocValuesWriter
extends|extends
name|SimpleDVConsumer
block|{
DECL|field|data
specifier|final
name|IndexOutput
name|data
decl_stmt|;
DECL|field|scratch
specifier|final
name|BytesRef
name|scratch
init|=
operator|new
name|BytesRef
argument_list|()
decl_stmt|;
DECL|field|numDocs
specifier|final
name|int
name|numDocs
decl_stmt|;
DECL|field|fieldsSeen
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|fieldsSeen
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|// for asserting
DECL|method|SimpleTextDocValuesWriter
name|SimpleTextDocValuesWriter
parameter_list|(
name|Directory
name|dir
parameter_list|,
name|SegmentInfo
name|si
parameter_list|,
name|IOContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|data
operator|=
name|dir
operator|.
name|createOutput
argument_list|(
name|IndexFileNames
operator|.
name|segmentFileName
argument_list|(
name|si
operator|.
name|name
argument_list|,
literal|""
argument_list|,
literal|"dat"
argument_list|)
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|numDocs
operator|=
name|si
operator|.
name|getDocCount
argument_list|()
expr_stmt|;
block|}
comment|// for asserting
DECL|method|fieldSeen
specifier|private
name|boolean
name|fieldSeen
parameter_list|(
name|String
name|field
parameter_list|)
block|{
assert|assert
operator|!
name|fieldsSeen
operator|.
name|contains
argument_list|(
name|field
argument_list|)
operator|:
literal|"field \""
operator|+
name|field
operator|+
literal|"\" was added more than once during flush"
assert|;
name|fieldsSeen
operator|.
name|add
argument_list|(
name|field
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|addNumericField
specifier|public
name|NumericDocValuesConsumer
name|addNumericField
parameter_list|(
name|FieldInfo
name|field
parameter_list|,
specifier|final
name|long
name|minValue
parameter_list|,
name|long
name|maxValue
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|fieldSeen
argument_list|(
name|field
operator|.
name|name
argument_list|)
assert|;
name|writeFieldEntry
argument_list|(
name|field
argument_list|)
expr_stmt|;
comment|// write our minimum value to the .dat, all entries are deltas from that
name|SimpleTextUtil
operator|.
name|write
argument_list|(
name|data
argument_list|,
name|MINVALUE
argument_list|)
expr_stmt|;
name|SimpleTextUtil
operator|.
name|write
argument_list|(
name|data
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|minValue
argument_list|)
argument_list|,
name|scratch
argument_list|)
expr_stmt|;
name|SimpleTextUtil
operator|.
name|writeNewline
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|SimpleTextUtil
operator|.
name|write
argument_list|(
name|data
argument_list|,
name|MAXVALUE
argument_list|)
expr_stmt|;
name|SimpleTextUtil
operator|.
name|write
argument_list|(
name|data
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|maxValue
argument_list|)
argument_list|,
name|scratch
argument_list|)
expr_stmt|;
name|SimpleTextUtil
operator|.
name|writeNewline
argument_list|(
name|data
argument_list|)
expr_stmt|;
assert|assert
name|maxValue
operator|>=
name|minValue
assert|;
comment|// build up our fixed-width "simple text packed ints"
comment|// format
name|BigInteger
name|maxBig
init|=
name|BigInteger
operator|.
name|valueOf
argument_list|(
name|maxValue
argument_list|)
decl_stmt|;
name|BigInteger
name|minBig
init|=
name|BigInteger
operator|.
name|valueOf
argument_list|(
name|minValue
argument_list|)
decl_stmt|;
name|BigInteger
name|diffBig
init|=
name|maxBig
operator|.
name|subtract
argument_list|(
name|minBig
argument_list|)
decl_stmt|;
name|int
name|maxBytesPerValue
init|=
name|diffBig
operator|.
name|toString
argument_list|()
operator|.
name|length
argument_list|()
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|maxBytesPerValue
condition|;
name|i
operator|++
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|'0'
argument_list|)
expr_stmt|;
block|}
comment|// write our pattern to the .dat
name|SimpleTextUtil
operator|.
name|write
argument_list|(
name|data
argument_list|,
name|PATTERN
argument_list|)
expr_stmt|;
name|SimpleTextUtil
operator|.
name|write
argument_list|(
name|data
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|,
name|scratch
argument_list|)
expr_stmt|;
name|SimpleTextUtil
operator|.
name|writeNewline
argument_list|(
name|data
argument_list|)
expr_stmt|;
specifier|final
name|String
name|patternString
init|=
name|sb
operator|.
name|toString
argument_list|()
decl_stmt|;
specifier|final
name|DecimalFormat
name|encoder
init|=
operator|new
name|DecimalFormat
argument_list|(
name|patternString
argument_list|,
operator|new
name|DecimalFormatSymbols
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|NumericDocValuesConsumer
argument_list|()
block|{
name|int
name|numDocsWritten
init|=
literal|0
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|add
parameter_list|(
name|long
name|value
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|value
operator|>=
name|minValue
assert|;
name|Number
name|delta
init|=
name|BigInteger
operator|.
name|valueOf
argument_list|(
name|value
argument_list|)
operator|.
name|subtract
argument_list|(
name|BigInteger
operator|.
name|valueOf
argument_list|(
name|minValue
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|s
init|=
name|encoder
operator|.
name|format
argument_list|(
name|delta
argument_list|)
decl_stmt|;
assert|assert
name|s
operator|.
name|length
argument_list|()
operator|==
name|patternString
operator|.
name|length
argument_list|()
assert|;
name|SimpleTextUtil
operator|.
name|write
argument_list|(
name|data
argument_list|,
name|s
argument_list|,
name|scratch
argument_list|)
expr_stmt|;
name|SimpleTextUtil
operator|.
name|writeNewline
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|numDocsWritten
operator|++
expr_stmt|;
assert|assert
name|numDocsWritten
operator|<=
name|numDocs
assert|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|finish
parameter_list|()
throws|throws
name|IOException
block|{
assert|assert
name|numDocs
operator|==
name|numDocsWritten
operator|:
literal|"numDocs="
operator|+
name|numDocs
operator|+
literal|" numDocsWritten="
operator|+
name|numDocsWritten
assert|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|addBinaryField
specifier|public
name|BinaryDocValuesConsumer
name|addBinaryField
parameter_list|(
name|FieldInfo
name|field
parameter_list|,
name|boolean
name|fixedLength
parameter_list|,
specifier|final
name|int
name|maxLength
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|fieldSeen
argument_list|(
name|field
operator|.
name|name
argument_list|)
assert|;
name|writeFieldEntry
argument_list|(
name|field
argument_list|)
expr_stmt|;
comment|// write fixedlength
name|SimpleTextUtil
operator|.
name|write
argument_list|(
name|data
argument_list|,
name|FIXEDLENGTH
argument_list|)
expr_stmt|;
name|SimpleTextUtil
operator|.
name|write
argument_list|(
name|data
argument_list|,
name|Boolean
operator|.
name|toString
argument_list|(
name|fixedLength
argument_list|)
argument_list|,
name|scratch
argument_list|)
expr_stmt|;
name|SimpleTextUtil
operator|.
name|writeNewline
argument_list|(
name|data
argument_list|)
expr_stmt|;
comment|// write maxLength
name|SimpleTextUtil
operator|.
name|write
argument_list|(
name|data
argument_list|,
name|MAXLENGTH
argument_list|)
expr_stmt|;
name|SimpleTextUtil
operator|.
name|write
argument_list|(
name|data
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|maxLength
argument_list|)
argument_list|,
name|scratch
argument_list|)
expr_stmt|;
name|SimpleTextUtil
operator|.
name|writeNewline
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|int
name|maxBytesLength
init|=
name|Long
operator|.
name|toString
argument_list|(
name|maxLength
argument_list|)
operator|.
name|length
argument_list|()
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|maxBytesLength
condition|;
name|i
operator|++
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|'0'
argument_list|)
expr_stmt|;
block|}
comment|// write our pattern for encoding lengths
name|SimpleTextUtil
operator|.
name|write
argument_list|(
name|data
argument_list|,
name|PATTERN
argument_list|)
expr_stmt|;
name|SimpleTextUtil
operator|.
name|write
argument_list|(
name|data
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|,
name|scratch
argument_list|)
expr_stmt|;
name|SimpleTextUtil
operator|.
name|writeNewline
argument_list|(
name|data
argument_list|)
expr_stmt|;
specifier|final
name|DecimalFormat
name|encoder
init|=
operator|new
name|DecimalFormat
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|,
operator|new
name|DecimalFormatSymbols
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|BinaryDocValuesConsumer
argument_list|()
block|{
name|int
name|numDocsWritten
init|=
literal|0
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|add
parameter_list|(
name|BytesRef
name|value
parameter_list|)
throws|throws
name|IOException
block|{
comment|// write length
name|SimpleTextUtil
operator|.
name|write
argument_list|(
name|data
argument_list|,
name|LENGTH
argument_list|)
expr_stmt|;
name|SimpleTextUtil
operator|.
name|write
argument_list|(
name|data
argument_list|,
name|encoder
operator|.
name|format
argument_list|(
name|value
operator|.
name|length
argument_list|)
argument_list|,
name|scratch
argument_list|)
expr_stmt|;
name|SimpleTextUtil
operator|.
name|writeNewline
argument_list|(
name|data
argument_list|)
expr_stmt|;
comment|// write bytes -- don't use SimpleText.write
comment|// because it escapes:
name|data
operator|.
name|writeBytes
argument_list|(
name|value
operator|.
name|bytes
argument_list|,
name|value
operator|.
name|offset
argument_list|,
name|value
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// pad to fit
for|for
control|(
name|int
name|i
init|=
name|value
operator|.
name|length
init|;
name|i
operator|<
name|maxLength
condition|;
name|i
operator|++
control|)
block|{
name|data
operator|.
name|writeByte
argument_list|(
operator|(
name|byte
operator|)
literal|' '
argument_list|)
expr_stmt|;
block|}
name|SimpleTextUtil
operator|.
name|writeNewline
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|numDocsWritten
operator|++
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|finish
parameter_list|()
throws|throws
name|IOException
block|{
assert|assert
name|numDocs
operator|==
name|numDocsWritten
assert|;
block|}
block|}
return|;
block|}
comment|// nocommit
annotation|@
name|Override
DECL|method|addSortedField
specifier|public
name|SortedDocValuesConsumer
name|addSortedField
parameter_list|(
name|FieldInfo
name|field
parameter_list|,
specifier|final
name|int
name|valueCount
parameter_list|,
name|boolean
name|fixedLength
parameter_list|,
specifier|final
name|int
name|maxLength
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|fieldSeen
argument_list|(
name|field
operator|.
name|name
argument_list|)
assert|;
name|writeFieldEntry
argument_list|(
name|field
argument_list|)
expr_stmt|;
comment|// write numValues
name|SimpleTextUtil
operator|.
name|write
argument_list|(
name|data
argument_list|,
name|NUMVALUES
argument_list|)
expr_stmt|;
name|SimpleTextUtil
operator|.
name|write
argument_list|(
name|data
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|valueCount
argument_list|)
argument_list|,
name|scratch
argument_list|)
expr_stmt|;
name|SimpleTextUtil
operator|.
name|writeNewline
argument_list|(
name|data
argument_list|)
expr_stmt|;
comment|// write fixedlength
name|SimpleTextUtil
operator|.
name|write
argument_list|(
name|data
argument_list|,
name|FIXEDLENGTH
argument_list|)
expr_stmt|;
name|SimpleTextUtil
operator|.
name|write
argument_list|(
name|data
argument_list|,
name|Boolean
operator|.
name|toString
argument_list|(
name|fixedLength
argument_list|)
argument_list|,
name|scratch
argument_list|)
expr_stmt|;
name|SimpleTextUtil
operator|.
name|writeNewline
argument_list|(
name|data
argument_list|)
expr_stmt|;
comment|// write maxLength
name|SimpleTextUtil
operator|.
name|write
argument_list|(
name|data
argument_list|,
name|MAXLENGTH
argument_list|)
expr_stmt|;
name|SimpleTextUtil
operator|.
name|write
argument_list|(
name|data
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|maxLength
argument_list|)
argument_list|,
name|scratch
argument_list|)
expr_stmt|;
name|SimpleTextUtil
operator|.
name|writeNewline
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|int
name|maxBytesLength
init|=
name|Integer
operator|.
name|toString
argument_list|(
name|maxLength
argument_list|)
operator|.
name|length
argument_list|()
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|maxBytesLength
condition|;
name|i
operator|++
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|'0'
argument_list|)
expr_stmt|;
block|}
comment|// write our pattern for encoding lengths
name|SimpleTextUtil
operator|.
name|write
argument_list|(
name|data
argument_list|,
name|PATTERN
argument_list|)
expr_stmt|;
name|SimpleTextUtil
operator|.
name|write
argument_list|(
name|data
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|,
name|scratch
argument_list|)
expr_stmt|;
name|SimpleTextUtil
operator|.
name|writeNewline
argument_list|(
name|data
argument_list|)
expr_stmt|;
specifier|final
name|DecimalFormat
name|encoder
init|=
operator|new
name|DecimalFormat
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|,
operator|new
name|DecimalFormatSymbols
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|maxOrdBytes
init|=
name|Integer
operator|.
name|toString
argument_list|(
name|valueCount
argument_list|)
operator|.
name|length
argument_list|()
decl_stmt|;
name|sb
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|maxOrdBytes
condition|;
name|i
operator|++
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|'0'
argument_list|)
expr_stmt|;
block|}
comment|// write our pattern for ords
name|SimpleTextUtil
operator|.
name|write
argument_list|(
name|data
argument_list|,
name|ORDPATTERN
argument_list|)
expr_stmt|;
name|SimpleTextUtil
operator|.
name|write
argument_list|(
name|data
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|,
name|scratch
argument_list|)
expr_stmt|;
name|SimpleTextUtil
operator|.
name|writeNewline
argument_list|(
name|data
argument_list|)
expr_stmt|;
specifier|final
name|DecimalFormat
name|ordEncoder
init|=
operator|new
name|DecimalFormat
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|,
operator|new
name|DecimalFormatSymbols
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|SortedDocValuesConsumer
argument_list|()
block|{
comment|// for asserts:
specifier|private
name|int
name|valuesSeen
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|addValue
parameter_list|(
name|BytesRef
name|value
parameter_list|)
throws|throws
name|IOException
block|{
comment|// write length
name|SimpleTextUtil
operator|.
name|write
argument_list|(
name|data
argument_list|,
name|LENGTH
argument_list|)
expr_stmt|;
name|SimpleTextUtil
operator|.
name|write
argument_list|(
name|data
argument_list|,
name|encoder
operator|.
name|format
argument_list|(
name|value
operator|.
name|length
argument_list|)
argument_list|,
name|scratch
argument_list|)
expr_stmt|;
name|SimpleTextUtil
operator|.
name|writeNewline
argument_list|(
name|data
argument_list|)
expr_stmt|;
comment|// write bytes -- don't use SimpleText.write
comment|// because it escapes:
name|data
operator|.
name|writeBytes
argument_list|(
name|value
operator|.
name|bytes
argument_list|,
name|value
operator|.
name|offset
argument_list|,
name|value
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// pad to fit
for|for
control|(
name|int
name|i
init|=
name|value
operator|.
name|length
init|;
name|i
operator|<
name|maxLength
condition|;
name|i
operator|++
control|)
block|{
name|data
operator|.
name|writeByte
argument_list|(
operator|(
name|byte
operator|)
literal|' '
argument_list|)
expr_stmt|;
block|}
name|SimpleTextUtil
operator|.
name|writeNewline
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|valuesSeen
operator|++
expr_stmt|;
assert|assert
name|valuesSeen
operator|<=
name|valueCount
assert|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addDoc
parameter_list|(
name|int
name|ord
parameter_list|)
throws|throws
name|IOException
block|{
name|SimpleTextUtil
operator|.
name|write
argument_list|(
name|data
argument_list|,
name|ordEncoder
operator|.
name|format
argument_list|(
name|ord
argument_list|)
argument_list|,
name|scratch
argument_list|)
expr_stmt|;
name|SimpleTextUtil
operator|.
name|writeNewline
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|finish
parameter_list|()
throws|throws
name|IOException
block|{}
block|}
return|;
block|}
comment|/** write the header for this field */
DECL|method|writeFieldEntry
specifier|private
name|void
name|writeFieldEntry
parameter_list|(
name|FieldInfo
name|field
parameter_list|)
throws|throws
name|IOException
block|{
name|SimpleTextUtil
operator|.
name|write
argument_list|(
name|data
argument_list|,
name|FIELD
argument_list|)
expr_stmt|;
name|SimpleTextUtil
operator|.
name|write
argument_list|(
name|data
argument_list|,
name|field
operator|.
name|name
argument_list|,
name|scratch
argument_list|)
expr_stmt|;
name|SimpleTextUtil
operator|.
name|writeNewline
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
comment|// TODO: sheisty to do this here?
name|SimpleTextUtil
operator|.
name|write
argument_list|(
name|data
argument_list|,
name|END
argument_list|)
expr_stmt|;
name|SimpleTextUtil
operator|.
name|writeNewline
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|success
condition|)
block|{
name|IOUtils
operator|.
name|close
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|IOUtils
operator|.
name|closeWhileHandlingException
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
empty_stmt|;
comment|// nocommit once we do "in ram cache of direct source"
comment|// ... and hopeuflly under SCR control ... then if app
comment|// asks for direct soruce but it was already cached in ram
comment|// ... we should use the ram cached one!  we don't do this
comment|// correctly today ...
comment|// nocommit make sure we test "all docs have 0 value",
comment|// "all docs have empty BytesREf"
DECL|class|SimpleTextDocValuesReader
specifier|static
class|class
name|SimpleTextDocValuesReader
extends|extends
name|SimpleDVProducer
block|{
DECL|class|OneField
specifier|static
class|class
name|OneField
block|{
DECL|field|fieldInfo
name|FieldInfo
name|fieldInfo
decl_stmt|;
DECL|field|dataStartFilePointer
name|long
name|dataStartFilePointer
decl_stmt|;
DECL|field|pattern
name|String
name|pattern
decl_stmt|;
DECL|field|ordPattern
name|String
name|ordPattern
decl_stmt|;
DECL|field|maxLength
name|int
name|maxLength
decl_stmt|;
DECL|field|fixedLength
name|boolean
name|fixedLength
decl_stmt|;
DECL|field|minValue
name|long
name|minValue
decl_stmt|;
DECL|field|maxValue
name|long
name|maxValue
decl_stmt|;
DECL|field|numValues
name|int
name|numValues
decl_stmt|;
block|}
empty_stmt|;
DECL|field|maxDoc
specifier|final
name|int
name|maxDoc
decl_stmt|;
DECL|field|data
specifier|final
name|IndexInput
name|data
decl_stmt|;
DECL|field|scratch
specifier|final
name|BytesRef
name|scratch
init|=
operator|new
name|BytesRef
argument_list|()
decl_stmt|;
DECL|field|fields
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|OneField
argument_list|>
name|fields
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|OneField
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|SimpleTextDocValuesReader
name|SimpleTextDocValuesReader
parameter_list|(
name|FieldInfos
name|fieldInfos
parameter_list|,
name|Directory
name|dir
parameter_list|,
name|SegmentInfo
name|si
parameter_list|,
name|IOContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
comment|//System.out.println("dir=" + dir + " seg=" + si.name);
name|data
operator|=
name|dir
operator|.
name|openInput
argument_list|(
name|IndexFileNames
operator|.
name|segmentFileName
argument_list|(
name|si
operator|.
name|name
argument_list|,
literal|""
argument_list|,
literal|"dat"
argument_list|)
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|maxDoc
operator|=
name|si
operator|.
name|getDocCount
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|readLine
argument_list|()
expr_stmt|;
comment|//System.out.println("READ field=" + scratch.utf8ToString());
if|if
condition|(
name|scratch
operator|.
name|equals
argument_list|(
name|END
argument_list|)
condition|)
block|{
break|break;
block|}
assert|assert
name|startsWith
argument_list|(
name|FIELD
argument_list|)
operator|:
name|scratch
operator|.
name|utf8ToString
argument_list|()
assert|;
name|String
name|fieldName
init|=
name|stripPrefix
argument_list|(
name|FIELD
argument_list|)
decl_stmt|;
comment|//System.out.println("  field=" + fieldName);
name|FieldInfo
name|fieldInfo
init|=
name|fieldInfos
operator|.
name|fieldInfo
argument_list|(
name|fieldName
argument_list|)
decl_stmt|;
assert|assert
name|fieldInfo
operator|!=
literal|null
assert|;
name|OneField
name|field
init|=
operator|new
name|OneField
argument_list|()
decl_stmt|;
name|fields
operator|.
name|put
argument_list|(
name|fieldName
argument_list|,
name|field
argument_list|)
expr_stmt|;
name|field
operator|.
name|fieldInfo
operator|=
name|fieldInfo
expr_stmt|;
name|DocValues
operator|.
name|Type
name|dvType
init|=
name|fieldInfo
operator|.
name|getDocValuesType
argument_list|()
decl_stmt|;
assert|assert
name|dvType
operator|!=
literal|null
assert|;
if|if
condition|(
name|DocValues
operator|.
name|isNumber
argument_list|(
name|dvType
argument_list|)
operator|||
name|DocValues
operator|.
name|isFloat
argument_list|(
name|dvType
argument_list|)
condition|)
block|{
name|readLine
argument_list|()
expr_stmt|;
assert|assert
name|startsWith
argument_list|(
name|MINVALUE
argument_list|)
assert|;
name|field
operator|.
name|minValue
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|stripPrefix
argument_list|(
name|MINVALUE
argument_list|)
argument_list|)
expr_stmt|;
name|readLine
argument_list|()
expr_stmt|;
assert|assert
name|startsWith
argument_list|(
name|MAXVALUE
argument_list|)
assert|;
name|field
operator|.
name|maxValue
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|stripPrefix
argument_list|(
name|MAXVALUE
argument_list|)
argument_list|)
expr_stmt|;
name|readLine
argument_list|()
expr_stmt|;
assert|assert
name|startsWith
argument_list|(
name|PATTERN
argument_list|)
assert|;
name|field
operator|.
name|pattern
operator|=
name|stripPrefix
argument_list|(
name|PATTERN
argument_list|)
expr_stmt|;
name|field
operator|.
name|dataStartFilePointer
operator|=
name|data
operator|.
name|getFilePointer
argument_list|()
expr_stmt|;
name|data
operator|.
name|seek
argument_list|(
name|data
operator|.
name|getFilePointer
argument_list|()
operator|+
operator|(
literal|1
operator|+
name|field
operator|.
name|pattern
operator|.
name|length
argument_list|()
operator|)
operator|*
name|maxDoc
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|DocValues
operator|.
name|isBytes
argument_list|(
name|dvType
argument_list|)
condition|)
block|{
name|readLine
argument_list|()
expr_stmt|;
assert|assert
name|startsWith
argument_list|(
name|FIXEDLENGTH
argument_list|)
assert|;
name|field
operator|.
name|fixedLength
operator|=
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|stripPrefix
argument_list|(
name|FIXEDLENGTH
argument_list|)
argument_list|)
expr_stmt|;
name|readLine
argument_list|()
expr_stmt|;
assert|assert
name|startsWith
argument_list|(
name|MAXLENGTH
argument_list|)
assert|;
name|field
operator|.
name|maxLength
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|stripPrefix
argument_list|(
name|MAXLENGTH
argument_list|)
argument_list|)
expr_stmt|;
name|readLine
argument_list|()
expr_stmt|;
assert|assert
name|startsWith
argument_list|(
name|PATTERN
argument_list|)
assert|;
name|field
operator|.
name|pattern
operator|=
name|stripPrefix
argument_list|(
name|PATTERN
argument_list|)
expr_stmt|;
name|field
operator|.
name|dataStartFilePointer
operator|=
name|data
operator|.
name|getFilePointer
argument_list|()
expr_stmt|;
name|data
operator|.
name|seek
argument_list|(
name|data
operator|.
name|getFilePointer
argument_list|()
operator|+
operator|(
literal|9
operator|+
name|field
operator|.
name|pattern
operator|.
name|length
argument_list|()
operator|+
name|field
operator|.
name|maxLength
operator|)
operator|*
name|maxDoc
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|DocValues
operator|.
name|isSortedBytes
argument_list|(
name|dvType
argument_list|)
condition|)
block|{
name|readLine
argument_list|()
expr_stmt|;
assert|assert
name|startsWith
argument_list|(
name|NUMVALUES
argument_list|)
assert|;
name|field
operator|.
name|numValues
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|stripPrefix
argument_list|(
name|NUMVALUES
argument_list|)
argument_list|)
expr_stmt|;
name|readLine
argument_list|()
expr_stmt|;
assert|assert
name|startsWith
argument_list|(
name|FIXEDLENGTH
argument_list|)
assert|;
name|field
operator|.
name|fixedLength
operator|=
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|stripPrefix
argument_list|(
name|FIXEDLENGTH
argument_list|)
argument_list|)
expr_stmt|;
name|readLine
argument_list|()
expr_stmt|;
assert|assert
name|startsWith
argument_list|(
name|MAXLENGTH
argument_list|)
assert|;
name|field
operator|.
name|maxLength
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|stripPrefix
argument_list|(
name|MAXLENGTH
argument_list|)
argument_list|)
expr_stmt|;
name|readLine
argument_list|()
expr_stmt|;
assert|assert
name|startsWith
argument_list|(
name|PATTERN
argument_list|)
assert|;
name|field
operator|.
name|pattern
operator|=
name|stripPrefix
argument_list|(
name|PATTERN
argument_list|)
expr_stmt|;
name|readLine
argument_list|()
expr_stmt|;
assert|assert
name|startsWith
argument_list|(
name|ORDPATTERN
argument_list|)
assert|;
name|field
operator|.
name|ordPattern
operator|=
name|stripPrefix
argument_list|(
name|ORDPATTERN
argument_list|)
expr_stmt|;
name|field
operator|.
name|dataStartFilePointer
operator|=
name|data
operator|.
name|getFilePointer
argument_list|()
expr_stmt|;
name|data
operator|.
name|seek
argument_list|(
name|data
operator|.
name|getFilePointer
argument_list|()
operator|+
operator|(
literal|9
operator|+
name|field
operator|.
name|pattern
operator|.
name|length
argument_list|()
operator|+
name|field
operator|.
name|maxLength
operator|)
operator|*
name|field
operator|.
name|numValues
operator|+
operator|(
literal|1
operator|+
name|field
operator|.
name|ordPattern
operator|.
name|length
argument_list|()
operator|)
operator|*
name|maxDoc
argument_list|)
expr_stmt|;
comment|// nocommit: we need to seek past the data section!!!!
block|}
else|else
block|{
throw|throw
operator|new
name|AssertionError
argument_list|()
throw|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|getNumeric
specifier|public
name|NumericDocValues
name|getNumeric
parameter_list|(
name|FieldInfo
name|fieldInfo
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|OneField
name|field
init|=
name|fields
operator|.
name|get
argument_list|(
name|fieldInfo
operator|.
name|name
argument_list|)
decl_stmt|;
comment|// SegmentCoreReaders already verifies this field is
comment|// valid:
assert|assert
name|field
operator|!=
literal|null
assert|;
specifier|final
name|IndexInput
name|in
init|=
name|data
operator|.
name|clone
argument_list|()
decl_stmt|;
specifier|final
name|BytesRef
name|scratch
init|=
operator|new
name|BytesRef
argument_list|()
decl_stmt|;
specifier|final
name|DecimalFormat
name|decoder
init|=
operator|new
name|DecimalFormat
argument_list|(
name|field
operator|.
name|pattern
argument_list|,
operator|new
name|DecimalFormatSymbols
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
argument_list|)
decl_stmt|;
name|decoder
operator|.
name|setParseBigDecimal
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
operator|new
name|NumericDocValues
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|long
name|get
parameter_list|(
name|int
name|docID
parameter_list|)
block|{
try|try
block|{
comment|// nocommit bounds check docID?  spooky
comment|// because if we don't you can maybe get
comment|// value from the wrong field ...
name|in
operator|.
name|seek
argument_list|(
name|field
operator|.
name|dataStartFilePointer
operator|+
operator|(
literal|1
operator|+
name|field
operator|.
name|pattern
operator|.
name|length
argument_list|()
operator|)
operator|*
name|docID
argument_list|)
expr_stmt|;
name|SimpleTextUtil
operator|.
name|readLine
argument_list|(
name|in
argument_list|,
name|scratch
argument_list|)
expr_stmt|;
comment|//System.out.println("parsing delta: " + scratch.utf8ToString());
name|BigDecimal
name|bd
decl_stmt|;
try|try
block|{
name|bd
operator|=
operator|(
name|BigDecimal
operator|)
name|decoder
operator|.
name|parse
argument_list|(
name|scratch
operator|.
name|utf8ToString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|pe
parameter_list|)
block|{
name|CorruptIndexException
name|e
init|=
operator|new
name|CorruptIndexException
argument_list|(
literal|"failed to parse BigDecimal value"
argument_list|)
decl_stmt|;
name|e
operator|.
name|initCause
argument_list|(
name|pe
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
return|return
name|BigInteger
operator|.
name|valueOf
argument_list|(
name|field
operator|.
name|minValue
argument_list|)
operator|.
name|add
argument_list|(
name|bd
operator|.
name|toBigIntegerExact
argument_list|()
argument_list|)
operator|.
name|longValue
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|long
name|minValue
parameter_list|()
block|{
return|return
name|field
operator|.
name|minValue
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|maxValue
parameter_list|()
block|{
return|return
name|field
operator|.
name|maxValue
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|maxDoc
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|getBinary
specifier|public
name|BinaryDocValues
name|getBinary
parameter_list|(
name|FieldInfo
name|fieldInfo
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|OneField
name|field
init|=
name|fields
operator|.
name|get
argument_list|(
name|fieldInfo
operator|.
name|name
argument_list|)
decl_stmt|;
comment|// SegmentCoreReaders already verifies this field is
comment|// valid:
assert|assert
name|field
operator|!=
literal|null
assert|;
specifier|final
name|IndexInput
name|in
init|=
name|data
operator|.
name|clone
argument_list|()
decl_stmt|;
specifier|final
name|BytesRef
name|scratch
init|=
operator|new
name|BytesRef
argument_list|()
decl_stmt|;
specifier|final
name|DecimalFormat
name|decoder
init|=
operator|new
name|DecimalFormat
argument_list|(
name|field
operator|.
name|pattern
argument_list|,
operator|new
name|DecimalFormatSymbols
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|BinaryDocValues
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|get
parameter_list|(
name|int
name|docID
parameter_list|,
name|BytesRef
name|result
parameter_list|)
block|{
try|try
block|{
comment|// nocommit bounds check docID?  spooky
comment|// because if we don't you can maybe get
comment|// value from the wrong field ...
name|in
operator|.
name|seek
argument_list|(
name|field
operator|.
name|dataStartFilePointer
operator|+
operator|(
literal|9
operator|+
name|field
operator|.
name|pattern
operator|.
name|length
argument_list|()
operator|+
name|field
operator|.
name|maxLength
operator|)
operator|*
name|docID
argument_list|)
expr_stmt|;
name|SimpleTextUtil
operator|.
name|readLine
argument_list|(
name|in
argument_list|,
name|scratch
argument_list|)
expr_stmt|;
assert|assert
name|StringHelper
operator|.
name|startsWith
argument_list|(
name|scratch
argument_list|,
name|LENGTH
argument_list|)
assert|;
name|int
name|len
decl_stmt|;
try|try
block|{
name|len
operator|=
name|decoder
operator|.
name|parse
argument_list|(
operator|new
name|String
argument_list|(
name|scratch
operator|.
name|bytes
argument_list|,
name|scratch
operator|.
name|offset
operator|+
name|LENGTH
operator|.
name|length
argument_list|,
name|scratch
operator|.
name|length
operator|-
name|LENGTH
operator|.
name|length
argument_list|,
literal|"UTF-8"
argument_list|)
argument_list|)
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|pe
parameter_list|)
block|{
comment|// nocommit add message
name|CorruptIndexException
name|e
init|=
operator|new
name|CorruptIndexException
argument_list|(
literal|"failed to parse int length"
argument_list|)
decl_stmt|;
name|e
operator|.
name|initCause
argument_list|(
name|pe
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
name|result
operator|.
name|bytes
operator|=
operator|new
name|byte
index|[
name|len
index|]
expr_stmt|;
name|result
operator|.
name|offset
operator|=
literal|0
expr_stmt|;
name|result
operator|.
name|length
operator|=
name|len
expr_stmt|;
name|in
operator|.
name|readBytes
argument_list|(
name|result
operator|.
name|bytes
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
comment|// nocommit should .get() just throw IOE...
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|maxDoc
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isFixedLength
parameter_list|()
block|{
return|return
name|field
operator|.
name|fixedLength
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|maxLength
parameter_list|()
block|{
return|return
name|field
operator|.
name|maxLength
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|getSorted
specifier|public
name|SortedDocValues
name|getSorted
parameter_list|(
name|FieldInfo
name|fieldInfo
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|OneField
name|field
init|=
name|fields
operator|.
name|get
argument_list|(
name|fieldInfo
operator|.
name|name
argument_list|)
decl_stmt|;
comment|// SegmentCoreReaders already verifies this field is
comment|// valid:
assert|assert
name|field
operator|!=
literal|null
assert|;
specifier|final
name|IndexInput
name|in
init|=
name|data
operator|.
name|clone
argument_list|()
decl_stmt|;
specifier|final
name|BytesRef
name|scratch
init|=
operator|new
name|BytesRef
argument_list|()
decl_stmt|;
specifier|final
name|DecimalFormat
name|decoder
init|=
operator|new
name|DecimalFormat
argument_list|(
name|field
operator|.
name|pattern
argument_list|,
operator|new
name|DecimalFormatSymbols
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|DecimalFormat
name|ordDecoder
init|=
operator|new
name|DecimalFormat
argument_list|(
name|field
operator|.
name|ordPattern
argument_list|,
operator|new
name|DecimalFormatSymbols
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|SortedDocValues
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|getOrd
parameter_list|(
name|int
name|docID
parameter_list|)
block|{
try|try
block|{
name|in
operator|.
name|seek
argument_list|(
name|field
operator|.
name|dataStartFilePointer
operator|+
name|field
operator|.
name|numValues
operator|*
operator|(
literal|9
operator|+
name|field
operator|.
name|pattern
operator|.
name|length
argument_list|()
operator|+
name|field
operator|.
name|maxLength
operator|)
operator|+
name|docID
operator|*
operator|(
literal|1
operator|+
name|field
operator|.
name|ordPattern
operator|.
name|length
argument_list|()
operator|)
argument_list|)
expr_stmt|;
name|SimpleTextUtil
operator|.
name|readLine
argument_list|(
name|in
argument_list|,
name|scratch
argument_list|)
expr_stmt|;
try|try
block|{
return|return
name|ordDecoder
operator|.
name|parse
argument_list|(
name|scratch
operator|.
name|utf8ToString
argument_list|()
argument_list|)
operator|.
name|intValue
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|pe
parameter_list|)
block|{
name|CorruptIndexException
name|e
init|=
operator|new
name|CorruptIndexException
argument_list|(
literal|"failed to parse ord"
argument_list|)
decl_stmt|;
name|e
operator|.
name|initCause
argument_list|(
name|pe
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
comment|// nocommit should .get() just throw IOE...
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|lookupOrd
parameter_list|(
name|int
name|ord
parameter_list|,
name|BytesRef
name|result
parameter_list|)
block|{
try|try
block|{
name|in
operator|.
name|seek
argument_list|(
name|field
operator|.
name|dataStartFilePointer
operator|+
name|ord
operator|*
operator|(
literal|9
operator|+
name|field
operator|.
name|pattern
operator|.
name|length
argument_list|()
operator|+
name|field
operator|.
name|maxLength
operator|)
argument_list|)
expr_stmt|;
name|SimpleTextUtil
operator|.
name|readLine
argument_list|(
name|in
argument_list|,
name|scratch
argument_list|)
expr_stmt|;
assert|assert
name|StringHelper
operator|.
name|startsWith
argument_list|(
name|scratch
argument_list|,
name|LENGTH
argument_list|)
assert|;
name|int
name|len
decl_stmt|;
try|try
block|{
name|len
operator|=
name|decoder
operator|.
name|parse
argument_list|(
operator|new
name|String
argument_list|(
name|scratch
operator|.
name|bytes
argument_list|,
name|scratch
operator|.
name|offset
operator|+
name|LENGTH
operator|.
name|length
argument_list|,
name|scratch
operator|.
name|length
operator|-
name|LENGTH
operator|.
name|length
argument_list|,
literal|"UTF-8"
argument_list|)
argument_list|)
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|pe
parameter_list|)
block|{
name|CorruptIndexException
name|e
init|=
operator|new
name|CorruptIndexException
argument_list|(
literal|"failed to parse int length"
argument_list|)
decl_stmt|;
name|e
operator|.
name|initCause
argument_list|(
name|pe
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
name|result
operator|.
name|bytes
operator|=
operator|new
name|byte
index|[
name|len
index|]
expr_stmt|;
name|result
operator|.
name|offset
operator|=
literal|0
expr_stmt|;
name|result
operator|.
name|length
operator|=
name|len
expr_stmt|;
name|in
operator|.
name|readBytes
argument_list|(
name|result
operator|.
name|bytes
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
comment|// nocommit should .get() just throw IOE...
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|getValueCount
parameter_list|()
block|{
return|return
name|field
operator|.
name|numValues
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|maxDoc
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isFixedLength
parameter_list|()
block|{
return|return
name|field
operator|.
name|fixedLength
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|maxLength
parameter_list|()
block|{
return|return
name|field
operator|.
name|maxLength
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|data
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/** Used only in ctor: */
DECL|method|readLine
specifier|private
name|void
name|readLine
parameter_list|()
throws|throws
name|IOException
block|{
name|SimpleTextUtil
operator|.
name|readLine
argument_list|(
name|data
argument_list|,
name|scratch
argument_list|)
expr_stmt|;
comment|//System.out.println("line: " + scratch.utf8ToString());
block|}
comment|/** Used only in ctor: */
DECL|method|startsWith
specifier|private
name|boolean
name|startsWith
parameter_list|(
name|BytesRef
name|prefix
parameter_list|)
block|{
return|return
name|StringHelper
operator|.
name|startsWith
argument_list|(
name|scratch
argument_list|,
name|prefix
argument_list|)
return|;
block|}
comment|/** Used only in ctor: */
DECL|method|stripPrefix
specifier|private
name|String
name|stripPrefix
parameter_list|(
name|BytesRef
name|prefix
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|String
argument_list|(
name|scratch
operator|.
name|bytes
argument_list|,
name|scratch
operator|.
name|offset
operator|+
name|prefix
operator|.
name|length
argument_list|,
name|scratch
operator|.
name|length
operator|-
name|prefix
operator|.
name|length
argument_list|,
literal|"UTF-8"
argument_list|)
return|;
block|}
block|}
block|}
end_class
end_unit
