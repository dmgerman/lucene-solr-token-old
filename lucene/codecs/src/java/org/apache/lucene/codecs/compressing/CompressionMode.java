begin_unit
begin_package
DECL|package|org.apache.lucene.codecs.compressing
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|compressing
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|DataFormatException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|Deflater
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|Inflater
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|DataInput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|DataOutput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|ArrayUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_comment
comment|/**  * A compression mode. Tells how much effort should be spent on compression and  * uncompression of stored fields.  * @lucene.experimental  */
end_comment
begin_enum
DECL|enum|CompressionMode
specifier|public
enum|enum
name|CompressionMode
block|{
comment|/**    * A compression mode that trades compression ratio for speed. Although the    * compression ratio might remain high, compression and uncompression are    * very fast. Use this mode with indices that have a high update rate but    * should be able to load documents from disk quickly.    */
DECL|enum constant|FAST
name|FAST
argument_list|(
literal|0
argument_list|)
block|{
annotation|@
name|Override
name|Compressor
name|newCompressor
parameter_list|()
block|{
return|return
name|LZ4_FAST_COMPRESSOR
return|;
block|}
annotation|@
name|Override
name|Uncompressor
name|newUncompressor
parameter_list|()
block|{
return|return
name|LZ4_UNCOMPRESSOR
return|;
block|}
block|}
block|,
comment|/**    * A compression mode that trades speed for compression ratio. Although    * compression and uncompression might be slow, this compression mode should    * provide a good compression ratio. This mode might be interesting if/when    * your index size is much bigger than your OS cache.    */
DECL|enum constant|HIGH_COMPRESSION
name|HIGH_COMPRESSION
argument_list|(
literal|1
argument_list|)
block|{
annotation|@
name|Override
name|Compressor
name|newCompressor
parameter_list|()
block|{
return|return
operator|new
name|DeflateCompressor
argument_list|(
name|Deflater
operator|.
name|BEST_COMPRESSION
argument_list|)
return|;
block|}
annotation|@
name|Override
name|Uncompressor
name|newUncompressor
parameter_list|()
block|{
return|return
operator|new
name|DeflateUncompressor
argument_list|()
return|;
block|}
block|}
block|,
comment|/**    * This compression mode is similar to {@link #FAST} but it spends more time    * compressing in order to improve the compression ratio. This compression    * mode is best used with indices that have a low update rate but should be    * able to load documents from disk quickly.    */
DECL|enum constant|FAST_UNCOMPRESSION
name|FAST_UNCOMPRESSION
argument_list|(
literal|2
argument_list|)
block|{
annotation|@
name|Override
name|Compressor
name|newCompressor
parameter_list|()
block|{
return|return
name|LZ4_HIGH_COMPRESSOR
return|;
block|}
annotation|@
name|Override
name|Uncompressor
name|newUncompressor
parameter_list|()
block|{
return|return
name|LZ4_UNCOMPRESSOR
return|;
block|}
block|}
block|;
DECL|method|byId
specifier|public
specifier|static
name|CompressionMode
name|byId
parameter_list|(
name|int
name|id
parameter_list|)
block|{
for|for
control|(
name|CompressionMode
name|mode
range|:
name|CompressionMode
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|mode
operator|.
name|getId
argument_list|()
operator|==
name|id
condition|)
block|{
return|return
name|mode
return|;
block|}
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unknown id: "
operator|+
name|id
argument_list|)
throw|;
block|}
DECL|field|id
specifier|private
specifier|final
name|int
name|id
decl_stmt|;
DECL|method|CompressionMode
specifier|private
name|CompressionMode
parameter_list|(
name|int
name|id
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
block|}
comment|/**    * Returns an ID for this compression mode. Should be unique across    * {@link CompressionMode}s as it is used for serialization and    * unserialization.    */
DECL|method|getId
specifier|public
specifier|final
name|int
name|getId
parameter_list|()
block|{
return|return
name|id
return|;
block|}
comment|/**    * Create a new {@link Compressor} instance.    */
DECL|method|newCompressor
specifier|abstract
name|Compressor
name|newCompressor
parameter_list|()
function_decl|;
comment|/**    * Create a new {@link Uncompressor} instance.    */
DECL|method|newUncompressor
specifier|abstract
name|Uncompressor
name|newUncompressor
parameter_list|()
function_decl|;
DECL|field|LZ4_UNCOMPRESSOR
specifier|private
specifier|static
specifier|final
name|Uncompressor
name|LZ4_UNCOMPRESSOR
init|=
operator|new
name|Uncompressor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|uncompress
parameter_list|(
name|DataInput
name|in
parameter_list|,
name|BytesRef
name|bytes
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|int
name|uncompressedLen
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|bytes
operator|.
name|bytes
operator|.
name|length
operator|<
name|uncompressedLen
operator|+
literal|8
condition|)
block|{
name|bytes
operator|.
name|bytes
operator|=
name|ArrayUtil
operator|.
name|grow
argument_list|(
name|bytes
operator|.
name|bytes
argument_list|,
name|uncompressedLen
operator|+
literal|8
argument_list|)
expr_stmt|;
block|}
name|LZ4
operator|.
name|uncompress
argument_list|(
name|in
argument_list|,
name|uncompressedLen
argument_list|,
name|bytes
argument_list|)
expr_stmt|;
if|if
condition|(
name|bytes
operator|.
name|length
operator|!=
name|uncompressedLen
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Corrupted"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|uncompress
parameter_list|(
name|DataInput
name|in
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|,
name|BytesRef
name|bytes
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|int
name|uncompressedLen
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|offset
operator|>
name|uncompressedLen
condition|)
block|{
name|bytes
operator|.
name|length
operator|=
literal|0
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|bytes
operator|.
name|bytes
operator|.
name|length
operator|<
name|uncompressedLen
condition|)
block|{
name|bytes
operator|.
name|bytes
operator|=
name|ArrayUtil
operator|.
name|grow
argument_list|(
name|bytes
operator|.
name|bytes
argument_list|,
name|uncompressedLen
argument_list|)
expr_stmt|;
block|}
name|LZ4
operator|.
name|uncompress
argument_list|(
name|in
argument_list|,
name|offset
operator|+
name|length
argument_list|,
name|bytes
argument_list|)
expr_stmt|;
name|bytes
operator|.
name|offset
operator|=
name|offset
expr_stmt|;
if|if
condition|(
name|offset
operator|+
name|length
operator|>=
name|uncompressedLen
condition|)
block|{
if|if
condition|(
name|bytes
operator|.
name|length
operator|!=
name|uncompressedLen
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Corrupted"
argument_list|)
throw|;
block|}
name|bytes
operator|.
name|length
operator|=
name|uncompressedLen
operator|-
name|offset
expr_stmt|;
block|}
else|else
block|{
name|bytes
operator|.
name|length
operator|=
name|length
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|copyCompressedData
parameter_list|(
name|DataInput
name|in
parameter_list|,
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|int
name|uncompressedLen
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|uncompressedLen
argument_list|)
expr_stmt|;
if|if
condition|(
name|uncompressedLen
operator|==
literal|0
condition|)
block|{
name|out
operator|.
name|writeByte
argument_list|(
operator|(
name|byte
operator|)
literal|0
argument_list|)
expr_stmt|;
comment|// the token
return|return;
block|}
name|int
name|n
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|n
operator|<
name|uncompressedLen
condition|)
block|{
comment|// literals
specifier|final
name|byte
name|token
init|=
name|in
operator|.
name|readByte
argument_list|()
decl_stmt|;
name|out
operator|.
name|writeByte
argument_list|(
name|token
argument_list|)
expr_stmt|;
name|int
name|literalLen
init|=
operator|(
name|token
operator|&
literal|0xFF
operator|)
operator|>>>
literal|4
decl_stmt|;
if|if
condition|(
name|literalLen
operator|==
literal|0x0F
condition|)
block|{
name|byte
name|len
decl_stmt|;
while|while
condition|(
operator|(
name|len
operator|=
name|in
operator|.
name|readByte
argument_list|()
operator|)
operator|==
operator|(
name|byte
operator|)
literal|0xFF
condition|)
block|{
name|literalLen
operator|+=
literal|0xFF
expr_stmt|;
name|out
operator|.
name|writeByte
argument_list|(
name|len
argument_list|)
expr_stmt|;
block|}
name|literalLen
operator|+=
name|len
operator|&
literal|0xFF
expr_stmt|;
name|out
operator|.
name|writeByte
argument_list|(
name|len
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|copyBytes
argument_list|(
name|in
argument_list|,
name|literalLen
argument_list|)
expr_stmt|;
name|n
operator|+=
name|literalLen
expr_stmt|;
if|if
condition|(
name|n
operator|>=
name|uncompressedLen
condition|)
block|{
break|break;
block|}
comment|// matchs
name|out
operator|.
name|copyBytes
argument_list|(
name|in
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// match dec
name|int
name|matchLen
init|=
name|token
operator|&
literal|0x0F
decl_stmt|;
if|if
condition|(
name|matchLen
operator|==
literal|0x0F
condition|)
block|{
name|byte
name|len
decl_stmt|;
while|while
condition|(
operator|(
name|len
operator|=
name|in
operator|.
name|readByte
argument_list|()
operator|)
operator|==
operator|(
name|byte
operator|)
literal|0xFF
condition|)
block|{
name|matchLen
operator|+=
literal|0xFF
expr_stmt|;
name|out
operator|.
name|writeByte
argument_list|(
name|len
argument_list|)
expr_stmt|;
block|}
name|matchLen
operator|+=
name|len
operator|&
literal|0xFF
expr_stmt|;
name|out
operator|.
name|writeByte
argument_list|(
name|len
argument_list|)
expr_stmt|;
block|}
name|matchLen
operator|+=
name|LZ4
operator|.
name|MIN_MATCH
expr_stmt|;
name|n
operator|+=
name|matchLen
expr_stmt|;
block|}
if|if
condition|(
name|n
operator|!=
name|uncompressedLen
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Currupted compressed stream: expected "
operator|+
name|uncompressedLen
operator|+
literal|" bytes, but got at least"
operator|+
name|n
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Uncompressor
name|clone
parameter_list|()
block|{
return|return
name|this
return|;
block|}
block|}
decl_stmt|;
DECL|field|LZ4_FAST_COMPRESSOR
specifier|private
specifier|static
specifier|final
name|Compressor
name|LZ4_FAST_COMPRESSOR
init|=
operator|new
name|Compressor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|compress
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|,
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeVInt
argument_list|(
name|len
argument_list|)
expr_stmt|;
name|LZ4
operator|.
name|compress
argument_list|(
name|bytes
argument_list|,
name|off
argument_list|,
name|len
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
DECL|field|LZ4_HIGH_COMPRESSOR
specifier|private
specifier|static
specifier|final
name|Compressor
name|LZ4_HIGH_COMPRESSOR
init|=
operator|new
name|Compressor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|compress
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|,
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeVInt
argument_list|(
name|len
argument_list|)
expr_stmt|;
name|LZ4
operator|.
name|compressHC
argument_list|(
name|bytes
argument_list|,
name|off
argument_list|,
name|len
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
DECL|class|DeflateUncompressor
specifier|private
specifier|static
specifier|final
class|class
name|DeflateUncompressor
extends|extends
name|Uncompressor
block|{
DECL|field|uncompressor
specifier|final
name|Inflater
name|uncompressor
decl_stmt|;
DECL|field|compressed
name|byte
index|[]
name|compressed
decl_stmt|;
DECL|method|DeflateUncompressor
name|DeflateUncompressor
parameter_list|()
block|{
name|uncompressor
operator|=
operator|new
name|Inflater
argument_list|()
expr_stmt|;
name|compressed
operator|=
operator|new
name|byte
index|[
literal|0
index|]
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|uncompress
specifier|public
name|void
name|uncompress
parameter_list|(
name|DataInput
name|in
parameter_list|,
name|BytesRef
name|bytes
parameter_list|)
throws|throws
name|IOException
block|{
name|bytes
operator|.
name|offset
operator|=
name|bytes
operator|.
name|length
operator|=
literal|0
expr_stmt|;
specifier|final
name|int
name|compressedLength
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|compressedLength
operator|>
name|compressed
operator|.
name|length
condition|)
block|{
name|compressed
operator|=
name|ArrayUtil
operator|.
name|grow
argument_list|(
name|compressed
argument_list|,
name|compressedLength
argument_list|)
expr_stmt|;
block|}
name|in
operator|.
name|readBytes
argument_list|(
name|compressed
argument_list|,
literal|0
argument_list|,
name|compressedLength
argument_list|)
expr_stmt|;
name|uncompressor
operator|.
name|reset
argument_list|()
expr_stmt|;
name|uncompressor
operator|.
name|setInput
argument_list|(
name|compressed
argument_list|,
literal|0
argument_list|,
name|compressedLength
argument_list|)
expr_stmt|;
if|if
condition|(
name|uncompressor
operator|.
name|needsInput
argument_list|()
condition|)
block|{
return|return;
block|}
while|while
condition|(
literal|true
condition|)
block|{
specifier|final
name|int
name|count
decl_stmt|;
try|try
block|{
specifier|final
name|int
name|remaining
init|=
name|bytes
operator|.
name|bytes
operator|.
name|length
operator|-
name|bytes
operator|.
name|length
decl_stmt|;
name|count
operator|=
name|uncompressor
operator|.
name|inflate
argument_list|(
name|bytes
operator|.
name|bytes
argument_list|,
name|bytes
operator|.
name|length
argument_list|,
name|remaining
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DataFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|bytes
operator|.
name|length
operator|+=
name|count
expr_stmt|;
if|if
condition|(
name|uncompressor
operator|.
name|finished
argument_list|()
condition|)
block|{
break|break;
block|}
else|else
block|{
name|bytes
operator|.
name|bytes
operator|=
name|ArrayUtil
operator|.
name|grow
argument_list|(
name|bytes
operator|.
name|bytes
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|copyCompressedData
specifier|public
name|void
name|copyCompressedData
parameter_list|(
name|DataInput
name|in
parameter_list|,
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|int
name|compressedLength
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|compressedLength
argument_list|)
expr_stmt|;
name|out
operator|.
name|copyBytes
argument_list|(
name|in
argument_list|,
name|compressedLength
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|clone
specifier|public
name|Uncompressor
name|clone
parameter_list|()
block|{
return|return
operator|new
name|DeflateUncompressor
argument_list|()
return|;
block|}
block|}
DECL|class|DeflateCompressor
specifier|private
specifier|static
class|class
name|DeflateCompressor
extends|extends
name|Compressor
block|{
DECL|field|compressor
specifier|final
name|Deflater
name|compressor
decl_stmt|;
DECL|field|compressed
name|byte
index|[]
name|compressed
decl_stmt|;
DECL|method|DeflateCompressor
name|DeflateCompressor
parameter_list|(
name|int
name|level
parameter_list|)
block|{
name|compressor
operator|=
operator|new
name|Deflater
argument_list|(
name|level
argument_list|)
expr_stmt|;
name|compressed
operator|=
operator|new
name|byte
index|[
literal|64
index|]
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|compress
specifier|public
name|void
name|compress
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|,
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|compressor
operator|.
name|reset
argument_list|()
expr_stmt|;
name|compressor
operator|.
name|setInput
argument_list|(
name|bytes
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|compressor
operator|.
name|finish
argument_list|()
expr_stmt|;
if|if
condition|(
name|compressor
operator|.
name|needsInput
argument_list|()
condition|)
block|{
comment|// no output
name|out
operator|.
name|writeVInt
argument_list|(
literal|0
argument_list|)
expr_stmt|;
return|return;
block|}
name|int
name|totalCount
init|=
literal|0
decl_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
specifier|final
name|int
name|count
init|=
name|compressor
operator|.
name|deflate
argument_list|(
name|compressed
argument_list|,
name|totalCount
argument_list|,
name|compressed
operator|.
name|length
operator|-
name|totalCount
argument_list|)
decl_stmt|;
name|totalCount
operator|+=
name|count
expr_stmt|;
assert|assert
name|totalCount
operator|<=
name|compressed
operator|.
name|length
assert|;
if|if
condition|(
name|compressor
operator|.
name|finished
argument_list|()
condition|)
block|{
break|break;
block|}
else|else
block|{
name|compressed
operator|=
name|ArrayUtil
operator|.
name|grow
argument_list|(
name|compressed
argument_list|)
expr_stmt|;
block|}
block|}
name|out
operator|.
name|writeVInt
argument_list|(
name|totalCount
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBytes
argument_list|(
name|compressed
argument_list|,
name|totalCount
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_enum
end_unit
