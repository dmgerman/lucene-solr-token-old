begin_unit
begin_package
DECL|package|org.apache.lucene.codecs.simpletext
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|simpletext
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|FieldsProducer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DocsAndPositionsEnum
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DocsEnum
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|FieldInfo
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|FieldInfos
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexOptions
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SegmentReadState
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Terms
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|TermsEnum
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|BufferedChecksumIndexInput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|ChecksumIndexInput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexInput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Accountable
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Accountables
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|ArrayUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Bits
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRefBuilder
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|CharsRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|CharsRefBuilder
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|FixedBitSet
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IntsRefBuilder
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|RamUsageEstimator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|StringHelper
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|fst
operator|.
name|Builder
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|fst
operator|.
name|BytesRefFSTEnum
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|fst
operator|.
name|FST
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|fst
operator|.
name|PairOutputs
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|fst
operator|.
name|PositiveIntOutputs
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|fst
operator|.
name|Util
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|simpletext
operator|.
name|SimpleTextFieldsWriter
operator|.
name|DOC
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|simpletext
operator|.
name|SimpleTextFieldsWriter
operator|.
name|END
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|simpletext
operator|.
name|SimpleTextFieldsWriter
operator|.
name|END_OFFSET
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|simpletext
operator|.
name|SimpleTextFieldsWriter
operator|.
name|FIELD
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|simpletext
operator|.
name|SimpleTextFieldsWriter
operator|.
name|FREQ
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|simpletext
operator|.
name|SimpleTextFieldsWriter
operator|.
name|PAYLOAD
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|simpletext
operator|.
name|SimpleTextFieldsWriter
operator|.
name|POS
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|simpletext
operator|.
name|SimpleTextFieldsWriter
operator|.
name|START_OFFSET
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|simpletext
operator|.
name|SimpleTextFieldsWriter
operator|.
name|TERM
import|;
end_import
begin_class
DECL|class|SimpleTextFieldsReader
class|class
name|SimpleTextFieldsReader
extends|extends
name|FieldsProducer
block|{
DECL|field|BASE_RAM_BYTES_USED
specifier|private
specifier|static
specifier|final
name|long
name|BASE_RAM_BYTES_USED
init|=
name|RamUsageEstimator
operator|.
name|shallowSizeOfInstance
argument_list|(
name|SimpleTextFieldsReader
operator|.
name|class
argument_list|)
operator|+
name|RamUsageEstimator
operator|.
name|shallowSizeOfInstance
argument_list|(
name|TreeMap
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|fields
specifier|private
specifier|final
name|TreeMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|fields
decl_stmt|;
DECL|field|in
specifier|private
specifier|final
name|IndexInput
name|in
decl_stmt|;
DECL|field|fieldInfos
specifier|private
specifier|final
name|FieldInfos
name|fieldInfos
decl_stmt|;
DECL|field|maxDoc
specifier|private
specifier|final
name|int
name|maxDoc
decl_stmt|;
DECL|method|SimpleTextFieldsReader
specifier|public
name|SimpleTextFieldsReader
parameter_list|(
name|SegmentReadState
name|state
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|maxDoc
operator|=
name|state
operator|.
name|segmentInfo
operator|.
name|getDocCount
argument_list|()
expr_stmt|;
name|fieldInfos
operator|=
name|state
operator|.
name|fieldInfos
expr_stmt|;
name|in
operator|=
name|state
operator|.
name|directory
operator|.
name|openInput
argument_list|(
name|SimpleTextPostingsFormat
operator|.
name|getPostingsFileName
argument_list|(
name|state
operator|.
name|segmentInfo
operator|.
name|name
argument_list|,
name|state
operator|.
name|segmentSuffix
argument_list|)
argument_list|,
name|state
operator|.
name|context
argument_list|)
expr_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|fields
operator|=
name|readFields
argument_list|(
name|in
operator|.
name|clone
argument_list|()
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|IOUtils
operator|.
name|closeWhileHandlingException
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|readFields
specifier|private
name|TreeMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|readFields
parameter_list|(
name|IndexInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|ChecksumIndexInput
name|input
init|=
operator|new
name|BufferedChecksumIndexInput
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|BytesRefBuilder
name|scratch
init|=
operator|new
name|BytesRefBuilder
argument_list|()
decl_stmt|;
name|TreeMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|fields
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|SimpleTextUtil
operator|.
name|readLine
argument_list|(
name|input
argument_list|,
name|scratch
argument_list|)
expr_stmt|;
if|if
condition|(
name|scratch
operator|.
name|get
argument_list|()
operator|.
name|equals
argument_list|(
name|END
argument_list|)
condition|)
block|{
name|SimpleTextUtil
operator|.
name|checkFooter
argument_list|(
name|input
argument_list|)
expr_stmt|;
return|return
name|fields
return|;
block|}
elseif|else
if|if
condition|(
name|StringHelper
operator|.
name|startsWith
argument_list|(
name|scratch
operator|.
name|get
argument_list|()
argument_list|,
name|FIELD
argument_list|)
condition|)
block|{
name|String
name|fieldName
init|=
operator|new
name|String
argument_list|(
name|scratch
operator|.
name|bytes
argument_list|()
argument_list|,
name|FIELD
operator|.
name|length
argument_list|,
name|scratch
operator|.
name|length
argument_list|()
operator|-
name|FIELD
operator|.
name|length
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
decl_stmt|;
name|fields
operator|.
name|put
argument_list|(
name|fieldName
argument_list|,
name|input
operator|.
name|getFilePointer
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|class|SimpleTextTermsEnum
specifier|private
class|class
name|SimpleTextTermsEnum
extends|extends
name|TermsEnum
block|{
DECL|field|indexOptions
specifier|private
specifier|final
name|IndexOptions
name|indexOptions
decl_stmt|;
DECL|field|docFreq
specifier|private
name|int
name|docFreq
decl_stmt|;
DECL|field|totalTermFreq
specifier|private
name|long
name|totalTermFreq
decl_stmt|;
DECL|field|docsStart
specifier|private
name|long
name|docsStart
decl_stmt|;
DECL|field|ended
specifier|private
name|boolean
name|ended
decl_stmt|;
DECL|field|fstEnum
specifier|private
specifier|final
name|BytesRefFSTEnum
argument_list|<
name|PairOutputs
operator|.
name|Pair
argument_list|<
name|Long
argument_list|,
name|PairOutputs
operator|.
name|Pair
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|>
argument_list|>
argument_list|>
name|fstEnum
decl_stmt|;
DECL|method|SimpleTextTermsEnum
specifier|public
name|SimpleTextTermsEnum
parameter_list|(
name|FST
argument_list|<
name|PairOutputs
operator|.
name|Pair
argument_list|<
name|Long
argument_list|,
name|PairOutputs
operator|.
name|Pair
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|>
argument_list|>
argument_list|>
name|fst
parameter_list|,
name|IndexOptions
name|indexOptions
parameter_list|)
block|{
name|this
operator|.
name|indexOptions
operator|=
name|indexOptions
expr_stmt|;
name|fstEnum
operator|=
operator|new
name|BytesRefFSTEnum
argument_list|<>
argument_list|(
name|fst
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|seekExact
specifier|public
name|boolean
name|seekExact
parameter_list|(
name|BytesRef
name|text
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|BytesRefFSTEnum
operator|.
name|InputOutput
argument_list|<
name|PairOutputs
operator|.
name|Pair
argument_list|<
name|Long
argument_list|,
name|PairOutputs
operator|.
name|Pair
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|>
argument_list|>
argument_list|>
name|result
init|=
name|fstEnum
operator|.
name|seekExact
argument_list|(
name|text
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
name|PairOutputs
operator|.
name|Pair
argument_list|<
name|Long
argument_list|,
name|PairOutputs
operator|.
name|Pair
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|>
argument_list|>
name|pair1
init|=
name|result
operator|.
name|output
decl_stmt|;
name|PairOutputs
operator|.
name|Pair
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|>
name|pair2
init|=
name|pair1
operator|.
name|output2
decl_stmt|;
name|docsStart
operator|=
name|pair1
operator|.
name|output1
expr_stmt|;
name|docFreq
operator|=
name|pair2
operator|.
name|output1
operator|.
name|intValue
argument_list|()
expr_stmt|;
name|totalTermFreq
operator|=
name|pair2
operator|.
name|output2
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|seekCeil
specifier|public
name|SeekStatus
name|seekCeil
parameter_list|(
name|BytesRef
name|text
parameter_list|)
throws|throws
name|IOException
block|{
comment|//System.out.println("seek to text=" + text.utf8ToString());
specifier|final
name|BytesRefFSTEnum
operator|.
name|InputOutput
argument_list|<
name|PairOutputs
operator|.
name|Pair
argument_list|<
name|Long
argument_list|,
name|PairOutputs
operator|.
name|Pair
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|>
argument_list|>
argument_list|>
name|result
init|=
name|fstEnum
operator|.
name|seekCeil
argument_list|(
name|text
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
comment|//System.out.println("  end");
return|return
name|SeekStatus
operator|.
name|END
return|;
block|}
else|else
block|{
comment|//System.out.println("  got text=" + term.utf8ToString());
name|PairOutputs
operator|.
name|Pair
argument_list|<
name|Long
argument_list|,
name|PairOutputs
operator|.
name|Pair
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|>
argument_list|>
name|pair1
init|=
name|result
operator|.
name|output
decl_stmt|;
name|PairOutputs
operator|.
name|Pair
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|>
name|pair2
init|=
name|pair1
operator|.
name|output2
decl_stmt|;
name|docsStart
operator|=
name|pair1
operator|.
name|output1
expr_stmt|;
name|docFreq
operator|=
name|pair2
operator|.
name|output1
operator|.
name|intValue
argument_list|()
expr_stmt|;
name|totalTermFreq
operator|=
name|pair2
operator|.
name|output2
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|input
operator|.
name|equals
argument_list|(
name|text
argument_list|)
condition|)
block|{
comment|//System.out.println("  match docsStart=" + docsStart);
return|return
name|SeekStatus
operator|.
name|FOUND
return|;
block|}
else|else
block|{
comment|//System.out.println("  not match docsStart=" + docsStart);
return|return
name|SeekStatus
operator|.
name|NOT_FOUND
return|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|next
specifier|public
name|BytesRef
name|next
parameter_list|()
throws|throws
name|IOException
block|{
assert|assert
operator|!
name|ended
assert|;
specifier|final
name|BytesRefFSTEnum
operator|.
name|InputOutput
argument_list|<
name|PairOutputs
operator|.
name|Pair
argument_list|<
name|Long
argument_list|,
name|PairOutputs
operator|.
name|Pair
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|>
argument_list|>
argument_list|>
name|result
init|=
name|fstEnum
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
name|PairOutputs
operator|.
name|Pair
argument_list|<
name|Long
argument_list|,
name|PairOutputs
operator|.
name|Pair
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|>
argument_list|>
name|pair1
init|=
name|result
operator|.
name|output
decl_stmt|;
name|PairOutputs
operator|.
name|Pair
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|>
name|pair2
init|=
name|pair1
operator|.
name|output2
decl_stmt|;
name|docsStart
operator|=
name|pair1
operator|.
name|output1
expr_stmt|;
name|docFreq
operator|=
name|pair2
operator|.
name|output1
operator|.
name|intValue
argument_list|()
expr_stmt|;
name|totalTermFreq
operator|=
name|pair2
operator|.
name|output2
expr_stmt|;
return|return
name|result
operator|.
name|input
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|term
specifier|public
name|BytesRef
name|term
parameter_list|()
block|{
return|return
name|fstEnum
operator|.
name|current
argument_list|()
operator|.
name|input
return|;
block|}
annotation|@
name|Override
DECL|method|ord
specifier|public
name|long
name|ord
parameter_list|()
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|seekExact
specifier|public
name|void
name|seekExact
parameter_list|(
name|long
name|ord
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|docFreq
specifier|public
name|int
name|docFreq
parameter_list|()
block|{
return|return
name|docFreq
return|;
block|}
annotation|@
name|Override
DECL|method|totalTermFreq
specifier|public
name|long
name|totalTermFreq
parameter_list|()
block|{
return|return
name|indexOptions
operator|==
name|IndexOptions
operator|.
name|DOCS
condition|?
operator|-
literal|1
else|:
name|totalTermFreq
return|;
block|}
annotation|@
name|Override
DECL|method|docs
specifier|public
name|DocsEnum
name|docs
parameter_list|(
name|Bits
name|liveDocs
parameter_list|,
name|DocsEnum
name|reuse
parameter_list|,
name|int
name|flags
parameter_list|)
throws|throws
name|IOException
block|{
name|SimpleTextDocsEnum
name|docsEnum
decl_stmt|;
if|if
condition|(
name|reuse
operator|!=
literal|null
operator|&&
name|reuse
operator|instanceof
name|SimpleTextDocsEnum
operator|&&
operator|(
operator|(
name|SimpleTextDocsEnum
operator|)
name|reuse
operator|)
operator|.
name|canReuse
argument_list|(
name|SimpleTextFieldsReader
operator|.
name|this
operator|.
name|in
argument_list|)
condition|)
block|{
name|docsEnum
operator|=
operator|(
name|SimpleTextDocsEnum
operator|)
name|reuse
expr_stmt|;
block|}
else|else
block|{
name|docsEnum
operator|=
operator|new
name|SimpleTextDocsEnum
argument_list|()
expr_stmt|;
block|}
return|return
name|docsEnum
operator|.
name|reset
argument_list|(
name|docsStart
argument_list|,
name|liveDocs
argument_list|,
name|indexOptions
operator|==
name|IndexOptions
operator|.
name|DOCS
argument_list|,
name|docFreq
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|docsAndPositions
specifier|public
name|DocsAndPositionsEnum
name|docsAndPositions
parameter_list|(
name|Bits
name|liveDocs
parameter_list|,
name|DocsAndPositionsEnum
name|reuse
parameter_list|,
name|int
name|flags
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|indexOptions
operator|.
name|compareTo
argument_list|(
name|IndexOptions
operator|.
name|DOCS_AND_FREQS_AND_POSITIONS
argument_list|)
operator|<
literal|0
condition|)
block|{
comment|// Positions were not indexed
return|return
literal|null
return|;
block|}
name|SimpleTextDocsAndPositionsEnum
name|docsAndPositionsEnum
decl_stmt|;
if|if
condition|(
name|reuse
operator|!=
literal|null
operator|&&
name|reuse
operator|instanceof
name|SimpleTextDocsAndPositionsEnum
operator|&&
operator|(
operator|(
name|SimpleTextDocsAndPositionsEnum
operator|)
name|reuse
operator|)
operator|.
name|canReuse
argument_list|(
name|SimpleTextFieldsReader
operator|.
name|this
operator|.
name|in
argument_list|)
condition|)
block|{
name|docsAndPositionsEnum
operator|=
operator|(
name|SimpleTextDocsAndPositionsEnum
operator|)
name|reuse
expr_stmt|;
block|}
else|else
block|{
name|docsAndPositionsEnum
operator|=
operator|new
name|SimpleTextDocsAndPositionsEnum
argument_list|()
expr_stmt|;
block|}
return|return
name|docsAndPositionsEnum
operator|.
name|reset
argument_list|(
name|docsStart
argument_list|,
name|liveDocs
argument_list|,
name|indexOptions
argument_list|,
name|docFreq
argument_list|)
return|;
block|}
block|}
DECL|class|SimpleTextDocsEnum
specifier|private
class|class
name|SimpleTextDocsEnum
extends|extends
name|DocsEnum
block|{
DECL|field|inStart
specifier|private
specifier|final
name|IndexInput
name|inStart
decl_stmt|;
DECL|field|in
specifier|private
specifier|final
name|IndexInput
name|in
decl_stmt|;
DECL|field|omitTF
specifier|private
name|boolean
name|omitTF
decl_stmt|;
DECL|field|docID
specifier|private
name|int
name|docID
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|tf
specifier|private
name|int
name|tf
decl_stmt|;
DECL|field|liveDocs
specifier|private
name|Bits
name|liveDocs
decl_stmt|;
DECL|field|scratch
specifier|private
specifier|final
name|BytesRefBuilder
name|scratch
init|=
operator|new
name|BytesRefBuilder
argument_list|()
decl_stmt|;
DECL|field|scratchUTF16
specifier|private
specifier|final
name|CharsRefBuilder
name|scratchUTF16
init|=
operator|new
name|CharsRefBuilder
argument_list|()
decl_stmt|;
DECL|field|cost
specifier|private
name|int
name|cost
decl_stmt|;
DECL|method|SimpleTextDocsEnum
specifier|public
name|SimpleTextDocsEnum
parameter_list|()
block|{
name|this
operator|.
name|inStart
operator|=
name|SimpleTextFieldsReader
operator|.
name|this
operator|.
name|in
expr_stmt|;
name|this
operator|.
name|in
operator|=
name|this
operator|.
name|inStart
operator|.
name|clone
argument_list|()
expr_stmt|;
block|}
DECL|method|canReuse
specifier|public
name|boolean
name|canReuse
parameter_list|(
name|IndexInput
name|in
parameter_list|)
block|{
return|return
name|in
operator|==
name|inStart
return|;
block|}
DECL|method|reset
specifier|public
name|SimpleTextDocsEnum
name|reset
parameter_list|(
name|long
name|fp
parameter_list|,
name|Bits
name|liveDocs
parameter_list|,
name|boolean
name|omitTF
parameter_list|,
name|int
name|docFreq
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|liveDocs
operator|=
name|liveDocs
expr_stmt|;
name|in
operator|.
name|seek
argument_list|(
name|fp
argument_list|)
expr_stmt|;
name|this
operator|.
name|omitTF
operator|=
name|omitTF
expr_stmt|;
name|docID
operator|=
operator|-
literal|1
expr_stmt|;
name|tf
operator|=
literal|1
expr_stmt|;
name|cost
operator|=
name|docFreq
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|docID
specifier|public
name|int
name|docID
parameter_list|()
block|{
return|return
name|docID
return|;
block|}
annotation|@
name|Override
DECL|method|freq
specifier|public
name|int
name|freq
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|tf
return|;
block|}
annotation|@
name|Override
DECL|method|nextDoc
specifier|public
name|int
name|nextDoc
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|docID
operator|==
name|NO_MORE_DOCS
condition|)
block|{
return|return
name|docID
return|;
block|}
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|int
name|termFreq
init|=
literal|0
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
specifier|final
name|long
name|lineStart
init|=
name|in
operator|.
name|getFilePointer
argument_list|()
decl_stmt|;
name|SimpleTextUtil
operator|.
name|readLine
argument_list|(
name|in
argument_list|,
name|scratch
argument_list|)
expr_stmt|;
if|if
condition|(
name|StringHelper
operator|.
name|startsWith
argument_list|(
name|scratch
operator|.
name|get
argument_list|()
argument_list|,
name|DOC
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|first
operator|&&
operator|(
name|liveDocs
operator|==
literal|null
operator|||
name|liveDocs
operator|.
name|get
argument_list|(
name|docID
argument_list|)
operator|)
condition|)
block|{
name|in
operator|.
name|seek
argument_list|(
name|lineStart
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|omitTF
condition|)
block|{
name|tf
operator|=
name|termFreq
expr_stmt|;
block|}
return|return
name|docID
return|;
block|}
name|scratchUTF16
operator|.
name|copyUTF8Bytes
argument_list|(
name|scratch
operator|.
name|bytes
argument_list|()
argument_list|,
name|DOC
operator|.
name|length
argument_list|,
name|scratch
operator|.
name|length
argument_list|()
operator|-
name|DOC
operator|.
name|length
argument_list|)
expr_stmt|;
name|docID
operator|=
name|ArrayUtil
operator|.
name|parseInt
argument_list|(
name|scratchUTF16
operator|.
name|chars
argument_list|()
argument_list|,
literal|0
argument_list|,
name|scratchUTF16
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|termFreq
operator|=
literal|0
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|StringHelper
operator|.
name|startsWith
argument_list|(
name|scratch
operator|.
name|get
argument_list|()
argument_list|,
name|FREQ
argument_list|)
condition|)
block|{
name|scratchUTF16
operator|.
name|copyUTF8Bytes
argument_list|(
name|scratch
operator|.
name|bytes
argument_list|()
argument_list|,
name|FREQ
operator|.
name|length
argument_list|,
name|scratch
operator|.
name|length
argument_list|()
operator|-
name|FREQ
operator|.
name|length
argument_list|)
expr_stmt|;
name|termFreq
operator|=
name|ArrayUtil
operator|.
name|parseInt
argument_list|(
name|scratchUTF16
operator|.
name|chars
argument_list|()
argument_list|,
literal|0
argument_list|,
name|scratchUTF16
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|StringHelper
operator|.
name|startsWith
argument_list|(
name|scratch
operator|.
name|get
argument_list|()
argument_list|,
name|POS
argument_list|)
condition|)
block|{
comment|// skip termFreq++;
block|}
elseif|else
if|if
condition|(
name|StringHelper
operator|.
name|startsWith
argument_list|(
name|scratch
operator|.
name|get
argument_list|()
argument_list|,
name|START_OFFSET
argument_list|)
condition|)
block|{
comment|// skip
block|}
elseif|else
if|if
condition|(
name|StringHelper
operator|.
name|startsWith
argument_list|(
name|scratch
operator|.
name|get
argument_list|()
argument_list|,
name|END_OFFSET
argument_list|)
condition|)
block|{
comment|// skip
block|}
elseif|else
if|if
condition|(
name|StringHelper
operator|.
name|startsWith
argument_list|(
name|scratch
operator|.
name|get
argument_list|()
argument_list|,
name|PAYLOAD
argument_list|)
condition|)
block|{
comment|// skip
block|}
else|else
block|{
assert|assert
name|StringHelper
operator|.
name|startsWith
argument_list|(
name|scratch
operator|.
name|get
argument_list|()
argument_list|,
name|TERM
argument_list|)
operator|||
name|StringHelper
operator|.
name|startsWith
argument_list|(
name|scratch
operator|.
name|get
argument_list|()
argument_list|,
name|FIELD
argument_list|)
operator|||
name|StringHelper
operator|.
name|startsWith
argument_list|(
name|scratch
operator|.
name|get
argument_list|()
argument_list|,
name|END
argument_list|)
operator|:
literal|"scratch="
operator|+
name|scratch
operator|.
name|get
argument_list|()
operator|.
name|utf8ToString
argument_list|()
assert|;
if|if
condition|(
operator|!
name|first
operator|&&
operator|(
name|liveDocs
operator|==
literal|null
operator|||
name|liveDocs
operator|.
name|get
argument_list|(
name|docID
argument_list|)
operator|)
condition|)
block|{
name|in
operator|.
name|seek
argument_list|(
name|lineStart
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|omitTF
condition|)
block|{
name|tf
operator|=
name|termFreq
expr_stmt|;
block|}
return|return
name|docID
return|;
block|}
return|return
name|docID
operator|=
name|NO_MORE_DOCS
return|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|advance
specifier|public
name|int
name|advance
parameter_list|(
name|int
name|target
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Naive -- better to index skip data
return|return
name|slowAdvance
argument_list|(
name|target
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|cost
specifier|public
name|long
name|cost
parameter_list|()
block|{
return|return
name|cost
return|;
block|}
block|}
DECL|class|SimpleTextDocsAndPositionsEnum
specifier|private
class|class
name|SimpleTextDocsAndPositionsEnum
extends|extends
name|DocsAndPositionsEnum
block|{
DECL|field|inStart
specifier|private
specifier|final
name|IndexInput
name|inStart
decl_stmt|;
DECL|field|in
specifier|private
specifier|final
name|IndexInput
name|in
decl_stmt|;
DECL|field|docID
specifier|private
name|int
name|docID
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|tf
specifier|private
name|int
name|tf
decl_stmt|;
DECL|field|liveDocs
specifier|private
name|Bits
name|liveDocs
decl_stmt|;
DECL|field|scratch
specifier|private
specifier|final
name|BytesRefBuilder
name|scratch
init|=
operator|new
name|BytesRefBuilder
argument_list|()
decl_stmt|;
DECL|field|scratch2
specifier|private
specifier|final
name|BytesRefBuilder
name|scratch2
init|=
operator|new
name|BytesRefBuilder
argument_list|()
decl_stmt|;
DECL|field|scratchUTF16
specifier|private
specifier|final
name|CharsRefBuilder
name|scratchUTF16
init|=
operator|new
name|CharsRefBuilder
argument_list|()
decl_stmt|;
DECL|field|scratchUTF16_2
specifier|private
specifier|final
name|CharsRefBuilder
name|scratchUTF16_2
init|=
operator|new
name|CharsRefBuilder
argument_list|()
decl_stmt|;
DECL|field|payload
specifier|private
name|BytesRef
name|payload
decl_stmt|;
DECL|field|nextDocStart
specifier|private
name|long
name|nextDocStart
decl_stmt|;
DECL|field|readOffsets
specifier|private
name|boolean
name|readOffsets
decl_stmt|;
DECL|field|readPositions
specifier|private
name|boolean
name|readPositions
decl_stmt|;
DECL|field|startOffset
specifier|private
name|int
name|startOffset
decl_stmt|;
DECL|field|endOffset
specifier|private
name|int
name|endOffset
decl_stmt|;
DECL|field|cost
specifier|private
name|int
name|cost
decl_stmt|;
DECL|method|SimpleTextDocsAndPositionsEnum
specifier|public
name|SimpleTextDocsAndPositionsEnum
parameter_list|()
block|{
name|this
operator|.
name|inStart
operator|=
name|SimpleTextFieldsReader
operator|.
name|this
operator|.
name|in
expr_stmt|;
name|this
operator|.
name|in
operator|=
name|inStart
operator|.
name|clone
argument_list|()
expr_stmt|;
block|}
DECL|method|canReuse
specifier|public
name|boolean
name|canReuse
parameter_list|(
name|IndexInput
name|in
parameter_list|)
block|{
return|return
name|in
operator|==
name|inStart
return|;
block|}
DECL|method|reset
specifier|public
name|SimpleTextDocsAndPositionsEnum
name|reset
parameter_list|(
name|long
name|fp
parameter_list|,
name|Bits
name|liveDocs
parameter_list|,
name|IndexOptions
name|indexOptions
parameter_list|,
name|int
name|docFreq
parameter_list|)
block|{
name|this
operator|.
name|liveDocs
operator|=
name|liveDocs
expr_stmt|;
name|nextDocStart
operator|=
name|fp
expr_stmt|;
name|docID
operator|=
operator|-
literal|1
expr_stmt|;
name|readPositions
operator|=
name|indexOptions
operator|.
name|compareTo
argument_list|(
name|IndexOptions
operator|.
name|DOCS_AND_FREQS_AND_POSITIONS
argument_list|)
operator|>=
literal|0
expr_stmt|;
name|readOffsets
operator|=
name|indexOptions
operator|.
name|compareTo
argument_list|(
name|IndexOptions
operator|.
name|DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS
argument_list|)
operator|>=
literal|0
expr_stmt|;
if|if
condition|(
operator|!
name|readOffsets
condition|)
block|{
name|startOffset
operator|=
operator|-
literal|1
expr_stmt|;
name|endOffset
operator|=
operator|-
literal|1
expr_stmt|;
block|}
name|cost
operator|=
name|docFreq
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|docID
specifier|public
name|int
name|docID
parameter_list|()
block|{
return|return
name|docID
return|;
block|}
annotation|@
name|Override
DECL|method|freq
specifier|public
name|int
name|freq
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|tf
return|;
block|}
annotation|@
name|Override
DECL|method|nextDoc
specifier|public
name|int
name|nextDoc
parameter_list|()
throws|throws
name|IOException
block|{
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|in
operator|.
name|seek
argument_list|(
name|nextDocStart
argument_list|)
expr_stmt|;
name|long
name|posStart
init|=
literal|0
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
specifier|final
name|long
name|lineStart
init|=
name|in
operator|.
name|getFilePointer
argument_list|()
decl_stmt|;
name|SimpleTextUtil
operator|.
name|readLine
argument_list|(
name|in
argument_list|,
name|scratch
argument_list|)
expr_stmt|;
comment|//System.out.println("NEXT DOC: " + scratch.utf8ToString());
if|if
condition|(
name|StringHelper
operator|.
name|startsWith
argument_list|(
name|scratch
operator|.
name|get
argument_list|()
argument_list|,
name|DOC
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|first
operator|&&
operator|(
name|liveDocs
operator|==
literal|null
operator|||
name|liveDocs
operator|.
name|get
argument_list|(
name|docID
argument_list|)
operator|)
condition|)
block|{
name|nextDocStart
operator|=
name|lineStart
expr_stmt|;
name|in
operator|.
name|seek
argument_list|(
name|posStart
argument_list|)
expr_stmt|;
return|return
name|docID
return|;
block|}
name|scratchUTF16
operator|.
name|copyUTF8Bytes
argument_list|(
name|scratch
operator|.
name|bytes
argument_list|()
argument_list|,
name|DOC
operator|.
name|length
argument_list|,
name|scratch
operator|.
name|length
argument_list|()
operator|-
name|DOC
operator|.
name|length
argument_list|)
expr_stmt|;
name|docID
operator|=
name|ArrayUtil
operator|.
name|parseInt
argument_list|(
name|scratchUTF16
operator|.
name|chars
argument_list|()
argument_list|,
literal|0
argument_list|,
name|scratchUTF16
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|tf
operator|=
literal|0
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|StringHelper
operator|.
name|startsWith
argument_list|(
name|scratch
operator|.
name|get
argument_list|()
argument_list|,
name|FREQ
argument_list|)
condition|)
block|{
name|scratchUTF16
operator|.
name|copyUTF8Bytes
argument_list|(
name|scratch
operator|.
name|bytes
argument_list|()
argument_list|,
name|FREQ
operator|.
name|length
argument_list|,
name|scratch
operator|.
name|length
argument_list|()
operator|-
name|FREQ
operator|.
name|length
argument_list|)
expr_stmt|;
name|tf
operator|=
name|ArrayUtil
operator|.
name|parseInt
argument_list|(
name|scratchUTF16
operator|.
name|chars
argument_list|()
argument_list|,
literal|0
argument_list|,
name|scratchUTF16
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|posStart
operator|=
name|in
operator|.
name|getFilePointer
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|StringHelper
operator|.
name|startsWith
argument_list|(
name|scratch
operator|.
name|get
argument_list|()
argument_list|,
name|POS
argument_list|)
condition|)
block|{
comment|// skip
block|}
elseif|else
if|if
condition|(
name|StringHelper
operator|.
name|startsWith
argument_list|(
name|scratch
operator|.
name|get
argument_list|()
argument_list|,
name|START_OFFSET
argument_list|)
condition|)
block|{
comment|// skip
block|}
elseif|else
if|if
condition|(
name|StringHelper
operator|.
name|startsWith
argument_list|(
name|scratch
operator|.
name|get
argument_list|()
argument_list|,
name|END_OFFSET
argument_list|)
condition|)
block|{
comment|// skip
block|}
elseif|else
if|if
condition|(
name|StringHelper
operator|.
name|startsWith
argument_list|(
name|scratch
operator|.
name|get
argument_list|()
argument_list|,
name|PAYLOAD
argument_list|)
condition|)
block|{
comment|// skip
block|}
else|else
block|{
assert|assert
name|StringHelper
operator|.
name|startsWith
argument_list|(
name|scratch
operator|.
name|get
argument_list|()
argument_list|,
name|TERM
argument_list|)
operator|||
name|StringHelper
operator|.
name|startsWith
argument_list|(
name|scratch
operator|.
name|get
argument_list|()
argument_list|,
name|FIELD
argument_list|)
operator|||
name|StringHelper
operator|.
name|startsWith
argument_list|(
name|scratch
operator|.
name|get
argument_list|()
argument_list|,
name|END
argument_list|)
assert|;
if|if
condition|(
operator|!
name|first
operator|&&
operator|(
name|liveDocs
operator|==
literal|null
operator|||
name|liveDocs
operator|.
name|get
argument_list|(
name|docID
argument_list|)
operator|)
condition|)
block|{
name|nextDocStart
operator|=
name|lineStart
expr_stmt|;
name|in
operator|.
name|seek
argument_list|(
name|posStart
argument_list|)
expr_stmt|;
return|return
name|docID
return|;
block|}
return|return
name|docID
operator|=
name|NO_MORE_DOCS
return|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|advance
specifier|public
name|int
name|advance
parameter_list|(
name|int
name|target
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Naive -- better to index skip data
return|return
name|slowAdvance
argument_list|(
name|target
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|nextPosition
specifier|public
name|int
name|nextPosition
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|int
name|pos
decl_stmt|;
if|if
condition|(
name|readPositions
condition|)
block|{
name|SimpleTextUtil
operator|.
name|readLine
argument_list|(
name|in
argument_list|,
name|scratch
argument_list|)
expr_stmt|;
assert|assert
name|StringHelper
operator|.
name|startsWith
argument_list|(
name|scratch
operator|.
name|get
argument_list|()
argument_list|,
name|POS
argument_list|)
operator|:
literal|"got line="
operator|+
name|scratch
operator|.
name|get
argument_list|()
operator|.
name|utf8ToString
argument_list|()
assert|;
name|scratchUTF16_2
operator|.
name|copyUTF8Bytes
argument_list|(
name|scratch
operator|.
name|bytes
argument_list|()
argument_list|,
name|POS
operator|.
name|length
argument_list|,
name|scratch
operator|.
name|length
argument_list|()
operator|-
name|POS
operator|.
name|length
argument_list|)
expr_stmt|;
name|pos
operator|=
name|ArrayUtil
operator|.
name|parseInt
argument_list|(
name|scratchUTF16_2
operator|.
name|chars
argument_list|()
argument_list|,
literal|0
argument_list|,
name|scratchUTF16_2
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|pos
operator|=
operator|-
literal|1
expr_stmt|;
block|}
if|if
condition|(
name|readOffsets
condition|)
block|{
name|SimpleTextUtil
operator|.
name|readLine
argument_list|(
name|in
argument_list|,
name|scratch
argument_list|)
expr_stmt|;
assert|assert
name|StringHelper
operator|.
name|startsWith
argument_list|(
name|scratch
operator|.
name|get
argument_list|()
argument_list|,
name|START_OFFSET
argument_list|)
operator|:
literal|"got line="
operator|+
name|scratch
operator|.
name|get
argument_list|()
operator|.
name|utf8ToString
argument_list|()
assert|;
name|scratchUTF16_2
operator|.
name|copyUTF8Bytes
argument_list|(
name|scratch
operator|.
name|bytes
argument_list|()
argument_list|,
name|START_OFFSET
operator|.
name|length
argument_list|,
name|scratch
operator|.
name|length
argument_list|()
operator|-
name|START_OFFSET
operator|.
name|length
argument_list|)
expr_stmt|;
name|startOffset
operator|=
name|ArrayUtil
operator|.
name|parseInt
argument_list|(
name|scratchUTF16_2
operator|.
name|chars
argument_list|()
argument_list|,
literal|0
argument_list|,
name|scratchUTF16_2
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|SimpleTextUtil
operator|.
name|readLine
argument_list|(
name|in
argument_list|,
name|scratch
argument_list|)
expr_stmt|;
assert|assert
name|StringHelper
operator|.
name|startsWith
argument_list|(
name|scratch
operator|.
name|get
argument_list|()
argument_list|,
name|END_OFFSET
argument_list|)
operator|:
literal|"got line="
operator|+
name|scratch
operator|.
name|get
argument_list|()
operator|.
name|utf8ToString
argument_list|()
assert|;
name|scratchUTF16_2
operator|.
name|grow
argument_list|(
name|scratch
operator|.
name|length
argument_list|()
operator|-
name|END_OFFSET
operator|.
name|length
argument_list|)
expr_stmt|;
name|scratchUTF16_2
operator|.
name|copyUTF8Bytes
argument_list|(
name|scratch
operator|.
name|bytes
argument_list|()
argument_list|,
name|END_OFFSET
operator|.
name|length
argument_list|,
name|scratch
operator|.
name|length
argument_list|()
operator|-
name|END_OFFSET
operator|.
name|length
argument_list|)
expr_stmt|;
name|endOffset
operator|=
name|ArrayUtil
operator|.
name|parseInt
argument_list|(
name|scratchUTF16_2
operator|.
name|chars
argument_list|()
argument_list|,
literal|0
argument_list|,
name|scratchUTF16_2
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|final
name|long
name|fp
init|=
name|in
operator|.
name|getFilePointer
argument_list|()
decl_stmt|;
name|SimpleTextUtil
operator|.
name|readLine
argument_list|(
name|in
argument_list|,
name|scratch
argument_list|)
expr_stmt|;
if|if
condition|(
name|StringHelper
operator|.
name|startsWith
argument_list|(
name|scratch
operator|.
name|get
argument_list|()
argument_list|,
name|PAYLOAD
argument_list|)
condition|)
block|{
specifier|final
name|int
name|len
init|=
name|scratch
operator|.
name|length
argument_list|()
operator|-
name|PAYLOAD
operator|.
name|length
decl_stmt|;
name|scratch2
operator|.
name|grow
argument_list|(
name|len
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|scratch
operator|.
name|bytes
argument_list|()
argument_list|,
name|PAYLOAD
operator|.
name|length
argument_list|,
name|scratch2
operator|.
name|bytes
argument_list|()
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|scratch2
operator|.
name|setLength
argument_list|(
name|len
argument_list|)
expr_stmt|;
name|payload
operator|=
name|scratch2
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|payload
operator|=
literal|null
expr_stmt|;
name|in
operator|.
name|seek
argument_list|(
name|fp
argument_list|)
expr_stmt|;
block|}
return|return
name|pos
return|;
block|}
annotation|@
name|Override
DECL|method|startOffset
specifier|public
name|int
name|startOffset
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|startOffset
return|;
block|}
annotation|@
name|Override
DECL|method|endOffset
specifier|public
name|int
name|endOffset
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|endOffset
return|;
block|}
annotation|@
name|Override
DECL|method|getPayload
specifier|public
name|BytesRef
name|getPayload
parameter_list|()
block|{
return|return
name|payload
return|;
block|}
annotation|@
name|Override
DECL|method|cost
specifier|public
name|long
name|cost
parameter_list|()
block|{
return|return
name|cost
return|;
block|}
block|}
DECL|class|TermData
specifier|static
class|class
name|TermData
block|{
DECL|field|docsStart
specifier|public
name|long
name|docsStart
decl_stmt|;
DECL|field|docFreq
specifier|public
name|int
name|docFreq
decl_stmt|;
DECL|method|TermData
specifier|public
name|TermData
parameter_list|(
name|long
name|docsStart
parameter_list|,
name|int
name|docFreq
parameter_list|)
block|{
name|this
operator|.
name|docsStart
operator|=
name|docsStart
expr_stmt|;
name|this
operator|.
name|docFreq
operator|=
name|docFreq
expr_stmt|;
block|}
block|}
DECL|field|TERMS_BASE_RAM_BYTES_USED
specifier|private
specifier|static
specifier|final
name|long
name|TERMS_BASE_RAM_BYTES_USED
init|=
name|RamUsageEstimator
operator|.
name|shallowSizeOfInstance
argument_list|(
name|SimpleTextTerms
operator|.
name|class
argument_list|)
operator|+
name|RamUsageEstimator
operator|.
name|shallowSizeOfInstance
argument_list|(
name|BytesRef
operator|.
name|class
argument_list|)
operator|+
name|RamUsageEstimator
operator|.
name|shallowSizeOfInstance
argument_list|(
name|CharsRef
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|class|SimpleTextTerms
specifier|private
class|class
name|SimpleTextTerms
extends|extends
name|Terms
implements|implements
name|Accountable
block|{
DECL|field|termsStart
specifier|private
specifier|final
name|long
name|termsStart
decl_stmt|;
DECL|field|fieldInfo
specifier|private
specifier|final
name|FieldInfo
name|fieldInfo
decl_stmt|;
DECL|field|maxDoc
specifier|private
specifier|final
name|int
name|maxDoc
decl_stmt|;
DECL|field|sumTotalTermFreq
specifier|private
name|long
name|sumTotalTermFreq
decl_stmt|;
DECL|field|sumDocFreq
specifier|private
name|long
name|sumDocFreq
decl_stmt|;
DECL|field|docCount
specifier|private
name|int
name|docCount
decl_stmt|;
DECL|field|fst
specifier|private
name|FST
argument_list|<
name|PairOutputs
operator|.
name|Pair
argument_list|<
name|Long
argument_list|,
name|PairOutputs
operator|.
name|Pair
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|>
argument_list|>
argument_list|>
name|fst
decl_stmt|;
DECL|field|termCount
specifier|private
name|int
name|termCount
decl_stmt|;
DECL|field|scratch
specifier|private
specifier|final
name|BytesRefBuilder
name|scratch
init|=
operator|new
name|BytesRefBuilder
argument_list|()
decl_stmt|;
DECL|field|scratchUTF16
specifier|private
specifier|final
name|CharsRefBuilder
name|scratchUTF16
init|=
operator|new
name|CharsRefBuilder
argument_list|()
decl_stmt|;
DECL|method|SimpleTextTerms
specifier|public
name|SimpleTextTerms
parameter_list|(
name|String
name|field
parameter_list|,
name|long
name|termsStart
parameter_list|,
name|int
name|maxDoc
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|maxDoc
operator|=
name|maxDoc
expr_stmt|;
name|this
operator|.
name|termsStart
operator|=
name|termsStart
expr_stmt|;
name|fieldInfo
operator|=
name|fieldInfos
operator|.
name|fieldInfo
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|loadTerms
argument_list|()
expr_stmt|;
block|}
DECL|method|loadTerms
specifier|private
name|void
name|loadTerms
parameter_list|()
throws|throws
name|IOException
block|{
name|PositiveIntOutputs
name|posIntOutputs
init|=
name|PositiveIntOutputs
operator|.
name|getSingleton
argument_list|()
decl_stmt|;
specifier|final
name|Builder
argument_list|<
name|PairOutputs
operator|.
name|Pair
argument_list|<
name|Long
argument_list|,
name|PairOutputs
operator|.
name|Pair
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|>
argument_list|>
argument_list|>
name|b
decl_stmt|;
specifier|final
name|PairOutputs
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|>
name|outputsInner
init|=
operator|new
name|PairOutputs
argument_list|<>
argument_list|(
name|posIntOutputs
argument_list|,
name|posIntOutputs
argument_list|)
decl_stmt|;
specifier|final
name|PairOutputs
argument_list|<
name|Long
argument_list|,
name|PairOutputs
operator|.
name|Pair
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|>
argument_list|>
name|outputs
init|=
operator|new
name|PairOutputs
argument_list|<>
argument_list|(
name|posIntOutputs
argument_list|,
name|outputsInner
argument_list|)
decl_stmt|;
name|b
operator|=
operator|new
name|Builder
argument_list|<>
argument_list|(
name|FST
operator|.
name|INPUT_TYPE
operator|.
name|BYTE1
argument_list|,
name|outputs
argument_list|)
expr_stmt|;
name|IndexInput
name|in
init|=
name|SimpleTextFieldsReader
operator|.
name|this
operator|.
name|in
operator|.
name|clone
argument_list|()
decl_stmt|;
name|in
operator|.
name|seek
argument_list|(
name|termsStart
argument_list|)
expr_stmt|;
specifier|final
name|BytesRefBuilder
name|lastTerm
init|=
operator|new
name|BytesRefBuilder
argument_list|()
decl_stmt|;
name|long
name|lastDocsStart
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|docFreq
init|=
literal|0
decl_stmt|;
name|long
name|totalTermFreq
init|=
literal|0
decl_stmt|;
name|FixedBitSet
name|visitedDocs
init|=
operator|new
name|FixedBitSet
argument_list|(
name|maxDoc
argument_list|)
decl_stmt|;
specifier|final
name|IntsRefBuilder
name|scratchIntsRef
init|=
operator|new
name|IntsRefBuilder
argument_list|()
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|SimpleTextUtil
operator|.
name|readLine
argument_list|(
name|in
argument_list|,
name|scratch
argument_list|)
expr_stmt|;
if|if
condition|(
name|scratch
operator|.
name|get
argument_list|()
operator|.
name|equals
argument_list|(
name|END
argument_list|)
operator|||
name|StringHelper
operator|.
name|startsWith
argument_list|(
name|scratch
operator|.
name|get
argument_list|()
argument_list|,
name|FIELD
argument_list|)
condition|)
block|{
if|if
condition|(
name|lastDocsStart
operator|!=
operator|-
literal|1
condition|)
block|{
name|b
operator|.
name|add
argument_list|(
name|Util
operator|.
name|toIntsRef
argument_list|(
name|lastTerm
operator|.
name|get
argument_list|()
argument_list|,
name|scratchIntsRef
argument_list|)
argument_list|,
name|outputs
operator|.
name|newPair
argument_list|(
name|lastDocsStart
argument_list|,
name|outputsInner
operator|.
name|newPair
argument_list|(
operator|(
name|long
operator|)
name|docFreq
argument_list|,
name|totalTermFreq
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|sumTotalTermFreq
operator|+=
name|totalTermFreq
expr_stmt|;
block|}
break|break;
block|}
elseif|else
if|if
condition|(
name|StringHelper
operator|.
name|startsWith
argument_list|(
name|scratch
operator|.
name|get
argument_list|()
argument_list|,
name|DOC
argument_list|)
condition|)
block|{
name|docFreq
operator|++
expr_stmt|;
name|sumDocFreq
operator|++
expr_stmt|;
name|scratchUTF16
operator|.
name|copyUTF8Bytes
argument_list|(
name|scratch
operator|.
name|bytes
argument_list|()
argument_list|,
name|DOC
operator|.
name|length
argument_list|,
name|scratch
operator|.
name|length
argument_list|()
operator|-
name|DOC
operator|.
name|length
argument_list|)
expr_stmt|;
name|int
name|docID
init|=
name|ArrayUtil
operator|.
name|parseInt
argument_list|(
name|scratchUTF16
operator|.
name|chars
argument_list|()
argument_list|,
literal|0
argument_list|,
name|scratchUTF16
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|visitedDocs
operator|.
name|set
argument_list|(
name|docID
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|StringHelper
operator|.
name|startsWith
argument_list|(
name|scratch
operator|.
name|get
argument_list|()
argument_list|,
name|FREQ
argument_list|)
condition|)
block|{
name|scratchUTF16
operator|.
name|copyUTF8Bytes
argument_list|(
name|scratch
operator|.
name|bytes
argument_list|()
argument_list|,
name|FREQ
operator|.
name|length
argument_list|,
name|scratch
operator|.
name|length
argument_list|()
operator|-
name|FREQ
operator|.
name|length
argument_list|)
expr_stmt|;
name|totalTermFreq
operator|+=
name|ArrayUtil
operator|.
name|parseInt
argument_list|(
name|scratchUTF16
operator|.
name|chars
argument_list|()
argument_list|,
literal|0
argument_list|,
name|scratchUTF16
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|StringHelper
operator|.
name|startsWith
argument_list|(
name|scratch
operator|.
name|get
argument_list|()
argument_list|,
name|TERM
argument_list|)
condition|)
block|{
if|if
condition|(
name|lastDocsStart
operator|!=
operator|-
literal|1
condition|)
block|{
name|b
operator|.
name|add
argument_list|(
name|Util
operator|.
name|toIntsRef
argument_list|(
name|lastTerm
operator|.
name|get
argument_list|()
argument_list|,
name|scratchIntsRef
argument_list|)
argument_list|,
name|outputs
operator|.
name|newPair
argument_list|(
name|lastDocsStart
argument_list|,
name|outputsInner
operator|.
name|newPair
argument_list|(
operator|(
name|long
operator|)
name|docFreq
argument_list|,
name|totalTermFreq
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|lastDocsStart
operator|=
name|in
operator|.
name|getFilePointer
argument_list|()
expr_stmt|;
specifier|final
name|int
name|len
init|=
name|scratch
operator|.
name|length
argument_list|()
operator|-
name|TERM
operator|.
name|length
decl_stmt|;
name|lastTerm
operator|.
name|grow
argument_list|(
name|len
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|scratch
operator|.
name|bytes
argument_list|()
argument_list|,
name|TERM
operator|.
name|length
argument_list|,
name|lastTerm
operator|.
name|bytes
argument_list|()
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|lastTerm
operator|.
name|setLength
argument_list|(
name|len
argument_list|)
expr_stmt|;
name|docFreq
operator|=
literal|0
expr_stmt|;
name|sumTotalTermFreq
operator|+=
name|totalTermFreq
expr_stmt|;
name|totalTermFreq
operator|=
literal|0
expr_stmt|;
name|termCount
operator|++
expr_stmt|;
block|}
block|}
name|docCount
operator|=
name|visitedDocs
operator|.
name|cardinality
argument_list|()
expr_stmt|;
name|fst
operator|=
name|b
operator|.
name|finish
argument_list|()
expr_stmt|;
comment|/*       PrintStream ps = new PrintStream("out.dot");       fst.toDot(ps);       ps.close();       System.out.println("SAVED out.dot");       */
comment|//System.out.println("FST " + fst.sizeInBytes());
block|}
annotation|@
name|Override
DECL|method|ramBytesUsed
specifier|public
name|long
name|ramBytesUsed
parameter_list|()
block|{
return|return
name|TERMS_BASE_RAM_BYTES_USED
operator|+
operator|(
name|fst
operator|!=
literal|null
condition|?
name|fst
operator|.
name|ramBytesUsed
argument_list|()
else|:
literal|0
operator|)
operator|+
name|RamUsageEstimator
operator|.
name|sizeOf
argument_list|(
name|scratch
operator|.
name|bytes
argument_list|()
argument_list|)
operator|+
name|RamUsageEstimator
operator|.
name|sizeOf
argument_list|(
name|scratchUTF16
operator|.
name|chars
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getChildResources
specifier|public
name|Iterable
argument_list|<
name|?
extends|extends
name|Accountable
argument_list|>
name|getChildResources
parameter_list|()
block|{
if|if
condition|(
name|fst
operator|==
literal|null
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|Collections
operator|.
name|singletonList
argument_list|(
name|Accountables
operator|.
name|namedAccountable
argument_list|(
literal|"term cache"
argument_list|,
name|fst
argument_list|)
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|"(terms="
operator|+
name|termCount
operator|+
literal|",postings="
operator|+
name|sumDocFreq
operator|+
literal|",positions="
operator|+
name|sumTotalTermFreq
operator|+
literal|",docs="
operator|+
name|docCount
operator|+
literal|")"
return|;
block|}
annotation|@
name|Override
DECL|method|iterator
specifier|public
name|TermsEnum
name|iterator
parameter_list|(
name|TermsEnum
name|reuse
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|fst
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|SimpleTextTermsEnum
argument_list|(
name|fst
argument_list|,
name|fieldInfo
operator|.
name|getIndexOptions
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|TermsEnum
operator|.
name|EMPTY
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|size
specifier|public
name|long
name|size
parameter_list|()
block|{
return|return
operator|(
name|long
operator|)
name|termCount
return|;
block|}
annotation|@
name|Override
DECL|method|getSumTotalTermFreq
specifier|public
name|long
name|getSumTotalTermFreq
parameter_list|()
block|{
return|return
name|fieldInfo
operator|.
name|getIndexOptions
argument_list|()
operator|==
name|IndexOptions
operator|.
name|DOCS
condition|?
operator|-
literal|1
else|:
name|sumTotalTermFreq
return|;
block|}
annotation|@
name|Override
DECL|method|getSumDocFreq
specifier|public
name|long
name|getSumDocFreq
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|sumDocFreq
return|;
block|}
annotation|@
name|Override
DECL|method|getDocCount
specifier|public
name|int
name|getDocCount
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|docCount
return|;
block|}
annotation|@
name|Override
DECL|method|hasFreqs
specifier|public
name|boolean
name|hasFreqs
parameter_list|()
block|{
return|return
name|fieldInfo
operator|.
name|getIndexOptions
argument_list|()
operator|.
name|compareTo
argument_list|(
name|IndexOptions
operator|.
name|DOCS_AND_FREQS
argument_list|)
operator|>=
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|hasOffsets
specifier|public
name|boolean
name|hasOffsets
parameter_list|()
block|{
return|return
name|fieldInfo
operator|.
name|getIndexOptions
argument_list|()
operator|.
name|compareTo
argument_list|(
name|IndexOptions
operator|.
name|DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS
argument_list|)
operator|>=
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|hasPositions
specifier|public
name|boolean
name|hasPositions
parameter_list|()
block|{
return|return
name|fieldInfo
operator|.
name|getIndexOptions
argument_list|()
operator|.
name|compareTo
argument_list|(
name|IndexOptions
operator|.
name|DOCS_AND_FREQS_AND_POSITIONS
argument_list|)
operator|>=
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|hasPayloads
specifier|public
name|boolean
name|hasPayloads
parameter_list|()
block|{
return|return
name|fieldInfo
operator|.
name|hasPayloads
argument_list|()
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|iterator
specifier|public
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableSet
argument_list|(
name|fields
operator|.
name|keySet
argument_list|()
argument_list|)
operator|.
name|iterator
argument_list|()
return|;
block|}
DECL|field|termsCache
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|SimpleTextTerms
argument_list|>
name|termsCache
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|terms
specifier|synchronized
specifier|public
name|Terms
name|terms
parameter_list|(
name|String
name|field
parameter_list|)
throws|throws
name|IOException
block|{
name|SimpleTextTerms
name|terms
init|=
name|termsCache
operator|.
name|get
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|terms
operator|==
literal|null
condition|)
block|{
name|Long
name|fp
init|=
name|fields
operator|.
name|get
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|fp
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
name|terms
operator|=
operator|new
name|SimpleTextTerms
argument_list|(
name|field
argument_list|,
name|fp
argument_list|,
name|maxDoc
argument_list|)
expr_stmt|;
name|termsCache
operator|.
name|put
argument_list|(
name|field
argument_list|,
name|terms
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|terms
return|;
block|}
annotation|@
name|Override
DECL|method|size
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
operator|-
literal|1
return|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|ramBytesUsed
specifier|public
specifier|synchronized
name|long
name|ramBytesUsed
parameter_list|()
block|{
name|long
name|sizeInBytes
init|=
name|BASE_RAM_BYTES_USED
operator|+
name|fields
operator|.
name|size
argument_list|()
operator|*
literal|2
operator|*
name|RamUsageEstimator
operator|.
name|NUM_BYTES_OBJECT_REF
decl_stmt|;
for|for
control|(
name|SimpleTextTerms
name|simpleTextTerms
range|:
name|termsCache
operator|.
name|values
argument_list|()
control|)
block|{
name|sizeInBytes
operator|+=
operator|(
name|simpleTextTerms
operator|!=
literal|null
operator|)
condition|?
name|simpleTextTerms
operator|.
name|ramBytesUsed
argument_list|()
else|:
literal|0
expr_stmt|;
block|}
return|return
name|sizeInBytes
return|;
block|}
annotation|@
name|Override
DECL|method|getChildResources
specifier|public
specifier|synchronized
name|Iterable
argument_list|<
name|?
extends|extends
name|Accountable
argument_list|>
name|getChildResources
parameter_list|()
block|{
return|return
name|Accountables
operator|.
name|namedAccountables
argument_list|(
literal|"field"
argument_list|,
name|termsCache
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|"(fields="
operator|+
name|fields
operator|.
name|size
argument_list|()
operator|+
literal|")"
return|;
block|}
annotation|@
name|Override
DECL|method|checkIntegrity
specifier|public
name|void
name|checkIntegrity
parameter_list|()
throws|throws
name|IOException
block|{}
block|}
end_class
end_unit
