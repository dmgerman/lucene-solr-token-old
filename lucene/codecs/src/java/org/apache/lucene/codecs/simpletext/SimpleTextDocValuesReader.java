begin_unit
begin_package
DECL|package|org.apache.lucene.codecs.simpletext
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|simpletext
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|simpletext
operator|.
name|SimpleTextDocValuesWriter
operator|.
name|END
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|simpletext
operator|.
name|SimpleTextDocValuesWriter
operator|.
name|FIELD
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|simpletext
operator|.
name|SimpleTextDocValuesWriter
operator|.
name|LENGTH
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|simpletext
operator|.
name|SimpleTextDocValuesWriter
operator|.
name|MAXLENGTH
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|simpletext
operator|.
name|SimpleTextDocValuesWriter
operator|.
name|MINVALUE
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|simpletext
operator|.
name|SimpleTextDocValuesWriter
operator|.
name|NUMVALUES
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|simpletext
operator|.
name|SimpleTextDocValuesWriter
operator|.
name|ORDPATTERN
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|simpletext
operator|.
name|SimpleTextDocValuesWriter
operator|.
name|PATTERN
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|simpletext
operator|.
name|SimpleTextDocValuesWriter
operator|.
name|TYPE
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import
begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigInteger
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import
begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DecimalFormat
import|;
end_import
begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DecimalFormatSymbols
import|;
end_import
begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|DocValuesProducer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|BinaryDocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|CorruptIndexException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|FieldInfo
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|FieldInfo
operator|.
name|DocValuesType
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexFileNames
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|NumericDocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SegmentReadState
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SortedDocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SortedNumericDocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SortedSetDocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|BufferedChecksumIndexInput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|ChecksumIndexInput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexInput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Bits
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|StringHelper
import|;
end_import
begin_class
DECL|class|SimpleTextDocValuesReader
class|class
name|SimpleTextDocValuesReader
extends|extends
name|DocValuesProducer
block|{
DECL|class|OneField
specifier|static
class|class
name|OneField
block|{
DECL|field|dataStartFilePointer
name|long
name|dataStartFilePointer
decl_stmt|;
DECL|field|pattern
name|String
name|pattern
decl_stmt|;
DECL|field|ordPattern
name|String
name|ordPattern
decl_stmt|;
DECL|field|maxLength
name|int
name|maxLength
decl_stmt|;
DECL|field|fixedLength
name|boolean
name|fixedLength
decl_stmt|;
DECL|field|minValue
name|long
name|minValue
decl_stmt|;
DECL|field|numValues
name|long
name|numValues
decl_stmt|;
block|}
DECL|field|maxDoc
specifier|final
name|int
name|maxDoc
decl_stmt|;
DECL|field|data
specifier|final
name|IndexInput
name|data
decl_stmt|;
DECL|field|scratch
specifier|final
name|BytesRef
name|scratch
init|=
operator|new
name|BytesRef
argument_list|()
decl_stmt|;
DECL|field|fields
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|OneField
argument_list|>
name|fields
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|SimpleTextDocValuesReader
specifier|public
name|SimpleTextDocValuesReader
parameter_list|(
name|SegmentReadState
name|state
parameter_list|,
name|String
name|ext
parameter_list|)
throws|throws
name|IOException
block|{
comment|// System.out.println("dir=" + state.directory + " seg=" + state.segmentInfo.name + " file=" + IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, ext));
name|data
operator|=
name|state
operator|.
name|directory
operator|.
name|openInput
argument_list|(
name|IndexFileNames
operator|.
name|segmentFileName
argument_list|(
name|state
operator|.
name|segmentInfo
operator|.
name|name
argument_list|,
name|state
operator|.
name|segmentSuffix
argument_list|,
name|ext
argument_list|)
argument_list|,
name|state
operator|.
name|context
argument_list|)
expr_stmt|;
name|maxDoc
operator|=
name|state
operator|.
name|segmentInfo
operator|.
name|getDocCount
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|readLine
argument_list|()
expr_stmt|;
comment|//System.out.println("READ field=" + scratch.utf8ToString());
if|if
condition|(
name|scratch
operator|.
name|equals
argument_list|(
name|END
argument_list|)
condition|)
block|{
break|break;
block|}
assert|assert
name|startsWith
argument_list|(
name|FIELD
argument_list|)
operator|:
name|scratch
operator|.
name|utf8ToString
argument_list|()
assert|;
name|String
name|fieldName
init|=
name|stripPrefix
argument_list|(
name|FIELD
argument_list|)
decl_stmt|;
comment|//System.out.println("  field=" + fieldName);
name|OneField
name|field
init|=
operator|new
name|OneField
argument_list|()
decl_stmt|;
name|fields
operator|.
name|put
argument_list|(
name|fieldName
argument_list|,
name|field
argument_list|)
expr_stmt|;
name|readLine
argument_list|()
expr_stmt|;
assert|assert
name|startsWith
argument_list|(
name|TYPE
argument_list|)
operator|:
name|scratch
operator|.
name|utf8ToString
argument_list|()
assert|;
name|DocValuesType
name|dvType
init|=
name|DocValuesType
operator|.
name|valueOf
argument_list|(
name|stripPrefix
argument_list|(
name|TYPE
argument_list|)
argument_list|)
decl_stmt|;
assert|assert
name|dvType
operator|!=
literal|null
assert|;
if|if
condition|(
name|dvType
operator|==
name|DocValuesType
operator|.
name|NUMERIC
condition|)
block|{
name|readLine
argument_list|()
expr_stmt|;
assert|assert
name|startsWith
argument_list|(
name|MINVALUE
argument_list|)
operator|:
literal|"got "
operator|+
name|scratch
operator|.
name|utf8ToString
argument_list|()
operator|+
literal|" field="
operator|+
name|fieldName
operator|+
literal|" ext="
operator|+
name|ext
assert|;
name|field
operator|.
name|minValue
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|stripPrefix
argument_list|(
name|MINVALUE
argument_list|)
argument_list|)
expr_stmt|;
name|readLine
argument_list|()
expr_stmt|;
assert|assert
name|startsWith
argument_list|(
name|PATTERN
argument_list|)
assert|;
name|field
operator|.
name|pattern
operator|=
name|stripPrefix
argument_list|(
name|PATTERN
argument_list|)
expr_stmt|;
name|field
operator|.
name|dataStartFilePointer
operator|=
name|data
operator|.
name|getFilePointer
argument_list|()
expr_stmt|;
name|data
operator|.
name|seek
argument_list|(
name|data
operator|.
name|getFilePointer
argument_list|()
operator|+
operator|(
literal|1
operator|+
name|field
operator|.
name|pattern
operator|.
name|length
argument_list|()
operator|+
literal|2
operator|)
operator|*
name|maxDoc
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|dvType
operator|==
name|DocValuesType
operator|.
name|BINARY
condition|)
block|{
name|readLine
argument_list|()
expr_stmt|;
assert|assert
name|startsWith
argument_list|(
name|MAXLENGTH
argument_list|)
assert|;
name|field
operator|.
name|maxLength
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|stripPrefix
argument_list|(
name|MAXLENGTH
argument_list|)
argument_list|)
expr_stmt|;
name|readLine
argument_list|()
expr_stmt|;
assert|assert
name|startsWith
argument_list|(
name|PATTERN
argument_list|)
assert|;
name|field
operator|.
name|pattern
operator|=
name|stripPrefix
argument_list|(
name|PATTERN
argument_list|)
expr_stmt|;
name|field
operator|.
name|dataStartFilePointer
operator|=
name|data
operator|.
name|getFilePointer
argument_list|()
expr_stmt|;
name|data
operator|.
name|seek
argument_list|(
name|data
operator|.
name|getFilePointer
argument_list|()
operator|+
operator|(
literal|9
operator|+
name|field
operator|.
name|pattern
operator|.
name|length
argument_list|()
operator|+
name|field
operator|.
name|maxLength
operator|+
literal|2
operator|)
operator|*
name|maxDoc
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|dvType
operator|==
name|DocValuesType
operator|.
name|SORTED
operator|||
name|dvType
operator|==
name|DocValuesType
operator|.
name|SORTED_SET
condition|)
block|{
name|readLine
argument_list|()
expr_stmt|;
assert|assert
name|startsWith
argument_list|(
name|NUMVALUES
argument_list|)
assert|;
name|field
operator|.
name|numValues
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|stripPrefix
argument_list|(
name|NUMVALUES
argument_list|)
argument_list|)
expr_stmt|;
name|readLine
argument_list|()
expr_stmt|;
assert|assert
name|startsWith
argument_list|(
name|MAXLENGTH
argument_list|)
assert|;
name|field
operator|.
name|maxLength
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|stripPrefix
argument_list|(
name|MAXLENGTH
argument_list|)
argument_list|)
expr_stmt|;
name|readLine
argument_list|()
expr_stmt|;
assert|assert
name|startsWith
argument_list|(
name|PATTERN
argument_list|)
assert|;
name|field
operator|.
name|pattern
operator|=
name|stripPrefix
argument_list|(
name|PATTERN
argument_list|)
expr_stmt|;
name|readLine
argument_list|()
expr_stmt|;
assert|assert
name|startsWith
argument_list|(
name|ORDPATTERN
argument_list|)
assert|;
name|field
operator|.
name|ordPattern
operator|=
name|stripPrefix
argument_list|(
name|ORDPATTERN
argument_list|)
expr_stmt|;
name|field
operator|.
name|dataStartFilePointer
operator|=
name|data
operator|.
name|getFilePointer
argument_list|()
expr_stmt|;
name|data
operator|.
name|seek
argument_list|(
name|data
operator|.
name|getFilePointer
argument_list|()
operator|+
operator|(
literal|9
operator|+
name|field
operator|.
name|pattern
operator|.
name|length
argument_list|()
operator|+
name|field
operator|.
name|maxLength
operator|)
operator|*
name|field
operator|.
name|numValues
operator|+
operator|(
literal|1
operator|+
name|field
operator|.
name|ordPattern
operator|.
name|length
argument_list|()
operator|)
operator|*
name|maxDoc
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|AssertionError
argument_list|()
throw|;
block|}
block|}
comment|// We should only be called from above if at least one
comment|// field has DVs:
assert|assert
operator|!
name|fields
operator|.
name|isEmpty
argument_list|()
assert|;
block|}
annotation|@
name|Override
DECL|method|getNumeric
specifier|public
name|NumericDocValues
name|getNumeric
parameter_list|(
name|FieldInfo
name|fieldInfo
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|OneField
name|field
init|=
name|fields
operator|.
name|get
argument_list|(
name|fieldInfo
operator|.
name|name
argument_list|)
decl_stmt|;
assert|assert
name|field
operator|!=
literal|null
assert|;
comment|// SegmentCoreReaders already verifies this field is
comment|// valid:
assert|assert
name|field
operator|!=
literal|null
operator|:
literal|"field="
operator|+
name|fieldInfo
operator|.
name|name
operator|+
literal|" fields="
operator|+
name|fields
assert|;
specifier|final
name|IndexInput
name|in
init|=
name|data
operator|.
name|clone
argument_list|()
decl_stmt|;
specifier|final
name|BytesRef
name|scratch
init|=
operator|new
name|BytesRef
argument_list|()
decl_stmt|;
specifier|final
name|DecimalFormat
name|decoder
init|=
operator|new
name|DecimalFormat
argument_list|(
name|field
operator|.
name|pattern
argument_list|,
operator|new
name|DecimalFormatSymbols
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
argument_list|)
decl_stmt|;
name|decoder
operator|.
name|setParseBigDecimal
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
operator|new
name|NumericDocValues
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|long
name|get
parameter_list|(
name|int
name|docID
parameter_list|)
block|{
try|try
block|{
comment|//System.out.println(Thread.currentThread().getName() + ": get docID=" + docID + " in=" + in);
if|if
condition|(
name|docID
operator|<
literal|0
operator|||
name|docID
operator|>=
name|maxDoc
condition|)
block|{
throw|throw
operator|new
name|IndexOutOfBoundsException
argument_list|(
literal|"docID must be 0 .. "
operator|+
operator|(
name|maxDoc
operator|-
literal|1
operator|)
operator|+
literal|"; got "
operator|+
name|docID
argument_list|)
throw|;
block|}
name|in
operator|.
name|seek
argument_list|(
name|field
operator|.
name|dataStartFilePointer
operator|+
operator|(
literal|1
operator|+
name|field
operator|.
name|pattern
operator|.
name|length
argument_list|()
operator|+
literal|2
operator|)
operator|*
name|docID
argument_list|)
expr_stmt|;
name|SimpleTextUtil
operator|.
name|readLine
argument_list|(
name|in
argument_list|,
name|scratch
argument_list|)
expr_stmt|;
comment|//System.out.println("parsing delta: " + scratch.utf8ToString());
name|BigDecimal
name|bd
decl_stmt|;
try|try
block|{
name|bd
operator|=
operator|(
name|BigDecimal
operator|)
name|decoder
operator|.
name|parse
argument_list|(
name|scratch
operator|.
name|utf8ToString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|pe
parameter_list|)
block|{
throw|throw
operator|new
name|CorruptIndexException
argument_list|(
literal|"failed to parse BigDecimal value (resource="
operator|+
name|in
operator|+
literal|")"
argument_list|,
name|pe
argument_list|)
throw|;
block|}
name|SimpleTextUtil
operator|.
name|readLine
argument_list|(
name|in
argument_list|,
name|scratch
argument_list|)
expr_stmt|;
comment|// read the line telling us if its real or not
return|return
name|BigInteger
operator|.
name|valueOf
argument_list|(
name|field
operator|.
name|minValue
argument_list|)
operator|.
name|add
argument_list|(
name|bd
operator|.
name|toBigIntegerExact
argument_list|()
argument_list|)
operator|.
name|longValue
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
block|}
block|}
return|;
block|}
DECL|method|getNumericDocsWithField
specifier|private
name|Bits
name|getNumericDocsWithField
parameter_list|(
name|FieldInfo
name|fieldInfo
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|OneField
name|field
init|=
name|fields
operator|.
name|get
argument_list|(
name|fieldInfo
operator|.
name|name
argument_list|)
decl_stmt|;
specifier|final
name|IndexInput
name|in
init|=
name|data
operator|.
name|clone
argument_list|()
decl_stmt|;
specifier|final
name|BytesRef
name|scratch
init|=
operator|new
name|BytesRef
argument_list|()
decl_stmt|;
return|return
operator|new
name|Bits
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|get
parameter_list|(
name|int
name|index
parameter_list|)
block|{
try|try
block|{
name|in
operator|.
name|seek
argument_list|(
name|field
operator|.
name|dataStartFilePointer
operator|+
operator|(
literal|1
operator|+
name|field
operator|.
name|pattern
operator|.
name|length
argument_list|()
operator|+
literal|2
operator|)
operator|*
name|index
argument_list|)
expr_stmt|;
name|SimpleTextUtil
operator|.
name|readLine
argument_list|(
name|in
argument_list|,
name|scratch
argument_list|)
expr_stmt|;
comment|// data
name|SimpleTextUtil
operator|.
name|readLine
argument_list|(
name|in
argument_list|,
name|scratch
argument_list|)
expr_stmt|;
comment|// 'T' or 'F'
return|return
name|scratch
operator|.
name|bytes
index|[
name|scratch
operator|.
name|offset
index|]
operator|==
operator|(
name|byte
operator|)
literal|'T'
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|length
parameter_list|()
block|{
return|return
name|maxDoc
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|getBinary
specifier|public
name|BinaryDocValues
name|getBinary
parameter_list|(
name|FieldInfo
name|fieldInfo
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|OneField
name|field
init|=
name|fields
operator|.
name|get
argument_list|(
name|fieldInfo
operator|.
name|name
argument_list|)
decl_stmt|;
comment|// SegmentCoreReaders already verifies this field is
comment|// valid:
assert|assert
name|field
operator|!=
literal|null
assert|;
specifier|final
name|IndexInput
name|in
init|=
name|data
operator|.
name|clone
argument_list|()
decl_stmt|;
specifier|final
name|BytesRef
name|scratch
init|=
operator|new
name|BytesRef
argument_list|()
decl_stmt|;
specifier|final
name|DecimalFormat
name|decoder
init|=
operator|new
name|DecimalFormat
argument_list|(
name|field
operator|.
name|pattern
argument_list|,
operator|new
name|DecimalFormatSymbols
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|BinaryDocValues
argument_list|()
block|{
specifier|final
name|BytesRef
name|term
init|=
operator|new
name|BytesRef
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|BytesRef
name|get
parameter_list|(
name|int
name|docID
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|docID
operator|<
literal|0
operator|||
name|docID
operator|>=
name|maxDoc
condition|)
block|{
throw|throw
operator|new
name|IndexOutOfBoundsException
argument_list|(
literal|"docID must be 0 .. "
operator|+
operator|(
name|maxDoc
operator|-
literal|1
operator|)
operator|+
literal|"; got "
operator|+
name|docID
argument_list|)
throw|;
block|}
name|in
operator|.
name|seek
argument_list|(
name|field
operator|.
name|dataStartFilePointer
operator|+
operator|(
literal|9
operator|+
name|field
operator|.
name|pattern
operator|.
name|length
argument_list|()
operator|+
name|field
operator|.
name|maxLength
operator|+
literal|2
operator|)
operator|*
name|docID
argument_list|)
expr_stmt|;
name|SimpleTextUtil
operator|.
name|readLine
argument_list|(
name|in
argument_list|,
name|scratch
argument_list|)
expr_stmt|;
assert|assert
name|StringHelper
operator|.
name|startsWith
argument_list|(
name|scratch
argument_list|,
name|LENGTH
argument_list|)
assert|;
name|int
name|len
decl_stmt|;
try|try
block|{
name|len
operator|=
name|decoder
operator|.
name|parse
argument_list|(
operator|new
name|String
argument_list|(
name|scratch
operator|.
name|bytes
argument_list|,
name|scratch
operator|.
name|offset
operator|+
name|LENGTH
operator|.
name|length
argument_list|,
name|scratch
operator|.
name|length
operator|-
name|LENGTH
operator|.
name|length
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|pe
parameter_list|)
block|{
throw|throw
operator|new
name|CorruptIndexException
argument_list|(
literal|"failed to parse int length (resource="
operator|+
name|in
operator|+
literal|")"
argument_list|,
name|pe
argument_list|)
throw|;
block|}
name|term
operator|.
name|grow
argument_list|(
name|len
argument_list|)
expr_stmt|;
name|term
operator|.
name|offset
operator|=
literal|0
expr_stmt|;
name|term
operator|.
name|length
operator|=
name|len
expr_stmt|;
name|in
operator|.
name|readBytes
argument_list|(
name|term
operator|.
name|bytes
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
expr_stmt|;
return|return
name|term
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
block|}
block|}
return|;
block|}
DECL|method|getBinaryDocsWithField
specifier|private
name|Bits
name|getBinaryDocsWithField
parameter_list|(
name|FieldInfo
name|fieldInfo
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|OneField
name|field
init|=
name|fields
operator|.
name|get
argument_list|(
name|fieldInfo
operator|.
name|name
argument_list|)
decl_stmt|;
specifier|final
name|IndexInput
name|in
init|=
name|data
operator|.
name|clone
argument_list|()
decl_stmt|;
specifier|final
name|BytesRef
name|scratch
init|=
operator|new
name|BytesRef
argument_list|()
decl_stmt|;
specifier|final
name|DecimalFormat
name|decoder
init|=
operator|new
name|DecimalFormat
argument_list|(
name|field
operator|.
name|pattern
argument_list|,
operator|new
name|DecimalFormatSymbols
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|Bits
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|get
parameter_list|(
name|int
name|index
parameter_list|)
block|{
try|try
block|{
name|in
operator|.
name|seek
argument_list|(
name|field
operator|.
name|dataStartFilePointer
operator|+
operator|(
literal|9
operator|+
name|field
operator|.
name|pattern
operator|.
name|length
argument_list|()
operator|+
name|field
operator|.
name|maxLength
operator|+
literal|2
operator|)
operator|*
name|index
argument_list|)
expr_stmt|;
name|SimpleTextUtil
operator|.
name|readLine
argument_list|(
name|in
argument_list|,
name|scratch
argument_list|)
expr_stmt|;
assert|assert
name|StringHelper
operator|.
name|startsWith
argument_list|(
name|scratch
argument_list|,
name|LENGTH
argument_list|)
assert|;
name|int
name|len
decl_stmt|;
try|try
block|{
name|len
operator|=
name|decoder
operator|.
name|parse
argument_list|(
operator|new
name|String
argument_list|(
name|scratch
operator|.
name|bytes
argument_list|,
name|scratch
operator|.
name|offset
operator|+
name|LENGTH
operator|.
name|length
argument_list|,
name|scratch
operator|.
name|length
operator|-
name|LENGTH
operator|.
name|length
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|pe
parameter_list|)
block|{
throw|throw
operator|new
name|CorruptIndexException
argument_list|(
literal|"failed to parse int length (resource="
operator|+
name|in
operator|+
literal|")"
argument_list|,
name|pe
argument_list|)
throw|;
block|}
comment|// skip past bytes
name|byte
name|bytes
index|[]
init|=
operator|new
name|byte
index|[
name|len
index|]
decl_stmt|;
name|in
operator|.
name|readBytes
argument_list|(
name|bytes
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|SimpleTextUtil
operator|.
name|readLine
argument_list|(
name|in
argument_list|,
name|scratch
argument_list|)
expr_stmt|;
comment|// newline
name|SimpleTextUtil
operator|.
name|readLine
argument_list|(
name|in
argument_list|,
name|scratch
argument_list|)
expr_stmt|;
comment|// 'T' or 'F'
return|return
name|scratch
operator|.
name|bytes
index|[
name|scratch
operator|.
name|offset
index|]
operator|==
operator|(
name|byte
operator|)
literal|'T'
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|length
parameter_list|()
block|{
return|return
name|maxDoc
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|getSorted
specifier|public
name|SortedDocValues
name|getSorted
parameter_list|(
name|FieldInfo
name|fieldInfo
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|OneField
name|field
init|=
name|fields
operator|.
name|get
argument_list|(
name|fieldInfo
operator|.
name|name
argument_list|)
decl_stmt|;
comment|// SegmentCoreReaders already verifies this field is
comment|// valid:
assert|assert
name|field
operator|!=
literal|null
assert|;
specifier|final
name|IndexInput
name|in
init|=
name|data
operator|.
name|clone
argument_list|()
decl_stmt|;
specifier|final
name|BytesRef
name|scratch
init|=
operator|new
name|BytesRef
argument_list|()
decl_stmt|;
specifier|final
name|DecimalFormat
name|decoder
init|=
operator|new
name|DecimalFormat
argument_list|(
name|field
operator|.
name|pattern
argument_list|,
operator|new
name|DecimalFormatSymbols
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|DecimalFormat
name|ordDecoder
init|=
operator|new
name|DecimalFormat
argument_list|(
name|field
operator|.
name|ordPattern
argument_list|,
operator|new
name|DecimalFormatSymbols
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|SortedDocValues
argument_list|()
block|{
specifier|final
name|BytesRef
name|term
init|=
operator|new
name|BytesRef
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|int
name|getOrd
parameter_list|(
name|int
name|docID
parameter_list|)
block|{
if|if
condition|(
name|docID
operator|<
literal|0
operator|||
name|docID
operator|>=
name|maxDoc
condition|)
block|{
throw|throw
operator|new
name|IndexOutOfBoundsException
argument_list|(
literal|"docID must be 0 .. "
operator|+
operator|(
name|maxDoc
operator|-
literal|1
operator|)
operator|+
literal|"; got "
operator|+
name|docID
argument_list|)
throw|;
block|}
try|try
block|{
name|in
operator|.
name|seek
argument_list|(
name|field
operator|.
name|dataStartFilePointer
operator|+
name|field
operator|.
name|numValues
operator|*
operator|(
literal|9
operator|+
name|field
operator|.
name|pattern
operator|.
name|length
argument_list|()
operator|+
name|field
operator|.
name|maxLength
operator|)
operator|+
name|docID
operator|*
operator|(
literal|1
operator|+
name|field
operator|.
name|ordPattern
operator|.
name|length
argument_list|()
operator|)
argument_list|)
expr_stmt|;
name|SimpleTextUtil
operator|.
name|readLine
argument_list|(
name|in
argument_list|,
name|scratch
argument_list|)
expr_stmt|;
try|try
block|{
return|return
operator|(
name|int
operator|)
name|ordDecoder
operator|.
name|parse
argument_list|(
name|scratch
operator|.
name|utf8ToString
argument_list|()
argument_list|)
operator|.
name|longValue
argument_list|()
operator|-
literal|1
return|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|pe
parameter_list|)
block|{
throw|throw
operator|new
name|CorruptIndexException
argument_list|(
literal|"failed to parse ord (resource="
operator|+
name|in
operator|+
literal|")"
argument_list|,
name|pe
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|BytesRef
name|lookupOrd
parameter_list|(
name|int
name|ord
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|ord
operator|<
literal|0
operator|||
name|ord
operator|>=
name|field
operator|.
name|numValues
condition|)
block|{
throw|throw
operator|new
name|IndexOutOfBoundsException
argument_list|(
literal|"ord must be 0 .. "
operator|+
operator|(
name|field
operator|.
name|numValues
operator|-
literal|1
operator|)
operator|+
literal|"; got "
operator|+
name|ord
argument_list|)
throw|;
block|}
name|in
operator|.
name|seek
argument_list|(
name|field
operator|.
name|dataStartFilePointer
operator|+
name|ord
operator|*
operator|(
literal|9
operator|+
name|field
operator|.
name|pattern
operator|.
name|length
argument_list|()
operator|+
name|field
operator|.
name|maxLength
operator|)
argument_list|)
expr_stmt|;
name|SimpleTextUtil
operator|.
name|readLine
argument_list|(
name|in
argument_list|,
name|scratch
argument_list|)
expr_stmt|;
assert|assert
name|StringHelper
operator|.
name|startsWith
argument_list|(
name|scratch
argument_list|,
name|LENGTH
argument_list|)
operator|:
literal|"got "
operator|+
name|scratch
operator|.
name|utf8ToString
argument_list|()
operator|+
literal|" in="
operator|+
name|in
assert|;
name|int
name|len
decl_stmt|;
try|try
block|{
name|len
operator|=
name|decoder
operator|.
name|parse
argument_list|(
operator|new
name|String
argument_list|(
name|scratch
operator|.
name|bytes
argument_list|,
name|scratch
operator|.
name|offset
operator|+
name|LENGTH
operator|.
name|length
argument_list|,
name|scratch
operator|.
name|length
operator|-
name|LENGTH
operator|.
name|length
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|pe
parameter_list|)
block|{
throw|throw
operator|new
name|CorruptIndexException
argument_list|(
literal|"failed to parse int length (resource="
operator|+
name|in
operator|+
literal|")"
argument_list|,
name|pe
argument_list|)
throw|;
block|}
name|term
operator|.
name|grow
argument_list|(
name|len
argument_list|)
expr_stmt|;
name|term
operator|.
name|offset
operator|=
literal|0
expr_stmt|;
name|term
operator|.
name|length
operator|=
name|len
expr_stmt|;
name|in
operator|.
name|readBytes
argument_list|(
name|term
operator|.
name|bytes
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
expr_stmt|;
return|return
name|term
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|getValueCount
parameter_list|()
block|{
return|return
operator|(
name|int
operator|)
name|field
operator|.
name|numValues
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|getSortedNumeric
specifier|public
name|SortedNumericDocValues
name|getSortedNumeric
parameter_list|(
name|FieldInfo
name|field
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|BinaryDocValues
name|binary
init|=
name|getBinary
argument_list|(
name|field
argument_list|)
decl_stmt|;
return|return
operator|new
name|SortedNumericDocValues
argument_list|()
block|{
name|long
name|values
index|[]
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|setDocument
parameter_list|(
name|int
name|doc
parameter_list|)
block|{
name|String
name|csv
init|=
name|binary
operator|.
name|get
argument_list|(
name|doc
argument_list|)
operator|.
name|utf8ToString
argument_list|()
decl_stmt|;
if|if
condition|(
name|csv
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|values
operator|=
operator|new
name|long
index|[
literal|0
index|]
expr_stmt|;
block|}
else|else
block|{
name|String
name|s
index|[]
init|=
name|csv
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|values
operator|=
operator|new
name|long
index|[
name|s
operator|.
name|length
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|values
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|values
index|[
name|i
index|]
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|s
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|long
name|valueAt
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|values
index|[
name|index
index|]
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|count
parameter_list|()
block|{
return|return
name|values
operator|.
name|length
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|getSortedSet
specifier|public
name|SortedSetDocValues
name|getSortedSet
parameter_list|(
name|FieldInfo
name|fieldInfo
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|OneField
name|field
init|=
name|fields
operator|.
name|get
argument_list|(
name|fieldInfo
operator|.
name|name
argument_list|)
decl_stmt|;
comment|// SegmentCoreReaders already verifies this field is
comment|// valid:
assert|assert
name|field
operator|!=
literal|null
assert|;
specifier|final
name|IndexInput
name|in
init|=
name|data
operator|.
name|clone
argument_list|()
decl_stmt|;
specifier|final
name|BytesRef
name|scratch
init|=
operator|new
name|BytesRef
argument_list|()
decl_stmt|;
specifier|final
name|DecimalFormat
name|decoder
init|=
operator|new
name|DecimalFormat
argument_list|(
name|field
operator|.
name|pattern
argument_list|,
operator|new
name|DecimalFormatSymbols
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|SortedSetDocValues
argument_list|()
block|{
name|String
index|[]
name|currentOrds
init|=
operator|new
name|String
index|[
literal|0
index|]
decl_stmt|;
name|int
name|currentIndex
init|=
literal|0
decl_stmt|;
specifier|final
name|BytesRef
name|term
init|=
operator|new
name|BytesRef
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|long
name|nextOrd
parameter_list|()
block|{
if|if
condition|(
name|currentIndex
operator|==
name|currentOrds
operator|.
name|length
condition|)
block|{
return|return
name|NO_MORE_ORDS
return|;
block|}
else|else
block|{
return|return
name|Long
operator|.
name|parseLong
argument_list|(
name|currentOrds
index|[
name|currentIndex
operator|++
index|]
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|setDocument
parameter_list|(
name|int
name|docID
parameter_list|)
block|{
if|if
condition|(
name|docID
operator|<
literal|0
operator|||
name|docID
operator|>=
name|maxDoc
condition|)
block|{
throw|throw
operator|new
name|IndexOutOfBoundsException
argument_list|(
literal|"docID must be 0 .. "
operator|+
operator|(
name|maxDoc
operator|-
literal|1
operator|)
operator|+
literal|"; got "
operator|+
name|docID
argument_list|)
throw|;
block|}
try|try
block|{
name|in
operator|.
name|seek
argument_list|(
name|field
operator|.
name|dataStartFilePointer
operator|+
name|field
operator|.
name|numValues
operator|*
operator|(
literal|9
operator|+
name|field
operator|.
name|pattern
operator|.
name|length
argument_list|()
operator|+
name|field
operator|.
name|maxLength
operator|)
operator|+
name|docID
operator|*
operator|(
literal|1
operator|+
name|field
operator|.
name|ordPattern
operator|.
name|length
argument_list|()
operator|)
argument_list|)
expr_stmt|;
name|SimpleTextUtil
operator|.
name|readLine
argument_list|(
name|in
argument_list|,
name|scratch
argument_list|)
expr_stmt|;
name|String
name|ordList
init|=
name|scratch
operator|.
name|utf8ToString
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
if|if
condition|(
name|ordList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|currentOrds
operator|=
operator|new
name|String
index|[
literal|0
index|]
expr_stmt|;
block|}
else|else
block|{
name|currentOrds
operator|=
name|ordList
operator|.
name|split
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
name|currentIndex
operator|=
literal|0
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|BytesRef
name|lookupOrd
parameter_list|(
name|long
name|ord
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|ord
operator|<
literal|0
operator|||
name|ord
operator|>=
name|field
operator|.
name|numValues
condition|)
block|{
throw|throw
operator|new
name|IndexOutOfBoundsException
argument_list|(
literal|"ord must be 0 .. "
operator|+
operator|(
name|field
operator|.
name|numValues
operator|-
literal|1
operator|)
operator|+
literal|"; got "
operator|+
name|ord
argument_list|)
throw|;
block|}
name|in
operator|.
name|seek
argument_list|(
name|field
operator|.
name|dataStartFilePointer
operator|+
name|ord
operator|*
operator|(
literal|9
operator|+
name|field
operator|.
name|pattern
operator|.
name|length
argument_list|()
operator|+
name|field
operator|.
name|maxLength
operator|)
argument_list|)
expr_stmt|;
name|SimpleTextUtil
operator|.
name|readLine
argument_list|(
name|in
argument_list|,
name|scratch
argument_list|)
expr_stmt|;
assert|assert
name|StringHelper
operator|.
name|startsWith
argument_list|(
name|scratch
argument_list|,
name|LENGTH
argument_list|)
operator|:
literal|"got "
operator|+
name|scratch
operator|.
name|utf8ToString
argument_list|()
operator|+
literal|" in="
operator|+
name|in
assert|;
name|int
name|len
decl_stmt|;
try|try
block|{
name|len
operator|=
name|decoder
operator|.
name|parse
argument_list|(
operator|new
name|String
argument_list|(
name|scratch
operator|.
name|bytes
argument_list|,
name|scratch
operator|.
name|offset
operator|+
name|LENGTH
operator|.
name|length
argument_list|,
name|scratch
operator|.
name|length
operator|-
name|LENGTH
operator|.
name|length
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|pe
parameter_list|)
block|{
throw|throw
operator|new
name|CorruptIndexException
argument_list|(
literal|"failed to parse int length (resource="
operator|+
name|in
operator|+
literal|")"
argument_list|,
name|pe
argument_list|)
throw|;
block|}
name|term
operator|.
name|grow
argument_list|(
name|len
argument_list|)
expr_stmt|;
name|term
operator|.
name|offset
operator|=
literal|0
expr_stmt|;
name|term
operator|.
name|length
operator|=
name|len
expr_stmt|;
name|in
operator|.
name|readBytes
argument_list|(
name|term
operator|.
name|bytes
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
expr_stmt|;
return|return
name|term
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|long
name|getValueCount
parameter_list|()
block|{
return|return
name|field
operator|.
name|numValues
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|getDocsWithField
specifier|public
name|Bits
name|getDocsWithField
parameter_list|(
name|FieldInfo
name|field
parameter_list|)
throws|throws
name|IOException
block|{
switch|switch
condition|(
name|field
operator|.
name|getDocValuesType
argument_list|()
condition|)
block|{
case|case
name|SORTED_SET
case|:
return|return
name|DocValues
operator|.
name|docsWithValue
argument_list|(
name|getSortedSet
argument_list|(
name|field
argument_list|)
argument_list|,
name|maxDoc
argument_list|)
return|;
case|case
name|SORTED_NUMERIC
case|:
return|return
name|DocValues
operator|.
name|docsWithValue
argument_list|(
name|getSortedNumeric
argument_list|(
name|field
argument_list|)
argument_list|,
name|maxDoc
argument_list|)
return|;
case|case
name|SORTED
case|:
return|return
name|DocValues
operator|.
name|docsWithValue
argument_list|(
name|getSorted
argument_list|(
name|field
argument_list|)
argument_list|,
name|maxDoc
argument_list|)
return|;
case|case
name|BINARY
case|:
return|return
name|getBinaryDocsWithField
argument_list|(
name|field
argument_list|)
return|;
case|case
name|NUMERIC
case|:
return|return
name|getNumericDocsWithField
argument_list|(
name|field
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|()
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|data
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/** Used only in ctor: */
DECL|method|readLine
specifier|private
name|void
name|readLine
parameter_list|()
throws|throws
name|IOException
block|{
name|SimpleTextUtil
operator|.
name|readLine
argument_list|(
name|data
argument_list|,
name|scratch
argument_list|)
expr_stmt|;
comment|//System.out.println("line: " + scratch.utf8ToString());
block|}
comment|/** Used only in ctor: */
DECL|method|startsWith
specifier|private
name|boolean
name|startsWith
parameter_list|(
name|BytesRef
name|prefix
parameter_list|)
block|{
return|return
name|StringHelper
operator|.
name|startsWith
argument_list|(
name|scratch
argument_list|,
name|prefix
argument_list|)
return|;
block|}
comment|/** Used only in ctor: */
DECL|method|stripPrefix
specifier|private
name|String
name|stripPrefix
parameter_list|(
name|BytesRef
name|prefix
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|String
argument_list|(
name|scratch
operator|.
name|bytes
argument_list|,
name|scratch
operator|.
name|offset
operator|+
name|prefix
operator|.
name|length
argument_list|,
name|scratch
operator|.
name|length
operator|-
name|prefix
operator|.
name|length
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|ramBytesUsed
specifier|public
name|long
name|ramBytesUsed
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|checkIntegrity
specifier|public
name|void
name|checkIntegrity
parameter_list|()
throws|throws
name|IOException
block|{
name|BytesRef
name|scratch
init|=
operator|new
name|BytesRef
argument_list|()
decl_stmt|;
name|IndexInput
name|clone
init|=
name|data
operator|.
name|clone
argument_list|()
decl_stmt|;
name|clone
operator|.
name|seek
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|ChecksumIndexInput
name|input
init|=
operator|new
name|BufferedChecksumIndexInput
argument_list|(
name|clone
argument_list|)
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|SimpleTextUtil
operator|.
name|readLine
argument_list|(
name|input
argument_list|,
name|scratch
argument_list|)
expr_stmt|;
if|if
condition|(
name|scratch
operator|.
name|equals
argument_list|(
name|END
argument_list|)
condition|)
block|{
name|SimpleTextUtil
operator|.
name|checkFooter
argument_list|(
name|input
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
end_class
end_unit
