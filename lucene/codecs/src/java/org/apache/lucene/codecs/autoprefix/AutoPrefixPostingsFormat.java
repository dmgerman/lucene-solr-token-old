begin_unit
begin_package
DECL|package|org.apache.lucene.codecs.autoprefix
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|autoprefix
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|FieldsConsumer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|FieldsProducer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|PostingsFormat
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|PostingsReaderBase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|PostingsWriterBase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|blocktree
operator|.
name|BlockTreeTermsReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|blocktree
operator|.
name|BlockTreeTermsWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|lucene50
operator|.
name|Lucene50PostingsFormat
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|lucene50
operator|.
name|Lucene50PostingsReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|lucene50
operator|.
name|Lucene50PostingsWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SegmentReadState
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SegmentWriteState
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import
begin_comment
comment|/**  * Just like {@link Lucene50PostingsFormat} except this format  * exposes the experimental auto-prefix terms.  *  * @lucene.experimental  */
end_comment
begin_class
DECL|class|AutoPrefixPostingsFormat
specifier|public
specifier|final
class|class
name|AutoPrefixPostingsFormat
extends|extends
name|PostingsFormat
block|{
DECL|field|minItemsInBlock
specifier|private
specifier|final
name|int
name|minItemsInBlock
decl_stmt|;
DECL|field|maxItemsInBlock
specifier|private
specifier|final
name|int
name|maxItemsInBlock
decl_stmt|;
DECL|field|minItemsInAutoPrefix
specifier|private
specifier|final
name|int
name|minItemsInAutoPrefix
decl_stmt|;
DECL|field|maxItemsInAutoPrefix
specifier|private
specifier|final
name|int
name|maxItemsInAutoPrefix
decl_stmt|;
comment|/** Creates {@code AutoPrefixPostingsFormat} with default settings. */
DECL|method|AutoPrefixPostingsFormat
specifier|public
name|AutoPrefixPostingsFormat
parameter_list|()
block|{
name|this
argument_list|(
name|BlockTreeTermsWriter
operator|.
name|DEFAULT_MIN_BLOCK_SIZE
argument_list|,
name|BlockTreeTermsWriter
operator|.
name|DEFAULT_MAX_BLOCK_SIZE
argument_list|,
literal|25
argument_list|,
literal|48
argument_list|)
expr_stmt|;
block|}
comment|/** Creates {@code Lucene50PostingsFormat} with custom    *  values for {@code minBlockSize} and {@code    *  maxBlockSize} passed to block terms dictionary.    *  @see BlockTreeTermsWriter#BlockTreeTermsWriter(SegmentWriteState,PostingsWriterBase,int,int) */
DECL|method|AutoPrefixPostingsFormat
specifier|public
name|AutoPrefixPostingsFormat
parameter_list|(
name|int
name|minItemsInAutoPrefix
parameter_list|,
name|int
name|maxItemsInAutoPrefix
parameter_list|)
block|{
name|this
argument_list|(
name|BlockTreeTermsWriter
operator|.
name|DEFAULT_MIN_BLOCK_SIZE
argument_list|,
name|BlockTreeTermsWriter
operator|.
name|DEFAULT_MAX_BLOCK_SIZE
argument_list|,
name|minItemsInAutoPrefix
argument_list|,
name|maxItemsInAutoPrefix
argument_list|)
expr_stmt|;
block|}
comment|/** Creates {@code Lucene50PostingsFormat} with custom    *  values for {@code minBlockSize}, {@code    *  maxBlockSize}, {@code minItemsInAutoPrefix} and {@code maxItemsInAutoPrefix}, passed    *  to block tree terms dictionary.    *  @see BlockTreeTermsWriter#BlockTreeTermsWriter(SegmentWriteState,PostingsWriterBase,int,int,int,int) */
DECL|method|AutoPrefixPostingsFormat
specifier|public
name|AutoPrefixPostingsFormat
parameter_list|(
name|int
name|minItemsInBlock
parameter_list|,
name|int
name|maxItemsInBlock
parameter_list|,
name|int
name|minItemsInAutoPrefix
parameter_list|,
name|int
name|maxItemsInAutoPrefix
parameter_list|)
block|{
name|super
argument_list|(
literal|"AutoPrefix"
argument_list|)
expr_stmt|;
name|BlockTreeTermsWriter
operator|.
name|validateSettings
argument_list|(
name|minItemsInBlock
argument_list|,
name|maxItemsInBlock
argument_list|)
expr_stmt|;
name|BlockTreeTermsWriter
operator|.
name|validateAutoPrefixSettings
argument_list|(
name|minItemsInAutoPrefix
argument_list|,
name|maxItemsInAutoPrefix
argument_list|)
expr_stmt|;
name|this
operator|.
name|minItemsInBlock
operator|=
name|minItemsInBlock
expr_stmt|;
name|this
operator|.
name|maxItemsInBlock
operator|=
name|maxItemsInBlock
expr_stmt|;
name|this
operator|.
name|minItemsInAutoPrefix
operator|=
name|minItemsInAutoPrefix
expr_stmt|;
name|this
operator|.
name|maxItemsInAutoPrefix
operator|=
name|maxItemsInAutoPrefix
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getName
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|fieldsConsumer
specifier|public
name|FieldsConsumer
name|fieldsConsumer
parameter_list|(
name|SegmentWriteState
name|state
parameter_list|)
throws|throws
name|IOException
block|{
name|PostingsWriterBase
name|postingsWriter
init|=
operator|new
name|Lucene50PostingsWriter
argument_list|(
name|state
argument_list|)
decl_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|FieldsConsumer
name|ret
init|=
operator|new
name|BlockTreeTermsWriter
argument_list|(
name|state
argument_list|,
name|postingsWriter
argument_list|,
name|minItemsInBlock
argument_list|,
name|maxItemsInBlock
argument_list|,
name|minItemsInAutoPrefix
argument_list|,
name|maxItemsInAutoPrefix
argument_list|)
decl_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
return|return
name|ret
return|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|IOUtils
operator|.
name|closeWhileHandlingException
argument_list|(
name|postingsWriter
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|fieldsProducer
specifier|public
name|FieldsProducer
name|fieldsProducer
parameter_list|(
name|SegmentReadState
name|state
parameter_list|)
throws|throws
name|IOException
block|{
name|PostingsReaderBase
name|postingsReader
init|=
operator|new
name|Lucene50PostingsReader
argument_list|(
name|state
argument_list|)
decl_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|FieldsProducer
name|ret
init|=
operator|new
name|BlockTreeTermsReader
argument_list|(
name|postingsReader
argument_list|,
name|state
argument_list|)
decl_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
return|return
name|ret
return|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|IOUtils
operator|.
name|closeWhileHandlingException
argument_list|(
name|postingsReader
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class
end_unit
