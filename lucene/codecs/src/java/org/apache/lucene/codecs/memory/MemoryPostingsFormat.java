begin_unit
begin_package
DECL|package|org.apache.lucene.codecs.memory
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|memory
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|FieldsConsumer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|FieldsProducer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|PostingsConsumer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|PostingsFormat
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|TermStats
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|TermsConsumer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DocsAndPositionsEnum
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DocsEnum
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|FieldInfo
operator|.
name|IndexOptions
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|FieldInfo
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|FieldInfos
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexFileNames
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SegmentReadState
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SegmentWriteState
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Terms
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|TermsEnum
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|ByteArrayDataInput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IOContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexInput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexOutput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|RAMOutputStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|ArrayUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Bits
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IntsRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|fst
operator|.
name|Builder
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|fst
operator|.
name|ByteSequenceOutputs
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|fst
operator|.
name|BytesRefFSTEnum
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|fst
operator|.
name|FST
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|fst
operator|.
name|Util
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|packed
operator|.
name|PackedInts
import|;
end_import
begin_comment
comment|// TODO: would be nice to somehow allow this to act like
end_comment
begin_comment
comment|// InstantiatedIndex, by never writing to disk; ie you write
end_comment
begin_comment
comment|// to this Codec in RAM only and then when you open a reader
end_comment
begin_comment
comment|// it pulls the FST directly from what you wrote w/o going
end_comment
begin_comment
comment|// to disk.
end_comment
begin_comment
comment|/** Stores terms& postings (docs, positions, payloads) in  *  RAM, using an FST.  *  *<p>Note that this codec implements advance as a linear  * scan!  This means if you store large fields in here,  * queries that rely on advance will (AND BooleanQuery,  * PhraseQuery) will be relatively slow!  *  *<p><b>NOTE</b>: this codec cannot address more than ~2.1 GB  * of postings, because the underlying FST uses an int  * to address the underlying byte[].  *  * @lucene.experimental */
end_comment
begin_comment
comment|// TODO: Maybe name this 'Cached' or something to reflect
end_comment
begin_comment
comment|// the reality that it is actually written to disk, but
end_comment
begin_comment
comment|// loads itself in ram?
end_comment
begin_class
DECL|class|MemoryPostingsFormat
specifier|public
specifier|final
class|class
name|MemoryPostingsFormat
extends|extends
name|PostingsFormat
block|{
DECL|field|doPackFST
specifier|private
specifier|final
name|boolean
name|doPackFST
decl_stmt|;
DECL|field|acceptableOverheadRatio
specifier|private
specifier|final
name|float
name|acceptableOverheadRatio
decl_stmt|;
DECL|method|MemoryPostingsFormat
specifier|public
name|MemoryPostingsFormat
parameter_list|()
block|{
name|this
argument_list|(
literal|false
argument_list|,
name|PackedInts
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
DECL|method|MemoryPostingsFormat
specifier|public
name|MemoryPostingsFormat
parameter_list|(
name|boolean
name|doPackFST
parameter_list|,
name|float
name|acceptableOverheadRatio
parameter_list|)
block|{
name|super
argument_list|(
literal|"Memory"
argument_list|)
expr_stmt|;
name|this
operator|.
name|doPackFST
operator|=
name|doPackFST
expr_stmt|;
name|this
operator|.
name|acceptableOverheadRatio
operator|=
name|acceptableOverheadRatio
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"PostingsFormat(name="
operator|+
name|getName
argument_list|()
operator|+
literal|" doPackFST= "
operator|+
name|doPackFST
operator|+
literal|")"
return|;
block|}
DECL|class|TermsWriter
specifier|private
specifier|final
specifier|static
class|class
name|TermsWriter
extends|extends
name|TermsConsumer
block|{
DECL|field|out
specifier|private
specifier|final
name|IndexOutput
name|out
decl_stmt|;
DECL|field|field
specifier|private
specifier|final
name|FieldInfo
name|field
decl_stmt|;
DECL|field|builder
specifier|private
specifier|final
name|Builder
argument_list|<
name|BytesRef
argument_list|>
name|builder
decl_stmt|;
DECL|field|outputs
specifier|private
specifier|final
name|ByteSequenceOutputs
name|outputs
init|=
name|ByteSequenceOutputs
operator|.
name|getSingleton
argument_list|()
decl_stmt|;
DECL|field|doPackFST
specifier|private
specifier|final
name|boolean
name|doPackFST
decl_stmt|;
DECL|field|acceptableOverheadRatio
specifier|private
specifier|final
name|float
name|acceptableOverheadRatio
decl_stmt|;
DECL|field|termCount
specifier|private
name|int
name|termCount
decl_stmt|;
DECL|method|TermsWriter
specifier|public
name|TermsWriter
parameter_list|(
name|IndexOutput
name|out
parameter_list|,
name|FieldInfo
name|field
parameter_list|,
name|boolean
name|doPackFST
parameter_list|,
name|float
name|acceptableOverheadRatio
parameter_list|)
block|{
name|this
operator|.
name|out
operator|=
name|out
expr_stmt|;
name|this
operator|.
name|field
operator|=
name|field
expr_stmt|;
name|this
operator|.
name|doPackFST
operator|=
name|doPackFST
expr_stmt|;
name|this
operator|.
name|acceptableOverheadRatio
operator|=
name|acceptableOverheadRatio
expr_stmt|;
name|builder
operator|=
operator|new
name|Builder
argument_list|<
name|BytesRef
argument_list|>
argument_list|(
name|FST
operator|.
name|INPUT_TYPE
operator|.
name|BYTE1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|outputs
argument_list|,
literal|null
argument_list|,
name|doPackFST
argument_list|,
name|acceptableOverheadRatio
argument_list|)
expr_stmt|;
block|}
DECL|class|PostingsWriter
specifier|private
class|class
name|PostingsWriter
extends|extends
name|PostingsConsumer
block|{
DECL|field|lastDocID
specifier|private
name|int
name|lastDocID
decl_stmt|;
DECL|field|lastPos
specifier|private
name|int
name|lastPos
decl_stmt|;
DECL|field|lastPayloadLen
specifier|private
name|int
name|lastPayloadLen
decl_stmt|;
comment|// NOTE: not private so we don't pay access check at runtime:
DECL|field|docCount
name|int
name|docCount
decl_stmt|;
DECL|field|buffer
name|RAMOutputStream
name|buffer
init|=
operator|new
name|RAMOutputStream
argument_list|()
decl_stmt|;
DECL|field|lastOffsetLength
name|int
name|lastOffsetLength
decl_stmt|;
DECL|field|lastOffset
name|int
name|lastOffset
decl_stmt|;
annotation|@
name|Override
DECL|method|startDoc
specifier|public
name|void
name|startDoc
parameter_list|(
name|int
name|docID
parameter_list|,
name|int
name|termDocFreq
parameter_list|)
throws|throws
name|IOException
block|{
comment|//System.out.println("    startDoc docID=" + docID + " freq=" + termDocFreq);
specifier|final
name|int
name|delta
init|=
name|docID
operator|-
name|lastDocID
decl_stmt|;
assert|assert
name|docID
operator|==
literal|0
operator|||
name|delta
operator|>
literal|0
assert|;
name|lastDocID
operator|=
name|docID
expr_stmt|;
name|docCount
operator|++
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|getIndexOptions
argument_list|()
operator|==
name|IndexOptions
operator|.
name|DOCS_ONLY
condition|)
block|{
name|buffer
operator|.
name|writeVInt
argument_list|(
name|delta
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|termDocFreq
operator|==
literal|1
condition|)
block|{
name|buffer
operator|.
name|writeVInt
argument_list|(
operator|(
name|delta
operator|<<
literal|1
operator|)
operator||
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|buffer
operator|.
name|writeVInt
argument_list|(
name|delta
operator|<<
literal|1
argument_list|)
expr_stmt|;
assert|assert
name|termDocFreq
operator|>
literal|0
assert|;
name|buffer
operator|.
name|writeVInt
argument_list|(
name|termDocFreq
argument_list|)
expr_stmt|;
block|}
name|lastPos
operator|=
literal|0
expr_stmt|;
name|lastOffset
operator|=
literal|0
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|addPosition
specifier|public
name|void
name|addPosition
parameter_list|(
name|int
name|pos
parameter_list|,
name|BytesRef
name|payload
parameter_list|,
name|int
name|startOffset
parameter_list|,
name|int
name|endOffset
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|payload
operator|==
literal|null
operator|||
name|field
operator|.
name|hasPayloads
argument_list|()
assert|;
comment|//System.out.println("      addPos pos=" + pos + " payload=" + payload);
specifier|final
name|int
name|delta
init|=
name|pos
operator|-
name|lastPos
decl_stmt|;
assert|assert
name|delta
operator|>=
literal|0
assert|;
name|lastPos
operator|=
name|pos
expr_stmt|;
name|int
name|payloadLen
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|field
operator|.
name|hasPayloads
argument_list|()
condition|)
block|{
name|payloadLen
operator|=
name|payload
operator|==
literal|null
condition|?
literal|0
else|:
name|payload
operator|.
name|length
expr_stmt|;
if|if
condition|(
name|payloadLen
operator|!=
name|lastPayloadLen
condition|)
block|{
name|lastPayloadLen
operator|=
name|payloadLen
expr_stmt|;
name|buffer
operator|.
name|writeVInt
argument_list|(
operator|(
name|delta
operator|<<
literal|1
operator|)
operator||
literal|1
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|writeVInt
argument_list|(
name|payloadLen
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|buffer
operator|.
name|writeVInt
argument_list|(
name|delta
operator|<<
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|buffer
operator|.
name|writeVInt
argument_list|(
name|delta
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|field
operator|.
name|getIndexOptions
argument_list|()
operator|.
name|compareTo
argument_list|(
name|IndexOptions
operator|.
name|DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS
argument_list|)
operator|>=
literal|0
condition|)
block|{
comment|// don't use startOffset - lastEndOffset, because this creates lots of negative vints for synonyms,
comment|// and the numbers aren't that much smaller anyways.
name|int
name|offsetDelta
init|=
name|startOffset
operator|-
name|lastOffset
decl_stmt|;
name|int
name|offsetLength
init|=
name|endOffset
operator|-
name|startOffset
decl_stmt|;
if|if
condition|(
name|offsetLength
operator|!=
name|lastOffsetLength
condition|)
block|{
name|buffer
operator|.
name|writeVInt
argument_list|(
name|offsetDelta
operator|<<
literal|1
operator||
literal|1
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|writeVInt
argument_list|(
name|offsetLength
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|buffer
operator|.
name|writeVInt
argument_list|(
name|offsetDelta
operator|<<
literal|1
argument_list|)
expr_stmt|;
block|}
name|lastOffset
operator|=
name|startOffset
expr_stmt|;
name|lastOffsetLength
operator|=
name|offsetLength
expr_stmt|;
block|}
if|if
condition|(
name|payloadLen
operator|>
literal|0
condition|)
block|{
name|buffer
operator|.
name|writeBytes
argument_list|(
name|payload
operator|.
name|bytes
argument_list|,
name|payload
operator|.
name|offset
argument_list|,
name|payloadLen
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|finishDoc
specifier|public
name|void
name|finishDoc
parameter_list|()
block|{       }
DECL|method|reset
specifier|public
name|PostingsWriter
name|reset
parameter_list|()
block|{
assert|assert
name|buffer
operator|.
name|getFilePointer
argument_list|()
operator|==
literal|0
assert|;
name|lastDocID
operator|=
literal|0
expr_stmt|;
name|docCount
operator|=
literal|0
expr_stmt|;
name|lastPayloadLen
operator|=
literal|0
expr_stmt|;
comment|// force first offset to write its length
name|lastOffsetLength
operator|=
operator|-
literal|1
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
DECL|field|postingsWriter
specifier|private
specifier|final
name|PostingsWriter
name|postingsWriter
init|=
operator|new
name|PostingsWriter
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|startTerm
specifier|public
name|PostingsConsumer
name|startTerm
parameter_list|(
name|BytesRef
name|text
parameter_list|)
block|{
comment|//System.out.println("  startTerm term=" + text.utf8ToString());
return|return
name|postingsWriter
operator|.
name|reset
argument_list|()
return|;
block|}
DECL|field|buffer2
specifier|private
specifier|final
name|RAMOutputStream
name|buffer2
init|=
operator|new
name|RAMOutputStream
argument_list|()
decl_stmt|;
DECL|field|spare
specifier|private
specifier|final
name|BytesRef
name|spare
init|=
operator|new
name|BytesRef
argument_list|()
decl_stmt|;
DECL|field|finalBuffer
specifier|private
name|byte
index|[]
name|finalBuffer
init|=
operator|new
name|byte
index|[
literal|128
index|]
decl_stmt|;
DECL|field|scratchIntsRef
specifier|private
specifier|final
name|IntsRef
name|scratchIntsRef
init|=
operator|new
name|IntsRef
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|finishTerm
specifier|public
name|void
name|finishTerm
parameter_list|(
name|BytesRef
name|text
parameter_list|,
name|TermStats
name|stats
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|postingsWriter
operator|.
name|docCount
operator|==
name|stats
operator|.
name|docFreq
assert|;
assert|assert
name|buffer2
operator|.
name|getFilePointer
argument_list|()
operator|==
literal|0
assert|;
name|buffer2
operator|.
name|writeVInt
argument_list|(
name|stats
operator|.
name|docFreq
argument_list|)
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|getIndexOptions
argument_list|()
operator|!=
name|IndexOptions
operator|.
name|DOCS_ONLY
condition|)
block|{
name|buffer2
operator|.
name|writeVLong
argument_list|(
name|stats
operator|.
name|totalTermFreq
operator|-
name|stats
operator|.
name|docFreq
argument_list|)
expr_stmt|;
block|}
name|int
name|pos
init|=
operator|(
name|int
operator|)
name|buffer2
operator|.
name|getFilePointer
argument_list|()
decl_stmt|;
name|buffer2
operator|.
name|writeTo
argument_list|(
name|finalBuffer
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|buffer2
operator|.
name|reset
argument_list|()
expr_stmt|;
specifier|final
name|int
name|totalBytes
init|=
name|pos
operator|+
operator|(
name|int
operator|)
name|postingsWriter
operator|.
name|buffer
operator|.
name|getFilePointer
argument_list|()
decl_stmt|;
if|if
condition|(
name|totalBytes
operator|>
name|finalBuffer
operator|.
name|length
condition|)
block|{
name|finalBuffer
operator|=
name|ArrayUtil
operator|.
name|grow
argument_list|(
name|finalBuffer
argument_list|,
name|totalBytes
argument_list|)
expr_stmt|;
block|}
name|postingsWriter
operator|.
name|buffer
operator|.
name|writeTo
argument_list|(
name|finalBuffer
argument_list|,
name|pos
argument_list|)
expr_stmt|;
name|postingsWriter
operator|.
name|buffer
operator|.
name|reset
argument_list|()
expr_stmt|;
name|spare
operator|.
name|bytes
operator|=
name|finalBuffer
expr_stmt|;
name|spare
operator|.
name|length
operator|=
name|totalBytes
expr_stmt|;
comment|//System.out.println("    finishTerm term=" + text.utf8ToString() + " " + totalBytes + " bytes totalTF=" + stats.totalTermFreq);
comment|//for(int i=0;i<totalBytes;i++) {
comment|//  System.out.println("      " + Integer.toHexString(finalBuffer[i]&0xFF));
comment|//}
name|builder
operator|.
name|add
argument_list|(
name|Util
operator|.
name|toIntsRef
argument_list|(
name|text
argument_list|,
name|scratchIntsRef
argument_list|)
argument_list|,
name|BytesRef
operator|.
name|deepCopyOf
argument_list|(
name|spare
argument_list|)
argument_list|)
expr_stmt|;
name|termCount
operator|++
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|finish
specifier|public
name|void
name|finish
parameter_list|(
name|long
name|sumTotalTermFreq
parameter_list|,
name|long
name|sumDocFreq
parameter_list|,
name|int
name|docCount
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|termCount
operator|>
literal|0
condition|)
block|{
name|out
operator|.
name|writeVInt
argument_list|(
name|termCount
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|field
operator|.
name|number
argument_list|)
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|getIndexOptions
argument_list|()
operator|!=
name|IndexOptions
operator|.
name|DOCS_ONLY
condition|)
block|{
name|out
operator|.
name|writeVLong
argument_list|(
name|sumTotalTermFreq
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|writeVLong
argument_list|(
name|sumDocFreq
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|docCount
argument_list|)
expr_stmt|;
name|FST
argument_list|<
name|BytesRef
argument_list|>
name|fst
init|=
name|builder
operator|.
name|finish
argument_list|()
decl_stmt|;
name|fst
operator|.
name|save
argument_list|(
name|out
argument_list|)
expr_stmt|;
comment|//System.out.println("finish field=" + field.name + " fp=" + out.getFilePointer());
block|}
block|}
annotation|@
name|Override
DECL|method|getComparator
specifier|public
name|Comparator
argument_list|<
name|BytesRef
argument_list|>
name|getComparator
parameter_list|()
block|{
return|return
name|BytesRef
operator|.
name|getUTF8SortedAsUnicodeComparator
argument_list|()
return|;
block|}
block|}
DECL|field|EXTENSION
specifier|private
specifier|static
name|String
name|EXTENSION
init|=
literal|"ram"
decl_stmt|;
annotation|@
name|Override
DECL|method|fieldsConsumer
specifier|public
name|FieldsConsumer
name|fieldsConsumer
parameter_list|(
name|SegmentWriteState
name|state
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|String
name|fileName
init|=
name|IndexFileNames
operator|.
name|segmentFileName
argument_list|(
name|state
operator|.
name|segmentInfo
operator|.
name|name
argument_list|,
name|state
operator|.
name|segmentSuffix
argument_list|,
name|EXTENSION
argument_list|)
decl_stmt|;
specifier|final
name|IndexOutput
name|out
init|=
name|state
operator|.
name|directory
operator|.
name|createOutput
argument_list|(
name|fileName
argument_list|,
name|state
operator|.
name|context
argument_list|)
decl_stmt|;
return|return
operator|new
name|FieldsConsumer
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|TermsConsumer
name|addField
parameter_list|(
name|FieldInfo
name|field
parameter_list|)
block|{
comment|//System.out.println("\naddField field=" + field.name);
return|return
operator|new
name|TermsWriter
argument_list|(
name|out
argument_list|,
name|field
argument_list|,
name|doPackFST
argument_list|,
name|acceptableOverheadRatio
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
comment|// EOF marker:
try|try
block|{
name|out
operator|.
name|writeVInt
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
return|;
block|}
DECL|class|FSTDocsEnum
specifier|private
specifier|final
specifier|static
class|class
name|FSTDocsEnum
extends|extends
name|DocsEnum
block|{
DECL|field|indexOptions
specifier|private
specifier|final
name|IndexOptions
name|indexOptions
decl_stmt|;
DECL|field|storePayloads
specifier|private
specifier|final
name|boolean
name|storePayloads
decl_stmt|;
DECL|field|buffer
specifier|private
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
literal|16
index|]
decl_stmt|;
DECL|field|in
specifier|private
specifier|final
name|ByteArrayDataInput
name|in
init|=
operator|new
name|ByteArrayDataInput
argument_list|(
name|buffer
argument_list|)
decl_stmt|;
DECL|field|liveDocs
specifier|private
name|Bits
name|liveDocs
decl_stmt|;
DECL|field|docUpto
specifier|private
name|int
name|docUpto
decl_stmt|;
DECL|field|docID
specifier|private
name|int
name|docID
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|accum
specifier|private
name|int
name|accum
decl_stmt|;
DECL|field|freq
specifier|private
name|int
name|freq
decl_stmt|;
DECL|field|payloadLen
specifier|private
name|int
name|payloadLen
decl_stmt|;
DECL|field|numDocs
specifier|private
name|int
name|numDocs
decl_stmt|;
DECL|method|FSTDocsEnum
specifier|public
name|FSTDocsEnum
parameter_list|(
name|IndexOptions
name|indexOptions
parameter_list|,
name|boolean
name|storePayloads
parameter_list|)
block|{
name|this
operator|.
name|indexOptions
operator|=
name|indexOptions
expr_stmt|;
name|this
operator|.
name|storePayloads
operator|=
name|storePayloads
expr_stmt|;
block|}
DECL|method|canReuse
specifier|public
name|boolean
name|canReuse
parameter_list|(
name|IndexOptions
name|indexOptions
parameter_list|,
name|boolean
name|storePayloads
parameter_list|)
block|{
return|return
name|indexOptions
operator|==
name|this
operator|.
name|indexOptions
operator|&&
name|storePayloads
operator|==
name|this
operator|.
name|storePayloads
return|;
block|}
DECL|method|reset
specifier|public
name|FSTDocsEnum
name|reset
parameter_list|(
name|BytesRef
name|bufferIn
parameter_list|,
name|Bits
name|liveDocs
parameter_list|,
name|int
name|numDocs
parameter_list|)
block|{
assert|assert
name|numDocs
operator|>
literal|0
assert|;
if|if
condition|(
name|buffer
operator|.
name|length
operator|<
name|bufferIn
operator|.
name|length
operator|-
name|bufferIn
operator|.
name|offset
condition|)
block|{
name|buffer
operator|=
name|ArrayUtil
operator|.
name|grow
argument_list|(
name|buffer
argument_list|,
name|bufferIn
operator|.
name|length
operator|-
name|bufferIn
operator|.
name|offset
argument_list|)
expr_stmt|;
block|}
name|in
operator|.
name|reset
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|bufferIn
operator|.
name|length
operator|-
name|bufferIn
operator|.
name|offset
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|bufferIn
operator|.
name|bytes
argument_list|,
name|bufferIn
operator|.
name|offset
argument_list|,
name|buffer
argument_list|,
literal|0
argument_list|,
name|bufferIn
operator|.
name|length
operator|-
name|bufferIn
operator|.
name|offset
argument_list|)
expr_stmt|;
name|this
operator|.
name|liveDocs
operator|=
name|liveDocs
expr_stmt|;
name|docID
operator|=
operator|-
literal|1
expr_stmt|;
name|accum
operator|=
literal|0
expr_stmt|;
name|docUpto
operator|=
literal|0
expr_stmt|;
name|freq
operator|=
literal|1
expr_stmt|;
name|payloadLen
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|numDocs
operator|=
name|numDocs
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|nextDoc
specifier|public
name|int
name|nextDoc
parameter_list|()
block|{
while|while
condition|(
literal|true
condition|)
block|{
comment|//System.out.println("  nextDoc cycle docUpto=" + docUpto + " numDocs=" + numDocs + " fp=" + in.getPosition() + " this=" + this);
if|if
condition|(
name|docUpto
operator|==
name|numDocs
condition|)
block|{
comment|// System.out.println("    END");
return|return
name|docID
operator|=
name|NO_MORE_DOCS
return|;
block|}
name|docUpto
operator|++
expr_stmt|;
if|if
condition|(
name|indexOptions
operator|==
name|IndexOptions
operator|.
name|DOCS_ONLY
condition|)
block|{
name|accum
operator|+=
name|in
operator|.
name|readVInt
argument_list|()
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|int
name|code
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
name|accum
operator|+=
name|code
operator|>>>
literal|1
expr_stmt|;
comment|//System.out.println("  docID=" + accum + " code=" + code);
if|if
condition|(
operator|(
name|code
operator|&
literal|1
operator|)
operator|!=
literal|0
condition|)
block|{
name|freq
operator|=
literal|1
expr_stmt|;
block|}
else|else
block|{
name|freq
operator|=
name|in
operator|.
name|readVInt
argument_list|()
expr_stmt|;
assert|assert
name|freq
operator|>
literal|0
assert|;
block|}
if|if
condition|(
name|indexOptions
operator|==
name|IndexOptions
operator|.
name|DOCS_AND_FREQS_AND_POSITIONS
condition|)
block|{
comment|// Skip positions/payloads
for|for
control|(
name|int
name|posUpto
init|=
literal|0
init|;
name|posUpto
operator|<
name|freq
condition|;
name|posUpto
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|storePayloads
condition|)
block|{
name|in
operator|.
name|readVInt
argument_list|()
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|int
name|posCode
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|posCode
operator|&
literal|1
operator|)
operator|!=
literal|0
condition|)
block|{
name|payloadLen
operator|=
name|in
operator|.
name|readVInt
argument_list|()
expr_stmt|;
block|}
name|in
operator|.
name|skipBytes
argument_list|(
name|payloadLen
argument_list|)
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|indexOptions
operator|==
name|IndexOptions
operator|.
name|DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS
condition|)
block|{
comment|// Skip positions/offsets/payloads
for|for
control|(
name|int
name|posUpto
init|=
literal|0
init|;
name|posUpto
operator|<
name|freq
condition|;
name|posUpto
operator|++
control|)
block|{
name|int
name|posCode
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|storePayloads
operator|&&
operator|(
operator|(
name|posCode
operator|&
literal|1
operator|)
operator|!=
literal|0
operator|)
condition|)
block|{
name|payloadLen
operator|=
name|in
operator|.
name|readVInt
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|in
operator|.
name|readVInt
argument_list|()
operator|&
literal|1
operator|)
operator|!=
literal|0
condition|)
block|{
comment|// new offset length
name|in
operator|.
name|readVInt
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|storePayloads
condition|)
block|{
name|in
operator|.
name|skipBytes
argument_list|(
name|payloadLen
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|liveDocs
operator|==
literal|null
operator|||
name|liveDocs
operator|.
name|get
argument_list|(
name|accum
argument_list|)
condition|)
block|{
comment|//System.out.println("    return docID=" + accum + " freq=" + freq);
return|return
operator|(
name|docID
operator|=
name|accum
operator|)
return|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|docID
specifier|public
name|int
name|docID
parameter_list|()
block|{
return|return
name|docID
return|;
block|}
annotation|@
name|Override
DECL|method|advance
specifier|public
name|int
name|advance
parameter_list|(
name|int
name|target
parameter_list|)
block|{
comment|// TODO: we could make more efficient version, but, it
comment|// should be rare that this will matter in practice
comment|// since usually apps will not store "big" fields in
comment|// this codec!
comment|//System.out.println("advance start docID=" + docID + " target=" + target);
while|while
condition|(
name|nextDoc
argument_list|()
operator|<
name|target
condition|)
block|{       }
return|return
name|docID
return|;
block|}
annotation|@
name|Override
DECL|method|freq
specifier|public
name|int
name|freq
parameter_list|()
block|{
return|return
name|freq
return|;
block|}
block|}
DECL|class|FSTDocsAndPositionsEnum
specifier|private
specifier|final
specifier|static
class|class
name|FSTDocsAndPositionsEnum
extends|extends
name|DocsAndPositionsEnum
block|{
DECL|field|storePayloads
specifier|private
specifier|final
name|boolean
name|storePayloads
decl_stmt|;
DECL|field|buffer
specifier|private
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
literal|16
index|]
decl_stmt|;
DECL|field|in
specifier|private
specifier|final
name|ByteArrayDataInput
name|in
init|=
operator|new
name|ByteArrayDataInput
argument_list|(
name|buffer
argument_list|)
decl_stmt|;
DECL|field|liveDocs
specifier|private
name|Bits
name|liveDocs
decl_stmt|;
DECL|field|docUpto
specifier|private
name|int
name|docUpto
decl_stmt|;
DECL|field|docID
specifier|private
name|int
name|docID
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|accum
specifier|private
name|int
name|accum
decl_stmt|;
DECL|field|freq
specifier|private
name|int
name|freq
decl_stmt|;
DECL|field|numDocs
specifier|private
name|int
name|numDocs
decl_stmt|;
DECL|field|posPending
specifier|private
name|int
name|posPending
decl_stmt|;
DECL|field|payloadLength
specifier|private
name|int
name|payloadLength
decl_stmt|;
DECL|field|storeOffsets
specifier|final
name|boolean
name|storeOffsets
decl_stmt|;
DECL|field|offsetLength
name|int
name|offsetLength
decl_stmt|;
DECL|field|startOffset
name|int
name|startOffset
decl_stmt|;
DECL|field|pos
specifier|private
name|int
name|pos
decl_stmt|;
DECL|field|payload
specifier|private
specifier|final
name|BytesRef
name|payload
init|=
operator|new
name|BytesRef
argument_list|()
decl_stmt|;
DECL|method|FSTDocsAndPositionsEnum
specifier|public
name|FSTDocsAndPositionsEnum
parameter_list|(
name|boolean
name|storePayloads
parameter_list|,
name|boolean
name|storeOffsets
parameter_list|)
block|{
name|this
operator|.
name|storePayloads
operator|=
name|storePayloads
expr_stmt|;
name|this
operator|.
name|storeOffsets
operator|=
name|storeOffsets
expr_stmt|;
block|}
DECL|method|canReuse
specifier|public
name|boolean
name|canReuse
parameter_list|(
name|boolean
name|storePayloads
parameter_list|,
name|boolean
name|storeOffsets
parameter_list|)
block|{
return|return
name|storePayloads
operator|==
name|this
operator|.
name|storePayloads
operator|&&
name|storeOffsets
operator|==
name|this
operator|.
name|storeOffsets
return|;
block|}
DECL|method|reset
specifier|public
name|FSTDocsAndPositionsEnum
name|reset
parameter_list|(
name|BytesRef
name|bufferIn
parameter_list|,
name|Bits
name|liveDocs
parameter_list|,
name|int
name|numDocs
parameter_list|)
block|{
assert|assert
name|numDocs
operator|>
literal|0
assert|;
comment|// System.out.println("D&P reset bytes this=" + this);
comment|// for(int i=bufferIn.offset;i<bufferIn.length;i++) {
comment|//   System.out.println("  " + Integer.toHexString(bufferIn.bytes[i]&0xFF));
comment|// }
if|if
condition|(
name|buffer
operator|.
name|length
operator|<
name|bufferIn
operator|.
name|length
operator|-
name|bufferIn
operator|.
name|offset
condition|)
block|{
name|buffer
operator|=
name|ArrayUtil
operator|.
name|grow
argument_list|(
name|buffer
argument_list|,
name|bufferIn
operator|.
name|length
operator|-
name|bufferIn
operator|.
name|offset
argument_list|)
expr_stmt|;
block|}
name|in
operator|.
name|reset
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|bufferIn
operator|.
name|length
operator|-
name|bufferIn
operator|.
name|offset
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|bufferIn
operator|.
name|bytes
argument_list|,
name|bufferIn
operator|.
name|offset
argument_list|,
name|buffer
argument_list|,
literal|0
argument_list|,
name|bufferIn
operator|.
name|length
operator|-
name|bufferIn
operator|.
name|offset
argument_list|)
expr_stmt|;
name|this
operator|.
name|liveDocs
operator|=
name|liveDocs
expr_stmt|;
name|docID
operator|=
operator|-
literal|1
expr_stmt|;
name|accum
operator|=
literal|0
expr_stmt|;
name|docUpto
operator|=
literal|0
expr_stmt|;
name|payload
operator|.
name|bytes
operator|=
name|buffer
expr_stmt|;
name|payloadLength
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|numDocs
operator|=
name|numDocs
expr_stmt|;
name|posPending
operator|=
literal|0
expr_stmt|;
name|startOffset
operator|=
name|storeOffsets
condition|?
literal|0
else|:
operator|-
literal|1
expr_stmt|;
comment|// always return -1 if no offsets are stored
name|offsetLength
operator|=
literal|0
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|nextDoc
specifier|public
name|int
name|nextDoc
parameter_list|()
block|{
while|while
condition|(
name|posPending
operator|>
literal|0
condition|)
block|{
name|nextPosition
argument_list|()
expr_stmt|;
block|}
while|while
condition|(
literal|true
condition|)
block|{
comment|//System.out.println("  nextDoc cycle docUpto=" + docUpto + " numDocs=" + numDocs + " fp=" + in.getPosition() + " this=" + this);
if|if
condition|(
name|docUpto
operator|==
name|numDocs
condition|)
block|{
comment|//System.out.println("    END");
return|return
name|docID
operator|=
name|NO_MORE_DOCS
return|;
block|}
name|docUpto
operator|++
expr_stmt|;
specifier|final
name|int
name|code
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
name|accum
operator|+=
name|code
operator|>>>
literal|1
expr_stmt|;
if|if
condition|(
operator|(
name|code
operator|&
literal|1
operator|)
operator|!=
literal|0
condition|)
block|{
name|freq
operator|=
literal|1
expr_stmt|;
block|}
else|else
block|{
name|freq
operator|=
name|in
operator|.
name|readVInt
argument_list|()
expr_stmt|;
assert|assert
name|freq
operator|>
literal|0
assert|;
block|}
if|if
condition|(
name|liveDocs
operator|==
literal|null
operator|||
name|liveDocs
operator|.
name|get
argument_list|(
name|accum
argument_list|)
condition|)
block|{
name|pos
operator|=
literal|0
expr_stmt|;
name|startOffset
operator|=
name|storeOffsets
condition|?
literal|0
else|:
operator|-
literal|1
expr_stmt|;
name|posPending
operator|=
name|freq
expr_stmt|;
comment|//System.out.println("    return docID=" + accum + " freq=" + freq);
return|return
operator|(
name|docID
operator|=
name|accum
operator|)
return|;
block|}
comment|// Skip positions
for|for
control|(
name|int
name|posUpto
init|=
literal|0
init|;
name|posUpto
operator|<
name|freq
condition|;
name|posUpto
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|storePayloads
condition|)
block|{
name|in
operator|.
name|readVInt
argument_list|()
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|int
name|skipCode
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|skipCode
operator|&
literal|1
operator|)
operator|!=
literal|0
condition|)
block|{
name|payloadLength
operator|=
name|in
operator|.
name|readVInt
argument_list|()
expr_stmt|;
comment|//System.out.println("    new payloadLen=" + payloadLength);
block|}
block|}
if|if
condition|(
name|storeOffsets
condition|)
block|{
if|if
condition|(
operator|(
name|in
operator|.
name|readVInt
argument_list|()
operator|&
literal|1
operator|)
operator|!=
literal|0
condition|)
block|{
comment|// new offset length
name|offsetLength
operator|=
name|in
operator|.
name|readVInt
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|storePayloads
condition|)
block|{
name|in
operator|.
name|skipBytes
argument_list|(
name|payloadLength
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|nextPosition
specifier|public
name|int
name|nextPosition
parameter_list|()
block|{
comment|//System.out.println("    nextPos storePayloads=" + storePayloads + " this=" + this);
assert|assert
name|posPending
operator|>
literal|0
assert|;
name|posPending
operator|--
expr_stmt|;
if|if
condition|(
operator|!
name|storePayloads
condition|)
block|{
name|pos
operator|+=
name|in
operator|.
name|readVInt
argument_list|()
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|int
name|code
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
name|pos
operator|+=
name|code
operator|>>>
literal|1
expr_stmt|;
if|if
condition|(
operator|(
name|code
operator|&
literal|1
operator|)
operator|!=
literal|0
condition|)
block|{
name|payloadLength
operator|=
name|in
operator|.
name|readVInt
argument_list|()
expr_stmt|;
comment|//System.out.println("      new payloadLen=" + payloadLength);
comment|//} else {
comment|//System.out.println("      same payloadLen=" + payloadLength);
block|}
block|}
if|if
condition|(
name|storeOffsets
condition|)
block|{
name|int
name|offsetCode
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|offsetCode
operator|&
literal|1
operator|)
operator|!=
literal|0
condition|)
block|{
comment|// new offset length
name|offsetLength
operator|=
name|in
operator|.
name|readVInt
argument_list|()
expr_stmt|;
block|}
name|startOffset
operator|+=
name|offsetCode
operator|>>>
literal|1
expr_stmt|;
block|}
if|if
condition|(
name|storePayloads
condition|)
block|{
name|payload
operator|.
name|offset
operator|=
name|in
operator|.
name|getPosition
argument_list|()
expr_stmt|;
name|in
operator|.
name|skipBytes
argument_list|(
name|payloadLength
argument_list|)
expr_stmt|;
name|payload
operator|.
name|length
operator|=
name|payloadLength
expr_stmt|;
block|}
comment|//System.out.println("      pos=" + pos + " payload=" + payload + " fp=" + in.getPosition());
return|return
name|pos
return|;
block|}
annotation|@
name|Override
DECL|method|startOffset
specifier|public
name|int
name|startOffset
parameter_list|()
block|{
return|return
name|startOffset
return|;
block|}
annotation|@
name|Override
DECL|method|endOffset
specifier|public
name|int
name|endOffset
parameter_list|()
block|{
return|return
name|startOffset
operator|+
name|offsetLength
return|;
block|}
annotation|@
name|Override
DECL|method|getPayload
specifier|public
name|BytesRef
name|getPayload
parameter_list|()
block|{
return|return
name|payload
operator|.
name|length
operator|>
literal|0
condition|?
name|payload
else|:
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|docID
specifier|public
name|int
name|docID
parameter_list|()
block|{
return|return
name|docID
return|;
block|}
annotation|@
name|Override
DECL|method|advance
specifier|public
name|int
name|advance
parameter_list|(
name|int
name|target
parameter_list|)
block|{
comment|// TODO: we could make more efficient version, but, it
comment|// should be rare that this will matter in practice
comment|// since usually apps will not store "big" fields in
comment|// this codec!
comment|//System.out.println("advance target=" + target);
while|while
condition|(
name|nextDoc
argument_list|()
operator|<
name|target
condition|)
block|{       }
comment|//System.out.println("  return " + docID);
return|return
name|docID
return|;
block|}
annotation|@
name|Override
DECL|method|freq
specifier|public
name|int
name|freq
parameter_list|()
block|{
return|return
name|freq
return|;
block|}
block|}
DECL|class|FSTTermsEnum
specifier|private
specifier|final
specifier|static
class|class
name|FSTTermsEnum
extends|extends
name|TermsEnum
block|{
DECL|field|field
specifier|private
specifier|final
name|FieldInfo
name|field
decl_stmt|;
DECL|field|fstEnum
specifier|private
specifier|final
name|BytesRefFSTEnum
argument_list|<
name|BytesRef
argument_list|>
name|fstEnum
decl_stmt|;
DECL|field|buffer
specifier|private
specifier|final
name|ByteArrayDataInput
name|buffer
init|=
operator|new
name|ByteArrayDataInput
argument_list|()
decl_stmt|;
DECL|field|didDecode
specifier|private
name|boolean
name|didDecode
decl_stmt|;
DECL|field|docFreq
specifier|private
name|int
name|docFreq
decl_stmt|;
DECL|field|totalTermFreq
specifier|private
name|long
name|totalTermFreq
decl_stmt|;
DECL|field|current
specifier|private
name|BytesRefFSTEnum
operator|.
name|InputOutput
argument_list|<
name|BytesRef
argument_list|>
name|current
decl_stmt|;
DECL|method|FSTTermsEnum
specifier|public
name|FSTTermsEnum
parameter_list|(
name|FieldInfo
name|field
parameter_list|,
name|FST
argument_list|<
name|BytesRef
argument_list|>
name|fst
parameter_list|)
block|{
name|this
operator|.
name|field
operator|=
name|field
expr_stmt|;
name|fstEnum
operator|=
operator|new
name|BytesRefFSTEnum
argument_list|<
name|BytesRef
argument_list|>
argument_list|(
name|fst
argument_list|)
expr_stmt|;
block|}
DECL|method|decodeMetaData
specifier|private
name|void
name|decodeMetaData
parameter_list|()
block|{
if|if
condition|(
operator|!
name|didDecode
condition|)
block|{
name|buffer
operator|.
name|reset
argument_list|(
name|current
operator|.
name|output
operator|.
name|bytes
argument_list|,
literal|0
argument_list|,
name|current
operator|.
name|output
operator|.
name|length
argument_list|)
expr_stmt|;
name|docFreq
operator|=
name|buffer
operator|.
name|readVInt
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|getIndexOptions
argument_list|()
operator|!=
name|IndexOptions
operator|.
name|DOCS_ONLY
condition|)
block|{
name|totalTermFreq
operator|=
name|docFreq
operator|+
name|buffer
operator|.
name|readVLong
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|totalTermFreq
operator|=
operator|-
literal|1
expr_stmt|;
block|}
name|current
operator|.
name|output
operator|.
name|offset
operator|=
name|buffer
operator|.
name|getPosition
argument_list|()
expr_stmt|;
comment|//System.out.println("  df=" + docFreq + " totTF=" + totalTermFreq + " offset=" + buffer.getPosition() + " len=" + current.output.length);
name|didDecode
operator|=
literal|true
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|seekExact
specifier|public
name|boolean
name|seekExact
parameter_list|(
name|BytesRef
name|text
parameter_list|,
name|boolean
name|useCache
comment|/* ignored */
parameter_list|)
throws|throws
name|IOException
block|{
comment|//System.out.println("te.seekExact text=" + field.name + ":" + text.utf8ToString() + " this=" + this);
name|current
operator|=
name|fstEnum
operator|.
name|seekExact
argument_list|(
name|text
argument_list|)
expr_stmt|;
name|didDecode
operator|=
literal|false
expr_stmt|;
return|return
name|current
operator|!=
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|seekCeil
specifier|public
name|SeekStatus
name|seekCeil
parameter_list|(
name|BytesRef
name|text
parameter_list|,
name|boolean
name|useCache
comment|/* ignored */
parameter_list|)
throws|throws
name|IOException
block|{
comment|//System.out.println("te.seek text=" + field.name + ":" + text.utf8ToString() + " this=" + this);
name|current
operator|=
name|fstEnum
operator|.
name|seekCeil
argument_list|(
name|text
argument_list|)
expr_stmt|;
if|if
condition|(
name|current
operator|==
literal|null
condition|)
block|{
return|return
name|SeekStatus
operator|.
name|END
return|;
block|}
else|else
block|{
comment|// System.out.println("  got term=" + current.input.utf8ToString());
comment|// for(int i=0;i<current.output.length;i++) {
comment|//   System.out.println("    " + Integer.toHexString(current.output.bytes[i]&0xFF));
comment|// }
name|didDecode
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|text
operator|.
name|equals
argument_list|(
name|current
operator|.
name|input
argument_list|)
condition|)
block|{
comment|//System.out.println("  found!");
return|return
name|SeekStatus
operator|.
name|FOUND
return|;
block|}
else|else
block|{
comment|//System.out.println("  not found: " + current.input.utf8ToString());
return|return
name|SeekStatus
operator|.
name|NOT_FOUND
return|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|docs
specifier|public
name|DocsEnum
name|docs
parameter_list|(
name|Bits
name|liveDocs
parameter_list|,
name|DocsEnum
name|reuse
parameter_list|,
name|int
name|flags
parameter_list|)
block|{
name|decodeMetaData
argument_list|()
expr_stmt|;
name|FSTDocsEnum
name|docsEnum
decl_stmt|;
if|if
condition|(
name|reuse
operator|==
literal|null
operator|||
operator|!
operator|(
name|reuse
operator|instanceof
name|FSTDocsEnum
operator|)
condition|)
block|{
name|docsEnum
operator|=
operator|new
name|FSTDocsEnum
argument_list|(
name|field
operator|.
name|getIndexOptions
argument_list|()
argument_list|,
name|field
operator|.
name|hasPayloads
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|docsEnum
operator|=
operator|(
name|FSTDocsEnum
operator|)
name|reuse
expr_stmt|;
if|if
condition|(
operator|!
name|docsEnum
operator|.
name|canReuse
argument_list|(
name|field
operator|.
name|getIndexOptions
argument_list|()
argument_list|,
name|field
operator|.
name|hasPayloads
argument_list|()
argument_list|)
condition|)
block|{
name|docsEnum
operator|=
operator|new
name|FSTDocsEnum
argument_list|(
name|field
operator|.
name|getIndexOptions
argument_list|()
argument_list|,
name|field
operator|.
name|hasPayloads
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|docsEnum
operator|.
name|reset
argument_list|(
name|current
operator|.
name|output
argument_list|,
name|liveDocs
argument_list|,
name|docFreq
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|docsAndPositions
specifier|public
name|DocsAndPositionsEnum
name|docsAndPositions
parameter_list|(
name|Bits
name|liveDocs
parameter_list|,
name|DocsAndPositionsEnum
name|reuse
parameter_list|,
name|int
name|flags
parameter_list|)
block|{
name|boolean
name|hasOffsets
init|=
name|field
operator|.
name|getIndexOptions
argument_list|()
operator|.
name|compareTo
argument_list|(
name|IndexOptions
operator|.
name|DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS
argument_list|)
operator|>=
literal|0
decl_stmt|;
if|if
condition|(
name|field
operator|.
name|getIndexOptions
argument_list|()
operator|.
name|compareTo
argument_list|(
name|IndexOptions
operator|.
name|DOCS_AND_FREQS_AND_POSITIONS
argument_list|)
operator|<
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
name|decodeMetaData
argument_list|()
expr_stmt|;
name|FSTDocsAndPositionsEnum
name|docsAndPositionsEnum
decl_stmt|;
if|if
condition|(
name|reuse
operator|==
literal|null
operator|||
operator|!
operator|(
name|reuse
operator|instanceof
name|FSTDocsAndPositionsEnum
operator|)
condition|)
block|{
name|docsAndPositionsEnum
operator|=
operator|new
name|FSTDocsAndPositionsEnum
argument_list|(
name|field
operator|.
name|hasPayloads
argument_list|()
argument_list|,
name|hasOffsets
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|docsAndPositionsEnum
operator|=
operator|(
name|FSTDocsAndPositionsEnum
operator|)
name|reuse
expr_stmt|;
if|if
condition|(
operator|!
name|docsAndPositionsEnum
operator|.
name|canReuse
argument_list|(
name|field
operator|.
name|hasPayloads
argument_list|()
argument_list|,
name|hasOffsets
argument_list|)
condition|)
block|{
name|docsAndPositionsEnum
operator|=
operator|new
name|FSTDocsAndPositionsEnum
argument_list|(
name|field
operator|.
name|hasPayloads
argument_list|()
argument_list|,
name|hasOffsets
argument_list|)
expr_stmt|;
block|}
block|}
comment|//System.out.println("D&P reset this=" + this);
return|return
name|docsAndPositionsEnum
operator|.
name|reset
argument_list|(
name|current
operator|.
name|output
argument_list|,
name|liveDocs
argument_list|,
name|docFreq
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|term
specifier|public
name|BytesRef
name|term
parameter_list|()
block|{
return|return
name|current
operator|.
name|input
return|;
block|}
annotation|@
name|Override
DECL|method|next
specifier|public
name|BytesRef
name|next
parameter_list|()
throws|throws
name|IOException
block|{
comment|//System.out.println("te.next");
name|current
operator|=
name|fstEnum
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|current
operator|==
literal|null
condition|)
block|{
comment|//System.out.println("  END");
return|return
literal|null
return|;
block|}
name|didDecode
operator|=
literal|false
expr_stmt|;
comment|//System.out.println("  term=" + field.name + ":" + current.input.utf8ToString());
return|return
name|current
operator|.
name|input
return|;
block|}
annotation|@
name|Override
DECL|method|docFreq
specifier|public
name|int
name|docFreq
parameter_list|()
block|{
name|decodeMetaData
argument_list|()
expr_stmt|;
return|return
name|docFreq
return|;
block|}
annotation|@
name|Override
DECL|method|totalTermFreq
specifier|public
name|long
name|totalTermFreq
parameter_list|()
block|{
name|decodeMetaData
argument_list|()
expr_stmt|;
return|return
name|totalTermFreq
return|;
block|}
annotation|@
name|Override
DECL|method|getComparator
specifier|public
name|Comparator
argument_list|<
name|BytesRef
argument_list|>
name|getComparator
parameter_list|()
block|{
return|return
name|BytesRef
operator|.
name|getUTF8SortedAsUnicodeComparator
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|seekExact
specifier|public
name|void
name|seekExact
parameter_list|(
name|long
name|ord
parameter_list|)
block|{
comment|// NOTE: we could add this...
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|ord
specifier|public
name|long
name|ord
parameter_list|()
block|{
comment|// NOTE: we could add this...
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
DECL|class|TermsReader
specifier|private
specifier|final
specifier|static
class|class
name|TermsReader
extends|extends
name|Terms
block|{
DECL|field|sumTotalTermFreq
specifier|private
specifier|final
name|long
name|sumTotalTermFreq
decl_stmt|;
DECL|field|sumDocFreq
specifier|private
specifier|final
name|long
name|sumDocFreq
decl_stmt|;
DECL|field|docCount
specifier|private
specifier|final
name|int
name|docCount
decl_stmt|;
DECL|field|termCount
specifier|private
specifier|final
name|int
name|termCount
decl_stmt|;
DECL|field|fst
specifier|private
name|FST
argument_list|<
name|BytesRef
argument_list|>
name|fst
decl_stmt|;
DECL|field|outputs
specifier|private
specifier|final
name|ByteSequenceOutputs
name|outputs
init|=
name|ByteSequenceOutputs
operator|.
name|getSingleton
argument_list|()
decl_stmt|;
DECL|field|field
specifier|private
specifier|final
name|FieldInfo
name|field
decl_stmt|;
DECL|method|TermsReader
specifier|public
name|TermsReader
parameter_list|(
name|FieldInfos
name|fieldInfos
parameter_list|,
name|IndexInput
name|in
parameter_list|,
name|int
name|termCount
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|termCount
operator|=
name|termCount
expr_stmt|;
specifier|final
name|int
name|fieldNumber
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
name|field
operator|=
name|fieldInfos
operator|.
name|fieldInfo
argument_list|(
name|fieldNumber
argument_list|)
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|getIndexOptions
argument_list|()
operator|!=
name|IndexOptions
operator|.
name|DOCS_ONLY
condition|)
block|{
name|sumTotalTermFreq
operator|=
name|in
operator|.
name|readVLong
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|sumTotalTermFreq
operator|=
operator|-
literal|1
expr_stmt|;
block|}
name|sumDocFreq
operator|=
name|in
operator|.
name|readVLong
argument_list|()
expr_stmt|;
name|docCount
operator|=
name|in
operator|.
name|readVInt
argument_list|()
expr_stmt|;
name|fst
operator|=
operator|new
name|FST
argument_list|<
name|BytesRef
argument_list|>
argument_list|(
name|in
argument_list|,
name|outputs
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getSumTotalTermFreq
specifier|public
name|long
name|getSumTotalTermFreq
parameter_list|()
block|{
return|return
name|sumTotalTermFreq
return|;
block|}
annotation|@
name|Override
DECL|method|getSumDocFreq
specifier|public
name|long
name|getSumDocFreq
parameter_list|()
block|{
return|return
name|sumDocFreq
return|;
block|}
annotation|@
name|Override
DECL|method|getDocCount
specifier|public
name|int
name|getDocCount
parameter_list|()
block|{
return|return
name|docCount
return|;
block|}
annotation|@
name|Override
DECL|method|size
specifier|public
name|long
name|size
parameter_list|()
block|{
return|return
name|termCount
return|;
block|}
annotation|@
name|Override
DECL|method|iterator
specifier|public
name|TermsEnum
name|iterator
parameter_list|(
name|TermsEnum
name|reuse
parameter_list|)
block|{
return|return
operator|new
name|FSTTermsEnum
argument_list|(
name|field
argument_list|,
name|fst
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getComparator
specifier|public
name|Comparator
argument_list|<
name|BytesRef
argument_list|>
name|getComparator
parameter_list|()
block|{
return|return
name|BytesRef
operator|.
name|getUTF8SortedAsUnicodeComparator
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|hasOffsets
specifier|public
name|boolean
name|hasOffsets
parameter_list|()
block|{
return|return
name|field
operator|.
name|getIndexOptions
argument_list|()
operator|.
name|compareTo
argument_list|(
name|IndexOptions
operator|.
name|DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS
argument_list|)
operator|>=
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|hasPositions
specifier|public
name|boolean
name|hasPositions
parameter_list|()
block|{
return|return
name|field
operator|.
name|getIndexOptions
argument_list|()
operator|.
name|compareTo
argument_list|(
name|IndexOptions
operator|.
name|DOCS_AND_FREQS_AND_POSITIONS
argument_list|)
operator|>=
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|hasPayloads
specifier|public
name|boolean
name|hasPayloads
parameter_list|()
block|{
return|return
name|field
operator|.
name|hasPayloads
argument_list|()
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|fieldsProducer
specifier|public
name|FieldsProducer
name|fieldsProducer
parameter_list|(
name|SegmentReadState
name|state
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|String
name|fileName
init|=
name|IndexFileNames
operator|.
name|segmentFileName
argument_list|(
name|state
operator|.
name|segmentInfo
operator|.
name|name
argument_list|,
name|state
operator|.
name|segmentSuffix
argument_list|,
name|EXTENSION
argument_list|)
decl_stmt|;
specifier|final
name|IndexInput
name|in
init|=
name|state
operator|.
name|dir
operator|.
name|openInput
argument_list|(
name|fileName
argument_list|,
name|IOContext
operator|.
name|READONCE
argument_list|)
decl_stmt|;
specifier|final
name|SortedMap
argument_list|<
name|String
argument_list|,
name|TermsReader
argument_list|>
name|fields
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|TermsReader
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
while|while
condition|(
literal|true
condition|)
block|{
specifier|final
name|int
name|termCount
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|termCount
operator|==
literal|0
condition|)
block|{
break|break;
block|}
specifier|final
name|TermsReader
name|termsReader
init|=
operator|new
name|TermsReader
argument_list|(
name|state
operator|.
name|fieldInfos
argument_list|,
name|in
argument_list|,
name|termCount
argument_list|)
decl_stmt|;
comment|// System.out.println("load field=" + termsReader.field.name);
name|fields
operator|.
name|put
argument_list|(
name|termsReader
operator|.
name|field
operator|.
name|name
argument_list|,
name|termsReader
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
operator|new
name|FieldsProducer
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableSet
argument_list|(
name|fields
operator|.
name|keySet
argument_list|()
argument_list|)
operator|.
name|iterator
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Terms
name|terms
parameter_list|(
name|String
name|field
parameter_list|)
block|{
return|return
name|fields
operator|.
name|get
argument_list|(
name|field
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|fields
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{
comment|// Drop ref to FST:
for|for
control|(
name|TermsReader
name|termsReader
range|:
name|fields
operator|.
name|values
argument_list|()
control|)
block|{
name|termsReader
operator|.
name|fst
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
return|;
block|}
block|}
end_class
end_unit
