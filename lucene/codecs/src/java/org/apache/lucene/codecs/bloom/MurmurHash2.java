begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.codecs.bloom
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|bloom
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_comment
comment|/**  * This is a very fast, non-cryptographic hash suitable for general hash-based  * lookup. See http://murmurhash.googlepages.com/ for more details.  *<p>  * The C version of MurmurHash 2.0 found at that site was ported to Java by  * Andrzej Bialecki (ab at getopt org).  *</p>  *<p>  *  The code from getopt.org was adapted by Mark Harwood in the form here as one of a pluggable choice of   *  hashing functions as the core function had to be adapted to work with BytesRefs with offsets and lengths  *  rather than raw byte arrays.    *</p>  * @lucene.experimental  */
end_comment
begin_class
DECL|class|MurmurHash2
specifier|public
specifier|final
class|class
name|MurmurHash2
extends|extends
name|HashFunction
block|{
DECL|field|INSTANCE
specifier|public
specifier|static
specifier|final
name|MurmurHash2
name|INSTANCE
init|=
operator|new
name|MurmurHash2
argument_list|()
decl_stmt|;
DECL|method|MurmurHash2
specifier|private
name|MurmurHash2
parameter_list|()
block|{}
DECL|method|hash
specifier|public
specifier|static
name|int
name|hash
parameter_list|(
name|byte
index|[]
name|data
parameter_list|,
name|int
name|seed
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|len
parameter_list|)
block|{
name|int
name|m
init|=
literal|0x5bd1e995
decl_stmt|;
name|int
name|r
init|=
literal|24
decl_stmt|;
name|int
name|h
init|=
name|seed
operator|^
name|len
decl_stmt|;
name|int
name|len_4
init|=
name|len
operator|>>
literal|2
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len_4
condition|;
name|i
operator|++
control|)
block|{
name|int
name|i_4
init|=
name|offset
operator|+
operator|(
name|i
operator|<<
literal|2
operator|)
decl_stmt|;
name|int
name|k
init|=
name|data
index|[
name|i_4
operator|+
literal|3
index|]
decl_stmt|;
name|k
operator|=
name|k
operator|<<
literal|8
expr_stmt|;
name|k
operator|=
name|k
operator||
operator|(
name|data
index|[
name|i_4
operator|+
literal|2
index|]
operator|&
literal|0xff
operator|)
expr_stmt|;
name|k
operator|=
name|k
operator|<<
literal|8
expr_stmt|;
name|k
operator|=
name|k
operator||
operator|(
name|data
index|[
name|i_4
operator|+
literal|1
index|]
operator|&
literal|0xff
operator|)
expr_stmt|;
name|k
operator|=
name|k
operator|<<
literal|8
expr_stmt|;
name|k
operator|=
name|k
operator||
operator|(
name|data
index|[
name|i_4
operator|+
literal|0
index|]
operator|&
literal|0xff
operator|)
expr_stmt|;
name|k
operator|*=
name|m
expr_stmt|;
name|k
operator|^=
name|k
operator|>>>
name|r
expr_stmt|;
name|k
operator|*=
name|m
expr_stmt|;
name|h
operator|*=
name|m
expr_stmt|;
name|h
operator|^=
name|k
expr_stmt|;
block|}
name|int
name|len_m
init|=
name|len_4
operator|<<
literal|2
decl_stmt|;
name|int
name|left
init|=
name|len
operator|-
name|len_m
decl_stmt|;
if|if
condition|(
name|left
operator|!=
literal|0
condition|)
block|{
if|if
condition|(
name|left
operator|>=
literal|3
condition|)
block|{
name|h
operator|^=
name|data
index|[
name|offset
operator|+
name|len
operator|-
literal|3
index|]
operator|<<
literal|16
expr_stmt|;
block|}
if|if
condition|(
name|left
operator|>=
literal|2
condition|)
block|{
name|h
operator|^=
name|data
index|[
name|offset
operator|+
name|len
operator|-
literal|2
index|]
operator|<<
literal|8
expr_stmt|;
block|}
if|if
condition|(
name|left
operator|>=
literal|1
condition|)
block|{
name|h
operator|^=
name|data
index|[
name|offset
operator|+
name|len
operator|-
literal|1
index|]
expr_stmt|;
block|}
name|h
operator|*=
name|m
expr_stmt|;
block|}
name|h
operator|^=
name|h
operator|>>>
literal|13
expr_stmt|;
name|h
operator|*=
name|m
expr_stmt|;
name|h
operator|^=
name|h
operator|>>>
literal|15
expr_stmt|;
return|return
name|h
return|;
block|}
comment|/**    * Generates 32 bit hash from byte array with default seed value.    *     * @param data     *          byte array to hash    * @param offset    *          the start position in the array to hash    * @param len    *          length of the array elements to hash    * @return 32 bit hash of the given array    */
DECL|method|hash32
specifier|public
specifier|static
specifier|final
name|int
name|hash32
parameter_list|(
specifier|final
name|byte
index|[]
name|data
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|len
parameter_list|)
block|{
return|return
name|MurmurHash2
operator|.
name|hash
argument_list|(
name|data
argument_list|,
literal|0x9747b28c
argument_list|,
name|offset
argument_list|,
name|len
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hash
specifier|public
specifier|final
name|int
name|hash
parameter_list|(
name|BytesRef
name|br
parameter_list|)
block|{
return|return
name|hash32
argument_list|(
name|br
operator|.
name|bytes
argument_list|,
name|br
operator|.
name|offset
argument_list|,
name|br
operator|.
name|length
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
return|;
block|}
block|}
end_class
end_unit
