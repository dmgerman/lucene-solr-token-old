begin_unit
begin_package
DECL|package|org.apache.lucene.codecs.autoprefix
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|autoprefix
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|MockAnalyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|Codec
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|BinaryDocValuesField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|FieldType
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|NumericDocValuesField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|StringField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|BinaryDocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DirectoryReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexOptions
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriterConfig
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|MultiDocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|MultiFields
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|NumericDocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|PostingsEnum
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|RandomIndexWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SerialMergeScheduler
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Terms
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|TermsEnum
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|PrefixQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TermRangeQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|AttributeSource
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|FixedBitSet
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|StringHelper
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|TestUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|automaton
operator|.
name|Automata
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|automaton
operator|.
name|CompiledAutomaton
import|;
end_import
begin_class
DECL|class|TestAutoPrefixTerms
specifier|public
class|class
name|TestAutoPrefixTerms
extends|extends
name|LuceneTestCase
block|{
DECL|field|minItemsPerBlock
specifier|private
name|int
name|minItemsPerBlock
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|2
argument_list|,
literal|100
argument_list|)
decl_stmt|;
DECL|field|maxItemsPerBlock
specifier|private
name|int
name|maxItemsPerBlock
init|=
literal|2
operator|*
operator|(
name|Math
operator|.
name|max
argument_list|(
literal|2
argument_list|,
name|minItemsPerBlock
operator|-
literal|1
argument_list|)
operator|)
operator|+
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
decl_stmt|;
DECL|field|minTermsAutoPrefix
specifier|private
name|int
name|minTermsAutoPrefix
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|2
argument_list|,
literal|100
argument_list|)
decl_stmt|;
DECL|field|maxTermsAutoPrefix
specifier|private
name|int
name|maxTermsAutoPrefix
init|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
name|Math
operator|.
name|max
argument_list|(
literal|2
argument_list|,
operator|(
name|minTermsAutoPrefix
operator|-
literal|1
operator|)
operator|*
literal|2
operator|+
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
argument_list|)
else|:
name|Integer
operator|.
name|MAX_VALUE
decl_stmt|;
DECL|method|TestAutoPrefixTerms
specifier|public
name|TestAutoPrefixTerms
parameter_list|()
block|{
if|if
condition|(
name|LuceneTestCase
operator|.
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TEST: using minItemsPerBlock="
operator|+
name|minItemsPerBlock
operator|+
literal|" maxItemsPerBlock="
operator|+
name|maxItemsPerBlock
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TEST: using minTermsAutoPrefix="
operator|+
name|minTermsAutoPrefix
operator|+
literal|" maxTermsAutoPrefix="
operator|+
name|maxTermsAutoPrefix
argument_list|)
expr_stmt|;
block|}
block|}
DECL|field|codec
specifier|private
specifier|final
name|Codec
name|codec
init|=
name|TestUtil
operator|.
name|alwaysPostingsFormat
argument_list|(
operator|new
name|AutoPrefixPostingsFormat
argument_list|(
name|minItemsPerBlock
argument_list|,
name|maxItemsPerBlock
argument_list|,
name|minTermsAutoPrefix
argument_list|,
name|maxTermsAutoPrefix
argument_list|)
argument_list|)
decl_stmt|;
comment|// Numbers in a restricted range, encoded in decimal, left-0-padded:
DECL|method|testBasicNumericRanges
specifier|public
name|void
name|testBasicNumericRanges
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriterConfig
name|iwc
init|=
operator|new
name|IndexWriterConfig
argument_list|(
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|iwc
operator|.
name|setCodec
argument_list|(
name|codec
argument_list|)
expr_stmt|;
name|IndexWriter
name|w
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|iwc
argument_list|)
decl_stmt|;
name|int
name|numTerms
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|3000
argument_list|,
literal|50000
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|terms
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|digits
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|5
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|int
name|maxValue
init|=
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|digits
condition|;
name|i
operator|++
control|)
block|{
name|maxValue
operator|*=
literal|10
expr_stmt|;
block|}
name|String
name|format
init|=
literal|"%0"
operator|+
name|digits
operator|+
literal|"d"
decl_stmt|;
while|while
condition|(
name|terms
operator|.
name|size
argument_list|()
operator|<
name|numTerms
condition|)
block|{
name|terms
operator|.
name|add
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
name|format
argument_list|,
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|maxValue
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|term
range|:
name|terms
control|)
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|StringField
argument_list|(
literal|"field"
argument_list|,
name|term
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|NumericDocValuesField
argument_list|(
literal|"field"
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
name|term
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|VERBOSE
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\nTEST: now optimize"
argument_list|)
expr_stmt|;
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|w
operator|.
name|forceMerge
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|VERBOSE
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\nTEST: now done"
argument_list|)
expr_stmt|;
name|IndexReader
name|r
init|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|w
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|sortedTerms
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|terms
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|sortedTerms
argument_list|)
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TEST: sorted terms:"
argument_list|)
expr_stmt|;
name|int
name|idx
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|term
range|:
name|sortedTerms
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|idx
operator|+
literal|": "
operator|+
name|term
argument_list|)
expr_stmt|;
name|idx
operator|++
expr_stmt|;
block|}
block|}
name|int
name|iters
init|=
name|atLeast
argument_list|(
literal|100
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|iter
init|=
literal|0
init|;
name|iter
operator|<
name|iters
condition|;
name|iter
operator|++
control|)
block|{
name|int
name|min
decl_stmt|,
name|max
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|min
operator|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|maxValue
argument_list|)
expr_stmt|;
name|max
operator|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|maxValue
argument_list|)
expr_stmt|;
if|if
condition|(
name|min
operator|==
name|max
condition|)
block|{
continue|continue;
block|}
elseif|else
if|if
condition|(
name|min
operator|>
name|max
condition|)
block|{
name|int
name|x
init|=
name|min
decl_stmt|;
name|min
operator|=
name|max
expr_stmt|;
name|max
operator|=
name|x
expr_stmt|;
block|}
break|break;
block|}
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\nTEST: iter="
operator|+
name|iter
operator|+
literal|" min="
operator|+
name|min
operator|+
literal|" max="
operator|+
name|max
argument_list|)
expr_stmt|;
block|}
name|boolean
name|minInclusive
init|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
decl_stmt|;
name|boolean
name|maxInclusive
init|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
decl_stmt|;
name|BytesRef
name|minTerm
init|=
operator|new
name|BytesRef
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
name|format
argument_list|,
name|min
argument_list|)
argument_list|)
decl_stmt|;
name|BytesRef
name|maxTerm
init|=
operator|new
name|BytesRef
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
name|format
argument_list|,
name|max
argument_list|)
argument_list|)
decl_stmt|;
name|CompiledAutomaton
name|ca
init|=
operator|new
name|CompiledAutomaton
argument_list|(
name|Automata
operator|.
name|makeBinaryInterval
argument_list|(
name|minTerm
argument_list|,
name|minInclusive
argument_list|,
name|maxTerm
argument_list|,
name|maxInclusive
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|TermsEnum
name|te
init|=
name|ca
operator|.
name|getTermsEnum
argument_list|(
name|MultiFields
operator|.
name|getTerms
argument_list|(
name|r
argument_list|,
literal|"field"
argument_list|)
argument_list|)
decl_stmt|;
name|NumericDocValues
name|docValues
init|=
name|MultiDocValues
operator|.
name|getNumericValues
argument_list|(
name|r
argument_list|,
literal|"field"
argument_list|)
decl_stmt|;
name|PostingsEnum
name|postingsEnum
init|=
literal|null
decl_stmt|;
name|VerifyAutoPrefixTerms
name|verifier
init|=
operator|new
name|VerifyAutoPrefixTerms
argument_list|(
name|r
operator|.
name|maxDoc
argument_list|()
argument_list|,
name|minTerm
argument_list|,
name|maxTerm
argument_list|)
decl_stmt|;
while|while
condition|(
name|te
operator|.
name|next
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  got term="
operator|+
name|te
operator|.
name|term
argument_list|()
operator|.
name|utf8ToString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|verifier
operator|.
name|sawTerm
argument_list|(
name|te
operator|.
name|term
argument_list|()
argument_list|)
expr_stmt|;
name|postingsEnum
operator|=
name|te
operator|.
name|postings
argument_list|(
name|postingsEnum
argument_list|)
expr_stmt|;
name|int
name|docID
decl_stmt|;
while|while
condition|(
operator|(
name|docID
operator|=
name|postingsEnum
operator|.
name|nextDoc
argument_list|()
operator|)
operator|!=
name|PostingsEnum
operator|.
name|NO_MORE_DOCS
condition|)
block|{
name|long
name|v
init|=
name|docValues
operator|.
name|get
argument_list|(
name|docID
argument_list|)
decl_stmt|;
assert|assert
name|v
operator|>=
name|min
operator|&&
name|v
operator|<=
name|max
operator|:
literal|"docID="
operator|+
name|docID
operator|+
literal|" v="
operator|+
name|v
assert|;
comment|// The auto-prefix terms should never "overlap" one another, so we should only ever see a given docID one time:
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"    got docID="
operator|+
name|docID
operator|+
literal|" v="
operator|+
name|v
argument_list|)
expr_stmt|;
block|}
name|verifier
operator|.
name|sawDoc
argument_list|(
name|docID
argument_list|)
expr_stmt|;
block|}
block|}
name|int
name|startLoc
init|=
name|Collections
operator|.
name|binarySearch
argument_list|(
name|sortedTerms
argument_list|,
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
name|format
argument_list|,
name|min
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|startLoc
operator|<
literal|0
condition|)
block|{
name|startLoc
operator|=
operator|-
name|startLoc
operator|-
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|minInclusive
operator|==
literal|false
condition|)
block|{
name|startLoc
operator|++
expr_stmt|;
block|}
name|int
name|endLoc
init|=
name|Collections
operator|.
name|binarySearch
argument_list|(
name|sortedTerms
argument_list|,
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
name|format
argument_list|,
name|max
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|endLoc
operator|<
literal|0
condition|)
block|{
name|endLoc
operator|=
operator|-
name|endLoc
operator|-
literal|2
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|maxInclusive
operator|==
literal|false
condition|)
block|{
name|endLoc
operator|--
expr_stmt|;
block|}
name|verifier
operator|.
name|finish
argument_list|(
name|endLoc
operator|-
name|startLoc
operator|+
literal|1
argument_list|,
name|maxTermsAutoPrefix
argument_list|)
expr_stmt|;
block|}
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|intToBytes
specifier|private
specifier|static
name|BytesRef
name|intToBytes
parameter_list|(
name|int
name|v
parameter_list|)
block|{
name|int
name|sortableBits
init|=
name|v
operator|^
literal|0x80000000
decl_stmt|;
name|BytesRef
name|token
init|=
operator|new
name|BytesRef
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|token
operator|.
name|length
operator|=
literal|4
expr_stmt|;
name|int
name|index
init|=
literal|3
decl_stmt|;
while|while
condition|(
name|index
operator|>=
literal|0
condition|)
block|{
name|token
operator|.
name|bytes
index|[
name|index
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|sortableBits
operator|&
literal|0xff
argument_list|)
expr_stmt|;
name|index
operator|--
expr_stmt|;
name|sortableBits
operator|>>>=
literal|8
expr_stmt|;
block|}
return|return
name|token
return|;
block|}
comment|// Numbers are encoded in full binary (4 byte ints):
DECL|method|testBinaryNumericRanges
specifier|public
name|void
name|testBinaryNumericRanges
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TEST: minItemsPerBlock="
operator|+
name|minItemsPerBlock
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TEST: maxItemsPerBlock="
operator|+
name|maxItemsPerBlock
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TEST: minTermsAutoPrefix="
operator|+
name|minTermsAutoPrefix
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TEST: maxTermsAutoPrefix="
operator|+
name|maxTermsAutoPrefix
argument_list|)
expr_stmt|;
block|}
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriterConfig
name|iwc
init|=
operator|new
name|IndexWriterConfig
argument_list|(
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|iwc
operator|.
name|setCodec
argument_list|(
name|codec
argument_list|)
expr_stmt|;
name|IndexWriter
name|w
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|iwc
argument_list|)
decl_stmt|;
name|int
name|numTerms
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|3000
argument_list|,
literal|50000
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Integer
argument_list|>
name|terms
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
while|while
condition|(
name|terms
operator|.
name|size
argument_list|()
operator|<
name|numTerms
condition|)
block|{
name|terms
operator|.
name|add
argument_list|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Integer
name|term
range|:
name|terms
control|)
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newStringField
argument_list|(
literal|"field"
argument_list|,
name|intToBytes
argument_list|(
name|term
argument_list|)
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|NumericDocValuesField
argument_list|(
literal|"field"
argument_list|,
name|term
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
if|if
condition|(
name|VERBOSE
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TEST: now force merge"
argument_list|)
expr_stmt|;
name|w
operator|.
name|forceMerge
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|IndexReader
name|r
init|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|w
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|sortedTerms
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|terms
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|sortedTerms
argument_list|)
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TEST: sorted terms:"
argument_list|)
expr_stmt|;
name|int
name|idx
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Integer
name|term
range|:
name|sortedTerms
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|idx
operator|+
literal|": "
operator|+
name|term
argument_list|)
expr_stmt|;
name|idx
operator|++
expr_stmt|;
block|}
block|}
name|int
name|iters
init|=
name|atLeast
argument_list|(
literal|100
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|iter
init|=
literal|0
init|;
name|iter
operator|<
name|iters
condition|;
name|iter
operator|++
control|)
block|{
name|int
name|min
decl_stmt|,
name|max
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|min
operator|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|()
expr_stmt|;
name|max
operator|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|()
expr_stmt|;
if|if
condition|(
name|min
operator|==
name|max
condition|)
block|{
continue|continue;
block|}
elseif|else
if|if
condition|(
name|min
operator|>
name|max
condition|)
block|{
name|int
name|x
init|=
name|min
decl_stmt|;
name|min
operator|=
name|max
expr_stmt|;
name|max
operator|=
name|x
expr_stmt|;
block|}
break|break;
block|}
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\nTEST: iter="
operator|+
name|iter
operator|+
literal|" min="
operator|+
name|min
operator|+
literal|" ("
operator|+
name|intToBytes
argument_list|(
name|min
argument_list|)
operator|+
literal|") max="
operator|+
name|max
operator|+
literal|" ("
operator|+
name|intToBytes
argument_list|(
name|max
argument_list|)
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
name|boolean
name|minInclusive
init|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
decl_stmt|;
name|BytesRef
name|minTerm
init|=
name|intToBytes
argument_list|(
name|min
argument_list|)
decl_stmt|;
name|boolean
name|maxInclusive
init|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
decl_stmt|;
name|BytesRef
name|maxTerm
init|=
name|intToBytes
argument_list|(
name|max
argument_list|)
decl_stmt|;
name|CompiledAutomaton
name|ca
init|=
operator|new
name|CompiledAutomaton
argument_list|(
name|Automata
operator|.
name|makeBinaryInterval
argument_list|(
name|minTerm
argument_list|,
name|minInclusive
argument_list|,
name|maxTerm
argument_list|,
name|maxInclusive
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|TermsEnum
name|te
init|=
name|ca
operator|.
name|getTermsEnum
argument_list|(
name|MultiFields
operator|.
name|getTerms
argument_list|(
name|r
argument_list|,
literal|"field"
argument_list|)
argument_list|)
decl_stmt|;
name|NumericDocValues
name|docValues
init|=
name|MultiDocValues
operator|.
name|getNumericValues
argument_list|(
name|r
argument_list|,
literal|"field"
argument_list|)
decl_stmt|;
name|PostingsEnum
name|postingsEnum
init|=
literal|null
decl_stmt|;
name|VerifyAutoPrefixTerms
name|verifier
init|=
operator|new
name|VerifyAutoPrefixTerms
argument_list|(
name|r
operator|.
name|maxDoc
argument_list|()
argument_list|,
name|minTerm
argument_list|,
name|maxTerm
argument_list|)
decl_stmt|;
while|while
condition|(
name|te
operator|.
name|next
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  got term="
operator|+
name|te
operator|.
name|term
argument_list|()
operator|+
literal|" docFreq="
operator|+
name|te
operator|.
name|docFreq
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|verifier
operator|.
name|sawTerm
argument_list|(
name|te
operator|.
name|term
argument_list|()
argument_list|)
expr_stmt|;
name|postingsEnum
operator|=
name|te
operator|.
name|postings
argument_list|(
name|postingsEnum
argument_list|)
expr_stmt|;
name|int
name|docID
decl_stmt|;
while|while
condition|(
operator|(
name|docID
operator|=
name|postingsEnum
operator|.
name|nextDoc
argument_list|()
operator|)
operator|!=
name|PostingsEnum
operator|.
name|NO_MORE_DOCS
condition|)
block|{
name|long
name|v
init|=
name|docValues
operator|.
name|get
argument_list|(
name|docID
argument_list|)
decl_stmt|;
assert|assert
name|v
operator|>=
name|min
operator|&&
name|v
operator|<=
name|max
operator|:
literal|"docID="
operator|+
name|docID
operator|+
literal|" v="
operator|+
name|v
assert|;
name|verifier
operator|.
name|sawDoc
argument_list|(
name|docID
argument_list|)
expr_stmt|;
block|}
block|}
name|int
name|startLoc
init|=
name|Collections
operator|.
name|binarySearch
argument_list|(
name|sortedTerms
argument_list|,
name|min
argument_list|)
decl_stmt|;
if|if
condition|(
name|startLoc
operator|<
literal|0
condition|)
block|{
name|startLoc
operator|=
operator|-
name|startLoc
operator|-
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|minInclusive
operator|==
literal|false
condition|)
block|{
name|startLoc
operator|++
expr_stmt|;
block|}
name|int
name|endLoc
init|=
name|Collections
operator|.
name|binarySearch
argument_list|(
name|sortedTerms
argument_list|,
name|max
argument_list|)
decl_stmt|;
if|if
condition|(
name|endLoc
operator|<
literal|0
condition|)
block|{
name|endLoc
operator|=
operator|-
name|endLoc
operator|-
literal|2
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|maxInclusive
operator|==
literal|false
condition|)
block|{
name|endLoc
operator|--
expr_stmt|;
block|}
name|int
name|expectedHits
init|=
name|endLoc
operator|-
name|startLoc
operator|+
literal|1
decl_stmt|;
try|try
block|{
name|verifier
operator|.
name|finish
argument_list|(
name|expectedHits
argument_list|,
name|maxTermsAutoPrefix
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AssertionError
name|ae
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numTerms
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|verifier
operator|.
name|allHits
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|==
literal|false
condition|)
block|{
name|int
name|v
init|=
operator|(
name|int
operator|)
name|docValues
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|boolean
name|accept
init|=
operator|(
name|v
operator|>
name|min
operator|||
operator|(
name|v
operator|==
name|min
operator|&&
name|minInclusive
operator|)
operator|)
operator|&&
operator|(
name|v
operator|<
name|max
operator|||
operator|(
name|v
operator|==
name|max
operator|&&
name|maxInclusive
operator|)
operator|)
decl_stmt|;
if|if
condition|(
name|accept
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"MISSING: docID="
operator|+
name|i
operator|+
literal|" v="
operator|+
name|v
operator|+
literal|" term="
operator|+
name|intToBytes
argument_list|(
name|v
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
throw|throw
name|ae
throw|;
block|}
block|}
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// Non-numeric, simple prefix query
DECL|method|testBasicPrefixTerms
specifier|public
name|void
name|testBasicPrefixTerms
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriterConfig
name|iwc
init|=
operator|new
name|IndexWriterConfig
argument_list|(
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|iwc
operator|.
name|setCodec
argument_list|(
name|codec
argument_list|)
expr_stmt|;
name|iwc
operator|.
name|setMergeScheduler
argument_list|(
operator|new
name|SerialMergeScheduler
argument_list|()
argument_list|)
expr_stmt|;
name|IndexWriter
name|w
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|iwc
argument_list|)
decl_stmt|;
name|int
name|numTerms
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|3000
argument_list|,
literal|50000
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|terms
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
while|while
condition|(
name|terms
operator|.
name|size
argument_list|()
operator|<
name|numTerms
condition|)
block|{
name|terms
operator|.
name|add
argument_list|(
name|TestUtil
operator|.
name|randomSimpleString
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|term
range|:
name|terms
control|)
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|StringField
argument_list|(
literal|"field"
argument_list|,
name|term
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|BinaryDocValuesField
argument_list|(
literal|"field"
argument_list|,
operator|new
name|BytesRef
argument_list|(
name|term
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TEST: now force merge"
argument_list|)
expr_stmt|;
block|}
name|w
operator|.
name|forceMerge
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|IndexReader
name|r
init|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|w
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|sortedTerms
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|terms
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|sortedTerms
argument_list|)
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TEST: sorted terms:"
argument_list|)
expr_stmt|;
name|int
name|idx
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|term
range|:
name|sortedTerms
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|idx
operator|+
literal|": "
operator|+
name|term
argument_list|)
expr_stmt|;
name|idx
operator|++
expr_stmt|;
block|}
block|}
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TEST: r="
operator|+
name|r
argument_list|)
expr_stmt|;
block|}
name|int
name|iters
init|=
name|atLeast
argument_list|(
literal|100
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|iter
init|=
literal|0
init|;
name|iter
operator|<
name|iters
condition|;
name|iter
operator|++
control|)
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\nTEST: iter="
operator|+
name|iter
argument_list|)
expr_stmt|;
block|}
name|String
name|prefix
decl_stmt|;
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
operator|==
literal|42
condition|)
block|{
name|prefix
operator|=
literal|""
expr_stmt|;
block|}
else|else
block|{
name|prefix
operator|=
name|TestUtil
operator|.
name|randomSimpleString
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|4
argument_list|)
expr_stmt|;
block|}
name|BytesRef
name|prefixBR
init|=
operator|new
name|BytesRef
argument_list|(
name|prefix
argument_list|)
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  prefix="
operator|+
name|prefix
argument_list|)
expr_stmt|;
block|}
name|CompiledAutomaton
name|ca
init|=
operator|new
name|CompiledAutomaton
argument_list|(
name|PrefixQuery
operator|.
name|toAutomaton
argument_list|(
name|prefixBR
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|TermsEnum
name|te
init|=
name|ca
operator|.
name|getTermsEnum
argument_list|(
name|MultiFields
operator|.
name|getTerms
argument_list|(
name|r
argument_list|,
literal|"field"
argument_list|)
argument_list|)
decl_stmt|;
name|BinaryDocValues
name|docValues
init|=
name|MultiDocValues
operator|.
name|getBinaryValues
argument_list|(
name|r
argument_list|,
literal|"field"
argument_list|)
decl_stmt|;
name|PostingsEnum
name|postingsEnum
init|=
literal|null
decl_stmt|;
name|VerifyAutoPrefixTerms
name|verifier
init|=
operator|new
name|VerifyAutoPrefixTerms
argument_list|(
name|r
operator|.
name|maxDoc
argument_list|()
argument_list|,
name|prefixBR
argument_list|)
decl_stmt|;
while|while
condition|(
name|te
operator|.
name|next
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TEST: got term="
operator|+
name|te
operator|.
name|term
argument_list|()
operator|.
name|utf8ToString
argument_list|()
operator|+
literal|" docFreq="
operator|+
name|te
operator|.
name|docFreq
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|verifier
operator|.
name|sawTerm
argument_list|(
name|te
operator|.
name|term
argument_list|()
argument_list|)
expr_stmt|;
name|postingsEnum
operator|=
name|te
operator|.
name|postings
argument_list|(
name|postingsEnum
argument_list|)
expr_stmt|;
name|int
name|docID
decl_stmt|;
while|while
condition|(
operator|(
name|docID
operator|=
name|postingsEnum
operator|.
name|nextDoc
argument_list|()
operator|)
operator|!=
name|PostingsEnum
operator|.
name|NO_MORE_DOCS
condition|)
block|{
name|assertTrue
argument_list|(
literal|"prefixBR="
operator|+
name|prefixBR
operator|+
literal|" docBR="
operator|+
name|docValues
operator|.
name|get
argument_list|(
name|docID
argument_list|)
argument_list|,
name|StringHelper
operator|.
name|startsWith
argument_list|(
name|docValues
operator|.
name|get
argument_list|(
name|docID
argument_list|)
argument_list|,
name|prefixBR
argument_list|)
argument_list|)
expr_stmt|;
comment|// The auto-prefix terms should never "overlap" one another, so we should only ever see a given docID one time:
name|verifier
operator|.
name|sawDoc
argument_list|(
name|docID
argument_list|)
expr_stmt|;
block|}
block|}
name|int
name|startLoc
init|=
name|Collections
operator|.
name|binarySearch
argument_list|(
name|sortedTerms
argument_list|,
name|prefix
argument_list|)
decl_stmt|;
if|if
condition|(
name|startLoc
operator|<
literal|0
condition|)
block|{
name|startLoc
operator|=
operator|-
name|startLoc
operator|-
literal|1
expr_stmt|;
block|}
name|int
name|endLoc
init|=
name|Collections
operator|.
name|binarySearch
argument_list|(
name|sortedTerms
argument_list|,
name|prefix
operator|+
call|(
name|char
call|)
argument_list|(
literal|'z'
operator|+
literal|1
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|endLoc
operator|<
literal|0
condition|)
block|{
name|endLoc
operator|=
operator|-
name|endLoc
operator|-
literal|2
expr_stmt|;
block|}
name|int
name|expectedHits
init|=
name|endLoc
operator|-
name|startLoc
operator|+
literal|1
decl_stmt|;
try|try
block|{
name|verifier
operator|.
name|finish
argument_list|(
name|expectedHits
argument_list|,
name|maxTermsAutoPrefix
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AssertionError
name|ae
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numTerms
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|verifier
operator|.
name|allHits
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|==
literal|false
condition|)
block|{
name|String
name|s
init|=
name|docValues
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|utf8ToString
argument_list|()
decl_stmt|;
if|if
condition|(
name|s
operator|.
name|startsWith
argument_list|(
name|prefix
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"MISSING: docID="
operator|+
name|i
operator|+
literal|" term="
operator|+
name|s
argument_list|)
expr_stmt|;
block|}
block|}
block|}
throw|throw
name|ae
throw|;
block|}
block|}
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testDemoPrefixTerms
specifier|public
name|void
name|testDemoPrefixTerms
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\nTEST: minTermsAutoPrefix="
operator|+
name|minTermsAutoPrefix
operator|+
literal|" maxTermsAutoPrefix="
operator|+
name|maxTermsAutoPrefix
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\nTEST: minItemsPerBlock="
operator|+
name|minItemsPerBlock
operator|+
literal|" maxItemsPerBlock="
operator|+
name|maxItemsPerBlock
argument_list|)
expr_stmt|;
block|}
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriterConfig
name|iwc
init|=
operator|new
name|IndexWriterConfig
argument_list|(
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|iwc
operator|.
name|setCodec
argument_list|(
name|codec
argument_list|)
expr_stmt|;
name|IndexWriter
name|w
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|iwc
argument_list|)
decl_stmt|;
name|int
name|numDocs
init|=
literal|30
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
name|i
operator|++
control|)
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|StringField
argument_list|(
literal|"field"
argument_list|,
literal|""
operator|+
call|(
name|char
call|)
argument_list|(
literal|97
operator|+
name|i
argument_list|)
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|StringField
argument_list|(
literal|"field"
argument_list|,
literal|"a"
operator|+
call|(
name|char
call|)
argument_list|(
literal|97
operator|+
name|i
argument_list|)
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|w
operator|.
name|forceMerge
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|IndexReader
name|r
init|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|w
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Terms
name|terms
init|=
name|MultiFields
operator|.
name|getTerms
argument_list|(
name|r
argument_list|,
literal|"field"
argument_list|)
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\nTEST: now intersect"
argument_list|)
expr_stmt|;
block|}
name|CompiledAutomaton
name|ca
init|=
operator|new
name|CompiledAutomaton
argument_list|(
name|PrefixQuery
operator|.
name|toAutomaton
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"a"
argument_list|)
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|TermsEnum
name|te
init|=
name|ca
operator|.
name|getTermsEnum
argument_list|(
name|terms
argument_list|)
decl_stmt|;
name|PostingsEnum
name|postingsEnum
init|=
literal|null
decl_stmt|;
name|VerifyAutoPrefixTerms
name|verifier
init|=
operator|new
name|VerifyAutoPrefixTerms
argument_list|(
name|r
operator|.
name|maxDoc
argument_list|()
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"a"
argument_list|)
argument_list|)
decl_stmt|;
comment|//TermsEnum te = terms.intersect(new CompiledAutomaton(a, true, false), null);
while|while
condition|(
name|te
operator|.
name|next
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|verifier
operator|.
name|sawTerm
argument_list|(
name|te
operator|.
name|term
argument_list|()
argument_list|)
expr_stmt|;
name|postingsEnum
operator|=
name|te
operator|.
name|postings
argument_list|(
name|postingsEnum
argument_list|)
expr_stmt|;
name|int
name|docID
decl_stmt|;
while|while
condition|(
operator|(
name|docID
operator|=
name|postingsEnum
operator|.
name|nextDoc
argument_list|()
operator|)
operator|!=
name|PostingsEnum
operator|.
name|NO_MORE_DOCS
condition|)
block|{
comment|// The auto-prefix terms should never "overlap" one another, so we should only ever see a given docID one time:
name|verifier
operator|.
name|sawDoc
argument_list|(
name|docID
argument_list|)
expr_stmt|;
block|}
block|}
comment|// 1 document has exactly "a", and 30 documents had "a?"
name|verifier
operator|.
name|finish
argument_list|(
literal|31
argument_list|,
name|maxTermsAutoPrefix
argument_list|)
expr_stmt|;
name|PrefixQuery
name|q
init|=
operator|new
name|PrefixQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"a"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|31
argument_list|,
name|newSearcher
argument_list|(
name|r
argument_list|)
operator|.
name|search
argument_list|(
name|q
argument_list|,
literal|1
argument_list|)
operator|.
name|totalHits
argument_list|)
expr_stmt|;
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/** Helper class to ensure auto-prefix terms 1) never overlap one another, and 2) are used when they should be. */
DECL|class|VerifyAutoPrefixTerms
specifier|private
specifier|static
class|class
name|VerifyAutoPrefixTerms
block|{
DECL|field|allHits
specifier|final
name|FixedBitSet
name|allHits
decl_stmt|;
DECL|field|prefixCounts
specifier|private
specifier|final
name|Map
argument_list|<
name|BytesRef
argument_list|,
name|Integer
argument_list|>
name|prefixCounts
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|totPrefixCount
specifier|private
name|int
name|totPrefixCount
decl_stmt|;
DECL|field|bounds
specifier|private
specifier|final
name|BytesRef
index|[]
name|bounds
decl_stmt|;
DECL|field|totTermCount
specifier|private
name|int
name|totTermCount
decl_stmt|;
DECL|field|lastTerm
specifier|private
name|BytesRef
name|lastTerm
decl_stmt|;
DECL|method|VerifyAutoPrefixTerms
specifier|public
name|VerifyAutoPrefixTerms
parameter_list|(
name|int
name|maxDoc
parameter_list|,
name|BytesRef
modifier|...
name|bounds
parameter_list|)
block|{
name|allHits
operator|=
operator|new
name|FixedBitSet
argument_list|(
name|maxDoc
argument_list|)
expr_stmt|;
assert|assert
name|bounds
operator|.
name|length
operator|>
literal|0
assert|;
name|this
operator|.
name|bounds
operator|=
name|bounds
expr_stmt|;
block|}
DECL|method|sawTerm
specifier|public
name|void
name|sawTerm
parameter_list|(
name|BytesRef
name|term
parameter_list|)
block|{
comment|//System.out.println("saw term=" + term);
if|if
condition|(
name|lastTerm
operator|!=
literal|null
condition|)
block|{
name|assertTrue
argument_list|(
name|lastTerm
operator|.
name|compareTo
argument_list|(
name|term
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
block|}
name|lastTerm
operator|=
name|BytesRef
operator|.
name|deepCopyOf
argument_list|(
name|term
argument_list|)
expr_stmt|;
name|totTermCount
operator|++
expr_stmt|;
name|totPrefixCount
operator|+=
name|term
operator|.
name|length
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|term
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|BytesRef
name|prefix
init|=
name|BytesRef
operator|.
name|deepCopyOf
argument_list|(
name|term
argument_list|)
decl_stmt|;
name|prefix
operator|.
name|length
operator|=
name|i
expr_stmt|;
name|Integer
name|count
init|=
name|prefixCounts
operator|.
name|get
argument_list|(
name|prefix
argument_list|)
decl_stmt|;
if|if
condition|(
name|count
operator|==
literal|null
condition|)
block|{
name|count
operator|=
literal|1
expr_stmt|;
block|}
else|else
block|{
name|count
operator|+=
literal|1
expr_stmt|;
block|}
name|prefixCounts
operator|.
name|put
argument_list|(
name|prefix
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|sawDoc
specifier|public
name|void
name|sawDoc
parameter_list|(
name|int
name|docID
parameter_list|)
block|{
comment|// The auto-prefix terms should never "overlap" one another, so we should only ever see a given docID one time:
name|assertFalse
argument_list|(
name|allHits
operator|.
name|getAndSet
argument_list|(
name|docID
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|finish
specifier|public
name|void
name|finish
parameter_list|(
name|int
name|expectedNumHits
parameter_list|,
name|int
name|maxPrefixCount
parameter_list|)
block|{
if|if
condition|(
name|maxPrefixCount
operator|!=
operator|-
literal|1
condition|)
block|{
comment|// Auto-terms were used in this test
name|long
name|allowedMaxTerms
decl_stmt|;
if|if
condition|(
name|bounds
operator|.
name|length
operator|==
literal|1
condition|)
block|{
comment|// Simple prefix query: we should never see more than maxPrefixCount terms, except for the empty string:
if|if
condition|(
name|bounds
index|[
literal|0
index|]
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|allowedMaxTerms
operator|=
name|Integer
operator|.
name|MAX_VALUE
expr_stmt|;
block|}
else|else
block|{
name|allowedMaxTerms
operator|=
name|maxPrefixCount
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// Trickier: we need to allow for maxPrefixTerms for each different leading byte in the min and max:
assert|assert
name|bounds
operator|.
name|length
operator|==
literal|2
assert|;
name|BytesRef
name|minTerm
init|=
name|bounds
index|[
literal|0
index|]
decl_stmt|;
name|BytesRef
name|maxTerm
init|=
name|bounds
index|[
literal|1
index|]
decl_stmt|;
name|int
name|commonPrefix
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|minTerm
operator|.
name|length
operator|&&
name|i
operator|<
name|maxTerm
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|minTerm
operator|.
name|bytes
index|[
name|minTerm
operator|.
name|offset
operator|+
name|i
index|]
operator|!=
name|maxTerm
operator|.
name|bytes
index|[
name|maxTerm
operator|.
name|offset
operator|+
name|i
index|]
condition|)
block|{
name|commonPrefix
operator|=
name|i
expr_stmt|;
break|break;
block|}
block|}
name|allowedMaxTerms
operator|=
name|maxPrefixCount
operator|*
call|(
name|long
call|)
argument_list|(
operator|(
name|minTerm
operator|.
name|length
operator|-
name|commonPrefix
operator|)
operator|+
operator|(
name|maxTerm
operator|.
name|length
operator|-
name|commonPrefix
operator|)
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"totTermCount="
operator|+
name|totTermCount
operator|+
literal|" is> allowedMaxTerms="
operator|+
name|allowedMaxTerms
argument_list|,
name|totTermCount
operator|<=
name|allowedMaxTerms
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|expectedNumHits
argument_list|,
name|allHits
operator|.
name|cardinality
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|sum
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|BytesRef
argument_list|,
name|Integer
argument_list|>
name|ent
range|:
name|prefixCounts
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|BytesRef
name|prefix
init|=
name|ent
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  verify prefix="
operator|+
name|TestUtil
operator|.
name|bytesRefToString
argument_list|(
name|prefix
argument_list|)
operator|+
literal|" count="
operator|+
name|ent
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|maxPrefixCount
operator|!=
operator|-
literal|1
condition|)
block|{
comment|// Auto-terms were used in this test
name|int
name|sumLeftoverSuffix
init|=
literal|0
decl_stmt|;
for|for
control|(
name|BytesRef
name|bound
range|:
name|bounds
control|)
block|{
name|int
name|minSharedLength
init|=
name|Math
operator|.
name|min
argument_list|(
name|bound
operator|.
name|length
argument_list|,
name|prefix
operator|.
name|length
argument_list|)
decl_stmt|;
name|int
name|commonPrefix
init|=
name|minSharedLength
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|minSharedLength
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|bound
operator|.
name|bytes
index|[
name|bound
operator|.
name|offset
operator|+
name|i
index|]
operator|!=
name|prefix
operator|.
name|bytes
index|[
name|prefix
operator|.
name|offset
operator|+
name|i
index|]
condition|)
block|{
name|commonPrefix
operator|=
name|i
expr_stmt|;
break|break;
block|}
block|}
name|sumLeftoverSuffix
operator|+=
name|bound
operator|.
name|length
operator|-
name|commonPrefix
expr_stmt|;
block|}
name|long
name|limit
init|=
operator|(
literal|1
operator|+
name|sumLeftoverSuffix
operator|)
operator|*
operator|(
name|long
operator|)
name|maxPrefixCount
decl_stmt|;
name|assertTrue
argument_list|(
literal|"maxPrefixCount="
operator|+
name|maxPrefixCount
operator|+
literal|" prefix="
operator|+
name|prefix
operator|+
literal|" sumLeftoverSuffix="
operator|+
name|sumLeftoverSuffix
operator|+
literal|" limit="
operator|+
name|limit
operator|+
literal|" vs actual="
operator|+
name|ent
operator|.
name|getValue
argument_list|()
argument_list|,
name|ent
operator|.
name|getValue
argument_list|()
operator|<=
name|limit
argument_list|)
expr_stmt|;
block|}
name|sum
operator|+=
name|ent
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
comment|// Make sure no test bug:
name|assertEquals
argument_list|(
name|totPrefixCount
argument_list|,
name|sum
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Make sure you get clear exc. if you try to use this within anything but IndexOptions.DOCS fields. */
DECL|method|testWithFreqs
specifier|public
name|void
name|testWithFreqs
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriterConfig
name|iwc
init|=
operator|new
name|IndexWriterConfig
argument_list|(
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|iwc
operator|.
name|setCodec
argument_list|(
name|codec
argument_list|)
expr_stmt|;
name|IndexWriter
name|w
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|iwc
argument_list|)
decl_stmt|;
name|FieldType
name|ft
init|=
operator|new
name|FieldType
argument_list|(
name|StringField
operator|.
name|TYPE_NOT_STORED
argument_list|)
decl_stmt|;
name|ft
operator|.
name|setIndexOptions
argument_list|(
name|IndexOptions
operator|.
name|DOCS_AND_FREQS
argument_list|)
expr_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"foo"
argument_list|,
literal|"bar bar"
argument_list|,
name|ft
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
try|try
block|{
name|w
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|ise
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"ranges can only be indexed with IndexOptions.DOCS (field: foo)"
argument_list|,
name|ise
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/** Make sure you get clear exc. if you try to use this within anything but IndexOptions.DOCS fields. */
DECL|method|testWithPositions
specifier|public
name|void
name|testWithPositions
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriterConfig
name|iwc
init|=
operator|new
name|IndexWriterConfig
argument_list|(
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|iwc
operator|.
name|setCodec
argument_list|(
name|codec
argument_list|)
expr_stmt|;
name|IndexWriter
name|w
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|iwc
argument_list|)
decl_stmt|;
name|FieldType
name|ft
init|=
operator|new
name|FieldType
argument_list|(
name|StringField
operator|.
name|TYPE_NOT_STORED
argument_list|)
decl_stmt|;
name|ft
operator|.
name|setIndexOptions
argument_list|(
name|IndexOptions
operator|.
name|DOCS_AND_FREQS_AND_POSITIONS
argument_list|)
expr_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"foo"
argument_list|,
literal|"bar bar"
argument_list|,
name|ft
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
try|try
block|{
name|w
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|ise
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"ranges can only be indexed with IndexOptions.DOCS (field: foo)"
argument_list|,
name|ise
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/** Make sure you get clear exc. if you try to use this within anything but IndexOptions.DOCS fields. */
DECL|method|testWithOffsets
specifier|public
name|void
name|testWithOffsets
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriterConfig
name|iwc
init|=
operator|new
name|IndexWriterConfig
argument_list|(
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|iwc
operator|.
name|setCodec
argument_list|(
name|codec
argument_list|)
expr_stmt|;
name|IndexWriter
name|w
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|iwc
argument_list|)
decl_stmt|;
name|FieldType
name|ft
init|=
operator|new
name|FieldType
argument_list|(
name|StringField
operator|.
name|TYPE_NOT_STORED
argument_list|)
decl_stmt|;
name|ft
operator|.
name|setIndexOptions
argument_list|(
name|IndexOptions
operator|.
name|DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS
argument_list|)
expr_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"foo"
argument_list|,
literal|"bar bar"
argument_list|,
name|ft
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
try|try
block|{
name|w
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|ise
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"ranges can only be indexed with IndexOptions.DOCS (field: foo)"
argument_list|,
name|ise
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/** Make sure auto prefix terms are used with TermRangeQuery */
DECL|method|testTermRange
specifier|public
name|void
name|testTermRange
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|prefixes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|char
index|[]
name|chars
init|=
operator|new
name|char
index|[
name|i
index|]
decl_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|chars
argument_list|,
literal|'a'
argument_list|)
expr_stmt|;
name|prefixes
operator|.
name|add
argument_list|(
operator|new
name|String
argument_list|(
name|chars
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|randomTerms
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|numTerms
init|=
name|atLeast
argument_list|(
literal|10000
argument_list|)
decl_stmt|;
while|while
condition|(
name|randomTerms
operator|.
name|size
argument_list|()
operator|<
name|numTerms
condition|)
block|{
for|for
control|(
name|String
name|prefix
range|:
name|prefixes
control|)
block|{
name|randomTerms
operator|.
name|add
argument_list|(
name|prefix
operator|+
name|TestUtil
operator|.
name|randomSimpleString
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// We make term range aa<start> - aa<end>
name|char
name|start
decl_stmt|;
name|char
name|end
decl_stmt|;
name|int
name|actualCount
decl_stmt|;
name|boolean
name|startInclusive
init|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
decl_stmt|;
name|boolean
name|endInclusive
init|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
decl_stmt|;
name|String
name|startTerm
decl_stmt|;
name|String
name|endTerm
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|start
operator|=
operator|(
name|char
operator|)
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|'a'
argument_list|,
literal|'m'
argument_list|)
expr_stmt|;
name|end
operator|=
operator|(
name|char
operator|)
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
name|start
operator|+
literal|1
argument_list|,
literal|'z'
argument_list|)
expr_stmt|;
name|actualCount
operator|=
literal|0
expr_stmt|;
name|startTerm
operator|=
literal|"aa"
operator|+
name|start
expr_stmt|;
name|endTerm
operator|=
literal|"aa"
operator|+
name|end
expr_stmt|;
for|for
control|(
name|String
name|term
range|:
name|randomTerms
control|)
block|{
name|int
name|cmpStart
init|=
name|startTerm
operator|.
name|compareTo
argument_list|(
name|term
argument_list|)
decl_stmt|;
name|int
name|cmpEnd
init|=
name|endTerm
operator|.
name|compareTo
argument_list|(
name|term
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|cmpStart
operator|<
literal|0
operator|||
operator|(
name|startInclusive
operator|&&
name|cmpStart
operator|==
literal|0
operator|)
operator|)
operator|&&
operator|(
name|cmpEnd
operator|>
literal|0
operator|||
operator|(
name|endInclusive
operator|&&
name|cmpEnd
operator|==
literal|0
operator|)
operator|)
condition|)
block|{
name|actualCount
operator|++
expr_stmt|;
block|}
block|}
if|if
condition|(
name|actualCount
operator|>
literal|2000
condition|)
block|{
break|break;
block|}
block|}
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"start "
operator|+
name|startTerm
operator|+
literal|" inclusive? "
operator|+
name|startInclusive
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"end "
operator|+
name|endTerm
operator|+
literal|" inclusive? "
operator|+
name|endInclusive
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"actual count "
operator|+
name|actualCount
argument_list|)
expr_stmt|;
block|}
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriterConfig
name|iwc
init|=
name|newIndexWriterConfig
argument_list|(
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|minTermsInBlock
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|2
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|int
name|maxTermsInBlock
init|=
name|Math
operator|.
name|max
argument_list|(
literal|2
argument_list|,
operator|(
name|minTermsInBlock
operator|-
literal|1
operator|)
operator|*
literal|2
operator|+
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|minTermsAutoPrefix
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|2
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|int
name|maxTermsAutoPrefix
init|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
name|Math
operator|.
name|max
argument_list|(
literal|2
argument_list|,
operator|(
name|minTermsAutoPrefix
operator|-
literal|1
operator|)
operator|*
literal|2
operator|+
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
argument_list|)
else|:
name|Integer
operator|.
name|MAX_VALUE
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"minTermsAutoPrefix "
operator|+
name|minTermsAutoPrefix
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"maxTermsAutoPrefix "
operator|+
name|maxTermsAutoPrefix
argument_list|)
expr_stmt|;
block|}
name|iwc
operator|.
name|setCodec
argument_list|(
name|TestUtil
operator|.
name|alwaysPostingsFormat
argument_list|(
operator|new
name|AutoPrefixPostingsFormat
argument_list|(
name|minTermsInBlock
argument_list|,
name|maxTermsInBlock
argument_list|,
name|minTermsAutoPrefix
argument_list|,
name|maxTermsAutoPrefix
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|RandomIndexWriter
name|w
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|,
name|iwc
argument_list|)
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TEST: index terms"
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|term
range|:
name|randomTerms
control|)
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|StringField
argument_list|(
literal|"field"
argument_list|,
name|term
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  "
operator|+
name|term
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TEST: now force merge"
argument_list|)
expr_stmt|;
block|}
name|w
operator|.
name|forceMerge
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|IndexReader
name|r
init|=
name|w
operator|.
name|getReader
argument_list|()
decl_stmt|;
specifier|final
name|Terms
name|terms
init|=
name|MultiFields
operator|.
name|getTerms
argument_list|(
name|r
argument_list|,
literal|"field"
argument_list|)
decl_stmt|;
name|IndexSearcher
name|s
init|=
operator|new
name|IndexSearcher
argument_list|(
name|r
argument_list|)
decl_stmt|;
specifier|final
name|int
name|finalActualCount
init|=
name|actualCount
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"start="
operator|+
name|startTerm
operator|+
literal|" end="
operator|+
name|endTerm
operator|+
literal|" startIncl="
operator|+
name|startInclusive
operator|+
literal|" endIncl="
operator|+
name|endInclusive
argument_list|)
expr_stmt|;
block|}
name|TermRangeQuery
name|q
init|=
operator|new
name|TermRangeQuery
argument_list|(
literal|"field"
argument_list|,
operator|new
name|BytesRef
argument_list|(
name|startTerm
argument_list|)
argument_list|,
operator|new
name|BytesRef
argument_list|(
name|endTerm
argument_list|)
argument_list|,
name|startInclusive
argument_list|,
name|endInclusive
argument_list|)
block|{
specifier|public
name|TermRangeQuery
name|checkTerms
parameter_list|()
throws|throws
name|IOException
block|{
name|TermsEnum
name|termsEnum
init|=
name|getTermsEnum
argument_list|(
name|terms
argument_list|,
operator|new
name|AttributeSource
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|termsEnum
operator|.
name|next
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"got term: "
operator|+
name|termsEnum
operator|.
name|term
argument_list|()
operator|.
name|utf8ToString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|count
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"count "
operator|+
name|count
operator|+
literal|" vs finalActualCount="
operator|+
name|finalActualCount
argument_list|)
expr_stmt|;
block|}
comment|// Auto-prefix term(s) should have kicked in, so we should have visited fewer than the total number of aa* terms:
name|assertTrue
argument_list|(
name|count
operator|<
name|finalActualCount
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
operator|.
name|checkTerms
argument_list|()
decl_stmt|;
name|int
name|maxClauseCount
init|=
name|BooleanQuery
operator|.
name|getMaxClauseCount
argument_list|()
decl_stmt|;
try|try
block|{
comment|// TODO test with boolean rewrite as well once we can create term
comment|// queries on fake terms
comment|/*if (random().nextBoolean()) {         q.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_REWRITE);         BooleanQuery.setMaxClauseCount(actualCount);       } else if (random().nextBoolean()) {         q.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_BOOLEAN_REWRITE);         BooleanQuery.setMaxClauseCount(actualCount);       }*/
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TEST: use rewrite method "
operator|+
name|q
operator|.
name|getRewriteMethod
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|actualCount
argument_list|,
name|s
operator|.
name|search
argument_list|(
name|q
argument_list|,
literal|1
argument_list|)
operator|.
name|totalHits
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|BooleanQuery
operator|.
name|setMaxClauseCount
argument_list|(
name|maxClauseCount
argument_list|)
expr_stmt|;
block|}
comment|// Test when min == max:
name|List
argument_list|<
name|String
argument_list|>
name|randomTermsList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|randomTerms
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|iter
init|=
literal|0
init|;
name|iter
operator|<
literal|100
operator|*
name|RANDOM_MULTIPLIER
condition|;
name|iter
operator|++
control|)
block|{
name|String
name|term
init|=
name|randomTermsList
operator|.
name|get
argument_list|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|randomTermsList
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|q
operator|=
operator|new
name|TermRangeQuery
argument_list|(
literal|"field"
argument_list|,
operator|new
name|BytesRef
argument_list|(
name|term
argument_list|)
argument_list|,
operator|new
name|BytesRef
argument_list|(
name|term
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|s
operator|.
name|search
argument_list|(
name|q
argument_list|,
literal|1
argument_list|)
operator|.
name|totalHits
argument_list|)
expr_stmt|;
block|}
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/** Make sure auto prefix terms are used with PrefixQuery. */
DECL|method|testPrefixQuery
specifier|public
name|void
name|testPrefixQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|prefixes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|char
index|[]
name|chars
init|=
operator|new
name|char
index|[
name|i
index|]
decl_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|chars
argument_list|,
literal|'a'
argument_list|)
expr_stmt|;
name|prefixes
operator|.
name|add
argument_list|(
operator|new
name|String
argument_list|(
name|chars
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|randomTerms
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|numTerms
init|=
name|atLeast
argument_list|(
literal|10000
argument_list|)
decl_stmt|;
while|while
condition|(
name|randomTerms
operator|.
name|size
argument_list|()
operator|<
name|numTerms
condition|)
block|{
for|for
control|(
name|String
name|prefix
range|:
name|prefixes
control|)
block|{
name|randomTerms
operator|.
name|add
argument_list|(
name|prefix
operator|+
name|TestUtil
operator|.
name|randomRealisticUnicodeString
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|int
name|actualCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|term
range|:
name|randomTerms
control|)
block|{
if|if
condition|(
name|term
operator|.
name|startsWith
argument_list|(
literal|"aa"
argument_list|)
condition|)
block|{
name|actualCount
operator|++
expr_stmt|;
block|}
block|}
comment|//System.out.println("actual count " + actualCount);
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriterConfig
name|iwc
init|=
name|newIndexWriterConfig
argument_list|(
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|minTermsInBlock
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|2
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|int
name|maxTermsInBlock
init|=
name|Math
operator|.
name|max
argument_list|(
literal|2
argument_list|,
operator|(
name|minTermsInBlock
operator|-
literal|1
operator|)
operator|*
literal|2
operator|+
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
argument_list|)
decl_stmt|;
comment|// As long as this is never> actualCount, aa should always see at least one auto-prefix term:
name|int
name|minTermsAutoPrefix
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|2
argument_list|,
name|actualCount
argument_list|)
decl_stmt|;
name|int
name|maxTermsAutoPrefix
init|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
name|Math
operator|.
name|max
argument_list|(
literal|2
argument_list|,
operator|(
name|minTermsAutoPrefix
operator|-
literal|1
operator|)
operator|*
literal|2
operator|+
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
argument_list|)
else|:
name|Integer
operator|.
name|MAX_VALUE
decl_stmt|;
name|iwc
operator|.
name|setCodec
argument_list|(
name|TestUtil
operator|.
name|alwaysPostingsFormat
argument_list|(
operator|new
name|AutoPrefixPostingsFormat
argument_list|(
name|minTermsInBlock
argument_list|,
name|maxTermsInBlock
argument_list|,
name|minTermsAutoPrefix
argument_list|,
name|maxTermsAutoPrefix
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|RandomIndexWriter
name|w
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|,
name|iwc
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|term
range|:
name|randomTerms
control|)
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|StringField
argument_list|(
literal|"field"
argument_list|,
name|term
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
name|w
operator|.
name|forceMerge
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|IndexReader
name|r
init|=
name|w
operator|.
name|getReader
argument_list|()
decl_stmt|;
specifier|final
name|Terms
name|terms
init|=
name|MultiFields
operator|.
name|getTerms
argument_list|(
name|r
argument_list|,
literal|"field"
argument_list|)
decl_stmt|;
name|IndexSearcher
name|s
init|=
operator|new
name|IndexSearcher
argument_list|(
name|r
argument_list|)
decl_stmt|;
specifier|final
name|int
name|finalActualCount
init|=
name|actualCount
decl_stmt|;
name|PrefixQuery
name|q
init|=
operator|new
name|PrefixQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"aa"
argument_list|)
argument_list|)
block|{
specifier|public
name|PrefixQuery
name|checkTerms
parameter_list|()
throws|throws
name|IOException
block|{
name|TermsEnum
name|termsEnum
init|=
name|getTermsEnum
argument_list|(
name|terms
argument_list|,
operator|new
name|AttributeSource
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|termsEnum
operator|.
name|next
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|//System.out.println("got term: " + termsEnum.term().utf8ToString());
name|count
operator|++
expr_stmt|;
block|}
comment|// Auto-prefix term(s) should have kicked in, so we should have visited fewer than the total number of aa* terms:
name|assertTrue
argument_list|(
name|count
operator|<
name|finalActualCount
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
operator|.
name|checkTerms
argument_list|()
decl_stmt|;
name|int
name|x
init|=
name|BooleanQuery
operator|.
name|getMaxClauseCount
argument_list|()
decl_stmt|;
try|try
block|{
comment|// TODO test with boolean rewrite as well once we can create term
comment|// queries on fake terms
comment|/*BooleanQuery.setMaxClauseCount(randomTerms.size());       if (random().nextBoolean()) {         q.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_REWRITE);       } else if (random().nextBoolean()) {         q.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_BOOLEAN_REWRITE);       }*/
name|assertEquals
argument_list|(
name|actualCount
argument_list|,
name|s
operator|.
name|search
argument_list|(
name|q
argument_list|,
literal|1
argument_list|)
operator|.
name|totalHits
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|BooleanQuery
operator|.
name|setMaxClauseCount
argument_list|(
name|x
argument_list|)
expr_stmt|;
block|}
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class
end_unit
