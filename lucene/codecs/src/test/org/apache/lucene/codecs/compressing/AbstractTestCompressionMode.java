begin_unit
begin_package
DECL|package|org.apache.lucene.codecs.compressing
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|compressing
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|ByteArrayDataInput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|ByteArrayDataOutput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|generators
operator|.
name|RandomInts
import|;
end_import
begin_class
DECL|class|AbstractTestCompressionMode
specifier|public
specifier|abstract
class|class
name|AbstractTestCompressionMode
extends|extends
name|LuceneTestCase
block|{
DECL|field|mode
name|CompressionMode
name|mode
decl_stmt|;
DECL|method|randomArray
specifier|static
name|byte
index|[]
name|randomArray
parameter_list|()
block|{
specifier|final
name|int
name|max
init|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|4
argument_list|)
else|:
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|256
argument_list|)
decl_stmt|;
specifier|final
name|int
name|length
init|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|20
argument_list|)
else|:
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|192
operator|*
literal|1024
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|arr
init|=
operator|new
name|byte
index|[
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|arr
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|arr
index|[
name|i
index|]
operator|=
operator|(
name|byte
operator|)
name|RandomInts
operator|.
name|randomIntBetween
argument_list|(
name|random
argument_list|()
argument_list|,
literal|0
argument_list|,
name|max
argument_list|)
expr_stmt|;
block|}
return|return
name|arr
return|;
block|}
DECL|method|compress
name|byte
index|[]
name|compress
parameter_list|(
name|byte
index|[]
name|uncompressed
parameter_list|)
throws|throws
name|IOException
block|{
name|Compressor
name|compressor
init|=
name|mode
operator|.
name|newCompressor
argument_list|()
decl_stmt|;
return|return
name|compress
argument_list|(
name|compressor
argument_list|,
name|uncompressed
argument_list|)
return|;
block|}
DECL|method|compress
specifier|static
name|byte
index|[]
name|compress
parameter_list|(
name|Compressor
name|compressor
parameter_list|,
name|byte
index|[]
name|uncompressed
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|compressed
init|=
operator|new
name|byte
index|[
name|uncompressed
operator|.
name|length
operator|*
literal|2
operator|+
literal|16
index|]
decl_stmt|;
comment|// should be enough
name|ByteArrayDataOutput
name|out
init|=
operator|new
name|ByteArrayDataOutput
argument_list|(
name|compressed
argument_list|)
decl_stmt|;
name|compressor
operator|.
name|compress
argument_list|(
name|uncompressed
argument_list|,
literal|0
argument_list|,
name|uncompressed
operator|.
name|length
argument_list|,
name|out
argument_list|)
expr_stmt|;
specifier|final
name|int
name|compressedLen
init|=
name|out
operator|.
name|getPosition
argument_list|()
decl_stmt|;
return|return
name|Arrays
operator|.
name|copyOf
argument_list|(
name|compressed
argument_list|,
name|compressedLen
argument_list|)
return|;
block|}
DECL|method|uncompress
name|byte
index|[]
name|uncompress
parameter_list|(
name|byte
index|[]
name|compressed
parameter_list|)
throws|throws
name|IOException
block|{
name|Uncompressor
name|uncompressor
init|=
name|mode
operator|.
name|newUncompressor
argument_list|()
decl_stmt|;
return|return
name|uncompress
argument_list|(
name|uncompressor
argument_list|,
name|compressed
argument_list|)
return|;
block|}
DECL|method|uncompress
specifier|static
name|byte
index|[]
name|uncompress
parameter_list|(
name|Uncompressor
name|uncompressor
parameter_list|,
name|byte
index|[]
name|compressed
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|BytesRef
name|bytes
init|=
operator|new
name|BytesRef
argument_list|()
decl_stmt|;
name|uncompressor
operator|.
name|uncompress
argument_list|(
operator|new
name|ByteArrayDataInput
argument_list|(
name|compressed
argument_list|)
argument_list|,
name|bytes
argument_list|)
expr_stmt|;
return|return
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|bytes
operator|.
name|bytes
argument_list|,
name|bytes
operator|.
name|offset
argument_list|,
name|bytes
operator|.
name|offset
operator|+
name|bytes
operator|.
name|length
argument_list|)
return|;
block|}
DECL|method|uncompress
name|byte
index|[]
name|uncompress
parameter_list|(
name|byte
index|[]
name|compressed
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
name|Uncompressor
name|uncompressor
init|=
name|mode
operator|.
name|newUncompressor
argument_list|()
decl_stmt|;
specifier|final
name|BytesRef
name|bytes
init|=
operator|new
name|BytesRef
argument_list|()
decl_stmt|;
name|uncompressor
operator|.
name|uncompress
argument_list|(
operator|new
name|ByteArrayDataInput
argument_list|(
name|compressed
argument_list|)
argument_list|,
name|offset
argument_list|,
name|length
argument_list|,
name|bytes
argument_list|)
expr_stmt|;
return|return
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|bytes
operator|.
name|bytes
argument_list|,
name|bytes
operator|.
name|offset
argument_list|,
name|bytes
operator|.
name|offset
operator|+
name|bytes
operator|.
name|length
argument_list|)
return|;
block|}
DECL|method|copyCompressedData
specifier|static
name|byte
index|[]
name|copyCompressedData
parameter_list|(
name|Uncompressor
name|uncompressor
parameter_list|,
name|byte
index|[]
name|compressed
parameter_list|)
throws|throws
name|IOException
block|{
name|GrowableByteArrayDataOutput
name|out
init|=
operator|new
name|GrowableByteArrayDataOutput
argument_list|(
name|compressed
operator|.
name|length
argument_list|)
decl_stmt|;
name|uncompressor
operator|.
name|copyCompressedData
argument_list|(
operator|new
name|ByteArrayDataInput
argument_list|(
name|compressed
argument_list|)
argument_list|,
name|out
argument_list|)
expr_stmt|;
return|return
name|Arrays
operator|.
name|copyOf
argument_list|(
name|out
operator|.
name|bytes
argument_list|,
name|out
operator|.
name|length
argument_list|)
return|;
block|}
DECL|method|copyCompressedData
name|byte
index|[]
name|copyCompressedData
parameter_list|(
name|byte
index|[]
name|compressed
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|copyCompressedData
argument_list|(
name|mode
operator|.
name|newUncompressor
argument_list|()
argument_list|,
name|compressed
argument_list|)
return|;
block|}
DECL|method|testUncompress
specifier|public
name|void
name|testUncompress
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|byte
index|[]
name|uncompressed
init|=
name|randomArray
argument_list|()
decl_stmt|;
specifier|final
name|byte
index|[]
name|compressed
init|=
name|compress
argument_list|(
name|uncompressed
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|restored
init|=
name|uncompress
argument_list|(
name|compressed
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|uncompressed
argument_list|,
name|restored
argument_list|)
expr_stmt|;
block|}
DECL|method|testPartialUncompress
specifier|public
name|void
name|testPartialUncompress
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|int
name|iterations
init|=
name|atLeast
argument_list|(
literal|10
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iterations
condition|;
operator|++
name|i
control|)
block|{
specifier|final
name|byte
index|[]
name|uncompressed
init|=
name|randomArray
argument_list|()
decl_stmt|;
specifier|final
name|byte
index|[]
name|compressed
init|=
name|compress
argument_list|(
name|uncompressed
argument_list|)
decl_stmt|;
specifier|final
name|int
name|offset
decl_stmt|,
name|length
decl_stmt|;
if|if
condition|(
name|uncompressed
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|offset
operator|=
name|length
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
name|offset
operator|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|uncompressed
operator|.
name|length
argument_list|)
expr_stmt|;
name|length
operator|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|uncompressed
operator|.
name|length
operator|-
name|offset
argument_list|)
expr_stmt|;
block|}
specifier|final
name|byte
index|[]
name|restored
init|=
name|uncompress
argument_list|(
name|compressed
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|uncompressed
argument_list|,
name|offset
argument_list|,
name|offset
operator|+
name|length
argument_list|)
argument_list|,
name|restored
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testCopyCompressedData
specifier|public
name|void
name|testCopyCompressedData
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|byte
index|[]
name|uncompressed
init|=
name|randomArray
argument_list|()
decl_stmt|;
specifier|final
name|byte
index|[]
name|compressed
init|=
name|compress
argument_list|(
name|uncompressed
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|compressed
argument_list|,
name|copyCompressedData
argument_list|(
name|compressed
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|test
specifier|public
name|void
name|test
parameter_list|(
name|byte
index|[]
name|uncompressed
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|byte
index|[]
name|compressed
init|=
name|compress
argument_list|(
name|uncompressed
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|restored
init|=
name|uncompress
argument_list|(
name|compressed
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|uncompressed
operator|.
name|length
argument_list|,
name|restored
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|compressed
argument_list|,
name|copyCompressedData
argument_list|(
name|compressed
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testEmptySequence
specifier|public
name|void
name|testEmptySequence
parameter_list|()
throws|throws
name|IOException
block|{
name|test
argument_list|(
operator|new
name|byte
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
DECL|method|testShortSequence
specifier|public
name|void
name|testShortSequence
parameter_list|()
throws|throws
name|IOException
block|{
name|test
argument_list|(
operator|new
name|byte
index|[]
block|{
operator|(
name|byte
operator|)
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|256
argument_list|)
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|testIncompressible
specifier|public
name|void
name|testIncompressible
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|byte
index|[]
name|uncompressed
init|=
operator|new
name|byte
index|[
name|RandomInts
operator|.
name|randomIntBetween
argument_list|(
name|random
argument_list|()
argument_list|,
literal|20
argument_list|,
literal|256
argument_list|)
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|uncompressed
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|uncompressed
index|[
name|i
index|]
operator|=
operator|(
name|byte
operator|)
name|i
expr_stmt|;
block|}
name|test
argument_list|(
name|uncompressed
argument_list|)
expr_stmt|;
block|}
comment|// for LZ compression
DECL|method|testShortLiteralsAndMatchs
specifier|public
name|void
name|testShortLiteralsAndMatchs
parameter_list|()
throws|throws
name|IOException
block|{
comment|// literals and matchs lengths<= 15
specifier|final
name|byte
index|[]
name|uncompressed
init|=
literal|"1234562345673456745678910123"
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
decl_stmt|;
name|test
argument_list|(
name|uncompressed
argument_list|)
expr_stmt|;
block|}
DECL|method|testLongLiteralsAndMatchs
specifier|public
name|void
name|testLongLiteralsAndMatchs
parameter_list|()
throws|throws
name|IOException
block|{
comment|// literals and matchs length> 16
specifier|final
name|byte
index|[]
name|uncompressed
init|=
operator|new
name|byte
index|[
name|RandomInts
operator|.
name|randomIntBetween
argument_list|(
name|random
argument_list|()
argument_list|,
literal|300
argument_list|,
literal|1024
argument_list|)
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|uncompressed
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|uncompressed
index|[
name|i
index|]
operator|=
operator|(
name|byte
operator|)
name|i
expr_stmt|;
block|}
name|test
argument_list|(
name|uncompressed
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
