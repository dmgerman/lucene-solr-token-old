begin_unit
begin_package
DECL|package|org.apache.lucene.index
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NoSuchElementException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|DocValuesConsumer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|DataInput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|DataOutput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Counter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|PagedBytes
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|packed
operator|.
name|AppendingDeltaPackedLongBuffer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|packed
operator|.
name|PackedInts
import|;
end_import
begin_comment
comment|/** Buffers up pending byte[] per doc, then flushes when  *  segment flushes. */
end_comment
begin_class
DECL|class|BinaryDocValuesWriter
class|class
name|BinaryDocValuesWriter
extends|extends
name|DocValuesWriter
block|{
comment|/** Maximum length for a binary field; we set this to "a    *  bit" below Integer.MAX_VALUE because the exact max    *  allowed byte[] is JVM dependent, so we want to avoid    *  a case where a large value worked in one JVM but    *  failed later at search time with a different JVM.  */
DECL|field|MAX_LENGTH
specifier|private
specifier|static
specifier|final
name|int
name|MAX_LENGTH
init|=
name|Integer
operator|.
name|MAX_VALUE
operator|-
literal|256
decl_stmt|;
comment|// 32 KB block sizes for PagedBytes storage:
DECL|field|BLOCK_BITS
specifier|private
specifier|final
specifier|static
name|int
name|BLOCK_BITS
init|=
literal|15
decl_stmt|;
DECL|field|bytes
specifier|private
specifier|final
name|PagedBytes
name|bytes
decl_stmt|;
DECL|field|bytesOut
specifier|private
specifier|final
name|DataOutput
name|bytesOut
decl_stmt|;
DECL|field|iwBytesUsed
specifier|private
specifier|final
name|Counter
name|iwBytesUsed
decl_stmt|;
DECL|field|lengths
specifier|private
specifier|final
name|AppendingDeltaPackedLongBuffer
name|lengths
decl_stmt|;
DECL|field|fieldInfo
specifier|private
specifier|final
name|FieldInfo
name|fieldInfo
decl_stmt|;
DECL|field|addedValues
specifier|private
name|int
name|addedValues
decl_stmt|;
DECL|field|bytesUsed
specifier|private
name|long
name|bytesUsed
decl_stmt|;
DECL|method|BinaryDocValuesWriter
specifier|public
name|BinaryDocValuesWriter
parameter_list|(
name|FieldInfo
name|fieldInfo
parameter_list|,
name|Counter
name|iwBytesUsed
parameter_list|)
block|{
name|this
operator|.
name|fieldInfo
operator|=
name|fieldInfo
expr_stmt|;
name|this
operator|.
name|bytes
operator|=
operator|new
name|PagedBytes
argument_list|(
name|BLOCK_BITS
argument_list|)
expr_stmt|;
name|this
operator|.
name|bytesOut
operator|=
name|bytes
operator|.
name|getDataOutput
argument_list|()
expr_stmt|;
name|this
operator|.
name|lengths
operator|=
operator|new
name|AppendingDeltaPackedLongBuffer
argument_list|(
name|PackedInts
operator|.
name|COMPACT
argument_list|)
expr_stmt|;
name|this
operator|.
name|iwBytesUsed
operator|=
name|iwBytesUsed
expr_stmt|;
block|}
DECL|method|addValue
specifier|public
name|void
name|addValue
parameter_list|(
name|int
name|docID
parameter_list|,
name|BytesRef
name|value
parameter_list|)
block|{
if|if
condition|(
name|docID
operator|<
name|addedValues
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"DocValuesField \""
operator|+
name|fieldInfo
operator|.
name|name
operator|+
literal|"\" appears more than once in this document (only one value is allowed per field)"
argument_list|)
throw|;
block|}
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"field=\""
operator|+
name|fieldInfo
operator|.
name|name
operator|+
literal|"\": null value not allowed"
argument_list|)
throw|;
block|}
if|if
condition|(
name|value
operator|.
name|length
operator|>
name|MAX_LENGTH
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"DocValuesField \""
operator|+
name|fieldInfo
operator|.
name|name
operator|+
literal|"\" is too large, must be<= "
operator|+
name|MAX_LENGTH
argument_list|)
throw|;
block|}
comment|// Fill in any holes:
while|while
condition|(
name|addedValues
operator|<
name|docID
condition|)
block|{
name|addedValues
operator|++
expr_stmt|;
name|lengths
operator|.
name|add
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|addedValues
operator|++
expr_stmt|;
name|lengths
operator|.
name|add
argument_list|(
name|value
operator|.
name|length
argument_list|)
expr_stmt|;
try|try
block|{
name|bytesOut
operator|.
name|writeBytes
argument_list|(
name|value
operator|.
name|bytes
argument_list|,
name|value
operator|.
name|offset
argument_list|,
name|value
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
comment|// Should never happen!
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
name|updateBytesUsed
argument_list|()
expr_stmt|;
block|}
DECL|method|updateBytesUsed
specifier|private
name|void
name|updateBytesUsed
parameter_list|()
block|{
specifier|final
name|long
name|newBytesUsed
init|=
name|lengths
operator|.
name|ramBytesUsed
argument_list|()
operator|+
name|bytes
operator|.
name|ramBytesUsed
argument_list|()
decl_stmt|;
name|iwBytesUsed
operator|.
name|addAndGet
argument_list|(
name|newBytesUsed
operator|-
name|bytesUsed
argument_list|)
expr_stmt|;
name|bytesUsed
operator|=
name|newBytesUsed
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|finish
specifier|public
name|void
name|finish
parameter_list|(
name|int
name|maxDoc
parameter_list|)
block|{   }
annotation|@
name|Override
DECL|method|flush
specifier|public
name|void
name|flush
parameter_list|(
name|SegmentWriteState
name|state
parameter_list|,
name|DocValuesConsumer
name|dvConsumer
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|int
name|maxDoc
init|=
name|state
operator|.
name|segmentInfo
operator|.
name|getDocCount
argument_list|()
decl_stmt|;
name|bytes
operator|.
name|freeze
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|dvConsumer
operator|.
name|addBinaryField
argument_list|(
name|fieldInfo
argument_list|,
operator|new
name|Iterable
argument_list|<
name|BytesRef
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|BytesRef
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
operator|new
name|BytesIterator
argument_list|(
name|maxDoc
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|abort
specifier|public
name|void
name|abort
parameter_list|()
block|{   }
comment|// iterates over the values we have in ram
DECL|class|BytesIterator
specifier|private
class|class
name|BytesIterator
implements|implements
name|Iterator
argument_list|<
name|BytesRef
argument_list|>
block|{
DECL|field|value
specifier|final
name|BytesRef
name|value
init|=
operator|new
name|BytesRef
argument_list|()
decl_stmt|;
DECL|field|lengthsIterator
specifier|final
name|AppendingDeltaPackedLongBuffer
operator|.
name|Iterator
name|lengthsIterator
init|=
name|lengths
operator|.
name|iterator
argument_list|()
decl_stmt|;
DECL|field|bytesIterator
specifier|final
name|DataInput
name|bytesIterator
init|=
name|bytes
operator|.
name|getDataInput
argument_list|()
decl_stmt|;
DECL|field|size
specifier|final
name|int
name|size
init|=
operator|(
name|int
operator|)
name|lengths
operator|.
name|size
argument_list|()
decl_stmt|;
DECL|field|maxDoc
specifier|final
name|int
name|maxDoc
decl_stmt|;
DECL|field|upto
name|int
name|upto
decl_stmt|;
DECL|method|BytesIterator
name|BytesIterator
parameter_list|(
name|int
name|maxDoc
parameter_list|)
block|{
name|this
operator|.
name|maxDoc
operator|=
name|maxDoc
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|hasNext
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|upto
operator|<
name|maxDoc
return|;
block|}
annotation|@
name|Override
DECL|method|next
specifier|public
name|BytesRef
name|next
parameter_list|()
block|{
if|if
condition|(
operator|!
name|hasNext
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|NoSuchElementException
argument_list|()
throw|;
block|}
if|if
condition|(
name|upto
operator|<
name|size
condition|)
block|{
name|int
name|length
init|=
operator|(
name|int
operator|)
name|lengthsIterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|value
operator|.
name|grow
argument_list|(
name|length
argument_list|)
expr_stmt|;
name|value
operator|.
name|length
operator|=
name|length
expr_stmt|;
try|try
block|{
name|bytesIterator
operator|.
name|readBytes
argument_list|(
name|value
operator|.
name|bytes
argument_list|,
name|value
operator|.
name|offset
argument_list|,
name|value
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
comment|// Should never happen!
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
block|}
else|else
block|{
comment|// This is to handle last N documents not having
comment|// this DV field in the end of the segment:
name|value
operator|.
name|length
operator|=
literal|0
expr_stmt|;
block|}
name|upto
operator|++
expr_stmt|;
return|return
name|value
return|;
block|}
annotation|@
name|Override
DECL|method|remove
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
block|}
end_class
end_unit
