begin_unit
begin_package
DECL|package|org.apache.lucene.index
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriter
operator|.
name|IndexReaderWarmer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|InfoStream
import|;
end_import
begin_comment
comment|/**   * A very simple merged segment warmer that just ensures   * data structures are initialized.  */
end_comment
begin_class
DECL|class|SimpleMergedSegmentWarmer
specifier|public
class|class
name|SimpleMergedSegmentWarmer
extends|extends
name|IndexReaderWarmer
block|{
DECL|field|infoStream
specifier|private
specifier|final
name|InfoStream
name|infoStream
decl_stmt|;
comment|/**    * Creates a new SimpleMergedSegmentWarmer    * @param infoStream InfoStream to log statistics about warming.    */
DECL|method|SimpleMergedSegmentWarmer
specifier|public
name|SimpleMergedSegmentWarmer
parameter_list|(
name|InfoStream
name|infoStream
parameter_list|)
block|{
name|this
operator|.
name|infoStream
operator|=
name|infoStream
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|warm
specifier|public
name|void
name|warm
parameter_list|(
name|AtomicReader
name|reader
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|startTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|int
name|indexedCount
init|=
literal|0
decl_stmt|;
name|int
name|docValuesCount
init|=
literal|0
decl_stmt|;
name|int
name|normsCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|FieldInfo
name|info
range|:
name|reader
operator|.
name|getFieldInfos
argument_list|()
control|)
block|{
if|if
condition|(
name|info
operator|.
name|isIndexed
argument_list|()
condition|)
block|{
name|reader
operator|.
name|terms
argument_list|(
name|info
operator|.
name|name
argument_list|)
expr_stmt|;
name|indexedCount
operator|++
expr_stmt|;
if|if
condition|(
name|info
operator|.
name|hasNorms
argument_list|()
condition|)
block|{
name|reader
operator|.
name|getNormValues
argument_list|(
name|info
operator|.
name|name
argument_list|)
expr_stmt|;
name|normsCount
operator|++
expr_stmt|;
block|}
block|}
if|if
condition|(
name|info
operator|.
name|hasDocValues
argument_list|()
condition|)
block|{
switch|switch
condition|(
name|info
operator|.
name|getDocValuesType
argument_list|()
condition|)
block|{
case|case
name|NUMERIC
case|:
name|reader
operator|.
name|getNumericDocValues
argument_list|(
name|info
operator|.
name|name
argument_list|)
expr_stmt|;
break|break;
case|case
name|BINARY
case|:
name|reader
operator|.
name|getBinaryDocValues
argument_list|(
name|info
operator|.
name|name
argument_list|)
expr_stmt|;
break|break;
case|case
name|SORTED
case|:
name|reader
operator|.
name|getSortedDocValues
argument_list|(
name|info
operator|.
name|name
argument_list|)
expr_stmt|;
break|break;
case|case
name|SORTED_SET
case|:
name|reader
operator|.
name|getSortedSetDocValues
argument_list|(
name|info
operator|.
name|name
argument_list|)
expr_stmt|;
break|break;
default|default:
assert|assert
literal|false
assert|;
comment|// unknown dv type
block|}
name|docValuesCount
operator|++
expr_stmt|;
block|}
block|}
name|reader
operator|.
name|document
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|reader
operator|.
name|getTermVectors
argument_list|(
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|infoStream
operator|.
name|isEnabled
argument_list|(
literal|"SMSW"
argument_list|)
condition|)
block|{
name|infoStream
operator|.
name|message
argument_list|(
literal|"SMSW"
argument_list|,
literal|"Finished warming segment: "
operator|+
name|reader
operator|+
literal|", indexed="
operator|+
name|indexedCount
operator|+
literal|", docValues="
operator|+
name|docValuesCount
operator|+
literal|", norms="
operator|+
name|normsCount
operator|+
literal|", time="
operator|+
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|startTime
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class
end_unit
