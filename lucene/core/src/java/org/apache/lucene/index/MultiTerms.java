begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.index
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|automaton
operator|.
name|CompiledAutomaton
import|;
end_import
begin_comment
comment|/**  * Exposes flex API, merged from flex API of  * sub-segments.  *  * @lucene.experimental  */
end_comment
begin_class
DECL|class|MultiTerms
specifier|public
specifier|final
class|class
name|MultiTerms
extends|extends
name|Terms
block|{
DECL|field|subs
specifier|private
specifier|final
name|Terms
index|[]
name|subs
decl_stmt|;
DECL|field|subSlices
specifier|private
specifier|final
name|ReaderSlice
index|[]
name|subSlices
decl_stmt|;
DECL|field|hasFreqs
specifier|private
specifier|final
name|boolean
name|hasFreqs
decl_stmt|;
DECL|field|hasOffsets
specifier|private
specifier|final
name|boolean
name|hasOffsets
decl_stmt|;
DECL|field|hasPositions
specifier|private
specifier|final
name|boolean
name|hasPositions
decl_stmt|;
DECL|field|hasPayloads
specifier|private
specifier|final
name|boolean
name|hasPayloads
decl_stmt|;
comment|/** Sole constructor.    *    * @param subs The {@link Terms} instances of all sub-readers.     * @param subSlices A parallel array (matching {@code    *        subs}) describing the sub-reader slices.    */
DECL|method|MultiTerms
specifier|public
name|MultiTerms
parameter_list|(
name|Terms
index|[]
name|subs
parameter_list|,
name|ReaderSlice
index|[]
name|subSlices
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|subs
operator|=
name|subs
expr_stmt|;
name|this
operator|.
name|subSlices
operator|=
name|subSlices
expr_stmt|;
assert|assert
name|subs
operator|.
name|length
operator|>
literal|0
operator|:
literal|"inefficient: don't use MultiTerms over one sub"
assert|;
name|boolean
name|_hasFreqs
init|=
literal|true
decl_stmt|;
name|boolean
name|_hasOffsets
init|=
literal|true
decl_stmt|;
name|boolean
name|_hasPositions
init|=
literal|true
decl_stmt|;
name|boolean
name|_hasPayloads
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|subs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|_hasFreqs
operator|&=
name|subs
index|[
name|i
index|]
operator|.
name|hasFreqs
argument_list|()
expr_stmt|;
name|_hasOffsets
operator|&=
name|subs
index|[
name|i
index|]
operator|.
name|hasOffsets
argument_list|()
expr_stmt|;
name|_hasPositions
operator|&=
name|subs
index|[
name|i
index|]
operator|.
name|hasPositions
argument_list|()
expr_stmt|;
name|_hasPayloads
operator||=
name|subs
index|[
name|i
index|]
operator|.
name|hasPayloads
argument_list|()
expr_stmt|;
block|}
name|hasFreqs
operator|=
name|_hasFreqs
expr_stmt|;
name|hasOffsets
operator|=
name|_hasOffsets
expr_stmt|;
name|hasPositions
operator|=
name|_hasPositions
expr_stmt|;
name|hasPayloads
operator|=
name|hasPositions
operator|&&
name|_hasPayloads
expr_stmt|;
comment|// if all subs have pos, and at least one has payloads.
block|}
comment|/** Expert: returns the Terms being merged. */
DECL|method|getSubTerms
specifier|public
name|Terms
index|[]
name|getSubTerms
parameter_list|()
block|{
return|return
name|subs
return|;
block|}
comment|/** Expert: returns  pointers to the sub-readers corresponding to the Terms being merged. */
DECL|method|getSubSlices
specifier|public
name|ReaderSlice
index|[]
name|getSubSlices
parameter_list|()
block|{
return|return
name|subSlices
return|;
block|}
annotation|@
name|Override
DECL|method|intersect
specifier|public
name|TermsEnum
name|intersect
parameter_list|(
name|CompiledAutomaton
name|compiled
parameter_list|,
name|BytesRef
name|startTerm
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|List
argument_list|<
name|MultiTermsEnum
operator|.
name|TermsEnumIndex
argument_list|>
name|termsEnums
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|subs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|TermsEnum
name|termsEnum
init|=
name|subs
index|[
name|i
index|]
operator|.
name|intersect
argument_list|(
name|compiled
argument_list|,
name|startTerm
argument_list|)
decl_stmt|;
if|if
condition|(
name|termsEnum
operator|!=
literal|null
condition|)
block|{
name|termsEnums
operator|.
name|add
argument_list|(
operator|new
name|MultiTermsEnum
operator|.
name|TermsEnumIndex
argument_list|(
name|termsEnum
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|termsEnums
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
return|return
operator|new
name|MultiTermsEnum
argument_list|(
name|subSlices
argument_list|)
operator|.
name|reset
argument_list|(
name|termsEnums
operator|.
name|toArray
argument_list|(
name|MultiTermsEnum
operator|.
name|TermsEnumIndex
operator|.
name|EMPTY_ARRAY
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|TermsEnum
operator|.
name|EMPTY
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|getMin
specifier|public
name|BytesRef
name|getMin
parameter_list|()
throws|throws
name|IOException
block|{
name|BytesRef
name|minTerm
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Terms
name|terms
range|:
name|subs
control|)
block|{
name|BytesRef
name|term
init|=
name|terms
operator|.
name|getMin
argument_list|()
decl_stmt|;
if|if
condition|(
name|minTerm
operator|==
literal|null
operator|||
name|term
operator|.
name|compareTo
argument_list|(
name|minTerm
argument_list|)
operator|<
literal|0
condition|)
block|{
name|minTerm
operator|=
name|term
expr_stmt|;
block|}
block|}
return|return
name|minTerm
return|;
block|}
annotation|@
name|Override
DECL|method|getMax
specifier|public
name|BytesRef
name|getMax
parameter_list|()
throws|throws
name|IOException
block|{
name|BytesRef
name|maxTerm
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Terms
name|terms
range|:
name|subs
control|)
block|{
name|BytesRef
name|term
init|=
name|terms
operator|.
name|getMax
argument_list|()
decl_stmt|;
if|if
condition|(
name|maxTerm
operator|==
literal|null
operator|||
name|term
operator|.
name|compareTo
argument_list|(
name|maxTerm
argument_list|)
operator|>
literal|0
condition|)
block|{
name|maxTerm
operator|=
name|term
expr_stmt|;
block|}
block|}
return|return
name|maxTerm
return|;
block|}
annotation|@
name|Override
DECL|method|iterator
specifier|public
name|TermsEnum
name|iterator
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|List
argument_list|<
name|MultiTermsEnum
operator|.
name|TermsEnumIndex
argument_list|>
name|termsEnums
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|subs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|TermsEnum
name|termsEnum
init|=
name|subs
index|[
name|i
index|]
operator|.
name|iterator
argument_list|()
decl_stmt|;
if|if
condition|(
name|termsEnum
operator|!=
literal|null
condition|)
block|{
name|termsEnums
operator|.
name|add
argument_list|(
operator|new
name|MultiTermsEnum
operator|.
name|TermsEnumIndex
argument_list|(
name|termsEnum
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|termsEnums
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
return|return
operator|new
name|MultiTermsEnum
argument_list|(
name|subSlices
argument_list|)
operator|.
name|reset
argument_list|(
name|termsEnums
operator|.
name|toArray
argument_list|(
name|MultiTermsEnum
operator|.
name|TermsEnumIndex
operator|.
name|EMPTY_ARRAY
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|TermsEnum
operator|.
name|EMPTY
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|size
specifier|public
name|long
name|size
parameter_list|()
block|{
return|return
operator|-
literal|1
return|;
block|}
annotation|@
name|Override
DECL|method|getSumTotalTermFreq
specifier|public
name|long
name|getSumTotalTermFreq
parameter_list|()
throws|throws
name|IOException
block|{
name|long
name|sum
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Terms
name|terms
range|:
name|subs
control|)
block|{
specifier|final
name|long
name|v
init|=
name|terms
operator|.
name|getSumTotalTermFreq
argument_list|()
decl_stmt|;
if|if
condition|(
name|v
operator|==
operator|-
literal|1
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
name|sum
operator|+=
name|v
expr_stmt|;
block|}
return|return
name|sum
return|;
block|}
annotation|@
name|Override
DECL|method|getSumDocFreq
specifier|public
name|long
name|getSumDocFreq
parameter_list|()
throws|throws
name|IOException
block|{
name|long
name|sum
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Terms
name|terms
range|:
name|subs
control|)
block|{
specifier|final
name|long
name|v
init|=
name|terms
operator|.
name|getSumDocFreq
argument_list|()
decl_stmt|;
if|if
condition|(
name|v
operator|==
operator|-
literal|1
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
name|sum
operator|+=
name|v
expr_stmt|;
block|}
return|return
name|sum
return|;
block|}
annotation|@
name|Override
DECL|method|getDocCount
specifier|public
name|int
name|getDocCount
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|sum
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Terms
name|terms
range|:
name|subs
control|)
block|{
specifier|final
name|int
name|v
init|=
name|terms
operator|.
name|getDocCount
argument_list|()
decl_stmt|;
if|if
condition|(
name|v
operator|==
operator|-
literal|1
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
name|sum
operator|+=
name|v
expr_stmt|;
block|}
return|return
name|sum
return|;
block|}
annotation|@
name|Override
DECL|method|hasFreqs
specifier|public
name|boolean
name|hasFreqs
parameter_list|()
block|{
return|return
name|hasFreqs
return|;
block|}
annotation|@
name|Override
DECL|method|hasOffsets
specifier|public
name|boolean
name|hasOffsets
parameter_list|()
block|{
return|return
name|hasOffsets
return|;
block|}
annotation|@
name|Override
DECL|method|hasPositions
specifier|public
name|boolean
name|hasPositions
parameter_list|()
block|{
return|return
name|hasPositions
return|;
block|}
annotation|@
name|Override
DECL|method|hasPayloads
specifier|public
name|boolean
name|hasPayloads
parameter_list|()
block|{
return|return
name|hasPayloads
return|;
block|}
block|}
end_class
end_unit
