begin_unit
begin_package
DECL|package|org.apache.lucene.index
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Bits
import|;
end_import
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_comment
comment|/**  * Exposes a slice of an existing Bits as a new Bits.  *  * @lucene.internal  */
end_comment
begin_class
DECL|class|BitsSlice
specifier|final
class|class
name|BitsSlice
implements|implements
name|Bits
block|{
DECL|field|parent
specifier|private
specifier|final
name|Bits
name|parent
decl_stmt|;
DECL|field|start
specifier|private
specifier|final
name|int
name|start
decl_stmt|;
DECL|field|length
specifier|private
specifier|final
name|int
name|length
decl_stmt|;
comment|// start is inclusive; end is exclusive (length = end-start)
DECL|method|BitsSlice
specifier|public
name|BitsSlice
parameter_list|(
name|Bits
name|parent
parameter_list|,
name|ReaderSlice
name|slice
parameter_list|)
block|{
name|this
operator|.
name|parent
operator|=
name|parent
expr_stmt|;
name|this
operator|.
name|start
operator|=
name|slice
operator|.
name|start
expr_stmt|;
name|this
operator|.
name|length
operator|=
name|slice
operator|.
name|length
expr_stmt|;
assert|assert
name|length
operator|>=
literal|0
operator|:
literal|"length="
operator|+
name|length
assert|;
block|}
DECL|method|get
specifier|public
name|boolean
name|get
parameter_list|(
name|int
name|doc
parameter_list|)
block|{
if|if
condition|(
name|doc
operator|>=
name|length
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"doc "
operator|+
name|doc
operator|+
literal|" is out of bounds 0 .. "
operator|+
operator|(
name|length
operator|-
literal|1
operator|)
argument_list|)
throw|;
block|}
assert|assert
name|doc
operator|<
name|length
operator|:
literal|"doc="
operator|+
name|doc
operator|+
literal|" length="
operator|+
name|length
assert|;
return|return
name|parent
operator|.
name|get
argument_list|(
name|doc
operator|+
name|start
argument_list|)
return|;
block|}
DECL|method|length
specifier|public
name|int
name|length
parameter_list|()
block|{
return|return
name|length
return|;
block|}
block|}
end_class
end_unit
