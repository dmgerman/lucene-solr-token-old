begin_unit
begin_package
DECL|package|org.apache.lucene.index
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Bits
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|FilterAtomicReader
operator|.
name|FilterFields
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|FilterAtomicReader
operator|.
name|FilterTerms
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|FilterAtomicReader
operator|.
name|FilterTermsEnum
import|;
end_import
begin_comment
comment|/** A {@link Fields} implementation that merges multiple  *  Fields into one, and maps around deleted documents.  *  This is used for merging. */
end_comment
begin_class
DECL|class|MappedMultiFields
class|class
name|MappedMultiFields
extends|extends
name|FilterFields
block|{
DECL|field|mergeState
specifier|final
name|MergeState
name|mergeState
decl_stmt|;
DECL|method|MappedMultiFields
specifier|public
name|MappedMultiFields
parameter_list|(
name|MergeState
name|mergeState
parameter_list|,
name|MultiFields
name|multiFields
parameter_list|)
block|{
name|super
argument_list|(
name|multiFields
argument_list|)
expr_stmt|;
name|this
operator|.
name|mergeState
operator|=
name|mergeState
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|terms
specifier|public
name|Terms
name|terms
parameter_list|(
name|String
name|field
parameter_list|)
throws|throws
name|IOException
block|{
name|MultiTerms
name|terms
init|=
operator|(
name|MultiTerms
operator|)
name|in
operator|.
name|terms
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|terms
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
operator|new
name|MappedMultiTerms
argument_list|(
name|mergeState
argument_list|,
name|terms
argument_list|)
return|;
block|}
block|}
DECL|class|MappedMultiTerms
specifier|private
specifier|static
class|class
name|MappedMultiTerms
extends|extends
name|FilterTerms
block|{
DECL|field|mergeState
specifier|final
name|MergeState
name|mergeState
decl_stmt|;
DECL|method|MappedMultiTerms
specifier|public
name|MappedMultiTerms
parameter_list|(
name|MergeState
name|mergeState
parameter_list|,
name|MultiTerms
name|multiTerms
parameter_list|)
block|{
name|super
argument_list|(
name|multiTerms
argument_list|)
expr_stmt|;
name|this
operator|.
name|mergeState
operator|=
name|mergeState
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|iterator
specifier|public
name|TermsEnum
name|iterator
parameter_list|(
name|TermsEnum
name|reuse
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|MappedMultiTermsEnum
argument_list|(
name|mergeState
argument_list|,
operator|(
name|MultiTermsEnum
operator|)
name|in
operator|.
name|iterator
argument_list|(
name|reuse
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|size
specifier|public
name|long
name|size
parameter_list|()
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|getSumTotalTermFreq
specifier|public
name|long
name|getSumTotalTermFreq
parameter_list|()
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|getSumDocFreq
specifier|public
name|long
name|getSumDocFreq
parameter_list|()
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|getDocCount
specifier|public
name|int
name|getDocCount
parameter_list|()
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
DECL|class|MappedMultiTermsEnum
specifier|private
specifier|static
class|class
name|MappedMultiTermsEnum
extends|extends
name|FilterTermsEnum
block|{
DECL|field|mergeState
specifier|final
name|MergeState
name|mergeState
decl_stmt|;
DECL|method|MappedMultiTermsEnum
specifier|public
name|MappedMultiTermsEnum
parameter_list|(
name|MergeState
name|mergeState
parameter_list|,
name|MultiTermsEnum
name|multiTermsEnum
parameter_list|)
block|{
name|super
argument_list|(
name|multiTermsEnum
argument_list|)
expr_stmt|;
name|this
operator|.
name|mergeState
operator|=
name|mergeState
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|docFreq
specifier|public
name|int
name|docFreq
parameter_list|()
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|totalTermFreq
specifier|public
name|long
name|totalTermFreq
parameter_list|()
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|docs
specifier|public
name|DocsEnum
name|docs
parameter_list|(
name|Bits
name|liveDocs
parameter_list|,
name|DocsEnum
name|reuse
parameter_list|,
name|int
name|flags
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|liveDocs
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"liveDocs must be null"
argument_list|)
throw|;
block|}
name|MappingMultiDocsEnum
name|mappingDocsEnum
decl_stmt|;
if|if
condition|(
name|reuse
operator|instanceof
name|MappingMultiDocsEnum
condition|)
block|{
name|mappingDocsEnum
operator|=
operator|(
name|MappingMultiDocsEnum
operator|)
name|reuse
expr_stmt|;
block|}
else|else
block|{
name|mappingDocsEnum
operator|=
operator|new
name|MappingMultiDocsEnum
argument_list|(
name|mergeState
argument_list|)
expr_stmt|;
block|}
name|MultiDocsEnum
name|docsEnum
init|=
operator|(
name|MultiDocsEnum
operator|)
name|in
operator|.
name|docs
argument_list|(
name|liveDocs
argument_list|,
name|mappingDocsEnum
operator|.
name|multiDocsEnum
argument_list|,
name|flags
argument_list|)
decl_stmt|;
name|mappingDocsEnum
operator|.
name|reset
argument_list|(
name|docsEnum
argument_list|)
expr_stmt|;
return|return
name|mappingDocsEnum
return|;
block|}
annotation|@
name|Override
DECL|method|docsAndPositions
specifier|public
name|DocsAndPositionsEnum
name|docsAndPositions
parameter_list|(
name|Bits
name|liveDocs
parameter_list|,
name|DocsAndPositionsEnum
name|reuse
parameter_list|,
name|int
name|flags
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|liveDocs
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"liveDocs must be null"
argument_list|)
throw|;
block|}
name|MappingMultiDocsAndPositionsEnum
name|mappingDocsAndPositionsEnum
decl_stmt|;
if|if
condition|(
name|reuse
operator|instanceof
name|MappingMultiDocsAndPositionsEnum
condition|)
block|{
name|mappingDocsAndPositionsEnum
operator|=
operator|(
name|MappingMultiDocsAndPositionsEnum
operator|)
name|reuse
expr_stmt|;
block|}
else|else
block|{
name|mappingDocsAndPositionsEnum
operator|=
operator|new
name|MappingMultiDocsAndPositionsEnum
argument_list|(
name|mergeState
argument_list|)
expr_stmt|;
block|}
name|MultiDocsAndPositionsEnum
name|docsAndPositionsEnum
init|=
operator|(
name|MultiDocsAndPositionsEnum
operator|)
name|in
operator|.
name|docsAndPositions
argument_list|(
name|liveDocs
argument_list|,
name|mappingDocsAndPositionsEnum
operator|.
name|multiDocsAndPositionsEnum
argument_list|,
name|flags
argument_list|)
decl_stmt|;
name|mappingDocsAndPositionsEnum
operator|.
name|reset
argument_list|(
name|docsAndPositionsEnum
argument_list|)
expr_stmt|;
return|return
name|mappingDocsAndPositionsEnum
return|;
block|}
block|}
block|}
end_class
end_unit
