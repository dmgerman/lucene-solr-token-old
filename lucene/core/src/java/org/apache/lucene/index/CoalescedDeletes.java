begin_unit
begin_package
DECL|package|org.apache.lucene.index
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|PriorityQueue
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|BufferedDeletesStream
operator|.
name|QueryAndLimit
import|;
end_import
begin_class
DECL|class|CoalescedDeletes
class|class
name|CoalescedDeletes
block|{
DECL|field|queries
specifier|final
name|Map
argument_list|<
name|Query
argument_list|,
name|Integer
argument_list|>
name|queries
init|=
operator|new
name|HashMap
argument_list|<
name|Query
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|iterables
specifier|final
name|List
argument_list|<
name|Iterable
argument_list|<
name|Term
argument_list|>
argument_list|>
name|iterables
init|=
operator|new
name|ArrayList
argument_list|<
name|Iterable
argument_list|<
name|Term
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
comment|// note: we could add/collect more debugging information
return|return
literal|"CoalescedDeletes(termSets="
operator|+
name|iterables
operator|.
name|size
argument_list|()
operator|+
literal|",queries="
operator|+
name|queries
operator|.
name|size
argument_list|()
operator|+
literal|")"
return|;
block|}
DECL|method|update
name|void
name|update
parameter_list|(
name|FrozenBufferedDeletes
name|in
parameter_list|)
block|{
name|iterables
operator|.
name|add
argument_list|(
name|in
operator|.
name|termsIterable
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|queryIdx
init|=
literal|0
init|;
name|queryIdx
operator|<
name|in
operator|.
name|queries
operator|.
name|length
condition|;
name|queryIdx
operator|++
control|)
block|{
specifier|final
name|Query
name|query
init|=
name|in
operator|.
name|queries
index|[
name|queryIdx
index|]
decl_stmt|;
name|queries
operator|.
name|put
argument_list|(
name|query
argument_list|,
name|BufferedDeletes
operator|.
name|MAX_INT
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|termsIterable
specifier|public
name|Iterable
argument_list|<
name|Term
argument_list|>
name|termsIterable
parameter_list|()
block|{
return|return
operator|new
name|Iterable
argument_list|<
name|Term
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|Term
argument_list|>
name|iterator
parameter_list|()
block|{
name|ArrayList
argument_list|<
name|Iterator
argument_list|<
name|Term
argument_list|>
argument_list|>
name|subs
init|=
operator|new
name|ArrayList
argument_list|<
name|Iterator
argument_list|<
name|Term
argument_list|>
argument_list|>
argument_list|(
name|iterables
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterable
argument_list|<
name|Term
argument_list|>
name|iterable
range|:
name|iterables
control|)
block|{
name|subs
operator|.
name|add
argument_list|(
name|iterable
operator|.
name|iterator
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|mergedIterator
argument_list|(
name|subs
argument_list|)
return|;
block|}
block|}
return|;
block|}
DECL|method|queriesIterable
specifier|public
name|Iterable
argument_list|<
name|QueryAndLimit
argument_list|>
name|queriesIterable
parameter_list|()
block|{
return|return
operator|new
name|Iterable
argument_list|<
name|QueryAndLimit
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|QueryAndLimit
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
operator|new
name|Iterator
argument_list|<
name|QueryAndLimit
argument_list|>
argument_list|()
block|{
specifier|private
specifier|final
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|Query
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|iter
init|=
name|queries
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|iter
operator|.
name|hasNext
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|QueryAndLimit
name|next
parameter_list|()
block|{
specifier|final
name|Map
operator|.
name|Entry
argument_list|<
name|Query
argument_list|,
name|Integer
argument_list|>
name|ent
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
return|return
operator|new
name|QueryAndLimit
argument_list|(
name|ent
operator|.
name|getKey
argument_list|()
argument_list|,
name|ent
operator|.
name|getValue
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
return|;
block|}
block|}
return|;
block|}
comment|/** provides a merged view across multiple iterators */
DECL|method|mergedIterator
specifier|static
name|Iterator
argument_list|<
name|Term
argument_list|>
name|mergedIterator
parameter_list|(
specifier|final
name|List
argument_list|<
name|Iterator
argument_list|<
name|Term
argument_list|>
argument_list|>
name|iterators
parameter_list|)
block|{
return|return
operator|new
name|Iterator
argument_list|<
name|Term
argument_list|>
argument_list|()
block|{
name|Term
name|current
decl_stmt|;
name|TermMergeQueue
name|queue
init|=
operator|new
name|TermMergeQueue
argument_list|(
name|iterators
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|SubIterator
index|[]
name|top
init|=
operator|new
name|SubIterator
index|[
name|iterators
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|numTop
decl_stmt|;
block|{
name|int
name|index
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Term
argument_list|>
name|iterator
range|:
name|iterators
control|)
block|{
if|if
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|SubIterator
name|sub
init|=
operator|new
name|SubIterator
argument_list|()
decl_stmt|;
name|sub
operator|.
name|current
operator|=
name|iterator
operator|.
name|next
argument_list|()
expr_stmt|;
name|sub
operator|.
name|iterator
operator|=
name|iterator
expr_stmt|;
name|sub
operator|.
name|index
operator|=
name|index
operator|++
expr_stmt|;
name|queue
operator|.
name|add
argument_list|(
name|sub
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
if|if
condition|(
name|queue
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
return|return
literal|true
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numTop
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|top
index|[
name|i
index|]
operator|.
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|Term
name|next
parameter_list|()
block|{
comment|// restore queue
name|pushTop
argument_list|()
expr_stmt|;
comment|// gather equal top fields
if|if
condition|(
name|queue
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|pullTop
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|current
operator|=
literal|null
expr_stmt|;
block|}
return|return
name|current
return|;
block|}
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
specifier|private
name|void
name|pullTop
parameter_list|()
block|{
comment|// extract all subs from the queue that have the same top term
assert|assert
name|numTop
operator|==
literal|0
assert|;
while|while
condition|(
literal|true
condition|)
block|{
name|top
index|[
name|numTop
operator|++
index|]
operator|=
name|queue
operator|.
name|pop
argument_list|()
expr_stmt|;
if|if
condition|(
name|queue
operator|.
name|size
argument_list|()
operator|==
literal|0
operator|||
operator|!
operator|(
name|queue
operator|.
name|top
argument_list|()
operator|)
operator|.
name|current
operator|.
name|equals
argument_list|(
name|top
index|[
literal|0
index|]
operator|.
name|current
argument_list|)
condition|)
block|{
break|break;
block|}
block|}
name|current
operator|=
name|top
index|[
literal|0
index|]
operator|.
name|current
expr_stmt|;
block|}
specifier|private
name|void
name|pushTop
parameter_list|()
block|{
comment|// call next() on each top, and put back into queue
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numTop
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|top
index|[
name|i
index|]
operator|.
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|top
index|[
name|i
index|]
operator|.
name|current
operator|=
name|top
index|[
name|i
index|]
operator|.
name|iterator
operator|.
name|next
argument_list|()
expr_stmt|;
name|queue
operator|.
name|add
argument_list|(
name|top
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// no more terms
name|top
index|[
name|i
index|]
operator|.
name|current
operator|=
literal|null
expr_stmt|;
block|}
block|}
name|numTop
operator|=
literal|0
expr_stmt|;
block|}
block|}
return|;
block|}
DECL|class|SubIterator
specifier|private
specifier|static
class|class
name|SubIterator
block|{
DECL|field|iterator
name|Iterator
argument_list|<
name|Term
argument_list|>
name|iterator
decl_stmt|;
DECL|field|current
name|Term
name|current
decl_stmt|;
DECL|field|index
name|int
name|index
decl_stmt|;
block|}
DECL|class|TermMergeQueue
specifier|private
specifier|static
class|class
name|TermMergeQueue
extends|extends
name|PriorityQueue
argument_list|<
name|SubIterator
argument_list|>
block|{
DECL|method|TermMergeQueue
name|TermMergeQueue
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|super
argument_list|(
name|size
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|lessThan
specifier|protected
name|boolean
name|lessThan
parameter_list|(
name|SubIterator
name|a
parameter_list|,
name|SubIterator
name|b
parameter_list|)
block|{
specifier|final
name|int
name|cmp
init|=
name|a
operator|.
name|current
operator|.
name|compareTo
argument_list|(
name|b
operator|.
name|current
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
block|{
return|return
name|cmp
operator|<
literal|0
return|;
block|}
else|else
block|{
return|return
name|a
operator|.
name|index
operator|<
name|b
operator|.
name|index
return|;
block|}
block|}
block|}
block|}
end_class
end_unit
