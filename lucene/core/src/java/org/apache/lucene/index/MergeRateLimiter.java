begin_unit
begin_package
DECL|package|org.apache.lucene.index
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|RateLimiter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|ThreadInterruptedException
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|RateLimiter
operator|.
name|SimpleRateLimiter
import|;
end_import
begin_comment
comment|/** This is the {@link RateLimiter} that {@link IndexWriter} assigns to each running merge, to   *  give {@link MergeScheduler}s ionice like control.  *  *  This is similar to {@link SimpleRateLimiter}, except it's merge-private,  *  it will wake up if its rate changes while it's paused, it tracks how  *  much time it spent stopped and paused, and it supports aborting.  *  *  @lucene.internal */
end_comment
begin_class
DECL|class|MergeRateLimiter
specifier|public
class|class
name|MergeRateLimiter
extends|extends
name|RateLimiter
block|{
DECL|field|MIN_PAUSE_CHECK_MSEC
specifier|private
specifier|final
specifier|static
name|int
name|MIN_PAUSE_CHECK_MSEC
init|=
literal|25
decl_stmt|;
DECL|field|totalBytesWritten
specifier|volatile
name|long
name|totalBytesWritten
decl_stmt|;
comment|// By default no IO limit:
DECL|field|mbPerSec
name|double
name|mbPerSec
init|=
name|Double
operator|.
name|POSITIVE_INFINITY
decl_stmt|;
DECL|field|lastNS
specifier|private
name|long
name|lastNS
decl_stmt|;
DECL|field|minPauseCheckBytes
specifier|private
name|long
name|minPauseCheckBytes
decl_stmt|;
DECL|field|abort
specifier|private
name|boolean
name|abort
decl_stmt|;
DECL|field|totalPausedNS
name|long
name|totalPausedNS
decl_stmt|;
DECL|field|totalStoppedNS
name|long
name|totalStoppedNS
decl_stmt|;
DECL|field|merge
specifier|final
name|MergePolicy
operator|.
name|OneMerge
name|merge
decl_stmt|;
comment|/** Returned by {@link #maybePause}. */
DECL|enum|PauseResult
DECL|enum constant|NO
DECL|enum constant|STOPPED
DECL|enum constant|PAUSED
specifier|private
specifier|static
enum|enum
name|PauseResult
block|{
name|NO
block|,
name|STOPPED
block|,
name|PAUSED
block|}
empty_stmt|;
comment|/** Sole constructor. */
DECL|method|MergeRateLimiter
specifier|public
name|MergeRateLimiter
parameter_list|(
name|MergePolicy
operator|.
name|OneMerge
name|merge
parameter_list|)
block|{
name|this
operator|.
name|merge
operator|=
name|merge
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setMBPerSec
specifier|public
specifier|synchronized
name|void
name|setMBPerSec
parameter_list|(
name|double
name|mbPerSec
parameter_list|)
block|{
comment|// 0.0 is allowed: it means the merge is paused
if|if
condition|(
name|mbPerSec
operator|<
literal|0.0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"mbPerSec must be positive; got: "
operator|+
name|mbPerSec
argument_list|)
throw|;
block|}
name|this
operator|.
name|mbPerSec
operator|=
name|mbPerSec
expr_stmt|;
comment|// NOTE: Double.POSITIVE_INFINITY casts to Long.MAX_VALUE
name|minPauseCheckBytes
operator|=
name|Math
operator|.
name|min
argument_list|(
literal|1024
operator|*
literal|1024
argument_list|,
call|(
name|long
call|)
argument_list|(
operator|(
name|MIN_PAUSE_CHECK_MSEC
operator|/
literal|1000.0
operator|)
operator|*
name|mbPerSec
operator|*
literal|1024
operator|*
literal|1024
argument_list|)
argument_list|)
expr_stmt|;
assert|assert
name|minPauseCheckBytes
operator|>=
literal|0
assert|;
name|notify
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getMBPerSec
specifier|public
specifier|synchronized
name|double
name|getMBPerSec
parameter_list|()
block|{
return|return
name|mbPerSec
return|;
block|}
comment|/** Returns total bytes written by this merge. */
DECL|method|getTotalBytesWritten
specifier|public
name|long
name|getTotalBytesWritten
parameter_list|()
block|{
return|return
name|totalBytesWritten
return|;
block|}
annotation|@
name|Override
DECL|method|pause
specifier|public
name|long
name|pause
parameter_list|(
name|long
name|bytes
parameter_list|)
throws|throws
name|MergePolicy
operator|.
name|MergeAbortedException
block|{
name|totalBytesWritten
operator|+=
name|bytes
expr_stmt|;
name|long
name|startNS
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
name|long
name|curNS
init|=
name|startNS
decl_stmt|;
comment|// While loop because 1) Thread.wait doesn't always sleep long
comment|// enough, and 2) we wake up and check again when our rate limit
comment|// is changed while we were pausing:
name|long
name|pausedNS
init|=
literal|0
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|PauseResult
name|result
init|=
name|maybePause
argument_list|(
name|bytes
argument_list|,
name|curNS
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|==
name|PauseResult
operator|.
name|NO
condition|)
block|{
comment|// Set to curNS, not targetNS, to enforce the instant rate, not
comment|// the "averaaged over all history" rate:
name|lastNS
operator|=
name|curNS
expr_stmt|;
break|break;
block|}
name|curNS
operator|=
name|System
operator|.
name|nanoTime
argument_list|()
expr_stmt|;
name|long
name|ns
init|=
name|curNS
operator|-
name|startNS
decl_stmt|;
name|startNS
operator|=
name|curNS
expr_stmt|;
comment|// Separately track when merge was stopped vs rate limited:
if|if
condition|(
name|result
operator|==
name|PauseResult
operator|.
name|STOPPED
condition|)
block|{
name|totalStoppedNS
operator|+=
name|ns
expr_stmt|;
block|}
else|else
block|{
assert|assert
name|result
operator|==
name|PauseResult
operator|.
name|PAUSED
assert|;
name|totalPausedNS
operator|+=
name|ns
expr_stmt|;
block|}
name|pausedNS
operator|+=
name|ns
expr_stmt|;
block|}
return|return
name|pausedNS
return|;
block|}
comment|/** Total NS merge was stopped. */
DECL|method|getTotalStoppedNS
specifier|public
specifier|synchronized
name|long
name|getTotalStoppedNS
parameter_list|()
block|{
return|return
name|totalStoppedNS
return|;
block|}
comment|/** Total NS merge was paused to rate limit IO. */
DECL|method|getTotalPausedNS
specifier|public
specifier|synchronized
name|long
name|getTotalPausedNS
parameter_list|()
block|{
return|return
name|totalPausedNS
return|;
block|}
comment|/** Returns NO if no pause happened, STOPPED if pause because rate was 0.0 (merge is stopped), PAUSED if paused with a normal rate limit. */
DECL|method|maybePause
specifier|private
specifier|synchronized
name|PauseResult
name|maybePause
parameter_list|(
name|long
name|bytes
parameter_list|,
name|long
name|curNS
parameter_list|)
throws|throws
name|MergePolicy
operator|.
name|MergeAbortedException
block|{
comment|// Now is a good time to abort the merge:
name|checkAbort
argument_list|()
expr_stmt|;
name|double
name|secondsToPause
init|=
operator|(
name|bytes
operator|/
literal|1024.
operator|/
literal|1024.
operator|)
operator|/
name|mbPerSec
decl_stmt|;
comment|// Time we should sleep until; this is purely instantaneous
comment|// rate (just adds seconds onto the last time we had paused to);
comment|// maybe we should also offer decayed recent history one?
name|long
name|targetNS
init|=
name|lastNS
operator|+
call|(
name|long
call|)
argument_list|(
literal|1000000000
operator|*
name|secondsToPause
argument_list|)
decl_stmt|;
name|long
name|curPauseNS
init|=
name|targetNS
operator|-
name|curNS
decl_stmt|;
comment|// NOTE: except maybe on real-time JVMs, minimum realistic
comment|// wait/sleep time is 1 msec; if you pass just 1 nsec the impl
comment|// rounds up to 1 msec, so we don't bother unless it's> 2 msec:
if|if
condition|(
name|curPauseNS
operator|<=
literal|2000000
condition|)
block|{
return|return
name|PauseResult
operator|.
name|NO
return|;
block|}
comment|// Defensive: sleep for at most 250 msec; the loop above will call us again if we should keep sleeping:
if|if
condition|(
name|curPauseNS
operator|>
literal|250L
operator|*
literal|1000000
condition|)
block|{
name|curPauseNS
operator|=
literal|250L
operator|*
literal|1000000
expr_stmt|;
block|}
name|int
name|sleepMS
init|=
call|(
name|int
call|)
argument_list|(
name|curPauseNS
operator|/
literal|1000000
argument_list|)
decl_stmt|;
name|int
name|sleepNS
init|=
call|(
name|int
call|)
argument_list|(
name|curPauseNS
operator|%
literal|1000000
argument_list|)
decl_stmt|;
name|double
name|rate
init|=
name|mbPerSec
decl_stmt|;
try|try
block|{
comment|// CMS can wake us up here if it changes our target rate:
name|wait
argument_list|(
name|sleepMS
argument_list|,
name|sleepNS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
throw|throw
operator|new
name|ThreadInterruptedException
argument_list|(
name|ie
argument_list|)
throw|;
block|}
if|if
condition|(
name|rate
operator|==
literal|0.0
condition|)
block|{
return|return
name|PauseResult
operator|.
name|STOPPED
return|;
block|}
else|else
block|{
return|return
name|PauseResult
operator|.
name|PAUSED
return|;
block|}
block|}
comment|/** Throws {@link MergePolicy.MergeAbortedException} if this merge was aborted. */
DECL|method|checkAbort
specifier|public
specifier|synchronized
name|void
name|checkAbort
parameter_list|()
throws|throws
name|MergePolicy
operator|.
name|MergeAbortedException
block|{
if|if
condition|(
name|abort
condition|)
block|{
throw|throw
operator|new
name|MergePolicy
operator|.
name|MergeAbortedException
argument_list|(
literal|"merge is aborted: "
operator|+
name|merge
operator|.
name|segString
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/** Mark this merge aborted. */
DECL|method|setAbort
specifier|public
specifier|synchronized
name|void
name|setAbort
parameter_list|()
block|{
name|abort
operator|=
literal|true
expr_stmt|;
name|notify
argument_list|()
expr_stmt|;
block|}
comment|/** Returns true if this merge was aborted. */
DECL|method|getAbort
specifier|public
specifier|synchronized
name|boolean
name|getAbort
parameter_list|()
block|{
return|return
name|abort
return|;
block|}
annotation|@
name|Override
DECL|method|getMinPauseCheckBytes
specifier|public
name|long
name|getMinPauseCheckBytes
parameter_list|()
block|{
return|return
name|minPauseCheckBytes
return|;
block|}
block|}
end_class
end_unit
