begin_unit
begin_package
DECL|package|org.apache.lucene.index
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|MultiTermQuery
import|;
end_import
begin_comment
comment|// javadocs
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_comment
comment|/**  * Subclass of FilteredTermsEnum for enumerating a single term.  *<p>  * For example, this can be used by {@link MultiTermQuery}s  * that need only visit one term, but want to preserve  * MultiTermQuery semantics such as {@link  * MultiTermQuery#getRewriteMethod}.  */
end_comment
begin_class
DECL|class|SingleTermsEnum
specifier|public
specifier|final
class|class
name|SingleTermsEnum
extends|extends
name|FilteredTermsEnum
block|{
DECL|field|singleRef
specifier|private
specifier|final
name|BytesRef
name|singleRef
decl_stmt|;
comment|/**    * Creates a new<code>SingleTermsEnum</code>.    *<p>    * After calling the constructor the enumeration is already pointing to the term,    * if it exists.    */
DECL|method|SingleTermsEnum
specifier|public
name|SingleTermsEnum
parameter_list|(
name|TermsEnum
name|tenum
parameter_list|,
name|BytesRef
name|termText
parameter_list|)
block|{
name|super
argument_list|(
name|tenum
argument_list|)
expr_stmt|;
name|singleRef
operator|=
name|termText
expr_stmt|;
name|setInitialSeekTerm
argument_list|(
name|termText
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|protected
name|AcceptStatus
name|accept
parameter_list|(
name|BytesRef
name|term
parameter_list|)
block|{
return|return
name|term
operator|.
name|equals
argument_list|(
name|singleRef
argument_list|)
condition|?
name|AcceptStatus
operator|.
name|YES
else|:
name|AcceptStatus
operator|.
name|END
return|;
block|}
block|}
end_class
end_unit
