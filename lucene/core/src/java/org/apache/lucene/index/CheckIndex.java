begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.index
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import
begin_import
import|import
name|java
operator|.
name|text
operator|.
name|NumberFormat
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Deque
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|Codec
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|PointReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|DocValuesProducer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|NormsProducer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|PostingsFormat
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|StoredFieldsReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|TermVectorsReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|DocumentStoredFieldVisitor
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|CheckIndex
operator|.
name|Status
operator|.
name|DocValuesStatus
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|DocIdSetIterator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|AlreadyClosedException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|FSDirectory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IOContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexInput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Lock
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Accountables
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Bits
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRefBuilder
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|CommandLineUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|FixedBitSet
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LongBitSet
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|StringHelper
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|SuppressForbidden
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Version
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|automaton
operator|.
name|Automata
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|automaton
operator|.
name|CompiledAutomaton
import|;
end_import
begin_comment
comment|/**  * Basic tool and API to check the health of an index and  * write a new segments file that removes reference to  * problematic segments.  *   *<p>As this tool checks every byte in the index, on a large  * index it can take quite a long time to run.  *  * @lucene.experimental Please make a complete backup of your  * index before using this to exorcise corrupted documents from your index!  */
end_comment
begin_class
DECL|class|CheckIndex
specifier|public
specifier|final
class|class
name|CheckIndex
implements|implements
name|Closeable
block|{
DECL|field|infoStream
specifier|private
name|PrintStream
name|infoStream
decl_stmt|;
DECL|field|dir
specifier|private
name|Directory
name|dir
decl_stmt|;
DECL|field|writeLock
specifier|private
name|Lock
name|writeLock
decl_stmt|;
DECL|field|closed
specifier|private
specifier|volatile
name|boolean
name|closed
decl_stmt|;
comment|/**    * Returned from {@link #checkIndex()} detailing the health and status of the index.    *    * @lucene.experimental    **/
DECL|class|Status
specifier|public
specifier|static
class|class
name|Status
block|{
DECL|method|Status
name|Status
parameter_list|()
block|{     }
comment|/** True if no problems were found with the index. */
DECL|field|clean
specifier|public
name|boolean
name|clean
decl_stmt|;
comment|/** True if we were unable to locate and load the segments_N file. */
DECL|field|missingSegments
specifier|public
name|boolean
name|missingSegments
decl_stmt|;
comment|/** True if we were unable to open the segments_N file. */
DECL|field|cantOpenSegments
specifier|public
name|boolean
name|cantOpenSegments
decl_stmt|;
comment|/** True if we were unable to read the version number from segments_N file. */
DECL|field|missingSegmentVersion
specifier|public
name|boolean
name|missingSegmentVersion
decl_stmt|;
comment|/** Name of latest segments_N file in the index. */
DECL|field|segmentsFileName
specifier|public
name|String
name|segmentsFileName
decl_stmt|;
comment|/** Number of segments in the index. */
DECL|field|numSegments
specifier|public
name|int
name|numSegments
decl_stmt|;
comment|/** Empty unless you passed specific segments list to check as optional 3rd argument.      *  @see CheckIndex#checkIndex(List) */
DECL|field|segmentsChecked
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|segmentsChecked
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|/** True if the index was created with a newer version of Lucene than the CheckIndex tool. */
DECL|field|toolOutOfDate
specifier|public
name|boolean
name|toolOutOfDate
decl_stmt|;
comment|/** List of {@link SegmentInfoStatus} instances, detailing status of each segment. */
DECL|field|segmentInfos
specifier|public
name|List
argument_list|<
name|SegmentInfoStatus
argument_list|>
name|segmentInfos
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|/** Directory index is in. */
DECL|field|dir
specifier|public
name|Directory
name|dir
decl_stmt|;
comment|/**       * SegmentInfos instance containing only segments that      * had no problems (this is used with the {@link CheckIndex#exorciseIndex}       * method to repair the index.       */
DECL|field|newSegments
name|SegmentInfos
name|newSegments
decl_stmt|;
comment|/** How many documents will be lost to bad segments. */
DECL|field|totLoseDocCount
specifier|public
name|int
name|totLoseDocCount
decl_stmt|;
comment|/** How many bad segments were found. */
DECL|field|numBadSegments
specifier|public
name|int
name|numBadSegments
decl_stmt|;
comment|/** True if we checked only specific segments ({@link      * #checkIndex(List)}) was called with non-null      * argument). */
DECL|field|partial
specifier|public
name|boolean
name|partial
decl_stmt|;
comment|/** The greatest segment name. */
DECL|field|maxSegmentName
specifier|public
name|int
name|maxSegmentName
decl_stmt|;
comment|/** Whether the SegmentInfos.counter is greater than any of the segments' names. */
DECL|field|validCounter
specifier|public
name|boolean
name|validCounter
decl_stmt|;
comment|/** Holds the userData of the last commit in the index */
DECL|field|userData
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|userData
decl_stmt|;
comment|/** Holds the status of each segment in the index.      *  See {@link #segmentInfos}.      *      * @lucene.experimental      */
DECL|class|SegmentInfoStatus
specifier|public
specifier|static
class|class
name|SegmentInfoStatus
block|{
DECL|method|SegmentInfoStatus
name|SegmentInfoStatus
parameter_list|()
block|{       }
comment|/** Name of the segment. */
DECL|field|name
specifier|public
name|String
name|name
decl_stmt|;
comment|/** Codec used to read this segment. */
DECL|field|codec
specifier|public
name|Codec
name|codec
decl_stmt|;
comment|/** Document count (does not take deletions into account). */
DECL|field|maxDoc
specifier|public
name|int
name|maxDoc
decl_stmt|;
comment|/** True if segment is compound file format. */
DECL|field|compound
specifier|public
name|boolean
name|compound
decl_stmt|;
comment|/** Number of files referenced by this segment. */
DECL|field|numFiles
specifier|public
name|int
name|numFiles
decl_stmt|;
comment|/** Net size (MB) of the files referenced by this        *  segment. */
DECL|field|sizeMB
specifier|public
name|double
name|sizeMB
decl_stmt|;
comment|/** True if this segment has pending deletions. */
DECL|field|hasDeletions
specifier|public
name|boolean
name|hasDeletions
decl_stmt|;
comment|/** Current deletions generation. */
DECL|field|deletionsGen
specifier|public
name|long
name|deletionsGen
decl_stmt|;
comment|/** True if we were able to open a CodecReader on this        *  segment. */
DECL|field|openReaderPassed
specifier|public
name|boolean
name|openReaderPassed
decl_stmt|;
comment|/** Map that includes certain        *  debugging details that IndexWriter records into        *  each segment it creates */
DECL|field|diagnostics
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|diagnostics
decl_stmt|;
comment|/** Status for testing of livedocs */
DECL|field|liveDocStatus
specifier|public
name|LiveDocStatus
name|liveDocStatus
decl_stmt|;
comment|/** Status for testing of field infos */
DECL|field|fieldInfoStatus
specifier|public
name|FieldInfoStatus
name|fieldInfoStatus
decl_stmt|;
comment|/** Status for testing of field norms (null if field norms could not be tested). */
DECL|field|fieldNormStatus
specifier|public
name|FieldNormStatus
name|fieldNormStatus
decl_stmt|;
comment|/** Status for testing of indexed terms (null if indexed terms could not be tested). */
DECL|field|termIndexStatus
specifier|public
name|TermIndexStatus
name|termIndexStatus
decl_stmt|;
comment|/** Status for testing of stored fields (null if stored fields could not be tested). */
DECL|field|storedFieldStatus
specifier|public
name|StoredFieldStatus
name|storedFieldStatus
decl_stmt|;
comment|/** Status for testing of term vectors (null if term vectors could not be tested). */
DECL|field|termVectorStatus
specifier|public
name|TermVectorStatus
name|termVectorStatus
decl_stmt|;
comment|/** Status for testing of DocValues (null if DocValues could not be tested). */
DECL|field|docValuesStatus
specifier|public
name|DocValuesStatus
name|docValuesStatus
decl_stmt|;
comment|/** Status for testing of PointValues (null if PointValues could not be tested). */
DECL|field|pointsStatus
specifier|public
name|PointsStatus
name|pointsStatus
decl_stmt|;
block|}
comment|/**      * Status from testing livedocs      */
DECL|class|LiveDocStatus
specifier|public
specifier|static
specifier|final
class|class
name|LiveDocStatus
block|{
DECL|method|LiveDocStatus
specifier|private
name|LiveDocStatus
parameter_list|()
block|{       }
comment|/** Number of deleted documents. */
DECL|field|numDeleted
specifier|public
name|int
name|numDeleted
decl_stmt|;
comment|/** Exception thrown during term index test (null on success) */
DECL|field|error
specifier|public
name|Throwable
name|error
init|=
literal|null
decl_stmt|;
block|}
comment|/**      * Status from testing field infos.      */
DECL|class|FieldInfoStatus
specifier|public
specifier|static
specifier|final
class|class
name|FieldInfoStatus
block|{
DECL|method|FieldInfoStatus
specifier|private
name|FieldInfoStatus
parameter_list|()
block|{       }
comment|/** Number of fields successfully tested */
DECL|field|totFields
specifier|public
name|long
name|totFields
init|=
literal|0L
decl_stmt|;
comment|/** Exception thrown during term index test (null on success) */
DECL|field|error
specifier|public
name|Throwable
name|error
init|=
literal|null
decl_stmt|;
block|}
comment|/**      * Status from testing field norms.      */
DECL|class|FieldNormStatus
specifier|public
specifier|static
specifier|final
class|class
name|FieldNormStatus
block|{
DECL|method|FieldNormStatus
specifier|private
name|FieldNormStatus
parameter_list|()
block|{       }
comment|/** Number of fields successfully tested */
DECL|field|totFields
specifier|public
name|long
name|totFields
init|=
literal|0L
decl_stmt|;
comment|/** Exception thrown during term index test (null on success) */
DECL|field|error
specifier|public
name|Throwable
name|error
init|=
literal|null
decl_stmt|;
block|}
comment|/**      * Status from testing term index.      */
DECL|class|TermIndexStatus
specifier|public
specifier|static
specifier|final
class|class
name|TermIndexStatus
block|{
DECL|method|TermIndexStatus
name|TermIndexStatus
parameter_list|()
block|{       }
comment|/** Number of terms with at least one live doc. */
DECL|field|termCount
specifier|public
name|long
name|termCount
init|=
literal|0L
decl_stmt|;
comment|/** Number of terms with zero live docs docs. */
DECL|field|delTermCount
specifier|public
name|long
name|delTermCount
init|=
literal|0L
decl_stmt|;
comment|/** Total frequency across all terms. */
DECL|field|totFreq
specifier|public
name|long
name|totFreq
init|=
literal|0L
decl_stmt|;
comment|/** Total number of positions. */
DECL|field|totPos
specifier|public
name|long
name|totPos
init|=
literal|0L
decl_stmt|;
comment|/** Exception thrown during term index test (null on success) */
DECL|field|error
specifier|public
name|Throwable
name|error
init|=
literal|null
decl_stmt|;
comment|/** Holds details of block allocations in the block        *  tree terms dictionary (this is only set if the        *  {@link PostingsFormat} for this segment uses block        *  tree. */
DECL|field|blockTreeStats
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|blockTreeStats
init|=
literal|null
decl_stmt|;
block|}
comment|/**      * Status from testing stored fields.      */
DECL|class|StoredFieldStatus
specifier|public
specifier|static
specifier|final
class|class
name|StoredFieldStatus
block|{
DECL|method|StoredFieldStatus
name|StoredFieldStatus
parameter_list|()
block|{       }
comment|/** Number of documents tested. */
DECL|field|docCount
specifier|public
name|int
name|docCount
init|=
literal|0
decl_stmt|;
comment|/** Total number of stored fields tested. */
DECL|field|totFields
specifier|public
name|long
name|totFields
init|=
literal|0
decl_stmt|;
comment|/** Exception thrown during stored fields test (null on success) */
DECL|field|error
specifier|public
name|Throwable
name|error
init|=
literal|null
decl_stmt|;
block|}
comment|/**      * Status from testing stored fields.      */
DECL|class|TermVectorStatus
specifier|public
specifier|static
specifier|final
class|class
name|TermVectorStatus
block|{
DECL|method|TermVectorStatus
name|TermVectorStatus
parameter_list|()
block|{       }
comment|/** Number of documents tested. */
DECL|field|docCount
specifier|public
name|int
name|docCount
init|=
literal|0
decl_stmt|;
comment|/** Total number of term vectors tested. */
DECL|field|totVectors
specifier|public
name|long
name|totVectors
init|=
literal|0
decl_stmt|;
comment|/** Exception thrown during term vector test (null on success) */
DECL|field|error
specifier|public
name|Throwable
name|error
init|=
literal|null
decl_stmt|;
block|}
comment|/**      * Status from testing DocValues      */
DECL|class|DocValuesStatus
specifier|public
specifier|static
specifier|final
class|class
name|DocValuesStatus
block|{
DECL|method|DocValuesStatus
name|DocValuesStatus
parameter_list|()
block|{       }
comment|/** Total number of docValues tested. */
DECL|field|totalValueFields
specifier|public
name|long
name|totalValueFields
decl_stmt|;
comment|/** Total number of numeric fields */
DECL|field|totalNumericFields
specifier|public
name|long
name|totalNumericFields
decl_stmt|;
comment|/** Total number of binary fields */
DECL|field|totalBinaryFields
specifier|public
name|long
name|totalBinaryFields
decl_stmt|;
comment|/** Total number of sorted fields */
DECL|field|totalSortedFields
specifier|public
name|long
name|totalSortedFields
decl_stmt|;
comment|/** Total number of sortednumeric fields */
DECL|field|totalSortedNumericFields
specifier|public
name|long
name|totalSortedNumericFields
decl_stmt|;
comment|/** Total number of sortedset fields */
DECL|field|totalSortedSetFields
specifier|public
name|long
name|totalSortedSetFields
decl_stmt|;
comment|/** Exception thrown during doc values test (null on success) */
DECL|field|error
specifier|public
name|Throwable
name|error
init|=
literal|null
decl_stmt|;
block|}
comment|/**      * Status from testing PointValues      */
DECL|class|PointsStatus
specifier|public
specifier|static
specifier|final
class|class
name|PointsStatus
block|{
DECL|method|PointsStatus
name|PointsStatus
parameter_list|()
block|{       }
comment|/** Total number of values points tested. */
DECL|field|totalValuePoints
specifier|public
name|long
name|totalValuePoints
decl_stmt|;
comment|/** Total number of fields with points. */
DECL|field|totalValueFields
specifier|public
name|int
name|totalValueFields
decl_stmt|;
comment|/** Exception thrown during doc values test (null on success) */
DECL|field|error
specifier|public
name|Throwable
name|error
init|=
literal|null
decl_stmt|;
block|}
block|}
comment|/** Create a new CheckIndex on the directory. */
DECL|method|CheckIndex
specifier|public
name|CheckIndex
parameter_list|(
name|Directory
name|dir
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|dir
argument_list|,
name|dir
operator|.
name|obtainLock
argument_list|(
name|IndexWriter
operator|.
name|WRITE_LOCK_NAME
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**     * Expert: create a directory with the specified lock.    * This should really not be used except for unit tests!!!!    * It exists only to support special tests (such as TestIndexWriterExceptions*),    * that would otherwise be more complicated to debug if they had to close the writer    * for each check.    */
DECL|method|CheckIndex
specifier|public
name|CheckIndex
parameter_list|(
name|Directory
name|dir
parameter_list|,
name|Lock
name|writeLock
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|dir
operator|=
name|dir
expr_stmt|;
name|this
operator|.
name|writeLock
operator|=
name|writeLock
expr_stmt|;
name|this
operator|.
name|infoStream
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|ensureOpen
specifier|private
name|void
name|ensureOpen
parameter_list|()
block|{
if|if
condition|(
name|closed
condition|)
block|{
throw|throw
operator|new
name|AlreadyClosedException
argument_list|(
literal|"this instance is closed"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|closed
operator|=
literal|true
expr_stmt|;
name|IOUtils
operator|.
name|close
argument_list|(
name|writeLock
argument_list|)
expr_stmt|;
block|}
DECL|field|crossCheckTermVectors
specifier|private
name|boolean
name|crossCheckTermVectors
decl_stmt|;
comment|/** If true, term vectors are compared against postings to    *  make sure they are the same.  This will likely    *  drastically increase time it takes to run CheckIndex! */
DECL|method|setCrossCheckTermVectors
specifier|public
name|void
name|setCrossCheckTermVectors
parameter_list|(
name|boolean
name|v
parameter_list|)
block|{
name|crossCheckTermVectors
operator|=
name|v
expr_stmt|;
block|}
comment|/** See {@link #setCrossCheckTermVectors}. */
DECL|method|getCrossCheckTermVectors
specifier|public
name|boolean
name|getCrossCheckTermVectors
parameter_list|()
block|{
return|return
name|crossCheckTermVectors
return|;
block|}
DECL|field|failFast
specifier|private
name|boolean
name|failFast
decl_stmt|;
comment|/** If true, just throw the original exception immediately when    *  corruption is detected, rather than continuing to iterate to other    *  segments looking for more corruption.  */
DECL|method|setFailFast
specifier|public
name|void
name|setFailFast
parameter_list|(
name|boolean
name|v
parameter_list|)
block|{
name|failFast
operator|=
name|v
expr_stmt|;
block|}
comment|/** See {@link #setFailFast}. */
DECL|method|getFailFast
specifier|public
name|boolean
name|getFailFast
parameter_list|()
block|{
return|return
name|failFast
return|;
block|}
DECL|field|verbose
specifier|private
name|boolean
name|verbose
decl_stmt|;
comment|/** See {@link #getChecksumsOnly}. */
DECL|method|getChecksumsOnly
specifier|public
name|boolean
name|getChecksumsOnly
parameter_list|()
block|{
return|return
name|checksumsOnly
return|;
block|}
comment|/**     * If true, only validate physical integrity for all files.     * Note that the returned nested status objects (e.g. storedFieldStatus) will be null.  */
DECL|method|setChecksumsOnly
specifier|public
name|void
name|setChecksumsOnly
parameter_list|(
name|boolean
name|v
parameter_list|)
block|{
name|checksumsOnly
operator|=
name|v
expr_stmt|;
block|}
DECL|field|checksumsOnly
specifier|private
name|boolean
name|checksumsOnly
decl_stmt|;
comment|/** Set infoStream where messages should go.  If null, no    *  messages are printed.  If verbose is true then more    *  details are printed. */
DECL|method|setInfoStream
specifier|public
name|void
name|setInfoStream
parameter_list|(
name|PrintStream
name|out
parameter_list|,
name|boolean
name|verbose
parameter_list|)
block|{
name|infoStream
operator|=
name|out
expr_stmt|;
name|this
operator|.
name|verbose
operator|=
name|verbose
expr_stmt|;
block|}
comment|/** Set infoStream where messages should go. See {@link #setInfoStream(PrintStream,boolean)}. */
DECL|method|setInfoStream
specifier|public
name|void
name|setInfoStream
parameter_list|(
name|PrintStream
name|out
parameter_list|)
block|{
name|setInfoStream
argument_list|(
name|out
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|msg
specifier|private
specifier|static
name|void
name|msg
parameter_list|(
name|PrintStream
name|out
parameter_list|,
name|String
name|msg
parameter_list|)
block|{
if|if
condition|(
name|out
operator|!=
literal|null
condition|)
name|out
operator|.
name|println
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
comment|/** Returns a {@link Status} instance detailing    *  the state of the index.    *    *<p>As this method checks every byte in the index, on a large    *  index it can take quite a long time to run.    *    *<p><b>WARNING</b>: make sure    *  you only call this when the index is not opened by any    *  writer. */
DECL|method|checkIndex
specifier|public
name|Status
name|checkIndex
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|checkIndex
argument_list|(
literal|null
argument_list|)
return|;
block|}
comment|/** Returns a {@link Status} instance detailing    *  the state of the index.    *     *  @param onlySegments list of specific segment names to check    *    *<p>As this method checks every byte in the specified    *  segments, on a large index it can take quite a long    *  time to run. */
DECL|method|checkIndex
specifier|public
name|Status
name|checkIndex
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|onlySegments
parameter_list|)
throws|throws
name|IOException
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
name|long
name|startNS
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
name|NumberFormat
name|nf
init|=
name|NumberFormat
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
decl_stmt|;
name|SegmentInfos
name|sis
init|=
literal|null
decl_stmt|;
name|Status
name|result
init|=
operator|new
name|Status
argument_list|()
decl_stmt|;
name|result
operator|.
name|dir
operator|=
name|dir
expr_stmt|;
name|String
index|[]
name|files
init|=
name|dir
operator|.
name|listAll
argument_list|()
decl_stmt|;
name|String
name|lastSegmentsFile
init|=
name|SegmentInfos
operator|.
name|getLastCommitSegmentsFileName
argument_list|(
name|files
argument_list|)
decl_stmt|;
if|if
condition|(
name|lastSegmentsFile
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IndexNotFoundException
argument_list|(
literal|"no segments* file found in "
operator|+
name|dir
operator|+
literal|": files: "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|files
argument_list|)
argument_list|)
throw|;
block|}
try|try
block|{
comment|// Do not use SegmentInfos.read(Directory) since the spooky
comment|// retrying it does is not necessary here (we hold the write lock):
name|sis
operator|=
name|SegmentInfos
operator|.
name|readCommit
argument_list|(
name|dir
argument_list|,
name|lastSegmentsFile
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|failFast
condition|)
block|{
name|IOUtils
operator|.
name|reThrow
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
name|msg
argument_list|(
name|infoStream
argument_list|,
literal|"ERROR: could not read any segments file in directory"
argument_list|)
expr_stmt|;
name|result
operator|.
name|missingSegments
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|infoStream
operator|!=
literal|null
condition|)
name|t
operator|.
name|printStackTrace
argument_list|(
name|infoStream
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
comment|// find the oldest and newest segment versions
name|Version
name|oldest
init|=
literal|null
decl_stmt|;
name|Version
name|newest
init|=
literal|null
decl_stmt|;
name|String
name|oldSegs
init|=
literal|null
decl_stmt|;
for|for
control|(
name|SegmentCommitInfo
name|si
range|:
name|sis
control|)
block|{
name|Version
name|version
init|=
name|si
operator|.
name|info
operator|.
name|getVersion
argument_list|()
decl_stmt|;
if|if
condition|(
name|version
operator|==
literal|null
condition|)
block|{
comment|// pre-3.1 segment
name|oldSegs
operator|=
literal|"pre-3.1"
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|oldest
operator|==
literal|null
operator|||
name|version
operator|.
name|onOrAfter
argument_list|(
name|oldest
argument_list|)
operator|==
literal|false
condition|)
block|{
name|oldest
operator|=
name|version
expr_stmt|;
block|}
if|if
condition|(
name|newest
operator|==
literal|null
operator|||
name|version
operator|.
name|onOrAfter
argument_list|(
name|newest
argument_list|)
condition|)
block|{
name|newest
operator|=
name|version
expr_stmt|;
block|}
block|}
block|}
specifier|final
name|int
name|numSegments
init|=
name|sis
operator|.
name|size
argument_list|()
decl_stmt|;
specifier|final
name|String
name|segmentsFileName
init|=
name|sis
operator|.
name|getSegmentsFileName
argument_list|()
decl_stmt|;
comment|// note: we only read the format byte (required preamble) here!
name|IndexInput
name|input
init|=
literal|null
decl_stmt|;
try|try
block|{
name|input
operator|=
name|dir
operator|.
name|openInput
argument_list|(
name|segmentsFileName
argument_list|,
name|IOContext
operator|.
name|READONCE
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|failFast
condition|)
block|{
name|IOUtils
operator|.
name|reThrow
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
name|msg
argument_list|(
name|infoStream
argument_list|,
literal|"ERROR: could not open segments file in directory"
argument_list|)
expr_stmt|;
if|if
condition|(
name|infoStream
operator|!=
literal|null
condition|)
name|t
operator|.
name|printStackTrace
argument_list|(
name|infoStream
argument_list|)
expr_stmt|;
name|result
operator|.
name|cantOpenSegments
operator|=
literal|true
expr_stmt|;
return|return
name|result
return|;
block|}
try|try
block|{
comment|/*int format =*/
name|input
operator|.
name|readInt
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|failFast
condition|)
block|{
name|IOUtils
operator|.
name|reThrow
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
name|msg
argument_list|(
name|infoStream
argument_list|,
literal|"ERROR: could not read segment file version in directory"
argument_list|)
expr_stmt|;
if|if
condition|(
name|infoStream
operator|!=
literal|null
condition|)
name|t
operator|.
name|printStackTrace
argument_list|(
name|infoStream
argument_list|)
expr_stmt|;
name|result
operator|.
name|missingSegmentVersion
operator|=
literal|true
expr_stmt|;
return|return
name|result
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|input
operator|!=
literal|null
condition|)
name|input
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|String
name|sFormat
init|=
literal|""
decl_stmt|;
name|result
operator|.
name|segmentsFileName
operator|=
name|segmentsFileName
expr_stmt|;
name|result
operator|.
name|numSegments
operator|=
name|numSegments
expr_stmt|;
name|result
operator|.
name|userData
operator|=
name|sis
operator|.
name|getUserData
argument_list|()
expr_stmt|;
name|String
name|userDataString
decl_stmt|;
if|if
condition|(
name|sis
operator|.
name|getUserData
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|userDataString
operator|=
literal|" userData="
operator|+
name|sis
operator|.
name|getUserData
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|userDataString
operator|=
literal|""
expr_stmt|;
block|}
name|String
name|versionString
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|oldSegs
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|newest
operator|!=
literal|null
condition|)
block|{
name|versionString
operator|=
literal|"versions=["
operator|+
name|oldSegs
operator|+
literal|" .. "
operator|+
name|newest
operator|+
literal|"]"
expr_stmt|;
block|}
else|else
block|{
name|versionString
operator|=
literal|"version="
operator|+
name|oldSegs
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|newest
operator|!=
literal|null
condition|)
block|{
comment|// implies oldest != null
name|versionString
operator|=
name|oldest
operator|.
name|equals
argument_list|(
name|newest
argument_list|)
condition|?
operator|(
literal|"version="
operator|+
name|oldest
operator|)
else|:
operator|(
literal|"versions=["
operator|+
name|oldest
operator|+
literal|" .. "
operator|+
name|newest
operator|+
literal|"]"
operator|)
expr_stmt|;
block|}
name|msg
argument_list|(
name|infoStream
argument_list|,
literal|"Segments file="
operator|+
name|segmentsFileName
operator|+
literal|" numSegments="
operator|+
name|numSegments
operator|+
literal|" "
operator|+
name|versionString
operator|+
literal|" id="
operator|+
name|StringHelper
operator|.
name|idToString
argument_list|(
name|sis
operator|.
name|getId
argument_list|()
argument_list|)
operator|+
literal|" format="
operator|+
name|sFormat
operator|+
name|userDataString
argument_list|)
expr_stmt|;
if|if
condition|(
name|onlySegments
operator|!=
literal|null
condition|)
block|{
name|result
operator|.
name|partial
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|infoStream
operator|!=
literal|null
condition|)
block|{
name|infoStream
operator|.
name|print
argument_list|(
literal|"\nChecking only these segments:"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|s
range|:
name|onlySegments
control|)
block|{
name|infoStream
operator|.
name|print
argument_list|(
literal|" "
operator|+
name|s
argument_list|)
expr_stmt|;
block|}
block|}
name|result
operator|.
name|segmentsChecked
operator|.
name|addAll
argument_list|(
name|onlySegments
argument_list|)
expr_stmt|;
name|msg
argument_list|(
name|infoStream
argument_list|,
literal|":"
argument_list|)
expr_stmt|;
block|}
name|result
operator|.
name|newSegments
operator|=
name|sis
operator|.
name|clone
argument_list|()
expr_stmt|;
name|result
operator|.
name|newSegments
operator|.
name|clear
argument_list|()
expr_stmt|;
name|result
operator|.
name|maxSegmentName
operator|=
operator|-
literal|1
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numSegments
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|SegmentCommitInfo
name|info
init|=
name|sis
operator|.
name|info
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|int
name|segmentName
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|info
operator|.
name|info
operator|.
name|name
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
argument_list|,
name|Character
operator|.
name|MAX_RADIX
argument_list|)
decl_stmt|;
if|if
condition|(
name|segmentName
operator|>
name|result
operator|.
name|maxSegmentName
condition|)
block|{
name|result
operator|.
name|maxSegmentName
operator|=
name|segmentName
expr_stmt|;
block|}
if|if
condition|(
name|onlySegments
operator|!=
literal|null
operator|&&
operator|!
name|onlySegments
operator|.
name|contains
argument_list|(
name|info
operator|.
name|info
operator|.
name|name
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|Status
operator|.
name|SegmentInfoStatus
name|segInfoStat
init|=
operator|new
name|Status
operator|.
name|SegmentInfoStatus
argument_list|()
decl_stmt|;
name|result
operator|.
name|segmentInfos
operator|.
name|add
argument_list|(
name|segInfoStat
argument_list|)
expr_stmt|;
name|msg
argument_list|(
name|infoStream
argument_list|,
literal|"  "
operator|+
operator|(
literal|1
operator|+
name|i
operator|)
operator|+
literal|" of "
operator|+
name|numSegments
operator|+
literal|": name="
operator|+
name|info
operator|.
name|info
operator|.
name|name
operator|+
literal|" maxDoc="
operator|+
name|info
operator|.
name|info
operator|.
name|maxDoc
argument_list|()
argument_list|)
expr_stmt|;
name|segInfoStat
operator|.
name|name
operator|=
name|info
operator|.
name|info
operator|.
name|name
expr_stmt|;
name|segInfoStat
operator|.
name|maxDoc
operator|=
name|info
operator|.
name|info
operator|.
name|maxDoc
argument_list|()
expr_stmt|;
specifier|final
name|Version
name|version
init|=
name|info
operator|.
name|info
operator|.
name|getVersion
argument_list|()
decl_stmt|;
if|if
condition|(
name|info
operator|.
name|info
operator|.
name|maxDoc
argument_list|()
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"illegal number of documents: maxDoc="
operator|+
name|info
operator|.
name|info
operator|.
name|maxDoc
argument_list|()
argument_list|)
throw|;
block|}
name|int
name|toLoseDocCount
init|=
name|info
operator|.
name|info
operator|.
name|maxDoc
argument_list|()
decl_stmt|;
name|SegmentReader
name|reader
init|=
literal|null
decl_stmt|;
try|try
block|{
name|msg
argument_list|(
name|infoStream
argument_list|,
literal|"    version="
operator|+
operator|(
name|version
operator|==
literal|null
condition|?
literal|"3.0"
else|:
name|version
operator|)
argument_list|)
expr_stmt|;
name|msg
argument_list|(
name|infoStream
argument_list|,
literal|"    id="
operator|+
name|StringHelper
operator|.
name|idToString
argument_list|(
name|info
operator|.
name|info
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Codec
name|codec
init|=
name|info
operator|.
name|info
operator|.
name|getCodec
argument_list|()
decl_stmt|;
name|msg
argument_list|(
name|infoStream
argument_list|,
literal|"    codec="
operator|+
name|codec
argument_list|)
expr_stmt|;
name|segInfoStat
operator|.
name|codec
operator|=
name|codec
expr_stmt|;
name|msg
argument_list|(
name|infoStream
argument_list|,
literal|"    compound="
operator|+
name|info
operator|.
name|info
operator|.
name|getUseCompoundFile
argument_list|()
argument_list|)
expr_stmt|;
name|segInfoStat
operator|.
name|compound
operator|=
name|info
operator|.
name|info
operator|.
name|getUseCompoundFile
argument_list|()
expr_stmt|;
name|msg
argument_list|(
name|infoStream
argument_list|,
literal|"    numFiles="
operator|+
name|info
operator|.
name|files
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|segInfoStat
operator|.
name|numFiles
operator|=
name|info
operator|.
name|files
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
name|segInfoStat
operator|.
name|sizeMB
operator|=
name|info
operator|.
name|sizeInBytes
argument_list|()
operator|/
operator|(
literal|1024.
operator|*
literal|1024.
operator|)
expr_stmt|;
name|msg
argument_list|(
name|infoStream
argument_list|,
literal|"    size (MB)="
operator|+
name|nf
operator|.
name|format
argument_list|(
name|segInfoStat
operator|.
name|sizeMB
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|diagnostics
init|=
name|info
operator|.
name|info
operator|.
name|getDiagnostics
argument_list|()
decl_stmt|;
name|segInfoStat
operator|.
name|diagnostics
operator|=
name|diagnostics
expr_stmt|;
if|if
condition|(
name|diagnostics
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|msg
argument_list|(
name|infoStream
argument_list|,
literal|"    diagnostics = "
operator|+
name|diagnostics
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|info
operator|.
name|hasDeletions
argument_list|()
condition|)
block|{
name|msg
argument_list|(
name|infoStream
argument_list|,
literal|"    no deletions"
argument_list|)
expr_stmt|;
name|segInfoStat
operator|.
name|hasDeletions
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|msg
argument_list|(
name|infoStream
argument_list|,
literal|"    has deletions [delGen="
operator|+
name|info
operator|.
name|getDelGen
argument_list|()
operator|+
literal|"]"
argument_list|)
expr_stmt|;
name|segInfoStat
operator|.
name|hasDeletions
operator|=
literal|true
expr_stmt|;
name|segInfoStat
operator|.
name|deletionsGen
operator|=
name|info
operator|.
name|getDelGen
argument_list|()
expr_stmt|;
block|}
name|long
name|startOpenReaderNS
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
if|if
condition|(
name|infoStream
operator|!=
literal|null
condition|)
name|infoStream
operator|.
name|print
argument_list|(
literal|"    test: open reader........."
argument_list|)
expr_stmt|;
name|reader
operator|=
operator|new
name|SegmentReader
argument_list|(
name|info
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
name|msg
argument_list|(
name|infoStream
argument_list|,
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"OK [took %.3f sec]"
argument_list|,
name|nsToSec
argument_list|(
name|System
operator|.
name|nanoTime
argument_list|()
operator|-
name|startOpenReaderNS
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|segInfoStat
operator|.
name|openReaderPassed
operator|=
literal|true
expr_stmt|;
name|long
name|startIntegrityNS
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
if|if
condition|(
name|infoStream
operator|!=
literal|null
condition|)
name|infoStream
operator|.
name|print
argument_list|(
literal|"    test: check integrity....."
argument_list|)
expr_stmt|;
name|reader
operator|.
name|checkIntegrity
argument_list|()
expr_stmt|;
name|msg
argument_list|(
name|infoStream
argument_list|,
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"OK [took %.3f sec]"
argument_list|,
name|nsToSec
argument_list|(
name|System
operator|.
name|nanoTime
argument_list|()
operator|-
name|startIntegrityNS
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|reader
operator|.
name|maxDoc
argument_list|()
operator|!=
name|info
operator|.
name|info
operator|.
name|maxDoc
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"SegmentReader.maxDoc() "
operator|+
name|reader
operator|.
name|maxDoc
argument_list|()
operator|+
literal|" != SegmentInfo.maxDoc "
operator|+
name|info
operator|.
name|info
operator|.
name|maxDoc
argument_list|()
argument_list|)
throw|;
block|}
specifier|final
name|int
name|numDocs
init|=
name|reader
operator|.
name|numDocs
argument_list|()
decl_stmt|;
name|toLoseDocCount
operator|=
name|numDocs
expr_stmt|;
if|if
condition|(
name|reader
operator|.
name|hasDeletions
argument_list|()
condition|)
block|{
if|if
condition|(
name|reader
operator|.
name|numDocs
argument_list|()
operator|!=
name|info
operator|.
name|info
operator|.
name|maxDoc
argument_list|()
operator|-
name|info
operator|.
name|getDelCount
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"delete count mismatch: info="
operator|+
operator|(
name|info
operator|.
name|info
operator|.
name|maxDoc
argument_list|()
operator|-
name|info
operator|.
name|getDelCount
argument_list|()
operator|)
operator|+
literal|" vs reader="
operator|+
name|reader
operator|.
name|numDocs
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
operator|(
name|info
operator|.
name|info
operator|.
name|maxDoc
argument_list|()
operator|-
name|reader
operator|.
name|numDocs
argument_list|()
operator|)
operator|>
name|reader
operator|.
name|maxDoc
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"too many deleted docs: maxDoc()="
operator|+
name|reader
operator|.
name|maxDoc
argument_list|()
operator|+
literal|" vs del count="
operator|+
operator|(
name|info
operator|.
name|info
operator|.
name|maxDoc
argument_list|()
operator|-
name|reader
operator|.
name|numDocs
argument_list|()
operator|)
argument_list|)
throw|;
block|}
if|if
condition|(
name|info
operator|.
name|info
operator|.
name|maxDoc
argument_list|()
operator|-
name|reader
operator|.
name|numDocs
argument_list|()
operator|!=
name|info
operator|.
name|getDelCount
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"delete count mismatch: info="
operator|+
name|info
operator|.
name|getDelCount
argument_list|()
operator|+
literal|" vs reader="
operator|+
operator|(
name|info
operator|.
name|info
operator|.
name|maxDoc
argument_list|()
operator|-
name|reader
operator|.
name|numDocs
argument_list|()
operator|)
argument_list|)
throw|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|info
operator|.
name|getDelCount
argument_list|()
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"delete count mismatch: info="
operator|+
name|info
operator|.
name|getDelCount
argument_list|()
operator|+
literal|" vs reader="
operator|+
operator|(
name|info
operator|.
name|info
operator|.
name|maxDoc
argument_list|()
operator|-
name|reader
operator|.
name|numDocs
argument_list|()
operator|)
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|checksumsOnly
operator|==
literal|false
condition|)
block|{
comment|// Test Livedocs
name|segInfoStat
operator|.
name|liveDocStatus
operator|=
name|testLiveDocs
argument_list|(
name|reader
argument_list|,
name|infoStream
argument_list|,
name|failFast
argument_list|)
expr_stmt|;
comment|// Test Fieldinfos
name|segInfoStat
operator|.
name|fieldInfoStatus
operator|=
name|testFieldInfos
argument_list|(
name|reader
argument_list|,
name|infoStream
argument_list|,
name|failFast
argument_list|)
expr_stmt|;
comment|// Test Field Norms
name|segInfoStat
operator|.
name|fieldNormStatus
operator|=
name|testFieldNorms
argument_list|(
name|reader
argument_list|,
name|infoStream
argument_list|,
name|failFast
argument_list|)
expr_stmt|;
comment|// Test the Term Index
name|segInfoStat
operator|.
name|termIndexStatus
operator|=
name|testPostings
argument_list|(
name|reader
argument_list|,
name|infoStream
argument_list|,
name|verbose
argument_list|,
name|failFast
argument_list|)
expr_stmt|;
comment|// Test Stored Fields
name|segInfoStat
operator|.
name|storedFieldStatus
operator|=
name|testStoredFields
argument_list|(
name|reader
argument_list|,
name|infoStream
argument_list|,
name|failFast
argument_list|)
expr_stmt|;
comment|// Test Term Vectors
name|segInfoStat
operator|.
name|termVectorStatus
operator|=
name|testTermVectors
argument_list|(
name|reader
argument_list|,
name|infoStream
argument_list|,
name|verbose
argument_list|,
name|crossCheckTermVectors
argument_list|,
name|failFast
argument_list|)
expr_stmt|;
comment|// Test Docvalues
name|segInfoStat
operator|.
name|docValuesStatus
operator|=
name|testDocValues
argument_list|(
name|reader
argument_list|,
name|infoStream
argument_list|,
name|failFast
argument_list|)
expr_stmt|;
comment|// Test PointValues
name|segInfoStat
operator|.
name|pointsStatus
operator|=
name|testPoints
argument_list|(
name|reader
argument_list|,
name|infoStream
argument_list|,
name|failFast
argument_list|)
expr_stmt|;
comment|// Rethrow the first exception we encountered
comment|//  This will cause stats for failed segments to be incremented properly
if|if
condition|(
name|segInfoStat
operator|.
name|liveDocStatus
operator|.
name|error
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Live docs test failed"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|segInfoStat
operator|.
name|fieldInfoStatus
operator|.
name|error
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Field Info test failed"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|segInfoStat
operator|.
name|fieldNormStatus
operator|.
name|error
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Field Norm test failed"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|segInfoStat
operator|.
name|termIndexStatus
operator|.
name|error
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Term Index test failed"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|segInfoStat
operator|.
name|storedFieldStatus
operator|.
name|error
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Stored Field test failed"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|segInfoStat
operator|.
name|termVectorStatus
operator|.
name|error
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Term Vector test failed"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|segInfoStat
operator|.
name|docValuesStatus
operator|.
name|error
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"DocValues test failed"
argument_list|)
throw|;
block|}
block|}
name|msg
argument_list|(
name|infoStream
argument_list|,
literal|""
argument_list|)
expr_stmt|;
if|if
condition|(
name|verbose
condition|)
block|{
name|msg
argument_list|(
name|infoStream
argument_list|,
literal|"detailed segment RAM usage: "
argument_list|)
expr_stmt|;
name|msg
argument_list|(
name|infoStream
argument_list|,
name|Accountables
operator|.
name|toString
argument_list|(
name|reader
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|failFast
condition|)
block|{
name|IOUtils
operator|.
name|reThrow
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
name|msg
argument_list|(
name|infoStream
argument_list|,
literal|"FAILED"
argument_list|)
expr_stmt|;
name|String
name|comment
decl_stmt|;
name|comment
operator|=
literal|"exorciseIndex() would remove reference to this segment"
expr_stmt|;
name|msg
argument_list|(
name|infoStream
argument_list|,
literal|"    WARNING: "
operator|+
name|comment
operator|+
literal|"; full exception:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|infoStream
operator|!=
literal|null
condition|)
name|t
operator|.
name|printStackTrace
argument_list|(
name|infoStream
argument_list|)
expr_stmt|;
name|msg
argument_list|(
name|infoStream
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|result
operator|.
name|totLoseDocCount
operator|+=
name|toLoseDocCount
expr_stmt|;
name|result
operator|.
name|numBadSegments
operator|++
expr_stmt|;
continue|continue;
block|}
finally|finally
block|{
if|if
condition|(
name|reader
operator|!=
literal|null
condition|)
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// Keeper
name|result
operator|.
name|newSegments
operator|.
name|add
argument_list|(
name|info
operator|.
name|clone
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|0
operator|==
name|result
operator|.
name|numBadSegments
condition|)
block|{
name|result
operator|.
name|clean
operator|=
literal|true
expr_stmt|;
block|}
else|else
name|msg
argument_list|(
name|infoStream
argument_list|,
literal|"WARNING: "
operator|+
name|result
operator|.
name|numBadSegments
operator|+
literal|" broken segments (containing "
operator|+
name|result
operator|.
name|totLoseDocCount
operator|+
literal|" documents) detected"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|result
operator|.
name|validCounter
operator|=
operator|(
name|result
operator|.
name|maxSegmentName
operator|<
name|sis
operator|.
name|counter
operator|)
operator|)
condition|)
block|{
name|result
operator|.
name|clean
operator|=
literal|false
expr_stmt|;
name|result
operator|.
name|newSegments
operator|.
name|counter
operator|=
name|result
operator|.
name|maxSegmentName
operator|+
literal|1
expr_stmt|;
name|msg
argument_list|(
name|infoStream
argument_list|,
literal|"ERROR: Next segment name counter "
operator|+
name|sis
operator|.
name|counter
operator|+
literal|" is not greater than max segment name "
operator|+
name|result
operator|.
name|maxSegmentName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|result
operator|.
name|clean
condition|)
block|{
name|msg
argument_list|(
name|infoStream
argument_list|,
literal|"No problems were detected with this index.\n"
argument_list|)
expr_stmt|;
block|}
name|msg
argument_list|(
name|infoStream
argument_list|,
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"Took %.3f sec total."
argument_list|,
name|nsToSec
argument_list|(
name|System
operator|.
name|nanoTime
argument_list|()
operator|-
name|startNS
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
comment|/**    * Test live docs.    * @lucene.experimental    */
DECL|method|testLiveDocs
specifier|public
specifier|static
name|Status
operator|.
name|LiveDocStatus
name|testLiveDocs
parameter_list|(
name|CodecReader
name|reader
parameter_list|,
name|PrintStream
name|infoStream
parameter_list|,
name|boolean
name|failFast
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|startNS
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
specifier|final
name|Status
operator|.
name|LiveDocStatus
name|status
init|=
operator|new
name|Status
operator|.
name|LiveDocStatus
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|infoStream
operator|!=
literal|null
condition|)
name|infoStream
operator|.
name|print
argument_list|(
literal|"    test: check live docs....."
argument_list|)
expr_stmt|;
specifier|final
name|int
name|numDocs
init|=
name|reader
operator|.
name|numDocs
argument_list|()
decl_stmt|;
if|if
condition|(
name|reader
operator|.
name|hasDeletions
argument_list|()
condition|)
block|{
name|Bits
name|liveDocs
init|=
name|reader
operator|.
name|getLiveDocs
argument_list|()
decl_stmt|;
if|if
condition|(
name|liveDocs
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"segment should have deletions, but liveDocs is null"
argument_list|)
throw|;
block|}
else|else
block|{
name|int
name|numLive
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|liveDocs
operator|.
name|length
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|liveDocs
operator|.
name|get
argument_list|(
name|j
argument_list|)
condition|)
block|{
name|numLive
operator|++
expr_stmt|;
block|}
block|}
if|if
condition|(
name|numLive
operator|!=
name|numDocs
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"liveDocs count mismatch: info="
operator|+
name|numDocs
operator|+
literal|", vs bits="
operator|+
name|numLive
argument_list|)
throw|;
block|}
block|}
name|status
operator|.
name|numDeleted
operator|=
name|reader
operator|.
name|numDeletedDocs
argument_list|()
expr_stmt|;
name|msg
argument_list|(
name|infoStream
argument_list|,
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"OK [%d deleted docs] [took %.3f sec]"
argument_list|,
name|status
operator|.
name|numDeleted
argument_list|,
name|nsToSec
argument_list|(
name|System
operator|.
name|nanoTime
argument_list|()
operator|-
name|startNS
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Bits
name|liveDocs
init|=
name|reader
operator|.
name|getLiveDocs
argument_list|()
decl_stmt|;
if|if
condition|(
name|liveDocs
operator|!=
literal|null
condition|)
block|{
comment|// it's ok for it to be non-null here, as long as none are set right?
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|liveDocs
operator|.
name|length
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|liveDocs
operator|.
name|get
argument_list|(
name|j
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"liveDocs mismatch: info says no deletions but doc "
operator|+
name|j
operator|+
literal|" is deleted."
argument_list|)
throw|;
block|}
block|}
block|}
name|msg
argument_list|(
name|infoStream
argument_list|,
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"OK [took %.3f sec]"
argument_list|,
operator|(
name|nsToSec
argument_list|(
name|System
operator|.
name|nanoTime
argument_list|()
operator|-
name|startNS
argument_list|)
operator|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
if|if
condition|(
name|failFast
condition|)
block|{
name|IOUtils
operator|.
name|reThrow
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
name|msg
argument_list|(
name|infoStream
argument_list|,
literal|"ERROR ["
operator|+
name|String
operator|.
name|valueOf
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|+
literal|"]"
argument_list|)
expr_stmt|;
name|status
operator|.
name|error
operator|=
name|e
expr_stmt|;
if|if
condition|(
name|infoStream
operator|!=
literal|null
condition|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|(
name|infoStream
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|status
return|;
block|}
comment|/**    * Test field infos.    * @lucene.experimental    */
DECL|method|testFieldInfos
specifier|public
specifier|static
name|Status
operator|.
name|FieldInfoStatus
name|testFieldInfos
parameter_list|(
name|CodecReader
name|reader
parameter_list|,
name|PrintStream
name|infoStream
parameter_list|,
name|boolean
name|failFast
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|startNS
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
specifier|final
name|Status
operator|.
name|FieldInfoStatus
name|status
init|=
operator|new
name|Status
operator|.
name|FieldInfoStatus
argument_list|()
decl_stmt|;
try|try
block|{
comment|// Test Field Infos
if|if
condition|(
name|infoStream
operator|!=
literal|null
condition|)
block|{
name|infoStream
operator|.
name|print
argument_list|(
literal|"    test: field infos........."
argument_list|)
expr_stmt|;
block|}
name|FieldInfos
name|fieldInfos
init|=
name|reader
operator|.
name|getFieldInfos
argument_list|()
decl_stmt|;
for|for
control|(
name|FieldInfo
name|f
range|:
name|fieldInfos
control|)
block|{
name|f
operator|.
name|checkConsistency
argument_list|()
expr_stmt|;
block|}
name|msg
argument_list|(
name|infoStream
argument_list|,
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"OK [%d fields] [took %.3f sec]"
argument_list|,
name|fieldInfos
operator|.
name|size
argument_list|()
argument_list|,
name|nsToSec
argument_list|(
name|System
operator|.
name|nanoTime
argument_list|()
operator|-
name|startNS
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|status
operator|.
name|totFields
operator|=
name|fieldInfos
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
if|if
condition|(
name|failFast
condition|)
block|{
name|IOUtils
operator|.
name|reThrow
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
name|msg
argument_list|(
name|infoStream
argument_list|,
literal|"ERROR ["
operator|+
name|String
operator|.
name|valueOf
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|+
literal|"]"
argument_list|)
expr_stmt|;
name|status
operator|.
name|error
operator|=
name|e
expr_stmt|;
if|if
condition|(
name|infoStream
operator|!=
literal|null
condition|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|(
name|infoStream
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|status
return|;
block|}
comment|/**    * Test field norms.    * @lucene.experimental    */
DECL|method|testFieldNorms
specifier|public
specifier|static
name|Status
operator|.
name|FieldNormStatus
name|testFieldNorms
parameter_list|(
name|CodecReader
name|reader
parameter_list|,
name|PrintStream
name|infoStream
parameter_list|,
name|boolean
name|failFast
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|startNS
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
specifier|final
name|Status
operator|.
name|FieldNormStatus
name|status
init|=
operator|new
name|Status
operator|.
name|FieldNormStatus
argument_list|()
decl_stmt|;
try|try
block|{
comment|// Test Field Norms
if|if
condition|(
name|infoStream
operator|!=
literal|null
condition|)
block|{
name|infoStream
operator|.
name|print
argument_list|(
literal|"    test: field norms........."
argument_list|)
expr_stmt|;
block|}
name|NormsProducer
name|normsReader
init|=
name|reader
operator|.
name|getNormsReader
argument_list|()
decl_stmt|;
if|if
condition|(
name|normsReader
operator|!=
literal|null
condition|)
block|{
name|normsReader
operator|=
name|normsReader
operator|.
name|getMergeInstance
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|FieldInfo
name|info
range|:
name|reader
operator|.
name|getFieldInfos
argument_list|()
control|)
block|{
if|if
condition|(
name|info
operator|.
name|hasNorms
argument_list|()
condition|)
block|{
name|checkNumericDocValues
argument_list|(
name|info
operator|.
name|name
argument_list|,
name|reader
operator|.
name|maxDoc
argument_list|()
argument_list|,
name|normsReader
operator|.
name|getNorms
argument_list|(
name|info
argument_list|)
argument_list|,
operator|new
name|Bits
operator|.
name|MatchAllBits
argument_list|(
name|reader
operator|.
name|maxDoc
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
operator|++
name|status
operator|.
name|totFields
expr_stmt|;
block|}
block|}
name|msg
argument_list|(
name|infoStream
argument_list|,
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"OK [%d fields] [took %.3f sec]"
argument_list|,
name|status
operator|.
name|totFields
argument_list|,
name|nsToSec
argument_list|(
name|System
operator|.
name|nanoTime
argument_list|()
operator|-
name|startNS
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
if|if
condition|(
name|failFast
condition|)
block|{
name|IOUtils
operator|.
name|reThrow
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
name|msg
argument_list|(
name|infoStream
argument_list|,
literal|"ERROR ["
operator|+
name|String
operator|.
name|valueOf
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|+
literal|"]"
argument_list|)
expr_stmt|;
name|status
operator|.
name|error
operator|=
name|e
expr_stmt|;
if|if
condition|(
name|infoStream
operator|!=
literal|null
condition|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|(
name|infoStream
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|status
return|;
block|}
comment|/** Visits all terms in the range minTerm (inclusive) to maxTerm (exclusive), marking all doc IDs encountered into allDocsSeen, and    *  returning the total number of terms visited. */
DECL|method|getDocsFromTermRange
specifier|private
specifier|static
name|long
name|getDocsFromTermRange
parameter_list|(
name|String
name|field
parameter_list|,
name|int
name|maxDoc
parameter_list|,
name|TermsEnum
name|termsEnum
parameter_list|,
name|FixedBitSet
name|docsSeen
parameter_list|,
name|BytesRef
name|minTerm
parameter_list|,
name|BytesRef
name|maxTerm
parameter_list|,
name|boolean
name|isIntersect
parameter_list|)
throws|throws
name|IOException
block|{
name|docsSeen
operator|.
name|clear
argument_list|(
literal|0
argument_list|,
name|docsSeen
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|termCount
init|=
literal|0
decl_stmt|;
name|PostingsEnum
name|postingsEnum
init|=
literal|null
decl_stmt|;
name|BytesRefBuilder
name|lastTerm
init|=
literal|null
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|BytesRef
name|term
decl_stmt|;
comment|// Kinda messy: for intersect, we must first next(), but for "normal", we are already on our first term:
if|if
condition|(
name|isIntersect
operator|||
name|termCount
operator|!=
literal|0
condition|)
block|{
name|term
operator|=
name|termsEnum
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|term
operator|=
name|termsEnum
operator|.
name|term
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|term
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|isIntersect
operator|==
literal|false
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"didn't see max term field="
operator|+
name|field
operator|+
literal|" term="
operator|+
name|maxTerm
argument_list|)
throw|;
block|}
comment|//System.out.println("      terms=" + termCount);
return|return
name|termCount
return|;
block|}
assert|assert
name|term
operator|.
name|isValid
argument_list|()
assert|;
if|if
condition|(
name|lastTerm
operator|==
literal|null
condition|)
block|{
name|lastTerm
operator|=
operator|new
name|BytesRefBuilder
argument_list|()
expr_stmt|;
name|lastTerm
operator|.
name|copyBytes
argument_list|(
name|term
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|lastTerm
operator|.
name|get
argument_list|()
operator|.
name|compareTo
argument_list|(
name|term
argument_list|)
operator|>=
literal|0
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"terms out of order: lastTerm="
operator|+
name|lastTerm
operator|.
name|get
argument_list|()
operator|+
literal|" term="
operator|+
name|term
argument_list|)
throw|;
block|}
name|lastTerm
operator|.
name|copyBytes
argument_list|(
name|term
argument_list|)
expr_stmt|;
block|}
comment|//System.out.println("    term=" + term);
comment|// Caller already ensured terms enum positioned>= minTerm:
if|if
condition|(
name|term
operator|.
name|compareTo
argument_list|(
name|minTerm
argument_list|)
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"saw term before min term field="
operator|+
name|field
operator|+
literal|" term="
operator|+
name|minTerm
argument_list|)
throw|;
block|}
if|if
condition|(
name|isIntersect
operator|==
literal|false
condition|)
block|{
name|int
name|cmp
init|=
name|term
operator|.
name|compareTo
argument_list|(
name|maxTerm
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|==
literal|0
condition|)
block|{
comment|// Done!
comment|//System.out.println("      terms=" + termCount);
return|return
name|termCount
return|;
block|}
elseif|else
if|if
condition|(
name|cmp
operator|>
literal|0
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"didn't see end term field="
operator|+
name|field
operator|+
literal|" term="
operator|+
name|maxTerm
argument_list|)
throw|;
block|}
block|}
name|postingsEnum
operator|=
name|termsEnum
operator|.
name|postings
argument_list|(
name|postingsEnum
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|int
name|lastDoc
init|=
operator|-
literal|1
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|int
name|doc
init|=
name|postingsEnum
operator|.
name|nextDoc
argument_list|()
decl_stmt|;
if|if
condition|(
name|doc
operator|==
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
condition|)
block|{
break|break;
block|}
if|if
condition|(
name|doc
operator|<=
name|lastDoc
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"term "
operator|+
name|term
operator|+
literal|": doc "
operator|+
name|doc
operator|+
literal|"<= lastDoc "
operator|+
name|lastDoc
argument_list|)
throw|;
block|}
if|if
condition|(
name|doc
operator|>=
name|maxDoc
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"term "
operator|+
name|term
operator|+
literal|": doc "
operator|+
name|doc
operator|+
literal|">= maxDoc "
operator|+
name|maxDoc
argument_list|)
throw|;
block|}
comment|//System.out.println("      doc=" + doc);
name|docsSeen
operator|.
name|set
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|lastDoc
operator|=
name|doc
expr_stmt|;
block|}
name|termCount
operator|++
expr_stmt|;
block|}
block|}
comment|/** Test Terms.intersect on this range, and validates that it returns the same doc ids as using non-intersect TermsEnum.  Returns true if    *  any fake terms were seen. */
DECL|method|checkSingleTermRange
specifier|private
specifier|static
name|boolean
name|checkSingleTermRange
parameter_list|(
name|String
name|field
parameter_list|,
name|int
name|maxDoc
parameter_list|,
name|Terms
name|terms
parameter_list|,
name|BytesRef
name|minTerm
parameter_list|,
name|BytesRef
name|maxTerm
parameter_list|,
name|FixedBitSet
name|normalDocs
parameter_list|,
name|FixedBitSet
name|intersectDocs
parameter_list|)
throws|throws
name|IOException
block|{
comment|//System.out.println("    check minTerm=" + minTerm.utf8ToString() + " maxTerm=" + maxTerm.utf8ToString());
assert|assert
name|minTerm
operator|.
name|compareTo
argument_list|(
name|maxTerm
argument_list|)
operator|<=
literal|0
assert|;
name|TermsEnum
name|termsEnum
init|=
name|terms
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|TermsEnum
operator|.
name|SeekStatus
name|status
init|=
name|termsEnum
operator|.
name|seekCeil
argument_list|(
name|minTerm
argument_list|)
decl_stmt|;
if|if
condition|(
name|status
operator|!=
name|TermsEnum
operator|.
name|SeekStatus
operator|.
name|FOUND
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"failed to seek to existing term field="
operator|+
name|field
operator|+
literal|" term="
operator|+
name|minTerm
argument_list|)
throw|;
block|}
comment|// Do "dumb" iteration to visit all terms in the range:
name|long
name|normalTermCount
init|=
name|getDocsFromTermRange
argument_list|(
name|field
argument_list|,
name|maxDoc
argument_list|,
name|termsEnum
argument_list|,
name|normalDocs
argument_list|,
name|minTerm
argument_list|,
name|maxTerm
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// Now do the same operation using intersect:
name|long
name|intersectTermCount
init|=
name|getDocsFromTermRange
argument_list|(
name|field
argument_list|,
name|maxDoc
argument_list|,
name|terms
operator|.
name|intersect
argument_list|(
operator|new
name|CompiledAutomaton
argument_list|(
name|Automata
operator|.
name|makeBinaryInterval
argument_list|(
name|minTerm
argument_list|,
literal|true
argument_list|,
name|maxTerm
argument_list|,
literal|false
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
literal|true
argument_list|)
argument_list|,
literal|null
argument_list|)
argument_list|,
name|intersectDocs
argument_list|,
name|minTerm
argument_list|,
name|maxTerm
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|intersectTermCount
operator|>
name|normalTermCount
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"intersect returned too many terms: field="
operator|+
name|field
operator|+
literal|" intersectTermCount="
operator|+
name|intersectTermCount
operator|+
literal|" normalTermCount="
operator|+
name|normalTermCount
argument_list|)
throw|;
block|}
if|if
condition|(
name|normalDocs
operator|.
name|equals
argument_list|(
name|intersectDocs
argument_list|)
operator|==
literal|false
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"intersect visited different docs than straight terms enum: "
operator|+
name|normalDocs
operator|.
name|cardinality
argument_list|()
operator|+
literal|" for straight enum, vs "
operator|+
name|intersectDocs
operator|.
name|cardinality
argument_list|()
operator|+
literal|" for intersect, minTerm="
operator|+
name|minTerm
operator|+
literal|" maxTerm="
operator|+
name|maxTerm
argument_list|)
throw|;
block|}
comment|//System.out.println("      docs=" + normalTermCount);
comment|//System.out.println("    " + intersectTermCount + " vs " + normalTermCount);
return|return
name|intersectTermCount
operator|!=
name|normalTermCount
return|;
block|}
comment|/** Make an effort to visit "fake" (e.g. auto-prefix) terms.  We do this by running term range intersections across an initially wide    *  interval of terms, at different boundaries, and then gradually decrease the interval.  This is not guaranteed to hit all non-real    *  terms (doing that in general is non-trivial), but it should hit many of them, and validate their postings against the postings for the    *  real terms. */
DECL|method|checkTermRanges
specifier|private
specifier|static
name|void
name|checkTermRanges
parameter_list|(
name|String
name|field
parameter_list|,
name|int
name|maxDoc
parameter_list|,
name|Terms
name|terms
parameter_list|,
name|long
name|numTerms
parameter_list|)
throws|throws
name|IOException
block|{
comment|// We'll target this many terms in our interval for the current level:
name|double
name|currentInterval
init|=
name|numTerms
decl_stmt|;
name|FixedBitSet
name|normalDocs
init|=
operator|new
name|FixedBitSet
argument_list|(
name|maxDoc
argument_list|)
decl_stmt|;
name|FixedBitSet
name|intersectDocs
init|=
operator|new
name|FixedBitSet
argument_list|(
name|maxDoc
argument_list|)
decl_stmt|;
comment|//System.out.println("CI.checkTermRanges field=" + field + " numTerms=" + numTerms);
while|while
condition|(
name|currentInterval
operator|>=
literal|10.0
condition|)
block|{
comment|//System.out.println("  cycle interval=" + currentInterval);
comment|// We iterate this terms enum to locate min/max term for each sliding/overlapping interval we test at the current level:
name|TermsEnum
name|termsEnum
init|=
name|terms
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|long
name|termCount
init|=
literal|0
decl_stmt|;
name|Deque
argument_list|<
name|BytesRef
argument_list|>
name|termBounds
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
name|long
name|lastTermAdded
init|=
name|Long
operator|.
name|MIN_VALUE
decl_stmt|;
name|BytesRefBuilder
name|lastTerm
init|=
literal|null
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|BytesRef
name|term
init|=
name|termsEnum
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|term
operator|==
literal|null
condition|)
block|{
break|break;
block|}
comment|//System.out.println("  top: term=" + term.utf8ToString());
if|if
condition|(
name|termCount
operator|>=
name|lastTermAdded
operator|+
name|currentInterval
operator|/
literal|4
condition|)
block|{
name|termBounds
operator|.
name|add
argument_list|(
name|BytesRef
operator|.
name|deepCopyOf
argument_list|(
name|term
argument_list|)
argument_list|)
expr_stmt|;
name|lastTermAdded
operator|=
name|termCount
expr_stmt|;
if|if
condition|(
name|termBounds
operator|.
name|size
argument_list|()
operator|==
literal|5
condition|)
block|{
name|BytesRef
name|minTerm
init|=
name|termBounds
operator|.
name|removeFirst
argument_list|()
decl_stmt|;
name|BytesRef
name|maxTerm
init|=
name|termBounds
operator|.
name|getLast
argument_list|()
decl_stmt|;
name|checkSingleTermRange
argument_list|(
name|field
argument_list|,
name|maxDoc
argument_list|,
name|terms
argument_list|,
name|minTerm
argument_list|,
name|maxTerm
argument_list|,
name|normalDocs
argument_list|,
name|intersectDocs
argument_list|)
expr_stmt|;
block|}
block|}
name|termCount
operator|++
expr_stmt|;
if|if
condition|(
name|lastTerm
operator|==
literal|null
condition|)
block|{
name|lastTerm
operator|=
operator|new
name|BytesRefBuilder
argument_list|()
expr_stmt|;
name|lastTerm
operator|.
name|copyBytes
argument_list|(
name|term
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|lastTerm
operator|.
name|get
argument_list|()
operator|.
name|compareTo
argument_list|(
name|term
argument_list|)
operator|>=
literal|0
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"terms out of order: lastTerm="
operator|+
name|lastTerm
operator|.
name|get
argument_list|()
operator|+
literal|" term="
operator|+
name|term
argument_list|)
throw|;
block|}
name|lastTerm
operator|.
name|copyBytes
argument_list|(
name|term
argument_list|)
expr_stmt|;
block|}
block|}
comment|//System.out.println("    count=" + termCount);
if|if
condition|(
name|lastTerm
operator|!=
literal|null
operator|&&
name|termBounds
operator|.
name|isEmpty
argument_list|()
operator|==
literal|false
condition|)
block|{
name|BytesRef
name|minTerm
init|=
name|termBounds
operator|.
name|removeFirst
argument_list|()
decl_stmt|;
name|BytesRef
name|maxTerm
init|=
name|lastTerm
operator|.
name|get
argument_list|()
decl_stmt|;
name|checkSingleTermRange
argument_list|(
name|field
argument_list|,
name|maxDoc
argument_list|,
name|terms
argument_list|,
name|minTerm
argument_list|,
name|maxTerm
argument_list|,
name|normalDocs
argument_list|,
name|intersectDocs
argument_list|)
expr_stmt|;
block|}
name|currentInterval
operator|*=
literal|.75
expr_stmt|;
block|}
block|}
comment|/**    * checks Fields api is consistent with itself.    * searcher is optional, to verify with queries. Can be null.    */
DECL|method|checkFields
specifier|private
specifier|static
name|Status
operator|.
name|TermIndexStatus
name|checkFields
parameter_list|(
name|Fields
name|fields
parameter_list|,
name|Bits
name|liveDocs
parameter_list|,
name|int
name|maxDoc
parameter_list|,
name|FieldInfos
name|fieldInfos
parameter_list|,
name|boolean
name|doPrint
parameter_list|,
name|boolean
name|isVectors
parameter_list|,
name|PrintStream
name|infoStream
parameter_list|,
name|boolean
name|verbose
parameter_list|)
throws|throws
name|IOException
block|{
comment|// TODO: we should probably return our own stats thing...?!
name|long
name|startNS
decl_stmt|;
if|if
condition|(
name|doPrint
condition|)
block|{
name|startNS
operator|=
name|System
operator|.
name|nanoTime
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|startNS
operator|=
literal|0
expr_stmt|;
block|}
specifier|final
name|Status
operator|.
name|TermIndexStatus
name|status
init|=
operator|new
name|Status
operator|.
name|TermIndexStatus
argument_list|()
decl_stmt|;
name|int
name|computedFieldCount
init|=
literal|0
decl_stmt|;
name|PostingsEnum
name|postings
init|=
literal|null
decl_stmt|;
name|String
name|lastField
init|=
literal|null
decl_stmt|;
for|for
control|(
name|String
name|field
range|:
name|fields
control|)
block|{
comment|// MultiFieldsEnum relies upon this order...
if|if
condition|(
name|lastField
operator|!=
literal|null
operator|&&
name|field
operator|.
name|compareTo
argument_list|(
name|lastField
argument_list|)
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"fields out of order: lastField="
operator|+
name|lastField
operator|+
literal|" field="
operator|+
name|field
argument_list|)
throw|;
block|}
name|lastField
operator|=
name|field
expr_stmt|;
comment|// check that the field is in fieldinfos, and is indexed.
comment|// TODO: add a separate test to check this for different reader impls
name|FieldInfo
name|fieldInfo
init|=
name|fieldInfos
operator|.
name|fieldInfo
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|fieldInfo
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"fieldsEnum inconsistent with fieldInfos, no fieldInfos for: "
operator|+
name|field
argument_list|)
throw|;
block|}
if|if
condition|(
name|fieldInfo
operator|.
name|getIndexOptions
argument_list|()
operator|==
name|IndexOptions
operator|.
name|NONE
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"fieldsEnum inconsistent with fieldInfos, isIndexed == false for: "
operator|+
name|field
argument_list|)
throw|;
block|}
comment|// TODO: really the codec should not return a field
comment|// from FieldsEnum if it has no Terms... but we do
comment|// this today:
comment|// assert fields.terms(field) != null;
name|computedFieldCount
operator|++
expr_stmt|;
specifier|final
name|Terms
name|terms
init|=
name|fields
operator|.
name|terms
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|terms
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
specifier|final
name|boolean
name|hasFreqs
init|=
name|terms
operator|.
name|hasFreqs
argument_list|()
decl_stmt|;
specifier|final
name|boolean
name|hasPositions
init|=
name|terms
operator|.
name|hasPositions
argument_list|()
decl_stmt|;
specifier|final
name|boolean
name|hasPayloads
init|=
name|terms
operator|.
name|hasPayloads
argument_list|()
decl_stmt|;
specifier|final
name|boolean
name|hasOffsets
init|=
name|terms
operator|.
name|hasOffsets
argument_list|()
decl_stmt|;
name|BytesRef
name|maxTerm
decl_stmt|;
name|BytesRef
name|minTerm
decl_stmt|;
if|if
condition|(
name|isVectors
condition|)
block|{
comment|// Term vectors impls can be very slow for getMax
name|maxTerm
operator|=
literal|null
expr_stmt|;
name|minTerm
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|BytesRef
name|bb
init|=
name|terms
operator|.
name|getMin
argument_list|()
decl_stmt|;
if|if
condition|(
name|bb
operator|!=
literal|null
condition|)
block|{
assert|assert
name|bb
operator|.
name|isValid
argument_list|()
assert|;
name|minTerm
operator|=
name|BytesRef
operator|.
name|deepCopyOf
argument_list|(
name|bb
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|minTerm
operator|=
literal|null
expr_stmt|;
block|}
name|bb
operator|=
name|terms
operator|.
name|getMax
argument_list|()
expr_stmt|;
if|if
condition|(
name|bb
operator|!=
literal|null
condition|)
block|{
assert|assert
name|bb
operator|.
name|isValid
argument_list|()
assert|;
name|maxTerm
operator|=
name|BytesRef
operator|.
name|deepCopyOf
argument_list|(
name|bb
argument_list|)
expr_stmt|;
if|if
condition|(
name|minTerm
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"field \""
operator|+
name|field
operator|+
literal|"\" has null minTerm but non-null maxTerm"
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|maxTerm
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|minTerm
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"field \""
operator|+
name|field
operator|+
literal|"\" has non-null minTerm but null maxTerm"
argument_list|)
throw|;
block|}
block|}
block|}
comment|// term vectors cannot omit TF:
specifier|final
name|boolean
name|expectedHasFreqs
init|=
operator|(
name|isVectors
operator|||
name|fieldInfo
operator|.
name|getIndexOptions
argument_list|()
operator|.
name|compareTo
argument_list|(
name|IndexOptions
operator|.
name|DOCS_AND_FREQS
argument_list|)
operator|>=
literal|0
operator|)
decl_stmt|;
if|if
condition|(
name|hasFreqs
operator|!=
name|expectedHasFreqs
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"field \""
operator|+
name|field
operator|+
literal|"\" should have hasFreqs="
operator|+
name|expectedHasFreqs
operator|+
literal|" but got "
operator|+
name|hasFreqs
argument_list|)
throw|;
block|}
if|if
condition|(
name|hasFreqs
operator|==
literal|false
condition|)
block|{
if|if
condition|(
name|terms
operator|.
name|getSumTotalTermFreq
argument_list|()
operator|!=
operator|-
literal|1
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"field \""
operator|+
name|field
operator|+
literal|"\" hasFreqs is false, but Terms.getSumTotalTermFreq()="
operator|+
name|terms
operator|.
name|getSumTotalTermFreq
argument_list|()
operator|+
literal|" (should be -1)"
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
operator|!
name|isVectors
condition|)
block|{
specifier|final
name|boolean
name|expectedHasPositions
init|=
name|fieldInfo
operator|.
name|getIndexOptions
argument_list|()
operator|.
name|compareTo
argument_list|(
name|IndexOptions
operator|.
name|DOCS_AND_FREQS_AND_POSITIONS
argument_list|)
operator|>=
literal|0
decl_stmt|;
if|if
condition|(
name|hasPositions
operator|!=
name|expectedHasPositions
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"field \""
operator|+
name|field
operator|+
literal|"\" should have hasPositions="
operator|+
name|expectedHasPositions
operator|+
literal|" but got "
operator|+
name|hasPositions
argument_list|)
throw|;
block|}
specifier|final
name|boolean
name|expectedHasPayloads
init|=
name|fieldInfo
operator|.
name|hasPayloads
argument_list|()
decl_stmt|;
if|if
condition|(
name|hasPayloads
operator|!=
name|expectedHasPayloads
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"field \""
operator|+
name|field
operator|+
literal|"\" should have hasPayloads="
operator|+
name|expectedHasPayloads
operator|+
literal|" but got "
operator|+
name|hasPayloads
argument_list|)
throw|;
block|}
specifier|final
name|boolean
name|expectedHasOffsets
init|=
name|fieldInfo
operator|.
name|getIndexOptions
argument_list|()
operator|.
name|compareTo
argument_list|(
name|IndexOptions
operator|.
name|DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS
argument_list|)
operator|>=
literal|0
decl_stmt|;
if|if
condition|(
name|hasOffsets
operator|!=
name|expectedHasOffsets
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"field \""
operator|+
name|field
operator|+
literal|"\" should have hasOffsets="
operator|+
name|expectedHasOffsets
operator|+
literal|" but got "
operator|+
name|hasOffsets
argument_list|)
throw|;
block|}
block|}
specifier|final
name|TermsEnum
name|termsEnum
init|=
name|terms
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|boolean
name|hasOrd
init|=
literal|true
decl_stmt|;
specifier|final
name|long
name|termCountStart
init|=
name|status
operator|.
name|delTermCount
operator|+
name|status
operator|.
name|termCount
decl_stmt|;
name|BytesRefBuilder
name|lastTerm
init|=
literal|null
decl_stmt|;
name|long
name|sumTotalTermFreq
init|=
literal|0
decl_stmt|;
name|long
name|sumDocFreq
init|=
literal|0
decl_stmt|;
name|FixedBitSet
name|visitedDocs
init|=
operator|new
name|FixedBitSet
argument_list|(
name|maxDoc
argument_list|)
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
specifier|final
name|BytesRef
name|term
init|=
name|termsEnum
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|term
operator|==
literal|null
condition|)
block|{
break|break;
block|}
comment|// System.out.println("CI: field=" + field + " check term=" + term + " docFreq=" + termsEnum.docFreq());
assert|assert
name|term
operator|.
name|isValid
argument_list|()
assert|;
comment|// make sure terms arrive in order according to
comment|// the comp
if|if
condition|(
name|lastTerm
operator|==
literal|null
condition|)
block|{
name|lastTerm
operator|=
operator|new
name|BytesRefBuilder
argument_list|()
expr_stmt|;
name|lastTerm
operator|.
name|copyBytes
argument_list|(
name|term
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|lastTerm
operator|.
name|get
argument_list|()
operator|.
name|compareTo
argument_list|(
name|term
argument_list|)
operator|>=
literal|0
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"terms out of order: lastTerm="
operator|+
name|lastTerm
operator|.
name|get
argument_list|()
operator|+
literal|" term="
operator|+
name|term
argument_list|)
throw|;
block|}
name|lastTerm
operator|.
name|copyBytes
argument_list|(
name|term
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isVectors
operator|==
literal|false
condition|)
block|{
if|if
condition|(
name|minTerm
operator|==
literal|null
condition|)
block|{
comment|// We checked this above:
assert|assert
name|maxTerm
operator|==
literal|null
assert|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"field=\""
operator|+
name|field
operator|+
literal|"\": invalid term: term="
operator|+
name|term
operator|+
literal|", minTerm="
operator|+
name|minTerm
argument_list|)
throw|;
block|}
if|if
condition|(
name|term
operator|.
name|compareTo
argument_list|(
name|minTerm
argument_list|)
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"field=\""
operator|+
name|field
operator|+
literal|"\": invalid term: term="
operator|+
name|term
operator|+
literal|", minTerm="
operator|+
name|minTerm
argument_list|)
throw|;
block|}
if|if
condition|(
name|term
operator|.
name|compareTo
argument_list|(
name|maxTerm
argument_list|)
operator|>
literal|0
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"field=\""
operator|+
name|field
operator|+
literal|"\": invalid term: term="
operator|+
name|term
operator|+
literal|", maxTerm="
operator|+
name|maxTerm
argument_list|)
throw|;
block|}
block|}
specifier|final
name|int
name|docFreq
init|=
name|termsEnum
operator|.
name|docFreq
argument_list|()
decl_stmt|;
if|if
condition|(
name|docFreq
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"docfreq: "
operator|+
name|docFreq
operator|+
literal|" is out of bounds"
argument_list|)
throw|;
block|}
name|sumDocFreq
operator|+=
name|docFreq
expr_stmt|;
name|postings
operator|=
name|termsEnum
operator|.
name|postings
argument_list|(
name|postings
argument_list|,
name|PostingsEnum
operator|.
name|ALL
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasFreqs
operator|==
literal|false
condition|)
block|{
if|if
condition|(
name|termsEnum
operator|.
name|totalTermFreq
argument_list|()
operator|!=
operator|-
literal|1
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"field \""
operator|+
name|field
operator|+
literal|"\" hasFreqs is false, but TermsEnum.totalTermFreq()="
operator|+
name|termsEnum
operator|.
name|totalTermFreq
argument_list|()
operator|+
literal|" (should be -1)"
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|hasOrd
condition|)
block|{
name|long
name|ord
init|=
operator|-
literal|1
decl_stmt|;
try|try
block|{
name|ord
operator|=
name|termsEnum
operator|.
name|ord
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|uoe
parameter_list|)
block|{
name|hasOrd
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|hasOrd
condition|)
block|{
specifier|final
name|long
name|ordExpected
init|=
name|status
operator|.
name|delTermCount
operator|+
name|status
operator|.
name|termCount
operator|-
name|termCountStart
decl_stmt|;
if|if
condition|(
name|ord
operator|!=
name|ordExpected
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"ord mismatch: TermsEnum has ord="
operator|+
name|ord
operator|+
literal|" vs actual="
operator|+
name|ordExpected
argument_list|)
throw|;
block|}
block|}
block|}
name|int
name|lastDoc
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|docCount
init|=
literal|0
decl_stmt|;
name|boolean
name|hasNonDeletedDocs
init|=
literal|false
decl_stmt|;
name|long
name|totalTermFreq
init|=
literal|0
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
specifier|final
name|int
name|doc
init|=
name|postings
operator|.
name|nextDoc
argument_list|()
decl_stmt|;
if|if
condition|(
name|doc
operator|==
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
condition|)
block|{
break|break;
block|}
name|visitedDocs
operator|.
name|set
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|int
name|freq
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|hasFreqs
condition|)
block|{
name|freq
operator|=
name|postings
operator|.
name|freq
argument_list|()
expr_stmt|;
if|if
condition|(
name|freq
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"term "
operator|+
name|term
operator|+
literal|": doc "
operator|+
name|doc
operator|+
literal|": freq "
operator|+
name|freq
operator|+
literal|" is out of bounds"
argument_list|)
throw|;
block|}
name|totalTermFreq
operator|+=
name|freq
expr_stmt|;
block|}
else|else
block|{
comment|// When a field didn't index freq, it must
comment|// consistently "lie" and pretend that freq was
comment|// 1:
if|if
condition|(
name|postings
operator|.
name|freq
argument_list|()
operator|!=
literal|1
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"term "
operator|+
name|term
operator|+
literal|": doc "
operator|+
name|doc
operator|+
literal|": freq "
operator|+
name|freq
operator|+
literal|" != 1 when Terms.hasFreqs() is false"
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|liveDocs
operator|==
literal|null
operator|||
name|liveDocs
operator|.
name|get
argument_list|(
name|doc
argument_list|)
condition|)
block|{
name|hasNonDeletedDocs
operator|=
literal|true
expr_stmt|;
name|status
operator|.
name|totFreq
operator|++
expr_stmt|;
if|if
condition|(
name|freq
operator|>=
literal|0
condition|)
block|{
name|status
operator|.
name|totPos
operator|+=
name|freq
expr_stmt|;
block|}
block|}
name|docCount
operator|++
expr_stmt|;
if|if
condition|(
name|doc
operator|<=
name|lastDoc
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"term "
operator|+
name|term
operator|+
literal|": doc "
operator|+
name|doc
operator|+
literal|"<= lastDoc "
operator|+
name|lastDoc
argument_list|)
throw|;
block|}
if|if
condition|(
name|doc
operator|>=
name|maxDoc
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"term "
operator|+
name|term
operator|+
literal|": doc "
operator|+
name|doc
operator|+
literal|">= maxDoc "
operator|+
name|maxDoc
argument_list|)
throw|;
block|}
name|lastDoc
operator|=
name|doc
expr_stmt|;
name|int
name|lastPos
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|lastOffset
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|hasPositions
condition|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|freq
condition|;
name|j
operator|++
control|)
block|{
specifier|final
name|int
name|pos
init|=
name|postings
operator|.
name|nextPosition
argument_list|()
decl_stmt|;
if|if
condition|(
name|pos
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"term "
operator|+
name|term
operator|+
literal|": doc "
operator|+
name|doc
operator|+
literal|": pos "
operator|+
name|pos
operator|+
literal|" is out of bounds"
argument_list|)
throw|;
block|}
if|if
condition|(
name|pos
operator|>
name|IndexWriter
operator|.
name|MAX_POSITION
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"term "
operator|+
name|term
operator|+
literal|": doc "
operator|+
name|doc
operator|+
literal|": pos "
operator|+
name|pos
operator|+
literal|"> IndexWriter.MAX_POSITION="
operator|+
name|IndexWriter
operator|.
name|MAX_POSITION
argument_list|)
throw|;
block|}
if|if
condition|(
name|pos
operator|<
name|lastPos
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"term "
operator|+
name|term
operator|+
literal|": doc "
operator|+
name|doc
operator|+
literal|": pos "
operator|+
name|pos
operator|+
literal|"< lastPos "
operator|+
name|lastPos
argument_list|)
throw|;
block|}
name|lastPos
operator|=
name|pos
expr_stmt|;
name|BytesRef
name|payload
init|=
name|postings
operator|.
name|getPayload
argument_list|()
decl_stmt|;
if|if
condition|(
name|payload
operator|!=
literal|null
condition|)
block|{
assert|assert
name|payload
operator|.
name|isValid
argument_list|()
assert|;
block|}
if|if
condition|(
name|payload
operator|!=
literal|null
operator|&&
name|payload
operator|.
name|length
operator|<
literal|1
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"term "
operator|+
name|term
operator|+
literal|": doc "
operator|+
name|doc
operator|+
literal|": pos "
operator|+
name|pos
operator|+
literal|" payload length is out of bounds "
operator|+
name|payload
operator|.
name|length
argument_list|)
throw|;
block|}
if|if
condition|(
name|hasOffsets
condition|)
block|{
name|int
name|startOffset
init|=
name|postings
operator|.
name|startOffset
argument_list|()
decl_stmt|;
name|int
name|endOffset
init|=
name|postings
operator|.
name|endOffset
argument_list|()
decl_stmt|;
comment|// NOTE: we cannot enforce any bounds whatsoever on vectors... they were a free-for-all before?
comment|// but for offsets in the postings lists these checks are fine: they were always enforced by IndexWriter
if|if
condition|(
operator|!
name|isVectors
condition|)
block|{
if|if
condition|(
name|startOffset
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"term "
operator|+
name|term
operator|+
literal|": doc "
operator|+
name|doc
operator|+
literal|": pos "
operator|+
name|pos
operator|+
literal|": startOffset "
operator|+
name|startOffset
operator|+
literal|" is out of bounds"
argument_list|)
throw|;
block|}
if|if
condition|(
name|startOffset
operator|<
name|lastOffset
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"term "
operator|+
name|term
operator|+
literal|": doc "
operator|+
name|doc
operator|+
literal|": pos "
operator|+
name|pos
operator|+
literal|": startOffset "
operator|+
name|startOffset
operator|+
literal|"< lastStartOffset "
operator|+
name|lastOffset
argument_list|)
throw|;
block|}
if|if
condition|(
name|endOffset
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"term "
operator|+
name|term
operator|+
literal|": doc "
operator|+
name|doc
operator|+
literal|": pos "
operator|+
name|pos
operator|+
literal|": endOffset "
operator|+
name|endOffset
operator|+
literal|" is out of bounds"
argument_list|)
throw|;
block|}
if|if
condition|(
name|endOffset
operator|<
name|startOffset
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"term "
operator|+
name|term
operator|+
literal|": doc "
operator|+
name|doc
operator|+
literal|": pos "
operator|+
name|pos
operator|+
literal|": endOffset "
operator|+
name|endOffset
operator|+
literal|"< startOffset "
operator|+
name|startOffset
argument_list|)
throw|;
block|}
block|}
name|lastOffset
operator|=
name|startOffset
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|hasNonDeletedDocs
condition|)
block|{
name|status
operator|.
name|termCount
operator|++
expr_stmt|;
block|}
else|else
block|{
name|status
operator|.
name|delTermCount
operator|++
expr_stmt|;
block|}
specifier|final
name|long
name|totalTermFreq2
init|=
name|termsEnum
operator|.
name|totalTermFreq
argument_list|()
decl_stmt|;
specifier|final
name|boolean
name|hasTotalTermFreq
init|=
name|hasFreqs
operator|&&
name|totalTermFreq2
operator|!=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|docCount
operator|!=
name|docFreq
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"term "
operator|+
name|term
operator|+
literal|" docFreq="
operator|+
name|docFreq
operator|+
literal|" != tot docs w/o deletions "
operator|+
name|docCount
argument_list|)
throw|;
block|}
if|if
condition|(
name|hasTotalTermFreq
condition|)
block|{
if|if
condition|(
name|totalTermFreq2
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"totalTermFreq: "
operator|+
name|totalTermFreq2
operator|+
literal|" is out of bounds"
argument_list|)
throw|;
block|}
name|sumTotalTermFreq
operator|+=
name|totalTermFreq
expr_stmt|;
if|if
condition|(
name|totalTermFreq
operator|!=
name|totalTermFreq2
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"term "
operator|+
name|term
operator|+
literal|" totalTermFreq="
operator|+
name|totalTermFreq2
operator|+
literal|" != recomputed totalTermFreq="
operator|+
name|totalTermFreq
argument_list|)
throw|;
block|}
block|}
comment|// Test skipping
if|if
condition|(
name|hasPositions
condition|)
block|{
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
literal|7
condition|;
name|idx
operator|++
control|)
block|{
specifier|final
name|int
name|skipDocID
init|=
call|(
name|int
call|)
argument_list|(
operator|(
operator|(
name|idx
operator|+
literal|1
operator|)
operator|*
operator|(
name|long
operator|)
name|maxDoc
operator|)
operator|/
literal|8
argument_list|)
decl_stmt|;
name|postings
operator|=
name|termsEnum
operator|.
name|postings
argument_list|(
name|postings
argument_list|,
name|PostingsEnum
operator|.
name|ALL
argument_list|)
expr_stmt|;
specifier|final
name|int
name|docID
init|=
name|postings
operator|.
name|advance
argument_list|(
name|skipDocID
argument_list|)
decl_stmt|;
if|if
condition|(
name|docID
operator|==
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
condition|)
block|{
break|break;
block|}
else|else
block|{
if|if
condition|(
name|docID
operator|<
name|skipDocID
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"term "
operator|+
name|term
operator|+
literal|": advance(docID="
operator|+
name|skipDocID
operator|+
literal|") returned docID="
operator|+
name|docID
argument_list|)
throw|;
block|}
specifier|final
name|int
name|freq
init|=
name|postings
operator|.
name|freq
argument_list|()
decl_stmt|;
if|if
condition|(
name|freq
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"termFreq "
operator|+
name|freq
operator|+
literal|" is out of bounds"
argument_list|)
throw|;
block|}
name|int
name|lastPosition
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|lastOffset
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|posUpto
init|=
literal|0
init|;
name|posUpto
operator|<
name|freq
condition|;
name|posUpto
operator|++
control|)
block|{
specifier|final
name|int
name|pos
init|=
name|postings
operator|.
name|nextPosition
argument_list|()
decl_stmt|;
if|if
condition|(
name|pos
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"position "
operator|+
name|pos
operator|+
literal|" is out of bounds"
argument_list|)
throw|;
block|}
if|if
condition|(
name|pos
operator|<
name|lastPosition
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"position "
operator|+
name|pos
operator|+
literal|" is< lastPosition "
operator|+
name|lastPosition
argument_list|)
throw|;
block|}
name|lastPosition
operator|=
name|pos
expr_stmt|;
if|if
condition|(
name|hasOffsets
condition|)
block|{
name|int
name|startOffset
init|=
name|postings
operator|.
name|startOffset
argument_list|()
decl_stmt|;
name|int
name|endOffset
init|=
name|postings
operator|.
name|endOffset
argument_list|()
decl_stmt|;
comment|// NOTE: we cannot enforce any bounds whatsoever on vectors... they were a free-for-all before?
comment|// but for offsets in the postings lists these checks are fine: they were always enforced by IndexWriter
if|if
condition|(
operator|!
name|isVectors
condition|)
block|{
if|if
condition|(
name|startOffset
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"term "
operator|+
name|term
operator|+
literal|": doc "
operator|+
name|docID
operator|+
literal|": pos "
operator|+
name|pos
operator|+
literal|": startOffset "
operator|+
name|startOffset
operator|+
literal|" is out of bounds"
argument_list|)
throw|;
block|}
if|if
condition|(
name|startOffset
operator|<
name|lastOffset
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"term "
operator|+
name|term
operator|+
literal|": doc "
operator|+
name|docID
operator|+
literal|": pos "
operator|+
name|pos
operator|+
literal|": startOffset "
operator|+
name|startOffset
operator|+
literal|"< lastStartOffset "
operator|+
name|lastOffset
argument_list|)
throw|;
block|}
if|if
condition|(
name|endOffset
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"term "
operator|+
name|term
operator|+
literal|": doc "
operator|+
name|docID
operator|+
literal|": pos "
operator|+
name|pos
operator|+
literal|": endOffset "
operator|+
name|endOffset
operator|+
literal|" is out of bounds"
argument_list|)
throw|;
block|}
if|if
condition|(
name|endOffset
operator|<
name|startOffset
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"term "
operator|+
name|term
operator|+
literal|": doc "
operator|+
name|docID
operator|+
literal|": pos "
operator|+
name|pos
operator|+
literal|": endOffset "
operator|+
name|endOffset
operator|+
literal|"< startOffset "
operator|+
name|startOffset
argument_list|)
throw|;
block|}
block|}
name|lastOffset
operator|=
name|startOffset
expr_stmt|;
block|}
block|}
specifier|final
name|int
name|nextDocID
init|=
name|postings
operator|.
name|nextDoc
argument_list|()
decl_stmt|;
if|if
condition|(
name|nextDocID
operator|==
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
condition|)
block|{
break|break;
block|}
if|if
condition|(
name|nextDocID
operator|<=
name|docID
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"term "
operator|+
name|term
operator|+
literal|": advance(docID="
operator|+
name|skipDocID
operator|+
literal|"), then .next() returned docID="
operator|+
name|nextDocID
operator|+
literal|" vs prev docID="
operator|+
name|docID
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|isVectors
condition|)
block|{
comment|// Only 1 doc in the postings for term vectors, so we only test 1 advance:
break|break;
block|}
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
literal|7
condition|;
name|idx
operator|++
control|)
block|{
specifier|final
name|int
name|skipDocID
init|=
call|(
name|int
call|)
argument_list|(
operator|(
operator|(
name|idx
operator|+
literal|1
operator|)
operator|*
operator|(
name|long
operator|)
name|maxDoc
operator|)
operator|/
literal|8
argument_list|)
decl_stmt|;
name|postings
operator|=
name|termsEnum
operator|.
name|postings
argument_list|(
name|postings
argument_list|,
name|PostingsEnum
operator|.
name|NONE
argument_list|)
expr_stmt|;
specifier|final
name|int
name|docID
init|=
name|postings
operator|.
name|advance
argument_list|(
name|skipDocID
argument_list|)
decl_stmt|;
if|if
condition|(
name|docID
operator|==
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
condition|)
block|{
break|break;
block|}
else|else
block|{
if|if
condition|(
name|docID
operator|<
name|skipDocID
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"term "
operator|+
name|term
operator|+
literal|": advance(docID="
operator|+
name|skipDocID
operator|+
literal|") returned docID="
operator|+
name|docID
argument_list|)
throw|;
block|}
specifier|final
name|int
name|nextDocID
init|=
name|postings
operator|.
name|nextDoc
argument_list|()
decl_stmt|;
if|if
condition|(
name|nextDocID
operator|==
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
condition|)
block|{
break|break;
block|}
if|if
condition|(
name|nextDocID
operator|<=
name|docID
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"term "
operator|+
name|term
operator|+
literal|": advance(docID="
operator|+
name|skipDocID
operator|+
literal|"), then .next() returned docID="
operator|+
name|nextDocID
operator|+
literal|" vs prev docID="
operator|+
name|docID
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|isVectors
condition|)
block|{
comment|// Only 1 doc in the postings for term vectors, so we only test 1 advance:
break|break;
block|}
block|}
block|}
block|}
if|if
condition|(
name|minTerm
operator|!=
literal|null
operator|&&
name|status
operator|.
name|termCount
operator|+
name|status
operator|.
name|delTermCount
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"field=\""
operator|+
name|field
operator|+
literal|"\": minTerm is non-null yet we saw no terms: "
operator|+
name|minTerm
argument_list|)
throw|;
block|}
specifier|final
name|Terms
name|fieldTerms
init|=
name|fields
operator|.
name|terms
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|fieldTerms
operator|==
literal|null
condition|)
block|{
comment|// Unusual: the FieldsEnum returned a field but
comment|// the Terms for that field is null; this should
comment|// only happen if it's a ghost field (field with
comment|// no terms, eg there used to be terms but all
comment|// docs got deleted and then merged away):
block|}
else|else
block|{
name|long
name|fieldTermCount
init|=
operator|(
name|status
operator|.
name|delTermCount
operator|+
name|status
operator|.
name|termCount
operator|)
operator|-
name|termCountStart
decl_stmt|;
comment|// LUCENE-5879: this is just too slow for now:
if|if
condition|(
literal|false
operator|&&
name|hasFreqs
operator|==
literal|false
condition|)
block|{
comment|// For DOCS_ONLY fields we recursively test term ranges:
name|checkTermRanges
argument_list|(
name|field
argument_list|,
name|maxDoc
argument_list|,
name|fieldTerms
argument_list|,
name|fieldTermCount
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Object
name|stats
init|=
name|fieldTerms
operator|.
name|getStats
argument_list|()
decl_stmt|;
assert|assert
name|stats
operator|!=
literal|null
assert|;
if|if
condition|(
name|status
operator|.
name|blockTreeStats
operator|==
literal|null
condition|)
block|{
name|status
operator|.
name|blockTreeStats
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|status
operator|.
name|blockTreeStats
operator|.
name|put
argument_list|(
name|field
argument_list|,
name|stats
argument_list|)
expr_stmt|;
if|if
condition|(
name|sumTotalTermFreq
operator|!=
literal|0
condition|)
block|{
specifier|final
name|long
name|v
init|=
name|fields
operator|.
name|terms
argument_list|(
name|field
argument_list|)
operator|.
name|getSumTotalTermFreq
argument_list|()
decl_stmt|;
if|if
condition|(
name|v
operator|!=
operator|-
literal|1
operator|&&
name|sumTotalTermFreq
operator|!=
name|v
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"sumTotalTermFreq for field "
operator|+
name|field
operator|+
literal|"="
operator|+
name|v
operator|+
literal|" != recomputed sumTotalTermFreq="
operator|+
name|sumTotalTermFreq
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|sumDocFreq
operator|!=
literal|0
condition|)
block|{
specifier|final
name|long
name|v
init|=
name|fields
operator|.
name|terms
argument_list|(
name|field
argument_list|)
operator|.
name|getSumDocFreq
argument_list|()
decl_stmt|;
if|if
condition|(
name|v
operator|!=
operator|-
literal|1
operator|&&
name|sumDocFreq
operator|!=
name|v
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"sumDocFreq for field "
operator|+
name|field
operator|+
literal|"="
operator|+
name|v
operator|+
literal|" != recomputed sumDocFreq="
operator|+
name|sumDocFreq
argument_list|)
throw|;
block|}
block|}
specifier|final
name|int
name|v
init|=
name|fieldTerms
operator|.
name|getDocCount
argument_list|()
decl_stmt|;
if|if
condition|(
name|v
operator|!=
operator|-
literal|1
operator|&&
name|visitedDocs
operator|.
name|cardinality
argument_list|()
operator|!=
name|v
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"docCount for field "
operator|+
name|field
operator|+
literal|"="
operator|+
name|v
operator|+
literal|" != recomputed docCount="
operator|+
name|visitedDocs
operator|.
name|cardinality
argument_list|()
argument_list|)
throw|;
block|}
comment|// Test seek to last term:
if|if
condition|(
name|lastTerm
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|termsEnum
operator|.
name|seekCeil
argument_list|(
name|lastTerm
operator|.
name|get
argument_list|()
argument_list|)
operator|!=
name|TermsEnum
operator|.
name|SeekStatus
operator|.
name|FOUND
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"seek to last term "
operator|+
name|lastTerm
operator|.
name|get
argument_list|()
operator|+
literal|" failed"
argument_list|)
throw|;
block|}
if|if
condition|(
name|termsEnum
operator|.
name|term
argument_list|()
operator|.
name|equals
argument_list|(
name|lastTerm
operator|.
name|get
argument_list|()
argument_list|)
operator|==
literal|false
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"seek to last term "
operator|+
name|lastTerm
operator|.
name|get
argument_list|()
operator|+
literal|" returned FOUND but seeked to the wrong term "
operator|+
name|termsEnum
operator|.
name|term
argument_list|()
argument_list|)
throw|;
block|}
name|int
name|expectedDocFreq
init|=
name|termsEnum
operator|.
name|docFreq
argument_list|()
decl_stmt|;
name|PostingsEnum
name|d
init|=
name|termsEnum
operator|.
name|postings
argument_list|(
literal|null
argument_list|,
name|PostingsEnum
operator|.
name|NONE
argument_list|)
decl_stmt|;
name|int
name|docFreq
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|d
operator|.
name|nextDoc
argument_list|()
operator|!=
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
condition|)
block|{
name|docFreq
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|docFreq
operator|!=
name|expectedDocFreq
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"docFreq for last term "
operator|+
name|lastTerm
operator|.
name|get
argument_list|()
operator|+
literal|"="
operator|+
name|expectedDocFreq
operator|+
literal|" != recomputed docFreq="
operator|+
name|docFreq
argument_list|)
throw|;
block|}
block|}
comment|// check unique term count
name|long
name|termCount
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|fieldTermCount
operator|>
literal|0
condition|)
block|{
name|termCount
operator|=
name|fields
operator|.
name|terms
argument_list|(
name|field
argument_list|)
operator|.
name|size
argument_list|()
expr_stmt|;
if|if
condition|(
name|termCount
operator|!=
operator|-
literal|1
operator|&&
name|termCount
operator|!=
name|fieldTermCount
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"termCount mismatch "
operator|+
name|termCount
operator|+
literal|" vs "
operator|+
name|fieldTermCount
argument_list|)
throw|;
block|}
block|}
comment|// Test seeking by ord
if|if
condition|(
name|hasOrd
operator|&&
name|status
operator|.
name|termCount
operator|-
name|termCountStart
operator|>
literal|0
condition|)
block|{
name|int
name|seekCount
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|min
argument_list|(
literal|10000L
argument_list|,
name|termCount
argument_list|)
decl_stmt|;
if|if
condition|(
name|seekCount
operator|>
literal|0
condition|)
block|{
name|BytesRef
index|[]
name|seekTerms
init|=
operator|new
name|BytesRef
index|[
name|seekCount
index|]
decl_stmt|;
comment|// Seek by ord
for|for
control|(
name|int
name|i
init|=
name|seekCount
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|long
name|ord
init|=
name|i
operator|*
operator|(
name|termCount
operator|/
name|seekCount
operator|)
decl_stmt|;
name|termsEnum
operator|.
name|seekExact
argument_list|(
name|ord
argument_list|)
expr_stmt|;
name|long
name|actualOrd
init|=
name|termsEnum
operator|.
name|ord
argument_list|()
decl_stmt|;
if|if
condition|(
name|actualOrd
operator|!=
name|ord
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"seek to ord "
operator|+
name|ord
operator|+
literal|" returned ord "
operator|+
name|actualOrd
argument_list|)
throw|;
block|}
name|seekTerms
index|[
name|i
index|]
operator|=
name|BytesRef
operator|.
name|deepCopyOf
argument_list|(
name|termsEnum
operator|.
name|term
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Seek by term
for|for
control|(
name|int
name|i
init|=
name|seekCount
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
if|if
condition|(
name|termsEnum
operator|.
name|seekCeil
argument_list|(
name|seekTerms
index|[
name|i
index|]
argument_list|)
operator|!=
name|TermsEnum
operator|.
name|SeekStatus
operator|.
name|FOUND
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"seek to existing term "
operator|+
name|seekTerms
index|[
name|i
index|]
operator|+
literal|" failed"
argument_list|)
throw|;
block|}
if|if
condition|(
name|termsEnum
operator|.
name|term
argument_list|()
operator|.
name|equals
argument_list|(
name|seekTerms
index|[
name|i
index|]
argument_list|)
operator|==
literal|false
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"seek to existing term "
operator|+
name|seekTerms
index|[
name|i
index|]
operator|+
literal|" returned FOUND but seeked to the wrong term "
operator|+
name|termsEnum
operator|.
name|term
argument_list|()
argument_list|)
throw|;
block|}
name|postings
operator|=
name|termsEnum
operator|.
name|postings
argument_list|(
name|postings
argument_list|,
name|PostingsEnum
operator|.
name|NONE
argument_list|)
expr_stmt|;
if|if
condition|(
name|postings
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"null DocsEnum from to existing term "
operator|+
name|seekTerms
index|[
name|i
index|]
argument_list|)
throw|;
block|}
block|}
block|}
block|}
block|}
block|}
name|int
name|fieldCount
init|=
name|fields
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|fieldCount
operator|!=
operator|-
literal|1
condition|)
block|{
if|if
condition|(
name|fieldCount
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"invalid fieldCount: "
operator|+
name|fieldCount
argument_list|)
throw|;
block|}
if|if
condition|(
name|fieldCount
operator|!=
name|computedFieldCount
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"fieldCount mismatch "
operator|+
name|fieldCount
operator|+
literal|" vs recomputed field count "
operator|+
name|computedFieldCount
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|doPrint
condition|)
block|{
name|msg
argument_list|(
name|infoStream
argument_list|,
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"OK [%d terms; %d terms/docs pairs; %d tokens] [took %.3f sec]"
argument_list|,
name|status
operator|.
name|termCount
argument_list|,
name|status
operator|.
name|totFreq
argument_list|,
name|status
operator|.
name|totPos
argument_list|,
name|nsToSec
argument_list|(
name|System
operator|.
name|nanoTime
argument_list|()
operator|-
name|startNS
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|verbose
operator|&&
name|status
operator|.
name|blockTreeStats
operator|!=
literal|null
operator|&&
name|infoStream
operator|!=
literal|null
operator|&&
name|status
operator|.
name|termCount
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|ent
range|:
name|status
operator|.
name|blockTreeStats
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|infoStream
operator|.
name|println
argument_list|(
literal|"      field \""
operator|+
name|ent
operator|.
name|getKey
argument_list|()
operator|+
literal|"\":"
argument_list|)
expr_stmt|;
name|infoStream
operator|.
name|println
argument_list|(
literal|"      "
operator|+
name|ent
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|replace
argument_list|(
literal|"\n"
argument_list|,
literal|"\n      "
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|status
return|;
block|}
comment|/**    * Test the term index.    * @lucene.experimental    */
DECL|method|testPostings
specifier|public
specifier|static
name|Status
operator|.
name|TermIndexStatus
name|testPostings
parameter_list|(
name|CodecReader
name|reader
parameter_list|,
name|PrintStream
name|infoStream
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|testPostings
argument_list|(
name|reader
argument_list|,
name|infoStream
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**    * Test the term index.    * @lucene.experimental    */
DECL|method|testPostings
specifier|public
specifier|static
name|Status
operator|.
name|TermIndexStatus
name|testPostings
parameter_list|(
name|CodecReader
name|reader
parameter_list|,
name|PrintStream
name|infoStream
parameter_list|,
name|boolean
name|verbose
parameter_list|,
name|boolean
name|failFast
parameter_list|)
throws|throws
name|IOException
block|{
comment|// TODO: we should go and verify term vectors match, if
comment|// crossCheckTermVectors is on...
name|Status
operator|.
name|TermIndexStatus
name|status
decl_stmt|;
specifier|final
name|int
name|maxDoc
init|=
name|reader
operator|.
name|maxDoc
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|infoStream
operator|!=
literal|null
condition|)
block|{
name|infoStream
operator|.
name|print
argument_list|(
literal|"    test: terms, freq, prox..."
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Fields
name|fields
init|=
name|reader
operator|.
name|getPostingsReader
argument_list|()
operator|.
name|getMergeInstance
argument_list|()
decl_stmt|;
specifier|final
name|FieldInfos
name|fieldInfos
init|=
name|reader
operator|.
name|getFieldInfos
argument_list|()
decl_stmt|;
name|status
operator|=
name|checkFields
argument_list|(
name|fields
argument_list|,
name|reader
operator|.
name|getLiveDocs
argument_list|()
argument_list|,
name|maxDoc
argument_list|,
name|fieldInfos
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|infoStream
argument_list|,
name|verbose
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
if|if
condition|(
name|failFast
condition|)
block|{
name|IOUtils
operator|.
name|reThrow
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
name|msg
argument_list|(
name|infoStream
argument_list|,
literal|"ERROR: "
operator|+
name|e
argument_list|)
expr_stmt|;
name|status
operator|=
operator|new
name|Status
operator|.
name|TermIndexStatus
argument_list|()
expr_stmt|;
name|status
operator|.
name|error
operator|=
name|e
expr_stmt|;
if|if
condition|(
name|infoStream
operator|!=
literal|null
condition|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|(
name|infoStream
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|status
return|;
block|}
comment|/**    * Test the points index    * @lucene.experimental    */
DECL|method|testPoints
specifier|public
specifier|static
name|Status
operator|.
name|PointsStatus
name|testPoints
parameter_list|(
name|CodecReader
name|reader
parameter_list|,
name|PrintStream
name|infoStream
parameter_list|,
name|boolean
name|failFast
parameter_list|)
throws|throws
name|IOException
block|{
name|FieldInfos
name|fieldInfos
init|=
name|reader
operator|.
name|getFieldInfos
argument_list|()
decl_stmt|;
name|Status
operator|.
name|PointsStatus
name|status
init|=
operator|new
name|Status
operator|.
name|PointsStatus
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|fieldInfos
operator|.
name|hasPointValues
argument_list|()
condition|)
block|{
name|PointReader
name|values
init|=
name|reader
operator|.
name|getPointReader
argument_list|()
decl_stmt|;
if|if
condition|(
name|values
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"there are fields with points, but reader.getPointReader() is null"
argument_list|)
throw|;
block|}
for|for
control|(
name|FieldInfo
name|fieldInfo
range|:
name|fieldInfos
control|)
block|{
if|if
condition|(
name|fieldInfo
operator|.
name|getPointDimensionCount
argument_list|()
operator|>
literal|0
condition|)
block|{
name|FixedBitSet
name|docsSeen
init|=
operator|new
name|FixedBitSet
argument_list|(
name|reader
operator|.
name|maxDoc
argument_list|()
argument_list|)
decl_stmt|;
name|status
operator|.
name|totalValueFields
operator|++
expr_stmt|;
name|int
name|dimCount
init|=
name|fieldInfo
operator|.
name|getPointDimensionCount
argument_list|()
decl_stmt|;
name|int
name|bytesPerDim
init|=
name|fieldInfo
operator|.
name|getPointNumBytes
argument_list|()
decl_stmt|;
name|int
name|packedBytesCount
init|=
name|dimCount
operator|*
name|bytesPerDim
decl_stmt|;
name|byte
index|[]
name|lastMinPackedValue
init|=
operator|new
name|byte
index|[
name|packedBytesCount
index|]
decl_stmt|;
name|byte
index|[]
name|lastMaxPackedValue
init|=
operator|new
name|byte
index|[
name|packedBytesCount
index|]
decl_stmt|;
name|BytesRef
name|scratch
init|=
operator|new
name|BytesRef
argument_list|()
decl_stmt|;
name|scratch
operator|.
name|length
operator|=
name|bytesPerDim
expr_stmt|;
name|byte
index|[]
name|lastPackedValue
init|=
operator|new
name|byte
index|[
name|packedBytesCount
index|]
decl_stmt|;
name|long
index|[]
name|pointCountSeen
init|=
operator|new
name|long
index|[
literal|1
index|]
decl_stmt|;
name|byte
index|[]
name|globalMinPackedValue
init|=
name|values
operator|.
name|getMinPackedValue
argument_list|(
name|fieldInfo
operator|.
name|name
argument_list|)
decl_stmt|;
name|long
name|size
init|=
name|values
operator|.
name|size
argument_list|(
name|fieldInfo
operator|.
name|name
argument_list|)
decl_stmt|;
name|int
name|docCount
init|=
name|values
operator|.
name|getDocCount
argument_list|(
name|fieldInfo
operator|.
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|docCount
operator|>
name|size
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"point values for field \""
operator|+
name|fieldInfo
operator|.
name|name
operator|+
literal|"\" claims to have size="
operator|+
name|size
operator|+
literal|" points and inconsistent docCount="
operator|+
name|docCount
argument_list|)
throw|;
block|}
if|if
condition|(
name|globalMinPackedValue
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|size
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"getMinPackedValue is null points for field \""
operator|+
name|fieldInfo
operator|.
name|name
operator|+
literal|"\" yet size="
operator|+
name|size
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|globalMinPackedValue
operator|.
name|length
operator|!=
name|packedBytesCount
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"getMinPackedValue for field \""
operator|+
name|fieldInfo
operator|.
name|name
operator|+
literal|"\" return length="
operator|+
name|globalMinPackedValue
operator|.
name|length
operator|+
literal|" array, but should be "
operator|+
name|packedBytesCount
argument_list|)
throw|;
block|}
name|byte
index|[]
name|globalMaxPackedValue
init|=
name|values
operator|.
name|getMaxPackedValue
argument_list|(
name|fieldInfo
operator|.
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|globalMaxPackedValue
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|size
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"getMaxPackedValue is null points for field \""
operator|+
name|fieldInfo
operator|.
name|name
operator|+
literal|"\" yet size="
operator|+
name|size
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|globalMaxPackedValue
operator|.
name|length
operator|!=
name|packedBytesCount
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"getMaxPackedValue for field \""
operator|+
name|fieldInfo
operator|.
name|name
operator|+
literal|"\" return length="
operator|+
name|globalMaxPackedValue
operator|.
name|length
operator|+
literal|" array, but should be "
operator|+
name|packedBytesCount
argument_list|)
throw|;
block|}
name|values
operator|.
name|intersect
argument_list|(
name|fieldInfo
operator|.
name|name
argument_list|,
operator|new
name|PointValues
operator|.
name|IntersectVisitor
argument_list|()
block|{
specifier|private
name|int
name|lastDocID
init|=
operator|-
literal|1
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|visit
parameter_list|(
name|int
name|docID
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"codec called IntersectVisitor.visit without a packed value for docID="
operator|+
name|docID
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|visit
parameter_list|(
name|int
name|docID
parameter_list|,
name|byte
index|[]
name|packedValue
parameter_list|)
block|{
name|checkPackedValue
argument_list|(
literal|"packed value"
argument_list|,
name|packedValue
argument_list|,
name|docID
argument_list|)
expr_stmt|;
name|pointCountSeen
index|[
literal|0
index|]
operator|++
expr_stmt|;
name|docsSeen
operator|.
name|set
argument_list|(
name|docID
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|dim
init|=
literal|0
init|;
name|dim
operator|<
name|dimCount
condition|;
name|dim
operator|++
control|)
block|{
name|int
name|offset
init|=
name|bytesPerDim
operator|*
name|dim
decl_stmt|;
comment|// Compare to last cell:
if|if
condition|(
name|StringHelper
operator|.
name|compare
argument_list|(
name|bytesPerDim
argument_list|,
name|packedValue
argument_list|,
name|offset
argument_list|,
name|lastMinPackedValue
argument_list|,
name|offset
argument_list|)
operator|<
literal|0
condition|)
block|{
comment|// This doc's point, in this dimension, is lower than the minimum value of the last cell checked:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"packed points value "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|packedValue
argument_list|)
operator|+
literal|" for docID="
operator|+
name|docID
operator|+
literal|" is out-of-bounds of the last cell min="
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|lastMinPackedValue
argument_list|)
operator|+
literal|" max="
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|lastMaxPackedValue
argument_list|)
operator|+
literal|" dim="
operator|+
name|dim
argument_list|)
throw|;
block|}
if|if
condition|(
name|StringHelper
operator|.
name|compare
argument_list|(
name|bytesPerDim
argument_list|,
name|packedValue
argument_list|,
name|offset
argument_list|,
name|lastMaxPackedValue
argument_list|,
name|offset
argument_list|)
operator|>
literal|0
condition|)
block|{
comment|// This doc's point, in this dimension, is greater than the maximum value of the last cell checked:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"packed points value "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|packedValue
argument_list|)
operator|+
literal|" for docID="
operator|+
name|docID
operator|+
literal|" is out-of-bounds of the last cell min="
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|lastMinPackedValue
argument_list|)
operator|+
literal|" max="
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|lastMaxPackedValue
argument_list|)
operator|+
literal|" dim="
operator|+
name|dim
argument_list|)
throw|;
block|}
block|}
comment|// In the 1D case, PointValues must make a single in-order sweep through all values, and tie-break by
comment|// increasing docID:
if|if
condition|(
name|dimCount
operator|==
literal|1
condition|)
block|{
name|int
name|cmp
init|=
name|StringHelper
operator|.
name|compare
argument_list|(
name|bytesPerDim
argument_list|,
name|lastPackedValue
argument_list|,
literal|0
argument_list|,
name|packedValue
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|>
literal|0
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"packed points value "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|packedValue
argument_list|)
operator|+
literal|" for docID="
operator|+
name|docID
operator|+
literal|" is out-of-order vs the previous document's value "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|lastPackedValue
argument_list|)
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|cmp
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|docID
operator|<
name|lastDocID
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"packed points value is the same, but docID="
operator|+
name|docID
operator|+
literal|" is out of order vs previous docID="
operator|+
name|lastDocID
argument_list|)
throw|;
block|}
block|}
name|System
operator|.
name|arraycopy
argument_list|(
name|packedValue
argument_list|,
literal|0
argument_list|,
name|lastPackedValue
argument_list|,
literal|0
argument_list|,
name|bytesPerDim
argument_list|)
expr_stmt|;
name|lastDocID
operator|=
name|docID
expr_stmt|;
block|}
name|status
operator|.
name|totalValuePoints
operator|++
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|PointValues
operator|.
name|Relation
name|compare
parameter_list|(
name|byte
index|[]
name|minPackedValue
parameter_list|,
name|byte
index|[]
name|maxPackedValue
parameter_list|)
block|{
name|checkPackedValue
argument_list|(
literal|"min packed value"
argument_list|,
name|minPackedValue
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|minPackedValue
argument_list|,
literal|0
argument_list|,
name|lastMinPackedValue
argument_list|,
literal|0
argument_list|,
name|packedBytesCount
argument_list|)
expr_stmt|;
name|checkPackedValue
argument_list|(
literal|"max packed value"
argument_list|,
name|maxPackedValue
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|maxPackedValue
argument_list|,
literal|0
argument_list|,
name|lastMaxPackedValue
argument_list|,
literal|0
argument_list|,
name|packedBytesCount
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|dim
init|=
literal|0
init|;
name|dim
operator|<
name|dimCount
condition|;
name|dim
operator|++
control|)
block|{
name|int
name|offset
init|=
name|bytesPerDim
operator|*
name|dim
decl_stmt|;
comment|// Make sure this cell is not outside of the global min/max:
if|if
condition|(
name|StringHelper
operator|.
name|compare
argument_list|(
name|bytesPerDim
argument_list|,
name|minPackedValue
argument_list|,
name|offset
argument_list|,
name|globalMinPackedValue
argument_list|,
name|offset
argument_list|)
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"packed points cell minPackedValue "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|minPackedValue
argument_list|)
operator|+
literal|" is out-of-bounds of the global minimum "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|globalMinPackedValue
argument_list|)
operator|+
literal|" dim="
operator|+
name|dim
argument_list|)
throw|;
block|}
if|if
condition|(
name|StringHelper
operator|.
name|compare
argument_list|(
name|bytesPerDim
argument_list|,
name|maxPackedValue
argument_list|,
name|offset
argument_list|,
name|globalMinPackedValue
argument_list|,
name|offset
argument_list|)
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"packed points cell maxPackedValue "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|minPackedValue
argument_list|)
operator|+
literal|" is out-of-bounds of the global minimum "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|globalMinPackedValue
argument_list|)
operator|+
literal|" dim="
operator|+
name|dim
argument_list|)
throw|;
block|}
if|if
condition|(
name|StringHelper
operator|.
name|compare
argument_list|(
name|bytesPerDim
argument_list|,
name|minPackedValue
argument_list|,
name|offset
argument_list|,
name|globalMaxPackedValue
argument_list|,
name|offset
argument_list|)
operator|>
literal|0
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"packed points cell minPackedValue "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|minPackedValue
argument_list|)
operator|+
literal|" is out-of-bounds of the global maximum "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|globalMaxPackedValue
argument_list|)
operator|+
literal|" dim="
operator|+
name|dim
argument_list|)
throw|;
block|}
if|if
condition|(
name|StringHelper
operator|.
name|compare
argument_list|(
name|bytesPerDim
argument_list|,
name|maxPackedValue
argument_list|,
name|offset
argument_list|,
name|globalMaxPackedValue
argument_list|,
name|offset
argument_list|)
operator|>
literal|0
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"packed points cell maxPackedValue "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|maxPackedValue
argument_list|)
operator|+
literal|" is out-of-bounds of the global maximum "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|globalMaxPackedValue
argument_list|)
operator|+
literal|" dim="
operator|+
name|dim
argument_list|)
throw|;
block|}
block|}
comment|// We always pretend the query shape is so complex that it crosses every cell, so
comment|// that packedValue is passed for every document
return|return
name|PointValues
operator|.
name|Relation
operator|.
name|CELL_CROSSES_QUERY
return|;
block|}
specifier|private
name|void
name|checkPackedValue
parameter_list|(
name|String
name|desc
parameter_list|,
name|byte
index|[]
name|packedValue
parameter_list|,
name|int
name|docID
parameter_list|)
block|{
if|if
condition|(
name|packedValue
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|desc
operator|+
literal|" is null for docID="
operator|+
name|docID
argument_list|)
throw|;
block|}
if|if
condition|(
name|packedValue
operator|.
name|length
operator|!=
name|packedBytesCount
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|desc
operator|+
literal|" has incorrect length="
operator|+
name|packedValue
operator|.
name|length
operator|+
literal|" vs expected="
operator|+
name|packedBytesCount
operator|+
literal|" for docID="
operator|+
name|docID
argument_list|)
throw|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|pointCountSeen
index|[
literal|0
index|]
operator|!=
name|size
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"point values for field \""
operator|+
name|fieldInfo
operator|.
name|name
operator|+
literal|"\" claims to have size="
operator|+
name|size
operator|+
literal|" points, but in fact has "
operator|+
name|pointCountSeen
index|[
literal|0
index|]
argument_list|)
throw|;
block|}
if|if
condition|(
name|docsSeen
operator|.
name|cardinality
argument_list|()
operator|!=
name|docCount
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"point values for field \""
operator|+
name|fieldInfo
operator|.
name|name
operator|+
literal|"\" claims to have docCount="
operator|+
name|docCount
operator|+
literal|" but in fact has "
operator|+
name|docsSeen
operator|.
name|cardinality
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
if|if
condition|(
name|failFast
condition|)
block|{
name|IOUtils
operator|.
name|reThrow
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
name|msg
argument_list|(
name|infoStream
argument_list|,
literal|"ERROR: "
operator|+
name|e
argument_list|)
expr_stmt|;
name|status
operator|.
name|error
operator|=
name|e
expr_stmt|;
if|if
condition|(
name|infoStream
operator|!=
literal|null
condition|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|(
name|infoStream
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|status
return|;
block|}
comment|/**    * Test stored fields.    * @lucene.experimental    */
DECL|method|testStoredFields
specifier|public
specifier|static
name|Status
operator|.
name|StoredFieldStatus
name|testStoredFields
parameter_list|(
name|CodecReader
name|reader
parameter_list|,
name|PrintStream
name|infoStream
parameter_list|,
name|boolean
name|failFast
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|startNS
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
specifier|final
name|Status
operator|.
name|StoredFieldStatus
name|status
init|=
operator|new
name|Status
operator|.
name|StoredFieldStatus
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|infoStream
operator|!=
literal|null
condition|)
block|{
name|infoStream
operator|.
name|print
argument_list|(
literal|"    test: stored fields......."
argument_list|)
expr_stmt|;
block|}
comment|// Scan stored fields for all documents
specifier|final
name|Bits
name|liveDocs
init|=
name|reader
operator|.
name|getLiveDocs
argument_list|()
decl_stmt|;
name|StoredFieldsReader
name|storedFields
init|=
name|reader
operator|.
name|getFieldsReader
argument_list|()
operator|.
name|getMergeInstance
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|reader
operator|.
name|maxDoc
argument_list|()
condition|;
operator|++
name|j
control|)
block|{
comment|// Intentionally pull even deleted documents to
comment|// make sure they too are not corrupt:
name|DocumentStoredFieldVisitor
name|visitor
init|=
operator|new
name|DocumentStoredFieldVisitor
argument_list|()
decl_stmt|;
name|storedFields
operator|.
name|visitDocument
argument_list|(
name|j
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
name|Document
name|doc
init|=
name|visitor
operator|.
name|getDocument
argument_list|()
decl_stmt|;
if|if
condition|(
name|liveDocs
operator|==
literal|null
operator|||
name|liveDocs
operator|.
name|get
argument_list|(
name|j
argument_list|)
condition|)
block|{
name|status
operator|.
name|docCount
operator|++
expr_stmt|;
name|status
operator|.
name|totFields
operator|+=
name|doc
operator|.
name|getFields
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
block|}
comment|// Validate docCount
if|if
condition|(
name|status
operator|.
name|docCount
operator|!=
name|reader
operator|.
name|numDocs
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"docCount="
operator|+
name|status
operator|.
name|docCount
operator|+
literal|" but saw "
operator|+
name|status
operator|.
name|docCount
operator|+
literal|" undeleted docs"
argument_list|)
throw|;
block|}
name|msg
argument_list|(
name|infoStream
argument_list|,
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"OK [%d total field count; avg %.1f fields per doc] [took %.3f sec]"
argument_list|,
name|status
operator|.
name|totFields
argument_list|,
operator|(
operator|(
operator|(
name|float
operator|)
name|status
operator|.
name|totFields
operator|)
operator|/
name|status
operator|.
name|docCount
operator|)
argument_list|,
name|nsToSec
argument_list|(
name|System
operator|.
name|nanoTime
argument_list|()
operator|-
name|startNS
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
if|if
condition|(
name|failFast
condition|)
block|{
name|IOUtils
operator|.
name|reThrow
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
name|msg
argument_list|(
name|infoStream
argument_list|,
literal|"ERROR ["
operator|+
name|String
operator|.
name|valueOf
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|+
literal|"]"
argument_list|)
expr_stmt|;
name|status
operator|.
name|error
operator|=
name|e
expr_stmt|;
if|if
condition|(
name|infoStream
operator|!=
literal|null
condition|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|(
name|infoStream
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|status
return|;
block|}
comment|/**    * Test docvalues.    * @lucene.experimental    */
DECL|method|testDocValues
specifier|public
specifier|static
name|Status
operator|.
name|DocValuesStatus
name|testDocValues
parameter_list|(
name|CodecReader
name|reader
parameter_list|,
name|PrintStream
name|infoStream
parameter_list|,
name|boolean
name|failFast
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|startNS
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
specifier|final
name|Status
operator|.
name|DocValuesStatus
name|status
init|=
operator|new
name|Status
operator|.
name|DocValuesStatus
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|infoStream
operator|!=
literal|null
condition|)
block|{
name|infoStream
operator|.
name|print
argument_list|(
literal|"    test: docvalues..........."
argument_list|)
expr_stmt|;
block|}
name|DocValuesProducer
name|dvReader
init|=
name|reader
operator|.
name|getDocValuesReader
argument_list|()
decl_stmt|;
if|if
condition|(
name|dvReader
operator|!=
literal|null
condition|)
block|{
name|dvReader
operator|=
name|dvReader
operator|.
name|getMergeInstance
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|FieldInfo
name|fieldInfo
range|:
name|reader
operator|.
name|getFieldInfos
argument_list|()
control|)
block|{
if|if
condition|(
name|fieldInfo
operator|.
name|getDocValuesType
argument_list|()
operator|!=
name|DocValuesType
operator|.
name|NONE
condition|)
block|{
name|status
operator|.
name|totalValueFields
operator|++
expr_stmt|;
name|checkDocValues
argument_list|(
name|fieldInfo
argument_list|,
name|dvReader
argument_list|,
name|reader
operator|.
name|maxDoc
argument_list|()
argument_list|,
name|infoStream
argument_list|,
name|status
argument_list|)
expr_stmt|;
block|}
block|}
name|msg
argument_list|(
name|infoStream
argument_list|,
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"OK [%d docvalues fields; %d BINARY; %d NUMERIC; %d SORTED; %d SORTED_NUMERIC; %d SORTED_SET] [took %.3f sec]"
argument_list|,
name|status
operator|.
name|totalValueFields
argument_list|,
name|status
operator|.
name|totalBinaryFields
argument_list|,
name|status
operator|.
name|totalNumericFields
argument_list|,
name|status
operator|.
name|totalSortedFields
argument_list|,
name|status
operator|.
name|totalSortedNumericFields
argument_list|,
name|status
operator|.
name|totalSortedSetFields
argument_list|,
name|nsToSec
argument_list|(
name|System
operator|.
name|nanoTime
argument_list|()
operator|-
name|startNS
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
if|if
condition|(
name|failFast
condition|)
block|{
name|IOUtils
operator|.
name|reThrow
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
name|msg
argument_list|(
name|infoStream
argument_list|,
literal|"ERROR ["
operator|+
name|String
operator|.
name|valueOf
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|+
literal|"]"
argument_list|)
expr_stmt|;
name|status
operator|.
name|error
operator|=
name|e
expr_stmt|;
if|if
condition|(
name|infoStream
operator|!=
literal|null
condition|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|(
name|infoStream
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|status
return|;
block|}
DECL|method|checkBinaryDocValues
specifier|private
specifier|static
name|void
name|checkBinaryDocValues
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|int
name|maxDoc
parameter_list|,
name|BinaryDocValues
name|dv
parameter_list|,
name|Bits
name|docsWithField
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|maxDoc
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|BytesRef
name|term
init|=
name|dv
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
assert|assert
name|term
operator|.
name|isValid
argument_list|()
assert|;
if|if
condition|(
name|docsWithField
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|==
literal|false
operator|&&
name|term
operator|.
name|length
operator|>
literal|0
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"dv for field: "
operator|+
name|fieldName
operator|+
literal|" is missing but has value="
operator|+
name|term
operator|+
literal|" for doc: "
operator|+
name|i
argument_list|)
throw|;
block|}
block|}
block|}
DECL|method|checkSortedDocValues
specifier|private
specifier|static
name|void
name|checkSortedDocValues
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|int
name|maxDoc
parameter_list|,
name|SortedDocValues
name|dv
parameter_list|,
name|Bits
name|docsWithField
parameter_list|)
block|{
name|checkBinaryDocValues
argument_list|(
name|fieldName
argument_list|,
name|maxDoc
argument_list|,
name|dv
argument_list|,
name|docsWithField
argument_list|)
expr_stmt|;
specifier|final
name|int
name|maxOrd
init|=
name|dv
operator|.
name|getValueCount
argument_list|()
operator|-
literal|1
decl_stmt|;
name|FixedBitSet
name|seenOrds
init|=
operator|new
name|FixedBitSet
argument_list|(
name|dv
operator|.
name|getValueCount
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|maxOrd2
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|maxDoc
condition|;
name|i
operator|++
control|)
block|{
name|int
name|ord
init|=
name|dv
operator|.
name|getOrd
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|ord
operator|==
operator|-
literal|1
condition|)
block|{
if|if
condition|(
name|docsWithField
operator|.
name|get
argument_list|(
name|i
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"dv for field: "
operator|+
name|fieldName
operator|+
literal|" has -1 ord but is not marked missing for doc: "
operator|+
name|i
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|ord
argument_list|<
operator|-
literal|1
operator|||
name|ord
argument_list|>
name|maxOrd
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"ord out of bounds: "
operator|+
name|ord
argument_list|)
throw|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|docsWithField
operator|.
name|get
argument_list|(
name|i
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"dv for field: "
operator|+
name|fieldName
operator|+
literal|" is missing but has ord="
operator|+
name|ord
operator|+
literal|" for doc: "
operator|+
name|i
argument_list|)
throw|;
block|}
name|maxOrd2
operator|=
name|Math
operator|.
name|max
argument_list|(
name|maxOrd2
argument_list|,
name|ord
argument_list|)
expr_stmt|;
name|seenOrds
operator|.
name|set
argument_list|(
name|ord
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|maxOrd
operator|!=
name|maxOrd2
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"dv for field: "
operator|+
name|fieldName
operator|+
literal|" reports wrong maxOrd="
operator|+
name|maxOrd
operator|+
literal|" but this is not the case: "
operator|+
name|maxOrd2
argument_list|)
throw|;
block|}
if|if
condition|(
name|seenOrds
operator|.
name|cardinality
argument_list|()
operator|!=
name|dv
operator|.
name|getValueCount
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"dv for field: "
operator|+
name|fieldName
operator|+
literal|" has holes in its ords, valueCount="
operator|+
name|dv
operator|.
name|getValueCount
argument_list|()
operator|+
literal|" but only used: "
operator|+
name|seenOrds
operator|.
name|cardinality
argument_list|()
argument_list|)
throw|;
block|}
name|BytesRef
name|lastValue
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
name|maxOrd
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|BytesRef
name|term
init|=
name|dv
operator|.
name|lookupOrd
argument_list|(
name|i
argument_list|)
decl_stmt|;
assert|assert
name|term
operator|.
name|isValid
argument_list|()
assert|;
if|if
condition|(
name|lastValue
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|term
operator|.
name|compareTo
argument_list|(
name|lastValue
argument_list|)
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"dv for field: "
operator|+
name|fieldName
operator|+
literal|" has ords out of order: "
operator|+
name|lastValue
operator|+
literal|">="
operator|+
name|term
argument_list|)
throw|;
block|}
block|}
name|lastValue
operator|=
name|BytesRef
operator|.
name|deepCopyOf
argument_list|(
name|term
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|checkSortedSetDocValues
specifier|private
specifier|static
name|void
name|checkSortedSetDocValues
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|int
name|maxDoc
parameter_list|,
name|SortedSetDocValues
name|dv
parameter_list|,
name|Bits
name|docsWithField
parameter_list|)
block|{
specifier|final
name|long
name|maxOrd
init|=
name|dv
operator|.
name|getValueCount
argument_list|()
operator|-
literal|1
decl_stmt|;
name|LongBitSet
name|seenOrds
init|=
operator|new
name|LongBitSet
argument_list|(
name|dv
operator|.
name|getValueCount
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|maxOrd2
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|maxDoc
condition|;
name|i
operator|++
control|)
block|{
name|dv
operator|.
name|setDocument
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|long
name|lastOrd
init|=
operator|-
literal|1
decl_stmt|;
name|long
name|ord
decl_stmt|;
if|if
condition|(
name|docsWithField
operator|.
name|get
argument_list|(
name|i
argument_list|)
condition|)
block|{
name|int
name|ordCount
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|(
name|ord
operator|=
name|dv
operator|.
name|nextOrd
argument_list|()
operator|)
operator|!=
name|SortedSetDocValues
operator|.
name|NO_MORE_ORDS
condition|)
block|{
if|if
condition|(
name|ord
operator|<=
name|lastOrd
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"ords out of order: "
operator|+
name|ord
operator|+
literal|"<= "
operator|+
name|lastOrd
operator|+
literal|" for doc: "
operator|+
name|i
argument_list|)
throw|;
block|}
if|if
condition|(
name|ord
argument_list|<
literal|0
operator|||
name|ord
argument_list|>
name|maxOrd
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"ord out of bounds: "
operator|+
name|ord
argument_list|)
throw|;
block|}
if|if
condition|(
name|dv
operator|instanceof
name|RandomAccessOrds
condition|)
block|{
name|long
name|ord2
init|=
operator|(
operator|(
name|RandomAccessOrds
operator|)
name|dv
operator|)
operator|.
name|ordAt
argument_list|(
name|ordCount
argument_list|)
decl_stmt|;
if|if
condition|(
name|ord
operator|!=
name|ord2
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"ordAt("
operator|+
name|ordCount
operator|+
literal|") inconsistent, expected="
operator|+
name|ord
operator|+
literal|",got="
operator|+
name|ord2
operator|+
literal|" for doc: "
operator|+
name|i
argument_list|)
throw|;
block|}
block|}
name|lastOrd
operator|=
name|ord
expr_stmt|;
name|maxOrd2
operator|=
name|Math
operator|.
name|max
argument_list|(
name|maxOrd2
argument_list|,
name|ord
argument_list|)
expr_stmt|;
name|seenOrds
operator|.
name|set
argument_list|(
name|ord
argument_list|)
expr_stmt|;
name|ordCount
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|ordCount
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"dv for field: "
operator|+
name|fieldName
operator|+
literal|" has no ordinals but is not marked missing for doc: "
operator|+
name|i
argument_list|)
throw|;
block|}
if|if
condition|(
name|dv
operator|instanceof
name|RandomAccessOrds
condition|)
block|{
name|long
name|ordCount2
init|=
operator|(
operator|(
name|RandomAccessOrds
operator|)
name|dv
operator|)
operator|.
name|cardinality
argument_list|()
decl_stmt|;
if|if
condition|(
name|ordCount
operator|!=
name|ordCount2
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"cardinality inconsistent, expected="
operator|+
name|ordCount
operator|+
literal|",got="
operator|+
name|ordCount2
operator|+
literal|" for doc: "
operator|+
name|i
argument_list|)
throw|;
block|}
block|}
block|}
else|else
block|{
name|long
name|o
init|=
name|dv
operator|.
name|nextOrd
argument_list|()
decl_stmt|;
if|if
condition|(
name|o
operator|!=
name|SortedSetDocValues
operator|.
name|NO_MORE_ORDS
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"dv for field: "
operator|+
name|fieldName
operator|+
literal|" is marked missing but has ord="
operator|+
name|o
operator|+
literal|" for doc: "
operator|+
name|i
argument_list|)
throw|;
block|}
if|if
condition|(
name|dv
operator|instanceof
name|RandomAccessOrds
condition|)
block|{
name|long
name|ordCount2
init|=
operator|(
operator|(
name|RandomAccessOrds
operator|)
name|dv
operator|)
operator|.
name|cardinality
argument_list|()
decl_stmt|;
if|if
condition|(
name|ordCount2
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"dv for field: "
operator|+
name|fieldName
operator|+
literal|" is marked missing but has cardinality "
operator|+
name|ordCount2
operator|+
literal|" for doc: "
operator|+
name|i
argument_list|)
throw|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|maxOrd
operator|!=
name|maxOrd2
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"dv for field: "
operator|+
name|fieldName
operator|+
literal|" reports wrong maxOrd="
operator|+
name|maxOrd
operator|+
literal|" but this is not the case: "
operator|+
name|maxOrd2
argument_list|)
throw|;
block|}
if|if
condition|(
name|seenOrds
operator|.
name|cardinality
argument_list|()
operator|!=
name|dv
operator|.
name|getValueCount
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"dv for field: "
operator|+
name|fieldName
operator|+
literal|" has holes in its ords, valueCount="
operator|+
name|dv
operator|.
name|getValueCount
argument_list|()
operator|+
literal|" but only used: "
operator|+
name|seenOrds
operator|.
name|cardinality
argument_list|()
argument_list|)
throw|;
block|}
name|BytesRef
name|lastValue
init|=
literal|null
decl_stmt|;
for|for
control|(
name|long
name|i
init|=
literal|0
init|;
name|i
operator|<=
name|maxOrd
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|BytesRef
name|term
init|=
name|dv
operator|.
name|lookupOrd
argument_list|(
name|i
argument_list|)
decl_stmt|;
assert|assert
name|term
operator|.
name|isValid
argument_list|()
assert|;
if|if
condition|(
name|lastValue
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|term
operator|.
name|compareTo
argument_list|(
name|lastValue
argument_list|)
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"dv for field: "
operator|+
name|fieldName
operator|+
literal|" has ords out of order: "
operator|+
name|lastValue
operator|+
literal|">="
operator|+
name|term
argument_list|)
throw|;
block|}
block|}
name|lastValue
operator|=
name|BytesRef
operator|.
name|deepCopyOf
argument_list|(
name|term
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|checkSortedNumericDocValues
specifier|private
specifier|static
name|void
name|checkSortedNumericDocValues
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|int
name|maxDoc
parameter_list|,
name|SortedNumericDocValues
name|ndv
parameter_list|,
name|Bits
name|docsWithField
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|maxDoc
condition|;
name|i
operator|++
control|)
block|{
name|ndv
operator|.
name|setDocument
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|int
name|count
init|=
name|ndv
operator|.
name|count
argument_list|()
decl_stmt|;
if|if
condition|(
name|docsWithField
operator|.
name|get
argument_list|(
name|i
argument_list|)
condition|)
block|{
if|if
condition|(
name|count
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"dv for field: "
operator|+
name|fieldName
operator|+
literal|" is not marked missing but has zero count for doc: "
operator|+
name|i
argument_list|)
throw|;
block|}
name|long
name|previous
init|=
name|Long
operator|.
name|MIN_VALUE
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|count
condition|;
name|j
operator|++
control|)
block|{
name|long
name|value
init|=
name|ndv
operator|.
name|valueAt
argument_list|(
name|j
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|<
name|previous
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"values out of order: "
operator|+
name|value
operator|+
literal|"< "
operator|+
name|previous
operator|+
literal|" for doc: "
operator|+
name|i
argument_list|)
throw|;
block|}
name|previous
operator|=
name|value
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|count
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"dv for field: "
operator|+
name|fieldName
operator|+
literal|" is marked missing but has count="
operator|+
name|count
operator|+
literal|" for doc: "
operator|+
name|i
argument_list|)
throw|;
block|}
block|}
block|}
block|}
DECL|method|checkNumericDocValues
specifier|private
specifier|static
name|void
name|checkNumericDocValues
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|int
name|maxDoc
parameter_list|,
name|NumericDocValues
name|ndv
parameter_list|,
name|Bits
name|docsWithField
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|maxDoc
condition|;
name|i
operator|++
control|)
block|{
name|long
name|value
init|=
name|ndv
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|docsWithField
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|==
literal|false
operator|&&
name|value
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"dv for field: "
operator|+
name|fieldName
operator|+
literal|" is marked missing but has value="
operator|+
name|value
operator|+
literal|" for doc: "
operator|+
name|i
argument_list|)
throw|;
block|}
block|}
block|}
DECL|method|checkDocValues
specifier|private
specifier|static
name|void
name|checkDocValues
parameter_list|(
name|FieldInfo
name|fi
parameter_list|,
name|DocValuesProducer
name|dvReader
parameter_list|,
name|int
name|maxDoc
parameter_list|,
name|PrintStream
name|infoStream
parameter_list|,
name|DocValuesStatus
name|status
parameter_list|)
throws|throws
name|Exception
block|{
name|Bits
name|docsWithField
init|=
name|dvReader
operator|.
name|getDocsWithField
argument_list|(
name|fi
argument_list|)
decl_stmt|;
if|if
condition|(
name|docsWithField
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|fi
operator|.
name|name
operator|+
literal|" docsWithField does not exist"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|docsWithField
operator|.
name|length
argument_list|()
operator|!=
name|maxDoc
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|fi
operator|.
name|name
operator|+
literal|" docsWithField has incorrect length: "
operator|+
name|docsWithField
operator|.
name|length
argument_list|()
operator|+
literal|",expected: "
operator|+
name|maxDoc
argument_list|)
throw|;
block|}
switch|switch
condition|(
name|fi
operator|.
name|getDocValuesType
argument_list|()
condition|)
block|{
case|case
name|SORTED
case|:
name|status
operator|.
name|totalSortedFields
operator|++
expr_stmt|;
name|checkSortedDocValues
argument_list|(
name|fi
operator|.
name|name
argument_list|,
name|maxDoc
argument_list|,
name|dvReader
operator|.
name|getSorted
argument_list|(
name|fi
argument_list|)
argument_list|,
name|docsWithField
argument_list|)
expr_stmt|;
break|break;
case|case
name|SORTED_NUMERIC
case|:
name|status
operator|.
name|totalSortedNumericFields
operator|++
expr_stmt|;
name|checkSortedNumericDocValues
argument_list|(
name|fi
operator|.
name|name
argument_list|,
name|maxDoc
argument_list|,
name|dvReader
operator|.
name|getSortedNumeric
argument_list|(
name|fi
argument_list|)
argument_list|,
name|docsWithField
argument_list|)
expr_stmt|;
break|break;
case|case
name|SORTED_SET
case|:
name|status
operator|.
name|totalSortedSetFields
operator|++
expr_stmt|;
name|checkSortedSetDocValues
argument_list|(
name|fi
operator|.
name|name
argument_list|,
name|maxDoc
argument_list|,
name|dvReader
operator|.
name|getSortedSet
argument_list|(
name|fi
argument_list|)
argument_list|,
name|docsWithField
argument_list|)
expr_stmt|;
break|break;
case|case
name|BINARY
case|:
name|status
operator|.
name|totalBinaryFields
operator|++
expr_stmt|;
name|checkBinaryDocValues
argument_list|(
name|fi
operator|.
name|name
argument_list|,
name|maxDoc
argument_list|,
name|dvReader
operator|.
name|getBinary
argument_list|(
name|fi
argument_list|)
argument_list|,
name|docsWithField
argument_list|)
expr_stmt|;
break|break;
case|case
name|NUMERIC
case|:
name|status
operator|.
name|totalNumericFields
operator|++
expr_stmt|;
name|checkNumericDocValues
argument_list|(
name|fi
operator|.
name|name
argument_list|,
name|maxDoc
argument_list|,
name|dvReader
operator|.
name|getNumeric
argument_list|(
name|fi
argument_list|)
argument_list|,
name|docsWithField
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|()
throw|;
block|}
block|}
comment|/**    * Test term vectors.    * @lucene.experimental    */
DECL|method|testTermVectors
specifier|public
specifier|static
name|Status
operator|.
name|TermVectorStatus
name|testTermVectors
parameter_list|(
name|CodecReader
name|reader
parameter_list|,
name|PrintStream
name|infoStream
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|testTermVectors
argument_list|(
name|reader
argument_list|,
name|infoStream
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**    * Test term vectors.    * @lucene.experimental    */
DECL|method|testTermVectors
specifier|public
specifier|static
name|Status
operator|.
name|TermVectorStatus
name|testTermVectors
parameter_list|(
name|CodecReader
name|reader
parameter_list|,
name|PrintStream
name|infoStream
parameter_list|,
name|boolean
name|verbose
parameter_list|,
name|boolean
name|crossCheckTermVectors
parameter_list|,
name|boolean
name|failFast
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|startNS
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
specifier|final
name|Status
operator|.
name|TermVectorStatus
name|status
init|=
operator|new
name|Status
operator|.
name|TermVectorStatus
argument_list|()
decl_stmt|;
specifier|final
name|FieldInfos
name|fieldInfos
init|=
name|reader
operator|.
name|getFieldInfos
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|infoStream
operator|!=
literal|null
condition|)
block|{
name|infoStream
operator|.
name|print
argument_list|(
literal|"    test: term vectors........"
argument_list|)
expr_stmt|;
block|}
name|PostingsEnum
name|postings
init|=
literal|null
decl_stmt|;
comment|// Only used if crossCheckTermVectors is true:
name|PostingsEnum
name|postingsDocs
init|=
literal|null
decl_stmt|;
specifier|final
name|Bits
name|liveDocs
init|=
name|reader
operator|.
name|getLiveDocs
argument_list|()
decl_stmt|;
specifier|final
name|Fields
name|postingsFields
decl_stmt|;
comment|// TODO: testTermsIndex
if|if
condition|(
name|crossCheckTermVectors
condition|)
block|{
name|postingsFields
operator|=
name|reader
operator|.
name|getPostingsReader
argument_list|()
operator|.
name|getMergeInstance
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|postingsFields
operator|=
literal|null
expr_stmt|;
block|}
name|TermVectorsReader
name|vectorsReader
init|=
name|reader
operator|.
name|getTermVectorsReader
argument_list|()
decl_stmt|;
if|if
condition|(
name|vectorsReader
operator|!=
literal|null
condition|)
block|{
name|vectorsReader
operator|=
name|vectorsReader
operator|.
name|getMergeInstance
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|reader
operator|.
name|maxDoc
argument_list|()
condition|;
operator|++
name|j
control|)
block|{
comment|// Intentionally pull/visit (but don't count in
comment|// stats) deleted documents to make sure they too
comment|// are not corrupt:
name|Fields
name|tfv
init|=
name|vectorsReader
operator|.
name|get
argument_list|(
name|j
argument_list|)
decl_stmt|;
comment|// TODO: can we make a IS(FIR) that searches just
comment|// this term vector... to pass for searcher?
if|if
condition|(
name|tfv
operator|!=
literal|null
condition|)
block|{
comment|// First run with no deletions:
name|checkFields
argument_list|(
name|tfv
argument_list|,
literal|null
argument_list|,
literal|1
argument_list|,
name|fieldInfos
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|infoStream
argument_list|,
name|verbose
argument_list|)
expr_stmt|;
comment|// Only agg stats if the doc is live:
specifier|final
name|boolean
name|doStats
init|=
name|liveDocs
operator|==
literal|null
operator|||
name|liveDocs
operator|.
name|get
argument_list|(
name|j
argument_list|)
decl_stmt|;
if|if
condition|(
name|doStats
condition|)
block|{
name|status
operator|.
name|docCount
operator|++
expr_stmt|;
block|}
for|for
control|(
name|String
name|field
range|:
name|tfv
control|)
block|{
if|if
condition|(
name|doStats
condition|)
block|{
name|status
operator|.
name|totVectors
operator|++
expr_stmt|;
block|}
comment|// Make sure FieldInfo thinks this field is vector'd:
specifier|final
name|FieldInfo
name|fieldInfo
init|=
name|fieldInfos
operator|.
name|fieldInfo
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fieldInfo
operator|.
name|hasVectors
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"docID="
operator|+
name|j
operator|+
literal|" has term vectors for field="
operator|+
name|field
operator|+
literal|" but FieldInfo has storeTermVector=false"
argument_list|)
throw|;
block|}
if|if
condition|(
name|crossCheckTermVectors
condition|)
block|{
name|Terms
name|terms
init|=
name|tfv
operator|.
name|terms
argument_list|(
name|field
argument_list|)
decl_stmt|;
name|TermsEnum
name|termsEnum
init|=
name|terms
operator|.
name|iterator
argument_list|()
decl_stmt|;
specifier|final
name|boolean
name|postingsHasFreq
init|=
name|fieldInfo
operator|.
name|getIndexOptions
argument_list|()
operator|.
name|compareTo
argument_list|(
name|IndexOptions
operator|.
name|DOCS_AND_FREQS
argument_list|)
operator|>=
literal|0
decl_stmt|;
specifier|final
name|boolean
name|postingsHasPayload
init|=
name|fieldInfo
operator|.
name|hasPayloads
argument_list|()
decl_stmt|;
specifier|final
name|boolean
name|vectorsHasPayload
init|=
name|terms
operator|.
name|hasPayloads
argument_list|()
decl_stmt|;
name|Terms
name|postingsTerms
init|=
name|postingsFields
operator|.
name|terms
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|postingsTerms
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"vector field="
operator|+
name|field
operator|+
literal|" does not exist in postings; doc="
operator|+
name|j
argument_list|)
throw|;
block|}
name|TermsEnum
name|postingsTermsEnum
init|=
name|postingsTerms
operator|.
name|iterator
argument_list|()
decl_stmt|;
specifier|final
name|boolean
name|hasProx
init|=
name|terms
operator|.
name|hasOffsets
argument_list|()
operator|||
name|terms
operator|.
name|hasPositions
argument_list|()
decl_stmt|;
name|BytesRef
name|term
init|=
literal|null
decl_stmt|;
while|while
condition|(
operator|(
name|term
operator|=
name|termsEnum
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
comment|// This is the term vectors:
name|postings
operator|=
name|termsEnum
operator|.
name|postings
argument_list|(
name|postings
argument_list|,
name|PostingsEnum
operator|.
name|ALL
argument_list|)
expr_stmt|;
assert|assert
name|postings
operator|!=
literal|null
assert|;
if|if
condition|(
operator|!
name|postingsTermsEnum
operator|.
name|seekExact
argument_list|(
name|term
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"vector term="
operator|+
name|term
operator|+
literal|" field="
operator|+
name|field
operator|+
literal|" does not exist in postings; doc="
operator|+
name|j
argument_list|)
throw|;
block|}
comment|// This is the inverted index ("real" postings):
name|postingsDocs
operator|=
name|postingsTermsEnum
operator|.
name|postings
argument_list|(
name|postingsDocs
argument_list|,
name|PostingsEnum
operator|.
name|ALL
argument_list|)
expr_stmt|;
assert|assert
name|postingsDocs
operator|!=
literal|null
assert|;
specifier|final
name|int
name|advanceDoc
init|=
name|postingsDocs
operator|.
name|advance
argument_list|(
name|j
argument_list|)
decl_stmt|;
if|if
condition|(
name|advanceDoc
operator|!=
name|j
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"vector term="
operator|+
name|term
operator|+
literal|" field="
operator|+
name|field
operator|+
literal|": doc="
operator|+
name|j
operator|+
literal|" was not found in postings (got: "
operator|+
name|advanceDoc
operator|+
literal|")"
argument_list|)
throw|;
block|}
specifier|final
name|int
name|doc
init|=
name|postings
operator|.
name|nextDoc
argument_list|()
decl_stmt|;
if|if
condition|(
name|doc
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"vector for doc "
operator|+
name|j
operator|+
literal|" didn't return docID=0: got docID="
operator|+
name|doc
argument_list|)
throw|;
block|}
if|if
condition|(
name|postingsHasFreq
condition|)
block|{
specifier|final
name|int
name|tf
init|=
name|postings
operator|.
name|freq
argument_list|()
decl_stmt|;
if|if
condition|(
name|postingsHasFreq
operator|&&
name|postingsDocs
operator|.
name|freq
argument_list|()
operator|!=
name|tf
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"vector term="
operator|+
name|term
operator|+
literal|" field="
operator|+
name|field
operator|+
literal|" doc="
operator|+
name|j
operator|+
literal|": freq="
operator|+
name|tf
operator|+
literal|" differs from postings freq="
operator|+
name|postingsDocs
operator|.
name|freq
argument_list|()
argument_list|)
throw|;
block|}
comment|// Term vectors has prox?
if|if
condition|(
name|hasProx
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tf
condition|;
name|i
operator|++
control|)
block|{
name|int
name|pos
init|=
name|postings
operator|.
name|nextPosition
argument_list|()
decl_stmt|;
if|if
condition|(
name|postingsTerms
operator|.
name|hasPositions
argument_list|()
condition|)
block|{
name|int
name|postingsPos
init|=
name|postingsDocs
operator|.
name|nextPosition
argument_list|()
decl_stmt|;
if|if
condition|(
name|terms
operator|.
name|hasPositions
argument_list|()
operator|&&
name|pos
operator|!=
name|postingsPos
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"vector term="
operator|+
name|term
operator|+
literal|" field="
operator|+
name|field
operator|+
literal|" doc="
operator|+
name|j
operator|+
literal|": pos="
operator|+
name|pos
operator|+
literal|" differs from postings pos="
operator|+
name|postingsPos
argument_list|)
throw|;
block|}
block|}
comment|// Call the methods to at least make
comment|// sure they don't throw exc:
specifier|final
name|int
name|startOffset
init|=
name|postings
operator|.
name|startOffset
argument_list|()
decl_stmt|;
specifier|final
name|int
name|endOffset
init|=
name|postings
operator|.
name|endOffset
argument_list|()
decl_stmt|;
comment|// TODO: these are too anal...?
comment|/*                         if (endOffset< startOffset) {                         throw new RuntimeException("vector startOffset=" + startOffset + " is> endOffset=" + endOffset);                         }                         if (startOffset< lastStartOffset) {                         throw new RuntimeException("vector startOffset=" + startOffset + " is< prior startOffset=" + lastStartOffset);                         }                         lastStartOffset = startOffset;                          */
if|if
condition|(
name|startOffset
operator|!=
operator|-
literal|1
operator|&&
name|endOffset
operator|!=
operator|-
literal|1
operator|&&
name|postingsTerms
operator|.
name|hasOffsets
argument_list|()
condition|)
block|{
name|int
name|postingsStartOffset
init|=
name|postingsDocs
operator|.
name|startOffset
argument_list|()
decl_stmt|;
name|int
name|postingsEndOffset
init|=
name|postingsDocs
operator|.
name|endOffset
argument_list|()
decl_stmt|;
if|if
condition|(
name|startOffset
operator|!=
name|postingsStartOffset
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"vector term="
operator|+
name|term
operator|+
literal|" field="
operator|+
name|field
operator|+
literal|" doc="
operator|+
name|j
operator|+
literal|": startOffset="
operator|+
name|startOffset
operator|+
literal|" differs from postings startOffset="
operator|+
name|postingsStartOffset
argument_list|)
throw|;
block|}
if|if
condition|(
name|endOffset
operator|!=
name|postingsEndOffset
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"vector term="
operator|+
name|term
operator|+
literal|" field="
operator|+
name|field
operator|+
literal|" doc="
operator|+
name|j
operator|+
literal|": endOffset="
operator|+
name|endOffset
operator|+
literal|" differs from postings endOffset="
operator|+
name|postingsEndOffset
argument_list|)
throw|;
block|}
block|}
name|BytesRef
name|payload
init|=
name|postings
operator|.
name|getPayload
argument_list|()
decl_stmt|;
if|if
condition|(
name|payload
operator|!=
literal|null
condition|)
block|{
assert|assert
name|vectorsHasPayload
assert|;
block|}
if|if
condition|(
name|postingsHasPayload
operator|&&
name|vectorsHasPayload
condition|)
block|{
if|if
condition|(
name|payload
operator|==
literal|null
condition|)
block|{
comment|// we have payloads, but not at this position.
comment|// postings has payloads too, it should not have one at this position
if|if
condition|(
name|postingsDocs
operator|.
name|getPayload
argument_list|()
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"vector term="
operator|+
name|term
operator|+
literal|" field="
operator|+
name|field
operator|+
literal|" doc="
operator|+
name|j
operator|+
literal|" has no payload but postings does: "
operator|+
name|postingsDocs
operator|.
name|getPayload
argument_list|()
argument_list|)
throw|;
block|}
block|}
else|else
block|{
comment|// we have payloads, and one at this position
comment|// postings should also have one at this position, with the same bytes.
if|if
condition|(
name|postingsDocs
operator|.
name|getPayload
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"vector term="
operator|+
name|term
operator|+
literal|" field="
operator|+
name|field
operator|+
literal|" doc="
operator|+
name|j
operator|+
literal|" has payload="
operator|+
name|payload
operator|+
literal|" but postings does not."
argument_list|)
throw|;
block|}
name|BytesRef
name|postingsPayload
init|=
name|postingsDocs
operator|.
name|getPayload
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|payload
operator|.
name|equals
argument_list|(
name|postingsPayload
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"vector term="
operator|+
name|term
operator|+
literal|" field="
operator|+
name|field
operator|+
literal|" doc="
operator|+
name|j
operator|+
literal|" has payload="
operator|+
name|payload
operator|+
literal|" but differs from postings payload="
operator|+
name|postingsPayload
argument_list|)
throw|;
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
name|float
name|vectorAvg
init|=
name|status
operator|.
name|docCount
operator|==
literal|0
condition|?
literal|0
else|:
name|status
operator|.
name|totVectors
operator|/
operator|(
name|float
operator|)
name|status
operator|.
name|docCount
decl_stmt|;
name|msg
argument_list|(
name|infoStream
argument_list|,
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"OK [%d total term vector count; avg %.1f term/freq vector fields per doc] [took %.3f sec]"
argument_list|,
name|status
operator|.
name|totVectors
argument_list|,
name|vectorAvg
argument_list|,
name|nsToSec
argument_list|(
name|System
operator|.
name|nanoTime
argument_list|()
operator|-
name|startNS
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
if|if
condition|(
name|failFast
condition|)
block|{
name|IOUtils
operator|.
name|reThrow
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
name|msg
argument_list|(
name|infoStream
argument_list|,
literal|"ERROR ["
operator|+
name|String
operator|.
name|valueOf
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|+
literal|"]"
argument_list|)
expr_stmt|;
name|status
operator|.
name|error
operator|=
name|e
expr_stmt|;
if|if
condition|(
name|infoStream
operator|!=
literal|null
condition|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|(
name|infoStream
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|status
return|;
block|}
comment|/** Repairs the index using previously returned result    *  from {@link #checkIndex}.  Note that this does not    *  remove any of the unreferenced files after it's done;    *  you must separately open an {@link IndexWriter}, which    *  deletes unreferenced files when it's created.    *    *<p><b>WARNING</b>: this writes a    *  new segments file into the index, effectively removing    *  all documents in broken segments from the index.    *  BE CAREFUL.    */
DECL|method|exorciseIndex
specifier|public
name|void
name|exorciseIndex
parameter_list|(
name|Status
name|result
parameter_list|)
throws|throws
name|IOException
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|partial
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"can only exorcise an index that was fully checked (this status checked a subset of segments)"
argument_list|)
throw|;
name|result
operator|.
name|newSegments
operator|.
name|changed
argument_list|()
expr_stmt|;
name|result
operator|.
name|newSegments
operator|.
name|commit
argument_list|(
name|result
operator|.
name|dir
argument_list|)
expr_stmt|;
block|}
DECL|field|assertsOn
specifier|private
specifier|static
name|boolean
name|assertsOn
decl_stmt|;
DECL|method|testAsserts
specifier|private
specifier|static
name|boolean
name|testAsserts
parameter_list|()
block|{
name|assertsOn
operator|=
literal|true
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|/**    * Check whether asserts are enabled or not.    * @return true iff asserts are enabled    */
DECL|method|assertsOn
specifier|public
specifier|static
name|boolean
name|assertsOn
parameter_list|()
block|{
assert|assert
name|testAsserts
argument_list|()
assert|;
return|return
name|assertsOn
return|;
block|}
comment|/** Command-line interface to check and exorcise corrupt segments from an index.<p>     Run it like this:<pre>     java -ea:org.apache.lucene... org.apache.lucene.index.CheckIndex pathToIndex [-exorcise] [-verbose] [-segment X] [-segment Y]</pre><ul><li><code>-exorcise</code>: actually write a new segments_N file, removing any problematic segments. *LOSES DATA*<li><code>-segment X</code>: only check the specified     segment(s).  This can be specified multiple times,     to check more than one segment, eg<code>-segment _2     -segment _a</code>.  You can't use this with the -exorcise     option.</ul><p><b>WARNING</b>:<code>-exorcise</code> should only be used on an emergency basis as it will cause                        documents (perhaps many) to be permanently removed from the index.  Always make                        a backup copy of your index before running this!  Do not run this tool on an index                        that is actively being written to.  You have been warned!<p>                Run without -exorcise, this tool will open the index, report version information                        and report any exceptions it hits and what action it would take if -exorcise were                        specified.  With -exorcise, this tool will remove any segments that have issues and                        write a new segments_N file.  This means all documents contained in the affected                        segments will be removed.<p>                        This tool exits with exit code 1 if the index cannot be opened or has any                        corruption, else 0.    */
DECL|method|main
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|int
name|exitCode
init|=
name|doMain
argument_list|(
name|args
argument_list|)
decl_stmt|;
name|System
operator|.
name|exit
argument_list|(
name|exitCode
argument_list|)
expr_stmt|;
block|}
comment|/**    * Run-time configuration options for CheckIndex commands.    */
DECL|class|Options
specifier|public
specifier|static
class|class
name|Options
block|{
DECL|field|doExorcise
name|boolean
name|doExorcise
init|=
literal|false
decl_stmt|;
DECL|field|doCrossCheckTermVectors
name|boolean
name|doCrossCheckTermVectors
init|=
literal|false
decl_stmt|;
DECL|field|verbose
name|boolean
name|verbose
init|=
literal|false
decl_stmt|;
DECL|field|doChecksumsOnly
name|boolean
name|doChecksumsOnly
init|=
literal|false
decl_stmt|;
DECL|field|onlySegments
name|List
argument_list|<
name|String
argument_list|>
name|onlySegments
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|indexPath
name|String
name|indexPath
init|=
literal|null
decl_stmt|;
DECL|field|dirImpl
name|String
name|dirImpl
init|=
literal|null
decl_stmt|;
DECL|field|out
name|PrintStream
name|out
init|=
literal|null
decl_stmt|;
comment|/** Sole constructor. */
DECL|method|Options
specifier|public
name|Options
parameter_list|()
block|{}
comment|/**      * Get the name of the FSDirectory implementation class to use.      */
DECL|method|getDirImpl
specifier|public
name|String
name|getDirImpl
parameter_list|()
block|{
return|return
name|dirImpl
return|;
block|}
comment|/**      * Get the directory containing the index.      */
DECL|method|getIndexPath
specifier|public
name|String
name|getIndexPath
parameter_list|()
block|{
return|return
name|indexPath
return|;
block|}
comment|/**      * Set the PrintStream to use for reporting results.      */
DECL|method|setOut
specifier|public
name|void
name|setOut
parameter_list|(
name|PrintStream
name|out
parameter_list|)
block|{
name|this
operator|.
name|out
operator|=
name|out
expr_stmt|;
block|}
block|}
comment|// actual main: returns exit code instead of terminating JVM (for easy testing)
annotation|@
name|SuppressForbidden
argument_list|(
name|reason
operator|=
literal|"System.out required: command line tool"
argument_list|)
DECL|method|doMain
specifier|private
specifier|static
name|int
name|doMain
parameter_list|(
name|String
name|args
index|[]
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|Options
name|opts
decl_stmt|;
try|try
block|{
name|opts
operator|=
name|parseOptions
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
if|if
condition|(
operator|!
name|assertsOn
argument_list|()
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\nNOTE: testing will be more thorough if you run java with '-ea:org.apache.lucene...', so assertions are enabled"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\nOpening index @ "
operator|+
name|opts
operator|.
name|indexPath
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
name|Directory
name|directory
init|=
literal|null
decl_stmt|;
name|Path
name|path
init|=
name|Paths
operator|.
name|get
argument_list|(
name|opts
operator|.
name|indexPath
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
name|opts
operator|.
name|dirImpl
operator|==
literal|null
condition|)
block|{
name|directory
operator|=
name|FSDirectory
operator|.
name|open
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|directory
operator|=
name|CommandLineUtil
operator|.
name|newFSDirectory
argument_list|(
name|opts
operator|.
name|dirImpl
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"ERROR: could not open directory \""
operator|+
name|opts
operator|.
name|indexPath
operator|+
literal|"\"; exiting"
argument_list|)
expr_stmt|;
name|t
operator|.
name|printStackTrace
argument_list|(
name|System
operator|.
name|out
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
try|try
init|(
name|Directory
name|dir
init|=
name|directory
init|;
name|CheckIndex
name|checker
operator|=
operator|new
name|CheckIndex
argument_list|(
name|dir
argument_list|)
init|)
block|{
name|opts
operator|.
name|out
operator|=
name|System
operator|.
name|out
expr_stmt|;
return|return
name|checker
operator|.
name|doCheck
argument_list|(
name|opts
argument_list|)
return|;
block|}
block|}
comment|/**    * Parse command line args into fields    * @param args The command line arguments    * @return An Options struct    * @throws IllegalArgumentException if any of the CLI args are invalid    */
DECL|method|parseOptions
specifier|public
specifier|static
name|Options
name|parseOptions
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|Options
name|opts
init|=
operator|new
name|Options
argument_list|()
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|i
operator|<
name|args
operator|.
name|length
condition|)
block|{
name|String
name|arg
init|=
name|args
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
literal|"-fast"
operator|.
name|equals
argument_list|(
name|arg
argument_list|)
condition|)
block|{
name|opts
operator|.
name|doChecksumsOnly
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-exorcise"
operator|.
name|equals
argument_list|(
name|arg
argument_list|)
condition|)
block|{
name|opts
operator|.
name|doExorcise
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-crossCheckTermVectors"
operator|.
name|equals
argument_list|(
name|arg
argument_list|)
condition|)
block|{
name|opts
operator|.
name|doCrossCheckTermVectors
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|arg
operator|.
name|equals
argument_list|(
literal|"-verbose"
argument_list|)
condition|)
block|{
name|opts
operator|.
name|verbose
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|arg
operator|.
name|equals
argument_list|(
literal|"-segment"
argument_list|)
condition|)
block|{
if|if
condition|(
name|i
operator|==
name|args
operator|.
name|length
operator|-
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"ERROR: missing name for -segment option"
argument_list|)
throw|;
block|}
name|i
operator|++
expr_stmt|;
name|opts
operator|.
name|onlySegments
operator|.
name|add
argument_list|(
name|args
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-dir-impl"
operator|.
name|equals
argument_list|(
name|arg
argument_list|)
condition|)
block|{
if|if
condition|(
name|i
operator|==
name|args
operator|.
name|length
operator|-
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"ERROR: missing value for -dir-impl option"
argument_list|)
throw|;
block|}
name|i
operator|++
expr_stmt|;
name|opts
operator|.
name|dirImpl
operator|=
name|args
index|[
name|i
index|]
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|opts
operator|.
name|indexPath
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"ERROR: unexpected extra argument '"
operator|+
name|args
index|[
name|i
index|]
operator|+
literal|"'"
argument_list|)
throw|;
block|}
name|opts
operator|.
name|indexPath
operator|=
name|args
index|[
name|i
index|]
expr_stmt|;
block|}
name|i
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|opts
operator|.
name|indexPath
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"\nERROR: index path not specified"
operator|+
literal|"\nUsage: java org.apache.lucene.index.CheckIndex pathToIndex [-exorcise] [-crossCheckTermVectors] [-segment X] [-segment Y] [-dir-impl X]\n"
operator|+
literal|"\n"
operator|+
literal|"  -exorcise: actually write a new segments_N file, removing any problematic segments\n"
operator|+
literal|"  -fast: just verify file checksums, omitting logical integrity checks\n"
operator|+
literal|"  -crossCheckTermVectors: verifies that term vectors match postings; THIS IS VERY SLOW!\n"
operator|+
literal|"  -codec X: when exorcising, codec to write the new segments_N file with\n"
operator|+
literal|"  -verbose: print additional details\n"
operator|+
literal|"  -segment X: only check the specified segments.  This can be specified multiple\n"
operator|+
literal|"              times, to check more than one segment, eg '-segment _2 -segment _a'.\n"
operator|+
literal|"              You can't use this with the -exorcise option\n"
operator|+
literal|"  -dir-impl X: use a specific "
operator|+
name|FSDirectory
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" implementation. "
operator|+
literal|"If no package is specified the "
operator|+
name|FSDirectory
operator|.
name|class
operator|.
name|getPackage
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" package will be used.\n"
operator|+
literal|"\n"
operator|+
literal|"**WARNING**: -exorcise *LOSES DATA*. This should only be used on an emergency basis as it will cause\n"
operator|+
literal|"documents (perhaps many) to be permanently removed from the index.  Always make\n"
operator|+
literal|"a backup copy of your index before running this!  Do not run this tool on an index\n"
operator|+
literal|"that is actively being written to.  You have been warned!\n"
operator|+
literal|"\n"
operator|+
literal|"Run without -exorcise, this tool will open the index, report version information\n"
operator|+
literal|"and report any exceptions it hits and what action it would take if -exorcise were\n"
operator|+
literal|"specified.  With -exorcise, this tool will remove any segments that have issues and\n"
operator|+
literal|"write a new segments_N file.  This means all documents contained in the affected\n"
operator|+
literal|"segments will be removed.\n"
operator|+
literal|"\n"
operator|+
literal|"This tool exits with exit code 1 if the index cannot be opened or has any\n"
operator|+
literal|"corruption, else 0.\n"
argument_list|)
throw|;
block|}
if|if
condition|(
name|opts
operator|.
name|onlySegments
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|opts
operator|.
name|onlySegments
operator|=
literal|null
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|opts
operator|.
name|doExorcise
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"ERROR: cannot specify both -exorcise and -segment"
argument_list|)
throw|;
block|}
if|if
condition|(
name|opts
operator|.
name|doChecksumsOnly
operator|&&
name|opts
operator|.
name|doCrossCheckTermVectors
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"ERROR: cannot specify both -fast and -crossCheckTermVectors"
argument_list|)
throw|;
block|}
return|return
name|opts
return|;
block|}
comment|/**    * Actually perform the index check    * @param opts The options to use for this check    * @return 0 iff the index is clean, 1 otherwise    */
DECL|method|doCheck
specifier|public
name|int
name|doCheck
parameter_list|(
name|Options
name|opts
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|setCrossCheckTermVectors
argument_list|(
name|opts
operator|.
name|doCrossCheckTermVectors
argument_list|)
expr_stmt|;
name|setChecksumsOnly
argument_list|(
name|opts
operator|.
name|doChecksumsOnly
argument_list|)
expr_stmt|;
name|setInfoStream
argument_list|(
name|opts
operator|.
name|out
argument_list|,
name|opts
operator|.
name|verbose
argument_list|)
expr_stmt|;
name|Status
name|result
init|=
name|checkIndex
argument_list|(
name|opts
operator|.
name|onlySegments
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|.
name|missingSegments
condition|)
block|{
return|return
literal|1
return|;
block|}
if|if
condition|(
operator|!
name|result
operator|.
name|clean
condition|)
block|{
if|if
condition|(
operator|!
name|opts
operator|.
name|doExorcise
condition|)
block|{
name|opts
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"WARNING: would write new segments file, and "
operator|+
name|result
operator|.
name|totLoseDocCount
operator|+
literal|" documents would be lost, if -exorcise were specified\n"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|opts
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"WARNING: "
operator|+
name|result
operator|.
name|totLoseDocCount
operator|+
literal|" documents will be lost\n"
argument_list|)
expr_stmt|;
name|opts
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"NOTE: will write new segments file in 5 seconds; this will remove "
operator|+
name|result
operator|.
name|totLoseDocCount
operator|+
literal|" docs from the index. YOU WILL LOSE DATA. THIS IS YOUR LAST CHANCE TO CTRL+C!"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|s
init|=
literal|0
init|;
name|s
operator|<
literal|5
condition|;
name|s
operator|++
control|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|opts
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  "
operator|+
operator|(
literal|5
operator|-
name|s
operator|)
operator|+
literal|"..."
argument_list|)
expr_stmt|;
block|}
name|opts
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Writing..."
argument_list|)
expr_stmt|;
name|exorciseIndex
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|opts
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"OK"
argument_list|)
expr_stmt|;
name|opts
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Wrote new segments file \""
operator|+
name|result
operator|.
name|newSegments
operator|.
name|getSegmentsFileName
argument_list|()
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
block|}
name|opts
operator|.
name|out
operator|.
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|clean
operator|==
literal|true
condition|)
block|{
return|return
literal|0
return|;
block|}
else|else
block|{
return|return
literal|1
return|;
block|}
block|}
DECL|method|nsToSec
specifier|private
specifier|static
name|double
name|nsToSec
parameter_list|(
name|long
name|ns
parameter_list|)
block|{
return|return
name|ns
operator|/
literal|1000000000.0
return|;
block|}
block|}
end_class
end_unit
