begin_unit
begin_package
DECL|package|org.apache.lucene.index
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Bits
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_comment
comment|/**   * This class contains utility methods and constants for DocValues  */
end_comment
begin_class
DECL|class|DocValues
specifier|public
specifier|final
class|class
name|DocValues
block|{
comment|/* no instantiation */
DECL|method|DocValues
specifier|private
name|DocValues
parameter_list|()
block|{}
comment|/**     * An empty BinaryDocValues which returns {@link BytesRef#EMPTY_BYTES} for every document     */
DECL|field|EMPTY_BINARY
specifier|public
specifier|static
specifier|final
name|BinaryDocValues
name|EMPTY_BINARY
init|=
operator|new
name|BinaryDocValues
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|get
parameter_list|(
name|int
name|docID
parameter_list|,
name|BytesRef
name|result
parameter_list|)
block|{
name|result
operator|.
name|bytes
operator|=
name|BytesRef
operator|.
name|EMPTY_BYTES
expr_stmt|;
name|result
operator|.
name|offset
operator|=
literal|0
expr_stmt|;
name|result
operator|.
name|length
operator|=
literal|0
expr_stmt|;
block|}
block|}
decl_stmt|;
comment|/**     * An empty NumericDocValues which returns zero for every document     */
DECL|field|EMPTY_NUMERIC
specifier|public
specifier|static
specifier|final
name|NumericDocValues
name|EMPTY_NUMERIC
init|=
operator|new
name|NumericDocValues
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|long
name|get
parameter_list|(
name|int
name|docID
parameter_list|)
block|{
return|return
literal|0
return|;
block|}
block|}
decl_stmt|;
comment|/**     * An empty SortedDocValues which returns {@link BytesRef#EMPTY_BYTES} for every document     */
DECL|field|EMPTY_SORTED
specifier|public
specifier|static
specifier|final
name|SortedDocValues
name|EMPTY_SORTED
init|=
operator|new
name|SortedDocValues
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|getOrd
parameter_list|(
name|int
name|docID
parameter_list|)
block|{
return|return
operator|-
literal|1
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|lookupOrd
parameter_list|(
name|int
name|ord
parameter_list|,
name|BytesRef
name|result
parameter_list|)
block|{
name|result
operator|.
name|bytes
operator|=
name|BytesRef
operator|.
name|EMPTY_BYTES
expr_stmt|;
name|result
operator|.
name|offset
operator|=
literal|0
expr_stmt|;
name|result
operator|.
name|length
operator|=
literal|0
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getValueCount
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
block|}
decl_stmt|;
comment|/**     * An empty SortedDocValues which returns {@link SortedSetDocValues#NO_MORE_ORDS} for every document     */
DECL|field|EMPTY_SORTED_SET
specifier|public
specifier|static
specifier|final
name|SortedSetDocValues
name|EMPTY_SORTED_SET
init|=
operator|new
name|RandomAccessOrds
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|long
name|nextOrd
parameter_list|()
block|{
return|return
name|NO_MORE_ORDS
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setDocument
parameter_list|(
name|int
name|docID
parameter_list|)
block|{}
annotation|@
name|Override
specifier|public
name|void
name|lookupOrd
parameter_list|(
name|long
name|ord
parameter_list|,
name|BytesRef
name|result
parameter_list|)
block|{
throw|throw
operator|new
name|IndexOutOfBoundsException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getValueCount
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|ordAt
parameter_list|(
name|int
name|index
parameter_list|)
block|{
throw|throw
operator|new
name|IndexOutOfBoundsException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|cardinality
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
block|}
decl_stmt|;
comment|/**     * Returns a multi-valued view over the provided SortedDocValues     */
DECL|method|singleton
specifier|public
specifier|static
name|SortedSetDocValues
name|singleton
parameter_list|(
name|SortedDocValues
name|dv
parameter_list|)
block|{
return|return
operator|new
name|SingletonSortedSetDocValues
argument_list|(
name|dv
argument_list|)
return|;
block|}
comment|/**     * Returns a single-valued view of the SortedSetDocValues, if it was previously    * wrapped with {@link #singleton}, or null.     */
DECL|method|unwrapSingleton
specifier|public
specifier|static
name|SortedDocValues
name|unwrapSingleton
parameter_list|(
name|SortedSetDocValues
name|dv
parameter_list|)
block|{
if|if
condition|(
name|dv
operator|instanceof
name|SingletonSortedSetDocValues
condition|)
block|{
return|return
operator|(
operator|(
name|SingletonSortedSetDocValues
operator|)
name|dv
operator|)
operator|.
name|getSortedDocValues
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
comment|/**    * Returns a Bits representing all documents from<code>dv</code> that have a value.    */
DECL|method|docsWithValue
specifier|public
specifier|static
name|Bits
name|docsWithValue
parameter_list|(
specifier|final
name|SortedDocValues
name|dv
parameter_list|,
specifier|final
name|int
name|maxDoc
parameter_list|)
block|{
return|return
operator|new
name|Bits
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|get
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|dv
operator|.
name|getOrd
argument_list|(
name|index
argument_list|)
operator|>=
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|length
parameter_list|()
block|{
return|return
name|maxDoc
return|;
block|}
block|}
return|;
block|}
comment|/**    * Returns a Bits representing all documents from<code>dv</code> that have a value.    */
DECL|method|docsWithValue
specifier|public
specifier|static
name|Bits
name|docsWithValue
parameter_list|(
specifier|final
name|SortedSetDocValues
name|dv
parameter_list|,
specifier|final
name|int
name|maxDoc
parameter_list|)
block|{
return|return
operator|new
name|Bits
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|get
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|dv
operator|.
name|setDocument
argument_list|(
name|index
argument_list|)
expr_stmt|;
return|return
name|dv
operator|.
name|nextOrd
argument_list|()
operator|!=
name|SortedSetDocValues
operator|.
name|NO_MORE_ORDS
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|length
parameter_list|()
block|{
return|return
name|maxDoc
return|;
block|}
block|}
return|;
block|}
block|}
end_class
end_unit
