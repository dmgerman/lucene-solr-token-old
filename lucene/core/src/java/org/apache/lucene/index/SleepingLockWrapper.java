begin_unit
begin_package
DECL|package|org.apache.lucene.index
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|FilterDirectory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Lock
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|LockObtainFailedException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|ThreadInterruptedException
import|;
end_import
begin_comment
comment|/**   * Directory that wraps another, and that sleeps and retries  * if obtaining the lock fails.  *<p>  * This is not a good idea.  */
end_comment
begin_class
DECL|class|SleepingLockWrapper
specifier|final
class|class
name|SleepingLockWrapper
extends|extends
name|FilterDirectory
block|{
comment|/**     * Pass this lockWaitTimeout to try forever to obtain the lock.     */
DECL|field|LOCK_OBTAIN_WAIT_FOREVER
specifier|public
specifier|static
specifier|final
name|long
name|LOCK_OBTAIN_WAIT_FOREVER
init|=
operator|-
literal|1
decl_stmt|;
comment|/**     * How long {@link #obtainLock} waits, in milliseconds,    * in between attempts to acquire the lock.     */
DECL|field|DEFAULT_POLL_INTERVAL
specifier|public
specifier|static
name|long
name|DEFAULT_POLL_INTERVAL
init|=
literal|1000
decl_stmt|;
DECL|field|lockWaitTimeout
specifier|private
specifier|final
name|long
name|lockWaitTimeout
decl_stmt|;
DECL|field|pollInterval
specifier|private
specifier|final
name|long
name|pollInterval
decl_stmt|;
comment|/**    * Create a new SleepingLockFactory    * @param delegate        underlying directory to wrap    * @param lockWaitTimeout length of time to wait in milliseconds     *                        or {@link #LOCK_OBTAIN_WAIT_FOREVER} to retry forever.    */
DECL|method|SleepingLockWrapper
specifier|public
name|SleepingLockWrapper
parameter_list|(
name|Directory
name|delegate
parameter_list|,
name|long
name|lockWaitTimeout
parameter_list|)
block|{
name|this
argument_list|(
name|delegate
argument_list|,
name|lockWaitTimeout
argument_list|,
name|DEFAULT_POLL_INTERVAL
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create a new SleepingLockFactory    * @param delegate        underlying directory to wrap    * @param lockWaitTimeout length of time to wait in milliseconds     *                        or {@link #LOCK_OBTAIN_WAIT_FOREVER} to retry forever.    * @param pollInterval    poll once per this interval in milliseconds until    *                        {@code lockWaitTimeout} is exceeded.    */
DECL|method|SleepingLockWrapper
specifier|public
name|SleepingLockWrapper
parameter_list|(
name|Directory
name|delegate
parameter_list|,
name|long
name|lockWaitTimeout
parameter_list|,
name|long
name|pollInterval
parameter_list|)
block|{
name|super
argument_list|(
name|delegate
argument_list|)
expr_stmt|;
name|this
operator|.
name|lockWaitTimeout
operator|=
name|lockWaitTimeout
expr_stmt|;
name|this
operator|.
name|pollInterval
operator|=
name|pollInterval
expr_stmt|;
if|if
condition|(
name|lockWaitTimeout
operator|<
literal|0
operator|&&
name|lockWaitTimeout
operator|!=
name|LOCK_OBTAIN_WAIT_FOREVER
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"lockWaitTimeout should be LOCK_OBTAIN_WAIT_FOREVER or a non-negative number (got "
operator|+
name|lockWaitTimeout
operator|+
literal|")"
argument_list|)
throw|;
block|}
if|if
condition|(
name|pollInterval
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"pollInterval must be a non-negative number (got "
operator|+
name|pollInterval
operator|+
literal|")"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|obtainLock
specifier|public
name|Lock
name|obtainLock
parameter_list|(
name|String
name|lockName
parameter_list|)
throws|throws
name|IOException
block|{
name|LockObtainFailedException
name|failureReason
init|=
literal|null
decl_stmt|;
name|long
name|maxSleepCount
init|=
name|lockWaitTimeout
operator|/
name|pollInterval
decl_stmt|;
name|long
name|sleepCount
init|=
literal|0
decl_stmt|;
do|do
block|{
try|try
block|{
return|return
name|in
operator|.
name|obtainLock
argument_list|(
name|lockName
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|LockObtainFailedException
name|failed
parameter_list|)
block|{
if|if
condition|(
name|failureReason
operator|==
literal|null
condition|)
block|{
name|failureReason
operator|=
name|failed
expr_stmt|;
block|}
block|}
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|pollInterval
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
throw|throw
operator|new
name|ThreadInterruptedException
argument_list|(
name|ie
argument_list|)
throw|;
block|}
block|}
do|while
condition|(
name|sleepCount
operator|++
operator|<
name|maxSleepCount
operator|||
name|lockWaitTimeout
operator|==
name|LOCK_OBTAIN_WAIT_FOREVER
condition|)
do|;
comment|// we failed to obtain the lock in the required time
name|String
name|reason
init|=
literal|"Lock obtain timed out: "
operator|+
name|this
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|failureReason
operator|!=
literal|null
condition|)
block|{
name|reason
operator|+=
literal|": "
operator|+
name|failureReason
expr_stmt|;
block|}
throw|throw
operator|new
name|LockObtainFailedException
argument_list|(
name|reason
argument_list|,
name|failureReason
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"SleepingLockWrapper("
operator|+
name|in
operator|+
literal|")"
return|;
block|}
block|}
end_class
end_unit
