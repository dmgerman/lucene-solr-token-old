begin_unit
begin_package
DECL|package|org.apache.lucene.index
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|AlreadyClosedException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IOContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import
begin_class
DECL|class|StandardDirectoryReader
specifier|final
class|class
name|StandardDirectoryReader
extends|extends
name|DirectoryReader
block|{
DECL|field|writer
specifier|private
specifier|final
name|IndexWriter
name|writer
decl_stmt|;
DECL|field|segmentInfos
specifier|private
specifier|final
name|SegmentInfos
name|segmentInfos
decl_stmt|;
DECL|field|applyAllDeletes
specifier|private
specifier|final
name|boolean
name|applyAllDeletes
decl_stmt|;
comment|/** called only from static open() methods */
DECL|method|StandardDirectoryReader
name|StandardDirectoryReader
parameter_list|(
name|Directory
name|directory
parameter_list|,
name|AtomicReader
index|[]
name|readers
parameter_list|,
name|IndexWriter
name|writer
parameter_list|,
name|SegmentInfos
name|sis
parameter_list|,
name|boolean
name|applyAllDeletes
parameter_list|)
block|{
name|super
argument_list|(
name|directory
argument_list|,
name|readers
argument_list|)
expr_stmt|;
name|this
operator|.
name|writer
operator|=
name|writer
expr_stmt|;
name|this
operator|.
name|segmentInfos
operator|=
name|sis
expr_stmt|;
name|this
operator|.
name|applyAllDeletes
operator|=
name|applyAllDeletes
expr_stmt|;
block|}
comment|/** called from DirectoryReader.open(...) methods */
DECL|method|open
specifier|static
name|DirectoryReader
name|open
parameter_list|(
specifier|final
name|Directory
name|directory
parameter_list|,
specifier|final
name|IndexCommit
name|commit
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|(
name|DirectoryReader
operator|)
operator|new
name|SegmentInfos
operator|.
name|FindSegmentsFile
argument_list|(
name|directory
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|Object
name|doBody
parameter_list|(
name|String
name|segmentFileName
parameter_list|)
throws|throws
name|IOException
block|{
name|SegmentInfos
name|sis
init|=
operator|new
name|SegmentInfos
argument_list|()
decl_stmt|;
name|sis
operator|.
name|read
argument_list|(
name|directory
argument_list|,
name|segmentFileName
argument_list|)
expr_stmt|;
specifier|final
name|SegmentReader
index|[]
name|readers
init|=
operator|new
name|SegmentReader
index|[
name|sis
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|sis
operator|.
name|size
argument_list|()
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|readers
index|[
name|i
index|]
operator|=
operator|new
name|SegmentReader
argument_list|(
name|sis
operator|.
name|info
argument_list|(
name|i
argument_list|)
argument_list|,
name|IOContext
operator|.
name|READ
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|IOUtils
operator|.
name|closeWhileHandlingException
argument_list|(
name|readers
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
operator|new
name|StandardDirectoryReader
argument_list|(
name|directory
argument_list|,
name|readers
argument_list|,
literal|null
argument_list|,
name|sis
argument_list|,
literal|false
argument_list|)
return|;
block|}
block|}
operator|.
name|run
argument_list|(
name|commit
argument_list|)
return|;
block|}
comment|/** Used by near real-time search */
DECL|method|open
specifier|static
name|DirectoryReader
name|open
parameter_list|(
name|IndexWriter
name|writer
parameter_list|,
name|SegmentInfos
name|infos
parameter_list|,
name|boolean
name|applyAllDeletes
parameter_list|)
throws|throws
name|IOException
block|{
comment|// IndexWriter synchronizes externally before calling
comment|// us, which ensures infos will not change; so there's
comment|// no need to process segments in reverse order
specifier|final
name|int
name|numSegments
init|=
name|infos
operator|.
name|size
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|SegmentReader
argument_list|>
name|readers
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|Directory
name|dir
init|=
name|writer
operator|.
name|getDirectory
argument_list|()
decl_stmt|;
specifier|final
name|SegmentInfos
name|segmentInfos
init|=
name|infos
operator|.
name|clone
argument_list|()
decl_stmt|;
name|int
name|infosUpto
init|=
literal|0
decl_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numSegments
condition|;
name|i
operator|++
control|)
block|{
comment|// NOTE: important that we use infos not
comment|// segmentInfos here, so that we are passing the
comment|// actual instance of SegmentInfoPerCommit in
comment|// IndexWriter's segmentInfos:
specifier|final
name|SegmentCommitInfo
name|info
init|=
name|infos
operator|.
name|info
argument_list|(
name|i
argument_list|)
decl_stmt|;
assert|assert
name|info
operator|.
name|info
operator|.
name|dir
operator|==
name|dir
assert|;
specifier|final
name|ReadersAndUpdates
name|rld
init|=
name|writer
operator|.
name|readerPool
operator|.
name|get
argument_list|(
name|info
argument_list|,
literal|true
argument_list|)
decl_stmt|;
try|try
block|{
specifier|final
name|SegmentReader
name|reader
init|=
name|rld
operator|.
name|getReadOnlyClone
argument_list|(
name|IOContext
operator|.
name|READ
argument_list|)
decl_stmt|;
if|if
condition|(
name|reader
operator|.
name|numDocs
argument_list|()
operator|>
literal|0
operator|||
name|writer
operator|.
name|getKeepFullyDeletedSegments
argument_list|()
condition|)
block|{
comment|// Steal the ref:
name|readers
operator|.
name|add
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|infosUpto
operator|++
expr_stmt|;
block|}
else|else
block|{
name|reader
operator|.
name|decRef
argument_list|()
expr_stmt|;
name|segmentInfos
operator|.
name|remove
argument_list|(
name|infosUpto
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|writer
operator|.
name|readerPool
operator|.
name|release
argument_list|(
name|rld
argument_list|)
expr_stmt|;
block|}
block|}
name|writer
operator|.
name|incRefDeleter
argument_list|(
name|segmentInfos
argument_list|)
expr_stmt|;
name|StandardDirectoryReader
name|result
init|=
operator|new
name|StandardDirectoryReader
argument_list|(
name|dir
argument_list|,
name|readers
operator|.
name|toArray
argument_list|(
operator|new
name|SegmentReader
index|[
name|readers
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|,
name|writer
argument_list|,
name|segmentInfos
argument_list|,
name|applyAllDeletes
argument_list|)
decl_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
return|return
name|result
return|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
for|for
control|(
name|SegmentReader
name|r
range|:
name|readers
control|)
block|{
try|try
block|{
name|r
operator|.
name|decRef
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|th
parameter_list|)
block|{
comment|// ignore any exception that is thrown here to not mask any original
comment|// exception.
block|}
block|}
block|}
block|}
block|}
comment|/** This constructor is only used for {@link #doOpenIfChanged(SegmentInfos)} */
DECL|method|open
specifier|private
specifier|static
name|DirectoryReader
name|open
parameter_list|(
name|Directory
name|directory
parameter_list|,
name|SegmentInfos
name|infos
parameter_list|,
name|List
argument_list|<
name|?
extends|extends
name|AtomicReader
argument_list|>
name|oldReaders
parameter_list|)
throws|throws
name|IOException
block|{
comment|// we put the old SegmentReaders in a map, that allows us
comment|// to lookup a reader using its segment name
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|segmentReaders
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|oldReaders
operator|!=
literal|null
condition|)
block|{
comment|// create a Map SegmentName->SegmentReader
for|for
control|(
name|int
name|i
init|=
literal|0
init|,
name|c
init|=
name|oldReaders
operator|.
name|size
argument_list|()
init|;
name|i
operator|<
name|c
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|SegmentReader
name|sr
init|=
operator|(
name|SegmentReader
operator|)
name|oldReaders
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|segmentReaders
operator|.
name|put
argument_list|(
name|sr
operator|.
name|getSegmentName
argument_list|()
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|SegmentReader
index|[]
name|newReaders
init|=
operator|new
name|SegmentReader
index|[
name|infos
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|infos
operator|.
name|size
argument_list|()
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|SegmentCommitInfo
name|commitInfo
init|=
name|infos
operator|.
name|info
argument_list|(
name|i
argument_list|)
decl_stmt|;
comment|// find SegmentReader for this segment
name|Integer
name|oldReaderIndex
init|=
name|segmentReaders
operator|.
name|get
argument_list|(
name|commitInfo
operator|.
name|info
operator|.
name|name
argument_list|)
decl_stmt|;
name|SegmentReader
name|oldReader
decl_stmt|;
if|if
condition|(
name|oldReaderIndex
operator|==
literal|null
condition|)
block|{
comment|// this is a new segment, no old SegmentReader can be reused
name|oldReader
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
comment|// there is an old reader for this segment - we'll try to reopen it
name|oldReader
operator|=
operator|(
name|SegmentReader
operator|)
name|oldReaders
operator|.
name|get
argument_list|(
name|oldReaderIndex
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|SegmentReader
name|newReader
decl_stmt|;
if|if
condition|(
name|oldReader
operator|==
literal|null
operator|||
name|commitInfo
operator|.
name|info
operator|.
name|getUseCompoundFile
argument_list|()
operator|!=
name|oldReader
operator|.
name|getSegmentInfo
argument_list|()
operator|.
name|info
operator|.
name|getUseCompoundFile
argument_list|()
condition|)
block|{
comment|// this is a new reader; in case we hit an exception we can decRef it safely
name|newReader
operator|=
operator|new
name|SegmentReader
argument_list|(
name|commitInfo
argument_list|,
name|IOContext
operator|.
name|READ
argument_list|)
expr_stmt|;
name|newReaders
index|[
name|i
index|]
operator|=
name|newReader
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|oldReader
operator|.
name|getSegmentInfo
argument_list|()
operator|.
name|getDelGen
argument_list|()
operator|==
name|commitInfo
operator|.
name|getDelGen
argument_list|()
operator|&&
name|oldReader
operator|.
name|getSegmentInfo
argument_list|()
operator|.
name|getFieldInfosGen
argument_list|()
operator|==
name|commitInfo
operator|.
name|getFieldInfosGen
argument_list|()
condition|)
block|{
comment|// No change; this reader will be shared between
comment|// the old and the new one, so we must incRef
comment|// it:
name|oldReader
operator|.
name|incRef
argument_list|()
expr_stmt|;
name|newReaders
index|[
name|i
index|]
operator|=
name|oldReader
expr_stmt|;
block|}
else|else
block|{
comment|// Steal the ref returned by SegmentReader ctor:
assert|assert
name|commitInfo
operator|.
name|info
operator|.
name|dir
operator|==
name|oldReader
operator|.
name|getSegmentInfo
argument_list|()
operator|.
name|info
operator|.
name|dir
assert|;
comment|// Make a best effort to detect when the app illegally "rm -rf" their
comment|// index while a reader was open, and then called openIfChanged:
name|boolean
name|illegalDocCountChange
init|=
name|commitInfo
operator|.
name|info
operator|.
name|getDocCount
argument_list|()
operator|!=
name|oldReader
operator|.
name|getSegmentInfo
argument_list|()
operator|.
name|info
operator|.
name|getDocCount
argument_list|()
decl_stmt|;
name|boolean
name|hasNeitherDeletionsNorUpdates
init|=
name|commitInfo
operator|.
name|hasDeletions
argument_list|()
operator|==
literal|false
operator|&&
name|commitInfo
operator|.
name|hasFieldUpdates
argument_list|()
operator|==
literal|false
decl_stmt|;
name|boolean
name|deletesWereLost
init|=
name|commitInfo
operator|.
name|getDelGen
argument_list|()
operator|==
operator|-
literal|1
operator|&&
name|oldReader
operator|.
name|getSegmentInfo
argument_list|()
operator|.
name|getDelGen
argument_list|()
operator|!=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|illegalDocCountChange
operator|||
name|hasNeitherDeletionsNorUpdates
operator|||
name|deletesWereLost
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"same segment "
operator|+
name|commitInfo
operator|.
name|info
operator|.
name|name
operator|+
literal|" has invalid changes; likely you are re-opening a reader after illegally removing index files yourself and building a new index in their place.  Use IndexWriter.deleteAll or OpenMode.CREATE instead"
argument_list|)
throw|;
block|}
if|if
condition|(
name|oldReader
operator|.
name|getSegmentInfo
argument_list|()
operator|.
name|getDelGen
argument_list|()
operator|==
name|commitInfo
operator|.
name|getDelGen
argument_list|()
condition|)
block|{
comment|// only DV updates
name|newReaders
index|[
name|i
index|]
operator|=
operator|new
name|SegmentReader
argument_list|(
name|commitInfo
argument_list|,
name|oldReader
argument_list|,
name|oldReader
operator|.
name|getLiveDocs
argument_list|()
argument_list|,
name|oldReader
operator|.
name|numDocs
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// both DV and liveDocs have changed
name|newReaders
index|[
name|i
index|]
operator|=
operator|new
name|SegmentReader
argument_list|(
name|commitInfo
argument_list|,
name|oldReader
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|decRefWhileHandlingException
argument_list|(
name|newReaders
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
operator|new
name|StandardDirectoryReader
argument_list|(
name|directory
argument_list|,
name|newReaders
argument_list|,
literal|null
argument_list|,
name|infos
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|// TODO: move somewhere shared if it's useful elsewhere
DECL|method|decRefWhileHandlingException
specifier|private
specifier|static
name|void
name|decRefWhileHandlingException
parameter_list|(
name|SegmentReader
index|[]
name|readers
parameter_list|)
block|{
for|for
control|(
name|SegmentReader
name|reader
range|:
name|readers
control|)
block|{
if|if
condition|(
name|reader
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|reader
operator|.
name|decRef
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
comment|// Ignore so we keep throwing original exception
block|}
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
specifier|final
name|StringBuilder
name|buffer
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|'('
argument_list|)
expr_stmt|;
specifier|final
name|String
name|segmentsFile
init|=
name|segmentInfos
operator|.
name|getSegmentsFileName
argument_list|()
decl_stmt|;
if|if
condition|(
name|segmentsFile
operator|!=
literal|null
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
name|segmentsFile
argument_list|)
operator|.
name|append
argument_list|(
literal|":"
argument_list|)
operator|.
name|append
argument_list|(
name|segmentInfos
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|writer
operator|!=
literal|null
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|":nrt"
argument_list|)
expr_stmt|;
block|}
for|for
control|(
specifier|final
name|AtomicReader
name|r
range|:
name|getSequentialSubReaders
argument_list|()
control|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
name|buffer
operator|.
name|append
argument_list|(
literal|')'
argument_list|)
expr_stmt|;
return|return
name|buffer
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|doOpenIfChanged
specifier|protected
name|DirectoryReader
name|doOpenIfChanged
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|doOpenIfChanged
argument_list|(
operator|(
name|IndexCommit
operator|)
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|doOpenIfChanged
specifier|protected
name|DirectoryReader
name|doOpenIfChanged
parameter_list|(
specifier|final
name|IndexCommit
name|commit
parameter_list|)
throws|throws
name|IOException
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
comment|// If we were obtained by writer.getReader(), re-ask the
comment|// writer to get a new reader.
if|if
condition|(
name|writer
operator|!=
literal|null
condition|)
block|{
return|return
name|doOpenFromWriter
argument_list|(
name|commit
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|doOpenNoWriter
argument_list|(
name|commit
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|doOpenIfChanged
specifier|protected
name|DirectoryReader
name|doOpenIfChanged
parameter_list|(
name|IndexWriter
name|writer
parameter_list|,
name|boolean
name|applyAllDeletes
parameter_list|)
throws|throws
name|IOException
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
if|if
condition|(
name|writer
operator|==
name|this
operator|.
name|writer
operator|&&
name|applyAllDeletes
operator|==
name|this
operator|.
name|applyAllDeletes
condition|)
block|{
return|return
name|doOpenFromWriter
argument_list|(
literal|null
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|writer
operator|.
name|getReader
argument_list|(
name|applyAllDeletes
argument_list|)
return|;
block|}
block|}
DECL|method|doOpenFromWriter
specifier|private
name|DirectoryReader
name|doOpenFromWriter
parameter_list|(
name|IndexCommit
name|commit
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|commit
operator|!=
literal|null
condition|)
block|{
return|return
name|doOpenFromCommit
argument_list|(
name|commit
argument_list|)
return|;
block|}
if|if
condition|(
name|writer
operator|.
name|nrtIsCurrent
argument_list|(
name|segmentInfos
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|DirectoryReader
name|reader
init|=
name|writer
operator|.
name|getReader
argument_list|(
name|applyAllDeletes
argument_list|)
decl_stmt|;
comment|// If in fact no changes took place, return null:
if|if
condition|(
name|reader
operator|.
name|getVersion
argument_list|()
operator|==
name|segmentInfos
operator|.
name|getVersion
argument_list|()
condition|)
block|{
name|reader
operator|.
name|decRef
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
return|return
name|reader
return|;
block|}
DECL|method|doOpenNoWriter
specifier|private
name|DirectoryReader
name|doOpenNoWriter
parameter_list|(
name|IndexCommit
name|commit
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|commit
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|isCurrent
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|directory
operator|!=
name|commit
operator|.
name|getDirectory
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"the specified commit does not match the specified Directory"
argument_list|)
throw|;
block|}
if|if
condition|(
name|segmentInfos
operator|!=
literal|null
operator|&&
name|commit
operator|.
name|getSegmentsFileName
argument_list|()
operator|.
name|equals
argument_list|(
name|segmentInfos
operator|.
name|getSegmentsFileName
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
block|}
return|return
name|doOpenFromCommit
argument_list|(
name|commit
argument_list|)
return|;
block|}
DECL|method|doOpenFromCommit
specifier|private
name|DirectoryReader
name|doOpenFromCommit
parameter_list|(
name|IndexCommit
name|commit
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|(
name|DirectoryReader
operator|)
operator|new
name|SegmentInfos
operator|.
name|FindSegmentsFile
argument_list|(
name|directory
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|Object
name|doBody
parameter_list|(
name|String
name|segmentFileName
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|SegmentInfos
name|infos
init|=
operator|new
name|SegmentInfos
argument_list|()
decl_stmt|;
name|infos
operator|.
name|read
argument_list|(
name|directory
argument_list|,
name|segmentFileName
argument_list|)
expr_stmt|;
return|return
name|doOpenIfChanged
argument_list|(
name|infos
argument_list|)
return|;
block|}
block|}
operator|.
name|run
argument_list|(
name|commit
argument_list|)
return|;
block|}
DECL|method|doOpenIfChanged
name|DirectoryReader
name|doOpenIfChanged
parameter_list|(
name|SegmentInfos
name|infos
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|StandardDirectoryReader
operator|.
name|open
argument_list|(
name|directory
argument_list|,
name|infos
argument_list|,
name|getSequentialSubReaders
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getVersion
specifier|public
name|long
name|getVersion
parameter_list|()
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
return|return
name|segmentInfos
operator|.
name|getVersion
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|isCurrent
specifier|public
name|boolean
name|isCurrent
parameter_list|()
throws|throws
name|IOException
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
if|if
condition|(
name|writer
operator|==
literal|null
operator|||
name|writer
operator|.
name|isClosed
argument_list|()
condition|)
block|{
comment|// Fully read the segments file: this ensures that it's
comment|// completely written so that if
comment|// IndexWriter.prepareCommit has been called (but not
comment|// yet commit), then the reader will still see itself as
comment|// current:
name|SegmentInfos
name|sis
init|=
operator|new
name|SegmentInfos
argument_list|()
decl_stmt|;
name|sis
operator|.
name|read
argument_list|(
name|directory
argument_list|)
expr_stmt|;
comment|// we loaded SegmentInfos from the directory
return|return
name|sis
operator|.
name|getVersion
argument_list|()
operator|==
name|segmentInfos
operator|.
name|getVersion
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|writer
operator|.
name|nrtIsCurrent
argument_list|(
name|segmentInfos
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|doClose
specifier|protected
name|void
name|doClose
parameter_list|()
throws|throws
name|IOException
block|{
name|Throwable
name|firstExc
init|=
literal|null
decl_stmt|;
for|for
control|(
specifier|final
name|AtomicReader
name|r
range|:
name|getSequentialSubReaders
argument_list|()
control|)
block|{
comment|// try to close each reader, even if an exception is thrown
try|try
block|{
name|r
operator|.
name|decRef
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|firstExc
operator|==
literal|null
condition|)
block|{
name|firstExc
operator|=
name|t
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|writer
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|writer
operator|.
name|decRefDeleter
argument_list|(
name|segmentInfos
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AlreadyClosedException
name|ex
parameter_list|)
block|{
comment|// This is OK, it just means our original writer was
comment|// closed before we were, and this may leave some
comment|// un-referenced files in the index, which is
comment|// harmless.  The next time IW is opened on the
comment|// index, it will delete them.
block|}
block|}
comment|// throw the first exception
name|IOUtils
operator|.
name|reThrow
argument_list|(
name|firstExc
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getIndexCommit
specifier|public
name|IndexCommit
name|getIndexCommit
parameter_list|()
throws|throws
name|IOException
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
return|return
operator|new
name|ReaderCommit
argument_list|(
name|segmentInfos
argument_list|,
name|directory
argument_list|)
return|;
block|}
DECL|class|ReaderCommit
specifier|static
specifier|final
class|class
name|ReaderCommit
extends|extends
name|IndexCommit
block|{
DECL|field|segmentsFileName
specifier|private
name|String
name|segmentsFileName
decl_stmt|;
DECL|field|files
name|Collection
argument_list|<
name|String
argument_list|>
name|files
decl_stmt|;
DECL|field|dir
name|Directory
name|dir
decl_stmt|;
DECL|field|generation
name|long
name|generation
decl_stmt|;
DECL|field|userData
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|userData
decl_stmt|;
DECL|field|segmentCount
specifier|private
specifier|final
name|int
name|segmentCount
decl_stmt|;
DECL|method|ReaderCommit
name|ReaderCommit
parameter_list|(
name|SegmentInfos
name|infos
parameter_list|,
name|Directory
name|dir
parameter_list|)
throws|throws
name|IOException
block|{
name|segmentsFileName
operator|=
name|infos
operator|.
name|getSegmentsFileName
argument_list|()
expr_stmt|;
name|this
operator|.
name|dir
operator|=
name|dir
expr_stmt|;
name|userData
operator|=
name|infos
operator|.
name|getUserData
argument_list|()
expr_stmt|;
name|files
operator|=
name|Collections
operator|.
name|unmodifiableCollection
argument_list|(
name|infos
operator|.
name|files
argument_list|(
name|dir
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|generation
operator|=
name|infos
operator|.
name|getGeneration
argument_list|()
expr_stmt|;
name|segmentCount
operator|=
name|infos
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"DirectoryReader.ReaderCommit("
operator|+
name|segmentsFileName
operator|+
literal|")"
return|;
block|}
annotation|@
name|Override
DECL|method|getSegmentCount
specifier|public
name|int
name|getSegmentCount
parameter_list|()
block|{
return|return
name|segmentCount
return|;
block|}
annotation|@
name|Override
DECL|method|getSegmentsFileName
specifier|public
name|String
name|getSegmentsFileName
parameter_list|()
block|{
return|return
name|segmentsFileName
return|;
block|}
annotation|@
name|Override
DECL|method|getFileNames
specifier|public
name|Collection
argument_list|<
name|String
argument_list|>
name|getFileNames
parameter_list|()
block|{
return|return
name|files
return|;
block|}
annotation|@
name|Override
DECL|method|getDirectory
specifier|public
name|Directory
name|getDirectory
parameter_list|()
block|{
return|return
name|dir
return|;
block|}
annotation|@
name|Override
DECL|method|getGeneration
specifier|public
name|long
name|getGeneration
parameter_list|()
block|{
return|return
name|generation
return|;
block|}
annotation|@
name|Override
DECL|method|isDeleted
specifier|public
name|boolean
name|isDeleted
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|getUserData
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getUserData
parameter_list|()
block|{
return|return
name|userData
return|;
block|}
annotation|@
name|Override
DECL|method|delete
specifier|public
name|void
name|delete
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"This IndexCommit does not support deletions"
argument_list|)
throw|;
block|}
block|}
block|}
end_class
end_unit
