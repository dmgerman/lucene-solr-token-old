begin_unit
begin_package
DECL|package|org.apache.lucene.index
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|IdentityHashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_comment
comment|/** An {@link CompositeReader} which reads multiple, parallel indexes.  Each index added  * must have the same number of documents, and exactly the same hierarchical subreader structure,  * but typically each contains different fields. Deletions are taken from the first reader.  * Each document contains the union of the fields of all  * documents with the same document number.  When searching, matches for a  * query term are from the first index added that has the field.  *  *<p>This is useful, e.g., with collections that have large fields which  * change rarely and small fields that change more frequently.  The smaller  * fields may be re-indexed in a new index and both indexes may be searched  * together.  *   *<p><strong>Warning:</strong> It is up to you to make sure all indexes  * are created and modified the same way. For example, if you add  * documents to one index, you need to add the same documents in the  * same order to the other indexes.<em>Failure to do so will result in  * undefined behavior</em>.  * A good strategy to create suitable indexes with {@link IndexWriter} is to use  * {@link LogDocMergePolicy}, as this one does not reorder documents  * during merging (like {@code TieredMergePolicy}) and triggers merges  * by number of documents per segment. If you use different {@link MergePolicy}s  * it might happen that the segment structure of your index is no longer predictable.  */
end_comment
begin_class
DECL|class|ParallelCompositeReader
specifier|public
class|class
name|ParallelCompositeReader
extends|extends
name|BaseCompositeReader
argument_list|<
name|IndexReader
argument_list|>
block|{
DECL|field|closeSubReaders
specifier|private
specifier|final
name|boolean
name|closeSubReaders
decl_stmt|;
DECL|field|completeReaderSet
specifier|private
specifier|final
name|Set
argument_list|<
name|IndexReader
argument_list|>
name|completeReaderSet
init|=
name|Collections
operator|.
name|newSetFromMap
argument_list|(
operator|new
name|IdentityHashMap
argument_list|<
name|IndexReader
argument_list|,
name|Boolean
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
comment|/** Create a ParallelCompositeReader based on the provided    *  readers; auto-closes the given readers on {@link #close()}. */
DECL|method|ParallelCompositeReader
specifier|public
name|ParallelCompositeReader
parameter_list|(
name|CompositeReader
modifier|...
name|readers
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
literal|true
argument_list|,
name|readers
argument_list|)
expr_stmt|;
block|}
comment|/** Create a ParallelCompositeReader based on the provided    *  readers. */
DECL|method|ParallelCompositeReader
specifier|public
name|ParallelCompositeReader
parameter_list|(
name|boolean
name|closeSubReaders
parameter_list|,
name|CompositeReader
modifier|...
name|readers
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|closeSubReaders
argument_list|,
name|readers
argument_list|,
name|readers
argument_list|)
expr_stmt|;
block|}
comment|/** Expert: create a ParallelCompositeReader based on the provided    *  readers and storedFieldReaders; when a document is    *  loaded, only storedFieldsReaders will be used. */
DECL|method|ParallelCompositeReader
specifier|public
name|ParallelCompositeReader
parameter_list|(
name|boolean
name|closeSubReaders
parameter_list|,
name|CompositeReader
index|[]
name|readers
parameter_list|,
name|CompositeReader
index|[]
name|storedFieldReaders
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|prepareSubReaders
argument_list|(
name|readers
argument_list|,
name|storedFieldReaders
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|closeSubReaders
operator|=
name|closeSubReaders
expr_stmt|;
name|Collections
operator|.
name|addAll
argument_list|(
name|completeReaderSet
argument_list|,
name|readers
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|addAll
argument_list|(
name|completeReaderSet
argument_list|,
name|storedFieldReaders
argument_list|)
expr_stmt|;
comment|// update ref-counts (like MultiReader):
if|if
condition|(
operator|!
name|closeSubReaders
condition|)
block|{
for|for
control|(
specifier|final
name|IndexReader
name|reader
range|:
name|completeReaderSet
control|)
block|{
name|reader
operator|.
name|incRef
argument_list|()
expr_stmt|;
block|}
block|}
comment|// finally add our own synthetic readers, so we close or decRef them, too (it does not matter what we do)
name|completeReaderSet
operator|.
name|addAll
argument_list|(
name|getSequentialSubReaders
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|prepareSubReaders
specifier|private
specifier|static
name|IndexReader
index|[]
name|prepareSubReaders
parameter_list|(
name|CompositeReader
index|[]
name|readers
parameter_list|,
name|CompositeReader
index|[]
name|storedFieldsReaders
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|readers
operator|.
name|length
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|storedFieldsReaders
operator|.
name|length
operator|>
literal|0
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"There must be at least one main reader if storedFieldsReaders are used."
argument_list|)
throw|;
return|return
operator|new
name|IndexReader
index|[
literal|0
index|]
return|;
block|}
else|else
block|{
specifier|final
name|List
argument_list|<
name|?
extends|extends
name|IndexReader
argument_list|>
name|firstSubReaders
init|=
name|readers
index|[
literal|0
index|]
operator|.
name|getSequentialSubReaders
argument_list|()
decl_stmt|;
comment|// check compatibility:
specifier|final
name|int
name|maxDoc
init|=
name|readers
index|[
literal|0
index|]
operator|.
name|maxDoc
argument_list|()
decl_stmt|,
name|noSubs
init|=
name|firstSubReaders
operator|.
name|size
argument_list|()
decl_stmt|;
specifier|final
name|int
index|[]
name|childMaxDoc
init|=
operator|new
name|int
index|[
name|noSubs
index|]
decl_stmt|;
specifier|final
name|boolean
index|[]
name|childAtomic
init|=
operator|new
name|boolean
index|[
name|noSubs
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|noSubs
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|IndexReader
name|r
init|=
name|firstSubReaders
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|childMaxDoc
index|[
name|i
index|]
operator|=
name|r
operator|.
name|maxDoc
argument_list|()
expr_stmt|;
name|childAtomic
index|[
name|i
index|]
operator|=
name|r
operator|instanceof
name|AtomicReader
expr_stmt|;
block|}
name|validate
argument_list|(
name|readers
argument_list|,
name|maxDoc
argument_list|,
name|childMaxDoc
argument_list|,
name|childAtomic
argument_list|)
expr_stmt|;
name|validate
argument_list|(
name|storedFieldsReaders
argument_list|,
name|maxDoc
argument_list|,
name|childMaxDoc
argument_list|,
name|childAtomic
argument_list|)
expr_stmt|;
comment|// hierarchically build the same subreader structure as the first CompositeReader with Parallel*Readers:
specifier|final
name|IndexReader
index|[]
name|subReaders
init|=
operator|new
name|IndexReader
index|[
name|noSubs
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|subReaders
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|firstSubReaders
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|instanceof
name|AtomicReader
condition|)
block|{
specifier|final
name|AtomicReader
index|[]
name|atomicSubs
init|=
operator|new
name|AtomicReader
index|[
name|readers
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|readers
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|atomicSubs
index|[
name|j
index|]
operator|=
operator|(
name|AtomicReader
operator|)
name|readers
index|[
name|j
index|]
operator|.
name|getSequentialSubReaders
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
specifier|final
name|AtomicReader
index|[]
name|storedSubs
init|=
operator|new
name|AtomicReader
index|[
name|storedFieldsReaders
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|storedFieldsReaders
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|storedSubs
index|[
name|j
index|]
operator|=
operator|(
name|AtomicReader
operator|)
name|storedFieldsReaders
index|[
name|j
index|]
operator|.
name|getSequentialSubReaders
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
comment|// We pass true for closeSubs and we prevent closing of subreaders in doClose():
comment|// By this the synthetic throw-away readers used here are completely invisible to ref-counting
name|subReaders
index|[
name|i
index|]
operator|=
operator|new
name|ParallelAtomicReader
argument_list|(
literal|true
argument_list|,
name|atomicSubs
argument_list|,
name|storedSubs
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|void
name|doClose
parameter_list|()
block|{}
block|}
expr_stmt|;
block|}
else|else
block|{
assert|assert
name|firstSubReaders
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|instanceof
name|CompositeReader
assert|;
specifier|final
name|CompositeReader
index|[]
name|compositeSubs
init|=
operator|new
name|CompositeReader
index|[
name|readers
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|readers
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|compositeSubs
index|[
name|j
index|]
operator|=
operator|(
name|CompositeReader
operator|)
name|readers
index|[
name|j
index|]
operator|.
name|getSequentialSubReaders
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
specifier|final
name|CompositeReader
index|[]
name|storedSubs
init|=
operator|new
name|CompositeReader
index|[
name|storedFieldsReaders
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|storedFieldsReaders
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|storedSubs
index|[
name|j
index|]
operator|=
operator|(
name|CompositeReader
operator|)
name|storedFieldsReaders
index|[
name|j
index|]
operator|.
name|getSequentialSubReaders
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
comment|// We pass true for closeSubs and we prevent closing of subreaders in doClose():
comment|// By this the synthetic throw-away readers used here are completely invisible to ref-counting
name|subReaders
index|[
name|i
index|]
operator|=
operator|new
name|ParallelCompositeReader
argument_list|(
literal|true
argument_list|,
name|compositeSubs
argument_list|,
name|storedSubs
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|void
name|doClose
parameter_list|()
block|{}
block|}
expr_stmt|;
block|}
block|}
return|return
name|subReaders
return|;
block|}
block|}
DECL|method|validate
specifier|private
specifier|static
name|void
name|validate
parameter_list|(
name|CompositeReader
index|[]
name|readers
parameter_list|,
name|int
name|maxDoc
parameter_list|,
name|int
index|[]
name|childMaxDoc
parameter_list|,
name|boolean
index|[]
name|childAtomic
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|readers
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|CompositeReader
name|reader
init|=
name|readers
index|[
name|i
index|]
decl_stmt|;
specifier|final
name|List
argument_list|<
name|?
extends|extends
name|IndexReader
argument_list|>
name|subs
init|=
name|reader
operator|.
name|getSequentialSubReaders
argument_list|()
decl_stmt|;
if|if
condition|(
name|reader
operator|.
name|maxDoc
argument_list|()
operator|!=
name|maxDoc
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"All readers must have same maxDoc: "
operator|+
name|maxDoc
operator|+
literal|"!="
operator|+
name|reader
operator|.
name|maxDoc
argument_list|()
argument_list|)
throw|;
block|}
specifier|final
name|int
name|noSubs
init|=
name|subs
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|noSubs
operator|!=
name|childMaxDoc
operator|.
name|length
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"All readers must have same number of subReaders"
argument_list|)
throw|;
block|}
for|for
control|(
name|int
name|subIDX
init|=
literal|0
init|;
name|subIDX
operator|<
name|noSubs
condition|;
name|subIDX
operator|++
control|)
block|{
specifier|final
name|IndexReader
name|r
init|=
name|subs
operator|.
name|get
argument_list|(
name|subIDX
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|.
name|maxDoc
argument_list|()
operator|!=
name|childMaxDoc
index|[
name|subIDX
index|]
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"All readers must have same corresponding subReader maxDoc"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
operator|(
name|childAtomic
index|[
name|subIDX
index|]
condition|?
operator|(
name|r
operator|instanceof
name|AtomicReader
operator|)
else|:
operator|(
name|r
operator|instanceof
name|CompositeReader
operator|)
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"All readers must have same corresponding subReader types (atomic or composite)"
argument_list|)
throw|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|doClose
specifier|protected
specifier|synchronized
name|void
name|doClose
parameter_list|()
throws|throws
name|IOException
block|{
name|IOException
name|ioe
init|=
literal|null
decl_stmt|;
for|for
control|(
specifier|final
name|IndexReader
name|reader
range|:
name|completeReaderSet
control|)
block|{
try|try
block|{
if|if
condition|(
name|closeSubReaders
condition|)
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|reader
operator|.
name|decRef
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
if|if
condition|(
name|ioe
operator|==
literal|null
condition|)
name|ioe
operator|=
name|e
expr_stmt|;
block|}
block|}
comment|// throw the first exception
if|if
condition|(
name|ioe
operator|!=
literal|null
condition|)
throw|throw
name|ioe
throw|;
block|}
block|}
end_class
end_unit
