begin_unit
begin_package
DECL|package|org.apache.lucene.index
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|NumericDocValuesField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|DocIdSetIterator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|ArrayUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|FixedBitSet
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|InPlaceMergeSorter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|RamUsageEstimator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|packed
operator|.
name|PackedInts
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|packed
operator|.
name|PagedGrowableWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|packed
operator|.
name|PagedMutable
import|;
end_import
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_comment
comment|/**  * Holds numeric values updates of documents, of a single  * {@link NumericDocValuesField}.  *   * @lucene.experimental  */
end_comment
begin_interface
DECL|interface|NumericFieldUpdates
interface|interface
name|NumericFieldUpdates
block|{
comment|/**    * An iterator over documents and their updated values. Only documents with    * updates are returned by this iterator, and the documents are returned in    * increasing order.    */
DECL|class|UpdatesIterator
specifier|static
specifier|abstract
class|class
name|UpdatesIterator
block|{
comment|/**      * Returns the next document which has an update, or      * {@link DocIdSetIterator#NO_MORE_DOCS} if there are no more documents to      * return.      */
DECL|method|nextDoc
specifier|abstract
name|int
name|nextDoc
parameter_list|()
function_decl|;
comment|/** Returns the current document this iterator is on. */
DECL|method|doc
specifier|abstract
name|int
name|doc
parameter_list|()
function_decl|;
comment|/**      * Returns the value of the document returned from {@link #nextDoc()}. A      * {@code null} value means that it was unset for this document.      */
DECL|method|value
specifier|abstract
name|Long
name|value
parameter_list|()
function_decl|;
comment|/**      * Reset the iterator's state. Should be called before {@link #nextDoc()}      * and {@link #value()}.      */
DECL|method|reset
specifier|abstract
name|void
name|reset
parameter_list|()
function_decl|;
block|}
comment|/**    * A {@link NumericFieldUpdates} which holds the updated documents and values    * in packed structures. Only supports up to 2B entries (docs and values)    * since we need to sort the docs/values and the Sorter interfaces currently    * only take integer indexes.    */
DECL|class|PackedNumericFieldUpdates
specifier|static
specifier|final
class|class
name|PackedNumericFieldUpdates
implements|implements
name|NumericFieldUpdates
block|{
DECL|field|docsWithField
specifier|private
name|FixedBitSet
name|docsWithField
decl_stmt|;
DECL|field|docs
specifier|private
name|PagedMutable
name|docs
decl_stmt|;
DECL|field|values
specifier|private
name|PagedGrowableWriter
name|values
decl_stmt|;
DECL|field|size
specifier|private
name|int
name|size
decl_stmt|;
DECL|method|PackedNumericFieldUpdates
specifier|public
name|PackedNumericFieldUpdates
parameter_list|(
name|int
name|maxDoc
parameter_list|)
block|{
name|docsWithField
operator|=
operator|new
name|FixedBitSet
argument_list|(
literal|64
argument_list|)
expr_stmt|;
name|docs
operator|=
operator|new
name|PagedMutable
argument_list|(
literal|1
argument_list|,
literal|1024
argument_list|,
name|PackedInts
operator|.
name|bitsRequired
argument_list|(
name|maxDoc
operator|-
literal|1
argument_list|)
argument_list|,
name|PackedInts
operator|.
name|COMPACT
argument_list|)
expr_stmt|;
name|values
operator|=
operator|new
name|PagedGrowableWriter
argument_list|(
literal|1
argument_list|,
literal|1024
argument_list|,
literal|1
argument_list|,
name|PackedInts
operator|.
name|FAST
argument_list|)
expr_stmt|;
name|size
operator|=
literal|0
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|add
specifier|public
name|void
name|add
parameter_list|(
name|int
name|doc
parameter_list|,
name|Long
name|value
parameter_list|)
block|{
assert|assert
name|value
operator|!=
literal|null
assert|;
comment|// TODO: if the Sorter interface changes to take long indexes, we can remove that limitation
if|if
condition|(
name|size
operator|==
name|Integer
operator|.
name|MAX_VALUE
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"cannot support more than Integer.MAX_VALUE doc/value entries"
argument_list|)
throw|;
block|}
comment|// grow the structures to have room for more elements
if|if
condition|(
name|docs
operator|.
name|size
argument_list|()
operator|==
name|size
condition|)
block|{
name|docs
operator|=
name|docs
operator|.
name|grow
argument_list|(
name|size
operator|+
literal|1
argument_list|)
expr_stmt|;
name|values
operator|=
name|values
operator|.
name|grow
argument_list|(
name|size
operator|+
literal|1
argument_list|)
expr_stmt|;
name|int
name|numWords
init|=
call|(
name|int
call|)
argument_list|(
name|docs
operator|.
name|size
argument_list|()
operator|>>
literal|6
argument_list|)
decl_stmt|;
if|if
condition|(
name|docsWithField
operator|.
name|getBits
argument_list|()
operator|.
name|length
operator|<=
name|numWords
condition|)
block|{
name|numWords
operator|=
name|ArrayUtil
operator|.
name|oversize
argument_list|(
name|numWords
operator|+
literal|1
argument_list|,
name|RamUsageEstimator
operator|.
name|NUM_BYTES_LONG
argument_list|)
expr_stmt|;
name|docsWithField
operator|=
operator|new
name|FixedBitSet
argument_list|(
name|docsWithField
argument_list|,
name|numWords
operator|<<
literal|6
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|value
operator|!=
name|NumericUpdate
operator|.
name|MISSING
condition|)
block|{
comment|// only mark the document as having a value in that field if the value wasn't set to null (MISSING)
name|docsWithField
operator|.
name|set
argument_list|(
name|size
argument_list|)
expr_stmt|;
block|}
name|docs
operator|.
name|set
argument_list|(
name|size
argument_list|,
name|doc
argument_list|)
expr_stmt|;
name|values
operator|.
name|set
argument_list|(
name|size
argument_list|,
name|value
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
operator|++
name|size
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getUpdates
specifier|public
name|UpdatesIterator
name|getUpdates
parameter_list|()
block|{
specifier|final
name|PagedMutable
name|docs
init|=
name|this
operator|.
name|docs
decl_stmt|;
specifier|final
name|PagedGrowableWriter
name|values
init|=
name|this
operator|.
name|values
decl_stmt|;
specifier|final
name|FixedBitSet
name|docsWithField
init|=
name|this
operator|.
name|docsWithField
decl_stmt|;
operator|new
name|InPlaceMergeSorter
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|void
name|swap
parameter_list|(
name|int
name|i
parameter_list|,
name|int
name|j
parameter_list|)
block|{
name|long
name|tmpDoc
init|=
name|docs
operator|.
name|get
argument_list|(
name|j
argument_list|)
decl_stmt|;
name|docs
operator|.
name|set
argument_list|(
name|j
argument_list|,
name|docs
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|docs
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|tmpDoc
argument_list|)
expr_stmt|;
name|long
name|tmpVal
init|=
name|values
operator|.
name|get
argument_list|(
name|j
argument_list|)
decl_stmt|;
name|values
operator|.
name|set
argument_list|(
name|j
argument_list|,
name|values
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|values
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|tmpVal
argument_list|)
expr_stmt|;
name|boolean
name|tmpBool
init|=
name|docsWithField
operator|.
name|get
argument_list|(
name|j
argument_list|)
decl_stmt|;
if|if
condition|(
name|docsWithField
operator|.
name|get
argument_list|(
name|i
argument_list|)
condition|)
block|{
name|docsWithField
operator|.
name|set
argument_list|(
name|j
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|docsWithField
operator|.
name|clear
argument_list|(
name|j
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tmpBool
condition|)
block|{
name|docsWithField
operator|.
name|set
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|docsWithField
operator|.
name|clear
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|int
name|compare
parameter_list|(
name|int
name|i
parameter_list|,
name|int
name|j
parameter_list|)
block|{
name|int
name|x
init|=
operator|(
name|int
operator|)
name|docs
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|int
name|y
init|=
operator|(
name|int
operator|)
name|docs
operator|.
name|get
argument_list|(
name|j
argument_list|)
decl_stmt|;
return|return
operator|(
name|x
operator|<
name|y
operator|)
condition|?
operator|-
literal|1
else|:
operator|(
operator|(
name|x
operator|==
name|y
operator|)
condition|?
literal|0
else|:
literal|1
operator|)
return|;
block|}
block|}
operator|.
name|sort
argument_list|(
literal|0
argument_list|,
name|size
argument_list|)
expr_stmt|;
specifier|final
name|int
name|size
init|=
name|this
operator|.
name|size
decl_stmt|;
return|return
operator|new
name|UpdatesIterator
argument_list|()
block|{
specifier|private
name|long
name|idx
init|=
literal|0
decl_stmt|;
comment|// long so we don't overflow if size == Integer.MAX_VALUE
specifier|private
name|int
name|doc
init|=
operator|-
literal|1
decl_stmt|;
specifier|private
name|Long
name|value
init|=
literal|null
decl_stmt|;
annotation|@
name|Override
name|Long
name|value
parameter_list|()
block|{
return|return
name|value
return|;
block|}
annotation|@
name|Override
name|int
name|nextDoc
parameter_list|()
block|{
if|if
condition|(
name|idx
operator|>=
name|size
condition|)
block|{
name|value
operator|=
literal|null
expr_stmt|;
return|return
name|doc
operator|=
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
return|;
block|}
name|doc
operator|=
operator|(
name|int
operator|)
name|docs
operator|.
name|get
argument_list|(
name|idx
argument_list|)
expr_stmt|;
operator|++
name|idx
expr_stmt|;
while|while
condition|(
name|idx
operator|<
name|size
operator|&&
name|docs
operator|.
name|get
argument_list|(
name|idx
argument_list|)
operator|==
name|doc
condition|)
block|{
operator|++
name|idx
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|docsWithField
operator|.
name|get
argument_list|(
call|(
name|int
call|)
argument_list|(
name|idx
operator|-
literal|1
argument_list|)
argument_list|)
condition|)
block|{
name|value
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
comment|// idx points to the "next" element
name|value
operator|=
name|Long
operator|.
name|valueOf
argument_list|(
name|values
operator|.
name|get
argument_list|(
name|idx
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|doc
return|;
block|}
annotation|@
name|Override
name|int
name|doc
parameter_list|()
block|{
return|return
name|doc
return|;
block|}
annotation|@
name|Override
name|void
name|reset
parameter_list|()
block|{
name|doc
operator|=
operator|-
literal|1
expr_stmt|;
name|value
operator|=
literal|null
expr_stmt|;
name|idx
operator|=
literal|0
expr_stmt|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|merge
specifier|public
name|void
name|merge
parameter_list|(
name|NumericFieldUpdates
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|instanceof
name|PackedNumericFieldUpdates
condition|)
block|{
name|PackedNumericFieldUpdates
name|packedOther
init|=
operator|(
name|PackedNumericFieldUpdates
operator|)
name|other
decl_stmt|;
if|if
condition|(
name|size
operator|+
name|packedOther
operator|.
name|size
operator|>
name|Integer
operator|.
name|MAX_VALUE
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"cannot support more than Integer.MAX_VALUE doc/value entries; size="
operator|+
name|size
operator|+
literal|" other.size="
operator|+
name|packedOther
operator|.
name|size
argument_list|)
throw|;
block|}
name|docs
operator|=
name|docs
operator|.
name|grow
argument_list|(
name|size
operator|+
name|packedOther
operator|.
name|size
argument_list|)
expr_stmt|;
name|values
operator|=
name|values
operator|.
name|grow
argument_list|(
name|size
operator|+
name|packedOther
operator|.
name|size
argument_list|)
expr_stmt|;
name|int
name|numWords
init|=
call|(
name|int
call|)
argument_list|(
name|docs
operator|.
name|size
argument_list|()
operator|>>
literal|6
argument_list|)
decl_stmt|;
if|if
condition|(
name|docsWithField
operator|.
name|getBits
argument_list|()
operator|.
name|length
operator|<=
name|numWords
condition|)
block|{
name|numWords
operator|=
name|ArrayUtil
operator|.
name|oversize
argument_list|(
name|numWords
operator|+
literal|1
argument_list|,
name|RamUsageEstimator
operator|.
name|NUM_BYTES_LONG
argument_list|)
expr_stmt|;
name|docsWithField
operator|=
operator|new
name|FixedBitSet
argument_list|(
name|docsWithField
argument_list|,
name|numWords
operator|<<
literal|6
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|packedOther
operator|.
name|size
condition|;
name|i
operator|++
control|)
block|{
name|int
name|doc
init|=
operator|(
name|int
operator|)
name|packedOther
operator|.
name|docs
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|packedOther
operator|.
name|docsWithField
operator|.
name|get
argument_list|(
name|i
argument_list|)
condition|)
block|{
name|docsWithField
operator|.
name|set
argument_list|(
name|size
argument_list|)
expr_stmt|;
block|}
name|docs
operator|.
name|set
argument_list|(
name|size
argument_list|,
name|doc
argument_list|)
expr_stmt|;
name|values
operator|.
name|set
argument_list|(
name|size
argument_list|,
name|packedOther
operator|.
name|values
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
operator|++
name|size
expr_stmt|;
block|}
block|}
else|else
block|{
name|UpdatesIterator
name|iter
init|=
name|other
operator|.
name|getUpdates
argument_list|()
decl_stmt|;
name|int
name|doc
decl_stmt|;
while|while
condition|(
operator|(
name|doc
operator|=
name|iter
operator|.
name|nextDoc
argument_list|()
operator|)
operator|!=
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
condition|)
block|{
name|Long
name|value
init|=
name|iter
operator|.
name|value
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|value
operator|=
name|NumericUpdate
operator|.
name|MISSING
expr_stmt|;
block|}
name|add
argument_list|(
name|doc
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * Add an update to a document. For unsetting a value you should pass    * {@link NumericUpdate#MISSING} instead of {@code null}.    */
DECL|method|add
specifier|public
name|void
name|add
parameter_list|(
name|int
name|doc
parameter_list|,
name|Long
name|value
parameter_list|)
function_decl|;
comment|/**    * Returns an {@link UpdatesIterator} over the updated documents and their    * values.    */
DECL|method|getUpdates
specifier|public
name|UpdatesIterator
name|getUpdates
parameter_list|()
function_decl|;
comment|/**    * Merge with another {@link NumericFieldUpdates}. This is called for a    * segment which received updates while it was being merged. The given updates    * should override whatever numeric updates are in that instance.    */
DECL|method|merge
specifier|public
name|void
name|merge
parameter_list|(
name|NumericFieldUpdates
name|other
parameter_list|)
function_decl|;
block|}
end_interface
end_unit
