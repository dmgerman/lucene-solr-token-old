begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.index
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_comment
comment|/**  * Exposes {@link PostingsEnum}, merged from {@link PostingsEnum}  * API of sub-segments.  *  * @lucene.experimental  */
end_comment
begin_class
DECL|class|MultiPostingsEnum
specifier|public
specifier|final
class|class
name|MultiPostingsEnum
extends|extends
name|PostingsEnum
block|{
DECL|field|parent
specifier|private
specifier|final
name|MultiTermsEnum
name|parent
decl_stmt|;
DECL|field|subPostingsEnums
specifier|final
name|PostingsEnum
index|[]
name|subPostingsEnums
decl_stmt|;
DECL|field|subs
specifier|private
specifier|final
name|EnumWithSlice
index|[]
name|subs
decl_stmt|;
DECL|field|numSubs
name|int
name|numSubs
decl_stmt|;
DECL|field|upto
name|int
name|upto
decl_stmt|;
DECL|field|current
name|PostingsEnum
name|current
decl_stmt|;
DECL|field|currentBase
name|int
name|currentBase
decl_stmt|;
DECL|field|doc
name|int
name|doc
init|=
operator|-
literal|1
decl_stmt|;
comment|/** Sole constructor.    * @param parent The {@link MultiTermsEnum} that created us.    * @param subReaderCount How many sub-readers are being merged. */
DECL|method|MultiPostingsEnum
specifier|public
name|MultiPostingsEnum
parameter_list|(
name|MultiTermsEnum
name|parent
parameter_list|,
name|int
name|subReaderCount
parameter_list|)
block|{
name|this
operator|.
name|parent
operator|=
name|parent
expr_stmt|;
name|subPostingsEnums
operator|=
operator|new
name|PostingsEnum
index|[
name|subReaderCount
index|]
expr_stmt|;
name|this
operator|.
name|subs
operator|=
operator|new
name|EnumWithSlice
index|[
name|subReaderCount
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|subs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|subs
index|[
name|i
index|]
operator|=
operator|new
name|EnumWithSlice
argument_list|()
expr_stmt|;
block|}
block|}
comment|/** Returns {@code true} if this instance can be reused by    *  the provided {@link MultiTermsEnum}. */
DECL|method|canReuse
specifier|public
name|boolean
name|canReuse
parameter_list|(
name|MultiTermsEnum
name|parent
parameter_list|)
block|{
return|return
name|this
operator|.
name|parent
operator|==
name|parent
return|;
block|}
comment|/** Re-use and reset this instance on the provided slices. */
DECL|method|reset
specifier|public
name|MultiPostingsEnum
name|reset
parameter_list|(
specifier|final
name|EnumWithSlice
index|[]
name|subs
parameter_list|,
specifier|final
name|int
name|numSubs
parameter_list|)
block|{
name|this
operator|.
name|numSubs
operator|=
name|numSubs
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numSubs
condition|;
name|i
operator|++
control|)
block|{
name|this
operator|.
name|subs
index|[
name|i
index|]
operator|.
name|postingsEnum
operator|=
name|subs
index|[
name|i
index|]
operator|.
name|postingsEnum
expr_stmt|;
name|this
operator|.
name|subs
index|[
name|i
index|]
operator|.
name|slice
operator|=
name|subs
index|[
name|i
index|]
operator|.
name|slice
expr_stmt|;
block|}
name|upto
operator|=
operator|-
literal|1
expr_stmt|;
name|doc
operator|=
operator|-
literal|1
expr_stmt|;
name|current
operator|=
literal|null
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/** How many sub-readers we are merging.    *  @see #getSubs */
DECL|method|getNumSubs
specifier|public
name|int
name|getNumSubs
parameter_list|()
block|{
return|return
name|numSubs
return|;
block|}
comment|/** Returns sub-readers we are merging. */
DECL|method|getSubs
specifier|public
name|EnumWithSlice
index|[]
name|getSubs
parameter_list|()
block|{
return|return
name|subs
return|;
block|}
annotation|@
name|Override
DECL|method|freq
specifier|public
name|int
name|freq
parameter_list|()
throws|throws
name|IOException
block|{
assert|assert
name|current
operator|!=
literal|null
assert|;
return|return
name|current
operator|.
name|freq
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|docID
specifier|public
name|int
name|docID
parameter_list|()
block|{
return|return
name|doc
return|;
block|}
annotation|@
name|Override
DECL|method|advance
specifier|public
name|int
name|advance
parameter_list|(
name|int
name|target
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|target
operator|>
name|doc
assert|;
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
name|current
operator|!=
literal|null
condition|)
block|{
specifier|final
name|int
name|doc
decl_stmt|;
if|if
condition|(
name|target
operator|<
name|currentBase
condition|)
block|{
comment|// target was in the previous slice but there was no matching doc after it
name|doc
operator|=
name|current
operator|.
name|nextDoc
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|doc
operator|=
name|current
operator|.
name|advance
argument_list|(
name|target
operator|-
name|currentBase
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|doc
operator|==
name|NO_MORE_DOCS
condition|)
block|{
name|current
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
return|return
name|this
operator|.
name|doc
operator|=
name|doc
operator|+
name|currentBase
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|upto
operator|==
name|numSubs
operator|-
literal|1
condition|)
block|{
return|return
name|this
operator|.
name|doc
operator|=
name|NO_MORE_DOCS
return|;
block|}
else|else
block|{
name|upto
operator|++
expr_stmt|;
name|current
operator|=
name|subs
index|[
name|upto
index|]
operator|.
name|postingsEnum
expr_stmt|;
name|currentBase
operator|=
name|subs
index|[
name|upto
index|]
operator|.
name|slice
operator|.
name|start
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|nextDoc
specifier|public
name|int
name|nextDoc
parameter_list|()
throws|throws
name|IOException
block|{
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
name|current
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|upto
operator|==
name|numSubs
operator|-
literal|1
condition|)
block|{
return|return
name|this
operator|.
name|doc
operator|=
name|NO_MORE_DOCS
return|;
block|}
else|else
block|{
name|upto
operator|++
expr_stmt|;
name|current
operator|=
name|subs
index|[
name|upto
index|]
operator|.
name|postingsEnum
expr_stmt|;
name|currentBase
operator|=
name|subs
index|[
name|upto
index|]
operator|.
name|slice
operator|.
name|start
expr_stmt|;
block|}
block|}
specifier|final
name|int
name|doc
init|=
name|current
operator|.
name|nextDoc
argument_list|()
decl_stmt|;
if|if
condition|(
name|doc
operator|!=
name|NO_MORE_DOCS
condition|)
block|{
return|return
name|this
operator|.
name|doc
operator|=
name|currentBase
operator|+
name|doc
return|;
block|}
else|else
block|{
name|current
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|nextPosition
specifier|public
name|int
name|nextPosition
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|current
operator|.
name|nextPosition
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|startOffset
specifier|public
name|int
name|startOffset
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|current
operator|.
name|startOffset
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|endOffset
specifier|public
name|int
name|endOffset
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|current
operator|.
name|endOffset
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getPayload
specifier|public
name|BytesRef
name|getPayload
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|current
operator|.
name|getPayload
argument_list|()
return|;
block|}
comment|// TODO: implement bulk read more efficiently than super
comment|/** Holds a {@link PostingsEnum} along with the    *  corresponding {@link ReaderSlice}. */
DECL|class|EnumWithSlice
specifier|public
specifier|final
specifier|static
class|class
name|EnumWithSlice
block|{
comment|/** {@link PostingsEnum} for this sub-reader. */
DECL|field|postingsEnum
specifier|public
name|PostingsEnum
name|postingsEnum
decl_stmt|;
comment|/** {@link ReaderSlice} describing how this sub-reader      *  fits into the composite reader. */
DECL|field|slice
specifier|public
name|ReaderSlice
name|slice
decl_stmt|;
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|slice
operator|.
name|toString
argument_list|()
operator|+
literal|":"
operator|+
name|postingsEnum
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|cost
specifier|public
name|long
name|cost
parameter_list|()
block|{
name|long
name|cost
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numSubs
condition|;
name|i
operator|++
control|)
block|{
name|cost
operator|+=
name|subs
index|[
name|i
index|]
operator|.
name|postingsEnum
operator|.
name|cost
argument_list|()
expr_stmt|;
block|}
return|return
name|cost
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"MultiDocsAndPositionsEnum("
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|getSubs
argument_list|()
argument_list|)
operator|+
literal|")"
return|;
block|}
block|}
end_class
end_unit
