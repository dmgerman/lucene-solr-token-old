begin_unit
begin_package
DECL|package|org.apache.lucene.index
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DocumentsWriterPerThreadPool
operator|.
name|ThreadState
import|;
end_import
begin_comment
comment|/**  * Default {@link FlushPolicy} implementation that flushes based on RAM used,  * document count and number of buffered deletes depending on the IndexWriter's  * {@link IndexWriterConfig}.  *   *<ul>  *<li>{@link #onDelete(DocumentsWriterFlushControl, DocumentsWriterPerThreadPool.ThreadState)} - flushes  * based on the global number of buffered delete terms iff  * {@link IndexWriterConfig#getMaxBufferedDeleteTerms()} is enabled</li>  *<li>{@link #onInsert(DocumentsWriterFlushControl, DocumentsWriterPerThreadPool.ThreadState)} - flushes  * either on the number of documents per {@link DocumentsWriterPerThread} (  * {@link DocumentsWriterPerThread#getNumDocsInRAM()}) or on the global active  * memory consumption in the current indexing session iff  * {@link IndexWriterConfig#getMaxBufferedDocs()} or  * {@link IndexWriterConfig#getRAMBufferSizeMB()} is enabled respectively</li>  *<li>{@link #onUpdate(DocumentsWriterFlushControl, DocumentsWriterPerThreadPool.ThreadState)} - calls  * {@link #onInsert(DocumentsWriterFlushControl, DocumentsWriterPerThreadPool.ThreadState)} and  * {@link #onDelete(DocumentsWriterFlushControl, DocumentsWriterPerThreadPool.ThreadState)} in order</li>  *</ul>  * All {@link IndexWriterConfig} settings are used to mark  * {@link DocumentsWriterPerThread} as flush pending during indexing with  * respect to their live updates.  *<p>  * If {@link IndexWriterConfig#setRAMBufferSizeMB(double)} is enabled, the  * largest ram consuming {@link DocumentsWriterPerThread} will be marked as  * pending iff the global active RAM consumption is>= the configured max RAM  * buffer.  */
end_comment
begin_class
DECL|class|FlushByRamOrCountsPolicy
specifier|public
class|class
name|FlushByRamOrCountsPolicy
extends|extends
name|FlushPolicy
block|{
annotation|@
name|Override
DECL|method|onDelete
specifier|public
name|void
name|onDelete
parameter_list|(
name|DocumentsWriterFlushControl
name|control
parameter_list|,
name|ThreadState
name|state
parameter_list|)
block|{
if|if
condition|(
name|flushOnDeleteTerms
argument_list|()
condition|)
block|{
comment|// Flush this state by num del terms
specifier|final
name|int
name|maxBufferedDeleteTerms
init|=
name|indexWriterConfig
operator|.
name|getMaxBufferedDeleteTerms
argument_list|()
decl_stmt|;
if|if
condition|(
name|control
operator|.
name|getNumGlobalTermDeletes
argument_list|()
operator|>=
name|maxBufferedDeleteTerms
condition|)
block|{
name|control
operator|.
name|setApplyAllDeletes
argument_list|()
expr_stmt|;
block|}
block|}
specifier|final
name|DocumentsWriter
name|writer
init|=
name|this
operator|.
name|writer
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|flushOnRAM
argument_list|()
operator|&&
name|control
operator|.
name|getDeleteBytesUsed
argument_list|()
operator|>
operator|(
literal|1024
operator|*
literal|1024
operator|*
name|indexWriterConfig
operator|.
name|getRAMBufferSizeMB
argument_list|()
operator|)
operator|)
condition|)
block|{
name|control
operator|.
name|setApplyAllDeletes
argument_list|()
expr_stmt|;
if|if
condition|(
name|writer
operator|.
name|infoStream
operator|.
name|isEnabled
argument_list|(
literal|"FP"
argument_list|)
condition|)
block|{
name|writer
operator|.
name|infoStream
operator|.
name|message
argument_list|(
literal|"FP"
argument_list|,
literal|"force apply deletes bytesUsed="
operator|+
name|control
operator|.
name|getDeleteBytesUsed
argument_list|()
operator|+
literal|" vs ramBuffer="
operator|+
operator|(
literal|1024
operator|*
literal|1024
operator|*
name|indexWriterConfig
operator|.
name|getRAMBufferSizeMB
argument_list|()
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|onInsert
specifier|public
name|void
name|onInsert
parameter_list|(
name|DocumentsWriterFlushControl
name|control
parameter_list|,
name|ThreadState
name|state
parameter_list|)
block|{
if|if
condition|(
name|flushOnDocCount
argument_list|()
operator|&&
name|state
operator|.
name|perThread
operator|.
name|getNumDocsInRAM
argument_list|()
operator|>=
name|indexWriterConfig
operator|.
name|getMaxBufferedDocs
argument_list|()
condition|)
block|{
comment|// Flush this state by num docs
name|control
operator|.
name|setFlushPending
argument_list|(
name|state
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|flushOnRAM
argument_list|()
condition|)
block|{
comment|// flush by RAM
specifier|final
name|long
name|limit
init|=
call|(
name|long
call|)
argument_list|(
name|indexWriterConfig
operator|.
name|getRAMBufferSizeMB
argument_list|()
operator|*
literal|1024.d
operator|*
literal|1024.d
argument_list|)
decl_stmt|;
specifier|final
name|long
name|totalRam
init|=
name|control
operator|.
name|activeBytes
argument_list|()
operator|+
name|control
operator|.
name|getDeleteBytesUsed
argument_list|()
decl_stmt|;
if|if
condition|(
name|totalRam
operator|>=
name|limit
condition|)
block|{
specifier|final
name|DocumentsWriter
name|writer
init|=
name|this
operator|.
name|writer
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|writer
operator|.
name|infoStream
operator|.
name|isEnabled
argument_list|(
literal|"FP"
argument_list|)
condition|)
block|{
name|writer
operator|.
name|infoStream
operator|.
name|message
argument_list|(
literal|"FP"
argument_list|,
literal|"flush: activeBytes="
operator|+
name|control
operator|.
name|activeBytes
argument_list|()
operator|+
literal|" deleteBytes="
operator|+
name|control
operator|.
name|getDeleteBytesUsed
argument_list|()
operator|+
literal|" vs limit="
operator|+
name|limit
argument_list|)
expr_stmt|;
block|}
name|markLargestWriterPending
argument_list|(
name|control
argument_list|,
name|state
argument_list|,
name|totalRam
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Marks the most ram consuming active {@link DocumentsWriterPerThread} flush    * pending    */
DECL|method|markLargestWriterPending
specifier|protected
name|void
name|markLargestWriterPending
parameter_list|(
name|DocumentsWriterFlushControl
name|control
parameter_list|,
name|ThreadState
name|perThreadState
parameter_list|,
specifier|final
name|long
name|currentBytesPerThread
parameter_list|)
block|{
name|control
operator|.
name|setFlushPending
argument_list|(
name|findLargestNonPendingWriter
argument_list|(
name|control
argument_list|,
name|perThreadState
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Returns<code>true</code> if this {@link FlushPolicy} flushes on    * {@link IndexWriterConfig#getMaxBufferedDocs()}, otherwise    *<code>false</code>.    */
DECL|method|flushOnDocCount
specifier|protected
name|boolean
name|flushOnDocCount
parameter_list|()
block|{
return|return
name|indexWriterConfig
operator|.
name|getMaxBufferedDocs
argument_list|()
operator|!=
name|IndexWriterConfig
operator|.
name|DISABLE_AUTO_FLUSH
return|;
block|}
comment|/**    * Returns<code>true</code> if this {@link FlushPolicy} flushes on    * {@link IndexWriterConfig#getMaxBufferedDeleteTerms()}, otherwise    *<code>false</code>.    */
DECL|method|flushOnDeleteTerms
specifier|protected
name|boolean
name|flushOnDeleteTerms
parameter_list|()
block|{
return|return
name|indexWriterConfig
operator|.
name|getMaxBufferedDeleteTerms
argument_list|()
operator|!=
name|IndexWriterConfig
operator|.
name|DISABLE_AUTO_FLUSH
return|;
block|}
comment|/**    * Returns<code>true</code> if this {@link FlushPolicy} flushes on    * {@link IndexWriterConfig#getRAMBufferSizeMB()}, otherwise    *<code>false</code>.    */
DECL|method|flushOnRAM
specifier|protected
name|boolean
name|flushOnRAM
parameter_list|()
block|{
return|return
name|indexWriterConfig
operator|.
name|getRAMBufferSizeMB
argument_list|()
operator|!=
name|IndexWriterConfig
operator|.
name|DISABLE_AUTO_FLUSH
return|;
block|}
block|}
end_class
end_unit
