begin_unit
begin_package
DECL|package|org.apache.lucene.index
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import
begin_comment
comment|/** Flex API for access to fields and terms  *  @lucene.experimental */
end_comment
begin_class
DECL|class|Fields
specifier|public
specifier|abstract
class|class
name|Fields
implements|implements
name|Iterable
argument_list|<
name|String
argument_list|>
block|{
comment|/** Returns an iterator that will step through all fields    *  names.  This will not return null.  */
DECL|method|iterator
specifier|public
specifier|abstract
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterator
parameter_list|()
function_decl|;
comment|/** Get the {@link Terms} for this field.  This will return    *  null if the field does not exist. */
DECL|method|terms
specifier|public
specifier|abstract
name|Terms
name|terms
parameter_list|(
name|String
name|field
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/** Returns the number of fields or -1 if the number of    * distinct field names is unknown. If&gt;= 0,    * {@link #iterator} will return as many field names. */
DECL|method|size
specifier|public
specifier|abstract
name|int
name|size
parameter_list|()
function_decl|;
comment|/** Returns the number of terms for all fields, or -1 if this     *  measure isn't stored by the codec. Note that, just like     *  other term measures, this measure does not take deleted     *  documents into account. */
comment|// TODO: deprecate?
DECL|method|getUniqueTermCount
specifier|public
name|long
name|getUniqueTermCount
parameter_list|()
throws|throws
name|IOException
block|{
name|long
name|numTerms
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|field
range|:
name|this
control|)
block|{
name|Terms
name|terms
init|=
name|terms
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|terms
operator|!=
literal|null
condition|)
block|{
specifier|final
name|long
name|termCount
init|=
name|terms
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|termCount
operator|==
operator|-
literal|1
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
name|numTerms
operator|+=
name|termCount
expr_stmt|;
block|}
block|}
return|return
name|numTerms
return|;
block|}
DECL|field|EMPTY_ARRAY
specifier|public
specifier|final
specifier|static
name|Fields
index|[]
name|EMPTY_ARRAY
init|=
operator|new
name|Fields
index|[
literal|0
index|]
decl_stmt|;
block|}
end_class
end_unit
