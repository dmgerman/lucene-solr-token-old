begin_unit
begin_package
DECL|package|org.apache.lucene.index
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_comment
comment|/**   * Exposes multi-valued view over a single-valued instance.  *<p>  * This can be used if you want to have one multi-valued implementation  * against e.g. FieldCache.getDocTermOrds that also works for single-valued   * fields.  */
end_comment
begin_class
DECL|class|SingletonSortedSetDocValues
specifier|final
class|class
name|SingletonSortedSetDocValues
extends|extends
name|SortedSetDocValues
block|{
DECL|field|in
specifier|private
specifier|final
name|SortedDocValues
name|in
decl_stmt|;
DECL|field|docID
specifier|private
name|int
name|docID
decl_stmt|;
DECL|field|set
specifier|private
name|boolean
name|set
decl_stmt|;
comment|/** Creates a multi-valued view over the provided SortedDocValues */
DECL|method|SingletonSortedSetDocValues
specifier|public
name|SingletonSortedSetDocValues
parameter_list|(
name|SortedDocValues
name|in
parameter_list|)
block|{
name|this
operator|.
name|in
operator|=
name|in
expr_stmt|;
assert|assert
name|NO_MORE_ORDS
operator|==
operator|-
literal|1
assert|;
comment|// this allows our nextOrd() to work for missing values without a check
block|}
comment|/** Return the wrapped {@link SortedDocValues} */
DECL|method|getSortedDocValues
specifier|public
name|SortedDocValues
name|getSortedDocValues
parameter_list|()
block|{
return|return
name|in
return|;
block|}
annotation|@
name|Override
DECL|method|nextOrd
specifier|public
name|long
name|nextOrd
parameter_list|()
block|{
if|if
condition|(
name|set
condition|)
block|{
return|return
name|NO_MORE_ORDS
return|;
block|}
else|else
block|{
name|set
operator|=
literal|true
expr_stmt|;
return|return
name|in
operator|.
name|getOrd
argument_list|(
name|docID
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|setDocument
specifier|public
name|void
name|setDocument
parameter_list|(
name|int
name|docID
parameter_list|)
block|{
name|this
operator|.
name|docID
operator|=
name|docID
expr_stmt|;
name|set
operator|=
literal|false
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|lookupOrd
specifier|public
name|void
name|lookupOrd
parameter_list|(
name|long
name|ord
parameter_list|,
name|BytesRef
name|result
parameter_list|)
block|{
comment|// cast is ok: single-valued cannot exceed Integer.MAX_VALUE
name|in
operator|.
name|lookupOrd
argument_list|(
operator|(
name|int
operator|)
name|ord
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getValueCount
specifier|public
name|long
name|getValueCount
parameter_list|()
block|{
return|return
name|in
operator|.
name|getValueCount
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|lookupTerm
specifier|public
name|long
name|lookupTerm
parameter_list|(
name|BytesRef
name|key
parameter_list|)
block|{
return|return
name|in
operator|.
name|lookupTerm
argument_list|(
name|key
argument_list|)
return|;
block|}
block|}
end_class
end_unit
