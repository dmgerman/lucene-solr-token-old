begin_unit
begin_package
DECL|package|org.apache.lucene.index
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|SortedDocValuesConsumer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|ArrayUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|ByteBlockPool
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRefHash
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Counter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|RamUsageEstimator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRefHash
operator|.
name|DirectBytesStartArray
import|;
end_import
begin_comment
comment|/** Buffers up pending byte[] per doc, deref and sorting via  *  int ord, then flushes when segment flushes. */
end_comment
begin_comment
comment|// nocommit name?
end_comment
begin_comment
comment|// nocommit make this a consumer in the chain?
end_comment
begin_class
DECL|class|SortedBytesDVWriter
class|class
name|SortedBytesDVWriter
block|{
DECL|field|hash
specifier|final
name|BytesRefHash
name|hash
decl_stmt|;
DECL|field|pending
specifier|private
name|int
index|[]
name|pending
init|=
operator|new
name|int
index|[
name|DEFAULT_PENDING_SIZE
index|]
decl_stmt|;
DECL|field|pendingIndex
specifier|private
name|int
name|pendingIndex
init|=
literal|0
decl_stmt|;
DECL|field|iwBytesUsed
specifier|private
specifier|final
name|Counter
name|iwBytesUsed
decl_stmt|;
DECL|field|fieldInfo
specifier|private
specifier|final
name|FieldInfo
name|fieldInfo
decl_stmt|;
DECL|field|EMPTY
specifier|private
specifier|static
specifier|final
name|BytesRef
name|EMPTY
init|=
operator|new
name|BytesRef
argument_list|(
name|BytesRef
operator|.
name|EMPTY_BYTES
argument_list|)
decl_stmt|;
DECL|field|DEFAULT_PENDING_SIZE
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_PENDING_SIZE
init|=
literal|16
decl_stmt|;
comment|// -2 means not set yet; -1 means length isn't fixed;
comment|// -otherwise it's the fixed length seen so far:
DECL|field|fixedLength
name|int
name|fixedLength
init|=
operator|-
literal|2
decl_stmt|;
DECL|field|maxLength
name|int
name|maxLength
decl_stmt|;
DECL|method|SortedBytesDVWriter
specifier|public
name|SortedBytesDVWriter
parameter_list|(
name|FieldInfo
name|fieldInfo
parameter_list|,
name|Counter
name|iwBytesUsed
parameter_list|)
block|{
name|this
operator|.
name|fieldInfo
operator|=
name|fieldInfo
expr_stmt|;
name|this
operator|.
name|iwBytesUsed
operator|=
name|iwBytesUsed
expr_stmt|;
name|hash
operator|=
operator|new
name|BytesRefHash
argument_list|(
operator|new
name|ByteBlockPool
argument_list|(
operator|new
name|ByteBlockPool
operator|.
name|DirectTrackingAllocator
argument_list|(
name|iwBytesUsed
argument_list|)
argument_list|)
argument_list|,
name|BytesRefHash
operator|.
name|DEFAULT_CAPACITY
argument_list|,
operator|new
name|DirectBytesStartArray
argument_list|(
name|BytesRefHash
operator|.
name|DEFAULT_CAPACITY
argument_list|,
name|iwBytesUsed
argument_list|)
argument_list|)
expr_stmt|;
name|iwBytesUsed
operator|.
name|addAndGet
argument_list|(
name|RamUsageEstimator
operator|.
name|NUM_BYTES_ARRAY_HEADER
operator|+
name|RamUsageEstimator
operator|.
name|NUM_BYTES_INT
operator|*
name|DEFAULT_PENDING_SIZE
argument_list|)
expr_stmt|;
block|}
DECL|method|addValue
specifier|public
name|void
name|addValue
parameter_list|(
name|int
name|docID
parameter_list|,
name|BytesRef
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
comment|// nocommit improve message
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"null sortedValue not allowed (field="
operator|+
name|fieldInfo
operator|.
name|name
operator|+
literal|")"
argument_list|)
throw|;
block|}
comment|// Fill in any holes:
while|while
condition|(
name|pendingIndex
operator|<
name|docID
condition|)
block|{
name|addOneValue
argument_list|(
name|EMPTY
argument_list|)
expr_stmt|;
block|}
name|addOneValue
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
DECL|method|addOneValue
specifier|private
name|void
name|addOneValue
parameter_list|(
name|BytesRef
name|value
parameter_list|)
block|{
name|mergeLength
argument_list|(
name|value
operator|.
name|length
argument_list|)
expr_stmt|;
name|int
name|ord
init|=
name|hash
operator|.
name|add
argument_list|(
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
name|ord
operator|<
literal|0
condition|)
block|{
name|ord
operator|=
operator|-
name|ord
operator|-
literal|1
expr_stmt|;
block|}
if|if
condition|(
name|pendingIndex
operator|<=
name|pending
operator|.
name|length
condition|)
block|{
name|int
name|pendingLen
init|=
name|pending
operator|.
name|length
decl_stmt|;
name|pending
operator|=
name|ArrayUtil
operator|.
name|grow
argument_list|(
name|pending
argument_list|,
name|pendingIndex
operator|+
literal|1
argument_list|)
expr_stmt|;
name|iwBytesUsed
operator|.
name|addAndGet
argument_list|(
operator|(
name|pending
operator|.
name|length
operator|-
name|pendingLen
operator|)
operator|*
name|RamUsageEstimator
operator|.
name|NUM_BYTES_INT
argument_list|)
expr_stmt|;
block|}
name|pending
index|[
name|pendingIndex
operator|++
index|]
operator|=
name|ord
expr_stmt|;
block|}
DECL|method|mergeLength
specifier|private
name|void
name|mergeLength
parameter_list|(
name|int
name|length
parameter_list|)
block|{
if|if
condition|(
name|fixedLength
operator|==
operator|-
literal|2
condition|)
block|{
name|fixedLength
operator|=
name|length
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fixedLength
operator|!=
name|length
condition|)
block|{
name|fixedLength
operator|=
operator|-
literal|1
expr_stmt|;
block|}
name|maxLength
operator|=
name|Math
operator|.
name|max
argument_list|(
name|maxLength
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
DECL|method|flush
specifier|public
name|void
name|flush
parameter_list|(
name|FieldInfo
name|fieldInfo
parameter_list|,
name|SegmentWriteState
name|state
parameter_list|,
name|SortedDocValuesConsumer
name|consumer
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|int
name|maxDoc
init|=
name|state
operator|.
name|segmentInfo
operator|.
name|getDocCount
argument_list|()
decl_stmt|;
name|int
name|emptyOrd
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|pendingIndex
operator|<
name|maxDoc
condition|)
block|{
comment|// Make sure we added EMPTY value before sorting:
name|emptyOrd
operator|=
name|hash
operator|.
name|add
argument_list|(
name|EMPTY
argument_list|)
expr_stmt|;
if|if
condition|(
name|emptyOrd
operator|<
literal|0
condition|)
block|{
name|emptyOrd
operator|=
operator|-
name|emptyOrd
operator|-
literal|1
expr_stmt|;
block|}
block|}
name|int
name|valueCount
init|=
name|hash
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
index|[]
name|sortedValues
init|=
name|hash
operator|.
name|sort
argument_list|(
name|BytesRef
operator|.
name|getUTF8SortedAsUnicodeComparator
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|int
name|sortedValueRamUsage
init|=
name|RamUsageEstimator
operator|.
name|NUM_BYTES_ARRAY_HEADER
operator|+
name|RamUsageEstimator
operator|.
name|NUM_BYTES_INT
operator|*
name|valueCount
decl_stmt|;
name|iwBytesUsed
operator|.
name|addAndGet
argument_list|(
name|sortedValueRamUsage
argument_list|)
expr_stmt|;
specifier|final
name|int
index|[]
name|ordMap
init|=
operator|new
name|int
index|[
name|valueCount
index|]
decl_stmt|;
comment|// Write values, in sorted order:
name|BytesRef
name|scratch
init|=
operator|new
name|BytesRef
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|ord
init|=
literal|0
init|;
name|ord
operator|<
name|valueCount
condition|;
name|ord
operator|++
control|)
block|{
name|consumer
operator|.
name|addValue
argument_list|(
name|hash
operator|.
name|get
argument_list|(
name|sortedValues
index|[
name|ord
index|]
argument_list|,
name|scratch
argument_list|)
argument_list|)
expr_stmt|;
name|ordMap
index|[
name|sortedValues
index|[
name|ord
index|]
index|]
operator|=
name|ord
expr_stmt|;
block|}
specifier|final
name|int
name|bufferedDocCount
init|=
name|pendingIndex
decl_stmt|;
for|for
control|(
name|int
name|docID
init|=
literal|0
init|;
name|docID
operator|<
name|bufferedDocCount
condition|;
name|docID
operator|++
control|)
block|{
name|consumer
operator|.
name|addDoc
argument_list|(
name|ordMap
index|[
name|pending
index|[
name|docID
index|]
index|]
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|docID
init|=
name|bufferedDocCount
init|;
name|docID
operator|<
name|maxDoc
condition|;
name|docID
operator|++
control|)
block|{
name|consumer
operator|.
name|addDoc
argument_list|(
name|ordMap
index|[
name|emptyOrd
index|]
argument_list|)
expr_stmt|;
block|}
name|iwBytesUsed
operator|.
name|addAndGet
argument_list|(
operator|-
name|sortedValueRamUsage
argument_list|)
expr_stmt|;
name|reset
argument_list|()
expr_stmt|;
block|}
DECL|method|abort
specifier|public
name|void
name|abort
parameter_list|()
block|{
name|reset
argument_list|()
expr_stmt|;
block|}
DECL|method|reset
specifier|private
name|void
name|reset
parameter_list|()
block|{
name|iwBytesUsed
operator|.
name|addAndGet
argument_list|(
operator|(
name|pending
operator|.
name|length
operator|-
name|DEFAULT_PENDING_SIZE
operator|)
operator|*
name|RamUsageEstimator
operator|.
name|NUM_BYTES_INT
argument_list|)
expr_stmt|;
name|pending
operator|=
name|ArrayUtil
operator|.
name|shrink
argument_list|(
name|pending
argument_list|,
name|DEFAULT_PENDING_SIZE
argument_list|)
expr_stmt|;
name|pendingIndex
operator|=
literal|0
expr_stmt|;
name|hash
operator|.
name|clear
argument_list|()
expr_stmt|;
name|fixedLength
operator|=
operator|-
literal|2
expr_stmt|;
name|maxLength
operator|=
literal|0
expr_stmt|;
block|}
block|}
end_class
end_unit
