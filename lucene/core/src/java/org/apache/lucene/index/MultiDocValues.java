begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.index
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|MultiTermsEnum
operator|.
name|TermsEnumIndex
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|MultiTermsEnum
operator|.
name|TermsEnumWithSlice
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Accountable
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Accountables
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Bits
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|InPlaceMergeSorter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LongValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|RamUsageEstimator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|packed
operator|.
name|PackedInts
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|packed
operator|.
name|PackedLongValues
import|;
end_import
begin_comment
comment|/**  * A wrapper for CompositeIndexReader providing access to DocValues.  *   *<p><b>NOTE</b>: for multi readers, you'll get better  * performance by gathering the sub readers using  * {@link IndexReader#getContext()} to get the  * atomic leaves and then operate per-LeafReader,  * instead of using this class.  *   *<p><b>NOTE</b>: This is very costly.  *  * @lucene.experimental  * @lucene.internal  */
end_comment
begin_class
DECL|class|MultiDocValues
specifier|public
class|class
name|MultiDocValues
block|{
comment|/** No instantiation */
DECL|method|MultiDocValues
specifier|private
name|MultiDocValues
parameter_list|()
block|{}
comment|/** Returns a NumericDocValues for a reader's norms (potentially merging on-the-fly).    *<p>    * This is a slow way to access normalization values. Instead, access them per-segment    * with {@link LeafReader#getNormValues(String)}    *</p>     */
DECL|method|getNormValues
specifier|public
specifier|static
name|NumericDocValues
name|getNormValues
parameter_list|(
specifier|final
name|IndexReader
name|r
parameter_list|,
specifier|final
name|String
name|field
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|List
argument_list|<
name|LeafReaderContext
argument_list|>
name|leaves
init|=
name|r
operator|.
name|leaves
argument_list|()
decl_stmt|;
specifier|final
name|int
name|size
init|=
name|leaves
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|size
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|size
operator|==
literal|1
condition|)
block|{
return|return
name|leaves
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|reader
argument_list|()
operator|.
name|getNormValues
argument_list|(
name|field
argument_list|)
return|;
block|}
name|FieldInfo
name|fi
init|=
name|MultiFields
operator|.
name|getMergedFieldInfos
argument_list|(
name|r
argument_list|)
operator|.
name|fieldInfo
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|fi
operator|==
literal|null
operator|||
name|fi
operator|.
name|hasNorms
argument_list|()
operator|==
literal|false
condition|)
block|{
return|return
literal|null
return|;
block|}
name|boolean
name|anyReal
init|=
literal|false
decl_stmt|;
specifier|final
name|NumericDocValues
index|[]
name|values
init|=
operator|new
name|NumericDocValues
index|[
name|size
index|]
decl_stmt|;
specifier|final
name|int
index|[]
name|starts
init|=
operator|new
name|int
index|[
name|size
operator|+
literal|1
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|LeafReaderContext
name|context
init|=
name|leaves
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|NumericDocValues
name|v
init|=
name|context
operator|.
name|reader
argument_list|()
operator|.
name|getNormValues
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|v
operator|==
literal|null
condition|)
block|{
name|v
operator|=
name|DocValues
operator|.
name|emptyNumeric
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|anyReal
operator|=
literal|true
expr_stmt|;
block|}
name|values
index|[
name|i
index|]
operator|=
name|v
expr_stmt|;
name|starts
index|[
name|i
index|]
operator|=
name|context
operator|.
name|docBase
expr_stmt|;
block|}
name|starts
index|[
name|size
index|]
operator|=
name|r
operator|.
name|maxDoc
argument_list|()
expr_stmt|;
assert|assert
name|anyReal
assert|;
return|return
operator|new
name|NumericDocValues
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|long
name|get
parameter_list|(
name|int
name|docID
parameter_list|)
block|{
name|int
name|subIndex
init|=
name|ReaderUtil
operator|.
name|subIndex
argument_list|(
name|docID
argument_list|,
name|starts
argument_list|)
decl_stmt|;
return|return
name|values
index|[
name|subIndex
index|]
operator|.
name|get
argument_list|(
name|docID
operator|-
name|starts
index|[
name|subIndex
index|]
argument_list|)
return|;
block|}
block|}
return|;
block|}
comment|/** Returns a NumericDocValues for a reader's docvalues (potentially merging on-the-fly)     *<p>    * This is a slow way to access numeric values. Instead, access them per-segment    * with {@link LeafReader#getNumericDocValues(String)}    *</p>     * */
DECL|method|getNumericValues
specifier|public
specifier|static
name|NumericDocValues
name|getNumericValues
parameter_list|(
specifier|final
name|IndexReader
name|r
parameter_list|,
specifier|final
name|String
name|field
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|List
argument_list|<
name|LeafReaderContext
argument_list|>
name|leaves
init|=
name|r
operator|.
name|leaves
argument_list|()
decl_stmt|;
specifier|final
name|int
name|size
init|=
name|leaves
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|size
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|size
operator|==
literal|1
condition|)
block|{
return|return
name|leaves
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|reader
argument_list|()
operator|.
name|getNumericDocValues
argument_list|(
name|field
argument_list|)
return|;
block|}
name|boolean
name|anyReal
init|=
literal|false
decl_stmt|;
specifier|final
name|NumericDocValues
index|[]
name|values
init|=
operator|new
name|NumericDocValues
index|[
name|size
index|]
decl_stmt|;
specifier|final
name|int
index|[]
name|starts
init|=
operator|new
name|int
index|[
name|size
operator|+
literal|1
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|LeafReaderContext
name|context
init|=
name|leaves
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|NumericDocValues
name|v
init|=
name|context
operator|.
name|reader
argument_list|()
operator|.
name|getNumericDocValues
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|v
operator|==
literal|null
condition|)
block|{
name|v
operator|=
name|DocValues
operator|.
name|emptyNumeric
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|anyReal
operator|=
literal|true
expr_stmt|;
block|}
name|values
index|[
name|i
index|]
operator|=
name|v
expr_stmt|;
name|starts
index|[
name|i
index|]
operator|=
name|context
operator|.
name|docBase
expr_stmt|;
block|}
name|starts
index|[
name|size
index|]
operator|=
name|r
operator|.
name|maxDoc
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|anyReal
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
operator|new
name|NumericDocValues
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|long
name|get
parameter_list|(
name|int
name|docID
parameter_list|)
block|{
name|int
name|subIndex
init|=
name|ReaderUtil
operator|.
name|subIndex
argument_list|(
name|docID
argument_list|,
name|starts
argument_list|)
decl_stmt|;
return|return
name|values
index|[
name|subIndex
index|]
operator|.
name|get
argument_list|(
name|docID
operator|-
name|starts
index|[
name|subIndex
index|]
argument_list|)
return|;
block|}
block|}
return|;
block|}
block|}
comment|/** Returns a Bits for a reader's docsWithField (potentially merging on-the-fly)     *<p>    * This is a slow way to access this bitset. Instead, access them per-segment    * with {@link LeafReader#getDocsWithField(String)}    *</p>     * */
DECL|method|getDocsWithField
specifier|public
specifier|static
name|Bits
name|getDocsWithField
parameter_list|(
specifier|final
name|IndexReader
name|r
parameter_list|,
specifier|final
name|String
name|field
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|List
argument_list|<
name|LeafReaderContext
argument_list|>
name|leaves
init|=
name|r
operator|.
name|leaves
argument_list|()
decl_stmt|;
specifier|final
name|int
name|size
init|=
name|leaves
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|size
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|size
operator|==
literal|1
condition|)
block|{
return|return
name|leaves
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|reader
argument_list|()
operator|.
name|getDocsWithField
argument_list|(
name|field
argument_list|)
return|;
block|}
name|boolean
name|anyReal
init|=
literal|false
decl_stmt|;
name|boolean
name|anyMissing
init|=
literal|false
decl_stmt|;
specifier|final
name|Bits
index|[]
name|values
init|=
operator|new
name|Bits
index|[
name|size
index|]
decl_stmt|;
specifier|final
name|int
index|[]
name|starts
init|=
operator|new
name|int
index|[
name|size
operator|+
literal|1
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|LeafReaderContext
name|context
init|=
name|leaves
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Bits
name|v
init|=
name|context
operator|.
name|reader
argument_list|()
operator|.
name|getDocsWithField
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|v
operator|==
literal|null
condition|)
block|{
name|v
operator|=
operator|new
name|Bits
operator|.
name|MatchNoBits
argument_list|(
name|context
operator|.
name|reader
argument_list|()
operator|.
name|maxDoc
argument_list|()
argument_list|)
expr_stmt|;
name|anyMissing
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|anyReal
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|v
operator|instanceof
name|Bits
operator|.
name|MatchAllBits
operator|==
literal|false
condition|)
block|{
name|anyMissing
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|values
index|[
name|i
index|]
operator|=
name|v
expr_stmt|;
name|starts
index|[
name|i
index|]
operator|=
name|context
operator|.
name|docBase
expr_stmt|;
block|}
name|starts
index|[
name|size
index|]
operator|=
name|r
operator|.
name|maxDoc
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|anyReal
condition|)
block|{
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|anyMissing
condition|)
block|{
return|return
operator|new
name|Bits
operator|.
name|MatchAllBits
argument_list|(
name|r
operator|.
name|maxDoc
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|MultiBits
argument_list|(
name|values
argument_list|,
name|starts
argument_list|,
literal|false
argument_list|)
return|;
block|}
block|}
comment|/** Returns a BinaryDocValues for a reader's docvalues (potentially merging on-the-fly)    *<p>    * This is a slow way to access binary values. Instead, access them per-segment    * with {@link LeafReader#getBinaryDocValues(String)}    *</p>      */
DECL|method|getBinaryValues
specifier|public
specifier|static
name|BinaryDocValues
name|getBinaryValues
parameter_list|(
specifier|final
name|IndexReader
name|r
parameter_list|,
specifier|final
name|String
name|field
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|List
argument_list|<
name|LeafReaderContext
argument_list|>
name|leaves
init|=
name|r
operator|.
name|leaves
argument_list|()
decl_stmt|;
specifier|final
name|int
name|size
init|=
name|leaves
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|size
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|size
operator|==
literal|1
condition|)
block|{
return|return
name|leaves
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|reader
argument_list|()
operator|.
name|getBinaryDocValues
argument_list|(
name|field
argument_list|)
return|;
block|}
name|boolean
name|anyReal
init|=
literal|false
decl_stmt|;
specifier|final
name|BinaryDocValues
index|[]
name|values
init|=
operator|new
name|BinaryDocValues
index|[
name|size
index|]
decl_stmt|;
specifier|final
name|int
index|[]
name|starts
init|=
operator|new
name|int
index|[
name|size
operator|+
literal|1
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|LeafReaderContext
name|context
init|=
name|leaves
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|BinaryDocValues
name|v
init|=
name|context
operator|.
name|reader
argument_list|()
operator|.
name|getBinaryDocValues
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|v
operator|==
literal|null
condition|)
block|{
name|v
operator|=
name|DocValues
operator|.
name|emptyBinary
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|anyReal
operator|=
literal|true
expr_stmt|;
block|}
name|values
index|[
name|i
index|]
operator|=
name|v
expr_stmt|;
name|starts
index|[
name|i
index|]
operator|=
name|context
operator|.
name|docBase
expr_stmt|;
block|}
name|starts
index|[
name|size
index|]
operator|=
name|r
operator|.
name|maxDoc
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|anyReal
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
operator|new
name|BinaryDocValues
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|BytesRef
name|get
parameter_list|(
name|int
name|docID
parameter_list|)
block|{
name|int
name|subIndex
init|=
name|ReaderUtil
operator|.
name|subIndex
argument_list|(
name|docID
argument_list|,
name|starts
argument_list|)
decl_stmt|;
return|return
name|values
index|[
name|subIndex
index|]
operator|.
name|get
argument_list|(
name|docID
operator|-
name|starts
index|[
name|subIndex
index|]
argument_list|)
return|;
block|}
block|}
return|;
block|}
block|}
comment|/** Returns a SortedNumericDocValues for a reader's docvalues (potentially merging on-the-fly)     *<p>    * This is a slow way to access sorted numeric values. Instead, access them per-segment    * with {@link LeafReader#getSortedNumericDocValues(String)}    *</p>     * */
DECL|method|getSortedNumericValues
specifier|public
specifier|static
name|SortedNumericDocValues
name|getSortedNumericValues
parameter_list|(
specifier|final
name|IndexReader
name|r
parameter_list|,
specifier|final
name|String
name|field
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|List
argument_list|<
name|LeafReaderContext
argument_list|>
name|leaves
init|=
name|r
operator|.
name|leaves
argument_list|()
decl_stmt|;
specifier|final
name|int
name|size
init|=
name|leaves
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|size
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|size
operator|==
literal|1
condition|)
block|{
return|return
name|leaves
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|reader
argument_list|()
operator|.
name|getSortedNumericDocValues
argument_list|(
name|field
argument_list|)
return|;
block|}
name|boolean
name|anyReal
init|=
literal|false
decl_stmt|;
specifier|final
name|SortedNumericDocValues
index|[]
name|values
init|=
operator|new
name|SortedNumericDocValues
index|[
name|size
index|]
decl_stmt|;
specifier|final
name|int
index|[]
name|starts
init|=
operator|new
name|int
index|[
name|size
operator|+
literal|1
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|LeafReaderContext
name|context
init|=
name|leaves
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|SortedNumericDocValues
name|v
init|=
name|context
operator|.
name|reader
argument_list|()
operator|.
name|getSortedNumericDocValues
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|v
operator|==
literal|null
condition|)
block|{
name|v
operator|=
name|DocValues
operator|.
name|emptySortedNumeric
argument_list|(
name|context
operator|.
name|reader
argument_list|()
operator|.
name|maxDoc
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|anyReal
operator|=
literal|true
expr_stmt|;
block|}
name|values
index|[
name|i
index|]
operator|=
name|v
expr_stmt|;
name|starts
index|[
name|i
index|]
operator|=
name|context
operator|.
name|docBase
expr_stmt|;
block|}
name|starts
index|[
name|size
index|]
operator|=
name|r
operator|.
name|maxDoc
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|anyReal
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
operator|new
name|SortedNumericDocValues
argument_list|()
block|{
name|SortedNumericDocValues
name|current
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|setDocument
parameter_list|(
name|int
name|doc
parameter_list|)
block|{
name|int
name|subIndex
init|=
name|ReaderUtil
operator|.
name|subIndex
argument_list|(
name|doc
argument_list|,
name|starts
argument_list|)
decl_stmt|;
name|current
operator|=
name|values
index|[
name|subIndex
index|]
expr_stmt|;
name|current
operator|.
name|setDocument
argument_list|(
name|doc
operator|-
name|starts
index|[
name|subIndex
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|valueAt
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|current
operator|.
name|valueAt
argument_list|(
name|index
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|count
parameter_list|()
block|{
return|return
name|current
operator|.
name|count
argument_list|()
return|;
block|}
block|}
return|;
block|}
block|}
comment|/** Returns a SortedDocValues for a reader's docvalues (potentially doing extremely slow things).    *<p>    * This is an extremely slow way to access sorted values. Instead, access them per-segment    * with {@link LeafReader#getSortedDocValues(String)}    *</p>      */
DECL|method|getSortedValues
specifier|public
specifier|static
name|SortedDocValues
name|getSortedValues
parameter_list|(
specifier|final
name|IndexReader
name|r
parameter_list|,
specifier|final
name|String
name|field
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|List
argument_list|<
name|LeafReaderContext
argument_list|>
name|leaves
init|=
name|r
operator|.
name|leaves
argument_list|()
decl_stmt|;
specifier|final
name|int
name|size
init|=
name|leaves
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|size
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|size
operator|==
literal|1
condition|)
block|{
return|return
name|leaves
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|reader
argument_list|()
operator|.
name|getSortedDocValues
argument_list|(
name|field
argument_list|)
return|;
block|}
name|boolean
name|anyReal
init|=
literal|false
decl_stmt|;
specifier|final
name|SortedDocValues
index|[]
name|values
init|=
operator|new
name|SortedDocValues
index|[
name|size
index|]
decl_stmt|;
specifier|final
name|int
index|[]
name|starts
init|=
operator|new
name|int
index|[
name|size
operator|+
literal|1
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|LeafReaderContext
name|context
init|=
name|leaves
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|SortedDocValues
name|v
init|=
name|context
operator|.
name|reader
argument_list|()
operator|.
name|getSortedDocValues
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|v
operator|==
literal|null
condition|)
block|{
name|v
operator|=
name|DocValues
operator|.
name|emptySorted
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|anyReal
operator|=
literal|true
expr_stmt|;
block|}
name|values
index|[
name|i
index|]
operator|=
name|v
expr_stmt|;
name|starts
index|[
name|i
index|]
operator|=
name|context
operator|.
name|docBase
expr_stmt|;
block|}
name|starts
index|[
name|size
index|]
operator|=
name|r
operator|.
name|maxDoc
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|anyReal
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
name|OrdinalMap
name|mapping
init|=
name|OrdinalMap
operator|.
name|build
argument_list|(
name|r
operator|.
name|getCoreCacheKey
argument_list|()
argument_list|,
name|values
argument_list|,
name|PackedInts
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
return|return
operator|new
name|MultiSortedDocValues
argument_list|(
name|values
argument_list|,
name|starts
argument_list|,
name|mapping
argument_list|)
return|;
block|}
block|}
comment|/** Returns a SortedSetDocValues for a reader's docvalues (potentially doing extremely slow things).    *<p>    * This is an extremely slow way to access sorted values. Instead, access them per-segment    * with {@link LeafReader#getSortedSetDocValues(String)}    *</p>      */
DECL|method|getSortedSetValues
specifier|public
specifier|static
name|SortedSetDocValues
name|getSortedSetValues
parameter_list|(
specifier|final
name|IndexReader
name|r
parameter_list|,
specifier|final
name|String
name|field
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|List
argument_list|<
name|LeafReaderContext
argument_list|>
name|leaves
init|=
name|r
operator|.
name|leaves
argument_list|()
decl_stmt|;
specifier|final
name|int
name|size
init|=
name|leaves
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|size
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|size
operator|==
literal|1
condition|)
block|{
return|return
name|leaves
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|reader
argument_list|()
operator|.
name|getSortedSetDocValues
argument_list|(
name|field
argument_list|)
return|;
block|}
name|boolean
name|anyReal
init|=
literal|false
decl_stmt|;
specifier|final
name|SortedSetDocValues
index|[]
name|values
init|=
operator|new
name|SortedSetDocValues
index|[
name|size
index|]
decl_stmt|;
specifier|final
name|int
index|[]
name|starts
init|=
operator|new
name|int
index|[
name|size
operator|+
literal|1
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|LeafReaderContext
name|context
init|=
name|leaves
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|SortedSetDocValues
name|v
init|=
name|context
operator|.
name|reader
argument_list|()
operator|.
name|getSortedSetDocValues
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|v
operator|==
literal|null
condition|)
block|{
name|v
operator|=
name|DocValues
operator|.
name|emptySortedSet
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|anyReal
operator|=
literal|true
expr_stmt|;
block|}
name|values
index|[
name|i
index|]
operator|=
name|v
expr_stmt|;
name|starts
index|[
name|i
index|]
operator|=
name|context
operator|.
name|docBase
expr_stmt|;
block|}
name|starts
index|[
name|size
index|]
operator|=
name|r
operator|.
name|maxDoc
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|anyReal
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
name|OrdinalMap
name|mapping
init|=
name|OrdinalMap
operator|.
name|build
argument_list|(
name|r
operator|.
name|getCoreCacheKey
argument_list|()
argument_list|,
name|values
argument_list|,
name|PackedInts
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
return|return
operator|new
name|MultiSortedSetDocValues
argument_list|(
name|values
argument_list|,
name|starts
argument_list|,
name|mapping
argument_list|)
return|;
block|}
block|}
comment|/** maps per-segment ordinals to/from global ordinal space */
comment|// TODO: we could also have a utility method to merge Terms[] and use size() as a weight when we need it
comment|// TODO: use more efficient packed ints structures?
comment|// TODO: pull this out? it's pretty generic (maps between N ord()-enabled TermsEnums)
DECL|class|OrdinalMap
specifier|public
specifier|static
class|class
name|OrdinalMap
implements|implements
name|Accountable
block|{
DECL|class|SegmentMap
specifier|private
specifier|static
class|class
name|SegmentMap
implements|implements
name|Accountable
block|{
DECL|field|BASE_RAM_BYTES_USED
specifier|private
specifier|static
specifier|final
name|long
name|BASE_RAM_BYTES_USED
init|=
name|RamUsageEstimator
operator|.
name|shallowSizeOfInstance
argument_list|(
name|SegmentMap
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/** Build a map from an index into a sorted view of `weights` to an index into `weights`. */
DECL|method|map
specifier|private
specifier|static
name|int
index|[]
name|map
parameter_list|(
specifier|final
name|long
index|[]
name|weights
parameter_list|)
block|{
specifier|final
name|int
index|[]
name|newToOld
init|=
operator|new
name|int
index|[
name|weights
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|weights
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|newToOld
index|[
name|i
index|]
operator|=
name|i
expr_stmt|;
block|}
operator|new
name|InPlaceMergeSorter
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|void
name|swap
parameter_list|(
name|int
name|i
parameter_list|,
name|int
name|j
parameter_list|)
block|{
specifier|final
name|int
name|tmp
init|=
name|newToOld
index|[
name|i
index|]
decl_stmt|;
name|newToOld
index|[
name|i
index|]
operator|=
name|newToOld
index|[
name|j
index|]
expr_stmt|;
name|newToOld
index|[
name|j
index|]
operator|=
name|tmp
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|int
name|compare
parameter_list|(
name|int
name|i
parameter_list|,
name|int
name|j
parameter_list|)
block|{
comment|// j first since we actually want higher weights first
return|return
name|Long
operator|.
name|compare
argument_list|(
name|weights
index|[
name|newToOld
index|[
name|j
index|]
index|]
argument_list|,
name|weights
index|[
name|newToOld
index|[
name|i
index|]
index|]
argument_list|)
return|;
block|}
block|}
operator|.
name|sort
argument_list|(
literal|0
argument_list|,
name|weights
operator|.
name|length
argument_list|)
expr_stmt|;
return|return
name|newToOld
return|;
block|}
comment|/** Inverse the map. */
DECL|method|inverse
specifier|private
specifier|static
name|int
index|[]
name|inverse
parameter_list|(
name|int
index|[]
name|map
parameter_list|)
block|{
specifier|final
name|int
index|[]
name|inverse
init|=
operator|new
name|int
index|[
name|map
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|map
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|inverse
index|[
name|map
index|[
name|i
index|]
index|]
operator|=
name|i
expr_stmt|;
block|}
return|return
name|inverse
return|;
block|}
DECL|field|newToOld
DECL|field|oldToNew
specifier|private
specifier|final
name|int
index|[]
name|newToOld
decl_stmt|,
name|oldToNew
decl_stmt|;
DECL|method|SegmentMap
name|SegmentMap
parameter_list|(
name|long
index|[]
name|weights
parameter_list|)
block|{
name|newToOld
operator|=
name|map
argument_list|(
name|weights
argument_list|)
expr_stmt|;
name|oldToNew
operator|=
name|inverse
argument_list|(
name|newToOld
argument_list|)
expr_stmt|;
assert|assert
name|Arrays
operator|.
name|equals
argument_list|(
name|newToOld
argument_list|,
name|inverse
argument_list|(
name|oldToNew
argument_list|)
argument_list|)
assert|;
block|}
DECL|method|newToOld
name|int
name|newToOld
parameter_list|(
name|int
name|segment
parameter_list|)
block|{
return|return
name|newToOld
index|[
name|segment
index|]
return|;
block|}
DECL|method|oldToNew
name|int
name|oldToNew
parameter_list|(
name|int
name|segment
parameter_list|)
block|{
return|return
name|oldToNew
index|[
name|segment
index|]
return|;
block|}
annotation|@
name|Override
DECL|method|ramBytesUsed
specifier|public
name|long
name|ramBytesUsed
parameter_list|()
block|{
return|return
name|BASE_RAM_BYTES_USED
operator|+
name|RamUsageEstimator
operator|.
name|sizeOf
argument_list|(
name|newToOld
argument_list|)
operator|+
name|RamUsageEstimator
operator|.
name|sizeOf
argument_list|(
name|oldToNew
argument_list|)
return|;
block|}
block|}
comment|/**      * Create an ordinal map that uses the number of unique values of each      * {@link SortedDocValues} instance as a weight.      * @see #build(Object, TermsEnum[], long[], float)      */
DECL|method|build
specifier|public
specifier|static
name|OrdinalMap
name|build
parameter_list|(
name|Object
name|owner
parameter_list|,
name|SortedDocValues
index|[]
name|values
parameter_list|,
name|float
name|acceptableOverheadRatio
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|TermsEnum
index|[]
name|subs
init|=
operator|new
name|TermsEnum
index|[
name|values
operator|.
name|length
index|]
decl_stmt|;
specifier|final
name|long
index|[]
name|weights
init|=
operator|new
name|long
index|[
name|values
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|values
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|subs
index|[
name|i
index|]
operator|=
name|values
index|[
name|i
index|]
operator|.
name|termsEnum
argument_list|()
expr_stmt|;
name|weights
index|[
name|i
index|]
operator|=
name|values
index|[
name|i
index|]
operator|.
name|getValueCount
argument_list|()
expr_stmt|;
block|}
return|return
name|build
argument_list|(
name|owner
argument_list|,
name|subs
argument_list|,
name|weights
argument_list|,
name|acceptableOverheadRatio
argument_list|)
return|;
block|}
comment|/**      * Create an ordinal map that uses the number of unique values of each      * {@link SortedSetDocValues} instance as a weight.      * @see #build(Object, TermsEnum[], long[], float)      */
DECL|method|build
specifier|public
specifier|static
name|OrdinalMap
name|build
parameter_list|(
name|Object
name|owner
parameter_list|,
name|SortedSetDocValues
index|[]
name|values
parameter_list|,
name|float
name|acceptableOverheadRatio
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|TermsEnum
index|[]
name|subs
init|=
operator|new
name|TermsEnum
index|[
name|values
operator|.
name|length
index|]
decl_stmt|;
specifier|final
name|long
index|[]
name|weights
init|=
operator|new
name|long
index|[
name|values
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|values
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|subs
index|[
name|i
index|]
operator|=
name|values
index|[
name|i
index|]
operator|.
name|termsEnum
argument_list|()
expr_stmt|;
name|weights
index|[
name|i
index|]
operator|=
name|values
index|[
name|i
index|]
operator|.
name|getValueCount
argument_list|()
expr_stmt|;
block|}
return|return
name|build
argument_list|(
name|owner
argument_list|,
name|subs
argument_list|,
name|weights
argument_list|,
name|acceptableOverheadRatio
argument_list|)
return|;
block|}
comment|/**       * Creates an ordinal map that allows mapping ords to/from a merged      * space from<code>subs</code>.      * @param owner a cache key      * @param subs TermsEnums that support {@link TermsEnum#ord()}. They need      *             not be dense (e.g. can be FilteredTermsEnums}.      * @param weights a weight for each sub. This is ideally correlated with      *             the number of unique terms that each sub introduces compared      *             to the other subs      * @throws IOException if an I/O error occurred.      */
DECL|method|build
specifier|public
specifier|static
name|OrdinalMap
name|build
parameter_list|(
name|Object
name|owner
parameter_list|,
name|TermsEnum
name|subs
index|[]
parameter_list|,
name|long
index|[]
name|weights
parameter_list|,
name|float
name|acceptableOverheadRatio
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|subs
operator|.
name|length
operator|!=
name|weights
operator|.
name|length
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"subs and weights must have the same length"
argument_list|)
throw|;
block|}
comment|// enums are not sorted, so let's sort to save memory
specifier|final
name|SegmentMap
name|segmentMap
init|=
operator|new
name|SegmentMap
argument_list|(
name|weights
argument_list|)
decl_stmt|;
return|return
operator|new
name|OrdinalMap
argument_list|(
name|owner
argument_list|,
name|subs
argument_list|,
name|segmentMap
argument_list|,
name|acceptableOverheadRatio
argument_list|)
return|;
block|}
DECL|field|BASE_RAM_BYTES_USED
specifier|private
specifier|static
specifier|final
name|long
name|BASE_RAM_BYTES_USED
init|=
name|RamUsageEstimator
operator|.
name|shallowSizeOfInstance
argument_list|(
name|OrdinalMap
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/** Cache key of whoever asked for this awful thing */
DECL|field|owner
specifier|public
specifier|final
name|Object
name|owner
decl_stmt|;
comment|// globalOrd -> (globalOrd - segmentOrd) where segmentOrd is the the ordinal in the first segment that contains this term
DECL|field|globalOrdDeltas
specifier|final
name|PackedLongValues
name|globalOrdDeltas
decl_stmt|;
comment|// globalOrd -> first segment container
DECL|field|firstSegments
specifier|final
name|PackedLongValues
name|firstSegments
decl_stmt|;
comment|// for every segment, segmentOrd -> globalOrd
DECL|field|segmentToGlobalOrds
specifier|final
name|LongValues
name|segmentToGlobalOrds
index|[]
decl_stmt|;
comment|// the map from/to segment ids
DECL|field|segmentMap
specifier|final
name|SegmentMap
name|segmentMap
decl_stmt|;
comment|// ram usage
DECL|field|ramBytesUsed
specifier|final
name|long
name|ramBytesUsed
decl_stmt|;
DECL|method|OrdinalMap
name|OrdinalMap
parameter_list|(
name|Object
name|owner
parameter_list|,
name|TermsEnum
name|subs
index|[]
parameter_list|,
name|SegmentMap
name|segmentMap
parameter_list|,
name|float
name|acceptableOverheadRatio
parameter_list|)
throws|throws
name|IOException
block|{
comment|// create the ordinal mappings by pulling a termsenum over each sub's
comment|// unique terms, and walking a multitermsenum over those
name|this
operator|.
name|owner
operator|=
name|owner
expr_stmt|;
name|this
operator|.
name|segmentMap
operator|=
name|segmentMap
expr_stmt|;
comment|// even though we accept an overhead ratio, we keep these ones with COMPACT
comment|// since they are only used to resolve values given a global ord, which is
comment|// slow anyway
name|PackedLongValues
operator|.
name|Builder
name|globalOrdDeltas
init|=
name|PackedLongValues
operator|.
name|monotonicBuilder
argument_list|(
name|PackedInts
operator|.
name|COMPACT
argument_list|)
decl_stmt|;
name|PackedLongValues
operator|.
name|Builder
name|firstSegments
init|=
name|PackedLongValues
operator|.
name|packedBuilder
argument_list|(
name|PackedInts
operator|.
name|COMPACT
argument_list|)
decl_stmt|;
specifier|final
name|PackedLongValues
operator|.
name|Builder
index|[]
name|ordDeltas
init|=
operator|new
name|PackedLongValues
operator|.
name|Builder
index|[
name|subs
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ordDeltas
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|ordDeltas
index|[
name|i
index|]
operator|=
name|PackedLongValues
operator|.
name|monotonicBuilder
argument_list|(
name|acceptableOverheadRatio
argument_list|)
expr_stmt|;
block|}
name|long
index|[]
name|ordDeltaBits
init|=
operator|new
name|long
index|[
name|subs
operator|.
name|length
index|]
decl_stmt|;
name|long
name|segmentOrds
index|[]
init|=
operator|new
name|long
index|[
name|subs
operator|.
name|length
index|]
decl_stmt|;
name|ReaderSlice
name|slices
index|[]
init|=
operator|new
name|ReaderSlice
index|[
name|subs
operator|.
name|length
index|]
decl_stmt|;
name|TermsEnumIndex
name|indexes
index|[]
init|=
operator|new
name|TermsEnumIndex
index|[
name|slices
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|slices
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|slices
index|[
name|i
index|]
operator|=
operator|new
name|ReaderSlice
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|indexes
index|[
name|i
index|]
operator|=
operator|new
name|TermsEnumIndex
argument_list|(
name|subs
index|[
name|segmentMap
operator|.
name|newToOld
argument_list|(
name|i
argument_list|)
index|]
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
name|MultiTermsEnum
name|mte
init|=
operator|new
name|MultiTermsEnum
argument_list|(
name|slices
argument_list|)
decl_stmt|;
name|mte
operator|.
name|reset
argument_list|(
name|indexes
argument_list|)
expr_stmt|;
name|long
name|globalOrd
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|mte
operator|.
name|next
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|TermsEnumWithSlice
name|matches
index|[]
init|=
name|mte
operator|.
name|getMatchArray
argument_list|()
decl_stmt|;
name|int
name|firstSegmentIndex
init|=
name|Integer
operator|.
name|MAX_VALUE
decl_stmt|;
name|long
name|globalOrdDelta
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|mte
operator|.
name|getMatchCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|int
name|segmentIndex
init|=
name|matches
index|[
name|i
index|]
operator|.
name|index
decl_stmt|;
name|long
name|segmentOrd
init|=
name|matches
index|[
name|i
index|]
operator|.
name|terms
operator|.
name|ord
argument_list|()
decl_stmt|;
name|long
name|delta
init|=
name|globalOrd
operator|-
name|segmentOrd
decl_stmt|;
comment|// We compute the least segment where the term occurs. In case the
comment|// first segment contains most (or better all) values, this will
comment|// help save significant memory
if|if
condition|(
name|segmentIndex
operator|<
name|firstSegmentIndex
condition|)
block|{
name|firstSegmentIndex
operator|=
name|segmentIndex
expr_stmt|;
name|globalOrdDelta
operator|=
name|delta
expr_stmt|;
block|}
comment|// for each per-segment ord, map it back to the global term.
while|while
condition|(
name|segmentOrds
index|[
name|segmentIndex
index|]
operator|<=
name|segmentOrd
condition|)
block|{
name|ordDeltaBits
index|[
name|segmentIndex
index|]
operator||=
name|delta
expr_stmt|;
name|ordDeltas
index|[
name|segmentIndex
index|]
operator|.
name|add
argument_list|(
name|delta
argument_list|)
expr_stmt|;
name|segmentOrds
index|[
name|segmentIndex
index|]
operator|++
expr_stmt|;
block|}
block|}
comment|// for each unique term, just mark the first segment index/delta where it occurs
assert|assert
name|firstSegmentIndex
operator|<
name|segmentOrds
operator|.
name|length
assert|;
name|firstSegments
operator|.
name|add
argument_list|(
name|firstSegmentIndex
argument_list|)
expr_stmt|;
name|globalOrdDeltas
operator|.
name|add
argument_list|(
name|globalOrdDelta
argument_list|)
expr_stmt|;
name|globalOrd
operator|++
expr_stmt|;
block|}
name|this
operator|.
name|firstSegments
operator|=
name|firstSegments
operator|.
name|build
argument_list|()
expr_stmt|;
name|this
operator|.
name|globalOrdDeltas
operator|=
name|globalOrdDeltas
operator|.
name|build
argument_list|()
expr_stmt|;
comment|// ordDeltas is typically the bottleneck, so let's see what we can do to make it faster
name|segmentToGlobalOrds
operator|=
operator|new
name|LongValues
index|[
name|subs
operator|.
name|length
index|]
expr_stmt|;
name|long
name|ramBytesUsed
init|=
name|BASE_RAM_BYTES_USED
operator|+
name|this
operator|.
name|globalOrdDeltas
operator|.
name|ramBytesUsed
argument_list|()
operator|+
name|this
operator|.
name|firstSegments
operator|.
name|ramBytesUsed
argument_list|()
operator|+
name|RamUsageEstimator
operator|.
name|shallowSizeOf
argument_list|(
name|segmentToGlobalOrds
argument_list|)
operator|+
name|segmentMap
operator|.
name|ramBytesUsed
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ordDeltas
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
specifier|final
name|PackedLongValues
name|deltas
init|=
name|ordDeltas
index|[
name|i
index|]
operator|.
name|build
argument_list|()
decl_stmt|;
if|if
condition|(
name|ordDeltaBits
index|[
name|i
index|]
operator|==
literal|0L
condition|)
block|{
comment|// segment ords perfectly match global ordinals
comment|// likely in case of low cardinalities and large segments
name|segmentToGlobalOrds
index|[
name|i
index|]
operator|=
name|LongValues
operator|.
name|IDENTITY
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|int
name|bitsRequired
init|=
name|ordDeltaBits
index|[
name|i
index|]
operator|<
literal|0
condition|?
literal|64
else|:
name|PackedInts
operator|.
name|bitsRequired
argument_list|(
name|ordDeltaBits
index|[
name|i
index|]
argument_list|)
decl_stmt|;
specifier|final
name|long
name|monotonicBits
init|=
name|deltas
operator|.
name|ramBytesUsed
argument_list|()
operator|*
literal|8
decl_stmt|;
specifier|final
name|long
name|packedBits
init|=
name|bitsRequired
operator|*
name|deltas
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|deltas
operator|.
name|size
argument_list|()
operator|<=
name|Integer
operator|.
name|MAX_VALUE
operator|&&
name|packedBits
operator|<=
name|monotonicBits
operator|*
operator|(
literal|1
operator|+
name|acceptableOverheadRatio
operator|)
condition|)
block|{
comment|// monotonic compression mostly adds overhead, let's keep the mapping in plain packed ints
specifier|final
name|int
name|size
init|=
operator|(
name|int
operator|)
name|deltas
operator|.
name|size
argument_list|()
decl_stmt|;
specifier|final
name|PackedInts
operator|.
name|Mutable
name|newDeltas
init|=
name|PackedInts
operator|.
name|getMutable
argument_list|(
name|size
argument_list|,
name|bitsRequired
argument_list|,
name|acceptableOverheadRatio
argument_list|)
decl_stmt|;
specifier|final
name|PackedLongValues
operator|.
name|Iterator
name|it
init|=
name|deltas
operator|.
name|iterator
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|ord
init|=
literal|0
init|;
name|ord
operator|<
name|size
condition|;
operator|++
name|ord
control|)
block|{
name|newDeltas
operator|.
name|set
argument_list|(
name|ord
argument_list|,
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
assert|assert
operator|!
name|it
operator|.
name|hasNext
argument_list|()
assert|;
name|segmentToGlobalOrds
index|[
name|i
index|]
operator|=
operator|new
name|LongValues
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|long
name|get
parameter_list|(
name|long
name|ord
parameter_list|)
block|{
return|return
name|ord
operator|+
name|newDeltas
operator|.
name|get
argument_list|(
operator|(
name|int
operator|)
name|ord
argument_list|)
return|;
block|}
block|}
expr_stmt|;
name|ramBytesUsed
operator|+=
name|newDeltas
operator|.
name|ramBytesUsed
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|segmentToGlobalOrds
index|[
name|i
index|]
operator|=
operator|new
name|LongValues
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|long
name|get
parameter_list|(
name|long
name|ord
parameter_list|)
block|{
return|return
name|ord
operator|+
name|deltas
operator|.
name|get
argument_list|(
name|ord
argument_list|)
return|;
block|}
block|}
expr_stmt|;
name|ramBytesUsed
operator|+=
name|deltas
operator|.
name|ramBytesUsed
argument_list|()
expr_stmt|;
block|}
name|ramBytesUsed
operator|+=
name|RamUsageEstimator
operator|.
name|shallowSizeOf
argument_list|(
name|segmentToGlobalOrds
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
name|this
operator|.
name|ramBytesUsed
operator|=
name|ramBytesUsed
expr_stmt|;
block|}
comment|/**       * Given a segment number, return a {@link LongValues} instance that maps      * segment ordinals to global ordinals.      */
DECL|method|getGlobalOrds
specifier|public
name|LongValues
name|getGlobalOrds
parameter_list|(
name|int
name|segmentIndex
parameter_list|)
block|{
return|return
name|segmentToGlobalOrds
index|[
name|segmentMap
operator|.
name|oldToNew
argument_list|(
name|segmentIndex
argument_list|)
index|]
return|;
block|}
comment|/**      * Given global ordinal, returns the ordinal of the first segment which contains      * this ordinal (the corresponding to the segment return {@link #getFirstSegmentNumber}).      */
DECL|method|getFirstSegmentOrd
specifier|public
name|long
name|getFirstSegmentOrd
parameter_list|(
name|long
name|globalOrd
parameter_list|)
block|{
return|return
name|globalOrd
operator|-
name|globalOrdDeltas
operator|.
name|get
argument_list|(
name|globalOrd
argument_list|)
return|;
block|}
comment|/**       * Given a global ordinal, returns the index of the first      * segment that contains this term.      */
DECL|method|getFirstSegmentNumber
specifier|public
name|int
name|getFirstSegmentNumber
parameter_list|(
name|long
name|globalOrd
parameter_list|)
block|{
return|return
name|segmentMap
operator|.
name|newToOld
argument_list|(
operator|(
name|int
operator|)
name|firstSegments
operator|.
name|get
argument_list|(
name|globalOrd
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Returns the total number of unique terms in global ord space.      */
DECL|method|getValueCount
specifier|public
name|long
name|getValueCount
parameter_list|()
block|{
return|return
name|globalOrdDeltas
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|ramBytesUsed
specifier|public
name|long
name|ramBytesUsed
parameter_list|()
block|{
return|return
name|ramBytesUsed
return|;
block|}
annotation|@
name|Override
DECL|method|getChildResources
specifier|public
name|Collection
argument_list|<
name|Accountable
argument_list|>
name|getChildResources
parameter_list|()
block|{
name|List
argument_list|<
name|Accountable
argument_list|>
name|resources
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|resources
operator|.
name|add
argument_list|(
name|Accountables
operator|.
name|namedAccountable
argument_list|(
literal|"global ord deltas"
argument_list|,
name|globalOrdDeltas
argument_list|)
argument_list|)
expr_stmt|;
name|resources
operator|.
name|add
argument_list|(
name|Accountables
operator|.
name|namedAccountable
argument_list|(
literal|"first segments"
argument_list|,
name|firstSegments
argument_list|)
argument_list|)
expr_stmt|;
name|resources
operator|.
name|add
argument_list|(
name|Accountables
operator|.
name|namedAccountable
argument_list|(
literal|"segment map"
argument_list|,
name|segmentMap
argument_list|)
argument_list|)
expr_stmt|;
comment|// TODO: would be nice to return actual child segment deltas too, but the optimizations are confusing
return|return
name|resources
return|;
block|}
block|}
comment|/**     * Implements SortedDocValues over n subs, using an OrdinalMap    * @lucene.internal    */
DECL|class|MultiSortedDocValues
specifier|public
specifier|static
class|class
name|MultiSortedDocValues
extends|extends
name|SortedDocValues
block|{
comment|/** docbase for each leaf: parallel with {@link #values} */
DECL|field|docStarts
specifier|public
specifier|final
name|int
name|docStarts
index|[]
decl_stmt|;
comment|/** leaf values */
DECL|field|values
specifier|public
specifier|final
name|SortedDocValues
name|values
index|[]
decl_stmt|;
comment|/** ordinal map mapping ords from<code>values</code> to global ord space */
DECL|field|mapping
specifier|public
specifier|final
name|OrdinalMap
name|mapping
decl_stmt|;
comment|/** Creates a new MultiSortedDocValues over<code>values</code> */
DECL|method|MultiSortedDocValues
specifier|public
name|MultiSortedDocValues
parameter_list|(
name|SortedDocValues
name|values
index|[]
parameter_list|,
name|int
name|docStarts
index|[]
parameter_list|,
name|OrdinalMap
name|mapping
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|docStarts
operator|.
name|length
operator|==
name|values
operator|.
name|length
operator|+
literal|1
assert|;
name|this
operator|.
name|values
operator|=
name|values
expr_stmt|;
name|this
operator|.
name|docStarts
operator|=
name|docStarts
expr_stmt|;
name|this
operator|.
name|mapping
operator|=
name|mapping
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getOrd
specifier|public
name|int
name|getOrd
parameter_list|(
name|int
name|docID
parameter_list|)
block|{
name|int
name|subIndex
init|=
name|ReaderUtil
operator|.
name|subIndex
argument_list|(
name|docID
argument_list|,
name|docStarts
argument_list|)
decl_stmt|;
name|int
name|segmentOrd
init|=
name|values
index|[
name|subIndex
index|]
operator|.
name|getOrd
argument_list|(
name|docID
operator|-
name|docStarts
index|[
name|subIndex
index|]
argument_list|)
decl_stmt|;
return|return
name|segmentOrd
operator|==
operator|-
literal|1
condition|?
name|segmentOrd
else|:
operator|(
name|int
operator|)
name|mapping
operator|.
name|getGlobalOrds
argument_list|(
name|subIndex
argument_list|)
operator|.
name|get
argument_list|(
name|segmentOrd
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|lookupOrd
specifier|public
name|BytesRef
name|lookupOrd
parameter_list|(
name|int
name|ord
parameter_list|)
block|{
name|int
name|subIndex
init|=
name|mapping
operator|.
name|getFirstSegmentNumber
argument_list|(
name|ord
argument_list|)
decl_stmt|;
name|int
name|segmentOrd
init|=
operator|(
name|int
operator|)
name|mapping
operator|.
name|getFirstSegmentOrd
argument_list|(
name|ord
argument_list|)
decl_stmt|;
return|return
name|values
index|[
name|subIndex
index|]
operator|.
name|lookupOrd
argument_list|(
name|segmentOrd
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getValueCount
specifier|public
name|int
name|getValueCount
parameter_list|()
block|{
return|return
operator|(
name|int
operator|)
name|mapping
operator|.
name|getValueCount
argument_list|()
return|;
block|}
block|}
comment|/**     * Implements MultiSortedSetDocValues over n subs, using an OrdinalMap     * @lucene.internal    */
DECL|class|MultiSortedSetDocValues
specifier|public
specifier|static
class|class
name|MultiSortedSetDocValues
extends|extends
name|SortedSetDocValues
block|{
comment|/** docbase for each leaf: parallel with {@link #values} */
DECL|field|docStarts
specifier|public
specifier|final
name|int
name|docStarts
index|[]
decl_stmt|;
comment|/** leaf values */
DECL|field|values
specifier|public
specifier|final
name|SortedSetDocValues
name|values
index|[]
decl_stmt|;
comment|/** ordinal map mapping ords from<code>values</code> to global ord space */
DECL|field|mapping
specifier|public
specifier|final
name|OrdinalMap
name|mapping
decl_stmt|;
DECL|field|currentSubIndex
name|int
name|currentSubIndex
decl_stmt|;
DECL|field|currentGlobalOrds
name|LongValues
name|currentGlobalOrds
decl_stmt|;
comment|/** Creates a new MultiSortedSetDocValues over<code>values</code> */
DECL|method|MultiSortedSetDocValues
specifier|public
name|MultiSortedSetDocValues
parameter_list|(
name|SortedSetDocValues
name|values
index|[]
parameter_list|,
name|int
name|docStarts
index|[]
parameter_list|,
name|OrdinalMap
name|mapping
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|docStarts
operator|.
name|length
operator|==
name|values
operator|.
name|length
operator|+
literal|1
assert|;
name|this
operator|.
name|values
operator|=
name|values
expr_stmt|;
name|this
operator|.
name|docStarts
operator|=
name|docStarts
expr_stmt|;
name|this
operator|.
name|mapping
operator|=
name|mapping
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|nextOrd
specifier|public
name|long
name|nextOrd
parameter_list|()
block|{
name|long
name|segmentOrd
init|=
name|values
index|[
name|currentSubIndex
index|]
operator|.
name|nextOrd
argument_list|()
decl_stmt|;
if|if
condition|(
name|segmentOrd
operator|==
name|NO_MORE_ORDS
condition|)
block|{
return|return
name|segmentOrd
return|;
block|}
else|else
block|{
return|return
name|currentGlobalOrds
operator|.
name|get
argument_list|(
name|segmentOrd
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|setDocument
specifier|public
name|void
name|setDocument
parameter_list|(
name|int
name|docID
parameter_list|)
block|{
name|currentSubIndex
operator|=
name|ReaderUtil
operator|.
name|subIndex
argument_list|(
name|docID
argument_list|,
name|docStarts
argument_list|)
expr_stmt|;
name|currentGlobalOrds
operator|=
name|mapping
operator|.
name|getGlobalOrds
argument_list|(
name|currentSubIndex
argument_list|)
expr_stmt|;
name|values
index|[
name|currentSubIndex
index|]
operator|.
name|setDocument
argument_list|(
name|docID
operator|-
name|docStarts
index|[
name|currentSubIndex
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|lookupOrd
specifier|public
name|BytesRef
name|lookupOrd
parameter_list|(
name|long
name|ord
parameter_list|)
block|{
name|int
name|subIndex
init|=
name|mapping
operator|.
name|getFirstSegmentNumber
argument_list|(
name|ord
argument_list|)
decl_stmt|;
name|long
name|segmentOrd
init|=
name|mapping
operator|.
name|getFirstSegmentOrd
argument_list|(
name|ord
argument_list|)
decl_stmt|;
return|return
name|values
index|[
name|subIndex
index|]
operator|.
name|lookupOrd
argument_list|(
name|segmentOrd
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getValueCount
specifier|public
name|long
name|getValueCount
parameter_list|()
block|{
return|return
name|mapping
operator|.
name|getValueCount
argument_list|()
return|;
block|}
block|}
block|}
end_class
end_unit
