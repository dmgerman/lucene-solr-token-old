begin_unit
begin_package
DECL|package|org.apache.lucene.index
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Array
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SortedBytesMergeUtils
operator|.
name|MergeContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SortedBytesMergeUtils
operator|.
name|SortedSourceSlice
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|ArrayUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|PagedBytes
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|packed
operator|.
name|PackedInts
operator|.
name|Reader
import|;
end_import
begin_comment
comment|/**  * A wrapper for CompositeIndexReader providing access to per segment  * {@link DocValues}  *   *<p><b>NOTE</b>: for multi readers, you'll get better  * performance by gathering the sub readers using  * {@link IndexReader#getTopReaderContext()} to get the  * atomic leaves and then operate per-AtomicReader,  * instead of using this class.  *  * @lucene.experimental  * @lucene.internal  */
end_comment
begin_class
DECL|class|MultiDocValues
specifier|public
class|class
name|MultiDocValues
extends|extends
name|DocValues
block|{
DECL|field|DEFAULT_PULLER
specifier|private
specifier|static
name|DocValuesPuller
name|DEFAULT_PULLER
init|=
operator|new
name|DocValuesPuller
argument_list|()
decl_stmt|;
DECL|field|NORMS_PULLER
specifier|private
specifier|static
specifier|final
name|DocValuesPuller
name|NORMS_PULLER
init|=
operator|new
name|DocValuesPuller
argument_list|()
block|{
specifier|public
name|DocValues
name|pull
parameter_list|(
name|AtomicReader
name|reader
parameter_list|,
name|String
name|field
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|reader
operator|.
name|normValues
argument_list|(
name|field
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|stopLoadingOnNull
parameter_list|(
name|AtomicReader
name|reader
parameter_list|,
name|String
name|field
parameter_list|)
throws|throws
name|IOException
block|{
comment|// for norms we drop all norms if one leaf reader has no norms and the field is present
name|FieldInfos
name|fieldInfos
init|=
name|reader
operator|.
name|getFieldInfos
argument_list|()
decl_stmt|;
name|FieldInfo
name|fieldInfo
init|=
name|fieldInfos
operator|.
name|fieldInfo
argument_list|(
name|field
argument_list|)
decl_stmt|;
return|return
name|fieldInfo
operator|!=
literal|null
operator|&&
name|fieldInfo
operator|.
name|omitsNorms
argument_list|()
return|;
block|}
block|}
decl_stmt|;
DECL|class|DocValuesSlice
specifier|public
specifier|static
class|class
name|DocValuesSlice
block|{
DECL|field|EMPTY_ARRAY
specifier|public
specifier|final
specifier|static
name|DocValuesSlice
index|[]
name|EMPTY_ARRAY
init|=
operator|new
name|DocValuesSlice
index|[
literal|0
index|]
decl_stmt|;
DECL|field|start
specifier|final
name|int
name|start
decl_stmt|;
DECL|field|length
specifier|final
name|int
name|length
decl_stmt|;
DECL|field|docValues
name|DocValues
name|docValues
decl_stmt|;
DECL|method|DocValuesSlice
specifier|public
name|DocValuesSlice
parameter_list|(
name|DocValues
name|docValues
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|this
operator|.
name|docValues
operator|=
name|docValues
expr_stmt|;
name|this
operator|.
name|start
operator|=
name|start
expr_stmt|;
name|this
operator|.
name|length
operator|=
name|length
expr_stmt|;
block|}
block|}
DECL|class|DocValuesPuller
specifier|private
specifier|static
class|class
name|DocValuesPuller
block|{
DECL|method|DocValuesPuller
specifier|public
name|DocValuesPuller
parameter_list|()
block|{}
DECL|method|pull
specifier|public
name|DocValues
name|pull
parameter_list|(
name|AtomicReader
name|reader
parameter_list|,
name|String
name|field
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|reader
operator|.
name|docValues
argument_list|(
name|field
argument_list|)
return|;
block|}
DECL|method|stopLoadingOnNull
specifier|public
name|boolean
name|stopLoadingOnNull
parameter_list|(
name|AtomicReader
name|reader
parameter_list|,
name|String
name|field
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|false
return|;
block|}
block|}
DECL|field|slices
specifier|private
name|DocValuesSlice
index|[]
name|slices
decl_stmt|;
DECL|field|starts
specifier|private
name|int
index|[]
name|starts
decl_stmt|;
DECL|field|type
specifier|private
name|Type
name|type
decl_stmt|;
DECL|field|valueSize
specifier|private
name|int
name|valueSize
decl_stmt|;
DECL|method|MultiDocValues
specifier|private
name|MultiDocValues
parameter_list|(
name|DocValuesSlice
index|[]
name|slices
parameter_list|,
name|int
index|[]
name|starts
parameter_list|,
name|TypePromoter
name|promotedType
parameter_list|)
block|{
name|this
operator|.
name|starts
operator|=
name|starts
expr_stmt|;
name|this
operator|.
name|slices
operator|=
name|slices
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|promotedType
operator|.
name|type
argument_list|()
expr_stmt|;
name|this
operator|.
name|valueSize
operator|=
name|promotedType
operator|.
name|getValueSize
argument_list|()
expr_stmt|;
block|}
comment|/**    * Returns a single {@link DocValues} instance for this field, merging    * their values on the fly.    *     *<p>    *<b>NOTE</b>: this is a slow way to access DocValues.    * It's better to get the sub-readers and iterate through them    * yourself.    */
DECL|method|getDocValues
specifier|public
specifier|static
name|DocValues
name|getDocValues
parameter_list|(
name|IndexReader
name|r
parameter_list|,
specifier|final
name|String
name|field
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getDocValues
argument_list|(
name|r
argument_list|,
name|field
argument_list|,
name|DEFAULT_PULLER
argument_list|)
return|;
block|}
comment|/**    * Returns a single {@link DocValues} instance for this norms field, merging    * their values on the fly.    *     *<p>    *<b>NOTE</b>: this is a slow way to access DocValues.    * It's better to get the sub-readers and iterate through them    * yourself.    */
DECL|method|getNormDocValues
specifier|public
specifier|static
name|DocValues
name|getNormDocValues
parameter_list|(
name|IndexReader
name|r
parameter_list|,
specifier|final
name|String
name|field
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getDocValues
argument_list|(
name|r
argument_list|,
name|field
argument_list|,
name|NORMS_PULLER
argument_list|)
return|;
block|}
DECL|method|getDocValues
specifier|private
specifier|static
name|DocValues
name|getDocValues
parameter_list|(
name|IndexReader
name|reader
parameter_list|,
specifier|final
name|String
name|field
parameter_list|,
specifier|final
name|DocValuesPuller
name|puller
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|reader
operator|instanceof
name|AtomicReader
condition|)
block|{
comment|// already an atomic reader
return|return
name|puller
operator|.
name|pull
argument_list|(
operator|(
name|AtomicReader
operator|)
name|reader
argument_list|,
name|field
argument_list|)
return|;
block|}
assert|assert
name|reader
operator|instanceof
name|CompositeReader
assert|;
specifier|final
name|List
argument_list|<
name|AtomicReaderContext
argument_list|>
name|leaves
init|=
name|reader
operator|.
name|getTopReaderContext
argument_list|()
operator|.
name|leaves
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|leaves
operator|.
name|size
argument_list|()
condition|)
block|{
case|case
literal|0
case|:
comment|// no fields
return|return
literal|null
return|;
case|case
literal|1
case|:
comment|// already an atomic reader / reader with one leave
return|return
name|getDocValues
argument_list|(
name|leaves
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|reader
argument_list|()
argument_list|,
name|field
argument_list|,
name|puller
argument_list|)
return|;
default|default:
specifier|final
name|List
argument_list|<
name|DocValuesSlice
argument_list|>
name|slices
init|=
operator|new
name|ArrayList
argument_list|<
name|DocValuesSlice
argument_list|>
argument_list|()
decl_stmt|;
name|TypePromoter
name|promotedType
init|=
name|TypePromoter
operator|.
name|getIdentityPromoter
argument_list|()
decl_stmt|;
comment|// gather all docvalues fields, accumulating a promoted type across
comment|// potentially incompatible types
for|for
control|(
specifier|final
name|AtomicReaderContext
name|ctx
range|:
name|leaves
control|)
block|{
specifier|final
name|AtomicReader
name|r
init|=
name|ctx
operator|.
name|reader
argument_list|()
decl_stmt|;
specifier|final
name|DocValues
name|d
init|=
name|puller
operator|.
name|pull
argument_list|(
name|r
argument_list|,
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|d
operator|!=
literal|null
condition|)
block|{
name|TypePromoter
name|incoming
init|=
name|TypePromoter
operator|.
name|create
argument_list|(
name|d
operator|.
name|getType
argument_list|()
argument_list|,
name|d
operator|.
name|getValueSize
argument_list|()
argument_list|)
decl_stmt|;
name|promotedType
operator|=
name|promotedType
operator|.
name|promote
argument_list|(
name|incoming
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|puller
operator|.
name|stopLoadingOnNull
argument_list|(
name|r
argument_list|,
name|field
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|slices
operator|.
name|add
argument_list|(
operator|new
name|DocValuesSlice
argument_list|(
name|d
argument_list|,
name|ctx
operator|.
name|docBase
argument_list|,
name|r
operator|.
name|maxDoc
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// return null if no docvalues encountered anywhere
if|if
condition|(
name|promotedType
operator|==
name|TypePromoter
operator|.
name|getIdentityPromoter
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// populate starts and fill gaps with empty docvalues
name|int
name|starts
index|[]
init|=
operator|new
name|int
index|[
name|slices
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|slices
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|DocValuesSlice
name|slice
init|=
name|slices
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|starts
index|[
name|i
index|]
operator|=
name|slice
operator|.
name|start
expr_stmt|;
if|if
condition|(
name|slice
operator|.
name|docValues
operator|==
literal|null
condition|)
block|{
name|Type
name|promoted
init|=
name|promotedType
operator|.
name|type
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|promoted
condition|)
block|{
case|case
name|BYTES_FIXED_DEREF
case|:
case|case
name|BYTES_FIXED_STRAIGHT
case|:
case|case
name|BYTES_FIXED_SORTED
case|:
assert|assert
name|promotedType
operator|.
name|getValueSize
argument_list|()
operator|>=
literal|0
assert|;
name|slice
operator|.
name|docValues
operator|=
operator|new
name|EmptyFixedDocValues
argument_list|(
name|slice
operator|.
name|length
argument_list|,
name|promoted
argument_list|,
name|promotedType
operator|.
name|getValueSize
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default:
name|slice
operator|.
name|docValues
operator|=
operator|new
name|EmptyDocValues
argument_list|(
name|slice
operator|.
name|length
argument_list|,
name|promoted
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
operator|new
name|MultiDocValues
argument_list|(
name|slices
operator|.
name|toArray
argument_list|(
operator|new
name|DocValuesSlice
index|[
name|slices
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|,
name|starts
argument_list|,
name|promotedType
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|load
specifier|public
name|Source
name|load
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|MultiSource
argument_list|(
name|slices
argument_list|,
name|starts
argument_list|,
literal|false
argument_list|,
name|type
argument_list|)
return|;
block|}
DECL|class|EmptyDocValues
specifier|public
specifier|static
class|class
name|EmptyDocValues
extends|extends
name|DocValues
block|{
DECL|field|maxDoc
specifier|final
name|int
name|maxDoc
decl_stmt|;
DECL|field|emptySource
specifier|final
name|Source
name|emptySource
decl_stmt|;
DECL|method|EmptyDocValues
specifier|public
name|EmptyDocValues
parameter_list|(
name|int
name|maxDoc
parameter_list|,
name|Type
name|type
parameter_list|)
block|{
name|this
operator|.
name|maxDoc
operator|=
name|maxDoc
expr_stmt|;
name|this
operator|.
name|emptySource
operator|=
operator|new
name|EmptySource
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|load
specifier|public
name|Source
name|load
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|emptySource
return|;
block|}
annotation|@
name|Override
DECL|method|getType
specifier|public
name|Type
name|getType
parameter_list|()
block|{
return|return
name|emptySource
operator|.
name|getType
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getDirectSource
specifier|public
name|Source
name|getDirectSource
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|emptySource
return|;
block|}
block|}
DECL|class|EmptyFixedDocValues
specifier|public
specifier|static
class|class
name|EmptyFixedDocValues
extends|extends
name|DocValues
block|{
DECL|field|maxDoc
specifier|final
name|int
name|maxDoc
decl_stmt|;
DECL|field|emptyFixedSource
specifier|final
name|Source
name|emptyFixedSource
decl_stmt|;
DECL|field|valueSize
specifier|final
name|int
name|valueSize
decl_stmt|;
DECL|method|EmptyFixedDocValues
specifier|public
name|EmptyFixedDocValues
parameter_list|(
name|int
name|maxDoc
parameter_list|,
name|Type
name|type
parameter_list|,
name|int
name|valueSize
parameter_list|)
block|{
name|this
operator|.
name|maxDoc
operator|=
name|maxDoc
expr_stmt|;
name|this
operator|.
name|emptyFixedSource
operator|=
operator|new
name|EmptyFixedSource
argument_list|(
name|type
argument_list|,
name|valueSize
argument_list|)
expr_stmt|;
name|this
operator|.
name|valueSize
operator|=
name|valueSize
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|load
specifier|public
name|Source
name|load
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|emptyFixedSource
return|;
block|}
annotation|@
name|Override
DECL|method|getType
specifier|public
name|Type
name|getType
parameter_list|()
block|{
return|return
name|emptyFixedSource
operator|.
name|getType
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getValueSize
specifier|public
name|int
name|getValueSize
parameter_list|()
block|{
return|return
name|valueSize
return|;
block|}
annotation|@
name|Override
DECL|method|getDirectSource
specifier|public
name|Source
name|getDirectSource
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|emptyFixedSource
return|;
block|}
block|}
DECL|class|MultiSource
specifier|private
specifier|static
class|class
name|MultiSource
extends|extends
name|Source
block|{
DECL|field|numDocs
specifier|private
name|int
name|numDocs
init|=
literal|0
decl_stmt|;
DECL|field|start
specifier|private
name|int
name|start
init|=
literal|0
decl_stmt|;
DECL|field|current
specifier|private
name|Source
name|current
decl_stmt|;
DECL|field|starts
specifier|private
specifier|final
name|int
index|[]
name|starts
decl_stmt|;
DECL|field|slices
specifier|private
specifier|final
name|DocValuesSlice
index|[]
name|slices
decl_stmt|;
DECL|field|direct
specifier|private
name|boolean
name|direct
decl_stmt|;
DECL|field|cachedArray
specifier|private
name|Object
name|cachedArray
decl_stmt|;
comment|// cached array if supported
DECL|method|MultiSource
specifier|public
name|MultiSource
parameter_list|(
name|DocValuesSlice
index|[]
name|slices
parameter_list|,
name|int
index|[]
name|starts
parameter_list|,
name|boolean
name|direct
parameter_list|,
name|Type
name|type
parameter_list|)
block|{
name|super
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|this
operator|.
name|slices
operator|=
name|slices
expr_stmt|;
name|this
operator|.
name|starts
operator|=
name|starts
expr_stmt|;
assert|assert
name|slices
operator|.
name|length
operator|!=
literal|0
assert|;
name|this
operator|.
name|direct
operator|=
name|direct
expr_stmt|;
block|}
DECL|method|getInt
specifier|public
name|long
name|getInt
parameter_list|(
name|int
name|docID
parameter_list|)
block|{
specifier|final
name|int
name|doc
init|=
name|ensureSource
argument_list|(
name|docID
argument_list|)
decl_stmt|;
return|return
name|current
operator|.
name|getInt
argument_list|(
name|doc
argument_list|)
return|;
block|}
DECL|method|ensureSource
specifier|private
specifier|final
name|int
name|ensureSource
parameter_list|(
name|int
name|docID
parameter_list|)
block|{
if|if
condition|(
name|docID
operator|>=
name|start
operator|&&
name|docID
operator|<
name|start
operator|+
name|numDocs
condition|)
block|{
return|return
name|docID
operator|-
name|start
return|;
block|}
else|else
block|{
specifier|final
name|int
name|idx
init|=
name|ReaderUtil
operator|.
name|subIndex
argument_list|(
name|docID
argument_list|,
name|starts
argument_list|)
decl_stmt|;
assert|assert
name|idx
operator|>=
literal|0
operator|&&
name|idx
operator|<
name|slices
operator|.
name|length
operator|:
literal|"idx was "
operator|+
name|idx
operator|+
literal|" for doc id: "
operator|+
name|docID
operator|+
literal|" slices : "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|starts
argument_list|)
assert|;
assert|assert
name|slices
index|[
name|idx
index|]
operator|!=
literal|null
assert|;
try|try
block|{
if|if
condition|(
name|direct
condition|)
block|{
name|current
operator|=
name|slices
index|[
name|idx
index|]
operator|.
name|docValues
operator|.
name|getDirectSource
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|current
operator|=
name|slices
index|[
name|idx
index|]
operator|.
name|docValues
operator|.
name|getSource
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"load failed"
argument_list|,
name|e
argument_list|)
throw|;
comment|// TODO how should we
comment|// handle this
block|}
name|start
operator|=
name|slices
index|[
name|idx
index|]
operator|.
name|start
expr_stmt|;
name|numDocs
operator|=
name|slices
index|[
name|idx
index|]
operator|.
name|length
expr_stmt|;
return|return
name|docID
operator|-
name|start
return|;
block|}
block|}
DECL|method|getFloat
specifier|public
name|double
name|getFloat
parameter_list|(
name|int
name|docID
parameter_list|)
block|{
specifier|final
name|int
name|doc
init|=
name|ensureSource
argument_list|(
name|docID
argument_list|)
decl_stmt|;
return|return
name|current
operator|.
name|getFloat
argument_list|(
name|doc
argument_list|)
return|;
block|}
DECL|method|getBytes
specifier|public
name|BytesRef
name|getBytes
parameter_list|(
name|int
name|docID
parameter_list|,
name|BytesRef
name|bytesRef
parameter_list|)
block|{
specifier|final
name|int
name|doc
init|=
name|ensureSource
argument_list|(
name|docID
argument_list|)
decl_stmt|;
return|return
name|current
operator|.
name|getBytes
argument_list|(
name|doc
argument_list|,
name|bytesRef
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|asSortedSource
specifier|public
name|SortedSource
name|asSortedSource
parameter_list|()
block|{
try|try
block|{
if|if
condition|(
name|type
operator|==
name|Type
operator|.
name|BYTES_FIXED_SORTED
operator|||
name|type
operator|==
name|Type
operator|.
name|BYTES_VAR_SORTED
condition|)
block|{
name|DocValues
index|[]
name|values
init|=
operator|new
name|DocValues
index|[
name|slices
operator|.
name|length
index|]
decl_stmt|;
name|Comparator
argument_list|<
name|BytesRef
argument_list|>
name|comp
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|values
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|values
index|[
name|i
index|]
operator|=
name|slices
index|[
name|i
index|]
operator|.
name|docValues
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|values
index|[
name|i
index|]
operator|instanceof
name|EmptyDocValues
operator|)
condition|)
block|{
name|Comparator
argument_list|<
name|BytesRef
argument_list|>
name|comparator
init|=
name|values
index|[
name|i
index|]
operator|.
name|getDirectSource
argument_list|()
operator|.
name|asSortedSource
argument_list|()
operator|.
name|getComparator
argument_list|()
decl_stmt|;
assert|assert
name|comp
operator|==
literal|null
operator|||
name|comp
operator|==
name|comparator
assert|;
name|comp
operator|=
name|comparator
expr_stmt|;
block|}
block|}
assert|assert
name|comp
operator|!=
literal|null
assert|;
specifier|final
name|int
name|globalNumDocs
init|=
name|globalNumDocs
argument_list|()
decl_stmt|;
specifier|final
name|MergeContext
name|ctx
init|=
name|SortedBytesMergeUtils
operator|.
name|init
argument_list|(
name|type
argument_list|,
name|values
argument_list|,
name|comp
argument_list|,
name|globalNumDocs
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|SortedSourceSlice
argument_list|>
name|slices
init|=
name|SortedBytesMergeUtils
operator|.
name|buildSlices
argument_list|(
name|docBases
argument_list|()
argument_list|,
operator|new
name|MergeState
operator|.
name|DocMap
index|[
name|values
operator|.
name|length
index|]
argument_list|,
name|values
argument_list|,
name|ctx
argument_list|)
decl_stmt|;
name|RecordingBytesRefConsumer
name|consumer
init|=
operator|new
name|RecordingBytesRefConsumer
argument_list|(
name|type
argument_list|)
decl_stmt|;
specifier|final
name|int
name|maxOrd
init|=
name|SortedBytesMergeUtils
operator|.
name|mergeRecords
argument_list|(
name|ctx
argument_list|,
name|consumer
argument_list|,
name|slices
argument_list|)
decl_stmt|;
specifier|final
name|int
index|[]
name|docToOrd
init|=
operator|new
name|int
index|[
name|globalNumDocs
index|]
decl_stmt|;
for|for
control|(
name|SortedSourceSlice
name|slice
range|:
name|slices
control|)
block|{
name|slice
operator|.
name|toAbsolutOrds
argument_list|(
name|docToOrd
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|MultiSortedSource
argument_list|(
name|type
argument_list|,
name|comp
argument_list|,
name|consumer
operator|.
name|pagedBytes
argument_list|,
name|ctx
operator|.
name|sizePerValues
argument_list|,
name|maxOrd
argument_list|,
name|docToOrd
argument_list|,
name|consumer
operator|.
name|ordToOffset
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"load failed"
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|super
operator|.
name|asSortedSource
argument_list|()
return|;
block|}
DECL|method|globalNumDocs
specifier|private
name|int
name|globalNumDocs
parameter_list|()
block|{
name|int
name|docs
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|slices
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|docs
operator|+=
name|slices
index|[
name|i
index|]
operator|.
name|length
expr_stmt|;
block|}
return|return
name|docs
return|;
block|}
DECL|method|docBases
specifier|private
name|int
index|[]
name|docBases
parameter_list|()
block|{
name|int
index|[]
name|docBases
init|=
operator|new
name|int
index|[
name|slices
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|slices
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|docBases
index|[
name|i
index|]
operator|=
name|slices
index|[
name|i
index|]
operator|.
name|start
expr_stmt|;
block|}
return|return
name|docBases
return|;
block|}
DECL|method|hasArray
specifier|public
name|boolean
name|hasArray
parameter_list|()
block|{
name|boolean
name|oneRealSource
init|=
literal|false
decl_stmt|;
for|for
control|(
name|DocValuesSlice
name|slice
range|:
name|slices
control|)
block|{
try|try
block|{
name|Source
name|source
init|=
name|slice
operator|.
name|docValues
operator|.
name|getSource
argument_list|()
decl_stmt|;
if|if
condition|(
name|source
operator|instanceof
name|EmptySource
condition|)
block|{
comment|/*              * empty source marks a gap in the array skip if we encounter one              */
continue|continue;
block|}
name|oneRealSource
operator|=
literal|true
expr_stmt|;
if|if
condition|(
operator|!
name|source
operator|.
name|hasArray
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"load failed"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
return|return
name|oneRealSource
return|;
block|}
annotation|@
name|Override
DECL|method|getArray
specifier|public
name|Object
name|getArray
parameter_list|()
block|{
if|if
condition|(
operator|!
name|hasArray
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
try|try
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|componentType
init|=
literal|null
decl_stmt|;
name|Object
index|[]
name|arrays
init|=
operator|new
name|Object
index|[
name|slices
operator|.
name|length
index|]
decl_stmt|;
name|int
name|numDocs
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|slices
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|DocValuesSlice
name|slice
init|=
name|slices
index|[
name|i
index|]
decl_stmt|;
name|Source
name|source
init|=
name|slice
operator|.
name|docValues
operator|.
name|getSource
argument_list|()
decl_stmt|;
name|Object
name|array
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|source
operator|instanceof
name|EmptySource
operator|)
condition|)
block|{
comment|// EmptySource is skipped - marks a gap in the array
name|array
operator|=
name|source
operator|.
name|getArray
argument_list|()
expr_stmt|;
block|}
name|numDocs
operator|+=
name|slice
operator|.
name|length
expr_stmt|;
if|if
condition|(
name|array
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|componentType
operator|==
literal|null
condition|)
block|{
name|componentType
operator|=
name|array
operator|.
name|getClass
argument_list|()
operator|.
name|getComponentType
argument_list|()
expr_stmt|;
block|}
assert|assert
name|componentType
operator|==
name|array
operator|.
name|getClass
argument_list|()
operator|.
name|getComponentType
argument_list|()
assert|;
block|}
name|arrays
index|[
name|i
index|]
operator|=
name|array
expr_stmt|;
block|}
assert|assert
name|componentType
operator|!=
literal|null
assert|;
synchronized|synchronized
init|(
name|this
init|)
block|{
if|if
condition|(
name|cachedArray
operator|!=
literal|null
condition|)
block|{
return|return
name|cachedArray
return|;
block|}
specifier|final
name|Object
name|globalArray
init|=
name|Array
operator|.
name|newInstance
argument_list|(
name|componentType
argument_list|,
name|numDocs
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|slices
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|DocValuesSlice
name|slice
init|=
name|slices
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|arrays
index|[
name|i
index|]
operator|!=
literal|null
condition|)
block|{
assert|assert
name|slice
operator|.
name|length
operator|==
name|Array
operator|.
name|getLength
argument_list|(
name|arrays
index|[
name|i
index|]
argument_list|)
assert|;
name|System
operator|.
name|arraycopy
argument_list|(
name|arrays
index|[
name|i
index|]
argument_list|,
literal|0
argument_list|,
name|globalArray
argument_list|,
name|slice
operator|.
name|start
argument_list|,
name|slice
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|cachedArray
operator|=
name|globalArray
return|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"load failed"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
DECL|class|RecordingBytesRefConsumer
specifier|private
specifier|static
specifier|final
class|class
name|RecordingBytesRefConsumer
implements|implements
name|SortedBytesMergeUtils
operator|.
name|BytesRefConsumer
block|{
DECL|field|PAGED_BYTES_BITS
specifier|private
specifier|final
specifier|static
name|int
name|PAGED_BYTES_BITS
init|=
literal|15
decl_stmt|;
DECL|field|pagedBytes
specifier|final
name|PagedBytes
name|pagedBytes
init|=
operator|new
name|PagedBytes
argument_list|(
name|PAGED_BYTES_BITS
argument_list|)
decl_stmt|;
DECL|field|ordToOffset
name|long
index|[]
name|ordToOffset
decl_stmt|;
DECL|method|RecordingBytesRefConsumer
specifier|public
name|RecordingBytesRefConsumer
parameter_list|(
name|Type
name|type
parameter_list|)
block|{
name|ordToOffset
operator|=
name|type
operator|==
name|Type
operator|.
name|BYTES_VAR_SORTED
condition|?
operator|new
name|long
index|[
literal|2
index|]
else|:
literal|null
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|consume
specifier|public
name|void
name|consume
parameter_list|(
name|BytesRef
name|ref
parameter_list|,
name|int
name|ord
parameter_list|,
name|long
name|offset
parameter_list|)
throws|throws
name|IOException
block|{
name|pagedBytes
operator|.
name|copy
argument_list|(
name|ref
argument_list|)
expr_stmt|;
if|if
condition|(
name|ordToOffset
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|ord
operator|+
literal|1
operator|>=
name|ordToOffset
operator|.
name|length
condition|)
block|{
name|ordToOffset
operator|=
name|ArrayUtil
operator|.
name|grow
argument_list|(
name|ordToOffset
argument_list|,
name|ord
operator|+
literal|2
argument_list|)
expr_stmt|;
block|}
name|ordToOffset
index|[
name|ord
operator|+
literal|1
index|]
operator|=
name|offset
expr_stmt|;
block|}
block|}
block|}
DECL|class|MultiSortedSource
specifier|private
specifier|static
specifier|final
class|class
name|MultiSortedSource
extends|extends
name|SortedSource
block|{
DECL|field|data
specifier|private
specifier|final
name|PagedBytes
operator|.
name|Reader
name|data
decl_stmt|;
DECL|field|docToOrd
specifier|private
specifier|final
name|int
index|[]
name|docToOrd
decl_stmt|;
DECL|field|ordToOffset
specifier|private
specifier|final
name|long
index|[]
name|ordToOffset
decl_stmt|;
DECL|field|size
specifier|private
name|int
name|size
decl_stmt|;
DECL|field|valueCount
specifier|private
name|int
name|valueCount
decl_stmt|;
DECL|method|MultiSortedSource
specifier|public
name|MultiSortedSource
parameter_list|(
name|Type
name|type
parameter_list|,
name|Comparator
argument_list|<
name|BytesRef
argument_list|>
name|comparator
parameter_list|,
name|PagedBytes
name|pagedBytes
parameter_list|,
name|int
name|size
parameter_list|,
name|int
name|numValues
parameter_list|,
name|int
index|[]
name|docToOrd
parameter_list|,
name|long
index|[]
name|ordToOffset
parameter_list|)
block|{
name|super
argument_list|(
name|type
argument_list|,
name|comparator
argument_list|)
expr_stmt|;
name|data
operator|=
name|pagedBytes
operator|.
name|freeze
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|size
operator|=
name|size
expr_stmt|;
name|this
operator|.
name|valueCount
operator|=
name|numValues
expr_stmt|;
name|this
operator|.
name|docToOrd
operator|=
name|docToOrd
expr_stmt|;
name|this
operator|.
name|ordToOffset
operator|=
name|ordToOffset
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|ord
specifier|public
name|int
name|ord
parameter_list|(
name|int
name|docID
parameter_list|)
block|{
return|return
name|docToOrd
index|[
name|docID
index|]
return|;
block|}
annotation|@
name|Override
DECL|method|getByOrd
specifier|public
name|BytesRef
name|getByOrd
parameter_list|(
name|int
name|ord
parameter_list|,
name|BytesRef
name|bytesRef
parameter_list|)
block|{
name|int
name|size
init|=
name|this
operator|.
name|size
decl_stmt|;
name|long
name|offset
init|=
operator|(
name|ord
operator|*
name|size
operator|)
decl_stmt|;
if|if
condition|(
name|ordToOffset
operator|!=
literal|null
condition|)
block|{
name|offset
operator|=
name|ordToOffset
index|[
name|ord
index|]
expr_stmt|;
name|size
operator|=
call|(
name|int
call|)
argument_list|(
name|ordToOffset
index|[
literal|1
operator|+
name|ord
index|]
operator|-
name|offset
argument_list|)
expr_stmt|;
block|}
assert|assert
name|size
operator|>=
literal|0
assert|;
return|return
name|data
operator|.
name|fillSlice
argument_list|(
name|bytesRef
argument_list|,
name|offset
argument_list|,
name|size
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getDocToOrd
specifier|public
name|Reader
name|getDocToOrd
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getValueCount
specifier|public
name|int
name|getValueCount
parameter_list|()
block|{
return|return
name|valueCount
return|;
block|}
block|}
comment|// TODO: this is dup of DocValues.getDefaultSource()?
DECL|class|EmptySource
specifier|private
specifier|static
class|class
name|EmptySource
extends|extends
name|SortedSource
block|{
DECL|method|EmptySource
specifier|public
name|EmptySource
parameter_list|(
name|Type
name|type
parameter_list|)
block|{
name|super
argument_list|(
name|type
argument_list|,
name|BytesRef
operator|.
name|getUTF8SortedAsUnicodeComparator
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getBytes
specifier|public
name|BytesRef
name|getBytes
parameter_list|(
name|int
name|docID
parameter_list|,
name|BytesRef
name|ref
parameter_list|)
block|{
name|ref
operator|.
name|length
operator|=
literal|0
expr_stmt|;
return|return
name|ref
return|;
block|}
annotation|@
name|Override
DECL|method|getFloat
specifier|public
name|double
name|getFloat
parameter_list|(
name|int
name|docID
parameter_list|)
block|{
return|return
literal|0d
return|;
block|}
annotation|@
name|Override
DECL|method|getInt
specifier|public
name|long
name|getInt
parameter_list|(
name|int
name|docID
parameter_list|)
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|asSortedSource
specifier|public
name|SortedSource
name|asSortedSource
parameter_list|()
block|{
if|if
condition|(
name|getType
argument_list|()
operator|==
name|Type
operator|.
name|BYTES_FIXED_SORTED
operator|||
name|getType
argument_list|()
operator|==
name|Type
operator|.
name|BYTES_VAR_SORTED
condition|)
block|{                }
return|return
name|super
operator|.
name|asSortedSource
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|ord
specifier|public
name|int
name|ord
parameter_list|(
name|int
name|docID
parameter_list|)
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|getByOrd
specifier|public
name|BytesRef
name|getByOrd
parameter_list|(
name|int
name|ord
parameter_list|,
name|BytesRef
name|bytesRef
parameter_list|)
block|{
name|bytesRef
operator|.
name|length
operator|=
literal|0
expr_stmt|;
name|bytesRef
operator|.
name|offset
operator|=
literal|0
expr_stmt|;
return|return
name|bytesRef
return|;
block|}
annotation|@
name|Override
DECL|method|getDocToOrd
specifier|public
name|Reader
name|getDocToOrd
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getValueCount
specifier|public
name|int
name|getValueCount
parameter_list|()
block|{
return|return
literal|1
return|;
block|}
block|}
DECL|class|EmptyFixedSource
specifier|private
specifier|static
class|class
name|EmptyFixedSource
extends|extends
name|EmptySource
block|{
DECL|field|valueSize
specifier|private
specifier|final
name|int
name|valueSize
decl_stmt|;
DECL|field|valueArray
specifier|private
specifier|final
name|byte
index|[]
name|valueArray
decl_stmt|;
DECL|method|EmptyFixedSource
specifier|public
name|EmptyFixedSource
parameter_list|(
name|Type
name|type
parameter_list|,
name|int
name|valueSize
parameter_list|)
block|{
name|super
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|this
operator|.
name|valueSize
operator|=
name|valueSize
expr_stmt|;
name|valueArray
operator|=
operator|new
name|byte
index|[
name|valueSize
index|]
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getBytes
specifier|public
name|BytesRef
name|getBytes
parameter_list|(
name|int
name|docID
parameter_list|,
name|BytesRef
name|ref
parameter_list|)
block|{
name|ref
operator|.
name|grow
argument_list|(
name|valueSize
argument_list|)
expr_stmt|;
name|ref
operator|.
name|length
operator|=
name|valueSize
expr_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|ref
operator|.
name|bytes
argument_list|,
name|ref
operator|.
name|offset
argument_list|,
name|ref
operator|.
name|offset
operator|+
name|valueSize
argument_list|,
operator|(
name|byte
operator|)
literal|0
argument_list|)
expr_stmt|;
return|return
name|ref
return|;
block|}
annotation|@
name|Override
DECL|method|getFloat
specifier|public
name|double
name|getFloat
parameter_list|(
name|int
name|docID
parameter_list|)
block|{
return|return
literal|0d
return|;
block|}
annotation|@
name|Override
DECL|method|getInt
specifier|public
name|long
name|getInt
parameter_list|(
name|int
name|docID
parameter_list|)
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|getByOrd
specifier|public
name|BytesRef
name|getByOrd
parameter_list|(
name|int
name|ord
parameter_list|,
name|BytesRef
name|bytesRef
parameter_list|)
block|{
name|bytesRef
operator|.
name|bytes
operator|=
name|valueArray
expr_stmt|;
name|bytesRef
operator|.
name|length
operator|=
name|valueSize
expr_stmt|;
name|bytesRef
operator|.
name|offset
operator|=
literal|0
expr_stmt|;
return|return
name|bytesRef
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|getType
specifier|public
name|Type
name|getType
parameter_list|()
block|{
return|return
name|type
return|;
block|}
annotation|@
name|Override
DECL|method|getValueSize
specifier|public
name|int
name|getValueSize
parameter_list|()
block|{
return|return
name|valueSize
return|;
block|}
annotation|@
name|Override
DECL|method|getDirectSource
specifier|public
name|Source
name|getDirectSource
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|MultiSource
argument_list|(
name|slices
argument_list|,
name|starts
argument_list|,
literal|true
argument_list|,
name|type
argument_list|)
return|;
block|}
block|}
end_class
end_unit
