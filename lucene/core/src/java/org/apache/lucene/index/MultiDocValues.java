begin_unit
begin_package
DECL|package|org.apache.lucene.index
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|MultiTermsEnum
operator|.
name|TermsEnumIndex
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|MultiTermsEnum
operator|.
name|TermsEnumWithSlice
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Bits
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|packed
operator|.
name|AppendingPackedLongBuffer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|packed
operator|.
name|MonotonicAppendingLongBuffer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|packed
operator|.
name|PackedInts
import|;
end_import
begin_comment
comment|/**  * A wrapper for CompositeIndexReader providing access to DocValues.  *   *<p><b>NOTE</b>: for multi readers, you'll get better  * performance by gathering the sub readers using  * {@link IndexReader#getContext()} to get the  * atomic leaves and then operate per-AtomicReader,  * instead of using this class.  *   *<p><b>NOTE</b>: This is very costly.  *  * @lucene.experimental  * @lucene.internal  */
end_comment
begin_class
DECL|class|MultiDocValues
specifier|public
class|class
name|MultiDocValues
block|{
comment|/** No instantiation */
DECL|method|MultiDocValues
specifier|private
name|MultiDocValues
parameter_list|()
block|{}
comment|/** Returns a NumericDocValues for a reader's norms (potentially merging on-the-fly).    *<p>    * This is a slow way to access normalization values. Instead, access them per-segment    * with {@link AtomicReader#getNormValues(String)}    *</p>     */
DECL|method|getNormValues
specifier|public
specifier|static
name|NumericDocValues
name|getNormValues
parameter_list|(
specifier|final
name|IndexReader
name|r
parameter_list|,
specifier|final
name|String
name|field
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|List
argument_list|<
name|AtomicReaderContext
argument_list|>
name|leaves
init|=
name|r
operator|.
name|leaves
argument_list|()
decl_stmt|;
specifier|final
name|int
name|size
init|=
name|leaves
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|size
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|size
operator|==
literal|1
condition|)
block|{
return|return
name|leaves
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|reader
argument_list|()
operator|.
name|getNormValues
argument_list|(
name|field
argument_list|)
return|;
block|}
name|FieldInfo
name|fi
init|=
name|MultiFields
operator|.
name|getMergedFieldInfos
argument_list|(
name|r
argument_list|)
operator|.
name|fieldInfo
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|fi
operator|==
literal|null
operator|||
name|fi
operator|.
name|hasNorms
argument_list|()
operator|==
literal|false
condition|)
block|{
return|return
literal|null
return|;
block|}
name|boolean
name|anyReal
init|=
literal|false
decl_stmt|;
specifier|final
name|NumericDocValues
index|[]
name|values
init|=
operator|new
name|NumericDocValues
index|[
name|size
index|]
decl_stmt|;
specifier|final
name|int
index|[]
name|starts
init|=
operator|new
name|int
index|[
name|size
operator|+
literal|1
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|AtomicReaderContext
name|context
init|=
name|leaves
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|NumericDocValues
name|v
init|=
name|context
operator|.
name|reader
argument_list|()
operator|.
name|getNormValues
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|v
operator|==
literal|null
condition|)
block|{
name|v
operator|=
name|NumericDocValues
operator|.
name|EMPTY
expr_stmt|;
block|}
else|else
block|{
name|anyReal
operator|=
literal|true
expr_stmt|;
block|}
name|values
index|[
name|i
index|]
operator|=
name|v
expr_stmt|;
name|starts
index|[
name|i
index|]
operator|=
name|context
operator|.
name|docBase
expr_stmt|;
block|}
name|starts
index|[
name|size
index|]
operator|=
name|r
operator|.
name|maxDoc
argument_list|()
expr_stmt|;
assert|assert
name|anyReal
assert|;
return|return
operator|new
name|NumericDocValues
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|long
name|get
parameter_list|(
name|int
name|docID
parameter_list|)
block|{
name|int
name|subIndex
init|=
name|ReaderUtil
operator|.
name|subIndex
argument_list|(
name|docID
argument_list|,
name|starts
argument_list|)
decl_stmt|;
return|return
name|values
index|[
name|subIndex
index|]
operator|.
name|get
argument_list|(
name|docID
operator|-
name|starts
index|[
name|subIndex
index|]
argument_list|)
return|;
block|}
block|}
return|;
block|}
comment|/** Returns a NumericDocValues for a reader's docvalues (potentially merging on-the-fly)     *<p>    * This is a slow way to access numeric values. Instead, access them per-segment    * with {@link AtomicReader#getNumericDocValues(String)}    *</p>     * */
DECL|method|getNumericValues
specifier|public
specifier|static
name|NumericDocValues
name|getNumericValues
parameter_list|(
specifier|final
name|IndexReader
name|r
parameter_list|,
specifier|final
name|String
name|field
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|List
argument_list|<
name|AtomicReaderContext
argument_list|>
name|leaves
init|=
name|r
operator|.
name|leaves
argument_list|()
decl_stmt|;
specifier|final
name|int
name|size
init|=
name|leaves
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|size
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|size
operator|==
literal|1
condition|)
block|{
return|return
name|leaves
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|reader
argument_list|()
operator|.
name|getNumericDocValues
argument_list|(
name|field
argument_list|)
return|;
block|}
name|boolean
name|anyReal
init|=
literal|false
decl_stmt|;
specifier|final
name|NumericDocValues
index|[]
name|values
init|=
operator|new
name|NumericDocValues
index|[
name|size
index|]
decl_stmt|;
specifier|final
name|int
index|[]
name|starts
init|=
operator|new
name|int
index|[
name|size
operator|+
literal|1
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|AtomicReaderContext
name|context
init|=
name|leaves
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|NumericDocValues
name|v
init|=
name|context
operator|.
name|reader
argument_list|()
operator|.
name|getNumericDocValues
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|v
operator|==
literal|null
condition|)
block|{
name|v
operator|=
name|NumericDocValues
operator|.
name|EMPTY
expr_stmt|;
block|}
else|else
block|{
name|anyReal
operator|=
literal|true
expr_stmt|;
block|}
name|values
index|[
name|i
index|]
operator|=
name|v
expr_stmt|;
name|starts
index|[
name|i
index|]
operator|=
name|context
operator|.
name|docBase
expr_stmt|;
block|}
name|starts
index|[
name|size
index|]
operator|=
name|r
operator|.
name|maxDoc
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|anyReal
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
operator|new
name|NumericDocValues
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|long
name|get
parameter_list|(
name|int
name|docID
parameter_list|)
block|{
name|int
name|subIndex
init|=
name|ReaderUtil
operator|.
name|subIndex
argument_list|(
name|docID
argument_list|,
name|starts
argument_list|)
decl_stmt|;
return|return
name|values
index|[
name|subIndex
index|]
operator|.
name|get
argument_list|(
name|docID
operator|-
name|starts
index|[
name|subIndex
index|]
argument_list|)
return|;
block|}
block|}
return|;
block|}
block|}
comment|/** Returns a Bits for a reader's docsWithField (potentially merging on-the-fly)     *<p>    * This is a slow way to access this bitset. Instead, access them per-segment    * with {@link AtomicReader#getDocsWithField(String)}    *</p>     * */
DECL|method|getDocsWithField
specifier|public
specifier|static
name|Bits
name|getDocsWithField
parameter_list|(
specifier|final
name|IndexReader
name|r
parameter_list|,
specifier|final
name|String
name|field
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|List
argument_list|<
name|AtomicReaderContext
argument_list|>
name|leaves
init|=
name|r
operator|.
name|leaves
argument_list|()
decl_stmt|;
specifier|final
name|int
name|size
init|=
name|leaves
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|size
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|size
operator|==
literal|1
condition|)
block|{
return|return
name|leaves
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|reader
argument_list|()
operator|.
name|getDocsWithField
argument_list|(
name|field
argument_list|)
return|;
block|}
name|boolean
name|anyReal
init|=
literal|false
decl_stmt|;
name|boolean
name|anyMissing
init|=
literal|false
decl_stmt|;
specifier|final
name|Bits
index|[]
name|values
init|=
operator|new
name|Bits
index|[
name|size
index|]
decl_stmt|;
specifier|final
name|int
index|[]
name|starts
init|=
operator|new
name|int
index|[
name|size
operator|+
literal|1
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|AtomicReaderContext
name|context
init|=
name|leaves
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Bits
name|v
init|=
name|context
operator|.
name|reader
argument_list|()
operator|.
name|getDocsWithField
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|v
operator|==
literal|null
condition|)
block|{
name|v
operator|=
operator|new
name|Bits
operator|.
name|MatchNoBits
argument_list|(
name|context
operator|.
name|reader
argument_list|()
operator|.
name|maxDoc
argument_list|()
argument_list|)
expr_stmt|;
name|anyMissing
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|anyReal
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|v
operator|instanceof
name|Bits
operator|.
name|MatchAllBits
operator|==
literal|false
condition|)
block|{
name|anyMissing
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|values
index|[
name|i
index|]
operator|=
name|v
expr_stmt|;
name|starts
index|[
name|i
index|]
operator|=
name|context
operator|.
name|docBase
expr_stmt|;
block|}
name|starts
index|[
name|size
index|]
operator|=
name|r
operator|.
name|maxDoc
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|anyReal
condition|)
block|{
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|anyMissing
condition|)
block|{
return|return
operator|new
name|Bits
operator|.
name|MatchAllBits
argument_list|(
name|r
operator|.
name|maxDoc
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|MultiBits
argument_list|(
name|values
argument_list|,
name|starts
argument_list|,
literal|false
argument_list|)
return|;
block|}
block|}
comment|/** Returns a BinaryDocValues for a reader's docvalues (potentially merging on-the-fly)    *<p>    * This is a slow way to access binary values. Instead, access them per-segment    * with {@link AtomicReader#getBinaryDocValues(String)}    *</p>      */
DECL|method|getBinaryValues
specifier|public
specifier|static
name|BinaryDocValues
name|getBinaryValues
parameter_list|(
specifier|final
name|IndexReader
name|r
parameter_list|,
specifier|final
name|String
name|field
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|List
argument_list|<
name|AtomicReaderContext
argument_list|>
name|leaves
init|=
name|r
operator|.
name|leaves
argument_list|()
decl_stmt|;
specifier|final
name|int
name|size
init|=
name|leaves
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|size
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|size
operator|==
literal|1
condition|)
block|{
return|return
name|leaves
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|reader
argument_list|()
operator|.
name|getBinaryDocValues
argument_list|(
name|field
argument_list|)
return|;
block|}
name|boolean
name|anyReal
init|=
literal|false
decl_stmt|;
specifier|final
name|BinaryDocValues
index|[]
name|values
init|=
operator|new
name|BinaryDocValues
index|[
name|size
index|]
decl_stmt|;
specifier|final
name|int
index|[]
name|starts
init|=
operator|new
name|int
index|[
name|size
operator|+
literal|1
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|AtomicReaderContext
name|context
init|=
name|leaves
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|BinaryDocValues
name|v
init|=
name|context
operator|.
name|reader
argument_list|()
operator|.
name|getBinaryDocValues
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|v
operator|==
literal|null
condition|)
block|{
name|v
operator|=
name|BinaryDocValues
operator|.
name|EMPTY
expr_stmt|;
block|}
else|else
block|{
name|anyReal
operator|=
literal|true
expr_stmt|;
block|}
name|values
index|[
name|i
index|]
operator|=
name|v
expr_stmt|;
name|starts
index|[
name|i
index|]
operator|=
name|context
operator|.
name|docBase
expr_stmt|;
block|}
name|starts
index|[
name|size
index|]
operator|=
name|r
operator|.
name|maxDoc
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|anyReal
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
operator|new
name|BinaryDocValues
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|get
parameter_list|(
name|int
name|docID
parameter_list|,
name|BytesRef
name|result
parameter_list|)
block|{
name|int
name|subIndex
init|=
name|ReaderUtil
operator|.
name|subIndex
argument_list|(
name|docID
argument_list|,
name|starts
argument_list|)
decl_stmt|;
name|values
index|[
name|subIndex
index|]
operator|.
name|get
argument_list|(
name|docID
operator|-
name|starts
index|[
name|subIndex
index|]
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
comment|/** Returns a SortedDocValues for a reader's docvalues (potentially doing extremely slow things).    *<p>    * This is an extremely slow way to access sorted values. Instead, access them per-segment    * with {@link AtomicReader#getSortedDocValues(String)}    *</p>      */
DECL|method|getSortedValues
specifier|public
specifier|static
name|SortedDocValues
name|getSortedValues
parameter_list|(
specifier|final
name|IndexReader
name|r
parameter_list|,
specifier|final
name|String
name|field
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|List
argument_list|<
name|AtomicReaderContext
argument_list|>
name|leaves
init|=
name|r
operator|.
name|leaves
argument_list|()
decl_stmt|;
specifier|final
name|int
name|size
init|=
name|leaves
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|size
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|size
operator|==
literal|1
condition|)
block|{
return|return
name|leaves
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|reader
argument_list|()
operator|.
name|getSortedDocValues
argument_list|(
name|field
argument_list|)
return|;
block|}
name|boolean
name|anyReal
init|=
literal|false
decl_stmt|;
specifier|final
name|SortedDocValues
index|[]
name|values
init|=
operator|new
name|SortedDocValues
index|[
name|size
index|]
decl_stmt|;
specifier|final
name|int
index|[]
name|starts
init|=
operator|new
name|int
index|[
name|size
operator|+
literal|1
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|AtomicReaderContext
name|context
init|=
name|leaves
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|SortedDocValues
name|v
init|=
name|context
operator|.
name|reader
argument_list|()
operator|.
name|getSortedDocValues
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|v
operator|==
literal|null
condition|)
block|{
name|v
operator|=
name|SortedDocValues
operator|.
name|EMPTY
expr_stmt|;
block|}
else|else
block|{
name|anyReal
operator|=
literal|true
expr_stmt|;
block|}
name|values
index|[
name|i
index|]
operator|=
name|v
expr_stmt|;
name|starts
index|[
name|i
index|]
operator|=
name|context
operator|.
name|docBase
expr_stmt|;
block|}
name|starts
index|[
name|size
index|]
operator|=
name|r
operator|.
name|maxDoc
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|anyReal
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
name|TermsEnum
name|enums
index|[]
init|=
operator|new
name|TermsEnum
index|[
name|values
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|values
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|enums
index|[
name|i
index|]
operator|=
name|values
index|[
name|i
index|]
operator|.
name|termsEnum
argument_list|()
expr_stmt|;
block|}
name|OrdinalMap
name|mapping
init|=
operator|new
name|OrdinalMap
argument_list|(
name|r
operator|.
name|getCoreCacheKey
argument_list|()
argument_list|,
name|enums
argument_list|)
decl_stmt|;
return|return
operator|new
name|MultiSortedDocValues
argument_list|(
name|values
argument_list|,
name|starts
argument_list|,
name|mapping
argument_list|)
return|;
block|}
block|}
comment|/** Returns a SortedSetDocValues for a reader's docvalues (potentially doing extremely slow things).    *<p>    * This is an extremely slow way to access sorted values. Instead, access them per-segment    * with {@link AtomicReader#getSortedSetDocValues(String)}    *</p>      */
DECL|method|getSortedSetValues
specifier|public
specifier|static
name|SortedSetDocValues
name|getSortedSetValues
parameter_list|(
specifier|final
name|IndexReader
name|r
parameter_list|,
specifier|final
name|String
name|field
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|List
argument_list|<
name|AtomicReaderContext
argument_list|>
name|leaves
init|=
name|r
operator|.
name|leaves
argument_list|()
decl_stmt|;
specifier|final
name|int
name|size
init|=
name|leaves
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|size
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|size
operator|==
literal|1
condition|)
block|{
return|return
name|leaves
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|reader
argument_list|()
operator|.
name|getSortedSetDocValues
argument_list|(
name|field
argument_list|)
return|;
block|}
name|boolean
name|anyReal
init|=
literal|false
decl_stmt|;
specifier|final
name|SortedSetDocValues
index|[]
name|values
init|=
operator|new
name|SortedSetDocValues
index|[
name|size
index|]
decl_stmt|;
specifier|final
name|int
index|[]
name|starts
init|=
operator|new
name|int
index|[
name|size
operator|+
literal|1
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|AtomicReaderContext
name|context
init|=
name|leaves
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|SortedSetDocValues
name|v
init|=
name|context
operator|.
name|reader
argument_list|()
operator|.
name|getSortedSetDocValues
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|v
operator|==
literal|null
condition|)
block|{
name|v
operator|=
name|SortedSetDocValues
operator|.
name|EMPTY
expr_stmt|;
block|}
else|else
block|{
name|anyReal
operator|=
literal|true
expr_stmt|;
block|}
name|values
index|[
name|i
index|]
operator|=
name|v
expr_stmt|;
name|starts
index|[
name|i
index|]
operator|=
name|context
operator|.
name|docBase
expr_stmt|;
block|}
name|starts
index|[
name|size
index|]
operator|=
name|r
operator|.
name|maxDoc
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|anyReal
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
name|TermsEnum
name|enums
index|[]
init|=
operator|new
name|TermsEnum
index|[
name|values
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|values
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|enums
index|[
name|i
index|]
operator|=
name|values
index|[
name|i
index|]
operator|.
name|termsEnum
argument_list|()
expr_stmt|;
block|}
name|OrdinalMap
name|mapping
init|=
operator|new
name|OrdinalMap
argument_list|(
name|r
operator|.
name|getCoreCacheKey
argument_list|()
argument_list|,
name|enums
argument_list|)
decl_stmt|;
return|return
operator|new
name|MultiSortedSetDocValues
argument_list|(
name|values
argument_list|,
name|starts
argument_list|,
name|mapping
argument_list|)
return|;
block|}
block|}
comment|/** maps per-segment ordinals to/from global ordinal space */
comment|// TODO: use more efficient packed ints structures?
comment|// TODO: pull this out? its pretty generic (maps between N ord()-enabled TermsEnums)
DECL|class|OrdinalMap
specifier|public
specifier|static
class|class
name|OrdinalMap
block|{
comment|// cache key of whoever asked for this aweful thing
DECL|field|owner
specifier|final
name|Object
name|owner
decl_stmt|;
comment|// globalOrd -> (globalOrd - segmentOrd)
DECL|field|globalOrdDeltas
specifier|final
name|MonotonicAppendingLongBuffer
name|globalOrdDeltas
decl_stmt|;
comment|// globalOrd -> sub index
DECL|field|subIndexes
specifier|final
name|AppendingPackedLongBuffer
name|subIndexes
decl_stmt|;
comment|// segmentOrd -> (globalOrd - segmentOrd)
DECL|field|ordDeltas
specifier|final
name|MonotonicAppendingLongBuffer
name|ordDeltas
index|[]
decl_stmt|;
comment|/**       * Creates an ordinal map that allows mapping ords to/from a merged      * space from<code>subs</code>.      * @param owner a cache key      * @param subs TermsEnums that support {@link TermsEnum#ord()}. They need      *             not be dense (e.g. can be FilteredTermsEnums}.      * @throws IOException if an I/O error occurred.      */
DECL|method|OrdinalMap
specifier|public
name|OrdinalMap
parameter_list|(
name|Object
name|owner
parameter_list|,
name|TermsEnum
name|subs
index|[]
parameter_list|)
throws|throws
name|IOException
block|{
comment|// create the ordinal mappings by pulling a termsenum over each sub's
comment|// unique terms, and walking a multitermsenum over those
name|this
operator|.
name|owner
operator|=
name|owner
expr_stmt|;
name|globalOrdDeltas
operator|=
operator|new
name|MonotonicAppendingLongBuffer
argument_list|(
name|PackedInts
operator|.
name|COMPACT
argument_list|)
expr_stmt|;
name|subIndexes
operator|=
operator|new
name|AppendingPackedLongBuffer
argument_list|(
name|PackedInts
operator|.
name|COMPACT
argument_list|)
expr_stmt|;
name|ordDeltas
operator|=
operator|new
name|MonotonicAppendingLongBuffer
index|[
name|subs
operator|.
name|length
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ordDeltas
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|ordDeltas
index|[
name|i
index|]
operator|=
operator|new
name|MonotonicAppendingLongBuffer
argument_list|()
expr_stmt|;
block|}
name|long
name|segmentOrds
index|[]
init|=
operator|new
name|long
index|[
name|subs
operator|.
name|length
index|]
decl_stmt|;
name|ReaderSlice
name|slices
index|[]
init|=
operator|new
name|ReaderSlice
index|[
name|subs
operator|.
name|length
index|]
decl_stmt|;
name|TermsEnumIndex
name|indexes
index|[]
init|=
operator|new
name|TermsEnumIndex
index|[
name|slices
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|slices
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|slices
index|[
name|i
index|]
operator|=
operator|new
name|ReaderSlice
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|indexes
index|[
name|i
index|]
operator|=
operator|new
name|TermsEnumIndex
argument_list|(
name|subs
index|[
name|i
index|]
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
name|MultiTermsEnum
name|mte
init|=
operator|new
name|MultiTermsEnum
argument_list|(
name|slices
argument_list|)
decl_stmt|;
name|mte
operator|.
name|reset
argument_list|(
name|indexes
argument_list|)
expr_stmt|;
name|long
name|globalOrd
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|mte
operator|.
name|next
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|TermsEnumWithSlice
name|matches
index|[]
init|=
name|mte
operator|.
name|getMatchArray
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|mte
operator|.
name|getMatchCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|int
name|subIndex
init|=
name|matches
index|[
name|i
index|]
operator|.
name|index
decl_stmt|;
name|long
name|segmentOrd
init|=
name|matches
index|[
name|i
index|]
operator|.
name|terms
operator|.
name|ord
argument_list|()
decl_stmt|;
name|long
name|delta
init|=
name|globalOrd
operator|-
name|segmentOrd
decl_stmt|;
comment|// for each unique term, just mark the first subindex/delta where it occurs
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
name|subIndexes
operator|.
name|add
argument_list|(
name|subIndex
argument_list|)
expr_stmt|;
name|globalOrdDeltas
operator|.
name|add
argument_list|(
name|delta
argument_list|)
expr_stmt|;
block|}
comment|// for each per-segment ord, map it back to the global term.
while|while
condition|(
name|segmentOrds
index|[
name|subIndex
index|]
operator|<=
name|segmentOrd
condition|)
block|{
name|ordDeltas
index|[
name|subIndex
index|]
operator|.
name|add
argument_list|(
name|delta
argument_list|)
expr_stmt|;
name|segmentOrds
index|[
name|subIndex
index|]
operator|++
expr_stmt|;
block|}
block|}
name|globalOrd
operator|++
expr_stmt|;
block|}
name|subIndexes
operator|.
name|freeze
argument_list|()
expr_stmt|;
name|globalOrdDeltas
operator|.
name|freeze
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ordDeltas
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|ordDeltas
index|[
name|i
index|]
operator|.
name|freeze
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**       * Given a segment number and segment ordinal, returns      * the corresponding global ordinal.      */
DECL|method|getGlobalOrd
specifier|public
name|long
name|getGlobalOrd
parameter_list|(
name|int
name|subIndex
parameter_list|,
name|long
name|segmentOrd
parameter_list|)
block|{
return|return
name|segmentOrd
operator|+
name|ordDeltas
index|[
name|subIndex
index|]
operator|.
name|get
argument_list|(
name|segmentOrd
argument_list|)
return|;
block|}
comment|/**      * Given a segment number and global ordinal, returns      * the corresponding segment ordinal.      */
DECL|method|getSegmentOrd
specifier|public
name|long
name|getSegmentOrd
parameter_list|(
name|int
name|subIndex
parameter_list|,
name|long
name|globalOrd
parameter_list|)
block|{
return|return
name|globalOrd
operator|-
name|globalOrdDeltas
operator|.
name|get
argument_list|(
name|globalOrd
argument_list|)
return|;
block|}
comment|/**       * Given a global ordinal, returns the index of the first      * sub that contains this term.      */
DECL|method|getSegmentNumber
specifier|public
name|int
name|getSegmentNumber
parameter_list|(
name|long
name|globalOrd
parameter_list|)
block|{
return|return
operator|(
name|int
operator|)
name|subIndexes
operator|.
name|get
argument_list|(
name|globalOrd
argument_list|)
return|;
block|}
comment|/**      * Returns the total number of unique terms in global ord space.      */
DECL|method|getValueCount
specifier|public
name|long
name|getValueCount
parameter_list|()
block|{
return|return
name|globalOrdDeltas
operator|.
name|size
argument_list|()
return|;
block|}
comment|/**       * Returns total byte size used by this ordinal map.       */
DECL|method|ramBytesUsed
specifier|public
name|long
name|ramBytesUsed
parameter_list|()
block|{
name|long
name|size
init|=
name|globalOrdDeltas
operator|.
name|ramBytesUsed
argument_list|()
operator|+
name|subIndexes
operator|.
name|ramBytesUsed
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ordDeltas
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|size
operator|+=
name|ordDeltas
index|[
name|i
index|]
operator|.
name|ramBytesUsed
argument_list|()
expr_stmt|;
block|}
return|return
name|size
return|;
block|}
block|}
comment|/**     * Implements SortedDocValues over n subs, using an OrdinalMap    * @lucene.internal    */
DECL|class|MultiSortedDocValues
specifier|public
specifier|static
class|class
name|MultiSortedDocValues
extends|extends
name|SortedDocValues
block|{
comment|/** docbase for each leaf: parallel with {@link #values} */
DECL|field|docStarts
specifier|public
specifier|final
name|int
name|docStarts
index|[]
decl_stmt|;
comment|/** leaf values */
DECL|field|values
specifier|public
specifier|final
name|SortedDocValues
name|values
index|[]
decl_stmt|;
comment|/** ordinal map mapping ords from<code>values</code> to global ord space */
DECL|field|mapping
specifier|public
specifier|final
name|OrdinalMap
name|mapping
decl_stmt|;
comment|/** Creates a new MultiSortedDocValues over<code>values</code> */
DECL|method|MultiSortedDocValues
name|MultiSortedDocValues
parameter_list|(
name|SortedDocValues
name|values
index|[]
parameter_list|,
name|int
name|docStarts
index|[]
parameter_list|,
name|OrdinalMap
name|mapping
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|values
operator|.
name|length
operator|==
name|mapping
operator|.
name|ordDeltas
operator|.
name|length
assert|;
assert|assert
name|docStarts
operator|.
name|length
operator|==
name|values
operator|.
name|length
operator|+
literal|1
assert|;
name|this
operator|.
name|values
operator|=
name|values
expr_stmt|;
name|this
operator|.
name|docStarts
operator|=
name|docStarts
expr_stmt|;
name|this
operator|.
name|mapping
operator|=
name|mapping
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getOrd
specifier|public
name|int
name|getOrd
parameter_list|(
name|int
name|docID
parameter_list|)
block|{
name|int
name|subIndex
init|=
name|ReaderUtil
operator|.
name|subIndex
argument_list|(
name|docID
argument_list|,
name|docStarts
argument_list|)
decl_stmt|;
name|int
name|segmentOrd
init|=
name|values
index|[
name|subIndex
index|]
operator|.
name|getOrd
argument_list|(
name|docID
operator|-
name|docStarts
index|[
name|subIndex
index|]
argument_list|)
decl_stmt|;
return|return
operator|(
name|int
operator|)
name|mapping
operator|.
name|getGlobalOrd
argument_list|(
name|subIndex
argument_list|,
name|segmentOrd
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|lookupOrd
specifier|public
name|void
name|lookupOrd
parameter_list|(
name|int
name|ord
parameter_list|,
name|BytesRef
name|result
parameter_list|)
block|{
name|int
name|subIndex
init|=
name|mapping
operator|.
name|getSegmentNumber
argument_list|(
name|ord
argument_list|)
decl_stmt|;
name|int
name|segmentOrd
init|=
operator|(
name|int
operator|)
name|mapping
operator|.
name|getSegmentOrd
argument_list|(
name|subIndex
argument_list|,
name|ord
argument_list|)
decl_stmt|;
name|values
index|[
name|subIndex
index|]
operator|.
name|lookupOrd
argument_list|(
name|segmentOrd
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getValueCount
specifier|public
name|int
name|getValueCount
parameter_list|()
block|{
return|return
operator|(
name|int
operator|)
name|mapping
operator|.
name|getValueCount
argument_list|()
return|;
block|}
block|}
comment|/**     * Implements MultiSortedSetDocValues over n subs, using an OrdinalMap     * @lucene.internal    */
DECL|class|MultiSortedSetDocValues
specifier|public
specifier|static
class|class
name|MultiSortedSetDocValues
extends|extends
name|SortedSetDocValues
block|{
comment|/** docbase for each leaf: parallel with {@link #values} */
DECL|field|docStarts
specifier|public
specifier|final
name|int
name|docStarts
index|[]
decl_stmt|;
comment|/** leaf values */
DECL|field|values
specifier|public
specifier|final
name|SortedSetDocValues
name|values
index|[]
decl_stmt|;
comment|/** ordinal map mapping ords from<code>values</code> to global ord space */
DECL|field|mapping
specifier|public
specifier|final
name|OrdinalMap
name|mapping
decl_stmt|;
DECL|field|currentSubIndex
name|int
name|currentSubIndex
decl_stmt|;
comment|/** Creates a new MultiSortedSetDocValues over<code>values</code> */
DECL|method|MultiSortedSetDocValues
name|MultiSortedSetDocValues
parameter_list|(
name|SortedSetDocValues
name|values
index|[]
parameter_list|,
name|int
name|docStarts
index|[]
parameter_list|,
name|OrdinalMap
name|mapping
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|values
operator|.
name|length
operator|==
name|mapping
operator|.
name|ordDeltas
operator|.
name|length
assert|;
assert|assert
name|docStarts
operator|.
name|length
operator|==
name|values
operator|.
name|length
operator|+
literal|1
assert|;
name|this
operator|.
name|values
operator|=
name|values
expr_stmt|;
name|this
operator|.
name|docStarts
operator|=
name|docStarts
expr_stmt|;
name|this
operator|.
name|mapping
operator|=
name|mapping
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|nextOrd
specifier|public
name|long
name|nextOrd
parameter_list|()
block|{
name|long
name|segmentOrd
init|=
name|values
index|[
name|currentSubIndex
index|]
operator|.
name|nextOrd
argument_list|()
decl_stmt|;
if|if
condition|(
name|segmentOrd
operator|==
name|NO_MORE_ORDS
condition|)
block|{
return|return
name|segmentOrd
return|;
block|}
else|else
block|{
return|return
name|mapping
operator|.
name|getGlobalOrd
argument_list|(
name|currentSubIndex
argument_list|,
name|segmentOrd
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|setDocument
specifier|public
name|void
name|setDocument
parameter_list|(
name|int
name|docID
parameter_list|)
block|{
name|currentSubIndex
operator|=
name|ReaderUtil
operator|.
name|subIndex
argument_list|(
name|docID
argument_list|,
name|docStarts
argument_list|)
expr_stmt|;
name|values
index|[
name|currentSubIndex
index|]
operator|.
name|setDocument
argument_list|(
name|docID
operator|-
name|docStarts
index|[
name|currentSubIndex
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|lookupOrd
specifier|public
name|void
name|lookupOrd
parameter_list|(
name|long
name|ord
parameter_list|,
name|BytesRef
name|result
parameter_list|)
block|{
name|int
name|subIndex
init|=
name|mapping
operator|.
name|getSegmentNumber
argument_list|(
name|ord
argument_list|)
decl_stmt|;
name|long
name|segmentOrd
init|=
name|mapping
operator|.
name|getSegmentOrd
argument_list|(
name|subIndex
argument_list|,
name|ord
argument_list|)
decl_stmt|;
name|values
index|[
name|subIndex
index|]
operator|.
name|lookupOrd
argument_list|(
name|segmentOrd
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getValueCount
specifier|public
name|long
name|getValueCount
parameter_list|()
block|{
return|return
name|mapping
operator|.
name|getValueCount
argument_list|()
return|;
block|}
block|}
block|}
end_class
end_unit
