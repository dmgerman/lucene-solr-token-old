begin_unit
begin_package
DECL|package|org.apache.lucene.codecs.lucene50
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|lucene50
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|CodecUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|DocValuesFormat
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|FieldInfosFormat
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|CorruptIndexException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|FieldInfo
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|FieldInfos
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexFileNames
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SegmentInfo
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|FieldInfo
operator|.
name|DocValuesType
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|FieldInfo
operator|.
name|IndexOptions
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|ChecksumIndexInput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|DataOutput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IOContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexInput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexOutput
import|;
end_import
begin_comment
comment|/**  * Lucene 5.0 Field Infos format.  *<p>  *<p>Field names are stored in the field info file, with suffix<tt>.fnm</tt>.</p>  *<p>FieldInfos (.fnm) --&gt; Header,FieldsCount,&lt;FieldName,FieldNumber,  * FieldBits,DocValuesBits,DocValuesGen,Attributes&gt;<sup>FieldsCount</sup>,Footer</p>  *<p>Data types:  *<ul>  *<li>Header --&gt; {@link CodecUtil#checkSegmentHeader SegmentHeader}</li>  *<li>FieldsCount --&gt; {@link DataOutput#writeVInt VInt}</li>  *<li>FieldName --&gt; {@link DataOutput#writeString String}</li>  *<li>FieldBits, DocValuesBits --&gt; {@link DataOutput#writeByte Byte}</li>  *<li>FieldNumber --&gt; {@link DataOutput#writeInt VInt}</li>  *<li>Attributes --&gt; {@link DataOutput#writeStringStringMap Map&lt;String,String&gt;}</li>  *<li>DocValuesGen --&gt; {@link DataOutput#writeLong(long) Int64}</li>  *<li>Footer --&gt; {@link CodecUtil#writeFooter CodecFooter}</li>  *</ul>  *</p>  * Field Descriptions:  *<ul>  *<li>FieldsCount: the number of fields in this file.</li>  *<li>FieldName: name of the field as a UTF-8 String.</li>  *<li>FieldNumber: the field's number. Note that unlike previous versions of  *       Lucene, the fields are not numbered implicitly by their order in the  *       file, instead explicitly.</li>  *<li>FieldBits: a byte containing field options.  *<ul>  *<li>The low-order bit is one for indexed fields, and zero for non-indexed  *             fields.</li>  *<li>The second lowest-order bit is one for fields that have term vectors  *             stored, and zero for fields without term vectors.</li>  *<li>If the third lowest order-bit is set (0x4), offsets are stored into  *             the postings list in addition to positions.</li>  *<li>Fourth bit is unused.</li>  *<li>If the fifth lowest-order bit is set (0x10), norms are omitted for the  *             indexed field.</li>  *<li>If the sixth lowest-order bit is set (0x20), payloads are stored for the  *             indexed field.</li>  *<li>If the seventh lowest-order bit is set (0x40), term frequencies and  *             positions omitted for the indexed field.</li>  *<li>If the eighth lowest-order bit is set (0x80), positions are omitted for the  *             indexed field.</li>  *</ul>  *</li>  *<li>DocValuesBits: a byte containing per-document value types. The type  *        recorded as two four-bit integers, with the high-order bits representing  *<code>norms</code> options, and the low-order bits representing   *        {@code DocValues} options. Each four-bit integer can be decoded as such:  *<ul>  *<li>0: no DocValues for this field.</li>  *<li>1: NumericDocValues. ({@link DocValuesType#NUMERIC})</li>  *<li>2: BinaryDocValues. ({@code DocValuesType#BINARY})</li>  *<li>3: SortedDocValues. ({@code DocValuesType#SORTED})</li>  *</ul>  *</li>  *<li>DocValuesGen is the generation count of the field's DocValues. If this is -1,  *        there are no DocValues updates to that field. Anything above zero means there   *        are updates stored by {@link DocValuesFormat}.</li>  *<li>Attributes: a key-value map of codec-private attributes.</li>  *</ul>  *  * @lucene.experimental  */
end_comment
begin_class
DECL|class|Lucene50FieldInfosFormat
specifier|public
specifier|final
class|class
name|Lucene50FieldInfosFormat
extends|extends
name|FieldInfosFormat
block|{
comment|/** Sole constructor. */
DECL|method|Lucene50FieldInfosFormat
specifier|public
name|Lucene50FieldInfosFormat
parameter_list|()
block|{   }
annotation|@
name|Override
DECL|method|read
specifier|public
name|FieldInfos
name|read
parameter_list|(
name|Directory
name|directory
parameter_list|,
name|SegmentInfo
name|segmentInfo
parameter_list|,
name|String
name|segmentSuffix
parameter_list|,
name|IOContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|String
name|fileName
init|=
name|IndexFileNames
operator|.
name|segmentFileName
argument_list|(
name|segmentInfo
operator|.
name|name
argument_list|,
name|segmentSuffix
argument_list|,
name|Lucene50FieldInfosFormat
operator|.
name|EXTENSION
argument_list|)
decl_stmt|;
try|try
init|(
name|ChecksumIndexInput
name|input
init|=
name|directory
operator|.
name|openChecksumInput
argument_list|(
name|fileName
argument_list|,
name|context
argument_list|)
init|)
block|{
name|Throwable
name|priorE
init|=
literal|null
decl_stmt|;
name|FieldInfo
name|infos
index|[]
init|=
literal|null
decl_stmt|;
try|try
block|{
name|CodecUtil
operator|.
name|checkSegmentHeader
argument_list|(
name|input
argument_list|,
name|Lucene50FieldInfosFormat
operator|.
name|CODEC_NAME
argument_list|,
name|Lucene50FieldInfosFormat
operator|.
name|FORMAT_START
argument_list|,
name|Lucene50FieldInfosFormat
operator|.
name|FORMAT_CURRENT
argument_list|,
name|segmentInfo
operator|.
name|getId
argument_list|()
argument_list|,
name|segmentSuffix
argument_list|)
expr_stmt|;
specifier|final
name|int
name|size
init|=
name|input
operator|.
name|readVInt
argument_list|()
decl_stmt|;
comment|//read in the size
name|infos
operator|=
operator|new
name|FieldInfo
index|[
name|size
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|String
name|name
init|=
name|input
operator|.
name|readString
argument_list|()
decl_stmt|;
specifier|final
name|int
name|fieldNumber
init|=
name|input
operator|.
name|readVInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|fieldNumber
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|CorruptIndexException
argument_list|(
literal|"invalid field number for field: "
operator|+
name|name
operator|+
literal|", fieldNumber="
operator|+
name|fieldNumber
argument_list|,
name|input
argument_list|)
throw|;
block|}
name|byte
name|bits
init|=
name|input
operator|.
name|readByte
argument_list|()
decl_stmt|;
name|boolean
name|isIndexed
init|=
operator|(
name|bits
operator|&
name|Lucene50FieldInfosFormat
operator|.
name|IS_INDEXED
operator|)
operator|!=
literal|0
decl_stmt|;
name|boolean
name|storeTermVector
init|=
operator|(
name|bits
operator|&
name|Lucene50FieldInfosFormat
operator|.
name|STORE_TERMVECTOR
operator|)
operator|!=
literal|0
decl_stmt|;
name|boolean
name|omitNorms
init|=
operator|(
name|bits
operator|&
name|Lucene50FieldInfosFormat
operator|.
name|OMIT_NORMS
operator|)
operator|!=
literal|0
decl_stmt|;
name|boolean
name|storePayloads
init|=
operator|(
name|bits
operator|&
name|Lucene50FieldInfosFormat
operator|.
name|STORE_PAYLOADS
operator|)
operator|!=
literal|0
decl_stmt|;
specifier|final
name|IndexOptions
name|indexOptions
decl_stmt|;
if|if
condition|(
operator|!
name|isIndexed
condition|)
block|{
name|indexOptions
operator|=
literal|null
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|bits
operator|&
name|Lucene50FieldInfosFormat
operator|.
name|OMIT_TERM_FREQ_AND_POSITIONS
operator|)
operator|!=
literal|0
condition|)
block|{
name|indexOptions
operator|=
name|IndexOptions
operator|.
name|DOCS_ONLY
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|bits
operator|&
name|Lucene50FieldInfosFormat
operator|.
name|OMIT_POSITIONS
operator|)
operator|!=
literal|0
condition|)
block|{
name|indexOptions
operator|=
name|IndexOptions
operator|.
name|DOCS_AND_FREQS
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|bits
operator|&
name|Lucene50FieldInfosFormat
operator|.
name|STORE_OFFSETS_IN_POSTINGS
operator|)
operator|!=
literal|0
condition|)
block|{
name|indexOptions
operator|=
name|IndexOptions
operator|.
name|DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS
expr_stmt|;
block|}
else|else
block|{
name|indexOptions
operator|=
name|IndexOptions
operator|.
name|DOCS_AND_FREQS_AND_POSITIONS
expr_stmt|;
block|}
comment|// DV Types are packed in one byte
name|byte
name|val
init|=
name|input
operator|.
name|readByte
argument_list|()
decl_stmt|;
specifier|final
name|DocValuesType
name|docValuesType
init|=
name|getDocValuesType
argument_list|(
name|input
argument_list|,
call|(
name|byte
call|)
argument_list|(
name|val
operator|&
literal|0x0F
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|DocValuesType
name|normsType
init|=
name|getDocValuesType
argument_list|(
name|input
argument_list|,
call|(
name|byte
call|)
argument_list|(
operator|(
name|val
operator|>>>
literal|4
operator|)
operator|&
literal|0x0F
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|long
name|dvGen
init|=
name|input
operator|.
name|readLong
argument_list|()
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|attributes
init|=
name|input
operator|.
name|readStringStringMap
argument_list|()
decl_stmt|;
try|try
block|{
name|infos
index|[
name|i
index|]
operator|=
operator|new
name|FieldInfo
argument_list|(
name|name
argument_list|,
name|isIndexed
argument_list|,
name|fieldNumber
argument_list|,
name|storeTermVector
argument_list|,
name|omitNorms
argument_list|,
name|storePayloads
argument_list|,
name|indexOptions
argument_list|,
name|docValuesType
argument_list|,
name|normsType
argument_list|,
name|dvGen
argument_list|,
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|attributes
argument_list|)
argument_list|)
expr_stmt|;
name|infos
index|[
name|i
index|]
operator|.
name|checkConsistency
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|CorruptIndexException
argument_list|(
literal|"invalid fieldinfo for field: "
operator|+
name|name
operator|+
literal|", fieldNumber="
operator|+
name|fieldNumber
argument_list|,
name|input
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|exception
parameter_list|)
block|{
name|priorE
operator|=
name|exception
expr_stmt|;
block|}
finally|finally
block|{
name|CodecUtil
operator|.
name|checkFooter
argument_list|(
name|input
argument_list|,
name|priorE
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|FieldInfos
argument_list|(
name|infos
argument_list|)
return|;
block|}
block|}
DECL|method|getDocValuesType
specifier|private
specifier|static
name|DocValuesType
name|getDocValuesType
parameter_list|(
name|IndexInput
name|input
parameter_list|,
name|byte
name|b
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|b
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|b
operator|==
literal|1
condition|)
block|{
return|return
name|DocValuesType
operator|.
name|NUMERIC
return|;
block|}
elseif|else
if|if
condition|(
name|b
operator|==
literal|2
condition|)
block|{
return|return
name|DocValuesType
operator|.
name|BINARY
return|;
block|}
elseif|else
if|if
condition|(
name|b
operator|==
literal|3
condition|)
block|{
return|return
name|DocValuesType
operator|.
name|SORTED
return|;
block|}
elseif|else
if|if
condition|(
name|b
operator|==
literal|4
condition|)
block|{
return|return
name|DocValuesType
operator|.
name|SORTED_SET
return|;
block|}
elseif|else
if|if
condition|(
name|b
operator|==
literal|5
condition|)
block|{
return|return
name|DocValuesType
operator|.
name|SORTED_NUMERIC
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|CorruptIndexException
argument_list|(
literal|"invalid docvalues byte: "
operator|+
name|b
argument_list|,
name|input
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|write
specifier|public
name|void
name|write
parameter_list|(
name|Directory
name|directory
parameter_list|,
name|SegmentInfo
name|segmentInfo
parameter_list|,
name|String
name|segmentSuffix
parameter_list|,
name|FieldInfos
name|infos
parameter_list|,
name|IOContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|String
name|fileName
init|=
name|IndexFileNames
operator|.
name|segmentFileName
argument_list|(
name|segmentInfo
operator|.
name|name
argument_list|,
name|segmentSuffix
argument_list|,
name|Lucene50FieldInfosFormat
operator|.
name|EXTENSION
argument_list|)
decl_stmt|;
try|try
init|(
name|IndexOutput
name|output
init|=
name|directory
operator|.
name|createOutput
argument_list|(
name|fileName
argument_list|,
name|context
argument_list|)
init|)
block|{
name|CodecUtil
operator|.
name|writeSegmentHeader
argument_list|(
name|output
argument_list|,
name|Lucene50FieldInfosFormat
operator|.
name|CODEC_NAME
argument_list|,
name|Lucene50FieldInfosFormat
operator|.
name|FORMAT_CURRENT
argument_list|,
name|segmentInfo
operator|.
name|getId
argument_list|()
argument_list|,
name|segmentSuffix
argument_list|)
expr_stmt|;
name|output
operator|.
name|writeVInt
argument_list|(
name|infos
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|FieldInfo
name|fi
range|:
name|infos
control|)
block|{
name|fi
operator|.
name|checkConsistency
argument_list|()
expr_stmt|;
name|IndexOptions
name|indexOptions
init|=
name|fi
operator|.
name|getIndexOptions
argument_list|()
decl_stmt|;
name|byte
name|bits
init|=
literal|0x0
decl_stmt|;
if|if
condition|(
name|fi
operator|.
name|hasVectors
argument_list|()
condition|)
name|bits
operator||=
name|Lucene50FieldInfosFormat
operator|.
name|STORE_TERMVECTOR
expr_stmt|;
if|if
condition|(
name|fi
operator|.
name|omitsNorms
argument_list|()
condition|)
name|bits
operator||=
name|Lucene50FieldInfosFormat
operator|.
name|OMIT_NORMS
expr_stmt|;
if|if
condition|(
name|fi
operator|.
name|hasPayloads
argument_list|()
condition|)
name|bits
operator||=
name|Lucene50FieldInfosFormat
operator|.
name|STORE_PAYLOADS
expr_stmt|;
if|if
condition|(
name|fi
operator|.
name|isIndexed
argument_list|()
condition|)
block|{
name|bits
operator||=
name|Lucene50FieldInfosFormat
operator|.
name|IS_INDEXED
expr_stmt|;
assert|assert
name|indexOptions
operator|.
name|compareTo
argument_list|(
name|IndexOptions
operator|.
name|DOCS_AND_FREQS_AND_POSITIONS
argument_list|)
operator|>=
literal|0
operator|||
operator|!
name|fi
operator|.
name|hasPayloads
argument_list|()
assert|;
if|if
condition|(
name|indexOptions
operator|==
name|IndexOptions
operator|.
name|DOCS_ONLY
condition|)
block|{
name|bits
operator||=
name|Lucene50FieldInfosFormat
operator|.
name|OMIT_TERM_FREQ_AND_POSITIONS
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|indexOptions
operator|==
name|IndexOptions
operator|.
name|DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS
condition|)
block|{
name|bits
operator||=
name|Lucene50FieldInfosFormat
operator|.
name|STORE_OFFSETS_IN_POSTINGS
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|indexOptions
operator|==
name|IndexOptions
operator|.
name|DOCS_AND_FREQS
condition|)
block|{
name|bits
operator||=
name|Lucene50FieldInfosFormat
operator|.
name|OMIT_POSITIONS
expr_stmt|;
block|}
block|}
name|output
operator|.
name|writeString
argument_list|(
name|fi
operator|.
name|name
argument_list|)
expr_stmt|;
name|output
operator|.
name|writeVInt
argument_list|(
name|fi
operator|.
name|number
argument_list|)
expr_stmt|;
name|output
operator|.
name|writeByte
argument_list|(
name|bits
argument_list|)
expr_stmt|;
comment|// pack the DV types in one byte
specifier|final
name|byte
name|dv
init|=
name|docValuesByte
argument_list|(
name|fi
operator|.
name|getDocValuesType
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|byte
name|nrm
init|=
name|docValuesByte
argument_list|(
name|fi
operator|.
name|getNormType
argument_list|()
argument_list|)
decl_stmt|;
assert|assert
operator|(
name|dv
operator|&
operator|(
operator|~
literal|0xF
operator|)
operator|)
operator|==
literal|0
operator|&&
operator|(
name|nrm
operator|&
operator|(
operator|~
literal|0x0F
operator|)
operator|)
operator|==
literal|0
assert|;
name|byte
name|val
init|=
call|(
name|byte
call|)
argument_list|(
literal|0xff
operator|&
operator|(
operator|(
name|nrm
operator|<<
literal|4
operator|)
operator||
name|dv
operator|)
argument_list|)
decl_stmt|;
name|output
operator|.
name|writeByte
argument_list|(
name|val
argument_list|)
expr_stmt|;
name|output
operator|.
name|writeLong
argument_list|(
name|fi
operator|.
name|getDocValuesGen
argument_list|()
argument_list|)
expr_stmt|;
name|output
operator|.
name|writeStringStringMap
argument_list|(
name|fi
operator|.
name|attributes
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|CodecUtil
operator|.
name|writeFooter
argument_list|(
name|output
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|docValuesByte
specifier|private
specifier|static
name|byte
name|docValuesByte
parameter_list|(
name|DocValuesType
name|type
parameter_list|)
block|{
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
return|return
literal|0
return|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|DocValuesType
operator|.
name|NUMERIC
condition|)
block|{
return|return
literal|1
return|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|DocValuesType
operator|.
name|BINARY
condition|)
block|{
return|return
literal|2
return|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|DocValuesType
operator|.
name|SORTED
condition|)
block|{
return|return
literal|3
return|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|DocValuesType
operator|.
name|SORTED_SET
condition|)
block|{
return|return
literal|4
return|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|DocValuesType
operator|.
name|SORTED_NUMERIC
condition|)
block|{
return|return
literal|5
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|AssertionError
argument_list|()
throw|;
block|}
block|}
comment|/** Extension of field infos */
DECL|field|EXTENSION
specifier|static
specifier|final
name|String
name|EXTENSION
init|=
literal|"fnm"
decl_stmt|;
comment|// Codec header
DECL|field|CODEC_NAME
specifier|static
specifier|final
name|String
name|CODEC_NAME
init|=
literal|"Lucene50FieldInfos"
decl_stmt|;
DECL|field|FORMAT_START
specifier|static
specifier|final
name|int
name|FORMAT_START
init|=
literal|0
decl_stmt|;
DECL|field|FORMAT_CURRENT
specifier|static
specifier|final
name|int
name|FORMAT_CURRENT
init|=
name|FORMAT_START
decl_stmt|;
comment|// Field flags
DECL|field|IS_INDEXED
specifier|static
specifier|final
name|byte
name|IS_INDEXED
init|=
literal|0x1
decl_stmt|;
DECL|field|STORE_TERMVECTOR
specifier|static
specifier|final
name|byte
name|STORE_TERMVECTOR
init|=
literal|0x2
decl_stmt|;
DECL|field|STORE_OFFSETS_IN_POSTINGS
specifier|static
specifier|final
name|byte
name|STORE_OFFSETS_IN_POSTINGS
init|=
literal|0x4
decl_stmt|;
DECL|field|OMIT_NORMS
specifier|static
specifier|final
name|byte
name|OMIT_NORMS
init|=
literal|0x10
decl_stmt|;
DECL|field|STORE_PAYLOADS
specifier|static
specifier|final
name|byte
name|STORE_PAYLOADS
init|=
literal|0x20
decl_stmt|;
DECL|field|OMIT_TERM_FREQ_AND_POSITIONS
specifier|static
specifier|final
name|byte
name|OMIT_TERM_FREQ_AND_POSITIONS
init|=
literal|0x40
decl_stmt|;
DECL|field|OMIT_POSITIONS
specifier|static
specifier|final
name|byte
name|OMIT_POSITIONS
init|=
operator|-
literal|128
decl_stmt|;
block|}
end_class
end_unit
