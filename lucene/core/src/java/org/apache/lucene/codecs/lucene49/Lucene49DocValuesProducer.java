begin_unit
begin_package
DECL|package|org.apache.lucene.codecs.lucene49
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|lucene49
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|lucene49
operator|.
name|Lucene49DocValuesConsumer
operator|.
name|BINARY_FIXED_UNCOMPRESSED
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|lucene49
operator|.
name|Lucene49DocValuesConsumer
operator|.
name|BINARY_PREFIX_COMPRESSED
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|lucene49
operator|.
name|Lucene49DocValuesConsumer
operator|.
name|BINARY_VARIABLE_UNCOMPRESSED
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|lucene49
operator|.
name|Lucene49DocValuesConsumer
operator|.
name|DELTA_COMPRESSED
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|lucene49
operator|.
name|Lucene49DocValuesConsumer
operator|.
name|GCD_COMPRESSED
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|lucene49
operator|.
name|Lucene49DocValuesConsumer
operator|.
name|MONOTONIC_COMPRESSED
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|lucene49
operator|.
name|Lucene49DocValuesConsumer
operator|.
name|SORTED_SINGLE_VALUED
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|lucene49
operator|.
name|Lucene49DocValuesConsumer
operator|.
name|SORTED_WITH_ADDRESSES
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|lucene49
operator|.
name|Lucene49DocValuesConsumer
operator|.
name|TABLE_COMPRESSED
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import
begin_comment
comment|// javadocs
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|CodecUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|DocValuesProducer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|BinaryDocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|CorruptIndexException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DocsAndPositionsEnum
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DocsEnum
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|FieldInfo
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|FieldInfos
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexFileNames
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|NumericDocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|RandomAccessOrds
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SegmentReadState
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SortedDocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SortedNumericDocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SortedSetDocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|TermsEnum
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|TermsEnum
operator|.
name|SeekStatus
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|ChecksumIndexInput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexInput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|RandomAccessInput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Bits
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LongValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|RamUsageEstimator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|packed
operator|.
name|DirectReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|packed
operator|.
name|MonotonicBlockPackedReader
import|;
end_import
begin_comment
comment|/** reader for {@link Lucene49DocValuesFormat} */
end_comment
begin_class
DECL|class|Lucene49DocValuesProducer
class|class
name|Lucene49DocValuesProducer
extends|extends
name|DocValuesProducer
implements|implements
name|Closeable
block|{
DECL|field|numerics
specifier|private
specifier|final
name|Map
argument_list|<
name|Integer
argument_list|,
name|NumericEntry
argument_list|>
name|numerics
decl_stmt|;
DECL|field|binaries
specifier|private
specifier|final
name|Map
argument_list|<
name|Integer
argument_list|,
name|BinaryEntry
argument_list|>
name|binaries
decl_stmt|;
DECL|field|sortedSets
specifier|private
specifier|final
name|Map
argument_list|<
name|Integer
argument_list|,
name|SortedSetEntry
argument_list|>
name|sortedSets
decl_stmt|;
DECL|field|sortedNumerics
specifier|private
specifier|final
name|Map
argument_list|<
name|Integer
argument_list|,
name|SortedSetEntry
argument_list|>
name|sortedNumerics
decl_stmt|;
DECL|field|ords
specifier|private
specifier|final
name|Map
argument_list|<
name|Integer
argument_list|,
name|NumericEntry
argument_list|>
name|ords
decl_stmt|;
DECL|field|ordIndexes
specifier|private
specifier|final
name|Map
argument_list|<
name|Integer
argument_list|,
name|NumericEntry
argument_list|>
name|ordIndexes
decl_stmt|;
DECL|field|ramBytesUsed
specifier|private
specifier|final
name|AtomicLong
name|ramBytesUsed
decl_stmt|;
DECL|field|data
specifier|private
specifier|final
name|IndexInput
name|data
decl_stmt|;
DECL|field|maxDoc
specifier|private
specifier|final
name|int
name|maxDoc
decl_stmt|;
DECL|field|version
specifier|private
specifier|final
name|int
name|version
decl_stmt|;
comment|// memory-resident structures
DECL|field|addressInstances
specifier|private
specifier|final
name|Map
argument_list|<
name|Integer
argument_list|,
name|MonotonicBlockPackedReader
argument_list|>
name|addressInstances
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|ordIndexInstances
specifier|private
specifier|final
name|Map
argument_list|<
name|Integer
argument_list|,
name|MonotonicBlockPackedReader
argument_list|>
name|ordIndexInstances
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|/** expert: instantiates a new reader */
DECL|method|Lucene49DocValuesProducer
name|Lucene49DocValuesProducer
parameter_list|(
name|SegmentReadState
name|state
parameter_list|,
name|String
name|dataCodec
parameter_list|,
name|String
name|dataExtension
parameter_list|,
name|String
name|metaCodec
parameter_list|,
name|String
name|metaExtension
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|metaName
init|=
name|IndexFileNames
operator|.
name|segmentFileName
argument_list|(
name|state
operator|.
name|segmentInfo
operator|.
name|name
argument_list|,
name|state
operator|.
name|segmentSuffix
argument_list|,
name|metaExtension
argument_list|)
decl_stmt|;
comment|// read in the entries from the metadata file.
name|ChecksumIndexInput
name|in
init|=
name|state
operator|.
name|directory
operator|.
name|openChecksumInput
argument_list|(
name|metaName
argument_list|,
name|state
operator|.
name|context
argument_list|)
decl_stmt|;
name|this
operator|.
name|maxDoc
operator|=
name|state
operator|.
name|segmentInfo
operator|.
name|getDocCount
argument_list|()
expr_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|version
operator|=
name|CodecUtil
operator|.
name|checkHeader
argument_list|(
name|in
argument_list|,
name|metaCodec
argument_list|,
name|Lucene49DocValuesFormat
operator|.
name|VERSION_START
argument_list|,
name|Lucene49DocValuesFormat
operator|.
name|VERSION_CURRENT
argument_list|)
expr_stmt|;
name|numerics
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|ords
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|ordIndexes
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|binaries
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|sortedSets
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|sortedNumerics
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|readFields
argument_list|(
name|in
argument_list|,
name|state
operator|.
name|fieldInfos
argument_list|)
expr_stmt|;
name|CodecUtil
operator|.
name|checkFooter
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|success
condition|)
block|{
name|IOUtils
operator|.
name|close
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|IOUtils
operator|.
name|closeWhileHandlingException
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|dataName
init|=
name|IndexFileNames
operator|.
name|segmentFileName
argument_list|(
name|state
operator|.
name|segmentInfo
operator|.
name|name
argument_list|,
name|state
operator|.
name|segmentSuffix
argument_list|,
name|dataExtension
argument_list|)
decl_stmt|;
name|this
operator|.
name|data
operator|=
name|state
operator|.
name|directory
operator|.
name|openInput
argument_list|(
name|dataName
argument_list|,
name|state
operator|.
name|context
argument_list|)
expr_stmt|;
name|success
operator|=
literal|false
expr_stmt|;
try|try
block|{
specifier|final
name|int
name|version2
init|=
name|CodecUtil
operator|.
name|checkHeader
argument_list|(
name|data
argument_list|,
name|dataCodec
argument_list|,
name|Lucene49DocValuesFormat
operator|.
name|VERSION_START
argument_list|,
name|Lucene49DocValuesFormat
operator|.
name|VERSION_CURRENT
argument_list|)
decl_stmt|;
if|if
condition|(
name|version
operator|!=
name|version2
condition|)
block|{
throw|throw
operator|new
name|CorruptIndexException
argument_list|(
literal|"Format versions mismatch"
argument_list|)
throw|;
block|}
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|IOUtils
operator|.
name|closeWhileHandlingException
argument_list|(
name|this
operator|.
name|data
argument_list|)
expr_stmt|;
block|}
block|}
name|ramBytesUsed
operator|=
operator|new
name|AtomicLong
argument_list|(
name|RamUsageEstimator
operator|.
name|shallowSizeOfInstance
argument_list|(
name|getClass
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|readSortedField
specifier|private
name|void
name|readSortedField
parameter_list|(
name|int
name|fieldNumber
parameter_list|,
name|IndexInput
name|meta
parameter_list|,
name|FieldInfos
name|infos
parameter_list|)
throws|throws
name|IOException
block|{
comment|// sorted = binary + numeric
if|if
condition|(
name|meta
operator|.
name|readVInt
argument_list|()
operator|!=
name|fieldNumber
condition|)
block|{
throw|throw
operator|new
name|CorruptIndexException
argument_list|(
literal|"sorted entry for field: "
operator|+
name|fieldNumber
operator|+
literal|" is corrupt (resource="
operator|+
name|meta
operator|+
literal|")"
argument_list|)
throw|;
block|}
if|if
condition|(
name|meta
operator|.
name|readByte
argument_list|()
operator|!=
name|Lucene49DocValuesFormat
operator|.
name|BINARY
condition|)
block|{
throw|throw
operator|new
name|CorruptIndexException
argument_list|(
literal|"sorted entry for field: "
operator|+
name|fieldNumber
operator|+
literal|" is corrupt (resource="
operator|+
name|meta
operator|+
literal|")"
argument_list|)
throw|;
block|}
name|BinaryEntry
name|b
init|=
name|readBinaryEntry
argument_list|(
name|meta
argument_list|)
decl_stmt|;
name|binaries
operator|.
name|put
argument_list|(
name|fieldNumber
argument_list|,
name|b
argument_list|)
expr_stmt|;
if|if
condition|(
name|meta
operator|.
name|readVInt
argument_list|()
operator|!=
name|fieldNumber
condition|)
block|{
throw|throw
operator|new
name|CorruptIndexException
argument_list|(
literal|"sorted entry for field: "
operator|+
name|fieldNumber
operator|+
literal|" is corrupt (resource="
operator|+
name|meta
operator|+
literal|")"
argument_list|)
throw|;
block|}
if|if
condition|(
name|meta
operator|.
name|readByte
argument_list|()
operator|!=
name|Lucene49DocValuesFormat
operator|.
name|NUMERIC
condition|)
block|{
throw|throw
operator|new
name|CorruptIndexException
argument_list|(
literal|"sorted entry for field: "
operator|+
name|fieldNumber
operator|+
literal|" is corrupt (resource="
operator|+
name|meta
operator|+
literal|")"
argument_list|)
throw|;
block|}
name|NumericEntry
name|n
init|=
name|readNumericEntry
argument_list|(
name|meta
argument_list|)
decl_stmt|;
name|ords
operator|.
name|put
argument_list|(
name|fieldNumber
argument_list|,
name|n
argument_list|)
expr_stmt|;
block|}
DECL|method|readSortedSetFieldWithAddresses
specifier|private
name|void
name|readSortedSetFieldWithAddresses
parameter_list|(
name|int
name|fieldNumber
parameter_list|,
name|IndexInput
name|meta
parameter_list|,
name|FieldInfos
name|infos
parameter_list|)
throws|throws
name|IOException
block|{
comment|// sortedset = binary + numeric (addresses) + ordIndex
if|if
condition|(
name|meta
operator|.
name|readVInt
argument_list|()
operator|!=
name|fieldNumber
condition|)
block|{
throw|throw
operator|new
name|CorruptIndexException
argument_list|(
literal|"sortedset entry for field: "
operator|+
name|fieldNumber
operator|+
literal|" is corrupt (resource="
operator|+
name|meta
operator|+
literal|")"
argument_list|)
throw|;
block|}
if|if
condition|(
name|meta
operator|.
name|readByte
argument_list|()
operator|!=
name|Lucene49DocValuesFormat
operator|.
name|BINARY
condition|)
block|{
throw|throw
operator|new
name|CorruptIndexException
argument_list|(
literal|"sortedset entry for field: "
operator|+
name|fieldNumber
operator|+
literal|" is corrupt (resource="
operator|+
name|meta
operator|+
literal|")"
argument_list|)
throw|;
block|}
name|BinaryEntry
name|b
init|=
name|readBinaryEntry
argument_list|(
name|meta
argument_list|)
decl_stmt|;
name|binaries
operator|.
name|put
argument_list|(
name|fieldNumber
argument_list|,
name|b
argument_list|)
expr_stmt|;
if|if
condition|(
name|meta
operator|.
name|readVInt
argument_list|()
operator|!=
name|fieldNumber
condition|)
block|{
throw|throw
operator|new
name|CorruptIndexException
argument_list|(
literal|"sortedset entry for field: "
operator|+
name|fieldNumber
operator|+
literal|" is corrupt (resource="
operator|+
name|meta
operator|+
literal|")"
argument_list|)
throw|;
block|}
if|if
condition|(
name|meta
operator|.
name|readByte
argument_list|()
operator|!=
name|Lucene49DocValuesFormat
operator|.
name|NUMERIC
condition|)
block|{
throw|throw
operator|new
name|CorruptIndexException
argument_list|(
literal|"sortedset entry for field: "
operator|+
name|fieldNumber
operator|+
literal|" is corrupt (resource="
operator|+
name|meta
operator|+
literal|")"
argument_list|)
throw|;
block|}
name|NumericEntry
name|n1
init|=
name|readNumericEntry
argument_list|(
name|meta
argument_list|)
decl_stmt|;
name|ords
operator|.
name|put
argument_list|(
name|fieldNumber
argument_list|,
name|n1
argument_list|)
expr_stmt|;
if|if
condition|(
name|meta
operator|.
name|readVInt
argument_list|()
operator|!=
name|fieldNumber
condition|)
block|{
throw|throw
operator|new
name|CorruptIndexException
argument_list|(
literal|"sortedset entry for field: "
operator|+
name|fieldNumber
operator|+
literal|" is corrupt (resource="
operator|+
name|meta
operator|+
literal|")"
argument_list|)
throw|;
block|}
if|if
condition|(
name|meta
operator|.
name|readByte
argument_list|()
operator|!=
name|Lucene49DocValuesFormat
operator|.
name|NUMERIC
condition|)
block|{
throw|throw
operator|new
name|CorruptIndexException
argument_list|(
literal|"sortedset entry for field: "
operator|+
name|fieldNumber
operator|+
literal|" is corrupt (resource="
operator|+
name|meta
operator|+
literal|")"
argument_list|)
throw|;
block|}
name|NumericEntry
name|n2
init|=
name|readNumericEntry
argument_list|(
name|meta
argument_list|)
decl_stmt|;
name|ordIndexes
operator|.
name|put
argument_list|(
name|fieldNumber
argument_list|,
name|n2
argument_list|)
expr_stmt|;
block|}
DECL|method|readFields
specifier|private
name|void
name|readFields
parameter_list|(
name|IndexInput
name|meta
parameter_list|,
name|FieldInfos
name|infos
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|fieldNumber
init|=
name|meta
operator|.
name|readVInt
argument_list|()
decl_stmt|;
while|while
condition|(
name|fieldNumber
operator|!=
operator|-
literal|1
condition|)
block|{
if|if
condition|(
name|infos
operator|.
name|fieldInfo
argument_list|(
name|fieldNumber
argument_list|)
operator|==
literal|null
condition|)
block|{
comment|// trickier to validate more: because we re-use for norms, because we use multiple entries
comment|// for "composite" types like sortedset, etc.
throw|throw
operator|new
name|CorruptIndexException
argument_list|(
literal|"Invalid field number: "
operator|+
name|fieldNumber
operator|+
literal|" (resource="
operator|+
name|meta
operator|+
literal|")"
argument_list|)
throw|;
block|}
name|byte
name|type
init|=
name|meta
operator|.
name|readByte
argument_list|()
decl_stmt|;
if|if
condition|(
name|type
operator|==
name|Lucene49DocValuesFormat
operator|.
name|NUMERIC
condition|)
block|{
name|numerics
operator|.
name|put
argument_list|(
name|fieldNumber
argument_list|,
name|readNumericEntry
argument_list|(
name|meta
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|Lucene49DocValuesFormat
operator|.
name|BINARY
condition|)
block|{
name|BinaryEntry
name|b
init|=
name|readBinaryEntry
argument_list|(
name|meta
argument_list|)
decl_stmt|;
name|binaries
operator|.
name|put
argument_list|(
name|fieldNumber
argument_list|,
name|b
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|Lucene49DocValuesFormat
operator|.
name|SORTED
condition|)
block|{
name|readSortedField
argument_list|(
name|fieldNumber
argument_list|,
name|meta
argument_list|,
name|infos
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|Lucene49DocValuesFormat
operator|.
name|SORTED_SET
condition|)
block|{
name|SortedSetEntry
name|ss
init|=
name|readSortedSetEntry
argument_list|(
name|meta
argument_list|)
decl_stmt|;
name|sortedSets
operator|.
name|put
argument_list|(
name|fieldNumber
argument_list|,
name|ss
argument_list|)
expr_stmt|;
if|if
condition|(
name|ss
operator|.
name|format
operator|==
name|SORTED_WITH_ADDRESSES
condition|)
block|{
name|readSortedSetFieldWithAddresses
argument_list|(
name|fieldNumber
argument_list|,
name|meta
argument_list|,
name|infos
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ss
operator|.
name|format
operator|==
name|SORTED_SINGLE_VALUED
condition|)
block|{
if|if
condition|(
name|meta
operator|.
name|readVInt
argument_list|()
operator|!=
name|fieldNumber
condition|)
block|{
throw|throw
operator|new
name|CorruptIndexException
argument_list|(
literal|"sortedset entry for field: "
operator|+
name|fieldNumber
operator|+
literal|" is corrupt (resource="
operator|+
name|meta
operator|+
literal|")"
argument_list|)
throw|;
block|}
if|if
condition|(
name|meta
operator|.
name|readByte
argument_list|()
operator|!=
name|Lucene49DocValuesFormat
operator|.
name|SORTED
condition|)
block|{
throw|throw
operator|new
name|CorruptIndexException
argument_list|(
literal|"sortedset entry for field: "
operator|+
name|fieldNumber
operator|+
literal|" is corrupt (resource="
operator|+
name|meta
operator|+
literal|")"
argument_list|)
throw|;
block|}
name|readSortedField
argument_list|(
name|fieldNumber
argument_list|,
name|meta
argument_list|,
name|infos
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|AssertionError
argument_list|()
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|Lucene49DocValuesFormat
operator|.
name|SORTED_NUMERIC
condition|)
block|{
name|SortedSetEntry
name|ss
init|=
name|readSortedSetEntry
argument_list|(
name|meta
argument_list|)
decl_stmt|;
name|sortedNumerics
operator|.
name|put
argument_list|(
name|fieldNumber
argument_list|,
name|ss
argument_list|)
expr_stmt|;
if|if
condition|(
name|meta
operator|.
name|readVInt
argument_list|()
operator|!=
name|fieldNumber
condition|)
block|{
throw|throw
operator|new
name|CorruptIndexException
argument_list|(
literal|"sortednumeric entry for field: "
operator|+
name|fieldNumber
operator|+
literal|" is corrupt (resource="
operator|+
name|meta
operator|+
literal|")"
argument_list|)
throw|;
block|}
if|if
condition|(
name|meta
operator|.
name|readByte
argument_list|()
operator|!=
name|Lucene49DocValuesFormat
operator|.
name|NUMERIC
condition|)
block|{
throw|throw
operator|new
name|CorruptIndexException
argument_list|(
literal|"sortednumeric entry for field: "
operator|+
name|fieldNumber
operator|+
literal|" is corrupt (resource="
operator|+
name|meta
operator|+
literal|")"
argument_list|)
throw|;
block|}
name|numerics
operator|.
name|put
argument_list|(
name|fieldNumber
argument_list|,
name|readNumericEntry
argument_list|(
name|meta
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|ss
operator|.
name|format
operator|==
name|SORTED_WITH_ADDRESSES
condition|)
block|{
if|if
condition|(
name|meta
operator|.
name|readVInt
argument_list|()
operator|!=
name|fieldNumber
condition|)
block|{
throw|throw
operator|new
name|CorruptIndexException
argument_list|(
literal|"sortednumeric entry for field: "
operator|+
name|fieldNumber
operator|+
literal|" is corrupt (resource="
operator|+
name|meta
operator|+
literal|")"
argument_list|)
throw|;
block|}
if|if
condition|(
name|meta
operator|.
name|readByte
argument_list|()
operator|!=
name|Lucene49DocValuesFormat
operator|.
name|NUMERIC
condition|)
block|{
throw|throw
operator|new
name|CorruptIndexException
argument_list|(
literal|"sortednumeric entry for field: "
operator|+
name|fieldNumber
operator|+
literal|" is corrupt (resource="
operator|+
name|meta
operator|+
literal|")"
argument_list|)
throw|;
block|}
name|NumericEntry
name|ordIndex
init|=
name|readNumericEntry
argument_list|(
name|meta
argument_list|)
decl_stmt|;
name|ordIndexes
operator|.
name|put
argument_list|(
name|fieldNumber
argument_list|,
name|ordIndex
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ss
operator|.
name|format
operator|!=
name|SORTED_SINGLE_VALUED
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|()
throw|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|CorruptIndexException
argument_list|(
literal|"invalid type: "
operator|+
name|type
operator|+
literal|", resource="
operator|+
name|meta
argument_list|)
throw|;
block|}
name|fieldNumber
operator|=
name|meta
operator|.
name|readVInt
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|readNumericEntry
specifier|static
name|NumericEntry
name|readNumericEntry
parameter_list|(
name|IndexInput
name|meta
parameter_list|)
throws|throws
name|IOException
block|{
name|NumericEntry
name|entry
init|=
operator|new
name|NumericEntry
argument_list|()
decl_stmt|;
name|entry
operator|.
name|format
operator|=
name|meta
operator|.
name|readVInt
argument_list|()
expr_stmt|;
name|entry
operator|.
name|missingOffset
operator|=
name|meta
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|entry
operator|.
name|offset
operator|=
name|meta
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|entry
operator|.
name|count
operator|=
name|meta
operator|.
name|readVLong
argument_list|()
expr_stmt|;
switch|switch
condition|(
name|entry
operator|.
name|format
condition|)
block|{
case|case
name|GCD_COMPRESSED
case|:
name|entry
operator|.
name|minValue
operator|=
name|meta
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|entry
operator|.
name|gcd
operator|=
name|meta
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|entry
operator|.
name|bitsPerValue
operator|=
name|meta
operator|.
name|readVInt
argument_list|()
expr_stmt|;
break|break;
case|case
name|TABLE_COMPRESSED
case|:
specifier|final
name|int
name|uniqueValues
init|=
name|meta
operator|.
name|readVInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|uniqueValues
operator|>
literal|256
condition|)
block|{
throw|throw
operator|new
name|CorruptIndexException
argument_list|(
literal|"TABLE_COMPRESSED cannot have more than 256 distinct values, input="
operator|+
name|meta
argument_list|)
throw|;
block|}
name|entry
operator|.
name|table
operator|=
operator|new
name|long
index|[
name|uniqueValues
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|uniqueValues
condition|;
operator|++
name|i
control|)
block|{
name|entry
operator|.
name|table
index|[
name|i
index|]
operator|=
name|meta
operator|.
name|readLong
argument_list|()
expr_stmt|;
block|}
name|entry
operator|.
name|bitsPerValue
operator|=
name|meta
operator|.
name|readVInt
argument_list|()
expr_stmt|;
break|break;
case|case
name|DELTA_COMPRESSED
case|:
name|entry
operator|.
name|minValue
operator|=
name|meta
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|entry
operator|.
name|bitsPerValue
operator|=
name|meta
operator|.
name|readVInt
argument_list|()
expr_stmt|;
break|break;
case|case
name|MONOTONIC_COMPRESSED
case|:
name|entry
operator|.
name|packedIntsVersion
operator|=
name|meta
operator|.
name|readVInt
argument_list|()
expr_stmt|;
name|entry
operator|.
name|blockSize
operator|=
name|meta
operator|.
name|readVInt
argument_list|()
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|CorruptIndexException
argument_list|(
literal|"Unknown format: "
operator|+
name|entry
operator|.
name|format
operator|+
literal|", input="
operator|+
name|meta
argument_list|)
throw|;
block|}
name|entry
operator|.
name|endOffset
operator|=
name|meta
operator|.
name|readLong
argument_list|()
expr_stmt|;
return|return
name|entry
return|;
block|}
DECL|method|readBinaryEntry
specifier|static
name|BinaryEntry
name|readBinaryEntry
parameter_list|(
name|IndexInput
name|meta
parameter_list|)
throws|throws
name|IOException
block|{
name|BinaryEntry
name|entry
init|=
operator|new
name|BinaryEntry
argument_list|()
decl_stmt|;
name|entry
operator|.
name|format
operator|=
name|meta
operator|.
name|readVInt
argument_list|()
expr_stmt|;
name|entry
operator|.
name|missingOffset
operator|=
name|meta
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|entry
operator|.
name|minLength
operator|=
name|meta
operator|.
name|readVInt
argument_list|()
expr_stmt|;
name|entry
operator|.
name|maxLength
operator|=
name|meta
operator|.
name|readVInt
argument_list|()
expr_stmt|;
name|entry
operator|.
name|count
operator|=
name|meta
operator|.
name|readVLong
argument_list|()
expr_stmt|;
name|entry
operator|.
name|offset
operator|=
name|meta
operator|.
name|readLong
argument_list|()
expr_stmt|;
switch|switch
condition|(
name|entry
operator|.
name|format
condition|)
block|{
case|case
name|BINARY_FIXED_UNCOMPRESSED
case|:
break|break;
case|case
name|BINARY_PREFIX_COMPRESSED
case|:
name|entry
operator|.
name|addressInterval
operator|=
name|meta
operator|.
name|readVInt
argument_list|()
expr_stmt|;
name|entry
operator|.
name|addressesOffset
operator|=
name|meta
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|entry
operator|.
name|packedIntsVersion
operator|=
name|meta
operator|.
name|readVInt
argument_list|()
expr_stmt|;
name|entry
operator|.
name|blockSize
operator|=
name|meta
operator|.
name|readVInt
argument_list|()
expr_stmt|;
break|break;
case|case
name|BINARY_VARIABLE_UNCOMPRESSED
case|:
name|entry
operator|.
name|addressesOffset
operator|=
name|meta
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|entry
operator|.
name|packedIntsVersion
operator|=
name|meta
operator|.
name|readVInt
argument_list|()
expr_stmt|;
name|entry
operator|.
name|blockSize
operator|=
name|meta
operator|.
name|readVInt
argument_list|()
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|CorruptIndexException
argument_list|(
literal|"Unknown format: "
operator|+
name|entry
operator|.
name|format
operator|+
literal|", input="
operator|+
name|meta
argument_list|)
throw|;
block|}
return|return
name|entry
return|;
block|}
DECL|method|readSortedSetEntry
name|SortedSetEntry
name|readSortedSetEntry
parameter_list|(
name|IndexInput
name|meta
parameter_list|)
throws|throws
name|IOException
block|{
name|SortedSetEntry
name|entry
init|=
operator|new
name|SortedSetEntry
argument_list|()
decl_stmt|;
name|entry
operator|.
name|format
operator|=
name|meta
operator|.
name|readVInt
argument_list|()
expr_stmt|;
if|if
condition|(
name|entry
operator|.
name|format
operator|!=
name|SORTED_SINGLE_VALUED
operator|&&
name|entry
operator|.
name|format
operator|!=
name|SORTED_WITH_ADDRESSES
condition|)
block|{
throw|throw
operator|new
name|CorruptIndexException
argument_list|(
literal|"Unknown format: "
operator|+
name|entry
operator|.
name|format
operator|+
literal|", input="
operator|+
name|meta
argument_list|)
throw|;
block|}
return|return
name|entry
return|;
block|}
annotation|@
name|Override
DECL|method|getNumeric
specifier|public
name|NumericDocValues
name|getNumeric
parameter_list|(
name|FieldInfo
name|field
parameter_list|)
throws|throws
name|IOException
block|{
name|NumericEntry
name|entry
init|=
name|numerics
operator|.
name|get
argument_list|(
name|field
operator|.
name|number
argument_list|)
decl_stmt|;
return|return
name|getNumeric
argument_list|(
name|entry
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|ramBytesUsed
specifier|public
name|long
name|ramBytesUsed
parameter_list|()
block|{
return|return
name|ramBytesUsed
operator|.
name|get
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|checkIntegrity
specifier|public
name|void
name|checkIntegrity
parameter_list|()
throws|throws
name|IOException
block|{
name|CodecUtil
operator|.
name|checksumEntireFile
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
DECL|method|getNumeric
name|LongValues
name|getNumeric
parameter_list|(
name|NumericEntry
name|entry
parameter_list|)
throws|throws
name|IOException
block|{
name|RandomAccessInput
name|slice
init|=
name|this
operator|.
name|data
operator|.
name|randomAccessSlice
argument_list|(
name|entry
operator|.
name|offset
argument_list|,
name|entry
operator|.
name|endOffset
operator|-
name|entry
operator|.
name|offset
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|entry
operator|.
name|format
condition|)
block|{
case|case
name|DELTA_COMPRESSED
case|:
specifier|final
name|long
name|delta
init|=
name|entry
operator|.
name|minValue
decl_stmt|;
specifier|final
name|LongValues
name|values
init|=
name|DirectReader
operator|.
name|getInstance
argument_list|(
name|slice
argument_list|,
name|entry
operator|.
name|bitsPerValue
argument_list|)
decl_stmt|;
return|return
operator|new
name|LongValues
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|long
name|get
parameter_list|(
name|long
name|id
parameter_list|)
block|{
return|return
name|delta
operator|+
name|values
operator|.
name|get
argument_list|(
name|id
argument_list|)
return|;
block|}
block|}
return|;
case|case
name|GCD_COMPRESSED
case|:
specifier|final
name|long
name|min
init|=
name|entry
operator|.
name|minValue
decl_stmt|;
specifier|final
name|long
name|mult
init|=
name|entry
operator|.
name|gcd
decl_stmt|;
specifier|final
name|LongValues
name|quotientReader
init|=
name|DirectReader
operator|.
name|getInstance
argument_list|(
name|slice
argument_list|,
name|entry
operator|.
name|bitsPerValue
argument_list|)
decl_stmt|;
return|return
operator|new
name|LongValues
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|long
name|get
parameter_list|(
name|long
name|id
parameter_list|)
block|{
return|return
name|min
operator|+
name|mult
operator|*
name|quotientReader
operator|.
name|get
argument_list|(
name|id
argument_list|)
return|;
block|}
block|}
return|;
case|case
name|TABLE_COMPRESSED
case|:
specifier|final
name|long
name|table
index|[]
init|=
name|entry
operator|.
name|table
decl_stmt|;
specifier|final
name|LongValues
name|ords
init|=
name|DirectReader
operator|.
name|getInstance
argument_list|(
name|slice
argument_list|,
name|entry
operator|.
name|bitsPerValue
argument_list|)
decl_stmt|;
return|return
operator|new
name|LongValues
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|long
name|get
parameter_list|(
name|long
name|id
parameter_list|)
block|{
return|return
name|table
index|[
operator|(
name|int
operator|)
name|ords
operator|.
name|get
argument_list|(
name|id
argument_list|)
index|]
return|;
block|}
block|}
return|;
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|()
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|getBinary
specifier|public
name|BinaryDocValues
name|getBinary
parameter_list|(
name|FieldInfo
name|field
parameter_list|)
throws|throws
name|IOException
block|{
name|BinaryEntry
name|bytes
init|=
name|binaries
operator|.
name|get
argument_list|(
name|field
operator|.
name|number
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|bytes
operator|.
name|format
condition|)
block|{
case|case
name|BINARY_FIXED_UNCOMPRESSED
case|:
return|return
name|getFixedBinary
argument_list|(
name|field
argument_list|,
name|bytes
argument_list|)
return|;
case|case
name|BINARY_VARIABLE_UNCOMPRESSED
case|:
return|return
name|getVariableBinary
argument_list|(
name|field
argument_list|,
name|bytes
argument_list|)
return|;
case|case
name|BINARY_PREFIX_COMPRESSED
case|:
return|return
name|getCompressedBinary
argument_list|(
name|field
argument_list|,
name|bytes
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|()
throw|;
block|}
block|}
DECL|method|getFixedBinary
specifier|private
name|BinaryDocValues
name|getFixedBinary
parameter_list|(
name|FieldInfo
name|field
parameter_list|,
specifier|final
name|BinaryEntry
name|bytes
parameter_list|)
block|{
specifier|final
name|IndexInput
name|data
init|=
name|this
operator|.
name|data
operator|.
name|clone
argument_list|()
decl_stmt|;
return|return
operator|new
name|LongBinaryDocValues
argument_list|()
block|{
specifier|final
name|BytesRef
name|term
decl_stmt|;
block|{
name|term
operator|=
operator|new
name|BytesRef
argument_list|(
name|bytes
operator|.
name|maxLength
argument_list|)
expr_stmt|;
name|term
operator|.
name|offset
operator|=
literal|0
expr_stmt|;
name|term
operator|.
name|length
operator|=
name|bytes
operator|.
name|maxLength
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|BytesRef
name|get
parameter_list|(
name|long
name|id
parameter_list|)
block|{
name|long
name|address
init|=
name|bytes
operator|.
name|offset
operator|+
name|id
operator|*
name|bytes
operator|.
name|maxLength
decl_stmt|;
try|try
block|{
name|data
operator|.
name|seek
argument_list|(
name|address
argument_list|)
expr_stmt|;
name|data
operator|.
name|readBytes
argument_list|(
name|term
operator|.
name|bytes
argument_list|,
literal|0
argument_list|,
name|term
operator|.
name|length
argument_list|)
expr_stmt|;
return|return
name|term
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
return|;
block|}
comment|/** returns an address instance for variable-length binary values. */
DECL|method|getAddressInstance
specifier|private
name|MonotonicBlockPackedReader
name|getAddressInstance
parameter_list|(
name|IndexInput
name|data
parameter_list|,
name|FieldInfo
name|field
parameter_list|,
name|BinaryEntry
name|bytes
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|MonotonicBlockPackedReader
name|addresses
decl_stmt|;
synchronized|synchronized
init|(
name|addressInstances
init|)
block|{
name|MonotonicBlockPackedReader
name|addrInstance
init|=
name|addressInstances
operator|.
name|get
argument_list|(
name|field
operator|.
name|number
argument_list|)
decl_stmt|;
if|if
condition|(
name|addrInstance
operator|==
literal|null
condition|)
block|{
name|data
operator|.
name|seek
argument_list|(
name|bytes
operator|.
name|addressesOffset
argument_list|)
expr_stmt|;
name|addrInstance
operator|=
name|MonotonicBlockPackedReader
operator|.
name|of
argument_list|(
name|data
argument_list|,
name|bytes
operator|.
name|packedIntsVersion
argument_list|,
name|bytes
operator|.
name|blockSize
argument_list|,
name|bytes
operator|.
name|count
operator|+
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|addressInstances
operator|.
name|put
argument_list|(
name|field
operator|.
name|number
argument_list|,
name|addrInstance
argument_list|)
expr_stmt|;
name|ramBytesUsed
operator|.
name|addAndGet
argument_list|(
name|addrInstance
operator|.
name|ramBytesUsed
argument_list|()
operator|+
name|RamUsageEstimator
operator|.
name|NUM_BYTES_INT
argument_list|)
expr_stmt|;
block|}
name|addresses
operator|=
name|addrInstance
expr_stmt|;
block|}
return|return
name|addresses
return|;
block|}
DECL|method|getVariableBinary
specifier|private
name|BinaryDocValues
name|getVariableBinary
parameter_list|(
name|FieldInfo
name|field
parameter_list|,
specifier|final
name|BinaryEntry
name|bytes
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|IndexInput
name|data
init|=
name|this
operator|.
name|data
operator|.
name|clone
argument_list|()
decl_stmt|;
specifier|final
name|MonotonicBlockPackedReader
name|addresses
init|=
name|getAddressInstance
argument_list|(
name|data
argument_list|,
name|field
argument_list|,
name|bytes
argument_list|)
decl_stmt|;
return|return
operator|new
name|LongBinaryDocValues
argument_list|()
block|{
specifier|final
name|BytesRef
name|term
init|=
operator|new
name|BytesRef
argument_list|(
name|Math
operator|.
name|max
argument_list|(
literal|0
argument_list|,
name|bytes
operator|.
name|maxLength
argument_list|)
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|BytesRef
name|get
parameter_list|(
name|long
name|id
parameter_list|)
block|{
name|long
name|startAddress
init|=
name|bytes
operator|.
name|offset
operator|+
name|addresses
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|long
name|endAddress
init|=
name|bytes
operator|.
name|offset
operator|+
name|addresses
operator|.
name|get
argument_list|(
name|id
operator|+
literal|1
argument_list|)
decl_stmt|;
name|int
name|length
init|=
call|(
name|int
call|)
argument_list|(
name|endAddress
operator|-
name|startAddress
argument_list|)
decl_stmt|;
try|try
block|{
name|data
operator|.
name|seek
argument_list|(
name|startAddress
argument_list|)
expr_stmt|;
name|data
operator|.
name|readBytes
argument_list|(
name|term
operator|.
name|bytes
argument_list|,
literal|0
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|term
operator|.
name|length
operator|=
name|length
expr_stmt|;
return|return
name|term
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
return|;
block|}
comment|/** returns an address instance for prefix-compressed binary values. */
DECL|method|getIntervalInstance
specifier|private
name|MonotonicBlockPackedReader
name|getIntervalInstance
parameter_list|(
name|IndexInput
name|data
parameter_list|,
name|FieldInfo
name|field
parameter_list|,
name|BinaryEntry
name|bytes
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|MonotonicBlockPackedReader
name|addresses
decl_stmt|;
specifier|final
name|long
name|interval
init|=
name|bytes
operator|.
name|addressInterval
decl_stmt|;
synchronized|synchronized
init|(
name|addressInstances
init|)
block|{
name|MonotonicBlockPackedReader
name|addrInstance
init|=
name|addressInstances
operator|.
name|get
argument_list|(
name|field
operator|.
name|number
argument_list|)
decl_stmt|;
if|if
condition|(
name|addrInstance
operator|==
literal|null
condition|)
block|{
name|data
operator|.
name|seek
argument_list|(
name|bytes
operator|.
name|addressesOffset
argument_list|)
expr_stmt|;
specifier|final
name|long
name|size
decl_stmt|;
if|if
condition|(
name|bytes
operator|.
name|count
operator|%
name|interval
operator|==
literal|0
condition|)
block|{
name|size
operator|=
name|bytes
operator|.
name|count
operator|/
name|interval
expr_stmt|;
block|}
else|else
block|{
name|size
operator|=
literal|1L
operator|+
name|bytes
operator|.
name|count
operator|/
name|interval
expr_stmt|;
block|}
name|addrInstance
operator|=
name|MonotonicBlockPackedReader
operator|.
name|of
argument_list|(
name|data
argument_list|,
name|bytes
operator|.
name|packedIntsVersion
argument_list|,
name|bytes
operator|.
name|blockSize
argument_list|,
name|size
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|addressInstances
operator|.
name|put
argument_list|(
name|field
operator|.
name|number
argument_list|,
name|addrInstance
argument_list|)
expr_stmt|;
name|ramBytesUsed
operator|.
name|addAndGet
argument_list|(
name|addrInstance
operator|.
name|ramBytesUsed
argument_list|()
operator|+
name|RamUsageEstimator
operator|.
name|NUM_BYTES_INT
argument_list|)
expr_stmt|;
block|}
name|addresses
operator|=
name|addrInstance
expr_stmt|;
block|}
return|return
name|addresses
return|;
block|}
DECL|method|getCompressedBinary
specifier|private
name|BinaryDocValues
name|getCompressedBinary
parameter_list|(
name|FieldInfo
name|field
parameter_list|,
specifier|final
name|BinaryEntry
name|bytes
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|IndexInput
name|data
init|=
name|this
operator|.
name|data
operator|.
name|clone
argument_list|()
decl_stmt|;
specifier|final
name|MonotonicBlockPackedReader
name|addresses
init|=
name|getIntervalInstance
argument_list|(
name|data
argument_list|,
name|field
argument_list|,
name|bytes
argument_list|)
decl_stmt|;
return|return
operator|new
name|CompressedBinaryDocValues
argument_list|(
name|bytes
argument_list|,
name|addresses
argument_list|,
name|data
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getSorted
specifier|public
name|SortedDocValues
name|getSorted
parameter_list|(
name|FieldInfo
name|field
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|int
name|valueCount
init|=
operator|(
name|int
operator|)
name|binaries
operator|.
name|get
argument_list|(
name|field
operator|.
name|number
argument_list|)
operator|.
name|count
decl_stmt|;
specifier|final
name|BinaryDocValues
name|binary
init|=
name|getBinary
argument_list|(
name|field
argument_list|)
decl_stmt|;
name|NumericEntry
name|entry
init|=
name|ords
operator|.
name|get
argument_list|(
name|field
operator|.
name|number
argument_list|)
decl_stmt|;
specifier|final
name|LongValues
name|ordinals
init|=
name|getNumeric
argument_list|(
name|entry
argument_list|)
decl_stmt|;
return|return
operator|new
name|SortedDocValues
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|getOrd
parameter_list|(
name|int
name|docID
parameter_list|)
block|{
return|return
operator|(
name|int
operator|)
name|ordinals
operator|.
name|get
argument_list|(
name|docID
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|BytesRef
name|lookupOrd
parameter_list|(
name|int
name|ord
parameter_list|)
block|{
return|return
name|binary
operator|.
name|get
argument_list|(
name|ord
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getValueCount
parameter_list|()
block|{
return|return
name|valueCount
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|lookupTerm
parameter_list|(
name|BytesRef
name|key
parameter_list|)
block|{
if|if
condition|(
name|binary
operator|instanceof
name|CompressedBinaryDocValues
condition|)
block|{
return|return
call|(
name|int
call|)
argument_list|(
operator|(
name|CompressedBinaryDocValues
operator|)
name|binary
argument_list|)
operator|.
name|lookupTerm
argument_list|(
name|key
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|super
operator|.
name|lookupTerm
argument_list|(
name|key
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|TermsEnum
name|termsEnum
parameter_list|()
block|{
if|if
condition|(
name|binary
operator|instanceof
name|CompressedBinaryDocValues
condition|)
block|{
return|return
operator|(
operator|(
name|CompressedBinaryDocValues
operator|)
name|binary
operator|)
operator|.
name|getTermsEnum
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|super
operator|.
name|termsEnum
argument_list|()
return|;
block|}
block|}
block|}
return|;
block|}
comment|/** returns an address instance for sortedset ordinal lists */
DECL|method|getOrdIndexInstance
specifier|private
name|MonotonicBlockPackedReader
name|getOrdIndexInstance
parameter_list|(
name|IndexInput
name|data
parameter_list|,
name|FieldInfo
name|field
parameter_list|,
name|NumericEntry
name|entry
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|MonotonicBlockPackedReader
name|ordIndex
decl_stmt|;
synchronized|synchronized
init|(
name|ordIndexInstances
init|)
block|{
name|MonotonicBlockPackedReader
name|ordIndexInstance
init|=
name|ordIndexInstances
operator|.
name|get
argument_list|(
name|field
operator|.
name|number
argument_list|)
decl_stmt|;
if|if
condition|(
name|ordIndexInstance
operator|==
literal|null
condition|)
block|{
name|data
operator|.
name|seek
argument_list|(
name|entry
operator|.
name|offset
argument_list|)
expr_stmt|;
name|ordIndexInstance
operator|=
name|MonotonicBlockPackedReader
operator|.
name|of
argument_list|(
name|data
argument_list|,
name|entry
operator|.
name|packedIntsVersion
argument_list|,
name|entry
operator|.
name|blockSize
argument_list|,
name|entry
operator|.
name|count
operator|+
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|ordIndexInstances
operator|.
name|put
argument_list|(
name|field
operator|.
name|number
argument_list|,
name|ordIndexInstance
argument_list|)
expr_stmt|;
name|ramBytesUsed
operator|.
name|addAndGet
argument_list|(
name|ordIndexInstance
operator|.
name|ramBytesUsed
argument_list|()
operator|+
name|RamUsageEstimator
operator|.
name|NUM_BYTES_INT
argument_list|)
expr_stmt|;
block|}
name|ordIndex
operator|=
name|ordIndexInstance
expr_stmt|;
block|}
return|return
name|ordIndex
return|;
block|}
annotation|@
name|Override
DECL|method|getSortedNumeric
specifier|public
name|SortedNumericDocValues
name|getSortedNumeric
parameter_list|(
name|FieldInfo
name|field
parameter_list|)
throws|throws
name|IOException
block|{
name|SortedSetEntry
name|ss
init|=
name|sortedNumerics
operator|.
name|get
argument_list|(
name|field
operator|.
name|number
argument_list|)
decl_stmt|;
name|NumericEntry
name|numericEntry
init|=
name|numerics
operator|.
name|get
argument_list|(
name|field
operator|.
name|number
argument_list|)
decl_stmt|;
specifier|final
name|LongValues
name|values
init|=
name|getNumeric
argument_list|(
name|numericEntry
argument_list|)
decl_stmt|;
if|if
condition|(
name|ss
operator|.
name|format
operator|==
name|SORTED_SINGLE_VALUED
condition|)
block|{
specifier|final
name|Bits
name|docsWithField
init|=
name|getMissingBits
argument_list|(
name|numericEntry
operator|.
name|missingOffset
argument_list|)
decl_stmt|;
return|return
name|DocValues
operator|.
name|singleton
argument_list|(
name|values
argument_list|,
name|docsWithField
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|ss
operator|.
name|format
operator|==
name|SORTED_WITH_ADDRESSES
condition|)
block|{
specifier|final
name|IndexInput
name|data
init|=
name|this
operator|.
name|data
operator|.
name|clone
argument_list|()
decl_stmt|;
specifier|final
name|MonotonicBlockPackedReader
name|ordIndex
init|=
name|getOrdIndexInstance
argument_list|(
name|data
argument_list|,
name|field
argument_list|,
name|ordIndexes
operator|.
name|get
argument_list|(
name|field
operator|.
name|number
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|SortedNumericDocValues
argument_list|()
block|{
name|long
name|startOffset
decl_stmt|;
name|long
name|endOffset
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|setDocument
parameter_list|(
name|int
name|doc
parameter_list|)
block|{
name|startOffset
operator|=
name|ordIndex
operator|.
name|get
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|endOffset
operator|=
name|ordIndex
operator|.
name|get
argument_list|(
name|doc
operator|+
literal|1L
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|valueAt
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|values
operator|.
name|get
argument_list|(
name|startOffset
operator|+
name|index
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|count
parameter_list|()
block|{
return|return
call|(
name|int
call|)
argument_list|(
name|endOffset
operator|-
name|startOffset
argument_list|)
return|;
block|}
block|}
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|AssertionError
argument_list|()
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|getSortedSet
specifier|public
name|SortedSetDocValues
name|getSortedSet
parameter_list|(
name|FieldInfo
name|field
parameter_list|)
throws|throws
name|IOException
block|{
name|SortedSetEntry
name|ss
init|=
name|sortedSets
operator|.
name|get
argument_list|(
name|field
operator|.
name|number
argument_list|)
decl_stmt|;
if|if
condition|(
name|ss
operator|.
name|format
operator|==
name|SORTED_SINGLE_VALUED
condition|)
block|{
specifier|final
name|SortedDocValues
name|values
init|=
name|getSorted
argument_list|(
name|field
argument_list|)
decl_stmt|;
return|return
name|DocValues
operator|.
name|singleton
argument_list|(
name|values
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|ss
operator|.
name|format
operator|!=
name|SORTED_WITH_ADDRESSES
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|()
throw|;
block|}
specifier|final
name|IndexInput
name|data
init|=
name|this
operator|.
name|data
operator|.
name|clone
argument_list|()
decl_stmt|;
specifier|final
name|long
name|valueCount
init|=
name|binaries
operator|.
name|get
argument_list|(
name|field
operator|.
name|number
argument_list|)
operator|.
name|count
decl_stmt|;
comment|// we keep the byte[]s and list of ords on disk, these could be large
specifier|final
name|LongBinaryDocValues
name|binary
init|=
operator|(
name|LongBinaryDocValues
operator|)
name|getBinary
argument_list|(
name|field
argument_list|)
decl_stmt|;
specifier|final
name|LongValues
name|ordinals
init|=
name|getNumeric
argument_list|(
name|ords
operator|.
name|get
argument_list|(
name|field
operator|.
name|number
argument_list|)
argument_list|)
decl_stmt|;
comment|// but the addresses to the ord stream are in RAM
specifier|final
name|MonotonicBlockPackedReader
name|ordIndex
init|=
name|getOrdIndexInstance
argument_list|(
name|data
argument_list|,
name|field
argument_list|,
name|ordIndexes
operator|.
name|get
argument_list|(
name|field
operator|.
name|number
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|RandomAccessOrds
argument_list|()
block|{
name|long
name|startOffset
decl_stmt|;
name|long
name|offset
decl_stmt|;
name|long
name|endOffset
decl_stmt|;
annotation|@
name|Override
specifier|public
name|long
name|nextOrd
parameter_list|()
block|{
if|if
condition|(
name|offset
operator|==
name|endOffset
condition|)
block|{
return|return
name|NO_MORE_ORDS
return|;
block|}
else|else
block|{
name|long
name|ord
init|=
name|ordinals
operator|.
name|get
argument_list|(
name|offset
argument_list|)
decl_stmt|;
name|offset
operator|++
expr_stmt|;
return|return
name|ord
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|setDocument
parameter_list|(
name|int
name|docID
parameter_list|)
block|{
name|startOffset
operator|=
name|offset
operator|=
name|ordIndex
operator|.
name|get
argument_list|(
name|docID
argument_list|)
expr_stmt|;
name|endOffset
operator|=
name|ordIndex
operator|.
name|get
argument_list|(
name|docID
operator|+
literal|1L
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|BytesRef
name|lookupOrd
parameter_list|(
name|long
name|ord
parameter_list|)
block|{
return|return
name|binary
operator|.
name|get
argument_list|(
name|ord
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getValueCount
parameter_list|()
block|{
return|return
name|valueCount
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|lookupTerm
parameter_list|(
name|BytesRef
name|key
parameter_list|)
block|{
if|if
condition|(
name|binary
operator|instanceof
name|CompressedBinaryDocValues
condition|)
block|{
return|return
operator|(
operator|(
name|CompressedBinaryDocValues
operator|)
name|binary
operator|)
operator|.
name|lookupTerm
argument_list|(
name|key
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|super
operator|.
name|lookupTerm
argument_list|(
name|key
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|TermsEnum
name|termsEnum
parameter_list|()
block|{
if|if
condition|(
name|binary
operator|instanceof
name|CompressedBinaryDocValues
condition|)
block|{
return|return
operator|(
operator|(
name|CompressedBinaryDocValues
operator|)
name|binary
operator|)
operator|.
name|getTermsEnum
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|super
operator|.
name|termsEnum
argument_list|()
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|long
name|ordAt
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|ordinals
operator|.
name|get
argument_list|(
name|startOffset
operator|+
name|index
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|cardinality
parameter_list|()
block|{
return|return
call|(
name|int
call|)
argument_list|(
name|endOffset
operator|-
name|startOffset
argument_list|)
return|;
block|}
block|}
return|;
block|}
DECL|method|getMissingBits
specifier|private
name|Bits
name|getMissingBits
parameter_list|(
specifier|final
name|long
name|offset
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|offset
operator|==
operator|-
literal|1
condition|)
block|{
return|return
operator|new
name|Bits
operator|.
name|MatchAllBits
argument_list|(
name|maxDoc
argument_list|)
return|;
block|}
else|else
block|{
name|int
name|length
init|=
call|(
name|int
call|)
argument_list|(
operator|(
name|maxDoc
operator|+
literal|7L
operator|)
operator|>>>
literal|3
argument_list|)
decl_stmt|;
specifier|final
name|RandomAccessInput
name|in
init|=
name|data
operator|.
name|randomAccessSlice
argument_list|(
name|offset
argument_list|,
name|length
argument_list|)
decl_stmt|;
return|return
operator|new
name|Bits
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|get
parameter_list|(
name|int
name|index
parameter_list|)
block|{
try|try
block|{
return|return
operator|(
name|in
operator|.
name|readByte
argument_list|(
name|index
operator|>>
literal|3
argument_list|)
operator|&
operator|(
literal|1
operator|<<
operator|(
name|index
operator|&
literal|7
operator|)
operator|)
operator|)
operator|!=
literal|0
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|length
parameter_list|()
block|{
return|return
name|maxDoc
return|;
block|}
block|}
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|getDocsWithField
specifier|public
name|Bits
name|getDocsWithField
parameter_list|(
name|FieldInfo
name|field
parameter_list|)
throws|throws
name|IOException
block|{
switch|switch
condition|(
name|field
operator|.
name|getDocValuesType
argument_list|()
condition|)
block|{
case|case
name|SORTED_SET
case|:
return|return
name|DocValues
operator|.
name|docsWithValue
argument_list|(
name|getSortedSet
argument_list|(
name|field
argument_list|)
argument_list|,
name|maxDoc
argument_list|)
return|;
case|case
name|SORTED_NUMERIC
case|:
return|return
name|DocValues
operator|.
name|docsWithValue
argument_list|(
name|getSortedNumeric
argument_list|(
name|field
argument_list|)
argument_list|,
name|maxDoc
argument_list|)
return|;
case|case
name|SORTED
case|:
return|return
name|DocValues
operator|.
name|docsWithValue
argument_list|(
name|getSorted
argument_list|(
name|field
argument_list|)
argument_list|,
name|maxDoc
argument_list|)
return|;
case|case
name|BINARY
case|:
name|BinaryEntry
name|be
init|=
name|binaries
operator|.
name|get
argument_list|(
name|field
operator|.
name|number
argument_list|)
decl_stmt|;
return|return
name|getMissingBits
argument_list|(
name|be
operator|.
name|missingOffset
argument_list|)
return|;
case|case
name|NUMERIC
case|:
name|NumericEntry
name|ne
init|=
name|numerics
operator|.
name|get
argument_list|(
name|field
operator|.
name|number
argument_list|)
decl_stmt|;
return|return
name|getMissingBits
argument_list|(
name|ne
operator|.
name|missingOffset
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|()
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|data
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/** metadata entry for a numeric docvalues field */
DECL|class|NumericEntry
specifier|static
class|class
name|NumericEntry
block|{
DECL|method|NumericEntry
specifier|private
name|NumericEntry
parameter_list|()
block|{}
comment|/** offset to the bitset representing docsWithField, or -1 if no documents have missing values */
DECL|field|missingOffset
name|long
name|missingOffset
decl_stmt|;
comment|/** offset to the actual numeric values */
DECL|field|offset
specifier|public
name|long
name|offset
decl_stmt|;
comment|/** end offset to the actual numeric values */
DECL|field|endOffset
specifier|public
name|long
name|endOffset
decl_stmt|;
comment|/** bits per value used to pack the numeric values */
DECL|field|bitsPerValue
specifier|public
name|int
name|bitsPerValue
decl_stmt|;
DECL|field|format
name|int
name|format
decl_stmt|;
comment|/** packed ints version used to encode these numerics */
DECL|field|packedIntsVersion
specifier|public
name|int
name|packedIntsVersion
decl_stmt|;
comment|/** count of values written */
DECL|field|count
specifier|public
name|long
name|count
decl_stmt|;
comment|/** packed ints blocksize */
DECL|field|blockSize
specifier|public
name|int
name|blockSize
decl_stmt|;
DECL|field|minValue
name|long
name|minValue
decl_stmt|;
DECL|field|gcd
name|long
name|gcd
decl_stmt|;
DECL|field|table
name|long
name|table
index|[]
decl_stmt|;
block|}
comment|/** metadata entry for a binary docvalues field */
DECL|class|BinaryEntry
specifier|static
class|class
name|BinaryEntry
block|{
DECL|method|BinaryEntry
specifier|private
name|BinaryEntry
parameter_list|()
block|{}
comment|/** offset to the bitset representing docsWithField, or -1 if no documents have missing values */
DECL|field|missingOffset
name|long
name|missingOffset
decl_stmt|;
comment|/** offset to the actual binary values */
DECL|field|offset
name|long
name|offset
decl_stmt|;
DECL|field|format
name|int
name|format
decl_stmt|;
comment|/** count of values written */
DECL|field|count
specifier|public
name|long
name|count
decl_stmt|;
DECL|field|minLength
name|int
name|minLength
decl_stmt|;
DECL|field|maxLength
name|int
name|maxLength
decl_stmt|;
comment|/** offset to the addressing data that maps a value to its slice of the byte[] */
DECL|field|addressesOffset
specifier|public
name|long
name|addressesOffset
decl_stmt|;
comment|/** interval of shared prefix chunks (when using prefix-compressed binary) */
DECL|field|addressInterval
specifier|public
name|long
name|addressInterval
decl_stmt|;
comment|/** packed ints version used to encode addressing information */
DECL|field|packedIntsVersion
specifier|public
name|int
name|packedIntsVersion
decl_stmt|;
comment|/** packed ints blocksize */
DECL|field|blockSize
specifier|public
name|int
name|blockSize
decl_stmt|;
block|}
comment|/** metadata entry for a sorted-set docvalues field */
DECL|class|SortedSetEntry
specifier|static
class|class
name|SortedSetEntry
block|{
DECL|method|SortedSetEntry
specifier|private
name|SortedSetEntry
parameter_list|()
block|{}
DECL|field|format
name|int
name|format
decl_stmt|;
block|}
comment|// internally we compose complex dv (sorted/sortedset) from other ones
DECL|class|LongBinaryDocValues
specifier|static
specifier|abstract
class|class
name|LongBinaryDocValues
extends|extends
name|BinaryDocValues
block|{
annotation|@
name|Override
DECL|method|get
specifier|public
specifier|final
name|BytesRef
name|get
parameter_list|(
name|int
name|docID
parameter_list|)
block|{
return|return
name|get
argument_list|(
operator|(
name|long
operator|)
name|docID
argument_list|)
return|;
block|}
DECL|method|get
specifier|abstract
name|BytesRef
name|get
parameter_list|(
name|long
name|id
parameter_list|)
function_decl|;
block|}
comment|// in the compressed case, we add a few additional operations for
comment|// more efficient reverse lookup and enumeration
DECL|class|CompressedBinaryDocValues
specifier|static
class|class
name|CompressedBinaryDocValues
extends|extends
name|LongBinaryDocValues
block|{
DECL|field|bytes
specifier|final
name|BinaryEntry
name|bytes
decl_stmt|;
DECL|field|interval
specifier|final
name|long
name|interval
decl_stmt|;
DECL|field|numValues
specifier|final
name|long
name|numValues
decl_stmt|;
DECL|field|numIndexValues
specifier|final
name|long
name|numIndexValues
decl_stmt|;
DECL|field|addresses
specifier|final
name|MonotonicBlockPackedReader
name|addresses
decl_stmt|;
DECL|field|data
specifier|final
name|IndexInput
name|data
decl_stmt|;
DECL|field|termsEnum
specifier|final
name|TermsEnum
name|termsEnum
decl_stmt|;
DECL|method|CompressedBinaryDocValues
specifier|public
name|CompressedBinaryDocValues
parameter_list|(
name|BinaryEntry
name|bytes
parameter_list|,
name|MonotonicBlockPackedReader
name|addresses
parameter_list|,
name|IndexInput
name|data
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|bytes
operator|=
name|bytes
expr_stmt|;
name|this
operator|.
name|interval
operator|=
name|bytes
operator|.
name|addressInterval
expr_stmt|;
name|this
operator|.
name|addresses
operator|=
name|addresses
expr_stmt|;
name|this
operator|.
name|data
operator|=
name|data
expr_stmt|;
name|this
operator|.
name|numValues
operator|=
name|bytes
operator|.
name|count
expr_stmt|;
name|this
operator|.
name|numIndexValues
operator|=
name|addresses
operator|.
name|size
argument_list|()
expr_stmt|;
name|this
operator|.
name|termsEnum
operator|=
name|getTermsEnum
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|get
specifier|public
name|BytesRef
name|get
parameter_list|(
name|long
name|id
parameter_list|)
block|{
try|try
block|{
name|termsEnum
operator|.
name|seekExact
argument_list|(
name|id
argument_list|)
expr_stmt|;
return|return
name|termsEnum
operator|.
name|term
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|lookupTerm
name|long
name|lookupTerm
parameter_list|(
name|BytesRef
name|key
parameter_list|)
block|{
try|try
block|{
name|SeekStatus
name|status
init|=
name|termsEnum
operator|.
name|seekCeil
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|status
operator|==
name|SeekStatus
operator|.
name|END
condition|)
block|{
return|return
operator|-
name|numValues
operator|-
literal|1
return|;
block|}
elseif|else
if|if
condition|(
name|status
operator|==
name|SeekStatus
operator|.
name|FOUND
condition|)
block|{
return|return
name|termsEnum
operator|.
name|ord
argument_list|()
return|;
block|}
else|else
block|{
return|return
operator|-
name|termsEnum
operator|.
name|ord
argument_list|()
operator|-
literal|1
return|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|bogus
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|bogus
argument_list|)
throw|;
block|}
block|}
DECL|method|getTermsEnum
name|TermsEnum
name|getTermsEnum
parameter_list|()
block|{
try|try
block|{
return|return
name|getTermsEnum
argument_list|(
name|data
operator|.
name|clone
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|getTermsEnum
specifier|private
name|TermsEnum
name|getTermsEnum
parameter_list|(
specifier|final
name|IndexInput
name|input
parameter_list|)
throws|throws
name|IOException
block|{
name|input
operator|.
name|seek
argument_list|(
name|bytes
operator|.
name|offset
argument_list|)
expr_stmt|;
return|return
operator|new
name|TermsEnum
argument_list|()
block|{
specifier|private
name|long
name|currentOrd
init|=
operator|-
literal|1
decl_stmt|;
comment|// TODO: maxLength is negative when all terms are merged away...
specifier|private
specifier|final
name|BytesRef
name|term
init|=
operator|new
name|BytesRef
argument_list|(
name|bytes
operator|.
name|maxLength
operator|<
literal|0
condition|?
literal|0
else|:
name|bytes
operator|.
name|maxLength
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|BytesRef
name|next
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|++
name|currentOrd
operator|>=
name|numValues
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
name|int
name|start
init|=
name|input
operator|.
name|readVInt
argument_list|()
decl_stmt|;
name|int
name|suffix
init|=
name|input
operator|.
name|readVInt
argument_list|()
decl_stmt|;
name|input
operator|.
name|readBytes
argument_list|(
name|term
operator|.
name|bytes
argument_list|,
name|start
argument_list|,
name|suffix
argument_list|)
expr_stmt|;
name|term
operator|.
name|length
operator|=
name|start
operator|+
name|suffix
expr_stmt|;
return|return
name|term
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|SeekStatus
name|seekCeil
parameter_list|(
name|BytesRef
name|text
parameter_list|)
throws|throws
name|IOException
block|{
comment|// binary-search just the index values to find the block,
comment|// then scan within the block
name|long
name|low
init|=
literal|0
decl_stmt|;
name|long
name|high
init|=
name|numIndexValues
operator|-
literal|1
decl_stmt|;
while|while
condition|(
name|low
operator|<=
name|high
condition|)
block|{
name|long
name|mid
init|=
operator|(
name|low
operator|+
name|high
operator|)
operator|>>>
literal|1
decl_stmt|;
name|seekExact
argument_list|(
name|mid
operator|*
name|interval
argument_list|)
expr_stmt|;
name|int
name|cmp
init|=
name|term
operator|.
name|compareTo
argument_list|(
name|text
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|<
literal|0
condition|)
block|{
name|low
operator|=
name|mid
operator|+
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cmp
operator|>
literal|0
condition|)
block|{
name|high
operator|=
name|mid
operator|-
literal|1
expr_stmt|;
block|}
else|else
block|{
comment|// we got lucky, found an indexed term
return|return
name|SeekStatus
operator|.
name|FOUND
return|;
block|}
block|}
if|if
condition|(
name|numIndexValues
operator|==
literal|0
condition|)
block|{
return|return
name|SeekStatus
operator|.
name|END
return|;
block|}
comment|// block before insertion point
name|long
name|block
init|=
name|low
operator|-
literal|1
decl_stmt|;
name|seekExact
argument_list|(
name|block
operator|<
literal|0
condition|?
operator|-
literal|1
else|:
name|block
operator|*
name|interval
argument_list|)
expr_stmt|;
while|while
condition|(
name|next
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|int
name|cmp
init|=
name|term
operator|.
name|compareTo
argument_list|(
name|text
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|==
literal|0
condition|)
block|{
return|return
name|SeekStatus
operator|.
name|FOUND
return|;
block|}
elseif|else
if|if
condition|(
name|cmp
operator|>
literal|0
condition|)
block|{
return|return
name|SeekStatus
operator|.
name|NOT_FOUND
return|;
block|}
block|}
return|return
name|SeekStatus
operator|.
name|END
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|seekExact
parameter_list|(
name|long
name|ord
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|block
init|=
name|ord
operator|/
name|interval
decl_stmt|;
if|if
condition|(
name|ord
operator|>=
name|currentOrd
operator|&&
name|block
operator|==
name|currentOrd
operator|/
name|interval
condition|)
block|{
comment|// seek within current block
block|}
else|else
block|{
comment|// position before start of block
name|currentOrd
operator|=
name|ord
operator|-
name|ord
operator|%
name|interval
operator|-
literal|1
expr_stmt|;
name|input
operator|.
name|seek
argument_list|(
name|bytes
operator|.
name|offset
operator|+
name|addresses
operator|.
name|get
argument_list|(
name|block
argument_list|)
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
name|currentOrd
operator|<
name|ord
condition|)
block|{
name|next
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|BytesRef
name|term
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|term
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|ord
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|currentOrd
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|docFreq
parameter_list|()
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|totalTermFreq
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|-
literal|1
return|;
block|}
annotation|@
name|Override
specifier|public
name|DocsEnum
name|docs
parameter_list|(
name|Bits
name|liveDocs
parameter_list|,
name|DocsEnum
name|reuse
parameter_list|,
name|int
name|flags
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|DocsAndPositionsEnum
name|docsAndPositions
parameter_list|(
name|Bits
name|liveDocs
parameter_list|,
name|DocsAndPositionsEnum
name|reuse
parameter_list|,
name|int
name|flags
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
return|;
block|}
block|}
block|}
end_class
end_unit
