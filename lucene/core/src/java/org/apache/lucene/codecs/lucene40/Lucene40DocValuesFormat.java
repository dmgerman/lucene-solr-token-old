begin_unit
begin_package
DECL|package|org.apache.lucene.codecs.lucene40
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|lucene40
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|DocValuesConsumer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|DocValuesFormat
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|DocValuesProducer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexFileNames
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SegmentReadState
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SegmentWriteState
import|;
end_import
begin_comment
comment|// NOTE: not registered in SPI, doesnt respect segment suffix, etc
end_comment
begin_comment
comment|// for back compat only!
end_comment
begin_class
DECL|class|Lucene40DocValuesFormat
specifier|public
class|class
name|Lucene40DocValuesFormat
extends|extends
name|DocValuesFormat
block|{
DECL|method|Lucene40DocValuesFormat
specifier|public
name|Lucene40DocValuesFormat
parameter_list|()
block|{
name|super
argument_list|(
literal|"Lucene40"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|fieldsConsumer
specifier|public
name|DocValuesConsumer
name|fieldsConsumer
parameter_list|(
name|SegmentWriteState
name|state
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"this codec can only be used for reading"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|fieldsProducer
specifier|public
name|DocValuesProducer
name|fieldsProducer
parameter_list|(
name|SegmentReadState
name|state
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|filename
init|=
name|IndexFileNames
operator|.
name|segmentFileName
argument_list|(
name|state
operator|.
name|segmentInfo
operator|.
name|name
argument_list|,
literal|"dv"
argument_list|,
name|IndexFileNames
operator|.
name|COMPOUND_FILE_EXTENSION
argument_list|)
decl_stmt|;
return|return
operator|new
name|Lucene40DocValuesReader
argument_list|(
name|state
argument_list|,
name|filename
argument_list|,
name|Lucene40FieldInfosReader
operator|.
name|LEGACY_DV_TYPE_KEY
argument_list|)
return|;
block|}
comment|// constants for VAR_INTS
DECL|field|VAR_INTS_CODEC_NAME
specifier|static
specifier|final
name|String
name|VAR_INTS_CODEC_NAME
init|=
literal|"PackedInts"
decl_stmt|;
DECL|field|VAR_INTS_VERSION_START
specifier|static
specifier|final
name|int
name|VAR_INTS_VERSION_START
init|=
literal|0
decl_stmt|;
DECL|field|VAR_INTS_VERSION_CURRENT
specifier|static
specifier|final
name|int
name|VAR_INTS_VERSION_CURRENT
init|=
name|VAR_INTS_VERSION_START
decl_stmt|;
DECL|field|VAR_INTS_PACKED
specifier|static
specifier|final
name|byte
name|VAR_INTS_PACKED
init|=
literal|0x00
decl_stmt|;
DECL|field|VAR_INTS_FIXED_64
specifier|static
specifier|final
name|byte
name|VAR_INTS_FIXED_64
init|=
literal|0x01
decl_stmt|;
comment|// constants for FIXED_INTS_8, FIXED_INTS_16, FIXED_INTS_32, FIXED_INTS_64
DECL|field|INTS_CODEC_NAME
specifier|static
specifier|final
name|String
name|INTS_CODEC_NAME
init|=
literal|"Ints"
decl_stmt|;
DECL|field|INTS_VERSION_START
specifier|static
specifier|final
name|int
name|INTS_VERSION_START
init|=
literal|0
decl_stmt|;
DECL|field|INTS_VERSION_CURRENT
specifier|static
specifier|final
name|int
name|INTS_VERSION_CURRENT
init|=
name|INTS_VERSION_START
decl_stmt|;
comment|// constants for FLOAT_32, FLOAT_64
DECL|field|FLOATS_CODEC_NAME
specifier|static
specifier|final
name|String
name|FLOATS_CODEC_NAME
init|=
literal|"Floats"
decl_stmt|;
DECL|field|FLOATS_VERSION_START
specifier|static
specifier|final
name|int
name|FLOATS_VERSION_START
init|=
literal|0
decl_stmt|;
DECL|field|FLOATS_VERSION_CURRENT
specifier|static
specifier|final
name|int
name|FLOATS_VERSION_CURRENT
init|=
name|FLOATS_VERSION_START
decl_stmt|;
comment|// constants for BYTES_FIXED_STRAIGHT
DECL|field|BYTES_FIXED_STRAIGHT_CODEC_NAME
specifier|static
specifier|final
name|String
name|BYTES_FIXED_STRAIGHT_CODEC_NAME
init|=
literal|"FixedStraightBytes"
decl_stmt|;
DECL|field|BYTES_FIXED_STRAIGHT_VERSION_START
specifier|static
specifier|final
name|int
name|BYTES_FIXED_STRAIGHT_VERSION_START
init|=
literal|0
decl_stmt|;
DECL|field|BYTES_FIXED_STRAIGHT_VERSION_CURRENT
specifier|static
specifier|final
name|int
name|BYTES_FIXED_STRAIGHT_VERSION_CURRENT
init|=
name|BYTES_FIXED_STRAIGHT_VERSION_START
decl_stmt|;
block|}
end_class
end_unit
