begin_unit
begin_package
DECL|package|org.apache.lucene.codecs.appending
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|appending
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|BlockTreeTermsWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|PostingsWriterBase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SegmentWriteState
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexOutput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|CodecUtil
import|;
end_import
begin_comment
comment|/**  * Append-only version of {@link BlockTreeTermsWriter}  * @lucene.experimental  */
end_comment
begin_class
DECL|class|AppendingTermsWriter
specifier|public
class|class
name|AppendingTermsWriter
extends|extends
name|BlockTreeTermsWriter
block|{
DECL|field|TERMS_CODEC_NAME
specifier|final
specifier|static
name|String
name|TERMS_CODEC_NAME
init|=
literal|"APPENDING_TERMS_DICT"
decl_stmt|;
DECL|field|TERMS_VERSION_START
specifier|final
specifier|static
name|int
name|TERMS_VERSION_START
init|=
literal|0
decl_stmt|;
DECL|field|TERMS_VERSION_CURRENT
specifier|final
specifier|static
name|int
name|TERMS_VERSION_CURRENT
init|=
name|TERMS_VERSION_START
decl_stmt|;
DECL|field|TERMS_INDEX_CODEC_NAME
specifier|final
specifier|static
name|String
name|TERMS_INDEX_CODEC_NAME
init|=
literal|"APPENDING_TERMS_INDEX"
decl_stmt|;
DECL|field|TERMS_INDEX_VERSION_START
specifier|final
specifier|static
name|int
name|TERMS_INDEX_VERSION_START
init|=
literal|0
decl_stmt|;
DECL|field|TERMS_INDEX_VERSION_CURRENT
specifier|final
specifier|static
name|int
name|TERMS_INDEX_VERSION_CURRENT
init|=
name|TERMS_INDEX_VERSION_START
decl_stmt|;
DECL|method|AppendingTermsWriter
specifier|public
name|AppendingTermsWriter
parameter_list|(
name|SegmentWriteState
name|state
parameter_list|,
name|PostingsWriterBase
name|postingsWriter
parameter_list|,
name|int
name|minItemsInBlock
parameter_list|,
name|int
name|maxItemsInBlock
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|state
argument_list|,
name|postingsWriter
argument_list|,
name|minItemsInBlock
argument_list|,
name|maxItemsInBlock
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeHeader
specifier|protected
name|void
name|writeHeader
parameter_list|(
name|IndexOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|CodecUtil
operator|.
name|writeHeader
argument_list|(
name|out
argument_list|,
name|TERMS_CODEC_NAME
argument_list|,
name|TERMS_VERSION_CURRENT
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeIndexHeader
specifier|protected
name|void
name|writeIndexHeader
parameter_list|(
name|IndexOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|CodecUtil
operator|.
name|writeHeader
argument_list|(
name|out
argument_list|,
name|TERMS_INDEX_CODEC_NAME
argument_list|,
name|TERMS_INDEX_VERSION_CURRENT
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeTrailer
specifier|protected
name|void
name|writeTrailer
parameter_list|(
name|IndexOutput
name|out
parameter_list|,
name|long
name|dirStart
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeLong
argument_list|(
name|dirStart
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeIndexTrailer
specifier|protected
name|void
name|writeIndexTrailer
parameter_list|(
name|IndexOutput
name|indexOut
parameter_list|,
name|long
name|dirStart
parameter_list|)
throws|throws
name|IOException
block|{
name|indexOut
operator|.
name|writeLong
argument_list|(
name|dirStart
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
