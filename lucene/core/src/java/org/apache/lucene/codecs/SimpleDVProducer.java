begin_unit
begin_package
DECL|package|org.apache.lucene.codecs
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|BinaryDocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|FieldInfo
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|NumericDocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SortedDocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_class
DECL|class|SimpleDVProducer
specifier|public
specifier|abstract
class|class
name|SimpleDVProducer
implements|implements
name|Closeable
block|{
DECL|field|maxDoc
specifier|private
specifier|final
name|int
name|maxDoc
decl_stmt|;
DECL|method|SimpleDVProducer
specifier|protected
name|SimpleDVProducer
parameter_list|(
name|int
name|maxDoc
parameter_list|)
block|{
comment|// nocommit kinda messy?
name|this
operator|.
name|maxDoc
operator|=
name|maxDoc
expr_stmt|;
block|}
DECL|method|getDirectNumeric
specifier|public
specifier|abstract
name|NumericDocValues
name|getDirectNumeric
parameter_list|(
name|FieldInfo
name|field
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/** Loads all values into RAM. */
DECL|method|getNumeric
specifier|public
name|NumericDocValues
name|getNumeric
parameter_list|(
name|FieldInfo
name|field
parameter_list|)
throws|throws
name|IOException
block|{
name|NumericDocValues
name|source
init|=
name|getDirectNumeric
argument_list|(
name|field
argument_list|)
decl_stmt|;
comment|// nocommit more ram efficient?
specifier|final
name|long
index|[]
name|values
init|=
operator|new
name|long
index|[
name|maxDoc
index|]
decl_stmt|;
for|for
control|(
name|int
name|docID
init|=
literal|0
init|;
name|docID
operator|<
name|maxDoc
condition|;
name|docID
operator|++
control|)
block|{
name|values
index|[
name|docID
index|]
operator|=
name|source
operator|.
name|get
argument_list|(
name|docID
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|NumericDocValues
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|long
name|get
parameter_list|(
name|int
name|docID
parameter_list|)
block|{
return|return
name|values
index|[
name|docID
index|]
return|;
block|}
block|}
return|;
block|}
DECL|method|getDirectBinary
specifier|public
specifier|abstract
name|BinaryDocValues
name|getDirectBinary
parameter_list|(
name|FieldInfo
name|field
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/** Loads all values into RAM. */
DECL|method|getBinary
specifier|public
name|BinaryDocValues
name|getBinary
parameter_list|(
name|FieldInfo
name|field
parameter_list|)
throws|throws
name|IOException
block|{
name|BinaryDocValues
name|source
init|=
name|getDirectBinary
argument_list|(
name|field
argument_list|)
decl_stmt|;
comment|// nocommit more ram efficient
specifier|final
name|byte
index|[]
index|[]
name|values
init|=
operator|new
name|byte
index|[
name|maxDoc
index|]
index|[]
decl_stmt|;
name|BytesRef
name|scratch
init|=
operator|new
name|BytesRef
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|docID
init|=
literal|0
init|;
name|docID
operator|<
name|maxDoc
condition|;
name|docID
operator|++
control|)
block|{
name|source
operator|.
name|get
argument_list|(
name|docID
argument_list|,
name|scratch
argument_list|)
expr_stmt|;
name|values
index|[
name|docID
index|]
operator|=
operator|new
name|byte
index|[
name|scratch
operator|.
name|length
index|]
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|scratch
operator|.
name|bytes
argument_list|,
name|scratch
operator|.
name|offset
argument_list|,
name|values
index|[
name|docID
index|]
argument_list|,
literal|0
argument_list|,
name|scratch
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|BinaryDocValues
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|get
parameter_list|(
name|int
name|docID
parameter_list|,
name|BytesRef
name|result
parameter_list|)
block|{
name|result
operator|.
name|bytes
operator|=
name|values
index|[
name|docID
index|]
expr_stmt|;
name|result
operator|.
name|offset
operator|=
literal|0
expr_stmt|;
name|result
operator|.
name|length
operator|=
name|result
operator|.
name|bytes
operator|.
name|length
expr_stmt|;
block|}
block|}
return|;
block|}
DECL|method|getDirectSorted
specifier|public
specifier|abstract
name|SortedDocValues
name|getDirectSorted
parameter_list|(
name|FieldInfo
name|field
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/** Loads all values into RAM. */
DECL|method|getSorted
specifier|public
name|SortedDocValues
name|getSorted
parameter_list|(
name|FieldInfo
name|field
parameter_list|)
throws|throws
name|IOException
block|{
name|SortedDocValues
name|source
init|=
name|getDirectSorted
argument_list|(
name|field
argument_list|)
decl_stmt|;
specifier|final
name|int
name|valueCount
init|=
name|source
operator|.
name|getValueCount
argument_list|()
decl_stmt|;
specifier|final
name|byte
index|[]
index|[]
name|values
init|=
operator|new
name|byte
index|[
name|valueCount
index|]
index|[]
decl_stmt|;
name|BytesRef
name|scratch
init|=
operator|new
name|BytesRef
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|ord
init|=
literal|0
init|;
name|ord
operator|<
name|valueCount
condition|;
name|ord
operator|++
control|)
block|{
name|source
operator|.
name|lookupOrd
argument_list|(
name|ord
argument_list|,
name|scratch
argument_list|)
expr_stmt|;
name|values
index|[
name|ord
index|]
operator|=
operator|new
name|byte
index|[
name|scratch
operator|.
name|length
index|]
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|scratch
operator|.
name|bytes
argument_list|,
name|scratch
operator|.
name|offset
argument_list|,
name|values
index|[
name|ord
index|]
argument_list|,
literal|0
argument_list|,
name|scratch
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
specifier|final
name|int
index|[]
name|ords
init|=
operator|new
name|int
index|[
name|maxDoc
index|]
decl_stmt|;
for|for
control|(
name|int
name|docID
init|=
literal|0
init|;
name|docID
operator|<
name|maxDoc
condition|;
name|docID
operator|++
control|)
block|{
name|ords
index|[
name|docID
index|]
operator|=
name|source
operator|.
name|getOrd
argument_list|(
name|docID
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|SortedDocValues
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|getOrd
parameter_list|(
name|int
name|docID
parameter_list|)
block|{
return|return
name|ords
index|[
name|docID
index|]
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|lookupOrd
parameter_list|(
name|int
name|ord
parameter_list|,
name|BytesRef
name|result
parameter_list|)
block|{
name|result
operator|.
name|bytes
operator|=
name|values
index|[
name|ord
index|]
expr_stmt|;
name|result
operator|.
name|offset
operator|=
literal|0
expr_stmt|;
name|result
operator|.
name|length
operator|=
name|result
operator|.
name|bytes
operator|.
name|length
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getValueCount
parameter_list|()
block|{
return|return
name|valueCount
return|;
block|}
block|}
return|;
block|}
block|}
end_class
end_unit
