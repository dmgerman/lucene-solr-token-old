begin_unit
begin_package
DECL|package|org.apache.lucene.codecs
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
package|;
end_package
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_comment
comment|/**   * a utility class to write missing values for SORTED_SET as if they were the empty string  * (to simulate pre-Lucene4.5 dv behavior for testing old codecs)  */
end_comment
begin_comment
comment|// nocommit: move this to test-framework with all the impersonators of
end_comment
begin_comment
comment|// these old codecs once new memory/disk codecs are written that support missing
end_comment
begin_class
DECL|class|MissingOrdRemapper
specifier|public
class|class
name|MissingOrdRemapper
block|{
comment|/** insert an empty byte[] to the front of this iterable */
DECL|method|insertEmptyValue
specifier|public
specifier|static
name|Iterable
argument_list|<
name|BytesRef
argument_list|>
name|insertEmptyValue
parameter_list|(
specifier|final
name|Iterable
argument_list|<
name|BytesRef
argument_list|>
name|iterable
parameter_list|)
block|{
return|return
operator|new
name|Iterable
argument_list|<
name|BytesRef
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|BytesRef
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
operator|new
name|Iterator
argument_list|<
name|BytesRef
argument_list|>
argument_list|()
block|{
name|boolean
name|seenEmpty
init|=
literal|false
decl_stmt|;
name|Iterator
argument_list|<
name|BytesRef
argument_list|>
name|in
init|=
name|iterable
operator|.
name|iterator
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
operator|!
name|seenEmpty
operator|||
name|in
operator|.
name|hasNext
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|BytesRef
name|next
parameter_list|()
block|{
if|if
condition|(
operator|!
name|seenEmpty
condition|)
block|{
name|seenEmpty
operator|=
literal|true
expr_stmt|;
return|return
operator|new
name|BytesRef
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|in
operator|.
name|next
argument_list|()
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
return|;
block|}
block|}
return|;
block|}
comment|/** remaps ord -1 to ord 0 on this iterable. */
DECL|method|mapMissingToOrd0
specifier|public
specifier|static
name|Iterable
argument_list|<
name|Number
argument_list|>
name|mapMissingToOrd0
parameter_list|(
specifier|final
name|Iterable
argument_list|<
name|Number
argument_list|>
name|iterable
parameter_list|)
block|{
return|return
operator|new
name|Iterable
argument_list|<
name|Number
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|Number
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
operator|new
name|Iterator
argument_list|<
name|Number
argument_list|>
argument_list|()
block|{
name|Iterator
argument_list|<
name|Number
argument_list|>
name|in
init|=
name|iterable
operator|.
name|iterator
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|in
operator|.
name|hasNext
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Number
name|next
parameter_list|()
block|{
name|Number
name|n
init|=
name|in
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|n
operator|.
name|longValue
argument_list|()
operator|==
operator|-
literal|1
condition|)
block|{
return|return
literal|0
return|;
block|}
else|else
block|{
return|return
name|n
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
return|;
block|}
block|}
return|;
block|}
comment|/** remaps every ord+1 on this iterable */
DECL|method|mapAllOrds
specifier|public
specifier|static
name|Iterable
argument_list|<
name|Number
argument_list|>
name|mapAllOrds
parameter_list|(
specifier|final
name|Iterable
argument_list|<
name|Number
argument_list|>
name|iterable
parameter_list|)
block|{
return|return
operator|new
name|Iterable
argument_list|<
name|Number
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|Number
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
operator|new
name|Iterator
argument_list|<
name|Number
argument_list|>
argument_list|()
block|{
name|Iterator
argument_list|<
name|Number
argument_list|>
name|in
init|=
name|iterable
operator|.
name|iterator
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|in
operator|.
name|hasNext
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Number
name|next
parameter_list|()
block|{
name|Number
name|n
init|=
name|in
operator|.
name|next
argument_list|()
decl_stmt|;
return|return
name|n
operator|.
name|longValue
argument_list|()
operator|+
literal|1
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
return|;
block|}
block|}
return|;
block|}
block|}
end_class
end_unit
