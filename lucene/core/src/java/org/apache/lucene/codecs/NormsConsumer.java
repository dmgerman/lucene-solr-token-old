begin_unit
begin_package
DECL|package|org.apache.lucene.codecs
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NoSuchElementException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|FieldInfo
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|FieldInfos
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|MergeState
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|NumericDocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SegmentWriteState
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Bits
import|;
end_import
begin_comment
comment|/**   * Abstract API that consumes normalization values.    * Concrete implementations of this  * actually do "something" with the norms (write it into  * the index in a specific format).  *<p>  * The lifecycle is:  *<ol>  *<li>NormsConsumer is created by   *       {@link NormsFormat#normsConsumer(SegmentWriteState)}.  *<li>{@link #addNormsField} is called for each field with  *       normalization values. The API is a "pull" rather  *       than "push", and the implementation is free to iterate over the   *       values multiple times ({@link Iterable#iterator()}).  *<li>After all fields are added, the consumer is {@link #close}d.  *</ol>  *  * @lucene.experimental  */
end_comment
begin_class
DECL|class|NormsConsumer
specifier|public
specifier|abstract
class|class
name|NormsConsumer
implements|implements
name|Closeable
block|{
comment|/** Sole constructor. (For invocation by subclass     *  constructors, typically implicit.) */
DECL|method|NormsConsumer
specifier|protected
name|NormsConsumer
parameter_list|()
block|{}
comment|/**    * Writes normalization values for a field.    * @param field field information    * @param values Iterable of numeric values (one for each document).    * @throws IOException if an I/O error occurred.    */
DECL|method|addNormsField
specifier|public
specifier|abstract
name|void
name|addNormsField
parameter_list|(
name|FieldInfo
name|field
parameter_list|,
name|Iterable
argument_list|<
name|Number
argument_list|>
name|values
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/** Merges in the fields from the readers in     *<code>mergeState</code>. The default implementation     *  calls {@link #mergeNormsField} for each field,    *  filling segments with missing norms for the field with zeros.     *  Implementations can override this method     *  for more sophisticated merging (bulk-byte copying, etc). */
DECL|method|merge
specifier|public
name|void
name|merge
parameter_list|(
name|MergeState
name|mergeState
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|NormsProducer
name|normsProducer
range|:
name|mergeState
operator|.
name|normsProducers
control|)
block|{
if|if
condition|(
name|normsProducer
operator|!=
literal|null
condition|)
block|{
name|normsProducer
operator|.
name|checkIntegrity
argument_list|()
expr_stmt|;
block|}
block|}
for|for
control|(
name|FieldInfo
name|mergeFieldInfo
range|:
name|mergeState
operator|.
name|mergeFieldInfos
control|)
block|{
if|if
condition|(
name|mergeFieldInfo
operator|.
name|hasNorms
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|NumericDocValues
argument_list|>
name|toMerge
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|mergeState
operator|.
name|normsProducers
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|NormsProducer
name|normsProducer
init|=
name|mergeState
operator|.
name|normsProducers
index|[
name|i
index|]
decl_stmt|;
name|NumericDocValues
name|norms
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|normsProducer
operator|!=
literal|null
condition|)
block|{
name|FieldInfo
name|fieldInfo
init|=
name|mergeState
operator|.
name|fieldInfos
index|[
name|i
index|]
operator|.
name|fieldInfo
argument_list|(
name|mergeFieldInfo
operator|.
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|fieldInfo
operator|!=
literal|null
operator|&&
name|fieldInfo
operator|.
name|hasNorms
argument_list|()
condition|)
block|{
comment|// TODO: use dedicated merge API, so impl can do merge-specific checksumming, and won't cache values in RAM
name|norms
operator|=
name|normsProducer
operator|.
name|getNorms
argument_list|(
name|fieldInfo
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|norms
operator|==
literal|null
condition|)
block|{
name|norms
operator|=
name|DocValues
operator|.
name|emptyNumeric
argument_list|()
expr_stmt|;
block|}
name|toMerge
operator|.
name|add
argument_list|(
name|norms
argument_list|)
expr_stmt|;
block|}
name|mergeNormsField
argument_list|(
name|mergeFieldInfo
argument_list|,
name|mergeState
argument_list|,
name|toMerge
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Merges the norms from<code>toMerge</code>.    *<p>    * The default implementation calls {@link #addNormsField}, passing    * an Iterable that merges and filters deleted documents on the fly.    */
DECL|method|mergeNormsField
specifier|public
name|void
name|mergeNormsField
parameter_list|(
specifier|final
name|FieldInfo
name|fieldInfo
parameter_list|,
specifier|final
name|MergeState
name|mergeState
parameter_list|,
specifier|final
name|List
argument_list|<
name|NumericDocValues
argument_list|>
name|toMerge
parameter_list|)
throws|throws
name|IOException
block|{
comment|// TODO: try to share code with default merge of DVConsumer by passing MatchAllBits ?
name|addNormsField
argument_list|(
name|fieldInfo
argument_list|,
operator|new
name|Iterable
argument_list|<
name|Number
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|Number
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
operator|new
name|Iterator
argument_list|<
name|Number
argument_list|>
argument_list|()
block|{
name|int
name|readerUpto
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|docIDUpto
decl_stmt|;
name|long
name|nextValue
decl_stmt|;
name|int
name|maxDoc
decl_stmt|;
name|NumericDocValues
name|currentValues
decl_stmt|;
name|Bits
name|currentLiveDocs
decl_stmt|;
name|boolean
name|nextIsSet
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|nextIsSet
operator|||
name|setNext
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|Number
name|next
parameter_list|()
block|{
if|if
condition|(
operator|!
name|hasNext
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|NoSuchElementException
argument_list|()
throw|;
block|}
assert|assert
name|nextIsSet
assert|;
name|nextIsSet
operator|=
literal|false
expr_stmt|;
return|return
name|nextValue
return|;
block|}
specifier|private
name|boolean
name|setNext
parameter_list|()
block|{
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
name|readerUpto
operator|==
name|toMerge
operator|.
name|size
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|currentValues
operator|==
literal|null
operator|||
name|docIDUpto
operator|==
name|maxDoc
condition|)
block|{
name|readerUpto
operator|++
expr_stmt|;
if|if
condition|(
name|readerUpto
operator|<
name|toMerge
operator|.
name|size
argument_list|()
condition|)
block|{
name|currentValues
operator|=
name|toMerge
operator|.
name|get
argument_list|(
name|readerUpto
argument_list|)
expr_stmt|;
name|currentLiveDocs
operator|=
name|mergeState
operator|.
name|liveDocs
index|[
name|readerUpto
index|]
expr_stmt|;
name|maxDoc
operator|=
name|mergeState
operator|.
name|maxDocs
index|[
name|readerUpto
index|]
expr_stmt|;
block|}
name|docIDUpto
operator|=
literal|0
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|currentLiveDocs
operator|==
literal|null
operator|||
name|currentLiveDocs
operator|.
name|get
argument_list|(
name|docIDUpto
argument_list|)
condition|)
block|{
name|nextIsSet
operator|=
literal|true
expr_stmt|;
name|nextValue
operator|=
name|currentValues
operator|.
name|get
argument_list|(
name|docIDUpto
argument_list|)
expr_stmt|;
name|docIDUpto
operator|++
expr_stmt|;
return|return
literal|true
return|;
block|}
name|docIDUpto
operator|++
expr_stmt|;
block|}
block|}
block|}
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
