begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.codecs.compressing
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|compressing
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|CodecUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|StoredFieldsReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|StoredFieldsWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|compressing
operator|.
name|CompressingStoredFieldsReader
operator|.
name|SerializedDocument
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|CorruptIndexException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|FieldInfo
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|FieldInfos
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexFileNames
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexableField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|MergeState
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SegmentInfo
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|DataOutput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IOContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexInput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexOutput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|ArrayUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BitUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Bits
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|packed
operator|.
name|PackedInts
import|;
end_import
begin_comment
comment|/**  * {@link StoredFieldsWriter} impl for {@link CompressingStoredFieldsFormat}.  * @lucene.experimental  */
end_comment
begin_class
DECL|class|CompressingStoredFieldsWriter
specifier|public
specifier|final
class|class
name|CompressingStoredFieldsWriter
extends|extends
name|StoredFieldsWriter
block|{
comment|/** Extension of stored fields file */
DECL|field|FIELDS_EXTENSION
specifier|public
specifier|static
specifier|final
name|String
name|FIELDS_EXTENSION
init|=
literal|"fdt"
decl_stmt|;
comment|/** Extension of stored fields index file */
DECL|field|FIELDS_INDEX_EXTENSION
specifier|public
specifier|static
specifier|final
name|String
name|FIELDS_INDEX_EXTENSION
init|=
literal|"fdx"
decl_stmt|;
DECL|field|STRING
specifier|static
specifier|final
name|int
name|STRING
init|=
literal|0x00
decl_stmt|;
DECL|field|BYTE_ARR
specifier|static
specifier|final
name|int
name|BYTE_ARR
init|=
literal|0x01
decl_stmt|;
DECL|field|NUMERIC_INT
specifier|static
specifier|final
name|int
name|NUMERIC_INT
init|=
literal|0x02
decl_stmt|;
DECL|field|NUMERIC_FLOAT
specifier|static
specifier|final
name|int
name|NUMERIC_FLOAT
init|=
literal|0x03
decl_stmt|;
DECL|field|NUMERIC_LONG
specifier|static
specifier|final
name|int
name|NUMERIC_LONG
init|=
literal|0x04
decl_stmt|;
DECL|field|NUMERIC_DOUBLE
specifier|static
specifier|final
name|int
name|NUMERIC_DOUBLE
init|=
literal|0x05
decl_stmt|;
DECL|field|TYPE_BITS
specifier|static
specifier|final
name|int
name|TYPE_BITS
init|=
name|PackedInts
operator|.
name|bitsRequired
argument_list|(
name|NUMERIC_DOUBLE
argument_list|)
decl_stmt|;
DECL|field|TYPE_MASK
specifier|static
specifier|final
name|int
name|TYPE_MASK
init|=
operator|(
name|int
operator|)
name|PackedInts
operator|.
name|maxValue
argument_list|(
name|TYPE_BITS
argument_list|)
decl_stmt|;
DECL|field|CODEC_SFX_IDX
specifier|static
specifier|final
name|String
name|CODEC_SFX_IDX
init|=
literal|"Index"
decl_stmt|;
DECL|field|CODEC_SFX_DAT
specifier|static
specifier|final
name|String
name|CODEC_SFX_DAT
init|=
literal|"Data"
decl_stmt|;
DECL|field|VERSION_START
specifier|static
specifier|final
name|int
name|VERSION_START
init|=
literal|0
decl_stmt|;
DECL|field|VERSION_CHUNK_STATS
specifier|static
specifier|final
name|int
name|VERSION_CHUNK_STATS
init|=
literal|1
decl_stmt|;
DECL|field|VERSION_CURRENT
specifier|static
specifier|final
name|int
name|VERSION_CURRENT
init|=
name|VERSION_CHUNK_STATS
decl_stmt|;
DECL|field|segment
specifier|private
specifier|final
name|String
name|segment
decl_stmt|;
DECL|field|indexWriter
specifier|private
name|CompressingStoredFieldsIndexWriter
name|indexWriter
decl_stmt|;
DECL|field|fieldsStream
specifier|private
name|IndexOutput
name|fieldsStream
decl_stmt|;
DECL|field|compressor
specifier|private
specifier|final
name|Compressor
name|compressor
decl_stmt|;
DECL|field|compressionMode
specifier|private
specifier|final
name|CompressionMode
name|compressionMode
decl_stmt|;
DECL|field|chunkSize
specifier|private
specifier|final
name|int
name|chunkSize
decl_stmt|;
DECL|field|maxDocsPerChunk
specifier|private
specifier|final
name|int
name|maxDocsPerChunk
decl_stmt|;
DECL|field|bufferedDocs
specifier|private
specifier|final
name|GrowableByteArrayDataOutput
name|bufferedDocs
decl_stmt|;
DECL|field|numStoredFields
specifier|private
name|int
index|[]
name|numStoredFields
decl_stmt|;
comment|// number of stored fields
DECL|field|endOffsets
specifier|private
name|int
index|[]
name|endOffsets
decl_stmt|;
comment|// end offsets in bufferedDocs
DECL|field|docBase
specifier|private
name|int
name|docBase
decl_stmt|;
comment|// doc ID at the beginning of the chunk
DECL|field|numBufferedDocs
specifier|private
name|int
name|numBufferedDocs
decl_stmt|;
comment|// docBase + numBufferedDocs == current doc ID
DECL|field|numChunks
specifier|private
name|long
name|numChunks
decl_stmt|;
comment|// number of compressed blocks written
DECL|field|numDirtyChunks
specifier|private
name|long
name|numDirtyChunks
decl_stmt|;
comment|// number of incomplete compressed blocks written
comment|/** Sole constructor. */
DECL|method|CompressingStoredFieldsWriter
specifier|public
name|CompressingStoredFieldsWriter
parameter_list|(
name|Directory
name|directory
parameter_list|,
name|SegmentInfo
name|si
parameter_list|,
name|String
name|segmentSuffix
parameter_list|,
name|IOContext
name|context
parameter_list|,
name|String
name|formatName
parameter_list|,
name|CompressionMode
name|compressionMode
parameter_list|,
name|int
name|chunkSize
parameter_list|,
name|int
name|maxDocsPerChunk
parameter_list|,
name|int
name|blockSize
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|directory
operator|!=
literal|null
assert|;
name|this
operator|.
name|segment
operator|=
name|si
operator|.
name|name
expr_stmt|;
name|this
operator|.
name|compressionMode
operator|=
name|compressionMode
expr_stmt|;
name|this
operator|.
name|compressor
operator|=
name|compressionMode
operator|.
name|newCompressor
argument_list|()
expr_stmt|;
name|this
operator|.
name|chunkSize
operator|=
name|chunkSize
expr_stmt|;
name|this
operator|.
name|maxDocsPerChunk
operator|=
name|maxDocsPerChunk
expr_stmt|;
name|this
operator|.
name|docBase
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|bufferedDocs
operator|=
operator|new
name|GrowableByteArrayDataOutput
argument_list|(
name|chunkSize
argument_list|)
expr_stmt|;
name|this
operator|.
name|numStoredFields
operator|=
operator|new
name|int
index|[
literal|16
index|]
expr_stmt|;
name|this
operator|.
name|endOffsets
operator|=
operator|new
name|int
index|[
literal|16
index|]
expr_stmt|;
name|this
operator|.
name|numBufferedDocs
operator|=
literal|0
expr_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|IndexOutput
name|indexStream
init|=
name|directory
operator|.
name|createOutput
argument_list|(
name|IndexFileNames
operator|.
name|segmentFileName
argument_list|(
name|segment
argument_list|,
name|segmentSuffix
argument_list|,
name|FIELDS_INDEX_EXTENSION
argument_list|)
argument_list|,
name|context
argument_list|)
decl_stmt|;
try|try
block|{
name|fieldsStream
operator|=
name|directory
operator|.
name|createOutput
argument_list|(
name|IndexFileNames
operator|.
name|segmentFileName
argument_list|(
name|segment
argument_list|,
name|segmentSuffix
argument_list|,
name|FIELDS_EXTENSION
argument_list|)
argument_list|,
name|context
argument_list|)
expr_stmt|;
specifier|final
name|String
name|codecNameIdx
init|=
name|formatName
operator|+
name|CODEC_SFX_IDX
decl_stmt|;
specifier|final
name|String
name|codecNameDat
init|=
name|formatName
operator|+
name|CODEC_SFX_DAT
decl_stmt|;
name|CodecUtil
operator|.
name|writeIndexHeader
argument_list|(
name|indexStream
argument_list|,
name|codecNameIdx
argument_list|,
name|VERSION_CURRENT
argument_list|,
name|si
operator|.
name|getId
argument_list|()
argument_list|,
name|segmentSuffix
argument_list|)
expr_stmt|;
name|CodecUtil
operator|.
name|writeIndexHeader
argument_list|(
name|fieldsStream
argument_list|,
name|codecNameDat
argument_list|,
name|VERSION_CURRENT
argument_list|,
name|si
operator|.
name|getId
argument_list|()
argument_list|,
name|segmentSuffix
argument_list|)
expr_stmt|;
assert|assert
name|CodecUtil
operator|.
name|indexHeaderLength
argument_list|(
name|codecNameDat
argument_list|,
name|segmentSuffix
argument_list|)
operator|==
name|fieldsStream
operator|.
name|getFilePointer
argument_list|()
assert|;
assert|assert
name|CodecUtil
operator|.
name|indexHeaderLength
argument_list|(
name|codecNameIdx
argument_list|,
name|segmentSuffix
argument_list|)
operator|==
name|indexStream
operator|.
name|getFilePointer
argument_list|()
assert|;
name|indexWriter
operator|=
operator|new
name|CompressingStoredFieldsIndexWriter
argument_list|(
name|indexStream
argument_list|,
name|blockSize
argument_list|)
expr_stmt|;
name|indexStream
operator|=
literal|null
expr_stmt|;
name|fieldsStream
operator|.
name|writeVInt
argument_list|(
name|chunkSize
argument_list|)
expr_stmt|;
name|fieldsStream
operator|.
name|writeVInt
argument_list|(
name|PackedInts
operator|.
name|VERSION_CURRENT
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|IOUtils
operator|.
name|closeWhileHandlingException
argument_list|(
name|fieldsStream
argument_list|,
name|indexStream
argument_list|,
name|indexWriter
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|IOUtils
operator|.
name|close
argument_list|(
name|fieldsStream
argument_list|,
name|indexWriter
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|fieldsStream
operator|=
literal|null
expr_stmt|;
name|indexWriter
operator|=
literal|null
expr_stmt|;
block|}
block|}
DECL|field|numStoredFieldsInDoc
specifier|private
name|int
name|numStoredFieldsInDoc
decl_stmt|;
annotation|@
name|Override
DECL|method|startDocument
specifier|public
name|void
name|startDocument
parameter_list|()
throws|throws
name|IOException
block|{   }
annotation|@
name|Override
DECL|method|finishDocument
specifier|public
name|void
name|finishDocument
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|numBufferedDocs
operator|==
name|this
operator|.
name|numStoredFields
operator|.
name|length
condition|)
block|{
specifier|final
name|int
name|newLength
init|=
name|ArrayUtil
operator|.
name|oversize
argument_list|(
name|numBufferedDocs
operator|+
literal|1
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|this
operator|.
name|numStoredFields
operator|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|this
operator|.
name|numStoredFields
argument_list|,
name|newLength
argument_list|)
expr_stmt|;
name|endOffsets
operator|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|endOffsets
argument_list|,
name|newLength
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|numStoredFields
index|[
name|numBufferedDocs
index|]
operator|=
name|numStoredFieldsInDoc
expr_stmt|;
name|numStoredFieldsInDoc
operator|=
literal|0
expr_stmt|;
name|endOffsets
index|[
name|numBufferedDocs
index|]
operator|=
name|bufferedDocs
operator|.
name|length
expr_stmt|;
operator|++
name|numBufferedDocs
expr_stmt|;
if|if
condition|(
name|triggerFlush
argument_list|()
condition|)
block|{
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|saveInts
specifier|private
specifier|static
name|void
name|saveInts
parameter_list|(
name|int
index|[]
name|values
parameter_list|,
name|int
name|length
parameter_list|,
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|length
operator|>
literal|0
assert|;
if|if
condition|(
name|length
operator|==
literal|1
condition|)
block|{
name|out
operator|.
name|writeVInt
argument_list|(
name|values
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|boolean
name|allEqual
init|=
literal|true
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|values
index|[
name|i
index|]
operator|!=
name|values
index|[
literal|0
index|]
condition|)
block|{
name|allEqual
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|allEqual
condition|)
block|{
name|out
operator|.
name|writeVInt
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|values
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|long
name|max
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|max
operator||=
name|values
index|[
name|i
index|]
expr_stmt|;
block|}
specifier|final
name|int
name|bitsRequired
init|=
name|PackedInts
operator|.
name|bitsRequired
argument_list|(
name|max
argument_list|)
decl_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|bitsRequired
argument_list|)
expr_stmt|;
specifier|final
name|PackedInts
operator|.
name|Writer
name|w
init|=
name|PackedInts
operator|.
name|getWriterNoHeader
argument_list|(
name|out
argument_list|,
name|PackedInts
operator|.
name|Format
operator|.
name|PACKED
argument_list|,
name|length
argument_list|,
name|bitsRequired
argument_list|,
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|w
operator|.
name|add
argument_list|(
name|values
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|w
operator|.
name|finish
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|writeHeader
specifier|private
name|void
name|writeHeader
parameter_list|(
name|int
name|docBase
parameter_list|,
name|int
name|numBufferedDocs
parameter_list|,
name|int
index|[]
name|numStoredFields
parameter_list|,
name|int
index|[]
name|lengths
parameter_list|,
name|boolean
name|sliced
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|int
name|slicedBit
init|=
name|sliced
condition|?
literal|1
else|:
literal|0
decl_stmt|;
comment|// save docBase and numBufferedDocs
name|fieldsStream
operator|.
name|writeVInt
argument_list|(
name|docBase
argument_list|)
expr_stmt|;
name|fieldsStream
operator|.
name|writeVInt
argument_list|(
operator|(
name|numBufferedDocs
operator|)
operator|<<
literal|1
operator||
name|slicedBit
argument_list|)
expr_stmt|;
comment|// save numStoredFields
name|saveInts
argument_list|(
name|numStoredFields
argument_list|,
name|numBufferedDocs
argument_list|,
name|fieldsStream
argument_list|)
expr_stmt|;
comment|// save lengths
name|saveInts
argument_list|(
name|lengths
argument_list|,
name|numBufferedDocs
argument_list|,
name|fieldsStream
argument_list|)
expr_stmt|;
block|}
DECL|method|triggerFlush
specifier|private
name|boolean
name|triggerFlush
parameter_list|()
block|{
return|return
name|bufferedDocs
operator|.
name|length
operator|>=
name|chunkSize
operator|||
comment|// chunks of at least chunkSize bytes
name|numBufferedDocs
operator|>=
name|maxDocsPerChunk
return|;
block|}
DECL|method|flush
specifier|private
name|void
name|flush
parameter_list|()
throws|throws
name|IOException
block|{
name|indexWriter
operator|.
name|writeIndex
argument_list|(
name|numBufferedDocs
argument_list|,
name|fieldsStream
operator|.
name|getFilePointer
argument_list|()
argument_list|)
expr_stmt|;
comment|// transform end offsets into lengths
specifier|final
name|int
index|[]
name|lengths
init|=
name|endOffsets
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|numBufferedDocs
operator|-
literal|1
init|;
name|i
operator|>
literal|0
condition|;
operator|--
name|i
control|)
block|{
name|lengths
index|[
name|i
index|]
operator|=
name|endOffsets
index|[
name|i
index|]
operator|-
name|endOffsets
index|[
name|i
operator|-
literal|1
index|]
expr_stmt|;
assert|assert
name|lengths
index|[
name|i
index|]
operator|>=
literal|0
assert|;
block|}
specifier|final
name|boolean
name|sliced
init|=
name|bufferedDocs
operator|.
name|length
operator|>=
literal|2
operator|*
name|chunkSize
decl_stmt|;
name|writeHeader
argument_list|(
name|docBase
argument_list|,
name|numBufferedDocs
argument_list|,
name|numStoredFields
argument_list|,
name|lengths
argument_list|,
name|sliced
argument_list|)
expr_stmt|;
comment|// compress stored fields to fieldsStream
if|if
condition|(
name|sliced
condition|)
block|{
comment|// big chunk, slice it
for|for
control|(
name|int
name|compressed
init|=
literal|0
init|;
name|compressed
operator|<
name|bufferedDocs
operator|.
name|length
condition|;
name|compressed
operator|+=
name|chunkSize
control|)
block|{
name|compressor
operator|.
name|compress
argument_list|(
name|bufferedDocs
operator|.
name|bytes
argument_list|,
name|compressed
argument_list|,
name|Math
operator|.
name|min
argument_list|(
name|chunkSize
argument_list|,
name|bufferedDocs
operator|.
name|length
operator|-
name|compressed
argument_list|)
argument_list|,
name|fieldsStream
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|compressor
operator|.
name|compress
argument_list|(
name|bufferedDocs
operator|.
name|bytes
argument_list|,
literal|0
argument_list|,
name|bufferedDocs
operator|.
name|length
argument_list|,
name|fieldsStream
argument_list|)
expr_stmt|;
block|}
comment|// reset
name|docBase
operator|+=
name|numBufferedDocs
expr_stmt|;
name|numBufferedDocs
operator|=
literal|0
expr_stmt|;
name|bufferedDocs
operator|.
name|length
operator|=
literal|0
expr_stmt|;
name|numChunks
operator|++
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeField
specifier|public
name|void
name|writeField
parameter_list|(
name|FieldInfo
name|info
parameter_list|,
name|IndexableField
name|field
parameter_list|)
throws|throws
name|IOException
block|{
operator|++
name|numStoredFieldsInDoc
expr_stmt|;
name|int
name|bits
init|=
literal|0
decl_stmt|;
specifier|final
name|BytesRef
name|bytes
decl_stmt|;
specifier|final
name|String
name|string
decl_stmt|;
name|Number
name|number
init|=
name|field
operator|.
name|numericValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|number
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|number
operator|instanceof
name|Byte
operator|||
name|number
operator|instanceof
name|Short
operator|||
name|number
operator|instanceof
name|Integer
condition|)
block|{
name|bits
operator|=
name|NUMERIC_INT
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|number
operator|instanceof
name|Long
condition|)
block|{
name|bits
operator|=
name|NUMERIC_LONG
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|number
operator|instanceof
name|Float
condition|)
block|{
name|bits
operator|=
name|NUMERIC_FLOAT
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|number
operator|instanceof
name|Double
condition|)
block|{
name|bits
operator|=
name|NUMERIC_DOUBLE
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"cannot store numeric type "
operator|+
name|number
operator|.
name|getClass
argument_list|()
argument_list|)
throw|;
block|}
name|string
operator|=
literal|null
expr_stmt|;
name|bytes
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|bytes
operator|=
name|field
operator|.
name|binaryValue
argument_list|()
expr_stmt|;
if|if
condition|(
name|bytes
operator|!=
literal|null
condition|)
block|{
name|bits
operator|=
name|BYTE_ARR
expr_stmt|;
name|string
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|bits
operator|=
name|STRING
expr_stmt|;
name|string
operator|=
name|field
operator|.
name|stringValue
argument_list|()
expr_stmt|;
if|if
condition|(
name|string
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"field "
operator|+
name|field
operator|.
name|name
argument_list|()
operator|+
literal|" is stored but does not have binaryValue, stringValue nor numericValue"
argument_list|)
throw|;
block|}
block|}
block|}
specifier|final
name|long
name|infoAndBits
init|=
operator|(
operator|(
operator|(
name|long
operator|)
name|info
operator|.
name|number
operator|)
operator|<<
name|TYPE_BITS
operator|)
operator||
name|bits
decl_stmt|;
name|bufferedDocs
operator|.
name|writeVLong
argument_list|(
name|infoAndBits
argument_list|)
expr_stmt|;
if|if
condition|(
name|bytes
operator|!=
literal|null
condition|)
block|{
name|bufferedDocs
operator|.
name|writeVInt
argument_list|(
name|bytes
operator|.
name|length
argument_list|)
expr_stmt|;
name|bufferedDocs
operator|.
name|writeBytes
argument_list|(
name|bytes
operator|.
name|bytes
argument_list|,
name|bytes
operator|.
name|offset
argument_list|,
name|bytes
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|string
operator|!=
literal|null
condition|)
block|{
name|bufferedDocs
operator|.
name|writeString
argument_list|(
name|string
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|number
operator|instanceof
name|Byte
operator|||
name|number
operator|instanceof
name|Short
operator|||
name|number
operator|instanceof
name|Integer
condition|)
block|{
name|bufferedDocs
operator|.
name|writeZInt
argument_list|(
name|number
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|number
operator|instanceof
name|Long
condition|)
block|{
name|writeTLong
argument_list|(
name|bufferedDocs
argument_list|,
name|number
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|number
operator|instanceof
name|Float
condition|)
block|{
name|writeZFloat
argument_list|(
name|bufferedDocs
argument_list|,
name|number
operator|.
name|floatValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|number
operator|instanceof
name|Double
condition|)
block|{
name|writeZDouble
argument_list|(
name|bufferedDocs
argument_list|,
name|number
operator|.
name|doubleValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Cannot get here"
argument_list|)
throw|;
block|}
block|}
block|}
comment|// -0 isn't compressed.
DECL|field|NEGATIVE_ZERO_FLOAT
specifier|static
specifier|final
name|int
name|NEGATIVE_ZERO_FLOAT
init|=
name|Float
operator|.
name|floatToIntBits
argument_list|(
operator|-
literal|0f
argument_list|)
decl_stmt|;
DECL|field|NEGATIVE_ZERO_DOUBLE
specifier|static
specifier|final
name|long
name|NEGATIVE_ZERO_DOUBLE
init|=
name|Double
operator|.
name|doubleToLongBits
argument_list|(
operator|-
literal|0d
argument_list|)
decl_stmt|;
comment|// for compression of timestamps
DECL|field|SECOND
specifier|static
specifier|final
name|long
name|SECOND
init|=
literal|1000L
decl_stmt|;
DECL|field|HOUR
specifier|static
specifier|final
name|long
name|HOUR
init|=
literal|60
operator|*
literal|60
operator|*
name|SECOND
decl_stmt|;
DECL|field|DAY
specifier|static
specifier|final
name|long
name|DAY
init|=
literal|24
operator|*
name|HOUR
decl_stmt|;
DECL|field|SECOND_ENCODING
specifier|static
specifier|final
name|int
name|SECOND_ENCODING
init|=
literal|0x40
decl_stmt|;
DECL|field|HOUR_ENCODING
specifier|static
specifier|final
name|int
name|HOUR_ENCODING
init|=
literal|0x80
decl_stmt|;
DECL|field|DAY_ENCODING
specifier|static
specifier|final
name|int
name|DAY_ENCODING
init|=
literal|0xC0
decl_stmt|;
comment|/**     * Writes a float in a variable-length format.  Writes between one and     * five bytes. Small integral values typically take fewer bytes.    *<p>    * ZFloat --&gt; Header, Bytes*?    *<ul>    *<li>Header --&gt; {@link DataOutput#writeByte Uint8}. When it is    *       equal to 0xFF then the value is negative and stored in the next    *       4 bytes. Otherwise if the first bit is set then the other bits    *       in the header encode the value plus one and no other    *       bytes are read. Otherwise, the value is a positive float value    *       whose first byte is the header, and 3 bytes need to be read to    *       complete it.    *<li>Bytes --&gt; Potential additional bytes to read depending on the    *       header.    *</ul>    */
DECL|method|writeZFloat
specifier|static
name|void
name|writeZFloat
parameter_list|(
name|DataOutput
name|out
parameter_list|,
name|float
name|f
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|intVal
init|=
operator|(
name|int
operator|)
name|f
decl_stmt|;
specifier|final
name|int
name|floatBits
init|=
name|Float
operator|.
name|floatToIntBits
argument_list|(
name|f
argument_list|)
decl_stmt|;
if|if
condition|(
name|f
operator|==
name|intVal
operator|&&
name|intVal
operator|>=
operator|-
literal|1
operator|&&
name|intVal
operator|<=
literal|0x7D
operator|&&
name|floatBits
operator|!=
name|NEGATIVE_ZERO_FLOAT
condition|)
block|{
comment|// small integer value [-1..125]: single byte
name|out
operator|.
name|writeByte
argument_list|(
call|(
name|byte
call|)
argument_list|(
literal|0x80
operator||
operator|(
literal|1
operator|+
name|intVal
operator|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|floatBits
operator|>>>
literal|31
operator|)
operator|==
literal|0
condition|)
block|{
comment|// other positive floats: 4 bytes
name|out
operator|.
name|writeInt
argument_list|(
name|floatBits
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// other negative float: 5 bytes
name|out
operator|.
name|writeByte
argument_list|(
operator|(
name|byte
operator|)
literal|0xFF
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|floatBits
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**     * Writes a float in a variable-length format.  Writes between one and     * five bytes. Small integral values typically take fewer bytes.    *<p>    * ZFloat --&gt; Header, Bytes*?    *<ul>    *<li>Header --&gt; {@link DataOutput#writeByte Uint8}. When it is    *       equal to 0xFF then the value is negative and stored in the next    *       8 bytes. When it is equal to 0xFE then the value is stored as a    *       float in the next 4 bytes. Otherwise if the first bit is set    *       then the other bits in the header encode the value plus one and    *       no other bytes are read. Otherwise, the value is a positive float    *       value whose first byte is the header, and 7 bytes need to be read    *       to complete it.    *<li>Bytes --&gt; Potential additional bytes to read depending on the    *       header.    *</ul>    */
DECL|method|writeZDouble
specifier|static
name|void
name|writeZDouble
parameter_list|(
name|DataOutput
name|out
parameter_list|,
name|double
name|d
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|intVal
init|=
operator|(
name|int
operator|)
name|d
decl_stmt|;
specifier|final
name|long
name|doubleBits
init|=
name|Double
operator|.
name|doubleToLongBits
argument_list|(
name|d
argument_list|)
decl_stmt|;
if|if
condition|(
name|d
operator|==
name|intVal
operator|&&
name|intVal
operator|>=
operator|-
literal|1
operator|&&
name|intVal
operator|<=
literal|0x7C
operator|&&
name|doubleBits
operator|!=
name|NEGATIVE_ZERO_DOUBLE
condition|)
block|{
comment|// small integer value [-1..124]: single byte
name|out
operator|.
name|writeByte
argument_list|(
call|(
name|byte
call|)
argument_list|(
literal|0x80
operator||
operator|(
name|intVal
operator|+
literal|1
operator|)
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
elseif|else
if|if
condition|(
name|d
operator|==
operator|(
name|float
operator|)
name|d
condition|)
block|{
comment|// d has an accurate float representation: 5 bytes
name|out
operator|.
name|writeByte
argument_list|(
operator|(
name|byte
operator|)
literal|0xFE
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|Float
operator|.
name|floatToIntBits
argument_list|(
operator|(
name|float
operator|)
name|d
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|doubleBits
operator|>>>
literal|63
operator|)
operator|==
literal|0
condition|)
block|{
comment|// other positive doubles: 8 bytes
name|out
operator|.
name|writeLong
argument_list|(
name|doubleBits
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// other negative doubles: 9 bytes
name|out
operator|.
name|writeByte
argument_list|(
operator|(
name|byte
operator|)
literal|0xFF
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
name|doubleBits
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**     * Writes a long in a variable-length format.  Writes between one and     * ten bytes. Small values or values representing timestamps with day,    * hour or second precision typically require fewer bytes.    *<p>    * ZLong --&gt; Header, Bytes*?    *<ul>    *<li>Header --&gt; The first two bits indicate the compression scheme:    *<ul>    *<li>00 - uncompressed    *<li>01 - multiple of 1000 (second)    *<li>10 - multiple of 3600000 (hour)    *<li>11 - multiple of 86400000 (day)    *</ul>    *       Then the next bit is a continuation bit, indicating whether more    *       bytes need to be read, and the last 5 bits are the lower bits of    *       the encoded value. In order to reconstruct the value, you need to    *       combine the 5 lower bits of the header with a vLong in the next    *       bytes (if the continuation bit is set to 1). Then    *       {@link BitUtil#zigZagDecode(int) zigzag-decode} it and finally    *       multiply by the multiple corresponding to the compression scheme.    *<li>Bytes --&gt; Potential additional bytes to read depending on the    *       header.    *</ul>    */
comment|// T for "timestamp"
DECL|method|writeTLong
specifier|static
name|void
name|writeTLong
parameter_list|(
name|DataOutput
name|out
parameter_list|,
name|long
name|l
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|header
decl_stmt|;
if|if
condition|(
name|l
operator|%
name|SECOND
operator|!=
literal|0
condition|)
block|{
name|header
operator|=
literal|0
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|l
operator|%
name|DAY
operator|==
literal|0
condition|)
block|{
comment|// timestamp with day precision
name|header
operator|=
name|DAY_ENCODING
expr_stmt|;
name|l
operator|/=
name|DAY
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|l
operator|%
name|HOUR
operator|==
literal|0
condition|)
block|{
comment|// timestamp with hour precision, or day precision with a timezone
name|header
operator|=
name|HOUR_ENCODING
expr_stmt|;
name|l
operator|/=
name|HOUR
expr_stmt|;
block|}
else|else
block|{
comment|// timestamp with second precision
name|header
operator|=
name|SECOND_ENCODING
expr_stmt|;
name|l
operator|/=
name|SECOND
expr_stmt|;
block|}
specifier|final
name|long
name|zigZagL
init|=
name|BitUtil
operator|.
name|zigZagEncode
argument_list|(
name|l
argument_list|)
decl_stmt|;
name|header
operator||=
operator|(
name|zigZagL
operator|&
literal|0x1F
operator|)
expr_stmt|;
comment|// last 5 bits
specifier|final
name|long
name|upperBits
init|=
name|zigZagL
operator|>>>
literal|5
decl_stmt|;
if|if
condition|(
name|upperBits
operator|!=
literal|0
condition|)
block|{
name|header
operator||=
literal|0x20
expr_stmt|;
block|}
name|out
operator|.
name|writeByte
argument_list|(
operator|(
name|byte
operator|)
name|header
argument_list|)
expr_stmt|;
if|if
condition|(
name|upperBits
operator|!=
literal|0
condition|)
block|{
name|out
operator|.
name|writeVLong
argument_list|(
name|upperBits
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|finish
specifier|public
name|void
name|finish
parameter_list|(
name|FieldInfos
name|fis
parameter_list|,
name|int
name|numDocs
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|numBufferedDocs
operator|>
literal|0
condition|)
block|{
name|flush
argument_list|()
expr_stmt|;
name|numDirtyChunks
operator|++
expr_stmt|;
comment|// incomplete: we had to force this flush
block|}
else|else
block|{
assert|assert
name|bufferedDocs
operator|.
name|length
operator|==
literal|0
assert|;
block|}
if|if
condition|(
name|docBase
operator|!=
name|numDocs
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Wrote "
operator|+
name|docBase
operator|+
literal|" docs, finish called with numDocs="
operator|+
name|numDocs
argument_list|)
throw|;
block|}
name|indexWriter
operator|.
name|finish
argument_list|(
name|numDocs
argument_list|,
name|fieldsStream
operator|.
name|getFilePointer
argument_list|()
argument_list|)
expr_stmt|;
name|fieldsStream
operator|.
name|writeVLong
argument_list|(
name|numChunks
argument_list|)
expr_stmt|;
name|fieldsStream
operator|.
name|writeVLong
argument_list|(
name|numDirtyChunks
argument_list|)
expr_stmt|;
name|CodecUtil
operator|.
name|writeFooter
argument_list|(
name|fieldsStream
argument_list|)
expr_stmt|;
assert|assert
name|bufferedDocs
operator|.
name|length
operator|==
literal|0
assert|;
block|}
comment|// bulk merge is scary: its caused corruption bugs in the past.
comment|// we try to be extra safe with this impl, but add an escape hatch to
comment|// have a workaround for undiscovered bugs.
DECL|field|BULK_MERGE_ENABLED_SYSPROP
specifier|static
specifier|final
name|String
name|BULK_MERGE_ENABLED_SYSPROP
init|=
name|CompressingStoredFieldsWriter
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|".enableBulkMerge"
decl_stmt|;
DECL|field|BULK_MERGE_ENABLED
specifier|static
specifier|final
name|boolean
name|BULK_MERGE_ENABLED
decl_stmt|;
static|static
block|{
name|boolean
name|v
init|=
literal|true
decl_stmt|;
try|try
block|{
name|v
operator|=
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
name|BULK_MERGE_ENABLED_SYSPROP
argument_list|,
literal|"true"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SecurityException
name|ignored
parameter_list|)
block|{}
name|BULK_MERGE_ENABLED
operator|=
name|v
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|merge
specifier|public
name|int
name|merge
parameter_list|(
name|MergeState
name|mergeState
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|mergeState
operator|.
name|segmentInfo
operator|.
name|getIndexSort
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// TODO: can we gain back some optos even if index is sorted?  E.g. if sort results in large chunks of contiguous docs from one sub
comment|// being copied over...?
return|return
name|super
operator|.
name|merge
argument_list|(
name|mergeState
argument_list|)
return|;
block|}
name|int
name|docCount
init|=
literal|0
decl_stmt|;
name|int
name|numReaders
init|=
name|mergeState
operator|.
name|maxDocs
operator|.
name|length
decl_stmt|;
name|MatchingReaders
name|matching
init|=
operator|new
name|MatchingReaders
argument_list|(
name|mergeState
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|readerIndex
init|=
literal|0
init|;
name|readerIndex
operator|<
name|numReaders
condition|;
name|readerIndex
operator|++
control|)
block|{
name|MergeVisitor
name|visitor
init|=
operator|new
name|MergeVisitor
argument_list|(
name|mergeState
argument_list|,
name|readerIndex
argument_list|)
decl_stmt|;
name|CompressingStoredFieldsReader
name|matchingFieldsReader
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|matching
operator|.
name|matchingReaders
index|[
name|readerIndex
index|]
condition|)
block|{
specifier|final
name|StoredFieldsReader
name|fieldsReader
init|=
name|mergeState
operator|.
name|storedFieldsReaders
index|[
name|readerIndex
index|]
decl_stmt|;
comment|// we can only bulk-copy if the matching reader is also a CompressingStoredFieldsReader
if|if
condition|(
name|fieldsReader
operator|!=
literal|null
operator|&&
name|fieldsReader
operator|instanceof
name|CompressingStoredFieldsReader
condition|)
block|{
name|matchingFieldsReader
operator|=
operator|(
name|CompressingStoredFieldsReader
operator|)
name|fieldsReader
expr_stmt|;
block|}
block|}
specifier|final
name|int
name|maxDoc
init|=
name|mergeState
operator|.
name|maxDocs
index|[
name|readerIndex
index|]
decl_stmt|;
specifier|final
name|Bits
name|liveDocs
init|=
name|mergeState
operator|.
name|liveDocs
index|[
name|readerIndex
index|]
decl_stmt|;
comment|// if its some other format, or an older version of this format, or safety switch:
if|if
condition|(
name|matchingFieldsReader
operator|==
literal|null
operator|||
name|matchingFieldsReader
operator|.
name|getVersion
argument_list|()
operator|!=
name|VERSION_CURRENT
operator|||
name|BULK_MERGE_ENABLED
operator|==
literal|false
condition|)
block|{
comment|// naive merge...
name|StoredFieldsReader
name|storedFieldsReader
init|=
name|mergeState
operator|.
name|storedFieldsReaders
index|[
name|readerIndex
index|]
decl_stmt|;
if|if
condition|(
name|storedFieldsReader
operator|!=
literal|null
condition|)
block|{
name|storedFieldsReader
operator|.
name|checkIntegrity
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|int
name|docID
init|=
literal|0
init|;
name|docID
operator|<
name|maxDoc
condition|;
name|docID
operator|++
control|)
block|{
if|if
condition|(
name|liveDocs
operator|!=
literal|null
operator|&&
name|liveDocs
operator|.
name|get
argument_list|(
name|docID
argument_list|)
operator|==
literal|false
condition|)
block|{
continue|continue;
block|}
name|startDocument
argument_list|()
expr_stmt|;
name|storedFieldsReader
operator|.
name|visitDocument
argument_list|(
name|docID
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
name|finishDocument
argument_list|()
expr_stmt|;
operator|++
name|docCount
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|matchingFieldsReader
operator|.
name|getCompressionMode
argument_list|()
operator|==
name|compressionMode
operator|&&
name|matchingFieldsReader
operator|.
name|getChunkSize
argument_list|()
operator|==
name|chunkSize
operator|&&
name|matchingFieldsReader
operator|.
name|getPackedIntsVersion
argument_list|()
operator|==
name|PackedInts
operator|.
name|VERSION_CURRENT
operator|&&
name|liveDocs
operator|==
literal|null
operator|&&
operator|!
name|tooDirty
argument_list|(
name|matchingFieldsReader
argument_list|)
condition|)
block|{
comment|// optimized merge, raw byte copy
comment|// its not worth fine-graining this if there are deletions.
comment|// if the format is older, its always handled by the naive merge case above
assert|assert
name|matchingFieldsReader
operator|.
name|getVersion
argument_list|()
operator|==
name|VERSION_CURRENT
assert|;
name|matchingFieldsReader
operator|.
name|checkIntegrity
argument_list|()
expr_stmt|;
comment|// flush any pending chunks
if|if
condition|(
name|numBufferedDocs
operator|>
literal|0
condition|)
block|{
name|flush
argument_list|()
expr_stmt|;
name|numDirtyChunks
operator|++
expr_stmt|;
comment|// incomplete: we had to force this flush
block|}
comment|// iterate over each chunk. we use the stored fields index to find chunk boundaries,
comment|// read the docstart + doccount from the chunk header (we write a new header, since doc numbers will change),
comment|// and just copy the bytes directly.
name|IndexInput
name|rawDocs
init|=
name|matchingFieldsReader
operator|.
name|getFieldsStream
argument_list|()
decl_stmt|;
name|CompressingStoredFieldsIndexReader
name|index
init|=
name|matchingFieldsReader
operator|.
name|getIndexReader
argument_list|()
decl_stmt|;
name|rawDocs
operator|.
name|seek
argument_list|(
name|index
operator|.
name|getStartPointer
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|docID
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|docID
operator|<
name|maxDoc
condition|)
block|{
comment|// read header
name|int
name|base
init|=
name|rawDocs
operator|.
name|readVInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|base
operator|!=
name|docID
condition|)
block|{
throw|throw
operator|new
name|CorruptIndexException
argument_list|(
literal|"invalid state: base="
operator|+
name|base
operator|+
literal|", docID="
operator|+
name|docID
argument_list|,
name|rawDocs
argument_list|)
throw|;
block|}
name|int
name|code
init|=
name|rawDocs
operator|.
name|readVInt
argument_list|()
decl_stmt|;
comment|// write a new index entry and new header for this chunk.
name|int
name|bufferedDocs
init|=
name|code
operator|>>>
literal|1
decl_stmt|;
name|indexWriter
operator|.
name|writeIndex
argument_list|(
name|bufferedDocs
argument_list|,
name|fieldsStream
operator|.
name|getFilePointer
argument_list|()
argument_list|)
expr_stmt|;
name|fieldsStream
operator|.
name|writeVInt
argument_list|(
name|docBase
argument_list|)
expr_stmt|;
comment|// rebase
name|fieldsStream
operator|.
name|writeVInt
argument_list|(
name|code
argument_list|)
expr_stmt|;
name|docID
operator|+=
name|bufferedDocs
expr_stmt|;
name|docBase
operator|+=
name|bufferedDocs
expr_stmt|;
name|docCount
operator|+=
name|bufferedDocs
expr_stmt|;
if|if
condition|(
name|docID
operator|>
name|maxDoc
condition|)
block|{
throw|throw
operator|new
name|CorruptIndexException
argument_list|(
literal|"invalid state: base="
operator|+
name|base
operator|+
literal|", count="
operator|+
name|bufferedDocs
operator|+
literal|", maxDoc="
operator|+
name|maxDoc
argument_list|,
name|rawDocs
argument_list|)
throw|;
block|}
comment|// copy bytes until the next chunk boundary (or end of chunk data).
comment|// using the stored fields index for this isn't the most efficient, but fast enough
comment|// and is a source of redundancy for detecting bad things.
specifier|final
name|long
name|end
decl_stmt|;
if|if
condition|(
name|docID
operator|==
name|maxDoc
condition|)
block|{
name|end
operator|=
name|matchingFieldsReader
operator|.
name|getMaxPointer
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|end
operator|=
name|index
operator|.
name|getStartPointer
argument_list|(
name|docID
argument_list|)
expr_stmt|;
block|}
name|fieldsStream
operator|.
name|copyBytes
argument_list|(
name|rawDocs
argument_list|,
name|end
operator|-
name|rawDocs
operator|.
name|getFilePointer
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|rawDocs
operator|.
name|getFilePointer
argument_list|()
operator|!=
name|matchingFieldsReader
operator|.
name|getMaxPointer
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|CorruptIndexException
argument_list|(
literal|"invalid state: pos="
operator|+
name|rawDocs
operator|.
name|getFilePointer
argument_list|()
operator|+
literal|", max="
operator|+
name|matchingFieldsReader
operator|.
name|getMaxPointer
argument_list|()
argument_list|,
name|rawDocs
argument_list|)
throw|;
block|}
comment|// since we bulk merged all chunks, we inherit any dirty ones from this segment.
name|numChunks
operator|+=
name|matchingFieldsReader
operator|.
name|getNumChunks
argument_list|()
expr_stmt|;
name|numDirtyChunks
operator|+=
name|matchingFieldsReader
operator|.
name|getNumDirtyChunks
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// optimized merge, we copy serialized (but decompressed) bytes directly
comment|// even on simple docs (1 stored field), it seems to help by about 20%
comment|// if the format is older, its always handled by the naive merge case above
assert|assert
name|matchingFieldsReader
operator|.
name|getVersion
argument_list|()
operator|==
name|VERSION_CURRENT
assert|;
name|matchingFieldsReader
operator|.
name|checkIntegrity
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|docID
init|=
literal|0
init|;
name|docID
operator|<
name|maxDoc
condition|;
name|docID
operator|++
control|)
block|{
if|if
condition|(
name|liveDocs
operator|!=
literal|null
operator|&&
name|liveDocs
operator|.
name|get
argument_list|(
name|docID
argument_list|)
operator|==
literal|false
condition|)
block|{
continue|continue;
block|}
name|SerializedDocument
name|doc
init|=
name|matchingFieldsReader
operator|.
name|document
argument_list|(
name|docID
argument_list|)
decl_stmt|;
name|startDocument
argument_list|()
expr_stmt|;
name|bufferedDocs
operator|.
name|copyBytes
argument_list|(
name|doc
operator|.
name|in
argument_list|,
name|doc
operator|.
name|length
argument_list|)
expr_stmt|;
name|numStoredFieldsInDoc
operator|=
name|doc
operator|.
name|numStoredFields
expr_stmt|;
name|finishDocument
argument_list|()
expr_stmt|;
operator|++
name|docCount
expr_stmt|;
block|}
block|}
block|}
name|finish
argument_list|(
name|mergeState
operator|.
name|mergeFieldInfos
argument_list|,
name|docCount
argument_list|)
expr_stmt|;
return|return
name|docCount
return|;
block|}
comment|/**     * Returns true if we should recompress this reader, even though we could bulk merge compressed data     *<p>    * The last chunk written for a segment is typically incomplete, so without recompressing,    * in some worst-case situations (e.g. frequent reopen with tiny flushes), over time the     * compression ratio can degrade. This is a safety switch.    */
DECL|method|tooDirty
name|boolean
name|tooDirty
parameter_list|(
name|CompressingStoredFieldsReader
name|candidate
parameter_list|)
block|{
comment|// more than 1% dirty, or more than hard limit of 1024 dirty chunks
return|return
name|candidate
operator|.
name|getNumDirtyChunks
argument_list|()
operator|>
literal|1024
operator|||
name|candidate
operator|.
name|getNumDirtyChunks
argument_list|()
operator|*
literal|100
operator|>
name|candidate
operator|.
name|getNumChunks
argument_list|()
return|;
block|}
block|}
end_class
end_unit
