begin_unit
begin_package
DECL|package|org.apache.lucene.codecs.lucene41.values
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|lucene41
operator|.
name|values
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|CodecUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexInput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|PagedBytes
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|packed
operator|.
name|PackedInts
import|;
end_import
begin_class
DECL|class|Lucene41BinaryDocValuesProducer
specifier|public
class|class
name|Lucene41BinaryDocValuesProducer
extends|extends
name|DocValues
block|{
DECL|field|dataIn
specifier|private
specifier|final
name|IndexInput
name|dataIn
decl_stmt|;
DECL|field|indexIn
specifier|private
specifier|final
name|IndexInput
name|indexIn
decl_stmt|;
DECL|field|valueLength
specifier|private
specifier|final
name|int
name|valueLength
decl_stmt|;
DECL|field|dataFilePointer
specifier|private
specifier|final
name|long
name|dataFilePointer
decl_stmt|;
DECL|field|bytesToRead
specifier|private
name|long
name|bytesToRead
decl_stmt|;
DECL|method|Lucene41BinaryDocValuesProducer
specifier|public
name|Lucene41BinaryDocValuesProducer
parameter_list|(
name|IndexInput
name|dataIn
parameter_list|,
name|IndexInput
name|indexIn
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|dataIn
operator|=
name|dataIn
expr_stmt|;
name|CodecUtil
operator|.
name|checkHeader
argument_list|(
name|dataIn
argument_list|,
name|Lucene41BinaryDocValuesConsumer
operator|.
name|CODEC_NAME
argument_list|,
name|Lucene41BinaryDocValuesConsumer
operator|.
name|VERSION_START
argument_list|,
name|Lucene41BinaryDocValuesConsumer
operator|.
name|VERSION_START
argument_list|)
expr_stmt|;
name|valueLength
operator|=
name|dataIn
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|dataFilePointer
operator|=
name|dataIn
operator|.
name|getFilePointer
argument_list|()
expr_stmt|;
name|CodecUtil
operator|.
name|checkHeader
argument_list|(
name|indexIn
argument_list|,
name|Lucene41BinaryDocValuesConsumer
operator|.
name|CODEC_NAME
argument_list|,
name|Lucene41BinaryDocValuesConsumer
operator|.
name|VERSION_START
argument_list|,
name|Lucene41BinaryDocValuesConsumer
operator|.
name|VERSION_START
argument_list|)
expr_stmt|;
name|bytesToRead
operator|=
name|indexIn
operator|.
name|readLong
argument_list|()
expr_stmt|;
if|if
condition|(
name|valueLength
operator|==
name|Lucene41BinaryDocValuesConsumer
operator|.
name|VALUE_SIZE_VAR
condition|)
block|{
name|this
operator|.
name|indexIn
operator|=
name|indexIn
expr_stmt|;
block|}
else|else
block|{
name|indexIn
operator|.
name|close
argument_list|()
expr_stmt|;
name|this
operator|.
name|indexIn
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|loadSource
specifier|protected
name|Source
name|loadSource
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|valueLength
operator|==
name|Lucene41BinaryDocValuesConsumer
operator|.
name|VALUE_SIZE_VAR
condition|)
block|{
assert|assert
name|indexIn
operator|!=
literal|null
assert|;
return|return
operator|new
name|VarStraightSource
argument_list|(
name|dataIn
operator|.
name|clone
argument_list|()
argument_list|,
name|indexIn
operator|.
name|clone
argument_list|()
argument_list|,
name|bytesToRead
argument_list|)
return|;
block|}
else|else
block|{
assert|assert
name|indexIn
operator|==
literal|null
assert|;
return|return
operator|new
name|FixedStraightSource
argument_list|(
name|dataIn
operator|.
name|clone
argument_list|()
argument_list|,
name|valueLength
argument_list|,
name|bytesToRead
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|loadDirectSource
specifier|protected
name|Source
name|loadDirectSource
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|valueLength
operator|==
name|Lucene41BinaryDocValuesConsumer
operator|.
name|VALUE_SIZE_VAR
condition|)
block|{
assert|assert
name|indexIn
operator|!=
literal|null
assert|;
return|return
operator|new
name|DirectVarStraightSource
argument_list|(
name|dataIn
operator|.
name|clone
argument_list|()
argument_list|,
name|indexIn
operator|.
name|clone
argument_list|()
argument_list|,
name|dataFilePointer
argument_list|)
return|;
block|}
else|else
block|{
assert|assert
name|indexIn
operator|==
literal|null
assert|;
return|return
operator|new
name|DirectFixedStraightSource
argument_list|(
name|dataIn
operator|.
name|clone
argument_list|()
argument_list|,
name|valueLength
argument_list|,
name|dataFilePointer
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|getType
specifier|public
name|Type
name|getType
parameter_list|()
block|{
return|return
name|valueLength
operator|==
name|Lucene41BinaryDocValuesConsumer
operator|.
name|VALUE_SIZE_VAR
condition|?
name|Type
operator|.
name|BYTES_VAR_STRAIGHT
else|:
name|Type
operator|.
name|BYTES_FIXED_STRAIGHT
return|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|super
operator|.
name|close
argument_list|()
expr_stmt|;
name|IOUtils
operator|.
name|close
argument_list|(
name|dataIn
argument_list|,
name|indexIn
argument_list|)
expr_stmt|;
block|}
DECL|class|BytesSourceBase
specifier|static
specifier|abstract
class|class
name|BytesSourceBase
extends|extends
name|Source
block|{
DECL|field|pagedBytes
specifier|private
specifier|final
name|PagedBytes
name|pagedBytes
decl_stmt|;
DECL|field|datIn
specifier|protected
specifier|final
name|IndexInput
name|datIn
decl_stmt|;
DECL|field|idxIn
specifier|protected
specifier|final
name|IndexInput
name|idxIn
decl_stmt|;
DECL|field|PAGED_BYTES_BITS
specifier|protected
specifier|final
specifier|static
name|int
name|PAGED_BYTES_BITS
init|=
literal|15
decl_stmt|;
DECL|field|data
specifier|protected
specifier|final
name|PagedBytes
operator|.
name|Reader
name|data
decl_stmt|;
DECL|field|totalLengthInBytes
specifier|protected
specifier|final
name|long
name|totalLengthInBytes
decl_stmt|;
DECL|method|BytesSourceBase
specifier|protected
name|BytesSourceBase
parameter_list|(
name|IndexInput
name|datIn
parameter_list|,
name|IndexInput
name|idxIn
parameter_list|,
name|PagedBytes
name|pagedBytes
parameter_list|,
name|long
name|bytesToRead
parameter_list|,
name|Type
name|type
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|type
argument_list|)
expr_stmt|;
assert|assert
name|bytesToRead
operator|<=
name|datIn
operator|.
name|length
argument_list|()
operator|:
literal|" file size is less than the expected size diff: "
operator|+
operator|(
name|bytesToRead
operator|-
name|datIn
operator|.
name|length
argument_list|()
operator|)
operator|+
literal|" pos: "
operator|+
name|datIn
operator|.
name|getFilePointer
argument_list|()
assert|;
name|this
operator|.
name|datIn
operator|=
name|datIn
expr_stmt|;
name|this
operator|.
name|totalLengthInBytes
operator|=
name|bytesToRead
expr_stmt|;
name|this
operator|.
name|pagedBytes
operator|=
name|pagedBytes
expr_stmt|;
name|this
operator|.
name|pagedBytes
operator|.
name|copy
argument_list|(
name|datIn
argument_list|,
name|bytesToRead
argument_list|)
expr_stmt|;
name|data
operator|=
name|pagedBytes
operator|.
name|freeze
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|idxIn
operator|=
name|idxIn
expr_stmt|;
block|}
block|}
DECL|class|DirectVarStraightSource
specifier|public
specifier|final
specifier|static
class|class
name|DirectVarStraightSource
extends|extends
name|Source
block|{
DECL|field|index
specifier|private
specifier|final
name|PackedInts
operator|.
name|Reader
name|index
decl_stmt|;
DECL|field|data
specifier|private
specifier|final
name|IndexInput
name|data
decl_stmt|;
DECL|field|baseOffset
specifier|private
specifier|final
name|long
name|baseOffset
decl_stmt|;
DECL|method|DirectVarStraightSource
name|DirectVarStraightSource
parameter_list|(
name|IndexInput
name|data
parameter_list|,
name|IndexInput
name|index
parameter_list|,
name|long
name|dataFilePointer
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|Type
operator|.
name|BYTES_VAR_STRAIGHT
argument_list|)
expr_stmt|;
name|this
operator|.
name|data
operator|=
name|data
expr_stmt|;
name|baseOffset
operator|=
name|dataFilePointer
expr_stmt|;
name|this
operator|.
name|index
operator|=
name|PackedInts
operator|.
name|getDirectReader
argument_list|(
name|index
argument_list|)
expr_stmt|;
comment|// nocommit read without
comment|// header
block|}
DECL|method|position
specifier|private
specifier|final
name|int
name|position
parameter_list|(
name|int
name|docID
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|long
name|offset
init|=
name|index
operator|.
name|get
argument_list|(
name|docID
argument_list|)
decl_stmt|;
name|data
operator|.
name|seek
argument_list|(
name|baseOffset
operator|+
name|offset
argument_list|)
expr_stmt|;
comment|// Safe to do 1+docID because we write sentinel at the end:
specifier|final
name|long
name|nextOffset
init|=
name|index
operator|.
name|get
argument_list|(
literal|1
operator|+
name|docID
argument_list|)
decl_stmt|;
return|return
call|(
name|int
call|)
argument_list|(
name|nextOffset
operator|-
name|offset
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getBytes
specifier|public
name|BytesRef
name|getBytes
parameter_list|(
name|int
name|docID
parameter_list|,
name|BytesRef
name|ref
parameter_list|)
block|{
try|try
block|{
specifier|final
name|int
name|sizeToRead
init|=
name|position
argument_list|(
name|docID
argument_list|)
decl_stmt|;
name|ref
operator|.
name|offset
operator|=
literal|0
expr_stmt|;
name|ref
operator|.
name|grow
argument_list|(
name|sizeToRead
argument_list|)
expr_stmt|;
name|data
operator|.
name|readBytes
argument_list|(
name|ref
operator|.
name|bytes
argument_list|,
literal|0
argument_list|,
name|sizeToRead
argument_list|)
expr_stmt|;
name|ref
operator|.
name|length
operator|=
name|sizeToRead
expr_stmt|;
return|return
name|ref
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"failed to get value for docID: "
operator|+
name|docID
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
block|}
DECL|class|VarStraightSource
specifier|private
specifier|static
specifier|final
class|class
name|VarStraightSource
extends|extends
name|BytesSourceBase
block|{
DECL|field|addresses
specifier|private
specifier|final
name|PackedInts
operator|.
name|Reader
name|addresses
decl_stmt|;
DECL|method|VarStraightSource
specifier|public
name|VarStraightSource
parameter_list|(
name|IndexInput
name|datIn
parameter_list|,
name|IndexInput
name|idxIn
parameter_list|,
name|long
name|bytesToRead
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|datIn
argument_list|,
name|idxIn
argument_list|,
operator|new
name|PagedBytes
argument_list|(
name|PAGED_BYTES_BITS
argument_list|)
argument_list|,
name|bytesToRead
argument_list|,
name|Type
operator|.
name|BYTES_VAR_STRAIGHT
argument_list|)
expr_stmt|;
name|addresses
operator|=
name|PackedInts
operator|.
name|getReader
argument_list|(
name|idxIn
argument_list|)
expr_stmt|;
comment|// nocommit read without header
block|}
annotation|@
name|Override
DECL|method|getBytes
specifier|public
name|BytesRef
name|getBytes
parameter_list|(
name|int
name|docID
parameter_list|,
name|BytesRef
name|bytesRef
parameter_list|)
block|{
specifier|final
name|long
name|address
init|=
name|addresses
operator|.
name|get
argument_list|(
name|docID
argument_list|)
decl_stmt|;
return|return
name|data
operator|.
name|fillSlice
argument_list|(
name|bytesRef
argument_list|,
name|address
argument_list|,
call|(
name|int
call|)
argument_list|(
name|addresses
operator|.
name|get
argument_list|(
name|docID
operator|+
literal|1
argument_list|)
operator|-
name|address
argument_list|)
argument_list|)
return|;
block|}
block|}
DECL|class|FixedStraightSource
specifier|private
specifier|final
specifier|static
class|class
name|FixedStraightSource
extends|extends
name|BytesSourceBase
block|{
DECL|field|size
specifier|private
specifier|final
name|int
name|size
decl_stmt|;
DECL|method|FixedStraightSource
specifier|public
name|FixedStraightSource
parameter_list|(
name|IndexInput
name|datIn
parameter_list|,
name|int
name|size
parameter_list|,
name|long
name|bytesToRead
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|datIn
argument_list|,
literal|null
argument_list|,
operator|new
name|PagedBytes
argument_list|(
name|PAGED_BYTES_BITS
argument_list|)
argument_list|,
name|bytesToRead
argument_list|,
name|Type
operator|.
name|BYTES_FIXED_STRAIGHT
argument_list|)
expr_stmt|;
name|this
operator|.
name|size
operator|=
name|size
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getBytes
specifier|public
name|BytesRef
name|getBytes
parameter_list|(
name|int
name|docID
parameter_list|,
name|BytesRef
name|bytesRef
parameter_list|)
block|{
return|return
name|data
operator|.
name|fillSlice
argument_list|(
name|bytesRef
argument_list|,
name|size
operator|*
operator|(
operator|(
name|long
operator|)
name|docID
operator|)
argument_list|,
name|size
argument_list|)
return|;
block|}
block|}
DECL|class|DirectFixedStraightSource
specifier|public
specifier|final
specifier|static
class|class
name|DirectFixedStraightSource
extends|extends
name|Source
block|{
DECL|field|size
specifier|private
specifier|final
name|int
name|size
decl_stmt|;
DECL|field|data
specifier|private
name|IndexInput
name|data
decl_stmt|;
DECL|field|baseOffset
specifier|private
name|long
name|baseOffset
decl_stmt|;
DECL|method|DirectFixedStraightSource
name|DirectFixedStraightSource
parameter_list|(
name|IndexInput
name|input
parameter_list|,
name|int
name|size
parameter_list|,
name|long
name|dataFilePointer
parameter_list|)
block|{
name|super
argument_list|(
name|Type
operator|.
name|BYTES_FIXED_STRAIGHT
argument_list|)
expr_stmt|;
name|this
operator|.
name|size
operator|=
name|size
expr_stmt|;
name|this
operator|.
name|data
operator|=
name|input
expr_stmt|;
name|baseOffset
operator|=
name|dataFilePointer
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getBytes
specifier|public
name|BytesRef
name|getBytes
parameter_list|(
name|int
name|docID
parameter_list|,
name|BytesRef
name|ref
parameter_list|)
block|{
try|try
block|{
name|data
operator|.
name|seek
argument_list|(
name|baseOffset
operator|+
name|size
operator|*
operator|(
operator|(
name|long
operator|)
name|docID
operator|)
argument_list|)
expr_stmt|;
name|ref
operator|.
name|offset
operator|=
literal|0
expr_stmt|;
name|ref
operator|.
name|grow
argument_list|(
name|size
argument_list|)
expr_stmt|;
name|data
operator|.
name|readBytes
argument_list|(
name|ref
operator|.
name|bytes
argument_list|,
literal|0
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|ref
operator|.
name|length
operator|=
name|size
expr_stmt|;
return|return
name|ref
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"failed to get value for docID: "
operator|+
name|docID
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
block|}
block|}
end_class
end_unit
