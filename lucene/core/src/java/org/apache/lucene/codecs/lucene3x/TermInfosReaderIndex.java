begin_unit
begin_package
DECL|package|org.apache.lucene.codecs.lucene3x
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|lucene3x
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BitUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|MathUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|PagedBytes
operator|.
name|PagedBytesDataInput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|PagedBytes
operator|.
name|PagedBytesDataOutput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|PagedBytes
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|packed
operator|.
name|GrowableWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|packed
operator|.
name|PackedInts
import|;
end_import
begin_comment
comment|/**  * This stores a monotonically increasing set of<Term, TermInfo> pairs in an  * index segment. Pairs are accessed either by Term or by ordinal position the  * set. The Terms and TermInfo are actually serialized and stored into a byte  * array and pointers to the position of each are stored in a int array.  * @deprecated  */
end_comment
begin_class
annotation|@
name|Deprecated
class|class
DECL|class|TermInfosReaderIndex
name|TermInfosReaderIndex
block|{
DECL|field|MAX_PAGE_BITS
specifier|private
specifier|static
specifier|final
name|int
name|MAX_PAGE_BITS
init|=
literal|18
decl_stmt|;
comment|// 256 KB block
DECL|field|fields
specifier|private
name|Term
index|[]
name|fields
decl_stmt|;
DECL|field|totalIndexInterval
specifier|private
name|int
name|totalIndexInterval
decl_stmt|;
DECL|field|comparator
specifier|private
name|Comparator
argument_list|<
name|BytesRef
argument_list|>
name|comparator
init|=
name|BytesRef
operator|.
name|getUTF8SortedAsUTF16Comparator
argument_list|()
decl_stmt|;
DECL|field|dataInput
specifier|private
specifier|final
name|PagedBytesDataInput
name|dataInput
decl_stmt|;
DECL|field|indexToDataOffset
specifier|private
specifier|final
name|PackedInts
operator|.
name|Reader
name|indexToDataOffset
decl_stmt|;
DECL|field|indexSize
specifier|private
specifier|final
name|int
name|indexSize
decl_stmt|;
DECL|field|skipInterval
specifier|private
specifier|final
name|int
name|skipInterval
decl_stmt|;
comment|/**    * Loads the segment information at segment load time.    *     * @param indexEnum    *          the term enum.    * @param indexDivisor    *          the index divisor.    * @param tiiFileLength    *          the size of the tii file, used to approximate the size of the    *          buffer.    * @param totalIndexInterval    *          the total index interval.    */
DECL|method|TermInfosReaderIndex
name|TermInfosReaderIndex
parameter_list|(
name|SegmentTermEnum
name|indexEnum
parameter_list|,
name|int
name|indexDivisor
parameter_list|,
name|long
name|tiiFileLength
parameter_list|,
name|int
name|totalIndexInterval
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|totalIndexInterval
operator|=
name|totalIndexInterval
expr_stmt|;
name|indexSize
operator|=
literal|1
operator|+
operator|(
operator|(
name|int
operator|)
name|indexEnum
operator|.
name|size
operator|-
literal|1
operator|)
operator|/
name|indexDivisor
expr_stmt|;
name|skipInterval
operator|=
name|indexEnum
operator|.
name|skipInterval
expr_stmt|;
comment|// this is only an inital size, it will be GCed once the build is complete
name|long
name|initialSize
init|=
call|(
name|long
call|)
argument_list|(
name|tiiFileLength
operator|*
literal|1.5
argument_list|)
operator|/
name|indexDivisor
decl_stmt|;
name|PagedBytes
name|dataPagedBytes
init|=
operator|new
name|PagedBytes
argument_list|(
name|estimatePageBits
argument_list|(
name|initialSize
argument_list|)
argument_list|)
decl_stmt|;
name|PagedBytesDataOutput
name|dataOutput
init|=
name|dataPagedBytes
operator|.
name|getDataOutput
argument_list|()
decl_stmt|;
specifier|final
name|int
name|bitEstimate
init|=
literal|1
operator|+
name|MathUtil
operator|.
name|log
argument_list|(
name|tiiFileLength
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|GrowableWriter
name|indexToTerms
init|=
operator|new
name|GrowableWriter
argument_list|(
name|bitEstimate
argument_list|,
name|indexSize
argument_list|,
name|PackedInts
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
name|String
name|currentField
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|fieldStrs
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|fieldCounter
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|indexEnum
operator|.
name|next
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Term
name|term
init|=
name|indexEnum
operator|.
name|term
argument_list|()
decl_stmt|;
if|if
condition|(
name|currentField
operator|==
literal|null
operator|||
operator|!
name|currentField
operator|.
name|equals
argument_list|(
name|term
operator|.
name|field
argument_list|()
argument_list|)
condition|)
block|{
name|currentField
operator|=
name|term
operator|.
name|field
argument_list|()
expr_stmt|;
name|fieldStrs
operator|.
name|add
argument_list|(
name|currentField
argument_list|)
expr_stmt|;
name|fieldCounter
operator|++
expr_stmt|;
block|}
name|TermInfo
name|termInfo
init|=
name|indexEnum
operator|.
name|termInfo
argument_list|()
decl_stmt|;
name|indexToTerms
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|dataOutput
operator|.
name|getPosition
argument_list|()
argument_list|)
expr_stmt|;
name|dataOutput
operator|.
name|writeVInt
argument_list|(
name|fieldCounter
argument_list|)
expr_stmt|;
name|dataOutput
operator|.
name|writeString
argument_list|(
name|term
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
name|dataOutput
operator|.
name|writeVInt
argument_list|(
name|termInfo
operator|.
name|docFreq
argument_list|)
expr_stmt|;
if|if
condition|(
name|termInfo
operator|.
name|docFreq
operator|>=
name|skipInterval
condition|)
block|{
name|dataOutput
operator|.
name|writeVInt
argument_list|(
name|termInfo
operator|.
name|skipOffset
argument_list|)
expr_stmt|;
block|}
name|dataOutput
operator|.
name|writeVLong
argument_list|(
name|termInfo
operator|.
name|freqPointer
argument_list|)
expr_stmt|;
name|dataOutput
operator|.
name|writeVLong
argument_list|(
name|termInfo
operator|.
name|proxPointer
argument_list|)
expr_stmt|;
name|dataOutput
operator|.
name|writeVLong
argument_list|(
name|indexEnum
operator|.
name|indexPointer
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|1
init|;
name|j
operator|<
name|indexDivisor
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|indexEnum
operator|.
name|next
argument_list|()
condition|)
block|{
break|break;
block|}
block|}
block|}
name|fields
operator|=
operator|new
name|Term
index|[
name|fieldStrs
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fields
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|fields
index|[
name|i
index|]
operator|=
operator|new
name|Term
argument_list|(
name|fieldStrs
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|dataPagedBytes
operator|.
name|freeze
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|dataInput
operator|=
name|dataPagedBytes
operator|.
name|getDataInput
argument_list|()
expr_stmt|;
name|indexToDataOffset
operator|=
name|indexToTerms
operator|.
name|getMutable
argument_list|()
expr_stmt|;
block|}
DECL|method|estimatePageBits
specifier|private
specifier|static
name|int
name|estimatePageBits
parameter_list|(
name|long
name|estSize
parameter_list|)
block|{
return|return
name|Math
operator|.
name|max
argument_list|(
name|Math
operator|.
name|min
argument_list|(
literal|64
operator|-
name|BitUtil
operator|.
name|nlz
argument_list|(
name|estSize
argument_list|)
argument_list|,
name|MAX_PAGE_BITS
argument_list|)
argument_list|,
literal|4
argument_list|)
return|;
block|}
DECL|method|seekEnum
name|void
name|seekEnum
parameter_list|(
name|SegmentTermEnum
name|enumerator
parameter_list|,
name|int
name|indexOffset
parameter_list|)
throws|throws
name|IOException
block|{
name|PagedBytesDataInput
name|input
init|=
name|dataInput
operator|.
name|clone
argument_list|()
decl_stmt|;
name|input
operator|.
name|setPosition
argument_list|(
name|indexToDataOffset
operator|.
name|get
argument_list|(
name|indexOffset
argument_list|)
argument_list|)
expr_stmt|;
comment|// read the term
name|int
name|fieldId
init|=
name|input
operator|.
name|readVInt
argument_list|()
decl_stmt|;
name|Term
name|field
init|=
name|fields
index|[
name|fieldId
index|]
decl_stmt|;
name|Term
name|term
init|=
operator|new
name|Term
argument_list|(
name|field
operator|.
name|field
argument_list|()
argument_list|,
name|input
operator|.
name|readString
argument_list|()
argument_list|)
decl_stmt|;
comment|// read the terminfo
name|TermInfo
name|termInfo
init|=
operator|new
name|TermInfo
argument_list|()
decl_stmt|;
name|termInfo
operator|.
name|docFreq
operator|=
name|input
operator|.
name|readVInt
argument_list|()
expr_stmt|;
if|if
condition|(
name|termInfo
operator|.
name|docFreq
operator|>=
name|skipInterval
condition|)
block|{
name|termInfo
operator|.
name|skipOffset
operator|=
name|input
operator|.
name|readVInt
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|termInfo
operator|.
name|skipOffset
operator|=
literal|0
expr_stmt|;
block|}
name|termInfo
operator|.
name|freqPointer
operator|=
name|input
operator|.
name|readVLong
argument_list|()
expr_stmt|;
name|termInfo
operator|.
name|proxPointer
operator|=
name|input
operator|.
name|readVLong
argument_list|()
expr_stmt|;
name|long
name|pointer
init|=
name|input
operator|.
name|readVLong
argument_list|()
decl_stmt|;
comment|// perform the seek
name|enumerator
operator|.
name|seek
argument_list|(
name|pointer
argument_list|,
operator|(
operator|(
name|long
operator|)
name|indexOffset
operator|*
name|totalIndexInterval
operator|)
operator|-
literal|1
argument_list|,
name|term
argument_list|,
name|termInfo
argument_list|)
expr_stmt|;
block|}
comment|/**    * Binary search for the given term.    *     * @param term    *          the term to locate.    * @throws IOException     */
DECL|method|getIndexOffset
name|int
name|getIndexOffset
parameter_list|(
name|Term
name|term
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|lo
init|=
literal|0
decl_stmt|;
name|int
name|hi
init|=
name|indexSize
operator|-
literal|1
decl_stmt|;
name|PagedBytesDataInput
name|input
init|=
name|dataInput
operator|.
name|clone
argument_list|()
decl_stmt|;
name|BytesRef
name|scratch
init|=
operator|new
name|BytesRef
argument_list|()
decl_stmt|;
while|while
condition|(
name|hi
operator|>=
name|lo
condition|)
block|{
name|int
name|mid
init|=
operator|(
name|lo
operator|+
name|hi
operator|)
operator|>>>
literal|1
decl_stmt|;
name|int
name|delta
init|=
name|compareTo
argument_list|(
name|term
argument_list|,
name|mid
argument_list|,
name|input
argument_list|,
name|scratch
argument_list|)
decl_stmt|;
if|if
condition|(
name|delta
operator|<
literal|0
condition|)
name|hi
operator|=
name|mid
operator|-
literal|1
expr_stmt|;
elseif|else
if|if
condition|(
name|delta
operator|>
literal|0
condition|)
name|lo
operator|=
name|mid
operator|+
literal|1
expr_stmt|;
else|else
return|return
name|mid
return|;
block|}
return|return
name|hi
return|;
block|}
comment|/**    * Gets the term at the given position.  For testing.    *     * @param termIndex    *          the position to read the term from the index.    * @return the term.    * @throws IOException    */
DECL|method|getTerm
name|Term
name|getTerm
parameter_list|(
name|int
name|termIndex
parameter_list|)
throws|throws
name|IOException
block|{
name|PagedBytesDataInput
name|input
init|=
name|dataInput
operator|.
name|clone
argument_list|()
decl_stmt|;
name|input
operator|.
name|setPosition
argument_list|(
name|indexToDataOffset
operator|.
name|get
argument_list|(
name|termIndex
argument_list|)
argument_list|)
expr_stmt|;
comment|// read the term
name|int
name|fieldId
init|=
name|input
operator|.
name|readVInt
argument_list|()
decl_stmt|;
name|Term
name|field
init|=
name|fields
index|[
name|fieldId
index|]
decl_stmt|;
return|return
operator|new
name|Term
argument_list|(
name|field
operator|.
name|field
argument_list|()
argument_list|,
name|input
operator|.
name|readString
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Returns the number of terms.    *     * @return int.    */
DECL|method|length
name|int
name|length
parameter_list|()
block|{
return|return
name|indexSize
return|;
block|}
comment|/**    * The compares the given term against the term in the index specified by the    * term index. ie It returns negative N when term is less than index term;    *     * @param term    *          the given term.    * @param termIndex    *          the index of the of term to compare.    * @return int.    * @throws IOException     */
DECL|method|compareTo
name|int
name|compareTo
parameter_list|(
name|Term
name|term
parameter_list|,
name|int
name|termIndex
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|compareTo
argument_list|(
name|term
argument_list|,
name|termIndex
argument_list|,
name|dataInput
operator|.
name|clone
argument_list|()
argument_list|,
operator|new
name|BytesRef
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Compare the fields of the terms first, and if not equals return from    * compare. If equal compare terms.    *     * @param term    *          the term to compare.    * @param termIndex    *          the position of the term in the input to compare    * @param input    *          the input buffer.    * @return int.    * @throws IOException     */
DECL|method|compareTo
specifier|private
name|int
name|compareTo
parameter_list|(
name|Term
name|term
parameter_list|,
name|int
name|termIndex
parameter_list|,
name|PagedBytesDataInput
name|input
parameter_list|,
name|BytesRef
name|reuse
parameter_list|)
throws|throws
name|IOException
block|{
comment|// if term field does not equal mid's field index, then compare fields
comment|// else if they are equal, compare term's string values...
name|int
name|c
init|=
name|compareField
argument_list|(
name|term
argument_list|,
name|termIndex
argument_list|,
name|input
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|0
condition|)
block|{
name|reuse
operator|.
name|length
operator|=
name|input
operator|.
name|readVInt
argument_list|()
expr_stmt|;
name|reuse
operator|.
name|grow
argument_list|(
name|reuse
operator|.
name|length
argument_list|)
expr_stmt|;
name|input
operator|.
name|readBytes
argument_list|(
name|reuse
operator|.
name|bytes
argument_list|,
literal|0
argument_list|,
name|reuse
operator|.
name|length
argument_list|)
expr_stmt|;
return|return
name|comparator
operator|.
name|compare
argument_list|(
name|term
operator|.
name|bytes
argument_list|()
argument_list|,
name|reuse
argument_list|)
return|;
block|}
return|return
name|c
return|;
block|}
comment|/**    * Compares the fields before checking the text of the terms.    *     * @param term    *          the given term.    * @param termIndex    *          the term that exists in the data block.    * @param input    *          the data block.    * @return int.    * @throws IOException     */
DECL|method|compareField
specifier|private
name|int
name|compareField
parameter_list|(
name|Term
name|term
parameter_list|,
name|int
name|termIndex
parameter_list|,
name|PagedBytesDataInput
name|input
parameter_list|)
throws|throws
name|IOException
block|{
name|input
operator|.
name|setPosition
argument_list|(
name|indexToDataOffset
operator|.
name|get
argument_list|(
name|termIndex
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|term
operator|.
name|field
argument_list|()
operator|.
name|compareTo
argument_list|(
name|fields
index|[
name|input
operator|.
name|readVInt
argument_list|()
index|]
operator|.
name|field
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class
end_unit
