begin_unit
begin_package
DECL|package|org.apache.lucene.codecs.lucene50
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|lucene50
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|CodecUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|NormsConsumer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|FieldInfo
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexFileNames
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SegmentWriteState
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexOutput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|FilterIterator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|packed
operator|.
name|BlockPackedWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|packed
operator|.
name|MonotonicBlockPackedWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|packed
operator|.
name|PackedInts
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|packed
operator|.
name|PackedInts
operator|.
name|FormatAndBits
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|lucene50
operator|.
name|Lucene50NormsFormat
operator|.
name|VERSION_CURRENT
import|;
end_import
begin_comment
comment|/**  * Writer for {@link Lucene50NormsFormat}  */
end_comment
begin_class
DECL|class|Lucene50NormsConsumer
class|class
name|Lucene50NormsConsumer
extends|extends
name|NormsConsumer
block|{
DECL|field|DELTA_COMPRESSED
specifier|static
specifier|final
name|byte
name|DELTA_COMPRESSED
init|=
literal|0
decl_stmt|;
DECL|field|TABLE_COMPRESSED
specifier|static
specifier|final
name|byte
name|TABLE_COMPRESSED
init|=
literal|1
decl_stmt|;
DECL|field|CONST_COMPRESSED
specifier|static
specifier|final
name|byte
name|CONST_COMPRESSED
init|=
literal|2
decl_stmt|;
DECL|field|UNCOMPRESSED
specifier|static
specifier|final
name|byte
name|UNCOMPRESSED
init|=
literal|3
decl_stmt|;
DECL|field|INDIRECT
specifier|static
specifier|final
name|byte
name|INDIRECT
init|=
literal|4
decl_stmt|;
DECL|field|PATCHED
specifier|static
specifier|final
name|byte
name|PATCHED
init|=
literal|5
decl_stmt|;
DECL|field|BLOCK_SIZE
specifier|static
specifier|final
name|int
name|BLOCK_SIZE
init|=
literal|1
operator|<<
literal|14
decl_stmt|;
comment|// threshold for indirect encoding, computed as 1 - 1/log2(maxint)
comment|// norms are only read for matching postings... so this is the threshold
comment|// where n log n operations< maxdoc (e.g. it performs similar to other fields)
DECL|field|INDIRECT_THRESHOLD
specifier|static
specifier|final
name|float
name|INDIRECT_THRESHOLD
init|=
literal|1
operator|-
literal|1
operator|/
literal|31F
decl_stmt|;
DECL|field|data
DECL|field|meta
name|IndexOutput
name|data
decl_stmt|,
name|meta
decl_stmt|;
DECL|method|Lucene50NormsConsumer
name|Lucene50NormsConsumer
parameter_list|(
name|SegmentWriteState
name|state
parameter_list|,
name|String
name|dataCodec
parameter_list|,
name|String
name|dataExtension
parameter_list|,
name|String
name|metaCodec
parameter_list|,
name|String
name|metaExtension
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|String
name|dataName
init|=
name|IndexFileNames
operator|.
name|segmentFileName
argument_list|(
name|state
operator|.
name|segmentInfo
operator|.
name|name
argument_list|,
name|state
operator|.
name|segmentSuffix
argument_list|,
name|dataExtension
argument_list|)
decl_stmt|;
name|data
operator|=
name|state
operator|.
name|directory
operator|.
name|createOutput
argument_list|(
name|dataName
argument_list|,
name|state
operator|.
name|context
argument_list|)
expr_stmt|;
name|CodecUtil
operator|.
name|writeSegmentHeader
argument_list|(
name|data
argument_list|,
name|dataCodec
argument_list|,
name|VERSION_CURRENT
argument_list|,
name|state
operator|.
name|segmentInfo
operator|.
name|getId
argument_list|()
argument_list|,
name|state
operator|.
name|segmentSuffix
argument_list|)
expr_stmt|;
name|String
name|metaName
init|=
name|IndexFileNames
operator|.
name|segmentFileName
argument_list|(
name|state
operator|.
name|segmentInfo
operator|.
name|name
argument_list|,
name|state
operator|.
name|segmentSuffix
argument_list|,
name|metaExtension
argument_list|)
decl_stmt|;
name|meta
operator|=
name|state
operator|.
name|directory
operator|.
name|createOutput
argument_list|(
name|metaName
argument_list|,
name|state
operator|.
name|context
argument_list|)
expr_stmt|;
name|CodecUtil
operator|.
name|writeSegmentHeader
argument_list|(
name|meta
argument_list|,
name|metaCodec
argument_list|,
name|VERSION_CURRENT
argument_list|,
name|state
operator|.
name|segmentInfo
operator|.
name|getId
argument_list|()
argument_list|,
name|state
operator|.
name|segmentSuffix
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|IOUtils
operator|.
name|closeWhileHandlingException
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// we explicitly use only certain bits per value and a specified format, so we statically check this will work
static|static
block|{
assert|assert
name|PackedInts
operator|.
name|Format
operator|.
name|PACKED_SINGLE_BLOCK
operator|.
name|isSupported
argument_list|(
literal|1
argument_list|)
assert|;
assert|assert
name|PackedInts
operator|.
name|Format
operator|.
name|PACKED_SINGLE_BLOCK
operator|.
name|isSupported
argument_list|(
literal|2
argument_list|)
assert|;
assert|assert
name|PackedInts
operator|.
name|Format
operator|.
name|PACKED_SINGLE_BLOCK
operator|.
name|isSupported
argument_list|(
literal|4
argument_list|)
assert|;
block|}
annotation|@
name|Override
DECL|method|addNormsField
specifier|public
name|void
name|addNormsField
parameter_list|(
name|FieldInfo
name|field
parameter_list|,
name|Iterable
argument_list|<
name|Number
argument_list|>
name|values
parameter_list|)
throws|throws
name|IOException
block|{
name|writeNormsField
argument_list|(
name|field
argument_list|,
name|values
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|writeNormsField
specifier|private
name|void
name|writeNormsField
parameter_list|(
name|FieldInfo
name|field
parameter_list|,
name|Iterable
argument_list|<
name|Number
argument_list|>
name|values
parameter_list|,
name|int
name|level
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|level
operator|<=
literal|1
assert|;
comment|// we only "recurse" once in the indirect case
name|meta
operator|.
name|writeVInt
argument_list|(
name|field
operator|.
name|number
argument_list|)
expr_stmt|;
name|long
name|minValue
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
name|long
name|maxValue
init|=
name|Long
operator|.
name|MIN_VALUE
decl_stmt|;
comment|// TODO: more efficient?
name|NormMap
name|uniqueValues
init|=
operator|new
name|NormMap
argument_list|()
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Number
name|nv
range|:
name|values
control|)
block|{
if|if
condition|(
name|nv
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"illegal norms data for field "
operator|+
name|field
operator|.
name|name
operator|+
literal|", got null for value: "
operator|+
name|count
argument_list|)
throw|;
block|}
specifier|final
name|long
name|v
init|=
name|nv
operator|.
name|longValue
argument_list|()
decl_stmt|;
name|minValue
operator|=
name|Math
operator|.
name|min
argument_list|(
name|minValue
argument_list|,
name|v
argument_list|)
expr_stmt|;
name|maxValue
operator|=
name|Math
operator|.
name|max
argument_list|(
name|maxValue
argument_list|,
name|v
argument_list|)
expr_stmt|;
if|if
condition|(
name|uniqueValues
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|uniqueValues
operator|.
name|add
argument_list|(
name|v
argument_list|)
condition|)
block|{
if|if
condition|(
name|uniqueValues
operator|.
name|size
operator|>
literal|256
condition|)
block|{
name|uniqueValues
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
name|count
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|uniqueValues
operator|!=
literal|null
operator|&&
name|uniqueValues
operator|.
name|size
operator|==
literal|1
condition|)
block|{
comment|// 0 bpv
name|addConstant
argument_list|(
name|minValue
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|level
operator|==
literal|0
operator|&&
name|count
operator|>
literal|256
operator|&&
name|uniqueValues
operator|!=
literal|null
operator|&&
name|uniqueValues
operator|.
name|maxFreq
argument_list|()
operator|>
name|count
operator|*
name|INDIRECT_THRESHOLD
condition|)
block|{
name|long
name|commonValue
init|=
name|uniqueValues
operator|.
name|getDecodeTable
argument_list|()
index|[
name|uniqueValues
operator|.
name|maxOrd
argument_list|()
index|]
decl_stmt|;
if|if
condition|(
name|commonValue
operator|==
literal|0
condition|)
block|{
comment|// if the common value is missing, don't waste RAM on a bitset, since we won't be searching those docs
name|addIndirect
argument_list|(
name|field
argument_list|,
name|values
argument_list|,
name|count
argument_list|,
name|uniqueValues
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// otherwise, write a sparse bitset, where 1 indicates 'uncommon value'.
name|addPatched
argument_list|(
name|field
argument_list|,
name|values
argument_list|,
name|count
argument_list|,
name|uniqueValues
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|uniqueValues
operator|!=
literal|null
condition|)
block|{
comment|// small number of unique values: this is the typical case:
name|FormatAndBits
name|compression
init|=
name|fastestFormatAndBits
argument_list|(
name|uniqueValues
operator|.
name|size
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|compression
operator|.
name|bitsPerValue
operator|==
literal|8
operator|&&
name|minValue
operator|>=
name|Byte
operator|.
name|MIN_VALUE
operator|&&
name|maxValue
operator|<=
name|Byte
operator|.
name|MAX_VALUE
condition|)
block|{
name|addUncompressed
argument_list|(
name|values
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|addTableCompressed
argument_list|(
name|values
argument_list|,
name|compression
argument_list|,
name|count
argument_list|,
name|uniqueValues
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|addDeltaCompressed
argument_list|(
name|values
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|fastestFormatAndBits
specifier|private
name|FormatAndBits
name|fastestFormatAndBits
parameter_list|(
name|int
name|max
parameter_list|)
block|{
comment|// we only use bpv=1,2,4,8
name|PackedInts
operator|.
name|Format
name|format
init|=
name|PackedInts
operator|.
name|Format
operator|.
name|PACKED_SINGLE_BLOCK
decl_stmt|;
name|int
name|bitsPerValue
init|=
name|PackedInts
operator|.
name|bitsRequired
argument_list|(
name|max
argument_list|)
decl_stmt|;
if|if
condition|(
name|bitsPerValue
operator|==
literal|3
condition|)
block|{
name|bitsPerValue
operator|=
literal|4
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|bitsPerValue
operator|>
literal|4
condition|)
block|{
name|bitsPerValue
operator|=
literal|8
expr_stmt|;
block|}
return|return
operator|new
name|FormatAndBits
argument_list|(
name|format
argument_list|,
name|bitsPerValue
argument_list|)
return|;
block|}
DECL|method|addConstant
specifier|private
name|void
name|addConstant
parameter_list|(
name|long
name|constant
parameter_list|)
throws|throws
name|IOException
block|{
name|meta
operator|.
name|writeVInt
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|meta
operator|.
name|writeByte
argument_list|(
name|CONST_COMPRESSED
argument_list|)
expr_stmt|;
name|meta
operator|.
name|writeLong
argument_list|(
name|constant
argument_list|)
expr_stmt|;
block|}
DECL|method|addUncompressed
specifier|private
name|void
name|addUncompressed
parameter_list|(
name|Iterable
argument_list|<
name|Number
argument_list|>
name|values
parameter_list|,
name|int
name|count
parameter_list|)
throws|throws
name|IOException
block|{
name|meta
operator|.
name|writeVInt
argument_list|(
name|count
argument_list|)
expr_stmt|;
name|meta
operator|.
name|writeByte
argument_list|(
name|UNCOMPRESSED
argument_list|)
expr_stmt|;
comment|// uncompressed byte[]
name|meta
operator|.
name|writeLong
argument_list|(
name|data
operator|.
name|getFilePointer
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Number
name|nv
range|:
name|values
control|)
block|{
name|data
operator|.
name|writeByte
argument_list|(
operator|(
name|byte
operator|)
name|nv
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|addTableCompressed
specifier|private
name|void
name|addTableCompressed
parameter_list|(
name|Iterable
argument_list|<
name|Number
argument_list|>
name|values
parameter_list|,
name|FormatAndBits
name|compression
parameter_list|,
name|int
name|count
parameter_list|,
name|NormMap
name|uniqueValues
parameter_list|)
throws|throws
name|IOException
block|{
name|meta
operator|.
name|writeVInt
argument_list|(
name|count
argument_list|)
expr_stmt|;
name|meta
operator|.
name|writeByte
argument_list|(
name|TABLE_COMPRESSED
argument_list|)
expr_stmt|;
comment|// table-compressed
name|meta
operator|.
name|writeLong
argument_list|(
name|data
operator|.
name|getFilePointer
argument_list|()
argument_list|)
expr_stmt|;
name|data
operator|.
name|writeVInt
argument_list|(
name|PackedInts
operator|.
name|VERSION_CURRENT
argument_list|)
expr_stmt|;
name|long
index|[]
name|decode
init|=
name|uniqueValues
operator|.
name|getDecodeTable
argument_list|()
decl_stmt|;
comment|// upgrade to power of two sized array
name|int
name|size
init|=
literal|1
operator|<<
name|compression
operator|.
name|bitsPerValue
decl_stmt|;
name|data
operator|.
name|writeVInt
argument_list|(
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|decode
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|data
operator|.
name|writeLong
argument_list|(
name|decode
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
name|decode
operator|.
name|length
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|data
operator|.
name|writeLong
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|data
operator|.
name|writeVInt
argument_list|(
name|compression
operator|.
name|format
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|data
operator|.
name|writeVInt
argument_list|(
name|compression
operator|.
name|bitsPerValue
argument_list|)
expr_stmt|;
specifier|final
name|PackedInts
operator|.
name|Writer
name|writer
init|=
name|PackedInts
operator|.
name|getWriterNoHeader
argument_list|(
name|data
argument_list|,
name|compression
operator|.
name|format
argument_list|,
name|count
argument_list|,
name|compression
operator|.
name|bitsPerValue
argument_list|,
name|PackedInts
operator|.
name|DEFAULT_BUFFER_SIZE
argument_list|)
decl_stmt|;
for|for
control|(
name|Number
name|nv
range|:
name|values
control|)
block|{
name|writer
operator|.
name|add
argument_list|(
name|uniqueValues
operator|.
name|getOrd
argument_list|(
name|nv
operator|.
name|longValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|finish
argument_list|()
expr_stmt|;
block|}
DECL|method|addDeltaCompressed
specifier|private
name|void
name|addDeltaCompressed
parameter_list|(
name|Iterable
argument_list|<
name|Number
argument_list|>
name|values
parameter_list|,
name|int
name|count
parameter_list|)
throws|throws
name|IOException
block|{
name|meta
operator|.
name|writeVInt
argument_list|(
name|count
argument_list|)
expr_stmt|;
name|meta
operator|.
name|writeByte
argument_list|(
name|DELTA_COMPRESSED
argument_list|)
expr_stmt|;
comment|// delta-compressed
name|meta
operator|.
name|writeLong
argument_list|(
name|data
operator|.
name|getFilePointer
argument_list|()
argument_list|)
expr_stmt|;
name|data
operator|.
name|writeVInt
argument_list|(
name|PackedInts
operator|.
name|VERSION_CURRENT
argument_list|)
expr_stmt|;
name|data
operator|.
name|writeVInt
argument_list|(
name|BLOCK_SIZE
argument_list|)
expr_stmt|;
specifier|final
name|BlockPackedWriter
name|writer
init|=
operator|new
name|BlockPackedWriter
argument_list|(
name|data
argument_list|,
name|BLOCK_SIZE
argument_list|)
decl_stmt|;
for|for
control|(
name|Number
name|nv
range|:
name|values
control|)
block|{
name|writer
operator|.
name|add
argument_list|(
name|nv
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|finish
argument_list|()
expr_stmt|;
block|}
comment|// encodes only uncommon values in a sparse bitset
comment|// access is constant time, and the common case is predictable
comment|// exceptions nest either to CONST (if there are only 2 values), or INDIRECT (if there are> 2 values)
DECL|method|addPatched
specifier|private
name|void
name|addPatched
parameter_list|(
name|FieldInfo
name|field
parameter_list|,
specifier|final
name|Iterable
argument_list|<
name|Number
argument_list|>
name|values
parameter_list|,
name|int
name|count
parameter_list|,
name|NormMap
name|uniqueValues
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|long
name|decodeTable
index|[]
init|=
name|uniqueValues
operator|.
name|getDecodeTable
argument_list|()
decl_stmt|;
name|int
name|commonCount
init|=
name|uniqueValues
operator|.
name|maxFreq
argument_list|()
decl_stmt|;
specifier|final
name|long
name|commonValue
init|=
name|decodeTable
index|[
name|uniqueValues
operator|.
name|maxOrd
argument_list|()
index|]
decl_stmt|;
name|meta
operator|.
name|writeVInt
argument_list|(
name|count
operator|-
name|commonCount
argument_list|)
expr_stmt|;
name|meta
operator|.
name|writeByte
argument_list|(
name|PATCHED
argument_list|)
expr_stmt|;
name|meta
operator|.
name|writeLong
argument_list|(
name|data
operator|.
name|getFilePointer
argument_list|()
argument_list|)
expr_stmt|;
comment|// write docs with value
name|writeDocsWithValue
argument_list|(
name|values
argument_list|,
name|commonValue
argument_list|)
expr_stmt|;
comment|// write exceptions: only two cases make sense
comment|// bpv = 1 (folded into sparse bitset already)
comment|// bpv> 1 (add indirect exception table)
name|meta
operator|.
name|writeVInt
argument_list|(
name|field
operator|.
name|number
argument_list|)
expr_stmt|;
if|if
condition|(
name|uniqueValues
operator|.
name|size
operator|==
literal|2
condition|)
block|{
comment|// special case: implicit in bitset
name|int
name|otherOrd
init|=
name|uniqueValues
operator|.
name|maxOrd
argument_list|()
operator|==
literal|0
condition|?
literal|1
else|:
literal|0
decl_stmt|;
name|addConstant
argument_list|(
name|decodeTable
index|[
name|otherOrd
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// exception table
name|addIndirect
argument_list|(
name|field
argument_list|,
name|values
argument_list|,
name|count
argument_list|,
name|uniqueValues
argument_list|)
expr_stmt|;
block|}
block|}
comment|// encodes values as sparse array: keys[] and values[]
comment|// access is log(N) where N = keys.length (slow!)
comment|// so this is only appropriate as an exception table for patched, or when common value is 0 (wont be accessed by searching)
DECL|method|addIndirect
specifier|private
name|void
name|addIndirect
parameter_list|(
name|FieldInfo
name|field
parameter_list|,
specifier|final
name|Iterable
argument_list|<
name|Number
argument_list|>
name|values
parameter_list|,
name|int
name|count
parameter_list|,
name|NormMap
name|uniqueValues
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|commonCount
init|=
name|uniqueValues
operator|.
name|maxFreq
argument_list|()
decl_stmt|;
specifier|final
name|long
name|commonValue
init|=
name|uniqueValues
operator|.
name|getDecodeTable
argument_list|()
index|[
name|uniqueValues
operator|.
name|maxOrd
argument_list|()
index|]
decl_stmt|;
name|meta
operator|.
name|writeVInt
argument_list|(
name|count
operator|-
name|commonCount
argument_list|)
expr_stmt|;
name|meta
operator|.
name|writeByte
argument_list|(
name|INDIRECT
argument_list|)
expr_stmt|;
name|meta
operator|.
name|writeLong
argument_list|(
name|data
operator|.
name|getFilePointer
argument_list|()
argument_list|)
expr_stmt|;
comment|// write docs with value
name|writeDocsWithValue
argument_list|(
name|values
argument_list|,
name|commonValue
argument_list|)
expr_stmt|;
comment|// write actual values
name|writeNormsField
argument_list|(
name|field
argument_list|,
operator|new
name|Iterable
argument_list|<
name|Number
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|Number
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
operator|new
name|FilterIterator
argument_list|<
name|Number
argument_list|,
name|Number
argument_list|>
argument_list|(
name|values
operator|.
name|iterator
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|boolean
name|predicateFunction
parameter_list|(
name|Number
name|value
parameter_list|)
block|{
return|return
name|value
operator|.
name|longValue
argument_list|()
operator|!=
name|commonValue
return|;
block|}
block|}
return|;
block|}
block|}
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|method|writeDocsWithValue
specifier|private
name|void
name|writeDocsWithValue
parameter_list|(
specifier|final
name|Iterable
argument_list|<
name|Number
argument_list|>
name|values
parameter_list|,
name|long
name|commonValue
parameter_list|)
throws|throws
name|IOException
block|{
name|data
operator|.
name|writeLong
argument_list|(
name|commonValue
argument_list|)
expr_stmt|;
name|data
operator|.
name|writeVInt
argument_list|(
name|PackedInts
operator|.
name|VERSION_CURRENT
argument_list|)
expr_stmt|;
name|data
operator|.
name|writeVInt
argument_list|(
name|BLOCK_SIZE
argument_list|)
expr_stmt|;
comment|// write docs with value
specifier|final
name|MonotonicBlockPackedWriter
name|writer
init|=
operator|new
name|MonotonicBlockPackedWriter
argument_list|(
name|data
argument_list|,
name|BLOCK_SIZE
argument_list|)
decl_stmt|;
name|int
name|doc
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Number
name|n
range|:
name|values
control|)
block|{
name|long
name|v
init|=
name|n
operator|.
name|longValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|v
operator|!=
name|commonValue
condition|)
block|{
name|writer
operator|.
name|add
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
name|doc
operator|++
expr_stmt|;
block|}
name|writer
operator|.
name|finish
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
if|if
condition|(
name|meta
operator|!=
literal|null
condition|)
block|{
name|meta
operator|.
name|writeVInt
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// write EOF marker
name|CodecUtil
operator|.
name|writeFooter
argument_list|(
name|meta
argument_list|)
expr_stmt|;
comment|// write checksum
block|}
if|if
condition|(
name|data
operator|!=
literal|null
condition|)
block|{
name|CodecUtil
operator|.
name|writeFooter
argument_list|(
name|data
argument_list|)
expr_stmt|;
comment|// write checksum
block|}
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|success
condition|)
block|{
name|IOUtils
operator|.
name|close
argument_list|(
name|data
argument_list|,
name|meta
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|IOUtils
operator|.
name|closeWhileHandlingException
argument_list|(
name|data
argument_list|,
name|meta
argument_list|)
expr_stmt|;
block|}
name|meta
operator|=
name|data
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|// specialized deduplication of long->ord for norms: 99.99999% of the time this will be a single-byte range.
DECL|class|NormMap
specifier|static
class|class
name|NormMap
block|{
comment|// we use short: at most we will add 257 values to this map before its rejected as too big above.
DECL|field|singleByteRange
specifier|final
name|short
index|[]
name|singleByteRange
init|=
operator|new
name|short
index|[
literal|256
index|]
decl_stmt|;
DECL|field|freqs
specifier|final
name|int
index|[]
name|freqs
init|=
operator|new
name|int
index|[
literal|257
index|]
decl_stmt|;
DECL|field|other
specifier|final
name|Map
argument_list|<
name|Long
argument_list|,
name|Short
argument_list|>
name|other
init|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|Short
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|size
name|int
name|size
decl_stmt|;
block|{
name|Arrays
operator|.
name|fill
argument_list|(
name|singleByteRange
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/** adds an item to the mapping. returns true if actually added */
DECL|method|add
specifier|public
name|boolean
name|add
parameter_list|(
name|long
name|l
parameter_list|)
block|{
assert|assert
name|size
operator|<=
literal|256
assert|;
comment|// once we add> 256 values, we nullify the map in addNumericField and don't use this strategy
if|if
condition|(
name|l
operator|>=
name|Byte
operator|.
name|MIN_VALUE
operator|&&
name|l
operator|<=
name|Byte
operator|.
name|MAX_VALUE
condition|)
block|{
name|int
name|index
init|=
call|(
name|int
call|)
argument_list|(
name|l
operator|+
literal|128
argument_list|)
decl_stmt|;
name|short
name|previous
init|=
name|singleByteRange
index|[
name|index
index|]
decl_stmt|;
if|if
condition|(
name|previous
operator|<
literal|0
condition|)
block|{
name|short
name|slot
init|=
operator|(
name|short
operator|)
name|size
decl_stmt|;
name|singleByteRange
index|[
name|index
index|]
operator|=
name|slot
expr_stmt|;
name|freqs
index|[
name|slot
index|]
operator|++
expr_stmt|;
name|size
operator|++
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
name|freqs
index|[
name|previous
index|]
operator|++
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
else|else
block|{
name|Short
name|previous
init|=
name|other
operator|.
name|get
argument_list|(
name|l
argument_list|)
decl_stmt|;
if|if
condition|(
name|previous
operator|==
literal|null
condition|)
block|{
name|freqs
index|[
name|size
index|]
operator|++
expr_stmt|;
name|other
operator|.
name|put
argument_list|(
name|l
argument_list|,
operator|(
name|short
operator|)
name|size
argument_list|)
expr_stmt|;
name|size
operator|++
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
name|freqs
index|[
name|previous
index|]
operator|++
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
block|}
comment|/** gets the ordinal for a previously added item */
DECL|method|getOrd
specifier|public
name|int
name|getOrd
parameter_list|(
name|long
name|l
parameter_list|)
block|{
if|if
condition|(
name|l
operator|>=
name|Byte
operator|.
name|MIN_VALUE
operator|&&
name|l
operator|<=
name|Byte
operator|.
name|MAX_VALUE
condition|)
block|{
name|int
name|index
init|=
call|(
name|int
call|)
argument_list|(
name|l
operator|+
literal|128
argument_list|)
decl_stmt|;
return|return
name|singleByteRange
index|[
name|index
index|]
return|;
block|}
else|else
block|{
comment|// NPE if something is screwed up
return|return
name|other
operator|.
name|get
argument_list|(
name|l
argument_list|)
return|;
block|}
block|}
comment|/** retrieves the ordinal table for previously added items */
DECL|method|getDecodeTable
specifier|public
name|long
index|[]
name|getDecodeTable
parameter_list|()
block|{
name|long
name|decode
index|[]
init|=
operator|new
name|long
index|[
name|size
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|singleByteRange
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|short
name|s
init|=
name|singleByteRange
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|s
operator|>=
literal|0
condition|)
block|{
name|decode
index|[
name|s
index|]
operator|=
name|i
operator|-
literal|128
expr_stmt|;
block|}
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|Short
argument_list|>
name|entry
range|:
name|other
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|decode
index|[
name|entry
operator|.
name|getValue
argument_list|()
index|]
operator|=
name|entry
operator|.
name|getKey
argument_list|()
expr_stmt|;
block|}
return|return
name|decode
return|;
block|}
comment|// TODO: if we need more complicated frequency-driven optos, maybe add 'finish' to this api
comment|// and sort all ords by frequency. we could then lower BPV and waste a value to represent 'patched',
comment|/** retrieves frequency table for items (indexed by ordinal) */
DECL|method|getFreqs
specifier|public
name|int
index|[]
name|getFreqs
parameter_list|()
block|{
return|return
name|freqs
return|;
block|}
comment|/** sugar: returns max value over getFreqs() */
DECL|method|maxFreq
specifier|public
name|int
name|maxFreq
parameter_list|()
block|{
name|int
name|max
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|max
operator|=
name|Math
operator|.
name|max
argument_list|(
name|max
argument_list|,
name|freqs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|max
return|;
block|}
comment|/** sugar: returns ordinal with maxFreq() */
DECL|method|maxOrd
specifier|public
name|int
name|maxOrd
parameter_list|()
block|{
name|long
name|max
init|=
literal|0
decl_stmt|;
name|int
name|maxOrd
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|freqs
index|[
name|i
index|]
operator|>
name|max
condition|)
block|{
name|max
operator|=
name|freqs
index|[
name|i
index|]
expr_stmt|;
name|maxOrd
operator|=
name|i
expr_stmt|;
block|}
block|}
return|return
name|maxOrd
return|;
block|}
block|}
block|}
end_class
end_unit
