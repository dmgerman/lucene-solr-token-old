begin_unit
begin_package
DECL|package|org.apache.lucene.codecs.lucene41.values
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|lucene41
operator|.
name|values
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|BinaryDocValuesConsumer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|CodecUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|FieldInfos
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexOutput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|packed
operator|.
name|AppendingLongBuffer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|packed
operator|.
name|AppendingLongBuffer
operator|.
name|Iterator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|packed
operator|.
name|PackedInts
import|;
end_import
begin_class
DECL|class|Lucene41BinaryDocValuesConsumer
specifier|public
class|class
name|Lucene41BinaryDocValuesConsumer
extends|extends
name|BinaryDocValuesConsumer
block|{
DECL|field|dataOut
specifier|private
specifier|final
name|IndexOutput
name|dataOut
decl_stmt|;
DECL|field|indexOut
specifier|private
specifier|final
name|IndexOutput
name|indexOut
decl_stmt|;
comment|// nocommit: remove buffering!
DECL|field|buffer
specifier|private
specifier|final
name|AppendingLongBuffer
name|buffer
decl_stmt|;
DECL|field|offset
specifier|private
name|long
name|offset
init|=
literal|0
decl_stmt|;
DECL|field|prevOffset
specifier|private
name|long
name|prevOffset
init|=
literal|0
decl_stmt|;
DECL|field|VERSION_START
specifier|static
specifier|final
name|int
name|VERSION_START
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|CODEC_NAME
specifier|static
specifier|final
name|String
name|CODEC_NAME
init|=
literal|"Lucene41Binary"
decl_stmt|;
DECL|field|VALUE_SIZE_VAR
specifier|static
specifier|final
name|int
name|VALUE_SIZE_VAR
init|=
operator|-
literal|1
decl_stmt|;
DECL|method|Lucene41BinaryDocValuesConsumer
specifier|public
name|Lucene41BinaryDocValuesConsumer
parameter_list|(
name|IndexOutput
name|dataOut
parameter_list|,
name|IndexOutput
name|indexOut
parameter_list|,
name|boolean
name|fixedLength
parameter_list|,
name|int
name|maxLength
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|dataOut
operator|=
name|dataOut
expr_stmt|;
name|this
operator|.
name|indexOut
operator|=
name|indexOut
expr_stmt|;
name|CodecUtil
operator|.
name|writeHeader
argument_list|(
name|dataOut
argument_list|,
name|CODEC_NAME
argument_list|,
name|VERSION_START
argument_list|)
expr_stmt|;
name|dataOut
operator|.
name|writeInt
argument_list|(
name|fixedLength
condition|?
name|maxLength
else|:
name|VALUE_SIZE_VAR
argument_list|)
expr_stmt|;
name|dataOut
operator|.
name|writeInt
argument_list|(
name|maxLength
argument_list|)
expr_stmt|;
name|CodecUtil
operator|.
name|writeHeader
argument_list|(
name|indexOut
argument_list|,
name|CODEC_NAME
argument_list|,
name|VERSION_START
argument_list|)
expr_stmt|;
name|buffer
operator|=
name|fixedLength
condition|?
literal|null
else|:
operator|new
name|AppendingLongBuffer
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|finish
specifier|public
name|void
name|finish
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
if|if
condition|(
name|buffer
operator|!=
literal|null
condition|)
block|{
name|Iterator
name|iterator
init|=
name|buffer
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|PackedInts
operator|.
name|Writer
name|writer
init|=
name|PackedInts
operator|.
name|getWriter
argument_list|(
name|indexOut
argument_list|,
name|buffer
operator|.
name|size
argument_list|()
operator|+
literal|1
argument_list|,
name|PackedInts
operator|.
name|bitsRequired
argument_list|(
name|offset
argument_list|)
argument_list|,
name|PackedInts
operator|.
name|FASTEST
argument_list|)
decl_stmt|;
name|long
name|previous
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|long
name|next
init|=
name|iterator
operator|.
name|next
argument_list|()
operator|+
name|previous
decl_stmt|;
name|previous
operator|=
name|next
expr_stmt|;
name|writer
operator|.
name|add
argument_list|(
name|next
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|add
argument_list|(
name|offset
argument_list|)
expr_stmt|;
name|writer
operator|.
name|finish
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|close
argument_list|(
name|indexOut
argument_list|,
name|dataOut
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|add
specifier|public
name|void
name|add
parameter_list|(
name|BytesRef
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|dataOut
operator|.
name|writeBytes
argument_list|(
name|value
operator|.
name|bytes
argument_list|,
name|value
operator|.
name|offset
argument_list|,
name|value
operator|.
name|length
argument_list|)
expr_stmt|;
if|if
condition|(
name|buffer
operator|!=
literal|null
condition|)
block|{
name|buffer
operator|.
name|add
argument_list|(
name|offset
operator|-
name|prevOffset
argument_list|)
expr_stmt|;
name|prevOffset
operator|=
name|offset
expr_stmt|;
block|}
name|offset
operator|+=
name|value
operator|.
name|length
expr_stmt|;
block|}
block|}
end_class
end_unit
