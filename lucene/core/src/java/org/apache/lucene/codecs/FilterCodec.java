begin_unit
begin_package
DECL|package|org.apache.lucene.codecs
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_comment
comment|/**  * A codec that forwards all its method calls to another codec.  *<p>  * Extend this class when you need to reuse the functionality of an existing  * codec. For example, if you want to build a codec that redefines Lucene40's  * {@link LiveDocsFormat}:  *<pre class="prettyprint">  *   public final class CustomCodec extends FilterCodec {  *  *     public CustomCodec() {  *       super("CustomCodec");  *     }  *  *     public Codec delegate() {  *       return Codec.forName("Lucene40");  *     }  *  *     public LiveDocsFormat liveDocsFormat() {  *       return new CustomLiveDocsFormat();  *     }  *  *   }  *</pre>  */
end_comment
begin_class
DECL|class|FilterCodec
specifier|public
specifier|abstract
class|class
name|FilterCodec
extends|extends
name|Codec
block|{
comment|/** Sole constructor. */
DECL|method|FilterCodec
specifier|public
name|FilterCodec
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
comment|/**    * Return the codec that is responsible for providing default format    * implementations.    */
DECL|method|delegate
specifier|protected
specifier|abstract
name|Codec
name|delegate
parameter_list|()
function_decl|;
annotation|@
name|Override
DECL|method|docValuesFormat
specifier|public
name|DocValuesFormat
name|docValuesFormat
parameter_list|()
block|{
return|return
name|delegate
argument_list|()
operator|.
name|docValuesFormat
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|fieldInfosFormat
specifier|public
name|FieldInfosFormat
name|fieldInfosFormat
parameter_list|()
block|{
return|return
name|delegate
argument_list|()
operator|.
name|fieldInfosFormat
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|liveDocsFormat
specifier|public
name|LiveDocsFormat
name|liveDocsFormat
parameter_list|()
block|{
return|return
name|delegate
argument_list|()
operator|.
name|liveDocsFormat
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|normsFormat
specifier|public
name|NormsFormat
name|normsFormat
parameter_list|()
block|{
return|return
name|delegate
argument_list|()
operator|.
name|normsFormat
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|postingsFormat
specifier|public
name|PostingsFormat
name|postingsFormat
parameter_list|()
block|{
return|return
name|delegate
argument_list|()
operator|.
name|postingsFormat
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|segmentInfoFormat
specifier|public
name|SegmentInfoFormat
name|segmentInfoFormat
parameter_list|()
block|{
return|return
name|delegate
argument_list|()
operator|.
name|segmentInfoFormat
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|storedFieldsFormat
specifier|public
name|StoredFieldsFormat
name|storedFieldsFormat
parameter_list|()
block|{
return|return
name|delegate
argument_list|()
operator|.
name|storedFieldsFormat
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|termVectorsFormat
specifier|public
name|TermVectorsFormat
name|termVectorsFormat
parameter_list|()
block|{
return|return
name|delegate
argument_list|()
operator|.
name|termVectorsFormat
argument_list|()
return|;
block|}
block|}
end_class
end_unit
