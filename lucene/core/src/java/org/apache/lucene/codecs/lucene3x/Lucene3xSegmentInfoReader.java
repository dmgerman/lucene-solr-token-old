begin_unit
begin_package
DECL|package|org.apache.lucene.codecs.lucene3x
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|lucene3x
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|SegmentInfoReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexFileNames
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexFormatTooNewException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexFormatTooOldException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SegmentInfo
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SegmentInfoPerCommit
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SegmentInfos
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|CompoundFileDirectory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IOContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexInput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import
begin_comment
comment|/**  * Lucene 3x implementation of {@link SegmentInfoReader}.  * @lucene.experimental  * @deprecated  */
end_comment
begin_class
annotation|@
name|Deprecated
DECL|class|Lucene3xSegmentInfoReader
specifier|public
class|class
name|Lucene3xSegmentInfoReader
extends|extends
name|SegmentInfoReader
block|{
DECL|method|readLegacyInfos
specifier|public
specifier|static
name|void
name|readLegacyInfos
parameter_list|(
name|SegmentInfos
name|infos
parameter_list|,
name|Directory
name|directory
parameter_list|,
name|IndexInput
name|input
parameter_list|,
name|int
name|format
parameter_list|)
throws|throws
name|IOException
block|{
name|infos
operator|.
name|version
operator|=
name|input
operator|.
name|readLong
argument_list|()
expr_stmt|;
comment|// read version
name|infos
operator|.
name|counter
operator|=
name|input
operator|.
name|readInt
argument_list|()
expr_stmt|;
comment|// read counter
name|Lucene3xSegmentInfoReader
name|reader
init|=
operator|new
name|Lucene3xSegmentInfoReader
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|input
operator|.
name|readInt
argument_list|()
init|;
name|i
operator|>
literal|0
condition|;
name|i
operator|--
control|)
block|{
comment|// read segmentInfos
name|SegmentInfoPerCommit
name|siPerCommit
init|=
name|reader
operator|.
name|readSegmentInfo
argument_list|(
literal|null
argument_list|,
name|directory
argument_list|,
name|format
argument_list|,
name|input
argument_list|)
decl_stmt|;
name|SegmentInfo
name|si
init|=
name|siPerCommit
operator|.
name|info
decl_stmt|;
if|if
condition|(
name|si
operator|.
name|getVersion
argument_list|()
operator|==
literal|null
condition|)
block|{
comment|// Could be a 3.0 - try to open the doc stores - if it fails, it's a
comment|// 2.x segment, and an IndexFormatTooOldException will be thrown,
comment|// which is what we want.
name|Directory
name|dir
init|=
name|directory
decl_stmt|;
if|if
condition|(
name|Lucene3xSegmentInfoFormat
operator|.
name|getDocStoreOffset
argument_list|(
name|si
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
if|if
condition|(
name|Lucene3xSegmentInfoFormat
operator|.
name|getDocStoreIsCompoundFile
argument_list|(
name|si
argument_list|)
condition|)
block|{
name|dir
operator|=
operator|new
name|CompoundFileDirectory
argument_list|(
name|dir
argument_list|,
name|IndexFileNames
operator|.
name|segmentFileName
argument_list|(
name|Lucene3xSegmentInfoFormat
operator|.
name|getDocStoreSegment
argument_list|(
name|si
argument_list|)
argument_list|,
literal|""
argument_list|,
name|Lucene3xCodec
operator|.
name|COMPOUND_FILE_STORE_EXTENSION
argument_list|)
argument_list|,
name|IOContext
operator|.
name|READONCE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|si
operator|.
name|getUseCompoundFile
argument_list|()
condition|)
block|{
name|dir
operator|=
operator|new
name|CompoundFileDirectory
argument_list|(
name|dir
argument_list|,
name|IndexFileNames
operator|.
name|segmentFileName
argument_list|(
name|si
operator|.
name|name
argument_list|,
literal|""
argument_list|,
name|IndexFileNames
operator|.
name|COMPOUND_FILE_EXTENSION
argument_list|)
argument_list|,
name|IOContext
operator|.
name|READONCE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|Lucene3xStoredFieldsReader
operator|.
name|checkCodeVersion
argument_list|(
name|dir
argument_list|,
name|Lucene3xSegmentInfoFormat
operator|.
name|getDocStoreSegment
argument_list|(
name|si
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// If we opened the directory, close it
if|if
condition|(
name|dir
operator|!=
name|directory
condition|)
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// Above call succeeded, so it's a 3.0 segment. Upgrade it so the next
comment|// time the segment is read, its version won't be null and we won't
comment|// need to open FieldsReader every time for each such segment.
name|si
operator|.
name|setVersion
argument_list|(
literal|"3.0"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|si
operator|.
name|getVersion
argument_list|()
operator|.
name|equals
argument_list|(
literal|"2.x"
argument_list|)
condition|)
block|{
comment|// If it's a 3x index touched by 3.1+ code, then segments record their
comment|// version, whether they are 2.x ones or not. We detect that and throw
comment|// appropriate exception.
throw|throw
operator|new
name|IndexFormatTooOldException
argument_list|(
literal|"segment "
operator|+
name|si
operator|.
name|name
operator|+
literal|" in resource "
operator|+
name|input
argument_list|,
name|si
operator|.
name|getVersion
argument_list|()
argument_list|)
throw|;
block|}
name|infos
operator|.
name|add
argument_list|(
name|siPerCommit
argument_list|)
expr_stmt|;
block|}
name|infos
operator|.
name|userData
operator|=
name|input
operator|.
name|readStringStringMap
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|read
specifier|public
name|SegmentInfo
name|read
parameter_list|(
name|Directory
name|directory
parameter_list|,
name|String
name|segmentName
parameter_list|,
name|IOContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|read
argument_list|(
name|directory
argument_list|,
name|segmentName
argument_list|,
name|Lucene3xSegmentInfoFormat
operator|.
name|FORMAT_4X_UPGRADE
argument_list|,
name|context
argument_list|)
return|;
block|}
DECL|method|read
specifier|public
name|SegmentInfo
name|read
parameter_list|(
name|Directory
name|directory
parameter_list|,
name|String
name|segmentName
parameter_list|,
name|int
name|format
parameter_list|,
name|IOContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
comment|// NOTE: this is NOT how 3.x is really written...
name|String
name|fileName
init|=
name|IndexFileNames
operator|.
name|segmentFileName
argument_list|(
name|segmentName
argument_list|,
literal|""
argument_list|,
name|Lucene3xSegmentInfoFormat
operator|.
name|SI_EXTENSION
argument_list|)
decl_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|IndexInput
name|input
init|=
name|directory
operator|.
name|openInput
argument_list|(
name|fileName
argument_list|,
name|context
argument_list|)
decl_stmt|;
try|try
block|{
name|SegmentInfo
name|si
init|=
name|readSegmentInfo
argument_list|(
name|segmentName
argument_list|,
name|directory
argument_list|,
name|format
argument_list|,
name|input
argument_list|)
operator|.
name|info
decl_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
return|return
name|si
return|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|IOUtils
operator|.
name|closeWhileHandlingException
argument_list|(
name|input
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|input
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|addIfExists
specifier|private
specifier|static
name|void
name|addIfExists
parameter_list|(
name|Directory
name|dir
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|files
parameter_list|,
name|String
name|fileName
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|dir
operator|.
name|fileExists
argument_list|(
name|fileName
argument_list|)
condition|)
block|{
name|files
operator|.
name|add
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|readSegmentInfo
specifier|private
name|SegmentInfoPerCommit
name|readSegmentInfo
parameter_list|(
name|String
name|segmentName
parameter_list|,
name|Directory
name|dir
parameter_list|,
name|int
name|format
parameter_list|,
name|IndexInput
name|input
parameter_list|)
throws|throws
name|IOException
block|{
comment|// check that it is a format we can understand
if|if
condition|(
name|format
operator|>
name|Lucene3xSegmentInfoFormat
operator|.
name|FORMAT_DIAGNOSTICS
condition|)
block|{
throw|throw
operator|new
name|IndexFormatTooOldException
argument_list|(
name|input
argument_list|,
name|format
argument_list|,
name|Lucene3xSegmentInfoFormat
operator|.
name|FORMAT_DIAGNOSTICS
argument_list|,
name|Lucene3xSegmentInfoFormat
operator|.
name|FORMAT_4X_UPGRADE
argument_list|)
throw|;
block|}
if|if
condition|(
name|format
operator|<
name|Lucene3xSegmentInfoFormat
operator|.
name|FORMAT_4X_UPGRADE
condition|)
block|{
throw|throw
operator|new
name|IndexFormatTooNewException
argument_list|(
name|input
argument_list|,
name|format
argument_list|,
name|Lucene3xSegmentInfoFormat
operator|.
name|FORMAT_DIAGNOSTICS
argument_list|,
name|Lucene3xSegmentInfoFormat
operator|.
name|FORMAT_4X_UPGRADE
argument_list|)
throw|;
block|}
specifier|final
name|String
name|version
decl_stmt|;
if|if
condition|(
name|format
operator|<=
name|Lucene3xSegmentInfoFormat
operator|.
name|FORMAT_3_1
condition|)
block|{
name|version
operator|=
name|input
operator|.
name|readString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|version
operator|=
literal|null
expr_stmt|;
block|}
comment|// NOTE: we ignore this and use the incoming arg
comment|// instead, if it's non-null:
specifier|final
name|String
name|name
init|=
name|input
operator|.
name|readString
argument_list|()
decl_stmt|;
if|if
condition|(
name|segmentName
operator|==
literal|null
condition|)
block|{
name|segmentName
operator|=
name|name
expr_stmt|;
block|}
specifier|final
name|int
name|docCount
init|=
name|input
operator|.
name|readInt
argument_list|()
decl_stmt|;
specifier|final
name|long
name|delGen
init|=
name|input
operator|.
name|readLong
argument_list|()
decl_stmt|;
specifier|final
name|int
name|docStoreOffset
decl_stmt|;
specifier|final
name|String
name|docStoreSegment
decl_stmt|;
specifier|final
name|boolean
name|docStoreIsCompoundFile
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|attributes
decl_stmt|;
if|if
condition|(
name|format
operator|==
name|Lucene3xSegmentInfoFormat
operator|.
name|FORMAT_4X_UPGRADE
condition|)
block|{
comment|// we already upgraded to 4.x si format: so shared docstore stuff is in the attributes map.
name|attributes
operator|=
name|input
operator|.
name|readStringStringMap
argument_list|()
expr_stmt|;
name|String
name|v
init|=
name|attributes
operator|.
name|get
argument_list|(
name|Lucene3xSegmentInfoFormat
operator|.
name|DS_OFFSET_KEY
argument_list|)
decl_stmt|;
name|docStoreOffset
operator|=
name|v
operator|==
literal|null
condition|?
operator|-
literal|1
else|:
name|Integer
operator|.
name|parseInt
argument_list|(
name|v
argument_list|)
expr_stmt|;
name|v
operator|=
name|attributes
operator|.
name|get
argument_list|(
name|Lucene3xSegmentInfoFormat
operator|.
name|DS_NAME_KEY
argument_list|)
expr_stmt|;
name|docStoreSegment
operator|=
name|v
operator|==
literal|null
condition|?
name|segmentName
else|:
name|v
expr_stmt|;
name|v
operator|=
name|attributes
operator|.
name|get
argument_list|(
name|Lucene3xSegmentInfoFormat
operator|.
name|DS_COMPOUND_KEY
argument_list|)
expr_stmt|;
name|docStoreIsCompoundFile
operator|=
name|v
operator|==
literal|null
condition|?
literal|false
else|:
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// for older formats, parse the docstore stuff and shove it into attributes
name|attributes
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|docStoreOffset
operator|=
name|input
operator|.
name|readInt
argument_list|()
expr_stmt|;
if|if
condition|(
name|docStoreOffset
operator|!=
operator|-
literal|1
condition|)
block|{
name|docStoreSegment
operator|=
name|input
operator|.
name|readString
argument_list|()
expr_stmt|;
name|docStoreIsCompoundFile
operator|=
name|input
operator|.
name|readByte
argument_list|()
operator|==
name|SegmentInfo
operator|.
name|YES
expr_stmt|;
name|attributes
operator|.
name|put
argument_list|(
name|Lucene3xSegmentInfoFormat
operator|.
name|DS_OFFSET_KEY
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|docStoreOffset
argument_list|)
argument_list|)
expr_stmt|;
name|attributes
operator|.
name|put
argument_list|(
name|Lucene3xSegmentInfoFormat
operator|.
name|DS_NAME_KEY
argument_list|,
name|docStoreSegment
argument_list|)
expr_stmt|;
name|attributes
operator|.
name|put
argument_list|(
name|Lucene3xSegmentInfoFormat
operator|.
name|DS_COMPOUND_KEY
argument_list|,
name|Boolean
operator|.
name|toString
argument_list|(
name|docStoreIsCompoundFile
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|docStoreSegment
operator|=
name|name
expr_stmt|;
name|docStoreIsCompoundFile
operator|=
literal|false
expr_stmt|;
block|}
block|}
comment|// pre-4.0 indexes write a byte if there is a single norms file
name|byte
name|b
init|=
name|input
operator|.
name|readByte
argument_list|()
decl_stmt|;
comment|//System.out.println("version=" + version + " name=" + name + " docCount=" + docCount + " delGen=" + delGen + " dso=" + docStoreOffset + " dss=" + docStoreSegment + " dssCFs=" + docStoreIsCompoundFile + " b=" + b + " format=" + format);
assert|assert
literal|1
operator|==
name|b
operator|:
literal|"expected 1 but was: "
operator|+
name|b
operator|+
literal|" format: "
operator|+
name|format
assert|;
specifier|final
name|int
name|numNormGen
init|=
name|input
operator|.
name|readInt
argument_list|()
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|Integer
argument_list|,
name|Long
argument_list|>
name|normGen
decl_stmt|;
if|if
condition|(
name|numNormGen
operator|==
name|SegmentInfo
operator|.
name|NO
condition|)
block|{
name|normGen
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|normGen
operator|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|Long
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|numNormGen
condition|;
name|j
operator|++
control|)
block|{
name|normGen
operator|.
name|put
argument_list|(
name|j
argument_list|,
name|input
operator|.
name|readLong
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|boolean
name|isCompoundFile
init|=
name|input
operator|.
name|readByte
argument_list|()
operator|==
name|SegmentInfo
operator|.
name|YES
decl_stmt|;
specifier|final
name|int
name|delCount
init|=
name|input
operator|.
name|readInt
argument_list|()
decl_stmt|;
assert|assert
name|delCount
operator|<=
name|docCount
assert|;
specifier|final
name|boolean
name|hasProx
init|=
name|input
operator|.
name|readByte
argument_list|()
operator|==
literal|1
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|diagnostics
init|=
name|input
operator|.
name|readStringStringMap
argument_list|()
decl_stmt|;
if|if
condition|(
name|format
operator|<=
name|Lucene3xSegmentInfoFormat
operator|.
name|FORMAT_HAS_VECTORS
condition|)
block|{
comment|// NOTE: unused
specifier|final
name|int
name|hasVectors
init|=
name|input
operator|.
name|readByte
argument_list|()
decl_stmt|;
block|}
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|files
decl_stmt|;
if|if
condition|(
name|format
operator|==
name|Lucene3xSegmentInfoFormat
operator|.
name|FORMAT_4X_UPGRADE
condition|)
block|{
name|files
operator|=
name|input
operator|.
name|readStringSet
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// Replicate logic from 3.x's SegmentInfo.files():
name|files
operator|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
if|if
condition|(
name|isCompoundFile
condition|)
block|{
name|files
operator|.
name|add
argument_list|(
name|IndexFileNames
operator|.
name|segmentFileName
argument_list|(
name|name
argument_list|,
literal|""
argument_list|,
name|IndexFileNames
operator|.
name|COMPOUND_FILE_EXTENSION
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|addIfExists
argument_list|(
name|dir
argument_list|,
name|files
argument_list|,
name|IndexFileNames
operator|.
name|segmentFileName
argument_list|(
name|segmentName
argument_list|,
literal|""
argument_list|,
name|Lucene3xFieldInfosReader
operator|.
name|FIELD_INFOS_EXTENSION
argument_list|)
argument_list|)
expr_stmt|;
name|addIfExists
argument_list|(
name|dir
argument_list|,
name|files
argument_list|,
name|IndexFileNames
operator|.
name|segmentFileName
argument_list|(
name|segmentName
argument_list|,
literal|""
argument_list|,
name|Lucene3xPostingsFormat
operator|.
name|FREQ_EXTENSION
argument_list|)
argument_list|)
expr_stmt|;
name|addIfExists
argument_list|(
name|dir
argument_list|,
name|files
argument_list|,
name|IndexFileNames
operator|.
name|segmentFileName
argument_list|(
name|segmentName
argument_list|,
literal|""
argument_list|,
name|Lucene3xPostingsFormat
operator|.
name|PROX_EXTENSION
argument_list|)
argument_list|)
expr_stmt|;
name|addIfExists
argument_list|(
name|dir
argument_list|,
name|files
argument_list|,
name|IndexFileNames
operator|.
name|segmentFileName
argument_list|(
name|segmentName
argument_list|,
literal|""
argument_list|,
name|Lucene3xPostingsFormat
operator|.
name|TERMS_EXTENSION
argument_list|)
argument_list|)
expr_stmt|;
name|addIfExists
argument_list|(
name|dir
argument_list|,
name|files
argument_list|,
name|IndexFileNames
operator|.
name|segmentFileName
argument_list|(
name|segmentName
argument_list|,
literal|""
argument_list|,
name|Lucene3xPostingsFormat
operator|.
name|TERMS_INDEX_EXTENSION
argument_list|)
argument_list|)
expr_stmt|;
name|addIfExists
argument_list|(
name|dir
argument_list|,
name|files
argument_list|,
name|IndexFileNames
operator|.
name|segmentFileName
argument_list|(
name|segmentName
argument_list|,
literal|""
argument_list|,
name|Lucene3xNormsProducer
operator|.
name|NORMS_EXTENSION
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|docStoreOffset
operator|!=
operator|-
literal|1
condition|)
block|{
if|if
condition|(
name|docStoreIsCompoundFile
condition|)
block|{
name|files
operator|.
name|add
argument_list|(
name|IndexFileNames
operator|.
name|segmentFileName
argument_list|(
name|docStoreSegment
argument_list|,
literal|""
argument_list|,
name|Lucene3xCodec
operator|.
name|COMPOUND_FILE_STORE_EXTENSION
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|files
operator|.
name|add
argument_list|(
name|IndexFileNames
operator|.
name|segmentFileName
argument_list|(
name|docStoreSegment
argument_list|,
literal|""
argument_list|,
name|Lucene3xStoredFieldsReader
operator|.
name|FIELDS_INDEX_EXTENSION
argument_list|)
argument_list|)
expr_stmt|;
name|files
operator|.
name|add
argument_list|(
name|IndexFileNames
operator|.
name|segmentFileName
argument_list|(
name|docStoreSegment
argument_list|,
literal|""
argument_list|,
name|Lucene3xStoredFieldsReader
operator|.
name|FIELDS_EXTENSION
argument_list|)
argument_list|)
expr_stmt|;
name|addIfExists
argument_list|(
name|dir
argument_list|,
name|files
argument_list|,
name|IndexFileNames
operator|.
name|segmentFileName
argument_list|(
name|docStoreSegment
argument_list|,
literal|""
argument_list|,
name|Lucene3xTermVectorsReader
operator|.
name|VECTORS_INDEX_EXTENSION
argument_list|)
argument_list|)
expr_stmt|;
name|addIfExists
argument_list|(
name|dir
argument_list|,
name|files
argument_list|,
name|IndexFileNames
operator|.
name|segmentFileName
argument_list|(
name|docStoreSegment
argument_list|,
literal|""
argument_list|,
name|Lucene3xTermVectorsReader
operator|.
name|VECTORS_FIELDS_EXTENSION
argument_list|)
argument_list|)
expr_stmt|;
name|addIfExists
argument_list|(
name|dir
argument_list|,
name|files
argument_list|,
name|IndexFileNames
operator|.
name|segmentFileName
argument_list|(
name|docStoreSegment
argument_list|,
literal|""
argument_list|,
name|Lucene3xTermVectorsReader
operator|.
name|VECTORS_DOCUMENTS_EXTENSION
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|isCompoundFile
condition|)
block|{
name|files
operator|.
name|add
argument_list|(
name|IndexFileNames
operator|.
name|segmentFileName
argument_list|(
name|segmentName
argument_list|,
literal|""
argument_list|,
name|Lucene3xStoredFieldsReader
operator|.
name|FIELDS_INDEX_EXTENSION
argument_list|)
argument_list|)
expr_stmt|;
name|files
operator|.
name|add
argument_list|(
name|IndexFileNames
operator|.
name|segmentFileName
argument_list|(
name|segmentName
argument_list|,
literal|""
argument_list|,
name|Lucene3xStoredFieldsReader
operator|.
name|FIELDS_EXTENSION
argument_list|)
argument_list|)
expr_stmt|;
name|addIfExists
argument_list|(
name|dir
argument_list|,
name|files
argument_list|,
name|IndexFileNames
operator|.
name|segmentFileName
argument_list|(
name|segmentName
argument_list|,
literal|""
argument_list|,
name|Lucene3xTermVectorsReader
operator|.
name|VECTORS_INDEX_EXTENSION
argument_list|)
argument_list|)
expr_stmt|;
name|addIfExists
argument_list|(
name|dir
argument_list|,
name|files
argument_list|,
name|IndexFileNames
operator|.
name|segmentFileName
argument_list|(
name|segmentName
argument_list|,
literal|""
argument_list|,
name|Lucene3xTermVectorsReader
operator|.
name|VECTORS_FIELDS_EXTENSION
argument_list|)
argument_list|)
expr_stmt|;
name|addIfExists
argument_list|(
name|dir
argument_list|,
name|files
argument_list|,
name|IndexFileNames
operator|.
name|segmentFileName
argument_list|(
name|segmentName
argument_list|,
literal|""
argument_list|,
name|Lucene3xTermVectorsReader
operator|.
name|VECTORS_DOCUMENTS_EXTENSION
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|normGen
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Integer
argument_list|,
name|Long
argument_list|>
name|ent
range|:
name|normGen
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|long
name|gen
init|=
name|ent
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|gen
operator|>=
name|SegmentInfo
operator|.
name|YES
condition|)
block|{
comment|// Definitely a separate norm file, with generation:
name|files
operator|.
name|add
argument_list|(
name|IndexFileNames
operator|.
name|fileNameFromGeneration
argument_list|(
name|segmentName
argument_list|,
literal|"s"
operator|+
name|ent
operator|.
name|getKey
argument_list|()
argument_list|,
name|gen
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|gen
operator|==
name|SegmentInfo
operator|.
name|NO
condition|)
block|{
comment|// No separate norm
block|}
else|else
block|{
comment|// We should have already hit indexformat too old exception
assert|assert
literal|false
assert|;
block|}
block|}
block|}
block|}
comment|// nocommit: convert normgen into attributes?
name|SegmentInfo
name|info
init|=
operator|new
name|SegmentInfo
argument_list|(
name|dir
argument_list|,
name|version
argument_list|,
name|segmentName
argument_list|,
name|docCount
argument_list|,
name|normGen
argument_list|,
name|isCompoundFile
argument_list|,
literal|null
argument_list|,
name|diagnostics
argument_list|,
name|attributes
argument_list|)
decl_stmt|;
name|info
operator|.
name|setFiles
argument_list|(
name|files
argument_list|)
expr_stmt|;
name|SegmentInfoPerCommit
name|infoPerCommit
init|=
operator|new
name|SegmentInfoPerCommit
argument_list|(
name|info
argument_list|,
name|delCount
argument_list|,
name|delGen
argument_list|)
decl_stmt|;
return|return
name|infoPerCommit
return|;
block|}
block|}
end_class
end_unit
