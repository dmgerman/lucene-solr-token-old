begin_unit
begin_package
DECL|package|org.apache.lucene.codecs.pfor
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|pfor
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|IntBuffer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IOContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexInput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexOutput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|sep
operator|.
name|IntStreamFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|sep
operator|.
name|IntIndexInput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|sep
operator|.
name|IntIndexOutput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|intblock
operator|.
name|FixedIntBlockIndexInput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|intblock
operator|.
name|FixedIntBlockIndexOutput
import|;
end_import
begin_comment
comment|/**   * Used to plug to PostingsReader/WriterBase.  * Encoder and decoder in lower layers are called by   * flushBlock() and readBlock()  */
end_comment
begin_class
DECL|class|PForFactory
specifier|public
specifier|final
class|class
name|PForFactory
extends|extends
name|IntStreamFactory
block|{
DECL|method|PForFactory
specifier|public
name|PForFactory
parameter_list|()
block|{   }
annotation|@
name|Override
DECL|method|createOutput
specifier|public
name|IntIndexOutput
name|createOutput
parameter_list|(
name|Directory
name|dir
parameter_list|,
name|String
name|fileName
parameter_list|,
name|IOContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|IndexOutput
name|out
init|=
name|dir
operator|.
name|createOutput
argument_list|(
name|fileName
argument_list|,
name|context
argument_list|)
decl_stmt|;
try|try
block|{
name|IntIndexOutput
name|ret
init|=
operator|new
name|PForIndexOutput
argument_list|(
name|out
argument_list|)
decl_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
return|return
name|ret
return|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
comment|// For some cases (e.g. disk full), the IntIndexOutput may not be
comment|// properly created. So we should close those opened files.
name|IOUtils
operator|.
name|closeWhileHandlingException
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|openInput
specifier|public
name|IntIndexInput
name|openInput
parameter_list|(
name|Directory
name|dir
parameter_list|,
name|String
name|fileName
parameter_list|,
name|IOContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|PForIndexInput
argument_list|(
name|dir
operator|.
name|openInput
argument_list|(
name|fileName
argument_list|,
name|context
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Here we'll hold both input buffer and output buffer for     * encoder/decoder.    */
DECL|class|PForIndexInput
specifier|private
class|class
name|PForIndexInput
extends|extends
name|FixedIntBlockIndexInput
block|{
DECL|method|PForIndexInput
name|PForIndexInput
parameter_list|(
specifier|final
name|IndexInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
DECL|class|PForBlockReader
class|class
name|PForBlockReader
implements|implements
name|FixedIntBlockIndexInput
operator|.
name|BlockReader
block|{
DECL|field|encoded
specifier|private
specifier|final
name|byte
index|[]
name|encoded
decl_stmt|;
DECL|field|buffer
specifier|private
specifier|final
name|int
index|[]
name|buffer
decl_stmt|;
DECL|field|in
specifier|private
specifier|final
name|IndexInput
name|in
decl_stmt|;
DECL|field|encodedBuffer
specifier|private
specifier|final
name|IntBuffer
name|encodedBuffer
decl_stmt|;
DECL|method|PForBlockReader
name|PForBlockReader
parameter_list|(
specifier|final
name|IndexInput
name|in
parameter_list|,
specifier|final
name|int
index|[]
name|buffer
parameter_list|)
block|{
comment|// upperbound for encoded value should include(here header is not buffered):
comment|// 1. blockSize of normal value (4x bytes);
comment|// 2. blockSize of exception value (4x bytes);
name|this
operator|.
name|encoded
operator|=
operator|new
name|byte
index|[
name|PForPostingsFormat
operator|.
name|DEFAULT_BLOCK_SIZE
operator|*
literal|8
index|]
expr_stmt|;
name|this
operator|.
name|in
operator|=
name|in
expr_stmt|;
name|this
operator|.
name|buffer
operator|=
name|buffer
expr_stmt|;
name|this
operator|.
name|encodedBuffer
operator|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|encoded
argument_list|)
operator|.
name|asIntBuffer
argument_list|()
expr_stmt|;
block|}
comment|// TODO: implement public void skipBlock() {} ?
annotation|@
name|Override
DECL|method|readBlock
specifier|public
name|void
name|readBlock
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|int
name|header
init|=
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
specifier|final
name|int
name|numBytes
init|=
name|PForUtil
operator|.
name|getEncodedSize
argument_list|(
name|header
argument_list|)
decl_stmt|;
assert|assert
name|numBytes
operator|<=
name|PForPostingsFormat
operator|.
name|DEFAULT_BLOCK_SIZE
operator|*
literal|8
assert|;
name|in
operator|.
name|readBytes
argument_list|(
name|encoded
argument_list|,
literal|0
argument_list|,
name|numBytes
argument_list|)
expr_stmt|;
name|PForUtil
operator|.
name|decompress
argument_list|(
name|encodedBuffer
argument_list|,
name|buffer
argument_list|,
name|header
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getBlockReader
specifier|protected
name|BlockReader
name|getBlockReader
parameter_list|(
specifier|final
name|IndexInput
name|in
parameter_list|,
specifier|final
name|int
index|[]
name|buffer
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|PForBlockReader
argument_list|(
name|in
argument_list|,
name|buffer
argument_list|)
return|;
block|}
block|}
DECL|class|PForIndexOutput
specifier|private
class|class
name|PForIndexOutput
extends|extends
name|FixedIntBlockIndexOutput
block|{
DECL|field|encoded
specifier|private
specifier|final
name|byte
index|[]
name|encoded
decl_stmt|;
DECL|field|encodedBuffer
specifier|private
specifier|final
name|IntBuffer
name|encodedBuffer
decl_stmt|;
DECL|method|PForIndexOutput
name|PForIndexOutput
parameter_list|(
name|IndexOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|out
argument_list|,
name|PForPostingsFormat
operator|.
name|DEFAULT_BLOCK_SIZE
argument_list|)
expr_stmt|;
name|this
operator|.
name|encoded
operator|=
operator|new
name|byte
index|[
name|PForPostingsFormat
operator|.
name|DEFAULT_BLOCK_SIZE
operator|*
literal|8
index|]
expr_stmt|;
name|this
operator|.
name|encodedBuffer
operator|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|encoded
argument_list|)
operator|.
name|asIntBuffer
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|flushBlock
specifier|protected
name|void
name|flushBlock
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|int
name|header
init|=
name|PForUtil
operator|.
name|compress
argument_list|(
name|buffer
argument_list|,
name|encodedBuffer
argument_list|)
decl_stmt|;
specifier|final
name|int
name|numBytes
init|=
name|PForUtil
operator|.
name|getEncodedSize
argument_list|(
name|header
argument_list|)
decl_stmt|;
comment|// nocommit writeVInt instead?
name|out
operator|.
name|writeInt
argument_list|(
name|header
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBytes
argument_list|(
name|encoded
argument_list|,
name|numBytes
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class
end_unit
