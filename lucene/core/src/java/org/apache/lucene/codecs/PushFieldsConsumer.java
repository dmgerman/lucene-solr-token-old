begin_unit
begin_package
DECL|package|org.apache.lucene.codecs
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DocsAndPositionsEnum
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DocsEnum
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|FieldInfo
operator|.
name|IndexOptions
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|FieldInfo
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Fields
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SegmentWriteState
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Terms
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|TermsEnum
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|FixedBitSet
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import
begin_comment
comment|/** Translates the "pull" API from {@link FieldsConsumer}  *  into a "push" API that pushes fields, terms, postings to  *  the consumer.  *  *<p>  *  The lifecycle is:  *<ol>  *<li>PushFieldsConsumer is created by   *        {@link PostingsFormat#fieldsConsumer(SegmentWriteState)}.  *<li>For each field, {@link #addField(FieldInfo)} is called,  *        returning a {@link TermsConsumer} for the field.  *<li>After all fields are added, the consumer is {@link #close}d.  *</ol>  *  * @lucene.experimental  */
end_comment
begin_class
DECL|class|PushFieldsConsumer
specifier|public
specifier|abstract
class|class
name|PushFieldsConsumer
extends|extends
name|FieldsConsumer
implements|implements
name|Closeable
block|{
DECL|field|writeState
specifier|final
name|SegmentWriteState
name|writeState
decl_stmt|;
comment|/** Sole constructor */
DECL|method|PushFieldsConsumer
specifier|protected
name|PushFieldsConsumer
parameter_list|(
name|SegmentWriteState
name|writeState
parameter_list|)
block|{
name|this
operator|.
name|writeState
operator|=
name|writeState
expr_stmt|;
block|}
comment|/** Add a new field */
DECL|method|addField
specifier|public
specifier|abstract
name|TermsConsumer
name|addField
parameter_list|(
name|FieldInfo
name|field
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/** Called when we are done adding everything. */
annotation|@
name|Override
DECL|method|close
specifier|public
specifier|abstract
name|void
name|close
parameter_list|()
throws|throws
name|IOException
function_decl|;
annotation|@
name|Override
DECL|method|write
specifier|public
specifier|final
name|void
name|write
parameter_list|(
name|Fields
name|fields
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
for|for
control|(
name|String
name|field
range|:
name|fields
control|)
block|{
comment|// for all fields
name|FieldInfo
name|fieldInfo
init|=
name|writeState
operator|.
name|fieldInfos
operator|.
name|fieldInfo
argument_list|(
name|field
argument_list|)
decl_stmt|;
name|IndexOptions
name|indexOptions
init|=
name|fieldInfo
operator|.
name|getIndexOptions
argument_list|()
decl_stmt|;
name|TermsConsumer
name|termsConsumer
init|=
name|addField
argument_list|(
name|fieldInfo
argument_list|)
decl_stmt|;
name|Terms
name|terms
init|=
name|fields
operator|.
name|terms
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|terms
operator|!=
literal|null
condition|)
block|{
comment|// Holds all docs that have this field:
name|FixedBitSet
name|visitedDocs
init|=
operator|new
name|FixedBitSet
argument_list|(
name|writeState
operator|.
name|segmentInfo
operator|.
name|getDocCount
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|hasFreq
init|=
name|indexOptions
operator|.
name|compareTo
argument_list|(
name|IndexOptions
operator|.
name|DOCS_AND_FREQS
argument_list|)
operator|>=
literal|0
decl_stmt|;
name|boolean
name|hasPositions
init|=
name|indexOptions
operator|.
name|compareTo
argument_list|(
name|IndexOptions
operator|.
name|DOCS_AND_FREQS_AND_POSITIONS
argument_list|)
operator|>=
literal|0
decl_stmt|;
assert|assert
name|hasPositions
operator|==
name|terms
operator|.
name|hasPositions
argument_list|()
assert|;
name|boolean
name|hasOffsets
init|=
name|indexOptions
operator|.
name|compareTo
argument_list|(
name|IndexOptions
operator|.
name|DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS
argument_list|)
operator|>=
literal|0
decl_stmt|;
assert|assert
name|hasOffsets
operator|==
name|terms
operator|.
name|hasOffsets
argument_list|()
assert|;
name|boolean
name|hasPayloads
init|=
name|fieldInfo
operator|.
name|hasPayloads
argument_list|()
decl_stmt|;
name|long
name|sumTotalTermFreq
init|=
literal|0
decl_stmt|;
name|long
name|sumDocFreq
init|=
literal|0
decl_stmt|;
name|int
name|flags
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|hasPositions
operator|==
literal|false
condition|)
block|{
if|if
condition|(
name|hasFreq
condition|)
block|{
name|flags
operator|=
name|flags
operator||
name|DocsEnum
operator|.
name|FLAG_FREQS
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|hasPayloads
condition|)
block|{
name|flags
operator|=
name|flags
operator||
name|DocsAndPositionsEnum
operator|.
name|FLAG_PAYLOADS
expr_stmt|;
block|}
if|if
condition|(
name|hasOffsets
condition|)
block|{
name|flags
operator|=
name|flags
operator||
name|DocsAndPositionsEnum
operator|.
name|FLAG_OFFSETS
expr_stmt|;
block|}
block|}
name|DocsEnum
name|docsEnum
init|=
literal|null
decl_stmt|;
name|DocsAndPositionsEnum
name|docsAndPositionsEnum
init|=
literal|null
decl_stmt|;
name|TermsEnum
name|termsEnum
init|=
name|terms
operator|.
name|iterator
argument_list|(
literal|null
argument_list|)
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
comment|// for all terms in this field
name|BytesRef
name|term
init|=
name|termsEnum
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|term
operator|==
literal|null
condition|)
block|{
break|break;
block|}
if|if
condition|(
name|hasPositions
condition|)
block|{
name|docsAndPositionsEnum
operator|=
name|termsEnum
operator|.
name|docsAndPositions
argument_list|(
literal|null
argument_list|,
name|docsAndPositionsEnum
argument_list|,
name|flags
argument_list|)
expr_stmt|;
name|docsEnum
operator|=
name|docsAndPositionsEnum
expr_stmt|;
block|}
else|else
block|{
name|docsEnum
operator|=
name|termsEnum
operator|.
name|docs
argument_list|(
literal|null
argument_list|,
name|docsEnum
argument_list|,
name|flags
argument_list|)
expr_stmt|;
name|docsAndPositionsEnum
operator|=
literal|null
expr_stmt|;
block|}
assert|assert
name|docsEnum
operator|!=
literal|null
assert|;
name|PostingsConsumer
name|postingsConsumer
init|=
name|termsConsumer
operator|.
name|startTerm
argument_list|(
name|term
argument_list|)
decl_stmt|;
comment|// How many documents have this term:
name|int
name|docFreq
init|=
literal|0
decl_stmt|;
comment|// How many times this term occurs:
name|long
name|totalTermFreq
init|=
literal|0
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
comment|// for all docs in this field+term
name|int
name|doc
init|=
name|docsEnum
operator|.
name|nextDoc
argument_list|()
decl_stmt|;
if|if
condition|(
name|doc
operator|==
name|DocsEnum
operator|.
name|NO_MORE_DOCS
condition|)
block|{
break|break;
block|}
name|docFreq
operator|++
expr_stmt|;
name|visitedDocs
operator|.
name|set
argument_list|(
name|doc
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasFreq
condition|)
block|{
name|int
name|freq
init|=
name|docsEnum
operator|.
name|freq
argument_list|()
decl_stmt|;
name|postingsConsumer
operator|.
name|startDoc
argument_list|(
name|doc
argument_list|,
name|freq
argument_list|)
expr_stmt|;
name|totalTermFreq
operator|+=
name|freq
expr_stmt|;
if|if
condition|(
name|hasPositions
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|freq
condition|;
name|i
operator|++
control|)
block|{
comment|// for all positions in this field+term + doc
name|int
name|pos
init|=
name|docsAndPositionsEnum
operator|.
name|nextPosition
argument_list|()
decl_stmt|;
name|BytesRef
name|payload
init|=
name|docsAndPositionsEnum
operator|.
name|getPayload
argument_list|()
decl_stmt|;
if|if
condition|(
name|hasOffsets
condition|)
block|{
name|postingsConsumer
operator|.
name|addPosition
argument_list|(
name|pos
argument_list|,
name|payload
argument_list|,
name|docsAndPositionsEnum
operator|.
name|startOffset
argument_list|()
argument_list|,
name|docsAndPositionsEnum
operator|.
name|endOffset
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|postingsConsumer
operator|.
name|addPosition
argument_list|(
name|pos
argument_list|,
name|payload
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
else|else
block|{
name|postingsConsumer
operator|.
name|startDoc
argument_list|(
name|doc
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|postingsConsumer
operator|.
name|finishDoc
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|docFreq
operator|>
literal|0
condition|)
block|{
name|termsConsumer
operator|.
name|finishTerm
argument_list|(
name|term
argument_list|,
operator|new
name|TermStats
argument_list|(
name|docFreq
argument_list|,
name|hasFreq
condition|?
name|totalTermFreq
else|:
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|sumTotalTermFreq
operator|+=
name|totalTermFreq
expr_stmt|;
name|sumDocFreq
operator|+=
name|docFreq
expr_stmt|;
block|}
block|}
name|termsConsumer
operator|.
name|finish
argument_list|(
name|hasFreq
condition|?
name|sumTotalTermFreq
else|:
operator|-
literal|1
argument_list|,
name|sumDocFreq
argument_list|,
name|visitedDocs
operator|.
name|cardinality
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|success
condition|)
block|{
name|IOUtils
operator|.
name|close
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|IOUtils
operator|.
name|closeWhileHandlingException
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class
end_unit
