begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.codecs.compressing
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|compressing
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|DataOutput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|ArrayUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|UnicodeUtil
import|;
end_import
begin_comment
comment|/**  * A {@link DataOutput} that can be used to build a byte[].  * @lucene.internal  */
end_comment
begin_class
DECL|class|GrowableByteArrayDataOutput
specifier|public
specifier|final
class|class
name|GrowableByteArrayDataOutput
extends|extends
name|DataOutput
block|{
comment|/** Minimum utf8 byte size of a string over which double pass over string is to save memory during encode */
DECL|field|MIN_UTF8_SIZE_TO_ENABLE_DOUBLE_PASS_ENCODING
specifier|static
specifier|final
name|int
name|MIN_UTF8_SIZE_TO_ENABLE_DOUBLE_PASS_ENCODING
init|=
literal|65536
decl_stmt|;
comment|/** The bytes */
DECL|field|bytes
specifier|public
name|byte
index|[]
name|bytes
decl_stmt|;
comment|/** The length */
DECL|field|length
specifier|public
name|int
name|length
decl_stmt|;
comment|// scratch for utf8 encoding of small strings
DECL|field|scratchBytes
name|byte
index|[]
name|scratchBytes
init|=
operator|new
name|byte
index|[
literal|16
index|]
decl_stmt|;
comment|/** Create a {@link GrowableByteArrayDataOutput} with the given initial capacity. */
DECL|method|GrowableByteArrayDataOutput
specifier|public
name|GrowableByteArrayDataOutput
parameter_list|(
name|int
name|cp
parameter_list|)
block|{
name|this
operator|.
name|bytes
operator|=
operator|new
name|byte
index|[
name|ArrayUtil
operator|.
name|oversize
argument_list|(
name|cp
argument_list|,
literal|1
argument_list|)
index|]
expr_stmt|;
name|this
operator|.
name|length
operator|=
literal|0
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeByte
specifier|public
name|void
name|writeByte
parameter_list|(
name|byte
name|b
parameter_list|)
block|{
if|if
condition|(
name|length
operator|>=
name|bytes
operator|.
name|length
condition|)
block|{
name|bytes
operator|=
name|ArrayUtil
operator|.
name|grow
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
block|}
name|bytes
index|[
name|length
operator|++
index|]
operator|=
name|b
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeBytes
specifier|public
name|void
name|writeBytes
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
block|{
specifier|final
name|int
name|newLength
init|=
name|length
operator|+
name|len
decl_stmt|;
name|bytes
operator|=
name|ArrayUtil
operator|.
name|grow
argument_list|(
name|bytes
argument_list|,
name|newLength
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|bytes
argument_list|,
name|length
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|length
operator|=
name|newLength
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeString
specifier|public
name|void
name|writeString
parameter_list|(
name|String
name|string
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|maxLen
init|=
name|string
operator|.
name|length
argument_list|()
operator|*
name|UnicodeUtil
operator|.
name|MAX_UTF8_BYTES_PER_CHAR
decl_stmt|;
if|if
condition|(
name|maxLen
operator|<=
name|MIN_UTF8_SIZE_TO_ENABLE_DOUBLE_PASS_ENCODING
condition|)
block|{
comment|// string is small enough that we don't need to save memory by falling back to double-pass approach
comment|// this is just an optimized writeString() that re-uses scratchBytes.
name|scratchBytes
operator|=
name|ArrayUtil
operator|.
name|grow
argument_list|(
name|scratchBytes
argument_list|,
name|maxLen
argument_list|)
expr_stmt|;
name|int
name|len
init|=
name|UnicodeUtil
operator|.
name|UTF16toUTF8
argument_list|(
name|string
argument_list|,
literal|0
argument_list|,
name|string
operator|.
name|length
argument_list|()
argument_list|,
name|scratchBytes
argument_list|)
decl_stmt|;
name|writeVInt
argument_list|(
name|len
argument_list|)
expr_stmt|;
name|writeBytes
argument_list|(
name|scratchBytes
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// use a double pass approach to avoid allocating a large intermediate buffer for string encoding
name|int
name|numBytes
init|=
name|UnicodeUtil
operator|.
name|calcUTF16toUTF8Length
argument_list|(
name|string
argument_list|,
literal|0
argument_list|,
name|string
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|writeVInt
argument_list|(
name|numBytes
argument_list|)
expr_stmt|;
name|bytes
operator|=
name|ArrayUtil
operator|.
name|grow
argument_list|(
name|bytes
argument_list|,
name|length
operator|+
name|numBytes
argument_list|)
expr_stmt|;
name|length
operator|=
name|UnicodeUtil
operator|.
name|UTF16toUTF8
argument_list|(
name|string
argument_list|,
literal|0
argument_list|,
name|string
operator|.
name|length
argument_list|()
argument_list|,
name|bytes
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class
end_unit
