begin_unit
begin_package
DECL|package|org.apache.lucene.codecs.lucene60
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|lucene60
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|CodecUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|DimensionalReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|DimensionalWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DimensionalValues
operator|.
name|IntersectVisitor
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DimensionalValues
operator|.
name|Relation
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|FieldInfo
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexFileNames
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SegmentWriteState
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexOutput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|bkd
operator|.
name|BKDWriter
import|;
end_import
begin_comment
comment|/** Writes dimensional values */
end_comment
begin_class
DECL|class|Lucene60DimensionalWriter
specifier|public
class|class
name|Lucene60DimensionalWriter
extends|extends
name|DimensionalWriter
implements|implements
name|Closeable
block|{
DECL|field|dataOut
specifier|final
name|IndexOutput
name|dataOut
decl_stmt|;
DECL|field|indexFPs
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|indexFPs
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|writeState
specifier|final
name|SegmentWriteState
name|writeState
decl_stmt|;
DECL|field|maxPointsInLeafNode
specifier|final
name|int
name|maxPointsInLeafNode
decl_stmt|;
DECL|field|maxMBSortInHeap
specifier|final
name|double
name|maxMBSortInHeap
decl_stmt|;
DECL|field|closed
specifier|private
name|boolean
name|closed
decl_stmt|;
comment|/** Full constructor */
DECL|method|Lucene60DimensionalWriter
specifier|public
name|Lucene60DimensionalWriter
parameter_list|(
name|SegmentWriteState
name|writeState
parameter_list|,
name|int
name|maxPointsInLeafNode
parameter_list|,
name|double
name|maxMBSortInHeap
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|writeState
operator|.
name|fieldInfos
operator|.
name|hasDimensionalValues
argument_list|()
assert|;
name|this
operator|.
name|writeState
operator|=
name|writeState
expr_stmt|;
name|this
operator|.
name|maxPointsInLeafNode
operator|=
name|maxPointsInLeafNode
expr_stmt|;
name|this
operator|.
name|maxMBSortInHeap
operator|=
name|maxMBSortInHeap
expr_stmt|;
name|String
name|dataFileName
init|=
name|IndexFileNames
operator|.
name|segmentFileName
argument_list|(
name|writeState
operator|.
name|segmentInfo
operator|.
name|name
argument_list|,
name|writeState
operator|.
name|segmentSuffix
argument_list|,
name|Lucene60DimensionalFormat
operator|.
name|DATA_EXTENSION
argument_list|)
decl_stmt|;
name|dataOut
operator|=
name|writeState
operator|.
name|directory
operator|.
name|createOutput
argument_list|(
name|dataFileName
argument_list|,
name|writeState
operator|.
name|context
argument_list|)
expr_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|CodecUtil
operator|.
name|writeIndexHeader
argument_list|(
name|dataOut
argument_list|,
name|Lucene60DimensionalFormat
operator|.
name|CODEC_NAME
argument_list|,
name|Lucene60DimensionalFormat
operator|.
name|DATA_VERSION_CURRENT
argument_list|,
name|writeState
operator|.
name|segmentInfo
operator|.
name|getId
argument_list|()
argument_list|,
name|writeState
operator|.
name|segmentSuffix
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|success
operator|==
literal|false
condition|)
block|{
name|IOUtils
operator|.
name|closeWhileHandlingException
argument_list|(
name|dataOut
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/** Uses the defaults values for {@code maxPointsInLeafNode} (1024) and {@code maxMBSortInHeap} (16.0) */
DECL|method|Lucene60DimensionalWriter
specifier|public
name|Lucene60DimensionalWriter
parameter_list|(
name|SegmentWriteState
name|writeState
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|writeState
argument_list|,
name|BKDWriter
operator|.
name|DEFAULT_MAX_POINTS_IN_LEAF_NODE
argument_list|,
name|BKDWriter
operator|.
name|DEFAULT_MAX_MB_SORT_IN_HEAP
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeField
specifier|public
name|void
name|writeField
parameter_list|(
name|FieldInfo
name|fieldInfo
parameter_list|,
name|DimensionalReader
name|values
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|BKDWriter
name|writer
init|=
operator|new
name|BKDWriter
argument_list|(
name|writeState
operator|.
name|directory
argument_list|,
name|writeState
operator|.
name|segmentInfo
operator|.
name|name
argument_list|,
name|fieldInfo
operator|.
name|getDimensionCount
argument_list|()
argument_list|,
name|fieldInfo
operator|.
name|getDimensionNumBytes
argument_list|()
argument_list|,
name|maxPointsInLeafNode
argument_list|,
name|maxMBSortInHeap
argument_list|)
init|)
block|{
name|values
operator|.
name|intersect
argument_list|(
name|fieldInfo
operator|.
name|name
argument_list|,
operator|new
name|IntersectVisitor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|visit
parameter_list|(
name|int
name|docID
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
specifier|public
name|void
name|visit
parameter_list|(
name|int
name|docID
parameter_list|,
name|byte
index|[]
name|packedValue
parameter_list|)
throws|throws
name|IOException
block|{
name|writer
operator|.
name|add
argument_list|(
name|packedValue
argument_list|,
name|docID
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Relation
name|compare
parameter_list|(
name|byte
index|[]
name|minPackedValue
parameter_list|,
name|byte
index|[]
name|maxPackedValue
parameter_list|)
block|{
return|return
name|Relation
operator|.
name|QUERY_CROSSES_CELL
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|indexFPs
operator|.
name|put
argument_list|(
name|fieldInfo
operator|.
name|name
argument_list|,
name|writer
operator|.
name|finish
argument_list|(
name|dataOut
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|closed
operator|==
literal|false
condition|)
block|{
name|CodecUtil
operator|.
name|writeFooter
argument_list|(
name|dataOut
argument_list|)
expr_stmt|;
name|dataOut
operator|.
name|close
argument_list|()
expr_stmt|;
name|closed
operator|=
literal|true
expr_stmt|;
name|String
name|indexFileName
init|=
name|IndexFileNames
operator|.
name|segmentFileName
argument_list|(
name|writeState
operator|.
name|segmentInfo
operator|.
name|name
argument_list|,
name|writeState
operator|.
name|segmentSuffix
argument_list|,
name|Lucene60DimensionalFormat
operator|.
name|INDEX_EXTENSION
argument_list|)
decl_stmt|;
comment|// Write index file
try|try
init|(
name|IndexOutput
name|indexOut
init|=
name|writeState
operator|.
name|directory
operator|.
name|createOutput
argument_list|(
name|indexFileName
argument_list|,
name|writeState
operator|.
name|context
argument_list|)
init|)
block|{
name|CodecUtil
operator|.
name|writeIndexHeader
argument_list|(
name|indexOut
argument_list|,
name|Lucene60DimensionalFormat
operator|.
name|CODEC_NAME
argument_list|,
name|Lucene60DimensionalFormat
operator|.
name|INDEX_VERSION_CURRENT
argument_list|,
name|writeState
operator|.
name|segmentInfo
operator|.
name|getId
argument_list|()
argument_list|,
name|writeState
operator|.
name|segmentSuffix
argument_list|)
expr_stmt|;
name|int
name|count
init|=
name|indexFPs
operator|.
name|size
argument_list|()
decl_stmt|;
name|indexOut
operator|.
name|writeVInt
argument_list|(
name|count
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|ent
range|:
name|indexFPs
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|FieldInfo
name|fieldInfo
init|=
name|writeState
operator|.
name|fieldInfos
operator|.
name|fieldInfo
argument_list|(
name|ent
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|fieldInfo
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"wrote field=\""
operator|+
name|ent
operator|.
name|getKey
argument_list|()
operator|+
literal|"\" but that field doesn't exist in FieldInfos"
argument_list|)
throw|;
block|}
name|indexOut
operator|.
name|writeVInt
argument_list|(
name|fieldInfo
operator|.
name|number
argument_list|)
expr_stmt|;
name|indexOut
operator|.
name|writeVLong
argument_list|(
name|ent
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|CodecUtil
operator|.
name|writeFooter
argument_list|(
name|indexOut
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class
end_unit
