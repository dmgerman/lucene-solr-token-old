begin_unit
begin_package
DECL|package|org.apache.lucene.codecs
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SegmentReadState
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SegmentWriteState
import|;
end_import
begin_comment
comment|/**   * Encodes/decodes indexed points.  *  * @lucene.experimental */
end_comment
begin_class
DECL|class|PointFormat
specifier|public
specifier|abstract
class|class
name|PointFormat
block|{
comment|/**    * Creates a new point format.    */
DECL|method|PointFormat
specifier|protected
name|PointFormat
parameter_list|()
block|{   }
comment|/** Writes a new segment */
DECL|method|fieldsWriter
specifier|public
specifier|abstract
name|PointWriter
name|fieldsWriter
parameter_list|(
name|SegmentWriteState
name|state
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/** Reads a segment.  NOTE: by the time this call    *  returns, it must hold open any files it will need to    *  use; else, those files may be deleted.     *  Additionally, required files may be deleted during the execution of     *  this call before there is a chance to open them. Under these     *  circumstances an IOException should be thrown by the implementation.     *  IOExceptions are expected and will automatically cause a retry of the     *  segment opening logic with the newly revised segments.    *  */
DECL|method|fieldsReader
specifier|public
specifier|abstract
name|PointReader
name|fieldsReader
parameter_list|(
name|SegmentReadState
name|state
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/** A {@code PointFormat} that has nothing indexed */
DECL|field|EMPTY
specifier|public
specifier|static
specifier|final
name|PointFormat
name|EMPTY
init|=
operator|new
name|PointFormat
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|PointWriter
name|fieldsWriter
parameter_list|(
name|SegmentWriteState
name|state
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|PointReader
name|fieldsReader
parameter_list|(
name|SegmentReadState
name|state
parameter_list|)
block|{
return|return
operator|new
name|PointReader
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{           }
annotation|@
name|Override
specifier|public
name|long
name|ramBytesUsed
parameter_list|()
block|{
return|return
literal|0L
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|checkIntegrity
parameter_list|()
block|{           }
annotation|@
name|Override
specifier|public
name|void
name|intersect
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|IntersectVisitor
name|visitor
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"field=\""
operator|+
name|fieldName
operator|+
literal|"\" was not indexed with points"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|getMinPackedValue
parameter_list|(
name|String
name|fieldName
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"field=\""
operator|+
name|fieldName
operator|+
literal|"\" was not indexed with points"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|getMaxPackedValue
parameter_list|(
name|String
name|fieldName
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"field=\""
operator|+
name|fieldName
operator|+
literal|"\" was not indexed with points"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getNumDimensions
parameter_list|(
name|String
name|fieldName
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"field=\""
operator|+
name|fieldName
operator|+
literal|"\" was not indexed with points"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getBytesPerDimension
parameter_list|(
name|String
name|fieldName
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"field=\""
operator|+
name|fieldName
operator|+
literal|"\" was not indexed with points"
argument_list|)
throw|;
block|}
block|}
return|;
block|}
block|}
decl_stmt|;
block|}
end_class
end_unit
