begin_unit
begin_package
DECL|package|org.apache.lucene.codecs.blockpacked
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|blockpacked
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|LongBuffer
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|IntBuffer
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|packed
operator|.
name|PackedInts
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|packed
operator|.
name|PackedInts
operator|.
name|Reader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|packed
operator|.
name|PackedInts
operator|.
name|Writer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|packed
operator|.
name|PackedInts
operator|.
name|Mutable
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|packed
operator|.
name|PackedInts
operator|.
name|Encoder
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|packed
operator|.
name|PackedInts
operator|.
name|Decoder
import|;
end_import
begin_comment
comment|/**  * Encode all values in normal area with fixed bit width,   * which is determined by the max value in this block.  */
end_comment
begin_class
DECL|class|ForUtil
specifier|public
class|class
name|ForUtil
block|{
DECL|field|MASK
specifier|protected
specifier|static
specifier|final
name|int
index|[]
name|MASK
init|=
block|{
literal|0x00000000
block|,
literal|0x00000001
block|,
literal|0x00000003
block|,
literal|0x00000007
block|,
literal|0x0000000f
block|,
literal|0x0000001f
block|,
literal|0x0000003f
block|,
literal|0x0000007f
block|,
literal|0x000000ff
block|,
literal|0x000001ff
block|,
literal|0x000003ff
block|,
literal|0x000007ff
block|,
literal|0x00000fff
block|,
literal|0x00001fff
block|,
literal|0x00003fff
block|,
literal|0x00007fff
block|,
literal|0x0000ffff
block|,
literal|0x0001ffff
block|,
literal|0x0003ffff
block|,
literal|0x0007ffff
block|,
literal|0x000fffff
block|,
literal|0x001fffff
block|,
literal|0x003fffff
block|,
literal|0x007fffff
block|,
literal|0x00ffffff
block|,
literal|0x01ffffff
block|,
literal|0x03ffffff
block|,
literal|0x07ffffff
block|,
literal|0x0fffffff
block|,
literal|0x1fffffff
block|,
literal|0x3fffffff
block|,
literal|0x7fffffff
block|,
literal|0xffffffff
block|}
decl_stmt|;
comment|/** Compress given int[] into output stream, with For format    */
DECL|method|compress
specifier|public
specifier|static
name|int
name|compress
parameter_list|(
specifier|final
name|LongBuffer
name|data
parameter_list|,
name|LongBuffer
name|packed
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|numBits
init|=
name|getNumBits
argument_list|(
name|data
operator|.
name|array
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|numBits
operator|==
literal|0
condition|)
block|{
comment|// when block is equal, save the value once
name|packed
operator|.
name|put
argument_list|(
literal|0
argument_list|,
name|data
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|<<
literal|32
argument_list|)
expr_stmt|;
comment|// java uses big endian for LongBuffer impl
return|return
operator|(
name|getHeader
argument_list|(
literal|1
argument_list|,
name|numBits
argument_list|)
operator|)
return|;
block|}
name|PackedInts
operator|.
name|Format
name|format
init|=
name|PackedInts
operator|.
name|fastestFormatAndBits
argument_list|(
literal|128
argument_list|,
name|numBits
argument_list|,
name|PackedInts
operator|.
name|FASTEST
argument_list|)
operator|.
name|format
decl_stmt|;
name|PackedInts
operator|.
name|Encoder
name|encoder
init|=
name|PackedInts
operator|.
name|getEncoder
argument_list|(
name|format
argument_list|,
name|PackedInts
operator|.
name|VERSION_CURRENT
argument_list|,
name|numBits
argument_list|)
decl_stmt|;
name|int
name|perIter
init|=
name|encoder
operator|.
name|values
argument_list|()
decl_stmt|;
name|int
name|iters
init|=
literal|128
operator|/
name|perIter
decl_stmt|;
name|int
name|nblocks
init|=
name|encoder
operator|.
name|blocks
argument_list|()
operator|*
name|iters
decl_stmt|;
assert|assert
literal|128
operator|%
name|perIter
operator|==
literal|0
assert|;
name|packed
operator|.
name|rewind
argument_list|()
expr_stmt|;
name|data
operator|.
name|rewind
argument_list|()
expr_stmt|;
name|encoder
operator|.
name|encode
argument_list|(
name|data
argument_list|,
name|packed
argument_list|,
name|iters
argument_list|)
expr_stmt|;
name|int
name|encodedSize
init|=
name|nblocks
operator|*
literal|2
decl_stmt|;
return|return
name|getHeader
argument_list|(
name|encodedSize
argument_list|,
name|numBits
argument_list|)
return|;
block|}
comment|/** Decompress given ouput stream into int array.    */
DECL|method|decompress
specifier|public
specifier|static
name|void
name|decompress
parameter_list|(
name|LongBuffer
name|data
parameter_list|,
name|LongBuffer
name|packed
parameter_list|,
name|int
name|header
parameter_list|)
throws|throws
name|IOException
block|{
comment|// nocommit assert header isn't "malformed", ie besides
comment|// numBytes / bit-width there is nothing else!
name|packed
operator|.
name|rewind
argument_list|()
expr_stmt|;
name|data
operator|.
name|rewind
argument_list|()
expr_stmt|;
name|int
name|numBits
init|=
operator|(
operator|(
name|header
operator|>>
literal|8
operator|)
operator|&
name|MASK
index|[
literal|6
index|]
operator|)
decl_stmt|;
if|if
condition|(
name|numBits
operator|==
literal|0
condition|)
block|{
name|Arrays
operator|.
name|fill
argument_list|(
name|data
operator|.
name|array
argument_list|()
argument_list|,
call|(
name|int
call|)
argument_list|(
name|packed
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|>>>
literal|32
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|PackedInts
operator|.
name|Format
name|format
init|=
name|PackedInts
operator|.
name|fastestFormatAndBits
argument_list|(
literal|128
argument_list|,
name|numBits
argument_list|,
name|PackedInts
operator|.
name|FASTEST
argument_list|)
operator|.
name|format
decl_stmt|;
name|PackedInts
operator|.
name|Decoder
name|decoder
init|=
name|PackedInts
operator|.
name|getDecoder
argument_list|(
name|format
argument_list|,
name|PackedInts
operator|.
name|VERSION_CURRENT
argument_list|,
name|numBits
argument_list|)
decl_stmt|;
name|int
name|perIter
init|=
name|decoder
operator|.
name|values
argument_list|()
decl_stmt|;
name|int
name|iters
init|=
literal|128
operator|/
name|perIter
decl_stmt|;
name|int
name|nblocks
init|=
name|decoder
operator|.
name|blocks
argument_list|()
operator|*
name|iters
decl_stmt|;
assert|assert
literal|128
operator|%
name|perIter
operator|==
literal|0
assert|;
name|decoder
operator|.
name|decode
argument_list|(
name|packed
argument_list|,
name|data
argument_list|,
name|iters
argument_list|)
expr_stmt|;
block|}
DECL|method|getNumBits
specifier|static
name|int
name|getNumBits
parameter_list|(
specifier|final
name|long
index|[]
name|data
parameter_list|)
block|{
if|if
condition|(
name|isAllEqual
argument_list|(
name|data
argument_list|)
condition|)
block|{
return|return
literal|0
return|;
block|}
name|int
name|size
init|=
name|data
operator|.
name|length
decl_stmt|;
name|int
name|optBits
init|=
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
operator|++
name|i
control|)
block|{
while|while
condition|(
operator|(
name|data
index|[
name|i
index|]
operator|&
operator|~
name|MASK
index|[
name|optBits
index|]
operator|)
operator|!=
literal|0
condition|)
block|{
name|optBits
operator|++
expr_stmt|;
block|}
block|}
return|return
name|optBits
return|;
block|}
DECL|method|isAllEqual
specifier|protected
specifier|static
name|boolean
name|isAllEqual
parameter_list|(
specifier|final
name|long
index|[]
name|data
parameter_list|)
block|{
name|int
name|len
init|=
name|data
operator|.
name|length
decl_stmt|;
name|long
name|v
init|=
name|data
index|[
literal|0
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|data
index|[
name|i
index|]
operator|!=
name|v
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
DECL|method|getHeader
specifier|static
name|int
name|getHeader
parameter_list|(
name|int
name|encodedSize
parameter_list|,
name|int
name|numBits
parameter_list|)
block|{
return|return
operator|(
name|encodedSize
operator|)
operator||
operator|(
operator|(
name|numBits
operator|)
operator|<<
literal|8
operator|)
return|;
block|}
DECL|method|getEncodedSize
specifier|public
specifier|static
name|int
name|getEncodedSize
parameter_list|(
name|int
name|header
parameter_list|)
block|{
return|return
operator|(
operator|(
name|header
operator|&
name|MASK
index|[
literal|8
index|]
operator|)
operator|)
operator|*
literal|4
return|;
block|}
DECL|method|getNumBits
specifier|public
specifier|static
name|int
name|getNumBits
parameter_list|(
name|int
name|header
parameter_list|)
block|{
return|return
operator|(
operator|(
name|header
operator|>>
literal|8
operator|)
operator|&
name|MASK
index|[
literal|6
index|]
operator|)
return|;
block|}
block|}
end_class
end_unit
