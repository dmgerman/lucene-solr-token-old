begin_unit
begin_package
DECL|package|org.apache.lucene.codecs.blockpacked
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|blockpacked
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|blockpacked
operator|.
name|BlockPackedPostingsFormat
operator|.
name|BLOCK_SIZE
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexInput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexOutput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|packed
operator|.
name|PackedInts
import|;
end_import
begin_comment
comment|/**  * Encode all values in normal area with fixed bit width,   * which is determined by the max value in this block.  */
end_comment
begin_class
DECL|class|ForUtil
specifier|public
class|class
name|ForUtil
block|{
DECL|field|PACKED_INTS_VERSION
specifier|static
specifier|final
name|int
name|PACKED_INTS_VERSION
init|=
literal|0
decl_stmt|;
comment|// nocommit: encode in the stream?
DECL|field|ENCODERS
specifier|static
specifier|final
name|PackedInts
operator|.
name|Encoder
index|[]
name|ENCODERS
init|=
operator|new
name|PackedInts
operator|.
name|Encoder
index|[
literal|33
index|]
decl_stmt|;
DECL|field|DECODERS
specifier|static
specifier|final
name|PackedInts
operator|.
name|Decoder
index|[]
name|DECODERS
init|=
operator|new
name|PackedInts
operator|.
name|Decoder
index|[
literal|33
index|]
decl_stmt|;
DECL|field|ITERATIONS
specifier|static
specifier|final
name|int
index|[]
name|ITERATIONS
init|=
operator|new
name|int
index|[
literal|33
index|]
decl_stmt|;
static|static
block|{
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
literal|32
condition|;
operator|++
name|i
control|)
block|{
name|ENCODERS
index|[
name|i
index|]
operator|=
name|PackedInts
operator|.
name|getEncoder
argument_list|(
name|PackedInts
operator|.
name|Format
operator|.
name|PACKED
argument_list|,
name|PACKED_INTS_VERSION
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|DECODERS
index|[
name|i
index|]
operator|=
name|PackedInts
operator|.
name|getDecoder
argument_list|(
name|PackedInts
operator|.
name|Format
operator|.
name|PACKED
argument_list|,
name|PACKED_INTS_VERSION
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|ITERATIONS
index|[
name|i
index|]
operator|=
name|BLOCK_SIZE
operator|/
name|DECODERS
index|[
name|i
index|]
operator|.
name|valueCount
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Write a block of data (<code>For</code> format).    *    * @param data     the data to write    * @param encoded  a buffer to use to encode data    * @param out      the destination output    * @throws IOException    */
DECL|method|writeBlock
specifier|static
name|void
name|writeBlock
parameter_list|(
name|long
index|[]
name|data
parameter_list|,
name|byte
index|[]
name|encoded
parameter_list|,
name|IndexOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|int
name|numBits
init|=
name|bitsRequired
argument_list|(
name|data
argument_list|)
decl_stmt|;
assert|assert
name|numBits
operator|>
literal|0
operator|&&
name|numBits
operator|<=
literal|32
operator|:
name|numBits
assert|;
specifier|final
name|PackedInts
operator|.
name|Encoder
name|encoder
init|=
name|ENCODERS
index|[
name|numBits
index|]
decl_stmt|;
specifier|final
name|int
name|iters
init|=
name|ITERATIONS
index|[
name|numBits
index|]
decl_stmt|;
assert|assert
name|iters
operator|*
name|encoder
operator|.
name|valueCount
argument_list|()
operator|==
name|BlockPackedPostingsFormat
operator|.
name|BLOCK_SIZE
assert|;
specifier|final
name|int
name|encodedSize
init|=
name|encoder
operator|.
name|blockCount
argument_list|()
operator|*
name|iters
decl_stmt|;
comment|// number of 64-bits blocks
assert|assert
name|encodedSize
operator|>
literal|0
operator|&&
name|encodedSize
operator|<=
name|BLOCK_SIZE
operator|/
literal|2
operator|:
name|encodedSize
assert|;
name|out
operator|.
name|writeByte
argument_list|(
operator|(
name|byte
operator|)
name|numBits
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeByte
argument_list|(
operator|(
name|byte
operator|)
name|encodedSize
argument_list|)
expr_stmt|;
name|encoder
operator|.
name|encode
argument_list|(
name|data
argument_list|,
literal|0
argument_list|,
name|encoded
argument_list|,
literal|0
argument_list|,
name|iters
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBytes
argument_list|(
name|encoded
argument_list|,
name|encodedSize
operator|<<
literal|3
argument_list|)
expr_stmt|;
block|}
comment|/**    * Read the next block of data (<code>For</code> format).    *    * @param in        the input to use to read data    * @param encoded   a buffer that can be used to store encoded data    * @param decoded   where to write decoded data    * @throws IOException    */
DECL|method|readBlock
specifier|static
name|void
name|readBlock
parameter_list|(
name|IndexInput
name|in
parameter_list|,
name|byte
index|[]
name|encoded
parameter_list|,
name|long
index|[]
name|decoded
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|int
name|numBits
init|=
name|in
operator|.
name|readByte
argument_list|()
decl_stmt|;
comment|// no mask because should be<= 32
specifier|final
name|int
name|encodedSize
init|=
name|in
operator|.
name|readByte
argument_list|()
decl_stmt|;
comment|// no mask because should be<= 64
assert|assert
name|numBits
operator|>
literal|0
operator|&&
name|numBits
operator|<=
literal|32
operator|:
name|numBits
assert|;
assert|assert
name|encodedSize
operator|>
literal|0
operator|&&
name|encodedSize
operator|<=
name|BLOCK_SIZE
operator|/
literal|2
operator|:
name|encodedSize
assert|;
comment|// because blocks are 64-bits and decoded values are 32-bits at most
name|in
operator|.
name|readBytes
argument_list|(
name|encoded
argument_list|,
literal|0
argument_list|,
name|encodedSize
operator|<<
literal|3
argument_list|)
expr_stmt|;
specifier|final
name|PackedInts
operator|.
name|Decoder
name|decoder
init|=
name|DECODERS
index|[
name|numBits
index|]
decl_stmt|;
specifier|final
name|int
name|iters
init|=
name|ITERATIONS
index|[
name|numBits
index|]
decl_stmt|;
assert|assert
name|iters
operator|*
name|decoder
operator|.
name|valueCount
argument_list|()
operator|==
name|BLOCK_SIZE
assert|;
assert|assert
name|iters
operator|*
name|decoder
operator|.
name|blockCount
argument_list|()
operator|==
name|encodedSize
assert|;
name|decoder
operator|.
name|decode
argument_list|(
name|encoded
argument_list|,
literal|0
argument_list|,
name|decoded
argument_list|,
literal|0
argument_list|,
name|iters
argument_list|)
expr_stmt|;
block|}
comment|/**    * Skip the next block of data.    *    * @param in      the input where to read data    * @throws IOException    */
DECL|method|skipBlock
specifier|static
name|void
name|skipBlock
parameter_list|(
name|IndexInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
comment|// see readBlock for comments
specifier|final
name|int
name|numBits
init|=
name|in
operator|.
name|readByte
argument_list|()
decl_stmt|;
specifier|final
name|int
name|encodedSize
init|=
name|in
operator|.
name|readByte
argument_list|()
decl_stmt|;
assert|assert
name|numBits
operator|>
literal|0
operator|&&
name|numBits
operator|<=
literal|32
operator|:
name|numBits
assert|;
assert|assert
name|encodedSize
operator|>
literal|0
operator|&&
name|encodedSize
operator|<=
name|BLOCK_SIZE
operator|/
literal|2
operator|:
name|encodedSize
assert|;
name|in
operator|.
name|seek
argument_list|(
name|in
operator|.
name|getFilePointer
argument_list|()
operator|+
operator|(
name|encodedSize
operator|<<
literal|3
operator|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Read values that have been written using variable-length encoding instead of bit-packing.    */
DECL|method|readVIntBlock
specifier|static
name|void
name|readVIntBlock
parameter_list|(
name|IndexInput
name|docIn
parameter_list|,
name|long
index|[]
name|docBuffer
parameter_list|,
name|long
index|[]
name|freqBuffer
parameter_list|,
name|int
name|num
parameter_list|,
name|boolean
name|indexHasFreq
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|indexHasFreq
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|num
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|int
name|code
init|=
name|docIn
operator|.
name|readVInt
argument_list|()
decl_stmt|;
name|docBuffer
index|[
name|i
index|]
operator|=
name|code
operator|>>>
literal|1
expr_stmt|;
if|if
condition|(
operator|(
name|code
operator|&
literal|1
operator|)
operator|!=
literal|0
condition|)
block|{
name|freqBuffer
index|[
name|i
index|]
operator|=
literal|1
expr_stmt|;
block|}
else|else
block|{
name|freqBuffer
index|[
name|i
index|]
operator|=
name|docIn
operator|.
name|readVInt
argument_list|()
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|num
condition|;
name|i
operator|++
control|)
block|{
name|docBuffer
index|[
name|i
index|]
operator|=
name|docIn
operator|.
name|readVInt
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Compute the number of bits required to serialize any of the longs in<code>data</code>.    */
DECL|method|bitsRequired
specifier|private
specifier|static
name|int
name|bitsRequired
parameter_list|(
specifier|final
name|long
index|[]
name|data
parameter_list|)
block|{
name|long
name|or
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|data
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|or
operator||=
name|data
index|[
name|i
index|]
expr_stmt|;
block|}
return|return
name|PackedInts
operator|.
name|bitsRequired
argument_list|(
name|or
argument_list|)
return|;
block|}
block|}
end_class
end_unit
