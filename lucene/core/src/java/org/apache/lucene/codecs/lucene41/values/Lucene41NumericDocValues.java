begin_unit
begin_package
DECL|package|org.apache.lucene.codecs.lucene41.values
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|lucene41
operator|.
name|values
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|CodecUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|lucene41
operator|.
name|values
operator|.
name|Lucene41DocValuesProducer
operator|.
name|DocValuesFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|FieldInfo
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|NumericDocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SegmentInfo
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IOContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexInput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|packed
operator|.
name|PackedInts
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|packed
operator|.
name|PackedInts
operator|.
name|Reader
import|;
end_import
begin_class
DECL|class|Lucene41NumericDocValues
specifier|public
class|class
name|Lucene41NumericDocValues
extends|extends
name|NumericDocValues
block|{
DECL|field|minValue
specifier|private
specifier|final
name|long
name|minValue
decl_stmt|;
DECL|field|values
specifier|private
specifier|final
name|Reader
name|values
decl_stmt|;
DECL|field|maxValue
specifier|private
specifier|final
name|long
name|maxValue
decl_stmt|;
DECL|method|Lucene41NumericDocValues
specifier|public
name|Lucene41NumericDocValues
parameter_list|(
name|PackedInts
operator|.
name|Reader
name|reader
parameter_list|,
name|long
name|minValue
parameter_list|,
name|long
name|maxValue
parameter_list|)
block|{
name|this
operator|.
name|values
operator|=
name|reader
expr_stmt|;
name|this
operator|.
name|minValue
operator|=
name|minValue
expr_stmt|;
name|this
operator|.
name|maxValue
operator|=
name|maxValue
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|get
specifier|public
name|long
name|get
parameter_list|(
name|int
name|docID
parameter_list|)
block|{
assert|assert
name|docID
operator|>=
literal|0
assert|;
return|return
name|values
operator|.
name|get
argument_list|(
name|docID
argument_list|)
operator|+
name|minValue
return|;
block|}
DECL|class|Factory
specifier|public
specifier|static
specifier|final
class|class
name|Factory
extends|extends
name|DocValuesFactory
argument_list|<
name|NumericDocValues
argument_list|>
block|{
DECL|field|datIn
specifier|private
specifier|final
name|IndexInput
name|datIn
decl_stmt|;
DECL|field|header
specifier|private
specifier|final
name|PackedInts
operator|.
name|Header
name|header
decl_stmt|;
DECL|field|minValue
specifier|private
specifier|final
name|long
name|minValue
decl_stmt|;
DECL|field|maxValue
specifier|private
specifier|final
name|long
name|maxValue
decl_stmt|;
DECL|method|Factory
specifier|public
name|Factory
parameter_list|(
name|Directory
name|dir
parameter_list|,
name|SegmentInfo
name|segmentInfo
parameter_list|,
name|FieldInfo
name|field
parameter_list|,
name|IOContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|datIn
operator|=
name|dir
operator|.
name|openInput
argument_list|(
name|Lucene41DocValuesConsumer
operator|.
name|getDocValuesFileName
argument_list|(
name|segmentInfo
argument_list|,
name|field
argument_list|,
name|Lucene41DocValuesConsumer
operator|.
name|DATA_EXTENSION
argument_list|)
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|CodecUtil
operator|.
name|checkHeader
argument_list|(
name|datIn
argument_list|,
name|Lucene41NumericDocValuesConsumer
operator|.
name|CODEC_NAME
argument_list|,
name|Lucene41NumericDocValuesConsumer
operator|.
name|VERSION_START
argument_list|,
name|Lucene41NumericDocValuesConsumer
operator|.
name|VERSION_START
argument_list|)
expr_stmt|;
name|minValue
operator|=
name|datIn
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|maxValue
operator|=
name|datIn
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|this
operator|.
name|header
operator|=
name|PackedInts
operator|.
name|readHeader
argument_list|(
name|datIn
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|IOUtils
operator|.
name|closeWhileHandlingException
argument_list|(
name|datIn
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|getDirect
specifier|public
name|NumericDocValues
name|getDirect
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexInput
name|input
init|=
name|datIn
operator|.
name|clone
argument_list|()
decl_stmt|;
return|return
operator|new
name|Lucene41NumericDocValues
argument_list|(
name|PackedInts
operator|.
name|getDirectReaderNoHeader
argument_list|(
name|input
argument_list|,
name|header
argument_list|)
argument_list|,
name|minValue
argument_list|,
name|maxValue
argument_list|)
return|;
block|}
DECL|method|getInMemory
specifier|public
name|NumericDocValues
name|getInMemory
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexInput
name|input
init|=
name|datIn
operator|.
name|clone
argument_list|()
decl_stmt|;
return|return
operator|new
name|Lucene41NumericDocValues
argument_list|(
name|PackedInts
operator|.
name|getReaderNoHeader
argument_list|(
name|input
argument_list|,
name|header
argument_list|)
argument_list|,
name|minValue
argument_list|,
name|maxValue
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|IOUtils
operator|.
name|close
argument_list|(
name|datIn
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|minValue
specifier|public
name|long
name|minValue
parameter_list|()
block|{
return|return
name|minValue
return|;
block|}
annotation|@
name|Override
DECL|method|maxValue
specifier|public
name|long
name|maxValue
parameter_list|()
block|{
return|return
name|maxValue
return|;
block|}
annotation|@
name|Override
DECL|method|size
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|values
operator|.
name|size
argument_list|()
return|;
block|}
block|}
end_class
end_unit
