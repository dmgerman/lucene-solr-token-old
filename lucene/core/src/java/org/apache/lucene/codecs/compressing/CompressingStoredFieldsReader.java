begin_unit
begin_package
DECL|package|org.apache.lucene.codecs.compressing
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|compressing
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|compressing
operator|.
name|CompressingStoredFieldsWriter
operator|.
name|BYTE_ARR
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|compressing
operator|.
name|CompressingStoredFieldsWriter
operator|.
name|CODEC_SFX_DAT
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|compressing
operator|.
name|CompressingStoredFieldsWriter
operator|.
name|CODEC_SFX_IDX
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|compressing
operator|.
name|CompressingStoredFieldsWriter
operator|.
name|DAY
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|compressing
operator|.
name|CompressingStoredFieldsWriter
operator|.
name|DAY_ENCODING
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|compressing
operator|.
name|CompressingStoredFieldsWriter
operator|.
name|FIELDS_EXTENSION
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|compressing
operator|.
name|CompressingStoredFieldsWriter
operator|.
name|FIELDS_INDEX_EXTENSION
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|compressing
operator|.
name|CompressingStoredFieldsWriter
operator|.
name|HOUR
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|compressing
operator|.
name|CompressingStoredFieldsWriter
operator|.
name|HOUR_ENCODING
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|compressing
operator|.
name|CompressingStoredFieldsWriter
operator|.
name|NUMERIC_DOUBLE
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|compressing
operator|.
name|CompressingStoredFieldsWriter
operator|.
name|NUMERIC_FLOAT
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|compressing
operator|.
name|CompressingStoredFieldsWriter
operator|.
name|NUMERIC_INT
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|compressing
operator|.
name|CompressingStoredFieldsWriter
operator|.
name|NUMERIC_LONG
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|compressing
operator|.
name|CompressingStoredFieldsWriter
operator|.
name|SECOND
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|compressing
operator|.
name|CompressingStoredFieldsWriter
operator|.
name|SECOND_ENCODING
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|compressing
operator|.
name|CompressingStoredFieldsWriter
operator|.
name|STRING
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|compressing
operator|.
name|CompressingStoredFieldsWriter
operator|.
name|TYPE_BITS
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|compressing
operator|.
name|CompressingStoredFieldsWriter
operator|.
name|TYPE_MASK
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|compressing
operator|.
name|CompressingStoredFieldsWriter
operator|.
name|VERSION_CURRENT
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|compressing
operator|.
name|CompressingStoredFieldsWriter
operator|.
name|VERSION_CHUNK_STATS
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|compressing
operator|.
name|CompressingStoredFieldsWriter
operator|.
name|VERSION_START
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|CodecUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|StoredFieldsReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|CorruptIndexException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|FieldInfo
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|FieldInfos
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexFileNames
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SegmentInfo
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|StoredFieldVisitor
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|AlreadyClosedException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|ByteArrayDataInput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|ChecksumIndexInput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|DataInput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IOContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexInput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Accountable
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Accountables
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|ArrayUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BitUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IntsRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|packed
operator|.
name|PackedInts
import|;
end_import
begin_comment
comment|/**  * {@link StoredFieldsReader} impl for {@link CompressingStoredFieldsFormat}.  * @lucene.experimental  */
end_comment
begin_class
DECL|class|CompressingStoredFieldsReader
specifier|public
specifier|final
class|class
name|CompressingStoredFieldsReader
extends|extends
name|StoredFieldsReader
block|{
DECL|field|version
specifier|private
specifier|final
name|int
name|version
decl_stmt|;
DECL|field|fieldInfos
specifier|private
specifier|final
name|FieldInfos
name|fieldInfos
decl_stmt|;
DECL|field|indexReader
specifier|private
specifier|final
name|CompressingStoredFieldsIndexReader
name|indexReader
decl_stmt|;
DECL|field|maxPointer
specifier|private
specifier|final
name|long
name|maxPointer
decl_stmt|;
DECL|field|fieldsStream
specifier|private
specifier|final
name|IndexInput
name|fieldsStream
decl_stmt|;
DECL|field|chunkSize
specifier|private
specifier|final
name|int
name|chunkSize
decl_stmt|;
DECL|field|packedIntsVersion
specifier|private
specifier|final
name|int
name|packedIntsVersion
decl_stmt|;
DECL|field|compressionMode
specifier|private
specifier|final
name|CompressionMode
name|compressionMode
decl_stmt|;
DECL|field|decompressor
specifier|private
specifier|final
name|Decompressor
name|decompressor
decl_stmt|;
DECL|field|numDocs
specifier|private
specifier|final
name|int
name|numDocs
decl_stmt|;
DECL|field|merging
specifier|private
specifier|final
name|boolean
name|merging
decl_stmt|;
DECL|field|state
specifier|private
specifier|final
name|BlockState
name|state
decl_stmt|;
DECL|field|numChunks
specifier|private
specifier|final
name|long
name|numChunks
decl_stmt|;
comment|// number of compressed blocks written
DECL|field|numDirtyChunks
specifier|private
specifier|final
name|long
name|numDirtyChunks
decl_stmt|;
comment|// number of incomplete compressed blocks written
DECL|field|closed
specifier|private
name|boolean
name|closed
decl_stmt|;
comment|// used by clone
DECL|method|CompressingStoredFieldsReader
specifier|private
name|CompressingStoredFieldsReader
parameter_list|(
name|CompressingStoredFieldsReader
name|reader
parameter_list|,
name|boolean
name|merging
parameter_list|)
block|{
name|this
operator|.
name|version
operator|=
name|reader
operator|.
name|version
expr_stmt|;
name|this
operator|.
name|fieldInfos
operator|=
name|reader
operator|.
name|fieldInfos
expr_stmt|;
name|this
operator|.
name|fieldsStream
operator|=
name|reader
operator|.
name|fieldsStream
operator|.
name|clone
argument_list|()
expr_stmt|;
name|this
operator|.
name|indexReader
operator|=
name|reader
operator|.
name|indexReader
operator|.
name|clone
argument_list|()
expr_stmt|;
name|this
operator|.
name|maxPointer
operator|=
name|reader
operator|.
name|maxPointer
expr_stmt|;
name|this
operator|.
name|chunkSize
operator|=
name|reader
operator|.
name|chunkSize
expr_stmt|;
name|this
operator|.
name|packedIntsVersion
operator|=
name|reader
operator|.
name|packedIntsVersion
expr_stmt|;
name|this
operator|.
name|compressionMode
operator|=
name|reader
operator|.
name|compressionMode
expr_stmt|;
name|this
operator|.
name|decompressor
operator|=
name|reader
operator|.
name|decompressor
operator|.
name|clone
argument_list|()
expr_stmt|;
name|this
operator|.
name|numDocs
operator|=
name|reader
operator|.
name|numDocs
expr_stmt|;
name|this
operator|.
name|numChunks
operator|=
name|reader
operator|.
name|numChunks
expr_stmt|;
name|this
operator|.
name|numDirtyChunks
operator|=
name|reader
operator|.
name|numDirtyChunks
expr_stmt|;
name|this
operator|.
name|merging
operator|=
name|merging
expr_stmt|;
name|this
operator|.
name|state
operator|=
operator|new
name|BlockState
argument_list|()
expr_stmt|;
name|this
operator|.
name|closed
operator|=
literal|false
expr_stmt|;
block|}
comment|/** Sole constructor. */
DECL|method|CompressingStoredFieldsReader
specifier|public
name|CompressingStoredFieldsReader
parameter_list|(
name|Directory
name|d
parameter_list|,
name|SegmentInfo
name|si
parameter_list|,
name|String
name|segmentSuffix
parameter_list|,
name|FieldInfos
name|fn
parameter_list|,
name|IOContext
name|context
parameter_list|,
name|String
name|formatName
parameter_list|,
name|CompressionMode
name|compressionMode
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|compressionMode
operator|=
name|compressionMode
expr_stmt|;
specifier|final
name|String
name|segment
init|=
name|si
operator|.
name|name
decl_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|fieldInfos
operator|=
name|fn
expr_stmt|;
name|numDocs
operator|=
name|si
operator|.
name|maxDoc
argument_list|()
expr_stmt|;
name|int
name|version
init|=
operator|-
literal|1
decl_stmt|;
name|long
name|maxPointer
init|=
operator|-
literal|1
decl_stmt|;
name|CompressingStoredFieldsIndexReader
name|indexReader
init|=
literal|null
decl_stmt|;
comment|// Load the index into memory
specifier|final
name|String
name|indexName
init|=
name|IndexFileNames
operator|.
name|segmentFileName
argument_list|(
name|segment
argument_list|,
name|segmentSuffix
argument_list|,
name|FIELDS_INDEX_EXTENSION
argument_list|)
decl_stmt|;
try|try
init|(
name|ChecksumIndexInput
name|indexStream
init|=
name|d
operator|.
name|openChecksumInput
argument_list|(
name|indexName
argument_list|,
name|context
argument_list|)
init|)
block|{
name|Throwable
name|priorE
init|=
literal|null
decl_stmt|;
try|try
block|{
specifier|final
name|String
name|codecNameIdx
init|=
name|formatName
operator|+
name|CODEC_SFX_IDX
decl_stmt|;
name|version
operator|=
name|CodecUtil
operator|.
name|checkIndexHeader
argument_list|(
name|indexStream
argument_list|,
name|codecNameIdx
argument_list|,
name|VERSION_START
argument_list|,
name|VERSION_CURRENT
argument_list|,
name|si
operator|.
name|getId
argument_list|()
argument_list|,
name|segmentSuffix
argument_list|)
expr_stmt|;
assert|assert
name|CodecUtil
operator|.
name|indexHeaderLength
argument_list|(
name|codecNameIdx
argument_list|,
name|segmentSuffix
argument_list|)
operator|==
name|indexStream
operator|.
name|getFilePointer
argument_list|()
assert|;
name|indexReader
operator|=
operator|new
name|CompressingStoredFieldsIndexReader
argument_list|(
name|indexStream
argument_list|,
name|si
argument_list|)
expr_stmt|;
name|maxPointer
operator|=
name|indexStream
operator|.
name|readVLong
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|exception
parameter_list|)
block|{
name|priorE
operator|=
name|exception
expr_stmt|;
block|}
finally|finally
block|{
name|CodecUtil
operator|.
name|checkFooter
argument_list|(
name|indexStream
argument_list|,
name|priorE
argument_list|)
expr_stmt|;
block|}
block|}
name|this
operator|.
name|version
operator|=
name|version
expr_stmt|;
name|this
operator|.
name|maxPointer
operator|=
name|maxPointer
expr_stmt|;
name|this
operator|.
name|indexReader
operator|=
name|indexReader
expr_stmt|;
specifier|final
name|String
name|fieldsStreamFN
init|=
name|IndexFileNames
operator|.
name|segmentFileName
argument_list|(
name|segment
argument_list|,
name|segmentSuffix
argument_list|,
name|FIELDS_EXTENSION
argument_list|)
decl_stmt|;
try|try
block|{
comment|// Open the data file and read metadata
name|fieldsStream
operator|=
name|d
operator|.
name|openInput
argument_list|(
name|fieldsStreamFN
argument_list|,
name|context
argument_list|)
expr_stmt|;
specifier|final
name|String
name|codecNameDat
init|=
name|formatName
operator|+
name|CODEC_SFX_DAT
decl_stmt|;
specifier|final
name|int
name|fieldsVersion
init|=
name|CodecUtil
operator|.
name|checkIndexHeader
argument_list|(
name|fieldsStream
argument_list|,
name|codecNameDat
argument_list|,
name|VERSION_START
argument_list|,
name|VERSION_CURRENT
argument_list|,
name|si
operator|.
name|getId
argument_list|()
argument_list|,
name|segmentSuffix
argument_list|)
decl_stmt|;
if|if
condition|(
name|version
operator|!=
name|fieldsVersion
condition|)
block|{
throw|throw
operator|new
name|CorruptIndexException
argument_list|(
literal|"Version mismatch between stored fields index and data: "
operator|+
name|version
operator|+
literal|" != "
operator|+
name|fieldsVersion
argument_list|,
name|fieldsStream
argument_list|)
throw|;
block|}
assert|assert
name|CodecUtil
operator|.
name|indexHeaderLength
argument_list|(
name|codecNameDat
argument_list|,
name|segmentSuffix
argument_list|)
operator|==
name|fieldsStream
operator|.
name|getFilePointer
argument_list|()
assert|;
name|chunkSize
operator|=
name|fieldsStream
operator|.
name|readVInt
argument_list|()
expr_stmt|;
name|packedIntsVersion
operator|=
name|fieldsStream
operator|.
name|readVInt
argument_list|()
expr_stmt|;
name|decompressor
operator|=
name|compressionMode
operator|.
name|newDecompressor
argument_list|()
expr_stmt|;
name|this
operator|.
name|merging
operator|=
literal|false
expr_stmt|;
name|this
operator|.
name|state
operator|=
operator|new
name|BlockState
argument_list|()
expr_stmt|;
if|if
condition|(
name|version
operator|>=
name|VERSION_CHUNK_STATS
condition|)
block|{
name|fieldsStream
operator|.
name|seek
argument_list|(
name|maxPointer
argument_list|)
expr_stmt|;
name|numChunks
operator|=
name|fieldsStream
operator|.
name|readVLong
argument_list|()
expr_stmt|;
name|numDirtyChunks
operator|=
name|fieldsStream
operator|.
name|readVLong
argument_list|()
expr_stmt|;
if|if
condition|(
name|numDirtyChunks
operator|>
name|numChunks
condition|)
block|{
throw|throw
operator|new
name|CorruptIndexException
argument_list|(
literal|"invalid chunk counts: dirty="
operator|+
name|numDirtyChunks
operator|+
literal|", total="
operator|+
name|numChunks
argument_list|,
name|fieldsStream
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|numChunks
operator|=
name|numDirtyChunks
operator|=
operator|-
literal|1
expr_stmt|;
block|}
comment|// NOTE: data file is too costly to verify checksum against all the bytes on open,
comment|// but for now we at least verify proper structure of the checksum footer: which looks
comment|// for FOOTER_MAGIC + algorithmID. This is cheap and can detect some forms of corruption
comment|// such as file truncation.
name|CodecUtil
operator|.
name|retrieveChecksum
argument_list|(
name|fieldsStream
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|IOUtils
operator|.
name|closeWhileHandlingException
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * @throws AlreadyClosedException if this FieldsReader is closed    */
DECL|method|ensureOpen
specifier|private
name|void
name|ensureOpen
parameter_list|()
throws|throws
name|AlreadyClosedException
block|{
if|if
condition|(
name|closed
condition|)
block|{
throw|throw
operator|new
name|AlreadyClosedException
argument_list|(
literal|"this FieldsReader is closed"
argument_list|)
throw|;
block|}
block|}
comment|/**     * Close the underlying {@link IndexInput}s.    */
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|closed
condition|)
block|{
name|IOUtils
operator|.
name|close
argument_list|(
name|fieldsStream
argument_list|)
expr_stmt|;
name|closed
operator|=
literal|true
expr_stmt|;
block|}
block|}
DECL|method|readField
specifier|private
specifier|static
name|void
name|readField
parameter_list|(
name|DataInput
name|in
parameter_list|,
name|StoredFieldVisitor
name|visitor
parameter_list|,
name|FieldInfo
name|info
parameter_list|,
name|int
name|bits
parameter_list|)
throws|throws
name|IOException
block|{
switch|switch
condition|(
name|bits
operator|&
name|TYPE_MASK
condition|)
block|{
case|case
name|BYTE_ARR
case|:
name|int
name|length
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
name|length
index|]
decl_stmt|;
name|in
operator|.
name|readBytes
argument_list|(
name|data
argument_list|,
literal|0
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|visitor
operator|.
name|binaryField
argument_list|(
name|info
argument_list|,
name|data
argument_list|)
expr_stmt|;
break|break;
case|case
name|STRING
case|:
name|length
operator|=
name|in
operator|.
name|readVInt
argument_list|()
expr_stmt|;
name|data
operator|=
operator|new
name|byte
index|[
name|length
index|]
expr_stmt|;
name|in
operator|.
name|readBytes
argument_list|(
name|data
argument_list|,
literal|0
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|visitor
operator|.
name|stringField
argument_list|(
name|info
argument_list|,
name|data
argument_list|)
expr_stmt|;
break|break;
case|case
name|NUMERIC_INT
case|:
name|visitor
operator|.
name|intField
argument_list|(
name|info
argument_list|,
name|in
operator|.
name|readZInt
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|NUMERIC_FLOAT
case|:
name|visitor
operator|.
name|floatField
argument_list|(
name|info
argument_list|,
name|readZFloat
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|NUMERIC_LONG
case|:
name|visitor
operator|.
name|longField
argument_list|(
name|info
argument_list|,
name|readTLong
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|NUMERIC_DOUBLE
case|:
name|visitor
operator|.
name|doubleField
argument_list|(
name|info
argument_list|,
name|readZDouble
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Unknown type flag: "
operator|+
name|Integer
operator|.
name|toHexString
argument_list|(
name|bits
argument_list|)
argument_list|)
throw|;
block|}
block|}
DECL|method|skipField
specifier|private
specifier|static
name|void
name|skipField
parameter_list|(
name|DataInput
name|in
parameter_list|,
name|int
name|bits
parameter_list|)
throws|throws
name|IOException
block|{
switch|switch
condition|(
name|bits
operator|&
name|TYPE_MASK
condition|)
block|{
case|case
name|BYTE_ARR
case|:
case|case
name|STRING
case|:
specifier|final
name|int
name|length
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
name|in
operator|.
name|skipBytes
argument_list|(
name|length
argument_list|)
expr_stmt|;
break|break;
case|case
name|NUMERIC_INT
case|:
name|in
operator|.
name|readZInt
argument_list|()
expr_stmt|;
break|break;
case|case
name|NUMERIC_FLOAT
case|:
name|readZFloat
argument_list|(
name|in
argument_list|)
expr_stmt|;
break|break;
case|case
name|NUMERIC_LONG
case|:
name|readTLong
argument_list|(
name|in
argument_list|)
expr_stmt|;
break|break;
case|case
name|NUMERIC_DOUBLE
case|:
name|readZDouble
argument_list|(
name|in
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Unknown type flag: "
operator|+
name|Integer
operator|.
name|toHexString
argument_list|(
name|bits
argument_list|)
argument_list|)
throw|;
block|}
block|}
comment|/**    * Reads a float in a variable-length format.  Reads between one and    * five bytes. Small integral values typically take fewer bytes.    */
DECL|method|readZFloat
specifier|static
name|float
name|readZFloat
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|b
init|=
name|in
operator|.
name|readByte
argument_list|()
operator|&
literal|0xFF
decl_stmt|;
if|if
condition|(
name|b
operator|==
literal|0xFF
condition|)
block|{
comment|// negative value
return|return
name|Float
operator|.
name|intBitsToFloat
argument_list|(
name|in
operator|.
name|readInt
argument_list|()
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
operator|(
name|b
operator|&
literal|0x80
operator|)
operator|!=
literal|0
condition|)
block|{
comment|// small integer [-1..125]
return|return
operator|(
name|b
operator|&
literal|0x7f
operator|)
operator|-
literal|1
return|;
block|}
else|else
block|{
comment|// positive float
name|int
name|bits
init|=
name|b
operator|<<
literal|24
operator||
operator|(
operator|(
name|in
operator|.
name|readShort
argument_list|()
operator|&
literal|0xFFFF
operator|)
operator|<<
literal|8
operator|)
operator||
operator|(
name|in
operator|.
name|readByte
argument_list|()
operator|&
literal|0xFF
operator|)
decl_stmt|;
return|return
name|Float
operator|.
name|intBitsToFloat
argument_list|(
name|bits
argument_list|)
return|;
block|}
block|}
comment|/**    * Reads a double in a variable-length format.  Reads between one and    * nine bytes. Small integral values typically take fewer bytes.    */
DECL|method|readZDouble
specifier|static
name|double
name|readZDouble
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|b
init|=
name|in
operator|.
name|readByte
argument_list|()
operator|&
literal|0xFF
decl_stmt|;
if|if
condition|(
name|b
operator|==
literal|0xFF
condition|)
block|{
comment|// negative value
return|return
name|Double
operator|.
name|longBitsToDouble
argument_list|(
name|in
operator|.
name|readLong
argument_list|()
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|b
operator|==
literal|0xFE
condition|)
block|{
comment|// float
return|return
name|Float
operator|.
name|intBitsToFloat
argument_list|(
name|in
operator|.
name|readInt
argument_list|()
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
operator|(
name|b
operator|&
literal|0x80
operator|)
operator|!=
literal|0
condition|)
block|{
comment|// small integer [-1..124]
return|return
operator|(
name|b
operator|&
literal|0x7f
operator|)
operator|-
literal|1
return|;
block|}
else|else
block|{
comment|// positive double
name|long
name|bits
init|=
operator|(
operator|(
name|long
operator|)
name|b
operator|)
operator|<<
literal|56
operator||
operator|(
operator|(
name|in
operator|.
name|readInt
argument_list|()
operator|&
literal|0xFFFFFFFFL
operator|)
operator|<<
literal|24
operator|)
operator||
operator|(
operator|(
name|in
operator|.
name|readShort
argument_list|()
operator|&
literal|0xFFFFL
operator|)
operator|<<
literal|8
operator|)
operator||
operator|(
name|in
operator|.
name|readByte
argument_list|()
operator|&
literal|0xFFL
operator|)
decl_stmt|;
return|return
name|Double
operator|.
name|longBitsToDouble
argument_list|(
name|bits
argument_list|)
return|;
block|}
block|}
comment|/**    * Reads a long in a variable-length format.  Reads between one andCorePropLo    * nine bytes. Small values typically take fewer bytes.    */
DECL|method|readTLong
specifier|static
name|long
name|readTLong
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|header
init|=
name|in
operator|.
name|readByte
argument_list|()
operator|&
literal|0xFF
decl_stmt|;
name|long
name|bits
init|=
name|header
operator|&
literal|0x1F
decl_stmt|;
if|if
condition|(
operator|(
name|header
operator|&
literal|0x20
operator|)
operator|!=
literal|0
condition|)
block|{
comment|// continuation bit
name|bits
operator||=
name|in
operator|.
name|readVLong
argument_list|()
operator|<<
literal|5
expr_stmt|;
block|}
name|long
name|l
init|=
name|BitUtil
operator|.
name|zigZagDecode
argument_list|(
name|bits
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|header
operator|&
name|DAY_ENCODING
condition|)
block|{
case|case
name|SECOND_ENCODING
case|:
name|l
operator|*=
name|SECOND
expr_stmt|;
break|break;
case|case
name|HOUR_ENCODING
case|:
name|l
operator|*=
name|HOUR
expr_stmt|;
break|break;
case|case
name|DAY_ENCODING
case|:
name|l
operator|*=
name|DAY
expr_stmt|;
break|break;
case|case
literal|0
case|:
comment|// uncompressed
break|break;
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|()
throw|;
block|}
return|return
name|l
return|;
block|}
comment|/**    * A serialized document, you need to decode its input in order to get an actual    * {@link Document}.    */
DECL|class|SerializedDocument
specifier|static
class|class
name|SerializedDocument
block|{
comment|// the serialized data
DECL|field|in
specifier|final
name|DataInput
name|in
decl_stmt|;
comment|// the number of bytes on which the document is encoded
DECL|field|length
specifier|final
name|int
name|length
decl_stmt|;
comment|// the number of stored fields
DECL|field|numStoredFields
specifier|final
name|int
name|numStoredFields
decl_stmt|;
DECL|method|SerializedDocument
specifier|private
name|SerializedDocument
parameter_list|(
name|DataInput
name|in
parameter_list|,
name|int
name|length
parameter_list|,
name|int
name|numStoredFields
parameter_list|)
block|{
name|this
operator|.
name|in
operator|=
name|in
expr_stmt|;
name|this
operator|.
name|length
operator|=
name|length
expr_stmt|;
name|this
operator|.
name|numStoredFields
operator|=
name|numStoredFields
expr_stmt|;
block|}
block|}
comment|/**    * Keeps state about the current block of documents.    */
DECL|class|BlockState
specifier|private
class|class
name|BlockState
block|{
DECL|field|docBase
DECL|field|chunkDocs
specifier|private
name|int
name|docBase
decl_stmt|,
name|chunkDocs
decl_stmt|;
comment|// whether the block has been sliced, this happens for large documents
DECL|field|sliced
specifier|private
name|boolean
name|sliced
decl_stmt|;
DECL|field|offsets
specifier|private
name|int
index|[]
name|offsets
init|=
name|IntsRef
operator|.
name|EMPTY_INTS
decl_stmt|;
DECL|field|numStoredFields
specifier|private
name|int
index|[]
name|numStoredFields
init|=
name|IntsRef
operator|.
name|EMPTY_INTS
decl_stmt|;
comment|// the start pointer at which you can read the compressed documents
DECL|field|startPointer
specifier|private
name|long
name|startPointer
decl_stmt|;
DECL|field|spare
specifier|private
specifier|final
name|BytesRef
name|spare
init|=
operator|new
name|BytesRef
argument_list|()
decl_stmt|;
DECL|field|bytes
specifier|private
specifier|final
name|BytesRef
name|bytes
init|=
operator|new
name|BytesRef
argument_list|()
decl_stmt|;
DECL|method|contains
name|boolean
name|contains
parameter_list|(
name|int
name|docID
parameter_list|)
block|{
return|return
name|docID
operator|>=
name|docBase
operator|&&
name|docID
operator|<
name|docBase
operator|+
name|chunkDocs
return|;
block|}
comment|/**      * Reset this block so that it stores state for the block      * that contains the given doc id.      */
DECL|method|reset
name|void
name|reset
parameter_list|(
name|int
name|docID
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|doReset
argument_list|(
name|docID
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|success
operator|==
literal|false
condition|)
block|{
comment|// if the read failed, set chunkDocs to 0 so that it does not
comment|// contain any docs anymore and is not reused. This should help
comment|// get consistent exceptions when trying to get several
comment|// documents which are in the same corrupted block since it will
comment|// force the header to be decoded again
name|chunkDocs
operator|=
literal|0
expr_stmt|;
block|}
block|}
block|}
DECL|method|doReset
specifier|private
name|void
name|doReset
parameter_list|(
name|int
name|docID
parameter_list|)
throws|throws
name|IOException
block|{
name|docBase
operator|=
name|fieldsStream
operator|.
name|readVInt
argument_list|()
expr_stmt|;
specifier|final
name|int
name|token
init|=
name|fieldsStream
operator|.
name|readVInt
argument_list|()
decl_stmt|;
name|chunkDocs
operator|=
name|token
operator|>>>
literal|1
expr_stmt|;
if|if
condition|(
name|contains
argument_list|(
name|docID
argument_list|)
operator|==
literal|false
operator|||
name|docBase
operator|+
name|chunkDocs
operator|>
name|numDocs
condition|)
block|{
throw|throw
operator|new
name|CorruptIndexException
argument_list|(
literal|"Corrupted: docID="
operator|+
name|docID
operator|+
literal|", docBase="
operator|+
name|docBase
operator|+
literal|", chunkDocs="
operator|+
name|chunkDocs
operator|+
literal|", numDocs="
operator|+
name|numDocs
argument_list|,
name|fieldsStream
argument_list|)
throw|;
block|}
name|sliced
operator|=
operator|(
name|token
operator|&
literal|1
operator|)
operator|!=
literal|0
expr_stmt|;
name|offsets
operator|=
name|ArrayUtil
operator|.
name|grow
argument_list|(
name|offsets
argument_list|,
name|chunkDocs
operator|+
literal|1
argument_list|)
expr_stmt|;
name|numStoredFields
operator|=
name|ArrayUtil
operator|.
name|grow
argument_list|(
name|numStoredFields
argument_list|,
name|chunkDocs
argument_list|)
expr_stmt|;
if|if
condition|(
name|chunkDocs
operator|==
literal|1
condition|)
block|{
name|numStoredFields
index|[
literal|0
index|]
operator|=
name|fieldsStream
operator|.
name|readVInt
argument_list|()
expr_stmt|;
name|offsets
index|[
literal|1
index|]
operator|=
name|fieldsStream
operator|.
name|readVInt
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// Number of stored fields per document
specifier|final
name|int
name|bitsPerStoredFields
init|=
name|fieldsStream
operator|.
name|readVInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|bitsPerStoredFields
operator|==
literal|0
condition|)
block|{
name|Arrays
operator|.
name|fill
argument_list|(
name|numStoredFields
argument_list|,
literal|0
argument_list|,
name|chunkDocs
argument_list|,
name|fieldsStream
operator|.
name|readVInt
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|bitsPerStoredFields
operator|>
literal|31
condition|)
block|{
throw|throw
operator|new
name|CorruptIndexException
argument_list|(
literal|"bitsPerStoredFields="
operator|+
name|bitsPerStoredFields
argument_list|,
name|fieldsStream
argument_list|)
throw|;
block|}
else|else
block|{
specifier|final
name|PackedInts
operator|.
name|ReaderIterator
name|it
init|=
name|PackedInts
operator|.
name|getReaderIteratorNoHeader
argument_list|(
name|fieldsStream
argument_list|,
name|PackedInts
operator|.
name|Format
operator|.
name|PACKED
argument_list|,
name|packedIntsVersion
argument_list|,
name|chunkDocs
argument_list|,
name|bitsPerStoredFields
argument_list|,
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|chunkDocs
condition|;
operator|++
name|i
control|)
block|{
name|numStoredFields
index|[
name|i
index|]
operator|=
operator|(
name|int
operator|)
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
block|}
comment|// The stream encodes the length of each document and we decode
comment|// it into a list of monotonically increasing offsets
specifier|final
name|int
name|bitsPerLength
init|=
name|fieldsStream
operator|.
name|readVInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|bitsPerLength
operator|==
literal|0
condition|)
block|{
specifier|final
name|int
name|length
init|=
name|fieldsStream
operator|.
name|readVInt
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|chunkDocs
condition|;
operator|++
name|i
control|)
block|{
name|offsets
index|[
literal|1
operator|+
name|i
index|]
operator|=
operator|(
literal|1
operator|+
name|i
operator|)
operator|*
name|length
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|bitsPerStoredFields
operator|>
literal|31
condition|)
block|{
throw|throw
operator|new
name|CorruptIndexException
argument_list|(
literal|"bitsPerLength="
operator|+
name|bitsPerLength
argument_list|,
name|fieldsStream
argument_list|)
throw|;
block|}
else|else
block|{
specifier|final
name|PackedInts
operator|.
name|ReaderIterator
name|it
init|=
name|PackedInts
operator|.
name|getReaderIteratorNoHeader
argument_list|(
name|fieldsStream
argument_list|,
name|PackedInts
operator|.
name|Format
operator|.
name|PACKED
argument_list|,
name|packedIntsVersion
argument_list|,
name|chunkDocs
argument_list|,
name|bitsPerLength
argument_list|,
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|chunkDocs
condition|;
operator|++
name|i
control|)
block|{
name|offsets
index|[
name|i
operator|+
literal|1
index|]
operator|=
operator|(
name|int
operator|)
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|chunkDocs
condition|;
operator|++
name|i
control|)
block|{
name|offsets
index|[
name|i
operator|+
literal|1
index|]
operator|+=
name|offsets
index|[
name|i
index|]
expr_stmt|;
block|}
block|}
comment|// Additional validation: only the empty document has a serialized length of 0
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|chunkDocs
condition|;
operator|++
name|i
control|)
block|{
specifier|final
name|int
name|len
init|=
name|offsets
index|[
name|i
operator|+
literal|1
index|]
operator|-
name|offsets
index|[
name|i
index|]
decl_stmt|;
specifier|final
name|int
name|storedFields
init|=
name|numStoredFields
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
operator|(
name|len
operator|==
literal|0
operator|)
operator|!=
operator|(
name|storedFields
operator|==
literal|0
operator|)
condition|)
block|{
throw|throw
operator|new
name|CorruptIndexException
argument_list|(
literal|"length="
operator|+
name|len
operator|+
literal|", numStoredFields="
operator|+
name|storedFields
argument_list|,
name|fieldsStream
argument_list|)
throw|;
block|}
block|}
block|}
name|startPointer
operator|=
name|fieldsStream
operator|.
name|getFilePointer
argument_list|()
expr_stmt|;
if|if
condition|(
name|merging
condition|)
block|{
specifier|final
name|int
name|totalLength
init|=
name|offsets
index|[
name|chunkDocs
index|]
decl_stmt|;
comment|// decompress eagerly
if|if
condition|(
name|sliced
condition|)
block|{
name|bytes
operator|.
name|offset
operator|=
name|bytes
operator|.
name|length
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|decompressed
init|=
literal|0
init|;
name|decompressed
operator|<
name|totalLength
condition|;
control|)
block|{
specifier|final
name|int
name|toDecompress
init|=
name|Math
operator|.
name|min
argument_list|(
name|totalLength
operator|-
name|decompressed
argument_list|,
name|chunkSize
argument_list|)
decl_stmt|;
name|decompressor
operator|.
name|decompress
argument_list|(
name|fieldsStream
argument_list|,
name|toDecompress
argument_list|,
literal|0
argument_list|,
name|toDecompress
argument_list|,
name|spare
argument_list|)
expr_stmt|;
name|bytes
operator|.
name|bytes
operator|=
name|ArrayUtil
operator|.
name|grow
argument_list|(
name|bytes
operator|.
name|bytes
argument_list|,
name|bytes
operator|.
name|length
operator|+
name|spare
operator|.
name|length
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|spare
operator|.
name|bytes
argument_list|,
name|spare
operator|.
name|offset
argument_list|,
name|bytes
operator|.
name|bytes
argument_list|,
name|bytes
operator|.
name|length
argument_list|,
name|spare
operator|.
name|length
argument_list|)
expr_stmt|;
name|bytes
operator|.
name|length
operator|+=
name|spare
operator|.
name|length
expr_stmt|;
name|decompressed
operator|+=
name|toDecompress
expr_stmt|;
block|}
block|}
else|else
block|{
name|decompressor
operator|.
name|decompress
argument_list|(
name|fieldsStream
argument_list|,
name|totalLength
argument_list|,
literal|0
argument_list|,
name|totalLength
argument_list|,
name|bytes
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|bytes
operator|.
name|length
operator|!=
name|totalLength
condition|)
block|{
throw|throw
operator|new
name|CorruptIndexException
argument_list|(
literal|"Corrupted: expected chunk size = "
operator|+
name|totalLength
operator|+
literal|", got "
operator|+
name|bytes
operator|.
name|length
argument_list|,
name|fieldsStream
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**      * Get the serialized representation of the given docID. This docID has      * to be contained in the current block.      */
DECL|method|document
name|SerializedDocument
name|document
parameter_list|(
name|int
name|docID
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|contains
argument_list|(
name|docID
argument_list|)
operator|==
literal|false
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
specifier|final
name|int
name|index
init|=
name|docID
operator|-
name|docBase
decl_stmt|;
specifier|final
name|int
name|offset
init|=
name|offsets
index|[
name|index
index|]
decl_stmt|;
specifier|final
name|int
name|length
init|=
name|offsets
index|[
name|index
operator|+
literal|1
index|]
operator|-
name|offset
decl_stmt|;
specifier|final
name|int
name|totalLength
init|=
name|offsets
index|[
name|chunkDocs
index|]
decl_stmt|;
specifier|final
name|int
name|numStoredFields
init|=
name|this
operator|.
name|numStoredFields
index|[
name|index
index|]
decl_stmt|;
specifier|final
name|DataInput
name|documentInput
decl_stmt|;
if|if
condition|(
name|length
operator|==
literal|0
condition|)
block|{
comment|// empty
name|documentInput
operator|=
operator|new
name|ByteArrayDataInput
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|merging
condition|)
block|{
comment|// already decompressed
name|documentInput
operator|=
operator|new
name|ByteArrayDataInput
argument_list|(
name|bytes
operator|.
name|bytes
argument_list|,
name|bytes
operator|.
name|offset
operator|+
name|offset
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sliced
condition|)
block|{
name|fieldsStream
operator|.
name|seek
argument_list|(
name|startPointer
argument_list|)
expr_stmt|;
name|decompressor
operator|.
name|decompress
argument_list|(
name|fieldsStream
argument_list|,
name|chunkSize
argument_list|,
name|offset
argument_list|,
name|Math
operator|.
name|min
argument_list|(
name|length
argument_list|,
name|chunkSize
operator|-
name|offset
argument_list|)
argument_list|,
name|bytes
argument_list|)
expr_stmt|;
name|documentInput
operator|=
operator|new
name|DataInput
argument_list|()
block|{
name|int
name|decompressed
init|=
name|bytes
operator|.
name|length
decl_stmt|;
name|void
name|fillBuffer
parameter_list|()
throws|throws
name|IOException
block|{
assert|assert
name|decompressed
operator|<=
name|length
assert|;
if|if
condition|(
name|decompressed
operator|==
name|length
condition|)
block|{
throw|throw
operator|new
name|EOFException
argument_list|()
throw|;
block|}
specifier|final
name|int
name|toDecompress
init|=
name|Math
operator|.
name|min
argument_list|(
name|length
operator|-
name|decompressed
argument_list|,
name|chunkSize
argument_list|)
decl_stmt|;
name|decompressor
operator|.
name|decompress
argument_list|(
name|fieldsStream
argument_list|,
name|toDecompress
argument_list|,
literal|0
argument_list|,
name|toDecompress
argument_list|,
name|bytes
argument_list|)
expr_stmt|;
name|decompressed
operator|+=
name|toDecompress
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|byte
name|readByte
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|bytes
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|fillBuffer
argument_list|()
expr_stmt|;
block|}
operator|--
name|bytes
operator|.
name|length
expr_stmt|;
return|return
name|bytes
operator|.
name|bytes
index|[
name|bytes
operator|.
name|offset
operator|++
index|]
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|readBytes
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
while|while
condition|(
name|len
operator|>
name|bytes
operator|.
name|length
condition|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|bytes
operator|.
name|bytes
argument_list|,
name|bytes
operator|.
name|offset
argument_list|,
name|b
argument_list|,
name|offset
argument_list|,
name|bytes
operator|.
name|length
argument_list|)
expr_stmt|;
name|len
operator|-=
name|bytes
operator|.
name|length
expr_stmt|;
name|offset
operator|+=
name|bytes
operator|.
name|length
expr_stmt|;
name|fillBuffer
argument_list|()
expr_stmt|;
block|}
name|System
operator|.
name|arraycopy
argument_list|(
name|bytes
operator|.
name|bytes
argument_list|,
name|bytes
operator|.
name|offset
argument_list|,
name|b
argument_list|,
name|offset
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|bytes
operator|.
name|offset
operator|+=
name|len
expr_stmt|;
name|bytes
operator|.
name|length
operator|-=
name|len
expr_stmt|;
block|}
block|}
expr_stmt|;
block|}
else|else
block|{
name|fieldsStream
operator|.
name|seek
argument_list|(
name|startPointer
argument_list|)
expr_stmt|;
name|decompressor
operator|.
name|decompress
argument_list|(
name|fieldsStream
argument_list|,
name|totalLength
argument_list|,
name|offset
argument_list|,
name|length
argument_list|,
name|bytes
argument_list|)
expr_stmt|;
assert|assert
name|bytes
operator|.
name|length
operator|==
name|length
assert|;
name|documentInput
operator|=
operator|new
name|ByteArrayDataInput
argument_list|(
name|bytes
operator|.
name|bytes
argument_list|,
name|bytes
operator|.
name|offset
argument_list|,
name|bytes
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|SerializedDocument
argument_list|(
name|documentInput
argument_list|,
name|length
argument_list|,
name|numStoredFields
argument_list|)
return|;
block|}
block|}
DECL|method|document
name|SerializedDocument
name|document
parameter_list|(
name|int
name|docID
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|state
operator|.
name|contains
argument_list|(
name|docID
argument_list|)
operator|==
literal|false
condition|)
block|{
name|fieldsStream
operator|.
name|seek
argument_list|(
name|indexReader
operator|.
name|getStartPointer
argument_list|(
name|docID
argument_list|)
argument_list|)
expr_stmt|;
name|state
operator|.
name|reset
argument_list|(
name|docID
argument_list|)
expr_stmt|;
block|}
assert|assert
name|state
operator|.
name|contains
argument_list|(
name|docID
argument_list|)
assert|;
return|return
name|state
operator|.
name|document
argument_list|(
name|docID
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|visitDocument
specifier|public
name|void
name|visitDocument
parameter_list|(
name|int
name|docID
parameter_list|,
name|StoredFieldVisitor
name|visitor
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|SerializedDocument
name|doc
init|=
name|document
argument_list|(
name|docID
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|fieldIDX
init|=
literal|0
init|;
name|fieldIDX
operator|<
name|doc
operator|.
name|numStoredFields
condition|;
name|fieldIDX
operator|++
control|)
block|{
specifier|final
name|long
name|infoAndBits
init|=
name|doc
operator|.
name|in
operator|.
name|readVLong
argument_list|()
decl_stmt|;
specifier|final
name|int
name|fieldNumber
init|=
call|(
name|int
call|)
argument_list|(
name|infoAndBits
operator|>>>
name|TYPE_BITS
argument_list|)
decl_stmt|;
specifier|final
name|FieldInfo
name|fieldInfo
init|=
name|fieldInfos
operator|.
name|fieldInfo
argument_list|(
name|fieldNumber
argument_list|)
decl_stmt|;
specifier|final
name|int
name|bits
init|=
call|(
name|int
call|)
argument_list|(
name|infoAndBits
operator|&
name|TYPE_MASK
argument_list|)
decl_stmt|;
assert|assert
name|bits
operator|<=
name|NUMERIC_DOUBLE
operator|:
literal|"bits="
operator|+
name|Integer
operator|.
name|toHexString
argument_list|(
name|bits
argument_list|)
assert|;
switch|switch
condition|(
name|visitor
operator|.
name|needsField
argument_list|(
name|fieldInfo
argument_list|)
condition|)
block|{
case|case
name|YES
case|:
name|readField
argument_list|(
name|doc
operator|.
name|in
argument_list|,
name|visitor
argument_list|,
name|fieldInfo
argument_list|,
name|bits
argument_list|)
expr_stmt|;
break|break;
case|case
name|NO
case|:
if|if
condition|(
name|fieldIDX
operator|==
name|doc
operator|.
name|numStoredFields
operator|-
literal|1
condition|)
block|{
comment|// don't skipField on last field value; treat like STOP
return|return;
block|}
name|skipField
argument_list|(
name|doc
operator|.
name|in
argument_list|,
name|bits
argument_list|)
expr_stmt|;
break|break;
case|case
name|STOP
case|:
return|return;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|clone
specifier|public
name|StoredFieldsReader
name|clone
parameter_list|()
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
return|return
operator|new
name|CompressingStoredFieldsReader
argument_list|(
name|this
argument_list|,
literal|false
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getMergeInstance
specifier|public
name|StoredFieldsReader
name|getMergeInstance
parameter_list|()
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
return|return
operator|new
name|CompressingStoredFieldsReader
argument_list|(
name|this
argument_list|,
literal|true
argument_list|)
return|;
block|}
DECL|method|getVersion
name|int
name|getVersion
parameter_list|()
block|{
return|return
name|version
return|;
block|}
DECL|method|getCompressionMode
name|CompressionMode
name|getCompressionMode
parameter_list|()
block|{
return|return
name|compressionMode
return|;
block|}
DECL|method|getIndexReader
name|CompressingStoredFieldsIndexReader
name|getIndexReader
parameter_list|()
block|{
return|return
name|indexReader
return|;
block|}
DECL|method|getMaxPointer
name|long
name|getMaxPointer
parameter_list|()
block|{
return|return
name|maxPointer
return|;
block|}
DECL|method|getFieldsStream
name|IndexInput
name|getFieldsStream
parameter_list|()
block|{
return|return
name|fieldsStream
return|;
block|}
DECL|method|getChunkSize
name|int
name|getChunkSize
parameter_list|()
block|{
return|return
name|chunkSize
return|;
block|}
DECL|method|getNumChunks
name|long
name|getNumChunks
parameter_list|()
block|{
return|return
name|numChunks
return|;
block|}
DECL|method|getNumDirtyChunks
name|long
name|getNumDirtyChunks
parameter_list|()
block|{
return|return
name|numDirtyChunks
return|;
block|}
DECL|method|getPackedIntsVersion
name|int
name|getPackedIntsVersion
parameter_list|()
block|{
return|return
name|packedIntsVersion
return|;
block|}
annotation|@
name|Override
DECL|method|ramBytesUsed
specifier|public
name|long
name|ramBytesUsed
parameter_list|()
block|{
return|return
name|indexReader
operator|.
name|ramBytesUsed
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getChildResources
specifier|public
name|Collection
argument_list|<
name|Accountable
argument_list|>
name|getChildResources
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|singleton
argument_list|(
name|Accountables
operator|.
name|namedAccountable
argument_list|(
literal|"stored field index"
argument_list|,
name|indexReader
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|checkIntegrity
specifier|public
name|void
name|checkIntegrity
parameter_list|()
throws|throws
name|IOException
block|{
name|CodecUtil
operator|.
name|checksumEntireFile
argument_list|(
name|fieldsStream
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|"(mode="
operator|+
name|compressionMode
operator|+
literal|",chunksize="
operator|+
name|chunkSize
operator|+
literal|")"
return|;
block|}
block|}
end_class
end_unit
