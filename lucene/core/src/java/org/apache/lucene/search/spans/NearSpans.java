begin_unit
begin_package
DECL|package|org.apache.lucene.search.spans
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|spans
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|DocIdSetIterator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|ConjunctionDISI
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TwoPhaseIterator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import
begin_comment
comment|/**  * Common super class for un/ordered Spans  */
end_comment
begin_class
DECL|class|NearSpans
specifier|abstract
class|class
name|NearSpans
extends|extends
name|Spans
block|{
DECL|field|query
name|SpanNearQuery
name|query
decl_stmt|;
DECL|field|allowedSlop
name|int
name|allowedSlop
decl_stmt|;
DECL|field|subSpans
name|List
argument_list|<
name|Spans
argument_list|>
name|subSpans
decl_stmt|;
comment|// in query order
DECL|field|conjunction
name|DocIdSetIterator
name|conjunction
decl_stmt|;
comment|// use to move to next doc with all clauses
DECL|field|atFirstInCurrentDoc
name|boolean
name|atFirstInCurrentDoc
decl_stmt|;
DECL|field|oneExhaustedInCurrentDoc
name|boolean
name|oneExhaustedInCurrentDoc
decl_stmt|;
comment|// no more results possbile in current doc
DECL|method|NearSpans
name|NearSpans
parameter_list|(
name|SpanNearQuery
name|query
parameter_list|,
name|List
argument_list|<
name|Spans
argument_list|>
name|subSpans
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|query
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|this
operator|.
name|allowedSlop
operator|=
name|query
operator|.
name|getSlop
argument_list|()
expr_stmt|;
if|if
condition|(
name|subSpans
operator|.
name|size
argument_list|()
operator|<
literal|2
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Less than 2 subSpans: "
operator|+
name|query
argument_list|)
throw|;
block|}
name|this
operator|.
name|subSpans
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|subSpans
argument_list|)
expr_stmt|;
comment|// in query order
name|this
operator|.
name|conjunction
operator|=
name|ConjunctionDISI
operator|.
name|intersect
argument_list|(
name|subSpans
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|docID
specifier|public
name|int
name|docID
parameter_list|()
block|{
return|return
name|conjunction
operator|.
name|docID
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|cost
specifier|public
name|long
name|cost
parameter_list|()
block|{
return|return
name|conjunction
operator|.
name|cost
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|nextDoc
specifier|public
name|int
name|nextDoc
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|(
name|conjunction
operator|.
name|nextDoc
argument_list|()
operator|==
name|NO_MORE_DOCS
operator|)
condition|?
name|NO_MORE_DOCS
else|:
name|toMatchDoc
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|advance
specifier|public
name|int
name|advance
parameter_list|(
name|int
name|target
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|(
name|conjunction
operator|.
name|advance
argument_list|(
name|target
argument_list|)
operator|==
name|NO_MORE_DOCS
operator|)
condition|?
name|NO_MORE_DOCS
else|:
name|toMatchDoc
argument_list|()
return|;
block|}
DECL|method|toMatchDoc
specifier|abstract
name|int
name|toMatchDoc
parameter_list|()
throws|throws
name|IOException
function_decl|;
DECL|method|twoPhaseCurrentDocMatches
specifier|abstract
name|boolean
name|twoPhaseCurrentDocMatches
parameter_list|()
throws|throws
name|IOException
function_decl|;
comment|/**    * Return a {@link TwoPhaseIterator} view of this {@link NearSpans}.    */
annotation|@
name|Override
DECL|method|asTwoPhaseIterator
specifier|public
name|TwoPhaseIterator
name|asTwoPhaseIterator
parameter_list|()
block|{
name|TwoPhaseIterator
name|res
init|=
operator|new
name|TwoPhaseIterator
argument_list|(
name|conjunction
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|matches
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|twoPhaseCurrentDocMatches
argument_list|()
return|;
block|}
block|}
decl_stmt|;
return|return
name|res
return|;
block|}
DECL|field|subSpansArray
specifier|private
name|Spans
index|[]
name|subSpansArray
init|=
literal|null
decl_stmt|;
comment|// init only when needed.
DECL|method|getSubSpans
specifier|public
name|Spans
index|[]
name|getSubSpans
parameter_list|()
block|{
if|if
condition|(
name|subSpansArray
operator|==
literal|null
condition|)
block|{
name|subSpansArray
operator|=
name|subSpans
operator|.
name|toArray
argument_list|(
operator|new
name|Spans
index|[
name|subSpans
operator|.
name|size
argument_list|()
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|subSpansArray
return|;
block|}
block|}
end_class
end_unit
