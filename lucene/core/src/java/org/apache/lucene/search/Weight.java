begin_unit
begin_package
DECL|package|org.apache.lucene.search
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReaderContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReaderContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|similarities
operator|.
name|Similarity
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Bits
import|;
end_import
begin_comment
comment|/**  * Expert: Calculate query weights and build query scorers.  *<p>  * The purpose of {@link Weight} is to ensure searching does not modify a  * {@link Query}, so that a {@link Query} instance can be reused.<br>  * {@link IndexSearcher} dependent state of the query should reside in the  * {@link Weight}.<br>  * {@link org.apache.lucene.index.LeafReader} dependent state should reside in the {@link Scorer}.  *<p>  * Since {@link Weight} creates {@link Scorer} instances for a given  * {@link org.apache.lucene.index.LeafReaderContext} ({@link #scorer(org.apache.lucene.index.LeafReaderContext)})  * callers must maintain the relationship between the searcher's top-level  * {@link IndexReaderContext} and the context used to create a {@link Scorer}.   *<p>  * A<code>Weight</code> is used in the following way:  *<ol>  *<li>A<code>Weight</code> is constructed by a top-level query, given a  *<code>IndexSearcher</code> ({@link Query#createWeight(IndexSearcher, boolean)}).  *<li>The {@link #getValueForNormalization()} method is called on the  *<code>Weight</code> to compute the query normalization factor  * {@link Similarity#queryNorm(float)} of the query clauses contained in the  * query.  *<li>The query normalization factor is passed to {@link #normalize(float, float)}. At  * this point the weighting is complete.  *<li>A<code>Scorer</code> is constructed by  * {@link #scorer(org.apache.lucene.index.LeafReaderContext)}.  *</ol>  *   * @since 2.9  */
end_comment
begin_class
DECL|class|Weight
specifier|public
specifier|abstract
class|class
name|Weight
block|{
DECL|field|parentQuery
specifier|protected
specifier|final
name|Query
name|parentQuery
decl_stmt|;
comment|/** Sole constructor, typically invoked by sub-classes.    * @param query         the parent query    */
DECL|method|Weight
specifier|protected
name|Weight
parameter_list|(
name|Query
name|query
parameter_list|)
block|{
name|this
operator|.
name|parentQuery
operator|=
name|query
expr_stmt|;
block|}
comment|/**    * Expert: adds all terms occurring in this query to the terms set. If the    * {@link Weight} was created with {@code needsScores == true} then this    * method will only extract terms which are used for scoring, otherwise it    * will extract all terms which are used for matching.    */
DECL|method|extractTerms
specifier|public
specifier|abstract
name|void
name|extractTerms
parameter_list|(
name|Set
argument_list|<
name|Term
argument_list|>
name|terms
parameter_list|)
function_decl|;
comment|/**    * An explanation of the score computation for the named document.    *     * @param context the readers context to create the {@link Explanation} for.    * @param doc the document's id relative to the given context's reader    * @return an Explanation for the score    * @throws IOException if an {@link IOException} occurs    */
DECL|method|explain
specifier|public
specifier|abstract
name|Explanation
name|explain
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|,
name|int
name|doc
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/** The query that this concerns. */
DECL|method|getQuery
specifier|public
specifier|final
name|Query
name|getQuery
parameter_list|()
block|{
return|return
name|parentQuery
return|;
block|}
comment|/** The value for normalization of contained query clauses (e.g. sum of squared weights). */
DECL|method|getValueForNormalization
specifier|public
specifier|abstract
name|float
name|getValueForNormalization
parameter_list|()
throws|throws
name|IOException
function_decl|;
comment|/** Assigns the query normalization factor and boost from parent queries to this. */
DECL|method|normalize
specifier|public
specifier|abstract
name|void
name|normalize
parameter_list|(
name|float
name|norm
parameter_list|,
name|float
name|topLevelBoost
parameter_list|)
function_decl|;
comment|/**    * Returns a {@link Scorer} which scores documents in/out-of order according    * to<code>scoreDocsInOrder</code>.    *<p>    *<b>NOTE:</b> null can be returned if no documents will be scored by this    * query.    *     * @param context    *          the {@link org.apache.lucene.index.LeafReaderContext} for which to return the {@link Scorer}.    *              * @return a {@link Scorer} which scores documents in/out-of order.    * @throws IOException if there is a low-level I/O error    */
DECL|method|scorer
specifier|public
specifier|abstract
name|Scorer
name|scorer
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Optional method, to return a {@link BulkScorer} to    * score the query and send hits to a {@link Collector}.    * Only queries that have a different top-level approach    * need to override this; the default implementation    * pulls a normal {@link Scorer} and iterates and    * collects the resulting hits.    *    * @param context    *          the {@link org.apache.lucene.index.LeafReaderContext} for which to return the {@link Scorer}.    *    * @return a {@link BulkScorer} which scores documents and    * passes them to a collector.    * @throws IOException if there is a low-level I/O error    */
DECL|method|bulkScorer
specifier|public
name|BulkScorer
name|bulkScorer
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|Scorer
name|scorer
init|=
name|scorer
argument_list|(
name|context
argument_list|)
decl_stmt|;
if|if
condition|(
name|scorer
operator|==
literal|null
condition|)
block|{
comment|// No docs match
return|return
literal|null
return|;
block|}
comment|// This impl always scores docs in order, so we can
comment|// ignore scoreDocsInOrder:
return|return
operator|new
name|DefaultBulkScorer
argument_list|(
name|scorer
argument_list|)
return|;
block|}
comment|/** Just wraps a Scorer and performs top scoring using it.    *  @lucene.internal */
DECL|class|DefaultBulkScorer
specifier|protected
specifier|static
class|class
name|DefaultBulkScorer
extends|extends
name|BulkScorer
block|{
DECL|field|scorer
specifier|private
specifier|final
name|Scorer
name|scorer
decl_stmt|;
comment|/** Sole constructor. */
DECL|method|DefaultBulkScorer
specifier|public
name|DefaultBulkScorer
parameter_list|(
name|Scorer
name|scorer
parameter_list|)
block|{
if|if
condition|(
name|scorer
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|()
throw|;
block|}
name|this
operator|.
name|scorer
operator|=
name|scorer
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|cost
specifier|public
name|long
name|cost
parameter_list|()
block|{
return|return
name|scorer
operator|.
name|cost
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|score
specifier|public
name|int
name|score
parameter_list|(
name|LeafCollector
name|collector
parameter_list|,
name|Bits
name|acceptDocs
parameter_list|,
name|int
name|min
parameter_list|,
name|int
name|max
parameter_list|)
throws|throws
name|IOException
block|{
name|collector
operator|.
name|setScorer
argument_list|(
name|scorer
argument_list|)
expr_stmt|;
specifier|final
name|TwoPhaseIterator
name|twoPhase
init|=
name|scorer
operator|.
name|asTwoPhaseIterator
argument_list|()
decl_stmt|;
if|if
condition|(
name|scorer
operator|.
name|docID
argument_list|()
operator|==
operator|-
literal|1
operator|&&
name|min
operator|==
literal|0
operator|&&
name|max
operator|==
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
condition|)
block|{
name|scoreAll
argument_list|(
name|collector
argument_list|,
name|scorer
argument_list|,
name|twoPhase
argument_list|,
name|acceptDocs
argument_list|)
expr_stmt|;
return|return
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
return|;
block|}
else|else
block|{
name|int
name|doc
init|=
name|scorer
operator|.
name|docID
argument_list|()
decl_stmt|;
if|if
condition|(
name|doc
operator|<
name|min
condition|)
block|{
if|if
condition|(
name|twoPhase
operator|==
literal|null
condition|)
block|{
name|doc
operator|=
name|scorer
operator|.
name|advance
argument_list|(
name|min
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|doc
operator|=
name|twoPhase
operator|.
name|approximation
argument_list|()
operator|.
name|advance
argument_list|(
name|min
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|scoreRange
argument_list|(
name|collector
argument_list|,
name|scorer
argument_list|,
name|twoPhase
argument_list|,
name|acceptDocs
argument_list|,
name|doc
argument_list|,
name|max
argument_list|)
return|;
block|}
block|}
comment|/** Specialized method to bulk-score a range of hits; we      *  separate this from {@link #scoreAll} to help out      *  hotspot.      *  See<a href="https://issues.apache.org/jira/browse/LUCENE-5487">LUCENE-5487</a> */
DECL|method|scoreRange
specifier|static
name|int
name|scoreRange
parameter_list|(
name|LeafCollector
name|collector
parameter_list|,
name|Scorer
name|scorer
parameter_list|,
name|TwoPhaseIterator
name|twoPhase
parameter_list|,
name|Bits
name|acceptDocs
parameter_list|,
name|int
name|currentDoc
parameter_list|,
name|int
name|end
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|twoPhase
operator|==
literal|null
condition|)
block|{
while|while
condition|(
name|currentDoc
operator|<
name|end
condition|)
block|{
if|if
condition|(
name|acceptDocs
operator|==
literal|null
operator|||
name|acceptDocs
operator|.
name|get
argument_list|(
name|currentDoc
argument_list|)
condition|)
block|{
name|collector
operator|.
name|collect
argument_list|(
name|currentDoc
argument_list|)
expr_stmt|;
block|}
name|currentDoc
operator|=
name|scorer
operator|.
name|nextDoc
argument_list|()
expr_stmt|;
block|}
return|return
name|currentDoc
return|;
block|}
else|else
block|{
specifier|final
name|DocIdSetIterator
name|approximation
init|=
name|twoPhase
operator|.
name|approximation
argument_list|()
decl_stmt|;
while|while
condition|(
name|currentDoc
operator|<
name|end
condition|)
block|{
if|if
condition|(
operator|(
name|acceptDocs
operator|==
literal|null
operator|||
name|acceptDocs
operator|.
name|get
argument_list|(
name|currentDoc
argument_list|)
operator|)
operator|&&
name|twoPhase
operator|.
name|matches
argument_list|()
condition|)
block|{
name|collector
operator|.
name|collect
argument_list|(
name|currentDoc
argument_list|)
expr_stmt|;
block|}
name|currentDoc
operator|=
name|approximation
operator|.
name|nextDoc
argument_list|()
expr_stmt|;
block|}
return|return
name|currentDoc
return|;
block|}
block|}
comment|/** Specialized method to bulk-score all hits; we      *  separate this from {@link #scoreRange} to help out      *  hotspot.      *  See<a href="https://issues.apache.org/jira/browse/LUCENE-5487">LUCENE-5487</a> */
DECL|method|scoreAll
specifier|static
name|void
name|scoreAll
parameter_list|(
name|LeafCollector
name|collector
parameter_list|,
name|Scorer
name|scorer
parameter_list|,
name|TwoPhaseIterator
name|twoPhase
parameter_list|,
name|Bits
name|acceptDocs
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|twoPhase
operator|==
literal|null
condition|)
block|{
for|for
control|(
name|int
name|doc
init|=
name|scorer
operator|.
name|nextDoc
argument_list|()
init|;
name|doc
operator|!=
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
condition|;
name|doc
operator|=
name|scorer
operator|.
name|nextDoc
argument_list|()
control|)
block|{
if|if
condition|(
name|acceptDocs
operator|==
literal|null
operator|||
name|acceptDocs
operator|.
name|get
argument_list|(
name|doc
argument_list|)
condition|)
block|{
name|collector
operator|.
name|collect
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
comment|// The scorer has an approximation, so run the approximation first, then check acceptDocs, then confirm
specifier|final
name|DocIdSetIterator
name|approximation
init|=
name|twoPhase
operator|.
name|approximation
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|doc
init|=
name|approximation
operator|.
name|nextDoc
argument_list|()
init|;
name|doc
operator|!=
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
condition|;
name|doc
operator|=
name|approximation
operator|.
name|nextDoc
argument_list|()
control|)
block|{
if|if
condition|(
operator|(
name|acceptDocs
operator|==
literal|null
operator|||
name|acceptDocs
operator|.
name|get
argument_list|(
name|doc
argument_list|)
operator|)
operator|&&
name|twoPhase
operator|.
name|matches
argument_list|()
condition|)
block|{
name|collector
operator|.
name|collect
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
end_class
end_unit
