begin_unit
begin_package
DECL|package|org.apache.lucene.search.spans
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|spans
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Scorer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TwoPhaseIterator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|similarities
operator|.
name|Similarity
import|;
end_import
begin_comment
comment|/**  * Public for extension only.  */
end_comment
begin_class
DECL|class|SpanScorer
specifier|public
class|class
name|SpanScorer
extends|extends
name|Scorer
block|{
comment|/** underlying spans we are scoring from */
DECL|field|spans
specifier|protected
specifier|final
name|Spans
name|spans
decl_stmt|;
comment|/** similarity used in default score impl */
DECL|field|docScorer
specifier|protected
specifier|final
name|Similarity
operator|.
name|SimScorer
name|docScorer
decl_stmt|;
comment|/** accumulated sloppy freq (computed in setFreqCurrentDoc) */
DECL|field|freq
specifier|protected
name|float
name|freq
decl_stmt|;
comment|/** number of matches (computed in setFreqCurrentDoc) */
DECL|field|numMatches
specifier|protected
name|int
name|numMatches
decl_stmt|;
DECL|field|lastScoredDoc
specifier|private
name|int
name|lastScoredDoc
init|=
operator|-
literal|1
decl_stmt|;
comment|// last doc we called setFreqCurrentDoc() for
DECL|method|SpanScorer
specifier|protected
name|SpanScorer
parameter_list|(
name|Spans
name|spans
parameter_list|,
name|SpanWeight
name|weight
parameter_list|,
name|Similarity
operator|.
name|SimScorer
name|docScorer
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|weight
argument_list|)
expr_stmt|;
name|this
operator|.
name|docScorer
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|docScorer
argument_list|)
expr_stmt|;
name|this
operator|.
name|spans
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|spans
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|nextDoc
specifier|public
specifier|final
name|int
name|nextDoc
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|spans
operator|.
name|nextDoc
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|advance
specifier|public
specifier|final
name|int
name|advance
parameter_list|(
name|int
name|target
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|spans
operator|.
name|advance
argument_list|(
name|target
argument_list|)
return|;
block|}
comment|/**     * Ensure setFreqCurrentDoc is called, if not already called for the current doc.    */
DECL|method|ensureFreq
specifier|private
specifier|final
name|void
name|ensureFreq
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|currentDoc
init|=
name|spans
operator|.
name|docID
argument_list|()
decl_stmt|;
if|if
condition|(
name|lastScoredDoc
operator|!=
name|currentDoc
condition|)
block|{
name|setFreqCurrentDoc
argument_list|()
expr_stmt|;
name|lastScoredDoc
operator|=
name|currentDoc
expr_stmt|;
block|}
block|}
comment|/**    * Sets {@link #freq} and {@link #numMatches} for the current document.    *<p>    * This will be called at most once per document.    */
DECL|method|setFreqCurrentDoc
specifier|protected
name|void
name|setFreqCurrentDoc
parameter_list|()
throws|throws
name|IOException
block|{
name|freq
operator|=
literal|0.0f
expr_stmt|;
name|numMatches
operator|=
literal|0
expr_stmt|;
assert|assert
name|spans
operator|.
name|startPosition
argument_list|()
operator|==
operator|-
literal|1
operator|:
literal|"incorrect initial start position, spans="
operator|+
name|spans
assert|;
assert|assert
name|spans
operator|.
name|endPosition
argument_list|()
operator|==
operator|-
literal|1
operator|:
literal|"incorrect initial end position, spans="
operator|+
name|spans
assert|;
name|int
name|prevStartPos
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|prevEndPos
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|startPos
init|=
name|spans
operator|.
name|nextStartPosition
argument_list|()
decl_stmt|;
assert|assert
name|startPos
operator|!=
name|Spans
operator|.
name|NO_MORE_POSITIONS
operator|:
literal|"initial startPos NO_MORE_POSITIONS, spans="
operator|+
name|spans
assert|;
do|do
block|{
assert|assert
name|startPos
operator|>=
name|prevStartPos
assert|;
name|int
name|endPos
init|=
name|spans
operator|.
name|endPosition
argument_list|()
decl_stmt|;
assert|assert
name|endPos
operator|!=
name|Spans
operator|.
name|NO_MORE_POSITIONS
assert|;
comment|// This assertion can fail for Or spans on the same term:
comment|// assert (startPos != prevStartPos) || (endPos> prevEndPos) : "non increased endPos="+endPos;
assert|assert
operator|(
name|startPos
operator|!=
name|prevStartPos
operator|)
operator|||
operator|(
name|endPos
operator|>=
name|prevEndPos
operator|)
operator|:
literal|"decreased endPos="
operator|+
name|endPos
assert|;
name|numMatches
operator|++
expr_stmt|;
name|int
name|matchLength
init|=
name|endPos
operator|-
name|startPos
decl_stmt|;
name|freq
operator|+=
name|docScorer
operator|.
name|computeSlopFactor
argument_list|(
name|matchLength
argument_list|)
expr_stmt|;
name|prevStartPos
operator|=
name|startPos
expr_stmt|;
name|prevEndPos
operator|=
name|endPos
expr_stmt|;
name|startPos
operator|=
name|spans
operator|.
name|nextStartPosition
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|startPos
operator|!=
name|Spans
operator|.
name|NO_MORE_POSITIONS
condition|)
do|;
assert|assert
name|spans
operator|.
name|startPosition
argument_list|()
operator|==
name|Spans
operator|.
name|NO_MORE_POSITIONS
operator|:
literal|"incorrect final start position, spans="
operator|+
name|spans
assert|;
assert|assert
name|spans
operator|.
name|endPosition
argument_list|()
operator|==
name|Spans
operator|.
name|NO_MORE_POSITIONS
operator|:
literal|"incorrect final end position, spans="
operator|+
name|spans
assert|;
block|}
comment|/**    * Score the current doc. The default implementation scores the doc     * with the similarity using the slop-adjusted {@link #freq}.    */
DECL|method|scoreCurrentDoc
specifier|protected
name|float
name|scoreCurrentDoc
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|docScorer
operator|.
name|score
argument_list|(
name|spans
operator|.
name|docID
argument_list|()
argument_list|,
name|freq
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|docID
specifier|public
specifier|final
name|int
name|docID
parameter_list|()
block|{
return|return
name|spans
operator|.
name|docID
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|score
specifier|public
specifier|final
name|float
name|score
parameter_list|()
throws|throws
name|IOException
block|{
name|ensureFreq
argument_list|()
expr_stmt|;
return|return
name|scoreCurrentDoc
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|freq
specifier|public
specifier|final
name|int
name|freq
parameter_list|()
throws|throws
name|IOException
block|{
name|ensureFreq
argument_list|()
expr_stmt|;
return|return
name|numMatches
return|;
block|}
comment|/** Returns the intermediate "sloppy freq" adjusted for edit distance    *  @lucene.internal */
comment|// only public so .payloads can see it.
DECL|method|sloppyFreq
specifier|public
specifier|final
name|float
name|sloppyFreq
parameter_list|()
throws|throws
name|IOException
block|{
name|ensureFreq
argument_list|()
expr_stmt|;
return|return
name|freq
return|;
block|}
annotation|@
name|Override
DECL|method|cost
specifier|public
specifier|final
name|long
name|cost
parameter_list|()
block|{
return|return
name|spans
operator|.
name|cost
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|asTwoPhaseIterator
specifier|public
specifier|final
name|TwoPhaseIterator
name|asTwoPhaseIterator
parameter_list|()
block|{
return|return
name|spans
operator|.
name|asTwoPhaseIterator
argument_list|()
return|;
block|}
block|}
end_class
end_unit
