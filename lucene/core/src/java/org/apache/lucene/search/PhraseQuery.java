begin_unit
begin_package
DECL|package|org.apache.lucene.search
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReaderContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReaderContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|PostingsEnum
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|TermContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|TermState
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Terms
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|TermsEnum
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|similarities
operator|.
name|Similarity
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|similarities
operator|.
name|Similarity
operator|.
name|SimScorer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|ArrayUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|ToStringUtils
import|;
end_import
begin_comment
comment|/** A Query that matches documents containing a particular sequence of terms.  * A PhraseQuery is built by QueryParser for input like<code>"new york"</code>.  *   *<p>This query may be combined with other terms or queries with a {@link BooleanQuery}.  *  *<b>NOTE</b>: Leading holes don't have any particular meaning for this query  * and will be ignored. For instance this query:  *<pre class="prettyprint">  * PhraseQuery.Builder builder = new PhraseQuery.Builder();  * builder.add(new Term("body", "one"), 4);  * builder.add(new Term("body", "two"), 5);  * PhraseQuery pq = builder.build();  *</pre>  * is equivalent to the below query:  *<pre class="prettyprint">  * PhraseQuery.Builder builder = new PhraseQuery.Builder();  * builder.add(new Term("body", "one"), 0);  * builder.add(new Term("body", "two"), 1);  * PhraseQuery pq = builder.build();  *</pre>  */
end_comment
begin_class
DECL|class|PhraseQuery
specifier|public
class|class
name|PhraseQuery
extends|extends
name|Query
block|{
comment|/** A builder for phrase queries. */
DECL|class|Builder
specifier|public
specifier|static
class|class
name|Builder
block|{
DECL|field|slop
specifier|private
name|int
name|slop
decl_stmt|;
DECL|field|terms
specifier|private
specifier|final
name|List
argument_list|<
name|Term
argument_list|>
name|terms
decl_stmt|;
DECL|field|positions
specifier|private
specifier|final
name|List
argument_list|<
name|Integer
argument_list|>
name|positions
decl_stmt|;
comment|/** Sole constructor. */
DECL|method|Builder
specifier|public
name|Builder
parameter_list|()
block|{
name|slop
operator|=
literal|0
expr_stmt|;
name|terms
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|positions
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
comment|/**      * Set the slop.      * @see PhraseQuery#getSlop()      */
DECL|method|setSlop
specifier|public
name|Builder
name|setSlop
parameter_list|(
name|int
name|slop
parameter_list|)
block|{
name|this
operator|.
name|slop
operator|=
name|slop
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Adds a term to the end of the query phrase.      * The relative position of the term is the one immediately after the last term added.      */
DECL|method|add
specifier|public
name|Builder
name|add
parameter_list|(
name|Term
name|term
parameter_list|)
block|{
return|return
name|add
argument_list|(
name|term
argument_list|,
name|positions
operator|.
name|isEmpty
argument_list|()
condition|?
literal|0
else|:
literal|1
operator|+
name|positions
operator|.
name|get
argument_list|(
name|positions
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Adds a term to the end of the query phrase.      * The relative position of the term within the phrase is specified explicitly.      * This allows e.g. phrases with more than one term at the same position      * or phrases with gaps (e.g. in connection with stopwords).      *       */
DECL|method|add
specifier|public
name|Builder
name|add
parameter_list|(
name|Term
name|term
parameter_list|,
name|int
name|position
parameter_list|)
block|{
name|term
operator|=
operator|new
name|Term
argument_list|(
name|term
operator|.
name|field
argument_list|()
argument_list|,
name|BytesRef
operator|.
name|deepCopyOf
argument_list|(
name|term
operator|.
name|bytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// be defensive
if|if
condition|(
name|position
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Positions must be>= 0, got "
operator|+
name|position
argument_list|)
throw|;
block|}
if|if
condition|(
name|positions
operator|.
name|isEmpty
argument_list|()
operator|==
literal|false
condition|)
block|{
specifier|final
name|int
name|lastPosition
init|=
name|positions
operator|.
name|get
argument_list|(
name|positions
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|position
operator|<
name|lastPosition
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Positions must be added in order, got "
operator|+
name|position
operator|+
literal|" after "
operator|+
name|lastPosition
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|terms
operator|.
name|isEmpty
argument_list|()
operator|==
literal|false
operator|&&
name|term
operator|.
name|field
argument_list|()
operator|.
name|equals
argument_list|(
name|terms
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|field
argument_list|()
argument_list|)
operator|==
literal|false
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"All terms must be on the same field, got "
operator|+
name|term
operator|.
name|field
argument_list|()
operator|+
literal|" and "
operator|+
name|terms
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|field
argument_list|()
argument_list|)
throw|;
block|}
name|terms
operator|.
name|add
argument_list|(
name|term
argument_list|)
expr_stmt|;
name|positions
operator|.
name|add
argument_list|(
name|position
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Build a phrase query based on the terms that have been added.      */
DECL|method|build
specifier|public
name|PhraseQuery
name|build
parameter_list|()
block|{
name|Term
index|[]
name|terms
init|=
name|this
operator|.
name|terms
operator|.
name|toArray
argument_list|(
operator|new
name|Term
index|[
name|this
operator|.
name|terms
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
name|int
index|[]
name|positions
init|=
operator|new
name|int
index|[
name|this
operator|.
name|positions
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|positions
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|positions
index|[
name|i
index|]
operator|=
name|this
operator|.
name|positions
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|PhraseQuery
argument_list|(
name|slop
argument_list|,
name|terms
argument_list|,
name|positions
argument_list|)
return|;
block|}
block|}
DECL|field|slop
specifier|private
specifier|final
name|int
name|slop
decl_stmt|;
DECL|field|field
specifier|private
specifier|final
name|String
name|field
decl_stmt|;
DECL|field|terms
specifier|private
specifier|final
name|Term
index|[]
name|terms
decl_stmt|;
DECL|field|positions
specifier|private
specifier|final
name|int
index|[]
name|positions
decl_stmt|;
DECL|method|PhraseQuery
specifier|private
name|PhraseQuery
parameter_list|(
name|int
name|slop
parameter_list|,
name|Term
index|[]
name|terms
parameter_list|,
name|int
index|[]
name|positions
parameter_list|)
block|{
if|if
condition|(
name|terms
operator|.
name|length
operator|!=
name|positions
operator|.
name|length
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Must have as many terms as positions"
argument_list|)
throw|;
block|}
if|if
condition|(
name|slop
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Slop must be>= 0, got "
operator|+
name|slop
argument_list|)
throw|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|terms
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|terms
index|[
name|i
operator|-
literal|1
index|]
operator|.
name|field
argument_list|()
operator|.
name|equals
argument_list|(
name|terms
index|[
name|i
index|]
operator|.
name|field
argument_list|()
argument_list|)
operator|==
literal|false
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"All terms should have the same field"
argument_list|)
throw|;
block|}
block|}
for|for
control|(
name|int
name|position
range|:
name|positions
control|)
block|{
if|if
condition|(
name|position
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Positions must be>= 0, got "
operator|+
name|position
argument_list|)
throw|;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|positions
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|positions
index|[
name|i
index|]
operator|<
name|positions
index|[
name|i
operator|-
literal|1
index|]
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Positions should not go backwards, got "
operator|+
name|positions
index|[
name|i
operator|-
literal|1
index|]
operator|+
literal|" before "
operator|+
name|positions
index|[
name|i
index|]
argument_list|)
throw|;
block|}
block|}
name|this
operator|.
name|slop
operator|=
name|slop
expr_stmt|;
name|this
operator|.
name|terms
operator|=
name|terms
expr_stmt|;
name|this
operator|.
name|positions
operator|=
name|positions
expr_stmt|;
name|this
operator|.
name|field
operator|=
name|terms
operator|.
name|length
operator|==
literal|0
condition|?
literal|null
else|:
name|terms
index|[
literal|0
index|]
operator|.
name|field
argument_list|()
expr_stmt|;
block|}
DECL|method|incrementalPositions
specifier|private
specifier|static
name|int
index|[]
name|incrementalPositions
parameter_list|(
name|int
name|length
parameter_list|)
block|{
name|int
index|[]
name|positions
init|=
operator|new
name|int
index|[
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|positions
index|[
name|i
index|]
operator|=
name|i
expr_stmt|;
block|}
return|return
name|positions
return|;
block|}
DECL|method|toTerms
specifier|private
specifier|static
name|Term
index|[]
name|toTerms
parameter_list|(
name|String
name|field
parameter_list|,
name|String
modifier|...
name|termStrings
parameter_list|)
block|{
name|Term
index|[]
name|terms
init|=
operator|new
name|Term
index|[
name|termStrings
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|terms
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|terms
index|[
name|i
index|]
operator|=
operator|new
name|Term
argument_list|(
name|field
argument_list|,
name|termStrings
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|terms
return|;
block|}
DECL|method|toTerms
specifier|private
specifier|static
name|Term
index|[]
name|toTerms
parameter_list|(
name|String
name|field
parameter_list|,
name|BytesRef
modifier|...
name|termBytes
parameter_list|)
block|{
name|Term
index|[]
name|terms
init|=
operator|new
name|Term
index|[
name|termBytes
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|terms
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|terms
index|[
name|i
index|]
operator|=
operator|new
name|Term
argument_list|(
name|field
argument_list|,
name|BytesRef
operator|.
name|deepCopyOf
argument_list|(
name|termBytes
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|terms
return|;
block|}
comment|/**    * Create a phrase query which will match documents that contain the given    * list of terms at consecutive positions in {@code field}, and at a    * maximum edit distance of {@code slop}. For more complicated use-cases,    * use {@link PhraseQuery.Builder}.    * @see #getSlop()    */
DECL|method|PhraseQuery
specifier|public
name|PhraseQuery
parameter_list|(
name|int
name|slop
parameter_list|,
name|String
name|field
parameter_list|,
name|String
modifier|...
name|terms
parameter_list|)
block|{
name|this
argument_list|(
name|slop
argument_list|,
name|toTerms
argument_list|(
name|field
argument_list|,
name|terms
argument_list|)
argument_list|,
name|incrementalPositions
argument_list|(
name|terms
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create a phrase query which will match documents that contain the given    * list of terms at consecutive positions in {@code field}.    */
DECL|method|PhraseQuery
specifier|public
name|PhraseQuery
parameter_list|(
name|String
name|field
parameter_list|,
name|String
modifier|...
name|terms
parameter_list|)
block|{
name|this
argument_list|(
literal|0
argument_list|,
name|field
argument_list|,
name|terms
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create a phrase query which will match documents that contain the given    * list of terms at consecutive positions in {@code field}, and at a    * maximum edit distance of {@code slop}. For more complicated use-cases,    * use {@link PhraseQuery.Builder}.    * @see #getSlop()    */
DECL|method|PhraseQuery
specifier|public
name|PhraseQuery
parameter_list|(
name|int
name|slop
parameter_list|,
name|String
name|field
parameter_list|,
name|BytesRef
modifier|...
name|terms
parameter_list|)
block|{
name|this
argument_list|(
name|slop
argument_list|,
name|toTerms
argument_list|(
name|field
argument_list|,
name|terms
argument_list|)
argument_list|,
name|incrementalPositions
argument_list|(
name|terms
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create a phrase query which will match documents that contain the given    * list of terms at consecutive positions in {@code field}.    */
DECL|method|PhraseQuery
specifier|public
name|PhraseQuery
parameter_list|(
name|String
name|field
parameter_list|,
name|BytesRef
modifier|...
name|terms
parameter_list|)
block|{
name|this
argument_list|(
literal|0
argument_list|,
name|field
argument_list|,
name|terms
argument_list|)
expr_stmt|;
block|}
comment|/**    * Return the slop for this {@link PhraseQuery}.    *    *<p>The slop is an edit distance between respective positions of terms as    * defined in this {@link PhraseQuery} and the positions of terms in a    * document.    *    *<p>For instance, when searching for {@code "quick fox"}, it is expected that    * the difference between the positions of {@code fox} and {@code quick} is 1.    * So {@code "a quick brown fox"} would be at an edit distance of 1 since the    * difference of the positions of {@code fox} and {@code quick} is 2.    * Similarly, {@code "the fox is quick"} would be at an edit distance of 3    * since the difference of the positions of {@code fox} and {@code quick} is -2.    * The slop defines the maximum edit distance for a document to match.    *    *<p>More exact matches are scored higher than sloppier matches, thus search    * results are sorted by exactness.    */
DECL|method|getSlop
specifier|public
name|int
name|getSlop
parameter_list|()
block|{
return|return
name|slop
return|;
block|}
comment|/** Returns the list of terms in this phrase. */
DECL|method|getTerms
specifier|public
name|Term
index|[]
name|getTerms
parameter_list|()
block|{
return|return
name|terms
return|;
block|}
comment|/**    * Returns the relative positions of terms in this phrase.    */
DECL|method|getPositions
specifier|public
name|int
index|[]
name|getPositions
parameter_list|()
block|{
return|return
name|positions
return|;
block|}
annotation|@
name|Override
DECL|method|rewrite
specifier|public
name|Query
name|rewrite
parameter_list|(
name|IndexReader
name|reader
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|terms
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|MatchNoDocsQuery
name|q
init|=
operator|new
name|MatchNoDocsQuery
argument_list|()
decl_stmt|;
name|q
operator|.
name|setBoost
argument_list|(
name|getBoost
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|q
return|;
block|}
elseif|else
if|if
condition|(
name|terms
operator|.
name|length
operator|==
literal|1
condition|)
block|{
name|TermQuery
name|tq
init|=
operator|new
name|TermQuery
argument_list|(
name|terms
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|tq
operator|.
name|setBoost
argument_list|(
name|getBoost
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|tq
return|;
block|}
elseif|else
if|if
condition|(
name|positions
index|[
literal|0
index|]
operator|!=
literal|0
condition|)
block|{
name|int
index|[]
name|newPositions
init|=
operator|new
name|int
index|[
name|positions
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|positions
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|newPositions
index|[
name|i
index|]
operator|=
name|positions
index|[
name|i
index|]
operator|-
name|positions
index|[
literal|0
index|]
expr_stmt|;
block|}
name|PhraseQuery
name|rewritten
init|=
operator|new
name|PhraseQuery
argument_list|(
name|slop
argument_list|,
name|terms
argument_list|,
name|newPositions
argument_list|)
decl_stmt|;
name|rewritten
operator|.
name|setBoost
argument_list|(
name|getBoost
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|rewritten
return|;
block|}
else|else
block|{
return|return
name|super
operator|.
name|rewrite
argument_list|(
name|reader
argument_list|)
return|;
block|}
block|}
DECL|class|PostingsAndFreq
specifier|static
class|class
name|PostingsAndFreq
implements|implements
name|Comparable
argument_list|<
name|PostingsAndFreq
argument_list|>
block|{
DECL|field|postings
specifier|final
name|PostingsEnum
name|postings
decl_stmt|;
DECL|field|position
specifier|final
name|int
name|position
decl_stmt|;
DECL|field|terms
specifier|final
name|Term
index|[]
name|terms
decl_stmt|;
DECL|field|nTerms
specifier|final
name|int
name|nTerms
decl_stmt|;
comment|// for faster comparisons
DECL|method|PostingsAndFreq
specifier|public
name|PostingsAndFreq
parameter_list|(
name|PostingsEnum
name|postings
parameter_list|,
name|int
name|position
parameter_list|,
name|Term
modifier|...
name|terms
parameter_list|)
block|{
name|this
operator|.
name|postings
operator|=
name|postings
expr_stmt|;
name|this
operator|.
name|position
operator|=
name|position
expr_stmt|;
name|nTerms
operator|=
name|terms
operator|==
literal|null
condition|?
literal|0
else|:
name|terms
operator|.
name|length
expr_stmt|;
if|if
condition|(
name|nTerms
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|terms
operator|.
name|length
operator|==
literal|1
condition|)
block|{
name|this
operator|.
name|terms
operator|=
name|terms
expr_stmt|;
block|}
else|else
block|{
name|Term
index|[]
name|terms2
init|=
operator|new
name|Term
index|[
name|terms
operator|.
name|length
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|terms
argument_list|,
literal|0
argument_list|,
name|terms2
argument_list|,
literal|0
argument_list|,
name|terms
operator|.
name|length
argument_list|)
expr_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|terms2
argument_list|)
expr_stmt|;
name|this
operator|.
name|terms
operator|=
name|terms2
expr_stmt|;
block|}
block|}
else|else
block|{
name|this
operator|.
name|terms
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|compareTo
specifier|public
name|int
name|compareTo
parameter_list|(
name|PostingsAndFreq
name|other
parameter_list|)
block|{
if|if
condition|(
name|position
operator|!=
name|other
operator|.
name|position
condition|)
block|{
return|return
name|position
operator|-
name|other
operator|.
name|position
return|;
block|}
if|if
condition|(
name|nTerms
operator|!=
name|other
operator|.
name|nTerms
condition|)
block|{
return|return
name|nTerms
operator|-
name|other
operator|.
name|nTerms
return|;
block|}
if|if
condition|(
name|nTerms
operator|==
literal|0
condition|)
block|{
return|return
literal|0
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|terms
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|int
name|res
init|=
name|terms
index|[
name|i
index|]
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|terms
index|[
name|i
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|res
operator|!=
literal|0
condition|)
return|return
name|res
return|;
block|}
return|return
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
specifier|final
name|int
name|prime
init|=
literal|31
decl_stmt|;
name|int
name|result
init|=
literal|1
decl_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
name|position
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nTerms
condition|;
name|i
operator|++
control|)
block|{
name|result
operator|=
name|prime
operator|*
name|result
operator|+
name|terms
index|[
name|i
index|]
operator|.
name|hashCode
argument_list|()
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|obj
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|getClass
argument_list|()
operator|!=
name|obj
operator|.
name|getClass
argument_list|()
condition|)
return|return
literal|false
return|;
name|PostingsAndFreq
name|other
init|=
operator|(
name|PostingsAndFreq
operator|)
name|obj
decl_stmt|;
if|if
condition|(
name|position
operator|!=
name|other
operator|.
name|position
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|terms
operator|==
literal|null
condition|)
return|return
name|other
operator|.
name|terms
operator|==
literal|null
return|;
return|return
name|Arrays
operator|.
name|equals
argument_list|(
name|terms
argument_list|,
name|other
operator|.
name|terms
argument_list|)
return|;
block|}
block|}
DECL|class|PhraseWeight
specifier|private
class|class
name|PhraseWeight
extends|extends
name|Weight
block|{
DECL|field|similarity
specifier|private
specifier|final
name|Similarity
name|similarity
decl_stmt|;
DECL|field|stats
specifier|private
specifier|final
name|Similarity
operator|.
name|SimWeight
name|stats
decl_stmt|;
DECL|field|needsScores
specifier|private
specifier|final
name|boolean
name|needsScores
decl_stmt|;
DECL|field|states
specifier|private
specifier|transient
name|TermContext
name|states
index|[]
decl_stmt|;
DECL|method|PhraseWeight
specifier|public
name|PhraseWeight
parameter_list|(
name|IndexSearcher
name|searcher
parameter_list|,
name|boolean
name|needsScores
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|PhraseQuery
operator|.
name|this
argument_list|)
expr_stmt|;
specifier|final
name|int
index|[]
name|positions
init|=
name|PhraseQuery
operator|.
name|this
operator|.
name|getPositions
argument_list|()
decl_stmt|;
if|if
condition|(
name|positions
operator|.
name|length
operator|<
literal|2
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"PhraseWeight does not support less than 2 terms, call rewrite first"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|positions
index|[
literal|0
index|]
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"PhraseWeight requires that the first position is 0, call rewrite first"
argument_list|)
throw|;
block|}
name|this
operator|.
name|needsScores
operator|=
name|needsScores
expr_stmt|;
name|this
operator|.
name|similarity
operator|=
name|searcher
operator|.
name|getSimilarity
argument_list|(
name|needsScores
argument_list|)
expr_stmt|;
specifier|final
name|IndexReaderContext
name|context
init|=
name|searcher
operator|.
name|getTopReaderContext
argument_list|()
decl_stmt|;
name|states
operator|=
operator|new
name|TermContext
index|[
name|terms
operator|.
name|length
index|]
expr_stmt|;
name|TermStatistics
name|termStats
index|[]
init|=
operator|new
name|TermStatistics
index|[
name|terms
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|terms
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|Term
name|term
init|=
name|terms
index|[
name|i
index|]
decl_stmt|;
name|states
index|[
name|i
index|]
operator|=
name|TermContext
operator|.
name|build
argument_list|(
name|context
argument_list|,
name|term
argument_list|)
expr_stmt|;
name|termStats
index|[
name|i
index|]
operator|=
name|searcher
operator|.
name|termStatistics
argument_list|(
name|term
argument_list|,
name|states
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|stats
operator|=
name|similarity
operator|.
name|computeWeight
argument_list|(
name|getBoost
argument_list|()
argument_list|,
name|searcher
operator|.
name|collectionStatistics
argument_list|(
name|field
argument_list|)
argument_list|,
name|termStats
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|extractTerms
specifier|public
name|void
name|extractTerms
parameter_list|(
name|Set
argument_list|<
name|Term
argument_list|>
name|queryTerms
parameter_list|)
block|{
name|Collections
operator|.
name|addAll
argument_list|(
name|queryTerms
argument_list|,
name|terms
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"weight("
operator|+
name|PhraseQuery
operator|.
name|this
operator|+
literal|")"
return|;
block|}
annotation|@
name|Override
DECL|method|getValueForNormalization
specifier|public
name|float
name|getValueForNormalization
parameter_list|()
block|{
return|return
name|stats
operator|.
name|getValueForNormalization
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|normalize
specifier|public
name|void
name|normalize
parameter_list|(
name|float
name|queryNorm
parameter_list|,
name|float
name|topLevelBoost
parameter_list|)
block|{
name|stats
operator|.
name|normalize
argument_list|(
name|queryNorm
argument_list|,
name|topLevelBoost
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|scorer
specifier|public
name|Scorer
name|scorer
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|terms
operator|.
name|length
operator|>
literal|0
assert|;
specifier|final
name|LeafReader
name|reader
init|=
name|context
operator|.
name|reader
argument_list|()
decl_stmt|;
name|PostingsAndFreq
index|[]
name|postingsFreqs
init|=
operator|new
name|PostingsAndFreq
index|[
name|terms
operator|.
name|length
index|]
decl_stmt|;
specifier|final
name|Terms
name|fieldTerms
init|=
name|reader
operator|.
name|terms
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|fieldTerms
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|fieldTerms
operator|.
name|hasPositions
argument_list|()
operator|==
literal|false
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"field \""
operator|+
name|field
operator|+
literal|"\" was indexed without position data; cannot run PhraseQuery (phrase="
operator|+
name|getQuery
argument_list|()
operator|+
literal|")"
argument_list|)
throw|;
block|}
comment|// Reuse single TermsEnum below:
specifier|final
name|TermsEnum
name|te
init|=
name|fieldTerms
operator|.
name|iterator
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|terms
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|Term
name|t
init|=
name|terms
index|[
name|i
index|]
decl_stmt|;
specifier|final
name|TermState
name|state
init|=
name|states
index|[
name|i
index|]
operator|.
name|get
argument_list|(
name|context
operator|.
name|ord
argument_list|)
decl_stmt|;
if|if
condition|(
name|state
operator|==
literal|null
condition|)
block|{
comment|/* term doesnt exist in this segment */
assert|assert
name|termNotInReader
argument_list|(
name|reader
argument_list|,
name|t
argument_list|)
operator|:
literal|"no termstate found but term exists in reader"
assert|;
return|return
literal|null
return|;
block|}
name|te
operator|.
name|seekExact
argument_list|(
name|t
operator|.
name|bytes
argument_list|()
argument_list|,
name|state
argument_list|)
expr_stmt|;
name|PostingsEnum
name|postingsEnum
init|=
name|te
operator|.
name|postings
argument_list|(
literal|null
argument_list|,
name|PostingsEnum
operator|.
name|POSITIONS
argument_list|)
decl_stmt|;
name|postingsFreqs
index|[
name|i
index|]
operator|=
operator|new
name|PostingsAndFreq
argument_list|(
name|postingsEnum
argument_list|,
name|positions
index|[
name|i
index|]
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
comment|// sort by increasing docFreq order
if|if
condition|(
name|slop
operator|==
literal|0
condition|)
block|{
name|ArrayUtil
operator|.
name|timSort
argument_list|(
name|postingsFreqs
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|slop
operator|==
literal|0
condition|)
block|{
comment|// optimize exact case
return|return
operator|new
name|ExactPhraseScorer
argument_list|(
name|this
argument_list|,
name|postingsFreqs
argument_list|,
name|similarity
operator|.
name|simScorer
argument_list|(
name|stats
argument_list|,
name|context
argument_list|)
argument_list|,
name|needsScores
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|SloppyPhraseScorer
argument_list|(
name|this
argument_list|,
name|postingsFreqs
argument_list|,
name|slop
argument_list|,
name|similarity
operator|.
name|simScorer
argument_list|(
name|stats
argument_list|,
name|context
argument_list|)
argument_list|,
name|needsScores
argument_list|)
return|;
block|}
block|}
comment|// only called from assert
DECL|method|termNotInReader
specifier|private
name|boolean
name|termNotInReader
parameter_list|(
name|LeafReader
name|reader
parameter_list|,
name|Term
name|term
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|reader
operator|.
name|docFreq
argument_list|(
name|term
argument_list|)
operator|==
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|explain
specifier|public
name|Explanation
name|explain
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|,
name|int
name|doc
parameter_list|)
throws|throws
name|IOException
block|{
name|Scorer
name|scorer
init|=
name|scorer
argument_list|(
name|context
argument_list|)
decl_stmt|;
if|if
condition|(
name|scorer
operator|!=
literal|null
condition|)
block|{
name|int
name|newDoc
init|=
name|scorer
operator|.
name|advance
argument_list|(
name|doc
argument_list|)
decl_stmt|;
if|if
condition|(
name|newDoc
operator|==
name|doc
condition|)
block|{
name|float
name|freq
init|=
name|slop
operator|==
literal|0
condition|?
name|scorer
operator|.
name|freq
argument_list|()
else|:
operator|(
operator|(
name|SloppyPhraseScorer
operator|)
name|scorer
operator|)
operator|.
name|sloppyFreq
argument_list|()
decl_stmt|;
name|SimScorer
name|docScorer
init|=
name|similarity
operator|.
name|simScorer
argument_list|(
name|stats
argument_list|,
name|context
argument_list|)
decl_stmt|;
name|Explanation
name|freqExplanation
init|=
name|Explanation
operator|.
name|match
argument_list|(
name|freq
argument_list|,
literal|"phraseFreq="
operator|+
name|freq
argument_list|)
decl_stmt|;
name|Explanation
name|scoreExplanation
init|=
name|docScorer
operator|.
name|explain
argument_list|(
name|doc
argument_list|,
name|freqExplanation
argument_list|)
decl_stmt|;
return|return
name|Explanation
operator|.
name|match
argument_list|(
name|scoreExplanation
operator|.
name|getValue
argument_list|()
argument_list|,
literal|"weight("
operator|+
name|getQuery
argument_list|()
operator|+
literal|" in "
operator|+
name|doc
operator|+
literal|") ["
operator|+
name|similarity
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|"], result of:"
argument_list|,
name|scoreExplanation
argument_list|)
return|;
block|}
block|}
return|return
name|Explanation
operator|.
name|noMatch
argument_list|(
literal|"no matching term"
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|createWeight
specifier|public
name|Weight
name|createWeight
parameter_list|(
name|IndexSearcher
name|searcher
parameter_list|,
name|boolean
name|needsScores
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|PhraseWeight
argument_list|(
name|searcher
argument_list|,
name|needsScores
argument_list|)
return|;
block|}
comment|/** Prints a user-readable version of this query. */
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|(
name|String
name|f
parameter_list|)
block|{
name|StringBuilder
name|buffer
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|field
operator|!=
literal|null
operator|&&
operator|!
name|field
operator|.
name|equals
argument_list|(
name|f
argument_list|)
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|":"
argument_list|)
expr_stmt|;
block|}
name|buffer
operator|.
name|append
argument_list|(
literal|"\""
argument_list|)
expr_stmt|;
specifier|final
name|int
name|maxPosition
decl_stmt|;
if|if
condition|(
name|positions
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|maxPosition
operator|=
operator|-
literal|1
expr_stmt|;
block|}
else|else
block|{
name|maxPosition
operator|=
name|positions
index|[
name|positions
operator|.
name|length
operator|-
literal|1
index|]
expr_stmt|;
block|}
name|String
index|[]
name|pieces
init|=
operator|new
name|String
index|[
name|maxPosition
operator|+
literal|1
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|terms
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|int
name|pos
init|=
name|positions
index|[
name|i
index|]
decl_stmt|;
name|String
name|s
init|=
name|pieces
index|[
name|pos
index|]
decl_stmt|;
if|if
condition|(
name|s
operator|==
literal|null
condition|)
block|{
name|s
operator|=
operator|(
name|terms
index|[
name|i
index|]
operator|)
operator|.
name|text
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|s
operator|=
name|s
operator|+
literal|"|"
operator|+
operator|(
name|terms
index|[
name|i
index|]
operator|)
operator|.
name|text
argument_list|()
expr_stmt|;
block|}
name|pieces
index|[
name|pos
index|]
operator|=
name|s
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|pieces
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
block|}
name|String
name|s
init|=
name|pieces
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|s
operator|==
literal|null
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|'?'
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|buffer
operator|.
name|append
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
name|buffer
operator|.
name|append
argument_list|(
literal|"\""
argument_list|)
expr_stmt|;
if|if
condition|(
name|slop
operator|!=
literal|0
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|"~"
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|slop
argument_list|)
expr_stmt|;
block|}
name|buffer
operator|.
name|append
argument_list|(
name|ToStringUtils
operator|.
name|boost
argument_list|(
name|getBoost
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|buffer
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/** Returns true iff<code>o</code> is equal to this. */
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|super
operator|.
name|equals
argument_list|(
name|o
argument_list|)
operator|==
literal|false
condition|)
block|{
return|return
literal|false
return|;
block|}
name|PhraseQuery
name|that
init|=
operator|(
name|PhraseQuery
operator|)
name|o
decl_stmt|;
return|return
name|slop
operator|==
name|that
operator|.
name|slop
operator|&&
name|Arrays
operator|.
name|equals
argument_list|(
name|terms
argument_list|,
name|that
operator|.
name|terms
argument_list|)
operator|&&
name|Arrays
operator|.
name|equals
argument_list|(
name|positions
argument_list|,
name|that
operator|.
name|positions
argument_list|)
return|;
block|}
comment|/** Returns a hash code value for this object.*/
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|h
init|=
name|super
operator|.
name|hashCode
argument_list|()
decl_stmt|;
name|h
operator|=
literal|31
operator|*
name|h
operator|+
name|slop
expr_stmt|;
name|h
operator|=
literal|31
operator|*
name|h
operator|+
name|Arrays
operator|.
name|hashCode
argument_list|(
name|terms
argument_list|)
expr_stmt|;
name|h
operator|=
literal|31
operator|*
name|h
operator|+
name|Arrays
operator|.
name|hashCode
argument_list|(
name|positions
argument_list|)
expr_stmt|;
return|return
name|h
return|;
block|}
block|}
end_class
end_unit
