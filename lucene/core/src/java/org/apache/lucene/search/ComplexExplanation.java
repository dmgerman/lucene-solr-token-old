begin_unit
begin_package
DECL|package|org.apache.lucene.search
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_comment
comment|/** Expert: Describes the score computation for document and query, and  * can distinguish a match independent of a positive value. */
end_comment
begin_class
DECL|class|ComplexExplanation
specifier|public
class|class
name|ComplexExplanation
extends|extends
name|Explanation
block|{
DECL|field|match
specifier|private
name|Boolean
name|match
decl_stmt|;
DECL|method|ComplexExplanation
specifier|public
name|ComplexExplanation
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
DECL|method|ComplexExplanation
specifier|public
name|ComplexExplanation
parameter_list|(
name|boolean
name|match
parameter_list|,
name|float
name|value
parameter_list|,
name|String
name|description
parameter_list|)
block|{
comment|// NOTE: use of "boolean" instead of "Boolean" in params is conscious
comment|// choice to encourage clients to be specific.
name|super
argument_list|(
name|value
argument_list|,
name|description
argument_list|)
expr_stmt|;
name|this
operator|.
name|match
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|match
argument_list|)
expr_stmt|;
block|}
comment|/**    * The match status of this explanation node.    * @return May be null if match status is unknown    */
DECL|method|getMatch
specifier|public
name|Boolean
name|getMatch
parameter_list|()
block|{
return|return
name|match
return|;
block|}
comment|/**    * Sets the match status assigned to this explanation node.    * @param match May be null if match status is unknown    */
DECL|method|setMatch
specifier|public
name|void
name|setMatch
parameter_list|(
name|Boolean
name|match
parameter_list|)
block|{
name|this
operator|.
name|match
operator|=
name|match
expr_stmt|;
block|}
comment|/**    * Indicates whether or not this Explanation models a good match.    *    *<p>    * If the match status is explicitly set (i.e.: not null) this method    * uses it; otherwise it defers to the superclass.    *</p>    * @see #getMatch    */
annotation|@
name|Override
DECL|method|isMatch
specifier|public
name|boolean
name|isMatch
parameter_list|()
block|{
name|Boolean
name|m
init|=
name|getMatch
argument_list|()
decl_stmt|;
return|return
operator|(
literal|null
operator|!=
name|m
condition|?
name|m
operator|.
name|booleanValue
argument_list|()
else|:
name|super
operator|.
name|isMatch
argument_list|()
operator|)
return|;
block|}
annotation|@
name|Override
DECL|method|getSummary
specifier|protected
name|String
name|getSummary
parameter_list|()
block|{
if|if
condition|(
literal|null
operator|==
name|getMatch
argument_list|()
condition|)
return|return
name|super
operator|.
name|getSummary
argument_list|()
return|;
return|return
name|getValue
argument_list|()
operator|+
literal|" = "
operator|+
operator|(
name|isMatch
argument_list|()
condition|?
literal|"(MATCH) "
else|:
literal|"(NON-MATCH) "
operator|)
operator|+
name|getDescription
argument_list|()
return|;
block|}
block|}
end_class
end_unit
