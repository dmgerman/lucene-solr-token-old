begin_unit
begin_package
DECL|package|org.apache.lucene.search
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReaderContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReaderContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|ReaderUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|TieredMergePolicy
import|;
end_import
begin_comment
comment|/**  * A policy defining which filters should be cached.  *  * Implementations of this class must be thread-safe.  *  * @see UsageTrackingQueryCachingPolicy  * @see LRUQueryCache  * @lucene.experimental  */
end_comment
begin_comment
comment|// TODO: add APIs for integration with IndexWriter.IndexReaderWarmer
end_comment
begin_interface
DECL|interface|QueryCachingPolicy
specifier|public
interface|interface
name|QueryCachingPolicy
block|{
comment|/** A simple policy that caches all the provided filters on all segments. */
DECL|field|ALWAYS_CACHE
specifier|public
specifier|static
specifier|final
name|QueryCachingPolicy
name|ALWAYS_CACHE
init|=
operator|new
name|QueryCachingPolicy
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onUse
parameter_list|(
name|Query
name|query
parameter_list|)
block|{}
annotation|@
name|Override
specifier|public
name|boolean
name|shouldCache
parameter_list|(
name|Query
name|query
parameter_list|,
name|LeafReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|true
return|;
block|}
block|}
decl_stmt|;
comment|/** A simple policy that only caches on the largest segments of an index.    *  The reasoning is that these segments likely account for most of the    *  execution time of queries and are also more likely to stay around longer    *  than small segments, which makes them more interesting for caching.    */
DECL|class|CacheOnLargeSegments
specifier|public
specifier|static
class|class
name|CacheOnLargeSegments
implements|implements
name|QueryCachingPolicy
block|{
comment|/** {@link CacheOnLargeSegments} instance that only caches on segments that      *  account for more than 3% of the total index size. This should guarantee      *  that all segments from the upper {@link TieredMergePolicy tier} will be      *  cached while ensuring that at most<tt>33</tt> segments can make it to      *  the cache (given that some implementations such as {@link LRUQueryCache}      *  perform better when the number of cached segments is low). */
DECL|field|DEFAULT
specifier|public
specifier|static
specifier|final
name|CacheOnLargeSegments
name|DEFAULT
init|=
operator|new
name|CacheOnLargeSegments
argument_list|(
literal|0.03f
argument_list|)
decl_stmt|;
DECL|field|minSizeRatio
specifier|private
specifier|final
name|float
name|minSizeRatio
decl_stmt|;
comment|/**      * Create a {@link CacheOnLargeSegments} instance that only caches on a      * given segment if its number of documents divided by the total number of      * documents in the index is greater than or equal to      *<code>minSizeRatio</code>.      */
DECL|method|CacheOnLargeSegments
specifier|public
name|CacheOnLargeSegments
parameter_list|(
name|float
name|minSizeRatio
parameter_list|)
block|{
if|if
condition|(
name|minSizeRatio
operator|<=
literal|0
operator|||
name|minSizeRatio
operator|>=
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"minSizeRatio must be in ]0, 1[, got "
operator|+
name|minSizeRatio
argument_list|)
throw|;
block|}
name|this
operator|.
name|minSizeRatio
operator|=
name|minSizeRatio
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onUse
specifier|public
name|void
name|onUse
parameter_list|(
name|Query
name|query
parameter_list|)
block|{}
annotation|@
name|Override
DECL|method|shouldCache
specifier|public
name|boolean
name|shouldCache
parameter_list|(
name|Query
name|query
parameter_list|,
name|LeafReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|IndexReaderContext
name|topLevelContext
init|=
name|ReaderUtil
operator|.
name|getTopLevelContext
argument_list|(
name|context
argument_list|)
decl_stmt|;
specifier|final
name|float
name|sizeRatio
init|=
operator|(
name|float
operator|)
name|context
operator|.
name|reader
argument_list|()
operator|.
name|maxDoc
argument_list|()
operator|/
name|topLevelContext
operator|.
name|reader
argument_list|()
operator|.
name|maxDoc
argument_list|()
decl_stmt|;
return|return
name|sizeRatio
operator|>=
name|minSizeRatio
return|;
block|}
block|}
empty_stmt|;
comment|/** Callback that is called every time that a cached filter is used.    *  This is typically useful if the policy wants to track usage statistics    *  in order to make decisions. */
DECL|method|onUse
name|void
name|onUse
parameter_list|(
name|Query
name|query
parameter_list|)
function_decl|;
comment|/** Whether the given {@link DocIdSet} should be cached on a given segment.    *  This method will be called on each leaf context to know if the filter    *  should be cached on this particular leaf. The filter cache will first    *  attempt to load a {@link DocIdSet} from the cache. If it is not cached    *  yet and this method returns<tt>true</tt> then a cache entry will be    *  generated. Otherwise an uncached set will be returned. */
DECL|method|shouldCache
name|boolean
name|shouldCache
parameter_list|(
name|Query
name|query
parameter_list|,
name|LeafReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
end_interface
end_unit
