begin_unit
begin_package
DECL|package|org.apache.lucene.search
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|ArrayUtil
import|;
end_import
begin_comment
comment|/**  * A Scorer for OR like queries, counterpart of<code>ConjunctionScorer</code>.  * This Scorer implements {@link Scorer#advance(int)} and uses advance() on the given Scorers.  *   * This implementation uses the minimumMatch constraint actively to efficiently  * prune the number of candidates, it is hence a mixture between a pure DisjunctionScorer  * and a ConjunctionScorer.  */
end_comment
begin_class
DECL|class|MinShouldMatchSumScorer
class|class
name|MinShouldMatchSumScorer
extends|extends
name|Scorer
block|{
comment|/** The overall number of non-finalized scorers */
DECL|field|numScorers
specifier|private
name|int
name|numScorers
decl_stmt|;
comment|/** The minimum number of scorers that should match */
DECL|field|mm
specifier|private
specifier|final
name|int
name|mm
decl_stmt|;
comment|/** A static array of all subscorers sorted by decreasing cost */
DECL|field|sortedSubScorers
specifier|private
specifier|final
name|Scorer
name|sortedSubScorers
index|[]
decl_stmt|;
comment|/** A monotonically increasing index into the array pointing to the next subscorer that is to be excluded */
DECL|field|sortedSubScorersIdx
specifier|private
name|int
name|sortedSubScorersIdx
init|=
literal|0
decl_stmt|;
DECL|field|subScorers
specifier|private
specifier|final
name|Scorer
name|subScorers
index|[]
decl_stmt|;
comment|// the first numScorers-(mm-1) entries are valid
DECL|field|nrInHeap
specifier|private
name|int
name|nrInHeap
decl_stmt|;
comment|// 0..(numScorers-(mm-1)-1)
comment|/** mmStack is supposed to contain the most costly subScorers that still did    *  not run out of docs, sorted by increasing sparsity of docs returned by that subScorer.    *  For now, the cost of subscorers is assumed to be inversely correlated with sparsity.    */
DECL|field|mmStack
specifier|private
specifier|final
name|Scorer
name|mmStack
index|[]
decl_stmt|;
comment|// of size mm-1: 0..mm-2, always full
comment|/** The document number of the current match. */
DECL|field|doc
specifier|private
name|int
name|doc
init|=
operator|-
literal|1
decl_stmt|;
comment|/** The number of subscorers that provide the current match. */
DECL|field|nrMatchers
specifier|protected
name|int
name|nrMatchers
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|score
specifier|private
name|double
name|score
init|=
name|Float
operator|.
name|NaN
decl_stmt|;
comment|/**    * Construct a<code>MinShouldMatchSumScorer</code>.    *     * @param weight The weight to be used.    * @param subScorers A collection of at least two subscorers.    * @param minimumNrMatchers The positive minimum number of subscorers that should    * match to match this query.    *<br>When<code>minimumNrMatchers</code> is bigger than    * the number of<code>subScorers</code>, no matches will be produced.    *<br>When minimumNrMatchers equals the number of subScorers,    * it is more efficient to use<code>ConjunctionScorer</code>.    */
DECL|method|MinShouldMatchSumScorer
specifier|public
name|MinShouldMatchSumScorer
parameter_list|(
name|Weight
name|weight
parameter_list|,
name|List
argument_list|<
name|Scorer
argument_list|>
name|subScorers
parameter_list|,
name|int
name|minimumNrMatchers
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|weight
argument_list|)
expr_stmt|;
name|this
operator|.
name|nrInHeap
operator|=
name|this
operator|.
name|numScorers
operator|=
name|subScorers
operator|.
name|size
argument_list|()
expr_stmt|;
if|if
condition|(
name|minimumNrMatchers
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Minimum nr of matchers must be positive"
argument_list|)
throw|;
block|}
if|if
condition|(
name|numScorers
operator|<=
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"There must be at least 2 subScorers"
argument_list|)
throw|;
block|}
name|this
operator|.
name|mm
operator|=
name|minimumNrMatchers
expr_stmt|;
name|this
operator|.
name|sortedSubScorers
operator|=
name|subScorers
operator|.
name|toArray
argument_list|(
operator|new
name|Scorer
index|[
name|this
operator|.
name|numScorers
index|]
argument_list|)
expr_stmt|;
comment|// sorting by decreasing subscorer cost should be inversely correlated with
comment|// next docid (assuming costs are due to generating many postings)
name|ArrayUtil
operator|.
name|timSort
argument_list|(
name|sortedSubScorers
argument_list|,
operator|new
name|Comparator
argument_list|<
name|Scorer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|Scorer
name|o1
parameter_list|,
name|Scorer
name|o2
parameter_list|)
block|{
return|return
name|Long
operator|.
name|signum
argument_list|(
name|o2
operator|.
name|cost
argument_list|()
operator|-
name|o1
operator|.
name|cost
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// take mm-1 most costly subscorers aside
name|this
operator|.
name|mmStack
operator|=
operator|new
name|Scorer
index|[
name|mm
operator|-
literal|1
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|mm
operator|-
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|mmStack
index|[
name|i
index|]
operator|=
name|sortedSubScorers
index|[
name|i
index|]
expr_stmt|;
block|}
name|nrInHeap
operator|-=
name|mm
operator|-
literal|1
expr_stmt|;
name|this
operator|.
name|sortedSubScorersIdx
operator|=
name|mm
operator|-
literal|1
expr_stmt|;
comment|// take remaining into heap, if any, and heapify
name|this
operator|.
name|subScorers
operator|=
operator|new
name|Scorer
index|[
name|nrInHeap
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nrInHeap
condition|;
name|i
operator|++
control|)
block|{
name|this
operator|.
name|subScorers
index|[
name|i
index|]
operator|=
name|this
operator|.
name|sortedSubScorers
index|[
name|mm
operator|-
literal|1
operator|+
name|i
index|]
expr_stmt|;
block|}
name|minheapHeapify
argument_list|()
expr_stmt|;
assert|assert
name|minheapCheck
argument_list|()
assert|;
block|}
comment|/**    * Construct a<code>DisjunctionScorer</code>, using one as the minimum number    * of matching subscorers.    */
DECL|method|MinShouldMatchSumScorer
specifier|public
name|MinShouldMatchSumScorer
parameter_list|(
name|Weight
name|weight
parameter_list|,
name|List
argument_list|<
name|Scorer
argument_list|>
name|subScorers
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|weight
argument_list|,
name|subScorers
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getChildren
specifier|public
specifier|final
name|Collection
argument_list|<
name|ChildScorer
argument_list|>
name|getChildren
parameter_list|()
block|{
name|ArrayList
argument_list|<
name|ChildScorer
argument_list|>
name|children
init|=
operator|new
name|ArrayList
argument_list|<
name|ChildScorer
argument_list|>
argument_list|(
name|numScorers
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numScorers
condition|;
name|i
operator|++
control|)
block|{
name|children
operator|.
name|add
argument_list|(
operator|new
name|ChildScorer
argument_list|(
name|subScorers
index|[
name|i
index|]
argument_list|,
literal|"SHOULD"
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|children
return|;
block|}
annotation|@
name|Override
DECL|method|nextDoc
specifier|public
name|int
name|nextDoc
parameter_list|()
throws|throws
name|IOException
block|{
assert|assert
name|doc
operator|!=
name|NO_MORE_DOCS
assert|;
while|while
condition|(
literal|true
condition|)
block|{
comment|// to remove current doc, call next() on all subScorers on current doc within heap
while|while
condition|(
name|subScorers
index|[
literal|0
index|]
operator|.
name|docID
argument_list|()
operator|==
name|doc
condition|)
block|{
if|if
condition|(
name|subScorers
index|[
literal|0
index|]
operator|.
name|nextDoc
argument_list|()
operator|!=
name|NO_MORE_DOCS
condition|)
block|{
name|minheapSiftDown
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|minheapRemoveRoot
argument_list|()
expr_stmt|;
name|numScorers
operator|--
expr_stmt|;
if|if
condition|(
name|numScorers
operator|<
name|mm
condition|)
block|{
return|return
name|doc
operator|=
name|NO_MORE_DOCS
return|;
block|}
block|}
comment|//assert minheapCheck();
block|}
name|evaluateSmallestDocInHeap
argument_list|()
expr_stmt|;
if|if
condition|(
name|nrMatchers
operator|>=
name|mm
condition|)
block|{
comment|// doc satisfies mm constraint
break|break;
block|}
block|}
return|return
name|doc
return|;
block|}
DECL|method|evaluateSmallestDocInHeap
specifier|private
name|void
name|evaluateSmallestDocInHeap
parameter_list|()
throws|throws
name|IOException
block|{
comment|// within heap, subScorer[0] now contains the next candidate doc
name|doc
operator|=
name|subScorers
index|[
literal|0
index|]
operator|.
name|docID
argument_list|()
expr_stmt|;
if|if
condition|(
name|doc
operator|==
name|NO_MORE_DOCS
condition|)
block|{
name|nrMatchers
operator|=
name|Integer
operator|.
name|MAX_VALUE
expr_stmt|;
comment|// stop looping
return|return;
block|}
comment|// 1. score and count number of matching subScorers within heap
name|score
operator|=
name|subScorers
index|[
literal|0
index|]
operator|.
name|score
argument_list|()
expr_stmt|;
name|nrMatchers
operator|=
literal|1
expr_stmt|;
name|countMatches
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|countMatches
argument_list|(
literal|2
argument_list|)
expr_stmt|;
comment|// 2. score and count number of matching subScorers within stack,
comment|// short-circuit: stop when mm can't be reached for current doc, then perform on heap next()
comment|// TODO instead advance() might be possible, but complicates things
for|for
control|(
name|int
name|i
init|=
name|mm
operator|-
literal|2
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
comment|// first advance sparsest subScorer
if|if
condition|(
name|mmStack
index|[
name|i
index|]
operator|.
name|docID
argument_list|()
operator|>=
name|doc
operator|||
name|mmStack
index|[
name|i
index|]
operator|.
name|advance
argument_list|(
name|doc
argument_list|)
operator|!=
name|NO_MORE_DOCS
condition|)
block|{
if|if
condition|(
name|mmStack
index|[
name|i
index|]
operator|.
name|docID
argument_list|()
operator|==
name|doc
condition|)
block|{
comment|// either it was already on doc, or got there via advance()
name|nrMatchers
operator|++
expr_stmt|;
name|score
operator|+=
name|mmStack
index|[
name|i
index|]
operator|.
name|score
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// scorer advanced to next after doc, check if enough scorers left for current doc
if|if
condition|(
name|nrMatchers
operator|+
name|i
operator|<
name|mm
condition|)
block|{
comment|// too few subScorers left, abort advancing
return|return;
comment|// continue looping TODO consider advance() here
block|}
block|}
block|}
else|else
block|{
comment|// subScorer exhausted
name|numScorers
operator|--
expr_stmt|;
if|if
condition|(
name|numScorers
operator|<
name|mm
condition|)
block|{
comment|// too few subScorers left
name|doc
operator|=
name|NO_MORE_DOCS
expr_stmt|;
name|nrMatchers
operator|=
name|Integer
operator|.
name|MAX_VALUE
expr_stmt|;
comment|// stop looping
return|return;
block|}
if|if
condition|(
name|mm
operator|-
literal|2
operator|-
name|i
operator|>
literal|0
condition|)
block|{
comment|// shift RHS of array left
name|System
operator|.
name|arraycopy
argument_list|(
name|mmStack
argument_list|,
name|i
operator|+
literal|1
argument_list|,
name|mmStack
argument_list|,
name|i
argument_list|,
name|mm
operator|-
literal|2
operator|-
name|i
argument_list|)
expr_stmt|;
block|}
comment|// find next most costly subScorer within heap TODO can this be done better?
while|while
condition|(
operator|!
name|minheapRemove
argument_list|(
name|sortedSubScorers
index|[
name|sortedSubScorersIdx
operator|++
index|]
argument_list|)
condition|)
block|{
comment|//assert minheapCheck();
block|}
comment|// add the subScorer removed from heap to stack
name|mmStack
index|[
name|mm
operator|-
literal|2
index|]
operator|=
name|sortedSubScorers
index|[
name|sortedSubScorersIdx
operator|-
literal|1
index|]
expr_stmt|;
if|if
condition|(
name|nrMatchers
operator|+
name|i
operator|<
name|mm
condition|)
block|{
comment|// too few subScorers left, abort advancing
return|return;
comment|// continue looping TODO consider advance() here
block|}
block|}
block|}
block|}
comment|// TODO: this currently scores, but so did the previous impl
comment|// TODO: remove recursion.
comment|// TODO: consider separating scoring out of here, then modify this
comment|// and afterNext() to terminate when nrMatchers == minimumNrMatchers
comment|// then also change freq() to just always compute it from scratch
DECL|method|countMatches
specifier|private
name|void
name|countMatches
parameter_list|(
name|int
name|root
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|root
operator|<
name|nrInHeap
operator|&&
name|subScorers
index|[
name|root
index|]
operator|.
name|docID
argument_list|()
operator|==
name|doc
condition|)
block|{
name|nrMatchers
operator|++
expr_stmt|;
name|score
operator|+=
name|subScorers
index|[
name|root
index|]
operator|.
name|score
argument_list|()
expr_stmt|;
name|countMatches
argument_list|(
operator|(
name|root
operator|<<
literal|1
operator|)
operator|+
literal|1
argument_list|)
expr_stmt|;
name|countMatches
argument_list|(
operator|(
name|root
operator|<<
literal|1
operator|)
operator|+
literal|2
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Returns the score of the current document matching the query. Initially    * invalid, until {@link #nextDoc()} is called the first time.    */
annotation|@
name|Override
DECL|method|score
specifier|public
name|float
name|score
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|(
name|float
operator|)
name|score
return|;
block|}
annotation|@
name|Override
DECL|method|docID
specifier|public
name|int
name|docID
parameter_list|()
block|{
return|return
name|doc
return|;
block|}
annotation|@
name|Override
DECL|method|freq
specifier|public
name|int
name|freq
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|nrMatchers
return|;
block|}
comment|/**    * Advances to the first match beyond the current whose document number is    * greater than or equal to a given target.<br>    * The implementation uses the advance() method on the subscorers.    *     * @param target the target document number.    * @return the document whose number is greater than or equal to the given    *         target, or -1 if none exist.    */
annotation|@
name|Override
DECL|method|advance
specifier|public
name|int
name|advance
parameter_list|(
name|int
name|target
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|numScorers
operator|<
name|mm
condition|)
return|return
name|doc
operator|=
name|NO_MORE_DOCS
return|;
comment|// advance all Scorers in heap at smaller docs to at least target
while|while
condition|(
name|subScorers
index|[
literal|0
index|]
operator|.
name|docID
argument_list|()
operator|<
name|target
condition|)
block|{
if|if
condition|(
name|subScorers
index|[
literal|0
index|]
operator|.
name|advance
argument_list|(
name|target
argument_list|)
operator|!=
name|NO_MORE_DOCS
condition|)
block|{
name|minheapSiftDown
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|minheapRemoveRoot
argument_list|()
expr_stmt|;
name|numScorers
operator|--
expr_stmt|;
if|if
condition|(
name|numScorers
operator|<
name|mm
condition|)
block|{
return|return
name|doc
operator|=
name|NO_MORE_DOCS
return|;
block|}
block|}
comment|//assert minheapCheck();
block|}
name|evaluateSmallestDocInHeap
argument_list|()
expr_stmt|;
if|if
condition|(
name|nrMatchers
operator|>=
name|mm
condition|)
block|{
return|return
name|doc
return|;
block|}
else|else
block|{
return|return
name|nextDoc
argument_list|()
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|cost
specifier|public
name|long
name|cost
parameter_list|()
block|{
comment|// cost for merging of lists analog to DisjunctionSumScorer
name|long
name|costCandidateGeneration
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nrInHeap
condition|;
name|i
operator|++
control|)
name|costCandidateGeneration
operator|+=
name|subScorers
index|[
name|i
index|]
operator|.
name|cost
argument_list|()
expr_stmt|;
comment|// TODO is cost for advance() different to cost for iteration + heap merge
comment|//      and how do they compare overall to pure disjunctions?
specifier|final
name|float
name|c1
init|=
literal|1.0f
decl_stmt|,
name|c2
init|=
literal|1.0f
decl_stmt|;
comment|// maybe a constant, maybe a proportion between costCandidateGeneration and sum(subScorer_to_be_advanced.cost())?
return|return
call|(
name|long
call|)
argument_list|(
name|c1
operator|*
name|costCandidateGeneration
operator|+
comment|// heap-merge cost
name|c2
operator|*
name|costCandidateGeneration
operator|*
operator|(
name|mm
operator|-
literal|1
operator|)
comment|// advance() cost
argument_list|)
return|;
block|}
comment|/**    * Organize subScorers into a min heap with scorers generating the earliest document on top.    */
DECL|method|minheapHeapify
specifier|protected
specifier|final
name|void
name|minheapHeapify
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
operator|(
name|nrInHeap
operator|>>
literal|1
operator|)
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|minheapSiftDown
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * The subtree of subScorers at root is a min heap except possibly for its root element.    * Bubble the root down as required to make the subtree a heap.    */
DECL|method|minheapSiftDown
specifier|protected
specifier|final
name|void
name|minheapSiftDown
parameter_list|(
name|int
name|root
parameter_list|)
block|{
comment|// TODO could this implementation also move rather than swapping neighbours?
name|Scorer
name|scorer
init|=
name|subScorers
index|[
name|root
index|]
decl_stmt|;
name|int
name|doc
init|=
name|scorer
operator|.
name|docID
argument_list|()
decl_stmt|;
name|int
name|i
init|=
name|root
decl_stmt|;
while|while
condition|(
name|i
operator|<=
operator|(
name|nrInHeap
operator|>>
literal|1
operator|)
operator|-
literal|1
condition|)
block|{
name|int
name|lchild
init|=
operator|(
name|i
operator|<<
literal|1
operator|)
operator|+
literal|1
decl_stmt|;
name|Scorer
name|lscorer
init|=
name|subScorers
index|[
name|lchild
index|]
decl_stmt|;
name|int
name|ldoc
init|=
name|lscorer
operator|.
name|docID
argument_list|()
decl_stmt|;
name|int
name|rdoc
init|=
name|Integer
operator|.
name|MAX_VALUE
decl_stmt|,
name|rchild
init|=
operator|(
name|i
operator|<<
literal|1
operator|)
operator|+
literal|2
decl_stmt|;
name|Scorer
name|rscorer
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|rchild
operator|<
name|nrInHeap
condition|)
block|{
name|rscorer
operator|=
name|subScorers
index|[
name|rchild
index|]
expr_stmt|;
name|rdoc
operator|=
name|rscorer
operator|.
name|docID
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|ldoc
operator|<
name|doc
condition|)
block|{
if|if
condition|(
name|rdoc
operator|<
name|ldoc
condition|)
block|{
name|subScorers
index|[
name|i
index|]
operator|=
name|rscorer
expr_stmt|;
name|subScorers
index|[
name|rchild
index|]
operator|=
name|scorer
expr_stmt|;
name|i
operator|=
name|rchild
expr_stmt|;
block|}
else|else
block|{
name|subScorers
index|[
name|i
index|]
operator|=
name|lscorer
expr_stmt|;
name|subScorers
index|[
name|lchild
index|]
operator|=
name|scorer
expr_stmt|;
name|i
operator|=
name|lchild
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|rdoc
operator|<
name|doc
condition|)
block|{
name|subScorers
index|[
name|i
index|]
operator|=
name|rscorer
expr_stmt|;
name|subScorers
index|[
name|rchild
index|]
operator|=
name|scorer
expr_stmt|;
name|i
operator|=
name|rchild
expr_stmt|;
block|}
else|else
block|{
return|return;
block|}
block|}
block|}
DECL|method|minheapSiftUp
specifier|protected
specifier|final
name|void
name|minheapSiftUp
parameter_list|(
name|int
name|i
parameter_list|)
block|{
name|Scorer
name|scorer
init|=
name|subScorers
index|[
name|i
index|]
decl_stmt|;
specifier|final
name|int
name|doc
init|=
name|scorer
operator|.
name|docID
argument_list|()
decl_stmt|;
comment|// find right place for scorer
while|while
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|int
name|parent
init|=
operator|(
name|i
operator|-
literal|1
operator|)
operator|>>
literal|1
decl_stmt|;
name|Scorer
name|pscorer
init|=
name|subScorers
index|[
name|parent
index|]
decl_stmt|;
name|int
name|pdoc
init|=
name|pscorer
operator|.
name|docID
argument_list|()
decl_stmt|;
if|if
condition|(
name|pdoc
operator|>
name|doc
condition|)
block|{
comment|// move root down, make space
name|subScorers
index|[
name|i
index|]
operator|=
name|subScorers
index|[
name|parent
index|]
expr_stmt|;
name|i
operator|=
name|parent
expr_stmt|;
block|}
else|else
block|{
comment|// done, found right place
break|break;
block|}
block|}
name|subScorers
index|[
name|i
index|]
operator|=
name|scorer
expr_stmt|;
block|}
comment|/**    * Remove the root Scorer from subScorers and re-establish it as a heap    */
DECL|method|minheapRemoveRoot
specifier|protected
specifier|final
name|void
name|minheapRemoveRoot
parameter_list|()
block|{
if|if
condition|(
name|nrInHeap
operator|==
literal|1
condition|)
block|{
comment|//subScorers[0] = null; // not necessary
name|nrInHeap
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
name|nrInHeap
operator|--
expr_stmt|;
name|subScorers
index|[
literal|0
index|]
operator|=
name|subScorers
index|[
name|nrInHeap
index|]
expr_stmt|;
comment|//subScorers[nrInHeap] = null; // not necessary
name|minheapSiftDown
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Removes a given Scorer from the heap by placing end of heap at that    * position and bubbling it either up or down    */
DECL|method|minheapRemove
specifier|protected
specifier|final
name|boolean
name|minheapRemove
parameter_list|(
name|Scorer
name|scorer
parameter_list|)
block|{
comment|// find scorer: O(nrInHeap)
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nrInHeap
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|subScorers
index|[
name|i
index|]
operator|==
name|scorer
condition|)
block|{
comment|// remove scorer
name|subScorers
index|[
name|i
index|]
operator|=
name|subScorers
index|[
operator|--
name|nrInHeap
index|]
expr_stmt|;
comment|//if (i != nrInHeap) subScorers[nrInHeap] = null; // not necessary
name|minheapSiftUp
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|minheapSiftDown
argument_list|(
name|i
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
comment|// scorer already exhausted
block|}
DECL|method|minheapCheck
name|boolean
name|minheapCheck
parameter_list|()
block|{
return|return
name|minheapCheck
argument_list|(
literal|0
argument_list|)
return|;
block|}
DECL|method|minheapCheck
specifier|private
name|boolean
name|minheapCheck
parameter_list|(
name|int
name|root
parameter_list|)
block|{
if|if
condition|(
name|root
operator|>=
name|nrInHeap
condition|)
return|return
literal|true
return|;
name|int
name|lchild
init|=
operator|(
name|root
operator|<<
literal|1
operator|)
operator|+
literal|1
decl_stmt|;
name|int
name|rchild
init|=
operator|(
name|root
operator|<<
literal|1
operator|)
operator|+
literal|2
decl_stmt|;
if|if
condition|(
name|lchild
operator|<
name|nrInHeap
operator|&&
name|subScorers
index|[
name|root
index|]
operator|.
name|docID
argument_list|()
operator|>
name|subScorers
index|[
name|lchild
index|]
operator|.
name|docID
argument_list|()
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|rchild
operator|<
name|nrInHeap
operator|&&
name|subScorers
index|[
name|root
index|]
operator|.
name|docID
argument_list|()
operator|>
name|subScorers
index|[
name|rchild
index|]
operator|.
name|docID
argument_list|()
condition|)
return|return
literal|false
return|;
return|return
name|minheapCheck
argument_list|(
name|lchild
argument_list|)
operator|&&
name|minheapCheck
argument_list|(
name|rchild
argument_list|)
return|;
block|}
block|}
end_class
end_unit
