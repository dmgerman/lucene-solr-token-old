begin_unit
begin_package
DECL|package|org.apache.lucene.search
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|FieldInfo
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReaderContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|PointValues
operator|.
name|IntersectVisitor
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|PointValues
operator|.
name|Relation
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|PointValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|DocIdSetBuilder
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|NumericUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|RamUsageEstimator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|StringHelper
import|;
end_import
begin_comment
comment|/** Searches for single points in fields previously indexed using points  *  e.g. {@link org.apache.lucene.document.LongPoint}. */
end_comment
begin_class
DECL|class|ExactPointQuery
specifier|public
class|class
name|ExactPointQuery
extends|extends
name|Query
block|{
DECL|field|field
specifier|final
name|String
name|field
decl_stmt|;
DECL|field|numDims
specifier|final
name|int
name|numDims
decl_stmt|;
DECL|field|point
specifier|final
name|byte
index|[]
index|[]
name|point
decl_stmt|;
DECL|field|bytesPerDim
specifier|final
name|int
name|bytesPerDim
decl_stmt|;
DECL|method|ExactPointQuery
specifier|public
name|ExactPointQuery
parameter_list|(
name|String
name|field
parameter_list|,
name|byte
index|[]
index|[]
name|point
parameter_list|)
block|{
name|this
operator|.
name|field
operator|=
name|field
expr_stmt|;
if|if
condition|(
name|point
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"point must not be null"
argument_list|)
throw|;
block|}
name|this
operator|.
name|point
operator|=
name|point
expr_stmt|;
name|this
operator|.
name|numDims
operator|=
name|point
operator|.
name|length
expr_stmt|;
name|int
name|bytesPerDim
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|byte
index|[]
name|value
range|:
name|point
control|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"point's dimensional values must not be null"
argument_list|)
throw|;
block|}
if|if
condition|(
name|bytesPerDim
operator|==
operator|-
literal|1
condition|)
block|{
name|bytesPerDim
operator|=
name|value
operator|.
name|length
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|.
name|length
operator|!=
name|bytesPerDim
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"all dimensions must have same bytes length, but saw "
operator|+
name|bytesPerDim
operator|+
literal|" and "
operator|+
name|value
operator|.
name|length
argument_list|)
throw|;
block|}
block|}
name|this
operator|.
name|bytesPerDim
operator|=
name|bytesPerDim
expr_stmt|;
block|}
comment|/** Use in the 1D case when you indexed 1D int values using {@link org.apache.lucene.document.IntPoint} */
DECL|method|new1DIntExact
specifier|public
specifier|static
name|ExactPointQuery
name|new1DIntExact
parameter_list|(
name|String
name|field
parameter_list|,
name|int
name|value
parameter_list|)
block|{
return|return
operator|new
name|ExactPointQuery
argument_list|(
name|field
argument_list|,
name|pack
argument_list|(
name|value
argument_list|)
argument_list|)
return|;
block|}
comment|/** Use in the 1D case when you indexed 1D long values using {@link org.apache.lucene.document.LongPoint} */
DECL|method|new1DLongExact
specifier|public
specifier|static
name|ExactPointQuery
name|new1DLongExact
parameter_list|(
name|String
name|field
parameter_list|,
name|long
name|value
parameter_list|)
block|{
return|return
operator|new
name|ExactPointQuery
argument_list|(
name|field
argument_list|,
name|pack
argument_list|(
name|value
argument_list|)
argument_list|)
return|;
block|}
comment|/** Use in the 1D case when you indexed 1D float values using {@link org.apache.lucene.document.FloatPoint} */
DECL|method|new1DFloatExact
specifier|public
specifier|static
name|ExactPointQuery
name|new1DFloatExact
parameter_list|(
name|String
name|field
parameter_list|,
name|float
name|value
parameter_list|)
block|{
return|return
operator|new
name|ExactPointQuery
argument_list|(
name|field
argument_list|,
name|pack
argument_list|(
name|value
argument_list|)
argument_list|)
return|;
block|}
comment|/** Use in the 1D case when you indexed 1D double values using {@link org.apache.lucene.document.DoublePoint} */
DECL|method|new1DDoubleExact
specifier|public
specifier|static
name|ExactPointQuery
name|new1DDoubleExact
parameter_list|(
name|String
name|field
parameter_list|,
name|double
name|value
parameter_list|)
block|{
return|return
operator|new
name|ExactPointQuery
argument_list|(
name|field
argument_list|,
name|pack
argument_list|(
name|value
argument_list|)
argument_list|)
return|;
block|}
DECL|method|pack
specifier|private
specifier|static
name|byte
index|[]
index|[]
name|pack
parameter_list|(
name|long
name|value
parameter_list|)
block|{
name|byte
index|[]
index|[]
name|result
init|=
operator|new
name|byte
index|[]
index|[]
block|{
operator|new
name|byte
index|[
name|RamUsageEstimator
operator|.
name|NUM_BYTES_LONG
index|]
block|}
decl_stmt|;
name|NumericUtils
operator|.
name|longToBytes
argument_list|(
name|value
argument_list|,
name|result
index|[
literal|0
index|]
argument_list|,
literal|0
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
DECL|method|pack
specifier|private
specifier|static
name|byte
index|[]
index|[]
name|pack
parameter_list|(
name|double
name|value
parameter_list|)
block|{
name|byte
index|[]
index|[]
name|result
init|=
operator|new
name|byte
index|[]
index|[]
block|{
operator|new
name|byte
index|[
name|RamUsageEstimator
operator|.
name|NUM_BYTES_LONG
index|]
block|}
decl_stmt|;
name|NumericUtils
operator|.
name|longToBytesDirect
argument_list|(
name|NumericUtils
operator|.
name|doubleToSortableLong
argument_list|(
name|value
argument_list|)
argument_list|,
name|result
index|[
literal|0
index|]
argument_list|,
literal|0
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
DECL|method|pack
specifier|private
specifier|static
name|byte
index|[]
index|[]
name|pack
parameter_list|(
name|int
name|value
parameter_list|)
block|{
name|byte
index|[]
index|[]
name|result
init|=
operator|new
name|byte
index|[]
index|[]
block|{
operator|new
name|byte
index|[
name|RamUsageEstimator
operator|.
name|NUM_BYTES_INT
index|]
block|}
decl_stmt|;
name|NumericUtils
operator|.
name|intToBytes
argument_list|(
name|value
argument_list|,
name|result
index|[
literal|0
index|]
argument_list|,
literal|0
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
DECL|method|pack
specifier|private
specifier|static
name|byte
index|[]
index|[]
name|pack
parameter_list|(
name|float
name|value
parameter_list|)
block|{
name|byte
index|[]
index|[]
name|result
init|=
operator|new
name|byte
index|[]
index|[]
block|{
operator|new
name|byte
index|[
name|RamUsageEstimator
operator|.
name|NUM_BYTES_INT
index|]
block|}
decl_stmt|;
name|NumericUtils
operator|.
name|intToBytesDirect
argument_list|(
name|NumericUtils
operator|.
name|floatToSortableInt
argument_list|(
name|value
argument_list|)
argument_list|,
name|result
index|[
literal|0
index|]
argument_list|,
literal|0
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|rewrite
specifier|public
name|Query
name|rewrite
parameter_list|(
name|IndexReader
name|reader
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
index|[]
name|inclusive
init|=
operator|new
name|boolean
index|[]
block|{
literal|true
block|}
decl_stmt|;
return|return
operator|new
name|PointRangeQuery
argument_list|(
name|field
argument_list|,
name|point
argument_list|,
name|inclusive
argument_list|,
name|point
argument_list|,
name|inclusive
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|hash
init|=
name|super
operator|.
name|hashCode
argument_list|()
decl_stmt|;
name|hash
operator|+=
name|Arrays
operator|.
name|hashCode
argument_list|(
name|point
argument_list|)
operator|^
literal|0x14fa55fb
expr_stmt|;
name|hash
operator|+=
name|numDims
operator|^
literal|0x14fa55fb
expr_stmt|;
name|hash
operator|+=
name|Objects
operator|.
name|hashCode
argument_list|(
name|bytesPerDim
argument_list|)
expr_stmt|;
return|return
name|hash
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|other
parameter_list|)
block|{
if|if
condition|(
name|super
operator|.
name|equals
argument_list|(
name|other
argument_list|)
condition|)
block|{
specifier|final
name|ExactPointQuery
name|q
init|=
operator|(
name|ExactPointQuery
operator|)
name|other
decl_stmt|;
return|return
name|q
operator|.
name|numDims
operator|==
name|numDims
operator|&&
name|q
operator|.
name|bytesPerDim
operator|==
name|bytesPerDim
operator|&&
name|Arrays
operator|.
name|equals
argument_list|(
name|point
argument_list|,
name|q
operator|.
name|point
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|(
name|String
name|field
parameter_list|)
block|{
specifier|final
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|field
operator|.
name|equals
argument_list|(
name|field
argument_list|)
operator|==
literal|false
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"field="
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|field
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|append
argument_list|(
literal|" point="
argument_list|)
operator|.
name|append
argument_list|(
name|Arrays
operator|.
name|toString
argument_list|(
name|point
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class
end_unit
