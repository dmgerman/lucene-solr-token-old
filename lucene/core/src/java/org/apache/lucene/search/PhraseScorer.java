begin_unit
begin_package
DECL|package|org.apache.lucene.search
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|similarities
operator|.
name|Similarity
import|;
end_import
begin_comment
comment|/** Expert: Scoring functionality for phrase queries.  *<br>A document is considered matching if it contains the phrase-query terms    * at "valid" positions. What "valid positions" are  * depends on the type of the phrase query: for an exact phrase query terms are required   * to appear in adjacent locations, while for a sloppy phrase query some distance between   * the terms is allowed. The abstract method {@link #phraseFreq()} of extending classes  * is invoked for each document containing all the phrase query terms, in order to   * compute the frequency of the phrase query in that document. A non zero frequency  * means a match.   */
end_comment
begin_class
DECL|class|PhraseScorer
specifier|abstract
class|class
name|PhraseScorer
extends|extends
name|Scorer
block|{
DECL|field|min
DECL|field|max
name|PhrasePositions
name|min
decl_stmt|,
name|max
decl_stmt|;
DECL|field|freq
specifier|private
name|float
name|freq
decl_stmt|;
comment|//phrase frequency in current doc as computed by phraseFreq().
DECL|field|docScorer
specifier|final
name|Similarity
operator|.
name|SloppySimScorer
name|docScorer
decl_stmt|;
DECL|method|PhraseScorer
name|PhraseScorer
parameter_list|(
name|Weight
name|weight
parameter_list|,
name|PhraseQuery
operator|.
name|PostingsAndFreq
index|[]
name|postings
parameter_list|,
name|Similarity
operator|.
name|SloppySimScorer
name|docScorer
parameter_list|)
block|{
name|super
argument_list|(
name|weight
argument_list|)
expr_stmt|;
name|this
operator|.
name|docScorer
operator|=
name|docScorer
expr_stmt|;
comment|// convert tps to a list of phrase positions.
comment|// note: phrase-position differs from term-position in that its position
comment|// reflects the phrase offset: pp.pos = tp.pos - offset.
comment|// this allows to easily identify a matching (exact) phrase
comment|// when all PhrasePositions have exactly the same position.
if|if
condition|(
name|postings
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|min
operator|=
operator|new
name|PhrasePositions
argument_list|(
name|postings
index|[
literal|0
index|]
operator|.
name|postings
argument_list|,
name|postings
index|[
literal|0
index|]
operator|.
name|position
argument_list|,
literal|0
argument_list|,
name|postings
index|[
literal|0
index|]
operator|.
name|terms
argument_list|)
expr_stmt|;
name|max
operator|=
name|min
expr_stmt|;
name|max
operator|.
name|doc
operator|=
operator|-
literal|1
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|postings
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|PhrasePositions
name|pp
init|=
operator|new
name|PhrasePositions
argument_list|(
name|postings
index|[
name|i
index|]
operator|.
name|postings
argument_list|,
name|postings
index|[
name|i
index|]
operator|.
name|position
argument_list|,
name|i
argument_list|,
name|postings
index|[
name|i
index|]
operator|.
name|terms
argument_list|)
decl_stmt|;
name|max
operator|.
name|next
operator|=
name|pp
expr_stmt|;
name|max
operator|=
name|pp
expr_stmt|;
name|max
operator|.
name|doc
operator|=
operator|-
literal|1
expr_stmt|;
block|}
name|max
operator|.
name|next
operator|=
name|min
expr_stmt|;
comment|// make it cyclic for easier manipulation
block|}
block|}
annotation|@
name|Override
DECL|method|docID
specifier|public
name|int
name|docID
parameter_list|()
block|{
return|return
name|max
operator|.
name|doc
return|;
block|}
annotation|@
name|Override
DECL|method|nextDoc
specifier|public
name|int
name|nextDoc
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|advance
argument_list|(
name|max
operator|.
name|doc
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|score
specifier|public
name|float
name|score
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|docScorer
operator|.
name|score
argument_list|(
name|max
operator|.
name|doc
argument_list|,
name|freq
argument_list|)
return|;
block|}
DECL|method|advanceMin
specifier|private
name|boolean
name|advanceMin
parameter_list|(
name|int
name|target
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|min
operator|.
name|skipTo
argument_list|(
name|target
argument_list|)
condition|)
block|{
name|max
operator|.
name|doc
operator|=
name|NO_MORE_DOCS
expr_stmt|;
comment|// for further calls to docID()
return|return
literal|false
return|;
block|}
name|min
operator|=
name|min
operator|.
name|next
expr_stmt|;
comment|// cyclic
name|max
operator|=
name|max
operator|.
name|next
expr_stmt|;
comment|// cyclic
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|advance
specifier|public
name|int
name|advance
parameter_list|(
name|int
name|target
parameter_list|)
throws|throws
name|IOException
block|{
name|freq
operator|=
literal|0.0f
expr_stmt|;
if|if
condition|(
operator|!
name|advanceMin
argument_list|(
name|target
argument_list|)
condition|)
block|{
return|return
name|NO_MORE_DOCS
return|;
block|}
name|boolean
name|restart
init|=
literal|false
decl_stmt|;
while|while
condition|(
name|freq
operator|==
literal|0.0f
condition|)
block|{
while|while
condition|(
name|min
operator|.
name|doc
operator|<
name|max
operator|.
name|doc
operator|||
name|restart
condition|)
block|{
name|restart
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|advanceMin
argument_list|(
name|max
operator|.
name|doc
argument_list|)
condition|)
block|{
return|return
name|NO_MORE_DOCS
return|;
block|}
block|}
comment|// found a doc with all of the terms
name|freq
operator|=
name|phraseFreq
argument_list|()
expr_stmt|;
comment|// check for phrase
name|restart
operator|=
literal|true
expr_stmt|;
block|}
comment|// found a match
return|return
name|max
operator|.
name|doc
return|;
block|}
comment|/**    * phrase frequency in current doc as computed by phraseFreq().    */
annotation|@
name|Override
DECL|method|freq
specifier|public
specifier|final
name|float
name|freq
parameter_list|()
block|{
return|return
name|freq
return|;
block|}
comment|/**    * For a document containing all the phrase query terms, compute the    * frequency of the phrase in that document.     * A non zero frequency means a match.    *<br>Note, that containing all phrase terms does not guarantee a match - they have to be found in matching locations.      * @return frequency of the phrase in current doc, 0 if not found.     */
DECL|method|phraseFreq
specifier|abstract
name|float
name|phraseFreq
parameter_list|()
throws|throws
name|IOException
function_decl|;
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"scorer("
operator|+
name|weight
operator|+
literal|")"
return|;
block|}
block|}
end_class
end_unit
