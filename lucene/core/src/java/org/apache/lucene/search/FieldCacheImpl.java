begin_unit
begin_package
DECL|package|org.apache.lucene.search
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|WeakHashMap
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|AtomicReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|BinaryDocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DocTermOrds
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DocsEnum
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|FieldInfo
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|NumericDocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SegmentReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SortedDocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Terms
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|TermsEnum
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|ArrayUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Bits
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|FieldCacheSanityChecker
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|FixedBitSet
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|PagedBytes
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|packed
operator|.
name|GrowableWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|packed
operator|.
name|PackedInts
import|;
end_import
begin_comment
comment|// nocommit rename to UninvertFieldCacheImpl or something ...
end_comment
begin_comment
comment|/**  * Expert: The default cache implementation, storing all values in memory.  * A WeakHashMap is used for storage.  *  * @since   lucene 1.4  */
end_comment
begin_class
DECL|class|FieldCacheImpl
class|class
name|FieldCacheImpl
implements|implements
name|FieldCache
block|{
DECL|field|caches
specifier|private
name|Map
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|Cache
argument_list|>
name|caches
decl_stmt|;
DECL|method|FieldCacheImpl
name|FieldCacheImpl
parameter_list|()
block|{
name|init
argument_list|()
expr_stmt|;
block|}
DECL|method|init
specifier|private
specifier|synchronized
name|void
name|init
parameter_list|()
block|{
name|caches
operator|=
operator|new
name|HashMap
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|Cache
argument_list|>
argument_list|(
literal|9
argument_list|)
expr_stmt|;
name|caches
operator|.
name|put
argument_list|(
name|Byte
operator|.
name|TYPE
argument_list|,
operator|new
name|ByteCache
argument_list|(
name|this
argument_list|)
argument_list|)
expr_stmt|;
name|caches
operator|.
name|put
argument_list|(
name|Short
operator|.
name|TYPE
argument_list|,
operator|new
name|ShortCache
argument_list|(
name|this
argument_list|)
argument_list|)
expr_stmt|;
name|caches
operator|.
name|put
argument_list|(
name|Integer
operator|.
name|TYPE
argument_list|,
operator|new
name|IntCache
argument_list|(
name|this
argument_list|)
argument_list|)
expr_stmt|;
name|caches
operator|.
name|put
argument_list|(
name|Float
operator|.
name|TYPE
argument_list|,
operator|new
name|FloatCache
argument_list|(
name|this
argument_list|)
argument_list|)
expr_stmt|;
name|caches
operator|.
name|put
argument_list|(
name|Long
operator|.
name|TYPE
argument_list|,
operator|new
name|LongCache
argument_list|(
name|this
argument_list|)
argument_list|)
expr_stmt|;
name|caches
operator|.
name|put
argument_list|(
name|Double
operator|.
name|TYPE
argument_list|,
operator|new
name|DoubleCache
argument_list|(
name|this
argument_list|)
argument_list|)
expr_stmt|;
name|caches
operator|.
name|put
argument_list|(
name|BinaryDocValues
operator|.
name|class
argument_list|,
operator|new
name|BinaryDocValuesCache
argument_list|(
name|this
argument_list|)
argument_list|)
expr_stmt|;
name|caches
operator|.
name|put
argument_list|(
name|SortedDocValues
operator|.
name|class
argument_list|,
operator|new
name|SortedDocValuesCache
argument_list|(
name|this
argument_list|)
argument_list|)
expr_stmt|;
name|caches
operator|.
name|put
argument_list|(
name|DocTermOrds
operator|.
name|class
argument_list|,
operator|new
name|DocTermOrdsCache
argument_list|(
name|this
argument_list|)
argument_list|)
expr_stmt|;
name|caches
operator|.
name|put
argument_list|(
name|DocsWithFieldCache
operator|.
name|class
argument_list|,
operator|new
name|DocsWithFieldCache
argument_list|(
name|this
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|purgeAllCaches
specifier|public
specifier|synchronized
name|void
name|purgeAllCaches
parameter_list|()
block|{
name|init
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|purge
specifier|public
specifier|synchronized
name|void
name|purge
parameter_list|(
name|AtomicReader
name|r
parameter_list|)
block|{
for|for
control|(
name|Cache
name|c
range|:
name|caches
operator|.
name|values
argument_list|()
control|)
block|{
name|c
operator|.
name|purge
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getCacheEntries
specifier|public
specifier|synchronized
name|CacheEntry
index|[]
name|getCacheEntries
parameter_list|()
block|{
name|List
argument_list|<
name|CacheEntry
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|CacheEntry
argument_list|>
argument_list|(
literal|17
argument_list|)
decl_stmt|;
for|for
control|(
specifier|final
name|Map
operator|.
name|Entry
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|Cache
argument_list|>
name|cacheEntry
range|:
name|caches
operator|.
name|entrySet
argument_list|()
control|)
block|{
specifier|final
name|Cache
name|cache
init|=
name|cacheEntry
operator|.
name|getValue
argument_list|()
decl_stmt|;
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|cacheType
init|=
name|cacheEntry
operator|.
name|getKey
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|cache
operator|.
name|readerCache
init|)
block|{
for|for
control|(
specifier|final
name|Map
operator|.
name|Entry
argument_list|<
name|Object
argument_list|,
name|Map
argument_list|<
name|CacheKey
argument_list|,
name|Object
argument_list|>
argument_list|>
name|readerCacheEntry
range|:
name|cache
operator|.
name|readerCache
operator|.
name|entrySet
argument_list|()
control|)
block|{
specifier|final
name|Object
name|readerKey
init|=
name|readerCacheEntry
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|readerKey
operator|==
literal|null
condition|)
continue|continue;
specifier|final
name|Map
argument_list|<
name|CacheKey
argument_list|,
name|Object
argument_list|>
name|innerCache
init|=
name|readerCacheEntry
operator|.
name|getValue
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|Map
operator|.
name|Entry
argument_list|<
name|CacheKey
argument_list|,
name|Object
argument_list|>
name|mapEntry
range|:
name|innerCache
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|CacheKey
name|entry
init|=
name|mapEntry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|result
operator|.
name|add
argument_list|(
operator|new
name|CacheEntry
argument_list|(
name|readerKey
argument_list|,
name|entry
operator|.
name|field
argument_list|,
name|cacheType
argument_list|,
name|entry
operator|.
name|custom
argument_list|,
name|mapEntry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|result
operator|.
name|toArray
argument_list|(
operator|new
name|CacheEntry
index|[
name|result
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
comment|// per-segment fieldcaches don't purge until the shared core closes.
DECL|field|purgeCore
specifier|final
name|SegmentReader
operator|.
name|CoreClosedListener
name|purgeCore
init|=
operator|new
name|SegmentReader
operator|.
name|CoreClosedListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClose
parameter_list|(
name|SegmentReader
name|owner
parameter_list|)
block|{
name|FieldCacheImpl
operator|.
name|this
operator|.
name|purge
argument_list|(
name|owner
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
comment|// composite/SlowMultiReaderWrapper fieldcaches don't purge until composite reader is closed.
DECL|field|purgeReader
specifier|final
name|IndexReader
operator|.
name|ReaderClosedListener
name|purgeReader
init|=
operator|new
name|IndexReader
operator|.
name|ReaderClosedListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClose
parameter_list|(
name|IndexReader
name|owner
parameter_list|)
block|{
assert|assert
name|owner
operator|instanceof
name|AtomicReader
assert|;
name|FieldCacheImpl
operator|.
name|this
operator|.
name|purge
argument_list|(
operator|(
name|AtomicReader
operator|)
name|owner
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
DECL|method|initReader
specifier|private
name|void
name|initReader
parameter_list|(
name|AtomicReader
name|reader
parameter_list|)
block|{
if|if
condition|(
name|reader
operator|instanceof
name|SegmentReader
condition|)
block|{
operator|(
operator|(
name|SegmentReader
operator|)
name|reader
operator|)
operator|.
name|addCoreClosedListener
argument_list|(
name|purgeCore
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// we have a slow reader of some sort, try to register a purge event
comment|// rather than relying on gc:
name|Object
name|key
init|=
name|reader
operator|.
name|getCoreCacheKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|key
operator|instanceof
name|AtomicReader
condition|)
block|{
operator|(
operator|(
name|AtomicReader
operator|)
name|key
operator|)
operator|.
name|addReaderClosedListener
argument_list|(
name|purgeReader
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// last chance
name|reader
operator|.
name|addReaderClosedListener
argument_list|(
name|purgeReader
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/** Expert: Internal cache. */
DECL|class|Cache
specifier|abstract
specifier|static
class|class
name|Cache
block|{
comment|// nocommit why wrapper vs non-static class...?
DECL|method|Cache
name|Cache
parameter_list|(
name|FieldCacheImpl
name|wrapper
parameter_list|)
block|{
name|this
operator|.
name|wrapper
operator|=
name|wrapper
expr_stmt|;
block|}
DECL|field|wrapper
specifier|final
name|FieldCacheImpl
name|wrapper
decl_stmt|;
DECL|field|readerCache
specifier|final
name|Map
argument_list|<
name|Object
argument_list|,
name|Map
argument_list|<
name|CacheKey
argument_list|,
name|Object
argument_list|>
argument_list|>
name|readerCache
init|=
operator|new
name|WeakHashMap
argument_list|<
name|Object
argument_list|,
name|Map
argument_list|<
name|CacheKey
argument_list|,
name|Object
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|createValue
specifier|protected
specifier|abstract
name|Object
name|createValue
parameter_list|(
name|AtomicReader
name|reader
parameter_list|,
name|CacheKey
name|key
parameter_list|,
name|boolean
name|setDocsWithField
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/** Remove this reader from the cache, if present. */
DECL|method|purge
specifier|public
name|void
name|purge
parameter_list|(
name|AtomicReader
name|r
parameter_list|)
block|{
name|Object
name|readerKey
init|=
name|r
operator|.
name|getCoreCacheKey
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|readerCache
init|)
block|{
name|readerCache
operator|.
name|remove
argument_list|(
name|readerKey
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Sets the key to the value for the provided reader;      *  if the key is already set then this doesn't change it. */
DECL|method|put
specifier|public
name|void
name|put
parameter_list|(
name|AtomicReader
name|reader
parameter_list|,
name|CacheKey
name|key
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
specifier|final
name|Object
name|readerKey
init|=
name|reader
operator|.
name|getCoreCacheKey
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|readerCache
init|)
block|{
name|Map
argument_list|<
name|CacheKey
argument_list|,
name|Object
argument_list|>
name|innerCache
init|=
name|readerCache
operator|.
name|get
argument_list|(
name|readerKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|innerCache
operator|==
literal|null
condition|)
block|{
comment|// First time this reader is using FieldCache
name|innerCache
operator|=
operator|new
name|HashMap
argument_list|<
name|CacheKey
argument_list|,
name|Object
argument_list|>
argument_list|()
expr_stmt|;
name|readerCache
operator|.
name|put
argument_list|(
name|readerKey
argument_list|,
name|innerCache
argument_list|)
expr_stmt|;
name|wrapper
operator|.
name|initReader
argument_list|(
name|reader
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|innerCache
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|==
literal|null
condition|)
block|{
name|innerCache
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Another thread beat us to it; leave the current
comment|// value
block|}
block|}
block|}
DECL|method|get
specifier|public
name|Object
name|get
parameter_list|(
name|AtomicReader
name|reader
parameter_list|,
name|CacheKey
name|key
parameter_list|,
name|boolean
name|setDocsWithField
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|CacheKey
argument_list|,
name|Object
argument_list|>
name|innerCache
decl_stmt|;
name|Object
name|value
decl_stmt|;
specifier|final
name|Object
name|readerKey
init|=
name|reader
operator|.
name|getCoreCacheKey
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|readerCache
init|)
block|{
name|innerCache
operator|=
name|readerCache
operator|.
name|get
argument_list|(
name|readerKey
argument_list|)
expr_stmt|;
if|if
condition|(
name|innerCache
operator|==
literal|null
condition|)
block|{
comment|// First time this reader is using FieldCache
name|innerCache
operator|=
operator|new
name|HashMap
argument_list|<
name|CacheKey
argument_list|,
name|Object
argument_list|>
argument_list|()
expr_stmt|;
name|readerCache
operator|.
name|put
argument_list|(
name|readerKey
argument_list|,
name|innerCache
argument_list|)
expr_stmt|;
name|wrapper
operator|.
name|initReader
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|value
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|value
operator|=
name|innerCache
operator|.
name|get
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|value
operator|=
operator|new
name|CreationPlaceholder
argument_list|()
expr_stmt|;
name|innerCache
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|value
operator|instanceof
name|CreationPlaceholder
condition|)
block|{
synchronized|synchronized
init|(
name|value
init|)
block|{
name|CreationPlaceholder
name|progress
init|=
operator|(
name|CreationPlaceholder
operator|)
name|value
decl_stmt|;
if|if
condition|(
name|progress
operator|.
name|value
operator|==
literal|null
condition|)
block|{
name|progress
operator|.
name|value
operator|=
name|createValue
argument_list|(
name|reader
argument_list|,
name|key
argument_list|,
name|setDocsWithField
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|readerCache
init|)
block|{
name|innerCache
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|progress
operator|.
name|value
argument_list|)
expr_stmt|;
block|}
comment|// Only check if key.custom (the parser) is
comment|// non-null; else, we check twice for a single
comment|// call to FieldCache.getXXX
if|if
condition|(
name|key
operator|.
name|custom
operator|!=
literal|null
operator|&&
name|wrapper
operator|!=
literal|null
condition|)
block|{
specifier|final
name|PrintStream
name|infoStream
init|=
name|wrapper
operator|.
name|getInfoStream
argument_list|()
decl_stmt|;
if|if
condition|(
name|infoStream
operator|!=
literal|null
condition|)
block|{
name|printNewInsanity
argument_list|(
name|infoStream
argument_list|,
name|progress
operator|.
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|progress
operator|.
name|value
return|;
block|}
block|}
return|return
name|value
return|;
block|}
DECL|method|printNewInsanity
specifier|private
name|void
name|printNewInsanity
parameter_list|(
name|PrintStream
name|infoStream
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
specifier|final
name|FieldCacheSanityChecker
operator|.
name|Insanity
index|[]
name|insanities
init|=
name|FieldCacheSanityChecker
operator|.
name|checkSanity
argument_list|(
name|wrapper
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|insanities
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|FieldCacheSanityChecker
operator|.
name|Insanity
name|insanity
init|=
name|insanities
index|[
name|i
index|]
decl_stmt|;
specifier|final
name|CacheEntry
index|[]
name|entries
init|=
name|insanity
operator|.
name|getCacheEntries
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|entries
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|entries
index|[
name|j
index|]
operator|.
name|getValue
argument_list|()
operator|==
name|value
condition|)
block|{
comment|// OK this insanity involves our entry
name|infoStream
operator|.
name|println
argument_list|(
literal|"WARNING: new FieldCache insanity created\nDetails: "
operator|+
name|insanity
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|infoStream
operator|.
name|println
argument_list|(
literal|"\nStack:\n"
argument_list|)
expr_stmt|;
operator|new
name|Throwable
argument_list|()
operator|.
name|printStackTrace
argument_list|(
name|infoStream
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
block|}
comment|/** Expert: Every composite-key in the internal cache is of this type. */
DECL|class|CacheKey
specifier|static
class|class
name|CacheKey
block|{
DECL|field|field
specifier|final
name|String
name|field
decl_stmt|;
comment|// which Field
DECL|field|custom
specifier|final
name|Object
name|custom
decl_stmt|;
comment|// which custom comparator or parser
comment|/** Creates one of these objects for a custom comparator/parser. */
DECL|method|CacheKey
name|CacheKey
parameter_list|(
name|String
name|field
parameter_list|,
name|Object
name|custom
parameter_list|)
block|{
name|this
operator|.
name|field
operator|=
name|field
expr_stmt|;
name|this
operator|.
name|custom
operator|=
name|custom
expr_stmt|;
block|}
comment|/** Two of these are equal iff they reference the same field and type. */
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|instanceof
name|CacheKey
condition|)
block|{
name|CacheKey
name|other
init|=
operator|(
name|CacheKey
operator|)
name|o
decl_stmt|;
if|if
condition|(
name|other
operator|.
name|field
operator|.
name|equals
argument_list|(
name|field
argument_list|)
condition|)
block|{
if|if
condition|(
name|other
operator|.
name|custom
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|custom
operator|==
literal|null
condition|)
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|other
operator|.
name|custom
operator|.
name|equals
argument_list|(
name|custom
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/** Composes a hashcode based on the field and type. */
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|field
operator|.
name|hashCode
argument_list|()
operator|^
operator|(
name|custom
operator|==
literal|null
condition|?
literal|0
else|:
name|custom
operator|.
name|hashCode
argument_list|()
operator|)
return|;
block|}
block|}
DECL|class|Uninvert
specifier|private
specifier|static
specifier|abstract
class|class
name|Uninvert
block|{
DECL|field|docsWithField
specifier|public
name|Bits
name|docsWithField
decl_stmt|;
DECL|method|uninvert
specifier|public
name|void
name|uninvert
parameter_list|(
name|AtomicReader
name|reader
parameter_list|,
name|String
name|field
parameter_list|,
name|boolean
name|setDocsWithField
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|int
name|maxDoc
init|=
name|reader
operator|.
name|maxDoc
argument_list|()
decl_stmt|;
name|Terms
name|terms
init|=
name|reader
operator|.
name|terms
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|terms
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|setDocsWithField
condition|)
block|{
specifier|final
name|int
name|termsDocCount
init|=
name|terms
operator|.
name|getDocCount
argument_list|()
decl_stmt|;
assert|assert
name|termsDocCount
operator|<=
name|maxDoc
assert|;
if|if
condition|(
name|termsDocCount
operator|==
name|maxDoc
condition|)
block|{
comment|// Fast case: all docs have this field:
name|docsWithField
operator|=
operator|new
name|Bits
operator|.
name|MatchAllBits
argument_list|(
name|maxDoc
argument_list|)
expr_stmt|;
name|setDocsWithField
operator|=
literal|false
expr_stmt|;
block|}
block|}
specifier|final
name|TermsEnum
name|termsEnum
init|=
name|terms
operator|.
name|iterator
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|DocsEnum
name|docs
init|=
literal|null
decl_stmt|;
name|FixedBitSet
name|docsWithField
init|=
literal|null
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
specifier|final
name|BytesRef
name|term
init|=
name|termsEnum
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|term
operator|==
literal|null
condition|)
block|{
break|break;
block|}
try|try
block|{
name|visitTerm
argument_list|(
name|term
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|StopFillCacheException
name|stop
parameter_list|)
block|{
break|break;
block|}
name|docs
operator|=
name|termsEnum
operator|.
name|docs
argument_list|(
literal|null
argument_list|,
name|docs
argument_list|,
name|DocsEnum
operator|.
name|FLAG_NONE
argument_list|)
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
specifier|final
name|int
name|docID
init|=
name|docs
operator|.
name|nextDoc
argument_list|()
decl_stmt|;
if|if
condition|(
name|docID
operator|==
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
condition|)
block|{
break|break;
block|}
name|visitDoc
argument_list|(
name|docID
argument_list|)
expr_stmt|;
if|if
condition|(
name|setDocsWithField
condition|)
block|{
if|if
condition|(
name|docsWithField
operator|==
literal|null
condition|)
block|{
comment|// Lazy init
name|this
operator|.
name|docsWithField
operator|=
name|docsWithField
operator|=
operator|new
name|FixedBitSet
argument_list|(
name|maxDoc
argument_list|)
expr_stmt|;
block|}
name|docsWithField
operator|.
name|set
argument_list|(
name|docID
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
DECL|method|visitTerm
specifier|protected
specifier|abstract
name|void
name|visitTerm
parameter_list|(
name|BytesRef
name|term
parameter_list|)
function_decl|;
DECL|method|visitDoc
specifier|protected
specifier|abstract
name|void
name|visitDoc
parameter_list|(
name|int
name|docID
parameter_list|)
function_decl|;
block|}
comment|// null Bits means no docs matched
DECL|method|setDocsWithField
name|void
name|setDocsWithField
parameter_list|(
name|AtomicReader
name|reader
parameter_list|,
name|String
name|field
parameter_list|,
name|Bits
name|docsWithField
parameter_list|)
block|{
specifier|final
name|int
name|maxDoc
init|=
name|reader
operator|.
name|maxDoc
argument_list|()
decl_stmt|;
specifier|final
name|Bits
name|bits
decl_stmt|;
if|if
condition|(
name|docsWithField
operator|==
literal|null
condition|)
block|{
name|bits
operator|=
operator|new
name|Bits
operator|.
name|MatchNoBits
argument_list|(
name|maxDoc
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|docsWithField
operator|instanceof
name|FixedBitSet
condition|)
block|{
specifier|final
name|int
name|numSet
init|=
operator|(
operator|(
name|FixedBitSet
operator|)
name|docsWithField
operator|)
operator|.
name|cardinality
argument_list|()
decl_stmt|;
if|if
condition|(
name|numSet
operator|>=
name|maxDoc
condition|)
block|{
comment|// The cardinality of the BitSet is maxDoc if all documents have a value.
assert|assert
name|numSet
operator|==
name|maxDoc
assert|;
name|bits
operator|=
operator|new
name|Bits
operator|.
name|MatchAllBits
argument_list|(
name|maxDoc
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|bits
operator|=
name|docsWithField
expr_stmt|;
block|}
block|}
else|else
block|{
name|bits
operator|=
name|docsWithField
expr_stmt|;
block|}
name|caches
operator|.
name|get
argument_list|(
name|DocsWithFieldCache
operator|.
name|class
argument_list|)
operator|.
name|put
argument_list|(
name|reader
argument_list|,
operator|new
name|CacheKey
argument_list|(
name|field
argument_list|,
literal|null
argument_list|)
argument_list|,
name|bits
argument_list|)
expr_stmt|;
block|}
comment|// inherit javadocs
DECL|method|getBytes
specifier|public
name|Bytes
name|getBytes
parameter_list|(
name|AtomicReader
name|reader
parameter_list|,
name|String
name|field
parameter_list|,
name|boolean
name|setDocsWithField
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getBytes
argument_list|(
name|reader
argument_list|,
name|field
argument_list|,
literal|null
argument_list|,
name|setDocsWithField
argument_list|)
return|;
block|}
comment|// inherit javadocs
DECL|method|getBytes
specifier|public
name|Bytes
name|getBytes
parameter_list|(
name|AtomicReader
name|reader
parameter_list|,
name|String
name|field
parameter_list|,
name|ByteParser
name|parser
parameter_list|,
name|boolean
name|setDocsWithField
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|NumericDocValues
name|valuesIn
init|=
name|reader
operator|.
name|getNumericDocValues
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|valuesIn
operator|!=
literal|null
condition|)
block|{
comment|// Not cached here by FieldCacheImpl (cached instead
comment|// per-thread by SegmentReader):
return|return
operator|new
name|Bytes
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|byte
name|get
parameter_list|(
name|int
name|docID
parameter_list|)
block|{
return|return
operator|(
name|byte
operator|)
name|valuesIn
operator|.
name|get
argument_list|(
name|docID
argument_list|)
return|;
block|}
block|}
return|;
block|}
else|else
block|{
return|return
operator|(
name|Bytes
operator|)
name|caches
operator|.
name|get
argument_list|(
name|Byte
operator|.
name|TYPE
argument_list|)
operator|.
name|get
argument_list|(
name|reader
argument_list|,
operator|new
name|CacheKey
argument_list|(
name|field
argument_list|,
name|parser
argument_list|)
argument_list|,
name|setDocsWithField
argument_list|)
return|;
block|}
block|}
comment|// nocommit move up?
DECL|class|BytesFromArray
specifier|static
class|class
name|BytesFromArray
extends|extends
name|Bytes
block|{
DECL|field|values
specifier|private
specifier|final
name|byte
index|[]
name|values
decl_stmt|;
DECL|method|BytesFromArray
specifier|public
name|BytesFromArray
parameter_list|(
name|byte
index|[]
name|values
parameter_list|)
block|{
name|this
operator|.
name|values
operator|=
name|values
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|get
specifier|public
name|byte
name|get
parameter_list|(
name|int
name|docID
parameter_list|)
block|{
return|return
name|values
index|[
name|docID
index|]
return|;
block|}
block|}
DECL|class|ByteCache
specifier|static
specifier|final
class|class
name|ByteCache
extends|extends
name|Cache
block|{
DECL|method|ByteCache
name|ByteCache
parameter_list|(
name|FieldCacheImpl
name|wrapper
parameter_list|)
block|{
name|super
argument_list|(
name|wrapper
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createValue
specifier|protected
name|Object
name|createValue
parameter_list|(
name|AtomicReader
name|reader
parameter_list|,
name|CacheKey
name|key
parameter_list|,
name|boolean
name|setDocsWithField
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|maxDoc
init|=
name|reader
operator|.
name|maxDoc
argument_list|()
decl_stmt|;
specifier|final
name|byte
index|[]
name|values
decl_stmt|;
specifier|final
name|ByteParser
name|parser
init|=
operator|(
name|ByteParser
operator|)
name|key
operator|.
name|custom
decl_stmt|;
if|if
condition|(
name|parser
operator|==
literal|null
condition|)
block|{
comment|// Confusing: must delegate to wrapper (vs simply
comment|// setting parser = DEFAULT_SHORT_PARSER) so cache
comment|// key includes DEFAULT_SHORT_PARSER:
return|return
name|wrapper
operator|.
name|getBytes
argument_list|(
name|reader
argument_list|,
name|key
operator|.
name|field
argument_list|,
name|DEFAULT_BYTE_PARSER
argument_list|,
name|setDocsWithField
argument_list|)
return|;
block|}
name|values
operator|=
operator|new
name|byte
index|[
name|maxDoc
index|]
expr_stmt|;
name|Uninvert
name|u
init|=
operator|new
name|Uninvert
argument_list|()
block|{
specifier|private
name|byte
name|currentValue
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|visitTerm
parameter_list|(
name|BytesRef
name|term
parameter_list|)
block|{
name|currentValue
operator|=
name|parser
operator|.
name|parseByte
argument_list|(
name|term
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|visitDoc
parameter_list|(
name|int
name|docID
parameter_list|)
block|{
name|values
index|[
name|docID
index|]
operator|=
name|currentValue
expr_stmt|;
block|}
block|}
decl_stmt|;
name|u
operator|.
name|uninvert
argument_list|(
name|reader
argument_list|,
name|key
operator|.
name|field
argument_list|,
name|setDocsWithField
argument_list|)
expr_stmt|;
if|if
condition|(
name|setDocsWithField
condition|)
block|{
name|wrapper
operator|.
name|setDocsWithField
argument_list|(
name|reader
argument_list|,
name|key
operator|.
name|field
argument_list|,
name|u
operator|.
name|docsWithField
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|BytesFromArray
argument_list|(
name|values
argument_list|)
return|;
block|}
block|}
comment|// inherit javadocs
DECL|method|getShorts
specifier|public
name|Shorts
name|getShorts
parameter_list|(
name|AtomicReader
name|reader
parameter_list|,
name|String
name|field
parameter_list|,
name|boolean
name|setDocsWithField
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getShorts
argument_list|(
name|reader
argument_list|,
name|field
argument_list|,
literal|null
argument_list|,
name|setDocsWithField
argument_list|)
return|;
block|}
comment|// inherit javadocs
DECL|method|getShorts
specifier|public
name|Shorts
name|getShorts
parameter_list|(
name|AtomicReader
name|reader
parameter_list|,
name|String
name|field
parameter_list|,
name|ShortParser
name|parser
parameter_list|,
name|boolean
name|setDocsWithField
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|NumericDocValues
name|valuesIn
init|=
name|reader
operator|.
name|getNumericDocValues
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|valuesIn
operator|!=
literal|null
condition|)
block|{
comment|// Not cached here by FieldCacheImpl (cached instead
comment|// per-thread by SegmentReader):
return|return
operator|new
name|Shorts
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|short
name|get
parameter_list|(
name|int
name|docID
parameter_list|)
block|{
return|return
operator|(
name|short
operator|)
name|valuesIn
operator|.
name|get
argument_list|(
name|docID
argument_list|)
return|;
block|}
block|}
return|;
block|}
else|else
block|{
return|return
operator|(
name|Shorts
operator|)
name|caches
operator|.
name|get
argument_list|(
name|Short
operator|.
name|TYPE
argument_list|)
operator|.
name|get
argument_list|(
name|reader
argument_list|,
operator|new
name|CacheKey
argument_list|(
name|field
argument_list|,
name|parser
argument_list|)
argument_list|,
name|setDocsWithField
argument_list|)
return|;
block|}
block|}
comment|// nocommit move up?
DECL|class|ShortsFromArray
specifier|static
class|class
name|ShortsFromArray
extends|extends
name|Shorts
block|{
DECL|field|values
specifier|private
specifier|final
name|short
index|[]
name|values
decl_stmt|;
DECL|method|ShortsFromArray
specifier|public
name|ShortsFromArray
parameter_list|(
name|short
index|[]
name|values
parameter_list|)
block|{
name|this
operator|.
name|values
operator|=
name|values
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|get
specifier|public
name|short
name|get
parameter_list|(
name|int
name|docID
parameter_list|)
block|{
return|return
name|values
index|[
name|docID
index|]
return|;
block|}
block|}
DECL|class|ShortCache
specifier|static
specifier|final
class|class
name|ShortCache
extends|extends
name|Cache
block|{
DECL|method|ShortCache
name|ShortCache
parameter_list|(
name|FieldCacheImpl
name|wrapper
parameter_list|)
block|{
name|super
argument_list|(
name|wrapper
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createValue
specifier|protected
name|Object
name|createValue
parameter_list|(
name|AtomicReader
name|reader
parameter_list|,
name|CacheKey
name|key
parameter_list|,
name|boolean
name|setDocsWithField
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|maxDoc
init|=
name|reader
operator|.
name|maxDoc
argument_list|()
decl_stmt|;
specifier|final
name|short
index|[]
name|values
decl_stmt|;
specifier|final
name|ShortParser
name|parser
init|=
operator|(
name|ShortParser
operator|)
name|key
operator|.
name|custom
decl_stmt|;
if|if
condition|(
name|parser
operator|==
literal|null
condition|)
block|{
comment|// Confusing: must delegate to wrapper (vs simply
comment|// setting parser = DEFAULT_SHORT_PARSER) so cache
comment|// key includes DEFAULT_SHORT_PARSER:
return|return
name|wrapper
operator|.
name|getShorts
argument_list|(
name|reader
argument_list|,
name|key
operator|.
name|field
argument_list|,
name|DEFAULT_SHORT_PARSER
argument_list|,
name|setDocsWithField
argument_list|)
return|;
block|}
name|values
operator|=
operator|new
name|short
index|[
name|maxDoc
index|]
expr_stmt|;
name|Uninvert
name|u
init|=
operator|new
name|Uninvert
argument_list|()
block|{
specifier|private
name|short
name|currentValue
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|visitTerm
parameter_list|(
name|BytesRef
name|term
parameter_list|)
block|{
name|currentValue
operator|=
name|parser
operator|.
name|parseShort
argument_list|(
name|term
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|visitDoc
parameter_list|(
name|int
name|docID
parameter_list|)
block|{
name|values
index|[
name|docID
index|]
operator|=
name|currentValue
expr_stmt|;
block|}
block|}
decl_stmt|;
name|u
operator|.
name|uninvert
argument_list|(
name|reader
argument_list|,
name|key
operator|.
name|field
argument_list|,
name|setDocsWithField
argument_list|)
expr_stmt|;
if|if
condition|(
name|setDocsWithField
condition|)
block|{
name|wrapper
operator|.
name|setDocsWithField
argument_list|(
name|reader
argument_list|,
name|key
operator|.
name|field
argument_list|,
name|u
operator|.
name|docsWithField
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|ShortsFromArray
argument_list|(
name|values
argument_list|)
return|;
block|}
block|}
comment|// inherit javadocs
DECL|method|getInts
specifier|public
name|Ints
name|getInts
parameter_list|(
name|AtomicReader
name|reader
parameter_list|,
name|String
name|field
parameter_list|,
name|boolean
name|setDocsWithField
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getInts
argument_list|(
name|reader
argument_list|,
name|field
argument_list|,
literal|null
argument_list|,
name|setDocsWithField
argument_list|)
return|;
block|}
comment|// inherit javadocs
DECL|method|getInts
specifier|public
name|Ints
name|getInts
parameter_list|(
name|AtomicReader
name|reader
parameter_list|,
name|String
name|field
parameter_list|,
name|IntParser
name|parser
parameter_list|,
name|boolean
name|setDocsWithField
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|NumericDocValues
name|valuesIn
init|=
name|reader
operator|.
name|getNumericDocValues
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|valuesIn
operator|!=
literal|null
condition|)
block|{
comment|// Not cached here by FieldCacheImpl (cached instead
comment|// per-thread by SegmentReader):
return|return
operator|new
name|Ints
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|get
parameter_list|(
name|int
name|docID
parameter_list|)
block|{
return|return
operator|(
name|int
operator|)
name|valuesIn
operator|.
name|get
argument_list|(
name|docID
argument_list|)
return|;
block|}
block|}
return|;
block|}
else|else
block|{
return|return
operator|(
name|Ints
operator|)
name|caches
operator|.
name|get
argument_list|(
name|Integer
operator|.
name|TYPE
argument_list|)
operator|.
name|get
argument_list|(
name|reader
argument_list|,
operator|new
name|CacheKey
argument_list|(
name|field
argument_list|,
name|parser
argument_list|)
argument_list|,
name|setDocsWithField
argument_list|)
return|;
block|}
block|}
comment|// nocommit move up?
DECL|class|IntsFromArray
specifier|static
class|class
name|IntsFromArray
extends|extends
name|Ints
block|{
DECL|field|values
specifier|private
specifier|final
name|int
index|[]
name|values
decl_stmt|;
DECL|method|IntsFromArray
specifier|public
name|IntsFromArray
parameter_list|(
name|int
index|[]
name|values
parameter_list|)
block|{
name|this
operator|.
name|values
operator|=
name|values
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|get
specifier|public
name|int
name|get
parameter_list|(
name|int
name|docID
parameter_list|)
block|{
return|return
name|values
index|[
name|docID
index|]
return|;
block|}
block|}
DECL|class|IntCache
specifier|static
specifier|final
class|class
name|IntCache
extends|extends
name|Cache
block|{
DECL|method|IntCache
name|IntCache
parameter_list|(
name|FieldCacheImpl
name|wrapper
parameter_list|)
block|{
name|super
argument_list|(
name|wrapper
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createValue
specifier|protected
name|Object
name|createValue
parameter_list|(
specifier|final
name|AtomicReader
name|reader
parameter_list|,
name|CacheKey
name|key
parameter_list|,
name|boolean
name|setDocsWithField
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|int
index|[]
name|values
decl_stmt|;
specifier|final
name|IntParser
name|parser
init|=
operator|(
name|IntParser
operator|)
name|key
operator|.
name|custom
decl_stmt|;
if|if
condition|(
name|parser
operator|==
literal|null
condition|)
block|{
comment|// Confusing: must delegate to wrapper (vs simply
comment|// setting parser =
comment|// DEFAULT_INT_PARSER/NUMERIC_UTILS_INT_PARSER) so
comment|// cache key includes
comment|// DEFAULT_INT_PARSER/NUMERIC_UTILS_INT_PARSER:
try|try
block|{
return|return
name|wrapper
operator|.
name|getInts
argument_list|(
name|reader
argument_list|,
name|key
operator|.
name|field
argument_list|,
name|DEFAULT_INT_PARSER
argument_list|,
name|setDocsWithField
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|ne
parameter_list|)
block|{
return|return
name|wrapper
operator|.
name|getInts
argument_list|(
name|reader
argument_list|,
name|key
operator|.
name|field
argument_list|,
name|NUMERIC_UTILS_INT_PARSER
argument_list|,
name|setDocsWithField
argument_list|)
return|;
block|}
block|}
comment|// nocommit how to avoid double alloc in numeric field
comment|// case ...
name|values
operator|=
operator|new
name|int
index|[
name|reader
operator|.
name|maxDoc
argument_list|()
index|]
expr_stmt|;
name|Uninvert
name|u
init|=
operator|new
name|Uninvert
argument_list|()
block|{
specifier|private
name|int
name|currentValue
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|visitTerm
parameter_list|(
name|BytesRef
name|term
parameter_list|)
block|{
name|currentValue
operator|=
name|parser
operator|.
name|parseInt
argument_list|(
name|term
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|visitDoc
parameter_list|(
name|int
name|docID
parameter_list|)
block|{
name|values
index|[
name|docID
index|]
operator|=
name|currentValue
expr_stmt|;
block|}
block|}
decl_stmt|;
name|u
operator|.
name|uninvert
argument_list|(
name|reader
argument_list|,
name|key
operator|.
name|field
argument_list|,
name|setDocsWithField
argument_list|)
expr_stmt|;
if|if
condition|(
name|setDocsWithField
condition|)
block|{
name|wrapper
operator|.
name|setDocsWithField
argument_list|(
name|reader
argument_list|,
name|key
operator|.
name|field
argument_list|,
name|u
operator|.
name|docsWithField
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|IntsFromArray
argument_list|(
name|values
argument_list|)
return|;
block|}
block|}
comment|// nocommit must advertise that this does NOT work if you
comment|// index only doc values for the field ... it will say no
comment|// doc exists...
DECL|method|getDocsWithField
specifier|public
name|Bits
name|getDocsWithField
parameter_list|(
name|AtomicReader
name|reader
parameter_list|,
name|String
name|field
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|(
name|Bits
operator|)
name|caches
operator|.
name|get
argument_list|(
name|DocsWithFieldCache
operator|.
name|class
argument_list|)
operator|.
name|get
argument_list|(
name|reader
argument_list|,
operator|new
name|CacheKey
argument_list|(
name|field
argument_list|,
literal|null
argument_list|)
argument_list|,
literal|false
argument_list|)
return|;
block|}
DECL|class|DocsWithFieldCache
specifier|static
specifier|final
class|class
name|DocsWithFieldCache
extends|extends
name|Cache
block|{
DECL|method|DocsWithFieldCache
name|DocsWithFieldCache
parameter_list|(
name|FieldCacheImpl
name|wrapper
parameter_list|)
block|{
name|super
argument_list|(
name|wrapper
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createValue
specifier|protected
name|Object
name|createValue
parameter_list|(
name|AtomicReader
name|reader
parameter_list|,
name|CacheKey
name|key
parameter_list|,
name|boolean
name|setDocsWithField
comment|/* ignored */
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|String
name|field
init|=
name|key
operator|.
name|field
decl_stmt|;
specifier|final
name|FieldInfo
name|fieldInfo
init|=
name|reader
operator|.
name|getFieldInfos
argument_list|()
operator|.
name|fieldInfo
argument_list|(
name|field
argument_list|)
decl_stmt|;
specifier|final
name|int
name|maxDoc
init|=
name|reader
operator|.
name|maxDoc
argument_list|()
decl_stmt|;
if|if
condition|(
name|fieldInfo
operator|==
literal|null
condition|)
block|{
comment|// field does not exist or has no value
return|return
operator|new
name|Bits
operator|.
name|MatchNoBits
argument_list|(
name|maxDoc
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|fieldInfo
operator|.
name|hasDocValues
argument_list|()
condition|)
block|{
comment|// doc values are dense
return|return
operator|new
name|Bits
operator|.
name|MatchAllBits
argument_list|(
name|maxDoc
argument_list|)
return|;
block|}
comment|// Visit all docs that have terms for this field
name|FixedBitSet
name|res
init|=
literal|null
decl_stmt|;
name|Terms
name|terms
init|=
name|reader
operator|.
name|terms
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|terms
operator|!=
literal|null
condition|)
block|{
specifier|final
name|int
name|termsDocCount
init|=
name|terms
operator|.
name|getDocCount
argument_list|()
decl_stmt|;
assert|assert
name|termsDocCount
operator|<=
name|maxDoc
assert|;
if|if
condition|(
name|termsDocCount
operator|==
name|maxDoc
condition|)
block|{
comment|// Fast case: all docs have this field:
return|return
operator|new
name|Bits
operator|.
name|MatchAllBits
argument_list|(
name|maxDoc
argument_list|)
return|;
block|}
specifier|final
name|TermsEnum
name|termsEnum
init|=
name|terms
operator|.
name|iterator
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|DocsEnum
name|docs
init|=
literal|null
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
specifier|final
name|BytesRef
name|term
init|=
name|termsEnum
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|term
operator|==
literal|null
condition|)
block|{
break|break;
block|}
if|if
condition|(
name|res
operator|==
literal|null
condition|)
block|{
comment|// lazy init
name|res
operator|=
operator|new
name|FixedBitSet
argument_list|(
name|maxDoc
argument_list|)
expr_stmt|;
block|}
name|docs
operator|=
name|termsEnum
operator|.
name|docs
argument_list|(
literal|null
argument_list|,
name|docs
argument_list|,
name|DocsEnum
operator|.
name|FLAG_NONE
argument_list|)
expr_stmt|;
comment|// TODO: use bulk API
while|while
condition|(
literal|true
condition|)
block|{
specifier|final
name|int
name|docID
init|=
name|docs
operator|.
name|nextDoc
argument_list|()
decl_stmt|;
if|if
condition|(
name|docID
operator|==
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
condition|)
block|{
break|break;
block|}
name|res
operator|.
name|set
argument_list|(
name|docID
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|res
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|Bits
operator|.
name|MatchNoBits
argument_list|(
name|maxDoc
argument_list|)
return|;
block|}
specifier|final
name|int
name|numSet
init|=
name|res
operator|.
name|cardinality
argument_list|()
decl_stmt|;
if|if
condition|(
name|numSet
operator|>=
name|maxDoc
condition|)
block|{
comment|// The cardinality of the BitSet is maxDoc if all documents have a value.
assert|assert
name|numSet
operator|==
name|maxDoc
assert|;
return|return
operator|new
name|Bits
operator|.
name|MatchAllBits
argument_list|(
name|maxDoc
argument_list|)
return|;
block|}
return|return
name|res
return|;
block|}
block|}
comment|// inherit javadocs
DECL|method|getFloats
specifier|public
name|Floats
name|getFloats
parameter_list|(
name|AtomicReader
name|reader
parameter_list|,
name|String
name|field
parameter_list|,
name|boolean
name|setDocsWithField
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getFloats
argument_list|(
name|reader
argument_list|,
name|field
argument_list|,
literal|null
argument_list|,
name|setDocsWithField
argument_list|)
return|;
block|}
comment|// inherit javadocs
DECL|method|getFloats
specifier|public
name|Floats
name|getFloats
parameter_list|(
name|AtomicReader
name|reader
parameter_list|,
name|String
name|field
parameter_list|,
name|FloatParser
name|parser
parameter_list|,
name|boolean
name|setDocsWithField
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|NumericDocValues
name|valuesIn
init|=
name|reader
operator|.
name|getNumericDocValues
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|valuesIn
operator|!=
literal|null
condition|)
block|{
comment|// Not cached here by FieldCacheImpl (cached instead
comment|// per-thread by SegmentReader):
return|return
operator|new
name|Floats
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|float
name|get
parameter_list|(
name|int
name|docID
parameter_list|)
block|{
return|return
name|Float
operator|.
name|intBitsToFloat
argument_list|(
operator|(
name|int
operator|)
name|valuesIn
operator|.
name|get
argument_list|(
name|docID
argument_list|)
argument_list|)
return|;
block|}
block|}
return|;
block|}
else|else
block|{
return|return
operator|(
name|Floats
operator|)
name|caches
operator|.
name|get
argument_list|(
name|Float
operator|.
name|TYPE
argument_list|)
operator|.
name|get
argument_list|(
name|reader
argument_list|,
operator|new
name|CacheKey
argument_list|(
name|field
argument_list|,
name|parser
argument_list|)
argument_list|,
name|setDocsWithField
argument_list|)
return|;
block|}
block|}
comment|// nocommit move up?
DECL|class|FloatsFromArray
specifier|static
class|class
name|FloatsFromArray
extends|extends
name|Floats
block|{
DECL|field|values
specifier|private
specifier|final
name|float
index|[]
name|values
decl_stmt|;
DECL|method|FloatsFromArray
specifier|public
name|FloatsFromArray
parameter_list|(
name|float
index|[]
name|values
parameter_list|)
block|{
name|this
operator|.
name|values
operator|=
name|values
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|get
specifier|public
name|float
name|get
parameter_list|(
name|int
name|docID
parameter_list|)
block|{
return|return
name|values
index|[
name|docID
index|]
return|;
block|}
block|}
DECL|class|FloatCache
specifier|static
specifier|final
class|class
name|FloatCache
extends|extends
name|Cache
block|{
DECL|method|FloatCache
name|FloatCache
parameter_list|(
name|FieldCacheImpl
name|wrapper
parameter_list|)
block|{
name|super
argument_list|(
name|wrapper
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createValue
specifier|protected
name|Object
name|createValue
parameter_list|(
name|AtomicReader
name|reader
parameter_list|,
name|CacheKey
name|key
parameter_list|,
name|boolean
name|setDocsWithField
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|float
index|[]
name|values
decl_stmt|;
specifier|final
name|FloatParser
name|parser
init|=
operator|(
name|FloatParser
operator|)
name|key
operator|.
name|custom
decl_stmt|;
if|if
condition|(
name|parser
operator|==
literal|null
condition|)
block|{
comment|// Confusing: must delegate to wrapper (vs simply
comment|// setting parser =
comment|// DEFAULT_FLOAT_PARSER/NUMERIC_UTILS_FLOAT_PARSER) so
comment|// cache key includes
comment|// DEFAULT_FLOAT_PARSER/NUMERIC_UTILS_FLOAT_PARSER:
try|try
block|{
return|return
name|wrapper
operator|.
name|getFloats
argument_list|(
name|reader
argument_list|,
name|key
operator|.
name|field
argument_list|,
name|DEFAULT_FLOAT_PARSER
argument_list|,
name|setDocsWithField
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|ne
parameter_list|)
block|{
return|return
name|wrapper
operator|.
name|getFloats
argument_list|(
name|reader
argument_list|,
name|key
operator|.
name|field
argument_list|,
name|NUMERIC_UTILS_FLOAT_PARSER
argument_list|,
name|setDocsWithField
argument_list|)
return|;
block|}
block|}
comment|// nocommit how to avoid double alloc in numeric field
comment|// case ...
name|values
operator|=
operator|new
name|float
index|[
name|reader
operator|.
name|maxDoc
argument_list|()
index|]
expr_stmt|;
name|Uninvert
name|u
init|=
operator|new
name|Uninvert
argument_list|()
block|{
specifier|private
name|float
name|currentValue
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|visitTerm
parameter_list|(
name|BytesRef
name|term
parameter_list|)
block|{
name|currentValue
operator|=
name|parser
operator|.
name|parseFloat
argument_list|(
name|term
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|visitDoc
parameter_list|(
name|int
name|docID
parameter_list|)
block|{
name|values
index|[
name|docID
index|]
operator|=
name|currentValue
expr_stmt|;
block|}
block|}
decl_stmt|;
name|u
operator|.
name|uninvert
argument_list|(
name|reader
argument_list|,
name|key
operator|.
name|field
argument_list|,
name|setDocsWithField
argument_list|)
expr_stmt|;
if|if
condition|(
name|setDocsWithField
condition|)
block|{
name|wrapper
operator|.
name|setDocsWithField
argument_list|(
name|reader
argument_list|,
name|key
operator|.
name|field
argument_list|,
name|u
operator|.
name|docsWithField
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|FloatsFromArray
argument_list|(
name|values
argument_list|)
return|;
block|}
block|}
comment|// inherit javadocs
DECL|method|getLongs
specifier|public
name|Longs
name|getLongs
parameter_list|(
name|AtomicReader
name|reader
parameter_list|,
name|String
name|field
parameter_list|,
name|boolean
name|setDocsWithField
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getLongs
argument_list|(
name|reader
argument_list|,
name|field
argument_list|,
literal|null
argument_list|,
name|setDocsWithField
argument_list|)
return|;
block|}
comment|// inherit javadocs
DECL|method|getLongs
specifier|public
name|Longs
name|getLongs
parameter_list|(
name|AtomicReader
name|reader
parameter_list|,
name|String
name|field
parameter_list|,
name|FieldCache
operator|.
name|LongParser
name|parser
parameter_list|,
name|boolean
name|setDocsWithField
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|NumericDocValues
name|valuesIn
init|=
name|reader
operator|.
name|getNumericDocValues
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|valuesIn
operator|!=
literal|null
condition|)
block|{
comment|// Not cached here by FieldCacheImpl (cached instead
comment|// per-thread by SegmentReader):
return|return
operator|new
name|Longs
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|long
name|get
parameter_list|(
name|int
name|docID
parameter_list|)
block|{
return|return
name|valuesIn
operator|.
name|get
argument_list|(
name|docID
argument_list|)
return|;
block|}
block|}
return|;
block|}
else|else
block|{
return|return
operator|(
name|Longs
operator|)
name|caches
operator|.
name|get
argument_list|(
name|Long
operator|.
name|TYPE
argument_list|)
operator|.
name|get
argument_list|(
name|reader
argument_list|,
operator|new
name|CacheKey
argument_list|(
name|field
argument_list|,
name|parser
argument_list|)
argument_list|,
name|setDocsWithField
argument_list|)
return|;
block|}
block|}
comment|// nocommit move up?
DECL|class|LongsFromArray
specifier|static
class|class
name|LongsFromArray
extends|extends
name|Longs
block|{
DECL|field|values
specifier|private
specifier|final
name|long
index|[]
name|values
decl_stmt|;
DECL|method|LongsFromArray
specifier|public
name|LongsFromArray
parameter_list|(
name|long
index|[]
name|values
parameter_list|)
block|{
name|this
operator|.
name|values
operator|=
name|values
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|get
specifier|public
name|long
name|get
parameter_list|(
name|int
name|docID
parameter_list|)
block|{
return|return
name|values
index|[
name|docID
index|]
return|;
block|}
block|}
DECL|class|LongCache
specifier|static
specifier|final
class|class
name|LongCache
extends|extends
name|Cache
block|{
DECL|method|LongCache
name|LongCache
parameter_list|(
name|FieldCacheImpl
name|wrapper
parameter_list|)
block|{
name|super
argument_list|(
name|wrapper
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createValue
specifier|protected
name|Object
name|createValue
parameter_list|(
name|AtomicReader
name|reader
parameter_list|,
name|CacheKey
name|key
parameter_list|,
name|boolean
name|setDocsWithField
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|long
index|[]
name|values
decl_stmt|;
specifier|final
name|LongParser
name|parser
init|=
operator|(
name|LongParser
operator|)
name|key
operator|.
name|custom
decl_stmt|;
if|if
condition|(
name|parser
operator|==
literal|null
condition|)
block|{
comment|// Confusing: must delegate to wrapper (vs simply
comment|// setting parser =
comment|// DEFAULT_LONG_PARSER/NUMERIC_UTILS_LONG_PARSER) so
comment|// cache key includes
comment|// DEFAULT_LONG_PARSER/NUMERIC_UTILS_LONG_PARSER:
try|try
block|{
return|return
name|wrapper
operator|.
name|getLongs
argument_list|(
name|reader
argument_list|,
name|key
operator|.
name|field
argument_list|,
name|DEFAULT_LONG_PARSER
argument_list|,
name|setDocsWithField
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|ne
parameter_list|)
block|{
return|return
name|wrapper
operator|.
name|getLongs
argument_list|(
name|reader
argument_list|,
name|key
operator|.
name|field
argument_list|,
name|NUMERIC_UTILS_LONG_PARSER
argument_list|,
name|setDocsWithField
argument_list|)
return|;
block|}
block|}
comment|// nocommit how to avoid double alloc in numeric field
comment|// case ...
name|values
operator|=
operator|new
name|long
index|[
name|reader
operator|.
name|maxDoc
argument_list|()
index|]
expr_stmt|;
name|Uninvert
name|u
init|=
operator|new
name|Uninvert
argument_list|()
block|{
specifier|private
name|long
name|currentValue
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|visitTerm
parameter_list|(
name|BytesRef
name|term
parameter_list|)
block|{
name|currentValue
operator|=
name|parser
operator|.
name|parseLong
argument_list|(
name|term
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|visitDoc
parameter_list|(
name|int
name|docID
parameter_list|)
block|{
name|values
index|[
name|docID
index|]
operator|=
name|currentValue
expr_stmt|;
block|}
block|}
decl_stmt|;
name|u
operator|.
name|uninvert
argument_list|(
name|reader
argument_list|,
name|key
operator|.
name|field
argument_list|,
name|setDocsWithField
argument_list|)
expr_stmt|;
if|if
condition|(
name|setDocsWithField
condition|)
block|{
name|wrapper
operator|.
name|setDocsWithField
argument_list|(
name|reader
argument_list|,
name|key
operator|.
name|field
argument_list|,
name|u
operator|.
name|docsWithField
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|LongsFromArray
argument_list|(
name|values
argument_list|)
return|;
block|}
block|}
comment|// inherit javadocs
DECL|method|getDoubles
specifier|public
name|Doubles
name|getDoubles
parameter_list|(
name|AtomicReader
name|reader
parameter_list|,
name|String
name|field
parameter_list|,
name|boolean
name|setDocsWithField
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getDoubles
argument_list|(
name|reader
argument_list|,
name|field
argument_list|,
literal|null
argument_list|,
name|setDocsWithField
argument_list|)
return|;
block|}
comment|// inherit javadocs
DECL|method|getDoubles
specifier|public
name|Doubles
name|getDoubles
parameter_list|(
name|AtomicReader
name|reader
parameter_list|,
name|String
name|field
parameter_list|,
name|FieldCache
operator|.
name|DoubleParser
name|parser
parameter_list|,
name|boolean
name|setDocsWithField
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|NumericDocValues
name|valuesIn
init|=
name|reader
operator|.
name|getNumericDocValues
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|valuesIn
operator|!=
literal|null
condition|)
block|{
comment|// Not cached here by FieldCacheImpl (cached instead
comment|// per-thread by SegmentReader):
return|return
operator|new
name|Doubles
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|double
name|get
parameter_list|(
name|int
name|docID
parameter_list|)
block|{
return|return
name|Double
operator|.
name|longBitsToDouble
argument_list|(
name|valuesIn
operator|.
name|get
argument_list|(
name|docID
argument_list|)
argument_list|)
return|;
block|}
block|}
return|;
block|}
else|else
block|{
return|return
operator|(
name|Doubles
operator|)
name|caches
operator|.
name|get
argument_list|(
name|Double
operator|.
name|TYPE
argument_list|)
operator|.
name|get
argument_list|(
name|reader
argument_list|,
operator|new
name|CacheKey
argument_list|(
name|field
argument_list|,
name|parser
argument_list|)
argument_list|,
name|setDocsWithField
argument_list|)
return|;
block|}
block|}
comment|// nocommit move up?
DECL|class|DoublesFromArray
specifier|static
class|class
name|DoublesFromArray
extends|extends
name|Doubles
block|{
DECL|field|values
specifier|private
specifier|final
name|double
index|[]
name|values
decl_stmt|;
DECL|method|DoublesFromArray
specifier|public
name|DoublesFromArray
parameter_list|(
name|double
index|[]
name|values
parameter_list|)
block|{
name|this
operator|.
name|values
operator|=
name|values
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|get
specifier|public
name|double
name|get
parameter_list|(
name|int
name|docID
parameter_list|)
block|{
return|return
name|values
index|[
name|docID
index|]
return|;
block|}
block|}
DECL|class|DoubleCache
specifier|static
specifier|final
class|class
name|DoubleCache
extends|extends
name|Cache
block|{
DECL|method|DoubleCache
name|DoubleCache
parameter_list|(
name|FieldCacheImpl
name|wrapper
parameter_list|)
block|{
name|super
argument_list|(
name|wrapper
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createValue
specifier|protected
name|Object
name|createValue
parameter_list|(
name|AtomicReader
name|reader
parameter_list|,
name|CacheKey
name|key
parameter_list|,
name|boolean
name|setDocsWithField
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|double
index|[]
name|values
decl_stmt|;
specifier|final
name|DoubleParser
name|parser
init|=
operator|(
name|DoubleParser
operator|)
name|key
operator|.
name|custom
decl_stmt|;
if|if
condition|(
name|parser
operator|==
literal|null
condition|)
block|{
comment|// Confusing: must delegate to wrapper (vs simply
comment|// setting parser =
comment|// DEFAULT_DOUBLE_PARSER/NUMERIC_UTILS_DOUBLE_PARSER) so
comment|// cache key includes
comment|// DEFAULT_DOUBLE_PARSER/NUMERIC_UTILS_DOUBLE_PARSER:
try|try
block|{
return|return
name|wrapper
operator|.
name|getDoubles
argument_list|(
name|reader
argument_list|,
name|key
operator|.
name|field
argument_list|,
name|DEFAULT_DOUBLE_PARSER
argument_list|,
name|setDocsWithField
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|ne
parameter_list|)
block|{
return|return
name|wrapper
operator|.
name|getDoubles
argument_list|(
name|reader
argument_list|,
name|key
operator|.
name|field
argument_list|,
name|NUMERIC_UTILS_DOUBLE_PARSER
argument_list|,
name|setDocsWithField
argument_list|)
return|;
block|}
block|}
comment|// nocommit how to avoid double alloc in numeric field
comment|// case ...
name|values
operator|=
operator|new
name|double
index|[
name|reader
operator|.
name|maxDoc
argument_list|()
index|]
expr_stmt|;
name|Uninvert
name|u
init|=
operator|new
name|Uninvert
argument_list|()
block|{
specifier|private
name|double
name|currentValue
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|visitTerm
parameter_list|(
name|BytesRef
name|term
parameter_list|)
block|{
name|currentValue
operator|=
name|parser
operator|.
name|parseDouble
argument_list|(
name|term
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|visitDoc
parameter_list|(
name|int
name|docID
parameter_list|)
block|{
name|values
index|[
name|docID
index|]
operator|=
name|currentValue
expr_stmt|;
block|}
block|}
decl_stmt|;
name|u
operator|.
name|uninvert
argument_list|(
name|reader
argument_list|,
name|key
operator|.
name|field
argument_list|,
name|setDocsWithField
argument_list|)
expr_stmt|;
if|if
condition|(
name|setDocsWithField
condition|)
block|{
name|wrapper
operator|.
name|setDocsWithField
argument_list|(
name|reader
argument_list|,
name|key
operator|.
name|field
argument_list|,
name|u
operator|.
name|docsWithField
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|DoublesFromArray
argument_list|(
name|values
argument_list|)
return|;
block|}
block|}
DECL|class|SortedDocValuesImpl
specifier|public
specifier|static
class|class
name|SortedDocValuesImpl
extends|extends
name|SortedDocValues
block|{
DECL|field|bytes
specifier|private
specifier|final
name|PagedBytes
operator|.
name|Reader
name|bytes
decl_stmt|;
DECL|field|termOrdToBytesOffset
specifier|private
specifier|final
name|PackedInts
operator|.
name|Reader
name|termOrdToBytesOffset
decl_stmt|;
DECL|field|docToTermOrd
specifier|private
specifier|final
name|PackedInts
operator|.
name|Reader
name|docToTermOrd
decl_stmt|;
DECL|field|numOrd
specifier|private
specifier|final
name|int
name|numOrd
decl_stmt|;
DECL|method|SortedDocValuesImpl
specifier|public
name|SortedDocValuesImpl
parameter_list|(
name|PagedBytes
operator|.
name|Reader
name|bytes
parameter_list|,
name|PackedInts
operator|.
name|Reader
name|termOrdToBytesOffset
parameter_list|,
name|PackedInts
operator|.
name|Reader
name|docToTermOrd
parameter_list|,
name|int
name|numOrd
parameter_list|)
block|{
name|this
operator|.
name|bytes
operator|=
name|bytes
expr_stmt|;
name|this
operator|.
name|docToTermOrd
operator|=
name|docToTermOrd
expr_stmt|;
name|this
operator|.
name|termOrdToBytesOffset
operator|=
name|termOrdToBytesOffset
expr_stmt|;
name|this
operator|.
name|numOrd
operator|=
name|numOrd
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getValueCount
specifier|public
name|int
name|getValueCount
parameter_list|()
block|{
return|return
name|numOrd
return|;
block|}
annotation|@
name|Override
DECL|method|getOrd
specifier|public
name|int
name|getOrd
parameter_list|(
name|int
name|docID
parameter_list|)
block|{
comment|// Subtract 1, matching the 1+ord we did when
comment|// storing, so that missing values, which are 0 in the
comment|// packed ints, are returned as -1 ord:
return|return
operator|(
name|int
operator|)
name|docToTermOrd
operator|.
name|get
argument_list|(
name|docID
argument_list|)
operator|-
literal|1
return|;
block|}
annotation|@
name|Override
DECL|method|lookupOrd
specifier|public
name|void
name|lookupOrd
parameter_list|(
name|int
name|ord
parameter_list|,
name|BytesRef
name|ret
parameter_list|)
block|{
if|if
condition|(
name|ord
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"ord must be>=0 (got ord="
operator|+
name|ord
operator|+
literal|")"
argument_list|)
throw|;
block|}
name|bytes
operator|.
name|fill
argument_list|(
name|ret
argument_list|,
name|termOrdToBytesOffset
operator|.
name|get
argument_list|(
name|ord
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// nocommit for DV if you ask for sorted or binary we
comment|// should check sorted first?
comment|// nocommit woudl be nice if .getTErms would return a
comment|// DocTermsIndex if one already existed
DECL|method|getTermsIndex
specifier|public
name|SortedDocValues
name|getTermsIndex
parameter_list|(
name|AtomicReader
name|reader
parameter_list|,
name|String
name|field
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getTermsIndex
argument_list|(
name|reader
argument_list|,
name|field
argument_list|,
name|PackedInts
operator|.
name|FAST
argument_list|)
return|;
block|}
DECL|method|getTermsIndex
specifier|public
name|SortedDocValues
name|getTermsIndex
parameter_list|(
name|AtomicReader
name|reader
parameter_list|,
name|String
name|field
parameter_list|,
name|float
name|acceptableOverheadRatio
parameter_list|)
throws|throws
name|IOException
block|{
name|SortedDocValues
name|valuesIn
init|=
name|reader
operator|.
name|getSortedDocValues
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|valuesIn
operator|!=
literal|null
condition|)
block|{
comment|// Not cached here by FieldCacheImpl (cached instead
comment|// per-thread by SegmentReader):
return|return
name|valuesIn
return|;
block|}
else|else
block|{
return|return
operator|(
name|SortedDocValues
operator|)
name|caches
operator|.
name|get
argument_list|(
name|SortedDocValues
operator|.
name|class
argument_list|)
operator|.
name|get
argument_list|(
name|reader
argument_list|,
operator|new
name|CacheKey
argument_list|(
name|field
argument_list|,
name|acceptableOverheadRatio
argument_list|)
argument_list|,
literal|false
argument_list|)
return|;
block|}
block|}
DECL|class|SortedDocValuesCache
specifier|static
class|class
name|SortedDocValuesCache
extends|extends
name|Cache
block|{
DECL|method|SortedDocValuesCache
name|SortedDocValuesCache
parameter_list|(
name|FieldCacheImpl
name|wrapper
parameter_list|)
block|{
name|super
argument_list|(
name|wrapper
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createValue
specifier|protected
name|Object
name|createValue
parameter_list|(
name|AtomicReader
name|reader
parameter_list|,
name|CacheKey
name|key
parameter_list|,
name|boolean
name|setDocsWithField
comment|/* ignored */
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|int
name|maxDoc
init|=
name|reader
operator|.
name|maxDoc
argument_list|()
decl_stmt|;
name|Terms
name|terms
init|=
name|reader
operator|.
name|terms
argument_list|(
name|key
operator|.
name|field
argument_list|)
decl_stmt|;
specifier|final
name|float
name|acceptableOverheadRatio
init|=
operator|(
operator|(
name|Float
operator|)
name|key
operator|.
name|custom
operator|)
operator|.
name|floatValue
argument_list|()
decl_stmt|;
specifier|final
name|PagedBytes
name|bytes
init|=
operator|new
name|PagedBytes
argument_list|(
literal|15
argument_list|)
decl_stmt|;
name|int
name|startBytesBPV
decl_stmt|;
name|int
name|startTermsBPV
decl_stmt|;
name|int
name|startNumUniqueTerms
decl_stmt|;
specifier|final
name|int
name|termCountHardLimit
decl_stmt|;
if|if
condition|(
name|maxDoc
operator|==
name|Integer
operator|.
name|MAX_VALUE
condition|)
block|{
name|termCountHardLimit
operator|=
name|Integer
operator|.
name|MAX_VALUE
expr_stmt|;
block|}
else|else
block|{
name|termCountHardLimit
operator|=
name|maxDoc
operator|+
literal|1
expr_stmt|;
block|}
comment|// TODO: use Uninvert?
if|if
condition|(
name|terms
operator|!=
literal|null
condition|)
block|{
comment|// Try for coarse estimate for number of bits; this
comment|// should be an underestimate most of the time, which
comment|// is fine -- GrowableWriter will reallocate as needed
name|long
name|numUniqueTerms
init|=
name|terms
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|numUniqueTerms
operator|!=
operator|-
literal|1L
condition|)
block|{
if|if
condition|(
name|numUniqueTerms
operator|>
name|termCountHardLimit
condition|)
block|{
comment|// app is misusing the API (there is more than
comment|// one term per doc); in this case we make best
comment|// effort to load what we can (see LUCENE-2142)
name|numUniqueTerms
operator|=
name|termCountHardLimit
expr_stmt|;
block|}
name|startBytesBPV
operator|=
name|PackedInts
operator|.
name|bitsRequired
argument_list|(
name|numUniqueTerms
operator|*
literal|4
argument_list|)
expr_stmt|;
name|startTermsBPV
operator|=
name|PackedInts
operator|.
name|bitsRequired
argument_list|(
name|numUniqueTerms
argument_list|)
expr_stmt|;
name|startNumUniqueTerms
operator|=
operator|(
name|int
operator|)
name|numUniqueTerms
expr_stmt|;
block|}
else|else
block|{
name|startBytesBPV
operator|=
literal|1
expr_stmt|;
name|startTermsBPV
operator|=
literal|1
expr_stmt|;
name|startNumUniqueTerms
operator|=
literal|1
expr_stmt|;
block|}
block|}
else|else
block|{
name|startBytesBPV
operator|=
literal|1
expr_stmt|;
name|startTermsBPV
operator|=
literal|1
expr_stmt|;
name|startNumUniqueTerms
operator|=
literal|1
expr_stmt|;
block|}
name|GrowableWriter
name|termOrdToBytesOffset
init|=
operator|new
name|GrowableWriter
argument_list|(
name|startBytesBPV
argument_list|,
literal|1
operator|+
name|startNumUniqueTerms
argument_list|,
name|acceptableOverheadRatio
argument_list|)
decl_stmt|;
specifier|final
name|GrowableWriter
name|docToTermOrd
init|=
operator|new
name|GrowableWriter
argument_list|(
name|startTermsBPV
argument_list|,
name|maxDoc
argument_list|,
name|acceptableOverheadRatio
argument_list|)
decl_stmt|;
name|int
name|termOrd
init|=
literal|0
decl_stmt|;
comment|// TODO: use Uninvert?
if|if
condition|(
name|terms
operator|!=
literal|null
condition|)
block|{
specifier|final
name|TermsEnum
name|termsEnum
init|=
name|terms
operator|.
name|iterator
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|DocsEnum
name|docs
init|=
literal|null
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
specifier|final
name|BytesRef
name|term
init|=
name|termsEnum
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|term
operator|==
literal|null
condition|)
block|{
break|break;
block|}
if|if
condition|(
name|termOrd
operator|>=
name|termCountHardLimit
condition|)
block|{
break|break;
block|}
if|if
condition|(
name|termOrd
operator|==
name|termOrdToBytesOffset
operator|.
name|size
argument_list|()
condition|)
block|{
comment|// NOTE: this code only runs if the incoming
comment|// reader impl doesn't implement
comment|// size (which should be uncommon)
name|termOrdToBytesOffset
operator|=
name|termOrdToBytesOffset
operator|.
name|resize
argument_list|(
name|ArrayUtil
operator|.
name|oversize
argument_list|(
literal|1
operator|+
name|termOrd
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|termOrdToBytesOffset
operator|.
name|set
argument_list|(
name|termOrd
argument_list|,
name|bytes
operator|.
name|copyUsingLengthPrefix
argument_list|(
name|term
argument_list|)
argument_list|)
expr_stmt|;
name|docs
operator|=
name|termsEnum
operator|.
name|docs
argument_list|(
literal|null
argument_list|,
name|docs
argument_list|,
name|DocsEnum
operator|.
name|FLAG_NONE
argument_list|)
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
specifier|final
name|int
name|docID
init|=
name|docs
operator|.
name|nextDoc
argument_list|()
decl_stmt|;
if|if
condition|(
name|docID
operator|==
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
condition|)
block|{
break|break;
block|}
comment|// Store 1+ ord into packed bits
name|docToTermOrd
operator|.
name|set
argument_list|(
name|docID
argument_list|,
literal|1
operator|+
name|termOrd
argument_list|)
expr_stmt|;
block|}
name|termOrd
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|termOrdToBytesOffset
operator|.
name|size
argument_list|()
operator|>
name|termOrd
condition|)
block|{
name|termOrdToBytesOffset
operator|=
name|termOrdToBytesOffset
operator|.
name|resize
argument_list|(
name|termOrd
argument_list|)
expr_stmt|;
block|}
block|}
comment|// maybe an int-only impl?
return|return
operator|new
name|SortedDocValuesImpl
argument_list|(
name|bytes
operator|.
name|freeze
argument_list|(
literal|true
argument_list|)
argument_list|,
name|termOrdToBytesOffset
operator|.
name|getMutable
argument_list|()
argument_list|,
name|docToTermOrd
operator|.
name|getMutable
argument_list|()
argument_list|,
name|termOrd
argument_list|)
return|;
block|}
block|}
DECL|class|BinaryDocValuesImpl
specifier|private
specifier|static
class|class
name|BinaryDocValuesImpl
extends|extends
name|BinaryDocValues
block|{
DECL|field|bytes
specifier|private
specifier|final
name|PagedBytes
operator|.
name|Reader
name|bytes
decl_stmt|;
DECL|field|docToOffset
specifier|private
specifier|final
name|PackedInts
operator|.
name|Reader
name|docToOffset
decl_stmt|;
DECL|method|BinaryDocValuesImpl
specifier|public
name|BinaryDocValuesImpl
parameter_list|(
name|PagedBytes
operator|.
name|Reader
name|bytes
parameter_list|,
name|PackedInts
operator|.
name|Reader
name|docToOffset
parameter_list|)
block|{
name|this
operator|.
name|bytes
operator|=
name|bytes
expr_stmt|;
name|this
operator|.
name|docToOffset
operator|=
name|docToOffset
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|get
specifier|public
name|void
name|get
parameter_list|(
name|int
name|docID
parameter_list|,
name|BytesRef
name|ret
parameter_list|)
block|{
specifier|final
name|int
name|pointer
init|=
operator|(
name|int
operator|)
name|docToOffset
operator|.
name|get
argument_list|(
name|docID
argument_list|)
decl_stmt|;
if|if
condition|(
name|pointer
operator|==
literal|0
condition|)
block|{
name|ret
operator|.
name|bytes
operator|=
name|MISSING
expr_stmt|;
name|ret
operator|.
name|offset
operator|=
literal|0
expr_stmt|;
name|ret
operator|.
name|length
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
name|bytes
operator|.
name|fill
argument_list|(
name|ret
argument_list|,
name|pointer
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// TODO: this if DocTermsIndex was already created, we
comment|// should share it...
DECL|method|getTerms
specifier|public
name|BinaryDocValues
name|getTerms
parameter_list|(
name|AtomicReader
name|reader
parameter_list|,
name|String
name|field
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getTerms
argument_list|(
name|reader
argument_list|,
name|field
argument_list|,
name|PackedInts
operator|.
name|FAST
argument_list|)
return|;
block|}
DECL|method|getTerms
specifier|public
name|BinaryDocValues
name|getTerms
parameter_list|(
name|AtomicReader
name|reader
parameter_list|,
name|String
name|field
parameter_list|,
name|float
name|acceptableOverheadRatio
parameter_list|)
throws|throws
name|IOException
block|{
name|BinaryDocValues
name|valuesIn
init|=
name|reader
operator|.
name|getBinaryDocValues
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|valuesIn
operator|==
literal|null
condition|)
block|{
comment|// nocommit is this auto-fallback ... OK?
name|valuesIn
operator|=
name|reader
operator|.
name|getSortedDocValues
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|valuesIn
operator|!=
literal|null
condition|)
block|{
comment|// Not cached here by FieldCacheImpl (cached instead
comment|// per-thread by SegmentReader):
return|return
name|valuesIn
return|;
block|}
return|return
operator|(
name|BinaryDocValues
operator|)
name|caches
operator|.
name|get
argument_list|(
name|BinaryDocValues
operator|.
name|class
argument_list|)
operator|.
name|get
argument_list|(
name|reader
argument_list|,
operator|new
name|CacheKey
argument_list|(
name|field
argument_list|,
name|acceptableOverheadRatio
argument_list|)
argument_list|,
literal|false
argument_list|)
return|;
block|}
DECL|class|BinaryDocValuesCache
specifier|static
specifier|final
class|class
name|BinaryDocValuesCache
extends|extends
name|Cache
block|{
DECL|method|BinaryDocValuesCache
name|BinaryDocValuesCache
parameter_list|(
name|FieldCacheImpl
name|wrapper
parameter_list|)
block|{
name|super
argument_list|(
name|wrapper
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createValue
specifier|protected
name|Object
name|createValue
parameter_list|(
name|AtomicReader
name|reader
parameter_list|,
name|CacheKey
name|key
parameter_list|,
name|boolean
name|setDocsWithField
comment|/* ignored */
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|int
name|maxDoc
init|=
name|reader
operator|.
name|maxDoc
argument_list|()
decl_stmt|;
name|Terms
name|terms
init|=
name|reader
operator|.
name|terms
argument_list|(
name|key
operator|.
name|field
argument_list|)
decl_stmt|;
specifier|final
name|float
name|acceptableOverheadRatio
init|=
operator|(
operator|(
name|Float
operator|)
name|key
operator|.
name|custom
operator|)
operator|.
name|floatValue
argument_list|()
decl_stmt|;
specifier|final
name|int
name|termCountHardLimit
init|=
name|maxDoc
decl_stmt|;
comment|// Holds the actual term data, expanded.
specifier|final
name|PagedBytes
name|bytes
init|=
operator|new
name|PagedBytes
argument_list|(
literal|15
argument_list|)
decl_stmt|;
name|int
name|startBPV
decl_stmt|;
if|if
condition|(
name|terms
operator|!=
literal|null
condition|)
block|{
comment|// Try for coarse estimate for number of bits; this
comment|// should be an underestimate most of the time, which
comment|// is fine -- GrowableWriter will reallocate as needed
name|long
name|numUniqueTerms
init|=
name|terms
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|numUniqueTerms
operator|!=
operator|-
literal|1L
condition|)
block|{
if|if
condition|(
name|numUniqueTerms
operator|>
name|termCountHardLimit
condition|)
block|{
name|numUniqueTerms
operator|=
name|termCountHardLimit
expr_stmt|;
block|}
name|startBPV
operator|=
name|PackedInts
operator|.
name|bitsRequired
argument_list|(
name|numUniqueTerms
operator|*
literal|4
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|startBPV
operator|=
literal|1
expr_stmt|;
block|}
block|}
else|else
block|{
name|startBPV
operator|=
literal|1
expr_stmt|;
block|}
specifier|final
name|GrowableWriter
name|docToOffset
init|=
operator|new
name|GrowableWriter
argument_list|(
name|startBPV
argument_list|,
name|maxDoc
argument_list|,
name|acceptableOverheadRatio
argument_list|)
decl_stmt|;
comment|// pointer==0 means not set
name|bytes
operator|.
name|copyUsingLengthPrefix
argument_list|(
operator|new
name|BytesRef
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|terms
operator|!=
literal|null
condition|)
block|{
name|int
name|termCount
init|=
literal|0
decl_stmt|;
specifier|final
name|TermsEnum
name|termsEnum
init|=
name|terms
operator|.
name|iterator
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|DocsEnum
name|docs
init|=
literal|null
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
name|termCount
operator|++
operator|==
name|termCountHardLimit
condition|)
block|{
comment|// app is misusing the API (there is more than
comment|// one term per doc); in this case we make best
comment|// effort to load what we can (see LUCENE-2142)
break|break;
block|}
specifier|final
name|BytesRef
name|term
init|=
name|termsEnum
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|term
operator|==
literal|null
condition|)
block|{
break|break;
block|}
specifier|final
name|long
name|pointer
init|=
name|bytes
operator|.
name|copyUsingLengthPrefix
argument_list|(
name|term
argument_list|)
decl_stmt|;
name|docs
operator|=
name|termsEnum
operator|.
name|docs
argument_list|(
literal|null
argument_list|,
name|docs
argument_list|,
name|DocsEnum
operator|.
name|FLAG_NONE
argument_list|)
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
specifier|final
name|int
name|docID
init|=
name|docs
operator|.
name|nextDoc
argument_list|()
decl_stmt|;
if|if
condition|(
name|docID
operator|==
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
condition|)
block|{
break|break;
block|}
name|docToOffset
operator|.
name|set
argument_list|(
name|docID
argument_list|,
name|pointer
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// maybe an int-only impl?
return|return
operator|new
name|BinaryDocValuesImpl
argument_list|(
name|bytes
operator|.
name|freeze
argument_list|(
literal|true
argument_list|)
argument_list|,
name|docToOffset
operator|.
name|getMutable
argument_list|()
argument_list|)
return|;
block|}
block|}
DECL|method|getDocTermOrds
specifier|public
name|DocTermOrds
name|getDocTermOrds
parameter_list|(
name|AtomicReader
name|reader
parameter_list|,
name|String
name|field
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|(
name|DocTermOrds
operator|)
name|caches
operator|.
name|get
argument_list|(
name|DocTermOrds
operator|.
name|class
argument_list|)
operator|.
name|get
argument_list|(
name|reader
argument_list|,
operator|new
name|CacheKey
argument_list|(
name|field
argument_list|,
literal|null
argument_list|)
argument_list|,
literal|false
argument_list|)
return|;
block|}
DECL|class|DocTermOrdsCache
specifier|static
specifier|final
class|class
name|DocTermOrdsCache
extends|extends
name|Cache
block|{
DECL|method|DocTermOrdsCache
name|DocTermOrdsCache
parameter_list|(
name|FieldCacheImpl
name|wrapper
parameter_list|)
block|{
name|super
argument_list|(
name|wrapper
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createValue
specifier|protected
name|Object
name|createValue
parameter_list|(
name|AtomicReader
name|reader
parameter_list|,
name|CacheKey
name|key
parameter_list|,
name|boolean
name|setDocsWithField
comment|/* ignored */
parameter_list|)
throws|throws
name|IOException
block|{
comment|// No DocValues impl yet (DocValues are single valued...):
return|return
operator|new
name|DocTermOrds
argument_list|(
name|reader
argument_list|,
name|key
operator|.
name|field
argument_list|)
return|;
block|}
block|}
DECL|field|infoStream
specifier|private
specifier|volatile
name|PrintStream
name|infoStream
decl_stmt|;
DECL|method|setInfoStream
specifier|public
name|void
name|setInfoStream
parameter_list|(
name|PrintStream
name|stream
parameter_list|)
block|{
name|infoStream
operator|=
name|stream
expr_stmt|;
block|}
DECL|method|getInfoStream
specifier|public
name|PrintStream
name|getInfoStream
parameter_list|()
block|{
return|return
name|infoStream
return|;
block|}
block|}
end_class
end_unit
