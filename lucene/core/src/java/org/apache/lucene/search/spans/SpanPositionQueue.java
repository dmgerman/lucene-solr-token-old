begin_unit
begin_package
DECL|package|org.apache.lucene.search.spans
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|spans
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|PriorityQueue
import|;
end_import
begin_class
DECL|class|SpanPositionQueue
class|class
name|SpanPositionQueue
extends|extends
name|PriorityQueue
argument_list|<
name|Spans
argument_list|>
block|{
DECL|method|SpanPositionQueue
name|SpanPositionQueue
parameter_list|(
name|int
name|maxSize
parameter_list|)
block|{
name|super
argument_list|(
name|maxSize
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// do not prepopulate
block|}
DECL|method|lessThan
specifier|protected
name|boolean
name|lessThan
parameter_list|(
name|Spans
name|s1
parameter_list|,
name|Spans
name|s2
parameter_list|)
block|{
name|int
name|start1
init|=
name|s1
operator|.
name|startPosition
argument_list|()
decl_stmt|;
name|int
name|start2
init|=
name|s2
operator|.
name|startPosition
argument_list|()
decl_stmt|;
return|return
operator|(
name|start1
operator|<
name|start2
operator|)
condition|?
literal|true
else|:
operator|(
name|start1
operator|==
name|start2
operator|)
condition|?
name|s1
operator|.
name|endPosition
argument_list|()
operator|<
name|s2
operator|.
name|endPosition
argument_list|()
else|:
literal|false
return|;
block|}
block|}
end_class
end_unit
