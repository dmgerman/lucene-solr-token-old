begin_unit
begin_package
DECL|package|org.apache.lucene.search
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_comment
comment|/**  * A cache for queries.  *  * @see LRUQueryCache  * @lucene.experimental  */
end_comment
begin_interface
DECL|interface|QueryCache
specifier|public
interface|interface
name|QueryCache
block|{
comment|/**    * Return a key for the given query that only takes matching documents into    * account. Boosts will be ignored.    * @lucene.internal    */
DECL|method|cacheKey
specifier|public
specifier|static
name|Query
name|cacheKey
parameter_list|(
name|Query
name|query
parameter_list|)
block|{
if|if
condition|(
name|query
operator|.
name|getBoost
argument_list|()
operator|==
literal|1f
condition|)
block|{
return|return
name|query
return|;
block|}
else|else
block|{
name|Query
name|key
init|=
name|query
operator|.
name|clone
argument_list|()
decl_stmt|;
name|key
operator|.
name|setBoost
argument_list|(
literal|1f
argument_list|)
expr_stmt|;
assert|assert
name|key
operator|==
name|cacheKey
argument_list|(
name|key
argument_list|)
assert|;
return|return
name|key
return|;
block|}
block|}
comment|/**    * Return a wrapper around the provided<code>weight</code> that will cache    * matching docs per-segment accordingly to the given<code>policy</code>.    * NOTE: The returned weight will only be equivalent if scores are not needed.    * @see Collector#needsScores()    */
DECL|method|doCache
name|Weight
name|doCache
parameter_list|(
name|Weight
name|weight
parameter_list|,
name|QueryCachingPolicy
name|policy
parameter_list|)
function_decl|;
block|}
end_interface
end_unit
