begin_unit
begin_package
DECL|package|org.apache.lucene.search
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReaderContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Bits
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Bits
operator|.
name|MatchNoBits
import|;
end_import
begin_comment
comment|/**  * Base class to build {@link Weight}s that are based on random-access  * structures such as live docs or doc values. Such weights return a  * {@link Scorer} which consists of an approximation that matches  * everything, and a confirmation phase that first checks live docs and  * then the {@link Bits} returned by {@link #getMatchingDocs(LeafReaderContext)}.  * @lucene.internal  */
end_comment
begin_class
DECL|class|RandomAccessWeight
specifier|public
specifier|abstract
class|class
name|RandomAccessWeight
extends|extends
name|ConstantScoreWeight
block|{
comment|/** Sole constructor. */
DECL|method|RandomAccessWeight
specifier|protected
name|RandomAccessWeight
parameter_list|(
name|Query
name|query
parameter_list|)
block|{
name|super
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|}
comment|/**    * Return a {@link Bits} instance representing documents that match this    * weight on the given context. A return value of {@code null} indicates    * that no documents matched.    * Note: it is not needed to care about live docs as they will be checked    * before the returned bits.    */
DECL|method|getMatchingDocs
specifier|protected
specifier|abstract
name|Bits
name|getMatchingDocs
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
function_decl|;
annotation|@
name|Override
DECL|method|scorer
specifier|public
specifier|final
name|Scorer
name|scorer
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Bits
name|matchingDocs
init|=
name|getMatchingDocs
argument_list|(
name|context
argument_list|)
decl_stmt|;
if|if
condition|(
name|matchingDocs
operator|==
literal|null
operator|||
name|matchingDocs
operator|instanceof
name|MatchNoBits
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|DocIdSetIterator
name|approximation
init|=
name|DocIdSetIterator
operator|.
name|all
argument_list|(
name|context
operator|.
name|reader
argument_list|()
operator|.
name|maxDoc
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|TwoPhaseIterator
name|twoPhase
init|=
operator|new
name|TwoPhaseIterator
argument_list|(
name|approximation
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|matches
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|int
name|doc
init|=
name|approximation
operator|.
name|docID
argument_list|()
decl_stmt|;
return|return
name|matchingDocs
operator|.
name|get
argument_list|(
name|doc
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|float
name|matchCost
parameter_list|()
block|{
return|return
literal|10
return|;
comment|// TODO: use some cost of matchingDocs
block|}
block|}
decl_stmt|;
return|return
operator|new
name|ConstantScoreScorer
argument_list|(
name|this
argument_list|,
name|score
argument_list|()
argument_list|,
name|twoPhase
argument_list|)
return|;
block|}
block|}
end_class
end_unit
