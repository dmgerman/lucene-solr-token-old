begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.search
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_comment
comment|/** A Scorer for OR like queries, counterpart of<code>ConjunctionScorer</code>.  */
end_comment
begin_class
DECL|class|DisjunctionSumScorer
specifier|final
class|class
name|DisjunctionSumScorer
extends|extends
name|DisjunctionScorer
block|{
DECL|field|coord
specifier|private
specifier|final
name|float
index|[]
name|coord
decl_stmt|;
comment|/** Construct a<code>DisjunctionScorer</code>.    * @param weight The weight to be used.    * @param subScorers Array of at least two subscorers.    * @param coord Table of coordination factors    */
DECL|method|DisjunctionSumScorer
name|DisjunctionSumScorer
parameter_list|(
name|Weight
name|weight
parameter_list|,
name|List
argument_list|<
name|Scorer
argument_list|>
name|subScorers
parameter_list|,
name|float
index|[]
name|coord
parameter_list|,
name|boolean
name|needsScores
parameter_list|)
block|{
name|super
argument_list|(
name|weight
argument_list|,
name|subScorers
argument_list|,
name|needsScores
argument_list|)
expr_stmt|;
name|this
operator|.
name|coord
operator|=
name|coord
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|score
specifier|protected
name|float
name|score
parameter_list|(
name|DisiWrapper
name|topList
parameter_list|)
throws|throws
name|IOException
block|{
name|double
name|score
init|=
literal|0
decl_stmt|;
name|int
name|freq
init|=
literal|0
decl_stmt|;
for|for
control|(
name|DisiWrapper
name|w
init|=
name|topList
init|;
name|w
operator|!=
literal|null
condition|;
name|w
operator|=
name|w
operator|.
name|next
control|)
block|{
name|score
operator|+=
name|w
operator|.
name|scorer
operator|.
name|score
argument_list|()
expr_stmt|;
name|freq
operator|+=
literal|1
expr_stmt|;
block|}
return|return
operator|(
name|float
operator|)
name|score
operator|*
name|coord
index|[
name|freq
index|]
return|;
block|}
block|}
end_class
end_unit
