begin_unit
begin_package
DECL|package|org.apache.lucene.search
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_comment
comment|/** A Scorer for OR like queries, counterpart of<code>ConjunctionScorer</code>.  * This Scorer implements {@link Scorer#advance(int)} and uses advance() on the given Scorers.   */
end_comment
begin_class
DECL|class|DisjunctionSumScorer
class|class
name|DisjunctionSumScorer
extends|extends
name|DisjunctionScorer
block|{
comment|/** The minimum number of scorers that should match. */
DECL|field|minimumNrMatchers
specifier|private
specifier|final
name|int
name|minimumNrMatchers
decl_stmt|;
comment|/** The document number of the current match. */
DECL|field|doc
specifier|private
name|int
name|doc
init|=
operator|-
literal|1
decl_stmt|;
comment|/** The number of subscorers that provide the current match. */
DECL|field|nrMatchers
specifier|protected
name|int
name|nrMatchers
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|score
specifier|private
name|double
name|score
init|=
name|Float
operator|.
name|NaN
decl_stmt|;
comment|/** Construct a<code>DisjunctionScorer</code>.    * @param weight The weight to be used.    * @param subScorers A collection of at least two subscorers.    * @param minimumNrMatchers The positive minimum number of subscorers that should    * match to match this query.    *<br>When<code>minimumNrMatchers</code> is bigger than    * the number of<code>subScorers</code>,    * no matches will be produced.    *<br>When minimumNrMatchers equals the number of subScorers,    * it more efficient to use<code>ConjunctionScorer</code>.    */
DECL|method|DisjunctionSumScorer
specifier|public
name|DisjunctionSumScorer
parameter_list|(
name|Weight
name|weight
parameter_list|,
name|List
argument_list|<
name|Scorer
argument_list|>
name|subScorers
parameter_list|,
name|int
name|minimumNrMatchers
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|weight
argument_list|,
name|subScorers
operator|.
name|toArray
argument_list|(
operator|new
name|Scorer
index|[
name|subScorers
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|,
name|subScorers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|minimumNrMatchers
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Minimum nr of matchers must be positive"
argument_list|)
throw|;
block|}
if|if
condition|(
name|numScorers
operator|<=
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"There must be at least 2 subScorers"
argument_list|)
throw|;
block|}
name|this
operator|.
name|minimumNrMatchers
operator|=
name|minimumNrMatchers
expr_stmt|;
block|}
comment|/** Construct a<code>DisjunctionScorer</code>, using one as the minimum number    * of matching subscorers.    */
DECL|method|DisjunctionSumScorer
specifier|public
name|DisjunctionSumScorer
parameter_list|(
name|Weight
name|weight
parameter_list|,
name|List
argument_list|<
name|Scorer
argument_list|>
name|subScorers
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|weight
argument_list|,
name|subScorers
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|nextDoc
specifier|public
name|int
name|nextDoc
parameter_list|()
throws|throws
name|IOException
block|{
assert|assert
name|doc
operator|!=
name|NO_MORE_DOCS
assert|;
while|while
condition|(
literal|true
condition|)
block|{
while|while
condition|(
name|subScorers
index|[
literal|0
index|]
operator|.
name|docID
argument_list|()
operator|==
name|doc
condition|)
block|{
if|if
condition|(
name|subScorers
index|[
literal|0
index|]
operator|.
name|nextDoc
argument_list|()
operator|!=
name|NO_MORE_DOCS
condition|)
block|{
name|heapAdjust
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|heapRemoveRoot
argument_list|()
expr_stmt|;
if|if
condition|(
name|numScorers
operator|<
name|minimumNrMatchers
condition|)
block|{
return|return
name|doc
operator|=
name|NO_MORE_DOCS
return|;
block|}
block|}
block|}
name|afterNext
argument_list|()
expr_stmt|;
if|if
condition|(
name|nrMatchers
operator|>=
name|minimumNrMatchers
condition|)
block|{
break|break;
block|}
block|}
return|return
name|doc
return|;
block|}
DECL|method|afterNext
specifier|private
name|void
name|afterNext
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|Scorer
name|sub
init|=
name|subScorers
index|[
literal|0
index|]
decl_stmt|;
name|doc
operator|=
name|sub
operator|.
name|docID
argument_list|()
expr_stmt|;
if|if
condition|(
name|doc
operator|==
name|NO_MORE_DOCS
condition|)
block|{
name|nrMatchers
operator|=
name|Integer
operator|.
name|MAX_VALUE
expr_stmt|;
comment|// stop looping
block|}
else|else
block|{
name|score
operator|=
name|sub
operator|.
name|score
argument_list|()
expr_stmt|;
name|nrMatchers
operator|=
literal|1
expr_stmt|;
name|countMatches
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|countMatches
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
block|}
comment|// TODO: this currently scores, but so did the previous impl
comment|// TODO: remove recursion.
comment|// TODO: if we separate scoring, out of here, modify this
comment|// and afterNext() to terminate when nrMatchers == minimumNrMatchers
comment|// then also change freq() to just always compute it from scratch
DECL|method|countMatches
specifier|private
name|void
name|countMatches
parameter_list|(
name|int
name|root
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|root
operator|<
name|numScorers
operator|&&
name|subScorers
index|[
name|root
index|]
operator|.
name|docID
argument_list|()
operator|==
name|doc
condition|)
block|{
name|nrMatchers
operator|++
expr_stmt|;
name|score
operator|+=
name|subScorers
index|[
name|root
index|]
operator|.
name|score
argument_list|()
expr_stmt|;
name|countMatches
argument_list|(
operator|(
name|root
operator|<<
literal|1
operator|)
operator|+
literal|1
argument_list|)
expr_stmt|;
name|countMatches
argument_list|(
operator|(
name|root
operator|<<
literal|1
operator|)
operator|+
literal|2
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Returns the score of the current document matching the query.    * Initially invalid, until {@link #nextDoc()} is called the first time.    */
annotation|@
name|Override
DECL|method|score
specifier|public
name|float
name|score
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|(
name|float
operator|)
name|score
return|;
block|}
annotation|@
name|Override
DECL|method|docID
specifier|public
name|int
name|docID
parameter_list|()
block|{
return|return
name|doc
return|;
block|}
annotation|@
name|Override
DECL|method|freq
specifier|public
name|float
name|freq
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|nrMatchers
return|;
block|}
comment|/**    * Advances to the first match beyond the current whose document number is    * greater than or equal to a given target.<br>    * The implementation uses the advance() method on the subscorers.    *     * @param target    *          The target document number.    * @return the document whose number is greater than or equal to the given    *         target, or -1 if none exist.    */
annotation|@
name|Override
DECL|method|advance
specifier|public
name|int
name|advance
parameter_list|(
name|int
name|target
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|numScorers
operator|==
literal|0
condition|)
return|return
name|doc
operator|=
name|NO_MORE_DOCS
return|;
while|while
condition|(
name|subScorers
index|[
literal|0
index|]
operator|.
name|docID
argument_list|()
operator|<
name|target
condition|)
block|{
if|if
condition|(
name|subScorers
index|[
literal|0
index|]
operator|.
name|advance
argument_list|(
name|target
argument_list|)
operator|!=
name|NO_MORE_DOCS
condition|)
block|{
name|heapAdjust
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|heapRemoveRoot
argument_list|()
expr_stmt|;
if|if
condition|(
name|numScorers
operator|==
literal|0
condition|)
block|{
return|return
name|doc
operator|=
name|NO_MORE_DOCS
return|;
block|}
block|}
block|}
name|afterNext
argument_list|()
expr_stmt|;
if|if
condition|(
name|nrMatchers
operator|>=
name|minimumNrMatchers
condition|)
block|{
return|return
name|doc
return|;
block|}
else|else
block|{
return|return
name|nextDoc
argument_list|()
return|;
block|}
block|}
block|}
end_class
end_unit
