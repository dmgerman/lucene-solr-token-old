begin_unit
begin_package
DECL|package|org.apache.lucene.search
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|NumericTokenStream
import|;
end_import
begin_comment
comment|// for javadocs
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|DoubleField
import|;
end_import
begin_comment
comment|// for javadocs
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|FloatField
import|;
end_import
begin_comment
comment|// for javadocs
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|IntField
import|;
end_import
begin_comment
comment|// for javadocs
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|LongField
import|;
end_import
begin_comment
comment|// for javadocs
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|FieldType
operator|.
name|NumericType
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|FilteredTermsEnum
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Terms
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|TermsEnum
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|AttributeSource
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|NumericUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|ToStringUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import
begin_comment
comment|// for javadocs
end_comment
begin_comment
comment|/**  *<p>A {@link Query} that matches numeric values within a  * specified range.  To use this, you must first index the  * numeric values using {@link IntField}, {@link  * FloatField}, {@link LongField} or {@link DoubleField} (expert: {@link  * NumericTokenStream}).  If your terms are instead textual,  * you should use {@link TermRangeQuery}.  {@link  * NumericRangeFilter} is the filter equivalent of this  * query.</p>  *  *<p>You create a new NumericRangeQuery with the static  * factory methods, eg:  *  *<pre class="prettyprint">  * Query q = NumericRangeQuery.newFloatRange("weight", 0.03f, 0.10f, true, true);  *</pre>  *  * matches all documents whose float valued "weight" field  * ranges from 0.03 to 0.10, inclusive.  *  *<p>The performance of NumericRangeQuery is much better  * than the corresponding {@link TermRangeQuery} because the  * number of terms that must be searched is usually far  * fewer, thanks to trie indexing, described below.</p>  *  *<p>You can optionally specify a<a  * href="#precisionStepDesc"><code>precisionStep</code></a>  * when creating this query.  This is necessary if you've  * changed this configuration from its default (4) during  * indexing.  Lower values consume more disk space but speed  * up searching.  Suitable values are between<b>1</b> and  *<b>8</b>. A good starting point to test is<b>4</b>,  * which is the default value for all<code>Numeric*</code>  * classes.  See<a href="#precisionStepDesc">below</a> for  * details.  *  *<p>This query defaults to {@linkplain  * MultiTermQuery#CONSTANT_SCORE_AUTO_REWRITE_DEFAULT}.  * With precision steps of&le;4, this query can be run with  * one of the BooleanQuery rewrite methods without changing  * BooleanQuery's default max clause count.  *  *<br><h3>How it works</h3>  *  *<p>See the publication about<a target="_blank" href="http://www.panfmp.org">panFMP</a>,  * where this algorithm was described (referred to as<code>TrieRangeQuery</code>):  *  *<blockquote><strong>Schindler, U, Diepenbroek, M</strong>, 2008.  *<em>Generic XML-based Framework for Metadata Portals.</em>  * Computers&amp; Geosciences 34 (12), 1947-1955.  *<a href="http://dx.doi.org/10.1016/j.cageo.2008.02.023"  * target="_blank">doi:10.1016/j.cageo.2008.02.023</a></blockquote>  *  *<p><em>A quote from this paper:</em> Because Apache Lucene is a full-text  * search engine and not a conventional database, it cannot handle numerical ranges  * (e.g., field value is inside user defined bounds, even dates are numerical values).  * We have developed an extension to Apache Lucene that stores  * the numerical values in a special string-encoded format with variable precision  * (all numerical values like doubles, longs, floats, and ints are converted to  * lexicographic sortable string representations and stored with different precisions  * (for a more detailed description of how the values are stored,  * see {@link NumericUtils}). A range is then divided recursively into multiple intervals for searching:  * The center of the range is searched only with the lowest possible precision in the<em>trie</em>,  * while the boundaries are matched more exactly. This reduces the number of terms dramatically.</p>  *  *<p>For the variant that stores long values in 8 different precisions (each reduced by 8 bits) that  * uses a lowest precision of 1 byte, the index contains only a maximum of 256 distinct values in the  * lowest precision. Overall, a range could consist of a theoretical maximum of  *<code>7*255*2 + 255 = 3825</code> distinct terms (when there is a term for every distinct value of an  * 8-byte-number in the index and the range covers almost all of them; a maximum of 255 distinct values is used  * because it would always be possible to reduce the full 256 values to one term with degraded precision).  * In practice, we have seen up to 300 terms in most cases (index with 500,000 metadata records  * and a uniform value distribution).</p>  *  *<a name="precisionStepDesc"><h3>Precision Step</h3>  *<p>You can choose any<code>precisionStep</code> when encoding values.  * Lower step values mean more precisions and so more terms in index (and index gets larger). The number  * of indexed terms per value is (those are generated by {@link NumericTokenStream}):  *<p style="font-family:serif">  *&nbsp;&nbsp;indexedTermsPerValue =<b>ceil</b><big>(</big>bitsPerValue / precisionStep<big>)</big>  *</p>  * As the lower precision terms are shared by many values, the additional terms only  * slightly grow the term dictionary (approx. 7% for<code>precisionStep=4</code>), but have a larger  * impact on the postings (the postings file will have  more entries, as every document is linked to  *<code>indexedTermsPerValue</code> terms instead of one). The formula to estimate the growth  * of the term dictionary in comparison to one term per value:  *<p>  *<!-- the formula in the alt attribute was transformed from latex to PNG with http://1.618034.com/latex.php (with 110 dpi): -->  *&nbsp;&nbsp;<img src="doc-files/nrq-formula-1.png" alt="\mathrm{termDictOverhead} = \sum\limits_{i=0}^{\mathrm{indexedTermsPerValue}-1} \frac{1}{2^{\mathrm{precisionStep}\cdot i}}" />  *</p>  *<p>On the other hand, if the<code>precisionStep</code> is smaller, the maximum number of terms to match reduces,  * which optimizes query speed. The formula to calculate the maximum number of terms that will be visited while  * executing the query is:  *<p>  *<!-- the formula in the alt attribute was transformed from latex to PNG with http://1.618034.com/latex.php (with 110 dpi): -->  *&nbsp;&nbsp;<img src="doc-files/nrq-formula-2.png" alt="\mathrm{maxQueryTerms} = \left[ \left( \mathrm{indexedTermsPerValue} - 1 \right) \cdot \left(2^\mathrm{precisionStep} - 1 \right) \cdot 2 \right] + \left( 2^\mathrm{precisionStep} - 1 \right)" />  *</p>  *<p>For longs stored using a precision step of 4,<code>maxQueryTerms = 15*15*2 + 15 = 465</code>, and for a precision  * step of 2,<code>maxQueryTerms = 31*3*2 + 3 = 189</code>. But the faster search speed is reduced by more seeking  * in the term enum of the index. Because of this, the ideal<code>precisionStep</code> value can only  * be found out by testing.<b>Important:</b> You can index with a lower precision step value and test search speed  * using a multiple of the original step value.</p>  *  *<p>Good values for<code>precisionStep</code> are depending on usage and data type:  *<ul>  *<li>The default for all data types is<b>4</b>, which is used, when no<code>precisionStep</code> is given.  *<li>Ideal value in most cases for<em>64 bit</em> data types<em>(long, double)</em> is<b>6</b> or<b>8</b>.  *<li>Ideal value in most cases for<em>32 bit</em> data types<em>(int, float)</em> is<b>4</b>.  *<li>For low cardinality fields larger precision steps are good. If the cardinality is&lt; 100, it is  *  fair to use {@link Integer#MAX_VALUE} (see below).  *<li>Steps<b>&ge;64</b> for<em>long/double</em> and<b>&ge;32</b> for<em>int/float</em> produces one token  *  per value in the index and querying is as slow as a conventional {@link TermRangeQuery}. But it can be used  *  to produce fields, that are solely used for sorting (in this case simply use {@link Integer#MAX_VALUE} as  *<code>precisionStep</code>). Using {@link IntField},  *  {@link LongField}, {@link FloatField} or {@link DoubleField} for sorting  *  is ideal, because building the field cache is much faster than with text-only numbers.  *  These fields have one term per value and therefore also work with term enumeration for building distinct lists  *  (e.g. facets / preselected values to search for).  *  Sorting is also possible with range query optimized fields using one of the above<code>precisionSteps</code>.  *</ul>  *  *<p>Comparisons of the different types of RangeQueries on an index with about 500,000 docs showed  * that {@link TermRangeQuery} in boolean rewrite mode (with raised {@link BooleanQuery} clause count)  * took about 30-40 secs to complete, {@link TermRangeQuery} in constant score filter rewrite mode took 5 secs  * and executing this class took&lt;100ms to complete (on an Opteron64 machine, Java 1.5, 8 bit  * precision step). This query type was developed for a geographic portal, where the performance for  * e.g. bounding boxes or exact date/time stamps is important.</p>  *  * @since 2.9  **/
end_comment
begin_class
DECL|class|NumericRangeQuery
specifier|public
specifier|final
class|class
name|NumericRangeQuery
parameter_list|<
name|T
extends|extends
name|Number
parameter_list|>
extends|extends
name|MultiTermQuery
block|{
DECL|method|NumericRangeQuery
specifier|private
name|NumericRangeQuery
parameter_list|(
specifier|final
name|String
name|field
parameter_list|,
specifier|final
name|int
name|precisionStep
parameter_list|,
specifier|final
name|NumericType
name|dataType
parameter_list|,
name|T
name|min
parameter_list|,
name|T
name|max
parameter_list|,
specifier|final
name|boolean
name|minInclusive
parameter_list|,
specifier|final
name|boolean
name|maxInclusive
parameter_list|)
block|{
name|super
argument_list|(
name|field
argument_list|)
expr_stmt|;
if|if
condition|(
name|precisionStep
operator|<
literal|1
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"precisionStep must be>=1"
argument_list|)
throw|;
name|this
operator|.
name|precisionStep
operator|=
name|precisionStep
expr_stmt|;
name|this
operator|.
name|dataType
operator|=
name|dataType
expr_stmt|;
name|this
operator|.
name|min
operator|=
name|min
expr_stmt|;
name|this
operator|.
name|max
operator|=
name|max
expr_stmt|;
name|this
operator|.
name|minInclusive
operator|=
name|minInclusive
expr_stmt|;
name|this
operator|.
name|maxInclusive
operator|=
name|maxInclusive
expr_stmt|;
block|}
comment|/**    * Factory that creates a<code>NumericRangeQuery</code>, that queries a<code>long</code>    * range using the given<a href="#precisionStepDesc"><code>precisionStep</code></a>.    * You can have half-open ranges (which are in fact&lt;/&le; or&gt;/&ge; queries)    * by setting the min or max value to<code>null</code>. By setting inclusive to false, it will    * match all documents excluding the bounds, with inclusive on, the boundaries are hits, too.    */
DECL|method|newLongRange
specifier|public
specifier|static
name|NumericRangeQuery
argument_list|<
name|Long
argument_list|>
name|newLongRange
parameter_list|(
specifier|final
name|String
name|field
parameter_list|,
specifier|final
name|int
name|precisionStep
parameter_list|,
name|Long
name|min
parameter_list|,
name|Long
name|max
parameter_list|,
specifier|final
name|boolean
name|minInclusive
parameter_list|,
specifier|final
name|boolean
name|maxInclusive
parameter_list|)
block|{
return|return
operator|new
name|NumericRangeQuery
argument_list|<
name|Long
argument_list|>
argument_list|(
name|field
argument_list|,
name|precisionStep
argument_list|,
name|NumericType
operator|.
name|LONG
argument_list|,
name|min
argument_list|,
name|max
argument_list|,
name|minInclusive
argument_list|,
name|maxInclusive
argument_list|)
return|;
block|}
comment|/**    * Factory that creates a<code>NumericRangeQuery</code>, that queries a<code>long</code>    * range using the default<code>precisionStep</code> {@link NumericUtils#PRECISION_STEP_DEFAULT} (4).    * You can have half-open ranges (which are in fact&lt;/&le; or&gt;/&ge; queries)    * by setting the min or max value to<code>null</code>. By setting inclusive to false, it will    * match all documents excluding the bounds, with inclusive on, the boundaries are hits, too.    */
DECL|method|newLongRange
specifier|public
specifier|static
name|NumericRangeQuery
argument_list|<
name|Long
argument_list|>
name|newLongRange
parameter_list|(
specifier|final
name|String
name|field
parameter_list|,
name|Long
name|min
parameter_list|,
name|Long
name|max
parameter_list|,
specifier|final
name|boolean
name|minInclusive
parameter_list|,
specifier|final
name|boolean
name|maxInclusive
parameter_list|)
block|{
return|return
operator|new
name|NumericRangeQuery
argument_list|<
name|Long
argument_list|>
argument_list|(
name|field
argument_list|,
name|NumericUtils
operator|.
name|PRECISION_STEP_DEFAULT
argument_list|,
name|NumericType
operator|.
name|LONG
argument_list|,
name|min
argument_list|,
name|max
argument_list|,
name|minInclusive
argument_list|,
name|maxInclusive
argument_list|)
return|;
block|}
comment|/**    * Factory that creates a<code>NumericRangeQuery</code>, that queries a<code>int</code>    * range using the given<a href="#precisionStepDesc"><code>precisionStep</code></a>.    * You can have half-open ranges (which are in fact&lt;/&le; or&gt;/&ge; queries)    * by setting the min or max value to<code>null</code>. By setting inclusive to false, it will    * match all documents excluding the bounds, with inclusive on, the boundaries are hits, too.    */
DECL|method|newIntRange
specifier|public
specifier|static
name|NumericRangeQuery
argument_list|<
name|Integer
argument_list|>
name|newIntRange
parameter_list|(
specifier|final
name|String
name|field
parameter_list|,
specifier|final
name|int
name|precisionStep
parameter_list|,
name|Integer
name|min
parameter_list|,
name|Integer
name|max
parameter_list|,
specifier|final
name|boolean
name|minInclusive
parameter_list|,
specifier|final
name|boolean
name|maxInclusive
parameter_list|)
block|{
return|return
operator|new
name|NumericRangeQuery
argument_list|<
name|Integer
argument_list|>
argument_list|(
name|field
argument_list|,
name|precisionStep
argument_list|,
name|NumericType
operator|.
name|INT
argument_list|,
name|min
argument_list|,
name|max
argument_list|,
name|minInclusive
argument_list|,
name|maxInclusive
argument_list|)
return|;
block|}
comment|/**    * Factory that creates a<code>NumericRangeQuery</code>, that queries a<code>int</code>    * range using the default<code>precisionStep</code> {@link NumericUtils#PRECISION_STEP_DEFAULT} (4).    * You can have half-open ranges (which are in fact&lt;/&le; or&gt;/&ge; queries)    * by setting the min or max value to<code>null</code>. By setting inclusive to false, it will    * match all documents excluding the bounds, with inclusive on, the boundaries are hits, too.    */
DECL|method|newIntRange
specifier|public
specifier|static
name|NumericRangeQuery
argument_list|<
name|Integer
argument_list|>
name|newIntRange
parameter_list|(
specifier|final
name|String
name|field
parameter_list|,
name|Integer
name|min
parameter_list|,
name|Integer
name|max
parameter_list|,
specifier|final
name|boolean
name|minInclusive
parameter_list|,
specifier|final
name|boolean
name|maxInclusive
parameter_list|)
block|{
return|return
operator|new
name|NumericRangeQuery
argument_list|<
name|Integer
argument_list|>
argument_list|(
name|field
argument_list|,
name|NumericUtils
operator|.
name|PRECISION_STEP_DEFAULT
argument_list|,
name|NumericType
operator|.
name|INT
argument_list|,
name|min
argument_list|,
name|max
argument_list|,
name|minInclusive
argument_list|,
name|maxInclusive
argument_list|)
return|;
block|}
comment|/**    * Factory that creates a<code>NumericRangeQuery</code>, that queries a<code>double</code>    * range using the given<a href="#precisionStepDesc"><code>precisionStep</code></a>.    * You can have half-open ranges (which are in fact&lt;/&le; or&gt;/&ge; queries)    * by setting the min or max value to<code>null</code>.    * {@link Double#NaN} will never match a half-open range, to hit {@code NaN} use a query    * with {@code min == max == Double.NaN}.  By setting inclusive to false, it will    * match all documents excluding the bounds, with inclusive on, the boundaries are hits, too.    */
DECL|method|newDoubleRange
specifier|public
specifier|static
name|NumericRangeQuery
argument_list|<
name|Double
argument_list|>
name|newDoubleRange
parameter_list|(
specifier|final
name|String
name|field
parameter_list|,
specifier|final
name|int
name|precisionStep
parameter_list|,
name|Double
name|min
parameter_list|,
name|Double
name|max
parameter_list|,
specifier|final
name|boolean
name|minInclusive
parameter_list|,
specifier|final
name|boolean
name|maxInclusive
parameter_list|)
block|{
return|return
operator|new
name|NumericRangeQuery
argument_list|<
name|Double
argument_list|>
argument_list|(
name|field
argument_list|,
name|precisionStep
argument_list|,
name|NumericType
operator|.
name|DOUBLE
argument_list|,
name|min
argument_list|,
name|max
argument_list|,
name|minInclusive
argument_list|,
name|maxInclusive
argument_list|)
return|;
block|}
comment|/**    * Factory that creates a<code>NumericRangeQuery</code>, that queries a<code>double</code>    * range using the default<code>precisionStep</code> {@link NumericUtils#PRECISION_STEP_DEFAULT} (4).    * You can have half-open ranges (which are in fact&lt;/&le; or&gt;/&ge; queries)    * by setting the min or max value to<code>null</code>.    * {@link Double#NaN} will never match a half-open range, to hit {@code NaN} use a query    * with {@code min == max == Double.NaN}.  By setting inclusive to false, it will    * match all documents excluding the bounds, with inclusive on, the boundaries are hits, too.    */
DECL|method|newDoubleRange
specifier|public
specifier|static
name|NumericRangeQuery
argument_list|<
name|Double
argument_list|>
name|newDoubleRange
parameter_list|(
specifier|final
name|String
name|field
parameter_list|,
name|Double
name|min
parameter_list|,
name|Double
name|max
parameter_list|,
specifier|final
name|boolean
name|minInclusive
parameter_list|,
specifier|final
name|boolean
name|maxInclusive
parameter_list|)
block|{
return|return
operator|new
name|NumericRangeQuery
argument_list|<
name|Double
argument_list|>
argument_list|(
name|field
argument_list|,
name|NumericUtils
operator|.
name|PRECISION_STEP_DEFAULT
argument_list|,
name|NumericType
operator|.
name|DOUBLE
argument_list|,
name|min
argument_list|,
name|max
argument_list|,
name|minInclusive
argument_list|,
name|maxInclusive
argument_list|)
return|;
block|}
comment|/**    * Factory that creates a<code>NumericRangeQuery</code>, that queries a<code>float</code>    * range using the given<a href="#precisionStepDesc"><code>precisionStep</code></a>.    * You can have half-open ranges (which are in fact&lt;/&le; or&gt;/&ge; queries)    * by setting the min or max value to<code>null</code>.    * {@link Float#NaN} will never match a half-open range, to hit {@code NaN} use a query    * with {@code min == max == Float.NaN}.  By setting inclusive to false, it will    * match all documents excluding the bounds, with inclusive on, the boundaries are hits, too.    */
DECL|method|newFloatRange
specifier|public
specifier|static
name|NumericRangeQuery
argument_list|<
name|Float
argument_list|>
name|newFloatRange
parameter_list|(
specifier|final
name|String
name|field
parameter_list|,
specifier|final
name|int
name|precisionStep
parameter_list|,
name|Float
name|min
parameter_list|,
name|Float
name|max
parameter_list|,
specifier|final
name|boolean
name|minInclusive
parameter_list|,
specifier|final
name|boolean
name|maxInclusive
parameter_list|)
block|{
return|return
operator|new
name|NumericRangeQuery
argument_list|<
name|Float
argument_list|>
argument_list|(
name|field
argument_list|,
name|precisionStep
argument_list|,
name|NumericType
operator|.
name|FLOAT
argument_list|,
name|min
argument_list|,
name|max
argument_list|,
name|minInclusive
argument_list|,
name|maxInclusive
argument_list|)
return|;
block|}
comment|/**    * Factory that creates a<code>NumericRangeQuery</code>, that queries a<code>float</code>    * range using the default<code>precisionStep</code> {@link NumericUtils#PRECISION_STEP_DEFAULT} (4).    * You can have half-open ranges (which are in fact&lt;/&le; or&gt;/&ge; queries)    * by setting the min or max value to<code>null</code>.    * {@link Float#NaN} will never match a half-open range, to hit {@code NaN} use a query    * with {@code min == max == Float.NaN}.  By setting inclusive to false, it will    * match all documents excluding the bounds, with inclusive on, the boundaries are hits, too.    */
DECL|method|newFloatRange
specifier|public
specifier|static
name|NumericRangeQuery
argument_list|<
name|Float
argument_list|>
name|newFloatRange
parameter_list|(
specifier|final
name|String
name|field
parameter_list|,
name|Float
name|min
parameter_list|,
name|Float
name|max
parameter_list|,
specifier|final
name|boolean
name|minInclusive
parameter_list|,
specifier|final
name|boolean
name|maxInclusive
parameter_list|)
block|{
return|return
operator|new
name|NumericRangeQuery
argument_list|<
name|Float
argument_list|>
argument_list|(
name|field
argument_list|,
name|NumericUtils
operator|.
name|PRECISION_STEP_DEFAULT
argument_list|,
name|NumericType
operator|.
name|FLOAT
argument_list|,
name|min
argument_list|,
name|max
argument_list|,
name|minInclusive
argument_list|,
name|maxInclusive
argument_list|)
return|;
block|}
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|getTermsEnum
specifier|protected
name|TermsEnum
name|getTermsEnum
parameter_list|(
specifier|final
name|Terms
name|terms
parameter_list|,
name|AttributeSource
name|atts
parameter_list|)
throws|throws
name|IOException
block|{
comment|// very strange: java.lang.Number itself is not Comparable, but all subclasses used here are
if|if
condition|(
name|min
operator|!=
literal|null
operator|&&
name|max
operator|!=
literal|null
operator|&&
operator|(
operator|(
name|Comparable
argument_list|<
name|T
argument_list|>
operator|)
name|min
operator|)
operator|.
name|compareTo
argument_list|(
name|max
argument_list|)
operator|>
literal|0
condition|)
block|{
return|return
name|TermsEnum
operator|.
name|EMPTY
return|;
block|}
return|return
operator|new
name|NumericRangeTermsEnum
argument_list|(
name|terms
operator|.
name|iterator
argument_list|(
literal|null
argument_list|)
argument_list|)
return|;
block|}
comment|/** Returns<code>true</code> if the lower endpoint is inclusive */
DECL|method|includesMin
specifier|public
name|boolean
name|includesMin
parameter_list|()
block|{
return|return
name|minInclusive
return|;
block|}
comment|/** Returns<code>true</code> if the upper endpoint is inclusive */
DECL|method|includesMax
specifier|public
name|boolean
name|includesMax
parameter_list|()
block|{
return|return
name|maxInclusive
return|;
block|}
comment|/** Returns the lower value of this range query */
DECL|method|getMin
specifier|public
name|T
name|getMin
parameter_list|()
block|{
return|return
name|min
return|;
block|}
comment|/** Returns the upper value of this range query */
DECL|method|getMax
specifier|public
name|T
name|getMax
parameter_list|()
block|{
return|return
name|max
return|;
block|}
comment|/** Returns the precision step. */
DECL|method|getPrecisionStep
specifier|public
name|int
name|getPrecisionStep
parameter_list|()
block|{
return|return
name|precisionStep
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|(
specifier|final
name|String
name|field
parameter_list|)
block|{
specifier|final
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|getField
argument_list|()
operator|.
name|equals
argument_list|(
name|field
argument_list|)
condition|)
name|sb
operator|.
name|append
argument_list|(
name|getField
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|append
argument_list|(
name|minInclusive
condition|?
literal|'['
else|:
literal|'{'
argument_list|)
operator|.
name|append
argument_list|(
operator|(
name|min
operator|==
literal|null
operator|)
condition|?
literal|"*"
else|:
name|min
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" TO "
argument_list|)
operator|.
name|append
argument_list|(
operator|(
name|max
operator|==
literal|null
operator|)
condition|?
literal|"*"
else|:
name|max
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
name|maxInclusive
condition|?
literal|']'
else|:
literal|'}'
argument_list|)
operator|.
name|append
argument_list|(
name|ToStringUtils
operator|.
name|boost
argument_list|(
name|getBoost
argument_list|()
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"unchecked"
block|,
literal|"rawtypes"
block|}
argument_list|)
DECL|method|equals
specifier|public
specifier|final
name|boolean
name|equals
parameter_list|(
specifier|final
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
name|this
condition|)
return|return
literal|true
return|;
if|if
condition|(
operator|!
name|super
operator|.
name|equals
argument_list|(
name|o
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|o
operator|instanceof
name|NumericRangeQuery
condition|)
block|{
specifier|final
name|NumericRangeQuery
name|q
init|=
operator|(
name|NumericRangeQuery
operator|)
name|o
decl_stmt|;
return|return
operator|(
operator|(
name|q
operator|.
name|min
operator|==
literal|null
condition|?
name|min
operator|==
literal|null
else|:
name|q
operator|.
name|min
operator|.
name|equals
argument_list|(
name|min
argument_list|)
operator|)
operator|&&
operator|(
name|q
operator|.
name|max
operator|==
literal|null
condition|?
name|max
operator|==
literal|null
else|:
name|q
operator|.
name|max
operator|.
name|equals
argument_list|(
name|max
argument_list|)
operator|)
operator|&&
name|minInclusive
operator|==
name|q
operator|.
name|minInclusive
operator|&&
name|maxInclusive
operator|==
name|q
operator|.
name|maxInclusive
operator|&&
name|precisionStep
operator|==
name|q
operator|.
name|precisionStep
operator|)
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
specifier|final
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|hash
init|=
name|super
operator|.
name|hashCode
argument_list|()
decl_stmt|;
name|hash
operator|+=
name|precisionStep
operator|^
literal|0x64365465
expr_stmt|;
if|if
condition|(
name|min
operator|!=
literal|null
condition|)
name|hash
operator|+=
name|min
operator|.
name|hashCode
argument_list|()
operator|^
literal|0x14fa55fb
expr_stmt|;
if|if
condition|(
name|max
operator|!=
literal|null
condition|)
name|hash
operator|+=
name|max
operator|.
name|hashCode
argument_list|()
operator|^
literal|0x733fa5fe
expr_stmt|;
return|return
name|hash
operator|+
operator|(
name|Boolean
operator|.
name|valueOf
argument_list|(
name|minInclusive
argument_list|)
operator|.
name|hashCode
argument_list|()
operator|^
literal|0x14fa55fb
operator|)
operator|+
operator|(
name|Boolean
operator|.
name|valueOf
argument_list|(
name|maxInclusive
argument_list|)
operator|.
name|hashCode
argument_list|()
operator|^
literal|0x733fa5fe
operator|)
return|;
block|}
comment|// members (package private, to be also fast accessible by NumericRangeTermEnum)
DECL|field|precisionStep
specifier|final
name|int
name|precisionStep
decl_stmt|;
DECL|field|dataType
specifier|final
name|NumericType
name|dataType
decl_stmt|;
DECL|field|min
DECL|field|max
specifier|final
name|T
name|min
decl_stmt|,
name|max
decl_stmt|;
DECL|field|minInclusive
DECL|field|maxInclusive
specifier|final
name|boolean
name|minInclusive
decl_stmt|,
name|maxInclusive
decl_stmt|;
comment|// used to handle float/double infinity correcty
DECL|field|LONG_NEGATIVE_INFINITY
specifier|static
specifier|final
name|long
name|LONG_NEGATIVE_INFINITY
init|=
name|NumericUtils
operator|.
name|doubleToSortableLong
argument_list|(
name|Double
operator|.
name|NEGATIVE_INFINITY
argument_list|)
decl_stmt|;
DECL|field|LONG_POSITIVE_INFINITY
specifier|static
specifier|final
name|long
name|LONG_POSITIVE_INFINITY
init|=
name|NumericUtils
operator|.
name|doubleToSortableLong
argument_list|(
name|Double
operator|.
name|POSITIVE_INFINITY
argument_list|)
decl_stmt|;
DECL|field|INT_NEGATIVE_INFINITY
specifier|static
specifier|final
name|int
name|INT_NEGATIVE_INFINITY
init|=
name|NumericUtils
operator|.
name|floatToSortableInt
argument_list|(
name|Float
operator|.
name|NEGATIVE_INFINITY
argument_list|)
decl_stmt|;
DECL|field|INT_POSITIVE_INFINITY
specifier|static
specifier|final
name|int
name|INT_POSITIVE_INFINITY
init|=
name|NumericUtils
operator|.
name|floatToSortableInt
argument_list|(
name|Float
operator|.
name|POSITIVE_INFINITY
argument_list|)
decl_stmt|;
comment|/**    * Subclass of FilteredTermsEnum for enumerating all terms that match the    * sub-ranges for trie range queries, using flex API.    *<p>    * WARNING: This term enumeration is not guaranteed to be always ordered by    * {@link Term#compareTo}.    * The ordering depends on how {@link NumericUtils#splitLongRange} and    * {@link NumericUtils#splitIntRange} generates the sub-ranges. For    * {@link MultiTermQuery} ordering is not relevant.    */
DECL|class|NumericRangeTermsEnum
specifier|private
specifier|final
class|class
name|NumericRangeTermsEnum
extends|extends
name|FilteredTermsEnum
block|{
DECL|field|currentLowerBound
DECL|field|currentUpperBound
specifier|private
name|BytesRef
name|currentLowerBound
decl_stmt|,
name|currentUpperBound
decl_stmt|;
DECL|field|rangeBounds
specifier|private
specifier|final
name|LinkedList
argument_list|<
name|BytesRef
argument_list|>
name|rangeBounds
init|=
operator|new
name|LinkedList
argument_list|<
name|BytesRef
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|NumericRangeTermsEnum
name|NumericRangeTermsEnum
parameter_list|(
specifier|final
name|TermsEnum
name|tenum
parameter_list|)
block|{
name|super
argument_list|(
name|tenum
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|dataType
condition|)
block|{
case|case
name|LONG
case|:
case|case
name|DOUBLE
case|:
block|{
comment|// lower
name|long
name|minBound
decl_stmt|;
if|if
condition|(
name|dataType
operator|==
name|NumericType
operator|.
name|LONG
condition|)
block|{
name|minBound
operator|=
operator|(
name|min
operator|==
literal|null
operator|)
condition|?
name|Long
operator|.
name|MIN_VALUE
else|:
name|min
operator|.
name|longValue
argument_list|()
expr_stmt|;
block|}
else|else
block|{
assert|assert
name|dataType
operator|==
name|NumericType
operator|.
name|DOUBLE
assert|;
name|minBound
operator|=
operator|(
name|min
operator|==
literal|null
operator|)
condition|?
name|LONG_NEGATIVE_INFINITY
else|:
name|NumericUtils
operator|.
name|doubleToSortableLong
argument_list|(
name|min
operator|.
name|doubleValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|minInclusive
operator|&&
name|min
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|minBound
operator|==
name|Long
operator|.
name|MAX_VALUE
condition|)
break|break;
name|minBound
operator|++
expr_stmt|;
block|}
comment|// upper
name|long
name|maxBound
decl_stmt|;
if|if
condition|(
name|dataType
operator|==
name|NumericType
operator|.
name|LONG
condition|)
block|{
name|maxBound
operator|=
operator|(
name|max
operator|==
literal|null
operator|)
condition|?
name|Long
operator|.
name|MAX_VALUE
else|:
name|max
operator|.
name|longValue
argument_list|()
expr_stmt|;
block|}
else|else
block|{
assert|assert
name|dataType
operator|==
name|NumericType
operator|.
name|DOUBLE
assert|;
name|maxBound
operator|=
operator|(
name|max
operator|==
literal|null
operator|)
condition|?
name|LONG_POSITIVE_INFINITY
else|:
name|NumericUtils
operator|.
name|doubleToSortableLong
argument_list|(
name|max
operator|.
name|doubleValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|maxInclusive
operator|&&
name|max
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|maxBound
operator|==
name|Long
operator|.
name|MIN_VALUE
condition|)
break|break;
name|maxBound
operator|--
expr_stmt|;
block|}
name|NumericUtils
operator|.
name|splitLongRange
argument_list|(
operator|new
name|NumericUtils
operator|.
name|LongRangeBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
specifier|final
name|void
name|addRange
parameter_list|(
name|BytesRef
name|minPrefixCoded
parameter_list|,
name|BytesRef
name|maxPrefixCoded
parameter_list|)
block|{
name|rangeBounds
operator|.
name|add
argument_list|(
name|minPrefixCoded
argument_list|)
expr_stmt|;
name|rangeBounds
operator|.
name|add
argument_list|(
name|maxPrefixCoded
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|,
name|precisionStep
argument_list|,
name|minBound
argument_list|,
name|maxBound
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|INT
case|:
case|case
name|FLOAT
case|:
block|{
comment|// lower
name|int
name|minBound
decl_stmt|;
if|if
condition|(
name|dataType
operator|==
name|NumericType
operator|.
name|INT
condition|)
block|{
name|minBound
operator|=
operator|(
name|min
operator|==
literal|null
operator|)
condition|?
name|Integer
operator|.
name|MIN_VALUE
else|:
name|min
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
else|else
block|{
assert|assert
name|dataType
operator|==
name|NumericType
operator|.
name|FLOAT
assert|;
name|minBound
operator|=
operator|(
name|min
operator|==
literal|null
operator|)
condition|?
name|INT_NEGATIVE_INFINITY
else|:
name|NumericUtils
operator|.
name|floatToSortableInt
argument_list|(
name|min
operator|.
name|floatValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|minInclusive
operator|&&
name|min
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|minBound
operator|==
name|Integer
operator|.
name|MAX_VALUE
condition|)
break|break;
name|minBound
operator|++
expr_stmt|;
block|}
comment|// upper
name|int
name|maxBound
decl_stmt|;
if|if
condition|(
name|dataType
operator|==
name|NumericType
operator|.
name|INT
condition|)
block|{
name|maxBound
operator|=
operator|(
name|max
operator|==
literal|null
operator|)
condition|?
name|Integer
operator|.
name|MAX_VALUE
else|:
name|max
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
else|else
block|{
assert|assert
name|dataType
operator|==
name|NumericType
operator|.
name|FLOAT
assert|;
name|maxBound
operator|=
operator|(
name|max
operator|==
literal|null
operator|)
condition|?
name|INT_POSITIVE_INFINITY
else|:
name|NumericUtils
operator|.
name|floatToSortableInt
argument_list|(
name|max
operator|.
name|floatValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|maxInclusive
operator|&&
name|max
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|maxBound
operator|==
name|Integer
operator|.
name|MIN_VALUE
condition|)
break|break;
name|maxBound
operator|--
expr_stmt|;
block|}
name|NumericUtils
operator|.
name|splitIntRange
argument_list|(
operator|new
name|NumericUtils
operator|.
name|IntRangeBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
specifier|final
name|void
name|addRange
parameter_list|(
name|BytesRef
name|minPrefixCoded
parameter_list|,
name|BytesRef
name|maxPrefixCoded
parameter_list|)
block|{
name|rangeBounds
operator|.
name|add
argument_list|(
name|minPrefixCoded
argument_list|)
expr_stmt|;
name|rangeBounds
operator|.
name|add
argument_list|(
name|maxPrefixCoded
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|,
name|precisionStep
argument_list|,
name|minBound
argument_list|,
name|maxBound
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
comment|// should never happen
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid NumericType"
argument_list|)
throw|;
block|}
block|}
DECL|method|nextRange
specifier|private
name|void
name|nextRange
parameter_list|()
block|{
assert|assert
name|rangeBounds
operator|.
name|size
argument_list|()
operator|%
literal|2
operator|==
literal|0
assert|;
name|currentLowerBound
operator|=
name|rangeBounds
operator|.
name|removeFirst
argument_list|()
expr_stmt|;
assert|assert
name|currentUpperBound
operator|==
literal|null
operator|||
name|currentUpperBound
operator|.
name|compareTo
argument_list|(
name|currentLowerBound
argument_list|)
operator|<=
literal|0
operator|:
literal|"The current upper bound must be<= the new lower bound"
assert|;
name|currentUpperBound
operator|=
name|rangeBounds
operator|.
name|removeFirst
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|nextSeekTerm
specifier|protected
specifier|final
name|BytesRef
name|nextSeekTerm
parameter_list|(
name|BytesRef
name|term
parameter_list|)
block|{
while|while
condition|(
name|rangeBounds
operator|.
name|size
argument_list|()
operator|>=
literal|2
condition|)
block|{
name|nextRange
argument_list|()
expr_stmt|;
comment|// if the new upper bound is before the term parameter, the sub-range is never a hit
if|if
condition|(
name|term
operator|!=
literal|null
operator|&&
name|term
operator|.
name|compareTo
argument_list|(
name|currentUpperBound
argument_list|)
operator|>
literal|0
condition|)
continue|continue;
comment|// never seek backwards, so use current term if lower bound is smaller
return|return
operator|(
name|term
operator|!=
literal|null
operator|&&
name|term
operator|.
name|compareTo
argument_list|(
name|currentLowerBound
argument_list|)
operator|>
literal|0
operator|)
condition|?
name|term
else|:
name|currentLowerBound
return|;
block|}
comment|// no more sub-range enums available
assert|assert
name|rangeBounds
operator|.
name|isEmpty
argument_list|()
assert|;
name|currentLowerBound
operator|=
name|currentUpperBound
operator|=
literal|null
expr_stmt|;
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|protected
specifier|final
name|AcceptStatus
name|accept
parameter_list|(
name|BytesRef
name|term
parameter_list|)
block|{
while|while
condition|(
name|currentUpperBound
operator|==
literal|null
operator|||
name|term
operator|.
name|compareTo
argument_list|(
name|currentUpperBound
argument_list|)
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|rangeBounds
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|AcceptStatus
operator|.
name|END
return|;
comment|// peek next sub-range, only seek if the current term is smaller than next lower bound
if|if
condition|(
name|term
operator|.
name|compareTo
argument_list|(
name|rangeBounds
operator|.
name|getFirst
argument_list|()
argument_list|)
operator|<
literal|0
condition|)
return|return
name|AcceptStatus
operator|.
name|NO_AND_SEEK
return|;
comment|// step forward to next range without seeking, as next lower range bound is less or equal current term
name|nextRange
argument_list|()
expr_stmt|;
block|}
return|return
name|AcceptStatus
operator|.
name|YES
return|;
block|}
block|}
block|}
end_class
end_unit
