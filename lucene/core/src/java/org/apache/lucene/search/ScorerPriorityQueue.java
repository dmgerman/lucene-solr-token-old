begin_unit
begin_package
DECL|package|org.apache.lucene.search
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|PriorityQueue
import|;
end_import
begin_comment
comment|/**  * A priority queue of scorers that orders by current doc ID.  * This specialization is needed over {@link PriorityQueue} because the  * pluggable comparison function makes the rebalancing quite slow.  */
end_comment
begin_class
DECL|class|ScorerPriorityQueue
specifier|final
class|class
name|ScorerPriorityQueue
implements|implements
name|Iterable
argument_list|<
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|ScorerPriorityQueue
operator|.
name|ScorerWrapper
argument_list|>
block|{
DECL|class|ScorerWrapper
specifier|static
class|class
name|ScorerWrapper
block|{
DECL|field|scorer
specifier|final
name|Scorer
name|scorer
decl_stmt|;
DECL|field|cost
specifier|final
name|long
name|cost
decl_stmt|;
DECL|field|doc
name|int
name|doc
decl_stmt|;
comment|// the current doc, used for comparison
DECL|field|next
name|ScorerWrapper
name|next
decl_stmt|;
comment|// reference to a next element, see #topList
comment|// An approximation of the scorer, or the scorer itself if it does not
comment|// support two-phase iteration
DECL|field|approximation
specifier|final
name|DocIdSetIterator
name|approximation
decl_stmt|;
comment|// A two-phase view of the scorer, or null if the scorer does not support
comment|// two-phase iteration
DECL|field|twoPhaseView
specifier|final
name|TwoPhaseIterator
name|twoPhaseView
decl_stmt|;
DECL|method|ScorerWrapper
name|ScorerWrapper
parameter_list|(
name|Scorer
name|scorer
parameter_list|)
block|{
name|this
operator|.
name|scorer
operator|=
name|scorer
expr_stmt|;
name|this
operator|.
name|cost
operator|=
name|scorer
operator|.
name|cost
argument_list|()
expr_stmt|;
name|this
operator|.
name|doc
operator|=
operator|-
literal|1
expr_stmt|;
name|this
operator|.
name|twoPhaseView
operator|=
name|scorer
operator|.
name|asTwoPhaseIterator
argument_list|()
expr_stmt|;
if|if
condition|(
name|twoPhaseView
operator|!=
literal|null
condition|)
block|{
name|approximation
operator|=
name|twoPhaseView
operator|.
name|approximation
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|approximation
operator|=
name|scorer
expr_stmt|;
block|}
block|}
block|}
DECL|method|leftNode
specifier|static
name|int
name|leftNode
parameter_list|(
name|int
name|node
parameter_list|)
block|{
return|return
operator|(
operator|(
name|node
operator|+
literal|1
operator|)
operator|<<
literal|1
operator|)
operator|-
literal|1
return|;
block|}
DECL|method|rightNode
specifier|static
name|int
name|rightNode
parameter_list|(
name|int
name|leftNode
parameter_list|)
block|{
return|return
name|leftNode
operator|+
literal|1
return|;
block|}
DECL|method|parentNode
specifier|static
name|int
name|parentNode
parameter_list|(
name|int
name|node
parameter_list|)
block|{
return|return
operator|(
operator|(
name|node
operator|+
literal|1
operator|)
operator|>>>
literal|1
operator|)
operator|-
literal|1
return|;
block|}
DECL|field|heap
specifier|private
specifier|final
name|ScorerWrapper
index|[]
name|heap
decl_stmt|;
DECL|field|size
specifier|private
name|int
name|size
decl_stmt|;
DECL|method|ScorerPriorityQueue
name|ScorerPriorityQueue
parameter_list|(
name|int
name|maxSize
parameter_list|)
block|{
name|heap
operator|=
operator|new
name|ScorerWrapper
index|[
name|maxSize
index|]
expr_stmt|;
name|size
operator|=
literal|0
expr_stmt|;
block|}
DECL|method|size
name|int
name|size
parameter_list|()
block|{
return|return
name|size
return|;
block|}
DECL|method|top
name|ScorerWrapper
name|top
parameter_list|()
block|{
return|return
name|heap
index|[
literal|0
index|]
return|;
block|}
comment|/** Get the list of scorers which are on the current doc. */
DECL|method|topList
name|ScorerWrapper
name|topList
parameter_list|()
block|{
specifier|final
name|ScorerWrapper
index|[]
name|heap
init|=
name|this
operator|.
name|heap
decl_stmt|;
specifier|final
name|int
name|size
init|=
name|this
operator|.
name|size
decl_stmt|;
name|ScorerWrapper
name|list
init|=
name|heap
index|[
literal|0
index|]
decl_stmt|;
name|list
operator|.
name|next
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|size
operator|>=
literal|3
condition|)
block|{
name|list
operator|=
name|topList
argument_list|(
name|list
argument_list|,
name|heap
argument_list|,
name|size
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|list
operator|=
name|topList
argument_list|(
name|list
argument_list|,
name|heap
argument_list|,
name|size
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|size
operator|==
literal|2
operator|&&
name|heap
index|[
literal|1
index|]
operator|.
name|doc
operator|==
name|list
operator|.
name|doc
condition|)
block|{
name|list
operator|=
name|prepend
argument_list|(
name|heap
index|[
literal|1
index|]
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
return|return
name|list
return|;
block|}
comment|// prepend w1 (scorer) to w2 (list)
DECL|method|prepend
specifier|private
specifier|static
name|ScorerWrapper
name|prepend
parameter_list|(
name|ScorerWrapper
name|w1
parameter_list|,
name|ScorerWrapper
name|w2
parameter_list|)
block|{
name|w1
operator|.
name|next
operator|=
name|w2
expr_stmt|;
return|return
name|w1
return|;
block|}
DECL|method|topList
specifier|private
specifier|static
name|ScorerWrapper
name|topList
parameter_list|(
name|ScorerWrapper
name|list
parameter_list|,
name|ScorerWrapper
index|[]
name|heap
parameter_list|,
name|int
name|size
parameter_list|,
name|int
name|i
parameter_list|)
block|{
specifier|final
name|ScorerWrapper
name|w
init|=
name|heap
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|w
operator|.
name|doc
operator|==
name|list
operator|.
name|doc
condition|)
block|{
name|list
operator|=
name|prepend
argument_list|(
name|w
argument_list|,
name|list
argument_list|)
expr_stmt|;
specifier|final
name|int
name|left
init|=
name|leftNode
argument_list|(
name|i
argument_list|)
decl_stmt|;
specifier|final
name|int
name|right
init|=
name|left
operator|+
literal|1
decl_stmt|;
if|if
condition|(
name|right
operator|<
name|size
condition|)
block|{
name|list
operator|=
name|topList
argument_list|(
name|list
argument_list|,
name|heap
argument_list|,
name|size
argument_list|,
name|left
argument_list|)
expr_stmt|;
name|list
operator|=
name|topList
argument_list|(
name|list
argument_list|,
name|heap
argument_list|,
name|size
argument_list|,
name|right
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|left
operator|<
name|size
operator|&&
name|heap
index|[
name|left
index|]
operator|.
name|doc
operator|==
name|list
operator|.
name|doc
condition|)
block|{
name|list
operator|=
name|prepend
argument_list|(
name|heap
index|[
name|left
index|]
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|list
return|;
block|}
DECL|method|add
name|ScorerWrapper
name|add
parameter_list|(
name|ScorerWrapper
name|entry
parameter_list|)
block|{
specifier|final
name|ScorerWrapper
index|[]
name|heap
init|=
name|this
operator|.
name|heap
decl_stmt|;
specifier|final
name|int
name|size
init|=
name|this
operator|.
name|size
decl_stmt|;
name|heap
index|[
name|size
index|]
operator|=
name|entry
expr_stmt|;
name|upHeap
argument_list|(
name|heap
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|this
operator|.
name|size
operator|=
name|size
operator|+
literal|1
expr_stmt|;
return|return
name|heap
index|[
literal|0
index|]
return|;
block|}
DECL|method|pop
name|ScorerWrapper
name|pop
parameter_list|()
block|{
specifier|final
name|ScorerWrapper
index|[]
name|heap
init|=
name|this
operator|.
name|heap
decl_stmt|;
specifier|final
name|ScorerWrapper
name|result
init|=
name|heap
index|[
literal|0
index|]
decl_stmt|;
specifier|final
name|int
name|i
init|=
operator|--
name|size
decl_stmt|;
name|heap
index|[
literal|0
index|]
operator|=
name|heap
index|[
name|i
index|]
expr_stmt|;
name|heap
index|[
name|i
index|]
operator|=
literal|null
expr_stmt|;
name|downHeap
argument_list|(
name|heap
argument_list|,
name|i
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
DECL|method|updateTop
name|ScorerWrapper
name|updateTop
parameter_list|()
block|{
name|downHeap
argument_list|(
name|heap
argument_list|,
name|size
argument_list|)
expr_stmt|;
return|return
name|heap
index|[
literal|0
index|]
return|;
block|}
DECL|method|updateTop
name|ScorerWrapper
name|updateTop
parameter_list|(
name|ScorerWrapper
name|topReplacement
parameter_list|)
block|{
name|heap
index|[
literal|0
index|]
operator|=
name|topReplacement
expr_stmt|;
return|return
name|updateTop
argument_list|()
return|;
block|}
DECL|method|upHeap
specifier|static
name|void
name|upHeap
parameter_list|(
name|ScorerWrapper
index|[]
name|heap
parameter_list|,
name|int
name|i
parameter_list|)
block|{
specifier|final
name|ScorerWrapper
name|node
init|=
name|heap
index|[
name|i
index|]
decl_stmt|;
specifier|final
name|int
name|nodeDoc
init|=
name|node
operator|.
name|doc
decl_stmt|;
name|int
name|j
init|=
name|parentNode
argument_list|(
name|i
argument_list|)
decl_stmt|;
while|while
condition|(
name|j
operator|>=
literal|0
operator|&&
name|nodeDoc
operator|<
name|heap
index|[
name|j
index|]
operator|.
name|doc
condition|)
block|{
name|heap
index|[
name|i
index|]
operator|=
name|heap
index|[
name|j
index|]
expr_stmt|;
name|i
operator|=
name|j
expr_stmt|;
name|j
operator|=
name|parentNode
argument_list|(
name|j
argument_list|)
expr_stmt|;
block|}
name|heap
index|[
name|i
index|]
operator|=
name|node
expr_stmt|;
block|}
DECL|method|downHeap
specifier|static
name|void
name|downHeap
parameter_list|(
name|ScorerWrapper
index|[]
name|heap
parameter_list|,
name|int
name|size
parameter_list|)
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
specifier|final
name|ScorerWrapper
name|node
init|=
name|heap
index|[
literal|0
index|]
decl_stmt|;
name|int
name|j
init|=
name|leftNode
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|j
operator|<
name|size
condition|)
block|{
name|int
name|k
init|=
name|rightNode
argument_list|(
name|j
argument_list|)
decl_stmt|;
if|if
condition|(
name|k
operator|<
name|size
operator|&&
name|heap
index|[
name|k
index|]
operator|.
name|doc
operator|<
name|heap
index|[
name|j
index|]
operator|.
name|doc
condition|)
block|{
name|j
operator|=
name|k
expr_stmt|;
block|}
if|if
condition|(
name|heap
index|[
name|j
index|]
operator|.
name|doc
operator|<
name|node
operator|.
name|doc
condition|)
block|{
do|do
block|{
name|heap
index|[
name|i
index|]
operator|=
name|heap
index|[
name|j
index|]
expr_stmt|;
name|i
operator|=
name|j
expr_stmt|;
name|j
operator|=
name|leftNode
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|k
operator|=
name|rightNode
argument_list|(
name|j
argument_list|)
expr_stmt|;
if|if
condition|(
name|k
operator|<
name|size
operator|&&
name|heap
index|[
name|k
index|]
operator|.
name|doc
operator|<
name|heap
index|[
name|j
index|]
operator|.
name|doc
condition|)
block|{
name|j
operator|=
name|k
expr_stmt|;
block|}
block|}
do|while
condition|(
name|j
operator|<
name|size
operator|&&
name|heap
index|[
name|j
index|]
operator|.
name|doc
operator|<
name|node
operator|.
name|doc
condition|)
do|;
name|heap
index|[
name|i
index|]
operator|=
name|node
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|iterator
specifier|public
name|Iterator
argument_list|<
name|ScorerWrapper
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|heap
argument_list|)
operator|.
name|subList
argument_list|(
literal|0
argument_list|,
name|size
argument_list|)
operator|.
name|iterator
argument_list|()
return|;
block|}
block|}
end_class
end_unit
