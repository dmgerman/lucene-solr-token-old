begin_unit
begin_package
DECL|package|org.apache.lucene.search
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Bits
import|;
end_import
begin_comment
comment|/**  * This implementation supplies a filtered DocIdSet, that excludes all  * docids which are not in a Bits instance. This is especially useful in  * {@link org.apache.lucene.search.Filter} to apply the {@code acceptDocs}  * passed to {@code getDocIdSet()} before returning the final DocIdSet.  *  * @see DocIdSet  * @see org.apache.lucene.search.Filter  */
end_comment
begin_class
DECL|class|BitsFilteredDocIdSet
specifier|public
specifier|final
class|class
name|BitsFilteredDocIdSet
extends|extends
name|FilteredDocIdSet
block|{
DECL|field|acceptDocs
specifier|private
specifier|final
name|Bits
name|acceptDocs
decl_stmt|;
comment|/**    * Convenience wrapper method: If {@code acceptDocs == null} it returns the original set without wrapping.    * @param set Underlying DocIdSet. If {@code null}, this method returns {@code null}    * @param acceptDocs Allowed docs, all docids not in this set will not be returned by this DocIdSet.    * If {@code null}, this method returns the original set without wrapping.    */
DECL|method|wrap
specifier|public
specifier|static
name|DocIdSet
name|wrap
parameter_list|(
name|DocIdSet
name|set
parameter_list|,
name|Bits
name|acceptDocs
parameter_list|)
block|{
return|return
operator|(
name|set
operator|==
literal|null
operator|||
name|acceptDocs
operator|==
literal|null
operator|)
condition|?
name|set
else|:
operator|new
name|BitsFilteredDocIdSet
argument_list|(
name|set
argument_list|,
name|acceptDocs
argument_list|)
return|;
block|}
comment|/**    * Constructor.    * @param innerSet Underlying DocIdSet    * @param acceptDocs Allowed docs, all docids not in this set will not be returned by this DocIdSet    */
DECL|method|BitsFilteredDocIdSet
specifier|public
name|BitsFilteredDocIdSet
parameter_list|(
name|DocIdSet
name|innerSet
parameter_list|,
name|Bits
name|acceptDocs
parameter_list|)
block|{
name|super
argument_list|(
name|innerSet
argument_list|)
expr_stmt|;
if|if
condition|(
name|acceptDocs
operator|==
literal|null
condition|)
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"acceptDocs is null"
argument_list|)
throw|;
name|this
operator|.
name|acceptDocs
operator|=
name|acceptDocs
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|match
specifier|protected
name|boolean
name|match
parameter_list|(
name|int
name|docid
parameter_list|)
block|{
return|return
name|acceptDocs
operator|.
name|get
argument_list|(
name|docid
argument_list|)
return|;
block|}
block|}
end_class
end_unit
