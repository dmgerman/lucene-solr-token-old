begin_unit
begin_package
DECL|package|org.apache.lucene.search
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
package|;
end_package
begin_comment
comment|/**  * Copyright 2004 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_comment
comment|/**  * The Scorer for DisjunctionMaxQuery.  The union of all documents generated by the the subquery scorers  * is generated in document number order.  The score for each document is the maximum of the scores computed  * by the subquery scorers that generate that document, plus tieBreakerMultiplier times the sum of the scores  * for the other subqueries that generate the document.  */
end_comment
begin_class
DECL|class|DisjunctionMaxScorer
class|class
name|DisjunctionMaxScorer
extends|extends
name|DisjunctionScorer
block|{
comment|/* Multiplier applied to non-maximum-scoring subqueries for a document as they are summed into the result. */
DECL|field|tieBreakerMultiplier
specifier|private
specifier|final
name|float
name|tieBreakerMultiplier
decl_stmt|;
DECL|field|doc
specifier|private
name|int
name|doc
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|freq
specifier|private
name|int
name|freq
init|=
operator|-
literal|1
decl_stmt|;
comment|/* Used when scoring currently matching doc. */
DECL|field|scoreSum
specifier|private
name|float
name|scoreSum
decl_stmt|;
DECL|field|scoreMax
specifier|private
name|float
name|scoreMax
decl_stmt|;
comment|/**    * Creates a new instance of DisjunctionMaxScorer    *     * @param weight    *          The Weight to be used.    * @param tieBreakerMultiplier    *          Multiplier applied to non-maximum-scoring subqueries for a    *          document as they are summed into the result.    * @param subScorers    *          The sub scorers this Scorer should iterate on    * @param numScorers    *          The actual number of scorers to iterate on. Note that the array's    *          length may be larger than the actual number of scorers.    */
DECL|method|DisjunctionMaxScorer
specifier|public
name|DisjunctionMaxScorer
parameter_list|(
name|Weight
name|weight
parameter_list|,
name|float
name|tieBreakerMultiplier
parameter_list|,
name|Scorer
index|[]
name|subScorers
parameter_list|,
name|int
name|numScorers
parameter_list|)
block|{
name|super
argument_list|(
name|weight
argument_list|,
name|subScorers
argument_list|,
name|numScorers
argument_list|)
expr_stmt|;
name|this
operator|.
name|tieBreakerMultiplier
operator|=
name|tieBreakerMultiplier
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|nextDoc
specifier|public
name|int
name|nextDoc
parameter_list|()
throws|throws
name|IOException
block|{
assert|assert
name|doc
operator|!=
name|NO_MORE_DOCS
assert|;
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
name|subScorers
index|[
literal|0
index|]
operator|.
name|nextDoc
argument_list|()
operator|!=
name|NO_MORE_DOCS
condition|)
block|{
name|heapAdjust
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|heapRemoveRoot
argument_list|()
expr_stmt|;
if|if
condition|(
name|numScorers
operator|==
literal|0
condition|)
block|{
return|return
name|doc
operator|=
name|NO_MORE_DOCS
return|;
block|}
block|}
if|if
condition|(
name|subScorers
index|[
literal|0
index|]
operator|.
name|docID
argument_list|()
operator|!=
name|doc
condition|)
block|{
name|afterNext
argument_list|()
expr_stmt|;
return|return
name|doc
return|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|docID
specifier|public
name|int
name|docID
parameter_list|()
block|{
return|return
name|doc
return|;
block|}
comment|/** Determine the current document score.  Initially invalid, until {@link #nextDoc()} is called the first time.    * @return the score of the current generated document    */
annotation|@
name|Override
DECL|method|score
specifier|public
name|float
name|score
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|scoreMax
operator|+
operator|(
name|scoreSum
operator|-
name|scoreMax
operator|)
operator|*
name|tieBreakerMultiplier
return|;
block|}
DECL|method|afterNext
specifier|private
name|void
name|afterNext
parameter_list|()
throws|throws
name|IOException
block|{
name|doc
operator|=
name|subScorers
index|[
literal|0
index|]
operator|.
name|docID
argument_list|()
expr_stmt|;
if|if
condition|(
name|doc
operator|!=
name|NO_MORE_DOCS
condition|)
block|{
name|scoreSum
operator|=
name|scoreMax
operator|=
name|subScorers
index|[
literal|0
index|]
operator|.
name|score
argument_list|()
expr_stmt|;
name|freq
operator|=
literal|1
expr_stmt|;
name|scoreAll
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|scoreAll
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Recursively iterate all subScorers that generated last doc computing sum and max
DECL|method|scoreAll
specifier|private
name|void
name|scoreAll
parameter_list|(
name|int
name|root
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|root
operator|<
name|numScorers
operator|&&
name|subScorers
index|[
name|root
index|]
operator|.
name|docID
argument_list|()
operator|==
name|doc
condition|)
block|{
name|float
name|sub
init|=
name|subScorers
index|[
name|root
index|]
operator|.
name|score
argument_list|()
decl_stmt|;
name|freq
operator|++
expr_stmt|;
name|scoreSum
operator|+=
name|sub
expr_stmt|;
name|scoreMax
operator|=
name|Math
operator|.
name|max
argument_list|(
name|scoreMax
argument_list|,
name|sub
argument_list|)
expr_stmt|;
name|scoreAll
argument_list|(
operator|(
name|root
operator|<<
literal|1
operator|)
operator|+
literal|1
argument_list|)
expr_stmt|;
name|scoreAll
argument_list|(
operator|(
name|root
operator|<<
literal|1
operator|)
operator|+
literal|2
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|freq
specifier|public
name|int
name|freq
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|freq
return|;
block|}
annotation|@
name|Override
DECL|method|advance
specifier|public
name|int
name|advance
parameter_list|(
name|int
name|target
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|doc
operator|!=
name|NO_MORE_DOCS
assert|;
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
name|subScorers
index|[
literal|0
index|]
operator|.
name|advance
argument_list|(
name|target
argument_list|)
operator|!=
name|NO_MORE_DOCS
condition|)
block|{
name|heapAdjust
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|heapRemoveRoot
argument_list|()
expr_stmt|;
if|if
condition|(
name|numScorers
operator|==
literal|0
condition|)
block|{
return|return
name|doc
operator|=
name|NO_MORE_DOCS
return|;
block|}
block|}
if|if
condition|(
name|subScorers
index|[
literal|0
index|]
operator|.
name|docID
argument_list|()
operator|>=
name|target
condition|)
block|{
name|afterNext
argument_list|()
expr_stmt|;
return|return
name|doc
return|;
block|}
block|}
block|}
block|}
end_class
end_unit
