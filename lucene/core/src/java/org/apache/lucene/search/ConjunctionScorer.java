begin_unit
begin_package
DECL|package|org.apache.lucene.search
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_comment
comment|/** Scorer for conjunctions, sets of queries, all of which are required. */
end_comment
begin_class
DECL|class|ConjunctionScorer
class|class
name|ConjunctionScorer
extends|extends
name|Scorer
block|{
DECL|field|disi
specifier|private
specifier|final
name|ConjunctionDISI
name|disi
decl_stmt|;
DECL|field|scorers
specifier|private
specifier|final
name|Scorer
index|[]
name|scorers
decl_stmt|;
DECL|field|coord
specifier|private
specifier|final
name|float
name|coord
decl_stmt|;
DECL|method|ConjunctionScorer
name|ConjunctionScorer
parameter_list|(
name|Weight
name|weight
parameter_list|,
name|List
argument_list|<
name|?
extends|extends
name|DocIdSetIterator
argument_list|>
name|required
parameter_list|,
name|List
argument_list|<
name|Scorer
argument_list|>
name|scorers
parameter_list|)
block|{
name|this
argument_list|(
name|weight
argument_list|,
name|required
argument_list|,
name|scorers
argument_list|,
literal|1f
argument_list|)
expr_stmt|;
block|}
comment|/** Create a new {@link ConjunctionScorer}, note that {@code scorers} must be a subset of {@code required}. */
DECL|method|ConjunctionScorer
name|ConjunctionScorer
parameter_list|(
name|Weight
name|weight
parameter_list|,
name|List
argument_list|<
name|?
extends|extends
name|DocIdSetIterator
argument_list|>
name|required
parameter_list|,
name|List
argument_list|<
name|Scorer
argument_list|>
name|scorers
parameter_list|,
name|float
name|coord
parameter_list|)
block|{
name|super
argument_list|(
name|weight
argument_list|)
expr_stmt|;
assert|assert
name|required
operator|.
name|containsAll
argument_list|(
name|scorers
argument_list|)
assert|;
name|this
operator|.
name|coord
operator|=
name|coord
expr_stmt|;
name|this
operator|.
name|disi
operator|=
name|ConjunctionDISI
operator|.
name|intersect
argument_list|(
name|required
argument_list|)
expr_stmt|;
name|this
operator|.
name|scorers
operator|=
name|scorers
operator|.
name|toArray
argument_list|(
operator|new
name|Scorer
index|[
name|scorers
operator|.
name|size
argument_list|()
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|asTwoPhaseIterator
specifier|public
name|TwoPhaseIterator
name|asTwoPhaseIterator
parameter_list|()
block|{
return|return
name|disi
operator|.
name|asTwoPhaseIterator
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|advance
specifier|public
name|int
name|advance
parameter_list|(
name|int
name|target
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|disi
operator|.
name|advance
argument_list|(
name|target
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|docID
specifier|public
name|int
name|docID
parameter_list|()
block|{
return|return
name|disi
operator|.
name|docID
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|nextDoc
specifier|public
name|int
name|nextDoc
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|disi
operator|.
name|nextDoc
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|score
specifier|public
name|float
name|score
parameter_list|()
throws|throws
name|IOException
block|{
name|double
name|sum
init|=
literal|0.0d
decl_stmt|;
for|for
control|(
name|Scorer
name|scorer
range|:
name|scorers
control|)
block|{
name|sum
operator|+=
name|scorer
operator|.
name|score
argument_list|()
expr_stmt|;
block|}
return|return
name|coord
operator|*
operator|(
name|float
operator|)
name|sum
return|;
block|}
annotation|@
name|Override
DECL|method|freq
specifier|public
name|int
name|freq
parameter_list|()
block|{
return|return
name|scorers
operator|.
name|length
return|;
block|}
annotation|@
name|Override
DECL|method|cost
specifier|public
name|long
name|cost
parameter_list|()
block|{
return|return
name|disi
operator|.
name|cost
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getChildren
specifier|public
name|Collection
argument_list|<
name|ChildScorer
argument_list|>
name|getChildren
parameter_list|()
block|{
name|ArrayList
argument_list|<
name|ChildScorer
argument_list|>
name|children
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Scorer
name|scorer
range|:
name|scorers
control|)
block|{
name|children
operator|.
name|add
argument_list|(
operator|new
name|ChildScorer
argument_list|(
name|scorer
argument_list|,
literal|"MUST"
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|children
return|;
block|}
DECL|class|DocsAndFreqs
specifier|static
specifier|final
class|class
name|DocsAndFreqs
block|{
DECL|field|cost
specifier|final
name|long
name|cost
decl_stmt|;
DECL|field|iterator
specifier|final
name|DocIdSetIterator
name|iterator
decl_stmt|;
DECL|field|doc
name|int
name|doc
init|=
operator|-
literal|1
decl_stmt|;
DECL|method|DocsAndFreqs
name|DocsAndFreqs
parameter_list|(
name|DocIdSetIterator
name|iterator
parameter_list|)
block|{
name|this
operator|.
name|iterator
operator|=
name|iterator
expr_stmt|;
name|this
operator|.
name|cost
operator|=
name|iterator
operator|.
name|cost
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class
end_unit
