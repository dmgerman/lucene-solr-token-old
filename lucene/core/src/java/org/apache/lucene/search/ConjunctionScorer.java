begin_unit
begin_package
DECL|package|org.apache.lucene.search
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|ArrayUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_comment
comment|/** Scorer for conjunctions, sets of queries, all of which are required. */
end_comment
begin_class
DECL|class|ConjunctionScorer
class|class
name|ConjunctionScorer
extends|extends
name|Scorer
block|{
DECL|field|lastDoc
specifier|protected
name|int
name|lastDoc
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|docsAndFreqs
specifier|protected
specifier|final
name|DocsAndFreqs
index|[]
name|docsAndFreqs
decl_stmt|;
DECL|field|lead
specifier|private
specifier|final
name|DocsAndFreqs
name|lead
decl_stmt|;
DECL|field|coord
specifier|private
specifier|final
name|float
name|coord
decl_stmt|;
DECL|method|ConjunctionScorer
name|ConjunctionScorer
parameter_list|(
name|Weight
name|weight
parameter_list|,
name|Scorer
index|[]
name|scorers
parameter_list|)
block|{
name|this
argument_list|(
name|weight
argument_list|,
name|scorers
argument_list|,
literal|1f
argument_list|)
expr_stmt|;
block|}
DECL|method|ConjunctionScorer
name|ConjunctionScorer
parameter_list|(
name|Weight
name|weight
parameter_list|,
name|Scorer
index|[]
name|scorers
parameter_list|,
name|float
name|coord
parameter_list|)
block|{
name|super
argument_list|(
name|weight
argument_list|)
expr_stmt|;
name|this
operator|.
name|coord
operator|=
name|coord
expr_stmt|;
name|this
operator|.
name|docsAndFreqs
operator|=
operator|new
name|DocsAndFreqs
index|[
name|scorers
operator|.
name|length
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|scorers
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|docsAndFreqs
index|[
name|i
index|]
operator|=
operator|new
name|DocsAndFreqs
argument_list|(
name|scorers
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
comment|// Sort the array the first time to allow the least frequent DocsEnum to
comment|// lead the matching.
name|ArrayUtil
operator|.
name|timSort
argument_list|(
name|docsAndFreqs
argument_list|,
operator|new
name|Comparator
argument_list|<
name|DocsAndFreqs
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|DocsAndFreqs
name|o1
parameter_list|,
name|DocsAndFreqs
name|o2
parameter_list|)
block|{
return|return
name|Long
operator|.
name|compare
argument_list|(
name|o1
operator|.
name|cost
argument_list|,
name|o2
operator|.
name|cost
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|lead
operator|=
name|docsAndFreqs
index|[
literal|0
index|]
expr_stmt|;
comment|// least frequent DocsEnum leads the intersection
block|}
DECL|method|doNext
specifier|private
name|int
name|doNext
parameter_list|(
name|int
name|doc
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
init|;
condition|;
control|)
block|{
comment|// doc may already be NO_MORE_DOCS here, but we don't check explicitly
comment|// since all scorers should advance to NO_MORE_DOCS, match, then
comment|// return that value.
name|advanceHead
label|:
for|for
control|(
init|;
condition|;
control|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|docsAndFreqs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
comment|// invariant: docsAndFreqs[i].doc<= doc at this point.
comment|// docsAndFreqs[i].doc may already be equal to doc if we "broke advanceHead"
comment|// on the previous iteration and the advance on the lead scorer exactly matched.
if|if
condition|(
name|docsAndFreqs
index|[
name|i
index|]
operator|.
name|doc
operator|<
name|doc
condition|)
block|{
name|docsAndFreqs
index|[
name|i
index|]
operator|.
name|doc
operator|=
name|docsAndFreqs
index|[
name|i
index|]
operator|.
name|scorer
operator|.
name|advance
argument_list|(
name|doc
argument_list|)
expr_stmt|;
if|if
condition|(
name|docsAndFreqs
index|[
name|i
index|]
operator|.
name|doc
operator|>
name|doc
condition|)
block|{
comment|// DocsEnum beyond the current doc - break and advance lead to the new highest doc.
name|doc
operator|=
name|docsAndFreqs
index|[
name|i
index|]
operator|.
name|doc
expr_stmt|;
break|break
name|advanceHead
break|;
block|}
block|}
block|}
comment|// success - all DocsEnums are on the same doc
return|return
name|doc
return|;
block|}
comment|// advance head for next iteration
name|doc
operator|=
name|lead
operator|.
name|doc
operator|=
name|lead
operator|.
name|scorer
operator|.
name|advance
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|advance
specifier|public
name|int
name|advance
parameter_list|(
name|int
name|target
parameter_list|)
throws|throws
name|IOException
block|{
name|lead
operator|.
name|doc
operator|=
name|lead
operator|.
name|scorer
operator|.
name|advance
argument_list|(
name|target
argument_list|)
expr_stmt|;
return|return
name|lastDoc
operator|=
name|doNext
argument_list|(
name|lead
operator|.
name|doc
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|docID
specifier|public
name|int
name|docID
parameter_list|()
block|{
return|return
name|lastDoc
return|;
block|}
annotation|@
name|Override
DECL|method|nextDoc
specifier|public
name|int
name|nextDoc
parameter_list|()
throws|throws
name|IOException
block|{
name|lead
operator|.
name|doc
operator|=
name|lead
operator|.
name|scorer
operator|.
name|nextDoc
argument_list|()
expr_stmt|;
return|return
name|lastDoc
operator|=
name|doNext
argument_list|(
name|lead
operator|.
name|doc
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|score
specifier|public
name|float
name|score
parameter_list|()
throws|throws
name|IOException
block|{
comment|// TODO: sum into a double and cast to float if we ever send required clauses to BS1
name|float
name|sum
init|=
literal|0.0f
decl_stmt|;
for|for
control|(
name|DocsAndFreqs
name|docs
range|:
name|docsAndFreqs
control|)
block|{
name|sum
operator|+=
name|docs
operator|.
name|scorer
operator|.
name|score
argument_list|()
expr_stmt|;
block|}
return|return
name|sum
operator|*
name|coord
return|;
block|}
annotation|@
name|Override
DECL|method|freq
specifier|public
name|int
name|freq
parameter_list|()
block|{
return|return
name|docsAndFreqs
operator|.
name|length
return|;
block|}
annotation|@
name|Override
DECL|method|nextPosition
specifier|public
name|int
name|nextPosition
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|-
literal|1
return|;
block|}
annotation|@
name|Override
DECL|method|startOffset
specifier|public
name|int
name|startOffset
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|-
literal|1
return|;
block|}
annotation|@
name|Override
DECL|method|endOffset
specifier|public
name|int
name|endOffset
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|-
literal|1
return|;
block|}
annotation|@
name|Override
DECL|method|getPayload
specifier|public
name|BytesRef
name|getPayload
parameter_list|()
throws|throws
name|IOException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|cost
specifier|public
name|long
name|cost
parameter_list|()
block|{
return|return
name|lead
operator|.
name|scorer
operator|.
name|cost
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getChildren
specifier|public
name|Collection
argument_list|<
name|ChildScorer
argument_list|>
name|getChildren
parameter_list|()
block|{
name|ArrayList
argument_list|<
name|ChildScorer
argument_list|>
name|children
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|docsAndFreqs
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|DocsAndFreqs
name|docs
range|:
name|docsAndFreqs
control|)
block|{
name|children
operator|.
name|add
argument_list|(
operator|new
name|ChildScorer
argument_list|(
name|docs
operator|.
name|scorer
argument_list|,
literal|"MUST"
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|children
return|;
block|}
DECL|class|DocsAndFreqs
specifier|static
specifier|final
class|class
name|DocsAndFreqs
block|{
DECL|field|cost
specifier|final
name|long
name|cost
decl_stmt|;
DECL|field|scorer
specifier|final
name|Scorer
name|scorer
decl_stmt|;
DECL|field|doc
name|int
name|doc
init|=
operator|-
literal|1
decl_stmt|;
DECL|method|DocsAndFreqs
name|DocsAndFreqs
parameter_list|(
name|Scorer
name|scorer
parameter_list|)
block|{
name|this
operator|.
name|scorer
operator|=
name|scorer
expr_stmt|;
name|this
operator|.
name|cost
operator|=
name|scorer
operator|.
name|cost
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class
end_unit
