begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.search
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_comment
comment|/** A Scorer for queries with a required subscorer  * and an excluding (prohibited) sub {@link Scorer}.  */
end_comment
begin_class
DECL|class|ReqExclScorer
class|class
name|ReqExclScorer
extends|extends
name|Scorer
block|{
DECL|field|reqScorer
specifier|private
specifier|final
name|Scorer
name|reqScorer
decl_stmt|;
comment|// approximations of the scorers, or the scorers themselves if they don't support approximations
DECL|field|reqApproximation
specifier|private
specifier|final
name|DocIdSetIterator
name|reqApproximation
decl_stmt|;
DECL|field|exclApproximation
specifier|private
specifier|final
name|DocIdSetIterator
name|exclApproximation
decl_stmt|;
comment|// two-phase views of the scorers, or null if they do not support approximations
DECL|field|reqTwoPhaseIterator
specifier|private
specifier|final
name|TwoPhaseIterator
name|reqTwoPhaseIterator
decl_stmt|;
DECL|field|exclTwoPhaseIterator
specifier|private
specifier|final
name|TwoPhaseIterator
name|exclTwoPhaseIterator
decl_stmt|;
comment|/** Construct a<code>ReqExclScorer</code>.    * @param reqScorer The scorer that must match, except where    * @param exclScorer indicates exclusion.    */
DECL|method|ReqExclScorer
specifier|public
name|ReqExclScorer
parameter_list|(
name|Scorer
name|reqScorer
parameter_list|,
name|Scorer
name|exclScorer
parameter_list|)
block|{
name|super
argument_list|(
name|reqScorer
operator|.
name|weight
argument_list|)
expr_stmt|;
name|this
operator|.
name|reqScorer
operator|=
name|reqScorer
expr_stmt|;
name|reqTwoPhaseIterator
operator|=
name|reqScorer
operator|.
name|twoPhaseIterator
argument_list|()
expr_stmt|;
if|if
condition|(
name|reqTwoPhaseIterator
operator|==
literal|null
condition|)
block|{
name|reqApproximation
operator|=
name|reqScorer
operator|.
name|iterator
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|reqApproximation
operator|=
name|reqTwoPhaseIterator
operator|.
name|approximation
argument_list|()
expr_stmt|;
block|}
name|exclTwoPhaseIterator
operator|=
name|exclScorer
operator|.
name|twoPhaseIterator
argument_list|()
expr_stmt|;
if|if
condition|(
name|exclTwoPhaseIterator
operator|==
literal|null
condition|)
block|{
name|exclApproximation
operator|=
name|exclScorer
operator|.
name|iterator
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|exclApproximation
operator|=
name|exclTwoPhaseIterator
operator|.
name|approximation
argument_list|()
expr_stmt|;
block|}
block|}
comment|/** Confirms whether or not the given {@link TwoPhaseIterator}    *  matches on the current document. */
DECL|method|matchesOrNull
specifier|private
specifier|static
name|boolean
name|matchesOrNull
parameter_list|(
name|TwoPhaseIterator
name|it
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|it
operator|==
literal|null
operator|||
name|it
operator|.
name|matches
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|iterator
specifier|public
name|DocIdSetIterator
name|iterator
parameter_list|()
block|{
return|return
name|TwoPhaseIterator
operator|.
name|asDocIdSetIterator
argument_list|(
name|twoPhaseIterator
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|docID
specifier|public
name|int
name|docID
parameter_list|()
block|{
return|return
name|reqApproximation
operator|.
name|docID
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|freq
specifier|public
name|int
name|freq
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|reqScorer
operator|.
name|freq
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|score
specifier|public
name|float
name|score
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|reqScorer
operator|.
name|score
argument_list|()
return|;
comment|// reqScorer may be null when next() or skipTo() already return false
block|}
annotation|@
name|Override
DECL|method|getChildren
specifier|public
name|Collection
argument_list|<
name|ChildScorer
argument_list|>
name|getChildren
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|singleton
argument_list|(
operator|new
name|ChildScorer
argument_list|(
name|reqScorer
argument_list|,
literal|"MUST"
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Estimation of the number of operations required to call DISI.advance.    * This is likely completely wrong, especially given that the cost of    * this method usually depends on how far you want to advance, but it's    * probably better than nothing.    */
DECL|field|ADVANCE_COST
specifier|private
specifier|static
specifier|final
name|int
name|ADVANCE_COST
init|=
literal|10
decl_stmt|;
DECL|method|matchCost
specifier|private
specifier|static
name|float
name|matchCost
parameter_list|(
name|DocIdSetIterator
name|reqApproximation
parameter_list|,
name|TwoPhaseIterator
name|reqTwoPhaseIterator
parameter_list|,
name|DocIdSetIterator
name|exclApproximation
parameter_list|,
name|TwoPhaseIterator
name|exclTwoPhaseIterator
parameter_list|)
block|{
name|float
name|matchCost
init|=
literal|2
decl_stmt|;
comment|// we perform 2 comparisons to advance exclApproximation
if|if
condition|(
name|reqTwoPhaseIterator
operator|!=
literal|null
condition|)
block|{
comment|// this two-phase iterator must always be matched
name|matchCost
operator|+=
name|reqTwoPhaseIterator
operator|.
name|matchCost
argument_list|()
expr_stmt|;
block|}
comment|// match cost of the prohibited clause: we need to advance the approximation
comment|// and match the two-phased iterator
specifier|final
name|float
name|exclMatchCost
init|=
name|ADVANCE_COST
operator|+
operator|(
name|exclTwoPhaseIterator
operator|==
literal|null
condition|?
literal|0
else|:
name|exclTwoPhaseIterator
operator|.
name|matchCost
argument_list|()
operator|)
decl_stmt|;
comment|// upper value for the ratio of documents that reqApproximation matches that
comment|// exclApproximation also matches
name|float
name|ratio
decl_stmt|;
if|if
condition|(
name|reqApproximation
operator|.
name|cost
argument_list|()
operator|<=
literal|0
condition|)
block|{
name|ratio
operator|=
literal|1f
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|exclApproximation
operator|.
name|cost
argument_list|()
operator|<=
literal|0
condition|)
block|{
name|ratio
operator|=
literal|0f
expr_stmt|;
block|}
else|else
block|{
name|ratio
operator|=
operator|(
name|float
operator|)
name|Math
operator|.
name|min
argument_list|(
name|reqApproximation
operator|.
name|cost
argument_list|()
argument_list|,
name|exclApproximation
operator|.
name|cost
argument_list|()
argument_list|)
operator|/
name|reqApproximation
operator|.
name|cost
argument_list|()
expr_stmt|;
block|}
name|matchCost
operator|+=
name|ratio
operator|*
name|exclMatchCost
expr_stmt|;
return|return
name|matchCost
return|;
block|}
annotation|@
name|Override
DECL|method|twoPhaseIterator
specifier|public
name|TwoPhaseIterator
name|twoPhaseIterator
parameter_list|()
block|{
specifier|final
name|float
name|matchCost
init|=
name|matchCost
argument_list|(
name|reqApproximation
argument_list|,
name|reqTwoPhaseIterator
argument_list|,
name|exclApproximation
argument_list|,
name|exclTwoPhaseIterator
argument_list|)
decl_stmt|;
if|if
condition|(
name|reqTwoPhaseIterator
operator|==
literal|null
operator|||
operator|(
name|exclTwoPhaseIterator
operator|!=
literal|null
operator|&&
name|reqTwoPhaseIterator
operator|.
name|matchCost
argument_list|()
operator|<=
name|exclTwoPhaseIterator
operator|.
name|matchCost
argument_list|()
operator|)
condition|)
block|{
comment|// reqTwoPhaseIterator is LESS costly than exclTwoPhaseIterator, check it first
return|return
operator|new
name|TwoPhaseIterator
argument_list|(
name|reqApproximation
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|matches
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|int
name|doc
init|=
name|reqApproximation
operator|.
name|docID
argument_list|()
decl_stmt|;
comment|// check if the doc is not excluded
name|int
name|exclDoc
init|=
name|exclApproximation
operator|.
name|docID
argument_list|()
decl_stmt|;
if|if
condition|(
name|exclDoc
operator|<
name|doc
condition|)
block|{
name|exclDoc
operator|=
name|exclApproximation
operator|.
name|advance
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|exclDoc
operator|!=
name|doc
condition|)
block|{
return|return
name|matchesOrNull
argument_list|(
name|reqTwoPhaseIterator
argument_list|)
return|;
block|}
return|return
name|matchesOrNull
argument_list|(
name|reqTwoPhaseIterator
argument_list|)
operator|&&
operator|!
name|matchesOrNull
argument_list|(
name|exclTwoPhaseIterator
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|float
name|matchCost
parameter_list|()
block|{
return|return
name|matchCost
return|;
block|}
block|}
return|;
block|}
else|else
block|{
comment|// reqTwoPhaseIterator is MORE costly than exclTwoPhaseIterator, check it first
return|return
operator|new
name|TwoPhaseIterator
argument_list|(
name|reqApproximation
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|matches
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|int
name|doc
init|=
name|reqApproximation
operator|.
name|docID
argument_list|()
decl_stmt|;
comment|// check if the doc is not excluded
name|int
name|exclDoc
init|=
name|exclApproximation
operator|.
name|docID
argument_list|()
decl_stmt|;
if|if
condition|(
name|exclDoc
operator|<
name|doc
condition|)
block|{
name|exclDoc
operator|=
name|exclApproximation
operator|.
name|advance
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|exclDoc
operator|!=
name|doc
condition|)
block|{
return|return
name|matchesOrNull
argument_list|(
name|reqTwoPhaseIterator
argument_list|)
return|;
block|}
return|return
operator|!
name|matchesOrNull
argument_list|(
name|exclTwoPhaseIterator
argument_list|)
operator|&&
name|matchesOrNull
argument_list|(
name|reqTwoPhaseIterator
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|float
name|matchCost
parameter_list|()
block|{
return|return
name|matchCost
return|;
block|}
block|}
return|;
block|}
block|}
block|}
end_class
end_unit
