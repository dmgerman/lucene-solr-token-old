begin_unit
begin_package
DECL|package|org.apache.lucene.search
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_comment
comment|/** A Scorer for queries with a required subscorer  * and an excluding (prohibited) sub {@link Scorer}.  *<br>  * This<code>Scorer</code> implements {@link Scorer#advance(int)},  * and it uses the advance() on the given scorers.  */
end_comment
begin_class
DECL|class|ReqExclScorer
class|class
name|ReqExclScorer
extends|extends
name|Scorer
block|{
DECL|field|reqScorer
specifier|private
specifier|final
name|Scorer
name|reqScorer
decl_stmt|;
comment|// approximations of the scorers, or the scorers themselves if they don't support approximations
DECL|field|reqApproximation
specifier|private
specifier|final
name|DocIdSetIterator
name|reqApproximation
decl_stmt|;
DECL|field|exclApproximation
specifier|private
specifier|final
name|DocIdSetIterator
name|exclApproximation
decl_stmt|;
comment|// two-phase views of the scorers, or null if they do not support approximations
DECL|field|reqTwoPhaseIterator
specifier|private
specifier|final
name|TwoPhaseIterator
name|reqTwoPhaseIterator
decl_stmt|;
DECL|field|exclTwoPhaseIterator
specifier|private
specifier|final
name|TwoPhaseIterator
name|exclTwoPhaseIterator
decl_stmt|;
comment|/** Construct a<code>ReqExclScorer</code>.    * @param reqScorer The scorer that must match, except where    * @param exclScorer indicates exclusion.    */
DECL|method|ReqExclScorer
specifier|public
name|ReqExclScorer
parameter_list|(
name|Scorer
name|reqScorer
parameter_list|,
name|Scorer
name|exclScorer
parameter_list|)
block|{
name|super
argument_list|(
name|reqScorer
operator|.
name|weight
argument_list|)
expr_stmt|;
name|this
operator|.
name|reqScorer
operator|=
name|reqScorer
expr_stmt|;
name|reqTwoPhaseIterator
operator|=
name|reqScorer
operator|.
name|asTwoPhaseIterator
argument_list|()
expr_stmt|;
if|if
condition|(
name|reqTwoPhaseIterator
operator|==
literal|null
condition|)
block|{
name|reqApproximation
operator|=
name|reqScorer
expr_stmt|;
block|}
else|else
block|{
name|reqApproximation
operator|=
name|reqTwoPhaseIterator
operator|.
name|approximation
argument_list|()
expr_stmt|;
block|}
name|exclTwoPhaseIterator
operator|=
name|exclScorer
operator|.
name|asTwoPhaseIterator
argument_list|()
expr_stmt|;
if|if
condition|(
name|exclTwoPhaseIterator
operator|==
literal|null
condition|)
block|{
name|exclApproximation
operator|=
name|exclScorer
expr_stmt|;
block|}
else|else
block|{
name|exclApproximation
operator|=
name|exclTwoPhaseIterator
operator|.
name|approximation
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|nextDoc
specifier|public
name|int
name|nextDoc
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|toNonExcluded
argument_list|(
name|reqApproximation
operator|.
name|nextDoc
argument_list|()
argument_list|)
return|;
block|}
comment|/** Confirms whether or not the given {@link TwoPhaseIterator}    *  matches on the current document. */
DECL|method|matches
specifier|private
specifier|static
name|boolean
name|matches
parameter_list|(
name|TwoPhaseIterator
name|it
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|it
operator|==
literal|null
operator|||
name|it
operator|.
name|matches
argument_list|()
return|;
block|}
comment|/** Confirm whether there is a match given the current positions of the    *  req and excl approximations. This method has 2 important properties:    *   - it only calls matches() on excl if the excl approximation is on    *     the same doc ID as the req approximation    *   - it does NOT call matches() on req if the excl approximation is exact    *     and is on the same doc ID as the req approximation */
DECL|method|matches
specifier|private
specifier|static
name|boolean
name|matches
parameter_list|(
name|int
name|doc
parameter_list|,
name|int
name|exclDoc
parameter_list|,
name|TwoPhaseIterator
name|reqTwoPhaseIterator
parameter_list|,
name|TwoPhaseIterator
name|exclTwoPhaseIterator
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|exclDoc
operator|>=
name|doc
assert|;
if|if
condition|(
name|doc
operator|==
name|exclDoc
operator|&&
name|matches
argument_list|(
name|exclTwoPhaseIterator
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|matches
argument_list|(
name|reqTwoPhaseIterator
argument_list|)
return|;
block|}
comment|/** Advance to the next non-excluded doc. */
DECL|method|toNonExcluded
specifier|private
name|int
name|toNonExcluded
parameter_list|(
name|int
name|doc
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|exclDoc
init|=
name|exclApproximation
operator|.
name|docID
argument_list|()
decl_stmt|;
for|for
control|(
init|;
condition|;
name|doc
operator|=
name|reqApproximation
operator|.
name|nextDoc
argument_list|()
control|)
block|{
if|if
condition|(
name|doc
operator|==
name|NO_MORE_DOCS
condition|)
block|{
return|return
name|NO_MORE_DOCS
return|;
block|}
if|if
condition|(
name|exclDoc
operator|<
name|doc
condition|)
block|{
name|exclDoc
operator|=
name|exclApproximation
operator|.
name|advance
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|matches
argument_list|(
name|doc
argument_list|,
name|exclDoc
argument_list|,
name|reqTwoPhaseIterator
argument_list|,
name|exclTwoPhaseIterator
argument_list|)
condition|)
block|{
return|return
name|doc
return|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|docID
specifier|public
name|int
name|docID
parameter_list|()
block|{
return|return
name|reqScorer
operator|.
name|docID
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|freq
specifier|public
name|int
name|freq
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|reqScorer
operator|.
name|freq
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|cost
specifier|public
name|long
name|cost
parameter_list|()
block|{
return|return
name|reqScorer
operator|.
name|cost
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|score
specifier|public
name|float
name|score
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|reqScorer
operator|.
name|score
argument_list|()
return|;
comment|// reqScorer may be null when next() or skipTo() already return false
block|}
annotation|@
name|Override
DECL|method|getChildren
specifier|public
name|Collection
argument_list|<
name|ChildScorer
argument_list|>
name|getChildren
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|singleton
argument_list|(
operator|new
name|ChildScorer
argument_list|(
name|reqScorer
argument_list|,
literal|"MUST"
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|advance
specifier|public
name|int
name|advance
parameter_list|(
name|int
name|target
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|toNonExcluded
argument_list|(
name|reqApproximation
operator|.
name|advance
argument_list|(
name|target
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|asTwoPhaseIterator
specifier|public
name|TwoPhaseIterator
name|asTwoPhaseIterator
parameter_list|()
block|{
if|if
condition|(
name|reqTwoPhaseIterator
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|new
name|TwoPhaseIterator
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|DocIdSetIterator
name|approximation
parameter_list|()
block|{
return|return
name|reqApproximation
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|matches
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|int
name|doc
init|=
name|reqApproximation
operator|.
name|docID
argument_list|()
decl_stmt|;
comment|// check if the doc is not excluded
name|int
name|exclDoc
init|=
name|exclApproximation
operator|.
name|docID
argument_list|()
decl_stmt|;
if|if
condition|(
name|exclDoc
operator|<
name|doc
condition|)
block|{
name|exclDoc
operator|=
name|exclApproximation
operator|.
name|advance
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
return|return
name|ReqExclScorer
operator|.
name|matches
argument_list|(
name|doc
argument_list|,
name|exclDoc
argument_list|,
name|reqTwoPhaseIterator
argument_list|,
name|exclTwoPhaseIterator
argument_list|)
return|;
block|}
block|}
return|;
block|}
block|}
end_class
end_unit
