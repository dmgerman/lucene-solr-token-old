begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.search.similarities
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|similarities
package|;
end_package
begin_comment
comment|/**  * Pareto-Zipf Normalization  * @lucene.experimental  */
end_comment
begin_class
DECL|class|NormalizationZ
specifier|public
class|class
name|NormalizationZ
extends|extends
name|Normalization
block|{
DECL|field|z
specifier|final
name|float
name|z
decl_stmt|;
comment|/**    * Calls {@link #NormalizationZ(float) NormalizationZ(0.3)}    */
DECL|method|NormalizationZ
specifier|public
name|NormalizationZ
parameter_list|()
block|{
name|this
argument_list|(
literal|0.30F
argument_list|)
expr_stmt|;
block|}
comment|/**    * Creates NormalizationZ with the supplied parameter<code>z</code>.    * @param z represents<code>A/(A+1)</code> where<code>A</code>     *          measures the specificity of the language.    */
DECL|method|NormalizationZ
specifier|public
name|NormalizationZ
parameter_list|(
name|float
name|z
parameter_list|)
block|{
name|this
operator|.
name|z
operator|=
name|z
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|tfn
specifier|public
name|float
name|tfn
parameter_list|(
name|BasicStats
name|stats
parameter_list|,
name|float
name|tf
parameter_list|,
name|float
name|len
parameter_list|)
block|{
return|return
call|(
name|float
call|)
argument_list|(
name|tf
operator|*
name|Math
operator|.
name|pow
argument_list|(
name|stats
operator|.
name|avgFieldLength
operator|/
name|len
argument_list|,
name|z
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"Z("
operator|+
name|z
operator|+
literal|")"
return|;
block|}
comment|/**    * Returns the parameter<code>z</code>    * @see #NormalizationZ(float)    */
DECL|method|getZ
specifier|public
name|float
name|getZ
parameter_list|()
block|{
return|return
name|z
return|;
block|}
block|}
end_class
end_unit
