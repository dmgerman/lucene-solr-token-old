begin_unit
begin_package
DECL|package|org.apache.lucene.search
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_comment
comment|/**  * A Filter that restricts search results to a range of term  * values in a given field.  *  *<p>This filter matches the documents looking for terms that fall into the  * supplied range according to {@link  * Byte#compareTo(Byte)},  It is not intended  * for numerical ranges; use {@link NumericRangeFilter} instead.  *  *<p>If you construct a large number of range filters with different ranges but on the   * same field, {@link FieldCacheRangeFilter} may have significantly better performance.   * @since 2.9  */
end_comment
begin_class
DECL|class|TermRangeFilter
specifier|public
class|class
name|TermRangeFilter
extends|extends
name|MultiTermQueryWrapperFilter
argument_list|<
name|TermRangeQuery
argument_list|>
block|{
comment|/**    * @param fieldName The field this range applies to    * @param lowerTerm The lower bound on this range    * @param upperTerm The upper bound on this range    * @param includeLower Does this range include the lower bound?    * @param includeUpper Does this range include the upper bound?    * @throws IllegalArgumentException if both terms are null or if    *  lowerTerm is null and includeLower is true (similar for upperTerm    *  and includeUpper)    */
DECL|method|TermRangeFilter
specifier|public
name|TermRangeFilter
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|BytesRef
name|lowerTerm
parameter_list|,
name|BytesRef
name|upperTerm
parameter_list|,
name|boolean
name|includeLower
parameter_list|,
name|boolean
name|includeUpper
parameter_list|)
block|{
name|super
argument_list|(
operator|new
name|TermRangeQuery
argument_list|(
name|fieldName
argument_list|,
name|lowerTerm
argument_list|,
name|upperTerm
argument_list|,
name|includeLower
argument_list|,
name|includeUpper
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Factory that creates a new TermRangeFilter using Strings for term text.    */
DECL|method|newStringRange
specifier|public
specifier|static
name|TermRangeFilter
name|newStringRange
parameter_list|(
name|String
name|field
parameter_list|,
name|String
name|lowerTerm
parameter_list|,
name|String
name|upperTerm
parameter_list|,
name|boolean
name|includeLower
parameter_list|,
name|boolean
name|includeUpper
parameter_list|)
block|{
name|BytesRef
name|lower
init|=
name|lowerTerm
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|BytesRef
argument_list|(
name|lowerTerm
argument_list|)
decl_stmt|;
name|BytesRef
name|upper
init|=
name|upperTerm
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|BytesRef
argument_list|(
name|upperTerm
argument_list|)
decl_stmt|;
return|return
operator|new
name|TermRangeFilter
argument_list|(
name|field
argument_list|,
name|lower
argument_list|,
name|upper
argument_list|,
name|includeLower
argument_list|,
name|includeUpper
argument_list|)
return|;
block|}
comment|/**    * Constructs a filter for field<code>fieldName</code> matching    * less than or equal to<code>upperTerm</code>.    */
DECL|method|Less
specifier|public
specifier|static
name|TermRangeFilter
name|Less
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|BytesRef
name|upperTerm
parameter_list|)
block|{
return|return
operator|new
name|TermRangeFilter
argument_list|(
name|fieldName
argument_list|,
literal|null
argument_list|,
name|upperTerm
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/**    * Constructs a filter for field<code>fieldName</code> matching    * greater than or equal to<code>lowerTerm</code>.    */
DECL|method|More
specifier|public
specifier|static
name|TermRangeFilter
name|More
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|BytesRef
name|lowerTerm
parameter_list|)
block|{
return|return
operator|new
name|TermRangeFilter
argument_list|(
name|fieldName
argument_list|,
name|lowerTerm
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/** Returns the lower value of this range filter */
DECL|method|getLowerTerm
specifier|public
name|BytesRef
name|getLowerTerm
parameter_list|()
block|{
return|return
name|query
operator|.
name|getLowerTerm
argument_list|()
return|;
block|}
comment|/** Returns the upper value of this range filter */
DECL|method|getUpperTerm
specifier|public
name|BytesRef
name|getUpperTerm
parameter_list|()
block|{
return|return
name|query
operator|.
name|getUpperTerm
argument_list|()
return|;
block|}
comment|/** Returns<code>true</code> if the lower endpoint is inclusive */
DECL|method|includesLower
specifier|public
name|boolean
name|includesLower
parameter_list|()
block|{
return|return
name|query
operator|.
name|includesLower
argument_list|()
return|;
block|}
comment|/** Returns<code>true</code> if the upper endpoint is inclusive */
DECL|method|includesUpper
specifier|public
name|boolean
name|includesUpper
parameter_list|()
block|{
return|return
name|query
operator|.
name|includesUpper
argument_list|()
return|;
block|}
block|}
end_class
end_unit
