begin_unit
begin_package
DECL|package|org.apache.lucene.search
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReaderContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|BinaryDocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|NumericDocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SortedDocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Bits
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRefBuilder
import|;
end_import
begin_comment
comment|/**  * Expert: a FieldComparator compares hits so as to determine their  * sort order when collecting the top results with {@link  * TopFieldCollector}.  The concrete public FieldComparator  * classes here correspond to the SortField types.  *  *<p>This API is designed to achieve high performance  * sorting, by exposing a tight interaction with {@link  * FieldValueHitQueue} as it visits hits.  Whenever a hit is  * competitive, it's enrolled into a virtual slot, which is  * an int ranging from 0 to numHits-1.  The {@link  * FieldComparator} is made aware of segment transitions  * during searching in case any internal state it's tracking  * needs to be recomputed during these transitions.</p>  *  *<p>A comparator must define these functions:</p>  *  *<ul>  *  *<li> {@link #compare} Compare a hit at 'slot a'  *       with hit 'slot b'.  *  *<li> {@link #setBottom} This method is called by  *       {@link FieldValueHitQueue} to notify the  *       FieldComparator of the current weakest ("bottom")  *       slot.  Note that this slot may not hold the weakest  *       value according to your comparator, in cases where  *       your comparator is not the primary one (ie, is only  *       used to break ties from the comparators before it).  *  *<li> {@link #compareBottom} Compare a new hit (docID)  *       against the "weakest" (bottom) entry in the queue.  *  *<li> {@link #setTopValue} This method is called by  *       {@link TopFieldCollector} to notify the  *       FieldComparator of the top most value, which is  *       used by future calls to {@link #compareTop}.  *  *<li> {@link #compareBottom} Compare a new hit (docID)  *       against the "weakest" (bottom) entry in the queue.  *  *<li> {@link #compareTop} Compare a new hit (docID)  *       against the top value previously set by a call to  *       {@link #setTopValue}.  *  *<li> {@link #copy} Installs a new hit into the  *       priority queue.  The {@link FieldValueHitQueue}  *       calls this method when a new hit is competitive.  *  *<li> {@link #setNextReader(org.apache.lucene.index.LeafReaderContext)} Invoked  *       when the search is switching to the next segment.  *       You may need to update internal state of the  *       comparator, for example retrieving new values from  *       DocValues.  *  *<li> {@link #value} Return the sort value stored in  *       the specified slot.  This is only called at the end  *       of the search, in order to populate {@link  *       FieldDoc#fields} when returning the top results.  *</ul>  *  * @lucene.experimental  */
end_comment
begin_class
DECL|class|FieldComparator
specifier|public
specifier|abstract
class|class
name|FieldComparator
parameter_list|<
name|T
parameter_list|>
block|{
comment|/**    * Compare hit at slot1 with hit at slot2.    *     * @param slot1 first slot to compare    * @param slot2 second slot to compare    * @return any {@code N< 0} if slot2's value is sorted after    * slot1, any {@code N> 0} if the slot2's value is sorted before    * slot1 and {@code 0} if they are equal    */
DECL|method|compare
specifier|public
specifier|abstract
name|int
name|compare
parameter_list|(
name|int
name|slot1
parameter_list|,
name|int
name|slot2
parameter_list|)
function_decl|;
comment|/**    * Set the bottom slot, ie the "weakest" (sorted last)    * entry in the queue.  When {@link #compareBottom} is    * called, you should compare against this slot.  This    * will always be called before {@link #compareBottom}.    *     * @param slot the currently weakest (sorted last) slot in the queue    */
DECL|method|setBottom
specifier|public
specifier|abstract
name|void
name|setBottom
parameter_list|(
specifier|final
name|int
name|slot
parameter_list|)
function_decl|;
comment|/**    * Record the top value, for future calls to {@link    * #compareTop}.  This is only called for searches that    * use searchAfter (deep paging), and is called before any    * calls to {@link #setNextReader}.    */
DECL|method|setTopValue
specifier|public
specifier|abstract
name|void
name|setTopValue
parameter_list|(
name|T
name|value
parameter_list|)
function_decl|;
comment|/**    * Compare the bottom of the queue with this doc.  This will    * only invoked after setBottom has been called.  This    * should return the same result as {@link    * #compare(int,int)}} as if bottom were slot1 and the new    * document were slot 2.    *        *<p>For a search that hits many results, this method    * will be the hotspot (invoked by far the most    * frequently).</p>    *     * @param doc that was hit    * @return any {@code N< 0} if the doc's value is sorted after    * the bottom entry (not competitive), any {@code N> 0} if the    * doc's value is sorted before the bottom entry and {@code 0} if    * they are equal.    */
DECL|method|compareBottom
specifier|public
specifier|abstract
name|int
name|compareBottom
parameter_list|(
name|int
name|doc
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Compare the top value with this doc.  This will    * only invoked after setTopValue has been called.  This    * should return the same result as {@link    * #compare(int,int)}} as if topValue were slot1 and the new    * document were slot 2.  This is only called for searches that    * use searchAfter (deep paging).    *        * @param doc that was hit    * @return any {@code N< 0} if the doc's value is sorted after    * the bottom entry (not competitive), any {@code N> 0} if the    * doc's value is sorted before the bottom entry and {@code 0} if    * they are equal.    */
DECL|method|compareTop
specifier|public
specifier|abstract
name|int
name|compareTop
parameter_list|(
name|int
name|doc
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * This method is called when a new hit is competitive.    * You should copy any state associated with this document    * that will be required for future comparisons, into the    * specified slot.    *     * @param slot which slot to copy the hit to    * @param doc docID relative to current reader    */
DECL|method|copy
specifier|public
specifier|abstract
name|void
name|copy
parameter_list|(
name|int
name|slot
parameter_list|,
name|int
name|doc
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Set a new {@link org.apache.lucene.index.LeafReaderContext}. All subsequent docIDs are relative to    * the current reader (you must add docBase if you need to    * map it to a top-level docID).    *     * @param context current reader context    * @return the comparator to use for this segment; most    *   comparators can just return "this" to reuse the same    *   comparator across segments    * @throws IOException if there is a low-level IO error    */
DECL|method|setNextReader
specifier|public
specifier|abstract
name|FieldComparator
argument_list|<
name|T
argument_list|>
name|setNextReader
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/** Sets the Scorer to use in case a document's score is    *  needed.    *     * @param scorer Scorer instance that you should use to    * obtain the current hit's score, if necessary. */
DECL|method|setScorer
specifier|public
name|void
name|setScorer
parameter_list|(
name|Scorer
name|scorer
parameter_list|)
block|{
comment|// Empty implementation since most comparators don't need the score. This
comment|// can be overridden by those that need it.
block|}
comment|/**    * Return the actual value in the slot.    *    * @param slot the value    * @return value in this slot    */
DECL|method|value
specifier|public
specifier|abstract
name|T
name|value
parameter_list|(
name|int
name|slot
parameter_list|)
function_decl|;
comment|/** Returns -1 if first is less than second.  Default    *  impl to assume the type implements Comparable and    *  invoke .compareTo; be sure to override this method if    *  your FieldComparator's type isn't a Comparable or    *  if your values may sometimes be null */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|compareValues
specifier|public
name|int
name|compareValues
parameter_list|(
name|T
name|first
parameter_list|,
name|T
name|second
parameter_list|)
block|{
if|if
condition|(
name|first
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|second
operator|==
literal|null
condition|)
block|{
return|return
literal|0
return|;
block|}
else|else
block|{
return|return
operator|-
literal|1
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|second
operator|==
literal|null
condition|)
block|{
return|return
literal|1
return|;
block|}
else|else
block|{
return|return
operator|(
operator|(
name|Comparable
argument_list|<
name|T
argument_list|>
operator|)
name|first
operator|)
operator|.
name|compareTo
argument_list|(
name|second
argument_list|)
return|;
block|}
block|}
comment|/**    * Base FieldComparator class for numeric types    */
DECL|class|NumericComparator
specifier|public
specifier|static
specifier|abstract
class|class
name|NumericComparator
parameter_list|<
name|T
extends|extends
name|Number
parameter_list|>
extends|extends
name|FieldComparator
argument_list|<
name|T
argument_list|>
block|{
DECL|field|missingValue
specifier|protected
specifier|final
name|T
name|missingValue
decl_stmt|;
DECL|field|field
specifier|protected
specifier|final
name|String
name|field
decl_stmt|;
DECL|field|docsWithField
specifier|protected
name|Bits
name|docsWithField
decl_stmt|;
DECL|field|currentReaderValues
specifier|protected
name|NumericDocValues
name|currentReaderValues
decl_stmt|;
DECL|method|NumericComparator
specifier|public
name|NumericComparator
parameter_list|(
name|String
name|field
parameter_list|,
name|T
name|missingValue
parameter_list|)
block|{
name|this
operator|.
name|field
operator|=
name|field
expr_stmt|;
name|this
operator|.
name|missingValue
operator|=
name|missingValue
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setNextReader
specifier|public
name|FieldComparator
argument_list|<
name|T
argument_list|>
name|setNextReader
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|currentReaderValues
operator|=
name|getNumericDocValues
argument_list|(
name|context
argument_list|,
name|field
argument_list|)
expr_stmt|;
if|if
condition|(
name|missingValue
operator|!=
literal|null
condition|)
block|{
name|docsWithField
operator|=
name|DocValues
operator|.
name|getDocsWithField
argument_list|(
name|context
operator|.
name|reader
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
comment|// optimization to remove unneeded checks on the bit interface:
if|if
condition|(
name|docsWithField
operator|instanceof
name|Bits
operator|.
name|MatchAllBits
condition|)
block|{
name|docsWithField
operator|=
literal|null
expr_stmt|;
block|}
block|}
else|else
block|{
name|docsWithField
operator|=
literal|null
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
comment|/** Retrieves the NumericDocValues for the field in this segment */
DECL|method|getNumericDocValues
specifier|protected
name|NumericDocValues
name|getNumericDocValues
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|,
name|String
name|field
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|DocValues
operator|.
name|getNumeric
argument_list|(
name|context
operator|.
name|reader
argument_list|()
argument_list|,
name|field
argument_list|)
return|;
block|}
block|}
comment|/** Parses field's values as double (using {@link    *  org.apache.lucene.index.LeafReader#getNumericDocValues} and sorts by ascending value */
DECL|class|DoubleComparator
specifier|public
specifier|static
class|class
name|DoubleComparator
extends|extends
name|NumericComparator
argument_list|<
name|Double
argument_list|>
block|{
DECL|field|values
specifier|private
specifier|final
name|double
index|[]
name|values
decl_stmt|;
DECL|field|bottom
specifier|private
name|double
name|bottom
decl_stmt|;
DECL|field|topValue
specifier|private
name|double
name|topValue
decl_stmt|;
comment|/**       * Creates a new comparator based on {@link Double#compare} for {@code numHits}.      * When a document has no value for the field, {@code missingValue} is substituted.       */
DECL|method|DoubleComparator
specifier|public
name|DoubleComparator
parameter_list|(
name|int
name|numHits
parameter_list|,
name|String
name|field
parameter_list|,
name|Double
name|missingValue
parameter_list|)
block|{
name|super
argument_list|(
name|field
argument_list|,
name|missingValue
argument_list|)
expr_stmt|;
name|values
operator|=
operator|new
name|double
index|[
name|numHits
index|]
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|compare
specifier|public
name|int
name|compare
parameter_list|(
name|int
name|slot1
parameter_list|,
name|int
name|slot2
parameter_list|)
block|{
return|return
name|Double
operator|.
name|compare
argument_list|(
name|values
index|[
name|slot1
index|]
argument_list|,
name|values
index|[
name|slot2
index|]
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|compareBottom
specifier|public
name|int
name|compareBottom
parameter_list|(
name|int
name|doc
parameter_list|)
block|{
name|double
name|v2
init|=
name|Double
operator|.
name|longBitsToDouble
argument_list|(
name|currentReaderValues
operator|.
name|get
argument_list|(
name|doc
argument_list|)
argument_list|)
decl_stmt|;
comment|// Test for v2 == 0 to save Bits.get method call for
comment|// the common case (doc has value and value is non-zero):
if|if
condition|(
name|docsWithField
operator|!=
literal|null
operator|&&
name|v2
operator|==
literal|0
operator|&&
operator|!
name|docsWithField
operator|.
name|get
argument_list|(
name|doc
argument_list|)
condition|)
block|{
name|v2
operator|=
name|missingValue
expr_stmt|;
block|}
return|return
name|Double
operator|.
name|compare
argument_list|(
name|bottom
argument_list|,
name|v2
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|copy
specifier|public
name|void
name|copy
parameter_list|(
name|int
name|slot
parameter_list|,
name|int
name|doc
parameter_list|)
block|{
name|double
name|v2
init|=
name|Double
operator|.
name|longBitsToDouble
argument_list|(
name|currentReaderValues
operator|.
name|get
argument_list|(
name|doc
argument_list|)
argument_list|)
decl_stmt|;
comment|// Test for v2 == 0 to save Bits.get method call for
comment|// the common case (doc has value and value is non-zero):
if|if
condition|(
name|docsWithField
operator|!=
literal|null
operator|&&
name|v2
operator|==
literal|0
operator|&&
operator|!
name|docsWithField
operator|.
name|get
argument_list|(
name|doc
argument_list|)
condition|)
block|{
name|v2
operator|=
name|missingValue
expr_stmt|;
block|}
name|values
index|[
name|slot
index|]
operator|=
name|v2
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setBottom
specifier|public
name|void
name|setBottom
parameter_list|(
specifier|final
name|int
name|bottom
parameter_list|)
block|{
name|this
operator|.
name|bottom
operator|=
name|values
index|[
name|bottom
index|]
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setTopValue
specifier|public
name|void
name|setTopValue
parameter_list|(
name|Double
name|value
parameter_list|)
block|{
name|topValue
operator|=
name|value
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|value
specifier|public
name|Double
name|value
parameter_list|(
name|int
name|slot
parameter_list|)
block|{
return|return
name|Double
operator|.
name|valueOf
argument_list|(
name|values
index|[
name|slot
index|]
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|compareTop
specifier|public
name|int
name|compareTop
parameter_list|(
name|int
name|doc
parameter_list|)
block|{
name|double
name|docValue
init|=
name|Double
operator|.
name|longBitsToDouble
argument_list|(
name|currentReaderValues
operator|.
name|get
argument_list|(
name|doc
argument_list|)
argument_list|)
decl_stmt|;
comment|// Test for docValue == 0 to save Bits.get method call for
comment|// the common case (doc has value and value is non-zero):
if|if
condition|(
name|docsWithField
operator|!=
literal|null
operator|&&
name|docValue
operator|==
literal|0
operator|&&
operator|!
name|docsWithField
operator|.
name|get
argument_list|(
name|doc
argument_list|)
condition|)
block|{
name|docValue
operator|=
name|missingValue
expr_stmt|;
block|}
return|return
name|Double
operator|.
name|compare
argument_list|(
name|topValue
argument_list|,
name|docValue
argument_list|)
return|;
block|}
block|}
comment|/** Parses field's values as float (using {@link    *  org.apache.lucene.index.LeafReader#getNumericDocValues(String)} and sorts by ascending value */
DECL|class|FloatComparator
specifier|public
specifier|static
class|class
name|FloatComparator
extends|extends
name|NumericComparator
argument_list|<
name|Float
argument_list|>
block|{
DECL|field|values
specifier|private
specifier|final
name|float
index|[]
name|values
decl_stmt|;
DECL|field|bottom
specifier|private
name|float
name|bottom
decl_stmt|;
DECL|field|topValue
specifier|private
name|float
name|topValue
decl_stmt|;
comment|/**       * Creates a new comparator based on {@link Float#compare} for {@code numHits}.      * When a document has no value for the field, {@code missingValue} is substituted.       */
DECL|method|FloatComparator
specifier|public
name|FloatComparator
parameter_list|(
name|int
name|numHits
parameter_list|,
name|String
name|field
parameter_list|,
name|Float
name|missingValue
parameter_list|)
block|{
name|super
argument_list|(
name|field
argument_list|,
name|missingValue
argument_list|)
expr_stmt|;
name|values
operator|=
operator|new
name|float
index|[
name|numHits
index|]
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|compare
specifier|public
name|int
name|compare
parameter_list|(
name|int
name|slot1
parameter_list|,
name|int
name|slot2
parameter_list|)
block|{
return|return
name|Float
operator|.
name|compare
argument_list|(
name|values
index|[
name|slot1
index|]
argument_list|,
name|values
index|[
name|slot2
index|]
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|compareBottom
specifier|public
name|int
name|compareBottom
parameter_list|(
name|int
name|doc
parameter_list|)
block|{
comment|// TODO: are there sneaky non-branch ways to compute sign of float?
name|float
name|v2
init|=
name|Float
operator|.
name|intBitsToFloat
argument_list|(
operator|(
name|int
operator|)
name|currentReaderValues
operator|.
name|get
argument_list|(
name|doc
argument_list|)
argument_list|)
decl_stmt|;
comment|// Test for v2 == 0 to save Bits.get method call for
comment|// the common case (doc has value and value is non-zero):
if|if
condition|(
name|docsWithField
operator|!=
literal|null
operator|&&
name|v2
operator|==
literal|0
operator|&&
operator|!
name|docsWithField
operator|.
name|get
argument_list|(
name|doc
argument_list|)
condition|)
block|{
name|v2
operator|=
name|missingValue
expr_stmt|;
block|}
return|return
name|Float
operator|.
name|compare
argument_list|(
name|bottom
argument_list|,
name|v2
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|copy
specifier|public
name|void
name|copy
parameter_list|(
name|int
name|slot
parameter_list|,
name|int
name|doc
parameter_list|)
block|{
name|float
name|v2
init|=
name|Float
operator|.
name|intBitsToFloat
argument_list|(
operator|(
name|int
operator|)
name|currentReaderValues
operator|.
name|get
argument_list|(
name|doc
argument_list|)
argument_list|)
decl_stmt|;
comment|// Test for v2 == 0 to save Bits.get method call for
comment|// the common case (doc has value and value is non-zero):
if|if
condition|(
name|docsWithField
operator|!=
literal|null
operator|&&
name|v2
operator|==
literal|0
operator|&&
operator|!
name|docsWithField
operator|.
name|get
argument_list|(
name|doc
argument_list|)
condition|)
block|{
name|v2
operator|=
name|missingValue
expr_stmt|;
block|}
name|values
index|[
name|slot
index|]
operator|=
name|v2
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setBottom
specifier|public
name|void
name|setBottom
parameter_list|(
specifier|final
name|int
name|bottom
parameter_list|)
block|{
name|this
operator|.
name|bottom
operator|=
name|values
index|[
name|bottom
index|]
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setTopValue
specifier|public
name|void
name|setTopValue
parameter_list|(
name|Float
name|value
parameter_list|)
block|{
name|topValue
operator|=
name|value
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|value
specifier|public
name|Float
name|value
parameter_list|(
name|int
name|slot
parameter_list|)
block|{
return|return
name|Float
operator|.
name|valueOf
argument_list|(
name|values
index|[
name|slot
index|]
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|compareTop
specifier|public
name|int
name|compareTop
parameter_list|(
name|int
name|doc
parameter_list|)
block|{
name|float
name|docValue
init|=
name|Float
operator|.
name|intBitsToFloat
argument_list|(
operator|(
name|int
operator|)
name|currentReaderValues
operator|.
name|get
argument_list|(
name|doc
argument_list|)
argument_list|)
decl_stmt|;
comment|// Test for docValue == 0 to save Bits.get method call for
comment|// the common case (doc has value and value is non-zero):
if|if
condition|(
name|docsWithField
operator|!=
literal|null
operator|&&
name|docValue
operator|==
literal|0
operator|&&
operator|!
name|docsWithField
operator|.
name|get
argument_list|(
name|doc
argument_list|)
condition|)
block|{
name|docValue
operator|=
name|missingValue
expr_stmt|;
block|}
return|return
name|Float
operator|.
name|compare
argument_list|(
name|topValue
argument_list|,
name|docValue
argument_list|)
return|;
block|}
block|}
comment|/** Parses field's values as int (using {@link    *  org.apache.lucene.index.LeafReader#getNumericDocValues(String)} and sorts by ascending value */
DECL|class|IntComparator
specifier|public
specifier|static
class|class
name|IntComparator
extends|extends
name|NumericComparator
argument_list|<
name|Integer
argument_list|>
block|{
DECL|field|values
specifier|private
specifier|final
name|int
index|[]
name|values
decl_stmt|;
DECL|field|bottom
specifier|private
name|int
name|bottom
decl_stmt|;
comment|// Value of bottom of queue
DECL|field|topValue
specifier|private
name|int
name|topValue
decl_stmt|;
comment|/**       * Creates a new comparator based on {@link Integer#compare} for {@code numHits}.      * When a document has no value for the field, {@code missingValue} is substituted.       */
DECL|method|IntComparator
specifier|public
name|IntComparator
parameter_list|(
name|int
name|numHits
parameter_list|,
name|String
name|field
parameter_list|,
name|Integer
name|missingValue
parameter_list|)
block|{
name|super
argument_list|(
name|field
argument_list|,
name|missingValue
argument_list|)
expr_stmt|;
name|values
operator|=
operator|new
name|int
index|[
name|numHits
index|]
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|compare
specifier|public
name|int
name|compare
parameter_list|(
name|int
name|slot1
parameter_list|,
name|int
name|slot2
parameter_list|)
block|{
return|return
name|Integer
operator|.
name|compare
argument_list|(
name|values
index|[
name|slot1
index|]
argument_list|,
name|values
index|[
name|slot2
index|]
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|compareBottom
specifier|public
name|int
name|compareBottom
parameter_list|(
name|int
name|doc
parameter_list|)
block|{
name|int
name|v2
init|=
operator|(
name|int
operator|)
name|currentReaderValues
operator|.
name|get
argument_list|(
name|doc
argument_list|)
decl_stmt|;
comment|// Test for v2 == 0 to save Bits.get method call for
comment|// the common case (doc has value and value is non-zero):
if|if
condition|(
name|docsWithField
operator|!=
literal|null
operator|&&
name|v2
operator|==
literal|0
operator|&&
operator|!
name|docsWithField
operator|.
name|get
argument_list|(
name|doc
argument_list|)
condition|)
block|{
name|v2
operator|=
name|missingValue
expr_stmt|;
block|}
return|return
name|Integer
operator|.
name|compare
argument_list|(
name|bottom
argument_list|,
name|v2
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|copy
specifier|public
name|void
name|copy
parameter_list|(
name|int
name|slot
parameter_list|,
name|int
name|doc
parameter_list|)
block|{
name|int
name|v2
init|=
operator|(
name|int
operator|)
name|currentReaderValues
operator|.
name|get
argument_list|(
name|doc
argument_list|)
decl_stmt|;
comment|// Test for v2 == 0 to save Bits.get method call for
comment|// the common case (doc has value and value is non-zero):
if|if
condition|(
name|docsWithField
operator|!=
literal|null
operator|&&
name|v2
operator|==
literal|0
operator|&&
operator|!
name|docsWithField
operator|.
name|get
argument_list|(
name|doc
argument_list|)
condition|)
block|{
name|v2
operator|=
name|missingValue
expr_stmt|;
block|}
name|values
index|[
name|slot
index|]
operator|=
name|v2
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setBottom
specifier|public
name|void
name|setBottom
parameter_list|(
specifier|final
name|int
name|bottom
parameter_list|)
block|{
name|this
operator|.
name|bottom
operator|=
name|values
index|[
name|bottom
index|]
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setTopValue
specifier|public
name|void
name|setTopValue
parameter_list|(
name|Integer
name|value
parameter_list|)
block|{
name|topValue
operator|=
name|value
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|value
specifier|public
name|Integer
name|value
parameter_list|(
name|int
name|slot
parameter_list|)
block|{
return|return
name|Integer
operator|.
name|valueOf
argument_list|(
name|values
index|[
name|slot
index|]
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|compareTop
specifier|public
name|int
name|compareTop
parameter_list|(
name|int
name|doc
parameter_list|)
block|{
name|int
name|docValue
init|=
operator|(
name|int
operator|)
name|currentReaderValues
operator|.
name|get
argument_list|(
name|doc
argument_list|)
decl_stmt|;
comment|// Test for docValue == 0 to save Bits.get method call for
comment|// the common case (doc has value and value is non-zero):
if|if
condition|(
name|docsWithField
operator|!=
literal|null
operator|&&
name|docValue
operator|==
literal|0
operator|&&
operator|!
name|docsWithField
operator|.
name|get
argument_list|(
name|doc
argument_list|)
condition|)
block|{
name|docValue
operator|=
name|missingValue
expr_stmt|;
block|}
return|return
name|Integer
operator|.
name|compare
argument_list|(
name|topValue
argument_list|,
name|docValue
argument_list|)
return|;
block|}
block|}
comment|/** Parses field's values as long (using {@link    *  org.apache.lucene.index.LeafReader#getNumericDocValues(String)} and sorts by ascending value */
DECL|class|LongComparator
specifier|public
specifier|static
class|class
name|LongComparator
extends|extends
name|NumericComparator
argument_list|<
name|Long
argument_list|>
block|{
DECL|field|values
specifier|private
specifier|final
name|long
index|[]
name|values
decl_stmt|;
DECL|field|bottom
specifier|private
name|long
name|bottom
decl_stmt|;
DECL|field|topValue
specifier|private
name|long
name|topValue
decl_stmt|;
comment|/**       * Creates a new comparator based on {@link Long#compare} for {@code numHits}.      * When a document has no value for the field, {@code missingValue} is substituted.       */
DECL|method|LongComparator
specifier|public
name|LongComparator
parameter_list|(
name|int
name|numHits
parameter_list|,
name|String
name|field
parameter_list|,
name|Long
name|missingValue
parameter_list|)
block|{
name|super
argument_list|(
name|field
argument_list|,
name|missingValue
argument_list|)
expr_stmt|;
name|values
operator|=
operator|new
name|long
index|[
name|numHits
index|]
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|compare
specifier|public
name|int
name|compare
parameter_list|(
name|int
name|slot1
parameter_list|,
name|int
name|slot2
parameter_list|)
block|{
return|return
name|Long
operator|.
name|compare
argument_list|(
name|values
index|[
name|slot1
index|]
argument_list|,
name|values
index|[
name|slot2
index|]
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|compareBottom
specifier|public
name|int
name|compareBottom
parameter_list|(
name|int
name|doc
parameter_list|)
block|{
comment|// TODO: there are sneaky non-branch ways to compute
comment|// -1/+1/0 sign
name|long
name|v2
init|=
name|currentReaderValues
operator|.
name|get
argument_list|(
name|doc
argument_list|)
decl_stmt|;
comment|// Test for v2 == 0 to save Bits.get method call for
comment|// the common case (doc has value and value is non-zero):
if|if
condition|(
name|docsWithField
operator|!=
literal|null
operator|&&
name|v2
operator|==
literal|0
operator|&&
operator|!
name|docsWithField
operator|.
name|get
argument_list|(
name|doc
argument_list|)
condition|)
block|{
name|v2
operator|=
name|missingValue
expr_stmt|;
block|}
return|return
name|Long
operator|.
name|compare
argument_list|(
name|bottom
argument_list|,
name|v2
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|copy
specifier|public
name|void
name|copy
parameter_list|(
name|int
name|slot
parameter_list|,
name|int
name|doc
parameter_list|)
block|{
name|long
name|v2
init|=
name|currentReaderValues
operator|.
name|get
argument_list|(
name|doc
argument_list|)
decl_stmt|;
comment|// Test for v2 == 0 to save Bits.get method call for
comment|// the common case (doc has value and value is non-zero):
if|if
condition|(
name|docsWithField
operator|!=
literal|null
operator|&&
name|v2
operator|==
literal|0
operator|&&
operator|!
name|docsWithField
operator|.
name|get
argument_list|(
name|doc
argument_list|)
condition|)
block|{
name|v2
operator|=
name|missingValue
expr_stmt|;
block|}
name|values
index|[
name|slot
index|]
operator|=
name|v2
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setBottom
specifier|public
name|void
name|setBottom
parameter_list|(
specifier|final
name|int
name|bottom
parameter_list|)
block|{
name|this
operator|.
name|bottom
operator|=
name|values
index|[
name|bottom
index|]
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setTopValue
specifier|public
name|void
name|setTopValue
parameter_list|(
name|Long
name|value
parameter_list|)
block|{
name|topValue
operator|=
name|value
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|value
specifier|public
name|Long
name|value
parameter_list|(
name|int
name|slot
parameter_list|)
block|{
return|return
name|Long
operator|.
name|valueOf
argument_list|(
name|values
index|[
name|slot
index|]
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|compareTop
specifier|public
name|int
name|compareTop
parameter_list|(
name|int
name|doc
parameter_list|)
block|{
name|long
name|docValue
init|=
name|currentReaderValues
operator|.
name|get
argument_list|(
name|doc
argument_list|)
decl_stmt|;
comment|// Test for docValue == 0 to save Bits.get method call for
comment|// the common case (doc has value and value is non-zero):
if|if
condition|(
name|docsWithField
operator|!=
literal|null
operator|&&
name|docValue
operator|==
literal|0
operator|&&
operator|!
name|docsWithField
operator|.
name|get
argument_list|(
name|doc
argument_list|)
condition|)
block|{
name|docValue
operator|=
name|missingValue
expr_stmt|;
block|}
return|return
name|Long
operator|.
name|compare
argument_list|(
name|topValue
argument_list|,
name|docValue
argument_list|)
return|;
block|}
block|}
comment|/** Sorts by descending relevance.  NOTE: if you are    *  sorting only by descending relevance and then    *  secondarily by ascending docID, performance is faster    *  using {@link TopScoreDocCollector} directly (which {@link    *  IndexSearcher#search} uses when no {@link Sort} is    *  specified). */
DECL|class|RelevanceComparator
specifier|public
specifier|static
specifier|final
class|class
name|RelevanceComparator
extends|extends
name|FieldComparator
argument_list|<
name|Float
argument_list|>
block|{
DECL|field|scores
specifier|private
specifier|final
name|float
index|[]
name|scores
decl_stmt|;
DECL|field|bottom
specifier|private
name|float
name|bottom
decl_stmt|;
DECL|field|scorer
specifier|private
name|Scorer
name|scorer
decl_stmt|;
DECL|field|topValue
specifier|private
name|float
name|topValue
decl_stmt|;
comment|/** Creates a new comparator based on relevance for {@code numHits}. */
DECL|method|RelevanceComparator
specifier|public
name|RelevanceComparator
parameter_list|(
name|int
name|numHits
parameter_list|)
block|{
name|scores
operator|=
operator|new
name|float
index|[
name|numHits
index|]
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|compare
specifier|public
name|int
name|compare
parameter_list|(
name|int
name|slot1
parameter_list|,
name|int
name|slot2
parameter_list|)
block|{
return|return
name|Float
operator|.
name|compare
argument_list|(
name|scores
index|[
name|slot2
index|]
argument_list|,
name|scores
index|[
name|slot1
index|]
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|compareBottom
specifier|public
name|int
name|compareBottom
parameter_list|(
name|int
name|doc
parameter_list|)
throws|throws
name|IOException
block|{
name|float
name|score
init|=
name|scorer
operator|.
name|score
argument_list|()
decl_stmt|;
assert|assert
operator|!
name|Float
operator|.
name|isNaN
argument_list|(
name|score
argument_list|)
assert|;
return|return
name|Float
operator|.
name|compare
argument_list|(
name|score
argument_list|,
name|bottom
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|copy
specifier|public
name|void
name|copy
parameter_list|(
name|int
name|slot
parameter_list|,
name|int
name|doc
parameter_list|)
throws|throws
name|IOException
block|{
name|scores
index|[
name|slot
index|]
operator|=
name|scorer
operator|.
name|score
argument_list|()
expr_stmt|;
assert|assert
operator|!
name|Float
operator|.
name|isNaN
argument_list|(
name|scores
index|[
name|slot
index|]
argument_list|)
assert|;
block|}
annotation|@
name|Override
DECL|method|setNextReader
specifier|public
name|FieldComparator
argument_list|<
name|Float
argument_list|>
name|setNextReader
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|)
block|{
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|setBottom
specifier|public
name|void
name|setBottom
parameter_list|(
specifier|final
name|int
name|bottom
parameter_list|)
block|{
name|this
operator|.
name|bottom
operator|=
name|scores
index|[
name|bottom
index|]
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setTopValue
specifier|public
name|void
name|setTopValue
parameter_list|(
name|Float
name|value
parameter_list|)
block|{
name|topValue
operator|=
name|value
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setScorer
specifier|public
name|void
name|setScorer
parameter_list|(
name|Scorer
name|scorer
parameter_list|)
block|{
comment|// wrap with a ScoreCachingWrappingScorer so that successive calls to
comment|// score() will not incur score computation over and
comment|// over again.
if|if
condition|(
operator|!
operator|(
name|scorer
operator|instanceof
name|ScoreCachingWrappingScorer
operator|)
condition|)
block|{
name|this
operator|.
name|scorer
operator|=
operator|new
name|ScoreCachingWrappingScorer
argument_list|(
name|scorer
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|scorer
operator|=
name|scorer
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|value
specifier|public
name|Float
name|value
parameter_list|(
name|int
name|slot
parameter_list|)
block|{
return|return
name|Float
operator|.
name|valueOf
argument_list|(
name|scores
index|[
name|slot
index|]
argument_list|)
return|;
block|}
comment|// Override because we sort reverse of natural Float order:
annotation|@
name|Override
DECL|method|compareValues
specifier|public
name|int
name|compareValues
parameter_list|(
name|Float
name|first
parameter_list|,
name|Float
name|second
parameter_list|)
block|{
comment|// Reversed intentionally because relevance by default
comment|// sorts descending:
return|return
name|second
operator|.
name|compareTo
argument_list|(
name|first
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|compareTop
specifier|public
name|int
name|compareTop
parameter_list|(
name|int
name|doc
parameter_list|)
throws|throws
name|IOException
block|{
name|float
name|docValue
init|=
name|scorer
operator|.
name|score
argument_list|()
decl_stmt|;
assert|assert
operator|!
name|Float
operator|.
name|isNaN
argument_list|(
name|docValue
argument_list|)
assert|;
return|return
name|Float
operator|.
name|compare
argument_list|(
name|docValue
argument_list|,
name|topValue
argument_list|)
return|;
block|}
block|}
comment|/** Sorts by ascending docID */
DECL|class|DocComparator
specifier|public
specifier|static
specifier|final
class|class
name|DocComparator
extends|extends
name|FieldComparator
argument_list|<
name|Integer
argument_list|>
block|{
DECL|field|docIDs
specifier|private
specifier|final
name|int
index|[]
name|docIDs
decl_stmt|;
DECL|field|docBase
specifier|private
name|int
name|docBase
decl_stmt|;
DECL|field|bottom
specifier|private
name|int
name|bottom
decl_stmt|;
DECL|field|topValue
specifier|private
name|int
name|topValue
decl_stmt|;
comment|/** Creates a new comparator based on document ids for {@code numHits} */
DECL|method|DocComparator
specifier|public
name|DocComparator
parameter_list|(
name|int
name|numHits
parameter_list|)
block|{
name|docIDs
operator|=
operator|new
name|int
index|[
name|numHits
index|]
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|compare
specifier|public
name|int
name|compare
parameter_list|(
name|int
name|slot1
parameter_list|,
name|int
name|slot2
parameter_list|)
block|{
comment|// No overflow risk because docIDs are non-negative
return|return
name|docIDs
index|[
name|slot1
index|]
operator|-
name|docIDs
index|[
name|slot2
index|]
return|;
block|}
annotation|@
name|Override
DECL|method|compareBottom
specifier|public
name|int
name|compareBottom
parameter_list|(
name|int
name|doc
parameter_list|)
block|{
comment|// No overflow risk because docIDs are non-negative
return|return
name|bottom
operator|-
operator|(
name|docBase
operator|+
name|doc
operator|)
return|;
block|}
annotation|@
name|Override
DECL|method|copy
specifier|public
name|void
name|copy
parameter_list|(
name|int
name|slot
parameter_list|,
name|int
name|doc
parameter_list|)
block|{
name|docIDs
index|[
name|slot
index|]
operator|=
name|docBase
operator|+
name|doc
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setNextReader
specifier|public
name|FieldComparator
argument_list|<
name|Integer
argument_list|>
name|setNextReader
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|)
block|{
comment|// TODO: can we "map" our docIDs to the current
comment|// reader? saves having to then subtract on every
comment|// compare call
name|this
operator|.
name|docBase
operator|=
name|context
operator|.
name|docBase
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|setBottom
specifier|public
name|void
name|setBottom
parameter_list|(
specifier|final
name|int
name|bottom
parameter_list|)
block|{
name|this
operator|.
name|bottom
operator|=
name|docIDs
index|[
name|bottom
index|]
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setTopValue
specifier|public
name|void
name|setTopValue
parameter_list|(
name|Integer
name|value
parameter_list|)
block|{
name|topValue
operator|=
name|value
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|value
specifier|public
name|Integer
name|value
parameter_list|(
name|int
name|slot
parameter_list|)
block|{
return|return
name|Integer
operator|.
name|valueOf
argument_list|(
name|docIDs
index|[
name|slot
index|]
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|compareTop
specifier|public
name|int
name|compareTop
parameter_list|(
name|int
name|doc
parameter_list|)
block|{
name|int
name|docValue
init|=
name|docBase
operator|+
name|doc
decl_stmt|;
return|return
name|Integer
operator|.
name|compare
argument_list|(
name|topValue
argument_list|,
name|docValue
argument_list|)
return|;
block|}
block|}
comment|/** Sorts by field's natural Term sort order, using    *  ordinals.  This is functionally equivalent to {@link    *  org.apache.lucene.search.FieldComparator.TermValComparator}, but it first resolves the string    *  to their relative ordinal positions (using the index    *  returned by {@link org.apache.lucene.index.LeafReader#getSortedDocValues(String)}), and    *  does most comparisons using the ordinals.  For medium    *  to large results, this comparator will be much faster    *  than {@link org.apache.lucene.search.FieldComparator.TermValComparator}.  For very small    *  result sets it may be slower. */
DECL|class|TermOrdValComparator
specifier|public
specifier|static
class|class
name|TermOrdValComparator
extends|extends
name|FieldComparator
argument_list|<
name|BytesRef
argument_list|>
block|{
comment|/* Ords for each slot.        @lucene.internal */
DECL|field|ords
specifier|final
name|int
index|[]
name|ords
decl_stmt|;
comment|/* Values for each slot.        @lucene.internal */
DECL|field|values
specifier|final
name|BytesRef
index|[]
name|values
decl_stmt|;
DECL|field|tempBRs
specifier|private
specifier|final
name|BytesRefBuilder
index|[]
name|tempBRs
decl_stmt|;
comment|/* Which reader last copied a value into the slot. When        we compare two slots, we just compare-by-ord if the        readerGen is the same; else we must compare the        values (slower).        @lucene.internal */
DECL|field|readerGen
specifier|final
name|int
index|[]
name|readerGen
decl_stmt|;
comment|/* Gen of current reader we are on.        @lucene.internal */
DECL|field|currentReaderGen
name|int
name|currentReaderGen
init|=
operator|-
literal|1
decl_stmt|;
comment|/* Current reader's doc ord/values.        @lucene.internal */
DECL|field|termsIndex
name|SortedDocValues
name|termsIndex
decl_stmt|;
DECL|field|field
specifier|private
specifier|final
name|String
name|field
decl_stmt|;
comment|/* Bottom slot, or -1 if queue isn't full yet        @lucene.internal */
DECL|field|bottomSlot
name|int
name|bottomSlot
init|=
operator|-
literal|1
decl_stmt|;
comment|/* Bottom ord (same as ords[bottomSlot] once bottomSlot        is set).  Cached for faster compares.        @lucene.internal */
DECL|field|bottomOrd
name|int
name|bottomOrd
decl_stmt|;
comment|/* True if current bottom slot matches the current        reader.        @lucene.internal */
DECL|field|bottomSameReader
name|boolean
name|bottomSameReader
decl_stmt|;
comment|/* Bottom value (same as values[bottomSlot] once        bottomSlot is set).  Cached for faster compares.       @lucene.internal */
DECL|field|bottomValue
name|BytesRef
name|bottomValue
decl_stmt|;
comment|/** Set by setTopValue. */
DECL|field|topValue
name|BytesRef
name|topValue
decl_stmt|;
DECL|field|topSameReader
name|boolean
name|topSameReader
decl_stmt|;
DECL|field|topOrd
name|int
name|topOrd
decl_stmt|;
comment|/** -1 if missing values are sorted first, 1 if they are      *  sorted last */
DECL|field|missingSortCmp
specifier|final
name|int
name|missingSortCmp
decl_stmt|;
comment|/** Which ordinal to use for a missing value. */
DECL|field|missingOrd
specifier|final
name|int
name|missingOrd
decl_stmt|;
comment|/** Creates this, sorting missing values first. */
DECL|method|TermOrdValComparator
specifier|public
name|TermOrdValComparator
parameter_list|(
name|int
name|numHits
parameter_list|,
name|String
name|field
parameter_list|)
block|{
name|this
argument_list|(
name|numHits
argument_list|,
name|field
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/** Creates this, with control over how missing values      *  are sorted.  Pass sortMissingLast=true to put      *  missing values at the end. */
DECL|method|TermOrdValComparator
specifier|public
name|TermOrdValComparator
parameter_list|(
name|int
name|numHits
parameter_list|,
name|String
name|field
parameter_list|,
name|boolean
name|sortMissingLast
parameter_list|)
block|{
name|ords
operator|=
operator|new
name|int
index|[
name|numHits
index|]
expr_stmt|;
name|values
operator|=
operator|new
name|BytesRef
index|[
name|numHits
index|]
expr_stmt|;
name|tempBRs
operator|=
operator|new
name|BytesRefBuilder
index|[
name|numHits
index|]
expr_stmt|;
name|readerGen
operator|=
operator|new
name|int
index|[
name|numHits
index|]
expr_stmt|;
name|this
operator|.
name|field
operator|=
name|field
expr_stmt|;
if|if
condition|(
name|sortMissingLast
condition|)
block|{
name|missingSortCmp
operator|=
literal|1
expr_stmt|;
name|missingOrd
operator|=
name|Integer
operator|.
name|MAX_VALUE
expr_stmt|;
block|}
else|else
block|{
name|missingSortCmp
operator|=
operator|-
literal|1
expr_stmt|;
name|missingOrd
operator|=
operator|-
literal|1
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|compare
specifier|public
name|int
name|compare
parameter_list|(
name|int
name|slot1
parameter_list|,
name|int
name|slot2
parameter_list|)
block|{
if|if
condition|(
name|readerGen
index|[
name|slot1
index|]
operator|==
name|readerGen
index|[
name|slot2
index|]
condition|)
block|{
return|return
name|ords
index|[
name|slot1
index|]
operator|-
name|ords
index|[
name|slot2
index|]
return|;
block|}
specifier|final
name|BytesRef
name|val1
init|=
name|values
index|[
name|slot1
index|]
decl_stmt|;
specifier|final
name|BytesRef
name|val2
init|=
name|values
index|[
name|slot2
index|]
decl_stmt|;
if|if
condition|(
name|val1
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|val2
operator|==
literal|null
condition|)
block|{
return|return
literal|0
return|;
block|}
return|return
name|missingSortCmp
return|;
block|}
elseif|else
if|if
condition|(
name|val2
operator|==
literal|null
condition|)
block|{
return|return
operator|-
name|missingSortCmp
return|;
block|}
return|return
name|val1
operator|.
name|compareTo
argument_list|(
name|val2
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|compareBottom
specifier|public
name|int
name|compareBottom
parameter_list|(
name|int
name|doc
parameter_list|)
block|{
assert|assert
name|bottomSlot
operator|!=
operator|-
literal|1
assert|;
name|int
name|docOrd
init|=
name|termsIndex
operator|.
name|getOrd
argument_list|(
name|doc
argument_list|)
decl_stmt|;
if|if
condition|(
name|docOrd
operator|==
operator|-
literal|1
condition|)
block|{
name|docOrd
operator|=
name|missingOrd
expr_stmt|;
block|}
if|if
condition|(
name|bottomSameReader
condition|)
block|{
comment|// ord is precisely comparable, even in the equal case
return|return
name|bottomOrd
operator|-
name|docOrd
return|;
block|}
elseif|else
if|if
condition|(
name|bottomOrd
operator|>=
name|docOrd
condition|)
block|{
comment|// the equals case always means bottom is> doc
comment|// (because we set bottomOrd to the lower bound in
comment|// setBottom):
return|return
literal|1
return|;
block|}
else|else
block|{
return|return
operator|-
literal|1
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|copy
specifier|public
name|void
name|copy
parameter_list|(
name|int
name|slot
parameter_list|,
name|int
name|doc
parameter_list|)
block|{
name|int
name|ord
init|=
name|termsIndex
operator|.
name|getOrd
argument_list|(
name|doc
argument_list|)
decl_stmt|;
if|if
condition|(
name|ord
operator|==
operator|-
literal|1
condition|)
block|{
name|ord
operator|=
name|missingOrd
expr_stmt|;
name|values
index|[
name|slot
index|]
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
assert|assert
name|ord
operator|>=
literal|0
assert|;
if|if
condition|(
name|tempBRs
index|[
name|slot
index|]
operator|==
literal|null
condition|)
block|{
name|tempBRs
index|[
name|slot
index|]
operator|=
operator|new
name|BytesRefBuilder
argument_list|()
expr_stmt|;
block|}
name|tempBRs
index|[
name|slot
index|]
operator|.
name|copyBytes
argument_list|(
name|termsIndex
operator|.
name|lookupOrd
argument_list|(
name|ord
argument_list|)
argument_list|)
expr_stmt|;
name|values
index|[
name|slot
index|]
operator|=
name|tempBRs
index|[
name|slot
index|]
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
name|ords
index|[
name|slot
index|]
operator|=
name|ord
expr_stmt|;
name|readerGen
index|[
name|slot
index|]
operator|=
name|currentReaderGen
expr_stmt|;
block|}
comment|/** Retrieves the SortedDocValues for the field in this segment */
DECL|method|getSortedDocValues
specifier|protected
name|SortedDocValues
name|getSortedDocValues
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|,
name|String
name|field
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|DocValues
operator|.
name|getSorted
argument_list|(
name|context
operator|.
name|reader
argument_list|()
argument_list|,
name|field
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|setNextReader
specifier|public
name|FieldComparator
argument_list|<
name|BytesRef
argument_list|>
name|setNextReader
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|termsIndex
operator|=
name|getSortedDocValues
argument_list|(
name|context
argument_list|,
name|field
argument_list|)
expr_stmt|;
name|currentReaderGen
operator|++
expr_stmt|;
if|if
condition|(
name|topValue
operator|!=
literal|null
condition|)
block|{
comment|// Recompute topOrd/SameReader
name|int
name|ord
init|=
name|termsIndex
operator|.
name|lookupTerm
argument_list|(
name|topValue
argument_list|)
decl_stmt|;
if|if
condition|(
name|ord
operator|>=
literal|0
condition|)
block|{
name|topSameReader
operator|=
literal|true
expr_stmt|;
name|topOrd
operator|=
name|ord
expr_stmt|;
block|}
else|else
block|{
name|topSameReader
operator|=
literal|false
expr_stmt|;
name|topOrd
operator|=
operator|-
name|ord
operator|-
literal|2
expr_stmt|;
block|}
block|}
else|else
block|{
name|topOrd
operator|=
name|missingOrd
expr_stmt|;
name|topSameReader
operator|=
literal|true
expr_stmt|;
block|}
comment|//System.out.println("  setNextReader topOrd=" + topOrd + " topSameReader=" + topSameReader);
if|if
condition|(
name|bottomSlot
operator|!=
operator|-
literal|1
condition|)
block|{
comment|// Recompute bottomOrd/SameReader
name|setBottom
argument_list|(
name|bottomSlot
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|setBottom
specifier|public
name|void
name|setBottom
parameter_list|(
specifier|final
name|int
name|bottom
parameter_list|)
block|{
name|bottomSlot
operator|=
name|bottom
expr_stmt|;
name|bottomValue
operator|=
name|values
index|[
name|bottomSlot
index|]
expr_stmt|;
if|if
condition|(
name|currentReaderGen
operator|==
name|readerGen
index|[
name|bottomSlot
index|]
condition|)
block|{
name|bottomOrd
operator|=
name|ords
index|[
name|bottomSlot
index|]
expr_stmt|;
name|bottomSameReader
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|bottomValue
operator|==
literal|null
condition|)
block|{
comment|// missingOrd is null for all segments
assert|assert
name|ords
index|[
name|bottomSlot
index|]
operator|==
name|missingOrd
assert|;
name|bottomOrd
operator|=
name|missingOrd
expr_stmt|;
name|bottomSameReader
operator|=
literal|true
expr_stmt|;
name|readerGen
index|[
name|bottomSlot
index|]
operator|=
name|currentReaderGen
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|int
name|ord
init|=
name|termsIndex
operator|.
name|lookupTerm
argument_list|(
name|bottomValue
argument_list|)
decl_stmt|;
if|if
condition|(
name|ord
operator|<
literal|0
condition|)
block|{
name|bottomOrd
operator|=
operator|-
name|ord
operator|-
literal|2
expr_stmt|;
name|bottomSameReader
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|bottomOrd
operator|=
name|ord
expr_stmt|;
comment|// exact value match
name|bottomSameReader
operator|=
literal|true
expr_stmt|;
name|readerGen
index|[
name|bottomSlot
index|]
operator|=
name|currentReaderGen
expr_stmt|;
name|ords
index|[
name|bottomSlot
index|]
operator|=
name|bottomOrd
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|setTopValue
specifier|public
name|void
name|setTopValue
parameter_list|(
name|BytesRef
name|value
parameter_list|)
block|{
comment|// null is fine: it means the last doc of the prior
comment|// search was missing this value
name|topValue
operator|=
name|value
expr_stmt|;
comment|//System.out.println("setTopValue " + topValue);
block|}
annotation|@
name|Override
DECL|method|value
specifier|public
name|BytesRef
name|value
parameter_list|(
name|int
name|slot
parameter_list|)
block|{
return|return
name|values
index|[
name|slot
index|]
return|;
block|}
annotation|@
name|Override
DECL|method|compareTop
specifier|public
name|int
name|compareTop
parameter_list|(
name|int
name|doc
parameter_list|)
block|{
name|int
name|ord
init|=
name|termsIndex
operator|.
name|getOrd
argument_list|(
name|doc
argument_list|)
decl_stmt|;
if|if
condition|(
name|ord
operator|==
operator|-
literal|1
condition|)
block|{
name|ord
operator|=
name|missingOrd
expr_stmt|;
block|}
if|if
condition|(
name|topSameReader
condition|)
block|{
comment|// ord is precisely comparable, even in the equal
comment|// case
comment|//System.out.println("compareTop doc=" + doc + " ord=" + ord + " ret=" + (topOrd-ord));
return|return
name|topOrd
operator|-
name|ord
return|;
block|}
elseif|else
if|if
condition|(
name|ord
operator|<=
name|topOrd
condition|)
block|{
comment|// the equals case always means doc is< value
comment|// (because we set lastOrd to the lower bound)
return|return
literal|1
return|;
block|}
else|else
block|{
return|return
operator|-
literal|1
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|compareValues
specifier|public
name|int
name|compareValues
parameter_list|(
name|BytesRef
name|val1
parameter_list|,
name|BytesRef
name|val2
parameter_list|)
block|{
if|if
condition|(
name|val1
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|val2
operator|==
literal|null
condition|)
block|{
return|return
literal|0
return|;
block|}
return|return
name|missingSortCmp
return|;
block|}
elseif|else
if|if
condition|(
name|val2
operator|==
literal|null
condition|)
block|{
return|return
operator|-
name|missingSortCmp
return|;
block|}
return|return
name|val1
operator|.
name|compareTo
argument_list|(
name|val2
argument_list|)
return|;
block|}
block|}
comment|/** Sorts by field's natural Term sort order.  All    *  comparisons are done using BytesRef.compareTo, which is    *  slow for medium to large result sets but possibly    *  very fast for very small results sets. */
DECL|class|TermValComparator
specifier|public
specifier|static
class|class
name|TermValComparator
extends|extends
name|FieldComparator
argument_list|<
name|BytesRef
argument_list|>
block|{
DECL|field|values
specifier|private
specifier|final
name|BytesRef
index|[]
name|values
decl_stmt|;
DECL|field|tempBRs
specifier|private
specifier|final
name|BytesRefBuilder
index|[]
name|tempBRs
decl_stmt|;
DECL|field|docTerms
specifier|private
name|BinaryDocValues
name|docTerms
decl_stmt|;
DECL|field|docsWithField
specifier|private
name|Bits
name|docsWithField
decl_stmt|;
DECL|field|field
specifier|private
specifier|final
name|String
name|field
decl_stmt|;
DECL|field|bottom
specifier|private
name|BytesRef
name|bottom
decl_stmt|;
DECL|field|topValue
specifier|private
name|BytesRef
name|topValue
decl_stmt|;
DECL|field|missingSortCmp
specifier|private
specifier|final
name|int
name|missingSortCmp
decl_stmt|;
comment|/** Sole constructor. */
DECL|method|TermValComparator
specifier|public
name|TermValComparator
parameter_list|(
name|int
name|numHits
parameter_list|,
name|String
name|field
parameter_list|,
name|boolean
name|sortMissingLast
parameter_list|)
block|{
name|values
operator|=
operator|new
name|BytesRef
index|[
name|numHits
index|]
expr_stmt|;
name|tempBRs
operator|=
operator|new
name|BytesRefBuilder
index|[
name|numHits
index|]
expr_stmt|;
name|this
operator|.
name|field
operator|=
name|field
expr_stmt|;
name|missingSortCmp
operator|=
name|sortMissingLast
condition|?
literal|1
else|:
operator|-
literal|1
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|compare
specifier|public
name|int
name|compare
parameter_list|(
name|int
name|slot1
parameter_list|,
name|int
name|slot2
parameter_list|)
block|{
specifier|final
name|BytesRef
name|val1
init|=
name|values
index|[
name|slot1
index|]
decl_stmt|;
specifier|final
name|BytesRef
name|val2
init|=
name|values
index|[
name|slot2
index|]
decl_stmt|;
return|return
name|compareValues
argument_list|(
name|val1
argument_list|,
name|val2
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|compareBottom
specifier|public
name|int
name|compareBottom
parameter_list|(
name|int
name|doc
parameter_list|)
block|{
specifier|final
name|BytesRef
name|comparableBytes
init|=
name|getComparableBytes
argument_list|(
name|doc
argument_list|,
name|docTerms
operator|.
name|get
argument_list|(
name|doc
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|compareValues
argument_list|(
name|bottom
argument_list|,
name|comparableBytes
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|copy
specifier|public
name|void
name|copy
parameter_list|(
name|int
name|slot
parameter_list|,
name|int
name|doc
parameter_list|)
block|{
specifier|final
name|BytesRef
name|comparableBytes
init|=
name|getComparableBytes
argument_list|(
name|doc
argument_list|,
name|docTerms
operator|.
name|get
argument_list|(
name|doc
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|comparableBytes
operator|==
literal|null
condition|)
block|{
name|values
index|[
name|slot
index|]
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|tempBRs
index|[
name|slot
index|]
operator|==
literal|null
condition|)
block|{
name|tempBRs
index|[
name|slot
index|]
operator|=
operator|new
name|BytesRefBuilder
argument_list|()
expr_stmt|;
block|}
name|tempBRs
index|[
name|slot
index|]
operator|.
name|copyBytes
argument_list|(
name|comparableBytes
argument_list|)
expr_stmt|;
name|values
index|[
name|slot
index|]
operator|=
name|tempBRs
index|[
name|slot
index|]
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
block|}
comment|/** Retrieves the BinaryDocValues for the field in this segment */
DECL|method|getBinaryDocValues
specifier|protected
name|BinaryDocValues
name|getBinaryDocValues
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|,
name|String
name|field
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|DocValues
operator|.
name|getBinary
argument_list|(
name|context
operator|.
name|reader
argument_list|()
argument_list|,
name|field
argument_list|)
return|;
block|}
comment|/** Retrieves the set of documents that have a value in this segment */
DECL|method|getDocsWithField
specifier|protected
name|Bits
name|getDocsWithField
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|,
name|String
name|field
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|DocValues
operator|.
name|getDocsWithField
argument_list|(
name|context
operator|.
name|reader
argument_list|()
argument_list|,
name|field
argument_list|)
return|;
block|}
comment|/** Check whether the given value represents<tt>null</tt>. This can be      *  useful if the {@link BinaryDocValues} returned by {@link #getBinaryDocValues}      *  use a special value as a sentinel. The default implementation checks      *  {@link #getDocsWithField}.      *<p>NOTE: The null value can only be an EMPTY {@link BytesRef}. */
DECL|method|isNull
specifier|protected
name|boolean
name|isNull
parameter_list|(
name|int
name|doc
parameter_list|,
name|BytesRef
name|term
parameter_list|)
block|{
return|return
name|docsWithField
operator|!=
literal|null
operator|&&
name|docsWithField
operator|.
name|get
argument_list|(
name|doc
argument_list|)
operator|==
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|setNextReader
specifier|public
name|FieldComparator
argument_list|<
name|BytesRef
argument_list|>
name|setNextReader
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|docTerms
operator|=
name|getBinaryDocValues
argument_list|(
name|context
argument_list|,
name|field
argument_list|)
expr_stmt|;
name|docsWithField
operator|=
name|getDocsWithField
argument_list|(
name|context
argument_list|,
name|field
argument_list|)
expr_stmt|;
if|if
condition|(
name|docsWithField
operator|instanceof
name|Bits
operator|.
name|MatchAllBits
condition|)
block|{
name|docsWithField
operator|=
literal|null
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|setBottom
specifier|public
name|void
name|setBottom
parameter_list|(
specifier|final
name|int
name|bottom
parameter_list|)
block|{
name|this
operator|.
name|bottom
operator|=
name|values
index|[
name|bottom
index|]
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setTopValue
specifier|public
name|void
name|setTopValue
parameter_list|(
name|BytesRef
name|value
parameter_list|)
block|{
comment|// null is fine: it means the last doc of the prior
comment|// search was missing this value
name|topValue
operator|=
name|value
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|value
specifier|public
name|BytesRef
name|value
parameter_list|(
name|int
name|slot
parameter_list|)
block|{
return|return
name|values
index|[
name|slot
index|]
return|;
block|}
annotation|@
name|Override
DECL|method|compareValues
specifier|public
name|int
name|compareValues
parameter_list|(
name|BytesRef
name|val1
parameter_list|,
name|BytesRef
name|val2
parameter_list|)
block|{
comment|// missing always sorts first:
if|if
condition|(
name|val1
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|val2
operator|==
literal|null
condition|)
block|{
return|return
literal|0
return|;
block|}
return|return
name|missingSortCmp
return|;
block|}
elseif|else
if|if
condition|(
name|val2
operator|==
literal|null
condition|)
block|{
return|return
operator|-
name|missingSortCmp
return|;
block|}
return|return
name|val1
operator|.
name|compareTo
argument_list|(
name|val2
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|compareTop
specifier|public
name|int
name|compareTop
parameter_list|(
name|int
name|doc
parameter_list|)
block|{
specifier|final
name|BytesRef
name|comparableBytes
init|=
name|getComparableBytes
argument_list|(
name|doc
argument_list|,
name|docTerms
operator|.
name|get
argument_list|(
name|doc
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|compareValues
argument_list|(
name|topValue
argument_list|,
name|comparableBytes
argument_list|)
return|;
block|}
comment|/**      * Given a document and a term, return the term itself if it exists or      *<tt>null</tt> otherwise.      */
DECL|method|getComparableBytes
specifier|private
name|BytesRef
name|getComparableBytes
parameter_list|(
name|int
name|doc
parameter_list|,
name|BytesRef
name|term
parameter_list|)
block|{
if|if
condition|(
name|term
operator|.
name|length
operator|==
literal|0
operator|&&
name|isNull
argument_list|(
name|doc
argument_list|,
name|term
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|term
return|;
block|}
block|}
block|}
end_class
end_unit
