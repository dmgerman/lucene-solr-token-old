begin_unit
begin_package
DECL|package|org.apache.lucene.search
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Scorer
operator|.
name|ChildScorer
import|;
end_import
begin_comment
comment|/** Internal document-at-a-time scorers used to deal with stupid coord() computation */
end_comment
begin_class
DECL|class|BooleanTopLevelScorers
class|class
name|BooleanTopLevelScorers
block|{
comment|/**     * Used when there is more than one scorer in a query, but a segment    * only had one non-null scorer. This just wraps that scorer directly    * to factor in coord().    */
DECL|class|BoostedScorer
specifier|static
class|class
name|BoostedScorer
extends|extends
name|FilterScorer
block|{
DECL|field|boost
specifier|private
specifier|final
name|float
name|boost
decl_stmt|;
DECL|method|BoostedScorer
name|BoostedScorer
parameter_list|(
name|Scorer
name|in
parameter_list|,
name|float
name|boost
parameter_list|)
block|{
name|super
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|this
operator|.
name|boost
operator|=
name|boost
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|score
specifier|public
name|float
name|score
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|in
operator|.
name|score
argument_list|()
operator|*
name|boost
return|;
block|}
annotation|@
name|Override
DECL|method|getChildren
specifier|public
name|Collection
argument_list|<
name|ChildScorer
argument_list|>
name|getChildren
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|singleton
argument_list|(
operator|new
name|ChildScorer
argument_list|(
name|in
argument_list|,
literal|"BOOSTED"
argument_list|)
argument_list|)
return|;
block|}
block|}
comment|/**     * Used when there are both mandatory and optional clauses, but minShouldMatch    * dictates that some of the optional clauses must match. The query is a conjunction,    * but must compute coord based on how many optional subscorers matched (freq).    */
DECL|class|CoordinatingConjunctionScorer
specifier|static
class|class
name|CoordinatingConjunctionScorer
extends|extends
name|ConjunctionScorer
block|{
DECL|field|coords
specifier|private
specifier|final
name|float
name|coords
index|[]
decl_stmt|;
DECL|field|reqCount
specifier|private
specifier|final
name|int
name|reqCount
decl_stmt|;
DECL|field|req
specifier|private
specifier|final
name|Scorer
name|req
decl_stmt|;
DECL|field|opt
specifier|private
specifier|final
name|Scorer
name|opt
decl_stmt|;
DECL|method|CoordinatingConjunctionScorer
name|CoordinatingConjunctionScorer
parameter_list|(
name|Weight
name|weight
parameter_list|,
name|float
name|coords
index|[]
parameter_list|,
name|Scorer
name|req
parameter_list|,
name|int
name|reqCount
parameter_list|,
name|Scorer
name|opt
parameter_list|)
block|{
name|super
argument_list|(
name|weight
argument_list|,
operator|new
name|Scorer
index|[]
block|{
name|req
block|,
name|opt
block|}
argument_list|)
expr_stmt|;
name|this
operator|.
name|coords
operator|=
name|coords
expr_stmt|;
name|this
operator|.
name|req
operator|=
name|req
expr_stmt|;
name|this
operator|.
name|reqCount
operator|=
name|reqCount
expr_stmt|;
name|this
operator|.
name|opt
operator|=
name|opt
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|score
specifier|public
name|float
name|score
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|(
name|req
operator|.
name|score
argument_list|()
operator|+
name|opt
operator|.
name|score
argument_list|()
operator|)
operator|*
name|coords
index|[
name|reqCount
operator|+
name|opt
operator|.
name|freq
argument_list|()
index|]
return|;
block|}
block|}
comment|/**     * Used when there are mandatory clauses with one optional clause: we compute    * coord based on whether the optional clause matched or not.    */
DECL|class|ReqSingleOptScorer
specifier|static
class|class
name|ReqSingleOptScorer
extends|extends
name|ReqOptSumScorer
block|{
comment|// coord factor if just the required part matches
DECL|field|coordReq
specifier|private
specifier|final
name|float
name|coordReq
decl_stmt|;
comment|// coord factor if both required and optional part matches
DECL|field|coordBoth
specifier|private
specifier|final
name|float
name|coordBoth
decl_stmt|;
DECL|method|ReqSingleOptScorer
specifier|public
name|ReqSingleOptScorer
parameter_list|(
name|Scorer
name|reqScorer
parameter_list|,
name|Scorer
name|optScorer
parameter_list|,
name|float
name|coordReq
parameter_list|,
name|float
name|coordBoth
parameter_list|)
block|{
name|super
argument_list|(
name|reqScorer
argument_list|,
name|optScorer
argument_list|)
expr_stmt|;
name|this
operator|.
name|coordReq
operator|=
name|coordReq
expr_stmt|;
name|this
operator|.
name|coordBoth
operator|=
name|coordBoth
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|score
specifier|public
name|float
name|score
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|curDoc
init|=
name|reqScorer
operator|.
name|docID
argument_list|()
decl_stmt|;
name|float
name|reqScore
init|=
name|reqScorer
operator|.
name|score
argument_list|()
decl_stmt|;
if|if
condition|(
name|optScorer
operator|==
literal|null
condition|)
block|{
return|return
name|reqScore
operator|*
name|coordReq
return|;
block|}
name|int
name|optScorerDoc
init|=
name|optScorer
operator|.
name|docID
argument_list|()
decl_stmt|;
if|if
condition|(
name|optScorerDoc
operator|<
name|curDoc
operator|&&
operator|(
name|optScorerDoc
operator|=
name|optScorer
operator|.
name|advance
argument_list|(
name|curDoc
argument_list|)
operator|)
operator|==
name|NO_MORE_DOCS
condition|)
block|{
name|optScorer
operator|=
literal|null
expr_stmt|;
return|return
name|reqScore
operator|*
name|coordReq
return|;
block|}
return|return
name|optScorerDoc
operator|==
name|curDoc
condition|?
operator|(
name|reqScore
operator|+
name|optScorer
operator|.
name|score
argument_list|()
operator|)
operator|*
name|coordBoth
else|:
name|reqScore
operator|*
name|coordReq
return|;
block|}
block|}
comment|/**     * Used when there are mandatory clauses with optional clauses: we compute    * coord based on how many optional subscorers matched (freq).    */
DECL|class|ReqMultiOptScorer
specifier|static
class|class
name|ReqMultiOptScorer
extends|extends
name|ReqOptSumScorer
block|{
DECL|field|requiredCount
specifier|private
specifier|final
name|int
name|requiredCount
decl_stmt|;
DECL|field|coords
specifier|private
specifier|final
name|float
name|coords
index|[]
decl_stmt|;
DECL|method|ReqMultiOptScorer
specifier|public
name|ReqMultiOptScorer
parameter_list|(
name|Scorer
name|reqScorer
parameter_list|,
name|Scorer
name|optScorer
parameter_list|,
name|int
name|requiredCount
parameter_list|,
name|float
name|coords
index|[]
parameter_list|)
block|{
name|super
argument_list|(
name|reqScorer
argument_list|,
name|optScorer
argument_list|)
expr_stmt|;
name|this
operator|.
name|requiredCount
operator|=
name|requiredCount
expr_stmt|;
name|this
operator|.
name|coords
operator|=
name|coords
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|score
specifier|public
name|float
name|score
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|curDoc
init|=
name|reqScorer
operator|.
name|docID
argument_list|()
decl_stmt|;
name|float
name|reqScore
init|=
name|reqScorer
operator|.
name|score
argument_list|()
decl_stmt|;
if|if
condition|(
name|optScorer
operator|==
literal|null
condition|)
block|{
return|return
name|reqScore
operator|*
name|coords
index|[
name|requiredCount
index|]
return|;
block|}
name|int
name|optScorerDoc
init|=
name|optScorer
operator|.
name|docID
argument_list|()
decl_stmt|;
if|if
condition|(
name|optScorerDoc
operator|<
name|curDoc
operator|&&
operator|(
name|optScorerDoc
operator|=
name|optScorer
operator|.
name|advance
argument_list|(
name|curDoc
argument_list|)
operator|)
operator|==
name|NO_MORE_DOCS
condition|)
block|{
name|optScorer
operator|=
literal|null
expr_stmt|;
return|return
name|reqScore
operator|*
name|coords
index|[
name|requiredCount
index|]
return|;
block|}
return|return
name|optScorerDoc
operator|==
name|curDoc
condition|?
operator|(
name|reqScore
operator|+
name|optScorer
operator|.
name|score
argument_list|()
operator|)
operator|*
name|coords
index|[
name|requiredCount
operator|+
name|optScorer
operator|.
name|freq
argument_list|()
index|]
else|:
name|reqScore
operator|*
name|coords
index|[
name|requiredCount
index|]
return|;
block|}
block|}
block|}
end_class
end_unit
