begin_unit
begin_package
DECL|package|org.apache.lucene.util
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|ManagementFactory
import|;
end_import
begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|PlatformManagedObject
import|;
end_import
begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|*
import|;
end_import
begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DecimalFormat
import|;
end_import
begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DecimalFormatSymbols
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import
begin_comment
comment|/**  * Estimates the size (memory representation) of Java objects.  *   * @see #sizeOf(Object)  * @see #shallowSizeOf(Object)  * @see #shallowSizeOfInstance(Class)  *   * @lucene.internal  */
end_comment
begin_class
DECL|class|RamUsageEstimator
specifier|public
specifier|final
class|class
name|RamUsageEstimator
block|{
comment|/**    * JVM diagnostic features.    */
DECL|enum|JvmFeature
specifier|public
specifier|static
enum|enum
name|JvmFeature
block|{
DECL|enum constant|OBJECT_REFERENCE_SIZE
name|OBJECT_REFERENCE_SIZE
argument_list|(
literal|"Object reference size estimated using array index scale"
argument_list|)
block|,
DECL|enum constant|ARRAY_HEADER_SIZE
name|ARRAY_HEADER_SIZE
argument_list|(
literal|"Array header size estimated using array based offset"
argument_list|)
block|,
DECL|enum constant|FIELD_OFFSETS
name|FIELD_OFFSETS
argument_list|(
literal|"Shallow instance size based on field offsets"
argument_list|)
block|,
DECL|enum constant|OBJECT_ALIGNMENT
name|OBJECT_ALIGNMENT
argument_list|(
literal|"Object alignment retrieved from HotSpotDiagnostic MX bean"
argument_list|)
block|;
DECL|field|description
specifier|public
specifier|final
name|String
name|description
decl_stmt|;
DECL|method|JvmFeature
specifier|private
name|JvmFeature
parameter_list|(
name|String
name|description
parameter_list|)
block|{
name|this
operator|.
name|description
operator|=
name|description
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|super
operator|.
name|name
argument_list|()
operator|+
literal|" ("
operator|+
name|description
operator|+
literal|")"
return|;
block|}
block|}
comment|/** JVM info string for debugging and reports. */
DECL|field|JVM_INFO_STRING
specifier|public
specifier|final
specifier|static
name|String
name|JVM_INFO_STRING
decl_stmt|;
comment|/** One kilobyte bytes. */
DECL|field|ONE_KB
specifier|public
specifier|static
specifier|final
name|long
name|ONE_KB
init|=
literal|1024
decl_stmt|;
comment|/** One megabyte bytes. */
DECL|field|ONE_MB
specifier|public
specifier|static
specifier|final
name|long
name|ONE_MB
init|=
name|ONE_KB
operator|*
name|ONE_KB
decl_stmt|;
comment|/** One gigabyte bytes.*/
DECL|field|ONE_GB
specifier|public
specifier|static
specifier|final
name|long
name|ONE_GB
init|=
name|ONE_KB
operator|*
name|ONE_MB
decl_stmt|;
comment|/** No instantiation. */
DECL|method|RamUsageEstimator
specifier|private
name|RamUsageEstimator
parameter_list|()
block|{}
DECL|field|NUM_BYTES_BOOLEAN
specifier|public
specifier|final
specifier|static
name|int
name|NUM_BYTES_BOOLEAN
init|=
literal|1
decl_stmt|;
DECL|field|NUM_BYTES_BYTE
specifier|public
specifier|final
specifier|static
name|int
name|NUM_BYTES_BYTE
init|=
literal|1
decl_stmt|;
DECL|field|NUM_BYTES_CHAR
specifier|public
specifier|final
specifier|static
name|int
name|NUM_BYTES_CHAR
init|=
literal|2
decl_stmt|;
DECL|field|NUM_BYTES_SHORT
specifier|public
specifier|final
specifier|static
name|int
name|NUM_BYTES_SHORT
init|=
literal|2
decl_stmt|;
DECL|field|NUM_BYTES_INT
specifier|public
specifier|final
specifier|static
name|int
name|NUM_BYTES_INT
init|=
literal|4
decl_stmt|;
DECL|field|NUM_BYTES_FLOAT
specifier|public
specifier|final
specifier|static
name|int
name|NUM_BYTES_FLOAT
init|=
literal|4
decl_stmt|;
DECL|field|NUM_BYTES_LONG
specifier|public
specifier|final
specifier|static
name|int
name|NUM_BYTES_LONG
init|=
literal|8
decl_stmt|;
DECL|field|NUM_BYTES_DOUBLE
specifier|public
specifier|final
specifier|static
name|int
name|NUM_BYTES_DOUBLE
init|=
literal|8
decl_stmt|;
comment|/**     * Number of bytes this jvm uses to represent an object reference.     */
DECL|field|NUM_BYTES_OBJECT_REF
specifier|public
specifier|final
specifier|static
name|int
name|NUM_BYTES_OBJECT_REF
decl_stmt|;
comment|/**    * Number of bytes to represent an object header (no fields, no alignments).    */
DECL|field|NUM_BYTES_OBJECT_HEADER
specifier|public
specifier|final
specifier|static
name|int
name|NUM_BYTES_OBJECT_HEADER
decl_stmt|;
comment|/**    * Number of bytes to represent an array header (no content, but with alignments).    */
DECL|field|NUM_BYTES_ARRAY_HEADER
specifier|public
specifier|final
specifier|static
name|int
name|NUM_BYTES_ARRAY_HEADER
decl_stmt|;
comment|/**    * A constant specifying the object alignment boundary inside the JVM. Objects will    * always take a full multiple of this constant, possibly wasting some space.     */
DECL|field|NUM_BYTES_OBJECT_ALIGNMENT
specifier|public
specifier|final
specifier|static
name|int
name|NUM_BYTES_OBJECT_ALIGNMENT
decl_stmt|;
comment|/**    * Sizes of primitive classes.    */
DECL|field|primitiveSizes
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|Integer
argument_list|>
name|primitiveSizes
decl_stmt|;
static|static
block|{
name|primitiveSizes
operator|=
operator|new
name|IdentityHashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|primitiveSizes
operator|.
name|put
argument_list|(
name|boolean
operator|.
name|class
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|NUM_BYTES_BOOLEAN
argument_list|)
argument_list|)
expr_stmt|;
name|primitiveSizes
operator|.
name|put
argument_list|(
name|byte
operator|.
name|class
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|NUM_BYTES_BYTE
argument_list|)
argument_list|)
expr_stmt|;
name|primitiveSizes
operator|.
name|put
argument_list|(
name|char
operator|.
name|class
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|NUM_BYTES_CHAR
argument_list|)
argument_list|)
expr_stmt|;
name|primitiveSizes
operator|.
name|put
argument_list|(
name|short
operator|.
name|class
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|NUM_BYTES_SHORT
argument_list|)
argument_list|)
expr_stmt|;
name|primitiveSizes
operator|.
name|put
argument_list|(
name|int
operator|.
name|class
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|NUM_BYTES_INT
argument_list|)
argument_list|)
expr_stmt|;
name|primitiveSizes
operator|.
name|put
argument_list|(
name|float
operator|.
name|class
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|NUM_BYTES_FLOAT
argument_list|)
argument_list|)
expr_stmt|;
name|primitiveSizes
operator|.
name|put
argument_list|(
name|double
operator|.
name|class
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|NUM_BYTES_DOUBLE
argument_list|)
argument_list|)
expr_stmt|;
name|primitiveSizes
operator|.
name|put
argument_list|(
name|long
operator|.
name|class
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|NUM_BYTES_LONG
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * A handle to<code>sun.misc.Unsafe</code>.    */
DECL|field|theUnsafe
specifier|private
specifier|final
specifier|static
name|Object
name|theUnsafe
decl_stmt|;
comment|/**    * A handle to<code>sun.misc.Unsafe#fieldOffset(Field)</code>.    */
DECL|field|objectFieldOffsetMethod
specifier|private
specifier|final
specifier|static
name|Method
name|objectFieldOffsetMethod
decl_stmt|;
comment|/**    * All the supported "internal" JVM features detected at clinit.     */
DECL|field|supportedFeatures
specifier|private
specifier|final
specifier|static
name|EnumSet
argument_list|<
name|JvmFeature
argument_list|>
name|supportedFeatures
decl_stmt|;
comment|/**    * Initialize constants and try to collect information about the JVM internals.     */
static|static
block|{
comment|// Initialize empirically measured defaults. We'll modify them to the current
comment|// JVM settings later on if possible.
name|int
name|referenceSize
init|=
name|Constants
operator|.
name|JRE_IS_64BIT
condition|?
literal|8
else|:
literal|4
decl_stmt|;
name|int
name|objectHeader
init|=
name|Constants
operator|.
name|JRE_IS_64BIT
condition|?
literal|16
else|:
literal|8
decl_stmt|;
comment|// The following is objectHeader + NUM_BYTES_INT, but aligned (object alignment)
comment|// so on 64 bit JVMs it'll be align(16 + 4, @8) = 24.
name|int
name|arrayHeader
init|=
name|Constants
operator|.
name|JRE_IS_64BIT
condition|?
literal|24
else|:
literal|12
decl_stmt|;
name|supportedFeatures
operator|=
name|EnumSet
operator|.
name|noneOf
argument_list|(
name|JvmFeature
operator|.
name|class
argument_list|)
expr_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|unsafeClass
init|=
literal|null
decl_stmt|;
name|Object
name|tempTheUnsafe
init|=
literal|null
decl_stmt|;
try|try
block|{
name|unsafeClass
operator|=
name|Class
operator|.
name|forName
argument_list|(
literal|"sun.misc.Unsafe"
argument_list|)
expr_stmt|;
specifier|final
name|Field
name|unsafeField
init|=
name|unsafeClass
operator|.
name|getDeclaredField
argument_list|(
literal|"theUnsafe"
argument_list|)
decl_stmt|;
name|unsafeField
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|tempTheUnsafe
operator|=
name|unsafeField
operator|.
name|get
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// Ignore.
block|}
name|theUnsafe
operator|=
name|tempTheUnsafe
expr_stmt|;
comment|// get object reference size by getting scale factor of Object[] arrays:
try|try
block|{
specifier|final
name|Method
name|arrayIndexScaleM
init|=
name|unsafeClass
operator|.
name|getMethod
argument_list|(
literal|"arrayIndexScale"
argument_list|,
name|Class
operator|.
name|class
argument_list|)
decl_stmt|;
name|referenceSize
operator|=
operator|(
operator|(
name|Number
operator|)
name|arrayIndexScaleM
operator|.
name|invoke
argument_list|(
name|theUnsafe
argument_list|,
name|Object
index|[]
operator|.
expr|class
argument_list|)
operator|)
operator|.
name|intValue
argument_list|()
expr_stmt|;
name|supportedFeatures
operator|.
name|add
argument_list|(
name|JvmFeature
operator|.
name|OBJECT_REFERENCE_SIZE
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// ignore.
block|}
comment|// "best guess" based on reference size. We will attempt to modify
comment|// these to exact values if there is supported infrastructure.
name|objectHeader
operator|=
name|Constants
operator|.
name|JRE_IS_64BIT
condition|?
operator|(
literal|8
operator|+
name|referenceSize
operator|)
else|:
literal|8
expr_stmt|;
name|arrayHeader
operator|=
name|Constants
operator|.
name|JRE_IS_64BIT
condition|?
operator|(
literal|8
operator|+
literal|2
operator|*
name|referenceSize
operator|)
else|:
literal|12
expr_stmt|;
comment|// get the object header size:
comment|// - first try out if the field offsets are not scaled (see warning in Unsafe docs)
comment|// - get the object header size by getting the field offset of the first field of a dummy object
comment|// If the scaling is byte-wise and unsafe is available, enable dynamic size measurement for
comment|// estimateRamUsage().
name|Method
name|tempObjectFieldOffsetMethod
init|=
literal|null
decl_stmt|;
try|try
block|{
specifier|final
name|Method
name|objectFieldOffsetM
init|=
name|unsafeClass
operator|.
name|getMethod
argument_list|(
literal|"objectFieldOffset"
argument_list|,
name|Field
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|Field
name|dummy1Field
init|=
name|DummyTwoLongObject
operator|.
name|class
operator|.
name|getDeclaredField
argument_list|(
literal|"dummy1"
argument_list|)
decl_stmt|;
specifier|final
name|int
name|ofs1
init|=
operator|(
operator|(
name|Number
operator|)
name|objectFieldOffsetM
operator|.
name|invoke
argument_list|(
name|theUnsafe
argument_list|,
name|dummy1Field
argument_list|)
operator|)
operator|.
name|intValue
argument_list|()
decl_stmt|;
specifier|final
name|Field
name|dummy2Field
init|=
name|DummyTwoLongObject
operator|.
name|class
operator|.
name|getDeclaredField
argument_list|(
literal|"dummy2"
argument_list|)
decl_stmt|;
specifier|final
name|int
name|ofs2
init|=
operator|(
operator|(
name|Number
operator|)
name|objectFieldOffsetM
operator|.
name|invoke
argument_list|(
name|theUnsafe
argument_list|,
name|dummy2Field
argument_list|)
operator|)
operator|.
name|intValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|Math
operator|.
name|abs
argument_list|(
name|ofs2
operator|-
name|ofs1
argument_list|)
operator|==
name|NUM_BYTES_LONG
condition|)
block|{
specifier|final
name|Field
name|baseField
init|=
name|DummyOneFieldObject
operator|.
name|class
operator|.
name|getDeclaredField
argument_list|(
literal|"base"
argument_list|)
decl_stmt|;
name|objectHeader
operator|=
operator|(
operator|(
name|Number
operator|)
name|objectFieldOffsetM
operator|.
name|invoke
argument_list|(
name|theUnsafe
argument_list|,
name|baseField
argument_list|)
operator|)
operator|.
name|intValue
argument_list|()
expr_stmt|;
name|supportedFeatures
operator|.
name|add
argument_list|(
name|JvmFeature
operator|.
name|FIELD_OFFSETS
argument_list|)
expr_stmt|;
name|tempObjectFieldOffsetMethod
operator|=
name|objectFieldOffsetM
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// Ignore.
block|}
name|objectFieldOffsetMethod
operator|=
name|tempObjectFieldOffsetMethod
expr_stmt|;
comment|// Get the array header size by retrieving the array base offset
comment|// (offset of the first element of an array).
try|try
block|{
specifier|final
name|Method
name|arrayBaseOffsetM
init|=
name|unsafeClass
operator|.
name|getMethod
argument_list|(
literal|"arrayBaseOffset"
argument_list|,
name|Class
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// we calculate that only for byte[] arrays, it's actually the same for all types:
name|arrayHeader
operator|=
operator|(
operator|(
name|Number
operator|)
name|arrayBaseOffsetM
operator|.
name|invoke
argument_list|(
name|theUnsafe
argument_list|,
name|byte
index|[]
operator|.
expr|class
argument_list|)
operator|)
operator|.
name|intValue
argument_list|()
expr_stmt|;
name|supportedFeatures
operator|.
name|add
argument_list|(
name|JvmFeature
operator|.
name|ARRAY_HEADER_SIZE
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// Ignore.
block|}
name|NUM_BYTES_OBJECT_REF
operator|=
name|referenceSize
expr_stmt|;
name|NUM_BYTES_OBJECT_HEADER
operator|=
name|objectHeader
expr_stmt|;
name|NUM_BYTES_ARRAY_HEADER
operator|=
name|arrayHeader
expr_stmt|;
comment|// Try to get the object alignment (the default seems to be 8 on Hotspot,
comment|// regardless of the architecture).
name|int
name|objectAlignment
init|=
literal|8
decl_stmt|;
try|try
block|{
specifier|final
name|Class
argument_list|<
name|?
extends|extends
name|PlatformManagedObject
argument_list|>
name|beanClazz
init|=
name|Class
operator|.
name|forName
argument_list|(
literal|"com.sun.management.HotSpotDiagnosticMXBean"
argument_list|)
operator|.
name|asSubclass
argument_list|(
name|PlatformManagedObject
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|Object
name|hotSpotBean
init|=
name|ManagementFactory
operator|.
name|getPlatformMXBean
argument_list|(
name|beanClazz
argument_list|)
decl_stmt|;
if|if
condition|(
name|hotSpotBean
operator|!=
literal|null
condition|)
block|{
specifier|final
name|Method
name|getVMOptionMethod
init|=
name|beanClazz
operator|.
name|getMethod
argument_list|(
literal|"getVMOption"
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|Object
name|vmOption
init|=
name|getVMOptionMethod
operator|.
name|invoke
argument_list|(
name|hotSpotBean
argument_list|,
literal|"ObjectAlignmentInBytes"
argument_list|)
decl_stmt|;
name|objectAlignment
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|vmOption
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"getValue"
argument_list|)
operator|.
name|invoke
argument_list|(
name|vmOption
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|supportedFeatures
operator|.
name|add
argument_list|(
name|JvmFeature
operator|.
name|OBJECT_ALIGNMENT
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// Ignore.
block|}
name|NUM_BYTES_OBJECT_ALIGNMENT
operator|=
name|objectAlignment
expr_stmt|;
name|JVM_INFO_STRING
operator|=
literal|"[JVM: "
operator|+
name|Constants
operator|.
name|JVM_NAME
operator|+
literal|", "
operator|+
name|Constants
operator|.
name|JVM_VERSION
operator|+
literal|", "
operator|+
name|Constants
operator|.
name|JVM_VENDOR
operator|+
literal|", "
operator|+
name|Constants
operator|.
name|JAVA_VENDOR
operator|+
literal|", "
operator|+
name|Constants
operator|.
name|JAVA_VERSION
operator|+
literal|"]"
expr_stmt|;
block|}
comment|/**    * Cached information about a given class.       */
DECL|class|ClassCache
specifier|private
specifier|static
specifier|final
class|class
name|ClassCache
block|{
DECL|field|alignedShallowInstanceSize
specifier|public
specifier|final
name|long
name|alignedShallowInstanceSize
decl_stmt|;
DECL|field|referenceFields
specifier|public
specifier|final
name|Field
index|[]
name|referenceFields
decl_stmt|;
DECL|method|ClassCache
specifier|public
name|ClassCache
parameter_list|(
name|long
name|alignedShallowInstanceSize
parameter_list|,
name|Field
index|[]
name|referenceFields
parameter_list|)
block|{
name|this
operator|.
name|alignedShallowInstanceSize
operator|=
name|alignedShallowInstanceSize
expr_stmt|;
name|this
operator|.
name|referenceFields
operator|=
name|referenceFields
expr_stmt|;
block|}
block|}
comment|// Object with just one field to determine the object header size by getting the offset of the dummy field:
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
DECL|class|DummyOneFieldObject
specifier|private
specifier|static
specifier|final
class|class
name|DummyOneFieldObject
block|{
DECL|field|base
specifier|public
name|byte
name|base
decl_stmt|;
block|}
comment|// Another test object for checking, if the difference in offsets of dummy1 and dummy2 is 8 bytes.
comment|// Only then we can be sure that those are real, unscaled offsets:
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
DECL|class|DummyTwoLongObject
specifier|private
specifier|static
specifier|final
class|class
name|DummyTwoLongObject
block|{
DECL|field|dummy1
DECL|field|dummy2
specifier|public
name|long
name|dummy1
decl_stmt|,
name|dummy2
decl_stmt|;
block|}
comment|/**     * Returns true, if the current JVM is fully supported by {@code RamUsageEstimator}.    * If this method returns {@code false} you are maybe using a 3rd party Java VM    * that is not supporting Oracle/Sun private APIs. The memory estimates can be     * imprecise then (no way of detecting compressed references, alignments, etc.).     * Lucene still tries to use sensible defaults.    */
DECL|method|isSupportedJVM
specifier|public
specifier|static
name|boolean
name|isSupportedJVM
parameter_list|()
block|{
return|return
name|supportedFeatures
operator|.
name|size
argument_list|()
operator|==
name|JvmFeature
operator|.
name|values
argument_list|()
operator|.
name|length
return|;
block|}
comment|/**     * Aligns an object size to be the next multiple of {@link #NUM_BYTES_OBJECT_ALIGNMENT}.     */
DECL|method|alignObjectSize
specifier|public
specifier|static
name|long
name|alignObjectSize
parameter_list|(
name|long
name|size
parameter_list|)
block|{
name|size
operator|+=
operator|(
name|long
operator|)
name|NUM_BYTES_OBJECT_ALIGNMENT
operator|-
literal|1L
expr_stmt|;
return|return
name|size
operator|-
operator|(
name|size
operator|%
name|NUM_BYTES_OBJECT_ALIGNMENT
operator|)
return|;
block|}
comment|/** Returns the size in bytes of the byte[] object. */
DECL|method|sizeOf
specifier|public
specifier|static
name|long
name|sizeOf
parameter_list|(
name|byte
index|[]
name|arr
parameter_list|)
block|{
return|return
name|alignObjectSize
argument_list|(
operator|(
name|long
operator|)
name|NUM_BYTES_ARRAY_HEADER
operator|+
name|arr
operator|.
name|length
argument_list|)
return|;
block|}
comment|/** Returns the size in bytes of the boolean[] object. */
DECL|method|sizeOf
specifier|public
specifier|static
name|long
name|sizeOf
parameter_list|(
name|boolean
index|[]
name|arr
parameter_list|)
block|{
return|return
name|alignObjectSize
argument_list|(
operator|(
name|long
operator|)
name|NUM_BYTES_ARRAY_HEADER
operator|+
name|arr
operator|.
name|length
argument_list|)
return|;
block|}
comment|/** Returns the size in bytes of the char[] object. */
DECL|method|sizeOf
specifier|public
specifier|static
name|long
name|sizeOf
parameter_list|(
name|char
index|[]
name|arr
parameter_list|)
block|{
return|return
name|alignObjectSize
argument_list|(
operator|(
name|long
operator|)
name|NUM_BYTES_ARRAY_HEADER
operator|+
operator|(
name|long
operator|)
name|NUM_BYTES_CHAR
operator|*
name|arr
operator|.
name|length
argument_list|)
return|;
block|}
comment|/** Returns the size in bytes of the short[] object. */
DECL|method|sizeOf
specifier|public
specifier|static
name|long
name|sizeOf
parameter_list|(
name|short
index|[]
name|arr
parameter_list|)
block|{
return|return
name|alignObjectSize
argument_list|(
operator|(
name|long
operator|)
name|NUM_BYTES_ARRAY_HEADER
operator|+
operator|(
name|long
operator|)
name|NUM_BYTES_SHORT
operator|*
name|arr
operator|.
name|length
argument_list|)
return|;
block|}
comment|/** Returns the size in bytes of the int[] object. */
DECL|method|sizeOf
specifier|public
specifier|static
name|long
name|sizeOf
parameter_list|(
name|int
index|[]
name|arr
parameter_list|)
block|{
return|return
name|alignObjectSize
argument_list|(
operator|(
name|long
operator|)
name|NUM_BYTES_ARRAY_HEADER
operator|+
operator|(
name|long
operator|)
name|NUM_BYTES_INT
operator|*
name|arr
operator|.
name|length
argument_list|)
return|;
block|}
comment|/** Returns the size in bytes of the float[] object. */
DECL|method|sizeOf
specifier|public
specifier|static
name|long
name|sizeOf
parameter_list|(
name|float
index|[]
name|arr
parameter_list|)
block|{
return|return
name|alignObjectSize
argument_list|(
operator|(
name|long
operator|)
name|NUM_BYTES_ARRAY_HEADER
operator|+
operator|(
name|long
operator|)
name|NUM_BYTES_FLOAT
operator|*
name|arr
operator|.
name|length
argument_list|)
return|;
block|}
comment|/** Returns the size in bytes of the long[] object. */
DECL|method|sizeOf
specifier|public
specifier|static
name|long
name|sizeOf
parameter_list|(
name|long
index|[]
name|arr
parameter_list|)
block|{
return|return
name|alignObjectSize
argument_list|(
operator|(
name|long
operator|)
name|NUM_BYTES_ARRAY_HEADER
operator|+
operator|(
name|long
operator|)
name|NUM_BYTES_LONG
operator|*
name|arr
operator|.
name|length
argument_list|)
return|;
block|}
comment|/** Returns the size in bytes of the double[] object. */
DECL|method|sizeOf
specifier|public
specifier|static
name|long
name|sizeOf
parameter_list|(
name|double
index|[]
name|arr
parameter_list|)
block|{
return|return
name|alignObjectSize
argument_list|(
operator|(
name|long
operator|)
name|NUM_BYTES_ARRAY_HEADER
operator|+
operator|(
name|long
operator|)
name|NUM_BYTES_DOUBLE
operator|*
name|arr
operator|.
name|length
argument_list|)
return|;
block|}
comment|/**     * Estimates the RAM usage by the given object. It will    * walk the object tree and sum up all referenced objects.    *     *<p><b>Resource Usage:</b> This method internally uses a set of    * every object seen during traversals so it does allocate memory    * (it isn't side-effect free). After the method exits, this memory    * should be GCed.</p>    */
DECL|method|sizeOf
specifier|public
specifier|static
name|long
name|sizeOf
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
return|return
name|measureObjectSize
argument_list|(
name|obj
argument_list|)
return|;
block|}
comment|/**     * Estimates a "shallow" memory usage of the given object. For arrays, this will be the    * memory taken by array storage (no subreferences will be followed). For objects, this    * will be the memory taken by the fields.    *     * JVM object alignments are also applied.    */
DECL|method|shallowSizeOf
specifier|public
specifier|static
name|long
name|shallowSizeOf
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
return|return
literal|0
return|;
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|clz
init|=
name|obj
operator|.
name|getClass
argument_list|()
decl_stmt|;
if|if
condition|(
name|clz
operator|.
name|isArray
argument_list|()
condition|)
block|{
return|return
name|shallowSizeOfArray
argument_list|(
name|obj
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|shallowSizeOfInstance
argument_list|(
name|clz
argument_list|)
return|;
block|}
block|}
comment|/**    * Returns the shallow instance size in bytes an instance of the given class would occupy.    * This works with all conventional classes and primitive types, but not with arrays    * (the size then depends on the number of elements and varies from object to object).    *     * @see #shallowSizeOf(Object)    * @throws IllegalArgumentException if {@code clazz} is an array class.     */
DECL|method|shallowSizeOfInstance
specifier|public
specifier|static
name|long
name|shallowSizeOfInstance
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|)
block|{
if|if
condition|(
name|clazz
operator|.
name|isArray
argument_list|()
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"This method does not work with array classes."
argument_list|)
throw|;
if|if
condition|(
name|clazz
operator|.
name|isPrimitive
argument_list|()
condition|)
return|return
name|primitiveSizes
operator|.
name|get
argument_list|(
name|clazz
argument_list|)
return|;
name|long
name|size
init|=
name|NUM_BYTES_OBJECT_HEADER
decl_stmt|;
comment|// Walk type hierarchy
for|for
control|(
init|;
name|clazz
operator|!=
literal|null
condition|;
name|clazz
operator|=
name|clazz
operator|.
name|getSuperclass
argument_list|()
control|)
block|{
specifier|final
name|Field
index|[]
name|fields
init|=
name|clazz
operator|.
name|getDeclaredFields
argument_list|()
decl_stmt|;
for|for
control|(
name|Field
name|f
range|:
name|fields
control|)
block|{
if|if
condition|(
operator|!
name|Modifier
operator|.
name|isStatic
argument_list|(
name|f
operator|.
name|getModifiers
argument_list|()
argument_list|)
condition|)
block|{
name|size
operator|=
name|adjustForField
argument_list|(
name|size
argument_list|,
name|f
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|alignObjectSize
argument_list|(
name|size
argument_list|)
return|;
block|}
comment|/**    * Return shallow size of any<code>array</code>.    */
DECL|method|shallowSizeOfArray
specifier|private
specifier|static
name|long
name|shallowSizeOfArray
parameter_list|(
name|Object
name|array
parameter_list|)
block|{
name|long
name|size
init|=
name|NUM_BYTES_ARRAY_HEADER
decl_stmt|;
specifier|final
name|int
name|len
init|=
name|Array
operator|.
name|getLength
argument_list|(
name|array
argument_list|)
decl_stmt|;
if|if
condition|(
name|len
operator|>
literal|0
condition|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|arrayElementClazz
init|=
name|array
operator|.
name|getClass
argument_list|()
operator|.
name|getComponentType
argument_list|()
decl_stmt|;
if|if
condition|(
name|arrayElementClazz
operator|.
name|isPrimitive
argument_list|()
condition|)
block|{
name|size
operator|+=
operator|(
name|long
operator|)
name|len
operator|*
name|primitiveSizes
operator|.
name|get
argument_list|(
name|arrayElementClazz
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|size
operator|+=
operator|(
name|long
operator|)
name|NUM_BYTES_OBJECT_REF
operator|*
name|len
expr_stmt|;
block|}
block|}
return|return
name|alignObjectSize
argument_list|(
name|size
argument_list|)
return|;
block|}
comment|/*    * Non-recursive version of object descend. This consumes more memory than recursive in-depth     * traversal but prevents stack overflows on long chains of objects    * or complex graphs (a max. recursion depth on my machine was ~5000 objects linked in a chain    * so not too much).      */
DECL|method|measureObjectSize
specifier|private
specifier|static
name|long
name|measureObjectSize
parameter_list|(
name|Object
name|root
parameter_list|)
block|{
comment|// Objects seen so far.
specifier|final
name|IdentityHashSet
argument_list|<
name|Object
argument_list|>
name|seen
init|=
operator|new
name|IdentityHashSet
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Class cache with reference Field and precalculated shallow size.
specifier|final
name|IdentityHashMap
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|ClassCache
argument_list|>
name|classCache
init|=
operator|new
name|IdentityHashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Stack of objects pending traversal. Recursion caused stack overflows.
specifier|final
name|ArrayList
argument_list|<
name|Object
argument_list|>
name|stack
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|stack
operator|.
name|add
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|long
name|totalSize
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|!
name|stack
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
specifier|final
name|Object
name|ob
init|=
name|stack
operator|.
name|remove
argument_list|(
name|stack
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|ob
operator|==
literal|null
operator|||
name|seen
operator|.
name|contains
argument_list|(
name|ob
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|seen
operator|.
name|add
argument_list|(
name|ob
argument_list|)
expr_stmt|;
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|obClazz
init|=
name|ob
operator|.
name|getClass
argument_list|()
decl_stmt|;
if|if
condition|(
name|obClazz
operator|.
name|isArray
argument_list|()
condition|)
block|{
comment|/*          * Consider an array, possibly of primitive types. Push any of its references to          * the processing stack and accumulate this array's shallow size.           */
name|long
name|size
init|=
name|NUM_BYTES_ARRAY_HEADER
decl_stmt|;
specifier|final
name|int
name|len
init|=
name|Array
operator|.
name|getLength
argument_list|(
name|ob
argument_list|)
decl_stmt|;
if|if
condition|(
name|len
operator|>
literal|0
condition|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|componentClazz
init|=
name|obClazz
operator|.
name|getComponentType
argument_list|()
decl_stmt|;
if|if
condition|(
name|componentClazz
operator|.
name|isPrimitive
argument_list|()
condition|)
block|{
name|size
operator|+=
operator|(
name|long
operator|)
name|len
operator|*
name|primitiveSizes
operator|.
name|get
argument_list|(
name|componentClazz
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|size
operator|+=
operator|(
name|long
operator|)
name|NUM_BYTES_OBJECT_REF
operator|*
name|len
expr_stmt|;
comment|// Push refs for traversal later.
for|for
control|(
name|int
name|i
init|=
name|len
init|;
operator|--
name|i
operator|>=
literal|0
condition|;
control|)
block|{
specifier|final
name|Object
name|o
init|=
name|Array
operator|.
name|get
argument_list|(
name|ob
argument_list|,
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|o
operator|!=
literal|null
operator|&&
operator|!
name|seen
operator|.
name|contains
argument_list|(
name|o
argument_list|)
condition|)
block|{
name|stack
operator|.
name|add
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|totalSize
operator|+=
name|alignObjectSize
argument_list|(
name|size
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|/*          * Consider an object. Push any references it has to the processing stack          * and accumulate this object's shallow size.           */
try|try
block|{
name|ClassCache
name|cachedInfo
init|=
name|classCache
operator|.
name|get
argument_list|(
name|obClazz
argument_list|)
decl_stmt|;
if|if
condition|(
name|cachedInfo
operator|==
literal|null
condition|)
block|{
name|classCache
operator|.
name|put
argument_list|(
name|obClazz
argument_list|,
name|cachedInfo
operator|=
name|createCacheEntry
argument_list|(
name|obClazz
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Field
name|f
range|:
name|cachedInfo
operator|.
name|referenceFields
control|)
block|{
comment|// Fast path to eliminate redundancies.
specifier|final
name|Object
name|o
init|=
name|f
operator|.
name|get
argument_list|(
name|ob
argument_list|)
decl_stmt|;
if|if
condition|(
name|o
operator|!=
literal|null
operator|&&
operator|!
name|seen
operator|.
name|contains
argument_list|(
name|o
argument_list|)
condition|)
block|{
name|stack
operator|.
name|add
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
block|}
name|totalSize
operator|+=
name|cachedInfo
operator|.
name|alignedShallowInstanceSize
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
comment|// this should never happen as we enabled setAccessible().
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Reflective field access failed?"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
comment|// Help the GC (?).
name|seen
operator|.
name|clear
argument_list|()
expr_stmt|;
name|stack
operator|.
name|clear
argument_list|()
expr_stmt|;
name|classCache
operator|.
name|clear
argument_list|()
expr_stmt|;
return|return
name|totalSize
return|;
block|}
comment|/**    * Create a cached information about shallow size and reference fields for     * a given class.    */
DECL|method|createCacheEntry
specifier|private
specifier|static
name|ClassCache
name|createCacheEntry
parameter_list|(
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|)
block|{
name|ClassCache
name|cachedInfo
decl_stmt|;
name|long
name|shallowInstanceSize
init|=
name|NUM_BYTES_OBJECT_HEADER
decl_stmt|;
specifier|final
name|ArrayList
argument_list|<
name|Field
argument_list|>
name|referenceFields
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|32
argument_list|)
decl_stmt|;
for|for
control|(
name|Class
argument_list|<
name|?
argument_list|>
name|c
init|=
name|clazz
init|;
name|c
operator|!=
literal|null
condition|;
name|c
operator|=
name|c
operator|.
name|getSuperclass
argument_list|()
control|)
block|{
specifier|final
name|Field
index|[]
name|fields
init|=
name|c
operator|.
name|getDeclaredFields
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|Field
name|f
range|:
name|fields
control|)
block|{
if|if
condition|(
operator|!
name|Modifier
operator|.
name|isStatic
argument_list|(
name|f
operator|.
name|getModifiers
argument_list|()
argument_list|)
condition|)
block|{
name|shallowInstanceSize
operator|=
name|adjustForField
argument_list|(
name|shallowInstanceSize
argument_list|,
name|f
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|f
operator|.
name|getType
argument_list|()
operator|.
name|isPrimitive
argument_list|()
condition|)
block|{
name|f
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|referenceFields
operator|.
name|add
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|cachedInfo
operator|=
operator|new
name|ClassCache
argument_list|(
name|alignObjectSize
argument_list|(
name|shallowInstanceSize
argument_list|)
argument_list|,
name|referenceFields
operator|.
name|toArray
argument_list|(
operator|new
name|Field
index|[
name|referenceFields
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|cachedInfo
return|;
block|}
comment|/**    * This method returns the maximum representation size of an object.<code>sizeSoFar</code>    * is the object's size measured so far.<code>f</code> is the field being probed.    *     *<p>The returned offset will be the maximum of whatever was measured so far and     *<code>f</code> field's offset and representation size (unaligned).    */
DECL|method|adjustForField
specifier|private
specifier|static
name|long
name|adjustForField
parameter_list|(
name|long
name|sizeSoFar
parameter_list|,
specifier|final
name|Field
name|f
parameter_list|)
block|{
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|type
init|=
name|f
operator|.
name|getType
argument_list|()
decl_stmt|;
specifier|final
name|int
name|fsize
init|=
name|type
operator|.
name|isPrimitive
argument_list|()
condition|?
name|primitiveSizes
operator|.
name|get
argument_list|(
name|type
argument_list|)
else|:
name|NUM_BYTES_OBJECT_REF
decl_stmt|;
if|if
condition|(
name|objectFieldOffsetMethod
operator|!=
literal|null
condition|)
block|{
try|try
block|{
specifier|final
name|long
name|offsetPlusSize
init|=
operator|(
operator|(
name|Number
operator|)
name|objectFieldOffsetMethod
operator|.
name|invoke
argument_list|(
name|theUnsafe
argument_list|,
name|f
argument_list|)
operator|)
operator|.
name|longValue
argument_list|()
operator|+
name|fsize
decl_stmt|;
return|return
name|Math
operator|.
name|max
argument_list|(
name|sizeSoFar
argument_list|,
name|offsetPlusSize
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Access problem with sun.misc.Unsafe"
argument_list|,
name|ex
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|ite
parameter_list|)
block|{
specifier|final
name|Throwable
name|cause
init|=
name|ite
operator|.
name|getCause
argument_list|()
decl_stmt|;
if|if
condition|(
name|cause
operator|instanceof
name|RuntimeException
condition|)
throw|throw
operator|(
name|RuntimeException
operator|)
name|cause
throw|;
if|if
condition|(
name|cause
operator|instanceof
name|Error
condition|)
throw|throw
operator|(
name|Error
operator|)
name|cause
throw|;
comment|// this should never happen (Unsafe does not declare
comment|// checked Exceptions for this method), but who knows?
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Call to Unsafe's objectFieldOffset() throwed "
operator|+
literal|"checked Exception when accessing field "
operator|+
name|f
operator|.
name|getDeclaringClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"#"
operator|+
name|f
operator|.
name|getName
argument_list|()
argument_list|,
name|cause
argument_list|)
throw|;
block|}
block|}
else|else
block|{
comment|// TODO: No alignments based on field type/ subclass fields alignments?
return|return
name|sizeSoFar
operator|+
name|fsize
return|;
block|}
block|}
comment|/** Return the set of unsupported JVM features that improve the estimation. */
DECL|method|getUnsupportedFeatures
specifier|public
specifier|static
name|EnumSet
argument_list|<
name|JvmFeature
argument_list|>
name|getUnsupportedFeatures
parameter_list|()
block|{
name|EnumSet
argument_list|<
name|JvmFeature
argument_list|>
name|unsupported
init|=
name|EnumSet
operator|.
name|allOf
argument_list|(
name|JvmFeature
operator|.
name|class
argument_list|)
decl_stmt|;
name|unsupported
operator|.
name|removeAll
argument_list|(
name|supportedFeatures
argument_list|)
expr_stmt|;
return|return
name|unsupported
return|;
block|}
comment|/** Return the set of supported JVM features that improve the estimation. */
DECL|method|getSupportedFeatures
specifier|public
specifier|static
name|EnumSet
argument_list|<
name|JvmFeature
argument_list|>
name|getSupportedFeatures
parameter_list|()
block|{
return|return
name|EnumSet
operator|.
name|copyOf
argument_list|(
name|supportedFeatures
argument_list|)
return|;
block|}
comment|/**    * Returns<code>size</code> in human-readable units (GB, MB, KB or bytes).    */
DECL|method|humanReadableUnits
specifier|public
specifier|static
name|String
name|humanReadableUnits
parameter_list|(
name|long
name|bytes
parameter_list|)
block|{
return|return
name|humanReadableUnits
argument_list|(
name|bytes
argument_list|,
operator|new
name|DecimalFormat
argument_list|(
literal|"0.#"
argument_list|,
name|DecimalFormatSymbols
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Returns<code>size</code> in human-readable units (GB, MB, KB or bytes).     */
DECL|method|humanReadableUnits
specifier|public
specifier|static
name|String
name|humanReadableUnits
parameter_list|(
name|long
name|bytes
parameter_list|,
name|DecimalFormat
name|df
parameter_list|)
block|{
if|if
condition|(
name|bytes
operator|/
name|ONE_GB
operator|>
literal|0
condition|)
block|{
return|return
name|df
operator|.
name|format
argument_list|(
operator|(
name|float
operator|)
name|bytes
operator|/
name|ONE_GB
argument_list|)
operator|+
literal|" GB"
return|;
block|}
elseif|else
if|if
condition|(
name|bytes
operator|/
name|ONE_MB
operator|>
literal|0
condition|)
block|{
return|return
name|df
operator|.
name|format
argument_list|(
operator|(
name|float
operator|)
name|bytes
operator|/
name|ONE_MB
argument_list|)
operator|+
literal|" MB"
return|;
block|}
elseif|else
if|if
condition|(
name|bytes
operator|/
name|ONE_KB
operator|>
literal|0
condition|)
block|{
return|return
name|df
operator|.
name|format
argument_list|(
operator|(
name|float
operator|)
name|bytes
operator|/
name|ONE_KB
argument_list|)
operator|+
literal|" KB"
return|;
block|}
else|else
block|{
return|return
name|bytes
operator|+
literal|" bytes"
return|;
block|}
block|}
comment|/**    * Return a human-readable size of a given object.    * @see #sizeOf(Object)    * @see #humanReadableUnits(long)    */
DECL|method|humanSizeOf
specifier|public
specifier|static
name|String
name|humanSizeOf
parameter_list|(
name|Object
name|object
parameter_list|)
block|{
return|return
name|humanReadableUnits
argument_list|(
name|sizeOf
argument_list|(
name|object
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * An identity hash set implemented using open addressing. No null keys are allowed.    *     * TODO: If this is useful outside this class, make it public - needs some work    */
DECL|class|IdentityHashSet
specifier|static
specifier|final
class|class
name|IdentityHashSet
parameter_list|<
name|KType
parameter_list|>
implements|implements
name|Iterable
argument_list|<
name|KType
argument_list|>
block|{
comment|/**      * Default load factor.      */
DECL|field|DEFAULT_LOAD_FACTOR
specifier|public
specifier|final
specifier|static
name|float
name|DEFAULT_LOAD_FACTOR
init|=
literal|0.75f
decl_stmt|;
comment|/**      * Minimum capacity for the set.      */
DECL|field|MIN_CAPACITY
specifier|public
specifier|final
specifier|static
name|int
name|MIN_CAPACITY
init|=
literal|4
decl_stmt|;
comment|/**      * All of set entries. Always of power of two length.      */
DECL|field|keys
specifier|public
name|Object
index|[]
name|keys
decl_stmt|;
comment|/**      * Cached number of assigned slots.      */
DECL|field|assigned
specifier|public
name|int
name|assigned
decl_stmt|;
comment|/**      * The load factor for this set (fraction of allocated or deleted slots before      * the buffers must be rehashed or reallocated).      */
DECL|field|loadFactor
specifier|public
specifier|final
name|float
name|loadFactor
decl_stmt|;
comment|/**      * Cached capacity threshold at which we must resize the buffers.      */
DECL|field|resizeThreshold
specifier|private
name|int
name|resizeThreshold
decl_stmt|;
comment|/**      * Creates a hash set with the default capacity of 16.      * load factor of {@value #DEFAULT_LOAD_FACTOR}. `      */
DECL|method|IdentityHashSet
specifier|public
name|IdentityHashSet
parameter_list|()
block|{
name|this
argument_list|(
literal|16
argument_list|,
name|DEFAULT_LOAD_FACTOR
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a hash set with the given capacity, load factor of      * {@value #DEFAULT_LOAD_FACTOR}.      */
DECL|method|IdentityHashSet
specifier|public
name|IdentityHashSet
parameter_list|(
name|int
name|initialCapacity
parameter_list|)
block|{
name|this
argument_list|(
name|initialCapacity
argument_list|,
name|DEFAULT_LOAD_FACTOR
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a hash set with the given capacity and load factor.      */
DECL|method|IdentityHashSet
specifier|public
name|IdentityHashSet
parameter_list|(
name|int
name|initialCapacity
parameter_list|,
name|float
name|loadFactor
parameter_list|)
block|{
name|initialCapacity
operator|=
name|Math
operator|.
name|max
argument_list|(
name|MIN_CAPACITY
argument_list|,
name|initialCapacity
argument_list|)
expr_stmt|;
assert|assert
name|initialCapacity
operator|>
literal|0
operator|:
literal|"Initial capacity must be between (0, "
operator|+
name|Integer
operator|.
name|MAX_VALUE
operator|+
literal|"]."
assert|;
assert|assert
name|loadFactor
operator|>
literal|0
operator|&&
name|loadFactor
operator|<
literal|1
operator|:
literal|"Load factor must be between (0, 1)."
assert|;
name|this
operator|.
name|loadFactor
operator|=
name|loadFactor
expr_stmt|;
name|allocateBuffers
argument_list|(
name|roundCapacity
argument_list|(
name|initialCapacity
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Adds a reference to the set. Null keys are not allowed.      */
DECL|method|add
specifier|public
name|boolean
name|add
parameter_list|(
name|KType
name|e
parameter_list|)
block|{
assert|assert
name|e
operator|!=
literal|null
operator|:
literal|"Null keys not allowed."
assert|;
if|if
condition|(
name|assigned
operator|>=
name|resizeThreshold
condition|)
name|expandAndRehash
argument_list|()
expr_stmt|;
specifier|final
name|int
name|mask
init|=
name|keys
operator|.
name|length
operator|-
literal|1
decl_stmt|;
name|int
name|slot
init|=
name|rehash
argument_list|(
name|e
argument_list|)
operator|&
name|mask
decl_stmt|;
name|Object
name|existing
decl_stmt|;
while|while
condition|(
operator|(
name|existing
operator|=
name|keys
index|[
name|slot
index|]
operator|)
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|e
operator|==
name|existing
condition|)
block|{
return|return
literal|false
return|;
comment|// already found.
block|}
name|slot
operator|=
operator|(
name|slot
operator|+
literal|1
operator|)
operator|&
name|mask
expr_stmt|;
block|}
name|assigned
operator|++
expr_stmt|;
name|keys
index|[
name|slot
index|]
operator|=
name|e
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|/**      * Checks if the set contains a given ref.      */
DECL|method|contains
specifier|public
name|boolean
name|contains
parameter_list|(
name|KType
name|e
parameter_list|)
block|{
specifier|final
name|int
name|mask
init|=
name|keys
operator|.
name|length
operator|-
literal|1
decl_stmt|;
name|int
name|slot
init|=
name|rehash
argument_list|(
name|e
argument_list|)
operator|&
name|mask
decl_stmt|;
name|Object
name|existing
decl_stmt|;
while|while
condition|(
operator|(
name|existing
operator|=
name|keys
index|[
name|slot
index|]
operator|)
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|e
operator|==
name|existing
condition|)
block|{
return|return
literal|true
return|;
block|}
name|slot
operator|=
operator|(
name|slot
operator|+
literal|1
operator|)
operator|&
name|mask
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
comment|/** Rehash via MurmurHash.      *       *<p>The implementation is based on the      * finalization step from Austin Appleby's      *<code>MurmurHash3</code>.      *       * @see "http://sites.google.com/site/murmurhash/"      */
DECL|method|rehash
specifier|private
specifier|static
name|int
name|rehash
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
name|int
name|k
init|=
name|System
operator|.
name|identityHashCode
argument_list|(
name|o
argument_list|)
decl_stmt|;
name|k
operator|^=
name|k
operator|>>>
literal|16
expr_stmt|;
name|k
operator|*=
literal|0x85ebca6b
expr_stmt|;
name|k
operator|^=
name|k
operator|>>>
literal|13
expr_stmt|;
name|k
operator|*=
literal|0xc2b2ae35
expr_stmt|;
name|k
operator|^=
name|k
operator|>>>
literal|16
expr_stmt|;
return|return
name|k
return|;
block|}
comment|/**      * Expand the internal storage buffers (capacity) or rehash current keys and      * values if there are a lot of deleted slots.      */
DECL|method|expandAndRehash
specifier|private
name|void
name|expandAndRehash
parameter_list|()
block|{
specifier|final
name|Object
index|[]
name|oldKeys
init|=
name|this
operator|.
name|keys
decl_stmt|;
assert|assert
name|assigned
operator|>=
name|resizeThreshold
assert|;
name|allocateBuffers
argument_list|(
name|nextCapacity
argument_list|(
name|keys
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
comment|/*        * Rehash all assigned slots from the old hash table.        */
specifier|final
name|int
name|mask
init|=
name|keys
operator|.
name|length
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|oldKeys
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|Object
name|key
init|=
name|oldKeys
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|key
operator|!=
literal|null
condition|)
block|{
name|int
name|slot
init|=
name|rehash
argument_list|(
name|key
argument_list|)
operator|&
name|mask
decl_stmt|;
while|while
condition|(
name|keys
index|[
name|slot
index|]
operator|!=
literal|null
condition|)
block|{
name|slot
operator|=
operator|(
name|slot
operator|+
literal|1
operator|)
operator|&
name|mask
expr_stmt|;
block|}
name|keys
index|[
name|slot
index|]
operator|=
name|key
expr_stmt|;
block|}
block|}
name|Arrays
operator|.
name|fill
argument_list|(
name|oldKeys
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      * Allocate internal buffers for a given capacity.      *       * @param capacity      *          New capacity (must be a power of two).      */
DECL|method|allocateBuffers
specifier|private
name|void
name|allocateBuffers
parameter_list|(
name|int
name|capacity
parameter_list|)
block|{
name|this
operator|.
name|keys
operator|=
operator|new
name|Object
index|[
name|capacity
index|]
expr_stmt|;
name|this
operator|.
name|resizeThreshold
operator|=
call|(
name|int
call|)
argument_list|(
name|capacity
operator|*
name|DEFAULT_LOAD_FACTOR
argument_list|)
expr_stmt|;
block|}
comment|/**      * Return the next possible capacity, counting from the current buffers' size.      */
DECL|method|nextCapacity
specifier|protected
name|int
name|nextCapacity
parameter_list|(
name|int
name|current
parameter_list|)
block|{
assert|assert
name|current
operator|>
literal|0
operator|&&
name|Long
operator|.
name|bitCount
argument_list|(
name|current
argument_list|)
operator|==
literal|1
operator|:
literal|"Capacity must be a power of two."
assert|;
assert|assert
operator|(
operator|(
name|current
operator|<<
literal|1
operator|)
operator|>
literal|0
operator|)
operator|:
literal|"Maximum capacity exceeded ("
operator|+
operator|(
literal|0x80000000
operator|>>>
literal|1
operator|)
operator|+
literal|")."
assert|;
if|if
condition|(
name|current
operator|<
name|MIN_CAPACITY
operator|/
literal|2
condition|)
name|current
operator|=
name|MIN_CAPACITY
operator|/
literal|2
expr_stmt|;
return|return
name|current
operator|<<
literal|1
return|;
block|}
comment|/**      * Round the capacity to the next allowed value.      */
DECL|method|roundCapacity
specifier|protected
name|int
name|roundCapacity
parameter_list|(
name|int
name|requestedCapacity
parameter_list|)
block|{
comment|// Maximum positive integer that is a power of two.
if|if
condition|(
name|requestedCapacity
operator|>
operator|(
literal|0x80000000
operator|>>>
literal|1
operator|)
condition|)
return|return
operator|(
literal|0x80000000
operator|>>>
literal|1
operator|)
return|;
name|int
name|capacity
init|=
name|MIN_CAPACITY
decl_stmt|;
while|while
condition|(
name|capacity
operator|<
name|requestedCapacity
condition|)
block|{
name|capacity
operator|<<=
literal|1
expr_stmt|;
block|}
return|return
name|capacity
return|;
block|}
DECL|method|clear
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|assigned
operator|=
literal|0
expr_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|keys
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|size
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|assigned
return|;
block|}
DECL|method|isEmpty
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|size
argument_list|()
operator|==
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|iterator
specifier|public
name|Iterator
argument_list|<
name|KType
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
operator|new
name|Iterator
argument_list|<
name|KType
argument_list|>
argument_list|()
block|{
name|int
name|pos
init|=
operator|-
literal|1
decl_stmt|;
name|Object
name|nextElement
init|=
name|fetchNext
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|nextElement
operator|!=
literal|null
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
specifier|public
name|KType
name|next
parameter_list|()
block|{
name|Object
name|r
init|=
name|this
operator|.
name|nextElement
decl_stmt|;
if|if
condition|(
name|r
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoSuchElementException
argument_list|()
throw|;
block|}
name|this
operator|.
name|nextElement
operator|=
name|fetchNext
argument_list|()
expr_stmt|;
return|return
operator|(
name|KType
operator|)
name|r
return|;
block|}
specifier|private
name|Object
name|fetchNext
parameter_list|()
block|{
name|pos
operator|++
expr_stmt|;
while|while
condition|(
name|pos
operator|<
name|keys
operator|.
name|length
operator|&&
name|keys
index|[
name|pos
index|]
operator|==
literal|null
condition|)
block|{
name|pos
operator|++
expr_stmt|;
block|}
return|return
operator|(
name|pos
operator|>=
name|keys
operator|.
name|length
condition|?
literal|null
else|:
name|keys
index|[
name|pos
index|]
operator|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
return|;
block|}
block|}
block|}
end_class
end_unit
