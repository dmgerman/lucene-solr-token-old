begin_unit
begin_comment
comment|// This file has been automatically generated, DO NOT EDIT
end_comment
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements. See the NOTICE file distributed with this  * work for additional information regarding copyright ownership. The ASF  * licenses this file to You under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.util.packed
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|packed
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|DataInput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|RamUsageEstimator
import|;
end_import
begin_comment
comment|/**  * This class is similar to {@link Packed64} except that it trades space for  * speed by ensuring that a single block needs to be read/written in order to  * read/write a value.  */
end_comment
begin_class
DECL|class|Packed64SingleBlock
specifier|abstract
class|class
name|Packed64SingleBlock
extends|extends
name|PackedInts
operator|.
name|MutableImpl
block|{
DECL|field|MAX_SUPPORTED_BITS_PER_VALUE
specifier|public
specifier|static
specifier|final
name|int
name|MAX_SUPPORTED_BITS_PER_VALUE
init|=
literal|32
decl_stmt|;
DECL|field|SUPPORTED_BITS_PER_VALUE
specifier|private
specifier|static
specifier|final
name|int
index|[]
name|SUPPORTED_BITS_PER_VALUE
init|=
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|2
block|,
literal|3
block|,
literal|4
block|,
literal|5
block|,
literal|6
block|,
literal|7
block|,
literal|8
block|,
literal|9
block|,
literal|10
block|,
literal|12
block|,
literal|16
block|,
literal|21
block|,
literal|32
block|}
decl_stmt|;
DECL|method|isSupported
specifier|public
specifier|static
name|boolean
name|isSupported
parameter_list|(
name|int
name|bitsPerValue
parameter_list|)
block|{
return|return
name|Arrays
operator|.
name|binarySearch
argument_list|(
name|SUPPORTED_BITS_PER_VALUE
argument_list|,
name|bitsPerValue
argument_list|)
operator|>=
literal|0
return|;
block|}
DECL|method|requiredCapacity
specifier|private
specifier|static
name|int
name|requiredCapacity
parameter_list|(
name|int
name|valueCount
parameter_list|,
name|int
name|valuesPerBlock
parameter_list|)
block|{
return|return
name|valueCount
operator|/
name|valuesPerBlock
operator|+
operator|(
name|valueCount
operator|%
name|valuesPerBlock
operator|==
literal|0
condition|?
literal|0
else|:
literal|1
operator|)
return|;
block|}
DECL|field|blocks
specifier|final
name|long
index|[]
name|blocks
decl_stmt|;
DECL|method|Packed64SingleBlock
name|Packed64SingleBlock
parameter_list|(
name|int
name|valueCount
parameter_list|,
name|int
name|bitsPerValue
parameter_list|)
block|{
name|super
argument_list|(
name|valueCount
argument_list|,
name|bitsPerValue
argument_list|)
expr_stmt|;
assert|assert
name|isSupported
argument_list|(
name|bitsPerValue
argument_list|)
assert|;
specifier|final
name|int
name|valuesPerBlock
init|=
literal|64
operator|/
name|bitsPerValue
decl_stmt|;
name|blocks
operator|=
operator|new
name|long
index|[
name|requiredCapacity
argument_list|(
name|valueCount
argument_list|,
name|valuesPerBlock
argument_list|)
index|]
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|clear
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|Arrays
operator|.
name|fill
argument_list|(
name|blocks
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|ramBytesUsed
specifier|public
name|long
name|ramBytesUsed
parameter_list|()
block|{
return|return
name|RamUsageEstimator
operator|.
name|alignObjectSize
argument_list|(
name|RamUsageEstimator
operator|.
name|NUM_BYTES_OBJECT_HEADER
operator|+
literal|2
operator|*
name|RamUsageEstimator
operator|.
name|NUM_BYTES_INT
comment|// valueCount,bitsPerValue
operator|+
name|RamUsageEstimator
operator|.
name|NUM_BYTES_OBJECT_REF
argument_list|)
comment|// blocks ref
operator|+
name|RamUsageEstimator
operator|.
name|sizeOf
argument_list|(
name|blocks
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|get
specifier|public
name|int
name|get
parameter_list|(
name|int
name|index
parameter_list|,
name|long
index|[]
name|arr
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
block|{
assert|assert
name|len
operator|>
literal|0
operator|:
literal|"len must be> 0 (got "
operator|+
name|len
operator|+
literal|")"
assert|;
assert|assert
name|index
operator|>=
literal|0
operator|&&
name|index
operator|<
name|valueCount
assert|;
name|len
operator|=
name|Math
operator|.
name|min
argument_list|(
name|len
argument_list|,
name|valueCount
operator|-
name|index
argument_list|)
expr_stmt|;
assert|assert
name|off
operator|+
name|len
operator|<=
name|arr
operator|.
name|length
assert|;
specifier|final
name|int
name|originalIndex
init|=
name|index
decl_stmt|;
comment|// go to the next block boundary
specifier|final
name|int
name|valuesPerBlock
init|=
literal|64
operator|/
name|bitsPerValue
decl_stmt|;
specifier|final
name|int
name|offsetInBlock
init|=
name|index
operator|%
name|valuesPerBlock
decl_stmt|;
if|if
condition|(
name|offsetInBlock
operator|!=
literal|0
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
name|offsetInBlock
init|;
name|i
argument_list|<
name|valuesPerBlock
operator|&&
name|len
argument_list|>
literal|0
condition|;
operator|++
name|i
control|)
block|{
name|arr
index|[
name|off
operator|++
index|]
operator|=
name|get
argument_list|(
name|index
operator|++
argument_list|)
expr_stmt|;
operator|--
name|len
expr_stmt|;
block|}
if|if
condition|(
name|len
operator|==
literal|0
condition|)
block|{
return|return
name|index
operator|-
name|originalIndex
return|;
block|}
block|}
comment|// bulk get
assert|assert
name|index
operator|%
name|valuesPerBlock
operator|==
literal|0
assert|;
specifier|final
name|PackedInts
operator|.
name|Decoder
name|decoder
init|=
name|BulkOperation
operator|.
name|of
argument_list|(
name|PackedInts
operator|.
name|Format
operator|.
name|PACKED_SINGLE_BLOCK
argument_list|,
name|bitsPerValue
argument_list|)
decl_stmt|;
assert|assert
name|decoder
operator|.
name|longBlockCount
argument_list|()
operator|==
literal|1
assert|;
assert|assert
name|decoder
operator|.
name|longValueCount
argument_list|()
operator|==
name|valuesPerBlock
assert|;
specifier|final
name|int
name|blockIndex
init|=
name|index
operator|/
name|valuesPerBlock
decl_stmt|;
specifier|final
name|int
name|nblocks
init|=
operator|(
name|index
operator|+
name|len
operator|)
operator|/
name|valuesPerBlock
operator|-
name|blockIndex
decl_stmt|;
name|decoder
operator|.
name|decode
argument_list|(
name|blocks
argument_list|,
name|blockIndex
argument_list|,
name|arr
argument_list|,
name|off
argument_list|,
name|nblocks
argument_list|)
expr_stmt|;
specifier|final
name|int
name|diff
init|=
name|nblocks
operator|*
name|valuesPerBlock
decl_stmt|;
name|index
operator|+=
name|diff
expr_stmt|;
name|len
operator|-=
name|diff
expr_stmt|;
if|if
condition|(
name|index
operator|>
name|originalIndex
condition|)
block|{
comment|// stay at the block boundary
return|return
name|index
operator|-
name|originalIndex
return|;
block|}
else|else
block|{
comment|// no progress so far => already at a block boundary but no full block to
comment|// get
assert|assert
name|index
operator|==
name|originalIndex
assert|;
return|return
name|super
operator|.
name|get
argument_list|(
name|index
argument_list|,
name|arr
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|set
specifier|public
name|int
name|set
parameter_list|(
name|int
name|index
parameter_list|,
name|long
index|[]
name|arr
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
block|{
assert|assert
name|len
operator|>
literal|0
operator|:
literal|"len must be> 0 (got "
operator|+
name|len
operator|+
literal|")"
assert|;
assert|assert
name|index
operator|>=
literal|0
operator|&&
name|index
operator|<
name|valueCount
assert|;
name|len
operator|=
name|Math
operator|.
name|min
argument_list|(
name|len
argument_list|,
name|valueCount
operator|-
name|index
argument_list|)
expr_stmt|;
assert|assert
name|off
operator|+
name|len
operator|<=
name|arr
operator|.
name|length
assert|;
specifier|final
name|int
name|originalIndex
init|=
name|index
decl_stmt|;
comment|// go to the next block boundary
specifier|final
name|int
name|valuesPerBlock
init|=
literal|64
operator|/
name|bitsPerValue
decl_stmt|;
specifier|final
name|int
name|offsetInBlock
init|=
name|index
operator|%
name|valuesPerBlock
decl_stmt|;
if|if
condition|(
name|offsetInBlock
operator|!=
literal|0
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
name|offsetInBlock
init|;
name|i
argument_list|<
name|valuesPerBlock
operator|&&
name|len
argument_list|>
literal|0
condition|;
operator|++
name|i
control|)
block|{
name|set
argument_list|(
name|index
operator|++
argument_list|,
name|arr
index|[
name|off
operator|++
index|]
argument_list|)
expr_stmt|;
operator|--
name|len
expr_stmt|;
block|}
if|if
condition|(
name|len
operator|==
literal|0
condition|)
block|{
return|return
name|index
operator|-
name|originalIndex
return|;
block|}
block|}
comment|// bulk set
assert|assert
name|index
operator|%
name|valuesPerBlock
operator|==
literal|0
assert|;
specifier|final
name|BulkOperation
name|op
init|=
name|BulkOperation
operator|.
name|of
argument_list|(
name|PackedInts
operator|.
name|Format
operator|.
name|PACKED_SINGLE_BLOCK
argument_list|,
name|bitsPerValue
argument_list|)
decl_stmt|;
assert|assert
name|op
operator|.
name|longBlockCount
argument_list|()
operator|==
literal|1
assert|;
assert|assert
name|op
operator|.
name|longValueCount
argument_list|()
operator|==
name|valuesPerBlock
assert|;
specifier|final
name|int
name|blockIndex
init|=
name|index
operator|/
name|valuesPerBlock
decl_stmt|;
specifier|final
name|int
name|nblocks
init|=
operator|(
name|index
operator|+
name|len
operator|)
operator|/
name|valuesPerBlock
operator|-
name|blockIndex
decl_stmt|;
name|op
operator|.
name|encode
argument_list|(
name|arr
argument_list|,
name|off
argument_list|,
name|blocks
argument_list|,
name|blockIndex
argument_list|,
name|nblocks
argument_list|)
expr_stmt|;
specifier|final
name|int
name|diff
init|=
name|nblocks
operator|*
name|valuesPerBlock
decl_stmt|;
name|index
operator|+=
name|diff
expr_stmt|;
name|len
operator|-=
name|diff
expr_stmt|;
if|if
condition|(
name|index
operator|>
name|originalIndex
condition|)
block|{
comment|// stay at the block boundary
return|return
name|index
operator|-
name|originalIndex
return|;
block|}
else|else
block|{
comment|// no progress so far => already at a block boundary but no full block to
comment|// set
assert|assert
name|index
operator|==
name|originalIndex
assert|;
return|return
name|super
operator|.
name|set
argument_list|(
name|index
argument_list|,
name|arr
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|fill
specifier|public
name|void
name|fill
parameter_list|(
name|int
name|fromIndex
parameter_list|,
name|int
name|toIndex
parameter_list|,
name|long
name|val
parameter_list|)
block|{
assert|assert
name|fromIndex
operator|>=
literal|0
assert|;
assert|assert
name|fromIndex
operator|<=
name|toIndex
assert|;
assert|assert
name|PackedInts
operator|.
name|unsignedBitsRequired
argument_list|(
name|val
argument_list|)
operator|<=
name|bitsPerValue
assert|;
specifier|final
name|int
name|valuesPerBlock
init|=
literal|64
operator|/
name|bitsPerValue
decl_stmt|;
if|if
condition|(
name|toIndex
operator|-
name|fromIndex
operator|<=
name|valuesPerBlock
operator|<<
literal|1
condition|)
block|{
comment|// there needs to be at least one full block to set for the block
comment|// approach to be worth trying
name|super
operator|.
name|fill
argument_list|(
name|fromIndex
argument_list|,
name|toIndex
argument_list|,
name|val
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// set values naively until the next block start
name|int
name|fromOffsetInBlock
init|=
name|fromIndex
operator|%
name|valuesPerBlock
decl_stmt|;
if|if
condition|(
name|fromOffsetInBlock
operator|!=
literal|0
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
name|fromOffsetInBlock
init|;
name|i
operator|<
name|valuesPerBlock
condition|;
operator|++
name|i
control|)
block|{
name|set
argument_list|(
name|fromIndex
operator|++
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
assert|assert
name|fromIndex
operator|%
name|valuesPerBlock
operator|==
literal|0
assert|;
block|}
comment|// bulk set of the inner blocks
specifier|final
name|int
name|fromBlock
init|=
name|fromIndex
operator|/
name|valuesPerBlock
decl_stmt|;
specifier|final
name|int
name|toBlock
init|=
name|toIndex
operator|/
name|valuesPerBlock
decl_stmt|;
assert|assert
name|fromBlock
operator|*
name|valuesPerBlock
operator|==
name|fromIndex
assert|;
name|long
name|blockValue
init|=
literal|0L
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|valuesPerBlock
condition|;
operator|++
name|i
control|)
block|{
name|blockValue
operator|=
name|blockValue
operator||
operator|(
name|val
operator|<<
operator|(
name|i
operator|*
name|bitsPerValue
operator|)
operator|)
expr_stmt|;
block|}
name|Arrays
operator|.
name|fill
argument_list|(
name|blocks
argument_list|,
name|fromBlock
argument_list|,
name|toBlock
argument_list|,
name|blockValue
argument_list|)
expr_stmt|;
comment|// fill the gap
for|for
control|(
name|int
name|i
init|=
name|valuesPerBlock
operator|*
name|toBlock
init|;
name|i
operator|<
name|toIndex
condition|;
operator|++
name|i
control|)
block|{
name|set
argument_list|(
name|i
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getFormat
specifier|protected
name|PackedInts
operator|.
name|Format
name|getFormat
parameter_list|()
block|{
return|return
name|PackedInts
operator|.
name|Format
operator|.
name|PACKED_SINGLE_BLOCK
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|"(bitsPerValue="
operator|+
name|bitsPerValue
operator|+
literal|",size="
operator|+
name|size
argument_list|()
operator|+
literal|",blocks="
operator|+
name|blocks
operator|.
name|length
operator|+
literal|")"
return|;
block|}
DECL|method|create
specifier|public
specifier|static
name|Packed64SingleBlock
name|create
parameter_list|(
name|DataInput
name|in
parameter_list|,
name|int
name|valueCount
parameter_list|,
name|int
name|bitsPerValue
parameter_list|)
throws|throws
name|IOException
block|{
name|Packed64SingleBlock
name|reader
init|=
name|create
argument_list|(
name|valueCount
argument_list|,
name|bitsPerValue
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|reader
operator|.
name|blocks
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|reader
operator|.
name|blocks
index|[
name|i
index|]
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
block|}
return|return
name|reader
return|;
block|}
DECL|method|create
specifier|public
specifier|static
name|Packed64SingleBlock
name|create
parameter_list|(
name|int
name|valueCount
parameter_list|,
name|int
name|bitsPerValue
parameter_list|)
block|{
switch|switch
condition|(
name|bitsPerValue
condition|)
block|{
case|case
literal|1
case|:
return|return
operator|new
name|Packed64SingleBlock1
argument_list|(
name|valueCount
argument_list|)
return|;
case|case
literal|2
case|:
return|return
operator|new
name|Packed64SingleBlock2
argument_list|(
name|valueCount
argument_list|)
return|;
case|case
literal|3
case|:
return|return
operator|new
name|Packed64SingleBlock3
argument_list|(
name|valueCount
argument_list|)
return|;
case|case
literal|4
case|:
return|return
operator|new
name|Packed64SingleBlock4
argument_list|(
name|valueCount
argument_list|)
return|;
case|case
literal|5
case|:
return|return
operator|new
name|Packed64SingleBlock5
argument_list|(
name|valueCount
argument_list|)
return|;
case|case
literal|6
case|:
return|return
operator|new
name|Packed64SingleBlock6
argument_list|(
name|valueCount
argument_list|)
return|;
case|case
literal|7
case|:
return|return
operator|new
name|Packed64SingleBlock7
argument_list|(
name|valueCount
argument_list|)
return|;
case|case
literal|8
case|:
return|return
operator|new
name|Packed64SingleBlock8
argument_list|(
name|valueCount
argument_list|)
return|;
case|case
literal|9
case|:
return|return
operator|new
name|Packed64SingleBlock9
argument_list|(
name|valueCount
argument_list|)
return|;
case|case
literal|10
case|:
return|return
operator|new
name|Packed64SingleBlock10
argument_list|(
name|valueCount
argument_list|)
return|;
case|case
literal|12
case|:
return|return
operator|new
name|Packed64SingleBlock12
argument_list|(
name|valueCount
argument_list|)
return|;
case|case
literal|16
case|:
return|return
operator|new
name|Packed64SingleBlock16
argument_list|(
name|valueCount
argument_list|)
return|;
case|case
literal|21
case|:
return|return
operator|new
name|Packed64SingleBlock21
argument_list|(
name|valueCount
argument_list|)
return|;
case|case
literal|32
case|:
return|return
operator|new
name|Packed64SingleBlock32
argument_list|(
name|valueCount
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unsupported number of bits per value: "
operator|+
literal|32
argument_list|)
throw|;
block|}
block|}
DECL|class|Packed64SingleBlock1
specifier|static
class|class
name|Packed64SingleBlock1
extends|extends
name|Packed64SingleBlock
block|{
DECL|method|Packed64SingleBlock1
name|Packed64SingleBlock1
parameter_list|(
name|int
name|valueCount
parameter_list|)
block|{
name|super
argument_list|(
name|valueCount
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|get
specifier|public
name|long
name|get
parameter_list|(
name|int
name|index
parameter_list|)
block|{
specifier|final
name|int
name|o
init|=
name|index
operator|>>>
literal|6
decl_stmt|;
specifier|final
name|int
name|b
init|=
name|index
operator|&
literal|63
decl_stmt|;
specifier|final
name|int
name|shift
init|=
name|b
operator|<<
literal|0
decl_stmt|;
return|return
operator|(
name|blocks
index|[
name|o
index|]
operator|>>>
name|shift
operator|)
operator|&
literal|1L
return|;
block|}
annotation|@
name|Override
DECL|method|set
specifier|public
name|void
name|set
parameter_list|(
name|int
name|index
parameter_list|,
name|long
name|value
parameter_list|)
block|{
specifier|final
name|int
name|o
init|=
name|index
operator|>>>
literal|6
decl_stmt|;
specifier|final
name|int
name|b
init|=
name|index
operator|&
literal|63
decl_stmt|;
specifier|final
name|int
name|shift
init|=
name|b
operator|<<
literal|0
decl_stmt|;
name|blocks
index|[
name|o
index|]
operator|=
operator|(
name|blocks
index|[
name|o
index|]
operator|&
operator|~
operator|(
literal|1L
operator|<<
name|shift
operator|)
operator|)
operator||
operator|(
name|value
operator|<<
name|shift
operator|)
expr_stmt|;
block|}
block|}
DECL|class|Packed64SingleBlock2
specifier|static
class|class
name|Packed64SingleBlock2
extends|extends
name|Packed64SingleBlock
block|{
DECL|method|Packed64SingleBlock2
name|Packed64SingleBlock2
parameter_list|(
name|int
name|valueCount
parameter_list|)
block|{
name|super
argument_list|(
name|valueCount
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|get
specifier|public
name|long
name|get
parameter_list|(
name|int
name|index
parameter_list|)
block|{
specifier|final
name|int
name|o
init|=
name|index
operator|>>>
literal|5
decl_stmt|;
specifier|final
name|int
name|b
init|=
name|index
operator|&
literal|31
decl_stmt|;
specifier|final
name|int
name|shift
init|=
name|b
operator|<<
literal|1
decl_stmt|;
return|return
operator|(
name|blocks
index|[
name|o
index|]
operator|>>>
name|shift
operator|)
operator|&
literal|3L
return|;
block|}
annotation|@
name|Override
DECL|method|set
specifier|public
name|void
name|set
parameter_list|(
name|int
name|index
parameter_list|,
name|long
name|value
parameter_list|)
block|{
specifier|final
name|int
name|o
init|=
name|index
operator|>>>
literal|5
decl_stmt|;
specifier|final
name|int
name|b
init|=
name|index
operator|&
literal|31
decl_stmt|;
specifier|final
name|int
name|shift
init|=
name|b
operator|<<
literal|1
decl_stmt|;
name|blocks
index|[
name|o
index|]
operator|=
operator|(
name|blocks
index|[
name|o
index|]
operator|&
operator|~
operator|(
literal|3L
operator|<<
name|shift
operator|)
operator|)
operator||
operator|(
name|value
operator|<<
name|shift
operator|)
expr_stmt|;
block|}
block|}
DECL|class|Packed64SingleBlock3
specifier|static
class|class
name|Packed64SingleBlock3
extends|extends
name|Packed64SingleBlock
block|{
DECL|method|Packed64SingleBlock3
name|Packed64SingleBlock3
parameter_list|(
name|int
name|valueCount
parameter_list|)
block|{
name|super
argument_list|(
name|valueCount
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|get
specifier|public
name|long
name|get
parameter_list|(
name|int
name|index
parameter_list|)
block|{
specifier|final
name|int
name|o
init|=
name|index
operator|/
literal|21
decl_stmt|;
specifier|final
name|int
name|b
init|=
name|index
operator|%
literal|21
decl_stmt|;
specifier|final
name|int
name|shift
init|=
name|b
operator|*
literal|3
decl_stmt|;
return|return
operator|(
name|blocks
index|[
name|o
index|]
operator|>>>
name|shift
operator|)
operator|&
literal|7L
return|;
block|}
annotation|@
name|Override
DECL|method|set
specifier|public
name|void
name|set
parameter_list|(
name|int
name|index
parameter_list|,
name|long
name|value
parameter_list|)
block|{
specifier|final
name|int
name|o
init|=
name|index
operator|/
literal|21
decl_stmt|;
specifier|final
name|int
name|b
init|=
name|index
operator|%
literal|21
decl_stmt|;
specifier|final
name|int
name|shift
init|=
name|b
operator|*
literal|3
decl_stmt|;
name|blocks
index|[
name|o
index|]
operator|=
operator|(
name|blocks
index|[
name|o
index|]
operator|&
operator|~
operator|(
literal|7L
operator|<<
name|shift
operator|)
operator|)
operator||
operator|(
name|value
operator|<<
name|shift
operator|)
expr_stmt|;
block|}
block|}
DECL|class|Packed64SingleBlock4
specifier|static
class|class
name|Packed64SingleBlock4
extends|extends
name|Packed64SingleBlock
block|{
DECL|method|Packed64SingleBlock4
name|Packed64SingleBlock4
parameter_list|(
name|int
name|valueCount
parameter_list|)
block|{
name|super
argument_list|(
name|valueCount
argument_list|,
literal|4
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|get
specifier|public
name|long
name|get
parameter_list|(
name|int
name|index
parameter_list|)
block|{
specifier|final
name|int
name|o
init|=
name|index
operator|>>>
literal|4
decl_stmt|;
specifier|final
name|int
name|b
init|=
name|index
operator|&
literal|15
decl_stmt|;
specifier|final
name|int
name|shift
init|=
name|b
operator|<<
literal|2
decl_stmt|;
return|return
operator|(
name|blocks
index|[
name|o
index|]
operator|>>>
name|shift
operator|)
operator|&
literal|15L
return|;
block|}
annotation|@
name|Override
DECL|method|set
specifier|public
name|void
name|set
parameter_list|(
name|int
name|index
parameter_list|,
name|long
name|value
parameter_list|)
block|{
specifier|final
name|int
name|o
init|=
name|index
operator|>>>
literal|4
decl_stmt|;
specifier|final
name|int
name|b
init|=
name|index
operator|&
literal|15
decl_stmt|;
specifier|final
name|int
name|shift
init|=
name|b
operator|<<
literal|2
decl_stmt|;
name|blocks
index|[
name|o
index|]
operator|=
operator|(
name|blocks
index|[
name|o
index|]
operator|&
operator|~
operator|(
literal|15L
operator|<<
name|shift
operator|)
operator|)
operator||
operator|(
name|value
operator|<<
name|shift
operator|)
expr_stmt|;
block|}
block|}
DECL|class|Packed64SingleBlock5
specifier|static
class|class
name|Packed64SingleBlock5
extends|extends
name|Packed64SingleBlock
block|{
DECL|method|Packed64SingleBlock5
name|Packed64SingleBlock5
parameter_list|(
name|int
name|valueCount
parameter_list|)
block|{
name|super
argument_list|(
name|valueCount
argument_list|,
literal|5
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|get
specifier|public
name|long
name|get
parameter_list|(
name|int
name|index
parameter_list|)
block|{
specifier|final
name|int
name|o
init|=
name|index
operator|/
literal|12
decl_stmt|;
specifier|final
name|int
name|b
init|=
name|index
operator|%
literal|12
decl_stmt|;
specifier|final
name|int
name|shift
init|=
name|b
operator|*
literal|5
decl_stmt|;
return|return
operator|(
name|blocks
index|[
name|o
index|]
operator|>>>
name|shift
operator|)
operator|&
literal|31L
return|;
block|}
annotation|@
name|Override
DECL|method|set
specifier|public
name|void
name|set
parameter_list|(
name|int
name|index
parameter_list|,
name|long
name|value
parameter_list|)
block|{
specifier|final
name|int
name|o
init|=
name|index
operator|/
literal|12
decl_stmt|;
specifier|final
name|int
name|b
init|=
name|index
operator|%
literal|12
decl_stmt|;
specifier|final
name|int
name|shift
init|=
name|b
operator|*
literal|5
decl_stmt|;
name|blocks
index|[
name|o
index|]
operator|=
operator|(
name|blocks
index|[
name|o
index|]
operator|&
operator|~
operator|(
literal|31L
operator|<<
name|shift
operator|)
operator|)
operator||
operator|(
name|value
operator|<<
name|shift
operator|)
expr_stmt|;
block|}
block|}
DECL|class|Packed64SingleBlock6
specifier|static
class|class
name|Packed64SingleBlock6
extends|extends
name|Packed64SingleBlock
block|{
DECL|method|Packed64SingleBlock6
name|Packed64SingleBlock6
parameter_list|(
name|int
name|valueCount
parameter_list|)
block|{
name|super
argument_list|(
name|valueCount
argument_list|,
literal|6
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|get
specifier|public
name|long
name|get
parameter_list|(
name|int
name|index
parameter_list|)
block|{
specifier|final
name|int
name|o
init|=
name|index
operator|/
literal|10
decl_stmt|;
specifier|final
name|int
name|b
init|=
name|index
operator|%
literal|10
decl_stmt|;
specifier|final
name|int
name|shift
init|=
name|b
operator|*
literal|6
decl_stmt|;
return|return
operator|(
name|blocks
index|[
name|o
index|]
operator|>>>
name|shift
operator|)
operator|&
literal|63L
return|;
block|}
annotation|@
name|Override
DECL|method|set
specifier|public
name|void
name|set
parameter_list|(
name|int
name|index
parameter_list|,
name|long
name|value
parameter_list|)
block|{
specifier|final
name|int
name|o
init|=
name|index
operator|/
literal|10
decl_stmt|;
specifier|final
name|int
name|b
init|=
name|index
operator|%
literal|10
decl_stmt|;
specifier|final
name|int
name|shift
init|=
name|b
operator|*
literal|6
decl_stmt|;
name|blocks
index|[
name|o
index|]
operator|=
operator|(
name|blocks
index|[
name|o
index|]
operator|&
operator|~
operator|(
literal|63L
operator|<<
name|shift
operator|)
operator|)
operator||
operator|(
name|value
operator|<<
name|shift
operator|)
expr_stmt|;
block|}
block|}
DECL|class|Packed64SingleBlock7
specifier|static
class|class
name|Packed64SingleBlock7
extends|extends
name|Packed64SingleBlock
block|{
DECL|method|Packed64SingleBlock7
name|Packed64SingleBlock7
parameter_list|(
name|int
name|valueCount
parameter_list|)
block|{
name|super
argument_list|(
name|valueCount
argument_list|,
literal|7
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|get
specifier|public
name|long
name|get
parameter_list|(
name|int
name|index
parameter_list|)
block|{
specifier|final
name|int
name|o
init|=
name|index
operator|/
literal|9
decl_stmt|;
specifier|final
name|int
name|b
init|=
name|index
operator|%
literal|9
decl_stmt|;
specifier|final
name|int
name|shift
init|=
name|b
operator|*
literal|7
decl_stmt|;
return|return
operator|(
name|blocks
index|[
name|o
index|]
operator|>>>
name|shift
operator|)
operator|&
literal|127L
return|;
block|}
annotation|@
name|Override
DECL|method|set
specifier|public
name|void
name|set
parameter_list|(
name|int
name|index
parameter_list|,
name|long
name|value
parameter_list|)
block|{
specifier|final
name|int
name|o
init|=
name|index
operator|/
literal|9
decl_stmt|;
specifier|final
name|int
name|b
init|=
name|index
operator|%
literal|9
decl_stmt|;
specifier|final
name|int
name|shift
init|=
name|b
operator|*
literal|7
decl_stmt|;
name|blocks
index|[
name|o
index|]
operator|=
operator|(
name|blocks
index|[
name|o
index|]
operator|&
operator|~
operator|(
literal|127L
operator|<<
name|shift
operator|)
operator|)
operator||
operator|(
name|value
operator|<<
name|shift
operator|)
expr_stmt|;
block|}
block|}
DECL|class|Packed64SingleBlock8
specifier|static
class|class
name|Packed64SingleBlock8
extends|extends
name|Packed64SingleBlock
block|{
DECL|method|Packed64SingleBlock8
name|Packed64SingleBlock8
parameter_list|(
name|int
name|valueCount
parameter_list|)
block|{
name|super
argument_list|(
name|valueCount
argument_list|,
literal|8
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|get
specifier|public
name|long
name|get
parameter_list|(
name|int
name|index
parameter_list|)
block|{
specifier|final
name|int
name|o
init|=
name|index
operator|>>>
literal|3
decl_stmt|;
specifier|final
name|int
name|b
init|=
name|index
operator|&
literal|7
decl_stmt|;
specifier|final
name|int
name|shift
init|=
name|b
operator|<<
literal|3
decl_stmt|;
return|return
operator|(
name|blocks
index|[
name|o
index|]
operator|>>>
name|shift
operator|)
operator|&
literal|255L
return|;
block|}
annotation|@
name|Override
DECL|method|set
specifier|public
name|void
name|set
parameter_list|(
name|int
name|index
parameter_list|,
name|long
name|value
parameter_list|)
block|{
specifier|final
name|int
name|o
init|=
name|index
operator|>>>
literal|3
decl_stmt|;
specifier|final
name|int
name|b
init|=
name|index
operator|&
literal|7
decl_stmt|;
specifier|final
name|int
name|shift
init|=
name|b
operator|<<
literal|3
decl_stmt|;
name|blocks
index|[
name|o
index|]
operator|=
operator|(
name|blocks
index|[
name|o
index|]
operator|&
operator|~
operator|(
literal|255L
operator|<<
name|shift
operator|)
operator|)
operator||
operator|(
name|value
operator|<<
name|shift
operator|)
expr_stmt|;
block|}
block|}
DECL|class|Packed64SingleBlock9
specifier|static
class|class
name|Packed64SingleBlock9
extends|extends
name|Packed64SingleBlock
block|{
DECL|method|Packed64SingleBlock9
name|Packed64SingleBlock9
parameter_list|(
name|int
name|valueCount
parameter_list|)
block|{
name|super
argument_list|(
name|valueCount
argument_list|,
literal|9
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|get
specifier|public
name|long
name|get
parameter_list|(
name|int
name|index
parameter_list|)
block|{
specifier|final
name|int
name|o
init|=
name|index
operator|/
literal|7
decl_stmt|;
specifier|final
name|int
name|b
init|=
name|index
operator|%
literal|7
decl_stmt|;
specifier|final
name|int
name|shift
init|=
name|b
operator|*
literal|9
decl_stmt|;
return|return
operator|(
name|blocks
index|[
name|o
index|]
operator|>>>
name|shift
operator|)
operator|&
literal|511L
return|;
block|}
annotation|@
name|Override
DECL|method|set
specifier|public
name|void
name|set
parameter_list|(
name|int
name|index
parameter_list|,
name|long
name|value
parameter_list|)
block|{
specifier|final
name|int
name|o
init|=
name|index
operator|/
literal|7
decl_stmt|;
specifier|final
name|int
name|b
init|=
name|index
operator|%
literal|7
decl_stmt|;
specifier|final
name|int
name|shift
init|=
name|b
operator|*
literal|9
decl_stmt|;
name|blocks
index|[
name|o
index|]
operator|=
operator|(
name|blocks
index|[
name|o
index|]
operator|&
operator|~
operator|(
literal|511L
operator|<<
name|shift
operator|)
operator|)
operator||
operator|(
name|value
operator|<<
name|shift
operator|)
expr_stmt|;
block|}
block|}
DECL|class|Packed64SingleBlock10
specifier|static
class|class
name|Packed64SingleBlock10
extends|extends
name|Packed64SingleBlock
block|{
DECL|method|Packed64SingleBlock10
name|Packed64SingleBlock10
parameter_list|(
name|int
name|valueCount
parameter_list|)
block|{
name|super
argument_list|(
name|valueCount
argument_list|,
literal|10
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|get
specifier|public
name|long
name|get
parameter_list|(
name|int
name|index
parameter_list|)
block|{
specifier|final
name|int
name|o
init|=
name|index
operator|/
literal|6
decl_stmt|;
specifier|final
name|int
name|b
init|=
name|index
operator|%
literal|6
decl_stmt|;
specifier|final
name|int
name|shift
init|=
name|b
operator|*
literal|10
decl_stmt|;
return|return
operator|(
name|blocks
index|[
name|o
index|]
operator|>>>
name|shift
operator|)
operator|&
literal|1023L
return|;
block|}
annotation|@
name|Override
DECL|method|set
specifier|public
name|void
name|set
parameter_list|(
name|int
name|index
parameter_list|,
name|long
name|value
parameter_list|)
block|{
specifier|final
name|int
name|o
init|=
name|index
operator|/
literal|6
decl_stmt|;
specifier|final
name|int
name|b
init|=
name|index
operator|%
literal|6
decl_stmt|;
specifier|final
name|int
name|shift
init|=
name|b
operator|*
literal|10
decl_stmt|;
name|blocks
index|[
name|o
index|]
operator|=
operator|(
name|blocks
index|[
name|o
index|]
operator|&
operator|~
operator|(
literal|1023L
operator|<<
name|shift
operator|)
operator|)
operator||
operator|(
name|value
operator|<<
name|shift
operator|)
expr_stmt|;
block|}
block|}
DECL|class|Packed64SingleBlock12
specifier|static
class|class
name|Packed64SingleBlock12
extends|extends
name|Packed64SingleBlock
block|{
DECL|method|Packed64SingleBlock12
name|Packed64SingleBlock12
parameter_list|(
name|int
name|valueCount
parameter_list|)
block|{
name|super
argument_list|(
name|valueCount
argument_list|,
literal|12
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|get
specifier|public
name|long
name|get
parameter_list|(
name|int
name|index
parameter_list|)
block|{
specifier|final
name|int
name|o
init|=
name|index
operator|/
literal|5
decl_stmt|;
specifier|final
name|int
name|b
init|=
name|index
operator|%
literal|5
decl_stmt|;
specifier|final
name|int
name|shift
init|=
name|b
operator|*
literal|12
decl_stmt|;
return|return
operator|(
name|blocks
index|[
name|o
index|]
operator|>>>
name|shift
operator|)
operator|&
literal|4095L
return|;
block|}
annotation|@
name|Override
DECL|method|set
specifier|public
name|void
name|set
parameter_list|(
name|int
name|index
parameter_list|,
name|long
name|value
parameter_list|)
block|{
specifier|final
name|int
name|o
init|=
name|index
operator|/
literal|5
decl_stmt|;
specifier|final
name|int
name|b
init|=
name|index
operator|%
literal|5
decl_stmt|;
specifier|final
name|int
name|shift
init|=
name|b
operator|*
literal|12
decl_stmt|;
name|blocks
index|[
name|o
index|]
operator|=
operator|(
name|blocks
index|[
name|o
index|]
operator|&
operator|~
operator|(
literal|4095L
operator|<<
name|shift
operator|)
operator|)
operator||
operator|(
name|value
operator|<<
name|shift
operator|)
expr_stmt|;
block|}
block|}
DECL|class|Packed64SingleBlock16
specifier|static
class|class
name|Packed64SingleBlock16
extends|extends
name|Packed64SingleBlock
block|{
DECL|method|Packed64SingleBlock16
name|Packed64SingleBlock16
parameter_list|(
name|int
name|valueCount
parameter_list|)
block|{
name|super
argument_list|(
name|valueCount
argument_list|,
literal|16
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|get
specifier|public
name|long
name|get
parameter_list|(
name|int
name|index
parameter_list|)
block|{
specifier|final
name|int
name|o
init|=
name|index
operator|>>>
literal|2
decl_stmt|;
specifier|final
name|int
name|b
init|=
name|index
operator|&
literal|3
decl_stmt|;
specifier|final
name|int
name|shift
init|=
name|b
operator|<<
literal|4
decl_stmt|;
return|return
operator|(
name|blocks
index|[
name|o
index|]
operator|>>>
name|shift
operator|)
operator|&
literal|65535L
return|;
block|}
annotation|@
name|Override
DECL|method|set
specifier|public
name|void
name|set
parameter_list|(
name|int
name|index
parameter_list|,
name|long
name|value
parameter_list|)
block|{
specifier|final
name|int
name|o
init|=
name|index
operator|>>>
literal|2
decl_stmt|;
specifier|final
name|int
name|b
init|=
name|index
operator|&
literal|3
decl_stmt|;
specifier|final
name|int
name|shift
init|=
name|b
operator|<<
literal|4
decl_stmt|;
name|blocks
index|[
name|o
index|]
operator|=
operator|(
name|blocks
index|[
name|o
index|]
operator|&
operator|~
operator|(
literal|65535L
operator|<<
name|shift
operator|)
operator|)
operator||
operator|(
name|value
operator|<<
name|shift
operator|)
expr_stmt|;
block|}
block|}
DECL|class|Packed64SingleBlock21
specifier|static
class|class
name|Packed64SingleBlock21
extends|extends
name|Packed64SingleBlock
block|{
DECL|method|Packed64SingleBlock21
name|Packed64SingleBlock21
parameter_list|(
name|int
name|valueCount
parameter_list|)
block|{
name|super
argument_list|(
name|valueCount
argument_list|,
literal|21
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|get
specifier|public
name|long
name|get
parameter_list|(
name|int
name|index
parameter_list|)
block|{
specifier|final
name|int
name|o
init|=
name|index
operator|/
literal|3
decl_stmt|;
specifier|final
name|int
name|b
init|=
name|index
operator|%
literal|3
decl_stmt|;
specifier|final
name|int
name|shift
init|=
name|b
operator|*
literal|21
decl_stmt|;
return|return
operator|(
name|blocks
index|[
name|o
index|]
operator|>>>
name|shift
operator|)
operator|&
literal|2097151L
return|;
block|}
annotation|@
name|Override
DECL|method|set
specifier|public
name|void
name|set
parameter_list|(
name|int
name|index
parameter_list|,
name|long
name|value
parameter_list|)
block|{
specifier|final
name|int
name|o
init|=
name|index
operator|/
literal|3
decl_stmt|;
specifier|final
name|int
name|b
init|=
name|index
operator|%
literal|3
decl_stmt|;
specifier|final
name|int
name|shift
init|=
name|b
operator|*
literal|21
decl_stmt|;
name|blocks
index|[
name|o
index|]
operator|=
operator|(
name|blocks
index|[
name|o
index|]
operator|&
operator|~
operator|(
literal|2097151L
operator|<<
name|shift
operator|)
operator|)
operator||
operator|(
name|value
operator|<<
name|shift
operator|)
expr_stmt|;
block|}
block|}
DECL|class|Packed64SingleBlock32
specifier|static
class|class
name|Packed64SingleBlock32
extends|extends
name|Packed64SingleBlock
block|{
DECL|method|Packed64SingleBlock32
name|Packed64SingleBlock32
parameter_list|(
name|int
name|valueCount
parameter_list|)
block|{
name|super
argument_list|(
name|valueCount
argument_list|,
literal|32
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|get
specifier|public
name|long
name|get
parameter_list|(
name|int
name|index
parameter_list|)
block|{
specifier|final
name|int
name|o
init|=
name|index
operator|>>>
literal|1
decl_stmt|;
specifier|final
name|int
name|b
init|=
name|index
operator|&
literal|1
decl_stmt|;
specifier|final
name|int
name|shift
init|=
name|b
operator|<<
literal|5
decl_stmt|;
return|return
operator|(
name|blocks
index|[
name|o
index|]
operator|>>>
name|shift
operator|)
operator|&
literal|4294967295L
return|;
block|}
annotation|@
name|Override
DECL|method|set
specifier|public
name|void
name|set
parameter_list|(
name|int
name|index
parameter_list|,
name|long
name|value
parameter_list|)
block|{
specifier|final
name|int
name|o
init|=
name|index
operator|>>>
literal|1
decl_stmt|;
specifier|final
name|int
name|b
init|=
name|index
operator|&
literal|1
decl_stmt|;
specifier|final
name|int
name|shift
init|=
name|b
operator|<<
literal|5
decl_stmt|;
name|blocks
index|[
name|o
index|]
operator|=
operator|(
name|blocks
index|[
name|o
index|]
operator|&
operator|~
operator|(
literal|4294967295L
operator|<<
name|shift
operator|)
operator|)
operator||
operator|(
name|value
operator|<<
name|shift
operator|)
expr_stmt|;
block|}
block|}
block|}
end_class
end_unit
