begin_unit
begin_package
DECL|package|org.apache.lucene.util
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|invoke
operator|.
name|MethodHandle
import|;
end_import
begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|invoke
operator|.
name|MethodHandles
import|;
end_import
begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|invoke
operator|.
name|MethodType
import|;
end_import
begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|ref
operator|.
name|Reference
import|;
end_import
begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|ref
operator|.
name|WeakReference
import|;
end_import
begin_comment
comment|/**  * An AttributeFactory creates instances of {@link AttributeImpl}s.  */
end_comment
begin_class
DECL|class|AttributeFactory
specifier|public
specifier|abstract
class|class
name|AttributeFactory
block|{
comment|/**    * Returns an {@link AttributeImpl} for the supplied {@link Attribute} interface class.    */
DECL|method|createAttributeInstance
specifier|public
specifier|abstract
name|AttributeImpl
name|createAttributeInstance
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|Attribute
argument_list|>
name|attClass
parameter_list|)
function_decl|;
comment|/**    * Returns a correctly typed {@link MethodHandle} for the no-arg ctor of the given class.    */
DECL|method|findAttributeImplCtor
specifier|static
specifier|final
name|MethodHandle
name|findAttributeImplCtor
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|AttributeImpl
argument_list|>
name|clazz
parameter_list|)
block|{
try|try
block|{
return|return
name|lookup
operator|.
name|findConstructor
argument_list|(
name|clazz
argument_list|,
name|NO_ARG_CTOR
argument_list|)
operator|.
name|asType
argument_list|(
name|NO_ARG_RETURNING_ATTRIBUTEIMPL
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
decl||
name|IllegalAccessException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Cannot lookup accessible no-arg constructor for: "
operator|+
name|clazz
operator|.
name|getName
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|field|lookup
specifier|private
specifier|static
specifier|final
name|MethodHandles
operator|.
name|Lookup
name|lookup
init|=
name|MethodHandles
operator|.
name|publicLookup
argument_list|()
decl_stmt|;
DECL|field|NO_ARG_CTOR
specifier|private
specifier|static
specifier|final
name|MethodType
name|NO_ARG_CTOR
init|=
name|MethodType
operator|.
name|methodType
argument_list|(
name|void
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|NO_ARG_RETURNING_ATTRIBUTEIMPL
specifier|private
specifier|static
specifier|final
name|MethodType
name|NO_ARG_RETURNING_ATTRIBUTEIMPL
init|=
name|MethodType
operator|.
name|methodType
argument_list|(
name|AttributeImpl
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * This is the default factory that creates {@link AttributeImpl}s using the    * class name of the supplied {@link Attribute} interface class by appending<code>Impl</code> to it.    */
DECL|field|DEFAULT_ATTRIBUTE_FACTORY
specifier|public
specifier|static
specifier|final
name|AttributeFactory
name|DEFAULT_ATTRIBUTE_FACTORY
init|=
operator|new
name|DefaultAttributeFactory
argument_list|(
literal|true
argument_list|)
decl_stmt|;
DECL|class|DefaultAttributeFactory
specifier|static
specifier|final
class|class
name|DefaultAttributeFactory
extends|extends
name|AttributeFactory
block|{
DECL|field|attClassImplMap
specifier|private
specifier|final
name|WeakIdentityMap
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|Attribute
argument_list|>
argument_list|,
name|Object
argument_list|>
name|attClassImplMap
init|=
name|WeakIdentityMap
operator|.
name|newConcurrentHashMap
argument_list|(
literal|false
argument_list|)
decl_stmt|;
DECL|field|myClassLoader
specifier|private
specifier|final
name|ClassLoader
name|myClassLoader
init|=
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
decl_stmt|;
DECL|field|useMethodHandles
specifier|private
specifier|final
name|boolean
name|useMethodHandles
decl_stmt|;
comment|// this constructor is available for tests, to be able to test the pure-reflective case, too
DECL|method|DefaultAttributeFactory
name|DefaultAttributeFactory
parameter_list|(
name|boolean
name|useMethodHandles
parameter_list|)
block|{
name|this
operator|.
name|useMethodHandles
operator|=
name|useMethodHandles
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createAttributeInstance
specifier|public
name|AttributeImpl
name|createAttributeInstance
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|Attribute
argument_list|>
name|attClass
parameter_list|)
block|{
comment|// first lookup from cache:
name|Object
name|cached
init|=
name|attClassImplMap
operator|.
name|get
argument_list|(
name|attClass
argument_list|)
decl_stmt|;
if|if
condition|(
name|cached
operator|instanceof
name|MethodHandle
condition|)
block|{
return|return
name|invokeMethodHandle
argument_list|(
operator|(
name|MethodHandle
operator|)
name|cached
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|cached
operator|instanceof
name|Reference
condition|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|final
name|Class
argument_list|<
name|?
extends|extends
name|AttributeImpl
argument_list|>
name|clazz
init|=
operator|(
operator|(
name|Reference
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|AttributeImpl
argument_list|>
argument_list|>
operator|)
name|cached
operator|)
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|clazz
operator|!=
literal|null
condition|)
block|{
return|return
name|invokeReflective
argument_list|(
name|clazz
argument_list|)
return|;
block|}
name|cached
operator|=
literal|null
expr_stmt|;
comment|// fall-through
block|}
comment|// No cache hit!
comment|// Please note: we have the slight chance that another thread may do the same, but who cares?
assert|assert
name|cached
operator|==
literal|null
assert|;
specifier|final
name|Class
argument_list|<
name|?
extends|extends
name|AttributeImpl
argument_list|>
name|implClazz
init|=
name|findImplClass
argument_list|(
name|attClass
argument_list|)
decl_stmt|;
comment|// if the attribute impl is from our own ClassLoader, we optimize to use pre-allocated MethodHandle to instantiate the object
if|if
condition|(
name|useMethodHandles
operator|&&
name|implClazz
operator|.
name|getClassLoader
argument_list|()
operator|==
name|myClassLoader
condition|)
block|{
specifier|final
name|MethodHandle
name|constr
init|=
name|findAttributeImplCtor
argument_list|(
name|implClazz
argument_list|)
decl_stmt|;
name|attClassImplMap
operator|.
name|put
argument_list|(
name|attClass
argument_list|,
name|constr
argument_list|)
expr_stmt|;
return|return
name|invokeMethodHandle
argument_list|(
name|constr
argument_list|)
return|;
block|}
else|else
block|{
comment|// otherwise, to not refer to the class forever (because the MethodHandle strongly
comment|// references the class), so it can never be unloaded, we use slower reflection:
name|attClassImplMap
operator|.
name|put
argument_list|(
name|attClass
argument_list|,
operator|new
name|WeakReference
argument_list|<>
argument_list|(
name|implClazz
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|invokeReflective
argument_list|(
name|implClazz
argument_list|)
return|;
block|}
block|}
DECL|method|findImplClass
specifier|private
name|Class
argument_list|<
name|?
extends|extends
name|AttributeImpl
argument_list|>
name|findImplClass
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|Attribute
argument_list|>
name|attClass
parameter_list|)
block|{
try|try
block|{
return|return
name|Class
operator|.
name|forName
argument_list|(
name|attClass
operator|.
name|getName
argument_list|()
operator|+
literal|"Impl"
argument_list|,
literal|true
argument_list|,
name|attClass
operator|.
name|getClassLoader
argument_list|()
argument_list|)
operator|.
name|asSubclass
argument_list|(
name|AttributeImpl
operator|.
name|class
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|cnfe
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Cannot find implementing class for: "
operator|+
name|attClass
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
block|}
DECL|method|invokeMethodHandle
specifier|private
name|AttributeImpl
name|invokeMethodHandle
parameter_list|(
name|MethodHandle
name|constr
parameter_list|)
block|{
try|try
block|{
return|return
operator|(
name|AttributeImpl
operator|)
name|constr
operator|.
name|invokeExact
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|rethrow
argument_list|(
name|t
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|AssertionError
argument_list|()
throw|;
block|}
block|}
DECL|method|invokeReflective
specifier|private
name|AttributeImpl
name|invokeReflective
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|AttributeImpl
argument_list|>
name|implClass
parameter_list|)
block|{
try|try
block|{
return|return
name|implClass
operator|.
name|newInstance
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|InstantiationException
decl||
name|IllegalAccessException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Cannot instantiate implementing class: "
operator|+
name|implClass
operator|.
name|getName
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**<b>Expert</b>: AttributeFactory returning an instance of the given {@code clazz} for the    * attributes it implements. For all other attributes it calls the given delegate factory    * as fallback. This class can be used to prefer a specific {@code AttributeImpl} which    * combines multiple attributes over separate classes.    * @lucene.internal    */
DECL|class|StaticImplementationAttributeFactory
specifier|public
specifier|abstract
specifier|static
class|class
name|StaticImplementationAttributeFactory
parameter_list|<
name|A
extends|extends
name|AttributeImpl
parameter_list|>
extends|extends
name|AttributeFactory
block|{
DECL|field|delegate
specifier|private
specifier|final
name|AttributeFactory
name|delegate
decl_stmt|;
DECL|field|clazz
specifier|private
specifier|final
name|Class
argument_list|<
name|A
argument_list|>
name|clazz
decl_stmt|;
comment|/**<b>Expert</b>: Creates an AttributeFactory returning {@code clazz} as instance for the      * attributes it implements and for all other attributes calls the given delegate factory. */
DECL|method|StaticImplementationAttributeFactory
specifier|public
name|StaticImplementationAttributeFactory
parameter_list|(
name|AttributeFactory
name|delegate
parameter_list|,
name|Class
argument_list|<
name|A
argument_list|>
name|clazz
parameter_list|)
block|{
name|this
operator|.
name|delegate
operator|=
name|delegate
expr_stmt|;
name|this
operator|.
name|clazz
operator|=
name|clazz
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createAttributeInstance
specifier|public
specifier|final
name|AttributeImpl
name|createAttributeInstance
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|Attribute
argument_list|>
name|attClass
parameter_list|)
block|{
return|return
name|attClass
operator|.
name|isAssignableFrom
argument_list|(
name|clazz
argument_list|)
condition|?
name|createInstance
argument_list|()
else|:
name|delegate
operator|.
name|createAttributeInstance
argument_list|(
name|attClass
argument_list|)
return|;
block|}
comment|/** Creates an instance of {@code A}. */
DECL|method|createInstance
specifier|protected
specifier|abstract
name|A
name|createInstance
parameter_list|()
function_decl|;
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|other
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|other
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|other
operator|==
literal|null
operator|||
name|other
operator|.
name|getClass
argument_list|()
operator|!=
name|this
operator|.
name|getClass
argument_list|()
condition|)
return|return
literal|false
return|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
specifier|final
name|StaticImplementationAttributeFactory
name|af
init|=
operator|(
name|StaticImplementationAttributeFactory
operator|)
name|other
decl_stmt|;
return|return
name|this
operator|.
name|delegate
operator|.
name|equals
argument_list|(
name|af
operator|.
name|delegate
argument_list|)
operator|&&
name|this
operator|.
name|clazz
operator|==
name|af
operator|.
name|clazz
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|31
operator|*
name|delegate
operator|.
name|hashCode
argument_list|()
operator|+
name|clazz
operator|.
name|hashCode
argument_list|()
return|;
block|}
block|}
comment|/** Returns an AttributeFactory returning an instance of the given {@code clazz} for the    * attributes it implements. The given {@code clazz} must have a public no-arg constructor.    * For all other attributes it calls the given delegate factory as fallback.    * This method can be used to prefer a specific {@code AttributeImpl} which combines    * multiple attributes over separate classes.    *<p>Please save instances created by this method in a static final field, because    * on each call, this does reflection for creating a {@link MethodHandle}.    */
DECL|method|getStaticImplementation
specifier|public
specifier|static
parameter_list|<
name|A
extends|extends
name|AttributeImpl
parameter_list|>
name|AttributeFactory
name|getStaticImplementation
parameter_list|(
name|AttributeFactory
name|delegate
parameter_list|,
name|Class
argument_list|<
name|A
argument_list|>
name|clazz
parameter_list|)
block|{
specifier|final
name|MethodHandle
name|constr
init|=
name|findAttributeImplCtor
argument_list|(
name|clazz
argument_list|)
decl_stmt|;
return|return
operator|new
name|StaticImplementationAttributeFactory
argument_list|<
name|A
argument_list|>
argument_list|(
name|delegate
argument_list|,
name|clazz
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|A
name|createInstance
parameter_list|()
block|{
try|try
block|{
return|return
operator|(
name|A
operator|)
name|constr
operator|.
name|invokeExact
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|rethrow
argument_list|(
name|t
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|AssertionError
argument_list|()
throw|;
block|}
block|}
block|}
return|;
block|}
comment|// Hack to rethrow unknown Exceptions from {@link MethodHandle#invoke}:
comment|// TODO: remove the impl in test-framework, this one is more elegant :-)
DECL|method|rethrow
specifier|static
name|void
name|rethrow
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|AttributeFactory
operator|.
expr|<
name|Error
operator|>
name|rethrow0
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|rethrow0
specifier|private
specifier|static
parameter_list|<
name|T
extends|extends
name|Throwable
parameter_list|>
name|void
name|rethrow0
parameter_list|(
name|Throwable
name|t
parameter_list|)
throws|throws
name|T
block|{
throw|throw
operator|(
name|T
operator|)
name|t
throw|;
block|}
block|}
end_class
end_unit
