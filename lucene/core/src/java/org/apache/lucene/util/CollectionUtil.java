begin_unit
begin_package
DECL|package|org.apache.lucene.util
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|ArrayUtil
operator|.
name|MERGE_EXTRA_MEMORY_THRESHOLD
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|ArrayUtil
operator|.
name|MERGE_OVERHEAD_RATIO
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|RandomAccess
import|;
end_import
begin_comment
comment|/**  * Methods for manipulating (sorting) collections.  * Sort methods work directly on the supplied lists and don't copy to/from arrays  * before/after. For medium size collections as used in the Lucene indexer that is  * much more efficient.  *  * @lucene.internal  */
end_comment
begin_class
DECL|class|CollectionUtil
specifier|public
specifier|final
class|class
name|CollectionUtil
block|{
DECL|method|CollectionUtil
specifier|private
name|CollectionUtil
parameter_list|()
block|{}
comment|// no instance
DECL|class|ListSorterTemplate
specifier|private
specifier|static
specifier|abstract
class|class
name|ListSorterTemplate
parameter_list|<
name|T
parameter_list|>
extends|extends
name|SorterTemplate
block|{
DECL|field|list
specifier|protected
specifier|final
name|List
argument_list|<
name|T
argument_list|>
name|list
decl_stmt|;
DECL|method|ListSorterTemplate
name|ListSorterTemplate
parameter_list|(
name|List
argument_list|<
name|T
argument_list|>
name|list
parameter_list|)
block|{
name|this
operator|.
name|list
operator|=
name|list
expr_stmt|;
block|}
DECL|method|compare
specifier|protected
specifier|abstract
name|int
name|compare
parameter_list|(
name|T
name|a
parameter_list|,
name|T
name|b
parameter_list|)
function_decl|;
annotation|@
name|Override
DECL|method|swap
specifier|protected
name|void
name|swap
parameter_list|(
name|int
name|i
parameter_list|,
name|int
name|j
parameter_list|)
block|{
name|Collections
operator|.
name|swap
argument_list|(
name|list
argument_list|,
name|i
argument_list|,
name|j
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|compare
specifier|protected
name|int
name|compare
parameter_list|(
name|int
name|i
parameter_list|,
name|int
name|j
parameter_list|)
block|{
return|return
name|compare
argument_list|(
name|list
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|list
operator|.
name|get
argument_list|(
name|j
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|setPivot
specifier|protected
name|void
name|setPivot
parameter_list|(
name|int
name|i
parameter_list|)
block|{
name|pivot
operator|=
name|list
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|comparePivot
specifier|protected
name|int
name|comparePivot
parameter_list|(
name|int
name|j
parameter_list|)
block|{
return|return
name|compare
argument_list|(
name|pivot
argument_list|,
name|list
operator|.
name|get
argument_list|(
name|j
argument_list|)
argument_list|)
return|;
block|}
DECL|field|pivot
specifier|private
name|T
name|pivot
decl_stmt|;
block|}
comment|// a template for merge-based sorts which uses extra memory to speed up merging
DECL|class|ListMergeSorterTemplate
specifier|private
specifier|static
specifier|abstract
class|class
name|ListMergeSorterTemplate
parameter_list|<
name|T
parameter_list|>
extends|extends
name|ListSorterTemplate
argument_list|<
name|T
argument_list|>
block|{
DECL|field|threshold
specifier|private
specifier|final
name|int
name|threshold
decl_stmt|;
comment|// maximum length of a merge that can be made using extra memory
DECL|field|tmp
specifier|private
specifier|final
name|T
index|[]
name|tmp
decl_stmt|;
DECL|method|ListMergeSorterTemplate
name|ListMergeSorterTemplate
parameter_list|(
name|List
argument_list|<
name|T
argument_list|>
name|list
parameter_list|,
name|float
name|overheadRatio
parameter_list|)
block|{
name|super
argument_list|(
name|list
argument_list|)
expr_stmt|;
name|this
operator|.
name|threshold
operator|=
call|(
name|int
call|)
argument_list|(
name|list
operator|.
name|size
argument_list|()
operator|*
name|overheadRatio
argument_list|)
expr_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|final
name|T
index|[]
name|tmpBuf
init|=
operator|(
name|T
index|[]
operator|)
operator|new
name|Object
index|[
name|threshold
index|]
decl_stmt|;
name|this
operator|.
name|tmp
operator|=
name|tmpBuf
expr_stmt|;
block|}
DECL|method|mergeWithExtraMemory
specifier|private
name|void
name|mergeWithExtraMemory
parameter_list|(
name|int
name|lo
parameter_list|,
name|int
name|pivot
parameter_list|,
name|int
name|hi
parameter_list|,
name|int
name|len1
parameter_list|,
name|int
name|len2
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len1
condition|;
operator|++
name|i
control|)
block|{
name|tmp
index|[
name|i
index|]
operator|=
name|list
operator|.
name|get
argument_list|(
name|lo
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
name|int
name|i
init|=
literal|0
decl_stmt|,
name|j
init|=
name|pivot
decl_stmt|,
name|dest
init|=
name|lo
decl_stmt|;
while|while
condition|(
name|i
operator|<
name|len1
operator|&&
name|j
operator|<
name|hi
condition|)
block|{
if|if
condition|(
name|compare
argument_list|(
name|tmp
index|[
name|i
index|]
argument_list|,
name|list
operator|.
name|get
argument_list|(
name|j
argument_list|)
argument_list|)
operator|<=
literal|0
condition|)
block|{
name|list
operator|.
name|set
argument_list|(
name|dest
operator|++
argument_list|,
name|tmp
index|[
name|i
operator|++
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|list
operator|.
name|set
argument_list|(
name|dest
operator|++
argument_list|,
name|list
operator|.
name|get
argument_list|(
name|j
operator|++
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
while|while
condition|(
name|i
operator|<
name|len1
condition|)
block|{
name|list
operator|.
name|set
argument_list|(
name|dest
operator|++
argument_list|,
name|tmp
index|[
name|i
operator|++
index|]
argument_list|)
expr_stmt|;
block|}
assert|assert
name|j
operator|==
name|dest
assert|;
block|}
annotation|@
name|Override
DECL|method|merge
specifier|protected
name|void
name|merge
parameter_list|(
name|int
name|lo
parameter_list|,
name|int
name|pivot
parameter_list|,
name|int
name|hi
parameter_list|,
name|int
name|len1
parameter_list|,
name|int
name|len2
parameter_list|)
block|{
if|if
condition|(
name|len1
operator|<=
name|threshold
condition|)
block|{
name|mergeWithExtraMemory
argument_list|(
name|lo
argument_list|,
name|pivot
argument_list|,
name|hi
argument_list|,
name|len1
argument_list|,
name|len2
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// since this method recurses to run merge on smaller arrays, it will
comment|// end up using mergeWithExtraMemory
name|super
operator|.
name|merge
argument_list|(
name|lo
argument_list|,
name|pivot
argument_list|,
name|hi
argument_list|,
name|len1
argument_list|,
name|len2
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/** SorterTemplate with custom {@link Comparator} */
DECL|method|getSorter
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|SorterTemplate
name|getSorter
parameter_list|(
specifier|final
name|List
argument_list|<
name|T
argument_list|>
name|list
parameter_list|,
specifier|final
name|Comparator
argument_list|<
name|?
super|super
name|T
argument_list|>
name|comp
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|list
operator|instanceof
name|RandomAccess
operator|)
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"CollectionUtil can only sort random access lists in-place."
argument_list|)
throw|;
return|return
operator|new
name|ListSorterTemplate
argument_list|<
name|T
argument_list|>
argument_list|(
name|list
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|int
name|compare
parameter_list|(
name|T
name|a
parameter_list|,
name|T
name|b
parameter_list|)
block|{
return|return
name|comp
operator|.
name|compare
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
return|;
block|}
block|}
return|;
block|}
comment|/** Natural SorterTemplate */
DECL|method|getSorter
specifier|private
specifier|static
parameter_list|<
name|T
extends|extends
name|Comparable
argument_list|<
name|?
super|super
name|T
argument_list|>
parameter_list|>
name|SorterTemplate
name|getSorter
parameter_list|(
specifier|final
name|List
argument_list|<
name|T
argument_list|>
name|list
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|list
operator|instanceof
name|RandomAccess
operator|)
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"CollectionUtil can only sort random access lists in-place."
argument_list|)
throw|;
return|return
operator|new
name|ListSorterTemplate
argument_list|<
name|T
argument_list|>
argument_list|(
name|list
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|int
name|compare
parameter_list|(
name|T
name|a
parameter_list|,
name|T
name|b
parameter_list|)
block|{
return|return
name|a
operator|.
name|compareTo
argument_list|(
name|b
argument_list|)
return|;
block|}
block|}
return|;
block|}
comment|/** SorterTemplate with custom {@link Comparator} for merge-based sorts. */
DECL|method|getMergeSorter
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|SorterTemplate
name|getMergeSorter
parameter_list|(
specifier|final
name|List
argument_list|<
name|T
argument_list|>
name|list
parameter_list|,
specifier|final
name|Comparator
argument_list|<
name|?
super|super
name|T
argument_list|>
name|comp
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|list
operator|instanceof
name|RandomAccess
operator|)
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"CollectionUtil can only sort random access lists in-place."
argument_list|)
throw|;
if|if
condition|(
name|list
operator|.
name|size
argument_list|()
operator|<
name|MERGE_EXTRA_MEMORY_THRESHOLD
condition|)
block|{
return|return
name|getSorter
argument_list|(
name|list
argument_list|,
name|comp
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|ListMergeSorterTemplate
argument_list|<
name|T
argument_list|>
argument_list|(
name|list
argument_list|,
name|MERGE_OVERHEAD_RATIO
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|int
name|compare
parameter_list|(
name|T
name|a
parameter_list|,
name|T
name|b
parameter_list|)
block|{
return|return
name|comp
operator|.
name|compare
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
return|;
block|}
block|}
return|;
block|}
block|}
comment|/** Natural SorterTemplate for merge-based sorts. */
DECL|method|getMergeSorter
specifier|private
specifier|static
parameter_list|<
name|T
extends|extends
name|Comparable
argument_list|<
name|?
super|super
name|T
argument_list|>
parameter_list|>
name|SorterTemplate
name|getMergeSorter
parameter_list|(
specifier|final
name|List
argument_list|<
name|T
argument_list|>
name|list
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|list
operator|instanceof
name|RandomAccess
operator|)
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"CollectionUtil can only sort random access lists in-place."
argument_list|)
throw|;
if|if
condition|(
name|list
operator|.
name|size
argument_list|()
operator|<
name|MERGE_EXTRA_MEMORY_THRESHOLD
condition|)
block|{
return|return
name|getSorter
argument_list|(
name|list
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|ListMergeSorterTemplate
argument_list|<
name|T
argument_list|>
argument_list|(
name|list
argument_list|,
name|MERGE_OVERHEAD_RATIO
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|int
name|compare
parameter_list|(
name|T
name|a
parameter_list|,
name|T
name|b
parameter_list|)
block|{
return|return
name|a
operator|.
name|compareTo
argument_list|(
name|b
argument_list|)
return|;
block|}
block|}
return|;
block|}
block|}
comment|/**    * Sorts the given random access {@link List} using the {@link Comparator}.    * The list must implement {@link RandomAccess}. This method uses the quick sort    * algorithm, but falls back to insertion sort for small lists.    * @throws IllegalArgumentException if list is e.g. a linked list without random access.    */
DECL|method|quickSort
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|void
name|quickSort
parameter_list|(
name|List
argument_list|<
name|T
argument_list|>
name|list
parameter_list|,
name|Comparator
argument_list|<
name|?
super|super
name|T
argument_list|>
name|comp
parameter_list|)
block|{
specifier|final
name|int
name|size
init|=
name|list
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|size
operator|<=
literal|1
condition|)
return|return;
name|getSorter
argument_list|(
name|list
argument_list|,
name|comp
argument_list|)
operator|.
name|quickSort
argument_list|(
literal|0
argument_list|,
name|size
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/**    * Sorts the given random access {@link List} in natural order.    * The list must implement {@link RandomAccess}. This method uses the quick sort    * algorithm, but falls back to insertion sort for small lists.    * @throws IllegalArgumentException if list is e.g. a linked list without random access.    */
DECL|method|quickSort
specifier|public
specifier|static
parameter_list|<
name|T
extends|extends
name|Comparable
argument_list|<
name|?
super|super
name|T
argument_list|>
parameter_list|>
name|void
name|quickSort
parameter_list|(
name|List
argument_list|<
name|T
argument_list|>
name|list
parameter_list|)
block|{
specifier|final
name|int
name|size
init|=
name|list
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|size
operator|<=
literal|1
condition|)
return|return;
name|getSorter
argument_list|(
name|list
argument_list|)
operator|.
name|quickSort
argument_list|(
literal|0
argument_list|,
name|size
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// mergeSorts:
comment|/**    * Sorts the given random access {@link List} using the {@link Comparator}.    * The list must implement {@link RandomAccess}. This method uses the merge sort    * algorithm, but falls back to insertion sort for small lists.    * @throws IllegalArgumentException if list is e.g. a linked list without random access.    */
DECL|method|mergeSort
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|void
name|mergeSort
parameter_list|(
name|List
argument_list|<
name|T
argument_list|>
name|list
parameter_list|,
name|Comparator
argument_list|<
name|?
super|super
name|T
argument_list|>
name|comp
parameter_list|)
block|{
specifier|final
name|int
name|size
init|=
name|list
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|size
operator|<=
literal|1
condition|)
return|return;
name|getMergeSorter
argument_list|(
name|list
argument_list|,
name|comp
argument_list|)
operator|.
name|mergeSort
argument_list|(
literal|0
argument_list|,
name|size
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/**    * Sorts the given random access {@link List} in natural order.    * The list must implement {@link RandomAccess}. This method uses the merge sort    * algorithm, but falls back to insertion sort for small lists.    * @throws IllegalArgumentException if list is e.g. a linked list without random access.    */
DECL|method|mergeSort
specifier|public
specifier|static
parameter_list|<
name|T
extends|extends
name|Comparable
argument_list|<
name|?
super|super
name|T
argument_list|>
parameter_list|>
name|void
name|mergeSort
parameter_list|(
name|List
argument_list|<
name|T
argument_list|>
name|list
parameter_list|)
block|{
specifier|final
name|int
name|size
init|=
name|list
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|size
operator|<=
literal|1
condition|)
return|return;
name|getMergeSorter
argument_list|(
name|list
argument_list|)
operator|.
name|mergeSort
argument_list|(
literal|0
argument_list|,
name|size
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// timSorts:
comment|/**    * Sorts the given random access {@link List} using the {@link Comparator}.    * The list must implement {@link RandomAccess}. This method uses the TimSort    * algorithm, but falls back to binary sort for small lists.    * @throws IllegalArgumentException if list is e.g. a linked list without random access.    */
DECL|method|timSort
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|void
name|timSort
parameter_list|(
name|List
argument_list|<
name|T
argument_list|>
name|list
parameter_list|,
name|Comparator
argument_list|<
name|?
super|super
name|T
argument_list|>
name|comp
parameter_list|)
block|{
specifier|final
name|int
name|size
init|=
name|list
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|size
operator|<=
literal|1
condition|)
return|return;
name|getMergeSorter
argument_list|(
name|list
argument_list|,
name|comp
argument_list|)
operator|.
name|timSort
argument_list|(
literal|0
argument_list|,
name|size
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/**    * Sorts the given random access {@link List} in natural order.    * The list must implement {@link RandomAccess}. This method uses the TimSort    * algorithm, but falls back to binary sort for small lists.    * @throws IllegalArgumentException if list is e.g. a linked list without random access.    */
DECL|method|timSort
specifier|public
specifier|static
parameter_list|<
name|T
extends|extends
name|Comparable
argument_list|<
name|?
super|super
name|T
argument_list|>
parameter_list|>
name|void
name|timSort
parameter_list|(
name|List
argument_list|<
name|T
argument_list|>
name|list
parameter_list|)
block|{
specifier|final
name|int
name|size
init|=
name|list
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|size
operator|<=
literal|1
condition|)
return|return;
name|getMergeSorter
argument_list|(
name|list
argument_list|)
operator|.
name|timSort
argument_list|(
literal|0
argument_list|,
name|size
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// insertionSorts:
comment|/**    * Sorts the given random access {@link List} using the {@link Comparator}.    * The list must implement {@link RandomAccess}. This method uses the insertion sort    * algorithm. It is only recommended to use this algorithm for partially sorted small lists!    * @throws IllegalArgumentException if list is e.g. a linked list without random access.    */
DECL|method|insertionSort
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|void
name|insertionSort
parameter_list|(
name|List
argument_list|<
name|T
argument_list|>
name|list
parameter_list|,
name|Comparator
argument_list|<
name|?
super|super
name|T
argument_list|>
name|comp
parameter_list|)
block|{
specifier|final
name|int
name|size
init|=
name|list
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|size
operator|<=
literal|1
condition|)
return|return;
name|getSorter
argument_list|(
name|list
argument_list|,
name|comp
argument_list|)
operator|.
name|insertionSort
argument_list|(
literal|0
argument_list|,
name|size
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/**    * Sorts the given random access {@link List} in natural order.    * The list must implement {@link RandomAccess}. This method uses the insertion sort    * algorithm. It is only recommended to use this algorithm for partially sorted small lists!    * @throws IllegalArgumentException if list is e.g. a linked list without random access.    */
DECL|method|insertionSort
specifier|public
specifier|static
parameter_list|<
name|T
extends|extends
name|Comparable
argument_list|<
name|?
super|super
name|T
argument_list|>
parameter_list|>
name|void
name|insertionSort
parameter_list|(
name|List
argument_list|<
name|T
argument_list|>
name|list
parameter_list|)
block|{
specifier|final
name|int
name|size
init|=
name|list
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|size
operator|<=
literal|1
condition|)
return|return;
name|getSorter
argument_list|(
name|list
argument_list|)
operator|.
name|insertionSort
argument_list|(
literal|0
argument_list|,
name|size
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// binarySorts:
comment|/**    * Sorts the given random access {@link List} using the {@link Comparator}.    * The list must implement {@link RandomAccess}. This method uses the binary sort    * algorithm. It is only recommended to use this algorithm for small lists!    * @throws IllegalArgumentException if list is e.g. a linked list without random access.    */
DECL|method|binarySort
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|void
name|binarySort
parameter_list|(
name|List
argument_list|<
name|T
argument_list|>
name|list
parameter_list|,
name|Comparator
argument_list|<
name|?
super|super
name|T
argument_list|>
name|comp
parameter_list|)
block|{
specifier|final
name|int
name|size
init|=
name|list
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|size
operator|<=
literal|1
condition|)
return|return;
name|getSorter
argument_list|(
name|list
argument_list|,
name|comp
argument_list|)
operator|.
name|binarySort
argument_list|(
literal|0
argument_list|,
name|size
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/**    * Sorts the given random access {@link List} in natural order.    * The list must implement {@link RandomAccess}. This method uses the insertion sort    * algorithm. It is only recommended to use this algorithm for small lists!    * @throws IllegalArgumentException if list is e.g. a linked list without random access.    */
DECL|method|binarySort
specifier|public
specifier|static
parameter_list|<
name|T
extends|extends
name|Comparable
argument_list|<
name|?
super|super
name|T
argument_list|>
parameter_list|>
name|void
name|binarySort
parameter_list|(
name|List
argument_list|<
name|T
argument_list|>
name|list
parameter_list|)
block|{
specifier|final
name|int
name|size
init|=
name|list
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|size
operator|<=
literal|1
condition|)
return|return;
name|getSorter
argument_list|(
name|list
argument_list|)
operator|.
name|binarySort
argument_list|(
literal|0
argument_list|,
name|size
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
