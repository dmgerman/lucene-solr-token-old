begin_unit
begin_package
DECL|package|org.apache.lucene.util.hash
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|hash
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|NamedSPILoader
import|;
end_import
begin_comment
comment|/**  * Base class for hashing functions that can be referred to by name.  * Subclasses are expected to provide threadsafe implementations of the hash function  * on the range of bytes referenced in the provided {@link BytesRef}  * @lucene.experimental  */
end_comment
begin_class
DECL|class|HashFunction
specifier|public
specifier|abstract
class|class
name|HashFunction
implements|implements
name|NamedSPILoader
operator|.
name|NamedSPI
block|{
comment|/**    * Hashes the contents of the referenced bytes    * @param bytes the data to be hashed    * @return the hash of the bytes referenced by bytes.offset and length bytes.length    */
DECL|method|hash
specifier|public
specifier|abstract
name|int
name|hash
parameter_list|(
name|BytesRef
name|bytes
parameter_list|)
function_decl|;
DECL|field|loader
specifier|private
specifier|static
specifier|final
name|NamedSPILoader
argument_list|<
name|HashFunction
argument_list|>
name|loader
init|=
operator|new
name|NamedSPILoader
argument_list|<
name|HashFunction
argument_list|>
argument_list|(
name|HashFunction
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|name
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
DECL|method|HashFunction
specifier|public
name|HashFunction
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|NamedSPILoader
operator|.
name|checkServiceName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
comment|/** Returns this codec's name */
annotation|@
name|Override
DECL|method|getName
specifier|public
specifier|final
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
comment|/** looks up a hash function by name */
DECL|method|forName
specifier|public
specifier|static
name|HashFunction
name|forName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|loader
operator|.
name|lookup
argument_list|(
name|name
argument_list|)
return|;
block|}
comment|/** returns a list of all available hash function names */
DECL|method|availableHashFunctionNames
specifier|public
specifier|static
name|Set
argument_list|<
name|String
argument_list|>
name|availableHashFunctionNames
parameter_list|()
block|{
return|return
name|loader
operator|.
name|availableServices
argument_list|()
return|;
block|}
comment|/**     * Reloads the hash function list from the given {@link ClassLoader}.    * Changes to the function list are visible after the method ends, all    * iterators ({@link #availableHashFunctionNames()},...) stay consistent.     *     *<p><b>NOTE:</b> Only new functions are added, existing ones are    * never removed or replaced.    *     *<p><em>This method is expensive and should only be called for discovery    * of new functions on the given classpath/classloader!</em>    */
DECL|method|reloadHashFunctions
specifier|public
specifier|static
name|void
name|reloadHashFunctions
parameter_list|(
name|ClassLoader
name|classloader
parameter_list|)
block|{
name|loader
operator|.
name|reload
argument_list|(
name|classloader
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|name
return|;
block|}
block|}
end_class
end_unit
