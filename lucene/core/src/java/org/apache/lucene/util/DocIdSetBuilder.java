begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.util
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|PointValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Terms
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|DocIdSet
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|DocIdSetIterator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|packed
operator|.
name|PackedInts
import|;
end_import
begin_comment
comment|/**  * A builder of {@link DocIdSet}s.  At first it uses a sparse structure to gather  * documents, and then upgrades to a non-sparse bit set once enough hits match.  *  * To add documents, you first need to call {@link #grow} in order to reserve  * space, and then call {@link BulkAdder#add(int)} on the returned  * {@link BulkAdder}.  *  * @lucene.internal  */
end_comment
begin_class
DECL|class|DocIdSetBuilder
specifier|public
specifier|final
class|class
name|DocIdSetBuilder
block|{
comment|/** Utility class to efficiently add many docs in one go.    *  @see DocIdSetBuilder#grow */
DECL|class|BulkAdder
specifier|public
specifier|static
specifier|abstract
class|class
name|BulkAdder
block|{
DECL|method|add
specifier|public
specifier|abstract
name|void
name|add
parameter_list|(
name|int
name|doc
parameter_list|)
function_decl|;
block|}
DECL|class|FixedBitSetAdder
specifier|private
specifier|static
class|class
name|FixedBitSetAdder
extends|extends
name|BulkAdder
block|{
DECL|field|bitSet
specifier|final
name|FixedBitSet
name|bitSet
decl_stmt|;
DECL|method|FixedBitSetAdder
name|FixedBitSetAdder
parameter_list|(
name|FixedBitSet
name|bitSet
parameter_list|)
block|{
name|this
operator|.
name|bitSet
operator|=
name|bitSet
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|add
specifier|public
name|void
name|add
parameter_list|(
name|int
name|doc
parameter_list|)
block|{
name|bitSet
operator|.
name|set
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|Buffer
specifier|private
specifier|static
class|class
name|Buffer
block|{
DECL|field|array
name|int
index|[]
name|array
decl_stmt|;
DECL|field|length
name|int
name|length
decl_stmt|;
DECL|method|Buffer
name|Buffer
parameter_list|(
name|int
name|length
parameter_list|)
block|{
name|this
operator|.
name|array
operator|=
operator|new
name|int
index|[
name|length
index|]
expr_stmt|;
name|this
operator|.
name|length
operator|=
literal|0
expr_stmt|;
block|}
DECL|method|Buffer
name|Buffer
parameter_list|(
name|int
index|[]
name|array
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|this
operator|.
name|array
operator|=
name|array
expr_stmt|;
name|this
operator|.
name|length
operator|=
name|length
expr_stmt|;
block|}
block|}
DECL|class|BufferAdder
specifier|private
specifier|static
class|class
name|BufferAdder
extends|extends
name|BulkAdder
block|{
DECL|field|buffer
specifier|final
name|Buffer
name|buffer
decl_stmt|;
DECL|method|BufferAdder
name|BufferAdder
parameter_list|(
name|Buffer
name|buffer
parameter_list|)
block|{
name|this
operator|.
name|buffer
operator|=
name|buffer
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|add
specifier|public
name|void
name|add
parameter_list|(
name|int
name|doc
parameter_list|)
block|{
name|buffer
operator|.
name|array
index|[
name|buffer
operator|.
name|length
operator|++
index|]
operator|=
name|doc
expr_stmt|;
block|}
block|}
DECL|field|maxDoc
specifier|private
specifier|final
name|int
name|maxDoc
decl_stmt|;
DECL|field|threshold
specifier|private
specifier|final
name|int
name|threshold
decl_stmt|;
comment|// pkg-private for testing
DECL|field|multivalued
specifier|final
name|boolean
name|multivalued
decl_stmt|;
DECL|field|numValuesPerDoc
specifier|final
name|double
name|numValuesPerDoc
decl_stmt|;
DECL|field|buffers
specifier|private
name|List
argument_list|<
name|Buffer
argument_list|>
name|buffers
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|totalAllocated
specifier|private
name|int
name|totalAllocated
decl_stmt|;
comment|// accumulated size of the allocated buffers
DECL|field|bitSet
specifier|private
name|FixedBitSet
name|bitSet
decl_stmt|;
DECL|field|counter
specifier|private
name|long
name|counter
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|adder
specifier|private
name|BulkAdder
name|adder
decl_stmt|;
comment|/**    * Create a builder that can contain doc IDs between {@code 0} and {@code maxDoc}.    */
DECL|method|DocIdSetBuilder
specifier|public
name|DocIdSetBuilder
parameter_list|(
name|int
name|maxDoc
parameter_list|)
block|{
name|this
argument_list|(
name|maxDoc
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/** Create a {@link DocIdSetBuilder} instance that is optimized for    *  accumulating docs that match the given {@link Terms}. */
DECL|method|DocIdSetBuilder
specifier|public
name|DocIdSetBuilder
parameter_list|(
name|int
name|maxDoc
parameter_list|,
name|Terms
name|terms
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|maxDoc
argument_list|,
name|terms
operator|.
name|getDocCount
argument_list|()
argument_list|,
name|terms
operator|.
name|getSumDocFreq
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/** Create a {@link DocIdSetBuilder} instance that is optimized for    *  accumulating docs that match the given {@link PointValues}. */
DECL|method|DocIdSetBuilder
specifier|public
name|DocIdSetBuilder
parameter_list|(
name|int
name|maxDoc
parameter_list|,
name|PointValues
name|values
parameter_list|,
name|String
name|field
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|maxDoc
argument_list|,
name|values
operator|.
name|getDocCount
argument_list|(
name|field
argument_list|)
argument_list|,
name|values
operator|.
name|size
argument_list|(
name|field
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|DocIdSetBuilder
name|DocIdSetBuilder
parameter_list|(
name|int
name|maxDoc
parameter_list|,
name|int
name|docCount
parameter_list|,
name|long
name|valueCount
parameter_list|)
block|{
name|this
operator|.
name|maxDoc
operator|=
name|maxDoc
expr_stmt|;
name|this
operator|.
name|multivalued
operator|=
name|docCount
operator|<
literal|0
operator|||
name|docCount
operator|!=
name|valueCount
expr_stmt|;
if|if
condition|(
name|docCount
operator|<=
literal|0
operator|||
name|valueCount
operator|<
literal|0
condition|)
block|{
comment|// assume one value per doc, this means the cost will be overestimated
comment|// if the docs are actually multi-valued
name|this
operator|.
name|numValuesPerDoc
operator|=
literal|1
expr_stmt|;
block|}
else|else
block|{
comment|// otherwise compute from index stats
name|this
operator|.
name|numValuesPerDoc
operator|=
operator|(
name|double
operator|)
name|valueCount
operator|/
name|docCount
expr_stmt|;
block|}
assert|assert
name|numValuesPerDoc
operator|>=
literal|1
operator|:
literal|"valueCount="
operator|+
name|valueCount
operator|+
literal|" docCount="
operator|+
name|docCount
assert|;
comment|// For ridiculously small sets, we'll just use a sorted int[]
comment|// maxDoc>>> 7 is a good value if you want to save memory, lower values
comment|// such as maxDoc>>> 11 should provide faster building but at the expense
comment|// of using a full bitset even for quite sparse data
name|this
operator|.
name|threshold
operator|=
name|maxDoc
operator|>>>
literal|7
expr_stmt|;
name|this
operator|.
name|bitSet
operator|=
literal|null
expr_stmt|;
block|}
comment|/**    * Add the content of the provided {@link DocIdSetIterator} to this builder.    * NOTE: if you need to build a {@link DocIdSet} out of a single    * {@link DocIdSetIterator}, you should rather use {@link RoaringDocIdSet.Builder}.    */
DECL|method|add
specifier|public
name|void
name|add
parameter_list|(
name|DocIdSetIterator
name|iter
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|bitSet
operator|!=
literal|null
condition|)
block|{
name|bitSet
operator|.
name|or
argument_list|(
name|iter
argument_list|)
expr_stmt|;
return|return;
block|}
name|int
name|cost
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|min
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|iter
operator|.
name|cost
argument_list|()
argument_list|)
decl_stmt|;
name|BulkAdder
name|adder
init|=
name|grow
argument_list|(
name|cost
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cost
condition|;
operator|++
name|i
control|)
block|{
name|int
name|doc
init|=
name|iter
operator|.
name|nextDoc
argument_list|()
decl_stmt|;
if|if
condition|(
name|doc
operator|==
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
condition|)
block|{
return|return;
block|}
name|adder
operator|.
name|add
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|doc
init|=
name|iter
operator|.
name|nextDoc
argument_list|()
init|;
name|doc
operator|!=
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
condition|;
name|doc
operator|=
name|iter
operator|.
name|nextDoc
argument_list|()
control|)
block|{
name|grow
argument_list|(
literal|1
argument_list|)
operator|.
name|add
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Reserve space and return a {@link BulkAdder} object that can be used to    * add up to {@code numDocs} documents.    */
DECL|method|grow
specifier|public
name|BulkAdder
name|grow
parameter_list|(
name|int
name|numDocs
parameter_list|)
block|{
if|if
condition|(
name|bitSet
operator|==
literal|null
condition|)
block|{
if|if
condition|(
operator|(
name|long
operator|)
name|totalAllocated
operator|+
name|numDocs
operator|<=
name|threshold
condition|)
block|{
name|ensureBufferCapacity
argument_list|(
name|numDocs
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|upgradeToBitSet
argument_list|()
expr_stmt|;
name|counter
operator|+=
name|numDocs
expr_stmt|;
block|}
block|}
else|else
block|{
name|counter
operator|+=
name|numDocs
expr_stmt|;
block|}
return|return
name|adder
return|;
block|}
DECL|method|ensureBufferCapacity
specifier|private
name|void
name|ensureBufferCapacity
parameter_list|(
name|int
name|numDocs
parameter_list|)
block|{
if|if
condition|(
name|buffers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|addBuffer
argument_list|(
name|additionalCapacity
argument_list|(
name|numDocs
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|Buffer
name|current
init|=
name|buffers
operator|.
name|get
argument_list|(
name|buffers
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|current
operator|.
name|array
operator|.
name|length
operator|-
name|current
operator|.
name|length
operator|>=
name|numDocs
condition|)
block|{
comment|// current buffer is large enough
return|return;
block|}
if|if
condition|(
name|current
operator|.
name|length
operator|<
name|current
operator|.
name|array
operator|.
name|length
operator|-
operator|(
name|current
operator|.
name|array
operator|.
name|length
operator|>>>
literal|3
operator|)
condition|)
block|{
comment|// current buffer is less than 7/8 full, resize rather than waste space
name|growBuffer
argument_list|(
name|current
argument_list|,
name|additionalCapacity
argument_list|(
name|numDocs
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|addBuffer
argument_list|(
name|additionalCapacity
argument_list|(
name|numDocs
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|additionalCapacity
specifier|private
name|int
name|additionalCapacity
parameter_list|(
name|int
name|numDocs
parameter_list|)
block|{
comment|// exponential growth: the new array has a size equal to the sum of what
comment|// has been allocated so far
name|int
name|c
init|=
name|totalAllocated
decl_stmt|;
comment|// but is also>= numDocs + 1 so that we can store the next batch of docs
comment|// (plus an empty slot so that we are more likely to reuse the array in build())
name|c
operator|=
name|Math
operator|.
name|max
argument_list|(
name|numDocs
operator|+
literal|1
argument_list|,
name|c
argument_list|)
expr_stmt|;
comment|// avoid cold starts
name|c
operator|=
name|Math
operator|.
name|max
argument_list|(
literal|32
argument_list|,
name|c
argument_list|)
expr_stmt|;
comment|// do not go beyond the threshold
name|c
operator|=
name|Math
operator|.
name|min
argument_list|(
name|threshold
operator|-
name|totalAllocated
argument_list|,
name|c
argument_list|)
expr_stmt|;
return|return
name|c
return|;
block|}
DECL|method|addBuffer
specifier|private
name|Buffer
name|addBuffer
parameter_list|(
name|int
name|len
parameter_list|)
block|{
name|Buffer
name|buffer
init|=
operator|new
name|Buffer
argument_list|(
name|len
argument_list|)
decl_stmt|;
name|buffers
operator|.
name|add
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
name|adder
operator|=
operator|new
name|BufferAdder
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
name|totalAllocated
operator|+=
name|buffer
operator|.
name|array
operator|.
name|length
expr_stmt|;
return|return
name|buffer
return|;
block|}
DECL|method|growBuffer
specifier|private
name|void
name|growBuffer
parameter_list|(
name|Buffer
name|buffer
parameter_list|,
name|int
name|additionalCapacity
parameter_list|)
block|{
name|buffer
operator|.
name|array
operator|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|buffer
operator|.
name|array
argument_list|,
name|buffer
operator|.
name|array
operator|.
name|length
operator|+
name|additionalCapacity
argument_list|)
expr_stmt|;
name|totalAllocated
operator|+=
name|additionalCapacity
expr_stmt|;
block|}
DECL|method|upgradeToBitSet
specifier|private
name|void
name|upgradeToBitSet
parameter_list|()
block|{
assert|assert
name|bitSet
operator|==
literal|null
assert|;
name|FixedBitSet
name|bitSet
init|=
operator|new
name|FixedBitSet
argument_list|(
name|maxDoc
argument_list|)
decl_stmt|;
name|long
name|counter
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Buffer
name|buffer
range|:
name|buffers
control|)
block|{
name|int
index|[]
name|array
init|=
name|buffer
operator|.
name|array
decl_stmt|;
name|int
name|length
init|=
name|buffer
operator|.
name|length
decl_stmt|;
name|counter
operator|+=
name|length
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|bitSet
operator|.
name|set
argument_list|(
name|array
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
name|this
operator|.
name|bitSet
operator|=
name|bitSet
expr_stmt|;
name|this
operator|.
name|counter
operator|=
name|counter
expr_stmt|;
name|this
operator|.
name|buffers
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|adder
operator|=
operator|new
name|FixedBitSetAdder
argument_list|(
name|bitSet
argument_list|)
expr_stmt|;
block|}
comment|/**    * Build a {@link DocIdSet} from the accumulated doc IDs.    */
DECL|method|build
specifier|public
name|DocIdSet
name|build
parameter_list|()
block|{
try|try
block|{
if|if
condition|(
name|bitSet
operator|!=
literal|null
condition|)
block|{
assert|assert
name|counter
operator|>=
literal|0
assert|;
specifier|final
name|long
name|cost
init|=
name|Math
operator|.
name|round
argument_list|(
name|counter
operator|/
name|numValuesPerDoc
argument_list|)
decl_stmt|;
return|return
operator|new
name|BitDocIdSet
argument_list|(
name|bitSet
argument_list|,
name|cost
argument_list|)
return|;
block|}
else|else
block|{
name|Buffer
name|concatenated
init|=
name|concat
argument_list|(
name|buffers
argument_list|)
decl_stmt|;
name|LSBRadixSorter
name|sorter
init|=
operator|new
name|LSBRadixSorter
argument_list|()
decl_stmt|;
name|sorter
operator|.
name|sort
argument_list|(
name|PackedInts
operator|.
name|bitsRequired
argument_list|(
name|maxDoc
operator|-
literal|1
argument_list|)
argument_list|,
name|concatenated
operator|.
name|array
argument_list|,
name|concatenated
operator|.
name|length
argument_list|)
expr_stmt|;
specifier|final
name|int
name|l
decl_stmt|;
if|if
condition|(
name|multivalued
condition|)
block|{
name|l
operator|=
name|dedup
argument_list|(
name|concatenated
operator|.
name|array
argument_list|,
name|concatenated
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
else|else
block|{
assert|assert
name|noDups
argument_list|(
name|concatenated
operator|.
name|array
argument_list|,
name|concatenated
operator|.
name|length
argument_list|)
assert|;
name|l
operator|=
name|concatenated
operator|.
name|length
expr_stmt|;
block|}
assert|assert
name|l
operator|<=
name|concatenated
operator|.
name|length
assert|;
name|concatenated
operator|.
name|array
index|[
name|l
index|]
operator|=
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
expr_stmt|;
return|return
operator|new
name|IntArrayDocIdSet
argument_list|(
name|concatenated
operator|.
name|array
argument_list|,
name|l
argument_list|)
return|;
block|}
block|}
finally|finally
block|{
name|this
operator|.
name|buffers
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|bitSet
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**    * Concatenate the buffers in any order, leaving at least one empty slot in    * the end    * NOTE: this method might reuse one of the arrays    */
DECL|method|concat
specifier|private
specifier|static
name|Buffer
name|concat
parameter_list|(
name|List
argument_list|<
name|Buffer
argument_list|>
name|buffers
parameter_list|)
block|{
name|int
name|totalLength
init|=
literal|0
decl_stmt|;
name|Buffer
name|largestBuffer
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Buffer
name|buffer
range|:
name|buffers
control|)
block|{
name|totalLength
operator|+=
name|buffer
operator|.
name|length
expr_stmt|;
if|if
condition|(
name|largestBuffer
operator|==
literal|null
operator|||
name|buffer
operator|.
name|array
operator|.
name|length
operator|>
name|largestBuffer
operator|.
name|array
operator|.
name|length
condition|)
block|{
name|largestBuffer
operator|=
name|buffer
expr_stmt|;
block|}
block|}
if|if
condition|(
name|largestBuffer
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|Buffer
argument_list|(
literal|1
argument_list|)
return|;
block|}
name|int
index|[]
name|docs
init|=
name|largestBuffer
operator|.
name|array
decl_stmt|;
if|if
condition|(
name|docs
operator|.
name|length
operator|<
name|totalLength
operator|+
literal|1
condition|)
block|{
name|docs
operator|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|docs
argument_list|,
name|totalLength
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
name|totalLength
operator|=
name|largestBuffer
operator|.
name|length
expr_stmt|;
for|for
control|(
name|Buffer
name|buffer
range|:
name|buffers
control|)
block|{
if|if
condition|(
name|buffer
operator|!=
name|largestBuffer
condition|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|buffer
operator|.
name|array
argument_list|,
literal|0
argument_list|,
name|docs
argument_list|,
name|totalLength
argument_list|,
name|buffer
operator|.
name|length
argument_list|)
expr_stmt|;
name|totalLength
operator|+=
name|buffer
operator|.
name|length
expr_stmt|;
block|}
block|}
return|return
operator|new
name|Buffer
argument_list|(
name|docs
argument_list|,
name|totalLength
argument_list|)
return|;
block|}
DECL|method|dedup
specifier|private
specifier|static
name|int
name|dedup
parameter_list|(
name|int
index|[]
name|arr
parameter_list|,
name|int
name|length
parameter_list|)
block|{
if|if
condition|(
name|length
operator|==
literal|0
condition|)
block|{
return|return
literal|0
return|;
block|}
name|int
name|l
init|=
literal|1
decl_stmt|;
name|int
name|previous
init|=
name|arr
index|[
literal|0
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
specifier|final
name|int
name|value
init|=
name|arr
index|[
name|i
index|]
decl_stmt|;
assert|assert
name|value
operator|>=
name|previous
assert|;
if|if
condition|(
name|value
operator|!=
name|previous
condition|)
block|{
name|arr
index|[
name|l
operator|++
index|]
operator|=
name|value
expr_stmt|;
name|previous
operator|=
name|value
expr_stmt|;
block|}
block|}
return|return
name|l
return|;
block|}
DECL|method|noDups
specifier|private
specifier|static
name|boolean
name|noDups
parameter_list|(
name|int
index|[]
name|a
parameter_list|,
name|int
name|len
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|len
condition|;
operator|++
name|i
control|)
block|{
assert|assert
name|a
index|[
name|i
operator|-
literal|1
index|]
operator|<
name|a
index|[
name|i
index|]
assert|;
block|}
return|return
literal|true
return|;
block|}
block|}
end_class
end_unit
