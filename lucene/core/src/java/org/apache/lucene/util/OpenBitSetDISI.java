begin_unit
begin_package
DECL|package|org.apache.lucene.util
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|DocIdSetIterator
import|;
end_import
begin_comment
comment|/** OpenBitSet with added methods to bulk-update the bits  *  from a {@link DocIdSetIterator}. */
end_comment
begin_class
DECL|class|OpenBitSetDISI
specifier|public
class|class
name|OpenBitSetDISI
extends|extends
name|OpenBitSet
block|{
comment|/** Construct an OpenBitSetDISI with its bits set    * from the doc ids of the given DocIdSetIterator.    * Also give a maximum size one larger than the largest doc id for which a    * bit may ever be set on this OpenBitSetDISI.    */
DECL|method|OpenBitSetDISI
specifier|public
name|OpenBitSetDISI
parameter_list|(
name|DocIdSetIterator
name|disi
parameter_list|,
name|int
name|maxSize
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|maxSize
argument_list|)
expr_stmt|;
name|inPlaceOr
argument_list|(
name|disi
argument_list|)
expr_stmt|;
block|}
comment|/** Construct an OpenBitSetDISI with no bits set, and a given maximum size    * one larger than the largest doc id for which a bit may ever be set    * on this OpenBitSetDISI.    */
DECL|method|OpenBitSetDISI
specifier|public
name|OpenBitSetDISI
parameter_list|(
name|int
name|maxSize
parameter_list|)
block|{
name|super
argument_list|(
name|maxSize
argument_list|)
expr_stmt|;
block|}
comment|/**    * Perform an inplace OR with the doc ids from a given DocIdSetIterator,    * setting the bit for each such doc id.    * These doc ids should be smaller than the maximum size passed to the    * constructor.    */
DECL|method|inPlaceOr
specifier|public
name|void
name|inPlaceOr
parameter_list|(
name|DocIdSetIterator
name|disi
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|doc
decl_stmt|;
name|long
name|size
init|=
name|size
argument_list|()
decl_stmt|;
while|while
condition|(
operator|(
name|doc
operator|=
name|disi
operator|.
name|nextDoc
argument_list|()
operator|)
operator|<
name|size
condition|)
block|{
name|fastSet
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Perform an inplace AND with the doc ids from a given DocIdSetIterator,    * leaving only the bits set for which the doc ids are in common.    * These doc ids should be smaller than the maximum size passed to the    * constructor.    */
DECL|method|inPlaceAnd
specifier|public
name|void
name|inPlaceAnd
parameter_list|(
name|DocIdSetIterator
name|disi
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|bitSetDoc
init|=
name|nextSetBit
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|int
name|disiDoc
decl_stmt|;
while|while
condition|(
name|bitSetDoc
operator|!=
operator|-
literal|1
operator|&&
operator|(
name|disiDoc
operator|=
name|disi
operator|.
name|advance
argument_list|(
name|bitSetDoc
argument_list|)
operator|)
operator|!=
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
condition|)
block|{
name|clear
argument_list|(
name|bitSetDoc
argument_list|,
name|disiDoc
argument_list|)
expr_stmt|;
name|bitSetDoc
operator|=
name|nextSetBit
argument_list|(
name|disiDoc
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|bitSetDoc
operator|!=
operator|-
literal|1
condition|)
block|{
name|clear
argument_list|(
name|bitSetDoc
argument_list|,
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Perform an inplace NOT with the doc ids from a given DocIdSetIterator,    * clearing all the bits for each such doc id.    * These doc ids should be smaller than the maximum size passed to the    * constructor.    */
DECL|method|inPlaceNot
specifier|public
name|void
name|inPlaceNot
parameter_list|(
name|DocIdSetIterator
name|disi
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|doc
decl_stmt|;
name|long
name|size
init|=
name|size
argument_list|()
decl_stmt|;
while|while
condition|(
operator|(
name|doc
operator|=
name|disi
operator|.
name|nextDoc
argument_list|()
operator|)
operator|<
name|size
condition|)
block|{
name|fastClear
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Perform an inplace XOR with the doc ids from a given DocIdSetIterator,    * flipping all the bits for each such doc id.    * These doc ids should be smaller than the maximum size passed to the    * constructor.    */
DECL|method|inPlaceXor
specifier|public
name|void
name|inPlaceXor
parameter_list|(
name|DocIdSetIterator
name|disi
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|doc
decl_stmt|;
name|long
name|size
init|=
name|size
argument_list|()
decl_stmt|;
while|while
condition|(
operator|(
name|doc
operator|=
name|disi
operator|.
name|nextDoc
argument_list|()
operator|)
operator|<
name|size
condition|)
block|{
name|fastFlip
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class
end_unit
