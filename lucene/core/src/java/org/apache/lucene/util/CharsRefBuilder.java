begin_unit
begin_package
DECL|package|org.apache.lucene.util
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_comment
comment|/**  * A builder for {@link CharsRef} instances.  * @lucene.internal  */
end_comment
begin_class
DECL|class|CharsRefBuilder
specifier|public
class|class
name|CharsRefBuilder
implements|implements
name|Appendable
block|{
DECL|field|NULL_STRING
specifier|private
specifier|static
specifier|final
name|String
name|NULL_STRING
init|=
literal|"null"
decl_stmt|;
DECL|field|ref
specifier|private
specifier|final
name|CharsRef
name|ref
decl_stmt|;
comment|/** Sole constructor. */
DECL|method|CharsRefBuilder
specifier|public
name|CharsRefBuilder
parameter_list|()
block|{
name|ref
operator|=
operator|new
name|CharsRef
argument_list|()
expr_stmt|;
block|}
comment|/** Return a reference to the chars of this builder. */
DECL|method|chars
specifier|public
name|char
index|[]
name|chars
parameter_list|()
block|{
return|return
name|ref
operator|.
name|chars
return|;
block|}
comment|/** Return the number of chars in this buffer. */
DECL|method|length
specifier|public
name|int
name|length
parameter_list|()
block|{
return|return
name|ref
operator|.
name|length
return|;
block|}
comment|/** Set the length. */
DECL|method|setLength
specifier|public
name|void
name|setLength
parameter_list|(
name|int
name|length
parameter_list|)
block|{
name|this
operator|.
name|ref
operator|.
name|length
operator|=
name|length
expr_stmt|;
block|}
comment|/** Return the char at the given offset. */
DECL|method|charAt
specifier|public
name|char
name|charAt
parameter_list|(
name|int
name|offset
parameter_list|)
block|{
return|return
name|ref
operator|.
name|chars
index|[
name|offset
index|]
return|;
block|}
comment|/** Set a char. */
DECL|method|setCharAt
specifier|public
name|void
name|setCharAt
parameter_list|(
name|int
name|offset
parameter_list|,
name|char
name|b
parameter_list|)
block|{
name|ref
operator|.
name|chars
index|[
name|offset
index|]
operator|=
name|b
expr_stmt|;
block|}
comment|/**    * Reset this builder to the empty state.    */
DECL|method|clear
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|ref
operator|.
name|length
operator|=
literal|0
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|append
specifier|public
name|Appendable
name|append
parameter_list|(
name|CharSequence
name|csq
parameter_list|)
block|{
if|if
condition|(
name|csq
operator|==
literal|null
condition|)
block|{
return|return
name|append
argument_list|(
name|NULL_STRING
argument_list|)
return|;
block|}
return|return
name|append
argument_list|(
name|csq
argument_list|,
literal|0
argument_list|,
name|csq
operator|.
name|length
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|append
specifier|public
name|Appendable
name|append
parameter_list|(
name|CharSequence
name|csq
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
block|{
if|if
condition|(
name|csq
operator|==
literal|null
condition|)
block|{
return|return
name|append
argument_list|(
name|NULL_STRING
argument_list|)
return|;
block|}
name|grow
argument_list|(
name|ref
operator|.
name|length
operator|+
name|end
operator|-
name|start
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|start
init|;
name|i
operator|<
name|end
condition|;
operator|++
name|i
control|)
block|{
name|setCharAt
argument_list|(
name|ref
operator|.
name|length
operator|++
argument_list|,
name|csq
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|append
specifier|public
name|Appendable
name|append
parameter_list|(
name|char
name|c
parameter_list|)
block|{
name|grow
argument_list|(
name|ref
operator|.
name|length
operator|+
literal|1
argument_list|)
expr_stmt|;
name|setCharAt
argument_list|(
name|ref
operator|.
name|length
operator|++
argument_list|,
name|c
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**    * Copies the given {@link CharsRef} referenced content into this instance.    */
DECL|method|copyChars
specifier|public
name|void
name|copyChars
parameter_list|(
name|CharsRef
name|other
parameter_list|)
block|{
name|copyChars
argument_list|(
name|other
operator|.
name|chars
argument_list|,
name|other
operator|.
name|offset
argument_list|,
name|other
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
comment|/**    * Used to grow the reference array.    */
DECL|method|grow
specifier|public
name|void
name|grow
parameter_list|(
name|int
name|newLength
parameter_list|)
block|{
name|ref
operator|.
name|chars
operator|=
name|ArrayUtil
operator|.
name|grow
argument_list|(
name|ref
operator|.
name|chars
argument_list|,
name|newLength
argument_list|)
expr_stmt|;
block|}
comment|/**    * Copy the provided bytes, interpreted as UTF-8 bytes.    */
DECL|method|copyUTF8Bytes
specifier|public
name|void
name|copyUTF8Bytes
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|grow
argument_list|(
name|length
argument_list|)
expr_stmt|;
name|ref
operator|.
name|length
operator|=
name|UnicodeUtil
operator|.
name|UTF8toUTF16
argument_list|(
name|bytes
argument_list|,
name|offset
argument_list|,
name|length
argument_list|,
name|ref
operator|.
name|chars
argument_list|)
expr_stmt|;
block|}
comment|/**    * Copy the provided bytes, interpreted as UTF-8 bytes.    */
DECL|method|copyUTF8Bytes
specifier|public
name|void
name|copyUTF8Bytes
parameter_list|(
name|BytesRef
name|bytes
parameter_list|)
block|{
name|copyUTF8Bytes
argument_list|(
name|bytes
operator|.
name|bytes
argument_list|,
name|bytes
operator|.
name|offset
argument_list|,
name|bytes
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
comment|/**    * Copies the given array into this instance.    */
DECL|method|copyChars
specifier|public
name|void
name|copyChars
parameter_list|(
name|char
index|[]
name|otherChars
parameter_list|,
name|int
name|otherOffset
parameter_list|,
name|int
name|otherLength
parameter_list|)
block|{
name|grow
argument_list|(
name|otherLength
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|otherChars
argument_list|,
name|otherOffset
argument_list|,
name|ref
operator|.
name|chars
argument_list|,
literal|0
argument_list|,
name|otherLength
argument_list|)
expr_stmt|;
name|ref
operator|.
name|length
operator|=
name|otherLength
expr_stmt|;
block|}
comment|/**    * Appends the given array to this CharsRef    */
DECL|method|append
specifier|public
name|void
name|append
parameter_list|(
name|char
index|[]
name|otherChars
parameter_list|,
name|int
name|otherOffset
parameter_list|,
name|int
name|otherLength
parameter_list|)
block|{
name|int
name|newLen
init|=
name|ref
operator|.
name|length
operator|+
name|otherLength
decl_stmt|;
name|grow
argument_list|(
name|newLen
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|otherChars
argument_list|,
name|otherOffset
argument_list|,
name|ref
operator|.
name|chars
argument_list|,
name|ref
operator|.
name|length
argument_list|,
name|otherLength
argument_list|)
expr_stmt|;
name|ref
operator|.
name|length
operator|=
name|newLen
expr_stmt|;
block|}
comment|/**    * Return a {@link CharsRef} that points to the internal content of this    * builder. Any update to the content of this builder might invalidate    * the provided<code>ref</code> and vice-versa.    */
DECL|method|get
specifier|public
name|CharsRef
name|get
parameter_list|()
block|{
assert|assert
name|ref
operator|.
name|offset
operator|==
literal|0
operator|:
literal|"Modifying the offset of the returned ref is illegal"
assert|;
return|return
name|ref
return|;
block|}
comment|/** Build a new {@link CharsRef} that has the same content as this builder. */
DECL|method|toCharsRef
specifier|public
name|CharsRef
name|toCharsRef
parameter_list|()
block|{
return|return
operator|new
name|CharsRef
argument_list|(
name|Arrays
operator|.
name|copyOf
argument_list|(
name|ref
operator|.
name|chars
argument_list|,
name|ref
operator|.
name|length
argument_list|)
argument_list|,
literal|0
argument_list|,
name|ref
operator|.
name|length
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|get
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
end_class
end_unit
