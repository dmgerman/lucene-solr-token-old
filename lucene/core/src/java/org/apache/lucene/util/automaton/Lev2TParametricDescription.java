begin_unit
begin_package
DECL|package|org.apache.lucene.util.automaton
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|automaton
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_comment
comment|// The following code was generated with the moman/finenight pkg
end_comment
begin_comment
comment|// This package is available under the MIT License, see NOTICE.txt
end_comment
begin_comment
comment|// for more details.
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|automaton
operator|.
name|LevenshteinAutomata
operator|.
name|ParametricDescription
import|;
end_import
begin_comment
comment|/** Parametric description for generating a Levenshtein automaton of degree 2,      with transpositions as primitive edits */
end_comment
begin_class
DECL|class|Lev2TParametricDescription
class|class
name|Lev2TParametricDescription
extends|extends
name|ParametricDescription
block|{
annotation|@
name|Override
DECL|method|transition
name|int
name|transition
parameter_list|(
name|int
name|absState
parameter_list|,
name|int
name|position
parameter_list|,
name|int
name|vector
parameter_list|)
block|{
comment|// null absState should never be passed in
assert|assert
name|absState
operator|!=
operator|-
literal|1
assert|;
comment|// decode absState -> state, offset
name|int
name|state
init|=
name|absState
operator|/
operator|(
name|w
operator|+
literal|1
operator|)
decl_stmt|;
name|int
name|offset
init|=
name|absState
operator|%
operator|(
name|w
operator|+
literal|1
operator|)
decl_stmt|;
assert|assert
name|offset
operator|>=
literal|0
assert|;
if|if
condition|(
name|position
operator|==
name|w
condition|)
block|{
if|if
condition|(
name|state
operator|<
literal|3
condition|)
block|{
specifier|final
name|int
name|loc
init|=
name|vector
operator|*
literal|3
operator|+
name|state
decl_stmt|;
name|offset
operator|+=
name|unpack
argument_list|(
name|offsetIncrs0
argument_list|,
name|loc
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|state
operator|=
name|unpack
argument_list|(
name|toStates0
argument_list|,
name|loc
argument_list|,
literal|2
argument_list|)
operator|-
literal|1
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|position
operator|==
name|w
operator|-
literal|1
condition|)
block|{
if|if
condition|(
name|state
operator|<
literal|5
condition|)
block|{
specifier|final
name|int
name|loc
init|=
name|vector
operator|*
literal|5
operator|+
name|state
decl_stmt|;
name|offset
operator|+=
name|unpack
argument_list|(
name|offsetIncrs1
argument_list|,
name|loc
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|state
operator|=
name|unpack
argument_list|(
name|toStates1
argument_list|,
name|loc
argument_list|,
literal|3
argument_list|)
operator|-
literal|1
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|position
operator|==
name|w
operator|-
literal|2
condition|)
block|{
if|if
condition|(
name|state
operator|<
literal|13
condition|)
block|{
specifier|final
name|int
name|loc
init|=
name|vector
operator|*
literal|13
operator|+
name|state
decl_stmt|;
name|offset
operator|+=
name|unpack
argument_list|(
name|offsetIncrs2
argument_list|,
name|loc
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|state
operator|=
name|unpack
argument_list|(
name|toStates2
argument_list|,
name|loc
argument_list|,
literal|4
argument_list|)
operator|-
literal|1
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|position
operator|==
name|w
operator|-
literal|3
condition|)
block|{
if|if
condition|(
name|state
operator|<
literal|28
condition|)
block|{
specifier|final
name|int
name|loc
init|=
name|vector
operator|*
literal|28
operator|+
name|state
decl_stmt|;
name|offset
operator|+=
name|unpack
argument_list|(
name|offsetIncrs3
argument_list|,
name|loc
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|state
operator|=
name|unpack
argument_list|(
name|toStates3
argument_list|,
name|loc
argument_list|,
literal|5
argument_list|)
operator|-
literal|1
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|position
operator|==
name|w
operator|-
literal|4
condition|)
block|{
if|if
condition|(
name|state
operator|<
literal|45
condition|)
block|{
specifier|final
name|int
name|loc
init|=
name|vector
operator|*
literal|45
operator|+
name|state
decl_stmt|;
name|offset
operator|+=
name|unpack
argument_list|(
name|offsetIncrs4
argument_list|,
name|loc
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|state
operator|=
name|unpack
argument_list|(
name|toStates4
argument_list|,
name|loc
argument_list|,
literal|6
argument_list|)
operator|-
literal|1
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|state
operator|<
literal|45
condition|)
block|{
specifier|final
name|int
name|loc
init|=
name|vector
operator|*
literal|45
operator|+
name|state
decl_stmt|;
name|offset
operator|+=
name|unpack
argument_list|(
name|offsetIncrs5
argument_list|,
name|loc
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|state
operator|=
name|unpack
argument_list|(
name|toStates5
argument_list|,
name|loc
argument_list|,
literal|6
argument_list|)
operator|-
literal|1
expr_stmt|;
block|}
block|}
if|if
condition|(
name|state
operator|==
operator|-
literal|1
condition|)
block|{
comment|// null state
return|return
operator|-
literal|1
return|;
block|}
else|else
block|{
comment|// translate back to abs
return|return
name|state
operator|*
operator|(
name|w
operator|+
literal|1
operator|)
operator|+
name|offset
return|;
block|}
block|}
comment|// 1 vectors; 3 states per vector; array length = 3
DECL|field|toStates0
specifier|private
specifier|final
specifier|static
name|long
index|[]
name|toStates0
init|=
operator|new
name|long
index|[]
comment|/*2 bits per value */
block|{
literal|0x23L
block|}
decl_stmt|;
DECL|field|offsetIncrs0
specifier|private
specifier|final
specifier|static
name|long
index|[]
name|offsetIncrs0
init|=
operator|new
name|long
index|[]
comment|/*1 bits per value */
block|{
literal|0x0L
block|}
decl_stmt|;
comment|// 2 vectors; 5 states per vector; array length = 10
DECL|field|toStates1
specifier|private
specifier|final
specifier|static
name|long
index|[]
name|toStates1
init|=
operator|new
name|long
index|[]
comment|/*3 bits per value */
block|{
literal|0x13688b44L
block|}
decl_stmt|;
DECL|field|offsetIncrs1
specifier|private
specifier|final
specifier|static
name|long
index|[]
name|offsetIncrs1
init|=
operator|new
name|long
index|[]
comment|/*1 bits per value */
block|{
literal|0x3e0L
block|}
decl_stmt|;
comment|// 4 vectors; 13 states per vector; array length = 52
DECL|field|toStates2
specifier|private
specifier|final
specifier|static
name|long
index|[]
name|toStates2
init|=
operator|new
name|long
index|[]
comment|/*4 bits per value */
block|{
literal|0x60dbb0b05200b504L
block|,
literal|0x5233217627062227L
block|,
literal|0x2355543214323235L
block|,
literal|0x4354L
block|}
decl_stmt|;
DECL|field|offsetIncrs2
specifier|private
specifier|final
specifier|static
name|long
index|[]
name|offsetIncrs2
init|=
operator|new
name|long
index|[]
comment|/*2 bits per value */
block|{
literal|0x555080a800002000L
block|,
literal|0x5555555555L
block|}
decl_stmt|;
comment|// 8 vectors; 28 states per vector; array length = 224
DECL|field|toStates3
specifier|private
specifier|final
specifier|static
name|long
index|[]
name|toStates3
init|=
operator|new
name|long
index|[]
comment|/*5 bits per value */
block|{
literal|0xe701c02940059404L
block|,
literal|0xa010162000a50000L
block|,
literal|0xb02c8c40a1416288L
block|,
literal|0xa821032310858c0L
block|,
literal|0x314423980d28b201L
block|,
literal|0x5281e528847788e0L
block|,
literal|0xa23980d308c2280eL
block|,
literal|0x1e3294b1a962278cL
block|,
literal|0x8c41309e2288e528L
block|,
literal|0x11444409021aca21L
block|,
literal|0x11a4624886b1086bL
block|,
literal|0x2a6258941d6240c4L
block|,
literal|0x5024a50b489074adL
block|,
literal|0x14821aca520c411aL
block|,
literal|0x5888b5890b594a44L
block|,
literal|0x941d6520c411a465L
block|,
literal|0x8b589075ad6a62d4L
block|,
literal|0x1a5055a4L
block|}
decl_stmt|;
DECL|field|offsetIncrs3
specifier|private
specifier|final
specifier|static
name|long
index|[]
name|offsetIncrs3
init|=
operator|new
name|long
index|[]
comment|/*2 bits per value */
block|{
literal|0x30c30200002000L
block|,
literal|0x2a0030f3c3fc333cL
block|,
literal|0x233a00328282a820L
block|,
literal|0x5555555532b283a8L
block|,
literal|0x5555555555555555L
block|,
literal|0x5555555555555555L
block|,
literal|0x5555555555555555L
block|}
decl_stmt|;
comment|// 16 vectors; 45 states per vector; array length = 720
DECL|field|toStates4
specifier|private
specifier|final
specifier|static
name|long
index|[]
name|toStates4
init|=
operator|new
name|long
index|[]
comment|/*6 bits per value */
block|{
literal|0x3801450002c5004L
block|,
literal|0xc500014b00000e38L
block|,
literal|0x51451401402L
block|,
literal|0x0L
block|,
literal|0x518000b14010000L
block|,
literal|0x9f1c20828e20230L
block|,
literal|0x219f0df0830a70c2L
block|,
literal|0x8200008208208200L
block|,
literal|0x805050160800800L
block|,
literal|0x3082098602602643L
block|,
literal|0x4564014250508064L
block|,
literal|0x850051420000831L
block|,
literal|0x4140582085002082L
block|,
literal|0x456180980990c201L
block|,
literal|0x8316d0c50a01051L
block|,
literal|0x21451420050df0e0L
block|,
literal|0xd14214014508214L
block|,
literal|0x3c21c01850821c60L
block|,
literal|0x1cb1403cb142087L
block|,
literal|0x800821451851822cL
block|,
literal|0x20020820800020L
block|,
literal|0xd006182087180345L
block|,
literal|0xcb0a81cb24976b09L
block|,
literal|0x8b1a60e624709d1L
block|,
literal|0x249082082249089L
block|,
literal|0xc31421c600d2c024L
block|,
literal|0x3c31451515454423L
block|,
literal|0x31853c22c21cb140L
block|,
literal|0x4514500b2c208214L
block|,
literal|0x8718034508b0051L
block|,
literal|0xb2cb45515108f0c5L
block|,
literal|0xe824715d1cb0a810L
block|,
literal|0x1422cb14908b0e60L
block|,
literal|0x30812c22c02cb145L
block|,
literal|0x842022020cb1420cL
block|,
literal|0x5c20ce0820ce0850L
block|,
literal|0x208208208b0d70c2L
block|,
literal|0x4208508214214208L
block|,
literal|0x920834050830c20L
block|,
literal|0xc6134dc613653592L
block|,
literal|0xd309341c6dc4db4dL
block|,
literal|0x6424d90854d34d34L
block|,
literal|0x92072c22030814c2L
block|,
literal|0x4220724b24a30930L
block|,
literal|0x2470d72025c920e2L
block|,
literal|0x92c92d70975c9082L
block|,
literal|0xcb0880c204924e08L
block|,
literal|0x45739728c24c2481L
block|,
literal|0xc6da4db5da6174daL
block|,
literal|0x4b5d35d75d30971dL
block|,
literal|0x1030815c93825ce2L
block|,
literal|0x51442051020cb145L
block|,
literal|0xc538210e2c220e2cL
block|,
literal|0x851421452cb0d70L
block|,
literal|0x204b085085145142L
block|,
literal|0x921560834051440cL
block|,
literal|0x4d660e4da60e6595L
block|,
literal|0x94d914e41c6dc658L
block|,
literal|0x826426591454d365L
block|,
literal|0x2892072c51030813L
block|,
literal|0xe2c22072cb2ca30bL
block|,
literal|0x452c70d720538910L
block|,
literal|0x8b2cb2d708e3891L
block|,
literal|0x81cb1440c204b24eL
block|,
literal|0xda44e38e28c2ca24L
block|,
literal|0x1dc6da6585d660e4L
block|,
literal|0xe2cb5d338e5d914eL
block|,
literal|0x38938238L
block|}
decl_stmt|;
DECL|field|offsetIncrs4
specifier|private
specifier|final
specifier|static
name|long
index|[]
name|offsetIncrs4
init|=
operator|new
name|long
index|[]
comment|/*3 bits per value */
block|{
literal|0x3002000000080000L
block|,
literal|0x20c060L
block|,
literal|0x8149000004000000L
block|,
literal|0x4024924110824824L
block|,
literal|0xdb6030c360002082L
block|,
literal|0x6c36c06c301b0d80L
block|,
literal|0xb01861b0000db0dbL
block|,
literal|0x1b7036209188e06dL
block|,
literal|0x800920006d86db7L
block|,
literal|0x4920c2402402490L
block|,
literal|0x49000208249009L
block|,
literal|0x4908128128124804L
block|,
literal|0x34800104124a44a2L
block|,
literal|0xc30930900d24020cL
block|,
literal|0x40009a0924c24d24L
block|,
literal|0x4984a069201061aL
block|,
literal|0x494d049271269262L
block|,
literal|0x2492492492492492L
block|,
literal|0x9249249249249249L
block|,
literal|0x4924924924924924L
block|,
literal|0x2492492492492492L
block|,
literal|0x9249249249249249L
block|,
literal|0x4924924924924924L
block|,
literal|0x2492492492492492L
block|,
literal|0x9249249249249249L
block|,
literal|0x4924924924924924L
block|,
literal|0x2492492492492492L
block|,
literal|0x9249249249249249L
block|,
literal|0x4924924924924924L
block|,
literal|0x2492492492492492L
block|,
literal|0x9249249249249249L
block|,
literal|0x4924924924924924L
block|,
literal|0x2492492492492492L
block|,
literal|0x249249249249L
block|}
decl_stmt|;
comment|// 32 vectors; 45 states per vector; array length = 1440
DECL|field|toStates5
specifier|private
specifier|final
specifier|static
name|long
index|[]
name|toStates5
init|=
operator|new
name|long
index|[]
comment|/*6 bits per value */
block|{
literal|0x3801450002c5004L
block|,
literal|0xc500014b00000e38L
block|,
literal|0x51451401402L
block|,
literal|0x0L
block|,
literal|0x514000b14010000L
block|,
literal|0x550000038e00e0L
block|,
literal|0x264518500600b180L
block|,
literal|0x8208208208208208L
block|,
literal|0x2c50040820820L
block|,
literal|0x70820a38808c0146L
block|,
literal|0xc37c20c29c30827cL
block|,
literal|0x20820820800867L
block|,
literal|0xb140102002002080L
block|,
literal|0x828e202300518000L
block|,
literal|0x830a70c209f1c20L
block|,
literal|0x51451450853df0dfL
block|,
literal|0x1614214214508214L
block|,
literal|0x6026026430805050L
block|,
literal|0x2505080643082098L
block|,
literal|0x4200008314564014L
block|,
literal|0x850020820850051L
block|,
literal|0x80990c2014140582L
block|,
literal|0x8201920208261809L
block|,
literal|0x892051990060941L
block|,
literal|0x22492492c22cb242L
block|,
literal|0x430805050162492cL
block|,
literal|0x8041451586026026L
block|,
literal|0x37c38020c5b43142L
block|,
literal|0x4208508514508014L
block|,
literal|0x141405850850051L
block|,
literal|0x51456180980990c2L
block|,
literal|0xe008316d0c50a010L
block|,
literal|0x2c52cb2c508b21f0L
block|,
literal|0x600d2c92c22cb249L
block|,
literal|0x873c21c01850821cL
block|,
literal|0x2c01cb1403cb1420L
block|,
literal|0x2080082145185182L
block|,
literal|0x4500200208208000L
block|,
literal|0x870061420871803L
block|,
literal|0x740500f5050821cfL
block|,
literal|0x934d964618609000L
block|,
literal|0x4c24d34d30824d30L
block|,
literal|0x1860821c600d642L
block|,
literal|0xc2a072c925dac274L
block|,
literal|0x2c69839891c27472L
block|,
literal|0x9242082089242242L
block|,
literal|0x8208718034b00900L
block|,
literal|0x1cb24976b09d0061L
block|,
literal|0x60e624709d1cb0a8L
block|,
literal|0xd31455d71574ce3eL
block|,
literal|0x1c600d3825c25d74L
block|,
literal|0x51515454423c3142L
block|,
literal|0xc22c21cb1403c314L
block|,
literal|0xb2c20821431853L
block|,
literal|0x34508b005145145L
block|,
literal|0x5515108f0c508718L
block|,
literal|0x8740500f2051454L
block|,
literal|0xe2534d920618f090L
block|,
literal|0x493826596592c238L
block|,
literal|0x4423c31421c600d6L
block|,
literal|0x72c2a042cb2d1545L
block|,
literal|0x422c3983a091c574L
block|,
literal|0xb2c514508b2c52L
block|,
literal|0xf0c508718034b08bL
block|,
literal|0xa810b2cb45515108L
block|,
literal|0x2260e824715d1cb0L
block|,
literal|0xe6592c538e2d74ceL
block|,
literal|0x420c308138938238L
block|,
literal|0x850842022020cb1L
block|,
literal|0x70c25c20ce0820ceL
block|,
literal|0x4208208208208b0dL
block|,
literal|0xc20420850821421L
block|,
literal|0x21080880832c5083L
block|,
literal|0xa50838820838c214L
block|,
literal|0xaaaaaaaaa9c39430L
block|,
literal|0x1aaa7eaa9fa9faaaL
block|,
literal|0x824820d01420c308L
block|,
literal|0x7184d37184d94d64L
block|,
literal|0x34c24d071b7136d3L
block|,
literal|0x990936421534d34dL
block|,
literal|0x834050830c20530L
block|,
literal|0x34dc613653592092L
block|,
literal|0xa479c6dc4db4dc61L
block|,
literal|0x920a9f924924924aL
block|,
literal|0x72c220308192a82aL
block|,
literal|0x724b24a30930920L
block|,
literal|0xd72025c920e2422L
block|,
literal|0x92d70975c9082247L
block|,
literal|0x880c204924e0892cL
block|,
literal|0x2c928c24c2481cb0L
block|,
literal|0x80a5248889088749L
block|,
literal|0x6a861b2aaac74394L
block|,
literal|0x81b2ca6ab27b278L
block|,
literal|0xa3093092072c2203L
block|,
literal|0xd76985d36915ce5cL
block|,
literal|0x5d74c25c771b6936L
block|,
literal|0x724e0973892d74d7L
block|,
literal|0x4c2481cb0880c205L
block|,
literal|0x6174da45739728c2L
block|,
literal|0x4aa175c6da4db5daL
block|,
literal|0x6a869b2786486186L
block|,
literal|0xcb14510308186caL
block|,
literal|0x220e2c5144205102L
block|,
literal|0xcb0d70c538210e2cL
block|,
literal|0x1451420851421452L
block|,
literal|0x51440c204b085085L
block|,
literal|0xcb1451081440832cL
block|,
literal|0x94316208488b0888L
block|,
literal|0xfaaa7dfa9f7e79c3L
block|,
literal|0x30819ea7ea7df7dL
block|,
literal|0x6564855820d01451L
block|,
literal|0x9613598393698399L
block|,
literal|0xd965364539071b71L
block|,
literal|0x4e0990996451534L
block|,
literal|0x21560834051440c2L
block|,
literal|0xd660e4da60e65959L
block|,
literal|0x9207e979c6dc6584L
block|,
literal|0xa82a8207df924820L
block|,
literal|0x892072c5103081a6L
block|,
literal|0x2c22072cb2ca30b2L
block|,
literal|0x52c70d720538910eL
block|,
literal|0x8b2cb2d708e38914L
block|,
literal|0x1cb1440c204b24e0L
block|,
literal|0x874b2cb28c2ca248L
block|,
literal|0x4394816224488b08L
block|,
literal|0x9e786aa69b1f7e77L
block|,
literal|0x51030819eca6a9e7L
block|,
literal|0x8e38a30b2892072cL
block|,
literal|0x6996175983936913L
block|,
literal|0x74ce39764538771bL
block|,
literal|0xc204e24e08e38b2dL
block|,
literal|0x28c2ca2481cb1440L
block|,
literal|0x85d660e4da44e38eL
block|,
literal|0x698607e975c6da65L
block|,
literal|0xa6ca6aa699e7864aL
block|}
decl_stmt|;
DECL|field|offsetIncrs5
specifier|private
specifier|final
specifier|static
name|long
index|[]
name|offsetIncrs5
init|=
operator|new
name|long
index|[]
comment|/*3 bits per value */
block|{
literal|0x3002000000080000L
block|,
literal|0x20c060L
block|,
literal|0x100000004000000L
block|,
literal|0xdb6db6db50603018L
block|,
literal|0xa480000200002db6L
block|,
literal|0x1249208841241240L
block|,
literal|0x4000010000104120L
block|,
literal|0x2492c42092092052L
block|,
literal|0xc30d800096592d9L
block|,
literal|0xb01b0c06c36036d8L
block|,
literal|0x186c00036c36db0dL
block|,
literal|0xad860361b01b6c06L
block|,
literal|0x360001b75b6dd6ddL
block|,
literal|0xc412311c0db6030cL
block|,
literal|0xdb0db6e36e06L
block|,
literal|0x9188e06db01861bL
block|,
literal|0x6dd6db71b72b62L
block|,
literal|0x4024024900800920L
block|,
literal|0x20824900904920c2L
block|,
literal|0x1201248040049000L
block|,
literal|0x5524ad4aa4906120L
block|,
literal|0x4092402002480015L
block|,
literal|0x9252251248409409L
block|,
literal|0x4920100124000820L
block|,
literal|0x29128924204a04a0L
block|,
literal|0x900830d200055549L
block|,
literal|0x934930c24c24034L
block|,
literal|0x418690002682493L
block|,
literal|0x9a49861261201a48L
block|,
literal|0xc348001355249d4L
block|,
literal|0x24c40930940d2402L
block|,
literal|0x1a40009a0924e24dL
block|,
literal|0x6204984a06920106L
block|,
literal|0x92494d5492712692L
block|,
literal|0x4924924924924924L
block|,
literal|0x2492492492492492L
block|,
literal|0x9249249249249249L
block|,
literal|0x4924924924924924L
block|,
literal|0x2492492492492492L
block|,
literal|0x9249249249249249L
block|,
literal|0x4924924924924924L
block|,
literal|0x2492492492492492L
block|,
literal|0x9249249249249249L
block|,
literal|0x4924924924924924L
block|,
literal|0x2492492492492492L
block|,
literal|0x9249249249249249L
block|,
literal|0x4924924924924924L
block|,
literal|0x2492492492492492L
block|,
literal|0x9249249249249249L
block|,
literal|0x4924924924924924L
block|,
literal|0x2492492492492492L
block|,
literal|0x9249249249249249L
block|,
literal|0x4924924924924924L
block|,
literal|0x2492492492492492L
block|,
literal|0x9249249249249249L
block|,
literal|0x4924924924924924L
block|,
literal|0x2492492492492492L
block|,
literal|0x9249249249249249L
block|,
literal|0x4924924924924924L
block|,
literal|0x2492492492492492L
block|,
literal|0x9249249249249249L
block|,
literal|0x4924924924924924L
block|,
literal|0x2492492492492492L
block|,
literal|0x9249249249249249L
block|,
literal|0x4924924924924924L
block|,
literal|0x2492492492492492L
block|,
literal|0x9249249249249249L
block|,
literal|0x24924924L
block|}
decl_stmt|;
comment|// state map
comment|//   0 -> [(0, 0)]
comment|//   1 -> [(0, 2)]
comment|//   2 -> [(0, 1)]
comment|//   3 -> [(0, 1), (1, 1)]
comment|//   4 -> [(0, 2), (1, 2)]
comment|//   5 -> [t(0, 2), (0, 2), (1, 2), (2, 2)]
comment|//   6 -> [(0, 2), (2, 1)]
comment|//   7 -> [(0, 1), (2, 2)]
comment|//   8 -> [(0, 2), (2, 2)]
comment|//   9 -> [(0, 1), (1, 1), (2, 1)]
comment|//   10 -> [(0, 2), (1, 2), (2, 2)]
comment|//   11 -> [(0, 1), (2, 1)]
comment|//   12 -> [t(0, 1), (0, 1), (1, 1), (2, 1)]
comment|//   13 -> [(0, 2), (1, 2), (2, 2), (3, 2)]
comment|//   14 -> [t(0, 2), (0, 2), (1, 2), (2, 2), (3, 2)]
comment|//   15 -> [(0, 2), t(1, 2), (1, 2), (2, 2), (3, 2)]
comment|//   16 -> [(0, 2), (2, 1), (3, 1)]
comment|//   17 -> [(0, 1), t(1, 2), (2, 2), (3, 2)]
comment|//   18 -> [(0, 2), (3, 2)]
comment|//   19 -> [(0, 2), (1, 2), t(1, 2), (2, 2), (3, 2)]
comment|//   20 -> [t(0, 2), (0, 2), (1, 2), (3, 1)]
comment|//   21 -> [(0, 1), (1, 1), (3, 2)]
comment|//   22 -> [(0, 2), (2, 2), (3, 2)]
comment|//   23 -> [(0, 2), (1, 2), (3, 1)]
comment|//   24 -> [(0, 2), (1, 2), (3, 2)]
comment|//   25 -> [(0, 1), (2, 2), (3, 2)]
comment|//   26 -> [(0, 2), (3, 1)]
comment|//   27 -> [(0, 1), (3, 2)]
comment|//   28 -> [(0, 2), (2, 1), (4, 2)]
comment|//   29 -> [(0, 2), t(1, 2), (1, 2), (2, 2), (3, 2), (4, 2)]
comment|//   30 -> [(0, 2), (1, 2), (4, 2)]
comment|//   31 -> [(0, 2), (1, 2), (3, 2), (4, 2)]
comment|//   32 -> [(0, 2), (2, 2), (3, 2), (4, 2)]
comment|//   33 -> [(0, 2), (1, 2), t(2, 2), (2, 2), (3, 2), (4, 2)]
comment|//   34 -> [(0, 2), (1, 2), (2, 2), t(2, 2), (3, 2), (4, 2)]
comment|//   35 -> [(0, 2), (3, 2), (4, 2)]
comment|//   36 -> [(0, 2), t(2, 2), (2, 2), (3, 2), (4, 2)]
comment|//   37 -> [t(0, 2), (0, 2), (1, 2), (2, 2), (4, 2)]
comment|//   38 -> [(0, 2), (1, 2), (2, 2), (4, 2)]
comment|//   39 -> [t(0, 2), (0, 2), (1, 2), (2, 2), (3, 2), (4, 2)]
comment|//   40 -> [(0, 2), (1, 2), (2, 2), (3, 2), (4, 2)]
comment|//   41 -> [(0, 2), (4, 2)]
comment|//   42 -> [t(0, 2), (0, 2), (1, 2), (2, 2), t(2, 2), (3, 2), (4, 2)]
comment|//   43 -> [(0, 2), (2, 2), (4, 2)]
comment|//   44 -> [(0, 2), (1, 2), t(1, 2), (2, 2), (3, 2), (4, 2)]
DECL|method|Lev2TParametricDescription
specifier|public
name|Lev2TParametricDescription
parameter_list|(
name|int
name|w
parameter_list|)
block|{
name|super
argument_list|(
name|w
argument_list|,
literal|2
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|2
block|,
literal|1
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|,
operator|-
literal|1
block|,
literal|0
block|,
literal|0
block|,
operator|-
literal|1
block|,
literal|0
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|2
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|2
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|2
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|2
block|,
operator|-
literal|1
block|,
operator|-
literal|2
block|,
operator|-
literal|2
block|,
operator|-
literal|2
block|,
operator|-
literal|2
block|,
operator|-
literal|2
block|,
operator|-
literal|2
block|,
operator|-
literal|2
block|,
operator|-
literal|2
block|,
operator|-
literal|2
block|,
operator|-
literal|2
block|,
operator|-
literal|2
block|,
operator|-
literal|2
block|,
operator|-
literal|2
block|,
operator|-
literal|2
block|,
operator|-
literal|2
block|,
operator|-
literal|2
block|,
operator|-
literal|2
block|}
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
