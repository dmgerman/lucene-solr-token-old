begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.util
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
package|;
end_package
begin_class
DECL|class|StringMSBRadixSorter
specifier|abstract
class|class
name|StringMSBRadixSorter
extends|extends
name|MSBRadixSorter
block|{
DECL|method|StringMSBRadixSorter
name|StringMSBRadixSorter
parameter_list|()
block|{
name|super
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
block|}
comment|/** Get a {@link BytesRef} for the given index. */
DECL|method|get
specifier|protected
specifier|abstract
name|BytesRef
name|get
parameter_list|(
name|int
name|i
parameter_list|)
function_decl|;
annotation|@
name|Override
DECL|method|byteAt
specifier|protected
name|int
name|byteAt
parameter_list|(
name|int
name|i
parameter_list|,
name|int
name|k
parameter_list|)
block|{
name|BytesRef
name|ref
init|=
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|ref
operator|.
name|length
operator|<=
name|k
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
return|return
name|ref
operator|.
name|bytes
index|[
name|ref
operator|.
name|offset
operator|+
name|k
index|]
operator|&
literal|0xff
return|;
block|}
annotation|@
name|Override
DECL|method|getFallbackSorter
specifier|protected
name|Sorter
name|getFallbackSorter
parameter_list|(
name|int
name|k
parameter_list|)
block|{
return|return
operator|new
name|IntroSorter
argument_list|()
block|{
specifier|private
name|void
name|get
parameter_list|(
name|int
name|i
parameter_list|,
name|int
name|k
parameter_list|,
name|BytesRef
name|scratch
parameter_list|)
block|{
name|BytesRef
name|ref
init|=
name|StringMSBRadixSorter
operator|.
name|this
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
assert|assert
name|ref
operator|.
name|length
operator|>=
name|k
assert|;
name|scratch
operator|.
name|bytes
operator|=
name|ref
operator|.
name|bytes
expr_stmt|;
name|scratch
operator|.
name|offset
operator|=
name|ref
operator|.
name|offset
operator|+
name|k
expr_stmt|;
name|scratch
operator|.
name|length
operator|=
name|ref
operator|.
name|length
operator|-
name|k
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|swap
parameter_list|(
name|int
name|i
parameter_list|,
name|int
name|j
parameter_list|)
block|{
name|StringMSBRadixSorter
operator|.
name|this
operator|.
name|swap
argument_list|(
name|i
argument_list|,
name|j
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|int
name|compare
parameter_list|(
name|int
name|i
parameter_list|,
name|int
name|j
parameter_list|)
block|{
name|get
argument_list|(
name|i
argument_list|,
name|k
argument_list|,
name|scratch1
argument_list|)
expr_stmt|;
name|get
argument_list|(
name|j
argument_list|,
name|k
argument_list|,
name|scratch2
argument_list|)
expr_stmt|;
return|return
name|scratch1
operator|.
name|compareTo
argument_list|(
name|scratch2
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|setPivot
parameter_list|(
name|int
name|i
parameter_list|)
block|{
name|get
argument_list|(
name|i
argument_list|,
name|k
argument_list|,
name|pivot
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|int
name|comparePivot
parameter_list|(
name|int
name|j
parameter_list|)
block|{
name|get
argument_list|(
name|j
argument_list|,
name|k
argument_list|,
name|scratch2
argument_list|)
expr_stmt|;
return|return
name|pivot
operator|.
name|compareTo
argument_list|(
name|scratch2
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|BytesRef
name|pivot
init|=
operator|new
name|BytesRef
argument_list|()
decl_stmt|,
name|scratch1
init|=
operator|new
name|BytesRef
argument_list|()
decl_stmt|,
name|scratch2
init|=
operator|new
name|BytesRef
argument_list|()
decl_stmt|;
block|}
return|;
block|}
block|}
end_class
end_unit
