begin_unit
begin_package
DECL|package|org.apache.lucene.util
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayDeque
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Deque
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import
begin_comment
comment|/**  * A ring buffer that tracks the frequency of the items that it contains.  * This is typically useful to track popular recently-used items.  *  * This class is thread-safe.  *  * @lucene.internal  */
end_comment
begin_class
DECL|class|FrequencyTrackingRingBuffer
specifier|public
specifier|final
class|class
name|FrequencyTrackingRingBuffer
parameter_list|<
name|T
parameter_list|>
block|{
DECL|field|maxSize
specifier|private
specifier|final
name|int
name|maxSize
decl_stmt|;
DECL|field|ringBuffer
specifier|private
specifier|final
name|Deque
argument_list|<
name|T
argument_list|>
name|ringBuffer
decl_stmt|;
DECL|field|frequencies
specifier|private
specifier|final
name|ConcurrentMap
argument_list|<
name|T
argument_list|,
name|Integer
argument_list|>
name|frequencies
decl_stmt|;
comment|/** Create a new ring buffer that will contain at most<code>size</code> items. */
DECL|method|FrequencyTrackingRingBuffer
specifier|public
name|FrequencyTrackingRingBuffer
parameter_list|(
name|int
name|maxSize
parameter_list|)
block|{
name|this
operator|.
name|maxSize
operator|=
name|maxSize
expr_stmt|;
name|this
operator|.
name|ringBuffer
operator|=
operator|new
name|ArrayDeque
argument_list|<>
argument_list|(
name|maxSize
argument_list|)
expr_stmt|;
name|this
operator|.
name|frequencies
operator|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
comment|/**    * Add a new item to this ring buffer, potentially removing the oldest    * entry from this buffer if it is already full.    */
DECL|method|add
specifier|public
specifier|synchronized
name|void
name|add
parameter_list|(
name|T
name|item
parameter_list|)
block|{
comment|// we need this method to be protected by a lock since it is important for
comment|// correctness that the ring buffer and the frequencies table have
comment|// consistent content
if|if
condition|(
name|item
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"null items are not supported"
argument_list|)
throw|;
block|}
assert|assert
name|ringBuffer
operator|.
name|size
argument_list|()
operator|<=
name|maxSize
assert|;
if|if
condition|(
name|ringBuffer
operator|.
name|size
argument_list|()
operator|==
name|maxSize
condition|)
block|{
comment|// evict the oldest entry
specifier|final
name|T
name|removed
init|=
name|ringBuffer
operator|.
name|removeFirst
argument_list|()
decl_stmt|;
specifier|final
name|int
name|newFrequency
init|=
name|frequency
argument_list|(
name|removed
argument_list|)
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|newFrequency
operator|==
literal|0
condition|)
block|{
comment|// free for GC
name|frequencies
operator|.
name|remove
argument_list|(
name|removed
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|frequencies
operator|.
name|put
argument_list|(
name|removed
argument_list|,
name|newFrequency
argument_list|)
expr_stmt|;
block|}
block|}
comment|// add the new entry and update frequencies
name|ringBuffer
operator|.
name|addLast
argument_list|(
name|item
argument_list|)
expr_stmt|;
name|frequencies
operator|.
name|put
argument_list|(
name|item
argument_list|,
name|frequency
argument_list|(
name|item
argument_list|)
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/**    * Returns the frequency of the provided item in the ring buffer.    */
DECL|method|frequency
specifier|public
name|int
name|frequency
parameter_list|(
name|T
name|item
parameter_list|)
block|{
comment|// The use of a concurrent hash map allows us to not use a lock for this read-only method
specifier|final
name|Integer
name|freq
init|=
name|frequencies
operator|.
name|get
argument_list|(
name|item
argument_list|)
decl_stmt|;
return|return
name|freq
operator|==
literal|null
condition|?
literal|0
else|:
name|freq
return|;
block|}
comment|// pkg-private for testing
DECL|method|asFrequencyMap
name|Map
argument_list|<
name|T
argument_list|,
name|Integer
argument_list|>
name|asFrequencyMap
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|frequencies
argument_list|)
return|;
block|}
block|}
end_class
end_unit
