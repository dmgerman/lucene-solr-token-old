begin_unit
begin_package
DECL|package|org.apache.lucene.util.fst
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|fst
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IntsRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|fst
operator|.
name|FST
operator|.
name|Arc
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|fst
operator|.
name|FST
operator|.
name|BytesReader
import|;
end_import
begin_comment
comment|/** Static helper methods.  *  * @lucene.experimental */
end_comment
begin_class
DECL|class|Util
specifier|public
specifier|final
class|class
name|Util
block|{
DECL|method|Util
specifier|private
name|Util
parameter_list|()
block|{   }
comment|/** Looks up the output for this input, or null if the    *  input is not accepted. */
DECL|method|get
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|get
parameter_list|(
name|FST
argument_list|<
name|T
argument_list|>
name|fst
parameter_list|,
name|IntsRef
name|input
parameter_list|)
throws|throws
name|IOException
block|{
comment|// TODO: would be nice not to alloc this on every lookup
specifier|final
name|FST
operator|.
name|Arc
argument_list|<
name|T
argument_list|>
name|arc
init|=
name|fst
operator|.
name|getFirstArc
argument_list|(
operator|new
name|FST
operator|.
name|Arc
argument_list|<
name|T
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|BytesReader
name|fstReader
init|=
name|fst
operator|.
name|getBytesReader
argument_list|()
decl_stmt|;
comment|// Accumulate output as we go
name|T
name|output
init|=
name|fst
operator|.
name|outputs
operator|.
name|getNoOutput
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|input
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|fst
operator|.
name|findTargetArc
argument_list|(
name|input
operator|.
name|ints
index|[
name|input
operator|.
name|offset
operator|+
name|i
index|]
argument_list|,
name|arc
argument_list|,
name|arc
argument_list|,
name|fstReader
argument_list|)
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|output
operator|=
name|fst
operator|.
name|outputs
operator|.
name|add
argument_list|(
name|output
argument_list|,
name|arc
operator|.
name|output
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|arc
operator|.
name|isFinal
argument_list|()
condition|)
block|{
return|return
name|fst
operator|.
name|outputs
operator|.
name|add
argument_list|(
name|output
argument_list|,
name|arc
operator|.
name|nextFinalOutput
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
comment|// TODO: maybe a CharsRef version for BYTE2
comment|/** Looks up the output for this input, or null if the    *  input is not accepted */
DECL|method|get
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|get
parameter_list|(
name|FST
argument_list|<
name|T
argument_list|>
name|fst
parameter_list|,
name|BytesRef
name|input
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|fst
operator|.
name|inputType
operator|==
name|FST
operator|.
name|INPUT_TYPE
operator|.
name|BYTE1
assert|;
specifier|final
name|BytesReader
name|fstReader
init|=
name|fst
operator|.
name|getBytesReader
argument_list|()
decl_stmt|;
comment|// TODO: would be nice not to alloc this on every lookup
specifier|final
name|FST
operator|.
name|Arc
argument_list|<
name|T
argument_list|>
name|arc
init|=
name|fst
operator|.
name|getFirstArc
argument_list|(
operator|new
name|FST
operator|.
name|Arc
argument_list|<
name|T
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
comment|// Accumulate output as we go
name|T
name|output
init|=
name|fst
operator|.
name|outputs
operator|.
name|getNoOutput
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|input
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|fst
operator|.
name|findTargetArc
argument_list|(
name|input
operator|.
name|bytes
index|[
name|i
operator|+
name|input
operator|.
name|offset
index|]
operator|&
literal|0xFF
argument_list|,
name|arc
argument_list|,
name|arc
argument_list|,
name|fstReader
argument_list|)
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|output
operator|=
name|fst
operator|.
name|outputs
operator|.
name|add
argument_list|(
name|output
argument_list|,
name|arc
operator|.
name|output
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|arc
operator|.
name|isFinal
argument_list|()
condition|)
block|{
return|return
name|fst
operator|.
name|outputs
operator|.
name|add
argument_list|(
name|output
argument_list|,
name|arc
operator|.
name|nextFinalOutput
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
comment|/** Reverse lookup (lookup by output instead of by input),    *  in the special case when your FSTs outputs are    *  strictly ascending.  This locates the input/output    *  pair where the output is equal to the target, and will    *  return null if that output does not exist.    *    *<p>NOTE: this only works with {@code FST<Long>}, only    *  works when the outputs are ascending in order with    *  the inputs.    *  For example, simple ordinals (0, 1,    *  2, ...), or file offets (when appending to a file)    *  fit this. */
DECL|method|getByOutput
specifier|public
specifier|static
name|IntsRef
name|getByOutput
parameter_list|(
name|FST
argument_list|<
name|Long
argument_list|>
name|fst
parameter_list|,
name|long
name|targetOutput
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|BytesReader
name|in
init|=
name|fst
operator|.
name|getBytesReader
argument_list|()
decl_stmt|;
comment|// TODO: would be nice not to alloc this on every lookup
name|FST
operator|.
name|Arc
argument_list|<
name|Long
argument_list|>
name|arc
init|=
name|fst
operator|.
name|getFirstArc
argument_list|(
operator|new
name|FST
operator|.
name|Arc
argument_list|<
name|Long
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
name|FST
operator|.
name|Arc
argument_list|<
name|Long
argument_list|>
name|scratchArc
init|=
operator|new
name|FST
operator|.
name|Arc
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|IntsRef
name|result
init|=
operator|new
name|IntsRef
argument_list|()
decl_stmt|;
return|return
name|getByOutput
argument_list|(
name|fst
argument_list|,
name|targetOutput
argument_list|,
name|in
argument_list|,
name|arc
argument_list|,
name|scratchArc
argument_list|,
name|result
argument_list|)
return|;
block|}
comment|/**     * Expert: like {@link Util#getByOutput(FST, long)} except reusing     * BytesReader, initial and scratch Arc, and result.    */
DECL|method|getByOutput
specifier|public
specifier|static
name|IntsRef
name|getByOutput
parameter_list|(
name|FST
argument_list|<
name|Long
argument_list|>
name|fst
parameter_list|,
name|long
name|targetOutput
parameter_list|,
name|BytesReader
name|in
parameter_list|,
name|Arc
argument_list|<
name|Long
argument_list|>
name|arc
parameter_list|,
name|Arc
argument_list|<
name|Long
argument_list|>
name|scratchArc
parameter_list|,
name|IntsRef
name|result
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|output
init|=
name|arc
operator|.
name|output
decl_stmt|;
name|int
name|upto
init|=
literal|0
decl_stmt|;
comment|//System.out.println("reverseLookup output=" + targetOutput);
while|while
condition|(
literal|true
condition|)
block|{
comment|//System.out.println("loop: output=" + output + " upto=" + upto + " arc=" + arc);
if|if
condition|(
name|arc
operator|.
name|isFinal
argument_list|()
condition|)
block|{
specifier|final
name|long
name|finalOutput
init|=
name|output
operator|+
name|arc
operator|.
name|nextFinalOutput
decl_stmt|;
comment|//System.out.println("  isFinal finalOutput=" + finalOutput);
if|if
condition|(
name|finalOutput
operator|==
name|targetOutput
condition|)
block|{
name|result
operator|.
name|length
operator|=
name|upto
expr_stmt|;
comment|//System.out.println("    found!");
return|return
name|result
return|;
block|}
elseif|else
if|if
condition|(
name|finalOutput
operator|>
name|targetOutput
condition|)
block|{
comment|//System.out.println("    not found!");
return|return
literal|null
return|;
block|}
block|}
if|if
condition|(
name|FST
operator|.
name|targetHasArcs
argument_list|(
name|arc
argument_list|)
condition|)
block|{
comment|//System.out.println("  targetHasArcs");
if|if
condition|(
name|result
operator|.
name|ints
operator|.
name|length
operator|==
name|upto
condition|)
block|{
name|result
operator|.
name|grow
argument_list|(
literal|1
operator|+
name|upto
argument_list|)
expr_stmt|;
block|}
name|fst
operator|.
name|readFirstRealTargetArc
argument_list|(
name|arc
operator|.
name|target
argument_list|,
name|arc
argument_list|,
name|in
argument_list|)
expr_stmt|;
if|if
condition|(
name|arc
operator|.
name|bytesPerArc
operator|!=
literal|0
condition|)
block|{
name|int
name|low
init|=
literal|0
decl_stmt|;
name|int
name|high
init|=
name|arc
operator|.
name|numArcs
operator|-
literal|1
decl_stmt|;
name|int
name|mid
init|=
literal|0
decl_stmt|;
comment|//System.out.println("bsearch: numArcs=" + arc.numArcs + " target=" + targetOutput + " output=" + output);
name|boolean
name|exact
init|=
literal|false
decl_stmt|;
while|while
condition|(
name|low
operator|<=
name|high
condition|)
block|{
name|mid
operator|=
operator|(
name|low
operator|+
name|high
operator|)
operator|>>>
literal|1
expr_stmt|;
name|in
operator|.
name|setPosition
argument_list|(
name|arc
operator|.
name|posArcsStart
argument_list|)
expr_stmt|;
name|in
operator|.
name|skipBytes
argument_list|(
name|arc
operator|.
name|bytesPerArc
operator|*
name|mid
argument_list|)
expr_stmt|;
specifier|final
name|byte
name|flags
init|=
name|in
operator|.
name|readByte
argument_list|()
decl_stmt|;
name|fst
operator|.
name|readLabel
argument_list|(
name|in
argument_list|)
expr_stmt|;
specifier|final
name|long
name|minArcOutput
decl_stmt|;
if|if
condition|(
operator|(
name|flags
operator|&
name|FST
operator|.
name|BIT_ARC_HAS_OUTPUT
operator|)
operator|!=
literal|0
condition|)
block|{
specifier|final
name|long
name|arcOutput
init|=
name|fst
operator|.
name|outputs
operator|.
name|read
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|minArcOutput
operator|=
name|output
operator|+
name|arcOutput
expr_stmt|;
block|}
else|else
block|{
name|minArcOutput
operator|=
name|output
expr_stmt|;
block|}
comment|//System.out.println("  cycle mid=" + mid + " label=" + (char) label + " output=" + minArcOutput);
if|if
condition|(
name|minArcOutput
operator|==
name|targetOutput
condition|)
block|{
name|exact
operator|=
literal|true
expr_stmt|;
break|break;
block|}
elseif|else
if|if
condition|(
name|minArcOutput
operator|<
name|targetOutput
condition|)
block|{
name|low
operator|=
name|mid
operator|+
literal|1
expr_stmt|;
block|}
else|else
block|{
name|high
operator|=
name|mid
operator|-
literal|1
expr_stmt|;
block|}
block|}
if|if
condition|(
name|high
operator|==
operator|-
literal|1
condition|)
block|{
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|exact
condition|)
block|{
name|arc
operator|.
name|arcIdx
operator|=
name|mid
operator|-
literal|1
expr_stmt|;
block|}
else|else
block|{
name|arc
operator|.
name|arcIdx
operator|=
name|low
operator|-
literal|2
expr_stmt|;
block|}
name|fst
operator|.
name|readNextRealArc
argument_list|(
name|arc
argument_list|,
name|in
argument_list|)
expr_stmt|;
name|result
operator|.
name|ints
index|[
name|upto
operator|++
index|]
operator|=
name|arc
operator|.
name|label
expr_stmt|;
name|output
operator|+=
name|arc
operator|.
name|output
expr_stmt|;
block|}
else|else
block|{
name|FST
operator|.
name|Arc
argument_list|<
name|Long
argument_list|>
name|prevArc
init|=
literal|null
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
comment|//System.out.println("    cycle label=" + arc.label + " output=" + arc.output);
comment|// This is the min output we'd hit if we follow
comment|// this arc:
specifier|final
name|long
name|minArcOutput
init|=
name|output
operator|+
name|arc
operator|.
name|output
decl_stmt|;
if|if
condition|(
name|minArcOutput
operator|==
name|targetOutput
condition|)
block|{
comment|// Recurse on this arc:
comment|//System.out.println("  match!  break");
name|output
operator|=
name|minArcOutput
expr_stmt|;
name|result
operator|.
name|ints
index|[
name|upto
operator|++
index|]
operator|=
name|arc
operator|.
name|label
expr_stmt|;
break|break;
block|}
elseif|else
if|if
condition|(
name|minArcOutput
operator|>
name|targetOutput
condition|)
block|{
if|if
condition|(
name|prevArc
operator|==
literal|null
condition|)
block|{
comment|// Output doesn't exist
return|return
literal|null
return|;
block|}
else|else
block|{
comment|// Recurse on previous arc:
name|arc
operator|.
name|copyFrom
argument_list|(
name|prevArc
argument_list|)
expr_stmt|;
name|result
operator|.
name|ints
index|[
name|upto
operator|++
index|]
operator|=
name|arc
operator|.
name|label
expr_stmt|;
name|output
operator|+=
name|arc
operator|.
name|output
expr_stmt|;
comment|//System.out.println("    recurse prev label=" + (char) arc.label + " output=" + output);
break|break;
block|}
block|}
elseif|else
if|if
condition|(
name|arc
operator|.
name|isLast
argument_list|()
condition|)
block|{
comment|// Recurse on this arc:
name|output
operator|=
name|minArcOutput
expr_stmt|;
comment|//System.out.println("    recurse last label=" + (char) arc.label + " output=" + output);
name|result
operator|.
name|ints
index|[
name|upto
operator|++
index|]
operator|=
name|arc
operator|.
name|label
expr_stmt|;
break|break;
block|}
else|else
block|{
comment|// Read next arc in this node:
name|prevArc
operator|=
name|scratchArc
expr_stmt|;
name|prevArc
operator|.
name|copyFrom
argument_list|(
name|arc
argument_list|)
expr_stmt|;
comment|//System.out.println("      after copy label=" + (char) prevArc.label + " vs " + (char) arc.label);
name|fst
operator|.
name|readNextRealArc
argument_list|(
name|arc
argument_list|,
name|in
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
else|else
block|{
comment|//System.out.println("  no target arcs; not found!");
return|return
literal|null
return|;
block|}
block|}
block|}
DECL|class|FSTPath
specifier|private
specifier|static
class|class
name|FSTPath
parameter_list|<
name|T
parameter_list|>
block|{
DECL|field|arc
specifier|public
name|FST
operator|.
name|Arc
argument_list|<
name|T
argument_list|>
name|arc
decl_stmt|;
DECL|field|cost
specifier|public
name|T
name|cost
decl_stmt|;
DECL|field|input
specifier|public
specifier|final
name|IntsRef
name|input
decl_stmt|;
DECL|method|FSTPath
specifier|public
name|FSTPath
parameter_list|(
name|T
name|cost
parameter_list|,
name|FST
operator|.
name|Arc
argument_list|<
name|T
argument_list|>
name|arc
parameter_list|,
name|IntsRef
name|input
parameter_list|)
block|{
name|this
operator|.
name|arc
operator|=
operator|new
name|FST
operator|.
name|Arc
argument_list|<
name|T
argument_list|>
argument_list|()
operator|.
name|copyFrom
argument_list|(
name|arc
argument_list|)
expr_stmt|;
name|this
operator|.
name|cost
operator|=
name|cost
expr_stmt|;
name|this
operator|.
name|input
operator|=
name|input
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"input="
operator|+
name|input
operator|+
literal|" cost="
operator|+
name|cost
return|;
block|}
block|}
comment|/** Compares first by the provided comparator, and then    *  tie breaks by path.input. */
DECL|class|TieBreakByInputComparator
specifier|private
specifier|static
class|class
name|TieBreakByInputComparator
parameter_list|<
name|T
parameter_list|>
implements|implements
name|Comparator
argument_list|<
name|FSTPath
argument_list|<
name|T
argument_list|>
argument_list|>
block|{
DECL|field|comparator
specifier|private
specifier|final
name|Comparator
argument_list|<
name|T
argument_list|>
name|comparator
decl_stmt|;
DECL|method|TieBreakByInputComparator
specifier|public
name|TieBreakByInputComparator
parameter_list|(
name|Comparator
argument_list|<
name|T
argument_list|>
name|comparator
parameter_list|)
block|{
name|this
operator|.
name|comparator
operator|=
name|comparator
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|compare
specifier|public
name|int
name|compare
parameter_list|(
name|FSTPath
argument_list|<
name|T
argument_list|>
name|a
parameter_list|,
name|FSTPath
argument_list|<
name|T
argument_list|>
name|b
parameter_list|)
block|{
name|int
name|cmp
init|=
name|comparator
operator|.
name|compare
argument_list|(
name|a
operator|.
name|cost
argument_list|,
name|b
operator|.
name|cost
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|==
literal|0
condition|)
block|{
return|return
name|a
operator|.
name|input
operator|.
name|compareTo
argument_list|(
name|b
operator|.
name|input
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|cmp
return|;
block|}
block|}
block|}
comment|/** Utility class to find top N shortest paths from start    *  point(s). */
DECL|class|TopNSearcher
specifier|public
specifier|static
class|class
name|TopNSearcher
parameter_list|<
name|T
parameter_list|>
block|{
DECL|field|fst
specifier|private
specifier|final
name|FST
argument_list|<
name|T
argument_list|>
name|fst
decl_stmt|;
DECL|field|bytesReader
specifier|private
specifier|final
name|BytesReader
name|bytesReader
decl_stmt|;
DECL|field|topN
specifier|private
specifier|final
name|int
name|topN
decl_stmt|;
DECL|field|maxQueueDepth
specifier|private
specifier|final
name|int
name|maxQueueDepth
decl_stmt|;
DECL|field|scratchArc
specifier|private
specifier|final
name|FST
operator|.
name|Arc
argument_list|<
name|T
argument_list|>
name|scratchArc
init|=
operator|new
name|FST
operator|.
name|Arc
argument_list|<
name|T
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|comparator
specifier|final
name|Comparator
argument_list|<
name|T
argument_list|>
name|comparator
decl_stmt|;
DECL|field|queue
name|TreeSet
argument_list|<
name|FSTPath
argument_list|<
name|T
argument_list|>
argument_list|>
name|queue
init|=
literal|null
decl_stmt|;
DECL|method|TopNSearcher
specifier|public
name|TopNSearcher
parameter_list|(
name|FST
argument_list|<
name|T
argument_list|>
name|fst
parameter_list|,
name|int
name|topN
parameter_list|,
name|int
name|maxQueueDepth
parameter_list|,
name|Comparator
argument_list|<
name|T
argument_list|>
name|comparator
parameter_list|)
block|{
name|this
operator|.
name|fst
operator|=
name|fst
expr_stmt|;
name|this
operator|.
name|bytesReader
operator|=
name|fst
operator|.
name|getBytesReader
argument_list|()
expr_stmt|;
name|this
operator|.
name|topN
operator|=
name|topN
expr_stmt|;
name|this
operator|.
name|maxQueueDepth
operator|=
name|maxQueueDepth
expr_stmt|;
name|this
operator|.
name|comparator
operator|=
name|comparator
expr_stmt|;
name|queue
operator|=
operator|new
name|TreeSet
argument_list|<
name|FSTPath
argument_list|<
name|T
argument_list|>
argument_list|>
argument_list|(
operator|new
name|TieBreakByInputComparator
argument_list|<
name|T
argument_list|>
argument_list|(
name|comparator
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// If back plus this arc is competitive then add to queue:
DECL|method|addIfCompetitive
specifier|private
name|void
name|addIfCompetitive
parameter_list|(
name|FSTPath
argument_list|<
name|T
argument_list|>
name|path
parameter_list|)
block|{
assert|assert
name|queue
operator|!=
literal|null
assert|;
name|T
name|cost
init|=
name|fst
operator|.
name|outputs
operator|.
name|add
argument_list|(
name|path
operator|.
name|cost
argument_list|,
name|path
operator|.
name|arc
operator|.
name|output
argument_list|)
decl_stmt|;
comment|//System.out.println("  addIfCompetitive queue.size()=" + queue.size() + " path=" + path + " + label=" + path.arc.label);
if|if
condition|(
name|queue
operator|.
name|size
argument_list|()
operator|==
name|maxQueueDepth
condition|)
block|{
name|FSTPath
argument_list|<
name|T
argument_list|>
name|bottom
init|=
name|queue
operator|.
name|last
argument_list|()
decl_stmt|;
name|int
name|comp
init|=
name|comparator
operator|.
name|compare
argument_list|(
name|cost
argument_list|,
name|bottom
operator|.
name|cost
argument_list|)
decl_stmt|;
if|if
condition|(
name|comp
operator|>
literal|0
condition|)
block|{
comment|// Doesn't compete
return|return;
block|}
elseif|else
if|if
condition|(
name|comp
operator|==
literal|0
condition|)
block|{
comment|// Tie break by alpha sort on the input:
name|path
operator|.
name|input
operator|.
name|grow
argument_list|(
name|path
operator|.
name|input
operator|.
name|length
operator|+
literal|1
argument_list|)
expr_stmt|;
name|path
operator|.
name|input
operator|.
name|ints
index|[
name|path
operator|.
name|input
operator|.
name|length
operator|++
index|]
operator|=
name|path
operator|.
name|arc
operator|.
name|label
expr_stmt|;
specifier|final
name|int
name|cmp
init|=
name|bottom
operator|.
name|input
operator|.
name|compareTo
argument_list|(
name|path
operator|.
name|input
argument_list|)
decl_stmt|;
name|path
operator|.
name|input
operator|.
name|length
operator|--
expr_stmt|;
comment|// We should never see dups:
assert|assert
name|cmp
operator|!=
literal|0
assert|;
if|if
condition|(
name|cmp
operator|<
literal|0
condition|)
block|{
comment|// Doesn't compete
return|return;
block|}
block|}
comment|// Competes
block|}
else|else
block|{
comment|// Queue isn't full yet, so any path we hit competes:
block|}
comment|// copy over the current input to the new input
comment|// and add the arc.label to the end
name|IntsRef
name|newInput
init|=
operator|new
name|IntsRef
argument_list|(
name|path
operator|.
name|input
operator|.
name|length
operator|+
literal|1
argument_list|)
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|path
operator|.
name|input
operator|.
name|ints
argument_list|,
literal|0
argument_list|,
name|newInput
operator|.
name|ints
argument_list|,
literal|0
argument_list|,
name|path
operator|.
name|input
operator|.
name|length
argument_list|)
expr_stmt|;
name|newInput
operator|.
name|ints
index|[
name|path
operator|.
name|input
operator|.
name|length
index|]
operator|=
name|path
operator|.
name|arc
operator|.
name|label
expr_stmt|;
name|newInput
operator|.
name|length
operator|=
name|path
operator|.
name|input
operator|.
name|length
operator|+
literal|1
expr_stmt|;
specifier|final
name|FSTPath
argument_list|<
name|T
argument_list|>
name|newPath
init|=
operator|new
name|FSTPath
argument_list|<
name|T
argument_list|>
argument_list|(
name|cost
argument_list|,
name|path
operator|.
name|arc
argument_list|,
name|newInput
argument_list|)
decl_stmt|;
name|queue
operator|.
name|add
argument_list|(
name|newPath
argument_list|)
expr_stmt|;
if|if
condition|(
name|queue
operator|.
name|size
argument_list|()
operator|==
name|maxQueueDepth
operator|+
literal|1
condition|)
block|{
name|queue
operator|.
name|pollLast
argument_list|()
expr_stmt|;
block|}
block|}
comment|/** Adds all leaving arcs, including 'finished' arc, if      *  the node is final, from this node into the queue.  */
DECL|method|addStartPaths
specifier|public
name|void
name|addStartPaths
parameter_list|(
name|FST
operator|.
name|Arc
argument_list|<
name|T
argument_list|>
name|node
parameter_list|,
name|T
name|startOutput
parameter_list|,
name|boolean
name|allowEmptyString
parameter_list|,
name|IntsRef
name|input
parameter_list|)
throws|throws
name|IOException
block|{
comment|// De-dup NO_OUTPUT since it must be a singleton:
if|if
condition|(
name|startOutput
operator|.
name|equals
argument_list|(
name|fst
operator|.
name|outputs
operator|.
name|getNoOutput
argument_list|()
argument_list|)
condition|)
block|{
name|startOutput
operator|=
name|fst
operator|.
name|outputs
operator|.
name|getNoOutput
argument_list|()
expr_stmt|;
block|}
name|FSTPath
argument_list|<
name|T
argument_list|>
name|path
init|=
operator|new
name|FSTPath
argument_list|<
name|T
argument_list|>
argument_list|(
name|startOutput
argument_list|,
name|node
argument_list|,
name|input
argument_list|)
decl_stmt|;
name|fst
operator|.
name|readFirstTargetArc
argument_list|(
name|node
argument_list|,
name|path
operator|.
name|arc
argument_list|,
name|bytesReader
argument_list|)
expr_stmt|;
comment|//System.out.println("add start paths");
comment|// Bootstrap: find the min starting arc
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
name|allowEmptyString
operator|||
name|path
operator|.
name|arc
operator|.
name|label
operator|!=
name|FST
operator|.
name|END_LABEL
condition|)
block|{
name|addIfCompetitive
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|path
operator|.
name|arc
operator|.
name|isLast
argument_list|()
condition|)
block|{
break|break;
block|}
name|fst
operator|.
name|readNextArc
argument_list|(
name|path
operator|.
name|arc
argument_list|,
name|bytesReader
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|search
specifier|public
name|MinResult
argument_list|<
name|T
argument_list|>
index|[]
name|search
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|List
argument_list|<
name|MinResult
argument_list|<
name|T
argument_list|>
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<
name|MinResult
argument_list|<
name|T
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
comment|//System.out.println("search topN=" + topN);
specifier|final
name|BytesReader
name|fstReader
init|=
name|fst
operator|.
name|getBytesReader
argument_list|()
decl_stmt|;
specifier|final
name|T
name|NO_OUTPUT
init|=
name|fst
operator|.
name|outputs
operator|.
name|getNoOutput
argument_list|()
decl_stmt|;
comment|// TODO: we could enable FST to sorting arcs by weight
comment|// as it freezes... can easily do this on first pass
comment|// (w/o requiring rewrite)
comment|// TODO: maybe we should make an FST.INPUT_TYPE.BYTE0.5!?
comment|// (nibbles)
name|int
name|rejectCount
init|=
literal|0
decl_stmt|;
comment|// For each top N path:
while|while
condition|(
name|results
operator|.
name|size
argument_list|()
operator|<
name|topN
condition|)
block|{
comment|//System.out.println("\nfind next path: queue.size=" + queue.size());
name|FSTPath
argument_list|<
name|T
argument_list|>
name|path
decl_stmt|;
if|if
condition|(
name|queue
operator|==
literal|null
condition|)
block|{
comment|// Ran out of paths
break|break;
block|}
comment|// Remove top path since we are now going to
comment|// pursue it:
name|path
operator|=
name|queue
operator|.
name|pollFirst
argument_list|()
expr_stmt|;
if|if
condition|(
name|path
operator|==
literal|null
condition|)
block|{
comment|// There were less than topN paths available:
break|break;
block|}
if|if
condition|(
name|path
operator|.
name|arc
operator|.
name|label
operator|==
name|FST
operator|.
name|END_LABEL
condition|)
block|{
comment|//System.out.println("    empty string!  cost=" + path.cost);
comment|// Empty string!
name|path
operator|.
name|input
operator|.
name|length
operator|--
expr_stmt|;
name|results
operator|.
name|add
argument_list|(
operator|new
name|MinResult
argument_list|<
name|T
argument_list|>
argument_list|(
name|path
operator|.
name|input
argument_list|,
name|path
operator|.
name|cost
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|results
operator|.
name|size
argument_list|()
operator|==
name|topN
operator|-
literal|1
operator|&&
name|maxQueueDepth
operator|==
name|topN
condition|)
block|{
comment|// Last path -- don't bother w/ queue anymore:
name|queue
operator|=
literal|null
expr_stmt|;
block|}
comment|//System.out.println("  path: " + path);
comment|// We take path and find its "0 output completion",
comment|// ie, just keep traversing the first arc with
comment|// NO_OUTPUT that we can find, since this must lead
comment|// to the minimum path that completes from
comment|// path.arc.
comment|// For each input letter:
while|while
condition|(
literal|true
condition|)
block|{
comment|//System.out.println("\n    cycle path: " + path);
name|fst
operator|.
name|readFirstTargetArc
argument_list|(
name|path
operator|.
name|arc
argument_list|,
name|path
operator|.
name|arc
argument_list|,
name|fstReader
argument_list|)
expr_stmt|;
comment|// For each arc leaving this node:
name|boolean
name|foundZero
init|=
literal|false
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
comment|//System.out.println("      arc=" + (char) path.arc.label + " cost=" + path.arc.output);
comment|// tricky: instead of comparing output == 0, we must
comment|// express it via the comparator compare(output, 0) == 0
if|if
condition|(
name|comparator
operator|.
name|compare
argument_list|(
name|NO_OUTPUT
argument_list|,
name|path
operator|.
name|arc
operator|.
name|output
argument_list|)
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|queue
operator|==
literal|null
condition|)
block|{
name|foundZero
operator|=
literal|true
expr_stmt|;
break|break;
block|}
elseif|else
if|if
condition|(
operator|!
name|foundZero
condition|)
block|{
name|scratchArc
operator|.
name|copyFrom
argument_list|(
name|path
operator|.
name|arc
argument_list|)
expr_stmt|;
name|foundZero
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|addIfCompetitive
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|queue
operator|!=
literal|null
condition|)
block|{
name|addIfCompetitive
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|path
operator|.
name|arc
operator|.
name|isLast
argument_list|()
condition|)
block|{
break|break;
block|}
name|fst
operator|.
name|readNextArc
argument_list|(
name|path
operator|.
name|arc
argument_list|,
name|fstReader
argument_list|)
expr_stmt|;
block|}
assert|assert
name|foundZero
assert|;
if|if
condition|(
name|queue
operator|!=
literal|null
condition|)
block|{
comment|// TODO: maybe we can save this copyFrom if we
comment|// are more clever above... eg on finding the
comment|// first NO_OUTPUT arc we'd switch to using
comment|// scratchArc
name|path
operator|.
name|arc
operator|.
name|copyFrom
argument_list|(
name|scratchArc
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|path
operator|.
name|arc
operator|.
name|label
operator|==
name|FST
operator|.
name|END_LABEL
condition|)
block|{
comment|// Add final output:
comment|//System.out.println("    done!: " + path);
name|T
name|finalOutput
init|=
name|fst
operator|.
name|outputs
operator|.
name|add
argument_list|(
name|path
operator|.
name|cost
argument_list|,
name|path
operator|.
name|arc
operator|.
name|output
argument_list|)
decl_stmt|;
if|if
condition|(
name|acceptResult
argument_list|(
name|path
operator|.
name|input
argument_list|,
name|finalOutput
argument_list|)
condition|)
block|{
name|results
operator|.
name|add
argument_list|(
operator|new
name|MinResult
argument_list|<
name|T
argument_list|>
argument_list|(
name|path
operator|.
name|input
argument_list|,
name|finalOutput
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|rejectCount
operator|++
expr_stmt|;
assert|assert
name|rejectCount
operator|+
name|topN
operator|<=
name|maxQueueDepth
operator|:
literal|"maxQueueDepth ("
operator|+
name|maxQueueDepth
operator|+
literal|") is too small for topN ("
operator|+
name|topN
operator|+
literal|"): rejected "
operator|+
name|rejectCount
operator|+
literal|" paths"
assert|;
block|}
break|break;
block|}
else|else
block|{
name|path
operator|.
name|input
operator|.
name|grow
argument_list|(
literal|1
operator|+
name|path
operator|.
name|input
operator|.
name|length
argument_list|)
expr_stmt|;
name|path
operator|.
name|input
operator|.
name|ints
index|[
name|path
operator|.
name|input
operator|.
name|length
index|]
operator|=
name|path
operator|.
name|arc
operator|.
name|label
expr_stmt|;
name|path
operator|.
name|input
operator|.
name|length
operator|++
expr_stmt|;
name|path
operator|.
name|cost
operator|=
name|fst
operator|.
name|outputs
operator|.
name|add
argument_list|(
name|path
operator|.
name|cost
argument_list|,
name|path
operator|.
name|arc
operator|.
name|output
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"rawtypes"
block|,
literal|"unchecked"
block|}
argument_list|)
specifier|final
name|MinResult
argument_list|<
name|T
argument_list|>
index|[]
name|arr
init|=
operator|(
name|MinResult
argument_list|<
name|T
argument_list|>
index|[]
operator|)
operator|new
name|MinResult
index|[
name|results
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
return|return
name|results
operator|.
name|toArray
argument_list|(
name|arr
argument_list|)
return|;
block|}
DECL|method|acceptResult
specifier|protected
name|boolean
name|acceptResult
parameter_list|(
name|IntsRef
name|input
parameter_list|,
name|T
name|output
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
block|}
comment|/** Holds a single input (IntsRef) + output, returned by    *  {@link #shortestPaths shortestPaths()}. */
DECL|class|MinResult
specifier|public
specifier|final
specifier|static
class|class
name|MinResult
parameter_list|<
name|T
parameter_list|>
block|{
DECL|field|input
specifier|public
specifier|final
name|IntsRef
name|input
decl_stmt|;
DECL|field|output
specifier|public
specifier|final
name|T
name|output
decl_stmt|;
DECL|method|MinResult
specifier|public
name|MinResult
parameter_list|(
name|IntsRef
name|input
parameter_list|,
name|T
name|output
parameter_list|)
block|{
name|this
operator|.
name|input
operator|=
name|input
expr_stmt|;
name|this
operator|.
name|output
operator|=
name|output
expr_stmt|;
block|}
block|}
comment|/** Starting from node, find the top N min cost     *  completions to a final node. */
DECL|method|shortestPaths
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|MinResult
argument_list|<
name|T
argument_list|>
index|[]
name|shortestPaths
parameter_list|(
name|FST
argument_list|<
name|T
argument_list|>
name|fst
parameter_list|,
name|FST
operator|.
name|Arc
argument_list|<
name|T
argument_list|>
name|fromNode
parameter_list|,
name|T
name|startOutput
parameter_list|,
name|Comparator
argument_list|<
name|T
argument_list|>
name|comparator
parameter_list|,
name|int
name|topN
parameter_list|,
name|boolean
name|allowEmptyString
parameter_list|)
throws|throws
name|IOException
block|{
comment|// All paths are kept, so we can pass topN for
comment|// maxQueueDepth and the pruning is admissible:
name|TopNSearcher
argument_list|<
name|T
argument_list|>
name|searcher
init|=
operator|new
name|TopNSearcher
argument_list|<
name|T
argument_list|>
argument_list|(
name|fst
argument_list|,
name|topN
argument_list|,
name|topN
argument_list|,
name|comparator
argument_list|)
decl_stmt|;
comment|// since this search is initialized with a single start node
comment|// it is okay to start with an empty input path here
name|searcher
operator|.
name|addStartPaths
argument_list|(
name|fromNode
argument_list|,
name|startOutput
argument_list|,
name|allowEmptyString
argument_list|,
operator|new
name|IntsRef
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|searcher
operator|.
name|search
argument_list|()
return|;
block|}
comment|/**    * Dumps an {@link FST} to a GraphViz's<code>dot</code> language description    * for visualization. Example of use:    *     *<pre class="prettyprint">    * PrintWriter pw = new PrintWriter(&quot;out.dot&quot;);    * Util.toDot(fst, pw, true, true);    * pw.close();    *</pre>    *     * and then, from command line:    *     *<pre>    * dot -Tpng -o out.png out.dot    *</pre>    *     *<p>    * Note: larger FSTs (a few thousand nodes) won't even    * render, don't bother.  If the FST is> 2.1 GB in size    * then this method will throw strange exceptions.    *     * @param sameRank    *          If<code>true</code>, the resulting<code>dot</code> file will try    *          to order states in layers of breadth-first traversal. This may    *          mess up arcs, but makes the output FST's structure a bit clearer.    *     * @param labelStates    *          If<code>true</code> states will have labels equal to their offsets in their    *          binary format. Expands the graph considerably.     *     * @see "http://www.graphviz.org/"    */
DECL|method|toDot
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|void
name|toDot
parameter_list|(
name|FST
argument_list|<
name|T
argument_list|>
name|fst
parameter_list|,
name|Writer
name|out
parameter_list|,
name|boolean
name|sameRank
parameter_list|,
name|boolean
name|labelStates
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|String
name|expandedNodeColor
init|=
literal|"blue"
decl_stmt|;
comment|// This is the start arc in the automaton (from the epsilon state to the first state
comment|// with outgoing transitions.
specifier|final
name|FST
operator|.
name|Arc
argument_list|<
name|T
argument_list|>
name|startArc
init|=
name|fst
operator|.
name|getFirstArc
argument_list|(
operator|new
name|FST
operator|.
name|Arc
argument_list|<
name|T
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
comment|// A queue of transitions to consider for the next level.
specifier|final
name|List
argument_list|<
name|FST
operator|.
name|Arc
argument_list|<
name|T
argument_list|>
argument_list|>
name|thisLevelQueue
init|=
operator|new
name|ArrayList
argument_list|<
name|FST
operator|.
name|Arc
argument_list|<
name|T
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
comment|// A queue of transitions to consider when processing the next level.
specifier|final
name|List
argument_list|<
name|FST
operator|.
name|Arc
argument_list|<
name|T
argument_list|>
argument_list|>
name|nextLevelQueue
init|=
operator|new
name|ArrayList
argument_list|<
name|FST
operator|.
name|Arc
argument_list|<
name|T
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|nextLevelQueue
operator|.
name|add
argument_list|(
name|startArc
argument_list|)
expr_stmt|;
comment|//System.out.println("toDot: startArc: " + startArc);
comment|// A list of states on the same level (for ranking).
specifier|final
name|List
argument_list|<
name|Integer
argument_list|>
name|sameLevelStates
init|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
comment|// A bitset of already seen states (target offset).
specifier|final
name|BitSet
name|seen
init|=
operator|new
name|BitSet
argument_list|()
decl_stmt|;
name|seen
operator|.
name|set
argument_list|(
operator|(
name|int
operator|)
name|startArc
operator|.
name|target
argument_list|)
expr_stmt|;
comment|// Shape for states.
specifier|final
name|String
name|stateShape
init|=
literal|"circle"
decl_stmt|;
specifier|final
name|String
name|finalStateShape
init|=
literal|"doublecircle"
decl_stmt|;
comment|// Emit DOT prologue.
name|out
operator|.
name|write
argument_list|(
literal|"digraph FST {\n"
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|"  rankdir = LR; splines=true; concentrate=true; ordering=out; ranksep=2.5; \n"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|labelStates
condition|)
block|{
name|out
operator|.
name|write
argument_list|(
literal|"  node [shape=circle, width=.2, height=.2, style=filled]\n"
argument_list|)
expr_stmt|;
block|}
name|emitDotState
argument_list|(
name|out
argument_list|,
literal|"initial"
argument_list|,
literal|"point"
argument_list|,
literal|"white"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
specifier|final
name|T
name|NO_OUTPUT
init|=
name|fst
operator|.
name|outputs
operator|.
name|getNoOutput
argument_list|()
decl_stmt|;
specifier|final
name|BytesReader
name|r
init|=
name|fst
operator|.
name|getBytesReader
argument_list|()
decl_stmt|;
comment|// final FST.Arc<T> scratchArc = new FST.Arc<T>();
block|{
specifier|final
name|String
name|stateColor
decl_stmt|;
if|if
condition|(
name|fst
operator|.
name|isExpandedTarget
argument_list|(
name|startArc
argument_list|,
name|r
argument_list|)
condition|)
block|{
name|stateColor
operator|=
name|expandedNodeColor
expr_stmt|;
block|}
else|else
block|{
name|stateColor
operator|=
literal|null
expr_stmt|;
block|}
specifier|final
name|boolean
name|isFinal
decl_stmt|;
specifier|final
name|T
name|finalOutput
decl_stmt|;
if|if
condition|(
name|startArc
operator|.
name|isFinal
argument_list|()
condition|)
block|{
name|isFinal
operator|=
literal|true
expr_stmt|;
name|finalOutput
operator|=
name|startArc
operator|.
name|nextFinalOutput
operator|==
name|NO_OUTPUT
condition|?
literal|null
else|:
name|startArc
operator|.
name|nextFinalOutput
expr_stmt|;
block|}
else|else
block|{
name|isFinal
operator|=
literal|false
expr_stmt|;
name|finalOutput
operator|=
literal|null
expr_stmt|;
block|}
name|emitDotState
argument_list|(
name|out
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|startArc
operator|.
name|target
argument_list|)
argument_list|,
name|isFinal
condition|?
name|finalStateShape
else|:
name|stateShape
argument_list|,
name|stateColor
argument_list|,
name|finalOutput
operator|==
literal|null
condition|?
literal|""
else|:
name|fst
operator|.
name|outputs
operator|.
name|outputToString
argument_list|(
name|finalOutput
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|write
argument_list|(
literal|"  initial -> "
operator|+
name|startArc
operator|.
name|target
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
name|int
name|level
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|!
name|nextLevelQueue
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// we could double buffer here, but it doesn't matter probably.
comment|//System.out.println("next level=" + level);
name|thisLevelQueue
operator|.
name|addAll
argument_list|(
name|nextLevelQueue
argument_list|)
expr_stmt|;
name|nextLevelQueue
operator|.
name|clear
argument_list|()
expr_stmt|;
name|level
operator|++
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|"\n  // Transitions and states at level: "
operator|+
name|level
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|thisLevelQueue
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
specifier|final
name|FST
operator|.
name|Arc
argument_list|<
name|T
argument_list|>
name|arc
init|=
name|thisLevelQueue
operator|.
name|remove
argument_list|(
name|thisLevelQueue
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
comment|//System.out.println("  pop: " + arc);
if|if
condition|(
name|FST
operator|.
name|targetHasArcs
argument_list|(
name|arc
argument_list|)
condition|)
block|{
comment|// scan all target arcs
comment|//System.out.println("  readFirstTarget...");
specifier|final
name|long
name|node
init|=
name|arc
operator|.
name|target
decl_stmt|;
name|fst
operator|.
name|readFirstRealTargetArc
argument_list|(
name|arc
operator|.
name|target
argument_list|,
name|arc
argument_list|,
name|r
argument_list|)
expr_stmt|;
comment|//System.out.println("    firstTarget: " + arc);
while|while
condition|(
literal|true
condition|)
block|{
comment|//System.out.println("  cycle arc=" + arc);
comment|// Emit the unseen state and add it to the queue for the next level.
if|if
condition|(
name|arc
operator|.
name|target
operator|>=
literal|0
operator|&&
operator|!
name|seen
operator|.
name|get
argument_list|(
operator|(
name|int
operator|)
name|arc
operator|.
name|target
argument_list|)
condition|)
block|{
comment|/*               boolean isFinal = false;               T finalOutput = null;               fst.readFirstTargetArc(arc, scratchArc);               if (scratchArc.isFinal()&& fst.targetHasArcs(scratchArc)) {                 // target is final                 isFinal = true;                 finalOutput = scratchArc.output == NO_OUTPUT ? null : scratchArc.output;                 System.out.println("dot hit final label=" + (char) scratchArc.label);               }               */
specifier|final
name|String
name|stateColor
decl_stmt|;
if|if
condition|(
name|fst
operator|.
name|isExpandedTarget
argument_list|(
name|arc
argument_list|,
name|r
argument_list|)
condition|)
block|{
name|stateColor
operator|=
name|expandedNodeColor
expr_stmt|;
block|}
else|else
block|{
name|stateColor
operator|=
literal|null
expr_stmt|;
block|}
specifier|final
name|String
name|finalOutput
decl_stmt|;
if|if
condition|(
name|arc
operator|.
name|nextFinalOutput
operator|!=
literal|null
operator|&&
name|arc
operator|.
name|nextFinalOutput
operator|!=
name|NO_OUTPUT
condition|)
block|{
name|finalOutput
operator|=
name|fst
operator|.
name|outputs
operator|.
name|outputToString
argument_list|(
name|arc
operator|.
name|nextFinalOutput
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|finalOutput
operator|=
literal|""
expr_stmt|;
block|}
name|emitDotState
argument_list|(
name|out
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|arc
operator|.
name|target
argument_list|)
argument_list|,
name|stateShape
argument_list|,
name|stateColor
argument_list|,
name|finalOutput
argument_list|)
expr_stmt|;
comment|// To see the node address, use this instead:
comment|//emitDotState(out, Integer.toString(arc.target), stateShape, stateColor, String.valueOf(arc.target));
name|seen
operator|.
name|set
argument_list|(
operator|(
name|int
operator|)
name|arc
operator|.
name|target
argument_list|)
expr_stmt|;
name|nextLevelQueue
operator|.
name|add
argument_list|(
operator|new
name|FST
operator|.
name|Arc
argument_list|<
name|T
argument_list|>
argument_list|()
operator|.
name|copyFrom
argument_list|(
name|arc
argument_list|)
argument_list|)
expr_stmt|;
name|sameLevelStates
operator|.
name|add
argument_list|(
operator|(
name|int
operator|)
name|arc
operator|.
name|target
argument_list|)
expr_stmt|;
block|}
name|String
name|outs
decl_stmt|;
if|if
condition|(
name|arc
operator|.
name|output
operator|!=
name|NO_OUTPUT
condition|)
block|{
name|outs
operator|=
literal|"/"
operator|+
name|fst
operator|.
name|outputs
operator|.
name|outputToString
argument_list|(
name|arc
operator|.
name|output
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|outs
operator|=
literal|""
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|FST
operator|.
name|targetHasArcs
argument_list|(
name|arc
argument_list|)
operator|&&
name|arc
operator|.
name|isFinal
argument_list|()
operator|&&
name|arc
operator|.
name|nextFinalOutput
operator|!=
name|NO_OUTPUT
condition|)
block|{
comment|// Tricky special case: sometimes, due to
comment|// pruning, the builder can [sillily] produce
comment|// an FST with an arc into the final end state
comment|// (-1) but also with a next final output; in
comment|// this case we pull that output up onto this
comment|// arc
name|outs
operator|=
name|outs
operator|+
literal|"/["
operator|+
name|fst
operator|.
name|outputs
operator|.
name|outputToString
argument_list|(
name|arc
operator|.
name|nextFinalOutput
argument_list|)
operator|+
literal|"]"
expr_stmt|;
block|}
specifier|final
name|String
name|arcColor
decl_stmt|;
if|if
condition|(
name|arc
operator|.
name|flag
argument_list|(
name|FST
operator|.
name|BIT_TARGET_NEXT
argument_list|)
condition|)
block|{
name|arcColor
operator|=
literal|"red"
expr_stmt|;
block|}
else|else
block|{
name|arcColor
operator|=
literal|"black"
expr_stmt|;
block|}
assert|assert
name|arc
operator|.
name|label
operator|!=
name|FST
operator|.
name|END_LABEL
assert|;
name|out
operator|.
name|write
argument_list|(
literal|"  "
operator|+
name|node
operator|+
literal|" -> "
operator|+
name|arc
operator|.
name|target
operator|+
literal|" [label=\""
operator|+
name|printableLabel
argument_list|(
name|arc
operator|.
name|label
argument_list|)
operator|+
name|outs
operator|+
literal|"\""
operator|+
operator|(
name|arc
operator|.
name|isFinal
argument_list|()
condition|?
literal|" style=\"bold\""
else|:
literal|""
operator|)
operator|+
literal|" color=\""
operator|+
name|arcColor
operator|+
literal|"\"]\n"
argument_list|)
expr_stmt|;
comment|// Break the loop if we're on the last arc of this state.
if|if
condition|(
name|arc
operator|.
name|isLast
argument_list|()
condition|)
block|{
comment|//System.out.println("    break");
break|break;
block|}
name|fst
operator|.
name|readNextRealArc
argument_list|(
name|arc
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Emit state ranking information.
if|if
condition|(
name|sameRank
operator|&&
name|sameLevelStates
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|out
operator|.
name|write
argument_list|(
literal|"  {rank=same; "
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|state
range|:
name|sameLevelStates
control|)
block|{
name|out
operator|.
name|write
argument_list|(
name|state
operator|+
literal|"; "
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|write
argument_list|(
literal|" }\n"
argument_list|)
expr_stmt|;
block|}
name|sameLevelStates
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
comment|// Emit terminating state (always there anyway).
name|out
operator|.
name|write
argument_list|(
literal|"  -1 [style=filled, color=black, shape=doublecircle, label=\"\"]\n\n"
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|"  {rank=sink; -1 }\n"
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|"}\n"
argument_list|)
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
comment|/**    * Emit a single state in the<code>dot</code> language.     */
DECL|method|emitDotState
specifier|private
specifier|static
name|void
name|emitDotState
parameter_list|(
name|Writer
name|out
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|shape
parameter_list|,
name|String
name|color
parameter_list|,
name|String
name|label
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|write
argument_list|(
literal|"  "
operator|+
name|name
operator|+
literal|" ["
operator|+
operator|(
name|shape
operator|!=
literal|null
condition|?
literal|"shape="
operator|+
name|shape
else|:
literal|""
operator|)
operator|+
literal|" "
operator|+
operator|(
name|color
operator|!=
literal|null
condition|?
literal|"color="
operator|+
name|color
else|:
literal|""
operator|)
operator|+
literal|" "
operator|+
operator|(
name|label
operator|!=
literal|null
condition|?
literal|"label=\""
operator|+
name|label
operator|+
literal|"\""
else|:
literal|"label=\"\""
operator|)
operator|+
literal|" "
operator|+
literal|"]\n"
argument_list|)
expr_stmt|;
block|}
comment|/**    * Ensures an arc's label is indeed printable (dot uses US-ASCII).     */
DECL|method|printableLabel
specifier|private
specifier|static
name|String
name|printableLabel
parameter_list|(
name|int
name|label
parameter_list|)
block|{
if|if
condition|(
name|label
operator|>=
literal|0x20
operator|&&
name|label
operator|<=
literal|0x7d
condition|)
block|{
return|return
name|Character
operator|.
name|toString
argument_list|(
operator|(
name|char
operator|)
name|label
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|"0x"
operator|+
name|Integer
operator|.
name|toHexString
argument_list|(
name|label
argument_list|)
return|;
block|}
block|}
comment|/** Just maps each UTF16 unit (char) to the ints in an    *  IntsRef. */
DECL|method|toUTF16
specifier|public
specifier|static
name|IntsRef
name|toUTF16
parameter_list|(
name|CharSequence
name|s
parameter_list|,
name|IntsRef
name|scratch
parameter_list|)
block|{
specifier|final
name|int
name|charLimit
init|=
name|s
operator|.
name|length
argument_list|()
decl_stmt|;
name|scratch
operator|.
name|offset
operator|=
literal|0
expr_stmt|;
name|scratch
operator|.
name|length
operator|=
name|charLimit
expr_stmt|;
name|scratch
operator|.
name|grow
argument_list|(
name|charLimit
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|charLimit
condition|;
name|idx
operator|++
control|)
block|{
name|scratch
operator|.
name|ints
index|[
name|idx
index|]
operator|=
operator|(
name|int
operator|)
name|s
operator|.
name|charAt
argument_list|(
name|idx
argument_list|)
expr_stmt|;
block|}
return|return
name|scratch
return|;
block|}
comment|/** Decodes the Unicode codepoints from the provided    *  CharSequence and places them in the provided scratch    *  IntsRef, which must not be null, returning it. */
DECL|method|toUTF32
specifier|public
specifier|static
name|IntsRef
name|toUTF32
parameter_list|(
name|CharSequence
name|s
parameter_list|,
name|IntsRef
name|scratch
parameter_list|)
block|{
name|int
name|charIdx
init|=
literal|0
decl_stmt|;
name|int
name|intIdx
init|=
literal|0
decl_stmt|;
specifier|final
name|int
name|charLimit
init|=
name|s
operator|.
name|length
argument_list|()
decl_stmt|;
while|while
condition|(
name|charIdx
operator|<
name|charLimit
condition|)
block|{
name|scratch
operator|.
name|grow
argument_list|(
name|intIdx
operator|+
literal|1
argument_list|)
expr_stmt|;
specifier|final
name|int
name|utf32
init|=
name|Character
operator|.
name|codePointAt
argument_list|(
name|s
argument_list|,
name|charIdx
argument_list|)
decl_stmt|;
name|scratch
operator|.
name|ints
index|[
name|intIdx
index|]
operator|=
name|utf32
expr_stmt|;
name|charIdx
operator|+=
name|Character
operator|.
name|charCount
argument_list|(
name|utf32
argument_list|)
expr_stmt|;
name|intIdx
operator|++
expr_stmt|;
block|}
name|scratch
operator|.
name|length
operator|=
name|intIdx
expr_stmt|;
return|return
name|scratch
return|;
block|}
comment|/** Decodes the Unicode codepoints from the provided    *  char[] and places them in the provided scratch    *  IntsRef, which must not be null, returning it. */
DECL|method|toUTF32
specifier|public
specifier|static
name|IntsRef
name|toUTF32
parameter_list|(
name|char
index|[]
name|s
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|,
name|IntsRef
name|scratch
parameter_list|)
block|{
name|int
name|charIdx
init|=
name|offset
decl_stmt|;
name|int
name|intIdx
init|=
literal|0
decl_stmt|;
specifier|final
name|int
name|charLimit
init|=
name|offset
operator|+
name|length
decl_stmt|;
while|while
condition|(
name|charIdx
operator|<
name|charLimit
condition|)
block|{
name|scratch
operator|.
name|grow
argument_list|(
name|intIdx
operator|+
literal|1
argument_list|)
expr_stmt|;
specifier|final
name|int
name|utf32
init|=
name|Character
operator|.
name|codePointAt
argument_list|(
name|s
argument_list|,
name|charIdx
argument_list|)
decl_stmt|;
name|scratch
operator|.
name|ints
index|[
name|intIdx
index|]
operator|=
name|utf32
expr_stmt|;
name|charIdx
operator|+=
name|Character
operator|.
name|charCount
argument_list|(
name|utf32
argument_list|)
expr_stmt|;
name|intIdx
operator|++
expr_stmt|;
block|}
name|scratch
operator|.
name|length
operator|=
name|intIdx
expr_stmt|;
return|return
name|scratch
return|;
block|}
comment|/** Just takes unsigned byte values from the BytesRef and    *  converts into an IntsRef. */
DECL|method|toIntsRef
specifier|public
specifier|static
name|IntsRef
name|toIntsRef
parameter_list|(
name|BytesRef
name|input
parameter_list|,
name|IntsRef
name|scratch
parameter_list|)
block|{
name|scratch
operator|.
name|grow
argument_list|(
name|input
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|input
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|scratch
operator|.
name|ints
index|[
name|i
index|]
operator|=
name|input
operator|.
name|bytes
index|[
name|i
operator|+
name|input
operator|.
name|offset
index|]
operator|&
literal|0xFF
expr_stmt|;
block|}
name|scratch
operator|.
name|length
operator|=
name|input
operator|.
name|length
expr_stmt|;
return|return
name|scratch
return|;
block|}
comment|/** Just converts IntsRef to BytesRef; you must ensure the    *  int values fit into a byte. */
DECL|method|toBytesRef
specifier|public
specifier|static
name|BytesRef
name|toBytesRef
parameter_list|(
name|IntsRef
name|input
parameter_list|,
name|BytesRef
name|scratch
parameter_list|)
block|{
name|scratch
operator|.
name|grow
argument_list|(
name|input
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|input
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|int
name|value
init|=
name|input
operator|.
name|ints
index|[
name|i
operator|+
name|input
operator|.
name|offset
index|]
decl_stmt|;
comment|// NOTE: we allow -128 to 255
assert|assert
name|value
operator|>=
name|Byte
operator|.
name|MIN_VALUE
operator|&&
name|value
operator|<=
literal|255
operator|:
literal|"value "
operator|+
name|value
operator|+
literal|" doesn't fit into byte"
assert|;
name|scratch
operator|.
name|bytes
index|[
name|i
index|]
operator|=
operator|(
name|byte
operator|)
name|value
expr_stmt|;
block|}
name|scratch
operator|.
name|length
operator|=
name|input
operator|.
name|length
expr_stmt|;
return|return
name|scratch
return|;
block|}
comment|// Uncomment for debugging:
comment|/*   public static<T> void dotToFile(FST<T> fst, String filePath) throws IOException {     Writer w = new OutputStreamWriter(new FileOutputStream(filePath));     toDot(fst, w, true, true);     w.close();   }   */
comment|/**    * Reads the first arc greater or equal that the given label into the provided    * arc in place and returns it iff found, otherwise return<code>null</code>.    *     * @param label the label to ceil on    * @param fst the fst to operate on    * @param follow the arc to follow reading the label from    * @param arc the arc to read into in place    * @param in the fst's {@link BytesReader}    */
DECL|method|readCeilArc
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Arc
argument_list|<
name|T
argument_list|>
name|readCeilArc
parameter_list|(
name|int
name|label
parameter_list|,
name|FST
argument_list|<
name|T
argument_list|>
name|fst
parameter_list|,
name|Arc
argument_list|<
name|T
argument_list|>
name|follow
parameter_list|,
name|Arc
argument_list|<
name|T
argument_list|>
name|arc
parameter_list|,
name|BytesReader
name|in
parameter_list|)
throws|throws
name|IOException
block|{
comment|// TODO maybe this is a useful in the FST class - we could simplify some other code like FSTEnum?
if|if
condition|(
name|label
operator|==
name|FST
operator|.
name|END_LABEL
condition|)
block|{
if|if
condition|(
name|follow
operator|.
name|isFinal
argument_list|()
condition|)
block|{
if|if
condition|(
name|follow
operator|.
name|target
operator|<=
literal|0
condition|)
block|{
name|arc
operator|.
name|flags
operator|=
name|FST
operator|.
name|BIT_LAST_ARC
expr_stmt|;
block|}
else|else
block|{
name|arc
operator|.
name|flags
operator|=
literal|0
expr_stmt|;
comment|// NOTE: nextArc is a node (not an address!) in this case:
name|arc
operator|.
name|nextArc
operator|=
name|follow
operator|.
name|target
expr_stmt|;
name|arc
operator|.
name|node
operator|=
name|follow
operator|.
name|target
expr_stmt|;
block|}
name|arc
operator|.
name|output
operator|=
name|follow
operator|.
name|nextFinalOutput
expr_stmt|;
name|arc
operator|.
name|label
operator|=
name|FST
operator|.
name|END_LABEL
expr_stmt|;
return|return
name|arc
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
if|if
condition|(
operator|!
name|FST
operator|.
name|targetHasArcs
argument_list|(
name|follow
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|fst
operator|.
name|readFirstTargetArc
argument_list|(
name|follow
argument_list|,
name|arc
argument_list|,
name|in
argument_list|)
expr_stmt|;
if|if
condition|(
name|arc
operator|.
name|bytesPerArc
operator|!=
literal|0
operator|&&
name|arc
operator|.
name|label
operator|!=
name|FST
operator|.
name|END_LABEL
condition|)
block|{
comment|// Arcs are fixed array -- use binary search to find
comment|// the target.
name|int
name|low
init|=
name|arc
operator|.
name|arcIdx
decl_stmt|;
name|int
name|high
init|=
name|arc
operator|.
name|numArcs
operator|-
literal|1
decl_stmt|;
name|int
name|mid
init|=
literal|0
decl_stmt|;
comment|// System.out.println("do arc array low=" + low + " high=" + high +
comment|// " targetLabel=" + targetLabel);
while|while
condition|(
name|low
operator|<=
name|high
condition|)
block|{
name|mid
operator|=
operator|(
name|low
operator|+
name|high
operator|)
operator|>>>
literal|1
expr_stmt|;
name|in
operator|.
name|setPosition
argument_list|(
name|arc
operator|.
name|posArcsStart
argument_list|)
expr_stmt|;
name|in
operator|.
name|skipBytes
argument_list|(
name|arc
operator|.
name|bytesPerArc
operator|*
name|mid
operator|+
literal|1
argument_list|)
expr_stmt|;
specifier|final
name|int
name|midLabel
init|=
name|fst
operator|.
name|readLabel
argument_list|(
name|in
argument_list|)
decl_stmt|;
specifier|final
name|int
name|cmp
init|=
name|midLabel
operator|-
name|label
decl_stmt|;
comment|// System.out.println("  cycle low=" + low + " high=" + high + " mid=" +
comment|// mid + " midLabel=" + midLabel + " cmp=" + cmp);
if|if
condition|(
name|cmp
operator|<
literal|0
condition|)
block|{
name|low
operator|=
name|mid
operator|+
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cmp
operator|>
literal|0
condition|)
block|{
name|high
operator|=
name|mid
operator|-
literal|1
expr_stmt|;
block|}
else|else
block|{
name|arc
operator|.
name|arcIdx
operator|=
name|mid
operator|-
literal|1
expr_stmt|;
return|return
name|fst
operator|.
name|readNextRealArc
argument_list|(
name|arc
argument_list|,
name|in
argument_list|)
return|;
block|}
block|}
if|if
condition|(
name|low
operator|==
name|arc
operator|.
name|numArcs
condition|)
block|{
comment|// DEAD END!
return|return
literal|null
return|;
block|}
name|arc
operator|.
name|arcIdx
operator|=
operator|(
name|low
operator|>
name|high
condition|?
name|high
else|:
name|low
operator|)
expr_stmt|;
return|return
name|fst
operator|.
name|readNextRealArc
argument_list|(
name|arc
argument_list|,
name|in
argument_list|)
return|;
block|}
comment|// Linear scan
name|fst
operator|.
name|readFirstRealTargetArc
argument_list|(
name|follow
operator|.
name|target
argument_list|,
name|arc
argument_list|,
name|in
argument_list|)
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
comment|// System.out.println("  non-bs cycle");
comment|// TODO: we should fix this code to not have to create
comment|// object for the output of every arc we scan... only
comment|// for the matching arc, if found
if|if
condition|(
name|arc
operator|.
name|label
operator|>=
name|label
condition|)
block|{
comment|// System.out.println("    found!");
return|return
name|arc
return|;
block|}
elseif|else
if|if
condition|(
name|arc
operator|.
name|isLast
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
name|fst
operator|.
name|readNextRealArc
argument_list|(
name|arc
argument_list|,
name|in
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class
end_unit
