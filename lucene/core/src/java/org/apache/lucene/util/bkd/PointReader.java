begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.util.bkd
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|bkd
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LongBitSet
import|;
end_import
begin_comment
comment|/** One pass iterator through all points previously written with a  *  {@link PointWriter}, abstracting away whether points a read  *  from (offline) disk or simple arrays in heap. */
end_comment
begin_class
DECL|class|PointReader
specifier|abstract
class|class
name|PointReader
implements|implements
name|Closeable
block|{
comment|/** Returns false once iteration is done, else true. */
DECL|method|next
specifier|abstract
name|boolean
name|next
parameter_list|()
throws|throws
name|IOException
function_decl|;
comment|/** Returns the packed byte[] value */
DECL|method|packedValue
specifier|abstract
name|byte
index|[]
name|packedValue
parameter_list|()
function_decl|;
comment|/** Point ordinal */
DECL|method|ord
specifier|abstract
name|long
name|ord
parameter_list|()
function_decl|;
comment|/** DocID for this point */
DECL|method|docID
specifier|abstract
name|int
name|docID
parameter_list|()
function_decl|;
comment|/** Splits this reader into left and right partitions */
DECL|method|split
specifier|public
name|long
name|split
parameter_list|(
name|long
name|count
parameter_list|,
name|LongBitSet
name|rightTree
parameter_list|,
name|PointWriter
name|left
parameter_list|,
name|PointWriter
name|right
parameter_list|,
name|boolean
name|doClearBits
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Partition this source according to how the splitDim split the values:
name|long
name|rightCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|long
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|boolean
name|result
init|=
name|next
argument_list|()
decl_stmt|;
assert|assert
name|result
assert|;
name|byte
index|[]
name|packedValue
init|=
name|packedValue
argument_list|()
decl_stmt|;
name|long
name|ord
init|=
name|ord
argument_list|()
decl_stmt|;
name|int
name|docID
init|=
name|docID
argument_list|()
decl_stmt|;
if|if
condition|(
name|rightTree
operator|.
name|get
argument_list|(
name|ord
argument_list|)
condition|)
block|{
name|right
operator|.
name|append
argument_list|(
name|packedValue
argument_list|,
name|ord
argument_list|,
name|docID
argument_list|)
expr_stmt|;
name|rightCount
operator|++
expr_stmt|;
if|if
condition|(
name|doClearBits
condition|)
block|{
name|rightTree
operator|.
name|clear
argument_list|(
name|ord
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|left
operator|.
name|append
argument_list|(
name|packedValue
argument_list|,
name|ord
argument_list|,
name|docID
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|rightCount
return|;
block|}
block|}
end_class
end_unit
