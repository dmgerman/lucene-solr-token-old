begin_unit
begin_package
DECL|package|org.apache.lucene.util
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_comment
comment|/**  * A native int hash-based set where one value is reserved to mean "EMPTY" internally. The space overhead is fairly low  * as there is only one power-of-two sized int[] to hold the values.  The set is re-hashed when adding a value that  * would make it&gt;= 75% full.  Consider extending and over-riding {@link #hash(int)} if the values might be poor  * hash keys; Lucene docids should be fine.  * The internal fields are exposed publicly to enable more efficient use at the expense of better O-O principles.  *<p>  * To iterate over the integers held in this set, simply use code like this:  *<pre class="prettyprint">  * SentinelIntSet set = ...  * for (int v : set.keys) {  *   if (v == set.emptyVal)  *     continue;  *   //use v...  * }</pre>  *  * @lucene.internal  */
end_comment
begin_class
DECL|class|SentinelIntSet
specifier|public
class|class
name|SentinelIntSet
block|{
comment|/** A power-of-2 over-sized array holding the integers in the set along with empty values. */
DECL|field|keys
specifier|public
name|int
index|[]
name|keys
decl_stmt|;
DECL|field|count
specifier|public
name|int
name|count
decl_stmt|;
DECL|field|emptyVal
specifier|public
specifier|final
name|int
name|emptyVal
decl_stmt|;
comment|/** the count at which a rehash should be done */
DECL|field|rehashCount
specifier|public
name|int
name|rehashCount
decl_stmt|;
comment|/**    *    * @param size  The minimum number of elements this set should be able to hold without rehashing    *              (i.e. the slots are guaranteed not to change)    * @param emptyVal The integer value to use for EMPTY    */
DECL|method|SentinelIntSet
specifier|public
name|SentinelIntSet
parameter_list|(
name|int
name|size
parameter_list|,
name|int
name|emptyVal
parameter_list|)
block|{
name|this
operator|.
name|emptyVal
operator|=
name|emptyVal
expr_stmt|;
name|int
name|tsize
init|=
name|Math
operator|.
name|max
argument_list|(
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BitUtil
operator|.
name|nextHighestPowerOfTwo
argument_list|(
name|size
argument_list|)
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|rehashCount
operator|=
name|tsize
operator|-
operator|(
name|tsize
operator|>>
literal|2
operator|)
expr_stmt|;
if|if
condition|(
name|size
operator|>=
name|rehashCount
condition|)
block|{
comment|// should be able to hold "size" w/o re-hashing
name|tsize
operator|<<=
literal|1
expr_stmt|;
name|rehashCount
operator|=
name|tsize
operator|-
operator|(
name|tsize
operator|>>
literal|2
operator|)
expr_stmt|;
block|}
name|keys
operator|=
operator|new
name|int
index|[
name|tsize
index|]
expr_stmt|;
if|if
condition|(
name|emptyVal
operator|!=
literal|0
condition|)
name|clear
argument_list|()
expr_stmt|;
block|}
DECL|method|clear
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|Arrays
operator|.
name|fill
argument_list|(
name|keys
argument_list|,
name|emptyVal
argument_list|)
expr_stmt|;
name|count
operator|=
literal|0
expr_stmt|;
block|}
comment|/** (internal) Return the hash for the key. The default implementation just returns the key,    * which is not appropriate for general purpose use.    */
DECL|method|hash
specifier|public
name|int
name|hash
parameter_list|(
name|int
name|key
parameter_list|)
block|{
return|return
name|key
return|;
block|}
comment|/** The number of integers in this set. */
DECL|method|size
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|count
return|;
block|}
comment|/** (internal) Returns the slot for this key */
DECL|method|getSlot
specifier|public
name|int
name|getSlot
parameter_list|(
name|int
name|key
parameter_list|)
block|{
assert|assert
name|key
operator|!=
name|emptyVal
assert|;
name|int
name|h
init|=
name|hash
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|int
name|s
init|=
name|h
operator|&
operator|(
name|keys
operator|.
name|length
operator|-
literal|1
operator|)
decl_stmt|;
if|if
condition|(
name|keys
index|[
name|s
index|]
operator|==
name|key
operator|||
name|keys
index|[
name|s
index|]
operator|==
name|emptyVal
condition|)
return|return
name|s
return|;
name|int
name|increment
init|=
operator|(
name|h
operator|>>
literal|7
operator|)
operator||
literal|1
decl_stmt|;
do|do
block|{
name|s
operator|=
operator|(
name|s
operator|+
name|increment
operator|)
operator|&
operator|(
name|keys
operator|.
name|length
operator|-
literal|1
operator|)
expr_stmt|;
block|}
do|while
condition|(
name|keys
index|[
name|s
index|]
operator|!=
name|key
operator|&&
name|keys
index|[
name|s
index|]
operator|!=
name|emptyVal
condition|)
do|;
return|return
name|s
return|;
block|}
comment|/** (internal) Returns the slot for this key, or -slot-1 if not found */
DECL|method|find
specifier|public
name|int
name|find
parameter_list|(
name|int
name|key
parameter_list|)
block|{
assert|assert
name|key
operator|!=
name|emptyVal
assert|;
name|int
name|h
init|=
name|hash
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|int
name|s
init|=
name|h
operator|&
operator|(
name|keys
operator|.
name|length
operator|-
literal|1
operator|)
decl_stmt|;
if|if
condition|(
name|keys
index|[
name|s
index|]
operator|==
name|key
condition|)
return|return
name|s
return|;
if|if
condition|(
name|keys
index|[
name|s
index|]
operator|==
name|emptyVal
condition|)
return|return
operator|-
name|s
operator|-
literal|1
return|;
name|int
name|increment
init|=
operator|(
name|h
operator|>>
literal|7
operator|)
operator||
literal|1
decl_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
name|s
operator|=
operator|(
name|s
operator|+
name|increment
operator|)
operator|&
operator|(
name|keys
operator|.
name|length
operator|-
literal|1
operator|)
expr_stmt|;
if|if
condition|(
name|keys
index|[
name|s
index|]
operator|==
name|key
condition|)
return|return
name|s
return|;
if|if
condition|(
name|keys
index|[
name|s
index|]
operator|==
name|emptyVal
condition|)
return|return
operator|-
name|s
operator|-
literal|1
return|;
block|}
block|}
comment|/** Does this set contain the specified integer? */
DECL|method|exists
specifier|public
name|boolean
name|exists
parameter_list|(
name|int
name|key
parameter_list|)
block|{
return|return
name|find
argument_list|(
name|key
argument_list|)
operator|>=
literal|0
return|;
block|}
comment|/** Puts this integer (key) in the set, and returns the slot index it was added to.    * It rehashes if adding it would make the set more than 75% full. */
DECL|method|put
specifier|public
name|int
name|put
parameter_list|(
name|int
name|key
parameter_list|)
block|{
name|int
name|s
init|=
name|find
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|<
literal|0
condition|)
block|{
name|count
operator|++
expr_stmt|;
if|if
condition|(
name|count
operator|>=
name|rehashCount
condition|)
block|{
name|rehash
argument_list|()
expr_stmt|;
name|s
operator|=
name|getSlot
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|s
operator|=
operator|-
name|s
operator|-
literal|1
expr_stmt|;
block|}
name|keys
index|[
name|s
index|]
operator|=
name|key
expr_stmt|;
block|}
return|return
name|s
return|;
block|}
comment|/** (internal) Rehashes by doubling {@code int[] key} and filling with the old values. */
DECL|method|rehash
specifier|public
name|void
name|rehash
parameter_list|()
block|{
name|int
name|newSize
init|=
name|keys
operator|.
name|length
operator|<<
literal|1
decl_stmt|;
name|int
index|[]
name|oldKeys
init|=
name|keys
decl_stmt|;
name|keys
operator|=
operator|new
name|int
index|[
name|newSize
index|]
expr_stmt|;
if|if
condition|(
name|emptyVal
operator|!=
literal|0
condition|)
name|Arrays
operator|.
name|fill
argument_list|(
name|keys
argument_list|,
name|emptyVal
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|key
range|:
name|oldKeys
control|)
block|{
if|if
condition|(
name|key
operator|==
name|emptyVal
condition|)
continue|continue;
name|int
name|newSlot
init|=
name|getSlot
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|keys
index|[
name|newSlot
index|]
operator|=
name|key
expr_stmt|;
block|}
name|rehashCount
operator|=
name|newSize
operator|-
operator|(
name|newSize
operator|>>
literal|2
operator|)
expr_stmt|;
block|}
comment|/** Return the memory footprint of this class in bytes. */
DECL|method|ramBytesUsed
specifier|public
name|long
name|ramBytesUsed
parameter_list|()
block|{
return|return
name|RamUsageEstimator
operator|.
name|alignObjectSize
argument_list|(
name|RamUsageEstimator
operator|.
name|NUM_BYTES_INT
operator|*
literal|3
operator|+
name|RamUsageEstimator
operator|.
name|NUM_BYTES_OBJECT_REF
argument_list|)
operator|+
name|RamUsageEstimator
operator|.
name|sizeOf
argument_list|(
name|keys
argument_list|)
return|;
block|}
block|}
end_class
end_unit
