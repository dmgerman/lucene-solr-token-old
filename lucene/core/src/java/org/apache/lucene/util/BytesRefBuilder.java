begin_unit
begin_package
DECL|package|org.apache.lucene.util
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_comment
comment|/**  * A builder for {@link BytesRef} instances.  * @lucene.internal  */
end_comment
begin_class
DECL|class|BytesRefBuilder
specifier|public
class|class
name|BytesRefBuilder
block|{
DECL|field|ref
specifier|private
specifier|final
name|BytesRef
name|ref
decl_stmt|;
comment|/** Sole constructor. */
DECL|method|BytesRefBuilder
specifier|public
name|BytesRefBuilder
parameter_list|()
block|{
name|ref
operator|=
operator|new
name|BytesRef
argument_list|()
expr_stmt|;
block|}
comment|/** Return a reference to the bytes of this builder. */
DECL|method|bytes
specifier|public
name|byte
index|[]
name|bytes
parameter_list|()
block|{
return|return
name|ref
operator|.
name|bytes
return|;
block|}
comment|/** Return the number of bytes in this buffer. */
DECL|method|length
specifier|public
name|int
name|length
parameter_list|()
block|{
return|return
name|ref
operator|.
name|length
return|;
block|}
comment|/** Set the length. */
DECL|method|setLength
specifier|public
name|void
name|setLength
parameter_list|(
name|int
name|length
parameter_list|)
block|{
name|this
operator|.
name|ref
operator|.
name|length
operator|=
name|length
expr_stmt|;
block|}
comment|/** Return the byte at the given offset. */
DECL|method|byteAt
specifier|public
name|byte
name|byteAt
parameter_list|(
name|int
name|offset
parameter_list|)
block|{
return|return
name|ref
operator|.
name|bytes
index|[
name|offset
index|]
return|;
block|}
comment|/** Set a byte. */
DECL|method|setByteAt
specifier|public
name|void
name|setByteAt
parameter_list|(
name|int
name|offset
parameter_list|,
name|byte
name|b
parameter_list|)
block|{
name|ref
operator|.
name|bytes
index|[
name|offset
index|]
operator|=
name|b
expr_stmt|;
block|}
comment|/**    * Ensure that this builder can hold at least<code>capacity</code> bytes    * without resizing.    */
DECL|method|grow
specifier|public
name|void
name|grow
parameter_list|(
name|int
name|capacity
parameter_list|)
block|{
name|ref
operator|.
name|bytes
operator|=
name|ArrayUtil
operator|.
name|grow
argument_list|(
name|ref
operator|.
name|bytes
argument_list|,
name|capacity
argument_list|)
expr_stmt|;
block|}
comment|/**    * Append a single byte to this builder.    */
DECL|method|append
specifier|public
name|void
name|append
parameter_list|(
name|byte
name|b
parameter_list|)
block|{
name|grow
argument_list|(
name|ref
operator|.
name|length
operator|+
literal|1
argument_list|)
expr_stmt|;
name|ref
operator|.
name|bytes
index|[
name|ref
operator|.
name|length
operator|++
index|]
operator|=
name|b
expr_stmt|;
block|}
comment|/**    * Append the provided bytes to this builder.    */
DECL|method|append
specifier|public
name|void
name|append
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
block|{
name|grow
argument_list|(
name|ref
operator|.
name|length
operator|+
name|len
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|ref
operator|.
name|bytes
argument_list|,
name|ref
operator|.
name|length
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|ref
operator|.
name|length
operator|+=
name|len
expr_stmt|;
block|}
comment|/**    * Append the provided bytes to this builder.    */
DECL|method|append
specifier|public
name|void
name|append
parameter_list|(
name|BytesRef
name|ref
parameter_list|)
block|{
name|append
argument_list|(
name|ref
operator|.
name|bytes
argument_list|,
name|ref
operator|.
name|offset
argument_list|,
name|ref
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
comment|/**    * Append the provided bytes to this builder.    */
DECL|method|append
specifier|public
name|void
name|append
parameter_list|(
name|BytesRefBuilder
name|builder
parameter_list|)
block|{
name|append
argument_list|(
name|builder
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Reset this builder to the empty state.    */
DECL|method|clear
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/**    * Replace the content of this builder with the provided bytes. Equivalent to    * calling {@link #clear()} and then {@link #append(byte[], int, int)}.    */
DECL|method|copyBytes
specifier|public
name|void
name|copyBytes
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
block|{
name|clear
argument_list|()
expr_stmt|;
name|append
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
comment|/**    * Replace the content of this builder with the provided bytes. Equivalent to    * calling {@link #clear()} and then {@link #append(BytesRef)}.    */
DECL|method|copyBytes
specifier|public
name|void
name|copyBytes
parameter_list|(
name|BytesRef
name|ref
parameter_list|)
block|{
name|clear
argument_list|()
expr_stmt|;
name|append
argument_list|(
name|ref
argument_list|)
expr_stmt|;
block|}
comment|/**    * Replace the content of this builder with the provided bytes. Equivalent to    * calling {@link #clear()} and then {@link #append(BytesRefBuilder)}.    */
DECL|method|copyBytes
specifier|public
name|void
name|copyBytes
parameter_list|(
name|BytesRefBuilder
name|builder
parameter_list|)
block|{
name|clear
argument_list|()
expr_stmt|;
name|append
argument_list|(
name|builder
argument_list|)
expr_stmt|;
block|}
comment|/**    * Replace the content of this buffer with UTF-8 encoded bytes that would    * represent the provided text.    */
DECL|method|copyChars
specifier|public
name|void
name|copyChars
parameter_list|(
name|CharSequence
name|text
parameter_list|)
block|{
name|copyChars
argument_list|(
name|text
argument_list|,
literal|0
argument_list|,
name|text
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Replace the content of this buffer with UTF-8 encoded bytes that would    * represent the provided text.    */
DECL|method|copyChars
specifier|public
name|void
name|copyChars
parameter_list|(
name|CharSequence
name|text
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
block|{
name|grow
argument_list|(
name|len
operator|*
name|UnicodeUtil
operator|.
name|MAX_UTF8_BYTES_PER_CHAR
argument_list|)
expr_stmt|;
name|ref
operator|.
name|length
operator|=
name|UnicodeUtil
operator|.
name|UTF16toUTF8
argument_list|(
name|text
argument_list|,
name|off
argument_list|,
name|len
argument_list|,
name|ref
operator|.
name|bytes
argument_list|)
expr_stmt|;
block|}
comment|/**    * Replace the content of this buffer with UTF-8 encoded bytes that would    * represent the provided text.    */
DECL|method|copyChars
specifier|public
name|void
name|copyChars
parameter_list|(
name|char
index|[]
name|text
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
block|{
name|grow
argument_list|(
name|len
operator|*
name|UnicodeUtil
operator|.
name|MAX_UTF8_BYTES_PER_CHAR
argument_list|)
expr_stmt|;
name|ref
operator|.
name|length
operator|=
name|UnicodeUtil
operator|.
name|UTF16toUTF8
argument_list|(
name|text
argument_list|,
name|off
argument_list|,
name|len
argument_list|,
name|ref
operator|.
name|bytes
argument_list|)
expr_stmt|;
block|}
comment|/**    * Return a {@link BytesRef} that points to the internal content of this    * builder. Any update to the content of this builder might invalidate    * the provided<code>ref</code> and vice-versa.    */
DECL|method|get
specifier|public
name|BytesRef
name|get
parameter_list|()
block|{
assert|assert
name|ref
operator|.
name|offset
operator|==
literal|0
operator|:
literal|"Modifying the offset of the returned ref is illegal"
assert|;
return|return
name|ref
return|;
block|}
comment|/**    * Build a new {@link BytesRef} that has the same content as this buffer.    */
DECL|method|toBytesRef
specifier|public
name|BytesRef
name|toBytesRef
parameter_list|()
block|{
return|return
operator|new
name|BytesRef
argument_list|(
name|Arrays
operator|.
name|copyOf
argument_list|(
name|ref
operator|.
name|bytes
argument_list|,
name|ref
operator|.
name|length
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
end_class
end_unit
