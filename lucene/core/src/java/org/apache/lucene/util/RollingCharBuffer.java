begin_unit
begin_package
DECL|package|org.apache.lucene.util
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import
begin_comment
comment|/** Acts like a forever growing char[] as you read  *  characters into it from the provided reader, but  *  internally it uses a circular buffer to only hold the  *  characters that haven't been freed yet.  This is like a  *  PushbackReader, except you don't have to specify  *  up-front the max size of the buffer, but you do have to  *  periodically call {@link #freeBefore}. */
end_comment
begin_class
DECL|class|RollingCharBuffer
specifier|public
specifier|final
class|class
name|RollingCharBuffer
block|{
DECL|field|reader
specifier|private
name|Reader
name|reader
decl_stmt|;
DECL|field|buffer
specifier|private
name|char
index|[]
name|buffer
init|=
operator|new
name|char
index|[
literal|512
index|]
decl_stmt|;
comment|// Next array index to write to in buffer:
DECL|field|nextWrite
specifier|private
name|int
name|nextWrite
decl_stmt|;
comment|// Next absolute position to read from reader:
DECL|field|nextPos
specifier|private
name|int
name|nextPos
decl_stmt|;
comment|// How many valid chars (wrapped) are in the buffer:
DECL|field|count
specifier|private
name|int
name|count
decl_stmt|;
comment|// True if we hit EOF
DECL|field|end
specifier|private
name|boolean
name|end
decl_stmt|;
comment|/** Clear array and switch to new reader. */
DECL|method|reset
specifier|public
name|void
name|reset
parameter_list|(
name|Reader
name|reader
parameter_list|)
block|{
name|this
operator|.
name|reader
operator|=
name|reader
expr_stmt|;
name|nextPos
operator|=
literal|0
expr_stmt|;
name|nextWrite
operator|=
literal|0
expr_stmt|;
name|count
operator|=
literal|0
expr_stmt|;
name|end
operator|=
literal|false
expr_stmt|;
block|}
comment|/* Absolute position read.  NOTE: pos must not jump    * ahead by more than 1!  Ie, it's OK to read arbitarily    * far back (just not prior to the last {@link    * #freeBefore}), but NOT ok to read arbitrarily far    * ahead.  Returns -1 if you hit EOF. */
DECL|method|get
specifier|public
name|int
name|get
parameter_list|(
name|int
name|pos
parameter_list|)
throws|throws
name|IOException
block|{
comment|//System.out.println("    get pos=" + pos + " nextPos=" + nextPos + " count=" + count);
if|if
condition|(
name|pos
operator|==
name|nextPos
condition|)
block|{
if|if
condition|(
name|end
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
if|if
condition|(
name|count
operator|==
name|buffer
operator|.
name|length
condition|)
block|{
comment|// Grow
specifier|final
name|char
index|[]
name|newBuffer
init|=
operator|new
name|char
index|[
name|ArrayUtil
operator|.
name|oversize
argument_list|(
literal|1
operator|+
name|count
argument_list|,
name|RamUsageEstimator
operator|.
name|NUM_BYTES_CHAR
argument_list|)
index|]
decl_stmt|;
comment|//System.out.println(Thread.currentThread().getName() + ": cb grow " + newBuffer.length);
name|System
operator|.
name|arraycopy
argument_list|(
name|buffer
argument_list|,
name|nextWrite
argument_list|,
name|newBuffer
argument_list|,
literal|0
argument_list|,
name|buffer
operator|.
name|length
operator|-
name|nextWrite
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|newBuffer
argument_list|,
name|buffer
operator|.
name|length
operator|-
name|nextWrite
argument_list|,
name|nextWrite
argument_list|)
expr_stmt|;
name|nextWrite
operator|=
name|buffer
operator|.
name|length
expr_stmt|;
name|buffer
operator|=
name|newBuffer
expr_stmt|;
block|}
if|if
condition|(
name|nextWrite
operator|==
name|buffer
operator|.
name|length
condition|)
block|{
name|nextWrite
operator|=
literal|0
expr_stmt|;
block|}
specifier|final
name|int
name|toRead
init|=
name|buffer
operator|.
name|length
operator|-
name|Math
operator|.
name|max
argument_list|(
name|count
argument_list|,
name|nextWrite
argument_list|)
decl_stmt|;
specifier|final
name|int
name|readCount
init|=
name|reader
operator|.
name|read
argument_list|(
name|buffer
argument_list|,
name|nextWrite
argument_list|,
name|toRead
argument_list|)
decl_stmt|;
if|if
condition|(
name|readCount
operator|==
operator|-
literal|1
condition|)
block|{
name|end
operator|=
literal|true
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
specifier|final
name|int
name|ch
init|=
name|buffer
index|[
name|nextWrite
index|]
decl_stmt|;
name|nextWrite
operator|+=
name|readCount
expr_stmt|;
name|count
operator|+=
name|readCount
expr_stmt|;
name|nextPos
operator|+=
name|readCount
expr_stmt|;
return|return
name|ch
return|;
block|}
else|else
block|{
comment|// Cannot read from future (except by 1):
assert|assert
name|pos
operator|<
name|nextPos
assert|;
comment|// Cannot read from already freed past:
assert|assert
name|nextPos
operator|-
name|pos
operator|<=
name|count
operator|:
literal|"nextPos="
operator|+
name|nextPos
operator|+
literal|" pos="
operator|+
name|pos
operator|+
literal|" count="
operator|+
name|count
assert|;
return|return
name|buffer
index|[
name|getIndex
argument_list|(
name|pos
argument_list|)
index|]
return|;
block|}
block|}
comment|// For assert:
DECL|method|inBounds
specifier|private
name|boolean
name|inBounds
parameter_list|(
name|int
name|pos
parameter_list|)
block|{
return|return
name|pos
operator|>=
literal|0
operator|&&
name|pos
operator|<
name|nextPos
operator|&&
name|pos
operator|>=
name|nextPos
operator|-
name|count
return|;
block|}
DECL|method|getIndex
specifier|private
name|int
name|getIndex
parameter_list|(
name|int
name|pos
parameter_list|)
block|{
name|int
name|index
init|=
name|nextWrite
operator|-
operator|(
name|nextPos
operator|-
name|pos
operator|)
decl_stmt|;
if|if
condition|(
name|index
operator|<
literal|0
condition|)
block|{
comment|// Wrap:
name|index
operator|+=
name|buffer
operator|.
name|length
expr_stmt|;
assert|assert
name|index
operator|>=
literal|0
assert|;
block|}
return|return
name|index
return|;
block|}
DECL|method|get
specifier|public
name|char
index|[]
name|get
parameter_list|(
name|int
name|posStart
parameter_list|,
name|int
name|length
parameter_list|)
block|{
assert|assert
name|length
operator|>
literal|0
assert|;
assert|assert
name|inBounds
argument_list|(
name|posStart
argument_list|)
operator|:
literal|"posStart="
operator|+
name|posStart
operator|+
literal|" length="
operator|+
name|length
assert|;
comment|//System.out.println("    buffer.get posStart=" + posStart + " len=" + length);
specifier|final
name|int
name|startIndex
init|=
name|getIndex
argument_list|(
name|posStart
argument_list|)
decl_stmt|;
specifier|final
name|int
name|endIndex
init|=
name|getIndex
argument_list|(
name|posStart
operator|+
name|length
argument_list|)
decl_stmt|;
comment|//System.out.println("      startIndex=" + startIndex + " endIndex=" + endIndex);
specifier|final
name|char
index|[]
name|result
init|=
operator|new
name|char
index|[
name|length
index|]
decl_stmt|;
if|if
condition|(
name|endIndex
operator|>=
name|startIndex
operator|&&
name|length
operator|<
name|buffer
operator|.
name|length
condition|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|buffer
argument_list|,
name|startIndex
argument_list|,
name|result
argument_list|,
literal|0
argument_list|,
name|endIndex
operator|-
name|startIndex
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Wrapped:
specifier|final
name|int
name|part1
init|=
name|buffer
operator|.
name|length
operator|-
name|startIndex
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|buffer
argument_list|,
name|startIndex
argument_list|,
name|result
argument_list|,
literal|0
argument_list|,
name|part1
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|result
argument_list|,
name|buffer
operator|.
name|length
operator|-
name|startIndex
argument_list|,
name|length
operator|-
name|part1
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/** Call this to notify us that no chars before this    *  absolute position are needed anymore. */
DECL|method|freeBefore
specifier|public
name|void
name|freeBefore
parameter_list|(
name|int
name|pos
parameter_list|)
block|{
assert|assert
name|pos
operator|>=
literal|0
assert|;
assert|assert
name|pos
operator|<=
name|nextPos
assert|;
specifier|final
name|int
name|newCount
init|=
name|nextPos
operator|-
name|pos
decl_stmt|;
assert|assert
name|newCount
operator|<=
name|count
operator|:
literal|"newCount="
operator|+
name|newCount
operator|+
literal|" count="
operator|+
name|count
assert|;
assert|assert
name|newCount
operator|<=
name|buffer
operator|.
name|length
operator|:
literal|"newCount="
operator|+
name|newCount
operator|+
literal|" buf.length="
operator|+
name|buffer
operator|.
name|length
assert|;
name|count
operator|=
name|newCount
expr_stmt|;
block|}
block|}
end_class
end_unit
