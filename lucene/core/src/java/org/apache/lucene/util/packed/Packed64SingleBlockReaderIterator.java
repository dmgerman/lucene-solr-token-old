begin_unit
begin_package
DECL|package|org.apache.lucene.util.packed
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|packed
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexInput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|packed
operator|.
name|PackedInts
operator|.
name|ReaderIteratorImpl
import|;
end_import
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_class
DECL|class|Packed64SingleBlockReaderIterator
specifier|final
class|class
name|Packed64SingleBlockReaderIterator
extends|extends
name|ReaderIteratorImpl
block|{
DECL|field|pending
specifier|private
name|long
name|pending
decl_stmt|;
DECL|field|shift
specifier|private
name|int
name|shift
decl_stmt|;
DECL|field|mask
specifier|private
specifier|final
name|long
name|mask
decl_stmt|;
DECL|field|position
specifier|private
name|int
name|position
decl_stmt|;
DECL|method|Packed64SingleBlockReaderIterator
name|Packed64SingleBlockReaderIterator
parameter_list|(
name|int
name|valueCount
parameter_list|,
name|int
name|bitsPerValue
parameter_list|,
name|IndexInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|valueCount
argument_list|,
name|bitsPerValue
argument_list|,
name|in
argument_list|)
expr_stmt|;
name|pending
operator|=
literal|0
expr_stmt|;
name|shift
operator|=
literal|64
expr_stmt|;
name|mask
operator|=
operator|~
operator|(
operator|~
literal|0L
operator|<<
name|bitsPerValue
operator|)
expr_stmt|;
name|position
operator|=
operator|-
literal|1
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|next
specifier|public
name|long
name|next
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|shift
operator|+
name|bitsPerValue
operator|>
literal|64
condition|)
block|{
name|pending
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|shift
operator|=
literal|0
expr_stmt|;
block|}
specifier|final
name|long
name|next
init|=
operator|(
name|pending
operator|>>>
name|shift
operator|)
operator|&
name|mask
decl_stmt|;
name|shift
operator|+=
name|bitsPerValue
expr_stmt|;
operator|++
name|position
expr_stmt|;
return|return
name|next
return|;
block|}
annotation|@
name|Override
DECL|method|ord
specifier|public
name|int
name|ord
parameter_list|()
block|{
return|return
name|position
return|;
block|}
annotation|@
name|Override
DECL|method|advance
specifier|public
name|long
name|advance
parameter_list|(
name|int
name|ord
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|ord
operator|<
name|valueCount
operator|:
literal|"ord must be less than valueCount"
assert|;
assert|assert
name|ord
operator|>
name|position
operator|:
literal|"ord must be greater than the current position"
assert|;
specifier|final
name|int
name|valuesPerBlock
init|=
literal|64
operator|/
name|bitsPerValue
decl_stmt|;
specifier|final
name|long
name|nextBlock
init|=
operator|(
name|position
operator|+
name|valuesPerBlock
operator|)
operator|/
name|valuesPerBlock
decl_stmt|;
specifier|final
name|long
name|targetBlock
init|=
name|ord
operator|/
name|valuesPerBlock
decl_stmt|;
specifier|final
name|long
name|blocksToSkip
init|=
name|targetBlock
operator|-
name|nextBlock
decl_stmt|;
if|if
condition|(
name|blocksToSkip
operator|>
literal|0
condition|)
block|{
specifier|final
name|long
name|skip
init|=
name|blocksToSkip
operator|<<
literal|3
decl_stmt|;
specifier|final
name|long
name|filePointer
init|=
name|in
operator|.
name|getFilePointer
argument_list|()
decl_stmt|;
name|in
operator|.
name|seek
argument_list|(
name|filePointer
operator|+
name|skip
argument_list|)
expr_stmt|;
name|shift
operator|=
literal|64
expr_stmt|;
specifier|final
name|int
name|offsetInBlock
init|=
name|ord
operator|%
name|valuesPerBlock
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|offsetInBlock
condition|;
operator|++
name|i
control|)
block|{
name|next
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
name|position
init|;
name|i
operator|<
name|ord
operator|-
literal|1
condition|;
operator|++
name|i
control|)
block|{
name|next
argument_list|()
expr_stmt|;
block|}
block|}
name|position
operator|=
name|ord
operator|-
literal|1
expr_stmt|;
return|return
name|next
argument_list|()
return|;
block|}
block|}
end_class
end_unit
