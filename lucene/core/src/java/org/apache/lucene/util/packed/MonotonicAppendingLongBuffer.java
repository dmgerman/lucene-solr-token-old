begin_unit
begin_package
DECL|package|org.apache.lucene.util.packed
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|packed
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|RamUsageEstimator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_comment
comment|/**  * Utility class to buffer signed longs in memory, which is optimized for the  * case where the sequence is monotonic, although it can encode any sequence of  * arbitrary longs. It only supports appending.  *  * @lucene.internal  */
end_comment
begin_class
DECL|class|MonotonicAppendingLongBuffer
specifier|public
specifier|final
class|class
name|MonotonicAppendingLongBuffer
extends|extends
name|AbstractAppendingLongBuffer
block|{
DECL|method|zigZagDecode
specifier|static
name|long
name|zigZagDecode
parameter_list|(
name|long
name|n
parameter_list|)
block|{
return|return
operator|(
operator|(
name|n
operator|>>>
literal|1
operator|)
operator|^
operator|-
operator|(
name|n
operator|&
literal|1
operator|)
operator|)
return|;
block|}
DECL|method|zigZagEncode
specifier|static
name|long
name|zigZagEncode
parameter_list|(
name|long
name|n
parameter_list|)
block|{
return|return
operator|(
name|n
operator|>>
literal|63
operator|)
operator|^
operator|(
name|n
operator|<<
literal|1
operator|)
return|;
block|}
DECL|field|averages
name|float
index|[]
name|averages
decl_stmt|;
DECL|field|minValues
name|long
index|[]
name|minValues
decl_stmt|;
comment|/**    * @param initialPageCount        the initial number of pages    * @param pageSize                the size of a single page    * @param acceptableOverheadRatio an acceptable overhead ratio per value    */
DECL|method|MonotonicAppendingLongBuffer
specifier|public
name|MonotonicAppendingLongBuffer
parameter_list|(
name|int
name|initialPageCount
parameter_list|,
name|int
name|pageSize
parameter_list|,
name|float
name|acceptableOverheadRatio
parameter_list|)
block|{
name|super
argument_list|(
name|initialPageCount
argument_list|,
name|pageSize
argument_list|,
name|acceptableOverheadRatio
argument_list|)
expr_stmt|;
name|averages
operator|=
operator|new
name|float
index|[
name|values
operator|.
name|length
index|]
expr_stmt|;
name|minValues
operator|=
operator|new
name|long
index|[
name|values
operator|.
name|length
index|]
expr_stmt|;
block|}
comment|/**    * Create an {@link MonotonicAppendingLongBuffer} with initialPageCount=16,    * pageSize=1024 and acceptableOverheadRatio={@link PackedInts#DEFAULT}    */
DECL|method|MonotonicAppendingLongBuffer
specifier|public
name|MonotonicAppendingLongBuffer
parameter_list|()
block|{
name|this
argument_list|(
literal|16
argument_list|,
literal|1024
argument_list|,
name|PackedInts
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create an {@link AppendingDeltaPackedLongBuffer} with initialPageCount=16,    * pageSize=1024    */
DECL|method|MonotonicAppendingLongBuffer
specifier|public
name|MonotonicAppendingLongBuffer
parameter_list|(
name|float
name|acceptableOverheadRatio
parameter_list|)
block|{
name|this
argument_list|(
literal|16
argument_list|,
literal|1024
argument_list|,
name|acceptableOverheadRatio
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|get
name|long
name|get
parameter_list|(
name|int
name|block
parameter_list|,
name|int
name|element
parameter_list|)
block|{
if|if
condition|(
name|block
operator|==
name|valuesOff
condition|)
block|{
return|return
name|pending
index|[
name|element
index|]
return|;
block|}
else|else
block|{
specifier|final
name|long
name|base
init|=
name|minValues
index|[
name|block
index|]
operator|+
call|(
name|long
call|)
argument_list|(
name|averages
index|[
name|block
index|]
operator|*
operator|(
name|long
operator|)
name|element
argument_list|)
decl_stmt|;
if|if
condition|(
name|values
index|[
name|block
index|]
operator|==
literal|null
condition|)
block|{
return|return
name|base
return|;
block|}
else|else
block|{
return|return
name|base
operator|+
name|zigZagDecode
argument_list|(
name|values
index|[
name|block
index|]
operator|.
name|get
argument_list|(
name|element
argument_list|)
argument_list|)
return|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|get
name|int
name|get
parameter_list|(
name|int
name|block
parameter_list|,
name|int
name|element
parameter_list|,
name|long
index|[]
name|arr
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
block|{
if|if
condition|(
name|block
operator|==
name|valuesOff
condition|)
block|{
name|int
name|sysCopyToRead
init|=
name|Math
operator|.
name|min
argument_list|(
name|len
argument_list|,
name|pendingOff
operator|-
name|element
argument_list|)
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|pending
argument_list|,
name|element
argument_list|,
name|arr
argument_list|,
name|off
argument_list|,
name|sysCopyToRead
argument_list|)
expr_stmt|;
return|return
name|sysCopyToRead
return|;
block|}
else|else
block|{
if|if
condition|(
name|values
index|[
name|block
index|]
operator|==
literal|null
condition|)
block|{
name|int
name|toFill
init|=
name|Math
operator|.
name|min
argument_list|(
name|len
argument_list|,
name|pending
operator|.
name|length
operator|-
name|element
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|r
init|=
literal|0
init|;
name|r
operator|<
name|toFill
condition|;
name|r
operator|++
operator|,
name|off
operator|++
operator|,
name|element
operator|++
control|)
block|{
name|arr
index|[
name|off
index|]
operator|=
name|minValues
index|[
name|block
index|]
operator|+
call|(
name|long
call|)
argument_list|(
name|averages
index|[
name|block
index|]
operator|*
operator|(
name|long
operator|)
name|element
argument_list|)
expr_stmt|;
block|}
return|return
name|toFill
return|;
block|}
else|else
block|{
comment|/* packed block */
name|int
name|read
init|=
name|values
index|[
name|block
index|]
operator|.
name|get
argument_list|(
name|element
argument_list|,
name|arr
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|r
init|=
literal|0
init|;
name|r
operator|<
name|read
condition|;
name|r
operator|++
operator|,
name|off
operator|++
operator|,
name|element
operator|++
control|)
block|{
name|arr
index|[
name|off
index|]
operator|=
name|minValues
index|[
name|block
index|]
operator|+
call|(
name|long
call|)
argument_list|(
name|averages
index|[
name|block
index|]
operator|*
operator|(
name|long
operator|)
name|element
argument_list|)
operator|+
name|zigZagDecode
argument_list|(
name|arr
index|[
name|off
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|read
return|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|grow
name|void
name|grow
parameter_list|(
name|int
name|newBlockCount
parameter_list|)
block|{
name|super
operator|.
name|grow
argument_list|(
name|newBlockCount
argument_list|)
expr_stmt|;
name|this
operator|.
name|averages
operator|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|averages
argument_list|,
name|newBlockCount
argument_list|)
expr_stmt|;
name|this
operator|.
name|minValues
operator|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|minValues
argument_list|,
name|newBlockCount
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|packPendingValues
name|void
name|packPendingValues
parameter_list|()
block|{
assert|assert
name|pendingOff
operator|>
literal|0
assert|;
name|minValues
index|[
name|valuesOff
index|]
operator|=
name|pending
index|[
literal|0
index|]
expr_stmt|;
name|averages
index|[
name|valuesOff
index|]
operator|=
name|pendingOff
operator|==
literal|1
condition|?
literal|0
else|:
call|(
name|float
call|)
argument_list|(
name|pending
index|[
name|pendingOff
operator|-
literal|1
index|]
operator|-
name|pending
index|[
literal|0
index|]
argument_list|)
operator|/
operator|(
name|pendingOff
operator|-
literal|1
operator|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|pendingOff
condition|;
operator|++
name|i
control|)
block|{
name|pending
index|[
name|i
index|]
operator|=
name|zigZagEncode
argument_list|(
name|pending
index|[
name|i
index|]
operator|-
name|minValues
index|[
name|valuesOff
index|]
operator|-
call|(
name|long
call|)
argument_list|(
name|averages
index|[
name|valuesOff
index|]
operator|*
operator|(
name|long
operator|)
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|long
name|maxDelta
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|pendingOff
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|pending
index|[
name|i
index|]
operator|<
literal|0
condition|)
block|{
name|maxDelta
operator|=
operator|-
literal|1
expr_stmt|;
break|break;
block|}
else|else
block|{
name|maxDelta
operator|=
name|Math
operator|.
name|max
argument_list|(
name|maxDelta
argument_list|,
name|pending
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|maxDelta
operator|==
literal|0
condition|)
block|{
name|values
index|[
name|valuesOff
index|]
operator|=
operator|new
name|PackedInts
operator|.
name|NullReader
argument_list|(
name|pendingOff
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|int
name|bitsRequired
init|=
name|maxDelta
operator|<
literal|0
condition|?
literal|64
else|:
name|PackedInts
operator|.
name|bitsRequired
argument_list|(
name|maxDelta
argument_list|)
decl_stmt|;
specifier|final
name|PackedInts
operator|.
name|Mutable
name|mutable
init|=
name|PackedInts
operator|.
name|getMutable
argument_list|(
name|pendingOff
argument_list|,
name|bitsRequired
argument_list|,
name|acceptableOverheadRatio
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|pendingOff
condition|;
control|)
block|{
name|i
operator|+=
name|mutable
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|pending
argument_list|,
name|i
argument_list|,
name|pendingOff
operator|-
name|i
argument_list|)
expr_stmt|;
block|}
name|values
index|[
name|valuesOff
index|]
operator|=
name|mutable
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|baseRamBytesUsed
name|long
name|baseRamBytesUsed
parameter_list|()
block|{
return|return
name|super
operator|.
name|baseRamBytesUsed
argument_list|()
operator|+
literal|2
operator|*
name|RamUsageEstimator
operator|.
name|NUM_BYTES_OBJECT_REF
return|;
comment|// 2 additional arrays
block|}
annotation|@
name|Override
DECL|method|ramBytesUsed
specifier|public
name|long
name|ramBytesUsed
parameter_list|()
block|{
return|return
name|super
operator|.
name|ramBytesUsed
argument_list|()
operator|+
name|RamUsageEstimator
operator|.
name|sizeOf
argument_list|(
name|averages
argument_list|)
operator|+
name|RamUsageEstimator
operator|.
name|sizeOf
argument_list|(
name|minValues
argument_list|)
return|;
block|}
block|}
end_class
end_unit
