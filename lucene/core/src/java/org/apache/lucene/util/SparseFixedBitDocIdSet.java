begin_unit
begin_package
DECL|package|org.apache.lucene.util
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|DocIdSet
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|DocIdSetIterator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|SparseFixedBitSet
operator|.
name|SparseFixedBitSetIterator
import|;
end_import
begin_comment
comment|/**  * Implementation of the {@link DocIdSet} interface on top of a {@link SparseFixedBitSet}.  * @lucene.internal  */
end_comment
begin_class
DECL|class|SparseFixedBitDocIdSet
specifier|public
class|class
name|SparseFixedBitDocIdSet
extends|extends
name|DocIdSet
block|{
DECL|field|BASE_RAM_BYTES_USED
specifier|private
specifier|static
specifier|final
name|long
name|BASE_RAM_BYTES_USED
init|=
name|RamUsageEstimator
operator|.
name|shallowSizeOfInstance
argument_list|(
name|SparseFixedBitDocIdSet
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|set
specifier|private
specifier|final
name|SparseFixedBitSet
name|set
decl_stmt|;
DECL|field|cost
specifier|private
specifier|final
name|long
name|cost
decl_stmt|;
comment|/**    * Wrap the given {@link FixedBitSet} as a {@link DocIdSet}. The provided    * {@link FixedBitSet} should not be modified after having wrapped as a    * {@link DocIdSet}.    */
DECL|method|SparseFixedBitDocIdSet
specifier|public
name|SparseFixedBitDocIdSet
parameter_list|(
name|SparseFixedBitSet
name|set
parameter_list|,
name|long
name|cost
parameter_list|)
block|{
name|this
operator|.
name|set
operator|=
name|set
expr_stmt|;
name|this
operator|.
name|cost
operator|=
name|cost
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|bits
specifier|public
name|SparseFixedBitSet
name|bits
parameter_list|()
block|{
return|return
name|set
return|;
block|}
annotation|@
name|Override
DECL|method|isCacheable
specifier|public
name|boolean
name|isCacheable
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|iterator
specifier|public
name|DocIdSetIterator
name|iterator
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|SparseFixedBitSetIterator
argument_list|(
name|set
argument_list|,
name|cost
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|ramBytesUsed
specifier|public
name|long
name|ramBytesUsed
parameter_list|()
block|{
return|return
name|BASE_RAM_BYTES_USED
operator|+
name|set
operator|.
name|ramBytesUsed
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|"(set="
operator|+
name|set
operator|+
literal|",cost="
operator|+
name|cost
operator|+
literal|")"
return|;
block|}
block|}
end_class
end_unit
