begin_unit
begin_package
DECL|package|org.apache.lucene.util
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|DocIdSet
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|DocIdSetIterator
import|;
end_import
begin_comment
comment|/**  * This {@link DocIdSet} encodes the negation of another {@link DocIdSet}.  * It is cacheable and supports random-access if the underlying set is  * cacheable and supports random-access.  * @lucene.internal  */
end_comment
begin_class
DECL|class|NotDocIdSet
specifier|public
specifier|final
class|class
name|NotDocIdSet
extends|extends
name|DocIdSet
block|{
DECL|field|BASE_RAM_BYTES_USED
specifier|private
specifier|static
specifier|final
name|long
name|BASE_RAM_BYTES_USED
init|=
name|RamUsageEstimator
operator|.
name|shallowSizeOfInstance
argument_list|(
name|NotDocIdSet
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|maxDoc
specifier|private
specifier|final
name|int
name|maxDoc
decl_stmt|;
DECL|field|in
specifier|private
specifier|final
name|DocIdSet
name|in
decl_stmt|;
comment|/** Sole constructor. */
DECL|method|NotDocIdSet
specifier|public
name|NotDocIdSet
parameter_list|(
name|int
name|maxDoc
parameter_list|,
name|DocIdSet
name|in
parameter_list|)
block|{
name|this
operator|.
name|maxDoc
operator|=
name|maxDoc
expr_stmt|;
name|this
operator|.
name|in
operator|=
name|in
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|isCacheable
specifier|public
name|boolean
name|isCacheable
parameter_list|()
block|{
return|return
name|in
operator|.
name|isCacheable
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|bits
specifier|public
name|Bits
name|bits
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|Bits
name|inBits
init|=
name|in
operator|.
name|bits
argument_list|()
decl_stmt|;
if|if
condition|(
name|inBits
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|new
name|Bits
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|get
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
operator|!
name|inBits
operator|.
name|get
argument_list|(
name|index
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|length
parameter_list|()
block|{
return|return
name|inBits
operator|.
name|length
argument_list|()
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|ramBytesUsed
specifier|public
name|long
name|ramBytesUsed
parameter_list|()
block|{
return|return
name|BASE_RAM_BYTES_USED
operator|+
name|in
operator|.
name|ramBytesUsed
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|iterator
specifier|public
name|DocIdSetIterator
name|iterator
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|DocIdSetIterator
name|inIterator
init|=
name|in
operator|.
name|iterator
argument_list|()
decl_stmt|;
return|return
operator|new
name|DocIdSetIterator
argument_list|()
block|{
name|int
name|doc
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|nextSkippedDoc
init|=
operator|-
literal|1
decl_stmt|;
annotation|@
name|Override
specifier|public
name|int
name|nextDoc
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|doc
operator|==
name|NO_MORE_DOCS
condition|)
block|{
return|return
name|NO_MORE_DOCS
return|;
block|}
return|return
name|advance
argument_list|(
name|doc
operator|+
literal|1
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|advance
parameter_list|(
name|int
name|target
parameter_list|)
throws|throws
name|IOException
block|{
name|doc
operator|=
name|target
expr_stmt|;
if|if
condition|(
name|doc
operator|>
name|nextSkippedDoc
condition|)
block|{
name|nextSkippedDoc
operator|=
name|inIterator
operator|.
name|advance
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
name|doc
operator|>=
name|maxDoc
condition|)
block|{
return|return
name|doc
operator|=
name|NO_MORE_DOCS
return|;
block|}
assert|assert
name|doc
operator|<=
name|nextSkippedDoc
assert|;
if|if
condition|(
name|doc
operator|!=
name|nextSkippedDoc
condition|)
block|{
return|return
name|doc
return|;
block|}
name|doc
operator|+=
literal|1
expr_stmt|;
name|nextSkippedDoc
operator|=
name|inIterator
operator|.
name|nextDoc
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|docID
parameter_list|()
block|{
return|return
name|doc
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|cost
parameter_list|()
block|{
comment|// even if there are few docs in this set, iterating over all documents
comment|// costs O(maxDoc) in all cases
return|return
name|maxDoc
return|;
block|}
block|}
return|;
block|}
block|}
end_class
end_unit
