begin_unit
begin_package
DECL|package|org.apache.lucene.util.automaton
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|automaton
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_comment
comment|/**  * Automaton representation for matching char[].  */
end_comment
begin_class
DECL|class|CharacterRunAutomaton
specifier|public
class|class
name|CharacterRunAutomaton
extends|extends
name|RunAutomaton
block|{
comment|/**    * Construct with a default number of maxDeterminizedStates.    */
DECL|method|CharacterRunAutomaton
specifier|public
name|CharacterRunAutomaton
parameter_list|(
name|Automaton
name|a
parameter_list|)
block|{
name|this
argument_list|(
name|a
argument_list|,
name|Operations
operator|.
name|DEFAULT_MAX_DETERMINIZED_STATES
argument_list|)
expr_stmt|;
block|}
comment|/**    * Construct specifying maxDeterminizedStates.    * @param a Automaton to match    * @param maxDeterminizedStates maximum number of states that the automataon    *   can have once determinized.  If more states are required to determinize    *   it then a TooComplexToDeterminizeException is thrown.    */
DECL|method|CharacterRunAutomaton
specifier|public
name|CharacterRunAutomaton
parameter_list|(
name|Automaton
name|a
parameter_list|,
name|int
name|maxDeterminizedStates
parameter_list|)
block|{
name|super
argument_list|(
name|a
argument_list|,
name|Character
operator|.
name|MAX_CODE_POINT
argument_list|,
literal|false
argument_list|,
name|maxDeterminizedStates
argument_list|)
expr_stmt|;
block|}
comment|/**    * Returns true if the given string is accepted by this automaton.    */
DECL|method|run
specifier|public
name|boolean
name|run
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|int
name|p
init|=
name|initial
decl_stmt|;
name|int
name|l
init|=
name|s
operator|.
name|length
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|,
name|cp
init|=
literal|0
init|;
name|i
operator|<
name|l
condition|;
name|i
operator|+=
name|Character
operator|.
name|charCount
argument_list|(
name|cp
argument_list|)
control|)
block|{
name|p
operator|=
name|step
argument_list|(
name|p
argument_list|,
name|cp
operator|=
name|s
operator|.
name|codePointAt
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|p
operator|==
operator|-
literal|1
condition|)
return|return
literal|false
return|;
block|}
return|return
name|accept
index|[
name|p
index|]
return|;
block|}
comment|/**    * Returns true if the given string is accepted by this automaton    */
DECL|method|run
specifier|public
name|boolean
name|run
parameter_list|(
name|char
index|[]
name|s
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|int
name|p
init|=
name|initial
decl_stmt|;
name|int
name|l
init|=
name|offset
operator|+
name|length
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|offset
init|,
name|cp
init|=
literal|0
init|;
name|i
operator|<
name|l
condition|;
name|i
operator|+=
name|Character
operator|.
name|charCount
argument_list|(
name|cp
argument_list|)
control|)
block|{
name|p
operator|=
name|step
argument_list|(
name|p
argument_list|,
name|cp
operator|=
name|Character
operator|.
name|codePointAt
argument_list|(
name|s
argument_list|,
name|i
argument_list|,
name|l
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|p
operator|==
operator|-
literal|1
condition|)
return|return
literal|false
return|;
block|}
return|return
name|accept
index|[
name|p
index|]
return|;
block|}
block|}
end_class
end_unit
