begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.util
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|DocIdSetIterator
import|;
end_import
begin_comment
comment|/** An iterator to iterate over set bits in an OpenBitSet.  * This is faster than nextSetBit() for iterating over the complete set of bits,  * especially when the density of the bits set is high.  */
end_comment
begin_class
DECL|class|OpenBitSetIterator
specifier|public
class|class
name|OpenBitSetIterator
extends|extends
name|DocIdSetIterator
block|{
comment|// hmmm, what about an iterator that finds zeros though,
comment|// or a reverse iterator... should they be separate classes
comment|// for efficiency, or have a common root interface?  (or
comment|// maybe both?  could ask for a SetBitsIterator, etc...
DECL|field|arr
specifier|final
name|long
index|[]
name|arr
decl_stmt|;
DECL|field|words
specifier|final
name|int
name|words
decl_stmt|;
DECL|field|i
specifier|private
name|int
name|i
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|word
specifier|private
name|long
name|word
decl_stmt|;
DECL|field|wordShift
specifier|private
name|int
name|wordShift
decl_stmt|;
DECL|field|indexArray
specifier|private
name|int
name|indexArray
decl_stmt|;
DECL|field|curDocId
specifier|private
name|int
name|curDocId
init|=
operator|-
literal|1
decl_stmt|;
DECL|method|OpenBitSetIterator
specifier|public
name|OpenBitSetIterator
parameter_list|(
name|OpenBitSet
name|obs
parameter_list|)
block|{
name|this
argument_list|(
name|obs
operator|.
name|getBits
argument_list|()
argument_list|,
name|obs
operator|.
name|getNumWords
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|OpenBitSetIterator
specifier|public
name|OpenBitSetIterator
parameter_list|(
name|long
index|[]
name|bits
parameter_list|,
name|int
name|numWords
parameter_list|)
block|{
name|arr
operator|=
name|bits
expr_stmt|;
name|words
operator|=
name|numWords
expr_stmt|;
block|}
comment|// 64 bit shifts
DECL|method|shift
specifier|private
name|void
name|shift
parameter_list|()
block|{
if|if
condition|(
operator|(
name|int
operator|)
name|word
operator|==
literal|0
condition|)
block|{
name|wordShift
operator|+=
literal|32
expr_stmt|;
name|word
operator|=
name|word
operator|>>>
literal|32
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|word
operator|&
literal|0x0000FFFF
operator|)
operator|==
literal|0
condition|)
block|{
name|wordShift
operator|+=
literal|16
expr_stmt|;
name|word
operator|>>>=
literal|16
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|word
operator|&
literal|0x000000FF
operator|)
operator|==
literal|0
condition|)
block|{
name|wordShift
operator|+=
literal|8
expr_stmt|;
name|word
operator|>>>=
literal|8
expr_stmt|;
block|}
name|indexArray
operator|=
name|BitUtil
operator|.
name|bitList
argument_list|(
operator|(
name|byte
operator|)
name|word
argument_list|)
expr_stmt|;
block|}
comment|/***** alternate shift implementations   // 32 bit shifts, but a long shift needed at the end   private void shift2() {     int y = (int)word;     if (y==0) {wordShift +=32; y = (int)(word>>>32); }     if ((y& 0x0000FFFF) == 0) { wordShift +=16; y>>>=16; }     if ((y& 0x000000FF) == 0) { wordShift +=8; y>>>=8; }     indexArray = bitlist[y& 0xff];     word>>>= (wordShift +1);   }    private void shift3() {     int lower = (int)word;     int lowByte = lower& 0xff;     if (lowByte != 0) {       indexArray=bitlist[lowByte];       return;     }     shift();   }   ******/
annotation|@
name|Override
DECL|method|nextDoc
specifier|public
name|int
name|nextDoc
parameter_list|()
block|{
if|if
condition|(
name|indexArray
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|word
operator|!=
literal|0
condition|)
block|{
name|word
operator|>>>=
literal|8
expr_stmt|;
name|wordShift
operator|+=
literal|8
expr_stmt|;
block|}
while|while
condition|(
name|word
operator|==
literal|0
condition|)
block|{
if|if
condition|(
operator|++
name|i
operator|>=
name|words
condition|)
block|{
return|return
name|curDocId
operator|=
name|NO_MORE_DOCS
return|;
block|}
name|word
operator|=
name|arr
index|[
name|i
index|]
expr_stmt|;
name|wordShift
operator|=
operator|-
literal|1
expr_stmt|;
comment|// loop invariant code motion should move this
block|}
comment|// after the first time, should I go with a linear search, or
comment|// stick with the binary search in shift?
name|shift
argument_list|()
expr_stmt|;
block|}
name|int
name|bitIndex
init|=
operator|(
name|indexArray
operator|&
literal|0x0f
operator|)
operator|+
name|wordShift
decl_stmt|;
name|indexArray
operator|>>>=
literal|4
expr_stmt|;
comment|// should i<<6 be cached as a separate variable?
comment|// it would only save one cycle in the best circumstances.
return|return
name|curDocId
operator|=
operator|(
name|i
operator|<<
literal|6
operator|)
operator|+
name|bitIndex
return|;
block|}
annotation|@
name|Override
DECL|method|advance
specifier|public
name|int
name|advance
parameter_list|(
name|int
name|target
parameter_list|)
block|{
name|indexArray
operator|=
literal|0
expr_stmt|;
name|i
operator|=
name|target
operator|>>
literal|6
expr_stmt|;
if|if
condition|(
name|i
operator|>=
name|words
condition|)
block|{
name|word
operator|=
literal|0
expr_stmt|;
comment|// setup so next() will also return -1
return|return
name|curDocId
operator|=
name|NO_MORE_DOCS
return|;
block|}
name|wordShift
operator|=
name|target
operator|&
literal|0x3f
expr_stmt|;
name|word
operator|=
name|arr
index|[
name|i
index|]
operator|>>>
name|wordShift
expr_stmt|;
if|if
condition|(
name|word
operator|!=
literal|0
condition|)
block|{
name|wordShift
operator|--
expr_stmt|;
comment|// compensate for 1 based arrIndex
block|}
else|else
block|{
while|while
condition|(
name|word
operator|==
literal|0
condition|)
block|{
if|if
condition|(
operator|++
name|i
operator|>=
name|words
condition|)
block|{
return|return
name|curDocId
operator|=
name|NO_MORE_DOCS
return|;
block|}
name|word
operator|=
name|arr
index|[
name|i
index|]
expr_stmt|;
block|}
name|wordShift
operator|=
operator|-
literal|1
expr_stmt|;
block|}
name|shift
argument_list|()
expr_stmt|;
name|int
name|bitIndex
init|=
operator|(
name|indexArray
operator|&
literal|0x0f
operator|)
operator|+
name|wordShift
decl_stmt|;
name|indexArray
operator|>>>=
literal|4
expr_stmt|;
comment|// should i<<6 be cached as a separate variable?
comment|// it would only save one cycle in the best circumstances.
return|return
name|curDocId
operator|=
operator|(
name|i
operator|<<
literal|6
operator|)
operator|+
name|bitIndex
return|;
block|}
annotation|@
name|Override
DECL|method|docID
specifier|public
name|int
name|docID
parameter_list|()
block|{
return|return
name|curDocId
return|;
block|}
annotation|@
name|Override
DECL|method|cost
specifier|public
name|long
name|cost
parameter_list|()
block|{
return|return
name|words
operator|/
literal|64
return|;
block|}
block|}
end_class
end_unit
