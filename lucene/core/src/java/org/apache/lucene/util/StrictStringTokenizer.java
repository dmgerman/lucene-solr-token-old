begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.util
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
package|;
end_package
begin_comment
comment|/** Used for parsing Version strings so we don't have to  *  use overkill String.split nor StringTokenizer (which silently  *  skips empty tokens). */
end_comment
begin_class
DECL|class|StrictStringTokenizer
specifier|final
class|class
name|StrictStringTokenizer
block|{
DECL|method|StrictStringTokenizer
specifier|public
name|StrictStringTokenizer
parameter_list|(
name|String
name|s
parameter_list|,
name|char
name|delimiter
parameter_list|)
block|{
name|this
operator|.
name|s
operator|=
name|s
expr_stmt|;
name|this
operator|.
name|delimiter
operator|=
name|delimiter
expr_stmt|;
block|}
DECL|method|nextToken
specifier|public
specifier|final
name|String
name|nextToken
parameter_list|()
block|{
if|if
condition|(
name|pos
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"no more tokens"
argument_list|)
throw|;
block|}
name|int
name|pos1
init|=
name|s
operator|.
name|indexOf
argument_list|(
name|delimiter
argument_list|,
name|pos
argument_list|)
decl_stmt|;
name|String
name|s1
decl_stmt|;
if|if
condition|(
name|pos1
operator|>=
literal|0
condition|)
block|{
name|s1
operator|=
name|s
operator|.
name|substring
argument_list|(
name|pos
argument_list|,
name|pos1
argument_list|)
expr_stmt|;
name|pos
operator|=
name|pos1
operator|+
literal|1
expr_stmt|;
block|}
else|else
block|{
name|s1
operator|=
name|s
operator|.
name|substring
argument_list|(
name|pos
argument_list|)
expr_stmt|;
name|pos
operator|=
operator|-
literal|1
expr_stmt|;
block|}
return|return
name|s1
return|;
block|}
DECL|method|hasMoreTokens
specifier|public
specifier|final
name|boolean
name|hasMoreTokens
parameter_list|()
block|{
return|return
name|pos
operator|>=
literal|0
return|;
block|}
DECL|field|s
specifier|private
specifier|final
name|String
name|s
decl_stmt|;
DECL|field|delimiter
specifier|private
specifier|final
name|char
name|delimiter
decl_stmt|;
DECL|field|pos
specifier|private
name|int
name|pos
decl_stmt|;
block|}
end_class
end_unit
