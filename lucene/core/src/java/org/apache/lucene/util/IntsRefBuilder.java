begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.util
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
package|;
end_package
begin_comment
comment|/**  * A builder for {@link IntsRef} instances.  * @lucene.internal  */
end_comment
begin_class
DECL|class|IntsRefBuilder
specifier|public
class|class
name|IntsRefBuilder
block|{
DECL|field|ref
specifier|private
specifier|final
name|IntsRef
name|ref
decl_stmt|;
comment|/** Sole constructor. */
DECL|method|IntsRefBuilder
specifier|public
name|IntsRefBuilder
parameter_list|()
block|{
name|ref
operator|=
operator|new
name|IntsRef
argument_list|()
expr_stmt|;
block|}
comment|/** Return a reference to the ints of this builder. */
DECL|method|ints
specifier|public
name|int
index|[]
name|ints
parameter_list|()
block|{
return|return
name|ref
operator|.
name|ints
return|;
block|}
comment|/** Return the number of ints in this buffer. */
DECL|method|length
specifier|public
name|int
name|length
parameter_list|()
block|{
return|return
name|ref
operator|.
name|length
return|;
block|}
comment|/** Set the length. */
DECL|method|setLength
specifier|public
name|void
name|setLength
parameter_list|(
name|int
name|length
parameter_list|)
block|{
name|this
operator|.
name|ref
operator|.
name|length
operator|=
name|length
expr_stmt|;
block|}
comment|/** Empty this builder. */
DECL|method|clear
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/** Return the int at the given offset. */
DECL|method|intAt
specifier|public
name|int
name|intAt
parameter_list|(
name|int
name|offset
parameter_list|)
block|{
return|return
name|ref
operator|.
name|ints
index|[
name|offset
index|]
return|;
block|}
comment|/** Set an int. */
DECL|method|setIntAt
specifier|public
name|void
name|setIntAt
parameter_list|(
name|int
name|offset
parameter_list|,
name|int
name|b
parameter_list|)
block|{
name|ref
operator|.
name|ints
index|[
name|offset
index|]
operator|=
name|b
expr_stmt|;
block|}
comment|/** Append the provided int to this buffer. */
DECL|method|append
specifier|public
name|void
name|append
parameter_list|(
name|int
name|i
parameter_list|)
block|{
name|grow
argument_list|(
name|ref
operator|.
name|length
operator|+
literal|1
argument_list|)
expr_stmt|;
name|ref
operator|.
name|ints
index|[
name|ref
operator|.
name|length
operator|++
index|]
operator|=
name|i
expr_stmt|;
block|}
comment|/**    * Used to grow the reference array.    *    * In general this should not be used as it does not take the offset into account.    * @lucene.internal */
DECL|method|grow
specifier|public
name|void
name|grow
parameter_list|(
name|int
name|newLength
parameter_list|)
block|{
name|ref
operator|.
name|ints
operator|=
name|ArrayUtil
operator|.
name|grow
argument_list|(
name|ref
operator|.
name|ints
argument_list|,
name|newLength
argument_list|)
expr_stmt|;
block|}
comment|/**    * Copies the given array into this instance.    */
DECL|method|copyInts
specifier|public
name|void
name|copyInts
parameter_list|(
name|int
index|[]
name|otherInts
parameter_list|,
name|int
name|otherOffset
parameter_list|,
name|int
name|otherLength
parameter_list|)
block|{
name|grow
argument_list|(
name|otherLength
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|otherInts
argument_list|,
name|otherOffset
argument_list|,
name|ref
operator|.
name|ints
argument_list|,
literal|0
argument_list|,
name|otherLength
argument_list|)
expr_stmt|;
name|ref
operator|.
name|length
operator|=
name|otherLength
expr_stmt|;
block|}
comment|/**    * Copies the given array into this instance.    */
DECL|method|copyInts
specifier|public
name|void
name|copyInts
parameter_list|(
name|IntsRef
name|ints
parameter_list|)
block|{
name|copyInts
argument_list|(
name|ints
operator|.
name|ints
argument_list|,
name|ints
operator|.
name|offset
argument_list|,
name|ints
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
comment|/**    * Copy the given UTF-8 bytes into this builder. Works as if the bytes were    * first converted from UTF-8 to UTF-32 and then copied into this builder.    */
DECL|method|copyUTF8Bytes
specifier|public
name|void
name|copyUTF8Bytes
parameter_list|(
name|BytesRef
name|bytes
parameter_list|)
block|{
name|grow
argument_list|(
name|bytes
operator|.
name|length
argument_list|)
expr_stmt|;
name|ref
operator|.
name|length
operator|=
name|UnicodeUtil
operator|.
name|UTF8toUTF32
argument_list|(
name|bytes
argument_list|,
name|ref
operator|.
name|ints
argument_list|)
expr_stmt|;
block|}
comment|/**    * Return a {@link IntsRef} that points to the internal content of this    * builder. Any update to the content of this builder might invalidate    * the provided<code>ref</code> and vice-versa.    */
DECL|method|get
specifier|public
name|IntsRef
name|get
parameter_list|()
block|{
assert|assert
name|ref
operator|.
name|offset
operator|==
literal|0
operator|:
literal|"Modifying the offset of the returned ref is illegal"
assert|;
return|return
name|ref
return|;
block|}
comment|/** Build a new {@link CharsRef} that has the same content as this builder. */
DECL|method|toIntsRef
specifier|public
name|IntsRef
name|toIntsRef
parameter_list|()
block|{
return|return
name|IntsRef
operator|.
name|deepCopyOf
argument_list|(
name|get
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
end_class
end_unit
