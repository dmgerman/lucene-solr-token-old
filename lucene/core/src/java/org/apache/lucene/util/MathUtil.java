begin_unit
begin_package
DECL|package|org.apache.lucene.util
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigInteger
import|;
end_import
begin_comment
comment|/**  * Math static utility methods.  */
end_comment
begin_class
DECL|class|MathUtil
specifier|public
specifier|final
class|class
name|MathUtil
block|{
comment|// No instance:
DECL|method|MathUtil
specifier|private
name|MathUtil
parameter_list|()
block|{   }
comment|/**    * Returns {@code x<= 0 ? 0 : Math.floor(Math.log(x) / Math.log(base))}    * @param base must be {@code> 1}    */
DECL|method|log
specifier|public
specifier|static
name|int
name|log
parameter_list|(
name|long
name|x
parameter_list|,
name|int
name|base
parameter_list|)
block|{
if|if
condition|(
name|base
operator|<=
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"base must be> 1"
argument_list|)
throw|;
block|}
name|int
name|ret
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|x
operator|>=
name|base
condition|)
block|{
name|x
operator|/=
name|base
expr_stmt|;
name|ret
operator|++
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
comment|/** Return the greatest common divisor of<code>a</code> and<code>b</code>,    *  consistently with {@link BigInteger#gcd(BigInteger)}.    *<p><b>NOTE</b>: A greatest common divisor must be positive, but    *<code>2^64</code> cannot be expressed as a long although it    *  is the GCD of {@link Long#MIN_VALUE} and<code>0</code> and the GCD of    *  {@link Long#MIN_VALUE} and {@link Long#MIN_VALUE}. So in these 2 cases,    *  and only them, this method will return {@link Long#MIN_VALUE}. */
comment|// see http://en.wikipedia.org/wiki/Binary_GCD_algorithm#Iterative_version_in_C.2B.2B_using_ctz_.28count_trailing_zeros.29
DECL|method|gcd
specifier|public
specifier|static
name|long
name|gcd
parameter_list|(
name|long
name|a
parameter_list|,
name|long
name|b
parameter_list|)
block|{
name|a
operator|=
name|Math
operator|.
name|abs
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|b
operator|=
name|Math
operator|.
name|abs
argument_list|(
name|b
argument_list|)
expr_stmt|;
if|if
condition|(
name|a
operator|==
literal|0
condition|)
block|{
return|return
name|b
return|;
block|}
elseif|else
if|if
condition|(
name|b
operator|==
literal|0
condition|)
block|{
return|return
name|a
return|;
block|}
specifier|final
name|int
name|commonTrailingZeros
init|=
name|Long
operator|.
name|numberOfTrailingZeros
argument_list|(
name|a
operator||
name|b
argument_list|)
decl_stmt|;
name|a
operator|>>>=
name|Long
operator|.
name|numberOfTrailingZeros
argument_list|(
name|a
argument_list|)
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|b
operator|>>>=
name|Long
operator|.
name|numberOfTrailingZeros
argument_list|(
name|b
argument_list|)
expr_stmt|;
if|if
condition|(
name|a
operator|==
name|b
condition|)
block|{
break|break;
block|}
elseif|else
if|if
condition|(
name|a
operator|>
name|b
operator|||
name|a
operator|==
name|Long
operator|.
name|MIN_VALUE
condition|)
block|{
comment|// MIN_VALUE is treated as 2^64
specifier|final
name|long
name|tmp
init|=
name|a
decl_stmt|;
name|a
operator|=
name|b
expr_stmt|;
name|b
operator|=
name|tmp
expr_stmt|;
block|}
if|if
condition|(
name|a
operator|==
literal|1
condition|)
block|{
break|break;
block|}
name|b
operator|-=
name|a
expr_stmt|;
block|}
return|return
name|a
operator|<<
name|commonTrailingZeros
return|;
block|}
block|}
end_class
end_unit
