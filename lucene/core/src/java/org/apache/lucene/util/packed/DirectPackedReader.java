begin_unit
begin_package
DECL|package|org.apache.lucene.util.packed
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|packed
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexInput
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_comment
comment|/* Reads directly from disk on each get */
end_comment
begin_comment
comment|// just for back compat, use DirectReader/DirectWriter for more efficient impl
end_comment
begin_class
DECL|class|DirectPackedReader
class|class
name|DirectPackedReader
extends|extends
name|PackedInts
operator|.
name|ReaderImpl
block|{
DECL|field|in
specifier|final
name|IndexInput
name|in
decl_stmt|;
DECL|field|bitsPerValue
specifier|final
name|int
name|bitsPerValue
decl_stmt|;
DECL|field|startPointer
specifier|final
name|long
name|startPointer
decl_stmt|;
DECL|field|valueMask
specifier|final
name|long
name|valueMask
decl_stmt|;
DECL|method|DirectPackedReader
name|DirectPackedReader
parameter_list|(
name|int
name|bitsPerValue
parameter_list|,
name|int
name|valueCount
parameter_list|,
name|IndexInput
name|in
parameter_list|)
block|{
name|super
argument_list|(
name|valueCount
argument_list|)
expr_stmt|;
name|this
operator|.
name|in
operator|=
name|in
expr_stmt|;
name|this
operator|.
name|bitsPerValue
operator|=
name|bitsPerValue
expr_stmt|;
name|startPointer
operator|=
name|in
operator|.
name|getFilePointer
argument_list|()
expr_stmt|;
if|if
condition|(
name|bitsPerValue
operator|==
literal|64
condition|)
block|{
name|valueMask
operator|=
operator|-
literal|1L
expr_stmt|;
block|}
else|else
block|{
name|valueMask
operator|=
operator|(
literal|1L
operator|<<
name|bitsPerValue
operator|)
operator|-
literal|1
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|get
specifier|public
name|long
name|get
parameter_list|(
name|int
name|index
parameter_list|)
block|{
specifier|final
name|long
name|majorBitPos
init|=
operator|(
name|long
operator|)
name|index
operator|*
name|bitsPerValue
decl_stmt|;
specifier|final
name|long
name|elementPos
init|=
name|majorBitPos
operator|>>>
literal|3
decl_stmt|;
try|try
block|{
name|in
operator|.
name|seek
argument_list|(
name|startPointer
operator|+
name|elementPos
argument_list|)
expr_stmt|;
specifier|final
name|int
name|bitPos
init|=
call|(
name|int
call|)
argument_list|(
name|majorBitPos
operator|&
literal|7
argument_list|)
decl_stmt|;
comment|// round up bits to a multiple of 8 to find total bytes needed to read
specifier|final
name|int
name|roundedBits
init|=
operator|(
operator|(
name|bitPos
operator|+
name|bitsPerValue
operator|+
literal|7
operator|)
operator|&
operator|~
literal|7
operator|)
decl_stmt|;
comment|// the number of extra bits read at the end to shift out
name|int
name|shiftRightBits
init|=
name|roundedBits
operator|-
name|bitPos
operator|-
name|bitsPerValue
decl_stmt|;
name|long
name|rawValue
decl_stmt|;
switch|switch
condition|(
name|roundedBits
operator|>>>
literal|3
condition|)
block|{
case|case
literal|1
case|:
name|rawValue
operator|=
name|in
operator|.
name|readByte
argument_list|()
expr_stmt|;
break|break;
case|case
literal|2
case|:
name|rawValue
operator|=
name|in
operator|.
name|readShort
argument_list|()
expr_stmt|;
break|break;
case|case
literal|3
case|:
name|rawValue
operator|=
operator|(
operator|(
name|long
operator|)
name|in
operator|.
name|readShort
argument_list|()
operator|<<
literal|8
operator|)
operator||
operator|(
name|in
operator|.
name|readByte
argument_list|()
operator|&
literal|0xFFL
operator|)
expr_stmt|;
break|break;
case|case
literal|4
case|:
name|rawValue
operator|=
name|in
operator|.
name|readInt
argument_list|()
expr_stmt|;
break|break;
case|case
literal|5
case|:
name|rawValue
operator|=
operator|(
operator|(
name|long
operator|)
name|in
operator|.
name|readInt
argument_list|()
operator|<<
literal|8
operator|)
operator||
operator|(
name|in
operator|.
name|readByte
argument_list|()
operator|&
literal|0xFFL
operator|)
expr_stmt|;
break|break;
case|case
literal|6
case|:
name|rawValue
operator|=
operator|(
operator|(
name|long
operator|)
name|in
operator|.
name|readInt
argument_list|()
operator|<<
literal|16
operator|)
operator||
operator|(
name|in
operator|.
name|readShort
argument_list|()
operator|&
literal|0xFFFFL
operator|)
expr_stmt|;
break|break;
case|case
literal|7
case|:
name|rawValue
operator|=
operator|(
operator|(
name|long
operator|)
name|in
operator|.
name|readInt
argument_list|()
operator|<<
literal|24
operator|)
operator||
operator|(
operator|(
name|in
operator|.
name|readShort
argument_list|()
operator|&
literal|0xFFFFL
operator|)
operator|<<
literal|8
operator|)
operator||
operator|(
name|in
operator|.
name|readByte
argument_list|()
operator|&
literal|0xFFL
operator|)
expr_stmt|;
break|break;
case|case
literal|8
case|:
name|rawValue
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
break|break;
case|case
literal|9
case|:
comment|// We must be very careful not to shift out relevant bits. So we account for right shift
comment|// we would normally do on return here, and reset it.
name|rawValue
operator|=
operator|(
name|in
operator|.
name|readLong
argument_list|()
operator|<<
operator|(
literal|8
operator|-
name|shiftRightBits
operator|)
operator|)
operator||
operator|(
operator|(
name|in
operator|.
name|readByte
argument_list|()
operator|&
literal|0xFFL
operator|)
operator|>>>
name|shiftRightBits
operator|)
expr_stmt|;
name|shiftRightBits
operator|=
literal|0
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"bitsPerValue too large: "
operator|+
name|bitsPerValue
argument_list|)
throw|;
block|}
return|return
operator|(
name|rawValue
operator|>>>
name|shiftRightBits
operator|)
operator|&
name|valueMask
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|ramBytesUsed
specifier|public
name|long
name|ramBytesUsed
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
block|}
end_class
end_unit
