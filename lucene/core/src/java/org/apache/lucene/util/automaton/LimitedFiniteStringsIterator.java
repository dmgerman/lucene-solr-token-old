begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.util.automaton
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|automaton
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IntsRef
import|;
end_import
begin_comment
comment|/**  * {@link FiniteStringsIterator} which limits the number of iterated accepted strings.  * If more than<code>limit</code> strings are accepted,  * the first<code>limit</code> strings found are returned.  *  *<p>If the {@link Automaton} has cycles then this iterator may throw an {@code  * IllegalArgumentException}, but this is not guaranteed!  *  *<p>Be aware that the iteration order is implementation dependent  * and may change across releases.  *  * @lucene.experimental  */
end_comment
begin_class
DECL|class|LimitedFiniteStringsIterator
specifier|public
class|class
name|LimitedFiniteStringsIterator
extends|extends
name|FiniteStringsIterator
block|{
comment|/**    * Maximum number of finite strings to create.    */
DECL|field|limit
specifier|private
name|int
name|limit
init|=
name|Integer
operator|.
name|MAX_VALUE
decl_stmt|;
comment|/**    * Number of generated finite strings.    */
DECL|field|count
specifier|private
name|int
name|count
init|=
literal|0
decl_stmt|;
comment|/**    * Constructor.    *    * @param a Automaton to create finite string from.    * @param limit Maximum number of finite strings to create, or -1 for infinite.    */
DECL|method|LimitedFiniteStringsIterator
specifier|public
name|LimitedFiniteStringsIterator
parameter_list|(
name|Automaton
name|a
parameter_list|,
name|int
name|limit
parameter_list|)
block|{
name|super
argument_list|(
name|a
argument_list|)
expr_stmt|;
if|if
condition|(
name|limit
operator|!=
operator|-
literal|1
operator|&&
name|limit
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"limit must be -1 (which means no limit), or> 0; got: "
operator|+
name|limit
argument_list|)
throw|;
block|}
name|this
operator|.
name|limit
operator|=
name|limit
operator|>
literal|0
condition|?
name|limit
else|:
name|Integer
operator|.
name|MAX_VALUE
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|next
specifier|public
name|IntsRef
name|next
parameter_list|()
block|{
if|if
condition|(
name|count
operator|>=
name|limit
condition|)
block|{
comment|// Abort on limit.
return|return
literal|null
return|;
block|}
name|IntsRef
name|result
init|=
name|super
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
name|count
operator|++
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**    * Number of iterated finite strings.    */
DECL|method|size
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|count
return|;
block|}
block|}
end_class
end_unit
