begin_unit
begin_package
DECL|package|org.apache.lucene.util
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|AtomicReaderContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReaderContext
import|;
end_import
begin_comment
comment|/**  * Common util methods for dealing with {@link IndexReader}s.  *  * @lucene.internal  */
end_comment
begin_class
DECL|class|ReaderUtil
specifier|public
specifier|final
class|class
name|ReaderUtil
block|{
DECL|method|ReaderUtil
specifier|private
name|ReaderUtil
parameter_list|()
block|{}
comment|// no instance
comment|/**    * Walks up the reader tree and return the given context's top level reader    * context, or in other words the reader tree's root context.    */
DECL|method|getTopLevelContext
specifier|public
specifier|static
name|IndexReaderContext
name|getTopLevelContext
parameter_list|(
name|IndexReaderContext
name|context
parameter_list|)
block|{
while|while
condition|(
name|context
operator|.
name|parent
operator|!=
literal|null
condition|)
block|{
name|context
operator|=
name|context
operator|.
name|parent
expr_stmt|;
block|}
return|return
name|context
return|;
block|}
comment|/**    * Returns index of the searcher/reader for document<code>n</code> in the    * array used to construct this searcher/reader.    */
DECL|method|subIndex
specifier|public
specifier|static
name|int
name|subIndex
parameter_list|(
name|int
name|n
parameter_list|,
name|int
index|[]
name|docStarts
parameter_list|)
block|{
comment|// find
comment|// searcher/reader for doc n:
name|int
name|size
init|=
name|docStarts
operator|.
name|length
decl_stmt|;
name|int
name|lo
init|=
literal|0
decl_stmt|;
comment|// search starts array
name|int
name|hi
init|=
name|size
operator|-
literal|1
decl_stmt|;
comment|// for first element less than n, return its index
while|while
condition|(
name|hi
operator|>=
name|lo
condition|)
block|{
name|int
name|mid
init|=
operator|(
name|lo
operator|+
name|hi
operator|)
operator|>>>
literal|1
decl_stmt|;
name|int
name|midValue
init|=
name|docStarts
index|[
name|mid
index|]
decl_stmt|;
if|if
condition|(
name|n
operator|<
name|midValue
condition|)
name|hi
operator|=
name|mid
operator|-
literal|1
expr_stmt|;
elseif|else
if|if
condition|(
name|n
operator|>
name|midValue
condition|)
name|lo
operator|=
name|mid
operator|+
literal|1
expr_stmt|;
else|else
block|{
comment|// found a match
while|while
condition|(
name|mid
operator|+
literal|1
operator|<
name|size
operator|&&
name|docStarts
index|[
name|mid
operator|+
literal|1
index|]
operator|==
name|midValue
condition|)
block|{
name|mid
operator|++
expr_stmt|;
comment|// scan to last match
block|}
return|return
name|mid
return|;
block|}
block|}
return|return
name|hi
return|;
block|}
comment|/**    * Returns index of the searcher/reader for document<code>n</code> in the    * array used to construct this searcher/reader.    */
DECL|method|subIndex
specifier|public
specifier|static
name|int
name|subIndex
parameter_list|(
name|int
name|n
parameter_list|,
name|List
argument_list|<
name|AtomicReaderContext
argument_list|>
name|leaves
parameter_list|)
block|{
comment|// find
comment|// searcher/reader for doc n:
name|int
name|size
init|=
name|leaves
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|lo
init|=
literal|0
decl_stmt|;
comment|// search starts array
name|int
name|hi
init|=
name|size
operator|-
literal|1
decl_stmt|;
comment|// for first element less than n, return its index
while|while
condition|(
name|hi
operator|>=
name|lo
condition|)
block|{
name|int
name|mid
init|=
operator|(
name|lo
operator|+
name|hi
operator|)
operator|>>>
literal|1
decl_stmt|;
name|int
name|midValue
init|=
name|leaves
operator|.
name|get
argument_list|(
name|mid
argument_list|)
operator|.
name|docBase
decl_stmt|;
if|if
condition|(
name|n
operator|<
name|midValue
condition|)
name|hi
operator|=
name|mid
operator|-
literal|1
expr_stmt|;
elseif|else
if|if
condition|(
name|n
operator|>
name|midValue
condition|)
name|lo
operator|=
name|mid
operator|+
literal|1
expr_stmt|;
else|else
block|{
comment|// found a match
while|while
condition|(
name|mid
operator|+
literal|1
operator|<
name|size
operator|&&
name|leaves
operator|.
name|get
argument_list|(
name|mid
operator|+
literal|1
argument_list|)
operator|.
name|docBase
operator|==
name|midValue
condition|)
block|{
name|mid
operator|++
expr_stmt|;
comment|// scan to last match
block|}
return|return
name|mid
return|;
block|}
block|}
return|return
name|hi
return|;
block|}
block|}
end_class
end_unit
