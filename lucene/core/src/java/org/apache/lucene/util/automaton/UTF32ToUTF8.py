begin_unit
comment|'# Licensed to the Apache Software Foundation (ASF) under one or more'
nl|'\n'
comment|'# contributor license agreements.  See the NOTICE file distributed with'
nl|'\n'
comment|'# this work for additional information regarding copyright ownership.'
nl|'\n'
comment|'# The ASF licenses this file to You under the Apache License, Version 2.0'
nl|'\n'
comment|'# (the "License"); you may not use this file except in compliance with'
nl|'\n'
comment|'# the License.  You may obtain a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#     http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'# distributed under the License is distributed on an "AS IS" BASIS,'
nl|'\n'
comment|'# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.'
nl|'\n'
comment|'# See the License for the specific language governing permissions and'
nl|'\n'
comment|'# limitations under the License.'
nl|'\n'
nl|'\n'
name|'import'
name|'types'
newline|'\n'
name|'import'
name|'os'
newline|'\n'
name|'import'
name|'sys'
newline|'\n'
name|'import'
name|'random'
newline|'\n'
nl|'\n'
DECL|variable|MAX_UNICODE
name|'MAX_UNICODE'
op|'='
number|'0x10FFFF'
newline|'\n'
nl|'\n'
comment|'# TODO'
nl|'\n'
comment|'#   - could be more minimal'
nl|'\n'
comment|'#     - eg when bracket lands on a utf8 boundary, like 3 - 2047 -- they can share the two * edges'
nl|'\n'
comment|'#     - also 3 2048 or 3 65536 -- it should not have an * down the red path, but it does'
nl|'\n'
nl|'\n'
comment|'# MASKS[0] is bottom 1-bit'
nl|'\n'
comment|'# MASKS[1] is bottom 2-bits'
nl|'\n'
comment|'# ...'
nl|'\n'
nl|'\n'
DECL|variable|utf8Ranges
name|'utf8Ranges'
op|'='
op|'['
op|'('
number|'0'
op|','
number|'127'
op|')'
op|','
nl|'\n'
op|'('
number|'128'
op|','
number|'2047'
op|')'
op|','
nl|'\n'
op|'('
number|'2048'
op|','
number|'65535'
op|')'
op|','
nl|'\n'
op|'('
number|'65536'
op|','
number|'1114111'
op|')'
op|']'
newline|'\n'
nl|'\n'
DECL|variable|typeToColor
name|'typeToColor'
op|'='
op|'{'
string|"'startend'"
op|':'
string|"'purple'"
op|','
nl|'\n'
string|"'start'"
op|':'
string|"'blue'"
op|','
nl|'\n'
string|"'end'"
op|':'
string|"'red'"
op|'}'
newline|'\n'
nl|'\n'
DECL|class|FSA
name|'class'
name|'FSA'
op|':'
newline|'\n'
nl|'\n'
DECL|member|__init__
indent|'  '
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# maps fromNode -> (startUTF8, endUTF8, endNode)'
nl|'\n'
indent|'    '
name|'self'
op|'.'
name|'states'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'nodeUpto'
op|'='
number|'0'
newline|'\n'
nl|'\n'
DECL|member|run
dedent|''
name|'def'
name|'run'
op|'('
name|'self'
op|','
name|'bytes'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'state'
op|'='
name|'self'
op|'.'
name|'start'
newline|'\n'
name|'for'
name|'b'
name|'in'
name|'bytes'
op|':'
newline|'\n'
indent|'      '
name|'found'
op|'='
name|'False'
newline|'\n'
name|'oldState'
op|'='
name|'state'
newline|'\n'
name|'for'
name|'label'
op|','
name|'s'
op|','
name|'e'
op|','
name|'n'
name|'in'
name|'self'
op|'.'
name|'states'
op|'['
name|'state'
op|']'
op|'['
number|'1'
op|':'
op|']'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'b'
op|'>='
name|'s'
name|'and'
name|'b'
op|'<='
name|'e'
op|':'
newline|'\n'
indent|'          '
name|'if'
name|'found'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'RuntimeError'
op|'('
string|"'state %s has ambiguous output for byte %s'"
op|'%'
op|'('
name|'oldState'
op|','
name|'b'
op|')'
op|')'
newline|'\n'
dedent|''
name|'state'
op|'='
name|'n'
newline|'\n'
name|'found'
op|'='
name|'True'
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'not'
name|'found'
op|':'
newline|'\n'
indent|'        '
name|'return'
op|'-'
number|'1'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'return'
name|'state'
newline|'\n'
nl|'\n'
DECL|member|addEdge
dedent|''
name|'def'
name|'addEdge'
op|'('
name|'self'
op|','
name|'n1'
op|','
name|'n2'
op|','
name|'v1'
op|','
name|'v2'
op|','
name|'label'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Adds edge from n1-n2, utf8 byte range v1-v2.\n    """'
newline|'\n'
name|'assert'
name|'n1'
name|'in'
name|'self'
op|'.'
name|'states'
newline|'\n'
name|'assert'
name|'type'
op|'('
name|'v1'
op|')'
name|'is'
name|'types'
op|'.'
name|'IntType'
newline|'\n'
name|'assert'
name|'type'
op|'('
name|'v2'
op|')'
name|'is'
name|'types'
op|'.'
name|'IntType'
newline|'\n'
name|'self'
op|'.'
name|'states'
op|'['
name|'n1'
op|']'
op|'.'
name|'append'
op|'('
op|'('
name|'label'
op|','
name|'v1'
op|','
name|'v2'
op|','
name|'n2'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|addNode
dedent|''
name|'def'
name|'addNode'
op|'('
name|'self'
op|','
name|'label'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'try'
op|':'
newline|'\n'
indent|'      '
name|'self'
op|'.'
name|'states'
op|'['
name|'self'
op|'.'
name|'nodeUpto'
op|']'
op|'='
op|'['
name|'label'
op|']'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'nodeUpto'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'      '
name|'self'
op|'.'
name|'nodeUpto'
op|'+='
number|'1'
newline|'\n'
nl|'\n'
DECL|member|toDOT
dedent|''
dedent|''
name|'def'
name|'toDOT'
op|'('
name|'self'
op|','
name|'label'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'__l'
op|'='
op|'['
op|']'
newline|'\n'
name|'w'
op|'='
name|'__l'
op|'.'
name|'append'
newline|'\n'
name|'endNode'
op|'='
name|'startNode'
op|'='
name|'None'
newline|'\n'
name|'for'
name|'id'
op|','
name|'details'
name|'in'
name|'self'
op|'.'
name|'states'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'      '
name|'name'
op|'='
name|'details'
op|'['
number|'0'
op|']'
newline|'\n'
name|'if'
name|'name'
op|'=='
string|"'end'"
op|':'
newline|'\n'
indent|'        '
name|'endNode'
op|'='
name|'id'
newline|'\n'
dedent|''
name|'elif'
name|'name'
op|'=='
string|"'start'"
op|':'
newline|'\n'
indent|'        '
name|'startNode'
op|'='
name|'id'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'w'
op|'('
string|"'digraph %s {'"
op|'%'
name|'label'
op|')'
newline|'\n'
name|'w'
op|'('
string|"'  rankdir=LR;'"
op|')'
newline|'\n'
name|'w'
op|'('
string|'\'  size="8,5";\''
op|')'
newline|'\n'
name|'w'
op|'('
string|'\'  node [color=white label=""]; Ns;\''
op|')'
newline|'\n'
nl|'\n'
name|'w'
op|'('
string|"'  node [color=black];'"
op|')'
newline|'\n'
name|'w'
op|'('
string|'\'  node [shape=doublecircle, label=""]; N%s [label="%s"];\''
op|'%'
op|'('
name|'endNode'
op|','
name|'endNode'
op|')'
op|')'
newline|'\n'
name|'w'
op|'('
string|"'  node [shape=circle];'"
op|')'
newline|'\n'
nl|'\n'
name|'w'
op|'('
string|'\'  N%s [label="%s"];\''
op|'%'
op|'('
name|'startNode'
op|','
name|'startNode'
op|')'
op|')'
newline|'\n'
name|'w'
op|'('
string|"'  Ns -> N%s;'"
op|'%'
name|'startNode'
op|')'
newline|'\n'
name|'for'
name|'id'
op|','
name|'details'
name|'in'
name|'self'
op|'.'
name|'states'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'      '
name|'edges'
op|'='
name|'details'
op|'['
number|'1'
op|':'
op|']'
newline|'\n'
name|'w'
op|'('
string|'\'  N%s [label="%s"];\''
op|'%'
op|'('
name|'id'
op|','
name|'id'
op|')'
op|')'
newline|'\n'
name|'for'
name|'type'
op|','
name|'s'
op|','
name|'e'
op|','
name|'dest'
name|'in'
name|'edges'
op|':'
newline|'\n'
indent|'        '
name|'c'
op|'='
name|'typeToColor'
op|'.'
name|'get'
op|'('
name|'type'
op|','
string|"'black'"
op|')'
newline|'\n'
name|'if'
name|'type'
op|'=='
string|"'all*'"
op|':'
newline|'\n'
comment|'# special case -- matches any utf8 byte at this point'
nl|'\n'
indent|'          '
name|'label'
op|'='
string|"'*'"
newline|'\n'
dedent|''
name|'elif'
name|'s'
op|'=='
name|'e'
op|':'
newline|'\n'
indent|'          '
name|'label'
op|'='
string|"'%s'"
op|'%'
name|'binary'
op|'('
name|'s'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'          '
name|'label'
op|'='
string|"'%s-%s'"
op|'%'
op|'('
name|'binary'
op|'('
name|'s'
op|')'
op|','
name|'binary'
op|'('
name|'e'
op|')'
op|')'
newline|'\n'
dedent|''
name|'w'
op|'('
string|'\'  N%s -> N%s [label="%s" color="%s"];\''
op|'%'
op|'('
name|'id'
op|','
name|'dest'
op|','
name|'label'
op|','
name|'c'
op|')'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'name'
op|'=='
string|"'end'"
op|':'
newline|'\n'
indent|'        '
name|'endNode'
op|'='
name|'id'
newline|'\n'
dedent|''
name|'elif'
name|'name'
op|'=='
string|"'start'"
op|':'
newline|'\n'
indent|'        '
name|'startNode'
op|'='
name|'id'
newline|'\n'
dedent|''
dedent|''
name|'w'
op|'('
string|"'}'"
op|')'
newline|'\n'
name|'return'
string|"'\\n'"
op|'.'
name|'join'
op|'('
name|'__l'
op|')'
newline|'\n'
nl|'\n'
DECL|member|toPNG
dedent|''
name|'def'
name|'toPNG'
op|'('
name|'self'
op|','
name|'label'
op|','
name|'pngOut'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'open'
op|'('
string|"'tmp.dot'"
op|','
string|"'wb'"
op|')'
op|'.'
name|'write'
op|'('
name|'self'
op|'.'
name|'toDOT'
op|'('
name|'label'
op|')'
op|')'
newline|'\n'
name|'if'
name|'os'
op|'.'
name|'system'
op|'('
string|"'dot -Tpng tmp.dot -o %s'"
op|'%'
name|'pngOut'
op|')'
op|':'
newline|'\n'
indent|'      '
name|'raise'
name|'RuntimeException'
op|'('
string|"'dot failed'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|MASKS
dedent|''
dedent|''
dedent|''
name|'MASKS'
op|'='
op|'['
op|']'
newline|'\n'
DECL|variable|v
name|'v'
op|'='
number|'2'
newline|'\n'
name|'for'
name|'i'
name|'in'
name|'range'
op|'('
number|'32'
op|')'
op|':'
newline|'\n'
indent|'  '
name|'MASKS'
op|'.'
name|'append'
op|'('
name|'v'
op|'-'
number|'1'
op|')'
newline|'\n'
name|'v'
op|'*='
number|'2'
newline|'\n'
nl|'\n'
DECL|function|binary
dedent|''
name|'def'
name|'binary'
op|'('
name|'x'
op|')'
op|':'
newline|'\n'
indent|'  '
name|'if'
name|'x'
op|'=='
number|'0'
op|':'
newline|'\n'
indent|'    '
name|'return'
string|"'00000000'"
newline|'\n'
nl|'\n'
dedent|''
name|'l'
op|'='
op|'['
op|']'
newline|'\n'
name|'while'
name|'x'
op|'>'
number|'0'
op|':'
newline|'\n'
indent|'    '
name|'if'
name|'x'
op|'&'
number|'1'
op|'=='
number|'1'
op|':'
newline|'\n'
indent|'      '
name|'l'
op|'.'
name|'append'
op|'('
string|"'1'"
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'      '
name|'l'
op|'.'
name|'append'
op|'('
string|"'0'"
op|')'
newline|'\n'
dedent|''
name|'x'
op|'='
name|'x'
op|'>>'
number|'1'
newline|'\n'
nl|'\n'
comment|'# big endian!'
nl|'\n'
dedent|''
name|'l'
op|'.'
name|'reverse'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'l2'
op|'='
op|'['
op|']'
newline|'\n'
name|'while'
name|'len'
op|'('
name|'l'
op|')'
op|'>'
number|'0'
op|':'
newline|'\n'
indent|'    '
name|'s'
op|'='
string|"''"
op|'.'
name|'join'
op|'('
name|'l'
op|'['
op|'-'
number|'8'
op|':'
op|']'
op|')'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'s'
op|')'
op|'<'
number|'8'
op|':'
newline|'\n'
indent|'      '
name|'s'
op|'='
string|"'0'"
op|'*'
op|'('
number|'8'
op|'-'
name|'len'
op|'('
name|'s'
op|')'
op|')'
op|'+'
name|'s'
newline|'\n'
dedent|''
name|'l2'
op|'.'
name|'append'
op|'('
name|'s'
op|')'
newline|'\n'
name|'del'
name|'l'
op|'['
op|'-'
number|'8'
op|':'
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
string|"' '"
op|'.'
name|'join'
op|'('
name|'l2'
op|')'
newline|'\n'
nl|'\n'
DECL|function|getUTF8Rest
dedent|''
name|'def'
name|'getUTF8Rest'
op|'('
name|'code'
op|','
name|'numBytes'
op|')'
op|':'
newline|'\n'
indent|'  '
name|'l'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'i'
name|'in'
name|'range'
op|'('
name|'numBytes'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'l'
op|'.'
name|'append'
op|'('
op|'('
number|'128'
op|'|'
op|'('
name|'code'
op|'&'
name|'MASKS'
op|'['
number|'5'
op|']'
op|')'
op|','
number|'6'
op|')'
op|')'
newline|'\n'
name|'code'
op|'='
name|'code'
op|'>>'
number|'6'
newline|'\n'
dedent|''
name|'l'
op|'.'
name|'reverse'
op|'('
op|')'
newline|'\n'
name|'return'
name|'tuple'
op|'('
name|'l'
op|')'
newline|'\n'
nl|'\n'
DECL|function|toUTF8
dedent|''
name|'def'
name|'toUTF8'
op|'('
name|'code'
op|')'
op|':'
newline|'\n'
comment|'# code = Unicode code point'
nl|'\n'
indent|'  '
name|'assert'
name|'code'
op|'>='
number|'0'
newline|'\n'
name|'assert'
name|'code'
op|'<='
name|'MAX_UNICODE'
newline|'\n'
nl|'\n'
name|'if'
name|'code'
op|'<'
number|'128'
op|':'
newline|'\n'
comment|'# 0xxxxxxx'
nl|'\n'
indent|'    '
name|'bytes'
op|'='
op|'('
op|'('
name|'code'
op|','
number|'7'
op|')'
op|','
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'code'
op|'<'
number|'2048'
op|':'
newline|'\n'
comment|'# 110yyyxx 10xxxxxx'
nl|'\n'
indent|'    '
name|'byte1'
op|'='
op|'('
number|'6'
op|'<<'
number|'5'
op|')'
op|'|'
op|'('
name|'code'
op|'>>'
number|'6'
op|')'
newline|'\n'
name|'bytes'
op|'='
op|'('
op|'('
name|'byte1'
op|','
number|'5'
op|')'
op|','
op|')'
op|'+'
name|'getUTF8Rest'
op|'('
name|'code'
op|','
number|'1'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'code'
op|'<'
number|'65536'
op|':'
newline|'\n'
comment|'# 1110yyyy 10yyyyxx 10xxxxxx'
nl|'\n'
indent|'    '
name|'len'
op|'='
number|'3'
newline|'\n'
name|'byte1'
op|'='
op|'('
number|'14'
op|'<<'
number|'4'
op|')'
op|'|'
op|'('
name|'code'
op|'>>'
number|'12'
op|')'
newline|'\n'
name|'bytes'
op|'='
op|'('
op|'('
name|'byte1'
op|','
number|'4'
op|')'
op|','
op|')'
op|'+'
name|'getUTF8Rest'
op|'('
name|'code'
op|','
number|'2'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# 11110zzz 10zzyyyy 10yyyyxx 10xxxxxx'
nl|'\n'
indent|'    '
name|'len'
op|'='
number|'4'
newline|'\n'
name|'byte1'
op|'='
op|'('
number|'30'
op|'<<'
number|'3'
op|')'
op|'|'
op|'('
name|'code'
op|'>>'
number|'18'
op|')'
newline|'\n'
name|'bytes'
op|'='
op|'('
op|'('
name|'byte1'
op|','
number|'3'
op|')'
op|','
op|')'
op|'+'
name|'getUTF8Rest'
op|'('
name|'code'
op|','
number|'3'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'bytes'
newline|'\n'
nl|'\n'
DECL|function|all
dedent|''
name|'def'
name|'all'
op|'('
name|'fsa'
op|','
name|'startNode'
op|','
name|'endNode'
op|','
name|'startCode'
op|','
name|'endCode'
op|','
name|'left'
op|')'
op|':'
newline|'\n'
indent|'  '
name|'if'
name|'len'
op|'('
name|'left'
op|')'
op|'=='
number|'0'
op|':'
newline|'\n'
indent|'    '
name|'fsa'
op|'.'
name|'addEdge'
op|'('
name|'startNode'
op|','
name|'endNode'
op|','
name|'startCode'
op|','
name|'endCode'
op|','
string|"'all'"
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'    '
name|'lastN'
op|'='
name|'fsa'
op|'.'
name|'addNode'
op|'('
op|')'
newline|'\n'
name|'fsa'
op|'.'
name|'addEdge'
op|'('
name|'startNode'
op|','
name|'lastN'
op|','
name|'startCode'
op|','
name|'endCode'
op|','
string|"'all'"
op|')'
newline|'\n'
name|'while'
name|'len'
op|'('
name|'left'
op|')'
op|'>'
number|'1'
op|':'
newline|'\n'
indent|'      '
name|'n'
op|'='
name|'fsa'
op|'.'
name|'addNode'
op|'('
op|')'
newline|'\n'
name|'fsa'
op|'.'
name|'addEdge'
op|'('
name|'lastN'
op|','
name|'n'
op|','
number|'128'
op|','
number|'191'
op|','
string|"'all*'"
op|')'
newline|'\n'
name|'left'
op|'='
name|'left'
op|'['
number|'1'
op|':'
op|']'
newline|'\n'
name|'lastN'
op|'='
name|'n'
newline|'\n'
dedent|''
name|'fsa'
op|'.'
name|'addEdge'
op|'('
name|'lastN'
op|','
name|'endNode'
op|','
number|'128'
op|','
number|'191'
op|','
string|"'all*'"
op|')'
newline|'\n'
nl|'\n'
DECL|function|start
dedent|''
dedent|''
name|'def'
name|'start'
op|'('
name|'fsa'
op|','
name|'startNode'
op|','
name|'endNode'
op|','
name|'utf8'
op|','
name|'doAll'
op|')'
op|':'
newline|'\n'
indent|'  '
name|'if'
name|'len'
op|'('
name|'utf8'
op|')'
op|'=='
number|'1'
op|':'
newline|'\n'
indent|'    '
name|'fsa'
op|'.'
name|'addEdge'
op|'('
name|'startNode'
op|','
name|'endNode'
op|','
name|'utf8'
op|'['
number|'0'
op|']'
op|'['
number|'0'
op|']'
op|','
name|'utf8'
op|'['
number|'0'
op|']'
op|'['
number|'0'
op|']'
op|'|'
name|'MASKS'
op|'['
name|'utf8'
op|'['
number|'0'
op|']'
op|'['
number|'1'
op|']'
op|'-'
number|'1'
op|']'
op|','
string|"'start'"
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'    '
name|'n'
op|'='
name|'fsa'
op|'.'
name|'addNode'
op|'('
op|')'
newline|'\n'
name|'fsa'
op|'.'
name|'addEdge'
op|'('
name|'startNode'
op|','
name|'n'
op|','
name|'utf8'
op|'['
number|'0'
op|']'
op|'['
number|'0'
op|']'
op|','
name|'utf8'
op|'['
number|'0'
op|']'
op|'['
number|'0'
op|']'
op|','
string|"'start'"
op|')'
newline|'\n'
name|'start'
op|'('
name|'fsa'
op|','
name|'n'
op|','
name|'endNode'
op|','
name|'utf8'
op|'['
number|'1'
op|':'
op|']'
op|','
name|'True'
op|')'
newline|'\n'
name|'end'
op|'='
name|'utf8'
op|'['
number|'0'
op|']'
op|'['
number|'0'
op|']'
op|'|'
name|'MASKS'
op|'['
name|'utf8'
op|'['
number|'0'
op|']'
op|'['
number|'1'
op|']'
op|'-'
number|'1'
op|']'
newline|'\n'
name|'if'
name|'doAll'
name|'and'
name|'utf8'
op|'['
number|'0'
op|']'
op|'['
number|'0'
op|']'
op|'!='
name|'end'
op|':'
newline|'\n'
indent|'      '
name|'all'
op|'('
name|'fsa'
op|','
name|'startNode'
op|','
name|'endNode'
op|','
name|'utf8'
op|'['
number|'0'
op|']'
op|'['
number|'0'
op|']'
op|'+'
number|'1'
op|','
name|'end'
op|','
name|'utf8'
op|'['
number|'1'
op|':'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|function|end
dedent|''
dedent|''
dedent|''
name|'def'
name|'end'
op|'('
name|'fsa'
op|','
name|'startNode'
op|','
name|'endNode'
op|','
name|'utf8'
op|','
name|'doAll'
op|')'
op|':'
newline|'\n'
indent|'  '
name|'if'
name|'len'
op|'('
name|'utf8'
op|')'
op|'=='
number|'1'
op|':'
newline|'\n'
indent|'    '
name|'fsa'
op|'.'
name|'addEdge'
op|'('
name|'startNode'
op|','
name|'endNode'
op|','
name|'utf8'
op|'['
number|'0'
op|']'
op|'['
number|'0'
op|']'
op|'&'
op|'~'
name|'MASKS'
op|'['
name|'utf8'
op|'['
number|'0'
op|']'
op|'['
number|'1'
op|']'
op|'-'
number|'1'
op|']'
op|','
name|'utf8'
op|'['
number|'0'
op|']'
op|'['
number|'0'
op|']'
op|','
string|"'end'"
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'    '
name|'if'
name|'utf8'
op|'['
number|'0'
op|']'
op|'['
number|'1'
op|']'
op|'=='
number|'5'
op|':'
newline|'\n'
comment|"# special case -- avoid created unused edges (utf8 doesn't accept certain byte sequences):"
nl|'\n'
indent|'      '
name|'start'
op|'='
number|'194'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'      '
name|'start'
op|'='
name|'utf8'
op|'['
number|'0'
op|']'
op|'['
number|'0'
op|']'
op|'&'
op|'('
op|'~'
name|'MASKS'
op|'['
name|'utf8'
op|'['
number|'0'
op|']'
op|'['
number|'1'
op|']'
op|'-'
number|'1'
op|']'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'doAll'
name|'and'
name|'utf8'
op|'['
number|'0'
op|']'
op|'['
number|'0'
op|']'
op|'!='
name|'start'
op|':'
newline|'\n'
indent|'      '
name|'all'
op|'('
name|'fsa'
op|','
name|'startNode'
op|','
name|'endNode'
op|','
name|'start'
op|','
name|'utf8'
op|'['
number|'0'
op|']'
op|'['
number|'0'
op|']'
op|'-'
number|'1'
op|','
name|'utf8'
op|'['
number|'1'
op|':'
op|']'
op|')'
newline|'\n'
dedent|''
name|'n'
op|'='
name|'fsa'
op|'.'
name|'addNode'
op|'('
op|')'
newline|'\n'
name|'fsa'
op|'.'
name|'addEdge'
op|'('
name|'startNode'
op|','
name|'n'
op|','
name|'utf8'
op|'['
number|'0'
op|']'
op|'['
number|'0'
op|']'
op|','
name|'utf8'
op|'['
number|'0'
op|']'
op|'['
number|'0'
op|']'
op|','
string|"'end'"
op|')'
newline|'\n'
name|'end'
op|'('
name|'fsa'
op|','
name|'n'
op|','
name|'endNode'
op|','
name|'utf8'
op|'['
number|'1'
op|':'
op|']'
op|','
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|function|build
dedent|''
dedent|''
name|'def'
name|'build'
op|'('
name|'fsa'
op|','
nl|'\n'
name|'startNode'
op|','
name|'endNode'
op|','
nl|'\n'
name|'startUTF8'
op|','
name|'endUTF8'
op|')'
op|':'
newline|'\n'
nl|'\n'
comment|'# Break into start, middle, end:'
nl|'\n'
indent|'  '
name|'if'
name|'startUTF8'
op|'['
number|'0'
op|']'
op|'['
number|'0'
op|']'
op|'=='
name|'endUTF8'
op|'['
number|'0'
op|']'
op|'['
number|'0'
op|']'
op|':'
newline|'\n'
comment|'# Degen case: lead with the same byte:'
nl|'\n'
indent|'    '
name|'if'
name|'len'
op|'('
name|'startUTF8'
op|')'
op|'=='
number|'1'
name|'and'
name|'len'
op|'('
name|'endUTF8'
op|')'
op|'=='
number|'1'
op|':'
newline|'\n'
indent|'      '
name|'fsa'
op|'.'
name|'addEdge'
op|'('
name|'startNode'
op|','
name|'endNode'
op|','
name|'startUTF8'
op|'['
number|'0'
op|']'
op|'['
number|'0'
op|']'
op|','
name|'endUTF8'
op|'['
number|'0'
op|']'
op|'['
number|'0'
op|']'
op|','
string|"'startend'"
op|')'
newline|'\n'
name|'return'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'      '
name|'assert'
name|'len'
op|'('
name|'startUTF8'
op|')'
op|'!='
number|'1'
newline|'\n'
name|'assert'
name|'len'
op|'('
name|'endUTF8'
op|')'
op|'!='
number|'1'
newline|'\n'
name|'n'
op|'='
name|'fsa'
op|'.'
name|'addNode'
op|'('
op|')'
newline|'\n'
comment|'# single value edge'
nl|'\n'
name|'fsa'
op|'.'
name|'addEdge'
op|'('
name|'startNode'
op|','
name|'n'
op|','
name|'startUTF8'
op|'['
number|'0'
op|']'
op|'['
number|'0'
op|']'
op|','
name|'startUTF8'
op|'['
number|'0'
op|']'
op|'['
number|'0'
op|']'
op|','
string|"'single'"
op|')'
newline|'\n'
name|'build'
op|'('
name|'fsa'
op|','
name|'n'
op|','
name|'endNode'
op|','
name|'startUTF8'
op|'['
number|'1'
op|':'
op|']'
op|','
name|'endUTF8'
op|'['
number|'1'
op|':'
op|']'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'elif'
name|'len'
op|'('
name|'startUTF8'
op|')'
op|'=='
name|'len'
op|'('
name|'endUTF8'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'if'
name|'len'
op|'('
name|'startUTF8'
op|')'
op|'=='
number|'1'
op|':'
newline|'\n'
indent|'      '
name|'fsa'
op|'.'
name|'addEdge'
op|'('
name|'startNode'
op|','
name|'endNode'
op|','
name|'startUTF8'
op|'['
number|'0'
op|']'
op|'['
number|'0'
op|']'
op|','
name|'endUTF8'
op|'['
number|'0'
op|']'
op|'['
number|'0'
op|']'
op|','
string|"'startend'"
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'      '
name|'start'
op|'('
name|'fsa'
op|','
name|'startNode'
op|','
name|'endNode'
op|','
name|'startUTF8'
op|','
name|'False'
op|')'
newline|'\n'
name|'if'
name|'endUTF8'
op|'['
number|'0'
op|']'
op|'['
number|'0'
op|']'
op|'-'
name|'startUTF8'
op|'['
number|'0'
op|']'
op|'['
number|'0'
op|']'
op|'>'
number|'1'
op|':'
newline|'\n'
indent|'        '
name|'all'
op|'('
name|'fsa'
op|','
name|'startNode'
op|','
name|'endNode'
op|','
name|'startUTF8'
op|'['
number|'0'
op|']'
op|'['
number|'0'
op|']'
op|'+'
number|'1'
op|','
name|'endUTF8'
op|'['
number|'0'
op|']'
op|'['
number|'0'
op|']'
op|'-'
number|'1'
op|','
name|'startUTF8'
op|'['
number|'1'
op|':'
op|']'
op|')'
newline|'\n'
dedent|''
name|'end'
op|'('
name|'fsa'
op|','
name|'startNode'
op|','
name|'endNode'
op|','
name|'endUTF8'
op|','
name|'False'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# start'
nl|'\n'
indent|'    '
name|'start'
op|'('
name|'fsa'
op|','
name|'startNode'
op|','
name|'endNode'
op|','
name|'startUTF8'
op|','
name|'True'
op|')'
newline|'\n'
nl|'\n'
comment|'# possibly middle'
nl|'\n'
name|'byteCount'
op|'='
number|'1'
op|'+'
name|'len'
op|'('
name|'startUTF8'
op|')'
newline|'\n'
name|'while'
name|'byteCount'
op|'<'
name|'len'
op|'('
name|'endUTF8'
op|')'
op|':'
newline|'\n'
indent|'      '
name|'s'
op|'='
name|'toUTF8'
op|'('
name|'utf8Ranges'
op|'['
name|'byteCount'
op|'-'
number|'1'
op|']'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'e'
op|'='
name|'toUTF8'
op|'('
name|'utf8Ranges'
op|'['
name|'byteCount'
op|'-'
number|'1'
op|']'
op|'['
number|'1'
op|']'
op|')'
newline|'\n'
name|'all'
op|'('
name|'fsa'
op|','
name|'startNode'
op|','
name|'endNode'
op|','
nl|'\n'
name|'s'
op|'['
number|'0'
op|']'
op|'['
number|'0'
op|']'
op|','
nl|'\n'
name|'e'
op|'['
number|'0'
op|']'
op|'['
number|'0'
op|']'
op|','
nl|'\n'
name|'s'
op|'['
number|'1'
op|':'
op|']'
op|')'
newline|'\n'
name|'byteCount'
op|'+='
number|'1'
newline|'\n'
nl|'\n'
comment|'# end'
nl|'\n'
dedent|''
name|'end'
op|'('
name|'fsa'
op|','
name|'startNode'
op|','
name|'endNode'
op|','
name|'endUTF8'
op|','
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|function|main
dedent|''
dedent|''
name|'def'
name|'main'
op|'('
op|')'
op|':'
newline|'\n'
nl|'\n'
indent|'  '
name|'if'
name|'len'
op|'('
name|'sys'
op|'.'
name|'argv'
op|')'
name|'not'
name|'in'
op|'('
number|'3'
op|','
number|'4'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'print'
newline|'\n'
name|'print'
string|"'Usage: python %s startUTF32 endUTF32 [testCode]'"
op|'%'
name|'sys'
op|'.'
name|'argv'
op|'['
number|'0'
op|']'
newline|'\n'
name|'print'
newline|'\n'
name|'sys'
op|'.'
name|'exit'
op|'('
number|'1'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'utf32Start'
op|'='
name|'int'
op|'('
name|'sys'
op|'.'
name|'argv'
op|'['
number|'1'
op|']'
op|')'
newline|'\n'
name|'utf32End'
op|'='
name|'int'
op|'('
name|'sys'
op|'.'
name|'argv'
op|'['
number|'2'
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'utf32Start'
op|'>'
name|'utf32End'
op|':'
newline|'\n'
indent|'    '
name|'print'
string|"'ERROR: start must be <= end'"
newline|'\n'
name|'sys'
op|'.'
name|'exit'
op|'('
number|'1'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'fsa'
op|'='
name|'FSA'
op|'('
op|')'
newline|'\n'
name|'fsa'
op|'.'
name|'start'
op|'='
name|'fsa'
op|'.'
name|'addNode'
op|'('
string|"'start'"
op|')'
newline|'\n'
name|'fsa'
op|'.'
name|'end'
op|'='
name|'fsa'
op|'.'
name|'addNode'
op|'('
string|"'end'"
op|')'
newline|'\n'
nl|'\n'
name|'print'
string|"'s=%s'"
op|'%'
string|"' '"
op|'.'
name|'join'
op|'('
op|'['
name|'binary'
op|'('
name|'x'
op|'['
number|'0'
op|']'
op|')'
name|'for'
name|'x'
name|'in'
name|'toUTF8'
op|'('
name|'utf32Start'
op|')'
op|']'
op|')'
newline|'\n'
name|'print'
string|"'e=%s'"
op|'%'
string|"' '"
op|'.'
name|'join'
op|'('
op|'['
name|'binary'
op|'('
name|'x'
op|'['
number|'0'
op|']'
op|')'
name|'for'
name|'x'
name|'in'
name|'toUTF8'
op|'('
name|'utf32End'
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'len'
op|'('
name|'sys'
op|'.'
name|'argv'
op|')'
op|'=='
number|'4'
op|':'
newline|'\n'
indent|'    '
name|'print'
string|"'t=%s [%s]'"
op|'%'
op|'('
string|"' '"
op|'.'
name|'join'
op|'('
op|'['
name|'binary'
op|'('
name|'x'
op|'['
number|'0'
op|']'
op|')'
name|'for'
name|'x'
name|'in'
name|'toUTF8'
op|'('
name|'int'
op|'('
name|'sys'
op|'.'
name|'argv'
op|'['
number|'3'
op|']'
op|')'
op|')'
op|']'
op|')'
op|','
nl|'\n'
string|"' '"
op|'.'
name|'join'
op|'('
op|'['
string|"'%2x'"
op|'%'
name|'x'
op|'['
number|'0'
op|']'
name|'for'
name|'x'
name|'in'
name|'toUTF8'
op|'('
name|'int'
op|'('
name|'sys'
op|'.'
name|'argv'
op|'['
number|'3'
op|']'
op|')'
op|')'
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'build'
op|'('
name|'fsa'
op|','
name|'fsa'
op|'.'
name|'start'
op|','
name|'fsa'
op|'.'
name|'end'
op|','
nl|'\n'
name|'toUTF8'
op|'('
name|'utf32Start'
op|')'
op|','
nl|'\n'
name|'toUTF8'
op|'('
name|'utf32End'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'fsa'
op|'.'
name|'toPNG'
op|'('
string|"'test'"
op|','
string|"'/tmp/outpy.png'"
op|')'
newline|'\n'
name|'print'
string|"'Saved to /tmp/outpy.png...'"
newline|'\n'
nl|'\n'
name|'test'
op|'('
name|'fsa'
op|','
name|'utf32Start'
op|','
name|'utf32End'
op|','
number|'100000'
op|')'
op|';'
newline|'\n'
nl|'\n'
DECL|function|test
dedent|''
name|'def'
name|'test'
op|'('
name|'fsa'
op|','
name|'utf32Start'
op|','
name|'utf32End'
op|','
name|'count'
op|')'
op|':'
newline|'\n'
nl|'\n'
comment|'# verify correct ints are accepted'
nl|'\n'
indent|'  '
name|'for'
name|'i'
name|'in'
name|'range'
op|'('
name|'count'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'r'
op|'='
name|'random'
op|'.'
name|'randint'
op|'('
name|'utf32Start'
op|','
name|'utf32End'
op|')'
newline|'\n'
name|'dest'
op|'='
name|'fsa'
op|'.'
name|'run'
op|'('
op|'['
name|'tup'
op|'['
number|'0'
op|']'
name|'for'
name|'tup'
name|'in'
name|'toUTF8'
op|'('
name|'r'
op|')'
op|']'
op|')'
newline|'\n'
name|'if'
name|'dest'
op|'!='
name|'fsa'
op|'.'
name|'end'
op|':'
newline|'\n'
indent|'      '
name|'print'
string|"'FAILED: valid %s (%s) is not accepted'"
op|'%'
op|'('
name|'r'
op|','
string|"' '"
op|'.'
name|'join'
op|'('
op|'['
name|'binary'
op|'('
name|'x'
op|'['
number|'0'
op|']'
op|')'
name|'for'
name|'x'
name|'in'
name|'toUTF8'
op|'('
name|'r'
op|')'
op|']'
op|')'
op|')'
newline|'\n'
name|'return'
name|'False'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'invalidRange'
op|'='
name|'MAX_UNICODE'
op|'-'
op|'('
name|'utf32End'
op|'-'
name|'utf32Start'
op|'+'
number|'1'
op|')'
newline|'\n'
name|'if'
name|'invalidRange'
op|'>='
number|'0'
op|':'
newline|'\n'
comment|'# verify invalid ints are not accepted'
nl|'\n'
indent|'    '
name|'for'
name|'i'
name|'in'
name|'range'
op|'('
name|'count'
op|')'
op|':'
newline|'\n'
indent|'      '
name|'r'
op|'='
name|'random'
op|'.'
name|'randint'
op|'('
number|'0'
op|','
name|'invalidRange'
op|'-'
number|'1'
op|')'
newline|'\n'
name|'if'
name|'r'
op|'>='
name|'utf32Start'
op|':'
newline|'\n'
indent|'        '
name|'r'
op|'='
name|'utf32End'
op|'+'
number|'1'
op|'+'
name|'r'
op|'-'
name|'utf32Start'
newline|'\n'
dedent|''
name|'dest'
op|'='
name|'fsa'
op|'.'
name|'run'
op|'('
op|'['
name|'tup'
op|'['
number|'0'
op|']'
name|'for'
name|'tup'
name|'in'
name|'toUTF8'
op|'('
name|'r'
op|')'
op|']'
op|')'
newline|'\n'
name|'if'
name|'dest'
op|'!='
op|'-'
number|'1'
op|':'
newline|'\n'
indent|'        '
name|'print'
string|"'FAILED: invalid %s (%s) is accepted'"
op|'%'
op|'('
name|'r'
op|','
string|"' '"
op|'.'
name|'join'
op|'('
op|'['
name|'binary'
op|'('
name|'x'
op|'['
number|'0'
op|']'
op|')'
name|'for'
name|'x'
name|'in'
name|'toUTF8'
op|'('
name|'r'
op|')'
op|']'
op|')'
op|')'
newline|'\n'
name|'return'
name|'False'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'return'
name|'True'
newline|'\n'
nl|'\n'
DECL|function|stress
dedent|''
name|'def'
name|'stress'
op|'('
op|')'
op|':'
newline|'\n'
nl|'\n'
indent|'  '
name|'print'
string|"'Testing...'"
newline|'\n'
nl|'\n'
name|'iter'
op|'='
number|'0'
newline|'\n'
name|'while'
name|'True'
op|':'
newline|'\n'
indent|'    '
name|'if'
name|'iter'
op|'%'
number|'10'
op|'=='
number|'0'
op|':'
newline|'\n'
indent|'      '
name|'print'
string|"'%s...'"
op|'%'
name|'iter'
newline|'\n'
dedent|''
name|'iter'
op|'+='
number|'1'
newline|'\n'
nl|'\n'
name|'v1'
op|'='
name|'random'
op|'.'
name|'randint'
op|'('
number|'0'
op|','
name|'MAX_UNICODE'
op|')'
newline|'\n'
name|'v2'
op|'='
name|'random'
op|'.'
name|'randint'
op|'('
number|'0'
op|','
name|'MAX_UNICODE'
op|')'
newline|'\n'
name|'if'
name|'v2'
op|'<'
name|'v1'
op|':'
newline|'\n'
indent|'      '
name|'v1'
op|','
name|'v2'
op|'='
name|'v2'
op|','
name|'v1'
newline|'\n'
nl|'\n'
dedent|''
name|'utf32Start'
op|'='
name|'v1'
newline|'\n'
name|'utf32End'
op|'='
name|'v2'
newline|'\n'
nl|'\n'
name|'fsa'
op|'='
name|'FSA'
op|'('
op|')'
newline|'\n'
name|'fsa'
op|'.'
name|'start'
op|'='
name|'fsa'
op|'.'
name|'addNode'
op|'('
string|"'start'"
op|')'
newline|'\n'
name|'fsa'
op|'.'
name|'end'
op|'='
name|'fsa'
op|'.'
name|'addNode'
op|'('
string|"'end'"
op|')'
newline|'\n'
name|'build'
op|'('
name|'fsa'
op|','
name|'fsa'
op|'.'
name|'start'
op|','
name|'fsa'
op|'.'
name|'end'
op|','
nl|'\n'
name|'toUTF8'
op|'('
name|'utf32Start'
op|')'
op|','
nl|'\n'
name|'toUTF8'
op|'('
name|'utf32End'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'not'
name|'test'
op|'('
name|'fsa'
op|','
name|'utf32Start'
op|','
name|'utf32End'
op|','
number|'10000'
op|')'
op|':'
newline|'\n'
indent|'      '
name|'print'
string|"'FAILED on utf32Start=%s utf32End=%s'"
op|'%'
op|'('
name|'utf32Start'
op|','
name|'utf32End'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'if'
name|'__name__'
op|'=='
string|"'__main__'"
op|':'
newline|'\n'
indent|'  '
name|'if'
name|'len'
op|'('
name|'sys'
op|'.'
name|'argv'
op|')'
op|'>'
number|'1'
op|':'
newline|'\n'
indent|'    '
name|'main'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'    '
name|'stress'
op|'('
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit
