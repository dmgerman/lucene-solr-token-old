begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.util.bkd
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|bkd
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IOContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexInput
import|;
end_import
begin_comment
comment|/** Reads points from disk in a fixed-with format, previously written with {@link OfflinePointWriter}. */
end_comment
begin_class
DECL|class|OfflinePointReader
specifier|final
class|class
name|OfflinePointReader
implements|implements
name|PointReader
block|{
DECL|field|countLeft
name|long
name|countLeft
decl_stmt|;
DECL|field|in
specifier|private
specifier|final
name|IndexInput
name|in
decl_stmt|;
DECL|field|packedValue
specifier|private
specifier|final
name|byte
index|[]
name|packedValue
decl_stmt|;
DECL|field|ord
specifier|private
name|long
name|ord
decl_stmt|;
DECL|field|docID
specifier|private
name|int
name|docID
decl_stmt|;
DECL|field|bytesPerDoc
specifier|final
name|int
name|bytesPerDoc
decl_stmt|;
DECL|method|OfflinePointReader
name|OfflinePointReader
parameter_list|(
name|Directory
name|tempDir
parameter_list|,
name|String
name|tempFileName
parameter_list|,
name|int
name|packedBytesLength
parameter_list|,
name|long
name|start
parameter_list|,
name|long
name|length
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|tempDir
operator|.
name|openInput
argument_list|(
name|tempFileName
argument_list|,
name|IOContext
operator|.
name|READONCE
argument_list|)
argument_list|,
name|packedBytesLength
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
DECL|method|OfflinePointReader
specifier|private
name|OfflinePointReader
parameter_list|(
name|IndexInput
name|in
parameter_list|,
name|int
name|packedBytesLength
parameter_list|,
name|long
name|start
parameter_list|,
name|long
name|length
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|in
operator|=
name|in
expr_stmt|;
name|bytesPerDoc
operator|=
name|packedBytesLength
operator|+
name|Long
operator|.
name|BYTES
operator|+
name|Integer
operator|.
name|BYTES
expr_stmt|;
name|long
name|seekFP
init|=
name|start
operator|*
name|bytesPerDoc
decl_stmt|;
name|in
operator|.
name|seek
argument_list|(
name|seekFP
argument_list|)
expr_stmt|;
name|this
operator|.
name|countLeft
operator|=
name|length
expr_stmt|;
name|packedValue
operator|=
operator|new
name|byte
index|[
name|packedBytesLength
index|]
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|next
specifier|public
name|boolean
name|next
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|countLeft
operator|>=
literal|0
condition|)
block|{
if|if
condition|(
name|countLeft
operator|==
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
name|countLeft
operator|--
expr_stmt|;
block|}
try|try
block|{
name|in
operator|.
name|readBytes
argument_list|(
name|packedValue
argument_list|,
literal|0
argument_list|,
name|packedValue
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EOFException
name|eofe
parameter_list|)
block|{
assert|assert
name|countLeft
operator|==
operator|-
literal|1
assert|;
return|return
literal|false
return|;
block|}
name|ord
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|docID
operator|=
name|in
operator|.
name|readInt
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|packedValue
specifier|public
name|byte
index|[]
name|packedValue
parameter_list|()
block|{
return|return
name|packedValue
return|;
block|}
annotation|@
name|Override
DECL|method|ord
specifier|public
name|long
name|ord
parameter_list|()
block|{
return|return
name|ord
return|;
block|}
annotation|@
name|Override
DECL|method|docID
specifier|public
name|int
name|docID
parameter_list|()
block|{
return|return
name|docID
return|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class
end_unit
