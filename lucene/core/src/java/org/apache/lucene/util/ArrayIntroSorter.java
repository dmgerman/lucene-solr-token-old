begin_unit
begin_package
DECL|package|org.apache.lucene.util
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import
begin_comment
comment|/**  * An {@link IntroSorter} for object arrays.  * @lucene.internal  */
end_comment
begin_class
DECL|class|ArrayIntroSorter
specifier|final
class|class
name|ArrayIntroSorter
parameter_list|<
name|T
parameter_list|>
extends|extends
name|IntroSorter
block|{
DECL|field|arr
specifier|private
specifier|final
name|T
index|[]
name|arr
decl_stmt|;
DECL|field|comparator
specifier|private
specifier|final
name|Comparator
argument_list|<
name|?
super|super
name|T
argument_list|>
name|comparator
decl_stmt|;
DECL|field|pivot
specifier|private
name|T
name|pivot
decl_stmt|;
comment|/** Create a new {@link ArrayInPlaceMergeSorter}. */
DECL|method|ArrayIntroSorter
specifier|public
name|ArrayIntroSorter
parameter_list|(
name|T
index|[]
name|arr
parameter_list|,
name|Comparator
argument_list|<
name|?
super|super
name|T
argument_list|>
name|comparator
parameter_list|)
block|{
name|this
operator|.
name|arr
operator|=
name|arr
expr_stmt|;
name|this
operator|.
name|comparator
operator|=
name|comparator
expr_stmt|;
name|pivot
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|compare
specifier|protected
name|int
name|compare
parameter_list|(
name|int
name|i
parameter_list|,
name|int
name|j
parameter_list|)
block|{
return|return
name|comparator
operator|.
name|compare
argument_list|(
name|arr
index|[
name|i
index|]
argument_list|,
name|arr
index|[
name|j
index|]
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|swap
specifier|protected
name|void
name|swap
parameter_list|(
name|int
name|i
parameter_list|,
name|int
name|j
parameter_list|)
block|{
name|ArrayUtil
operator|.
name|swap
argument_list|(
name|arr
argument_list|,
name|i
argument_list|,
name|j
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setPivot
specifier|protected
name|void
name|setPivot
parameter_list|(
name|int
name|i
parameter_list|)
block|{
name|pivot
operator|=
name|arr
index|[
name|i
index|]
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|comparePivot
specifier|protected
name|int
name|comparePivot
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|comparator
operator|.
name|compare
argument_list|(
name|pivot
argument_list|,
name|arr
index|[
name|i
index|]
argument_list|)
return|;
block|}
block|}
end_class
end_unit
