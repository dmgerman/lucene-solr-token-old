begin_unit
begin_package
DECL|package|org.apache.lucene.util.packed
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|packed
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|packed
operator|.
name|PackedInts
operator|.
name|checkBlockSize
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|packed
operator|.
name|PackedInts
operator|.
name|numBlocks
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|RamUsageEstimator
import|;
end_import
begin_comment
comment|/**  * A {@link PagedGrowableWriter}. This class slices data into fixed-size blocks  * which have independent numbers of bits per value and grow on-demand.  *<p>You should use this class instead of {@link AppendingLongBuffer} only when  * you need random write-access. Otherwise this class will likely be slower and  * less memory-efficient.  * @lucene.internal  */
end_comment
begin_class
DECL|class|PagedGrowableWriter
specifier|public
specifier|final
class|class
name|PagedGrowableWriter
block|{
DECL|field|MIN_BLOCK_SIZE
specifier|static
specifier|final
name|int
name|MIN_BLOCK_SIZE
init|=
literal|1
operator|<<
literal|6
decl_stmt|;
DECL|field|MAX_BLOCK_SIZE
specifier|static
specifier|final
name|int
name|MAX_BLOCK_SIZE
init|=
literal|1
operator|<<
literal|30
decl_stmt|;
DECL|field|size
specifier|final
name|long
name|size
decl_stmt|;
DECL|field|pageShift
specifier|final
name|int
name|pageShift
decl_stmt|;
DECL|field|pageMask
specifier|final
name|int
name|pageMask
decl_stmt|;
DECL|field|subWriters
specifier|final
name|GrowableWriter
index|[]
name|subWriters
decl_stmt|;
DECL|field|startBitsPerValue
specifier|final
name|int
name|startBitsPerValue
decl_stmt|;
DECL|field|acceptableOverheadRatio
specifier|final
name|float
name|acceptableOverheadRatio
decl_stmt|;
comment|/**    * Create a new {@link PagedGrowableWriter} instance.    *    * @param size the number of values to store.    * @param pageSize the number of values per page    * @param startBitsPerValue the initial number of bits per value    * @param acceptableOverheadRatio an acceptable overhead ratio    */
DECL|method|PagedGrowableWriter
specifier|public
name|PagedGrowableWriter
parameter_list|(
name|long
name|size
parameter_list|,
name|int
name|pageSize
parameter_list|,
name|int
name|startBitsPerValue
parameter_list|,
name|float
name|acceptableOverheadRatio
parameter_list|)
block|{
name|this
argument_list|(
name|size
argument_list|,
name|pageSize
argument_list|,
name|startBitsPerValue
argument_list|,
name|acceptableOverheadRatio
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|PagedGrowableWriter
name|PagedGrowableWriter
parameter_list|(
name|long
name|size
parameter_list|,
name|int
name|pageSize
parameter_list|,
name|int
name|startBitsPerValue
parameter_list|,
name|float
name|acceptableOverheadRatio
parameter_list|,
name|boolean
name|fillPages
parameter_list|)
block|{
name|this
operator|.
name|size
operator|=
name|size
expr_stmt|;
name|this
operator|.
name|startBitsPerValue
operator|=
name|startBitsPerValue
expr_stmt|;
name|this
operator|.
name|acceptableOverheadRatio
operator|=
name|acceptableOverheadRatio
expr_stmt|;
name|pageShift
operator|=
name|checkBlockSize
argument_list|(
name|pageSize
argument_list|,
name|MIN_BLOCK_SIZE
argument_list|,
name|MAX_BLOCK_SIZE
argument_list|)
expr_stmt|;
name|pageMask
operator|=
name|pageSize
operator|-
literal|1
expr_stmt|;
specifier|final
name|int
name|numPages
init|=
name|numBlocks
argument_list|(
name|size
argument_list|,
name|pageSize
argument_list|)
decl_stmt|;
name|subWriters
operator|=
operator|new
name|GrowableWriter
index|[
name|numPages
index|]
expr_stmt|;
if|if
condition|(
name|fillPages
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numPages
condition|;
operator|++
name|i
control|)
block|{
comment|// do not allocate for more entries than necessary on the last page
specifier|final
name|int
name|valueCount
init|=
name|i
operator|==
name|numPages
operator|-
literal|1
condition|?
name|lastPageSize
argument_list|(
name|size
argument_list|)
else|:
name|pageSize
decl_stmt|;
name|subWriters
index|[
name|i
index|]
operator|=
operator|new
name|GrowableWriter
argument_list|(
name|startBitsPerValue
argument_list|,
name|valueCount
argument_list|,
name|acceptableOverheadRatio
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|lastPageSize
specifier|private
name|int
name|lastPageSize
parameter_list|(
name|long
name|size
parameter_list|)
block|{
specifier|final
name|int
name|sz
init|=
name|indexInPage
argument_list|(
name|size
argument_list|)
decl_stmt|;
return|return
name|sz
operator|==
literal|0
condition|?
name|pageSize
argument_list|()
else|:
name|sz
return|;
block|}
DECL|method|pageSize
specifier|private
name|int
name|pageSize
parameter_list|()
block|{
return|return
name|pageMask
operator|+
literal|1
return|;
block|}
comment|/** The number of values. */
DECL|method|size
specifier|public
name|long
name|size
parameter_list|()
block|{
return|return
name|size
return|;
block|}
DECL|method|pageIndex
name|int
name|pageIndex
parameter_list|(
name|long
name|index
parameter_list|)
block|{
return|return
call|(
name|int
call|)
argument_list|(
name|index
operator|>>>
name|pageShift
argument_list|)
return|;
block|}
DECL|method|indexInPage
name|int
name|indexInPage
parameter_list|(
name|long
name|index
parameter_list|)
block|{
return|return
operator|(
name|int
operator|)
name|index
operator|&
name|pageMask
return|;
block|}
comment|/** Get value at<code>index</code>. */
DECL|method|get
specifier|public
name|long
name|get
parameter_list|(
name|long
name|index
parameter_list|)
block|{
assert|assert
name|index
operator|>=
literal|0
operator|&&
name|index
operator|<
name|size
assert|;
specifier|final
name|int
name|pageIndex
init|=
name|pageIndex
argument_list|(
name|index
argument_list|)
decl_stmt|;
specifier|final
name|int
name|indexInPage
init|=
name|indexInPage
argument_list|(
name|index
argument_list|)
decl_stmt|;
return|return
name|subWriters
index|[
name|pageIndex
index|]
operator|.
name|get
argument_list|(
name|indexInPage
argument_list|)
return|;
block|}
comment|/** Set value at<code>index</code>. */
DECL|method|set
specifier|public
name|void
name|set
parameter_list|(
name|long
name|index
parameter_list|,
name|long
name|value
parameter_list|)
block|{
assert|assert
name|index
operator|>=
literal|0
operator|&&
name|index
operator|<
name|size
assert|;
specifier|final
name|int
name|pageIndex
init|=
name|pageIndex
argument_list|(
name|index
argument_list|)
decl_stmt|;
specifier|final
name|int
name|indexInPage
init|=
name|indexInPage
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|subWriters
index|[
name|pageIndex
index|]
operator|.
name|set
argument_list|(
name|indexInPage
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
comment|/** Create a new {@link PagedGrowableWriter} of size<code>newSize</code>    *  based on the content of this buffer. This method is much more efficient    *  than creating a new {@link PagedGrowableWriter} and copying values one by    *  one. */
DECL|method|resize
specifier|public
name|PagedGrowableWriter
name|resize
parameter_list|(
name|long
name|newSize
parameter_list|)
block|{
specifier|final
name|PagedGrowableWriter
name|newWriter
init|=
operator|new
name|PagedGrowableWriter
argument_list|(
name|newSize
argument_list|,
name|pageSize
argument_list|()
argument_list|,
name|startBitsPerValue
argument_list|,
name|acceptableOverheadRatio
argument_list|,
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|int
name|numCommonPages
init|=
name|Math
operator|.
name|min
argument_list|(
name|newWriter
operator|.
name|subWriters
operator|.
name|length
argument_list|,
name|subWriters
operator|.
name|length
argument_list|)
decl_stmt|;
specifier|final
name|long
index|[]
name|copyBuffer
init|=
operator|new
name|long
index|[
literal|1024
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|newWriter
operator|.
name|subWriters
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
specifier|final
name|int
name|valueCount
init|=
name|i
operator|==
name|newWriter
operator|.
name|subWriters
operator|.
name|length
operator|-
literal|1
condition|?
name|lastPageSize
argument_list|(
name|newSize
argument_list|)
else|:
name|pageSize
argument_list|()
decl_stmt|;
specifier|final
name|int
name|bpv
init|=
name|i
operator|<
name|numCommonPages
condition|?
name|subWriters
index|[
name|i
index|]
operator|.
name|getBitsPerValue
argument_list|()
else|:
name|startBitsPerValue
decl_stmt|;
name|newWriter
operator|.
name|subWriters
index|[
name|i
index|]
operator|=
operator|new
name|GrowableWriter
argument_list|(
name|bpv
argument_list|,
name|valueCount
argument_list|,
name|acceptableOverheadRatio
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|<
name|numCommonPages
condition|)
block|{
specifier|final
name|int
name|copyLength
init|=
name|Math
operator|.
name|min
argument_list|(
name|valueCount
argument_list|,
name|subWriters
index|[
name|i
index|]
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|PackedInts
operator|.
name|copy
argument_list|(
name|subWriters
index|[
name|i
index|]
argument_list|,
literal|0
argument_list|,
name|newWriter
operator|.
name|subWriters
index|[
name|i
index|]
operator|.
name|getMutable
argument_list|()
argument_list|,
literal|0
argument_list|,
name|copyLength
argument_list|,
name|copyBuffer
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|newWriter
return|;
block|}
comment|/** Return the number of bytes used by this object. */
DECL|method|ramBytesUsed
specifier|public
name|long
name|ramBytesUsed
parameter_list|()
block|{
name|long
name|bytesUsed
init|=
name|RamUsageEstimator
operator|.
name|alignObjectSize
argument_list|(
name|RamUsageEstimator
operator|.
name|NUM_BYTES_OBJECT_HEADER
operator|+
name|RamUsageEstimator
operator|.
name|NUM_BYTES_OBJECT_REF
operator|+
name|RamUsageEstimator
operator|.
name|NUM_BYTES_LONG
operator|+
literal|3
operator|*
name|RamUsageEstimator
operator|.
name|NUM_BYTES_INT
operator|+
name|RamUsageEstimator
operator|.
name|NUM_BYTES_FLOAT
argument_list|)
decl_stmt|;
name|bytesUsed
operator|+=
name|RamUsageEstimator
operator|.
name|alignObjectSize
argument_list|(
name|RamUsageEstimator
operator|.
name|NUM_BYTES_ARRAY_HEADER
operator|+
operator|(
name|long
operator|)
name|RamUsageEstimator
operator|.
name|NUM_BYTES_OBJECT_REF
operator|*
name|subWriters
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|GrowableWriter
name|gw
range|:
name|subWriters
control|)
block|{
name|bytesUsed
operator|+=
name|gw
operator|.
name|ramBytesUsed
argument_list|()
expr_stmt|;
block|}
return|return
name|bytesUsed
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|"(size="
operator|+
name|size
argument_list|()
operator|+
literal|",pageSize="
operator|+
name|pageSize
argument_list|()
operator|+
literal|")"
return|;
block|}
block|}
end_class
end_unit
