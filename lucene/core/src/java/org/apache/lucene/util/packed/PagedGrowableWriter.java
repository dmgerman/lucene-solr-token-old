begin_unit
begin_package
DECL|package|org.apache.lucene.util.packed
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|packed
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|RamUsageEstimator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|packed
operator|.
name|PackedInts
operator|.
name|Mutable
import|;
end_import
begin_comment
comment|/**  * A {@link PagedGrowableWriter}. This class slices data into fixed-size blocks  * which have independent numbers of bits per value and grow on-demand.  *<p>You should use this class instead of {@link AppendingLongBuffer} only when  * you need random write-access. Otherwise this class will likely be slower and  * less memory-efficient.  * @lucene.internal  */
end_comment
begin_class
DECL|class|PagedGrowableWriter
specifier|public
specifier|final
class|class
name|PagedGrowableWriter
extends|extends
name|AbstractPagedMutable
argument_list|<
name|PagedGrowableWriter
argument_list|>
block|{
DECL|field|acceptableOverheadRatio
specifier|final
name|float
name|acceptableOverheadRatio
decl_stmt|;
comment|/**    * Create a new {@link PagedGrowableWriter} instance.    *    * @param size the number of values to store.    * @param pageSize the number of values per page    * @param startBitsPerValue the initial number of bits per value    * @param acceptableOverheadRatio an acceptable overhead ratio    */
DECL|method|PagedGrowableWriter
specifier|public
name|PagedGrowableWriter
parameter_list|(
name|long
name|size
parameter_list|,
name|int
name|pageSize
parameter_list|,
name|int
name|startBitsPerValue
parameter_list|,
name|float
name|acceptableOverheadRatio
parameter_list|)
block|{
name|this
argument_list|(
name|size
argument_list|,
name|pageSize
argument_list|,
name|startBitsPerValue
argument_list|,
name|acceptableOverheadRatio
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|PagedGrowableWriter
name|PagedGrowableWriter
parameter_list|(
name|long
name|size
parameter_list|,
name|int
name|pageSize
parameter_list|,
name|int
name|startBitsPerValue
parameter_list|,
name|float
name|acceptableOverheadRatio
parameter_list|,
name|boolean
name|fillPages
parameter_list|)
block|{
name|super
argument_list|(
name|startBitsPerValue
argument_list|,
name|size
argument_list|,
name|pageSize
argument_list|)
expr_stmt|;
name|this
operator|.
name|acceptableOverheadRatio
operator|=
name|acceptableOverheadRatio
expr_stmt|;
if|if
condition|(
name|fillPages
condition|)
block|{
name|fillPages
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|newMutable
specifier|protected
name|Mutable
name|newMutable
parameter_list|(
name|int
name|valueCount
parameter_list|,
name|int
name|bitsPerValue
parameter_list|)
block|{
return|return
operator|new
name|GrowableWriter
argument_list|(
name|bitsPerValue
argument_list|,
name|valueCount
argument_list|,
name|acceptableOverheadRatio
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|newUnfilledCopy
specifier|protected
name|PagedGrowableWriter
name|newUnfilledCopy
parameter_list|(
name|long
name|newSize
parameter_list|)
block|{
return|return
operator|new
name|PagedGrowableWriter
argument_list|(
name|newSize
argument_list|,
name|pageSize
argument_list|()
argument_list|,
name|bitsPerValue
argument_list|,
name|acceptableOverheadRatio
argument_list|,
literal|false
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|baseRamBytesUsed
specifier|protected
name|long
name|baseRamBytesUsed
parameter_list|()
block|{
return|return
name|super
operator|.
name|baseRamBytesUsed
argument_list|()
operator|+
name|RamUsageEstimator
operator|.
name|NUM_BYTES_FLOAT
return|;
block|}
block|}
end_class
end_unit
