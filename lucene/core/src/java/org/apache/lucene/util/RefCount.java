begin_unit
begin_package
DECL|package|org.apache.lucene.util
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_comment
comment|/**  * Manages reference counting for a given object. Extensions can override  * {@link #release()} to do custom logic when reference counting hits 0.  */
end_comment
begin_class
DECL|class|RefCount
specifier|public
class|class
name|RefCount
parameter_list|<
name|T
parameter_list|>
block|{
DECL|field|refCount
specifier|private
specifier|final
name|AtomicInteger
name|refCount
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|1
argument_list|)
decl_stmt|;
DECL|field|object
specifier|protected
specifier|final
name|T
name|object
decl_stmt|;
DECL|method|RefCount
specifier|public
name|RefCount
parameter_list|(
name|T
name|object
parameter_list|)
block|{
name|this
operator|.
name|object
operator|=
name|object
expr_stmt|;
block|}
comment|/**    * Called when reference counting hits 0. By default this method does nothing,    * but extensions can override to e.g. release resources attached to object    * that is managed by this class.    */
DECL|method|release
specifier|protected
name|void
name|release
parameter_list|()
throws|throws
name|IOException
block|{}
comment|/**    * Decrements the reference counting of this object. When reference counting    * hits 0, calls {@link #release()}.    */
DECL|method|decRef
specifier|public
specifier|final
name|void
name|decRef
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|int
name|rc
init|=
name|refCount
operator|.
name|decrementAndGet
argument_list|()
decl_stmt|;
if|if
condition|(
name|rc
operator|==
literal|0
condition|)
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|release
argument_list|()
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
comment|// Put reference back on failure
name|refCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|rc
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"too many decRef calls: refCount is "
operator|+
name|rc
operator|+
literal|" after decrement"
argument_list|)
throw|;
block|}
block|}
DECL|method|get
specifier|public
specifier|final
name|T
name|get
parameter_list|()
block|{
return|return
name|object
return|;
block|}
comment|/** Returns the current reference count. */
DECL|method|getRefCount
specifier|public
specifier|final
name|int
name|getRefCount
parameter_list|()
block|{
return|return
name|refCount
operator|.
name|get
argument_list|()
return|;
block|}
comment|/**    * Increments the reference count. Calls to this method must be matched with    * calls to {@link #decRef()}.    */
DECL|method|incRef
specifier|public
specifier|final
name|void
name|incRef
parameter_list|()
block|{
name|refCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
block|}
end_class
end_unit
