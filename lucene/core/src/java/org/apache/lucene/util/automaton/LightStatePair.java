begin_unit
begin_comment
comment|/*  * dk.brics.automaton  *   * Copyright (c) 2001-2009 Anders Moeller  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  * 3. The name of the author may not be used to endorse or promote products  *    derived from this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR  * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,  * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT  * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF  * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  */
end_comment
begin_package
DECL|package|org.apache.lucene.util.automaton
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|automaton
package|;
end_package
begin_comment
comment|/**  * Pair of states.  *   * @lucene.experimental  */
end_comment
begin_class
DECL|class|LightStatePair
specifier|public
class|class
name|LightStatePair
block|{
DECL|field|s
name|int
name|s
decl_stmt|;
DECL|field|s1
name|int
name|s1
decl_stmt|;
DECL|field|s2
name|int
name|s2
decl_stmt|;
DECL|method|LightStatePair
name|LightStatePair
parameter_list|(
name|int
name|s
parameter_list|,
name|int
name|s1
parameter_list|,
name|int
name|s2
parameter_list|)
block|{
name|this
operator|.
name|s
operator|=
name|s
expr_stmt|;
name|this
operator|.
name|s1
operator|=
name|s1
expr_stmt|;
name|this
operator|.
name|s2
operator|=
name|s2
expr_stmt|;
block|}
comment|/**    * Constructs a new state pair.    *     * @param s1 first state    * @param s2 second state    */
DECL|method|LightStatePair
specifier|public
name|LightStatePair
parameter_list|(
name|int
name|s1
parameter_list|,
name|int
name|s2
parameter_list|)
block|{
name|this
operator|.
name|s1
operator|=
name|s1
expr_stmt|;
name|this
operator|.
name|s2
operator|=
name|s2
expr_stmt|;
name|this
operator|.
name|s
operator|=
operator|-
literal|1
expr_stmt|;
block|}
comment|/**    * Checks for equality.    *     * @param obj object to compare with    * @return true if<tt>obj</tt> represents the same pair of states as this    *         pair    */
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|instanceof
name|LightStatePair
condition|)
block|{
name|LightStatePair
name|p
init|=
operator|(
name|LightStatePair
operator|)
name|obj
decl_stmt|;
return|return
name|p
operator|.
name|s1
operator|==
name|s1
operator|&&
name|p
operator|.
name|s2
operator|==
name|s2
return|;
block|}
else|else
return|return
literal|false
return|;
block|}
comment|/**    * Returns hash code.    *     * @return hash code    */
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|s1
operator|^
name|s2
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"LightStatePair(s1="
operator|+
name|s1
operator|+
literal|" s2="
operator|+
name|s2
operator|+
literal|")"
return|;
block|}
block|}
end_class
end_unit
