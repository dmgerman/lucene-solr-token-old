begin_unit
begin_package
DECL|package|org.apache.lucene.util.packed
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|packed
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_comment
comment|/**  * Non-specialized {@link BulkOperation} for {@link PackedInts.Format#PACKED_SINGLE_BLOCK}.  */
end_comment
begin_class
DECL|class|BulkOperationPackedSingleBlock
specifier|final
class|class
name|BulkOperationPackedSingleBlock
extends|extends
name|BulkOperation
block|{
DECL|field|BLOCK_COUNT
specifier|private
specifier|static
specifier|final
name|int
name|BLOCK_COUNT
init|=
literal|1
decl_stmt|;
DECL|field|bitsPerValue
specifier|private
specifier|final
name|int
name|bitsPerValue
decl_stmt|;
DECL|field|valueCount
specifier|private
specifier|final
name|int
name|valueCount
decl_stmt|;
DECL|field|mask
specifier|private
specifier|final
name|long
name|mask
decl_stmt|;
DECL|method|BulkOperationPackedSingleBlock
specifier|public
name|BulkOperationPackedSingleBlock
parameter_list|(
name|int
name|bitsPerValue
parameter_list|)
block|{
name|this
operator|.
name|bitsPerValue
operator|=
name|bitsPerValue
expr_stmt|;
name|this
operator|.
name|valueCount
operator|=
literal|64
operator|/
name|bitsPerValue
expr_stmt|;
name|this
operator|.
name|mask
operator|=
operator|(
literal|1L
operator|<<
name|bitsPerValue
operator|)
operator|-
literal|1
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|longBlockCount
specifier|public
specifier|final
name|int
name|longBlockCount
parameter_list|()
block|{
return|return
name|BLOCK_COUNT
return|;
block|}
annotation|@
name|Override
DECL|method|byteBlockCount
specifier|public
specifier|final
name|int
name|byteBlockCount
parameter_list|()
block|{
return|return
name|BLOCK_COUNT
operator|*
literal|8
return|;
block|}
annotation|@
name|Override
DECL|method|longValueCount
specifier|public
name|int
name|longValueCount
parameter_list|()
block|{
return|return
name|valueCount
return|;
block|}
annotation|@
name|Override
DECL|method|byteValueCount
specifier|public
specifier|final
name|int
name|byteValueCount
parameter_list|()
block|{
return|return
name|valueCount
return|;
block|}
DECL|method|readLong
specifier|private
specifier|static
name|long
name|readLong
parameter_list|(
name|byte
index|[]
name|blocks
parameter_list|,
name|int
name|blocksOffset
parameter_list|)
block|{
return|return
operator|(
name|blocks
index|[
name|blocksOffset
operator|++
index|]
operator|&
literal|0xFFL
operator|)
operator|<<
literal|56
operator||
operator|(
name|blocks
index|[
name|blocksOffset
operator|++
index|]
operator|&
literal|0xFFL
operator|)
operator|<<
literal|48
operator||
operator|(
name|blocks
index|[
name|blocksOffset
operator|++
index|]
operator|&
literal|0xFFL
operator|)
operator|<<
literal|40
operator||
operator|(
name|blocks
index|[
name|blocksOffset
operator|++
index|]
operator|&
literal|0xFFL
operator|)
operator|<<
literal|32
operator||
operator|(
name|blocks
index|[
name|blocksOffset
operator|++
index|]
operator|&
literal|0xFFL
operator|)
operator|<<
literal|24
operator||
operator|(
name|blocks
index|[
name|blocksOffset
operator|++
index|]
operator|&
literal|0xFFL
operator|)
operator|<<
literal|16
operator||
operator|(
name|blocks
index|[
name|blocksOffset
operator|++
index|]
operator|&
literal|0xFFL
operator|)
operator|<<
literal|8
operator||
name|blocks
index|[
name|blocksOffset
operator|++
index|]
operator|&
literal|0xFFL
return|;
block|}
DECL|method|decode
specifier|private
name|int
name|decode
parameter_list|(
name|long
name|block
parameter_list|,
name|long
index|[]
name|values
parameter_list|,
name|int
name|valuesOffset
parameter_list|)
block|{
name|values
index|[
name|valuesOffset
operator|++
index|]
operator|=
name|block
operator|&
name|mask
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|1
init|;
name|j
operator|<
name|valueCount
condition|;
operator|++
name|j
control|)
block|{
name|block
operator|>>>=
name|bitsPerValue
expr_stmt|;
name|values
index|[
name|valuesOffset
operator|++
index|]
operator|=
name|block
operator|&
name|mask
expr_stmt|;
block|}
return|return
name|valuesOffset
return|;
block|}
DECL|method|decode
specifier|private
name|int
name|decode
parameter_list|(
name|long
name|block
parameter_list|,
name|int
index|[]
name|values
parameter_list|,
name|int
name|valuesOffset
parameter_list|)
block|{
name|values
index|[
name|valuesOffset
operator|++
index|]
operator|=
call|(
name|int
call|)
argument_list|(
name|block
operator|&
name|mask
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|1
init|;
name|j
operator|<
name|valueCount
condition|;
operator|++
name|j
control|)
block|{
name|block
operator|>>>=
name|bitsPerValue
expr_stmt|;
name|values
index|[
name|valuesOffset
operator|++
index|]
operator|=
call|(
name|int
call|)
argument_list|(
name|block
operator|&
name|mask
argument_list|)
expr_stmt|;
block|}
return|return
name|valuesOffset
return|;
block|}
DECL|method|encode
specifier|private
name|long
name|encode
parameter_list|(
name|long
index|[]
name|values
parameter_list|,
name|int
name|valuesOffset
parameter_list|)
block|{
name|long
name|block
init|=
name|values
index|[
name|valuesOffset
operator|++
index|]
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|1
init|;
name|j
operator|<
name|valueCount
condition|;
operator|++
name|j
control|)
block|{
name|block
operator||=
name|values
index|[
name|valuesOffset
operator|++
index|]
operator|<<
operator|(
name|j
operator|*
name|bitsPerValue
operator|)
expr_stmt|;
block|}
return|return
name|block
return|;
block|}
DECL|method|encode
specifier|private
name|long
name|encode
parameter_list|(
name|int
index|[]
name|values
parameter_list|,
name|int
name|valuesOffset
parameter_list|)
block|{
name|long
name|block
init|=
name|values
index|[
name|valuesOffset
operator|++
index|]
operator|&
literal|0xFFFFFFFFL
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|1
init|;
name|j
operator|<
name|valueCount
condition|;
operator|++
name|j
control|)
block|{
name|block
operator||=
operator|(
name|values
index|[
name|valuesOffset
operator|++
index|]
operator|&
literal|0xFFFFFFFFL
operator|)
operator|<<
operator|(
name|j
operator|*
name|bitsPerValue
operator|)
expr_stmt|;
block|}
return|return
name|block
return|;
block|}
annotation|@
name|Override
DECL|method|decode
specifier|public
name|void
name|decode
parameter_list|(
name|long
index|[]
name|blocks
parameter_list|,
name|int
name|blocksOffset
parameter_list|,
name|long
index|[]
name|values
parameter_list|,
name|int
name|valuesOffset
parameter_list|,
name|int
name|iterations
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iterations
condition|;
operator|++
name|i
control|)
block|{
specifier|final
name|long
name|block
init|=
name|blocks
index|[
name|blocksOffset
operator|++
index|]
decl_stmt|;
name|valuesOffset
operator|=
name|decode
argument_list|(
name|block
argument_list|,
name|values
argument_list|,
name|valuesOffset
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|decode
specifier|public
name|void
name|decode
parameter_list|(
name|byte
index|[]
name|blocks
parameter_list|,
name|int
name|blocksOffset
parameter_list|,
name|long
index|[]
name|values
parameter_list|,
name|int
name|valuesOffset
parameter_list|,
name|int
name|iterations
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iterations
condition|;
operator|++
name|i
control|)
block|{
specifier|final
name|long
name|block
init|=
name|readLong
argument_list|(
name|blocks
argument_list|,
name|blocksOffset
argument_list|)
decl_stmt|;
name|blocksOffset
operator|+=
literal|8
expr_stmt|;
name|valuesOffset
operator|=
name|decode
argument_list|(
name|block
argument_list|,
name|values
argument_list|,
name|valuesOffset
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|decode
specifier|public
name|void
name|decode
parameter_list|(
name|long
index|[]
name|blocks
parameter_list|,
name|int
name|blocksOffset
parameter_list|,
name|int
index|[]
name|values
parameter_list|,
name|int
name|valuesOffset
parameter_list|,
name|int
name|iterations
parameter_list|)
block|{
if|if
condition|(
name|bitsPerValue
operator|>
literal|32
condition|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Cannot decode "
operator|+
name|bitsPerValue
operator|+
literal|"-bits values into an int[]"
argument_list|)
throw|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iterations
condition|;
operator|++
name|i
control|)
block|{
specifier|final
name|long
name|block
init|=
name|blocks
index|[
name|blocksOffset
operator|++
index|]
decl_stmt|;
name|valuesOffset
operator|=
name|decode
argument_list|(
name|block
argument_list|,
name|values
argument_list|,
name|valuesOffset
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|decode
specifier|public
name|void
name|decode
parameter_list|(
name|byte
index|[]
name|blocks
parameter_list|,
name|int
name|blocksOffset
parameter_list|,
name|int
index|[]
name|values
parameter_list|,
name|int
name|valuesOffset
parameter_list|,
name|int
name|iterations
parameter_list|)
block|{
if|if
condition|(
name|bitsPerValue
operator|>
literal|32
condition|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Cannot decode "
operator|+
name|bitsPerValue
operator|+
literal|"-bits values into an int[]"
argument_list|)
throw|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iterations
condition|;
operator|++
name|i
control|)
block|{
specifier|final
name|long
name|block
init|=
name|readLong
argument_list|(
name|blocks
argument_list|,
name|blocksOffset
argument_list|)
decl_stmt|;
name|blocksOffset
operator|+=
literal|8
expr_stmt|;
name|valuesOffset
operator|=
name|decode
argument_list|(
name|block
argument_list|,
name|values
argument_list|,
name|valuesOffset
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|encode
specifier|public
name|void
name|encode
parameter_list|(
name|long
index|[]
name|values
parameter_list|,
name|int
name|valuesOffset
parameter_list|,
name|long
index|[]
name|blocks
parameter_list|,
name|int
name|blocksOffset
parameter_list|,
name|int
name|iterations
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iterations
condition|;
operator|++
name|i
control|)
block|{
name|blocks
index|[
name|blocksOffset
operator|++
index|]
operator|=
name|encode
argument_list|(
name|values
argument_list|,
name|valuesOffset
argument_list|)
expr_stmt|;
name|valuesOffset
operator|+=
name|valueCount
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|encode
specifier|public
name|void
name|encode
parameter_list|(
name|int
index|[]
name|values
parameter_list|,
name|int
name|valuesOffset
parameter_list|,
name|long
index|[]
name|blocks
parameter_list|,
name|int
name|blocksOffset
parameter_list|,
name|int
name|iterations
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iterations
condition|;
operator|++
name|i
control|)
block|{
name|blocks
index|[
name|blocksOffset
operator|++
index|]
operator|=
name|encode
argument_list|(
name|values
argument_list|,
name|valuesOffset
argument_list|)
expr_stmt|;
name|valuesOffset
operator|+=
name|valueCount
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|encode
specifier|public
name|void
name|encode
parameter_list|(
name|long
index|[]
name|values
parameter_list|,
name|int
name|valuesOffset
parameter_list|,
name|byte
index|[]
name|blocks
parameter_list|,
name|int
name|blocksOffset
parameter_list|,
name|int
name|iterations
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iterations
condition|;
operator|++
name|i
control|)
block|{
specifier|final
name|long
name|block
init|=
name|encode
argument_list|(
name|values
argument_list|,
name|valuesOffset
argument_list|)
decl_stmt|;
name|valuesOffset
operator|+=
name|valueCount
expr_stmt|;
name|blocksOffset
operator|=
name|writeLong
argument_list|(
name|block
argument_list|,
name|blocks
argument_list|,
name|blocksOffset
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|encode
specifier|public
name|void
name|encode
parameter_list|(
name|int
index|[]
name|values
parameter_list|,
name|int
name|valuesOffset
parameter_list|,
name|byte
index|[]
name|blocks
parameter_list|,
name|int
name|blocksOffset
parameter_list|,
name|int
name|iterations
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iterations
condition|;
operator|++
name|i
control|)
block|{
specifier|final
name|long
name|block
init|=
name|encode
argument_list|(
name|values
argument_list|,
name|valuesOffset
argument_list|)
decl_stmt|;
name|valuesOffset
operator|+=
name|valueCount
expr_stmt|;
name|blocksOffset
operator|=
name|writeLong
argument_list|(
name|block
argument_list|,
name|blocks
argument_list|,
name|blocksOffset
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class
end_unit
