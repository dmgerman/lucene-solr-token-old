begin_unit
begin_package
DECL|package|org.apache.lucene.util.bkd
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|bkd
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|CodecUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexInput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Accountable
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|RamUsageEstimator
import|;
end_import
begin_comment
comment|/** Handles intersection of an multi-dimensional shape in byte[] space with a block KD-tree previously written with {@link BKDWriter}.  *  * @lucene.experimental */
end_comment
begin_class
DECL|class|BKDReader
specifier|public
specifier|final
class|class
name|BKDReader
implements|implements
name|Accountable
block|{
comment|// Packed array of byte[] holding all split values in the full binary tree:
DECL|field|splitPackedValues
specifier|final
specifier|private
name|byte
index|[]
name|splitPackedValues
decl_stmt|;
DECL|field|leafBlockFPs
specifier|final
specifier|private
name|long
index|[]
name|leafBlockFPs
decl_stmt|;
DECL|field|leafNodeOffset
specifier|final
specifier|private
name|int
name|leafNodeOffset
decl_stmt|;
DECL|field|numDims
specifier|final
name|int
name|numDims
decl_stmt|;
DECL|field|bytesPerDim
specifier|final
name|int
name|bytesPerDim
decl_stmt|;
DECL|field|in
specifier|final
name|IndexInput
name|in
decl_stmt|;
DECL|field|packedBytesLength
specifier|final
name|int
name|packedBytesLength
decl_stmt|;
DECL|field|maxPointsInLeafNode
specifier|final
name|int
name|maxPointsInLeafNode
decl_stmt|;
DECL|enum|Relation
DECL|enum constant|CELL_INSIDE_QUERY
DECL|enum constant|QUERY_CROSSES_CELL
DECL|enum constant|QUERY_OUTSIDE_CELL
enum|enum
name|Relation
block|{
name|CELL_INSIDE_QUERY
block|,
name|QUERY_CROSSES_CELL
block|,
name|QUERY_OUTSIDE_CELL
block|}
empty_stmt|;
comment|/** We recurse the BKD tree, using a provided instance of this to guide the recursion.    *    * @lucene.experimental */
DECL|interface|IntersectVisitor
specifier|public
interface|interface
name|IntersectVisitor
block|{
comment|/** Called for all docs in a leaf cell that's fully contained by the query.  The      *  consumer should blindly accept the docID. */
DECL|method|visit
name|void
name|visit
parameter_list|(
name|int
name|docID
parameter_list|)
function_decl|;
comment|/** Called for all docs in a leaf cell that crosses the query.  The consumer      *  should scrutinize the packedValue to decide whether to accept it. */
DECL|method|visit
name|void
name|visit
parameter_list|(
name|int
name|docID
parameter_list|,
name|byte
index|[]
name|packedValue
parameter_list|)
function_decl|;
comment|/** Called for non-leaf cells to test how the cell relates to the query, to      *  determine how to further recurse down the treer. */
DECL|method|compare
name|Relation
name|compare
parameter_list|(
name|byte
index|[]
name|minPackedValue
parameter_list|,
name|byte
index|[]
name|maxPackedValue
parameter_list|)
function_decl|;
block|}
comment|/** Caller must pre-seek the provided {@link IndexInput} to the index location that {@link BKDWriter#finish} returned */
DECL|method|BKDReader
specifier|public
name|BKDReader
parameter_list|(
name|IndexInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|CodecUtil
operator|.
name|checkHeader
argument_list|(
name|in
argument_list|,
name|BKDWriter
operator|.
name|CODEC_NAME
argument_list|,
name|BKDWriter
operator|.
name|VERSION_START
argument_list|,
name|BKDWriter
operator|.
name|VERSION_START
argument_list|)
expr_stmt|;
name|numDims
operator|=
name|in
operator|.
name|readVInt
argument_list|()
expr_stmt|;
name|maxPointsInLeafNode
operator|=
name|in
operator|.
name|readVInt
argument_list|()
expr_stmt|;
name|bytesPerDim
operator|=
name|in
operator|.
name|readVInt
argument_list|()
expr_stmt|;
name|packedBytesLength
operator|=
name|numDims
operator|*
name|bytesPerDim
expr_stmt|;
comment|// Read index:
name|int
name|numLeaves
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
name|leafNodeOffset
operator|=
name|numLeaves
expr_stmt|;
name|splitPackedValues
operator|=
operator|new
name|byte
index|[
operator|(
literal|1
operator|+
name|bytesPerDim
operator|)
operator|*
name|numLeaves
index|]
expr_stmt|;
name|in
operator|.
name|readBytes
argument_list|(
name|splitPackedValues
argument_list|,
literal|0
argument_list|,
name|splitPackedValues
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// Tree is fully balanced binary tree, so number of nodes = numLeaves-1, except our nodeIDs are 1-based (splitPackedValues[0] is unused):
name|leafBlockFPs
operator|=
operator|new
name|long
index|[
name|numLeaves
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numLeaves
condition|;
name|i
operator|++
control|)
block|{
name|leafBlockFPs
index|[
name|i
index|]
operator|=
name|in
operator|.
name|readVLong
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|in
operator|=
name|in
expr_stmt|;
block|}
DECL|class|IntersectState
specifier|private
specifier|static
specifier|final
class|class
name|IntersectState
block|{
DECL|field|in
specifier|final
name|IndexInput
name|in
decl_stmt|;
DECL|field|scratchDocIDs
specifier|final
name|int
index|[]
name|scratchDocIDs
decl_stmt|;
DECL|field|scratchPackedValue
specifier|final
name|byte
index|[]
name|scratchPackedValue
decl_stmt|;
comment|// Minimum point of the N-dim rect containing the query shape:
DECL|field|minPacked
specifier|final
name|byte
index|[]
name|minPacked
decl_stmt|;
comment|// Maximum point of the N-dim rect containing the query shape:
DECL|field|maxPacked
specifier|final
name|byte
index|[]
name|maxPacked
decl_stmt|;
DECL|field|visitor
specifier|final
name|IntersectVisitor
name|visitor
decl_stmt|;
DECL|method|IntersectState
specifier|public
name|IntersectState
parameter_list|(
name|IndexInput
name|in
parameter_list|,
name|int
name|packedBytesLength
parameter_list|,
name|int
name|maxPointsInLeafNode
parameter_list|,
name|byte
index|[]
name|minPacked
parameter_list|,
name|byte
index|[]
name|maxPacked
parameter_list|,
name|IntersectVisitor
name|visitor
parameter_list|)
block|{
name|this
operator|.
name|in
operator|=
name|in
expr_stmt|;
name|this
operator|.
name|minPacked
operator|=
name|minPacked
expr_stmt|;
name|this
operator|.
name|maxPacked
operator|=
name|maxPacked
expr_stmt|;
name|this
operator|.
name|visitor
operator|=
name|visitor
expr_stmt|;
name|this
operator|.
name|scratchDocIDs
operator|=
operator|new
name|int
index|[
name|maxPointsInLeafNode
index|]
expr_stmt|;
name|this
operator|.
name|scratchPackedValue
operator|=
operator|new
name|byte
index|[
name|packedBytesLength
index|]
expr_stmt|;
block|}
block|}
DECL|method|intersect
specifier|public
name|void
name|intersect
parameter_list|(
name|IntersectVisitor
name|visitor
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|minPacked
init|=
operator|new
name|byte
index|[
name|packedBytesLength
index|]
decl_stmt|;
name|byte
index|[]
name|maxPacked
init|=
operator|new
name|byte
index|[
name|packedBytesLength
index|]
decl_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|maxPacked
argument_list|,
operator|(
name|byte
operator|)
literal|0xff
argument_list|)
expr_stmt|;
name|intersect
argument_list|(
name|minPacked
argument_list|,
name|maxPacked
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
block|}
DECL|method|intersect
specifier|public
name|void
name|intersect
parameter_list|(
name|byte
index|[]
name|minPacked
parameter_list|,
name|byte
index|[]
name|maxPacked
parameter_list|,
name|IntersectVisitor
name|visitor
parameter_list|)
throws|throws
name|IOException
block|{
name|IntersectState
name|state
init|=
operator|new
name|IntersectState
argument_list|(
name|in
operator|.
name|clone
argument_list|()
argument_list|,
name|packedBytesLength
argument_list|,
name|maxPointsInLeafNode
argument_list|,
name|minPacked
argument_list|,
name|maxPacked
argument_list|,
name|visitor
argument_list|)
decl_stmt|;
name|byte
index|[]
name|rootMinPacked
init|=
operator|new
name|byte
index|[
name|packedBytesLength
index|]
decl_stmt|;
name|byte
index|[]
name|rootMaxPacked
init|=
operator|new
name|byte
index|[
name|packedBytesLength
index|]
decl_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|rootMaxPacked
argument_list|,
operator|(
name|byte
operator|)
literal|0xff
argument_list|)
expr_stmt|;
name|intersect
argument_list|(
name|state
argument_list|,
literal|1
argument_list|,
name|rootMinPacked
argument_list|,
name|rootMaxPacked
argument_list|)
expr_stmt|;
block|}
comment|/** Fast path: this is called when the query box fully encompasses all cells under this node. */
DECL|method|addAll
specifier|private
name|void
name|addAll
parameter_list|(
name|IntersectState
name|state
parameter_list|,
name|int
name|nodeID
parameter_list|)
throws|throws
name|IOException
block|{
comment|//System.out.println("R: addAll nodeID=" + nodeID);
if|if
condition|(
name|nodeID
operator|>=
name|leafNodeOffset
condition|)
block|{
comment|//System.out.println("R:   leaf");
comment|// Leaf node
name|state
operator|.
name|in
operator|.
name|seek
argument_list|(
name|leafBlockFPs
index|[
name|nodeID
operator|-
name|leafNodeOffset
index|]
argument_list|)
expr_stmt|;
comment|// How many points are stored in this leaf cell:
name|int
name|count
init|=
name|state
operator|.
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
comment|// TODO: especially for the 1D case, this was a decent speedup, because caller could know it should budget for around XXX docs:
comment|//state.docs.grow(count);
name|int
name|docID
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|docID
operator|+=
name|state
operator|.
name|in
operator|.
name|readVInt
argument_list|()
expr_stmt|;
name|state
operator|.
name|visitor
operator|.
name|visit
argument_list|(
name|docID
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|addAll
argument_list|(
name|state
argument_list|,
literal|2
operator|*
name|nodeID
argument_list|)
expr_stmt|;
name|addAll
argument_list|(
name|state
argument_list|,
literal|2
operator|*
name|nodeID
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|intersect
specifier|private
name|void
name|intersect
parameter_list|(
name|IntersectState
name|state
parameter_list|,
name|int
name|nodeID
parameter_list|,
name|byte
index|[]
name|cellMinPacked
parameter_list|,
name|byte
index|[]
name|cellMaxPacked
parameter_list|)
throws|throws
name|IOException
block|{
comment|//System.out.println("\nR: intersect nodeID=" + nodeID + " cellMin=" + BKDUtil.bytesToInt(cellMinPacked, 0) + " cellMax=" + BKDUtil.bytesToInt(cellMaxPacked, 0));
comment|// Optimization: only check the visitor when the current cell does not fully contain the bbox.  E.g. if the
comment|// query is a small area around London, UK, most of the high nodes in the BKD tree as we recurse will fully
comment|// contain the query, so we quickly recurse down until the nodes cross the query:
name|boolean
name|cellContainsQuery
init|=
name|BKDUtil
operator|.
name|contains
argument_list|(
name|bytesPerDim
argument_list|,
name|cellMinPacked
argument_list|,
name|cellMaxPacked
argument_list|,
name|state
operator|.
name|minPacked
argument_list|,
name|state
operator|.
name|maxPacked
argument_list|)
decl_stmt|;
comment|//System.out.println("R: cellContainsQuery=" + cellContainsQuery);
if|if
condition|(
name|cellContainsQuery
operator|==
literal|false
condition|)
block|{
name|Relation
name|r
init|=
name|state
operator|.
name|visitor
operator|.
name|compare
argument_list|(
name|cellMinPacked
argument_list|,
name|cellMaxPacked
argument_list|)
decl_stmt|;
comment|//System.out.println("R: relation=" + r);
if|if
condition|(
name|r
operator|==
name|Relation
operator|.
name|QUERY_OUTSIDE_CELL
condition|)
block|{
comment|// This cell is fully outside of the query shape: stop recursing
return|return;
block|}
elseif|else
if|if
condition|(
name|r
operator|==
name|Relation
operator|.
name|CELL_INSIDE_QUERY
condition|)
block|{
comment|// This cell is fully inside of the query shape: recursively add all points in this cell without filtering
name|addAll
argument_list|(
name|state
argument_list|,
name|nodeID
argument_list|)
expr_stmt|;
return|return;
block|}
else|else
block|{
comment|// The cell crosses the shape boundary, so we fall through and do full filtering
block|}
block|}
if|if
condition|(
name|nodeID
operator|>=
name|leafNodeOffset
condition|)
block|{
comment|// Leaf node; scan and filter all points in this block:
comment|//System.out.println("    intersect leaf nodeID=" + nodeID + " vs leafNodeOffset=" + leafNodeOffset + " fp=" + leafBlockFPs[nodeID-leafNodeOffset]);
name|state
operator|.
name|in
operator|.
name|seek
argument_list|(
name|leafBlockFPs
index|[
name|nodeID
operator|-
name|leafNodeOffset
index|]
argument_list|)
expr_stmt|;
comment|// How many points are stored in this leaf cell:
name|int
name|count
init|=
name|state
operator|.
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
comment|// TODO: we could maybe pollute the IntersectVisitor API with a "grow" method if this maybe helps perf
comment|// enough (it did before, esp. for the 1D case):
comment|//state.docs.grow(count);
name|int
name|docID
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|docID
operator|+=
name|state
operator|.
name|in
operator|.
name|readVInt
argument_list|()
expr_stmt|;
name|state
operator|.
name|scratchDocIDs
index|[
name|i
index|]
operator|=
name|docID
expr_stmt|;
block|}
comment|// Again, this time reading values and checking with the visitor
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|state
operator|.
name|in
operator|.
name|readBytes
argument_list|(
name|state
operator|.
name|scratchPackedValue
argument_list|,
literal|0
argument_list|,
name|state
operator|.
name|scratchPackedValue
operator|.
name|length
argument_list|)
expr_stmt|;
name|state
operator|.
name|visitor
operator|.
name|visit
argument_list|(
name|state
operator|.
name|scratchDocIDs
index|[
name|i
index|]
argument_list|,
name|state
operator|.
name|scratchPackedValue
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// Non-leaf node: recurse on the split left and right nodes
name|int
name|address
init|=
name|nodeID
operator|*
operator|(
name|bytesPerDim
operator|+
literal|1
operator|)
decl_stmt|;
name|int
name|splitDim
init|=
name|splitPackedValues
index|[
name|address
index|]
operator|&
literal|0xff
decl_stmt|;
assert|assert
name|splitDim
operator|<
name|numDims
assert|;
comment|// TODO: can we alloc& reuse this up front?
name|byte
index|[]
name|splitValue
init|=
operator|new
name|byte
index|[
name|bytesPerDim
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|splitPackedValues
argument_list|,
name|address
operator|+
literal|1
argument_list|,
name|splitValue
argument_list|,
literal|0
argument_list|,
name|bytesPerDim
argument_list|)
expr_stmt|;
comment|// TODO: can we alloc& reuse this up front?
name|byte
index|[]
name|splitPackedValue
init|=
operator|new
name|byte
index|[
name|packedBytesLength
index|]
decl_stmt|;
if|if
condition|(
name|BKDUtil
operator|.
name|compare
argument_list|(
name|bytesPerDim
argument_list|,
name|state
operator|.
name|minPacked
argument_list|,
name|splitDim
argument_list|,
name|splitValue
argument_list|,
literal|0
argument_list|)
operator|<=
literal|0
condition|)
block|{
comment|// The query bbox overlaps our left cell, so we must recurse:
name|System
operator|.
name|arraycopy
argument_list|(
name|state
operator|.
name|maxPacked
argument_list|,
literal|0
argument_list|,
name|splitPackedValue
argument_list|,
literal|0
argument_list|,
name|packedBytesLength
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|splitValue
argument_list|,
literal|0
argument_list|,
name|splitPackedValue
argument_list|,
name|splitDim
operator|*
name|bytesPerDim
argument_list|,
name|bytesPerDim
argument_list|)
expr_stmt|;
name|intersect
argument_list|(
name|state
argument_list|,
literal|2
operator|*
name|nodeID
argument_list|,
name|cellMinPacked
argument_list|,
name|splitPackedValue
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|BKDUtil
operator|.
name|compare
argument_list|(
name|bytesPerDim
argument_list|,
name|state
operator|.
name|maxPacked
argument_list|,
name|splitDim
argument_list|,
name|splitValue
argument_list|,
literal|0
argument_list|)
operator|>=
literal|0
condition|)
block|{
comment|// The query bbox overlaps our left cell, so we must recurse:
name|System
operator|.
name|arraycopy
argument_list|(
name|state
operator|.
name|minPacked
argument_list|,
literal|0
argument_list|,
name|splitPackedValue
argument_list|,
literal|0
argument_list|,
name|packedBytesLength
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|splitValue
argument_list|,
literal|0
argument_list|,
name|splitPackedValue
argument_list|,
name|splitDim
operator|*
name|bytesPerDim
argument_list|,
name|bytesPerDim
argument_list|)
expr_stmt|;
name|intersect
argument_list|(
name|state
argument_list|,
literal|2
operator|*
name|nodeID
operator|+
literal|1
argument_list|,
name|splitPackedValue
argument_list|,
name|cellMaxPacked
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|ramBytesUsed
specifier|public
name|long
name|ramBytesUsed
parameter_list|()
block|{
return|return
name|splitPackedValues
operator|.
name|length
operator|+
name|leafBlockFPs
operator|.
name|length
operator|*
name|RamUsageEstimator
operator|.
name|NUM_BYTES_LONG
return|;
block|}
block|}
end_class
end_unit
