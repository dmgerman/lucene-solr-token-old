begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.geo
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|geo
package|;
end_package
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|PointValues
operator|.
name|Relation
import|;
end_import
begin_comment
comment|/**  * Represents a closed polygon on the earth's surface.  *<p>  * NOTES:  *<ol>  *<li>Coordinates must be in clockwise order, except for holes. Holes must be in counter-clockwise order.  *<li>The polygon must be closed: the first and last coordinates need to have the same values.  *<li>The polygon must not be self-crossing, otherwise may result in unexpected behavior.  *<li>All latitude/longitude values must be in decimal degrees.  *<li>Polygons cannot cross the 180th meridian. Instead, use two polygons: one on each side.  *<li>For more advanced GeoSpatial indexing and query operations see the {@code spatial-extras} module  *</ol>  * @lucene.experimental  */
end_comment
begin_class
DECL|class|Polygon
specifier|public
specifier|final
class|class
name|Polygon
block|{
DECL|field|polyLats
specifier|private
specifier|final
name|double
index|[]
name|polyLats
decl_stmt|;
DECL|field|polyLons
specifier|private
specifier|final
name|double
index|[]
name|polyLons
decl_stmt|;
DECL|field|holes
specifier|private
specifier|final
name|Polygon
index|[]
name|holes
decl_stmt|;
comment|/** minimum latitude of this polygon's bounding box area */
DECL|field|minLat
specifier|public
specifier|final
name|double
name|minLat
decl_stmt|;
comment|/** maximum latitude of this polygon's bounding box area */
DECL|field|maxLat
specifier|public
specifier|final
name|double
name|maxLat
decl_stmt|;
comment|/** minimum longitude of this polygon's bounding box area */
DECL|field|minLon
specifier|public
specifier|final
name|double
name|minLon
decl_stmt|;
comment|/** maximum longitude of this polygon's bounding box area */
DECL|field|maxLon
specifier|public
specifier|final
name|double
name|maxLon
decl_stmt|;
comment|// TODO: we could also compute the maximal inner bounding box, to make relations faster to compute?
comment|/**    * Creates a new Polygon from the supplied latitude/longitude array, and optionally any holes.    */
DECL|method|Polygon
specifier|public
name|Polygon
parameter_list|(
name|double
index|[]
name|polyLats
parameter_list|,
name|double
index|[]
name|polyLons
parameter_list|,
name|Polygon
modifier|...
name|holes
parameter_list|)
block|{
if|if
condition|(
name|polyLats
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"polyLats must not be null"
argument_list|)
throw|;
block|}
if|if
condition|(
name|polyLons
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"polyLons must not be null"
argument_list|)
throw|;
block|}
if|if
condition|(
name|holes
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"holes must not be null"
argument_list|)
throw|;
block|}
if|if
condition|(
name|polyLats
operator|.
name|length
operator|!=
name|polyLons
operator|.
name|length
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"polyLats and polyLons must be equal length"
argument_list|)
throw|;
block|}
if|if
condition|(
name|polyLats
operator|.
name|length
operator|!=
name|polyLons
operator|.
name|length
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"polyLats and polyLons must be equal length"
argument_list|)
throw|;
block|}
if|if
condition|(
name|polyLats
operator|.
name|length
operator|<
literal|4
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"at least 4 polygon points required"
argument_list|)
throw|;
block|}
if|if
condition|(
name|polyLats
index|[
literal|0
index|]
operator|!=
name|polyLats
index|[
name|polyLats
operator|.
name|length
operator|-
literal|1
index|]
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"first and last points of the polygon must be the same (it must close itself): polyLats[0]="
operator|+
name|polyLats
index|[
literal|0
index|]
operator|+
literal|" polyLats["
operator|+
operator|(
name|polyLats
operator|.
name|length
operator|-
literal|1
operator|)
operator|+
literal|"]="
operator|+
name|polyLats
index|[
name|polyLats
operator|.
name|length
operator|-
literal|1
index|]
argument_list|)
throw|;
block|}
if|if
condition|(
name|polyLons
index|[
literal|0
index|]
operator|!=
name|polyLons
index|[
name|polyLons
operator|.
name|length
operator|-
literal|1
index|]
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"first and last points of the polygon must be the same (it must close itself): polyLons[0]="
operator|+
name|polyLons
index|[
literal|0
index|]
operator|+
literal|" polyLons["
operator|+
operator|(
name|polyLons
operator|.
name|length
operator|-
literal|1
operator|)
operator|+
literal|"]="
operator|+
name|polyLons
index|[
name|polyLons
operator|.
name|length
operator|-
literal|1
index|]
argument_list|)
throw|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|polyLats
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|GeoUtils
operator|.
name|checkLatitude
argument_list|(
name|polyLats
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|GeoUtils
operator|.
name|checkLongitude
argument_list|(
name|polyLons
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|holes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Polygon
name|inner
init|=
name|holes
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|inner
operator|.
name|holes
operator|.
name|length
operator|>
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"holes may not contain holes: polygons may not nest."
argument_list|)
throw|;
block|}
block|}
name|this
operator|.
name|polyLats
operator|=
name|polyLats
operator|.
name|clone
argument_list|()
expr_stmt|;
name|this
operator|.
name|polyLons
operator|=
name|polyLons
operator|.
name|clone
argument_list|()
expr_stmt|;
name|this
operator|.
name|holes
operator|=
name|holes
operator|.
name|clone
argument_list|()
expr_stmt|;
comment|// compute bounding box
name|double
name|minLat
init|=
name|Double
operator|.
name|POSITIVE_INFINITY
decl_stmt|;
name|double
name|maxLat
init|=
name|Double
operator|.
name|NEGATIVE_INFINITY
decl_stmt|;
name|double
name|minLon
init|=
name|Double
operator|.
name|POSITIVE_INFINITY
decl_stmt|;
name|double
name|maxLon
init|=
name|Double
operator|.
name|NEGATIVE_INFINITY
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|polyLats
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|minLat
operator|=
name|Math
operator|.
name|min
argument_list|(
name|polyLats
index|[
name|i
index|]
argument_list|,
name|minLat
argument_list|)
expr_stmt|;
name|maxLat
operator|=
name|Math
operator|.
name|max
argument_list|(
name|polyLats
index|[
name|i
index|]
argument_list|,
name|maxLat
argument_list|)
expr_stmt|;
name|minLon
operator|=
name|Math
operator|.
name|min
argument_list|(
name|polyLons
index|[
name|i
index|]
argument_list|,
name|minLon
argument_list|)
expr_stmt|;
name|maxLon
operator|=
name|Math
operator|.
name|max
argument_list|(
name|polyLons
index|[
name|i
index|]
argument_list|,
name|maxLon
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|minLat
operator|=
name|minLat
expr_stmt|;
name|this
operator|.
name|maxLat
operator|=
name|maxLat
expr_stmt|;
name|this
operator|.
name|minLon
operator|=
name|minLon
expr_stmt|;
name|this
operator|.
name|maxLon
operator|=
name|maxLon
expr_stmt|;
block|}
comment|/**     * Returns true if the point is contained within this polygon.    *<p>    * See<a href="https://www.ecse.rpi.edu/~wrf/Research/Short_Notes/pnpoly.html">    * https://www.ecse.rpi.edu/~wrf/Research/Short_Notes/pnpoly.html</a> for more information.    */
comment|// ported to java from https://www.ecse.rpi.edu/~wrf/Research/Short_Notes/pnpoly.html
comment|// original code under the BSD license (https://www.ecse.rpi.edu/~wrf/Research/Short_Notes/pnpoly.html#License%20to%20Use)
comment|//
comment|// Copyright (c) 1970-2003, Wm. Randolph Franklin
comment|//
comment|// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
comment|// documentation files (the "Software"), to deal in the Software without restriction, including without limitation
comment|// the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and
comment|// to permit persons to whom the Software is furnished to do so, subject to the following conditions:
comment|//
comment|// 1. Redistributions of source code must retain the above copyright
comment|//    notice, this list of conditions and the following disclaimers.
comment|// 2. Redistributions in binary form must reproduce the above copyright
comment|//    notice in the documentation and/or other materials provided with
comment|//    the distribution.
comment|// 3. The name of W. Randolph Franklin may not be used to endorse or
comment|//    promote products derived from this Software without specific
comment|//    prior written permission.
comment|//
comment|// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED
comment|// TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
comment|// THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
comment|// CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
comment|// IN THE SOFTWARE.
DECL|method|contains
specifier|public
name|boolean
name|contains
parameter_list|(
name|double
name|latitude
parameter_list|,
name|double
name|longitude
parameter_list|)
block|{
comment|// check bounding box
if|if
condition|(
name|latitude
argument_list|<
name|minLat
operator|||
name|latitude
argument_list|>
name|maxLat
operator|||
name|longitude
argument_list|<
name|minLon
operator|||
name|longitude
argument_list|>
name|maxLon
condition|)
block|{
return|return
literal|false
return|;
block|}
name|boolean
name|inPoly
init|=
literal|false
decl_stmt|;
name|boolean
name|previous
init|=
name|polyLats
index|[
literal|0
index|]
operator|>
name|latitude
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|polyLats
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|boolean
name|current
init|=
name|polyLats
index|[
name|i
index|]
operator|>
name|latitude
decl_stmt|;
if|if
condition|(
name|current
operator|!=
name|previous
condition|)
block|{
if|if
condition|(
name|longitude
operator|<
operator|(
name|polyLons
index|[
name|i
operator|-
literal|1
index|]
operator|-
name|polyLons
index|[
name|i
index|]
operator|)
operator|*
operator|(
name|latitude
operator|-
name|polyLats
index|[
name|i
index|]
operator|)
operator|/
operator|(
name|polyLats
index|[
name|i
operator|-
literal|1
index|]
operator|-
name|polyLats
index|[
name|i
index|]
operator|)
operator|+
name|polyLons
index|[
name|i
index|]
condition|)
block|{
name|inPoly
operator|=
operator|!
name|inPoly
expr_stmt|;
block|}
name|previous
operator|=
name|current
expr_stmt|;
block|}
block|}
if|if
condition|(
name|inPoly
condition|)
block|{
for|for
control|(
name|Polygon
name|hole
range|:
name|holes
control|)
block|{
if|if
condition|(
name|hole
operator|.
name|contains
argument_list|(
name|latitude
argument_list|,
name|longitude
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
comment|/** Returns relation to the provided rectangle */
DECL|method|relate
specifier|public
name|Relation
name|relate
parameter_list|(
name|double
name|minLat
parameter_list|,
name|double
name|maxLat
parameter_list|,
name|double
name|minLon
parameter_list|,
name|double
name|maxLon
parameter_list|)
block|{
comment|// if the bounding boxes are disjoint then the shape does not cross
if|if
condition|(
name|maxLon
argument_list|<
name|this
operator|.
name|minLon
operator|||
name|minLon
argument_list|>
name|this
operator|.
name|maxLon
operator|||
name|maxLat
argument_list|<
name|this
operator|.
name|minLat
operator|||
name|minLat
argument_list|>
name|this
operator|.
name|maxLat
condition|)
block|{
return|return
name|Relation
operator|.
name|CELL_OUTSIDE_QUERY
return|;
block|}
comment|// if the rectangle fully encloses us, we cross.
if|if
condition|(
name|minLat
operator|<=
name|this
operator|.
name|minLat
operator|&&
name|maxLat
operator|>=
name|this
operator|.
name|maxLat
operator|&&
name|minLon
operator|<=
name|this
operator|.
name|minLon
operator|&&
name|maxLon
operator|>=
name|this
operator|.
name|maxLon
condition|)
block|{
return|return
name|Relation
operator|.
name|CELL_CROSSES_QUERY
return|;
block|}
comment|// check any holes
for|for
control|(
name|Polygon
name|hole
range|:
name|holes
control|)
block|{
name|Relation
name|holeRelation
init|=
name|hole
operator|.
name|relate
argument_list|(
name|minLat
argument_list|,
name|maxLat
argument_list|,
name|minLon
argument_list|,
name|maxLon
argument_list|)
decl_stmt|;
if|if
condition|(
name|holeRelation
operator|==
name|Relation
operator|.
name|CELL_CROSSES_QUERY
condition|)
block|{
return|return
name|Relation
operator|.
name|CELL_CROSSES_QUERY
return|;
block|}
elseif|else
if|if
condition|(
name|holeRelation
operator|==
name|Relation
operator|.
name|CELL_INSIDE_QUERY
condition|)
block|{
return|return
name|Relation
operator|.
name|CELL_OUTSIDE_QUERY
return|;
block|}
block|}
comment|// check each corner: if< 4 are present, its cheaper than crossesSlowly
name|int
name|numCorners
init|=
name|numberOfCorners
argument_list|(
name|minLat
argument_list|,
name|maxLat
argument_list|,
name|minLon
argument_list|,
name|maxLon
argument_list|)
decl_stmt|;
if|if
condition|(
name|numCorners
operator|==
literal|4
condition|)
block|{
if|if
condition|(
name|crossesSlowly
argument_list|(
name|minLat
argument_list|,
name|maxLat
argument_list|,
name|minLon
argument_list|,
name|maxLon
argument_list|)
condition|)
block|{
return|return
name|Relation
operator|.
name|CELL_CROSSES_QUERY
return|;
block|}
return|return
name|Relation
operator|.
name|CELL_INSIDE_QUERY
return|;
block|}
elseif|else
if|if
condition|(
name|numCorners
operator|>
literal|0
condition|)
block|{
return|return
name|Relation
operator|.
name|CELL_CROSSES_QUERY
return|;
block|}
comment|// we cross
if|if
condition|(
name|crossesSlowly
argument_list|(
name|minLat
argument_list|,
name|maxLat
argument_list|,
name|minLon
argument_list|,
name|maxLon
argument_list|)
condition|)
block|{
return|return
name|Relation
operator|.
name|CELL_CROSSES_QUERY
return|;
block|}
return|return
name|Relation
operator|.
name|CELL_OUTSIDE_QUERY
return|;
block|}
comment|// returns 0, 4, or something in between
DECL|method|numberOfCorners
specifier|private
name|int
name|numberOfCorners
parameter_list|(
name|double
name|minLat
parameter_list|,
name|double
name|maxLat
parameter_list|,
name|double
name|minLon
parameter_list|,
name|double
name|maxLon
parameter_list|)
block|{
name|int
name|containsCount
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|contains
argument_list|(
name|minLat
argument_list|,
name|minLon
argument_list|)
condition|)
block|{
name|containsCount
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|contains
argument_list|(
name|minLat
argument_list|,
name|maxLon
argument_list|)
condition|)
block|{
name|containsCount
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|containsCount
operator|==
literal|1
condition|)
block|{
return|return
name|containsCount
return|;
block|}
if|if
condition|(
name|contains
argument_list|(
name|maxLat
argument_list|,
name|maxLon
argument_list|)
condition|)
block|{
name|containsCount
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|containsCount
operator|==
literal|2
condition|)
block|{
return|return
name|containsCount
return|;
block|}
if|if
condition|(
name|contains
argument_list|(
name|maxLat
argument_list|,
name|minLon
argument_list|)
condition|)
block|{
name|containsCount
operator|++
expr_stmt|;
block|}
return|return
name|containsCount
return|;
block|}
comment|/** Returns true if the box crosses our polygon */
DECL|method|crossesSlowly
specifier|private
name|boolean
name|crossesSlowly
parameter_list|(
name|double
name|minLat
parameter_list|,
name|double
name|maxLat
parameter_list|,
name|double
name|minLon
parameter_list|,
name|double
name|maxLon
parameter_list|)
block|{
comment|// we compute line intersections of every polygon edge with every box line.
comment|// if we find one, return true.
comment|// for each box line (AB):
comment|//   for each poly line (CD):
comment|//     intersects = orient(C,D,A) * orient(C,D,B)<= 0&& orient(A,B,C) * orient(A,B,D)<= 0
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|polyLons
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|double
name|cy
init|=
name|polyLats
index|[
name|i
operator|-
literal|1
index|]
decl_stmt|;
name|double
name|dy
init|=
name|polyLats
index|[
name|i
index|]
decl_stmt|;
name|double
name|cx
init|=
name|polyLons
index|[
name|i
operator|-
literal|1
index|]
decl_stmt|;
name|double
name|dx
init|=
name|polyLons
index|[
name|i
index|]
decl_stmt|;
comment|// optimization: see if the rectangle is outside of the "bounding box" of the polyline at all
comment|// if not, don't waste our time trying more complicated stuff
if|if
condition|(
operator|(
name|cy
operator|<
name|minLat
operator|&&
name|dy
operator|<
name|minLat
operator|)
operator|||
operator|(
name|cy
operator|>
name|maxLat
operator|&&
name|dy
operator|>
name|maxLat
operator|)
operator|||
operator|(
name|cx
operator|<
name|minLon
operator|&&
name|dx
operator|<
name|minLon
operator|)
operator|||
operator|(
name|cx
operator|>
name|maxLon
operator|&&
name|dx
operator|>
name|maxLon
operator|)
condition|)
block|{
continue|continue;
block|}
comment|// does box's top edge intersect polyline?
comment|// ax = minLon, bx = maxLon, ay = maxLat, by = maxLat
if|if
condition|(
name|orient
argument_list|(
name|cx
argument_list|,
name|cy
argument_list|,
name|dx
argument_list|,
name|dy
argument_list|,
name|minLon
argument_list|,
name|maxLat
argument_list|)
operator|*
name|orient
argument_list|(
name|cx
argument_list|,
name|cy
argument_list|,
name|dx
argument_list|,
name|dy
argument_list|,
name|maxLon
argument_list|,
name|maxLat
argument_list|)
operator|<=
literal|0
operator|&&
name|orient
argument_list|(
name|minLon
argument_list|,
name|maxLat
argument_list|,
name|maxLon
argument_list|,
name|maxLat
argument_list|,
name|cx
argument_list|,
name|cy
argument_list|)
operator|*
name|orient
argument_list|(
name|minLon
argument_list|,
name|maxLat
argument_list|,
name|maxLon
argument_list|,
name|maxLat
argument_list|,
name|dx
argument_list|,
name|dy
argument_list|)
operator|<=
literal|0
condition|)
block|{
return|return
literal|true
return|;
block|}
comment|// does box's right edge intersect polyline?
comment|// ax = maxLon, bx = maxLon, ay = maxLat, by = minLat
if|if
condition|(
name|orient
argument_list|(
name|cx
argument_list|,
name|cy
argument_list|,
name|dx
argument_list|,
name|dy
argument_list|,
name|maxLon
argument_list|,
name|maxLat
argument_list|)
operator|*
name|orient
argument_list|(
name|cx
argument_list|,
name|cy
argument_list|,
name|dx
argument_list|,
name|dy
argument_list|,
name|maxLon
argument_list|,
name|minLat
argument_list|)
operator|<=
literal|0
operator|&&
name|orient
argument_list|(
name|maxLon
argument_list|,
name|maxLat
argument_list|,
name|maxLon
argument_list|,
name|minLat
argument_list|,
name|cx
argument_list|,
name|cy
argument_list|)
operator|*
name|orient
argument_list|(
name|maxLon
argument_list|,
name|maxLat
argument_list|,
name|maxLon
argument_list|,
name|minLat
argument_list|,
name|dx
argument_list|,
name|dy
argument_list|)
operator|<=
literal|0
condition|)
block|{
return|return
literal|true
return|;
block|}
comment|// does box's bottom edge intersect polyline?
comment|// ax = maxLon, bx = minLon, ay = minLat, by = minLat
if|if
condition|(
name|orient
argument_list|(
name|cx
argument_list|,
name|cy
argument_list|,
name|dx
argument_list|,
name|dy
argument_list|,
name|maxLon
argument_list|,
name|minLat
argument_list|)
operator|*
name|orient
argument_list|(
name|cx
argument_list|,
name|cy
argument_list|,
name|dx
argument_list|,
name|dy
argument_list|,
name|minLon
argument_list|,
name|minLat
argument_list|)
operator|<=
literal|0
operator|&&
name|orient
argument_list|(
name|maxLon
argument_list|,
name|minLat
argument_list|,
name|minLon
argument_list|,
name|minLat
argument_list|,
name|cx
argument_list|,
name|cy
argument_list|)
operator|*
name|orient
argument_list|(
name|maxLon
argument_list|,
name|minLat
argument_list|,
name|minLon
argument_list|,
name|minLat
argument_list|,
name|dx
argument_list|,
name|dy
argument_list|)
operator|<=
literal|0
condition|)
block|{
return|return
literal|true
return|;
block|}
comment|// does box's left edge intersect polyline?
comment|// ax = minLon, bx = minLon, ay = minLat, by = maxLat
if|if
condition|(
name|orient
argument_list|(
name|cx
argument_list|,
name|cy
argument_list|,
name|dx
argument_list|,
name|dy
argument_list|,
name|minLon
argument_list|,
name|minLat
argument_list|)
operator|*
name|orient
argument_list|(
name|cx
argument_list|,
name|cy
argument_list|,
name|dx
argument_list|,
name|dy
argument_list|,
name|minLon
argument_list|,
name|maxLat
argument_list|)
operator|<=
literal|0
operator|&&
name|orient
argument_list|(
name|minLon
argument_list|,
name|minLat
argument_list|,
name|minLon
argument_list|,
name|maxLat
argument_list|,
name|cx
argument_list|,
name|cy
argument_list|)
operator|*
name|orient
argument_list|(
name|minLon
argument_list|,
name|minLat
argument_list|,
name|minLon
argument_list|,
name|maxLat
argument_list|,
name|dx
argument_list|,
name|dy
argument_list|)
operator|<=
literal|0
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**    * Returns a positive value if points a, b, and c are arranged in counter-clockwise order,    * negative value if clockwise, zero if collinear.    */
comment|// see the "Orient2D" method described here:
comment|// http://www.cs.berkeley.edu/~jrs/meshpapers/robnotes.pdf
comment|// https://www.cs.cmu.edu/~quake/robust.html
comment|// Note that this one does not yet have the floating point tricks to be exact!
DECL|method|orient
specifier|private
specifier|static
name|int
name|orient
parameter_list|(
name|double
name|ax
parameter_list|,
name|double
name|ay
parameter_list|,
name|double
name|bx
parameter_list|,
name|double
name|by
parameter_list|,
name|double
name|cx
parameter_list|,
name|double
name|cy
parameter_list|)
block|{
name|double
name|v1
init|=
operator|(
name|bx
operator|-
name|ax
operator|)
operator|*
operator|(
name|cy
operator|-
name|ay
operator|)
decl_stmt|;
name|double
name|v2
init|=
operator|(
name|cx
operator|-
name|ax
operator|)
operator|*
operator|(
name|by
operator|-
name|ay
operator|)
decl_stmt|;
if|if
condition|(
name|v1
operator|>
name|v2
condition|)
block|{
return|return
literal|1
return|;
block|}
elseif|else
if|if
condition|(
name|v1
operator|<
name|v2
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
else|else
block|{
return|return
literal|0
return|;
block|}
block|}
comment|/** Returns a copy of the internal latitude array */
DECL|method|getPolyLats
specifier|public
name|double
index|[]
name|getPolyLats
parameter_list|()
block|{
return|return
name|polyLats
operator|.
name|clone
argument_list|()
return|;
block|}
comment|/** Returns a copy of the internal longitude array */
DECL|method|getPolyLons
specifier|public
name|double
index|[]
name|getPolyLons
parameter_list|()
block|{
return|return
name|polyLons
operator|.
name|clone
argument_list|()
return|;
block|}
comment|/** Returns a copy of the internal holes array */
DECL|method|getHoles
specifier|public
name|Polygon
index|[]
name|getHoles
parameter_list|()
block|{
return|return
name|holes
operator|.
name|clone
argument_list|()
return|;
block|}
comment|/** Helper for multipolygon logic: returns true if any of the supplied polygons contain the point */
DECL|method|contains
specifier|public
specifier|static
name|boolean
name|contains
parameter_list|(
name|Polygon
index|[]
name|polygons
parameter_list|,
name|double
name|latitude
parameter_list|,
name|double
name|longitude
parameter_list|)
block|{
for|for
control|(
name|Polygon
name|polygon
range|:
name|polygons
control|)
block|{
if|if
condition|(
name|polygon
operator|.
name|contains
argument_list|(
name|latitude
argument_list|,
name|longitude
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/** Returns the multipolygon relation for the rectangle */
DECL|method|relate
specifier|public
specifier|static
name|Relation
name|relate
parameter_list|(
name|Polygon
index|[]
name|polygons
parameter_list|,
name|double
name|minLat
parameter_list|,
name|double
name|maxLat
parameter_list|,
name|double
name|minLon
parameter_list|,
name|double
name|maxLon
parameter_list|)
block|{
for|for
control|(
name|Polygon
name|polygon
range|:
name|polygons
control|)
block|{
name|Relation
name|relation
init|=
name|polygon
operator|.
name|relate
argument_list|(
name|minLat
argument_list|,
name|maxLat
argument_list|,
name|minLon
argument_list|,
name|maxLon
argument_list|)
decl_stmt|;
if|if
condition|(
name|relation
operator|!=
name|Relation
operator|.
name|CELL_OUTSIDE_QUERY
condition|)
block|{
comment|// note: we optimize for non-overlapping multipolygons. so if we cross one,
comment|// we won't keep iterating to try to find a contains.
return|return
name|relation
return|;
block|}
block|}
return|return
name|Relation
operator|.
name|CELL_OUTSIDE_QUERY
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
specifier|final
name|int
name|prime
init|=
literal|31
decl_stmt|;
name|int
name|result
init|=
literal|1
decl_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
name|Arrays
operator|.
name|hashCode
argument_list|(
name|holes
argument_list|)
expr_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
name|Arrays
operator|.
name|hashCode
argument_list|(
name|polyLats
argument_list|)
expr_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
name|Arrays
operator|.
name|hashCode
argument_list|(
name|polyLons
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|obj
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|getClass
argument_list|()
operator|!=
name|obj
operator|.
name|getClass
argument_list|()
condition|)
return|return
literal|false
return|;
name|Polygon
name|other
init|=
operator|(
name|Polygon
operator|)
name|obj
decl_stmt|;
if|if
condition|(
operator|!
name|Arrays
operator|.
name|equals
argument_list|(
name|holes
argument_list|,
name|other
operator|.
name|holes
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|Arrays
operator|.
name|equals
argument_list|(
name|polyLats
argument_list|,
name|other
operator|.
name|polyLats
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|Arrays
operator|.
name|equals
argument_list|(
name|polyLons
argument_list|,
name|other
operator|.
name|polyLons
argument_list|)
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|polyLats
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"["
argument_list|)
operator|.
name|append
argument_list|(
name|polyLats
index|[
name|i
index|]
argument_list|)
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
operator|.
name|append
argument_list|(
name|polyLons
index|[
name|i
index|]
argument_list|)
operator|.
name|append
argument_list|(
literal|"] "
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|holes
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|", holes="
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|Arrays
operator|.
name|toString
argument_list|(
name|holes
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class
end_unit
