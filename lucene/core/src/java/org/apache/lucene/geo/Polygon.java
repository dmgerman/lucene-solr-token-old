begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.geo
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|geo
package|;
end_package
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_comment
comment|/**  * Represents a closed polygon on the earth's surface.  *<p>  * NOTES:  *<ol>  *<li>Coordinates must be in clockwise order, except for holes. Holes must be in counter-clockwise order.  *<li>The polygon must be closed: the first and last coordinates need to have the same values.  *<li>The polygon must not be self-crossing, otherwise may result in unexpected behavior.  *<li>All latitude/longitude values must be in decimal degrees.  *<li>Polygons cannot cross the 180th meridian. Instead, use two polygons: one on each side.  *<li>For more advanced GeoSpatial indexing and query operations see the {@code spatial-extras} module  *</ol>  * @lucene.experimental  */
end_comment
begin_class
DECL|class|Polygon
specifier|public
specifier|final
class|class
name|Polygon
block|{
DECL|field|polyLats
specifier|private
specifier|final
name|double
index|[]
name|polyLats
decl_stmt|;
DECL|field|polyLons
specifier|private
specifier|final
name|double
index|[]
name|polyLons
decl_stmt|;
DECL|field|holes
specifier|private
specifier|final
name|Polygon
index|[]
name|holes
decl_stmt|;
comment|/** minimum latitude of this polygon's bounding box area */
DECL|field|minLat
specifier|public
specifier|final
name|double
name|minLat
decl_stmt|;
comment|/** maximum latitude of this polygon's bounding box area */
DECL|field|maxLat
specifier|public
specifier|final
name|double
name|maxLat
decl_stmt|;
comment|/** minimum longitude of this polygon's bounding box area */
DECL|field|minLon
specifier|public
specifier|final
name|double
name|minLon
decl_stmt|;
comment|/** maximum longitude of this polygon's bounding box area */
DECL|field|maxLon
specifier|public
specifier|final
name|double
name|maxLon
decl_stmt|;
comment|/**    * Creates a new Polygon from the supplied latitude/longitude array, and optionally any holes.    */
DECL|method|Polygon
specifier|public
name|Polygon
parameter_list|(
name|double
index|[]
name|polyLats
parameter_list|,
name|double
index|[]
name|polyLons
parameter_list|,
name|Polygon
modifier|...
name|holes
parameter_list|)
block|{
if|if
condition|(
name|polyLats
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"polyLats must not be null"
argument_list|)
throw|;
block|}
if|if
condition|(
name|polyLons
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"polyLons must not be null"
argument_list|)
throw|;
block|}
if|if
condition|(
name|holes
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"holes must not be null"
argument_list|)
throw|;
block|}
if|if
condition|(
name|polyLats
operator|.
name|length
operator|!=
name|polyLons
operator|.
name|length
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"polyLats and polyLons must be equal length"
argument_list|)
throw|;
block|}
if|if
condition|(
name|polyLats
operator|.
name|length
operator|!=
name|polyLons
operator|.
name|length
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"polyLats and polyLons must be equal length"
argument_list|)
throw|;
block|}
if|if
condition|(
name|polyLats
operator|.
name|length
operator|<
literal|4
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"at least 4 polygon points required"
argument_list|)
throw|;
block|}
if|if
condition|(
name|polyLats
index|[
literal|0
index|]
operator|!=
name|polyLats
index|[
name|polyLats
operator|.
name|length
operator|-
literal|1
index|]
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"first and last points of the polygon must be the same (it must close itself): polyLats[0]="
operator|+
name|polyLats
index|[
literal|0
index|]
operator|+
literal|" polyLats["
operator|+
operator|(
name|polyLats
operator|.
name|length
operator|-
literal|1
operator|)
operator|+
literal|"]="
operator|+
name|polyLats
index|[
name|polyLats
operator|.
name|length
operator|-
literal|1
index|]
argument_list|)
throw|;
block|}
if|if
condition|(
name|polyLons
index|[
literal|0
index|]
operator|!=
name|polyLons
index|[
name|polyLons
operator|.
name|length
operator|-
literal|1
index|]
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"first and last points of the polygon must be the same (it must close itself): polyLons[0]="
operator|+
name|polyLons
index|[
literal|0
index|]
operator|+
literal|" polyLons["
operator|+
operator|(
name|polyLons
operator|.
name|length
operator|-
literal|1
operator|)
operator|+
literal|"]="
operator|+
name|polyLons
index|[
name|polyLons
operator|.
name|length
operator|-
literal|1
index|]
argument_list|)
throw|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|polyLats
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|GeoUtils
operator|.
name|checkLatitude
argument_list|(
name|polyLats
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|GeoUtils
operator|.
name|checkLongitude
argument_list|(
name|polyLons
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|holes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Polygon
name|inner
init|=
name|holes
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|inner
operator|.
name|holes
operator|.
name|length
operator|>
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"holes may not contain holes: polygons may not nest."
argument_list|)
throw|;
block|}
block|}
name|this
operator|.
name|polyLats
operator|=
name|polyLats
operator|.
name|clone
argument_list|()
expr_stmt|;
name|this
operator|.
name|polyLons
operator|=
name|polyLons
operator|.
name|clone
argument_list|()
expr_stmt|;
name|this
operator|.
name|holes
operator|=
name|holes
operator|.
name|clone
argument_list|()
expr_stmt|;
comment|// compute bounding box
name|double
name|minLat
init|=
name|Double
operator|.
name|POSITIVE_INFINITY
decl_stmt|;
name|double
name|maxLat
init|=
name|Double
operator|.
name|NEGATIVE_INFINITY
decl_stmt|;
name|double
name|minLon
init|=
name|Double
operator|.
name|POSITIVE_INFINITY
decl_stmt|;
name|double
name|maxLon
init|=
name|Double
operator|.
name|NEGATIVE_INFINITY
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|polyLats
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|minLat
operator|=
name|Math
operator|.
name|min
argument_list|(
name|polyLats
index|[
name|i
index|]
argument_list|,
name|minLat
argument_list|)
expr_stmt|;
name|maxLat
operator|=
name|Math
operator|.
name|max
argument_list|(
name|polyLats
index|[
name|i
index|]
argument_list|,
name|maxLat
argument_list|)
expr_stmt|;
name|minLon
operator|=
name|Math
operator|.
name|min
argument_list|(
name|polyLons
index|[
name|i
index|]
argument_list|,
name|minLon
argument_list|)
expr_stmt|;
name|maxLon
operator|=
name|Math
operator|.
name|max
argument_list|(
name|polyLons
index|[
name|i
index|]
argument_list|,
name|maxLon
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|minLat
operator|=
name|minLat
expr_stmt|;
name|this
operator|.
name|maxLat
operator|=
name|maxLat
expr_stmt|;
name|this
operator|.
name|minLon
operator|=
name|minLon
expr_stmt|;
name|this
operator|.
name|maxLon
operator|=
name|maxLon
expr_stmt|;
block|}
comment|/** Returns a copy of the internal latitude array */
DECL|method|getPolyLats
specifier|public
name|double
index|[]
name|getPolyLats
parameter_list|()
block|{
return|return
name|polyLats
operator|.
name|clone
argument_list|()
return|;
block|}
comment|/** Returns a copy of the internal longitude array */
DECL|method|getPolyLons
specifier|public
name|double
index|[]
name|getPolyLons
parameter_list|()
block|{
return|return
name|polyLons
operator|.
name|clone
argument_list|()
return|;
block|}
comment|/** Returns a copy of the internal holes array */
DECL|method|getHoles
specifier|public
name|Polygon
index|[]
name|getHoles
parameter_list|()
block|{
return|return
name|holes
operator|.
name|clone
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
specifier|final
name|int
name|prime
init|=
literal|31
decl_stmt|;
name|int
name|result
init|=
literal|1
decl_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
name|Arrays
operator|.
name|hashCode
argument_list|(
name|holes
argument_list|)
expr_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
name|Arrays
operator|.
name|hashCode
argument_list|(
name|polyLats
argument_list|)
expr_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
name|Arrays
operator|.
name|hashCode
argument_list|(
name|polyLons
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|obj
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|getClass
argument_list|()
operator|!=
name|obj
operator|.
name|getClass
argument_list|()
condition|)
return|return
literal|false
return|;
name|Polygon
name|other
init|=
operator|(
name|Polygon
operator|)
name|obj
decl_stmt|;
if|if
condition|(
operator|!
name|Arrays
operator|.
name|equals
argument_list|(
name|holes
argument_list|,
name|other
operator|.
name|holes
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|Arrays
operator|.
name|equals
argument_list|(
name|polyLats
argument_list|,
name|other
operator|.
name|polyLats
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|Arrays
operator|.
name|equals
argument_list|(
name|polyLons
argument_list|,
name|other
operator|.
name|polyLons
argument_list|)
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|polyLats
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"["
argument_list|)
operator|.
name|append
argument_list|(
name|polyLats
index|[
name|i
index|]
argument_list|)
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
operator|.
name|append
argument_list|(
name|polyLons
index|[
name|i
index|]
argument_list|)
operator|.
name|append
argument_list|(
literal|"] "
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|holes
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|", holes="
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|Arrays
operator|.
name|toString
argument_list|(
name|holes
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class
end_unit
