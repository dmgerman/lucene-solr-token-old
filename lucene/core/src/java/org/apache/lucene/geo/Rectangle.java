begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.geo
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|geo
package|;
end_package
begin_import
import|import static
name|java
operator|.
name|lang
operator|.
name|Math
operator|.
name|PI
import|;
end_import
begin_import
import|import static
name|java
operator|.
name|lang
operator|.
name|Math
operator|.
name|max
import|;
end_import
begin_import
import|import static
name|java
operator|.
name|lang
operator|.
name|Math
operator|.
name|min
import|;
end_import
begin_import
import|import static
name|java
operator|.
name|lang
operator|.
name|Math
operator|.
name|toDegrees
import|;
end_import
begin_import
import|import static
name|java
operator|.
name|lang
operator|.
name|Math
operator|.
name|toRadians
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|geo
operator|.
name|GeoUtils
operator|.
name|checkLatitude
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|geo
operator|.
name|GeoUtils
operator|.
name|checkLongitude
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|geo
operator|.
name|GeoUtils
operator|.
name|MAX_LAT_INCL
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|geo
operator|.
name|GeoUtils
operator|.
name|MIN_LAT_INCL
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|geo
operator|.
name|GeoUtils
operator|.
name|MAX_LAT_RADIANS
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|geo
operator|.
name|GeoUtils
operator|.
name|MAX_LON_RADIANS
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|geo
operator|.
name|GeoUtils
operator|.
name|MIN_LAT_RADIANS
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|geo
operator|.
name|GeoUtils
operator|.
name|MIN_LON_RADIANS
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|geo
operator|.
name|GeoUtils
operator|.
name|EARTH_MEAN_RADIUS_METERS
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|geo
operator|.
name|GeoUtils
operator|.
name|sloppySin
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|SloppyMath
operator|.
name|TO_DEGREES
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|SloppyMath
operator|.
name|asin
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|SloppyMath
operator|.
name|cos
import|;
end_import
begin_comment
comment|/** Represents a lat/lon rectangle. */
end_comment
begin_class
DECL|class|Rectangle
specifier|public
class|class
name|Rectangle
block|{
comment|/** maximum longitude value (in degrees) */
DECL|field|minLat
specifier|public
specifier|final
name|double
name|minLat
decl_stmt|;
comment|/** minimum longitude value (in degrees) */
DECL|field|minLon
specifier|public
specifier|final
name|double
name|minLon
decl_stmt|;
comment|/** maximum latitude value (in degrees) */
DECL|field|maxLat
specifier|public
specifier|final
name|double
name|maxLat
decl_stmt|;
comment|/** minimum latitude value (in degrees) */
DECL|field|maxLon
specifier|public
specifier|final
name|double
name|maxLon
decl_stmt|;
comment|/**    * Constructs a bounding box by first validating the provided latitude and longitude coordinates    */
DECL|method|Rectangle
specifier|public
name|Rectangle
parameter_list|(
name|double
name|minLat
parameter_list|,
name|double
name|maxLat
parameter_list|,
name|double
name|minLon
parameter_list|,
name|double
name|maxLon
parameter_list|)
block|{
name|GeoUtils
operator|.
name|checkLatitude
argument_list|(
name|minLat
argument_list|)
expr_stmt|;
name|GeoUtils
operator|.
name|checkLatitude
argument_list|(
name|maxLat
argument_list|)
expr_stmt|;
name|GeoUtils
operator|.
name|checkLongitude
argument_list|(
name|minLon
argument_list|)
expr_stmt|;
name|GeoUtils
operator|.
name|checkLongitude
argument_list|(
name|maxLon
argument_list|)
expr_stmt|;
name|this
operator|.
name|minLon
operator|=
name|minLon
expr_stmt|;
name|this
operator|.
name|maxLon
operator|=
name|maxLon
expr_stmt|;
name|this
operator|.
name|minLat
operator|=
name|minLat
expr_stmt|;
name|this
operator|.
name|maxLat
operator|=
name|maxLat
expr_stmt|;
assert|assert
name|maxLat
operator|>=
name|minLat
assert|;
comment|// NOTE: cannot assert maxLon>= minLon since this rect could cross the dateline
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|b
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"Rectangle(lat="
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
name|minLat
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|" TO "
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
name|maxLat
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|" lon="
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
name|minLon
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|" TO "
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
name|maxLon
argument_list|)
expr_stmt|;
if|if
condition|(
name|maxLon
operator|<
name|minLon
condition|)
block|{
name|b
operator|.
name|append
argument_list|(
literal|" [crosses dateline!]"
argument_list|)
expr_stmt|;
block|}
name|b
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|b
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/** Returns true if this bounding box crosses the dateline */
DECL|method|crossesDateline
specifier|public
name|boolean
name|crossesDateline
parameter_list|()
block|{
return|return
name|maxLon
operator|<
name|minLon
return|;
block|}
comment|/** Compute Bounding Box for a circle using WGS-84 parameters */
DECL|method|fromPointDistance
specifier|public
specifier|static
name|Rectangle
name|fromPointDistance
parameter_list|(
specifier|final
name|double
name|centerLat
parameter_list|,
specifier|final
name|double
name|centerLon
parameter_list|,
specifier|final
name|double
name|radiusMeters
parameter_list|)
block|{
name|checkLatitude
argument_list|(
name|centerLat
argument_list|)
expr_stmt|;
name|checkLongitude
argument_list|(
name|centerLon
argument_list|)
expr_stmt|;
specifier|final
name|double
name|radLat
init|=
name|toRadians
argument_list|(
name|centerLat
argument_list|)
decl_stmt|;
specifier|final
name|double
name|radLon
init|=
name|toRadians
argument_list|(
name|centerLon
argument_list|)
decl_stmt|;
comment|// LUCENE-7143
name|double
name|radDistance
init|=
operator|(
name|radiusMeters
operator|+
literal|7E
operator|-
literal|2
operator|)
operator|/
name|EARTH_MEAN_RADIUS_METERS
decl_stmt|;
name|double
name|minLat
init|=
name|radLat
operator|-
name|radDistance
decl_stmt|;
name|double
name|maxLat
init|=
name|radLat
operator|+
name|radDistance
decl_stmt|;
name|double
name|minLon
decl_stmt|;
name|double
name|maxLon
decl_stmt|;
if|if
condition|(
name|minLat
operator|>
name|MIN_LAT_RADIANS
operator|&&
name|maxLat
operator|<
name|MAX_LAT_RADIANS
condition|)
block|{
name|double
name|deltaLon
init|=
name|asin
argument_list|(
name|sloppySin
argument_list|(
name|radDistance
argument_list|)
operator|/
name|cos
argument_list|(
name|radLat
argument_list|)
argument_list|)
decl_stmt|;
name|minLon
operator|=
name|radLon
operator|-
name|deltaLon
expr_stmt|;
if|if
condition|(
name|minLon
operator|<
name|MIN_LON_RADIANS
condition|)
block|{
name|minLon
operator|+=
literal|2d
operator|*
name|PI
expr_stmt|;
block|}
name|maxLon
operator|=
name|radLon
operator|+
name|deltaLon
expr_stmt|;
if|if
condition|(
name|maxLon
operator|>
name|MAX_LON_RADIANS
condition|)
block|{
name|maxLon
operator|-=
literal|2d
operator|*
name|PI
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// a pole is within the distance
name|minLat
operator|=
name|max
argument_list|(
name|minLat
argument_list|,
name|MIN_LAT_RADIANS
argument_list|)
expr_stmt|;
name|maxLat
operator|=
name|min
argument_list|(
name|maxLat
argument_list|,
name|MAX_LAT_RADIANS
argument_list|)
expr_stmt|;
name|minLon
operator|=
name|MIN_LON_RADIANS
expr_stmt|;
name|maxLon
operator|=
name|MAX_LON_RADIANS
expr_stmt|;
block|}
return|return
operator|new
name|Rectangle
argument_list|(
name|toDegrees
argument_list|(
name|minLat
argument_list|)
argument_list|,
name|toDegrees
argument_list|(
name|maxLat
argument_list|)
argument_list|,
name|toDegrees
argument_list|(
name|minLon
argument_list|)
argument_list|,
name|toDegrees
argument_list|(
name|maxLon
argument_list|)
argument_list|)
return|;
block|}
comment|/** maximum error from {@link #axisLat(double, double)}. logic must be prepared to handle this */
DECL|field|AXISLAT_ERROR
specifier|public
specifier|static
specifier|final
name|double
name|AXISLAT_ERROR
init|=
literal|0.1D
operator|/
name|EARTH_MEAN_RADIUS_METERS
operator|*
name|TO_DEGREES
decl_stmt|;
comment|/**    * Calculate the latitude of a circle's intersections with its bbox meridians.    *<p>    *<b>NOTE:</b> the returned value will be +/- {@link #AXISLAT_ERROR} of the actual value.    * @param centerLat The latitude of the circle center    * @param radiusMeters The radius of the circle in meters    * @return A latitude    */
DECL|method|axisLat
specifier|public
specifier|static
name|double
name|axisLat
parameter_list|(
name|double
name|centerLat
parameter_list|,
name|double
name|radiusMeters
parameter_list|)
block|{
comment|// A spherical triangle with:
comment|// r is the radius of the circle in radians
comment|// l1 is the latitude of the circle center
comment|// l2 is the latitude of the point at which the circle intersect's its bbox longitudes
comment|// We know r is tangent to the bbox meridians at l2, therefore it is a right angle.
comment|// So from the law of cosines, with the angle of l1 being 90, we have:
comment|// cos(l1) = cos(r) * cos(l2) + sin(r) * sin(l2) * cos(90)
comment|// The second part cancels out because cos(90) == 0, so we have:
comment|// cos(l1) = cos(r) * cos(l2)
comment|// Solving for l2, we get:
comment|// l2 = acos( cos(l1) / cos(r) )
comment|// We ensure r is in the range (0, PI/2) and l1 in the range (0, PI/2]. This means we
comment|// cannot divide by 0, and we will always get a positive value in the range [0, 1) as
comment|// the argument to arc cosine, resulting in a range (0, PI/2].
specifier|final
name|double
name|PIO2
init|=
name|Math
operator|.
name|PI
operator|/
literal|2D
decl_stmt|;
name|double
name|l1
init|=
name|toRadians
argument_list|(
name|centerLat
argument_list|)
decl_stmt|;
name|double
name|r
init|=
operator|(
name|radiusMeters
operator|+
literal|7E
operator|-
literal|2
operator|)
operator|/
name|EARTH_MEAN_RADIUS_METERS
decl_stmt|;
comment|// if we are within radius range of a pole, the lat is the pole itself
if|if
condition|(
name|Math
operator|.
name|abs
argument_list|(
name|l1
argument_list|)
operator|+
name|r
operator|>=
name|MAX_LAT_RADIANS
condition|)
block|{
return|return
name|centerLat
operator|>=
literal|0
condition|?
name|MAX_LAT_INCL
else|:
name|MIN_LAT_INCL
return|;
block|}
comment|// adjust l1 as distance from closest pole, to form a right triangle with bbox meridians
comment|// and ensure it is in the range (0, PI/2]
name|l1
operator|=
name|centerLat
operator|>=
literal|0
condition|?
name|PIO2
operator|-
name|l1
else|:
name|l1
operator|+
name|PIO2
expr_stmt|;
name|double
name|l2
init|=
name|Math
operator|.
name|acos
argument_list|(
name|Math
operator|.
name|cos
argument_list|(
name|l1
argument_list|)
operator|/
name|Math
operator|.
name|cos
argument_list|(
name|r
argument_list|)
argument_list|)
decl_stmt|;
assert|assert
operator|!
name|Double
operator|.
name|isNaN
argument_list|(
name|l2
argument_list|)
assert|;
comment|// now adjust back to range [-pi/2, pi/2], ie latitude in radians
name|l2
operator|=
name|centerLat
operator|>=
literal|0
condition|?
name|PIO2
operator|-
name|l2
else|:
name|l2
operator|-
name|PIO2
expr_stmt|;
return|return
name|toDegrees
argument_list|(
name|l2
argument_list|)
return|;
block|}
comment|/** Returns the bounding box over an array of polygons */
DECL|method|fromPolygon
specifier|public
specifier|static
name|Rectangle
name|fromPolygon
parameter_list|(
name|Polygon
index|[]
name|polygons
parameter_list|)
block|{
comment|// compute bounding box
name|double
name|minLat
init|=
name|Double
operator|.
name|POSITIVE_INFINITY
decl_stmt|;
name|double
name|maxLat
init|=
name|Double
operator|.
name|NEGATIVE_INFINITY
decl_stmt|;
name|double
name|minLon
init|=
name|Double
operator|.
name|POSITIVE_INFINITY
decl_stmt|;
name|double
name|maxLon
init|=
name|Double
operator|.
name|NEGATIVE_INFINITY
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|polygons
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|minLat
operator|=
name|Math
operator|.
name|min
argument_list|(
name|polygons
index|[
name|i
index|]
operator|.
name|minLat
argument_list|,
name|minLat
argument_list|)
expr_stmt|;
name|maxLat
operator|=
name|Math
operator|.
name|max
argument_list|(
name|polygons
index|[
name|i
index|]
operator|.
name|maxLat
argument_list|,
name|maxLat
argument_list|)
expr_stmt|;
name|minLon
operator|=
name|Math
operator|.
name|min
argument_list|(
name|polygons
index|[
name|i
index|]
operator|.
name|minLon
argument_list|,
name|minLon
argument_list|)
expr_stmt|;
name|maxLon
operator|=
name|Math
operator|.
name|max
argument_list|(
name|polygons
index|[
name|i
index|]
operator|.
name|maxLon
argument_list|,
name|maxLon
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|Rectangle
argument_list|(
name|minLat
argument_list|,
name|maxLat
argument_list|,
name|minLon
argument_list|,
name|maxLon
argument_list|)
return|;
block|}
block|}
end_class
end_unit
