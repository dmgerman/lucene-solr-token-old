begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.analysis
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import
begin_comment
comment|/** Internal class to enable reuse of the string reader by {@link Analyzer#tokenStream(String,String)} */
end_comment
begin_class
DECL|class|ReusableStringReader
specifier|final
class|class
name|ReusableStringReader
extends|extends
name|Reader
block|{
DECL|field|pos
DECL|field|size
specifier|private
name|int
name|pos
init|=
literal|0
decl_stmt|,
name|size
init|=
literal|0
decl_stmt|;
DECL|field|s
specifier|private
name|String
name|s
init|=
literal|null
decl_stmt|;
DECL|method|setValue
name|void
name|setValue
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|this
operator|.
name|s
operator|=
name|s
expr_stmt|;
name|this
operator|.
name|size
operator|=
name|s
operator|.
name|length
argument_list|()
expr_stmt|;
name|this
operator|.
name|pos
operator|=
literal|0
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|read
specifier|public
name|int
name|read
parameter_list|()
block|{
if|if
condition|(
name|pos
operator|<
name|size
condition|)
block|{
return|return
name|s
operator|.
name|charAt
argument_list|(
name|pos
operator|++
argument_list|)
return|;
block|}
else|else
block|{
name|s
operator|=
literal|null
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|read
specifier|public
name|int
name|read
parameter_list|(
name|char
index|[]
name|c
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
block|{
if|if
condition|(
name|pos
operator|<
name|size
condition|)
block|{
name|len
operator|=
name|Math
operator|.
name|min
argument_list|(
name|len
argument_list|,
name|size
operator|-
name|pos
argument_list|)
expr_stmt|;
name|s
operator|.
name|getChars
argument_list|(
name|pos
argument_list|,
name|pos
operator|+
name|len
argument_list|,
name|c
argument_list|,
name|off
argument_list|)
expr_stmt|;
name|pos
operator|+=
name|len
expr_stmt|;
return|return
name|len
return|;
block|}
else|else
block|{
name|s
operator|=
literal|null
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
block|{
name|pos
operator|=
name|size
expr_stmt|;
comment|// this prevents NPE when reading after close!
name|s
operator|=
literal|null
expr_stmt|;
block|}
block|}
end_class
end_unit
