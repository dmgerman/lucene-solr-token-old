begin_unit
begin_package
DECL|package|org.apache.lucene.document
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|RamUsageEstimator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|bkd
operator|.
name|BKDUtil
import|;
end_import
begin_comment
comment|/** A field that is indexed dimensionally such that finding  *  all documents within an N-dimensional at search time is  *  efficient.  Muliple values for the same field in one documents  *  is allowed. */
end_comment
begin_class
DECL|class|DimensionalField
specifier|public
specifier|final
class|class
name|DimensionalField
extends|extends
name|Field
block|{
DECL|method|getType
specifier|private
specifier|static
name|FieldType
name|getType
parameter_list|(
name|byte
index|[]
index|[]
name|point
parameter_list|)
block|{
if|if
condition|(
name|point
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"point cannot be null"
argument_list|)
throw|;
block|}
if|if
condition|(
name|point
operator|.
name|length
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"point cannot be 0 dimensions"
argument_list|)
throw|;
block|}
name|int
name|bytesPerDim
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|point
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|byte
index|[]
name|oneDim
init|=
name|point
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|oneDim
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"point cannot have null values"
argument_list|)
throw|;
block|}
if|if
condition|(
name|oneDim
operator|.
name|length
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"point cannot have 0-length values"
argument_list|)
throw|;
block|}
if|if
condition|(
name|bytesPerDim
operator|==
operator|-
literal|1
condition|)
block|{
name|bytesPerDim
operator|=
name|oneDim
operator|.
name|length
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|bytesPerDim
operator|!=
name|oneDim
operator|.
name|length
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"all dimensions must have same bytes length; got "
operator|+
name|bytesPerDim
operator|+
literal|" and "
operator|+
name|oneDim
operator|.
name|length
argument_list|)
throw|;
block|}
block|}
return|return
name|getType
argument_list|(
name|point
operator|.
name|length
argument_list|,
name|bytesPerDim
argument_list|)
return|;
block|}
DECL|method|getType
specifier|private
specifier|static
name|FieldType
name|getType
parameter_list|(
name|int
name|numDims
parameter_list|,
name|int
name|bytesPerDim
parameter_list|)
block|{
name|FieldType
name|type
init|=
operator|new
name|FieldType
argument_list|()
decl_stmt|;
name|type
operator|.
name|setDimensions
argument_list|(
name|numDims
argument_list|,
name|bytesPerDim
argument_list|)
expr_stmt|;
name|type
operator|.
name|freeze
argument_list|()
expr_stmt|;
return|return
name|type
return|;
block|}
DECL|method|pack
specifier|private
specifier|static
name|BytesRef
name|pack
parameter_list|(
name|byte
index|[]
modifier|...
name|point
parameter_list|)
block|{
if|if
condition|(
name|point
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"point cannot be null"
argument_list|)
throw|;
block|}
if|if
condition|(
name|point
operator|.
name|length
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"point cannot be 0 dimensions"
argument_list|)
throw|;
block|}
if|if
condition|(
name|point
operator|.
name|length
operator|==
literal|1
condition|)
block|{
return|return
operator|new
name|BytesRef
argument_list|(
name|point
index|[
literal|0
index|]
argument_list|)
return|;
block|}
name|int
name|bytesPerDim
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|byte
index|[]
name|dim
range|:
name|point
control|)
block|{
if|if
condition|(
name|dim
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"point cannot have null values"
argument_list|)
throw|;
block|}
if|if
condition|(
name|bytesPerDim
operator|==
operator|-
literal|1
condition|)
block|{
if|if
condition|(
name|dim
operator|.
name|length
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"point cannot have 0-length values"
argument_list|)
throw|;
block|}
name|bytesPerDim
operator|=
name|dim
operator|.
name|length
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|dim
operator|.
name|length
operator|!=
name|bytesPerDim
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"all dimensions must have same bytes length; got "
operator|+
name|bytesPerDim
operator|+
literal|" and "
operator|+
name|dim
operator|.
name|length
argument_list|)
throw|;
block|}
block|}
name|byte
index|[]
name|packed
init|=
operator|new
name|byte
index|[
name|bytesPerDim
operator|*
name|point
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|point
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|point
index|[
name|i
index|]
argument_list|,
literal|0
argument_list|,
name|packed
argument_list|,
name|i
operator|*
name|bytesPerDim
argument_list|,
name|bytesPerDim
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|BytesRef
argument_list|(
name|packed
argument_list|)
return|;
block|}
DECL|method|pack
specifier|private
specifier|static
name|BytesRef
name|pack
parameter_list|(
name|long
modifier|...
name|point
parameter_list|)
block|{
if|if
condition|(
name|point
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"point cannot be null"
argument_list|)
throw|;
block|}
if|if
condition|(
name|point
operator|.
name|length
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"point cannot be 0 dimensions"
argument_list|)
throw|;
block|}
name|byte
index|[]
name|packed
init|=
operator|new
name|byte
index|[
name|point
operator|.
name|length
operator|*
name|RamUsageEstimator
operator|.
name|NUM_BYTES_LONG
index|]
decl_stmt|;
for|for
control|(
name|int
name|dim
init|=
literal|0
init|;
name|dim
operator|<
name|point
operator|.
name|length
condition|;
name|dim
operator|++
control|)
block|{
name|BKDUtil
operator|.
name|longToBytes
argument_list|(
name|point
index|[
name|dim
index|]
argument_list|,
name|packed
argument_list|,
name|dim
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|BytesRef
argument_list|(
name|packed
argument_list|)
return|;
block|}
comment|/** General purpose API: creates a new DimensionalField, indexing the    *  provided N-dimensional binary point.    *    *  @param name field name    *  @param point byte[][] value    *  @throws IllegalArgumentException if the field name or value is null.    */
DECL|method|DimensionalField
specifier|public
name|DimensionalField
parameter_list|(
name|String
name|name
parameter_list|,
name|byte
index|[]
modifier|...
name|point
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|,
name|pack
argument_list|(
name|point
argument_list|)
argument_list|,
name|getType
argument_list|(
name|point
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** General purpose API: creates a new DimensionalField, indexing the    *  provided N-dimensional long point.    *    *  @param name field name    *  @param point long[] value    *  @throws IllegalArgumentException if the field name or value is null.    */
DECL|method|DimensionalField
specifier|public
name|DimensionalField
parameter_list|(
name|String
name|name
parameter_list|,
name|long
modifier|...
name|point
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|,
name|pack
argument_list|(
name|point
argument_list|)
argument_list|,
name|getType
argument_list|(
name|point
operator|.
name|length
argument_list|,
name|RamUsageEstimator
operator|.
name|NUM_BYTES_LONG
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Expert API */
DECL|method|DimensionalField
specifier|public
name|DimensionalField
parameter_list|(
name|String
name|name
parameter_list|,
name|byte
index|[]
name|packedPoint
parameter_list|,
name|FieldType
name|type
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|,
name|packedPoint
argument_list|,
name|type
argument_list|)
expr_stmt|;
if|if
condition|(
name|packedPoint
operator|.
name|length
operator|!=
name|type
operator|.
name|dimensionCount
argument_list|()
operator|*
name|type
operator|.
name|dimensionNumBytes
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"packedPoint is length="
operator|+
name|packedPoint
operator|.
name|length
operator|+
literal|" but type.dimensionCount()="
operator|+
name|type
operator|.
name|dimensionCount
argument_list|()
operator|+
literal|" and type.dimensionNumBytes()="
operator|+
name|type
operator|.
name|dimensionNumBytes
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
end_class
end_unit
