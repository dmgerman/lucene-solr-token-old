begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.store
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|DataInput
import|;
end_import
begin_comment
comment|/**  * A {@link DataInput} wrapping a plain {@link InputStream}.  */
end_comment
begin_class
DECL|class|InputStreamDataInput
specifier|public
class|class
name|InputStreamDataInput
extends|extends
name|DataInput
implements|implements
name|Closeable
block|{
DECL|field|is
specifier|private
specifier|final
name|InputStream
name|is
decl_stmt|;
DECL|method|InputStreamDataInput
specifier|public
name|InputStreamDataInput
parameter_list|(
name|InputStream
name|is
parameter_list|)
block|{
name|this
operator|.
name|is
operator|=
name|is
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|readByte
specifier|public
name|byte
name|readByte
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|v
init|=
name|is
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|v
operator|==
operator|-
literal|1
condition|)
throw|throw
operator|new
name|EOFException
argument_list|()
throw|;
return|return
operator|(
name|byte
operator|)
name|v
return|;
block|}
annotation|@
name|Override
DECL|method|readBytes
specifier|public
name|void
name|readBytes
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
while|while
condition|(
name|len
operator|>
literal|0
condition|)
block|{
specifier|final
name|int
name|cnt
init|=
name|is
operator|.
name|read
argument_list|(
name|b
argument_list|,
name|offset
argument_list|,
name|len
argument_list|)
decl_stmt|;
if|if
condition|(
name|cnt
operator|<
literal|0
condition|)
block|{
comment|// Partially read the input, but no more data available in the stream.
throw|throw
operator|new
name|EOFException
argument_list|()
throw|;
block|}
name|len
operator|-=
name|cnt
expr_stmt|;
name|offset
operator|+=
name|cnt
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class
end_unit
