begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.store
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
package|;
end_package
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Accountable
import|;
end_import
begin_comment
comment|/**   * Represents a file in RAM as a list of byte[] buffers.  * @lucene.internal */
end_comment
begin_class
DECL|class|RAMFile
specifier|public
class|class
name|RAMFile
implements|implements
name|Accountable
block|{
DECL|field|buffers
specifier|protected
specifier|final
name|ArrayList
argument_list|<
name|byte
index|[]
argument_list|>
name|buffers
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|length
name|long
name|length
decl_stmt|;
DECL|field|directory
name|RAMDirectory
name|directory
decl_stmt|;
DECL|field|sizeInBytes
specifier|protected
name|long
name|sizeInBytes
decl_stmt|;
comment|// File used as buffer, in no RAMDirectory
DECL|method|RAMFile
specifier|public
name|RAMFile
parameter_list|()
block|{}
DECL|method|RAMFile
name|RAMFile
parameter_list|(
name|RAMDirectory
name|directory
parameter_list|)
block|{
name|this
operator|.
name|directory
operator|=
name|directory
expr_stmt|;
block|}
comment|// For non-stream access from thread that might be concurrent with writing
DECL|method|getLength
specifier|public
specifier|synchronized
name|long
name|getLength
parameter_list|()
block|{
return|return
name|length
return|;
block|}
DECL|method|setLength
specifier|protected
specifier|synchronized
name|void
name|setLength
parameter_list|(
name|long
name|length
parameter_list|)
block|{
name|this
operator|.
name|length
operator|=
name|length
expr_stmt|;
block|}
DECL|method|addBuffer
specifier|protected
specifier|final
name|byte
index|[]
name|addBuffer
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|byte
index|[]
name|buffer
init|=
name|newBuffer
argument_list|(
name|size
argument_list|)
decl_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
name|buffers
operator|.
name|add
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
name|sizeInBytes
operator|+=
name|size
expr_stmt|;
block|}
if|if
condition|(
name|directory
operator|!=
literal|null
condition|)
block|{
name|directory
operator|.
name|sizeInBytes
operator|.
name|getAndAdd
argument_list|(
name|size
argument_list|)
expr_stmt|;
block|}
return|return
name|buffer
return|;
block|}
DECL|method|getBuffer
specifier|protected
specifier|final
specifier|synchronized
name|byte
index|[]
name|getBuffer
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|buffers
operator|.
name|get
argument_list|(
name|index
argument_list|)
return|;
block|}
DECL|method|numBuffers
specifier|protected
specifier|final
specifier|synchronized
name|int
name|numBuffers
parameter_list|()
block|{
return|return
name|buffers
operator|.
name|size
argument_list|()
return|;
block|}
comment|/**    * Expert: allocate a new buffer.     * Subclasses can allocate differently.     * @param size size of allocated buffer.    * @return allocated buffer.    */
DECL|method|newBuffer
specifier|protected
name|byte
index|[]
name|newBuffer
parameter_list|(
name|int
name|size
parameter_list|)
block|{
return|return
operator|new
name|byte
index|[
name|size
index|]
return|;
block|}
annotation|@
name|Override
DECL|method|ramBytesUsed
specifier|public
specifier|synchronized
name|long
name|ramBytesUsed
parameter_list|()
block|{
return|return
name|sizeInBytes
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|"(length="
operator|+
name|length
operator|+
literal|")"
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|h
init|=
call|(
name|int
call|)
argument_list|(
name|length
operator|^
operator|(
name|length
operator|>>>
literal|32
operator|)
argument_list|)
decl_stmt|;
for|for
control|(
name|byte
index|[]
name|block
range|:
name|buffers
control|)
block|{
name|h
operator|=
literal|31
operator|*
name|h
operator|+
name|Arrays
operator|.
name|hashCode
argument_list|(
name|block
argument_list|)
expr_stmt|;
block|}
return|return
name|h
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|obj
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|getClass
argument_list|()
operator|!=
name|obj
operator|.
name|getClass
argument_list|()
condition|)
return|return
literal|false
return|;
name|RAMFile
name|other
init|=
operator|(
name|RAMFile
operator|)
name|obj
decl_stmt|;
if|if
condition|(
name|length
operator|!=
name|other
operator|.
name|length
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|buffers
operator|.
name|size
argument_list|()
operator|!=
name|other
operator|.
name|buffers
operator|.
name|size
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|buffers
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|Arrays
operator|.
name|equals
argument_list|(
name|buffers
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|other
operator|.
name|buffers
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
block|}
end_class
end_unit
