begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.store
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexFileNames
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Accountable
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Accountables
import|;
end_import
begin_comment
comment|/**  * A memory-resident {@link Directory} implementation.  Locking  * implementation is by default the {@link SingleInstanceLockFactory}.  *   *<p><b>Warning:</b> This class is not intended to work with huge  * indexes. Everything beyond several hundred megabytes will waste  * resources (GC cycles), because it uses an internal buffer size  * of 1024 bytes, producing millions of {@code byte[1024]} arrays.  * This class is optimized for small memory-resident indexes.  * It also has bad concurrency on multithreaded environments.  *   *<p>It is recommended to materialize large indexes on disk and use  * {@link MMapDirectory}, which is a high-performance directory  * implementation working directly on the file system cache of the  * operating system, so copying data to Java heap space is not useful.  */
end_comment
begin_class
DECL|class|RAMDirectory
specifier|public
class|class
name|RAMDirectory
extends|extends
name|BaseDirectory
implements|implements
name|Accountable
block|{
DECL|field|fileMap
specifier|protected
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|RAMFile
argument_list|>
name|fileMap
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|sizeInBytes
specifier|protected
specifier|final
name|AtomicLong
name|sizeInBytes
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
comment|/** Used to generate temp file names in {@link #createTempOutput}. */
DECL|field|nextTempFileCounter
specifier|private
specifier|final
name|AtomicLong
name|nextTempFileCounter
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
comment|/** Constructs an empty {@link Directory}. */
DECL|method|RAMDirectory
specifier|public
name|RAMDirectory
parameter_list|()
block|{
name|this
argument_list|(
operator|new
name|SingleInstanceLockFactory
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/** Constructs an empty {@link Directory} with the given {@link LockFactory}. */
DECL|method|RAMDirectory
specifier|public
name|RAMDirectory
parameter_list|(
name|LockFactory
name|lockFactory
parameter_list|)
block|{
name|super
argument_list|(
name|lockFactory
argument_list|)
expr_stmt|;
block|}
comment|/**    * Creates a new<code>RAMDirectory</code> instance from a different    *<code>Directory</code> implementation.  This can be used to load    * a disk-based index into memory.    *     *<p><b>Warning:</b> This class is not intended to work with huge    * indexes. Everything beyond several hundred megabytes will waste    * resources (GC cycles), because it uses an internal buffer size    * of 1024 bytes, producing millions of {@code byte[1024]} arrays.    * This class is optimized for small memory-resident indexes.    * It also has bad concurrency on multithreaded environments.    *     *<p>For disk-based indexes it is recommended to use    * {@link MMapDirectory}, which is a high-performance directory    * implementation working directly on the file system cache of the    * operating system, so copying data to Java heap space is not useful.    *     *<p>Note that the resulting<code>RAMDirectory</code> instance is fully    * independent from the original<code>Directory</code> (it is a    * complete copy).  Any subsequent changes to the    * original<code>Directory</code> will not be visible in the    *<code>RAMDirectory</code> instance.    *    * @param dir a<code>Directory</code> value    * @exception IOException if an error occurs    */
DECL|method|RAMDirectory
specifier|public
name|RAMDirectory
parameter_list|(
name|FSDirectory
name|dir
parameter_list|,
name|IOContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|dir
argument_list|,
literal|false
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
DECL|method|RAMDirectory
specifier|private
name|RAMDirectory
parameter_list|(
name|FSDirectory
name|dir
parameter_list|,
name|boolean
name|closeDir
parameter_list|,
name|IOContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|file
range|:
name|dir
operator|.
name|listAll
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|Files
operator|.
name|isDirectory
argument_list|(
name|dir
operator|.
name|getDirectory
argument_list|()
operator|.
name|resolve
argument_list|(
name|file
argument_list|)
argument_list|)
condition|)
block|{
name|copyFrom
argument_list|(
name|dir
argument_list|,
name|file
argument_list|,
name|file
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|closeDir
condition|)
block|{
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|listAll
specifier|public
specifier|final
name|String
index|[]
name|listAll
parameter_list|()
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
comment|// NOTE: this returns a "weakly consistent view". Unless we change Dir API, keep this,
comment|// and do not synchronize or anything stronger. it's great for testing!
comment|// NOTE: fileMap.keySet().toArray(new String[0]) is broken in non Sun JDKs,
comment|// and the code below is resilient to map changes during the array population.
comment|// NOTE: don't replace this with return names.toArray(new String[names.size()]);
comment|// or some files could be null at the end of the array if files are being deleted
comment|// concurrently
name|Set
argument_list|<
name|String
argument_list|>
name|fileNames
init|=
name|fileMap
operator|.
name|keySet
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|names
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|fileNames
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|fileNames
control|)
block|{
name|names
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
name|String
index|[]
name|namesArray
init|=
name|names
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|names
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|namesArray
argument_list|)
expr_stmt|;
return|return
name|namesArray
return|;
block|}
DECL|method|fileNameExists
specifier|public
specifier|final
name|boolean
name|fileNameExists
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
return|return
name|fileMap
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
return|;
block|}
comment|/** Returns the length in bytes of a file in the directory.    * @throws IOException if the file does not exist    */
annotation|@
name|Override
DECL|method|fileLength
specifier|public
specifier|final
name|long
name|fileLength
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
name|RAMFile
name|file
init|=
name|fileMap
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
name|name
argument_list|)
throw|;
block|}
return|return
name|file
operator|.
name|getLength
argument_list|()
return|;
block|}
comment|/**    * Return total size in bytes of all files in this directory. This is    * currently quantized to RAMOutputStream.BUFFER_SIZE.    */
annotation|@
name|Override
DECL|method|ramBytesUsed
specifier|public
specifier|final
name|long
name|ramBytesUsed
parameter_list|()
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
return|return
name|sizeInBytes
operator|.
name|get
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getChildResources
specifier|public
name|Collection
argument_list|<
name|Accountable
argument_list|>
name|getChildResources
parameter_list|()
block|{
return|return
name|Accountables
operator|.
name|namedAccountables
argument_list|(
literal|"file"
argument_list|,
name|fileMap
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|deleteFile
specifier|public
name|void
name|deleteFile
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
name|RAMFile
name|file
init|=
name|fileMap
operator|.
name|remove
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|!=
literal|null
condition|)
block|{
name|file
operator|.
name|directory
operator|=
literal|null
expr_stmt|;
name|sizeInBytes
operator|.
name|addAndGet
argument_list|(
operator|-
name|file
operator|.
name|sizeInBytes
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
name|name
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|createOutput
specifier|public
name|IndexOutput
name|createOutput
parameter_list|(
name|String
name|name
parameter_list|,
name|IOContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
name|RAMFile
name|file
init|=
name|newRAMFile
argument_list|()
decl_stmt|;
name|RAMFile
name|existing
init|=
name|fileMap
operator|.
name|remove
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|existing
operator|!=
literal|null
condition|)
block|{
name|sizeInBytes
operator|.
name|addAndGet
argument_list|(
operator|-
name|existing
operator|.
name|sizeInBytes
argument_list|)
expr_stmt|;
name|existing
operator|.
name|directory
operator|=
literal|null
expr_stmt|;
block|}
name|fileMap
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|file
argument_list|)
expr_stmt|;
return|return
operator|new
name|RAMOutputStream
argument_list|(
name|name
argument_list|,
name|file
argument_list|,
literal|true
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|createTempOutput
specifier|public
name|IndexOutput
name|createTempOutput
parameter_list|(
name|String
name|prefix
parameter_list|,
name|String
name|suffix
parameter_list|,
name|IOContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
comment|// Make the file first...
name|RAMFile
name|file
init|=
name|newRAMFile
argument_list|()
decl_stmt|;
comment|// ... then try to find a unique name for it:
while|while
condition|(
literal|true
condition|)
block|{
name|String
name|name
init|=
name|IndexFileNames
operator|.
name|segmentFileName
argument_list|(
name|prefix
argument_list|,
name|suffix
operator|+
literal|"_"
operator|+
name|Long
operator|.
name|toString
argument_list|(
name|nextTempFileCounter
operator|.
name|getAndIncrement
argument_list|()
argument_list|,
name|Character
operator|.
name|MAX_RADIX
argument_list|)
argument_list|,
literal|"tmp"
argument_list|)
decl_stmt|;
if|if
condition|(
name|fileMap
operator|.
name|putIfAbsent
argument_list|(
name|name
argument_list|,
name|file
argument_list|)
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|RAMOutputStream
argument_list|(
name|name
argument_list|,
name|file
argument_list|,
literal|true
argument_list|)
return|;
block|}
block|}
block|}
comment|/**    * Returns a new {@link RAMFile} for storing data. This method can be    * overridden to return different {@link RAMFile} impls, that e.g. override    * {@link RAMFile#newBuffer(int)}.    */
DECL|method|newRAMFile
specifier|protected
name|RAMFile
name|newRAMFile
parameter_list|()
block|{
return|return
operator|new
name|RAMFile
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|sync
specifier|public
name|void
name|sync
parameter_list|(
name|Collection
argument_list|<
name|String
argument_list|>
name|names
parameter_list|)
throws|throws
name|IOException
block|{   }
annotation|@
name|Override
DECL|method|renameFile
specifier|public
name|void
name|renameFile
parameter_list|(
name|String
name|source
parameter_list|,
name|String
name|dest
parameter_list|)
throws|throws
name|IOException
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
name|RAMFile
name|file
init|=
name|fileMap
operator|.
name|get
argument_list|(
name|source
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
name|source
argument_list|)
throw|;
block|}
name|fileMap
operator|.
name|put
argument_list|(
name|dest
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|fileMap
operator|.
name|remove
argument_list|(
name|source
argument_list|)
expr_stmt|;
block|}
comment|/** Returns a stream reading an existing file. */
annotation|@
name|Override
DECL|method|openInput
specifier|public
name|IndexInput
name|openInput
parameter_list|(
name|String
name|name
parameter_list|,
name|IOContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
name|RAMFile
name|file
init|=
name|fileMap
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
name|name
argument_list|)
throw|;
block|}
return|return
operator|new
name|RAMInputStream
argument_list|(
name|name
argument_list|,
name|file
argument_list|)
return|;
block|}
comment|/** Closes the store to future operations, releasing associated memory. */
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
block|{
name|isOpen
operator|=
literal|false
expr_stmt|;
name|fileMap
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
end_class
end_unit
