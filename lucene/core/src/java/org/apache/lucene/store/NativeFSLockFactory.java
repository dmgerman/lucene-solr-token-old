begin_unit
begin_package
DECL|package|org.apache.lucene.store
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|FileChannel
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|OverlappingFileLockException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|StandardOpenOption
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import
begin_comment
comment|/**  *<p>Implements {@link LockFactory} using native OS file  * locks.  Note that because this LockFactory relies on  * java.nio.* APIs for locking, any problems with those APIs  * will cause locking to fail.  Specifically, on certain NFS  * environments the java.nio.* locks will fail (the lock can  * incorrectly be double acquired) whereas {@link  * SimpleFSLockFactory} worked perfectly in those same  * environments.  For NFS based access to an index, it's  * recommended that you try {@link SimpleFSLockFactory}  * first and work around the one limitation that a lock file  * could be left when the JVM exits abnormally.</p>  *  *<p>The primary benefit of {@link NativeFSLockFactory} is  * that locks (not the lock file itsself) will be properly  * removed (by the OS) if the JVM has an abnormal exit.</p>  *   *<p>Note that, unlike {@link SimpleFSLockFactory}, the existence of  * leftover lock files in the filesystem is fine because the OS  * will free the locks held against these files even though the  * files still remain. Lucene will never actively remove the lock  * files, so although you see them, the index may not be locked.</p>  *  *<p>Special care needs to be taken if you change the locking  * implementation: First be certain that no writer is in fact  * writing to the index otherwise you can easily corrupt  * your index. Be sure to do the LockFactory change on all Lucene  * instances and clean up all leftover lock files before starting  * the new configuration for the first time. Different implementations  * can not work together!</p>  *  *<p>If you suspect that this or any other LockFactory is  * not working properly in your environment, you can easily  * test it by using {@link VerifyingLockFactory}, {@link  * LockVerifyServer} and {@link LockStressTest}.</p>  *   *<p>This is a singleton, you have to use {@link #INSTANCE}.  *  * @see LockFactory  */
end_comment
begin_class
DECL|class|NativeFSLockFactory
specifier|public
specifier|final
class|class
name|NativeFSLockFactory
extends|extends
name|FSLockFactory
block|{
comment|/**    * Singleton instance    */
DECL|field|INSTANCE
specifier|public
specifier|static
specifier|final
name|NativeFSLockFactory
name|INSTANCE
init|=
operator|new
name|NativeFSLockFactory
argument_list|()
decl_stmt|;
DECL|method|NativeFSLockFactory
specifier|private
name|NativeFSLockFactory
parameter_list|()
block|{}
annotation|@
name|Override
DECL|method|makeFSLock
specifier|protected
name|Lock
name|makeFSLock
parameter_list|(
name|FSDirectory
name|dir
parameter_list|,
name|String
name|lockName
parameter_list|)
block|{
return|return
operator|new
name|NativeFSLock
argument_list|(
name|dir
operator|.
name|getDirectory
argument_list|()
argument_list|,
name|lockName
argument_list|)
return|;
block|}
DECL|class|NativeFSLock
specifier|static
specifier|final
class|class
name|NativeFSLock
extends|extends
name|Lock
block|{
DECL|field|path
specifier|private
specifier|final
name|Path
name|path
decl_stmt|;
DECL|field|lockDir
specifier|private
specifier|final
name|Path
name|lockDir
decl_stmt|;
DECL|field|LOCK_HELD
specifier|private
specifier|static
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|LOCK_HELD
init|=
name|Collections
operator|.
name|synchronizedSet
argument_list|(
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|channel
specifier|private
name|FileChannel
name|channel
decl_stmt|;
comment|// set when we have the lock
DECL|field|realPath
specifier|private
name|Path
name|realPath
decl_stmt|;
comment|// unconditionally set in obtain(), for use in close()
DECL|method|NativeFSLock
specifier|public
name|NativeFSLock
parameter_list|(
name|Path
name|lockDir
parameter_list|,
name|String
name|lockFileName
parameter_list|)
block|{
name|this
operator|.
name|lockDir
operator|=
name|lockDir
expr_stmt|;
name|path
operator|=
name|lockDir
operator|.
name|resolve
argument_list|(
name|lockFileName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|obtain
specifier|public
specifier|synchronized
name|boolean
name|obtain
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|channel
operator|!=
literal|null
condition|)
block|{
comment|// Our instance is already locked:
assert|assert
name|channel
operator|.
name|isOpen
argument_list|()
assert|;
assert|assert
name|realPath
operator|!=
literal|null
assert|;
throw|throw
operator|new
name|LockObtainFailedException
argument_list|(
literal|"this lock instance was already obtained"
argument_list|)
throw|;
block|}
comment|// Ensure that lockDir exists and is a directory.
name|Files
operator|.
name|createDirectories
argument_list|(
name|lockDir
argument_list|)
expr_stmt|;
try|try
block|{
name|Files
operator|.
name|createFile
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ignore
parameter_list|)
block|{
comment|// we must create the file to have a truly canonical path.
comment|// if it's already created, we don't care. if it cant be created, it will fail below.
block|}
name|realPath
operator|=
name|path
operator|.
name|toRealPath
argument_list|()
expr_stmt|;
comment|// Make sure nobody else in-process has this lock held
comment|// already, and, mark it held if not:
comment|// This is a pretty crazy workaround for some documented
comment|// but yet awkward JVM behavior:
comment|//
comment|//   On some systems, closing a channel releases all locks held by the Java virtual machine on the underlying file
comment|//   regardless of whether the locks were acquired via that channel or via another channel open on the same file.
comment|//   It is strongly recommended that, within a program, a unique channel be used to acquire all locks on any given
comment|//   file.
comment|//
comment|// This essentially means if we close "A" channel for a given file all locks might be released... the odd part
comment|// is that we can't re-obtain the lock in the same JVM but from a different process if that happens. Nevertheless
comment|// this is super trappy. See LUCENE-5738
name|boolean
name|obtained
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|LOCK_HELD
operator|.
name|add
argument_list|(
name|realPath
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|FileChannel
name|ch
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ch
operator|=
name|FileChannel
operator|.
name|open
argument_list|(
name|realPath
argument_list|,
name|StandardOpenOption
operator|.
name|CREATE
argument_list|,
name|StandardOpenOption
operator|.
name|WRITE
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
name|ch
operator|.
name|tryLock
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|channel
operator|=
name|ch
expr_stmt|;
name|obtained
operator|=
literal|true
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
decl||
name|OverlappingFileLockException
name|e
parameter_list|)
block|{
comment|// At least on OS X, we will sometimes get an
comment|// intermittent "Permission Denied" IOException,
comment|// which seems to simply mean "you failed to get
comment|// the lock".  But other IOExceptions could be
comment|// "permanent" (eg, locking is not supported via
comment|// the filesystem).  So, we record the failure
comment|// reason here; the timeout obtain (usually the
comment|// one calling us) will use this as "root cause"
comment|// if it fails to get the lock.
name|failureReason
operator|=
name|e
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|obtained
operator|==
literal|false
condition|)
block|{
comment|// not successful - clear up and move out
name|IOUtils
operator|.
name|closeWhileHandlingException
argument_list|(
name|ch
argument_list|)
expr_stmt|;
name|clearLockHeld
argument_list|(
name|realPath
argument_list|)
expr_stmt|;
comment|// clear LOCK_HELD last
block|}
block|}
block|}
return|return
name|obtained
return|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
specifier|synchronized
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|channel
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|IOUtils
operator|.
name|close
argument_list|(
name|channel
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|channel
operator|=
literal|null
expr_stmt|;
name|clearLockHeld
argument_list|(
name|realPath
argument_list|)
expr_stmt|;
comment|// clear LOCK_HELD last
block|}
block|}
block|}
DECL|method|clearLockHeld
specifier|private
specifier|static
specifier|final
name|void
name|clearLockHeld
parameter_list|(
name|Path
name|path
parameter_list|)
block|{
name|boolean
name|remove
init|=
name|LOCK_HELD
operator|.
name|remove
argument_list|(
name|path
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
assert|assert
name|remove
operator|:
literal|"Lock was cleared but never marked as held"
assert|;
block|}
annotation|@
name|Override
DECL|method|isLocked
specifier|public
specifier|synchronized
name|boolean
name|isLocked
parameter_list|()
block|{
comment|// The test for is isLocked is not directly possible with native file locks:
comment|// First a shortcut, if a lock reference in this instance is available
if|if
condition|(
name|channel
operator|!=
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
comment|// Look if lock file is definitely not present; if not, there can definitely be no lock!
if|if
condition|(
name|Files
operator|.
name|notExists
argument_list|(
name|path
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// Try to obtain and release (if was locked) the lock
try|try
block|{
name|boolean
name|obtained
init|=
name|obtain
argument_list|()
decl_stmt|;
if|if
condition|(
name|obtained
condition|)
name|close
argument_list|()
expr_stmt|;
return|return
operator|!
name|obtained
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"NativeFSLock@"
operator|+
name|path
return|;
block|}
block|}
block|}
end_class
end_unit
