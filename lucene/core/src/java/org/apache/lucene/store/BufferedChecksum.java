begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.store
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
package|;
end_package
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|Checksum
import|;
end_import
begin_comment
comment|/**   * Wraps another {@link Checksum} with an internal buffer  * to speed up checksum calculations.  */
end_comment
begin_class
DECL|class|BufferedChecksum
specifier|public
class|class
name|BufferedChecksum
implements|implements
name|Checksum
block|{
DECL|field|in
specifier|private
specifier|final
name|Checksum
name|in
decl_stmt|;
DECL|field|buffer
specifier|private
specifier|final
name|byte
name|buffer
index|[]
decl_stmt|;
DECL|field|upto
specifier|private
name|int
name|upto
decl_stmt|;
comment|/** Default buffer size: 256 */
DECL|field|DEFAULT_BUFFERSIZE
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_BUFFERSIZE
init|=
literal|256
decl_stmt|;
comment|/** Create a new BufferedChecksum with {@link #DEFAULT_BUFFERSIZE} */
DECL|method|BufferedChecksum
specifier|public
name|BufferedChecksum
parameter_list|(
name|Checksum
name|in
parameter_list|)
block|{
name|this
argument_list|(
name|in
argument_list|,
name|DEFAULT_BUFFERSIZE
argument_list|)
expr_stmt|;
block|}
comment|/** Create a new BufferedChecksum with the specified bufferSize */
DECL|method|BufferedChecksum
specifier|public
name|BufferedChecksum
parameter_list|(
name|Checksum
name|in
parameter_list|,
name|int
name|bufferSize
parameter_list|)
block|{
name|this
operator|.
name|in
operator|=
name|in
expr_stmt|;
name|this
operator|.
name|buffer
operator|=
operator|new
name|byte
index|[
name|bufferSize
index|]
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|update
specifier|public
name|void
name|update
parameter_list|(
name|int
name|b
parameter_list|)
block|{
if|if
condition|(
name|upto
operator|==
name|buffer
operator|.
name|length
condition|)
block|{
name|flush
argument_list|()
expr_stmt|;
block|}
name|buffer
index|[
name|upto
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
name|b
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|update
specifier|public
name|void
name|update
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
block|{
if|if
condition|(
name|len
operator|>=
name|buffer
operator|.
name|length
condition|)
block|{
name|flush
argument_list|()
expr_stmt|;
name|in
operator|.
name|update
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|upto
operator|+
name|len
operator|>
name|buffer
operator|.
name|length
condition|)
block|{
name|flush
argument_list|()
expr_stmt|;
block|}
name|System
operator|.
name|arraycopy
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|buffer
argument_list|,
name|upto
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|upto
operator|+=
name|len
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getValue
specifier|public
name|long
name|getValue
parameter_list|()
block|{
name|flush
argument_list|()
expr_stmt|;
return|return
name|in
operator|.
name|getValue
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|reset
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|upto
operator|=
literal|0
expr_stmt|;
name|in
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
DECL|method|flush
specifier|private
name|void
name|flush
parameter_list|()
block|{
if|if
condition|(
name|upto
operator|>
literal|0
condition|)
block|{
name|in
operator|.
name|update
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|upto
argument_list|)
expr_stmt|;
block|}
name|upto
operator|=
literal|0
expr_stmt|;
block|}
block|}
end_class
end_unit
