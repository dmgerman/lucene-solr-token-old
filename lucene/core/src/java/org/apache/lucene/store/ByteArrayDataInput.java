begin_unit
begin_package
DECL|package|org.apache.lucene.store
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_comment
comment|/**   * DataInput backed by a byte array.  *<b>WARNING:</b> This class omits all low-level checks.  * @lucene.experimental   */
end_comment
begin_class
DECL|class|ByteArrayDataInput
specifier|public
specifier|final
class|class
name|ByteArrayDataInput
extends|extends
name|DataInput
block|{
DECL|field|bytes
specifier|private
name|byte
index|[]
name|bytes
decl_stmt|;
DECL|field|pos
specifier|private
name|int
name|pos
decl_stmt|;
DECL|field|limit
specifier|private
name|int
name|limit
decl_stmt|;
DECL|method|ByteArrayDataInput
specifier|public
name|ByteArrayDataInput
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|)
block|{
name|reset
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
block|}
DECL|method|ByteArrayDataInput
specifier|public
name|ByteArrayDataInput
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|len
parameter_list|)
block|{
name|reset
argument_list|(
name|bytes
argument_list|,
name|offset
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
DECL|method|ByteArrayDataInput
specifier|public
name|ByteArrayDataInput
parameter_list|()
block|{
name|reset
argument_list|(
name|BytesRef
operator|.
name|EMPTY_BYTES
argument_list|)
expr_stmt|;
block|}
DECL|method|reset
specifier|public
name|void
name|reset
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|)
block|{
name|reset
argument_list|(
name|bytes
argument_list|,
literal|0
argument_list|,
name|bytes
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
comment|// NOTE: sets pos to 0, which is not right if you had
comment|// called reset w/ non-zero offset!!
DECL|method|rewind
specifier|public
name|void
name|rewind
parameter_list|()
block|{
name|pos
operator|=
literal|0
expr_stmt|;
block|}
DECL|method|getPosition
specifier|public
name|int
name|getPosition
parameter_list|()
block|{
return|return
name|pos
return|;
block|}
DECL|method|setPosition
specifier|public
name|void
name|setPosition
parameter_list|(
name|int
name|pos
parameter_list|)
block|{
name|this
operator|.
name|pos
operator|=
name|pos
expr_stmt|;
block|}
DECL|method|reset
specifier|public
name|void
name|reset
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|len
parameter_list|)
block|{
name|this
operator|.
name|bytes
operator|=
name|bytes
expr_stmt|;
name|pos
operator|=
name|offset
expr_stmt|;
name|limit
operator|=
name|offset
operator|+
name|len
expr_stmt|;
block|}
DECL|method|length
specifier|public
name|int
name|length
parameter_list|()
block|{
return|return
name|limit
return|;
block|}
DECL|method|eof
specifier|public
name|boolean
name|eof
parameter_list|()
block|{
return|return
name|pos
operator|==
name|limit
return|;
block|}
DECL|method|skipBytes
specifier|public
name|void
name|skipBytes
parameter_list|(
name|int
name|count
parameter_list|)
block|{
name|pos
operator|+=
name|count
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|readShort
specifier|public
name|short
name|readShort
parameter_list|()
block|{
return|return
call|(
name|short
call|)
argument_list|(
operator|(
operator|(
name|bytes
index|[
name|pos
operator|++
index|]
operator|&
literal|0xFF
operator|)
operator|<<
literal|8
operator|)
operator||
operator|(
name|bytes
index|[
name|pos
operator|++
index|]
operator|&
literal|0xFF
operator|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|readInt
specifier|public
name|int
name|readInt
parameter_list|()
block|{
return|return
operator|(
operator|(
name|bytes
index|[
name|pos
operator|++
index|]
operator|&
literal|0xFF
operator|)
operator|<<
literal|24
operator|)
operator||
operator|(
operator|(
name|bytes
index|[
name|pos
operator|++
index|]
operator|&
literal|0xFF
operator|)
operator|<<
literal|16
operator|)
operator||
operator|(
operator|(
name|bytes
index|[
name|pos
operator|++
index|]
operator|&
literal|0xFF
operator|)
operator|<<
literal|8
operator|)
operator||
operator|(
name|bytes
index|[
name|pos
operator|++
index|]
operator|&
literal|0xFF
operator|)
return|;
block|}
annotation|@
name|Override
DECL|method|readLong
specifier|public
name|long
name|readLong
parameter_list|()
block|{
specifier|final
name|int
name|i1
init|=
operator|(
operator|(
name|bytes
index|[
name|pos
operator|++
index|]
operator|&
literal|0xff
operator|)
operator|<<
literal|24
operator|)
operator||
operator|(
operator|(
name|bytes
index|[
name|pos
operator|++
index|]
operator|&
literal|0xff
operator|)
operator|<<
literal|16
operator|)
operator||
operator|(
operator|(
name|bytes
index|[
name|pos
operator|++
index|]
operator|&
literal|0xff
operator|)
operator|<<
literal|8
operator|)
operator||
operator|(
name|bytes
index|[
name|pos
operator|++
index|]
operator|&
literal|0xff
operator|)
decl_stmt|;
specifier|final
name|int
name|i2
init|=
operator|(
operator|(
name|bytes
index|[
name|pos
operator|++
index|]
operator|&
literal|0xff
operator|)
operator|<<
literal|24
operator|)
operator||
operator|(
operator|(
name|bytes
index|[
name|pos
operator|++
index|]
operator|&
literal|0xff
operator|)
operator|<<
literal|16
operator|)
operator||
operator|(
operator|(
name|bytes
index|[
name|pos
operator|++
index|]
operator|&
literal|0xff
operator|)
operator|<<
literal|8
operator|)
operator||
operator|(
name|bytes
index|[
name|pos
operator|++
index|]
operator|&
literal|0xff
operator|)
decl_stmt|;
return|return
operator|(
operator|(
operator|(
name|long
operator|)
name|i1
operator|)
operator|<<
literal|32
operator|)
operator||
operator|(
name|i2
operator|&
literal|0xFFFFFFFFL
operator|)
return|;
block|}
annotation|@
name|Override
DECL|method|readVInt
specifier|public
name|int
name|readVInt
parameter_list|()
block|{
name|byte
name|b
init|=
name|bytes
index|[
name|pos
operator|++
index|]
decl_stmt|;
if|if
condition|(
name|b
operator|>=
literal|0
condition|)
return|return
name|b
return|;
name|int
name|i
init|=
name|b
operator|&
literal|0x7F
decl_stmt|;
name|b
operator|=
name|bytes
index|[
name|pos
operator|++
index|]
expr_stmt|;
name|i
operator||=
operator|(
name|b
operator|&
literal|0x7F
operator|)
operator|<<
literal|7
expr_stmt|;
if|if
condition|(
name|b
operator|>=
literal|0
condition|)
return|return
name|i
return|;
name|b
operator|=
name|bytes
index|[
name|pos
operator|++
index|]
expr_stmt|;
name|i
operator||=
operator|(
name|b
operator|&
literal|0x7F
operator|)
operator|<<
literal|14
expr_stmt|;
if|if
condition|(
name|b
operator|>=
literal|0
condition|)
return|return
name|i
return|;
name|b
operator|=
name|bytes
index|[
name|pos
operator|++
index|]
expr_stmt|;
name|i
operator||=
operator|(
name|b
operator|&
literal|0x7F
operator|)
operator|<<
literal|21
expr_stmt|;
if|if
condition|(
name|b
operator|>=
literal|0
condition|)
return|return
name|i
return|;
name|b
operator|=
name|bytes
index|[
name|pos
operator|++
index|]
expr_stmt|;
comment|// Warning: the next ands use 0x0F / 0xF0 - beware copy/paste errors:
name|i
operator||=
operator|(
name|b
operator|&
literal|0x0F
operator|)
operator|<<
literal|28
expr_stmt|;
if|if
condition|(
operator|(
name|b
operator|&
literal|0xF0
operator|)
operator|==
literal|0
condition|)
return|return
name|i
return|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Invalid vInt detected (too many bits)"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|readVLong
specifier|public
name|long
name|readVLong
parameter_list|()
block|{
name|byte
name|b
init|=
name|bytes
index|[
name|pos
operator|++
index|]
decl_stmt|;
if|if
condition|(
name|b
operator|>=
literal|0
condition|)
return|return
name|b
return|;
name|long
name|i
init|=
name|b
operator|&
literal|0x7FL
decl_stmt|;
name|b
operator|=
name|bytes
index|[
name|pos
operator|++
index|]
expr_stmt|;
name|i
operator||=
operator|(
name|b
operator|&
literal|0x7FL
operator|)
operator|<<
literal|7
expr_stmt|;
if|if
condition|(
name|b
operator|>=
literal|0
condition|)
return|return
name|i
return|;
name|b
operator|=
name|bytes
index|[
name|pos
operator|++
index|]
expr_stmt|;
name|i
operator||=
operator|(
name|b
operator|&
literal|0x7FL
operator|)
operator|<<
literal|14
expr_stmt|;
if|if
condition|(
name|b
operator|>=
literal|0
condition|)
return|return
name|i
return|;
name|b
operator|=
name|bytes
index|[
name|pos
operator|++
index|]
expr_stmt|;
name|i
operator||=
operator|(
name|b
operator|&
literal|0x7FL
operator|)
operator|<<
literal|21
expr_stmt|;
if|if
condition|(
name|b
operator|>=
literal|0
condition|)
return|return
name|i
return|;
name|b
operator|=
name|bytes
index|[
name|pos
operator|++
index|]
expr_stmt|;
name|i
operator||=
operator|(
name|b
operator|&
literal|0x7FL
operator|)
operator|<<
literal|28
expr_stmt|;
if|if
condition|(
name|b
operator|>=
literal|0
condition|)
return|return
name|i
return|;
name|b
operator|=
name|bytes
index|[
name|pos
operator|++
index|]
expr_stmt|;
name|i
operator||=
operator|(
name|b
operator|&
literal|0x7FL
operator|)
operator|<<
literal|35
expr_stmt|;
if|if
condition|(
name|b
operator|>=
literal|0
condition|)
return|return
name|i
return|;
name|b
operator|=
name|bytes
index|[
name|pos
operator|++
index|]
expr_stmt|;
name|i
operator||=
operator|(
name|b
operator|&
literal|0x7FL
operator|)
operator|<<
literal|42
expr_stmt|;
if|if
condition|(
name|b
operator|>=
literal|0
condition|)
return|return
name|i
return|;
name|b
operator|=
name|bytes
index|[
name|pos
operator|++
index|]
expr_stmt|;
name|i
operator||=
operator|(
name|b
operator|&
literal|0x7FL
operator|)
operator|<<
literal|49
expr_stmt|;
if|if
condition|(
name|b
operator|>=
literal|0
condition|)
return|return
name|i
return|;
name|b
operator|=
name|bytes
index|[
name|pos
operator|++
index|]
expr_stmt|;
name|i
operator||=
operator|(
name|b
operator|&
literal|0x7FL
operator|)
operator|<<
literal|56
expr_stmt|;
if|if
condition|(
name|b
operator|>=
literal|0
condition|)
return|return
name|i
return|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Invalid vLong detected (negative values disallowed)"
argument_list|)
throw|;
block|}
comment|// NOTE: AIOOBE not EOF if you read too much
annotation|@
name|Override
DECL|method|readByte
specifier|public
name|byte
name|readByte
parameter_list|()
block|{
return|return
name|bytes
index|[
name|pos
operator|++
index|]
return|;
block|}
comment|// NOTE: AIOOBE not EOF if you read too much
annotation|@
name|Override
DECL|method|readBytes
specifier|public
name|void
name|readBytes
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|len
parameter_list|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|bytes
argument_list|,
name|pos
argument_list|,
name|b
argument_list|,
name|offset
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|pos
operator|+=
name|len
expr_stmt|;
block|}
block|}
end_class
end_unit
