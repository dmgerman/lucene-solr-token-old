begin_unit
begin_package
DECL|package|org.apache.lucene.store
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import
begin_import
import|import
name|java
operator|.
name|net
operator|.
name|ServerSocket
import|;
end_import
begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Socket
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import
begin_comment
comment|/**  * Simple standalone server that must be running when you  * use {@link VerifyingLockFactory}.  This server simply  * verifies at most one process holds the lock at a time.  * Run without any args to see usage.  *  * @see VerifyingLockFactory  * @see LockStressTest  */
end_comment
begin_class
DECL|class|LockVerifyServer
specifier|public
class|class
name|LockVerifyServer
block|{
DECL|method|main
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|args
operator|.
name|length
operator|!=
literal|2
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Usage: java org.apache.lucene.store.LockVerifyServer bindToIp clients\n"
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|int
name|arg
init|=
literal|0
decl_stmt|;
specifier|final
name|String
name|hostname
init|=
name|args
index|[
name|arg
operator|++
index|]
decl_stmt|;
specifier|final
name|int
name|maxClients
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|args
index|[
name|arg
operator|++
index|]
argument_list|)
decl_stmt|;
try|try
init|(
specifier|final
name|ServerSocket
name|s
init|=
operator|new
name|ServerSocket
argument_list|()
init|)
block|{
name|s
operator|.
name|setReuseAddress
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|s
operator|.
name|setSoTimeout
argument_list|(
literal|30000
argument_list|)
expr_stmt|;
comment|// initially 30 secs to give clients enough time to startup
name|s
operator|.
name|bind
argument_list|(
operator|new
name|InetSocketAddress
argument_list|(
name|hostname
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|InetSocketAddress
name|localAddr
init|=
operator|(
name|InetSocketAddress
operator|)
name|s
operator|.
name|getLocalSocketAddress
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Listening on "
operator|+
name|localAddr
operator|+
literal|"..."
argument_list|)
expr_stmt|;
comment|// we set the port as a sysprop, so the ANT task can read it. For that to work, this server must run in-process:
name|System
operator|.
name|setProperty
argument_list|(
literal|"lockverifyserver.port"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|localAddr
operator|.
name|getPort
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Object
name|localLock
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
specifier|final
name|int
index|[]
name|lockedID
init|=
operator|new
name|int
index|[
literal|1
index|]
decl_stmt|;
name|lockedID
index|[
literal|0
index|]
operator|=
operator|-
literal|1
expr_stmt|;
specifier|final
name|CountDownLatch
name|startingGun
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|Thread
index|[]
name|threads
init|=
operator|new
name|Thread
index|[
name|maxClients
index|]
decl_stmt|;
for|for
control|(
name|int
name|count
init|=
literal|0
init|;
name|count
operator|<
name|maxClients
condition|;
name|count
operator|++
control|)
block|{
specifier|final
name|Socket
name|cs
init|=
name|s
operator|.
name|accept
argument_list|()
decl_stmt|;
name|threads
index|[
name|count
index|]
operator|=
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
init|(
name|InputStream
name|in
init|=
name|cs
operator|.
name|getInputStream
argument_list|()
init|;
name|OutputStream
name|os
operator|=
name|cs
operator|.
name|getOutputStream
argument_list|()
init|)
block|{
specifier|final
name|int
name|id
init|=
name|in
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|id
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Client closed connection before communication started."
argument_list|)
throw|;
block|}
name|startingGun
operator|.
name|await
argument_list|()
expr_stmt|;
name|os
operator|.
name|write
argument_list|(
literal|43
argument_list|)
expr_stmt|;
name|os
operator|.
name|flush
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
specifier|final
name|int
name|command
init|=
name|in
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|command
operator|<
literal|0
condition|)
block|{
return|return;
comment|// closed
block|}
synchronized|synchronized
init|(
name|localLock
init|)
block|{
specifier|final
name|int
name|currentLock
init|=
name|lockedID
index|[
literal|0
index|]
decl_stmt|;
if|if
condition|(
name|currentLock
operator|==
operator|-
literal|2
condition|)
block|{
return|return;
comment|// another thread got error, so we exit, too!
block|}
switch|switch
condition|(
name|command
condition|)
block|{
case|case
literal|1
case|:
comment|// Locked
if|if
condition|(
name|currentLock
operator|!=
operator|-
literal|1
condition|)
block|{
name|lockedID
index|[
literal|0
index|]
operator|=
operator|-
literal|2
expr_stmt|;
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"id "
operator|+
name|id
operator|+
literal|" got lock, but "
operator|+
name|currentLock
operator|+
literal|" already holds the lock"
argument_list|)
throw|;
block|}
name|lockedID
index|[
literal|0
index|]
operator|=
name|id
expr_stmt|;
break|break;
case|case
literal|0
case|:
comment|// Unlocked
if|if
condition|(
name|currentLock
operator|!=
name|id
condition|)
block|{
name|lockedID
index|[
literal|0
index|]
operator|=
operator|-
literal|2
expr_stmt|;
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"id "
operator|+
name|id
operator|+
literal|" released the lock, but "
operator|+
name|currentLock
operator|+
literal|" is the one holding the lock"
argument_list|)
throw|;
block|}
name|lockedID
index|[
literal|0
index|]
operator|=
operator|-
literal|1
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unrecognized command: "
operator|+
name|command
argument_list|)
throw|;
block|}
name|os
operator|.
name|write
argument_list|(
name|command
argument_list|)
expr_stmt|;
name|os
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|RuntimeException
decl||
name|Error
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeWhileHandlingException
argument_list|(
name|cs
argument_list|)
expr_stmt|;
block|}
block|}
block|}
expr_stmt|;
name|threads
index|[
name|count
index|]
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
comment|// start
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"All clients started, fire gun..."
argument_list|)
expr_stmt|;
name|startingGun
operator|.
name|countDown
argument_list|()
expr_stmt|;
comment|// wait for all threads to finish
for|for
control|(
name|Thread
name|t
range|:
name|threads
control|)
block|{
name|t
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
comment|// cleanup sysprop
name|System
operator|.
name|clearProperty
argument_list|(
literal|"lockverifyserver.port"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Server terminated."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class
end_unit
