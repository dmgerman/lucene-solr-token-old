begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.store
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_comment
comment|/**  * Base class for file system based locking implementation.  * This class is explicitly checking that the passed {@link Directory}  * is an {@link FSDirectory}.  */
end_comment
begin_class
DECL|class|FSLockFactory
specifier|public
specifier|abstract
class|class
name|FSLockFactory
extends|extends
name|LockFactory
block|{
comment|/** Returns the default locking implementation for this platform.    * This method currently returns always {@link NativeFSLockFactory}.    */
DECL|method|getDefault
specifier|public
specifier|static
specifier|final
name|FSLockFactory
name|getDefault
parameter_list|()
block|{
return|return
name|NativeFSLockFactory
operator|.
name|INSTANCE
return|;
block|}
annotation|@
name|Override
DECL|method|obtainLock
specifier|public
specifier|final
name|Lock
name|obtainLock
parameter_list|(
name|Directory
name|dir
parameter_list|,
name|String
name|lockName
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
operator|(
name|dir
operator|instanceof
name|FSDirectory
operator|)
condition|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" can only be used with FSDirectory subclasses, got: "
operator|+
name|dir
argument_list|)
throw|;
block|}
return|return
name|obtainFSLock
argument_list|(
operator|(
name|FSDirectory
operator|)
name|dir
argument_list|,
name|lockName
argument_list|)
return|;
block|}
comment|/**     * Implement this method to obtain a lock for a FSDirectory instance.     * @throws IOException if the lock could not be obtained.    */
DECL|method|obtainFSLock
specifier|protected
specifier|abstract
name|Lock
name|obtainFSLock
parameter_list|(
name|FSDirectory
name|dir
parameter_list|,
name|String
name|lockName
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
end_class
end_unit
