begin_unit
begin_package
DECL|package|org.apache.lucene.store
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_comment
comment|/**  * DataOutput backed by a byte array.  *<b>WARNING:</b> This class omits most low-level checks,  * so be sure to test heavily with assertions enabled.  * @lucene.experimental  */
end_comment
begin_class
DECL|class|ByteArrayDataOutput
specifier|public
class|class
name|ByteArrayDataOutput
extends|extends
name|DataOutput
block|{
DECL|field|bytes
specifier|private
name|byte
index|[]
name|bytes
decl_stmt|;
DECL|field|pos
specifier|private
name|int
name|pos
decl_stmt|;
DECL|field|limit
specifier|private
name|int
name|limit
decl_stmt|;
DECL|method|ByteArrayDataOutput
specifier|public
name|ByteArrayDataOutput
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|)
block|{
name|reset
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
block|}
DECL|method|ByteArrayDataOutput
specifier|public
name|ByteArrayDataOutput
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|len
parameter_list|)
block|{
name|reset
argument_list|(
name|bytes
argument_list|,
name|offset
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
DECL|method|ByteArrayDataOutput
specifier|public
name|ByteArrayDataOutput
parameter_list|()
block|{
name|reset
argument_list|(
name|BytesRef
operator|.
name|EMPTY_BYTES
argument_list|)
expr_stmt|;
block|}
DECL|method|reset
specifier|public
name|void
name|reset
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|)
block|{
name|reset
argument_list|(
name|bytes
argument_list|,
literal|0
argument_list|,
name|bytes
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
DECL|method|reset
specifier|public
name|void
name|reset
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|len
parameter_list|)
block|{
name|this
operator|.
name|bytes
operator|=
name|bytes
expr_stmt|;
name|pos
operator|=
name|offset
expr_stmt|;
name|limit
operator|=
name|offset
operator|+
name|len
expr_stmt|;
block|}
DECL|method|getPosition
specifier|public
name|int
name|getPosition
parameter_list|()
block|{
return|return
name|pos
return|;
block|}
annotation|@
name|Override
DECL|method|writeByte
specifier|public
name|void
name|writeByte
parameter_list|(
name|byte
name|b
parameter_list|)
block|{
assert|assert
name|pos
operator|<
name|limit
assert|;
name|bytes
index|[
name|pos
operator|++
index|]
operator|=
name|b
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeBytes
specifier|public
name|void
name|writeBytes
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
assert|assert
name|pos
operator|+
name|length
operator|<=
name|limit
assert|;
name|System
operator|.
name|arraycopy
argument_list|(
name|b
argument_list|,
name|offset
argument_list|,
name|bytes
argument_list|,
name|pos
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|pos
operator|+=
name|length
expr_stmt|;
block|}
block|}
end_class
end_unit
