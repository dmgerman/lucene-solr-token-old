begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.store
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|BaseLockFactoryTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|SingleInstanceLockFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|SleepingLockWrapper
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|TestUtil
import|;
end_import
begin_comment
comment|/** Simple tests for SleepingLockWrapper */
end_comment
begin_class
DECL|class|TestSleepingLockWrapper
specifier|public
class|class
name|TestSleepingLockWrapper
extends|extends
name|BaseLockFactoryTestCase
block|{
annotation|@
name|Override
DECL|method|getDirectory
specifier|protected
name|Directory
name|getDirectory
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|lockWaitTimeout
init|=
name|TestUtil
operator|.
name|nextLong
argument_list|(
name|random
argument_list|()
argument_list|,
literal|20
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|long
name|pollInterval
init|=
name|TestUtil
operator|.
name|nextLong
argument_list|(
name|random
argument_list|()
argument_list|,
literal|2
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|int
name|which
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|3
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|which
condition|)
block|{
case|case
literal|0
case|:
return|return
operator|new
name|SleepingLockWrapper
argument_list|(
name|newDirectory
argument_list|(
name|random
argument_list|()
argument_list|,
operator|new
name|SingleInstanceLockFactory
argument_list|()
argument_list|)
argument_list|,
name|lockWaitTimeout
argument_list|,
name|pollInterval
argument_list|)
return|;
case|case
literal|1
case|:
return|return
operator|new
name|SleepingLockWrapper
argument_list|(
name|newFSDirectory
argument_list|(
name|path
argument_list|)
argument_list|,
name|lockWaitTimeout
argument_list|,
name|pollInterval
argument_list|)
return|;
default|default:
return|return
operator|new
name|SleepingLockWrapper
argument_list|(
name|newFSDirectory
argument_list|(
name|path
argument_list|)
argument_list|,
name|lockWaitTimeout
argument_list|,
name|pollInterval
argument_list|)
return|;
block|}
block|}
comment|// TODO: specific tests to this impl
block|}
end_class
end_unit
