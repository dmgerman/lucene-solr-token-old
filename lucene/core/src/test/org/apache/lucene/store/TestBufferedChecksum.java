begin_unit
begin_package
DECL|package|org.apache.lucene.store
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|CRC32
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|Checksum
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_class
DECL|class|TestBufferedChecksum
specifier|public
class|class
name|TestBufferedChecksum
extends|extends
name|LuceneTestCase
block|{
DECL|method|testSimple
specifier|public
name|void
name|testSimple
parameter_list|()
block|{
name|Checksum
name|c
init|=
operator|new
name|BufferedChecksum
argument_list|(
operator|new
name|CRC32
argument_list|()
argument_list|)
decl_stmt|;
name|c
operator|.
name|update
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|c
operator|.
name|update
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|c
operator|.
name|update
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1438416925L
argument_list|,
name|c
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testRandom
specifier|public
name|void
name|testRandom
parameter_list|()
block|{
name|Checksum
name|c1
init|=
operator|new
name|CRC32
argument_list|()
decl_stmt|;
name|Checksum
name|c2
init|=
operator|new
name|BufferedChecksum
argument_list|(
operator|new
name|CRC32
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|iterations
init|=
name|atLeast
argument_list|(
literal|10000
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iterations
condition|;
name|i
operator|++
control|)
block|{
switch|switch
condition|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|4
argument_list|)
condition|)
block|{
case|case
literal|0
case|:
comment|// update(byte[], int, int)
name|int
name|length
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|1024
argument_list|)
decl_stmt|;
name|byte
name|bytes
index|[]
init|=
operator|new
name|byte
index|[
name|length
index|]
decl_stmt|;
name|random
argument_list|()
operator|.
name|nextBytes
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
name|c1
operator|.
name|update
argument_list|(
name|bytes
argument_list|,
literal|0
argument_list|,
name|bytes
operator|.
name|length
argument_list|)
expr_stmt|;
name|c2
operator|.
name|update
argument_list|(
name|bytes
argument_list|,
literal|0
argument_list|,
name|bytes
operator|.
name|length
argument_list|)
expr_stmt|;
break|break;
case|case
literal|1
case|:
comment|// update(int)
name|int
name|b
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|256
argument_list|)
decl_stmt|;
name|c1
operator|.
name|update
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|c2
operator|.
name|update
argument_list|(
name|b
argument_list|)
expr_stmt|;
break|break;
case|case
literal|2
case|:
comment|// reset()
name|c1
operator|.
name|reset
argument_list|()
expr_stmt|;
name|c2
operator|.
name|reset
argument_list|()
expr_stmt|;
break|break;
case|case
literal|3
case|:
comment|// getValue()
name|assertEquals
argument_list|(
name|c1
operator|.
name|getValue
argument_list|()
argument_list|,
name|c2
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
name|assertEquals
argument_list|(
name|c1
operator|.
name|getValue
argument_list|()
argument_list|,
name|c2
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
