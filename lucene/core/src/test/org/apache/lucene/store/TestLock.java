begin_unit
begin_package
DECL|package|org.apache.lucene.store
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CyclicBarrier
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantLock
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_class
DECL|class|TestLock
specifier|public
class|class
name|TestLock
extends|extends
name|LuceneTestCase
block|{
DECL|method|testObtain
specifier|public
name|void
name|testObtain
parameter_list|()
block|{
name|LockMock
name|lock
init|=
operator|new
name|LockMock
argument_list|()
decl_stmt|;
name|Lock
operator|.
name|LOCK_POLL_INTERVAL
operator|=
literal|10
expr_stmt|;
try|try
block|{
name|lock
operator|.
name|obtain
argument_list|(
name|Lock
operator|.
name|LOCK_POLL_INTERVAL
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have failed to obtain lock"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"should attempt to lock more than once"
argument_list|,
name|lock
operator|.
name|lockAttempts
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|LockMock
specifier|private
class|class
name|LockMock
extends|extends
name|Lock
block|{
DECL|field|lockAttempts
specifier|public
name|int
name|lockAttempts
decl_stmt|;
annotation|@
name|Override
DECL|method|obtain
specifier|public
name|boolean
name|obtain
parameter_list|()
block|{
name|lockAttempts
operator|++
expr_stmt|;
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
block|{
comment|// do nothing
block|}
annotation|@
name|Override
DECL|method|isLocked
specifier|public
name|boolean
name|isLocked
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
block|}
DECL|method|testObtainConcurrently
specifier|public
name|void
name|testObtainConcurrently
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|IOException
block|{
specifier|final
name|Directory
name|directory
decl_stmt|;
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|directory
operator|=
name|newDirectory
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|LockFactory
name|lf
init|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
name|SimpleFSLockFactory
operator|.
name|INSTANCE
else|:
name|NativeFSLockFactory
operator|.
name|INSTANCE
decl_stmt|;
name|directory
operator|=
name|newFSDirectory
argument_list|(
name|createTempDir
argument_list|()
argument_list|,
name|lf
argument_list|)
expr_stmt|;
block|}
specifier|final
name|AtomicBoolean
name|running
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|true
argument_list|)
decl_stmt|;
specifier|final
name|AtomicInteger
name|atomicCounter
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|ReentrantLock
name|assertingLock
init|=
operator|new
name|ReentrantLock
argument_list|()
decl_stmt|;
name|int
name|numThreads
init|=
literal|2
operator|+
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
decl_stmt|;
specifier|final
name|int
name|runs
init|=
literal|500
operator|+
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
name|CyclicBarrier
name|barrier
init|=
operator|new
name|CyclicBarrier
argument_list|(
name|numThreads
argument_list|)
decl_stmt|;
name|Thread
index|[]
name|threads
init|=
operator|new
name|Thread
index|[
name|numThreads
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|threads
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|threads
index|[
name|i
index|]
operator|=
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|barrier
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
while|while
condition|(
name|running
operator|.
name|get
argument_list|()
condition|)
block|{
try|try
init|(
name|Lock
name|lock
init|=
name|directory
operator|.
name|makeLock
argument_list|(
literal|"foo.lock"
argument_list|)
init|)
block|{
if|if
condition|(
name|lock
operator|.
name|isLocked
argument_list|()
operator|==
literal|false
operator|&&
name|lock
operator|.
name|obtain
argument_list|()
condition|)
block|{
name|assertTrue
argument_list|(
name|lock
operator|.
name|isLocked
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|assertingLock
operator|.
name|isLocked
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|assertingLock
operator|.
name|tryLock
argument_list|()
condition|)
block|{
name|assertingLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|fail
argument_list|()
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
comment|//
block|}
if|if
condition|(
name|atomicCounter
operator|.
name|incrementAndGet
argument_list|()
operator|>
name|runs
condition|)
block|{
name|running
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
expr_stmt|;
name|threads
index|[
name|i
index|]
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|threads
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|threads
index|[
name|i
index|]
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
name|directory
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testSingleInstanceLockFactoryDoubleObtain
specifier|public
name|void
name|testSingleInstanceLockFactoryDoubleObtain
parameter_list|()
throws|throws
name|Exception
block|{
name|LockFactory
name|lf
init|=
operator|new
name|SingleInstanceLockFactory
argument_list|()
decl_stmt|;
name|Directory
name|dir
init|=
name|newFSDirectory
argument_list|(
name|createTempDir
argument_list|()
argument_list|,
name|lf
argument_list|)
decl_stmt|;
name|Lock
name|lock
init|=
name|dir
operator|.
name|makeLock
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|lock
operator|.
name|obtain
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|lock
operator|.
name|obtain
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"did not hit double-obtain failure"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LockObtainFailedException
name|lofe
parameter_list|)
block|{
comment|// expected
block|}
name|lock
operator|.
name|close
argument_list|()
expr_stmt|;
name|lock
operator|=
name|dir
operator|.
name|makeLock
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|lock
operator|.
name|obtain
argument_list|()
argument_list|)
expr_stmt|;
name|lock
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testSimpleFSLockFactoryDoubleObtain
specifier|public
name|void
name|testSimpleFSLockFactoryDoubleObtain
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|dir
init|=
name|newFSDirectory
argument_list|(
name|createTempDir
argument_list|()
argument_list|,
name|SimpleFSLockFactory
operator|.
name|INSTANCE
argument_list|)
decl_stmt|;
name|Lock
name|lock
init|=
name|dir
operator|.
name|makeLock
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|lock
operator|.
name|obtain
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|lock
operator|.
name|obtain
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"did not hit double-obtain failure"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LockObtainFailedException
name|lofe
parameter_list|)
block|{
comment|// expected
block|}
name|lock
operator|.
name|close
argument_list|()
expr_stmt|;
name|lock
operator|=
name|dir
operator|.
name|makeLock
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|lock
operator|.
name|obtain
argument_list|()
argument_list|)
expr_stmt|;
name|lock
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testNativeFSLockFactoryDoubleObtain
specifier|public
name|void
name|testNativeFSLockFactoryDoubleObtain
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|dir
init|=
name|newFSDirectory
argument_list|(
name|createTempDir
argument_list|()
argument_list|,
name|NativeFSLockFactory
operator|.
name|INSTANCE
argument_list|)
decl_stmt|;
name|Lock
name|lock
init|=
name|dir
operator|.
name|makeLock
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|lock
operator|.
name|obtain
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|lock
operator|.
name|obtain
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"did not hit double-obtain failure"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LockObtainFailedException
name|lofe
parameter_list|)
block|{
comment|// expected
block|}
name|lock
operator|.
name|close
argument_list|()
expr_stmt|;
name|lock
operator|=
name|dir
operator|.
name|makeLock
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|lock
operator|.
name|obtain
argument_list|()
argument_list|)
expr_stmt|;
name|lock
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class
end_unit
