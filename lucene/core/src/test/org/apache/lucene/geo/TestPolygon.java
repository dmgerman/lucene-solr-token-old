begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.geo
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|geo
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|geo
operator|.
name|Polygon
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|PointValues
operator|.
name|Relation
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|geo
operator|.
name|GeoTestUtil
operator|.
name|nextLatitude
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|geo
operator|.
name|GeoTestUtil
operator|.
name|nextLatitudeAround
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|geo
operator|.
name|GeoTestUtil
operator|.
name|nextLongitude
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|geo
operator|.
name|GeoTestUtil
operator|.
name|nextLongitudeAround
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|geo
operator|.
name|GeoTestUtil
operator|.
name|nextPolygon
import|;
end_import
begin_class
DECL|class|TestPolygon
specifier|public
class|class
name|TestPolygon
extends|extends
name|LuceneTestCase
block|{
comment|/** null polyLats not allowed */
DECL|method|testPolygonNullPolyLats
specifier|public
name|void
name|testPolygonNullPolyLats
parameter_list|()
block|{
name|IllegalArgumentException
name|expected
init|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
operator|new
name|Polygon
argument_list|(
literal|null
argument_list|,
operator|new
name|double
index|[]
block|{
operator|-
literal|66
operator|,
operator|-
literal|65
operator|,
operator|-
literal|65
operator|,
operator|-
literal|66
operator|,
operator|-
literal|66
block|}
argument_list|)
decl_stmt|;
block|}
block|)
class|;
end_class
begin_expr_stmt
name|assertTrue
argument_list|(
name|expected
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"polyLats must not be null"
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt
begin_comment
unit|}
comment|/** null polyLons not allowed */
end_comment
begin_function
unit|public
DECL|method|testPolygonNullPolyLons
name|void
name|testPolygonNullPolyLons
parameter_list|()
block|{
name|IllegalArgumentException
name|expected
init|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
operator|new
name|Polygon
argument_list|(
operator|new
name|double
index|[]
block|{
literal|18
operator|,
literal|18
operator|,
literal|19
operator|,
literal|19
operator|,
literal|18
block|}
operator|,
literal|null
argument_list|)
decl_stmt|;
block|}
end_function
begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt
begin_expr_stmt
name|assertTrue
argument_list|(
name|expected
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"polyLons must not be null"
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt
begin_comment
unit|}
comment|/** polygon needs at least 3 vertices */
end_comment
begin_function
unit|public
DECL|method|testPolygonLine
name|void
name|testPolygonLine
parameter_list|()
block|{
name|IllegalArgumentException
name|expected
init|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
operator|new
name|Polygon
argument_list|(
operator|new
name|double
index|[]
block|{
literal|18
operator|,
literal|18
operator|,
literal|18
block|}
operator|,
operator|new
name|double
index|[]
block|{
operator|-
literal|66
operator|,
operator|-
literal|65
operator|,
operator|-
literal|66
block|}
argument_list|)
decl_stmt|;
block|}
end_function
begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt
begin_expr_stmt
name|assertTrue
argument_list|(
name|expected
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"at least 4 polygon points required"
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt
begin_comment
unit|}
comment|/** polygon needs same number of latitudes as longitudes */
end_comment
begin_function
unit|public
DECL|method|testPolygonBogus
name|void
name|testPolygonBogus
parameter_list|()
block|{
name|IllegalArgumentException
name|expected
init|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
operator|new
name|Polygon
argument_list|(
operator|new
name|double
index|[]
block|{
literal|18
operator|,
literal|18
operator|,
literal|19
operator|,
literal|19
block|}
operator|,
operator|new
name|double
index|[]
block|{
operator|-
literal|66
operator|,
operator|-
literal|65
operator|,
operator|-
literal|65
operator|,
operator|-
literal|66
operator|,
operator|-
literal|66
block|}
argument_list|)
decl_stmt|;
block|}
end_function
begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt
begin_expr_stmt
name|assertTrue
argument_list|(
name|expected
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"must be equal length"
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt
begin_comment
unit|}
comment|/** polygon must be closed */
end_comment
begin_function
unit|public
DECL|method|testPolygonNotClosed
name|void
name|testPolygonNotClosed
parameter_list|()
block|{
name|IllegalArgumentException
name|expected
init|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
operator|new
name|Polygon
argument_list|(
operator|new
name|double
index|[]
block|{
literal|18
operator|,
literal|18
operator|,
literal|19
operator|,
literal|19
operator|,
literal|19
block|}
operator|,
operator|new
name|double
index|[]
block|{
operator|-
literal|66
operator|,
operator|-
literal|65
operator|,
operator|-
literal|65
operator|,
operator|-
literal|66
operator|,
operator|-
literal|67
block|}
argument_list|)
decl_stmt|;
block|}
end_function
begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt
begin_expr_stmt
name|assertTrue
argument_list|(
name|expected
operator|.
name|getMessage
argument_list|()
argument_list|,
name|expected
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"it must close itself"
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt
begin_comment
unit|}
comment|/** Three boxes, an island inside a hole inside a shape */
end_comment
begin_function
unit|public
DECL|method|testMultiPolygon
name|void
name|testMultiPolygon
parameter_list|()
block|{
name|Polygon
name|hole
init|=
operator|new
name|Polygon
argument_list|(
operator|new
name|double
index|[]
block|{
operator|-
literal|10
block|,
operator|-
literal|10
block|,
literal|10
block|,
literal|10
block|,
operator|-
literal|10
block|}
argument_list|,
operator|new
name|double
index|[]
block|{
operator|-
literal|10
block|,
literal|10
block|,
literal|10
block|,
operator|-
literal|10
block|,
operator|-
literal|10
block|}
argument_list|)
decl_stmt|;
name|Polygon
name|outer
init|=
operator|new
name|Polygon
argument_list|(
operator|new
name|double
index|[]
block|{
operator|-
literal|50
block|,
operator|-
literal|50
block|,
literal|50
block|,
literal|50
block|,
operator|-
literal|50
block|}
argument_list|,
operator|new
name|double
index|[]
block|{
operator|-
literal|50
block|,
literal|50
block|,
literal|50
block|,
operator|-
literal|50
block|,
operator|-
literal|50
block|}
argument_list|,
name|hole
argument_list|)
decl_stmt|;
name|Polygon
name|island
init|=
operator|new
name|Polygon
argument_list|(
operator|new
name|double
index|[]
block|{
operator|-
literal|5
block|,
operator|-
literal|5
block|,
literal|5
block|,
literal|5
block|,
operator|-
literal|5
block|}
argument_list|,
operator|new
name|double
index|[]
block|{
operator|-
literal|5
block|,
literal|5
block|,
literal|5
block|,
operator|-
literal|5
block|,
operator|-
literal|5
block|}
argument_list|)
decl_stmt|;
name|Polygon
name|polygons
index|[]
init|=
operator|new
name|Polygon
index|[]
block|{
name|outer
block|,
name|island
block|}
decl_stmt|;
comment|// contains(point)
name|assertTrue
argument_list|(
name|Polygon
operator|.
name|contains
argument_list|(
name|polygons
argument_list|,
operator|-
literal|2
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
comment|// on the island
name|assertFalse
argument_list|(
name|Polygon
operator|.
name|contains
argument_list|(
name|polygons
argument_list|,
operator|-
literal|6
argument_list|,
literal|6
argument_list|)
argument_list|)
expr_stmt|;
comment|// in the hole
name|assertTrue
argument_list|(
name|Polygon
operator|.
name|contains
argument_list|(
name|polygons
argument_list|,
operator|-
literal|25
argument_list|,
literal|25
argument_list|)
argument_list|)
expr_stmt|;
comment|// on the mainland
name|assertFalse
argument_list|(
name|Polygon
operator|.
name|contains
argument_list|(
name|polygons
argument_list|,
operator|-
literal|51
argument_list|,
literal|51
argument_list|)
argument_list|)
expr_stmt|;
comment|// in the ocean
comment|// relate(box): this can conservatively return CELL_CROSSES_QUERY
name|assertEquals
argument_list|(
name|Relation
operator|.
name|CELL_INSIDE_QUERY
argument_list|,
name|Polygon
operator|.
name|relate
argument_list|(
name|polygons
argument_list|,
operator|-
literal|2
argument_list|,
literal|2
argument_list|,
operator|-
literal|2
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
comment|// on the island
name|assertEquals
argument_list|(
name|Relation
operator|.
name|CELL_OUTSIDE_QUERY
argument_list|,
name|Polygon
operator|.
name|relate
argument_list|(
name|polygons
argument_list|,
literal|6
argument_list|,
literal|7
argument_list|,
literal|6
argument_list|,
literal|7
argument_list|)
argument_list|)
expr_stmt|;
comment|// in the hole
name|assertEquals
argument_list|(
name|Relation
operator|.
name|CELL_INSIDE_QUERY
argument_list|,
name|Polygon
operator|.
name|relate
argument_list|(
name|polygons
argument_list|,
literal|24
argument_list|,
literal|25
argument_list|,
literal|24
argument_list|,
literal|25
argument_list|)
argument_list|)
expr_stmt|;
comment|// on the mainland
name|assertEquals
argument_list|(
name|Relation
operator|.
name|CELL_OUTSIDE_QUERY
argument_list|,
name|Polygon
operator|.
name|relate
argument_list|(
name|polygons
argument_list|,
literal|51
argument_list|,
literal|52
argument_list|,
literal|51
argument_list|,
literal|52
argument_list|)
argument_list|)
expr_stmt|;
comment|// in the ocean
name|assertEquals
argument_list|(
name|Relation
operator|.
name|CELL_CROSSES_QUERY
argument_list|,
name|Polygon
operator|.
name|relate
argument_list|(
name|polygons
argument_list|,
operator|-
literal|60
argument_list|,
literal|60
argument_list|,
operator|-
literal|60
argument_list|,
literal|60
argument_list|)
argument_list|)
expr_stmt|;
comment|// enclosing us completely
name|assertEquals
argument_list|(
name|Relation
operator|.
name|CELL_CROSSES_QUERY
argument_list|,
name|Polygon
operator|.
name|relate
argument_list|(
name|polygons
argument_list|,
literal|49
argument_list|,
literal|51
argument_list|,
literal|49
argument_list|,
literal|51
argument_list|)
argument_list|)
expr_stmt|;
comment|// overlapping the mainland
name|assertEquals
argument_list|(
name|Relation
operator|.
name|CELL_CROSSES_QUERY
argument_list|,
name|Polygon
operator|.
name|relate
argument_list|(
name|polygons
argument_list|,
literal|9
argument_list|,
literal|11
argument_list|,
literal|9
argument_list|,
literal|11
argument_list|)
argument_list|)
expr_stmt|;
comment|// overlapping the hole
name|assertEquals
argument_list|(
name|Relation
operator|.
name|CELL_CROSSES_QUERY
argument_list|,
name|Polygon
operator|.
name|relate
argument_list|(
name|polygons
argument_list|,
literal|5
argument_list|,
literal|6
argument_list|,
literal|5
argument_list|,
literal|6
argument_list|)
argument_list|)
expr_stmt|;
comment|// overlapping the island
block|}
end_function
begin_function
DECL|method|testPacMan
specifier|public
name|void
name|testPacMan
parameter_list|()
throws|throws
name|Exception
block|{
comment|// pacman
name|double
index|[]
name|px
init|=
block|{
literal|0
block|,
literal|10
block|,
literal|10
block|,
literal|0
block|,
operator|-
literal|8
block|,
operator|-
literal|10
block|,
operator|-
literal|8
block|,
literal|0
block|,
literal|10
block|,
literal|10
block|,
literal|0
block|}
decl_stmt|;
name|double
index|[]
name|py
init|=
block|{
literal|0
block|,
literal|5
block|,
literal|9
block|,
literal|10
block|,
literal|9
block|,
literal|0
block|,
operator|-
literal|9
block|,
operator|-
literal|10
block|,
operator|-
literal|9
block|,
operator|-
literal|5
block|,
literal|0
block|}
decl_stmt|;
comment|// candidate crosses cell
name|double
name|xMin
init|=
literal|2
decl_stmt|;
comment|//-5;
name|double
name|xMax
init|=
literal|11
decl_stmt|;
comment|//0.000001;
name|double
name|yMin
init|=
operator|-
literal|1
decl_stmt|;
comment|//0;
name|double
name|yMax
init|=
literal|1
decl_stmt|;
comment|//5;
comment|// test cell crossing poly
name|Polygon
name|polygon
init|=
operator|new
name|Polygon
argument_list|(
name|py
argument_list|,
name|px
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Relation
operator|.
name|CELL_CROSSES_QUERY
argument_list|,
name|polygon
operator|.
name|relate
argument_list|(
name|yMin
argument_list|,
name|yMax
argument_list|,
name|xMin
argument_list|,
name|xMax
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|method|testBoundingBox
specifier|public
name|void
name|testBoundingBox
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|Polygon
name|polygon
init|=
name|nextPolygon
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|100
condition|;
name|j
operator|++
control|)
block|{
name|double
name|latitude
init|=
name|nextLatitude
argument_list|()
decl_stmt|;
name|double
name|longitude
init|=
name|nextLongitude
argument_list|()
decl_stmt|;
comment|// if the point is within poly, then it should be in our bounding box
if|if
condition|(
name|polygon
operator|.
name|contains
argument_list|(
name|latitude
argument_list|,
name|longitude
argument_list|)
condition|)
block|{
name|assertTrue
argument_list|(
name|latitude
operator|>=
name|polygon
operator|.
name|minLat
operator|&&
name|latitude
operator|<=
name|polygon
operator|.
name|maxLat
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|longitude
operator|>=
name|polygon
operator|.
name|minLon
operator|&&
name|longitude
operator|<=
name|polygon
operator|.
name|maxLon
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_function
begin_function
DECL|method|testBoundingBoxEdgeCases
specifier|public
name|void
name|testBoundingBoxEdgeCases
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|Polygon
name|polygon
init|=
name|nextPolygon
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|100
condition|;
name|j
operator|++
control|)
block|{
name|double
name|latitude
init|=
name|nextLatitudeAround
argument_list|(
name|polygon
operator|.
name|minLat
argument_list|,
name|polygon
operator|.
name|maxLat
argument_list|)
decl_stmt|;
name|double
name|longitude
init|=
name|nextLongitudeAround
argument_list|(
name|polygon
operator|.
name|minLon
argument_list|,
name|polygon
operator|.
name|maxLon
argument_list|)
decl_stmt|;
comment|// if the point is within poly, then it should be in our bounding box
if|if
condition|(
name|polygon
operator|.
name|contains
argument_list|(
name|latitude
argument_list|,
name|longitude
argument_list|)
condition|)
block|{
name|assertTrue
argument_list|(
name|latitude
operator|>=
name|polygon
operator|.
name|minLat
operator|&&
name|latitude
operator|<=
name|polygon
operator|.
name|maxLat
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|longitude
operator|>=
name|polygon
operator|.
name|minLon
operator|&&
name|longitude
operator|<=
name|polygon
operator|.
name|maxLon
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_function
begin_comment
comment|/** If polygon.contains(box) returns true, then any point in that box should return true as well */
end_comment
begin_function
DECL|method|testContainsRandom
specifier|public
name|void
name|testContainsRandom
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1000
condition|;
name|i
operator|++
control|)
block|{
name|Polygon
name|polygon
init|=
name|nextPolygon
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|100
condition|;
name|j
operator|++
control|)
block|{
name|Rectangle
name|rectangle
init|=
name|GeoTestUtil
operator|.
name|nextSimpleBox
argument_list|()
decl_stmt|;
comment|// allowed to conservatively return false
if|if
condition|(
name|polygon
operator|.
name|relate
argument_list|(
name|rectangle
operator|.
name|minLat
argument_list|,
name|rectangle
operator|.
name|maxLat
argument_list|,
name|rectangle
operator|.
name|minLon
argument_list|,
name|rectangle
operator|.
name|maxLon
argument_list|)
operator|==
name|Relation
operator|.
name|CELL_INSIDE_QUERY
condition|)
block|{
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
literal|1000
condition|;
name|k
operator|++
control|)
block|{
comment|// this tests in our range but sometimes outside! so we have to double-check its really in other box
name|double
name|latitude
init|=
name|nextLatitudeAround
argument_list|(
name|rectangle
operator|.
name|minLat
argument_list|,
name|rectangle
operator|.
name|maxLat
argument_list|)
decl_stmt|;
name|double
name|longitude
init|=
name|nextLongitudeAround
argument_list|(
name|rectangle
operator|.
name|minLon
argument_list|,
name|rectangle
operator|.
name|maxLon
argument_list|)
decl_stmt|;
comment|// check for sure its in our box
if|if
condition|(
name|latitude
operator|>=
name|rectangle
operator|.
name|minLat
operator|&&
name|latitude
operator|<=
name|rectangle
operator|.
name|maxLat
operator|&&
name|longitude
operator|>=
name|rectangle
operator|.
name|minLon
operator|&&
name|longitude
operator|<=
name|rectangle
operator|.
name|maxLon
condition|)
block|{
name|assertTrue
argument_list|(
name|polygon
operator|.
name|contains
argument_list|(
name|latitude
argument_list|,
name|longitude
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
end_function
begin_comment
comment|/** If polygon.contains(box) returns true, then any point in that box should return true as well */
end_comment
begin_comment
comment|// different from testContainsRandom in that its not a purely random test. we iterate the vertices of the polygon
end_comment
begin_comment
comment|// and generate boxes near each one of those to try to be more efficient.
end_comment
begin_function
DECL|method|testContainsEdgeCases
specifier|public
name|void
name|testContainsEdgeCases
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1000
condition|;
name|i
operator|++
control|)
block|{
name|Polygon
name|polygon
init|=
name|nextPolygon
argument_list|()
decl_stmt|;
name|double
name|polyLats
index|[]
init|=
name|polygon
operator|.
name|getPolyLats
argument_list|()
decl_stmt|;
name|double
name|polyLons
index|[]
init|=
name|polygon
operator|.
name|getPolyLons
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|vertex
init|=
literal|0
init|;
name|vertex
operator|<
name|polyLats
operator|.
name|length
condition|;
name|vertex
operator|++
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|10
condition|;
name|j
operator|++
control|)
block|{
name|Rectangle
name|rectangle
init|=
name|GeoTestUtil
operator|.
name|nextSimpleBoxNear
argument_list|(
name|polyLats
index|[
name|vertex
index|]
argument_list|,
name|polyLons
index|[
name|vertex
index|]
argument_list|)
decl_stmt|;
comment|// allowed to conservatively return false
if|if
condition|(
name|polygon
operator|.
name|relate
argument_list|(
name|rectangle
operator|.
name|minLat
argument_list|,
name|rectangle
operator|.
name|maxLat
argument_list|,
name|rectangle
operator|.
name|minLon
argument_list|,
name|rectangle
operator|.
name|maxLon
argument_list|)
operator|==
name|Relation
operator|.
name|CELL_INSIDE_QUERY
condition|)
block|{
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
literal|100
condition|;
name|k
operator|++
control|)
block|{
comment|// this tests in our range but sometimes outside! so we have to double-check its really in other box
name|double
name|latitude
init|=
name|nextLatitudeAround
argument_list|(
name|rectangle
operator|.
name|minLat
argument_list|,
name|rectangle
operator|.
name|maxLat
argument_list|)
decl_stmt|;
name|double
name|longitude
init|=
name|nextLongitudeAround
argument_list|(
name|rectangle
operator|.
name|minLon
argument_list|,
name|rectangle
operator|.
name|maxLon
argument_list|)
decl_stmt|;
comment|// check for sure its in our box
if|if
condition|(
name|latitude
operator|>=
name|rectangle
operator|.
name|minLat
operator|&&
name|latitude
operator|<=
name|rectangle
operator|.
name|maxLat
operator|&&
name|longitude
operator|>=
name|rectangle
operator|.
name|minLon
operator|&&
name|longitude
operator|<=
name|rectangle
operator|.
name|maxLon
condition|)
block|{
name|assertTrue
argument_list|(
name|polygon
operator|.
name|contains
argument_list|(
name|latitude
argument_list|,
name|longitude
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
block|}
end_function
begin_comment
comment|/** If polygon.intersects(box) returns false, then any point in that box should return false as well */
end_comment
begin_function
DECL|method|testIntersectRandom
specifier|public
name|void
name|testIntersectRandom
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|Polygon
name|polygon
init|=
name|nextPolygon
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|100
condition|;
name|j
operator|++
control|)
block|{
name|Rectangle
name|rectangle
init|=
name|GeoTestUtil
operator|.
name|nextSimpleBox
argument_list|()
decl_stmt|;
comment|// allowed to conservatively return true.
if|if
condition|(
name|polygon
operator|.
name|relate
argument_list|(
name|rectangle
operator|.
name|minLat
argument_list|,
name|rectangle
operator|.
name|maxLat
argument_list|,
name|rectangle
operator|.
name|minLon
argument_list|,
name|rectangle
operator|.
name|maxLon
argument_list|)
operator|==
name|Relation
operator|.
name|CELL_OUTSIDE_QUERY
condition|)
block|{
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
literal|1000
condition|;
name|k
operator|++
control|)
block|{
comment|// this tests in our range but sometimes outside! so we have to double-check its really in other box
name|double
name|latitude
init|=
name|nextLatitudeAround
argument_list|(
name|rectangle
operator|.
name|minLat
argument_list|,
name|rectangle
operator|.
name|maxLat
argument_list|)
decl_stmt|;
name|double
name|longitude
init|=
name|nextLongitudeAround
argument_list|(
name|rectangle
operator|.
name|minLon
argument_list|,
name|rectangle
operator|.
name|maxLon
argument_list|)
decl_stmt|;
comment|// check for sure its in our box
if|if
condition|(
name|latitude
operator|>=
name|rectangle
operator|.
name|minLat
operator|&&
name|latitude
operator|<=
name|rectangle
operator|.
name|maxLat
operator|&&
name|longitude
operator|>=
name|rectangle
operator|.
name|minLon
operator|&&
name|longitude
operator|<=
name|rectangle
operator|.
name|maxLon
condition|)
block|{
name|assertFalse
argument_list|(
name|polygon
operator|.
name|contains
argument_list|(
name|latitude
argument_list|,
name|longitude
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
end_function
begin_comment
comment|/** If polygon.intersects(box) returns false, then any point in that box should return false as well */
end_comment
begin_comment
comment|// different from testIntersectsRandom in that its not a purely random test. we iterate the vertices of the polygon
end_comment
begin_comment
comment|// and generate boxes near each one of those to try to be more efficient.
end_comment
begin_function
DECL|method|testIntersectEdgeCases
specifier|public
name|void
name|testIntersectEdgeCases
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|Polygon
name|polygon
init|=
name|nextPolygon
argument_list|()
decl_stmt|;
name|double
name|polyLats
index|[]
init|=
name|polygon
operator|.
name|getPolyLats
argument_list|()
decl_stmt|;
name|double
name|polyLons
index|[]
init|=
name|polygon
operator|.
name|getPolyLons
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|vertex
init|=
literal|0
init|;
name|vertex
operator|<
name|polyLats
operator|.
name|length
condition|;
name|vertex
operator|++
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|10
condition|;
name|j
operator|++
control|)
block|{
name|Rectangle
name|rectangle
init|=
name|GeoTestUtil
operator|.
name|nextSimpleBoxNear
argument_list|(
name|polyLats
index|[
name|vertex
index|]
argument_list|,
name|polyLons
index|[
name|vertex
index|]
argument_list|)
decl_stmt|;
comment|// allowed to conservatively return true.
if|if
condition|(
name|polygon
operator|.
name|relate
argument_list|(
name|rectangle
operator|.
name|minLat
argument_list|,
name|rectangle
operator|.
name|maxLat
argument_list|,
name|rectangle
operator|.
name|minLon
argument_list|,
name|rectangle
operator|.
name|maxLon
argument_list|)
operator|==
name|Relation
operator|.
name|CELL_OUTSIDE_QUERY
condition|)
block|{
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
literal|100
condition|;
name|k
operator|++
control|)
block|{
comment|// this tests in our range but sometimes outside! so we have to double-check its really in other box
name|double
name|latitude
init|=
name|nextLatitudeAround
argument_list|(
name|rectangle
operator|.
name|minLat
argument_list|,
name|rectangle
operator|.
name|maxLat
argument_list|)
decl_stmt|;
name|double
name|longitude
init|=
name|nextLongitudeAround
argument_list|(
name|rectangle
operator|.
name|minLon
argument_list|,
name|rectangle
operator|.
name|maxLon
argument_list|)
decl_stmt|;
comment|// check for sure its in our box
if|if
condition|(
name|latitude
operator|>=
name|rectangle
operator|.
name|minLat
operator|&&
name|latitude
operator|<=
name|rectangle
operator|.
name|maxLat
operator|&&
name|longitude
operator|>=
name|rectangle
operator|.
name|minLon
operator|&&
name|longitude
operator|<=
name|rectangle
operator|.
name|maxLon
condition|)
block|{
name|assertFalse
argument_list|(
name|polygon
operator|.
name|contains
argument_list|(
name|latitude
argument_list|,
name|longitude
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
block|}
end_function
begin_comment
comment|/** Tests edge case behavior with respect to insideness */
end_comment
begin_function
DECL|method|testEdgeInsideness
specifier|public
name|void
name|testEdgeInsideness
parameter_list|()
block|{
name|Polygon
name|poly
init|=
operator|new
name|Polygon
argument_list|(
operator|new
name|double
index|[]
block|{
operator|-
literal|2
block|,
operator|-
literal|2
block|,
literal|2
block|,
literal|2
block|,
operator|-
literal|2
block|}
argument_list|,
operator|new
name|double
index|[]
block|{
operator|-
literal|2
block|,
literal|2
block|,
literal|2
block|,
operator|-
literal|2
block|,
operator|-
literal|2
block|}
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|poly
operator|.
name|contains
argument_list|(
operator|-
literal|2
argument_list|,
operator|-
literal|2
argument_list|)
argument_list|)
expr_stmt|;
comment|// bottom left corner: true
name|assertFalse
argument_list|(
name|poly
operator|.
name|contains
argument_list|(
operator|-
literal|2
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
comment|// bottom right corner: false
name|assertFalse
argument_list|(
name|poly
operator|.
name|contains
argument_list|(
literal|2
argument_list|,
operator|-
literal|2
argument_list|)
argument_list|)
expr_stmt|;
comment|// top left corner: false
name|assertFalse
argument_list|(
name|poly
operator|.
name|contains
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
comment|// top right corner: false
name|assertTrue
argument_list|(
name|poly
operator|.
name|contains
argument_list|(
operator|-
literal|2
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// bottom side: true
name|assertTrue
argument_list|(
name|poly
operator|.
name|contains
argument_list|(
operator|-
literal|2
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// bottom side: true
name|assertTrue
argument_list|(
name|poly
operator|.
name|contains
argument_list|(
operator|-
literal|2
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// bottom side: true
name|assertFalse
argument_list|(
name|poly
operator|.
name|contains
argument_list|(
literal|2
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// top side: false
name|assertFalse
argument_list|(
name|poly
operator|.
name|contains
argument_list|(
literal|2
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// top side: false
name|assertFalse
argument_list|(
name|poly
operator|.
name|contains
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// top side: false
name|assertFalse
argument_list|(
name|poly
operator|.
name|contains
argument_list|(
operator|-
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
comment|// right side: false
name|assertFalse
argument_list|(
name|poly
operator|.
name|contains
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
comment|// right side: false
name|assertFalse
argument_list|(
name|poly
operator|.
name|contains
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
comment|// right side: false
name|assertTrue
argument_list|(
name|poly
operator|.
name|contains
argument_list|(
operator|-
literal|1
argument_list|,
operator|-
literal|2
argument_list|)
argument_list|)
expr_stmt|;
comment|// left side: true
name|assertTrue
argument_list|(
name|poly
operator|.
name|contains
argument_list|(
literal|0
argument_list|,
operator|-
literal|2
argument_list|)
argument_list|)
expr_stmt|;
comment|// left side: true
name|assertTrue
argument_list|(
name|poly
operator|.
name|contains
argument_list|(
literal|1
argument_list|,
operator|-
literal|2
argument_list|)
argument_list|)
expr_stmt|;
comment|// left side: true
block|}
end_function
begin_comment
comment|/** Tests that our impl supports multiple components and holes (not currently used) */
end_comment
begin_function
DECL|method|testMultiPolygonContains
specifier|public
name|void
name|testMultiPolygonContains
parameter_list|()
block|{
comment|// this is the equivalent of the following: we don't recommend anyone do this (e.g. relation logic will not work)
comment|// but lets not lose the property that it works.
comment|///
comment|// Polygon hole = new Polygon(new double[] { -10, -10, 10, 10, -10 }, new double[] { -10, 10, 10, -10, -10 });
comment|// Polygon outer = new Polygon(new double[] { -50, -50, 50, 50, -50 }, new double[] { -50, 50, 50, -50, -50 }, hole);
comment|// Polygon island = new Polygon(new double[] { -5, -5, 5, 5, -5 }, new double[] { -5, 5, 5, -5, -5 } );
comment|// Polygon polygons[] = new Polygon[] { outer, island };
name|Polygon
name|polygon
init|=
operator|new
name|Polygon
argument_list|(
operator|new
name|double
index|[]
block|{
literal|0
block|,
operator|-
literal|50
block|,
operator|-
literal|50
block|,
literal|50
block|,
literal|50
block|,
operator|-
literal|50
block|,
literal|0
block|,
operator|-
literal|5
block|,
operator|-
literal|5
block|,
literal|5
block|,
literal|5
block|,
operator|-
literal|5
block|,
literal|0
block|,
operator|-
literal|10
block|,
operator|-
literal|10
block|,
literal|10
block|,
literal|10
block|,
operator|-
literal|10
block|,
literal|0
block|}
argument_list|,
operator|new
name|double
index|[]
block|{
literal|0
block|,
operator|-
literal|50
block|,
literal|50
block|,
literal|50
block|,
operator|-
literal|50
block|,
operator|-
literal|50
block|,
literal|0
block|,
operator|-
literal|5
block|,
literal|5
block|,
literal|5
block|,
operator|-
literal|5
block|,
operator|-
literal|5
block|,
literal|0
block|,
operator|-
literal|10
block|,
literal|10
block|,
literal|10
block|,
operator|-
literal|10
block|,
operator|-
literal|10
block|,
literal|0
block|}
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|polygon
operator|.
name|contains
argument_list|(
operator|-
literal|2
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
comment|// on the island
name|assertFalse
argument_list|(
name|polygon
operator|.
name|contains
argument_list|(
operator|-
literal|6
argument_list|,
literal|6
argument_list|)
argument_list|)
expr_stmt|;
comment|// in the hole
name|assertTrue
argument_list|(
name|polygon
operator|.
name|contains
argument_list|(
operator|-
literal|25
argument_list|,
literal|25
argument_list|)
argument_list|)
expr_stmt|;
comment|// on the mainland
name|assertFalse
argument_list|(
name|polygon
operator|.
name|contains
argument_list|(
operator|-
literal|51
argument_list|,
literal|51
argument_list|)
argument_list|)
expr_stmt|;
comment|// in the ocean
block|}
end_function
begin_comment
comment|/** Tests current impl against original algorithm */
end_comment
begin_function
DECL|method|testContainsAgainstOriginal
specifier|public
name|void
name|testContainsAgainstOriginal
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1000
condition|;
name|i
operator|++
control|)
block|{
name|Polygon
name|polygon
init|=
name|nextPolygon
argument_list|()
decl_stmt|;
comment|// currently we don't generate these, but this test does not want holes.
while|while
condition|(
name|polygon
operator|.
name|getHoles
argument_list|()
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|polygon
operator|=
name|nextPolygon
argument_list|()
expr_stmt|;
block|}
name|double
name|polyLats
index|[]
init|=
name|polygon
operator|.
name|getPolyLats
argument_list|()
decl_stmt|;
name|double
name|polyLons
index|[]
init|=
name|polygon
operator|.
name|getPolyLons
argument_list|()
decl_stmt|;
comment|// random lat/lons in bounding box
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|1000
condition|;
name|j
operator|++
control|)
block|{
name|double
name|latitude
init|=
name|nextLatitudeAround
argument_list|(
name|polygon
operator|.
name|minLat
argument_list|,
name|polygon
operator|.
name|maxLat
argument_list|)
decl_stmt|;
name|double
name|longitude
init|=
name|nextLongitudeAround
argument_list|(
name|polygon
operator|.
name|minLon
argument_list|,
name|polygon
operator|.
name|maxLon
argument_list|)
decl_stmt|;
comment|// bounding box check required due to rounding errors (we don't solve that problem)
if|if
condition|(
name|latitude
operator|>=
name|polygon
operator|.
name|minLat
operator|&&
name|latitude
operator|<=
name|polygon
operator|.
name|maxLat
operator|&&
name|longitude
operator|>=
name|polygon
operator|.
name|minLon
operator|&&
name|longitude
operator|<=
name|polygon
operator|.
name|maxLon
condition|)
block|{
name|boolean
name|expected
init|=
name|containsOriginal
argument_list|(
name|polyLats
argument_list|,
name|polyLons
argument_list|,
name|latitude
argument_list|,
name|longitude
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|polygon
operator|.
name|contains
argument_list|(
name|latitude
argument_list|,
name|longitude
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// lat lons targeted near vertices
for|for
control|(
name|int
name|vertex
init|=
literal|0
init|;
name|vertex
operator|<
name|polyLats
operator|.
name|length
condition|;
name|vertex
operator|++
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|100
condition|;
name|j
operator|++
control|)
block|{
name|double
name|latitude
init|=
name|GeoTestUtil
operator|.
name|nextLatitudeNear
argument_list|(
name|polyLats
index|[
name|vertex
index|]
argument_list|)
decl_stmt|;
name|double
name|longitude
init|=
name|GeoTestUtil
operator|.
name|nextLongitudeNear
argument_list|(
name|polyLons
index|[
name|vertex
index|]
argument_list|)
decl_stmt|;
comment|// bounding box check required due to rounding errors (we don't solve that problem)
if|if
condition|(
name|latitude
operator|>=
name|polygon
operator|.
name|minLat
operator|&&
name|latitude
operator|<=
name|polygon
operator|.
name|maxLat
operator|&&
name|longitude
operator|>=
name|polygon
operator|.
name|minLon
operator|&&
name|longitude
operator|<=
name|polygon
operator|.
name|maxLon
condition|)
block|{
name|boolean
name|expected
init|=
name|containsOriginal
argument_list|(
name|polyLats
argument_list|,
name|polyLons
argument_list|,
name|latitude
argument_list|,
name|longitude
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|polygon
operator|.
name|contains
argument_list|(
name|latitude
argument_list|,
name|longitude
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_function
begin_comment
comment|// direct port of PNPOLY C code (https://www.ecse.rpi.edu/~wrf/Research/Short_Notes/pnpoly.html)
end_comment
begin_comment
comment|// this allows us to improve the code yet still ensure we have its properties
end_comment
begin_comment
comment|// it is under the BSD license (https://www.ecse.rpi.edu/~wrf/Research/Short_Notes/pnpoly.html#License%20to%20Use)
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 1970-2003, Wm. Randolph Franklin
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
end_comment
begin_comment
comment|// documentation files (the "Software"), to deal in the Software without restriction, including without limitation
end_comment
begin_comment
comment|// the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and
end_comment
begin_comment
comment|// to permit persons to whom the Software is furnished to do so, subject to the following conditions:
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// 1. Redistributions of source code must retain the above copyright
end_comment
begin_comment
comment|//    notice, this list of conditions and the following disclaimers.
end_comment
begin_comment
comment|// 2. Redistributions in binary form must reproduce the above copyright
end_comment
begin_comment
comment|//    notice in the documentation and/or other materials provided with
end_comment
begin_comment
comment|//    the distribution.
end_comment
begin_comment
comment|// 3. The name of W. Randolph Franklin may not be used to endorse or
end_comment
begin_comment
comment|//    promote products derived from this Software without specific
end_comment
begin_comment
comment|//    prior written permission.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED
end_comment
begin_comment
comment|// TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
end_comment
begin_comment
comment|// THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
end_comment
begin_comment
comment|// CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
end_comment
begin_comment
comment|// IN THE SOFTWARE.
end_comment
begin_function
DECL|method|containsOriginal
specifier|private
specifier|static
name|boolean
name|containsOriginal
parameter_list|(
name|double
name|polyLats
index|[]
parameter_list|,
name|double
name|polyLons
index|[]
parameter_list|,
name|double
name|latitude
parameter_list|,
name|double
name|longitude
parameter_list|)
block|{
name|boolean
name|c
init|=
literal|false
decl_stmt|;
name|int
name|i
decl_stmt|,
name|j
decl_stmt|;
name|int
name|nvert
init|=
name|polyLats
operator|.
name|length
decl_stmt|;
name|double
name|verty
index|[]
init|=
name|polyLats
decl_stmt|;
name|double
name|vertx
index|[]
init|=
name|polyLons
decl_stmt|;
name|double
name|testy
init|=
name|latitude
decl_stmt|;
name|double
name|testx
init|=
name|longitude
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
operator|,
name|j
operator|=
name|nvert
operator|-
literal|1
init|;
name|i
operator|<
name|nvert
condition|;
name|j
operator|=
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|(
operator|(
name|verty
index|[
name|i
index|]
operator|>
name|testy
operator|)
operator|!=
operator|(
name|verty
index|[
name|j
index|]
operator|>
name|testy
operator|)
operator|)
operator|&&
operator|(
name|testx
operator|<
operator|(
name|vertx
index|[
name|j
index|]
operator|-
name|vertx
index|[
name|i
index|]
operator|)
operator|*
operator|(
name|testy
operator|-
name|verty
index|[
name|i
index|]
operator|)
operator|/
operator|(
name|verty
index|[
name|j
index|]
operator|-
name|verty
index|[
name|i
index|]
operator|)
operator|+
name|vertx
index|[
name|i
index|]
operator|)
condition|)
name|c
operator|=
operator|!
name|c
expr_stmt|;
block|}
return|return
name|c
return|;
block|}
end_function
unit|}
end_unit
