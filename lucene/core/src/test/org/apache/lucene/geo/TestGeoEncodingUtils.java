begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.geo
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|geo
package|;
end_package
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|NumericUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|TestUtil
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|geo
operator|.
name|GeoEncodingUtils
operator|.
name|decodeLatitude
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|geo
operator|.
name|GeoEncodingUtils
operator|.
name|decodeLongitude
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|geo
operator|.
name|GeoEncodingUtils
operator|.
name|encodeLatitude
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|geo
operator|.
name|GeoEncodingUtils
operator|.
name|encodeLatitudeCeil
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|geo
operator|.
name|GeoEncodingUtils
operator|.
name|encodeLongitude
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|geo
operator|.
name|GeoEncodingUtils
operator|.
name|encodeLongitudeCeil
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|geo
operator|.
name|GeoUtils
operator|.
name|MAX_LAT_INCL
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|geo
operator|.
name|GeoUtils
operator|.
name|MAX_LON_INCL
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|geo
operator|.
name|GeoUtils
operator|.
name|MIN_LAT_INCL
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|geo
operator|.
name|GeoUtils
operator|.
name|MIN_LON_INCL
import|;
end_import
begin_comment
comment|/**  Tests methods in {@link GeoEncodingUtils}  */
end_comment
begin_class
DECL|class|TestGeoEncodingUtils
specifier|public
class|class
name|TestGeoEncodingUtils
extends|extends
name|LuceneTestCase
block|{
comment|/**    * step through some integers, ensuring they decode to their expected double values.    * double values start at -90 and increase by LATITUDE_DECODE for each integer.    * check edge cases within the double range and random doubles within the range too.    */
DECL|method|testLatitudeQuantization
specifier|public
name|void
name|testLatitudeQuantization
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|double
name|LATITUDE_DECODE
init|=
literal|180.0D
operator|/
operator|(
literal|0x1L
operator|<<
literal|32
operator|)
decl_stmt|;
name|Random
name|random
init|=
name|random
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10000
condition|;
name|i
operator|++
control|)
block|{
name|int
name|encoded
init|=
name|random
operator|.
name|nextInt
argument_list|()
decl_stmt|;
name|double
name|min
init|=
name|MIN_LAT_INCL
operator|+
operator|(
name|encoded
operator|-
operator|(
name|long
operator|)
name|Integer
operator|.
name|MIN_VALUE
operator|)
operator|*
name|LATITUDE_DECODE
decl_stmt|;
name|double
name|decoded
init|=
name|decodeLatitude
argument_list|(
name|encoded
argument_list|)
decl_stmt|;
comment|// should exactly equal expected value
name|assertEquals
argument_list|(
name|min
argument_list|,
name|decoded
argument_list|,
literal|0.0D
argument_list|)
expr_stmt|;
comment|// should round-trip
name|assertEquals
argument_list|(
name|encoded
argument_list|,
name|encodeLatitude
argument_list|(
name|decoded
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|encoded
argument_list|,
name|encodeLatitudeCeil
argument_list|(
name|decoded
argument_list|)
argument_list|)
expr_stmt|;
comment|// test within the range
if|if
condition|(
name|encoded
operator|!=
name|Integer
operator|.
name|MAX_VALUE
condition|)
block|{
comment|// this is the next representable value
comment|// all double values between [min .. max) should encode to the current integer
comment|// all double values between (min .. max] should encodeCeil to the next integer.
name|double
name|max
init|=
name|min
operator|+
name|LATITUDE_DECODE
decl_stmt|;
name|assertEquals
argument_list|(
name|max
argument_list|,
name|decodeLatitude
argument_list|(
name|encoded
operator|+
literal|1
argument_list|)
argument_list|,
literal|0.0D
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|encoded
operator|+
literal|1
argument_list|,
name|encodeLatitude
argument_list|(
name|max
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|encoded
operator|+
literal|1
argument_list|,
name|encodeLatitudeCeil
argument_list|(
name|max
argument_list|)
argument_list|)
expr_stmt|;
comment|// first and last doubles in range that will be quantized
name|double
name|minEdge
init|=
name|Math
operator|.
name|nextUp
argument_list|(
name|min
argument_list|)
decl_stmt|;
name|double
name|maxEdge
init|=
name|Math
operator|.
name|nextDown
argument_list|(
name|max
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|encoded
argument_list|,
name|encodeLatitude
argument_list|(
name|minEdge
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|encoded
operator|+
literal|1
argument_list|,
name|encodeLatitudeCeil
argument_list|(
name|minEdge
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|encoded
argument_list|,
name|encodeLatitude
argument_list|(
name|maxEdge
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|encoded
operator|+
literal|1
argument_list|,
name|encodeLatitudeCeil
argument_list|(
name|maxEdge
argument_list|)
argument_list|)
expr_stmt|;
comment|// check random values within the double range
name|long
name|minBits
init|=
name|NumericUtils
operator|.
name|doubleToSortableLong
argument_list|(
name|minEdge
argument_list|)
decl_stmt|;
name|long
name|maxBits
init|=
name|NumericUtils
operator|.
name|doubleToSortableLong
argument_list|(
name|maxEdge
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|100
condition|;
name|j
operator|++
control|)
block|{
name|double
name|value
init|=
name|NumericUtils
operator|.
name|sortableLongToDouble
argument_list|(
name|TestUtil
operator|.
name|nextLong
argument_list|(
name|random
argument_list|,
name|minBits
argument_list|,
name|maxBits
argument_list|)
argument_list|)
decl_stmt|;
comment|// round down
name|assertEquals
argument_list|(
name|encoded
argument_list|,
name|encodeLatitude
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
comment|// round up
name|assertEquals
argument_list|(
name|encoded
operator|+
literal|1
argument_list|,
name|encodeLatitudeCeil
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * step through some integers, ensuring they decode to their expected double values.    * double values start at -180 and increase by LONGITUDE_DECODE for each integer.    * check edge cases within the double range and a random doubles within the range too.    */
DECL|method|testLongitudeQuantization
specifier|public
name|void
name|testLongitudeQuantization
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|double
name|LONGITUDE_DECODE
init|=
literal|360.0D
operator|/
operator|(
literal|0x1L
operator|<<
literal|32
operator|)
decl_stmt|;
name|Random
name|random
init|=
name|random
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10000
condition|;
name|i
operator|++
control|)
block|{
name|int
name|encoded
init|=
name|random
operator|.
name|nextInt
argument_list|()
decl_stmt|;
name|double
name|min
init|=
name|MIN_LON_INCL
operator|+
operator|(
name|encoded
operator|-
operator|(
name|long
operator|)
name|Integer
operator|.
name|MIN_VALUE
operator|)
operator|*
name|LONGITUDE_DECODE
decl_stmt|;
name|double
name|decoded
init|=
name|decodeLongitude
argument_list|(
name|encoded
argument_list|)
decl_stmt|;
comment|// should exactly equal expected value
name|assertEquals
argument_list|(
name|min
argument_list|,
name|decoded
argument_list|,
literal|0.0D
argument_list|)
expr_stmt|;
comment|// should round-trip
name|assertEquals
argument_list|(
name|encoded
argument_list|,
name|encodeLongitude
argument_list|(
name|decoded
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|encoded
argument_list|,
name|encodeLongitudeCeil
argument_list|(
name|decoded
argument_list|)
argument_list|)
expr_stmt|;
comment|// test within the range
if|if
condition|(
name|encoded
operator|!=
name|Integer
operator|.
name|MAX_VALUE
condition|)
block|{
comment|// this is the next representable value
comment|// all double values between [min .. max) should encode to the current integer
comment|// all double values between (min .. max] should encodeCeil to the next integer.
name|double
name|max
init|=
name|min
operator|+
name|LONGITUDE_DECODE
decl_stmt|;
name|assertEquals
argument_list|(
name|max
argument_list|,
name|decodeLongitude
argument_list|(
name|encoded
operator|+
literal|1
argument_list|)
argument_list|,
literal|0.0D
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|encoded
operator|+
literal|1
argument_list|,
name|encodeLongitude
argument_list|(
name|max
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|encoded
operator|+
literal|1
argument_list|,
name|encodeLongitudeCeil
argument_list|(
name|max
argument_list|)
argument_list|)
expr_stmt|;
comment|// first and last doubles in range that will be quantized
name|double
name|minEdge
init|=
name|Math
operator|.
name|nextUp
argument_list|(
name|min
argument_list|)
decl_stmt|;
name|double
name|maxEdge
init|=
name|Math
operator|.
name|nextDown
argument_list|(
name|max
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|encoded
argument_list|,
name|encodeLongitude
argument_list|(
name|minEdge
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|encoded
operator|+
literal|1
argument_list|,
name|encodeLongitudeCeil
argument_list|(
name|minEdge
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|encoded
argument_list|,
name|encodeLongitude
argument_list|(
name|maxEdge
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|encoded
operator|+
literal|1
argument_list|,
name|encodeLongitudeCeil
argument_list|(
name|maxEdge
argument_list|)
argument_list|)
expr_stmt|;
comment|// check random values within the double range
name|long
name|minBits
init|=
name|NumericUtils
operator|.
name|doubleToSortableLong
argument_list|(
name|minEdge
argument_list|)
decl_stmt|;
name|long
name|maxBits
init|=
name|NumericUtils
operator|.
name|doubleToSortableLong
argument_list|(
name|maxEdge
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|100
condition|;
name|j
operator|++
control|)
block|{
name|double
name|value
init|=
name|NumericUtils
operator|.
name|sortableLongToDouble
argument_list|(
name|TestUtil
operator|.
name|nextLong
argument_list|(
name|random
argument_list|,
name|minBits
argument_list|,
name|maxBits
argument_list|)
argument_list|)
decl_stmt|;
comment|// round down
name|assertEquals
argument_list|(
name|encoded
argument_list|,
name|encodeLongitude
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
comment|// round up
name|assertEquals
argument_list|(
name|encoded
operator|+
literal|1
argument_list|,
name|encodeLongitudeCeil
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|// check edge/interesting cases explicitly
DECL|method|testEncodeEdgeCases
specifier|public
name|void
name|testEncodeEdgeCases
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|Integer
operator|.
name|MIN_VALUE
argument_list|,
name|encodeLatitude
argument_list|(
name|MIN_LAT_INCL
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|MIN_VALUE
argument_list|,
name|encodeLatitudeCeil
argument_list|(
name|MIN_LAT_INCL
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|encodeLatitude
argument_list|(
name|MAX_LAT_INCL
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|encodeLatitudeCeil
argument_list|(
name|MAX_LAT_INCL
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|MIN_VALUE
argument_list|,
name|encodeLongitude
argument_list|(
name|MIN_LON_INCL
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|MIN_VALUE
argument_list|,
name|encodeLongitudeCeil
argument_list|(
name|MIN_LON_INCL
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|encodeLongitude
argument_list|(
name|MAX_LON_INCL
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|encodeLongitudeCeil
argument_list|(
name|MAX_LON_INCL
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
