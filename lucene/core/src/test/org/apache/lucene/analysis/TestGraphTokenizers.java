begin_unit
begin_package
DECL|package|org.apache.lucene.analysis
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|CharTermAttribute
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|OffsetAttribute
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|PositionIncrementAttribute
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|PositionLengthAttribute
import|;
end_import
begin_class
DECL|class|TestGraphTokenizers
specifier|public
class|class
name|TestGraphTokenizers
extends|extends
name|BaseTokenStreamTestCase
block|{
comment|// Makes a graph TokenStream from the string; separate
comment|// positions with single space, multiple tokens at the same
comment|// position with /, and add optional position length with
comment|// :.  EG "a b c" is a simple chain, "a/x b c" adds 'x'
comment|// over 'a' at position 0 with posLen=1, "a/x:3 b c" adds
comment|// 'x' over a with posLen=3.  Tokens are in normal-form!
comment|// So, offsets are computed based on the first token at a
comment|// given position.  NOTE: each token must be a single
comment|// character!  We assume this when computing offsets...
comment|// NOTE: all input tokens must be length 1!!!  This means
comment|// you cannot turn on MockCharFilter when random
comment|// testing...
DECL|class|GraphTokenizer
specifier|private
specifier|static
class|class
name|GraphTokenizer
extends|extends
name|Tokenizer
block|{
DECL|field|tokens
specifier|private
name|List
argument_list|<
name|Token
argument_list|>
name|tokens
decl_stmt|;
DECL|field|upto
specifier|private
name|int
name|upto
decl_stmt|;
DECL|field|inputLength
specifier|private
name|int
name|inputLength
decl_stmt|;
DECL|field|termAtt
specifier|private
specifier|final
name|CharTermAttribute
name|termAtt
init|=
name|addAttribute
argument_list|(
name|CharTermAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|offsetAtt
specifier|private
specifier|final
name|OffsetAttribute
name|offsetAtt
init|=
name|addAttribute
argument_list|(
name|OffsetAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|posIncrAtt
specifier|private
specifier|final
name|PositionIncrementAttribute
name|posIncrAtt
init|=
name|addAttribute
argument_list|(
name|PositionIncrementAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|posLengthAtt
specifier|private
specifier|final
name|PositionLengthAttribute
name|posLengthAtt
init|=
name|addAttribute
argument_list|(
name|PositionLengthAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|GraphTokenizer
specifier|public
name|GraphTokenizer
parameter_list|(
name|Reader
name|input
parameter_list|)
block|{
name|super
argument_list|(
name|input
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|reset
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|tokens
operator|=
literal|null
expr_stmt|;
name|upto
operator|=
literal|0
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|incrementToken
specifier|public
name|boolean
name|incrementToken
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|tokens
operator|==
literal|null
condition|)
block|{
name|fillTokens
argument_list|()
expr_stmt|;
block|}
comment|//System.out.println("graphTokenizer: incr upto=" + upto + " vs " + tokens.size());
if|if
condition|(
name|upto
operator|==
name|tokens
operator|.
name|size
argument_list|()
condition|)
block|{
comment|//System.out.println("  END @ " + tokens.size());
return|return
literal|false
return|;
block|}
specifier|final
name|Token
name|t
init|=
name|tokens
operator|.
name|get
argument_list|(
name|upto
operator|++
argument_list|)
decl_stmt|;
comment|//System.out.println("  return token=" + t);
name|clearAttributes
argument_list|()
expr_stmt|;
name|termAtt
operator|.
name|append
argument_list|(
name|t
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|offsetAtt
operator|.
name|setOffset
argument_list|(
name|t
operator|.
name|startOffset
argument_list|()
argument_list|,
name|t
operator|.
name|endOffset
argument_list|()
argument_list|)
expr_stmt|;
name|posIncrAtt
operator|.
name|setPositionIncrement
argument_list|(
name|t
operator|.
name|getPositionIncrement
argument_list|()
argument_list|)
expr_stmt|;
name|posLengthAtt
operator|.
name|setPositionLength
argument_list|(
name|t
operator|.
name|getPositionLength
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|end
specifier|public
name|void
name|end
parameter_list|()
throws|throws
name|IOException
block|{
name|super
operator|.
name|end
argument_list|()
expr_stmt|;
comment|// NOTE: somewhat... hackish, but we need this to
comment|// satisfy BTSTC:
specifier|final
name|int
name|lastOffset
decl_stmt|;
if|if
condition|(
name|tokens
operator|!=
literal|null
operator|&&
operator|!
name|tokens
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|lastOffset
operator|=
name|tokens
operator|.
name|get
argument_list|(
name|tokens
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|endOffset
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|lastOffset
operator|=
literal|0
expr_stmt|;
block|}
name|offsetAtt
operator|.
name|setOffset
argument_list|(
name|correctOffset
argument_list|(
name|lastOffset
argument_list|)
argument_list|,
name|correctOffset
argument_list|(
name|inputLength
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|fillTokens
specifier|private
name|void
name|fillTokens
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
specifier|final
name|char
index|[]
name|buffer
init|=
operator|new
name|char
index|[
literal|256
index|]
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
specifier|final
name|int
name|count
init|=
name|input
operator|.
name|read
argument_list|(
name|buffer
argument_list|)
decl_stmt|;
if|if
condition|(
name|count
operator|==
operator|-
literal|1
condition|)
block|{
break|break;
block|}
name|sb
operator|.
name|append
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|count
argument_list|)
expr_stmt|;
comment|//System.out.println("got count=" + count);
block|}
comment|//System.out.println("fillTokens: " + sb);
name|inputLength
operator|=
name|sb
operator|.
name|length
argument_list|()
expr_stmt|;
specifier|final
name|String
index|[]
name|parts
init|=
name|sb
operator|.
name|toString
argument_list|()
operator|.
name|split
argument_list|(
literal|" "
argument_list|)
decl_stmt|;
name|tokens
operator|=
operator|new
name|ArrayList
argument_list|<
name|Token
argument_list|>
argument_list|()
expr_stmt|;
name|int
name|pos
init|=
literal|0
decl_stmt|;
name|int
name|maxPos
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|offset
init|=
literal|0
decl_stmt|;
comment|//System.out.println("again");
for|for
control|(
name|String
name|part
range|:
name|parts
control|)
block|{
specifier|final
name|String
index|[]
name|overlapped
init|=
name|part
operator|.
name|split
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|boolean
name|firstAtPos
init|=
literal|true
decl_stmt|;
name|int
name|minPosLength
init|=
name|Integer
operator|.
name|MAX_VALUE
decl_stmt|;
for|for
control|(
name|String
name|part2
range|:
name|overlapped
control|)
block|{
specifier|final
name|int
name|colonIndex
init|=
name|part2
operator|.
name|indexOf
argument_list|(
literal|':'
argument_list|)
decl_stmt|;
specifier|final
name|String
name|token
decl_stmt|;
specifier|final
name|int
name|posLength
decl_stmt|;
if|if
condition|(
name|colonIndex
operator|!=
operator|-
literal|1
condition|)
block|{
name|token
operator|=
name|part2
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|colonIndex
argument_list|)
expr_stmt|;
name|posLength
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|part2
operator|.
name|substring
argument_list|(
literal|1
operator|+
name|colonIndex
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|token
operator|=
name|part2
expr_stmt|;
name|posLength
operator|=
literal|1
expr_stmt|;
block|}
name|maxPos
operator|=
name|Math
operator|.
name|max
argument_list|(
name|maxPos
argument_list|,
name|pos
operator|+
name|posLength
argument_list|)
expr_stmt|;
name|minPosLength
operator|=
name|Math
operator|.
name|min
argument_list|(
name|minPosLength
argument_list|,
name|posLength
argument_list|)
expr_stmt|;
specifier|final
name|Token
name|t
init|=
operator|new
name|Token
argument_list|(
name|token
argument_list|,
name|offset
argument_list|,
name|offset
operator|+
literal|2
operator|*
name|posLength
operator|-
literal|1
argument_list|)
decl_stmt|;
name|t
operator|.
name|setPositionLength
argument_list|(
name|posLength
argument_list|)
expr_stmt|;
name|t
operator|.
name|setPositionIncrement
argument_list|(
name|firstAtPos
condition|?
literal|1
else|:
literal|0
argument_list|)
expr_stmt|;
name|firstAtPos
operator|=
literal|false
expr_stmt|;
comment|//System.out.println("  add token=" + t + " startOff=" + t.startOffset() + " endOff=" + t.endOffset());
name|tokens
operator|.
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
name|pos
operator|+=
name|minPosLength
expr_stmt|;
name|offset
operator|=
literal|2
operator|*
name|pos
expr_stmt|;
block|}
assert|assert
name|maxPos
operator|<=
name|pos
operator|:
literal|"input string mal-formed: posLength>1 tokens hang over the end"
assert|;
block|}
block|}
DECL|method|testMockGraphTokenFilterBasic
specifier|public
name|void
name|testMockGraphTokenFilterBasic
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|iter
init|=
literal|0
init|;
name|iter
operator|<
literal|10
operator|*
name|RANDOM_MULTIPLIER
condition|;
name|iter
operator|++
control|)
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\nTEST: iter="
operator|+
name|iter
argument_list|)
expr_stmt|;
block|}
comment|// Make new analyzer each time, because MGTF has fixed
comment|// seed:
specifier|final
name|Analyzer
name|a
init|=
operator|new
name|Analyzer
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|TokenStreamComponents
name|createComponents
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|Reader
name|reader
parameter_list|)
block|{
specifier|final
name|Tokenizer
name|t
init|=
operator|new
name|MockTokenizer
argument_list|(
name|reader
argument_list|,
name|MockTokenizer
operator|.
name|WHITESPACE
argument_list|,
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|TokenStream
name|t2
init|=
operator|new
name|MockGraphTokenFilter
argument_list|(
name|random
argument_list|,
name|t
argument_list|)
decl_stmt|;
return|return
operator|new
name|TokenStreamComponents
argument_list|(
name|t
argument_list|,
name|t2
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|checkAnalysisConsistency
argument_list|(
name|random
argument_list|,
name|a
argument_list|,
literal|false
argument_list|,
literal|"a b c d e f g h i j k"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testMockGraphTokenFilterOnGraphInput
specifier|public
name|void
name|testMockGraphTokenFilterOnGraphInput
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|iter
init|=
literal|0
init|;
name|iter
operator|<
literal|100
operator|*
name|RANDOM_MULTIPLIER
condition|;
name|iter
operator|++
control|)
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\nTEST: iter="
operator|+
name|iter
argument_list|)
expr_stmt|;
block|}
comment|// Make new analyzer each time, because MGTF has fixed
comment|// seed:
specifier|final
name|Analyzer
name|a
init|=
operator|new
name|Analyzer
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|TokenStreamComponents
name|createComponents
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|Reader
name|reader
parameter_list|)
block|{
specifier|final
name|Tokenizer
name|t
init|=
operator|new
name|GraphTokenizer
argument_list|(
name|reader
argument_list|)
decl_stmt|;
specifier|final
name|TokenStream
name|t2
init|=
operator|new
name|MockGraphTokenFilter
argument_list|(
name|random
argument_list|,
name|t
argument_list|)
decl_stmt|;
return|return
operator|new
name|TokenStreamComponents
argument_list|(
name|t
argument_list|,
name|t2
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|checkAnalysisConsistency
argument_list|(
name|random
argument_list|,
name|a
argument_list|,
literal|false
argument_list|,
literal|"a/x:3 c/y:2 d e f/z:4 g h i j k"
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Just deletes (leaving hole) token 'a':
DECL|class|RemoveATokens
specifier|private
specifier|final
specifier|static
class|class
name|RemoveATokens
extends|extends
name|TokenFilter
block|{
DECL|field|pendingPosInc
specifier|private
name|int
name|pendingPosInc
decl_stmt|;
DECL|field|termAtt
specifier|private
specifier|final
name|CharTermAttribute
name|termAtt
init|=
name|addAttribute
argument_list|(
name|CharTermAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|posIncAtt
specifier|private
specifier|final
name|PositionIncrementAttribute
name|posIncAtt
init|=
name|addAttribute
argument_list|(
name|PositionIncrementAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|RemoveATokens
specifier|public
name|RemoveATokens
parameter_list|(
name|TokenStream
name|in
parameter_list|)
block|{
name|super
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|reset
specifier|public
name|void
name|reset
parameter_list|()
throws|throws
name|IOException
block|{
name|super
operator|.
name|reset
argument_list|()
expr_stmt|;
name|pendingPosInc
operator|=
literal|0
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|end
specifier|public
name|void
name|end
parameter_list|()
throws|throws
name|IOException
block|{
name|super
operator|.
name|end
argument_list|()
expr_stmt|;
name|posIncAtt
operator|.
name|setPositionIncrement
argument_list|(
name|pendingPosInc
operator|+
name|posIncAtt
operator|.
name|getPositionIncrement
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|incrementToken
specifier|public
name|boolean
name|incrementToken
parameter_list|()
throws|throws
name|IOException
block|{
while|while
condition|(
literal|true
condition|)
block|{
specifier|final
name|boolean
name|gotOne
init|=
name|input
operator|.
name|incrementToken
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|gotOne
condition|)
block|{
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
name|termAtt
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
literal|"a"
argument_list|)
condition|)
block|{
name|pendingPosInc
operator|+=
name|posIncAtt
operator|.
name|getPositionIncrement
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|posIncAtt
operator|.
name|setPositionIncrement
argument_list|(
name|pendingPosInc
operator|+
name|posIncAtt
operator|.
name|getPositionIncrement
argument_list|()
argument_list|)
expr_stmt|;
name|pendingPosInc
operator|=
literal|0
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
block|}
block|}
DECL|method|testMockGraphTokenFilterBeforeHoles
specifier|public
name|void
name|testMockGraphTokenFilterBeforeHoles
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|iter
init|=
literal|0
init|;
name|iter
operator|<
literal|100
operator|*
name|RANDOM_MULTIPLIER
condition|;
name|iter
operator|++
control|)
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\nTEST: iter="
operator|+
name|iter
argument_list|)
expr_stmt|;
block|}
comment|// Make new analyzer each time, because MGTF has fixed
comment|// seed:
specifier|final
name|Analyzer
name|a
init|=
operator|new
name|Analyzer
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|TokenStreamComponents
name|createComponents
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|Reader
name|reader
parameter_list|)
block|{
specifier|final
name|Tokenizer
name|t
init|=
operator|new
name|MockTokenizer
argument_list|(
name|reader
argument_list|,
name|MockTokenizer
operator|.
name|WHITESPACE
argument_list|,
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|TokenStream
name|t2
init|=
operator|new
name|MockGraphTokenFilter
argument_list|(
name|random
argument_list|,
name|t
argument_list|)
decl_stmt|;
specifier|final
name|TokenStream
name|t3
init|=
operator|new
name|RemoveATokens
argument_list|(
name|t2
argument_list|)
decl_stmt|;
return|return
operator|new
name|TokenStreamComponents
argument_list|(
name|t
argument_list|,
name|t3
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|checkAnalysisConsistency
argument_list|(
name|random
argument_list|,
name|a
argument_list|,
literal|false
argument_list|,
literal|"a b c d e f g h i j k"
argument_list|)
expr_stmt|;
name|checkAnalysisConsistency
argument_list|(
name|random
argument_list|,
name|a
argument_list|,
literal|false
argument_list|,
literal|"x y a b c d e f g h i j k"
argument_list|)
expr_stmt|;
name|checkAnalysisConsistency
argument_list|(
name|random
argument_list|,
name|a
argument_list|,
literal|false
argument_list|,
literal|"a b c d e f g h i j k a"
argument_list|)
expr_stmt|;
name|checkAnalysisConsistency
argument_list|(
name|random
argument_list|,
name|a
argument_list|,
literal|false
argument_list|,
literal|"a b c d e f g h i j k a x y"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testMockGraphTokenFilterAfterHoles
specifier|public
name|void
name|testMockGraphTokenFilterAfterHoles
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|iter
init|=
literal|0
init|;
name|iter
operator|<
literal|100
operator|*
name|RANDOM_MULTIPLIER
condition|;
name|iter
operator|++
control|)
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\nTEST: iter="
operator|+
name|iter
argument_list|)
expr_stmt|;
block|}
comment|// Make new analyzer each time, because MGTF has fixed
comment|// seed:
specifier|final
name|Analyzer
name|a
init|=
operator|new
name|Analyzer
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|TokenStreamComponents
name|createComponents
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|Reader
name|reader
parameter_list|)
block|{
specifier|final
name|Tokenizer
name|t
init|=
operator|new
name|MockTokenizer
argument_list|(
name|reader
argument_list|,
name|MockTokenizer
operator|.
name|WHITESPACE
argument_list|,
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|TokenStream
name|t2
init|=
operator|new
name|RemoveATokens
argument_list|(
name|t
argument_list|)
decl_stmt|;
specifier|final
name|TokenStream
name|t3
init|=
operator|new
name|MockGraphTokenFilter
argument_list|(
name|random
argument_list|,
name|t2
argument_list|)
decl_stmt|;
return|return
operator|new
name|TokenStreamComponents
argument_list|(
name|t
argument_list|,
name|t3
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|checkAnalysisConsistency
argument_list|(
name|random
argument_list|,
name|a
argument_list|,
literal|false
argument_list|,
literal|"a b c d e f g h i j k"
argument_list|)
expr_stmt|;
name|checkAnalysisConsistency
argument_list|(
name|random
argument_list|,
name|a
argument_list|,
literal|false
argument_list|,
literal|"x y a b c d e f g h i j k"
argument_list|)
expr_stmt|;
name|checkAnalysisConsistency
argument_list|(
name|random
argument_list|,
name|a
argument_list|,
literal|false
argument_list|,
literal|"a b c d e f g h i j k a"
argument_list|)
expr_stmt|;
name|checkAnalysisConsistency
argument_list|(
name|random
argument_list|,
name|a
argument_list|,
literal|false
argument_list|,
literal|"a b c d e f g h i j k a x y"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testMockGraphTokenFilterRandom
specifier|public
name|void
name|testMockGraphTokenFilterRandom
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|iter
init|=
literal|0
init|;
name|iter
operator|<
literal|10
operator|*
name|RANDOM_MULTIPLIER
condition|;
name|iter
operator|++
control|)
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\nTEST: iter="
operator|+
name|iter
argument_list|)
expr_stmt|;
block|}
comment|// Make new analyzer each time, because MGTF has fixed
comment|// seed:
specifier|final
name|Analyzer
name|a
init|=
operator|new
name|Analyzer
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|TokenStreamComponents
name|createComponents
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|Reader
name|reader
parameter_list|)
block|{
specifier|final
name|Tokenizer
name|t
init|=
operator|new
name|MockTokenizer
argument_list|(
name|reader
argument_list|,
name|MockTokenizer
operator|.
name|WHITESPACE
argument_list|,
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|TokenStream
name|t2
init|=
operator|new
name|MockGraphTokenFilter
argument_list|(
name|random
argument_list|,
name|t
argument_list|)
decl_stmt|;
return|return
operator|new
name|TokenStreamComponents
argument_list|(
name|t
argument_list|,
name|t2
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|checkRandomData
argument_list|(
name|random
argument_list|,
name|a
argument_list|,
literal|5
argument_list|,
name|atLeast
argument_list|(
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Two MockGraphTokenFilters
DECL|method|testDoubleMockGraphTokenFilterRandom
specifier|public
name|void
name|testDoubleMockGraphTokenFilterRandom
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|iter
init|=
literal|0
init|;
name|iter
operator|<
literal|10
operator|*
name|RANDOM_MULTIPLIER
condition|;
name|iter
operator|++
control|)
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\nTEST: iter="
operator|+
name|iter
argument_list|)
expr_stmt|;
block|}
comment|// Make new analyzer each time, because MGTF has fixed
comment|// seed:
specifier|final
name|Analyzer
name|a
init|=
operator|new
name|Analyzer
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|TokenStreamComponents
name|createComponents
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|Reader
name|reader
parameter_list|)
block|{
specifier|final
name|Tokenizer
name|t
init|=
operator|new
name|MockTokenizer
argument_list|(
name|reader
argument_list|,
name|MockTokenizer
operator|.
name|WHITESPACE
argument_list|,
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|TokenStream
name|t1
init|=
operator|new
name|MockGraphTokenFilter
argument_list|(
name|random
argument_list|,
name|t
argument_list|)
decl_stmt|;
specifier|final
name|TokenStream
name|t2
init|=
operator|new
name|MockGraphTokenFilter
argument_list|(
name|random
argument_list|,
name|t1
argument_list|)
decl_stmt|;
return|return
operator|new
name|TokenStreamComponents
argument_list|(
name|t
argument_list|,
name|t2
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|checkRandomData
argument_list|(
name|random
argument_list|,
name|a
argument_list|,
literal|5
argument_list|,
name|atLeast
argument_list|(
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testMockGraphTokenFilterBeforeHolesRandom
specifier|public
name|void
name|testMockGraphTokenFilterBeforeHolesRandom
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|iter
init|=
literal|0
init|;
name|iter
operator|<
literal|10
operator|*
name|RANDOM_MULTIPLIER
condition|;
name|iter
operator|++
control|)
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\nTEST: iter="
operator|+
name|iter
argument_list|)
expr_stmt|;
block|}
comment|// Make new analyzer each time, because MGTF has fixed
comment|// seed:
specifier|final
name|Analyzer
name|a
init|=
operator|new
name|Analyzer
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|TokenStreamComponents
name|createComponents
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|Reader
name|reader
parameter_list|)
block|{
specifier|final
name|Tokenizer
name|t
init|=
operator|new
name|MockTokenizer
argument_list|(
name|reader
argument_list|,
name|MockTokenizer
operator|.
name|WHITESPACE
argument_list|,
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|TokenStream
name|t1
init|=
operator|new
name|MockGraphTokenFilter
argument_list|(
name|random
argument_list|,
name|t
argument_list|)
decl_stmt|;
specifier|final
name|TokenStream
name|t2
init|=
operator|new
name|MockHoleInjectingTokenFilter
argument_list|(
name|random
argument_list|,
name|t1
argument_list|)
decl_stmt|;
return|return
operator|new
name|TokenStreamComponents
argument_list|(
name|t
argument_list|,
name|t2
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|checkRandomData
argument_list|(
name|random
argument_list|,
name|a
argument_list|,
literal|5
argument_list|,
name|atLeast
argument_list|(
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testMockGraphTokenFilterAfterHolesRandom
specifier|public
name|void
name|testMockGraphTokenFilterAfterHolesRandom
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|iter
init|=
literal|0
init|;
name|iter
operator|<
literal|10
operator|*
name|RANDOM_MULTIPLIER
condition|;
name|iter
operator|++
control|)
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\nTEST: iter="
operator|+
name|iter
argument_list|)
expr_stmt|;
block|}
comment|// Make new analyzer each time, because MGTF has fixed
comment|// seed:
specifier|final
name|Analyzer
name|a
init|=
operator|new
name|Analyzer
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|TokenStreamComponents
name|createComponents
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|Reader
name|reader
parameter_list|)
block|{
specifier|final
name|Tokenizer
name|t
init|=
operator|new
name|MockTokenizer
argument_list|(
name|reader
argument_list|,
name|MockTokenizer
operator|.
name|WHITESPACE
argument_list|,
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|TokenStream
name|t1
init|=
operator|new
name|MockHoleInjectingTokenFilter
argument_list|(
name|random
argument_list|,
name|t
argument_list|)
decl_stmt|;
specifier|final
name|TokenStream
name|t2
init|=
operator|new
name|MockGraphTokenFilter
argument_list|(
name|random
argument_list|,
name|t1
argument_list|)
decl_stmt|;
return|return
operator|new
name|TokenStreamComponents
argument_list|(
name|t
argument_list|,
name|t2
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|checkRandomData
argument_list|(
name|random
argument_list|,
name|a
argument_list|,
literal|5
argument_list|,
name|atLeast
argument_list|(
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class
end_unit
