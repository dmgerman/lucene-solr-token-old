begin_unit
begin_package
DECL|package|org.apache.lucene.analysis
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|CharTermAttribute
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|OffsetAttribute
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|PositionIncrementAttribute
import|;
end_import
begin_comment
comment|/**  * Simple example of a filter that seems to show some problems with LookaheadTokenFilter.  */
end_comment
begin_class
DECL|class|TrivialLookaheadFilter
specifier|final
specifier|public
class|class
name|TrivialLookaheadFilter
extends|extends
name|LookaheadTokenFilter
argument_list|<
name|TestPosition
argument_list|>
block|{
DECL|field|termAtt
specifier|private
specifier|final
name|CharTermAttribute
name|termAtt
init|=
name|addAttribute
argument_list|(
name|CharTermAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|posIncAtt
specifier|private
specifier|final
name|PositionIncrementAttribute
name|posIncAtt
init|=
name|addAttribute
argument_list|(
name|PositionIncrementAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|offsetAtt
specifier|private
specifier|final
name|OffsetAttribute
name|offsetAtt
init|=
name|addAttribute
argument_list|(
name|OffsetAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|insertUpto
specifier|private
name|int
name|insertUpto
decl_stmt|;
DECL|method|TrivialLookaheadFilter
specifier|protected
name|TrivialLookaheadFilter
parameter_list|(
name|TokenStream
name|input
parameter_list|)
block|{
name|super
argument_list|(
name|input
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|newPosition
specifier|protected
name|TestPosition
name|newPosition
parameter_list|()
block|{
return|return
operator|new
name|TestPosition
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|incrementToken
specifier|public
name|boolean
name|incrementToken
parameter_list|()
throws|throws
name|IOException
block|{
comment|// At the outset, getMaxPos is -1. So we'll peek. When we reach the end of the sentence and go to the
comment|// first token of the next sentence, maxPos will be the prev sentence's end token, and we'll go again.
if|if
condition|(
name|positions
operator|.
name|getMaxPos
argument_list|()
operator|<
name|outputPos
condition|)
block|{
name|peekSentence
argument_list|()
expr_stmt|;
block|}
return|return
name|nextToken
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|reset
specifier|public
name|void
name|reset
parameter_list|()
throws|throws
name|IOException
block|{
name|super
operator|.
name|reset
argument_list|()
expr_stmt|;
name|insertUpto
operator|=
operator|-
literal|1
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|afterPosition
specifier|protected
name|void
name|afterPosition
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|insertUpto
operator|<
name|outputPos
condition|)
block|{
name|insertToken
argument_list|()
expr_stmt|;
comment|// replace term with 'improved' term.
name|clearAttributes
argument_list|()
expr_stmt|;
name|termAtt
operator|.
name|setEmpty
argument_list|()
expr_stmt|;
name|posIncAtt
operator|.
name|setPositionIncrement
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|termAtt
operator|.
name|append
argument_list|(
name|positions
operator|.
name|get
argument_list|(
name|outputPos
argument_list|)
operator|.
name|getFact
argument_list|()
argument_list|)
expr_stmt|;
name|offsetAtt
operator|.
name|setOffset
argument_list|(
name|positions
operator|.
name|get
argument_list|(
name|outputPos
argument_list|)
operator|.
name|startOffset
argument_list|,
name|positions
operator|.
name|get
argument_list|(
name|outputPos
operator|+
literal|1
argument_list|)
operator|.
name|endOffset
argument_list|)
expr_stmt|;
name|insertUpto
operator|=
name|outputPos
expr_stmt|;
block|}
block|}
DECL|method|peekSentence
specifier|private
name|void
name|peekSentence
parameter_list|()
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|facts
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|boolean
name|haveSentence
init|=
literal|false
decl_stmt|;
do|do
block|{
if|if
condition|(
name|peekToken
argument_list|()
condition|)
block|{
name|String
name|term
init|=
operator|new
name|String
argument_list|(
name|termAtt
operator|.
name|buffer
argument_list|()
argument_list|,
literal|0
argument_list|,
name|termAtt
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|facts
operator|.
name|add
argument_list|(
name|term
operator|+
literal|"-huh?"
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"."
operator|.
name|equals
argument_list|(
name|term
argument_list|)
condition|)
block|{
name|haveSentence
operator|=
literal|true
expr_stmt|;
block|}
block|}
else|else
block|{
name|haveSentence
operator|=
literal|true
expr_stmt|;
block|}
block|}
do|while
condition|(
operator|!
name|haveSentence
condition|)
do|;
comment|// attach the (now disambiguated) analyzed tokens to the positions.
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|facts
operator|.
name|size
argument_list|()
condition|;
name|x
operator|++
control|)
block|{
comment|// sentenceTokens is just relative to sentence, positions is absolute.
name|positions
operator|.
name|get
argument_list|(
name|outputPos
operator|+
name|x
argument_list|)
operator|.
name|setFact
argument_list|(
name|facts
operator|.
name|get
argument_list|(
name|x
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class
end_unit
