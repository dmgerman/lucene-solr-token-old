begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.analysis.tokenattributes
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|AttributeImpl
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_class
DECL|class|TestBytesRefAttImpl
specifier|public
class|class
name|TestBytesRefAttImpl
extends|extends
name|LuceneTestCase
block|{
DECL|method|testCopyTo
specifier|public
name|void
name|testCopyTo
parameter_list|()
throws|throws
name|Exception
block|{
name|BytesTermAttributeImpl
name|t
init|=
operator|new
name|BytesTermAttributeImpl
argument_list|()
decl_stmt|;
name|BytesTermAttributeImpl
name|copy
init|=
name|assertCopyIsEqual
argument_list|(
name|t
argument_list|)
decl_stmt|;
comment|// first do empty
name|assertEquals
argument_list|(
name|t
operator|.
name|getBytesRef
argument_list|()
argument_list|,
name|copy
operator|.
name|getBytesRef
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|copy
operator|.
name|getBytesRef
argument_list|()
argument_list|)
expr_stmt|;
comment|// now after setting it
name|t
operator|.
name|setBytesRef
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"hello"
argument_list|)
argument_list|)
expr_stmt|;
name|copy
operator|=
name|assertCopyIsEqual
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|t
operator|.
name|getBytesRef
argument_list|()
argument_list|,
name|copy
operator|.
name|getBytesRef
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
name|t
operator|.
name|getBytesRef
argument_list|()
argument_list|,
name|copy
operator|.
name|getBytesRef
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|assertCopyIsEqual
specifier|public
specifier|static
parameter_list|<
name|T
extends|extends
name|AttributeImpl
parameter_list|>
name|T
name|assertCopyIsEqual
parameter_list|(
name|T
name|att
parameter_list|)
throws|throws
name|Exception
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|T
name|copy
init|=
operator|(
name|T
operator|)
name|att
operator|.
name|getClass
argument_list|()
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|att
operator|.
name|copyTo
argument_list|(
name|copy
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Copied instance must be equal"
argument_list|,
name|att
argument_list|,
name|copy
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Copied instance's hashcode must be equal"
argument_list|,
name|att
operator|.
name|hashCode
argument_list|()
argument_list|,
name|copy
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|copy
return|;
block|}
block|}
end_class
end_unit
