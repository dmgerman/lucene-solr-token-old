begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.codecs.compressing
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|compressing
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|ByteArrayDataInput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|ByteArrayDataOutput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|TestUtil
import|;
end_import
begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|generators
operator|.
name|RandomInts
import|;
end_import
begin_class
DECL|class|AbstractTestCompressionMode
specifier|public
specifier|abstract
class|class
name|AbstractTestCompressionMode
extends|extends
name|LuceneTestCase
block|{
DECL|field|mode
name|CompressionMode
name|mode
decl_stmt|;
DECL|method|randomArray
specifier|static
name|byte
index|[]
name|randomArray
parameter_list|()
block|{
specifier|final
name|int
name|max
init|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|4
argument_list|)
else|:
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|256
argument_list|)
decl_stmt|;
specifier|final
name|int
name|length
init|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|20
argument_list|)
else|:
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|192
operator|*
literal|1024
argument_list|)
decl_stmt|;
return|return
name|randomArray
argument_list|(
name|length
argument_list|,
name|max
argument_list|)
return|;
block|}
DECL|method|randomArray
specifier|static
name|byte
index|[]
name|randomArray
parameter_list|(
name|int
name|length
parameter_list|,
name|int
name|max
parameter_list|)
block|{
specifier|final
name|byte
index|[]
name|arr
init|=
operator|new
name|byte
index|[
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|arr
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|arr
index|[
name|i
index|]
operator|=
operator|(
name|byte
operator|)
name|RandomInts
operator|.
name|randomIntBetween
argument_list|(
name|random
argument_list|()
argument_list|,
literal|0
argument_list|,
name|max
argument_list|)
expr_stmt|;
block|}
return|return
name|arr
return|;
block|}
DECL|method|compress
name|byte
index|[]
name|compress
parameter_list|(
name|byte
index|[]
name|decompressed
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
name|Compressor
name|compressor
init|=
name|mode
operator|.
name|newCompressor
argument_list|()
decl_stmt|;
return|return
name|compress
argument_list|(
name|compressor
argument_list|,
name|decompressed
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
return|;
block|}
DECL|method|compress
specifier|static
name|byte
index|[]
name|compress
parameter_list|(
name|Compressor
name|compressor
parameter_list|,
name|byte
index|[]
name|decompressed
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|compressed
init|=
operator|new
name|byte
index|[
name|len
operator|*
literal|2
operator|+
literal|16
index|]
decl_stmt|;
comment|// should be enough
name|ByteArrayDataOutput
name|out
init|=
operator|new
name|ByteArrayDataOutput
argument_list|(
name|compressed
argument_list|)
decl_stmt|;
name|compressor
operator|.
name|compress
argument_list|(
name|decompressed
argument_list|,
name|off
argument_list|,
name|len
argument_list|,
name|out
argument_list|)
expr_stmt|;
specifier|final
name|int
name|compressedLen
init|=
name|out
operator|.
name|getPosition
argument_list|()
decl_stmt|;
return|return
name|Arrays
operator|.
name|copyOf
argument_list|(
name|compressed
argument_list|,
name|compressedLen
argument_list|)
return|;
block|}
DECL|method|decompress
name|byte
index|[]
name|decompress
parameter_list|(
name|byte
index|[]
name|compressed
parameter_list|,
name|int
name|originalLength
parameter_list|)
throws|throws
name|IOException
block|{
name|Decompressor
name|decompressor
init|=
name|mode
operator|.
name|newDecompressor
argument_list|()
decl_stmt|;
return|return
name|decompress
argument_list|(
name|decompressor
argument_list|,
name|compressed
argument_list|,
name|originalLength
argument_list|)
return|;
block|}
DECL|method|decompress
specifier|static
name|byte
index|[]
name|decompress
parameter_list|(
name|Decompressor
name|decompressor
parameter_list|,
name|byte
index|[]
name|compressed
parameter_list|,
name|int
name|originalLength
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|BytesRef
name|bytes
init|=
operator|new
name|BytesRef
argument_list|()
decl_stmt|;
name|decompressor
operator|.
name|decompress
argument_list|(
operator|new
name|ByteArrayDataInput
argument_list|(
name|compressed
argument_list|)
argument_list|,
name|originalLength
argument_list|,
literal|0
argument_list|,
name|originalLength
argument_list|,
name|bytes
argument_list|)
expr_stmt|;
return|return
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|bytes
operator|.
name|bytes
argument_list|,
name|bytes
operator|.
name|offset
argument_list|,
name|bytes
operator|.
name|offset
operator|+
name|bytes
operator|.
name|length
argument_list|)
return|;
block|}
DECL|method|decompress
name|byte
index|[]
name|decompress
parameter_list|(
name|byte
index|[]
name|compressed
parameter_list|,
name|int
name|originalLength
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
name|Decompressor
name|decompressor
init|=
name|mode
operator|.
name|newDecompressor
argument_list|()
decl_stmt|;
specifier|final
name|BytesRef
name|bytes
init|=
operator|new
name|BytesRef
argument_list|()
decl_stmt|;
name|decompressor
operator|.
name|decompress
argument_list|(
operator|new
name|ByteArrayDataInput
argument_list|(
name|compressed
argument_list|)
argument_list|,
name|originalLength
argument_list|,
name|offset
argument_list|,
name|length
argument_list|,
name|bytes
argument_list|)
expr_stmt|;
return|return
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|bytes
operator|.
name|bytes
argument_list|,
name|bytes
operator|.
name|offset
argument_list|,
name|bytes
operator|.
name|offset
operator|+
name|bytes
operator|.
name|length
argument_list|)
return|;
block|}
DECL|method|testDecompress
specifier|public
name|void
name|testDecompress
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|int
name|iterations
init|=
name|atLeast
argument_list|(
literal|10
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iterations
condition|;
operator|++
name|i
control|)
block|{
specifier|final
name|byte
index|[]
name|decompressed
init|=
name|randomArray
argument_list|()
decl_stmt|;
specifier|final
name|int
name|off
init|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
literal|0
else|:
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|0
argument_list|,
name|decompressed
operator|.
name|length
argument_list|)
decl_stmt|;
specifier|final
name|int
name|len
init|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
name|decompressed
operator|.
name|length
operator|-
name|off
else|:
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|0
argument_list|,
name|decompressed
operator|.
name|length
operator|-
name|off
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|compressed
init|=
name|compress
argument_list|(
name|decompressed
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|restored
init|=
name|decompress
argument_list|(
name|compressed
argument_list|,
name|len
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|decompressed
argument_list|,
name|off
argument_list|,
name|off
operator|+
name|len
argument_list|)
argument_list|,
name|restored
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testPartialDecompress
specifier|public
name|void
name|testPartialDecompress
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|int
name|iterations
init|=
name|atLeast
argument_list|(
literal|10
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iterations
condition|;
operator|++
name|i
control|)
block|{
specifier|final
name|byte
index|[]
name|decompressed
init|=
name|randomArray
argument_list|()
decl_stmt|;
specifier|final
name|byte
index|[]
name|compressed
init|=
name|compress
argument_list|(
name|decompressed
argument_list|,
literal|0
argument_list|,
name|decompressed
operator|.
name|length
argument_list|)
decl_stmt|;
specifier|final
name|int
name|offset
decl_stmt|,
name|length
decl_stmt|;
if|if
condition|(
name|decompressed
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|offset
operator|=
name|length
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
name|offset
operator|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|decompressed
operator|.
name|length
argument_list|)
expr_stmt|;
name|length
operator|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|decompressed
operator|.
name|length
operator|-
name|offset
argument_list|)
expr_stmt|;
block|}
specifier|final
name|byte
index|[]
name|restored
init|=
name|decompress
argument_list|(
name|compressed
argument_list|,
name|decompressed
operator|.
name|length
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|decompressed
argument_list|,
name|offset
argument_list|,
name|offset
operator|+
name|length
argument_list|)
argument_list|,
name|restored
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|test
specifier|public
name|byte
index|[]
name|test
parameter_list|(
name|byte
index|[]
name|decompressed
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|test
argument_list|(
name|decompressed
argument_list|,
literal|0
argument_list|,
name|decompressed
operator|.
name|length
argument_list|)
return|;
block|}
DECL|method|test
specifier|public
name|byte
index|[]
name|test
parameter_list|(
name|byte
index|[]
name|decompressed
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|byte
index|[]
name|compressed
init|=
name|compress
argument_list|(
name|decompressed
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|restored
init|=
name|decompress
argument_list|(
name|compressed
argument_list|,
name|len
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|len
argument_list|,
name|restored
operator|.
name|length
argument_list|)
expr_stmt|;
return|return
name|compressed
return|;
block|}
DECL|method|testEmptySequence
specifier|public
name|void
name|testEmptySequence
parameter_list|()
throws|throws
name|IOException
block|{
name|test
argument_list|(
operator|new
name|byte
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
DECL|method|testShortSequence
specifier|public
name|void
name|testShortSequence
parameter_list|()
throws|throws
name|IOException
block|{
name|test
argument_list|(
operator|new
name|byte
index|[]
block|{
operator|(
name|byte
operator|)
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|256
argument_list|)
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|testIncompressible
specifier|public
name|void
name|testIncompressible
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|byte
index|[]
name|decompressed
init|=
operator|new
name|byte
index|[
name|RandomInts
operator|.
name|randomIntBetween
argument_list|(
name|random
argument_list|()
argument_list|,
literal|20
argument_list|,
literal|256
argument_list|)
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|decompressed
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|decompressed
index|[
name|i
index|]
operator|=
operator|(
name|byte
operator|)
name|i
expr_stmt|;
block|}
name|test
argument_list|(
name|decompressed
argument_list|)
expr_stmt|;
block|}
DECL|method|testConstant
specifier|public
name|void
name|testConstant
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|byte
index|[]
name|decompressed
init|=
operator|new
name|byte
index|[
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|10000
argument_list|)
index|]
decl_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|decompressed
argument_list|,
operator|(
name|byte
operator|)
name|random
argument_list|()
operator|.
name|nextInt
argument_list|()
argument_list|)
expr_stmt|;
name|test
argument_list|(
name|decompressed
argument_list|)
expr_stmt|;
block|}
DECL|method|testLUCENE5201
specifier|public
name|void
name|testLUCENE5201
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[]
block|{
literal|14
block|,
literal|72
block|,
literal|14
block|,
literal|85
block|,
literal|3
block|,
literal|72
block|,
literal|14
block|,
literal|85
block|,
literal|3
block|,
literal|72
block|,
literal|14
block|,
literal|72
block|,
literal|14
block|,
literal|72
block|,
literal|14
block|,
literal|85
block|,
literal|3
block|,
literal|72
block|,
literal|14
block|,
literal|72
block|,
literal|14
block|,
literal|72
block|,
literal|14
block|,
literal|72
block|,
literal|14
block|,
literal|72
block|,
literal|14
block|,
literal|72
block|,
literal|14
block|,
literal|85
block|,
literal|3
block|,
literal|72
block|,
literal|14
block|,
literal|85
block|,
literal|3
block|,
literal|72
block|,
literal|14
block|,
literal|85
block|,
literal|3
block|,
literal|72
block|,
literal|14
block|,
literal|85
block|,
literal|3
block|,
literal|72
block|,
literal|14
block|,
literal|85
block|,
literal|3
block|,
literal|72
block|,
literal|14
block|,
literal|85
block|,
literal|3
block|,
literal|72
block|,
literal|14
block|,
literal|50
block|,
literal|64
block|,
literal|0
block|,
literal|46
block|,
operator|-
literal|1
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|29
block|,
literal|3
block|,
literal|85
block|,
literal|8
block|,
operator|-
literal|113
block|,
literal|0
block|,
literal|68
block|,
operator|-
literal|97
block|,
literal|3
block|,
literal|0
block|,
literal|2
block|,
literal|3
block|,
operator|-
literal|97
block|,
literal|6
block|,
literal|0
block|,
literal|68
block|,
operator|-
literal|113
block|,
literal|0
block|,
literal|2
block|,
literal|3
block|,
operator|-
literal|97
block|,
literal|6
block|,
literal|0
block|,
literal|68
block|,
operator|-
literal|113
block|,
literal|0
block|,
literal|2
block|,
literal|3
block|,
literal|85
block|,
literal|8
block|,
operator|-
literal|113
block|,
literal|0
block|,
literal|68
block|,
operator|-
literal|97
block|,
literal|3
block|,
literal|0
block|,
literal|2
block|,
literal|3
block|,
operator|-
literal|97
block|,
literal|6
block|,
literal|0
block|,
literal|68
block|,
operator|-
literal|113
block|,
literal|0
block|,
literal|2
block|,
literal|3
block|,
operator|-
literal|97
block|,
literal|6
block|,
literal|0
block|,
literal|68
block|,
operator|-
literal|113
block|,
literal|0
block|,
literal|2
block|,
literal|3
block|,
operator|-
literal|97
block|,
literal|6
block|,
literal|0
block|,
literal|68
block|,
operator|-
literal|113
block|,
literal|0
block|,
literal|2
block|,
literal|3
block|,
operator|-
literal|97
block|,
literal|6
block|,
literal|0
block|,
literal|68
block|,
operator|-
literal|113
block|,
literal|0
block|,
literal|2
block|,
literal|3
block|,
operator|-
literal|97
block|,
literal|6
block|,
literal|0
block|,
literal|68
block|,
operator|-
literal|113
block|,
literal|0
block|,
literal|2
block|,
literal|3
block|,
operator|-
literal|97
block|,
literal|6
block|,
literal|0
block|,
literal|68
block|,
operator|-
literal|113
block|,
literal|0
block|,
literal|2
block|,
literal|3
block|,
operator|-
literal|97
block|,
literal|6
block|,
literal|0
block|,
literal|68
block|,
operator|-
literal|113
block|,
literal|0
block|,
literal|2
block|,
literal|3
block|,
operator|-
literal|97
block|,
literal|6
block|,
literal|0
block|,
literal|68
block|,
operator|-
literal|113
block|,
literal|0
block|,
literal|2
block|,
literal|3
block|,
operator|-
literal|97
block|,
literal|6
block|,
literal|0
block|,
literal|68
block|,
operator|-
literal|113
block|,
literal|0
block|,
literal|2
block|,
literal|3
block|,
operator|-
literal|97
block|,
literal|6
block|,
literal|0
block|,
literal|68
block|,
operator|-
literal|113
block|,
literal|0
block|,
literal|50
block|,
literal|64
block|,
literal|0
block|,
literal|47
block|,
operator|-
literal|105
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|30
block|,
literal|3
block|,
operator|-
literal|97
block|,
literal|6
block|,
literal|0
block|,
literal|68
block|,
operator|-
literal|113
block|,
literal|0
block|,
literal|2
block|,
literal|3
block|,
operator|-
literal|97
block|,
literal|6
block|,
literal|0
block|,
literal|68
block|,
operator|-
literal|113
block|,
literal|0
block|,
literal|2
block|,
literal|3
block|,
literal|85
block|,
literal|8
block|,
operator|-
literal|113
block|,
literal|0
block|,
literal|68
block|,
operator|-
literal|97
block|,
literal|3
block|,
literal|0
block|,
literal|2
block|,
literal|3
block|,
literal|85
block|,
literal|8
block|,
operator|-
literal|113
block|,
literal|0
block|,
literal|68
block|,
operator|-
literal|97
block|,
literal|3
block|,
literal|0
block|,
literal|2
block|,
literal|3
block|,
literal|85
block|,
literal|8
block|,
operator|-
literal|113
block|,
literal|0
block|,
literal|68
block|,
operator|-
literal|97
block|,
literal|3
block|,
literal|0
block|,
literal|2
block|,
operator|-
literal|97
block|,
literal|6
block|,
literal|0
block|,
literal|2
block|,
literal|3
block|,
literal|85
block|,
literal|8
block|,
operator|-
literal|113
block|,
literal|0
block|,
literal|68
block|,
operator|-
literal|97
block|,
literal|3
block|,
literal|0
block|,
literal|2
block|,
literal|3
block|,
operator|-
literal|97
block|,
literal|6
block|,
literal|0
block|,
literal|68
block|,
operator|-
literal|113
block|,
literal|0
block|,
literal|2
block|,
literal|3
block|,
operator|-
literal|97
block|,
literal|6
block|,
literal|0
block|,
literal|68
block|,
operator|-
literal|113
block|,
literal|0
block|,
literal|120
block|,
literal|64
block|,
literal|0
block|,
literal|48
block|,
literal|4
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|31
block|,
literal|34
block|,
literal|72
block|,
literal|29
block|,
literal|72
block|,
literal|37
block|,
literal|72
block|,
literal|35
block|,
literal|72
block|,
literal|45
block|,
literal|72
block|,
literal|23
block|,
literal|72
block|,
literal|46
block|,
literal|72
block|,
literal|20
block|,
literal|72
block|,
literal|40
block|,
literal|72
block|,
literal|33
block|,
literal|72
block|,
literal|25
block|,
literal|72
block|,
literal|39
block|,
literal|72
block|,
literal|38
block|,
literal|72
block|,
literal|26
block|,
literal|72
block|,
literal|28
block|,
literal|72
block|,
literal|42
block|,
literal|72
block|,
literal|24
block|,
literal|72
block|,
literal|27
block|,
literal|72
block|,
literal|36
block|,
literal|72
block|,
literal|41
block|,
literal|72
block|,
literal|32
block|,
literal|72
block|,
literal|18
block|,
literal|72
block|,
literal|30
block|,
literal|72
block|,
literal|22
block|,
literal|72
block|,
literal|31
block|,
literal|72
block|,
literal|43
block|,
literal|72
block|,
literal|19
block|,
literal|72
block|,
literal|34
block|,
literal|72
block|,
literal|29
block|,
literal|72
block|,
literal|37
block|,
literal|72
block|,
literal|35
block|,
literal|72
block|,
literal|45
block|,
literal|72
block|,
literal|23
block|,
literal|72
block|,
literal|46
block|,
literal|72
block|,
literal|20
block|,
literal|72
block|,
literal|40
block|,
literal|72
block|,
literal|33
block|,
literal|72
block|,
literal|25
block|,
literal|72
block|,
literal|39
block|,
literal|72
block|,
literal|38
block|,
literal|72
block|,
literal|26
block|,
literal|72
block|,
literal|28
block|,
literal|72
block|,
literal|42
block|,
literal|72
block|,
literal|24
block|,
literal|72
block|,
literal|27
block|,
literal|72
block|,
literal|36
block|,
literal|72
block|,
literal|41
block|,
literal|72
block|,
literal|32
block|,
literal|72
block|,
literal|18
block|,
literal|72
block|,
literal|30
block|,
literal|72
block|,
literal|22
block|,
literal|72
block|,
literal|31
block|,
literal|72
block|,
literal|43
block|,
literal|72
block|,
literal|19
block|,
literal|72
block|,
literal|34
block|,
literal|72
block|,
literal|29
block|,
literal|72
block|,
literal|37
block|,
literal|72
block|,
literal|35
block|,
literal|72
block|,
literal|45
block|,
literal|72
block|,
literal|23
block|,
literal|72
block|,
literal|46
block|,
literal|72
block|,
literal|20
block|,
literal|72
block|,
literal|40
block|,
literal|72
block|,
literal|33
block|,
literal|72
block|,
literal|25
block|,
literal|72
block|,
literal|39
block|,
literal|72
block|,
literal|38
block|,
literal|72
block|,
literal|26
block|,
literal|72
block|,
literal|28
block|,
literal|72
block|,
literal|42
block|,
literal|72
block|,
literal|24
block|,
literal|72
block|,
literal|27
block|,
literal|72
block|,
literal|36
block|,
literal|72
block|,
literal|41
block|,
literal|72
block|,
literal|32
block|,
literal|72
block|,
literal|18
block|,
literal|16
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|39
block|,
literal|24
block|,
literal|32
block|,
literal|34
block|,
literal|124
block|,
literal|0
block|,
literal|120
block|,
literal|64
block|,
literal|0
block|,
literal|48
block|,
literal|80
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|31
block|,
literal|30
block|,
literal|72
block|,
literal|22
block|,
literal|72
block|,
literal|31
block|,
literal|72
block|,
literal|43
block|,
literal|72
block|,
literal|19
block|,
literal|72
block|,
literal|34
block|,
literal|72
block|,
literal|29
block|,
literal|72
block|,
literal|37
block|,
literal|72
block|,
literal|35
block|,
literal|72
block|,
literal|45
block|,
literal|72
block|,
literal|23
block|,
literal|72
block|,
literal|46
block|,
literal|72
block|,
literal|20
block|,
literal|72
block|,
literal|40
block|,
literal|72
block|,
literal|33
block|,
literal|72
block|,
literal|25
block|,
literal|72
block|,
literal|39
block|,
literal|72
block|,
literal|38
block|,
literal|72
block|,
literal|26
block|,
literal|72
block|,
literal|28
block|,
literal|72
block|,
literal|42
block|,
literal|72
block|,
literal|24
block|,
literal|72
block|,
literal|27
block|,
literal|72
block|,
literal|36
block|,
literal|72
block|,
literal|41
block|,
literal|72
block|,
literal|32
block|,
literal|72
block|,
literal|18
block|,
literal|72
block|,
literal|30
block|,
literal|72
block|,
literal|22
block|,
literal|72
block|,
literal|31
block|,
literal|72
block|,
literal|43
block|,
literal|72
block|,
literal|19
block|,
literal|72
block|,
literal|34
block|,
literal|72
block|,
literal|29
block|,
literal|72
block|,
literal|37
block|,
literal|72
block|,
literal|35
block|,
literal|72
block|,
literal|45
block|,
literal|72
block|,
literal|23
block|,
literal|72
block|,
literal|46
block|,
literal|72
block|,
literal|20
block|,
literal|72
block|,
literal|40
block|,
literal|72
block|,
literal|33
block|,
literal|72
block|,
literal|25
block|,
literal|72
block|,
literal|39
block|,
literal|72
block|,
literal|38
block|,
literal|72
block|,
literal|26
block|,
literal|72
block|,
literal|28
block|,
literal|72
block|,
literal|42
block|,
literal|72
block|,
literal|24
block|,
literal|72
block|,
literal|27
block|,
literal|72
block|,
literal|36
block|,
literal|72
block|,
literal|41
block|,
literal|72
block|,
literal|32
block|,
literal|72
block|,
literal|18
block|,
literal|72
block|,
literal|30
block|,
literal|72
block|,
literal|22
block|,
literal|72
block|,
literal|31
block|,
literal|72
block|,
literal|43
block|,
literal|72
block|,
literal|19
block|,
literal|72
block|,
literal|34
block|,
literal|72
block|,
literal|29
block|,
literal|72
block|,
literal|37
block|,
literal|72
block|,
literal|35
block|,
literal|72
block|,
literal|45
block|,
literal|72
block|,
literal|23
block|,
literal|72
block|,
literal|46
block|,
literal|72
block|,
literal|20
block|,
literal|72
block|,
literal|40
block|,
literal|72
block|,
literal|33
block|,
literal|72
block|,
literal|25
block|,
literal|72
block|,
literal|39
block|,
literal|72
block|,
literal|38
block|,
literal|72
block|,
literal|26
block|,
literal|72
block|,
literal|28
block|,
literal|72
block|,
literal|42
block|,
literal|72
block|,
literal|24
block|,
literal|72
block|,
literal|27
block|,
literal|72
block|,
literal|36
block|,
literal|72
block|,
literal|41
block|,
literal|72
block|,
literal|32
block|,
literal|72
block|,
literal|18
block|,
literal|72
block|,
literal|30
block|,
literal|72
block|,
literal|22
block|,
literal|72
block|,
literal|31
block|,
literal|72
block|,
literal|43
block|,
literal|72
block|,
literal|19
block|,
literal|72
block|,
literal|34
block|,
literal|72
block|,
literal|29
block|,
literal|72
block|,
literal|37
block|,
literal|72
block|,
literal|35
block|,
literal|72
block|,
literal|45
block|,
literal|72
block|,
literal|23
block|,
literal|72
block|,
literal|46
block|,
literal|72
block|,
literal|20
block|,
literal|72
block|,
literal|40
block|,
literal|72
block|,
literal|33
block|,
literal|72
block|,
literal|25
block|,
literal|72
block|,
literal|39
block|,
literal|72
block|,
literal|38
block|,
literal|72
block|,
literal|26
block|,
literal|72
block|,
literal|28
block|,
literal|72
block|,
literal|42
block|,
literal|72
block|,
literal|24
block|,
literal|72
block|,
literal|27
block|,
literal|72
block|,
literal|36
block|,
literal|72
block|,
literal|41
block|,
literal|72
block|,
literal|32
block|,
literal|72
block|,
literal|18
block|,
literal|72
block|,
literal|30
block|,
literal|72
block|,
literal|22
block|,
literal|72
block|,
literal|31
block|,
literal|72
block|,
literal|43
block|,
literal|72
block|,
literal|19
block|,
literal|72
block|,
literal|34
block|,
literal|72
block|,
literal|29
block|,
literal|72
block|,
literal|37
block|,
literal|72
block|,
literal|35
block|,
literal|72
block|,
literal|45
block|,
literal|72
block|,
literal|23
block|,
literal|72
block|,
literal|46
block|,
literal|72
block|,
literal|20
block|,
literal|72
block|,
literal|40
block|,
literal|72
block|,
literal|33
block|,
literal|72
block|,
literal|25
block|,
literal|72
block|,
literal|39
block|,
literal|72
block|,
literal|38
block|,
literal|72
block|,
literal|26
block|,
literal|72
block|,
literal|28
block|,
literal|72
block|,
literal|42
block|,
literal|72
block|,
literal|24
block|,
literal|72
block|,
literal|27
block|,
literal|72
block|,
literal|36
block|,
literal|72
block|,
literal|41
block|,
literal|72
block|,
literal|32
block|,
literal|72
block|,
literal|18
block|,
literal|72
block|,
literal|30
block|,
literal|72
block|,
literal|22
block|,
literal|72
block|,
literal|31
block|,
literal|72
block|,
literal|43
block|,
literal|72
block|,
literal|19
block|,
literal|72
block|,
literal|34
block|,
literal|72
block|,
literal|29
block|,
literal|72
block|,
literal|37
block|,
literal|72
block|,
literal|35
block|,
literal|72
block|,
literal|45
block|,
literal|72
block|,
literal|23
block|,
literal|72
block|,
literal|46
block|,
literal|72
block|,
literal|20
block|,
literal|72
block|,
literal|40
block|,
literal|72
block|,
literal|33
block|,
literal|72
block|,
literal|25
block|,
literal|72
block|,
literal|39
block|,
literal|72
block|,
literal|38
block|,
literal|72
block|,
literal|26
block|,
literal|72
block|,
literal|28
block|,
literal|72
block|,
literal|42
block|,
literal|72
block|,
literal|24
block|,
literal|72
block|,
literal|27
block|,
literal|72
block|,
literal|36
block|,
literal|72
block|,
literal|41
block|,
literal|72
block|,
literal|32
block|,
literal|72
block|,
literal|18
block|,
literal|72
block|,
literal|30
block|,
literal|72
block|,
literal|22
block|,
literal|72
block|,
literal|31
block|,
literal|72
block|,
literal|43
block|,
literal|72
block|,
literal|19
block|,
literal|72
block|,
literal|34
block|,
literal|72
block|,
literal|29
block|,
literal|72
block|,
literal|37
block|,
literal|72
block|,
literal|35
block|,
literal|72
block|,
literal|45
block|,
literal|72
block|,
literal|23
block|,
literal|72
block|,
literal|46
block|,
literal|72
block|,
literal|20
block|,
literal|72
block|,
literal|40
block|,
literal|72
block|,
literal|33
block|,
literal|72
block|,
literal|25
block|,
literal|72
block|,
literal|39
block|,
literal|72
block|,
literal|38
block|,
literal|72
block|,
literal|26
block|,
literal|72
block|,
literal|28
block|,
literal|72
block|,
literal|42
block|,
literal|72
block|,
literal|24
block|,
literal|72
block|,
literal|27
block|,
literal|72
block|,
literal|36
block|,
literal|72
block|,
literal|41
block|,
literal|72
block|,
literal|32
block|,
literal|72
block|,
literal|18
block|,
literal|72
block|,
literal|30
block|,
literal|72
block|,
literal|22
block|,
literal|72
block|,
literal|31
block|,
literal|72
block|,
literal|43
block|,
literal|72
block|,
literal|19
block|,
literal|50
block|,
literal|64
block|,
literal|0
block|,
literal|49
block|,
literal|20
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|32
block|,
literal|3
block|,
operator|-
literal|97
block|,
literal|6
block|,
literal|0
block|,
literal|68
block|,
operator|-
literal|113
block|,
literal|0
block|,
literal|2
block|,
literal|3
block|,
literal|85
block|,
literal|8
block|,
operator|-
literal|113
block|,
literal|0
block|,
literal|68
block|,
operator|-
literal|97
block|,
literal|3
block|,
literal|0
block|,
literal|2
block|,
literal|3
block|,
operator|-
literal|97
block|,
literal|6
block|,
literal|0
block|,
literal|68
block|,
operator|-
literal|113
block|,
literal|0
block|,
literal|2
block|,
literal|3
block|,
operator|-
literal|97
block|,
literal|6
block|,
literal|0
block|,
literal|68
block|,
operator|-
literal|113
block|,
literal|0
block|,
literal|2
block|,
literal|3
block|,
operator|-
literal|97
block|,
literal|6
block|,
literal|0
block|,
literal|68
block|,
operator|-
literal|113
block|,
literal|0
block|,
literal|2
block|,
literal|3
block|,
literal|85
block|,
literal|8
block|,
operator|-
literal|113
block|,
literal|0
block|,
literal|68
block|,
operator|-
literal|97
block|,
literal|3
block|,
literal|0
block|,
literal|2
block|,
literal|3
block|,
operator|-
literal|97
block|,
literal|6
block|,
literal|0
block|,
literal|68
block|,
operator|-
literal|113
block|,
literal|0
block|,
literal|2
block|,
literal|3
block|,
operator|-
literal|97
block|,
literal|6
block|,
literal|0
block|,
literal|68
block|,
operator|-
literal|113
block|,
literal|0
block|,
literal|2
block|,
literal|3
block|,
operator|-
literal|97
block|,
literal|6
block|,
literal|0
block|,
literal|68
block|,
operator|-
literal|113
block|,
literal|0
block|,
literal|2
block|,
literal|3
block|,
operator|-
literal|97
block|,
literal|6
block|,
literal|0
block|,
literal|68
block|,
operator|-
literal|113
block|,
literal|0
block|,
literal|2
block|,
literal|3
block|,
operator|-
literal|97
block|,
literal|6
block|,
literal|0
block|,
literal|68
block|,
operator|-
literal|113
block|,
literal|0
block|,
literal|2
block|,
literal|3
block|,
operator|-
literal|97
block|,
literal|6
block|,
literal|0
block|,
literal|68
block|,
operator|-
literal|113
block|,
literal|0
block|,
literal|2
block|,
literal|3
block|,
operator|-
literal|97
block|,
literal|6
block|,
literal|0
block|,
literal|50
block|,
literal|64
block|,
literal|0
block|,
literal|50
block|,
literal|53
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|34
block|,
literal|3
block|,
operator|-
literal|97
block|,
literal|6
block|,
literal|0
block|,
literal|68
block|,
operator|-
literal|113
block|,
literal|0
block|,
literal|2
block|,
literal|3
block|,
literal|85
block|,
literal|8
block|,
operator|-
literal|113
block|,
literal|0
block|,
literal|68
block|,
operator|-
literal|113
block|,
literal|0
block|,
literal|2
block|,
literal|3
block|,
operator|-
literal|97
block|,
literal|6
block|,
literal|0
block|,
literal|68
block|,
operator|-
literal|113
block|,
literal|0
block|,
literal|2
block|,
literal|3
block|,
literal|85
block|,
literal|8
block|,
operator|-
literal|113
block|,
literal|0
block|,
literal|68
block|,
operator|-
literal|113
block|,
literal|0
block|,
literal|2
block|,
literal|3
block|,
operator|-
literal|97
block|,
literal|6
block|,
literal|0
block|,
literal|68
block|,
operator|-
literal|113
block|,
literal|0
block|,
literal|2
block|,
literal|3
block|,
operator|-
literal|97
block|,
literal|6
block|,
literal|0
block|,
literal|68
block|,
operator|-
literal|113
block|,
literal|0
block|,
literal|2
block|,
literal|3
block|,
operator|-
literal|97
block|,
literal|6
block|,
literal|0
block|,
literal|68
block|,
operator|-
literal|113
block|,
literal|0
block|,
literal|2
block|,
literal|3
block|,
literal|85
block|,
literal|8
block|,
operator|-
literal|113
block|,
literal|0
block|,
literal|68
block|,
operator|-
literal|97
block|,
literal|3
block|,
literal|0
block|,
literal|2
block|,
literal|3
block|,
operator|-
literal|97
block|,
literal|6
block|,
literal|0
block|,
literal|68
block|,
operator|-
literal|113
block|,
literal|0
block|,
literal|2
block|,
literal|3
block|,
literal|85
block|,
literal|8
block|,
operator|-
literal|113
block|,
literal|0
block|,
literal|68
block|,
operator|-
literal|97
block|,
literal|3
block|,
literal|0
block|,
literal|2
block|,
literal|3
block|,
literal|85
block|,
literal|8
block|,
operator|-
literal|113
block|,
literal|0
block|,
literal|68
block|,
operator|-
literal|97
block|,
literal|3
block|,
literal|0
block|,
literal|2
block|,
literal|3
block|,
operator|-
literal|97
block|,
literal|6
block|,
literal|0
block|,
literal|68
block|,
operator|-
literal|113
block|,
literal|0
block|,
literal|2
block|,
literal|3
block|,
literal|85
block|,
literal|8
block|,
operator|-
literal|113
block|,
literal|0
block|,
literal|68
block|,
operator|-
literal|97
block|,
literal|3
block|,
literal|0
block|,
literal|2
block|,
literal|3
block|,
literal|85
block|,
literal|8
block|,
operator|-
literal|113
block|,
literal|0
block|,
literal|68
block|,
operator|-
literal|97
block|,
literal|3
block|,
literal|0
block|,
literal|2
block|,
literal|3
block|,
operator|-
literal|97
block|,
literal|6
block|,
literal|0
block|,
literal|68
block|,
operator|-
literal|113
block|,
literal|0
block|,
literal|2
block|,
literal|3
block|,
operator|-
literal|97
block|,
literal|6
block|,
literal|0
block|,
literal|68
block|,
operator|-
literal|113
block|,
literal|0
block|,
literal|2
block|,
literal|3
block|,
operator|-
literal|97
block|,
literal|6
block|,
literal|0
block|,
literal|68
block|,
operator|-
literal|113
block|,
literal|0
block|,
literal|2
block|,
literal|3
block|,
literal|85
block|,
literal|8
block|,
operator|-
literal|113
block|,
literal|0
block|,
literal|68
block|,
operator|-
literal|97
block|,
literal|3
block|,
literal|0
block|,
literal|2
block|,
literal|3
block|,
literal|85
block|,
literal|8
block|,
operator|-
literal|113
block|,
literal|0
block|,
literal|68
block|,
operator|-
literal|97
block|,
literal|3
block|,
literal|0
block|,
literal|2
block|,
literal|3
block|,
literal|85
block|,
literal|8
block|,
operator|-
literal|113
block|,
literal|0
block|,
literal|68
block|,
operator|-
literal|97
block|,
literal|3
block|,
literal|0
block|,
literal|2
block|,
literal|3
block|,
operator|-
literal|97
block|,
literal|6
block|,
literal|0
block|,
literal|50
block|,
literal|64
block|,
literal|0
block|,
literal|51
block|,
literal|85
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|36
block|,
literal|3
block|,
literal|85
block|,
literal|8
block|,
operator|-
literal|113
block|,
literal|0
block|,
literal|68
block|,
operator|-
literal|97
block|,
literal|3
block|,
literal|0
block|,
literal|2
block|,
literal|3
block|,
operator|-
literal|97
block|,
literal|6
block|,
literal|0
block|,
literal|68
block|,
operator|-
literal|113
block|,
literal|0
block|,
literal|2
block|,
literal|3
block|,
operator|-
literal|97
block|,
literal|6
block|,
literal|0
block|,
literal|68
block|,
operator|-
literal|113
block|,
literal|0
block|,
literal|2
block|,
literal|3
block|,
operator|-
literal|97
block|,
literal|6
block|,
literal|0
block|,
literal|68
block|,
operator|-
literal|113
block|,
literal|0
block|,
literal|2
block|,
literal|3
block|,
operator|-
literal|97
block|,
literal|6
block|,
literal|0
block|,
literal|68
block|,
operator|-
literal|113
block|,
literal|0
block|,
literal|2
block|,
operator|-
literal|97
block|,
literal|5
block|,
literal|0
block|,
literal|2
block|,
literal|3
block|,
literal|85
block|,
literal|8
block|,
operator|-
literal|113
block|,
literal|0
block|,
literal|68
block|,
operator|-
literal|97
block|,
literal|3
block|,
literal|0
block|,
literal|2
block|,
literal|3
block|,
operator|-
literal|97
block|,
literal|6
block|,
literal|0
block|,
literal|68
block|,
operator|-
literal|113
block|,
literal|0
block|,
literal|2
block|,
literal|3
block|,
operator|-
literal|97
block|,
literal|6
block|,
literal|0
block|,
literal|68
block|,
operator|-
literal|113
block|,
literal|0
block|,
literal|2
block|,
literal|3
block|,
operator|-
literal|97
block|,
literal|6
block|,
literal|0
block|,
literal|68
block|,
operator|-
literal|113
block|,
literal|0
block|,
literal|2
block|,
literal|3
block|,
operator|-
literal|97
block|,
literal|6
block|,
literal|0
block|,
literal|68
block|,
operator|-
literal|113
block|,
literal|0
block|,
literal|2
block|,
literal|3
block|,
operator|-
literal|97
block|,
literal|6
block|,
literal|0
block|,
literal|50
block|,
operator|-
literal|64
block|,
literal|0
block|,
literal|51
block|,
operator|-
literal|45
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|37
block|,
literal|68
block|,
operator|-
literal|113
block|,
literal|0
block|,
literal|2
block|,
literal|3
block|,
operator|-
literal|97
block|,
literal|6
block|,
literal|0
block|,
literal|68
block|,
operator|-
literal|113
block|,
literal|0
block|,
literal|2
block|,
literal|3
block|,
operator|-
literal|97
block|,
literal|6
block|,
literal|0
block|,
literal|68
block|,
operator|-
literal|113
block|,
literal|0
block|,
literal|2
block|,
literal|3
block|,
operator|-
literal|97
block|,
literal|6
block|,
literal|0
block|,
literal|68
block|,
operator|-
literal|113
block|,
literal|0
block|,
literal|2
block|,
literal|3
block|,
operator|-
literal|97
block|,
literal|6
block|,
literal|0
block|,
literal|68
block|,
operator|-
literal|113
block|,
literal|0
block|,
literal|2
block|,
literal|3
block|,
literal|85
block|,
literal|8
block|,
operator|-
literal|113
block|,
literal|0
block|,
literal|68
block|,
operator|-
literal|113
block|,
literal|0
block|,
literal|2
block|,
literal|3
block|,
operator|-
literal|97
block|,
literal|6
block|,
literal|0
block|,
literal|68
block|,
operator|-
literal|113
block|,
literal|0
block|,
literal|2
block|,
literal|3
block|,
literal|85
block|,
literal|8
block|,
operator|-
literal|113
block|,
literal|0
block|,
literal|68
block|,
operator|-
literal|97
block|,
literal|3
block|,
literal|0
block|,
literal|2
block|,
literal|3
block|,
literal|85
block|,
literal|8
block|,
operator|-
literal|113
block|,
literal|0
block|,
literal|68
block|,
operator|-
literal|97
block|,
literal|3
block|,
literal|0
block|,
literal|120
block|,
literal|64
block|,
literal|0
block|,
literal|52
block|,
operator|-
literal|88
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|39
block|,
literal|13
block|,
literal|85
block|,
literal|5
block|,
literal|72
block|,
literal|13
block|,
literal|85
block|,
literal|5
block|,
literal|72
block|,
literal|13
block|,
literal|85
block|,
literal|5
block|,
literal|72
block|,
literal|13
block|,
literal|72
block|,
literal|13
block|,
literal|85
block|,
literal|5
block|,
literal|72
block|,
literal|13
block|,
literal|85
block|,
literal|5
block|,
literal|72
block|,
literal|13
block|,
literal|85
block|,
literal|5
block|,
literal|72
block|,
literal|13
block|,
literal|85
block|,
literal|5
block|,
literal|72
block|,
literal|13
block|,
literal|72
block|,
literal|13
block|,
literal|85
block|,
literal|5
block|,
literal|72
block|,
literal|13
block|,
literal|85
block|,
literal|5
block|,
literal|72
block|,
literal|13
block|,
literal|72
block|,
literal|13
block|,
literal|72
block|,
literal|13
block|,
literal|85
block|,
literal|5
block|,
literal|72
block|,
literal|13
block|,
literal|85
block|,
literal|5
block|,
literal|72
block|,
literal|13
block|,
literal|85
block|,
literal|5
block|,
literal|72
block|,
literal|13
block|,
literal|85
block|,
literal|5
block|,
literal|72
block|,
literal|13
block|,
literal|85
block|,
literal|5
block|,
literal|72
block|,
literal|13
block|,
literal|85
block|,
literal|5
block|,
literal|72
block|,
literal|13
block|,
literal|72
block|,
literal|13
block|,
literal|72
block|,
literal|13
block|,
literal|72
block|,
literal|13
block|,
literal|85
block|,
literal|5
block|,
literal|72
block|,
literal|13
block|,
literal|85
block|,
literal|5
block|,
literal|72
block|,
literal|13
block|,
literal|72
block|,
literal|13
block|,
literal|85
block|,
literal|5
block|,
literal|72
block|,
literal|13
block|,
literal|85
block|,
literal|5
block|,
literal|72
block|,
literal|13
block|,
literal|85
block|,
literal|5
block|,
literal|72
block|,
literal|13
block|,
literal|85
block|,
literal|5
block|,
literal|72
block|,
literal|13
block|,
literal|85
block|,
literal|5
block|,
literal|72
block|,
literal|13
block|,
literal|85
block|,
literal|5
block|,
literal|72
block|,
literal|13
block|,
literal|85
block|,
literal|5
block|,
literal|72
block|,
literal|13
block|,
literal|85
block|,
literal|5
block|,
literal|72
block|,
literal|13
block|,
literal|85
block|,
literal|5
block|,
literal|72
block|,
literal|13
block|,
literal|85
block|,
literal|5
block|,
literal|72
block|,
literal|13
block|,
literal|85
block|,
literal|5
block|,
literal|72
block|,
literal|13
block|,
literal|85
block|,
literal|5
block|,
literal|72
block|,
literal|13
block|,
literal|72
block|,
literal|13
block|,
literal|72
block|,
literal|13
block|,
literal|72
block|,
literal|13
block|,
literal|85
block|,
literal|5
block|,
literal|72
block|,
literal|13
block|,
literal|85
block|,
literal|5
block|,
literal|72
block|,
literal|13
block|,
literal|85
block|,
literal|5
block|,
literal|72
block|,
literal|13
block|,
literal|72
block|,
literal|13
block|,
literal|85
block|,
literal|5
block|,
literal|72
block|,
literal|13
block|,
literal|72
block|,
literal|13
block|,
literal|85
block|,
literal|5
block|,
literal|72
block|,
literal|13
block|,
literal|72
block|,
literal|13
block|,
literal|85
block|,
literal|5
block|,
literal|72
block|,
literal|13
block|,
operator|-
literal|19
block|,
operator|-
literal|24
block|,
operator|-
literal|101
block|,
operator|-
literal|35
block|}
decl_stmt|;
name|test
argument_list|(
name|data
argument_list|,
literal|9
argument_list|,
name|data
operator|.
name|length
operator|-
literal|9
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
