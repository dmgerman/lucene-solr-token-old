begin_unit
begin_package
DECL|package|org.apache.lucene.codecs.lucene40.values
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|lucene40
operator|.
name|values
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Analyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|DocValuesConsumer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|lucene40
operator|.
name|values
operator|.
name|Bytes
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|lucene40
operator|.
name|values
operator|.
name|Floats
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|lucene40
operator|.
name|values
operator|.
name|Ints
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DocValues
operator|.
name|SortedSource
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DocValues
operator|.
name|Source
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DocValues
operator|.
name|Type
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexableField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexableFieldType
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Counter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|UnicodeUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|_TestUtil
import|;
end_import
begin_comment
comment|// TODO: some of this should be under lucene40 codec tests? is talking to codec directly?f
end_comment
begin_class
DECL|class|TestDocValues
specifier|public
class|class
name|TestDocValues
extends|extends
name|LuceneTestCase
block|{
DECL|field|COMP
specifier|private
specifier|static
specifier|final
name|Comparator
argument_list|<
name|BytesRef
argument_list|>
name|COMP
init|=
name|BytesRef
operator|.
name|getUTF8SortedAsUnicodeComparator
argument_list|()
decl_stmt|;
comment|// TODO -- for sorted test, do our own Sort of the
comment|// values and verify it's identical
DECL|method|testBytesStraight
specifier|public
name|void
name|testBytesStraight
parameter_list|()
throws|throws
name|IOException
block|{
name|runTestBytes
argument_list|(
name|Bytes
operator|.
name|Mode
operator|.
name|STRAIGHT
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|runTestBytes
argument_list|(
name|Bytes
operator|.
name|Mode
operator|.
name|STRAIGHT
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|testBytesDeref
specifier|public
name|void
name|testBytesDeref
parameter_list|()
throws|throws
name|IOException
block|{
name|runTestBytes
argument_list|(
name|Bytes
operator|.
name|Mode
operator|.
name|DEREF
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|runTestBytes
argument_list|(
name|Bytes
operator|.
name|Mode
operator|.
name|DEREF
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|testBytesSorted
specifier|public
name|void
name|testBytesSorted
parameter_list|()
throws|throws
name|IOException
block|{
name|runTestBytes
argument_list|(
name|Bytes
operator|.
name|Mode
operator|.
name|SORTED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|runTestBytes
argument_list|(
name|Bytes
operator|.
name|Mode
operator|.
name|SORTED
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|runTestBytes
specifier|public
name|void
name|runTestBytes
parameter_list|(
specifier|final
name|Bytes
operator|.
name|Mode
name|mode
parameter_list|,
specifier|final
name|boolean
name|fixedSize
parameter_list|)
throws|throws
name|IOException
block|{
name|DocValueHolder
name|valueHolder
init|=
operator|new
name|DocValueHolder
argument_list|()
decl_stmt|;
name|valueHolder
operator|.
name|comp
operator|=
name|COMP
expr_stmt|;
specifier|final
name|BytesRef
name|bytesRef
init|=
operator|new
name|BytesRef
argument_list|()
decl_stmt|;
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
specifier|final
name|Counter
name|trackBytes
init|=
name|Counter
operator|.
name|newCounter
argument_list|()
decl_stmt|;
name|DocValuesConsumer
name|w
init|=
name|Bytes
operator|.
name|getWriter
argument_list|(
name|dir
argument_list|,
literal|"test"
argument_list|,
name|mode
argument_list|,
name|fixedSize
argument_list|,
name|COMP
argument_list|,
name|trackBytes
argument_list|,
name|newIOContext
argument_list|(
name|random
argument_list|)
argument_list|,
name|random
operator|.
name|nextBoolean
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|maxDoc
init|=
literal|220
decl_stmt|;
specifier|final
name|String
index|[]
name|values
init|=
operator|new
name|String
index|[
name|maxDoc
index|]
decl_stmt|;
specifier|final
name|int
name|fixedLength
init|=
literal|1
operator|+
name|atLeast
argument_list|(
literal|50
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|String
name|s
decl_stmt|;
if|if
condition|(
name|i
operator|>
literal|0
operator|&&
name|random
operator|.
name|nextInt
argument_list|(
literal|5
argument_list|)
operator|<=
literal|2
condition|)
block|{
comment|// use prior value
name|s
operator|=
name|values
index|[
literal|2
operator|*
name|random
operator|.
name|nextInt
argument_list|(
name|i
argument_list|)
index|]
expr_stmt|;
block|}
else|else
block|{
name|s
operator|=
name|_TestUtil
operator|.
name|randomFixedByteLengthUnicodeString
argument_list|(
name|random
argument_list|,
name|fixedSize
condition|?
name|fixedLength
else|:
literal|1
operator|+
name|random
operator|.
name|nextInt
argument_list|(
literal|39
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|values
index|[
literal|2
operator|*
name|i
index|]
operator|=
name|s
expr_stmt|;
name|UnicodeUtil
operator|.
name|UTF16toUTF8
argument_list|(
name|s
argument_list|,
literal|0
argument_list|,
name|s
operator|.
name|length
argument_list|()
argument_list|,
name|bytesRef
argument_list|)
expr_stmt|;
name|valueHolder
operator|.
name|bytes
operator|=
name|bytesRef
expr_stmt|;
name|w
operator|.
name|add
argument_list|(
literal|2
operator|*
name|i
argument_list|,
name|valueHolder
argument_list|)
expr_stmt|;
block|}
name|w
operator|.
name|finish
argument_list|(
name|maxDoc
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|trackBytes
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|DocValues
name|r
init|=
name|Bytes
operator|.
name|getValues
argument_list|(
name|dir
argument_list|,
literal|"test"
argument_list|,
name|mode
argument_list|,
name|fixedSize
argument_list|,
name|maxDoc
argument_list|,
name|COMP
argument_list|,
name|newIOContext
argument_list|(
name|random
argument_list|)
argument_list|)
decl_stmt|;
comment|// Verify we can load source twice:
for|for
control|(
name|int
name|iter
init|=
literal|0
init|;
name|iter
operator|<
literal|2
condition|;
name|iter
operator|++
control|)
block|{
name|Source
name|s
decl_stmt|;
name|DocValues
operator|.
name|SortedSource
name|ss
decl_stmt|;
if|if
condition|(
name|mode
operator|==
name|Bytes
operator|.
name|Mode
operator|.
name|SORTED
condition|)
block|{
comment|// default is unicode so we can simply pass null here
name|s
operator|=
name|ss
operator|=
name|getSortedSource
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|s
operator|=
name|getSource
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|ss
operator|=
literal|null
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|int
name|idx
init|=
literal|2
operator|*
name|i
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"doc "
operator|+
name|idx
operator|+
literal|"; value="
operator|+
name|values
index|[
name|idx
index|]
argument_list|,
name|s
operator|.
name|getBytes
argument_list|(
name|idx
argument_list|,
name|bytesRef
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"doc "
operator|+
name|idx
argument_list|,
name|values
index|[
name|idx
index|]
argument_list|,
name|s
operator|.
name|getBytes
argument_list|(
name|idx
argument_list|,
name|bytesRef
argument_list|)
operator|.
name|utf8ToString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|ss
operator|!=
literal|null
condition|)
block|{
name|assertEquals
argument_list|(
literal|"doc "
operator|+
name|idx
argument_list|,
name|values
index|[
name|idx
index|]
argument_list|,
name|ss
operator|.
name|getByOrd
argument_list|(
name|ss
operator|.
name|ord
argument_list|(
name|idx
argument_list|)
argument_list|,
name|bytesRef
argument_list|)
operator|.
name|utf8ToString
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|ord
init|=
name|ss
operator|.
name|getByValue
argument_list|(
operator|new
name|BytesRef
argument_list|(
name|values
index|[
name|idx
index|]
argument_list|)
argument_list|,
operator|new
name|BytesRef
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|ord
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ss
operator|.
name|ord
argument_list|(
name|idx
argument_list|)
argument_list|,
name|ord
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Lookup random strings:
if|if
condition|(
name|mode
operator|==
name|Bytes
operator|.
name|Mode
operator|.
name|SORTED
condition|)
block|{
specifier|final
name|int
name|valueCount
init|=
name|ss
operator|.
name|getValueCount
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1000
condition|;
name|i
operator|++
control|)
block|{
name|BytesRef
name|bytesValue
init|=
operator|new
name|BytesRef
argument_list|(
name|_TestUtil
operator|.
name|randomFixedByteLengthUnicodeString
argument_list|(
name|random
argument_list|,
name|fixedSize
condition|?
name|fixedLength
else|:
literal|1
operator|+
name|random
operator|.
name|nextInt
argument_list|(
literal|39
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|ord
init|=
name|ss
operator|.
name|getByValue
argument_list|(
name|bytesValue
argument_list|,
operator|new
name|BytesRef
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ord
operator|>=
literal|0
condition|)
block|{
name|assertTrue
argument_list|(
name|bytesValue
operator|.
name|bytesEquals
argument_list|(
name|ss
operator|.
name|getByOrd
argument_list|(
name|ord
argument_list|,
name|bytesRef
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
literal|100
condition|;
name|k
operator|++
control|)
block|{
if|if
condition|(
name|bytesValue
operator|.
name|utf8ToString
argument_list|()
operator|.
name|equals
argument_list|(
name|values
index|[
literal|2
operator|*
name|k
index|]
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
name|ss
operator|.
name|ord
argument_list|(
literal|2
operator|*
name|k
argument_list|)
argument_list|,
name|ord
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
block|}
name|assertTrue
argument_list|(
name|count
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
assert|assert
name|ord
operator|<
literal|0
assert|;
name|int
name|insertIndex
init|=
operator|(
operator|-
name|ord
operator|)
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|insertIndex
operator|==
literal|0
condition|)
block|{
specifier|final
name|BytesRef
name|firstRef
init|=
name|ss
operator|.
name|getByOrd
argument_list|(
literal|1
argument_list|,
name|bytesRef
argument_list|)
decl_stmt|;
comment|// random string was before our first
name|assertTrue
argument_list|(
name|firstRef
operator|.
name|compareTo
argument_list|(
name|bytesValue
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|insertIndex
operator|==
name|valueCount
condition|)
block|{
specifier|final
name|BytesRef
name|lastRef
init|=
name|ss
operator|.
name|getByOrd
argument_list|(
name|valueCount
operator|-
literal|1
argument_list|,
name|bytesRef
argument_list|)
decl_stmt|;
comment|// random string was after our last
name|assertTrue
argument_list|(
name|lastRef
operator|.
name|compareTo
argument_list|(
name|bytesValue
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// TODO: I don't think this actually needs a deep copy?
specifier|final
name|BytesRef
name|before
init|=
name|BytesRef
operator|.
name|deepCopyOf
argument_list|(
name|ss
operator|.
name|getByOrd
argument_list|(
name|insertIndex
operator|-
literal|1
argument_list|,
name|bytesRef
argument_list|)
argument_list|)
decl_stmt|;
name|BytesRef
name|after
init|=
name|ss
operator|.
name|getByOrd
argument_list|(
name|insertIndex
argument_list|,
name|bytesRef
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|COMP
operator|.
name|compare
argument_list|(
name|before
argument_list|,
name|bytesValue
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|COMP
operator|.
name|compare
argument_list|(
name|bytesValue
argument_list|,
name|after
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testVariableIntsLimits
specifier|public
name|void
name|testVariableIntsLimits
parameter_list|()
throws|throws
name|IOException
block|{
name|long
index|[]
index|[]
name|minMax
init|=
operator|new
name|long
index|[]
index|[]
block|{
block|{
name|Long
operator|.
name|MIN_VALUE
block|,
name|Long
operator|.
name|MAX_VALUE
block|}
block|,
block|{
name|Long
operator|.
name|MIN_VALUE
operator|+
literal|1
block|,
literal|1
block|}
block|,
block|{
operator|-
literal|1
block|,
name|Long
operator|.
name|MAX_VALUE
block|}
block|,
block|{
name|Long
operator|.
name|MIN_VALUE
block|,
operator|-
literal|1
block|}
block|,
block|{
literal|1
block|,
name|Long
operator|.
name|MAX_VALUE
block|}
block|,
block|{
operator|-
literal|1
block|,
name|Long
operator|.
name|MAX_VALUE
operator|-
literal|1
block|}
block|,
block|{
name|Long
operator|.
name|MIN_VALUE
operator|+
literal|2
block|,
literal|1
block|}
block|, }
decl_stmt|;
name|Type
index|[]
name|expectedTypes
init|=
operator|new
name|Type
index|[]
block|{
name|Type
operator|.
name|FIXED_INTS_64
block|,
name|Type
operator|.
name|FIXED_INTS_64
block|,
name|Type
operator|.
name|FIXED_INTS_64
block|,
name|Type
operator|.
name|FIXED_INTS_64
block|,
name|Type
operator|.
name|VAR_INTS
block|,
name|Type
operator|.
name|VAR_INTS
block|,
name|Type
operator|.
name|VAR_INTS
block|, }
decl_stmt|;
name|DocValueHolder
name|valueHolder
init|=
operator|new
name|DocValueHolder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|minMax
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
specifier|final
name|Counter
name|trackBytes
init|=
name|Counter
operator|.
name|newCounter
argument_list|()
decl_stmt|;
name|DocValuesConsumer
name|w
init|=
name|Ints
operator|.
name|getWriter
argument_list|(
name|dir
argument_list|,
literal|"test"
argument_list|,
name|trackBytes
argument_list|,
name|Type
operator|.
name|VAR_INTS
argument_list|,
name|newIOContext
argument_list|(
name|random
argument_list|)
argument_list|)
decl_stmt|;
name|valueHolder
operator|.
name|numberValue
operator|=
name|minMax
index|[
name|i
index|]
index|[
literal|0
index|]
expr_stmt|;
name|w
operator|.
name|add
argument_list|(
literal|0
argument_list|,
name|valueHolder
argument_list|)
expr_stmt|;
name|valueHolder
operator|.
name|numberValue
operator|=
name|minMax
index|[
name|i
index|]
index|[
literal|1
index|]
expr_stmt|;
name|w
operator|.
name|add
argument_list|(
literal|1
argument_list|,
name|valueHolder
argument_list|)
expr_stmt|;
name|w
operator|.
name|finish
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|trackBytes
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|DocValues
name|r
init|=
name|Ints
operator|.
name|getValues
argument_list|(
name|dir
argument_list|,
literal|"test"
argument_list|,
literal|2
argument_list|,
name|Type
operator|.
name|VAR_INTS
argument_list|,
name|newIOContext
argument_list|(
name|random
argument_list|)
argument_list|)
decl_stmt|;
name|Source
name|source
init|=
name|getSource
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|i
operator|+
literal|" with min: "
operator|+
name|minMax
index|[
name|i
index|]
index|[
literal|0
index|]
operator|+
literal|" max: "
operator|+
name|minMax
index|[
name|i
index|]
index|[
literal|1
index|]
argument_list|,
name|expectedTypes
index|[
name|i
index|]
argument_list|,
name|source
operator|.
name|type
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|minMax
index|[
name|i
index|]
index|[
literal|0
index|]
argument_list|,
name|source
operator|.
name|getInt
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|minMax
index|[
name|i
index|]
index|[
literal|1
index|]
argument_list|,
name|source
operator|.
name|getInt
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|testVInts
specifier|public
name|void
name|testVInts
parameter_list|()
throws|throws
name|IOException
block|{
name|testInts
argument_list|(
name|Type
operator|.
name|VAR_INTS
argument_list|,
literal|63
argument_list|)
expr_stmt|;
block|}
DECL|method|testFixedInts
specifier|public
name|void
name|testFixedInts
parameter_list|()
throws|throws
name|IOException
block|{
name|testInts
argument_list|(
name|Type
operator|.
name|FIXED_INTS_64
argument_list|,
literal|63
argument_list|)
expr_stmt|;
name|testInts
argument_list|(
name|Type
operator|.
name|FIXED_INTS_32
argument_list|,
literal|31
argument_list|)
expr_stmt|;
name|testInts
argument_list|(
name|Type
operator|.
name|FIXED_INTS_16
argument_list|,
literal|15
argument_list|)
expr_stmt|;
name|testInts
argument_list|(
name|Type
operator|.
name|FIXED_INTS_8
argument_list|,
literal|7
argument_list|)
expr_stmt|;
block|}
DECL|method|testGetInt8Array
specifier|public
name|void
name|testGetInt8Array
parameter_list|()
throws|throws
name|IOException
block|{
name|DocValueHolder
name|valueHolder
init|=
operator|new
name|DocValueHolder
argument_list|()
decl_stmt|;
name|byte
index|[]
name|sourceArray
init|=
operator|new
name|byte
index|[]
block|{
literal|1
block|,
literal|2
block|,
literal|3
block|}
decl_stmt|;
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
specifier|final
name|Counter
name|trackBytes
init|=
name|Counter
operator|.
name|newCounter
argument_list|()
decl_stmt|;
name|DocValuesConsumer
name|w
init|=
name|Ints
operator|.
name|getWriter
argument_list|(
name|dir
argument_list|,
literal|"test"
argument_list|,
name|trackBytes
argument_list|,
name|Type
operator|.
name|FIXED_INTS_8
argument_list|,
name|newIOContext
argument_list|(
name|random
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sourceArray
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|valueHolder
operator|.
name|numberValue
operator|=
operator|(
name|long
operator|)
name|sourceArray
index|[
name|i
index|]
expr_stmt|;
name|w
operator|.
name|add
argument_list|(
name|i
argument_list|,
name|valueHolder
argument_list|)
expr_stmt|;
block|}
name|w
operator|.
name|finish
argument_list|(
name|sourceArray
operator|.
name|length
argument_list|)
expr_stmt|;
name|DocValues
name|r
init|=
name|Ints
operator|.
name|getValues
argument_list|(
name|dir
argument_list|,
literal|"test"
argument_list|,
name|sourceArray
operator|.
name|length
argument_list|,
name|Type
operator|.
name|FIXED_INTS_8
argument_list|,
name|newIOContext
argument_list|(
name|random
argument_list|)
argument_list|)
decl_stmt|;
name|Source
name|source
init|=
name|r
operator|.
name|getSource
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|source
operator|.
name|hasArray
argument_list|()
argument_list|)
expr_stmt|;
name|byte
index|[]
name|loaded
init|=
operator|(
operator|(
name|byte
index|[]
operator|)
name|source
operator|.
name|getArray
argument_list|()
operator|)
decl_stmt|;
name|assertEquals
argument_list|(
name|loaded
operator|.
name|length
argument_list|,
name|sourceArray
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|loaded
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
literal|"value didn't match at index "
operator|+
name|i
argument_list|,
name|sourceArray
index|[
name|i
index|]
argument_list|,
name|loaded
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testGetInt16Array
specifier|public
name|void
name|testGetInt16Array
parameter_list|()
throws|throws
name|IOException
block|{
name|DocValueHolder
name|valueHolder
init|=
operator|new
name|DocValueHolder
argument_list|()
decl_stmt|;
name|short
index|[]
name|sourceArray
init|=
operator|new
name|short
index|[]
block|{
literal|1
block|,
literal|2
block|,
literal|3
block|}
decl_stmt|;
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
specifier|final
name|Counter
name|trackBytes
init|=
name|Counter
operator|.
name|newCounter
argument_list|()
decl_stmt|;
name|DocValuesConsumer
name|w
init|=
name|Ints
operator|.
name|getWriter
argument_list|(
name|dir
argument_list|,
literal|"test"
argument_list|,
name|trackBytes
argument_list|,
name|Type
operator|.
name|FIXED_INTS_16
argument_list|,
name|newIOContext
argument_list|(
name|random
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sourceArray
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|valueHolder
operator|.
name|numberValue
operator|=
operator|(
name|long
operator|)
name|sourceArray
index|[
name|i
index|]
expr_stmt|;
name|w
operator|.
name|add
argument_list|(
name|i
argument_list|,
name|valueHolder
argument_list|)
expr_stmt|;
block|}
name|w
operator|.
name|finish
argument_list|(
name|sourceArray
operator|.
name|length
argument_list|)
expr_stmt|;
name|DocValues
name|r
init|=
name|Ints
operator|.
name|getValues
argument_list|(
name|dir
argument_list|,
literal|"test"
argument_list|,
name|sourceArray
operator|.
name|length
argument_list|,
name|Type
operator|.
name|FIXED_INTS_16
argument_list|,
name|newIOContext
argument_list|(
name|random
argument_list|)
argument_list|)
decl_stmt|;
name|Source
name|source
init|=
name|r
operator|.
name|getSource
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|source
operator|.
name|hasArray
argument_list|()
argument_list|)
expr_stmt|;
name|short
index|[]
name|loaded
init|=
operator|(
operator|(
name|short
index|[]
operator|)
name|source
operator|.
name|getArray
argument_list|()
operator|)
decl_stmt|;
name|assertEquals
argument_list|(
name|loaded
operator|.
name|length
argument_list|,
name|sourceArray
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|loaded
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
literal|"value didn't match at index "
operator|+
name|i
argument_list|,
name|sourceArray
index|[
name|i
index|]
argument_list|,
name|loaded
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testGetInt64Array
specifier|public
name|void
name|testGetInt64Array
parameter_list|()
throws|throws
name|IOException
block|{
name|DocValueHolder
name|valueHolder
init|=
operator|new
name|DocValueHolder
argument_list|()
decl_stmt|;
name|long
index|[]
name|sourceArray
init|=
operator|new
name|long
index|[]
block|{
literal|1
block|,
literal|2
block|,
literal|3
block|}
decl_stmt|;
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
specifier|final
name|Counter
name|trackBytes
init|=
name|Counter
operator|.
name|newCounter
argument_list|()
decl_stmt|;
name|DocValuesConsumer
name|w
init|=
name|Ints
operator|.
name|getWriter
argument_list|(
name|dir
argument_list|,
literal|"test"
argument_list|,
name|trackBytes
argument_list|,
name|Type
operator|.
name|FIXED_INTS_64
argument_list|,
name|newIOContext
argument_list|(
name|random
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sourceArray
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|valueHolder
operator|.
name|numberValue
operator|=
name|sourceArray
index|[
name|i
index|]
expr_stmt|;
name|w
operator|.
name|add
argument_list|(
name|i
argument_list|,
name|valueHolder
argument_list|)
expr_stmt|;
block|}
name|w
operator|.
name|finish
argument_list|(
name|sourceArray
operator|.
name|length
argument_list|)
expr_stmt|;
name|DocValues
name|r
init|=
name|Ints
operator|.
name|getValues
argument_list|(
name|dir
argument_list|,
literal|"test"
argument_list|,
name|sourceArray
operator|.
name|length
argument_list|,
name|Type
operator|.
name|FIXED_INTS_64
argument_list|,
name|newIOContext
argument_list|(
name|random
argument_list|)
argument_list|)
decl_stmt|;
name|Source
name|source
init|=
name|r
operator|.
name|getSource
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|source
operator|.
name|hasArray
argument_list|()
argument_list|)
expr_stmt|;
name|long
index|[]
name|loaded
init|=
operator|(
operator|(
name|long
index|[]
operator|)
name|source
operator|.
name|getArray
argument_list|()
operator|)
decl_stmt|;
name|assertEquals
argument_list|(
name|loaded
operator|.
name|length
argument_list|,
name|sourceArray
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|loaded
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
literal|"value didn't match at index "
operator|+
name|i
argument_list|,
name|sourceArray
index|[
name|i
index|]
argument_list|,
name|loaded
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testGetInt32Array
specifier|public
name|void
name|testGetInt32Array
parameter_list|()
throws|throws
name|IOException
block|{
name|DocValueHolder
name|valueHolder
init|=
operator|new
name|DocValueHolder
argument_list|()
decl_stmt|;
name|int
index|[]
name|sourceArray
init|=
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|2
block|,
literal|3
block|}
decl_stmt|;
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
specifier|final
name|Counter
name|trackBytes
init|=
name|Counter
operator|.
name|newCounter
argument_list|()
decl_stmt|;
name|DocValuesConsumer
name|w
init|=
name|Ints
operator|.
name|getWriter
argument_list|(
name|dir
argument_list|,
literal|"test"
argument_list|,
name|trackBytes
argument_list|,
name|Type
operator|.
name|FIXED_INTS_32
argument_list|,
name|newIOContext
argument_list|(
name|random
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sourceArray
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|valueHolder
operator|.
name|numberValue
operator|=
operator|(
name|long
operator|)
name|sourceArray
index|[
name|i
index|]
expr_stmt|;
name|w
operator|.
name|add
argument_list|(
name|i
argument_list|,
name|valueHolder
argument_list|)
expr_stmt|;
block|}
name|w
operator|.
name|finish
argument_list|(
name|sourceArray
operator|.
name|length
argument_list|)
expr_stmt|;
name|DocValues
name|r
init|=
name|Ints
operator|.
name|getValues
argument_list|(
name|dir
argument_list|,
literal|"test"
argument_list|,
name|sourceArray
operator|.
name|length
argument_list|,
name|Type
operator|.
name|FIXED_INTS_32
argument_list|,
name|newIOContext
argument_list|(
name|random
argument_list|)
argument_list|)
decl_stmt|;
name|Source
name|source
init|=
name|r
operator|.
name|getSource
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|source
operator|.
name|hasArray
argument_list|()
argument_list|)
expr_stmt|;
name|int
index|[]
name|loaded
init|=
operator|(
operator|(
name|int
index|[]
operator|)
name|source
operator|.
name|getArray
argument_list|()
operator|)
decl_stmt|;
name|assertEquals
argument_list|(
name|loaded
operator|.
name|length
argument_list|,
name|sourceArray
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|loaded
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
literal|"value didn't match at index "
operator|+
name|i
argument_list|,
name|sourceArray
index|[
name|i
index|]
argument_list|,
name|loaded
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testGetFloat32Array
specifier|public
name|void
name|testGetFloat32Array
parameter_list|()
throws|throws
name|IOException
block|{
name|DocValueHolder
name|valueHolder
init|=
operator|new
name|DocValueHolder
argument_list|()
decl_stmt|;
name|float
index|[]
name|sourceArray
init|=
operator|new
name|float
index|[]
block|{
literal|1
block|,
literal|2
block|,
literal|3
block|}
decl_stmt|;
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
specifier|final
name|Counter
name|trackBytes
init|=
name|Counter
operator|.
name|newCounter
argument_list|()
decl_stmt|;
name|DocValuesConsumer
name|w
init|=
name|Floats
operator|.
name|getWriter
argument_list|(
name|dir
argument_list|,
literal|"test"
argument_list|,
name|trackBytes
argument_list|,
name|newIOContext
argument_list|(
name|random
argument_list|)
argument_list|,
name|Type
operator|.
name|FLOAT_32
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sourceArray
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|valueHolder
operator|.
name|numberValue
operator|=
name|sourceArray
index|[
name|i
index|]
expr_stmt|;
name|w
operator|.
name|add
argument_list|(
name|i
argument_list|,
name|valueHolder
argument_list|)
expr_stmt|;
block|}
name|w
operator|.
name|finish
argument_list|(
name|sourceArray
operator|.
name|length
argument_list|)
expr_stmt|;
name|DocValues
name|r
init|=
name|Floats
operator|.
name|getValues
argument_list|(
name|dir
argument_list|,
literal|"test"
argument_list|,
literal|3
argument_list|,
name|newIOContext
argument_list|(
name|random
argument_list|)
argument_list|,
name|Type
operator|.
name|FLOAT_32
argument_list|)
decl_stmt|;
name|Source
name|source
init|=
name|r
operator|.
name|getSource
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|source
operator|.
name|hasArray
argument_list|()
argument_list|)
expr_stmt|;
name|float
index|[]
name|loaded
init|=
operator|(
operator|(
name|float
index|[]
operator|)
name|source
operator|.
name|getArray
argument_list|()
operator|)
decl_stmt|;
name|assertEquals
argument_list|(
name|loaded
operator|.
name|length
argument_list|,
name|sourceArray
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|loaded
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
literal|"value didn't match at index "
operator|+
name|i
argument_list|,
name|sourceArray
index|[
name|i
index|]
argument_list|,
name|loaded
index|[
name|i
index|]
argument_list|,
literal|0.0f
argument_list|)
expr_stmt|;
block|}
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testGetFloat64Array
specifier|public
name|void
name|testGetFloat64Array
parameter_list|()
throws|throws
name|IOException
block|{
name|DocValueHolder
name|valueHolder
init|=
operator|new
name|DocValueHolder
argument_list|()
decl_stmt|;
name|double
index|[]
name|sourceArray
init|=
operator|new
name|double
index|[]
block|{
literal|1
block|,
literal|2
block|,
literal|3
block|}
decl_stmt|;
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
specifier|final
name|Counter
name|trackBytes
init|=
name|Counter
operator|.
name|newCounter
argument_list|()
decl_stmt|;
name|DocValuesConsumer
name|w
init|=
name|Floats
operator|.
name|getWriter
argument_list|(
name|dir
argument_list|,
literal|"test"
argument_list|,
name|trackBytes
argument_list|,
name|newIOContext
argument_list|(
name|random
argument_list|)
argument_list|,
name|Type
operator|.
name|FLOAT_64
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sourceArray
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|valueHolder
operator|.
name|numberValue
operator|=
name|sourceArray
index|[
name|i
index|]
expr_stmt|;
name|w
operator|.
name|add
argument_list|(
name|i
argument_list|,
name|valueHolder
argument_list|)
expr_stmt|;
block|}
name|w
operator|.
name|finish
argument_list|(
name|sourceArray
operator|.
name|length
argument_list|)
expr_stmt|;
name|DocValues
name|r
init|=
name|Floats
operator|.
name|getValues
argument_list|(
name|dir
argument_list|,
literal|"test"
argument_list|,
literal|3
argument_list|,
name|newIOContext
argument_list|(
name|random
argument_list|)
argument_list|,
name|Type
operator|.
name|FLOAT_64
argument_list|)
decl_stmt|;
name|Source
name|source
init|=
name|r
operator|.
name|getSource
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|source
operator|.
name|hasArray
argument_list|()
argument_list|)
expr_stmt|;
name|double
index|[]
name|loaded
init|=
operator|(
operator|(
name|double
index|[]
operator|)
name|source
operator|.
name|getArray
argument_list|()
operator|)
decl_stmt|;
name|assertEquals
argument_list|(
name|loaded
operator|.
name|length
argument_list|,
name|sourceArray
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|loaded
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
literal|"value didn't match at index "
operator|+
name|i
argument_list|,
name|sourceArray
index|[
name|i
index|]
argument_list|,
name|loaded
index|[
name|i
index|]
argument_list|,
literal|0.0d
argument_list|)
expr_stmt|;
block|}
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testInts
specifier|private
name|void
name|testInts
parameter_list|(
name|Type
name|type
parameter_list|,
name|int
name|maxBit
parameter_list|)
throws|throws
name|IOException
block|{
name|DocValueHolder
name|valueHolder
init|=
operator|new
name|DocValueHolder
argument_list|()
decl_stmt|;
name|long
name|maxV
init|=
literal|1
decl_stmt|;
specifier|final
name|int
name|NUM_VALUES
init|=
literal|333
operator|+
name|random
operator|.
name|nextInt
argument_list|(
literal|333
argument_list|)
decl_stmt|;
specifier|final
name|long
index|[]
name|values
init|=
operator|new
name|long
index|[
name|NUM_VALUES
index|]
decl_stmt|;
for|for
control|(
name|int
name|rx
init|=
literal|1
init|;
name|rx
operator|<
name|maxBit
condition|;
name|rx
operator|++
operator|,
name|maxV
operator|*=
literal|2
control|)
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
specifier|final
name|Counter
name|trackBytes
init|=
name|Counter
operator|.
name|newCounter
argument_list|()
decl_stmt|;
name|DocValuesConsumer
name|w
init|=
name|Ints
operator|.
name|getWriter
argument_list|(
name|dir
argument_list|,
literal|"test"
argument_list|,
name|trackBytes
argument_list|,
name|type
argument_list|,
name|newIOContext
argument_list|(
name|random
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_VALUES
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|long
name|v
init|=
name|random
operator|.
name|nextLong
argument_list|()
operator|%
operator|(
literal|1
operator|+
name|maxV
operator|)
decl_stmt|;
name|valueHolder
operator|.
name|numberValue
operator|=
name|values
index|[
name|i
index|]
operator|=
name|v
expr_stmt|;
name|w
operator|.
name|add
argument_list|(
name|i
argument_list|,
name|valueHolder
argument_list|)
expr_stmt|;
block|}
specifier|final
name|int
name|additionalDocs
init|=
literal|1
operator|+
name|random
operator|.
name|nextInt
argument_list|(
literal|9
argument_list|)
decl_stmt|;
name|w
operator|.
name|finish
argument_list|(
name|NUM_VALUES
operator|+
name|additionalDocs
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|trackBytes
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|DocValues
name|r
init|=
name|Ints
operator|.
name|getValues
argument_list|(
name|dir
argument_list|,
literal|"test"
argument_list|,
name|NUM_VALUES
operator|+
name|additionalDocs
argument_list|,
name|type
argument_list|,
name|newIOContext
argument_list|(
name|random
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|iter
init|=
literal|0
init|;
name|iter
operator|<
literal|2
condition|;
name|iter
operator|++
control|)
block|{
name|Source
name|s
init|=
name|getSource
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|type
argument_list|,
name|s
operator|.
name|type
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_VALUES
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|long
name|v
init|=
name|s
operator|.
name|getInt
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"index "
operator|+
name|i
argument_list|,
name|values
index|[
name|i
index|]
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
block|}
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|testFloats4
specifier|public
name|void
name|testFloats4
parameter_list|()
throws|throws
name|IOException
block|{
name|runTestFloats
argument_list|(
name|Type
operator|.
name|FLOAT_32
argument_list|)
expr_stmt|;
block|}
DECL|method|runTestFloats
specifier|private
name|void
name|runTestFloats
parameter_list|(
name|Type
name|type
parameter_list|)
throws|throws
name|IOException
block|{
name|DocValueHolder
name|valueHolder
init|=
operator|new
name|DocValueHolder
argument_list|()
decl_stmt|;
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
specifier|final
name|Counter
name|trackBytes
init|=
name|Counter
operator|.
name|newCounter
argument_list|()
decl_stmt|;
name|DocValuesConsumer
name|w
init|=
name|Floats
operator|.
name|getWriter
argument_list|(
name|dir
argument_list|,
literal|"test"
argument_list|,
name|trackBytes
argument_list|,
name|newIOContext
argument_list|(
name|random
argument_list|)
argument_list|,
name|type
argument_list|)
decl_stmt|;
specifier|final
name|int
name|NUM_VALUES
init|=
literal|777
operator|+
name|random
operator|.
name|nextInt
argument_list|(
literal|777
argument_list|)
decl_stmt|;
specifier|final
name|double
index|[]
name|values
init|=
operator|new
name|double
index|[
name|NUM_VALUES
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_VALUES
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|double
name|v
init|=
name|type
operator|==
name|Type
operator|.
name|FLOAT_32
condition|?
name|random
operator|.
name|nextFloat
argument_list|()
else|:
name|random
operator|.
name|nextDouble
argument_list|()
decl_stmt|;
name|valueHolder
operator|.
name|numberValue
operator|=
name|values
index|[
name|i
index|]
operator|=
name|v
expr_stmt|;
name|w
operator|.
name|add
argument_list|(
name|i
argument_list|,
name|valueHolder
argument_list|)
expr_stmt|;
block|}
specifier|final
name|int
name|additionalValues
init|=
literal|1
operator|+
name|random
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|w
operator|.
name|finish
argument_list|(
name|NUM_VALUES
operator|+
name|additionalValues
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|trackBytes
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|DocValues
name|r
init|=
name|Floats
operator|.
name|getValues
argument_list|(
name|dir
argument_list|,
literal|"test"
argument_list|,
name|NUM_VALUES
operator|+
name|additionalValues
argument_list|,
name|newIOContext
argument_list|(
name|random
argument_list|)
argument_list|,
name|type
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|iter
init|=
literal|0
init|;
name|iter
operator|<
literal|2
condition|;
name|iter
operator|++
control|)
block|{
name|Source
name|s
init|=
name|getSource
argument_list|(
name|r
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_VALUES
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
literal|""
operator|+
name|i
argument_list|,
name|values
index|[
name|i
index|]
argument_list|,
name|s
operator|.
name|getFloat
argument_list|(
name|i
argument_list|)
argument_list|,
literal|0.0f
argument_list|)
expr_stmt|;
block|}
block|}
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testFloats8
specifier|public
name|void
name|testFloats8
parameter_list|()
throws|throws
name|IOException
block|{
name|runTestFloats
argument_list|(
name|Type
operator|.
name|FLOAT_64
argument_list|)
expr_stmt|;
block|}
DECL|method|getSource
specifier|private
name|Source
name|getSource
parameter_list|(
name|DocValues
name|values
parameter_list|)
throws|throws
name|IOException
block|{
comment|// getSource uses cache internally
switch|switch
condition|(
name|random
operator|.
name|nextInt
argument_list|(
literal|5
argument_list|)
condition|)
block|{
case|case
literal|3
case|:
return|return
name|values
operator|.
name|load
argument_list|()
return|;
case|case
literal|2
case|:
return|return
name|values
operator|.
name|getDirectSource
argument_list|()
return|;
case|case
literal|1
case|:
return|return
name|values
operator|.
name|getSource
argument_list|()
return|;
default|default:
return|return
name|values
operator|.
name|getSource
argument_list|()
return|;
block|}
block|}
DECL|method|getSortedSource
specifier|private
name|SortedSource
name|getSortedSource
parameter_list|(
name|DocValues
name|values
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getSource
argument_list|(
name|values
argument_list|)
operator|.
name|asSortedSource
argument_list|()
return|;
block|}
DECL|class|DocValueHolder
specifier|public
specifier|static
class|class
name|DocValueHolder
implements|implements
name|IndexableField
block|{
DECL|field|bytes
name|BytesRef
name|bytes
decl_stmt|;
DECL|field|numberValue
name|Number
name|numberValue
decl_stmt|;
DECL|field|comp
name|Comparator
argument_list|<
name|BytesRef
argument_list|>
name|comp
decl_stmt|;
annotation|@
name|Override
DECL|method|tokenStream
specifier|public
name|TokenStream
name|tokenStream
parameter_list|(
name|Analyzer
name|a
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|boost
specifier|public
name|float
name|boost
parameter_list|()
block|{
return|return
literal|0.0f
return|;
block|}
annotation|@
name|Override
DECL|method|name
specifier|public
name|String
name|name
parameter_list|()
block|{
return|return
literal|"test"
return|;
block|}
annotation|@
name|Override
DECL|method|binaryValue
specifier|public
name|BytesRef
name|binaryValue
parameter_list|()
block|{
return|return
name|bytes
return|;
block|}
annotation|@
name|Override
DECL|method|numericValue
specifier|public
name|Number
name|numericValue
parameter_list|()
block|{
return|return
name|numberValue
return|;
block|}
annotation|@
name|Override
DECL|method|stringValue
specifier|public
name|String
name|stringValue
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|readerValue
specifier|public
name|Reader
name|readerValue
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|fieldType
specifier|public
name|IndexableFieldType
name|fieldType
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
end_class
end_unit
