begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.codecs.lucene54
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|lucene54
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Analyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|MockAnalyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|Codec
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|DocValuesFormat
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|PostingsFormat
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|asserting
operator|.
name|AssertingCodec
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|lucene54
operator|.
name|Lucene54DocValuesProducer
operator|.
name|SparseBits
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|lucene54
operator|.
name|Lucene54DocValuesProducer
operator|.
name|SparseLongValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|BinaryDocValuesField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|NumericDocValuesField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|SortedDocValuesField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|SortedNumericDocValuesField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|SortedSetDocValuesField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|StoredField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|StringField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|BaseCompressingDocValuesFormatTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|BinaryDocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DirectoryReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriterConfig
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexableField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReaderContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|NumericDocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|RandomIndexWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SegmentReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SerialMergeScheduler
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SortedDocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SortedNumericDocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SortedSetDocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Terms
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|TermsEnum
operator|.
name|SeekStatus
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|TermsEnum
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|RAMFile
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|RAMInputStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|RAMOutputStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Bits
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRefBuilder
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LongValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|TestUtil
import|;
end_import
begin_comment
comment|/**  * Tests Lucene54DocValuesFormat  */
end_comment
begin_class
DECL|class|TestLucene54DocValuesFormat
specifier|public
class|class
name|TestLucene54DocValuesFormat
extends|extends
name|BaseCompressingDocValuesFormatTestCase
block|{
DECL|field|codec
specifier|private
specifier|final
name|Codec
name|codec
init|=
name|TestUtil
operator|.
name|alwaysDocValuesFormat
argument_list|(
operator|new
name|Lucene54DocValuesFormat
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|Override
DECL|method|getCodec
specifier|protected
name|Codec
name|getCodec
parameter_list|()
block|{
return|return
name|codec
return|;
block|}
comment|// TODO: these big methods can easily blow up some of the other ram-hungry codecs...
comment|// for now just keep them here, as we want to test this for this format.
annotation|@
name|Slow
DECL|method|testSortedSetVariableLengthBigVsStoredFields
specifier|public
name|void
name|testSortedSetVariableLengthBigVsStoredFields
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|numIterations
init|=
name|atLeast
argument_list|(
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numIterations
condition|;
name|i
operator|++
control|)
block|{
name|doTestSortedSetVsStoredFields
argument_list|(
name|atLeast
argument_list|(
literal|300
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|32766
argument_list|,
literal|16
argument_list|,
literal|100
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Nightly
DECL|method|testSortedSetVariableLengthManyVsStoredFields
specifier|public
name|void
name|testSortedSetVariableLengthManyVsStoredFields
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|numIterations
init|=
name|atLeast
argument_list|(
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numIterations
condition|;
name|i
operator|++
control|)
block|{
name|doTestSortedSetVsStoredFields
argument_list|(
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1024
argument_list|,
literal|2049
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|500
argument_list|,
literal|16
argument_list|,
literal|100
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Slow
DECL|method|testSortedVariableLengthBigVsStoredFields
specifier|public
name|void
name|testSortedVariableLengthBigVsStoredFields
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|numIterations
init|=
name|atLeast
argument_list|(
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numIterations
condition|;
name|i
operator|++
control|)
block|{
name|doTestSortedVsStoredFields
argument_list|(
name|atLeast
argument_list|(
literal|300
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|32766
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Nightly
DECL|method|testSortedVariableLengthManyVsStoredFields
specifier|public
name|void
name|testSortedVariableLengthManyVsStoredFields
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|numIterations
init|=
name|atLeast
argument_list|(
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numIterations
condition|;
name|i
operator|++
control|)
block|{
name|doTestSortedVsStoredFields
argument_list|(
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1024
argument_list|,
literal|2049
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|500
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Slow
DECL|method|testTermsEnumFixedWidth
specifier|public
name|void
name|testTermsEnumFixedWidth
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|numIterations
init|=
name|atLeast
argument_list|(
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numIterations
condition|;
name|i
operator|++
control|)
block|{
name|doTestTermsEnumRandom
argument_list|(
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1025
argument_list|,
literal|5121
argument_list|)
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Slow
DECL|method|testTermsEnumVariableWidth
specifier|public
name|void
name|testTermsEnumVariableWidth
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|numIterations
init|=
name|atLeast
argument_list|(
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numIterations
condition|;
name|i
operator|++
control|)
block|{
name|doTestTermsEnumRandom
argument_list|(
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1025
argument_list|,
literal|5121
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|500
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Nightly
DECL|method|testTermsEnumRandomMany
specifier|public
name|void
name|testTermsEnumRandomMany
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|numIterations
init|=
name|atLeast
argument_list|(
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numIterations
condition|;
name|i
operator|++
control|)
block|{
name|doTestTermsEnumRandom
argument_list|(
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1025
argument_list|,
literal|8121
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|500
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Slow
DECL|method|testSparseDocValuesVsStoredFields
specifier|public
name|void
name|testSparseDocValuesVsStoredFields
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|numIterations
init|=
name|atLeast
argument_list|(
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numIterations
condition|;
name|i
operator|++
control|)
block|{
name|doTestSparseDocValuesVsStoredFields
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|doTestSparseDocValuesVsStoredFields
specifier|private
name|void
name|doTestSparseDocValuesVsStoredFields
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|long
index|[]
name|values
init|=
operator|new
name|long
index|[
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|500
argument_list|)
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|values
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|values
index|[
name|i
index|]
operator|=
name|random
argument_list|()
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
name|Directory
name|dir
init|=
name|newFSDirectory
argument_list|(
name|createTempDir
argument_list|()
argument_list|)
decl_stmt|;
name|IndexWriterConfig
name|conf
init|=
name|newIndexWriterConfig
argument_list|(
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|conf
operator|.
name|setMergeScheduler
argument_list|(
operator|new
name|SerialMergeScheduler
argument_list|()
argument_list|)
expr_stmt|;
name|RandomIndexWriter
name|writer
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|,
name|conf
argument_list|)
decl_stmt|;
comment|// sparse compression is only enabled if less than 1% of docs have a value
specifier|final
name|int
name|avgGap
init|=
literal|100
decl_stmt|;
specifier|final
name|int
name|numDocs
init|=
name|atLeast
argument_list|(
literal|200
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|avgGap
operator|*
literal|2
argument_list|)
init|;
name|i
operator|>=
literal|0
condition|;
operator|--
name|i
control|)
block|{
name|writer
operator|.
name|addDocument
argument_list|(
operator|new
name|Document
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|final
name|int
name|maxNumValuesPerDoc
init|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
literal|1
else|:
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|2
argument_list|,
literal|5
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
operator|++
name|i
control|)
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
comment|// single-valued
name|long
name|docValue
init|=
name|values
index|[
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|values
operator|.
name|length
argument_list|)
index|]
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|NumericDocValuesField
argument_list|(
literal|"numeric"
argument_list|,
name|docValue
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|SortedDocValuesField
argument_list|(
literal|"sorted"
argument_list|,
operator|new
name|BytesRef
argument_list|(
name|Long
operator|.
name|toString
argument_list|(
name|docValue
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|BinaryDocValuesField
argument_list|(
literal|"binary"
argument_list|,
operator|new
name|BytesRef
argument_list|(
name|Long
operator|.
name|toString
argument_list|(
name|docValue
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|StoredField
argument_list|(
literal|"value"
argument_list|,
name|docValue
argument_list|)
argument_list|)
expr_stmt|;
comment|// multi-valued
specifier|final
name|int
name|numValues
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
name|maxNumValuesPerDoc
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|numValues
condition|;
operator|++
name|j
control|)
block|{
name|docValue
operator|=
name|values
index|[
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|values
operator|.
name|length
argument_list|)
index|]
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|SortedNumericDocValuesField
argument_list|(
literal|"sorted_numeric"
argument_list|,
name|docValue
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|SortedSetDocValuesField
argument_list|(
literal|"sorted_set"
argument_list|,
operator|new
name|BytesRef
argument_list|(
name|Long
operator|.
name|toString
argument_list|(
name|docValue
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|StoredField
argument_list|(
literal|"values"
argument_list|,
name|docValue
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
comment|// add a gap
for|for
control|(
name|int
name|j
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|0
argument_list|,
name|avgGap
operator|*
literal|2
argument_list|)
init|;
name|j
operator|>=
literal|0
condition|;
operator|--
name|j
control|)
block|{
name|writer
operator|.
name|addDocument
argument_list|(
operator|new
name|Document
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|writer
operator|.
name|forceMerge
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
specifier|final
name|IndexReader
name|indexReader
init|=
name|writer
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
for|for
control|(
name|LeafReaderContext
name|context
range|:
name|indexReader
operator|.
name|leaves
argument_list|()
control|)
block|{
specifier|final
name|LeafReader
name|reader
init|=
name|context
operator|.
name|reader
argument_list|()
decl_stmt|;
specifier|final
name|NumericDocValues
name|numeric
init|=
name|DocValues
operator|.
name|getNumeric
argument_list|(
name|reader
argument_list|,
literal|"numeric"
argument_list|)
decl_stmt|;
specifier|final
name|Bits
name|numericBits
init|=
name|DocValues
operator|.
name|getDocsWithField
argument_list|(
name|reader
argument_list|,
literal|"numeric"
argument_list|)
decl_stmt|;
specifier|final
name|SortedDocValues
name|sorted
init|=
name|DocValues
operator|.
name|getSorted
argument_list|(
name|reader
argument_list|,
literal|"sorted"
argument_list|)
decl_stmt|;
specifier|final
name|Bits
name|sortedBits
init|=
name|DocValues
operator|.
name|getDocsWithField
argument_list|(
name|reader
argument_list|,
literal|"sorted"
argument_list|)
decl_stmt|;
specifier|final
name|BinaryDocValues
name|binary
init|=
name|DocValues
operator|.
name|getBinary
argument_list|(
name|reader
argument_list|,
literal|"binary"
argument_list|)
decl_stmt|;
specifier|final
name|Bits
name|binaryBits
init|=
name|DocValues
operator|.
name|getDocsWithField
argument_list|(
name|reader
argument_list|,
literal|"binary"
argument_list|)
decl_stmt|;
specifier|final
name|SortedNumericDocValues
name|sortedNumeric
init|=
name|DocValues
operator|.
name|getSortedNumeric
argument_list|(
name|reader
argument_list|,
literal|"sorted_numeric"
argument_list|)
decl_stmt|;
specifier|final
name|Bits
name|sortedNumericBits
init|=
name|DocValues
operator|.
name|getDocsWithField
argument_list|(
name|reader
argument_list|,
literal|"sorted_numeric"
argument_list|)
decl_stmt|;
specifier|final
name|SortedSetDocValues
name|sortedSet
init|=
name|DocValues
operator|.
name|getSortedSet
argument_list|(
name|reader
argument_list|,
literal|"sorted_set"
argument_list|)
decl_stmt|;
specifier|final
name|Bits
name|sortedSetBits
init|=
name|DocValues
operator|.
name|getDocsWithField
argument_list|(
name|reader
argument_list|,
literal|"sorted_set"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|reader
operator|.
name|maxDoc
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|final
name|Document
name|doc
init|=
name|reader
operator|.
name|document
argument_list|(
name|i
argument_list|)
decl_stmt|;
specifier|final
name|IndexableField
name|valueField
init|=
name|doc
operator|.
name|getField
argument_list|(
literal|"value"
argument_list|)
decl_stmt|;
specifier|final
name|Long
name|value
init|=
name|valueField
operator|==
literal|null
condition|?
literal|null
else|:
name|valueField
operator|.
name|numericValue
argument_list|()
operator|.
name|longValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|numeric
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|sorted
operator|.
name|getOrd
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|BytesRef
argument_list|()
argument_list|,
name|binary
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|numericBits
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|sortedBits
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|binaryBits
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
name|value
operator|.
name|longValue
argument_list|()
argument_list|,
name|numeric
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sorted
operator|.
name|getOrd
argument_list|(
name|i
argument_list|)
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|BytesRef
argument_list|(
name|Long
operator|.
name|toString
argument_list|(
name|value
argument_list|)
argument_list|)
argument_list|,
name|sorted
operator|.
name|lookupOrd
argument_list|(
name|sorted
operator|.
name|getOrd
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|BytesRef
argument_list|(
name|Long
operator|.
name|toString
argument_list|(
name|value
argument_list|)
argument_list|)
argument_list|,
name|binary
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|numericBits
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sortedBits
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|binaryBits
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|IndexableField
index|[]
name|valuesFields
init|=
name|doc
operator|.
name|getFields
argument_list|(
literal|"values"
argument_list|)
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|Long
argument_list|>
name|valueSet
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|IndexableField
name|sf
range|:
name|valuesFields
control|)
block|{
name|valueSet
operator|.
name|add
argument_list|(
name|sf
operator|.
name|numericValue
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|sortedNumeric
operator|.
name|setDocument
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|valuesFields
operator|.
name|length
argument_list|,
name|sortedNumeric
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|sortedNumeric
operator|.
name|count
argument_list|()
condition|;
operator|++
name|j
control|)
block|{
name|assertTrue
argument_list|(
name|valueSet
operator|.
name|contains
argument_list|(
name|sortedNumeric
operator|.
name|valueAt
argument_list|(
name|j
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|sortedSet
operator|.
name|setDocument
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|int
name|sortedSetCount
init|=
literal|0
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|long
name|ord
init|=
name|sortedSet
operator|.
name|nextOrd
argument_list|()
decl_stmt|;
if|if
condition|(
name|ord
operator|==
name|SortedSetDocValues
operator|.
name|NO_MORE_ORDS
condition|)
block|{
break|break;
block|}
name|assertTrue
argument_list|(
name|valueSet
operator|.
name|contains
argument_list|(
name|Long
operator|.
name|parseLong
argument_list|(
name|sortedSet
operator|.
name|lookupOrd
argument_list|(
name|ord
argument_list|)
operator|.
name|utf8ToString
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|sortedSetCount
operator|++
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|valueSet
operator|.
name|size
argument_list|()
argument_list|,
name|sortedSetCount
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|!
name|valueSet
operator|.
name|isEmpty
argument_list|()
argument_list|,
name|sortedNumericBits
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|!
name|valueSet
operator|.
name|isEmpty
argument_list|()
argument_list|,
name|sortedSetBits
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|indexReader
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// TODO: try to refactor this and some termsenum tests into the base class.
comment|// to do this we need to fix the test class to get a DVF not a Codec so we can setup
comment|// the postings format correctly.
DECL|method|doTestTermsEnumRandom
specifier|private
name|void
name|doTestTermsEnumRandom
parameter_list|(
name|int
name|numDocs
parameter_list|,
name|int
name|minLength
parameter_list|,
name|int
name|maxLength
parameter_list|)
throws|throws
name|Exception
block|{
name|Directory
name|dir
init|=
name|newFSDirectory
argument_list|(
name|createTempDir
argument_list|()
argument_list|)
decl_stmt|;
name|IndexWriterConfig
name|conf
init|=
name|newIndexWriterConfig
argument_list|(
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|conf
operator|.
name|setMergeScheduler
argument_list|(
operator|new
name|SerialMergeScheduler
argument_list|()
argument_list|)
expr_stmt|;
comment|// set to duel against a codec which has ordinals:
specifier|final
name|PostingsFormat
name|pf
init|=
name|TestUtil
operator|.
name|getPostingsFormatWithOrds
argument_list|(
name|random
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|DocValuesFormat
name|dv
init|=
operator|new
name|Lucene54DocValuesFormat
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setCodec
argument_list|(
operator|new
name|AssertingCodec
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|PostingsFormat
name|getPostingsFormatForField
parameter_list|(
name|String
name|field
parameter_list|)
block|{
return|return
name|pf
return|;
block|}
annotation|@
name|Override
specifier|public
name|DocValuesFormat
name|getDocValuesFormatForField
parameter_list|(
name|String
name|field
parameter_list|)
block|{
return|return
name|dv
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|RandomIndexWriter
name|writer
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|,
name|conf
argument_list|)
decl_stmt|;
comment|// index some docs
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
name|i
operator|++
control|)
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|Field
name|idField
init|=
operator|new
name|StringField
argument_list|(
literal|"id"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|idField
argument_list|)
expr_stmt|;
specifier|final
name|int
name|length
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
name|minLength
argument_list|,
name|maxLength
argument_list|)
decl_stmt|;
name|int
name|numValues
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|17
argument_list|)
decl_stmt|;
comment|// create a random list of strings
name|List
argument_list|<
name|String
argument_list|>
name|values
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|v
init|=
literal|0
init|;
name|v
operator|<
name|numValues
condition|;
name|v
operator|++
control|)
block|{
name|values
operator|.
name|add
argument_list|(
name|TestUtil
operator|.
name|randomSimpleString
argument_list|(
name|random
argument_list|()
argument_list|,
name|minLength
argument_list|,
name|length
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// add in any order to the indexed field
name|ArrayList
argument_list|<
name|String
argument_list|>
name|unordered
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|values
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|shuffle
argument_list|(
name|unordered
argument_list|,
name|random
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|v
range|:
name|values
control|)
block|{
name|doc
operator|.
name|add
argument_list|(
name|newStringField
argument_list|(
literal|"indexed"
argument_list|,
name|v
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// add in any order to the dv field
name|ArrayList
argument_list|<
name|String
argument_list|>
name|unordered2
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|values
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|shuffle
argument_list|(
name|unordered2
argument_list|,
name|random
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|v
range|:
name|unordered2
control|)
block|{
name|doc
operator|.
name|add
argument_list|(
operator|new
name|SortedSetDocValuesField
argument_list|(
literal|"dv"
argument_list|,
operator|new
name|BytesRef
argument_list|(
name|v
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|31
argument_list|)
operator|==
literal|0
condition|)
block|{
name|writer
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
block|}
comment|// delete some docs
name|int
name|numDeletions
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|numDocs
operator|/
literal|10
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDeletions
condition|;
name|i
operator|++
control|)
block|{
name|int
name|id
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|numDocs
argument_list|)
decl_stmt|;
name|writer
operator|.
name|deleteDocuments
argument_list|(
operator|new
name|Term
argument_list|(
literal|"id"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|id
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// compare per-segment
name|DirectoryReader
name|ir
init|=
name|writer
operator|.
name|getReader
argument_list|()
decl_stmt|;
for|for
control|(
name|LeafReaderContext
name|context
range|:
name|ir
operator|.
name|leaves
argument_list|()
control|)
block|{
name|LeafReader
name|r
init|=
name|context
operator|.
name|reader
argument_list|()
decl_stmt|;
name|Terms
name|terms
init|=
name|r
operator|.
name|terms
argument_list|(
literal|"indexed"
argument_list|)
decl_stmt|;
if|if
condition|(
name|terms
operator|!=
literal|null
condition|)
block|{
name|SortedSetDocValues
name|ssdv
init|=
name|r
operator|.
name|getSortedSetDocValues
argument_list|(
literal|"dv"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|terms
operator|.
name|size
argument_list|()
argument_list|,
name|ssdv
operator|.
name|getValueCount
argument_list|()
argument_list|)
expr_stmt|;
name|TermsEnum
name|expected
init|=
name|terms
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|TermsEnum
name|actual
init|=
name|r
operator|.
name|getSortedSetDocValues
argument_list|(
literal|"dv"
argument_list|)
operator|.
name|termsEnum
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|terms
operator|.
name|size
argument_list|()
argument_list|,
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
name|doTestSortedSetEnumAdvanceIndependently
argument_list|(
name|ssdv
argument_list|)
expr_stmt|;
block|}
block|}
name|ir
operator|.
name|close
argument_list|()
expr_stmt|;
name|writer
operator|.
name|forceMerge
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// now compare again after the merge
name|ir
operator|=
name|writer
operator|.
name|getReader
argument_list|()
expr_stmt|;
name|LeafReader
name|ar
init|=
name|getOnlySegmentReader
argument_list|(
name|ir
argument_list|)
decl_stmt|;
name|Terms
name|terms
init|=
name|ar
operator|.
name|terms
argument_list|(
literal|"indexed"
argument_list|)
decl_stmt|;
if|if
condition|(
name|terms
operator|!=
literal|null
condition|)
block|{
name|assertEquals
argument_list|(
name|terms
operator|.
name|size
argument_list|()
argument_list|,
name|ar
operator|.
name|getSortedSetDocValues
argument_list|(
literal|"dv"
argument_list|)
operator|.
name|getValueCount
argument_list|()
argument_list|)
expr_stmt|;
name|TermsEnum
name|expected
init|=
name|terms
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|TermsEnum
name|actual
init|=
name|ar
operator|.
name|getSortedSetDocValues
argument_list|(
literal|"dv"
argument_list|)
operator|.
name|termsEnum
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|terms
operator|.
name|size
argument_list|()
argument_list|,
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
name|ir
operator|.
name|close
argument_list|()
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|assertEquals
specifier|private
name|void
name|assertEquals
parameter_list|(
name|long
name|numOrds
parameter_list|,
name|TermsEnum
name|expected
parameter_list|,
name|TermsEnum
name|actual
parameter_list|)
throws|throws
name|Exception
block|{
name|BytesRef
name|ref
decl_stmt|;
comment|// sequential next() through all terms
while|while
condition|(
operator|(
name|ref
operator|=
name|expected
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|assertEquals
argument_list|(
name|ref
argument_list|,
name|actual
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|ord
argument_list|()
argument_list|,
name|actual
operator|.
name|ord
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|term
argument_list|()
argument_list|,
name|actual
operator|.
name|term
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertNull
argument_list|(
name|actual
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
comment|// sequential seekExact(ord) through all terms
for|for
control|(
name|long
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numOrds
condition|;
name|i
operator|++
control|)
block|{
name|expected
operator|.
name|seekExact
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|actual
operator|.
name|seekExact
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|ord
argument_list|()
argument_list|,
name|actual
operator|.
name|ord
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|term
argument_list|()
argument_list|,
name|actual
operator|.
name|term
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// sequential seekExact(BytesRef) through all terms
for|for
control|(
name|long
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numOrds
condition|;
name|i
operator|++
control|)
block|{
name|expected
operator|.
name|seekExact
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|actual
operator|.
name|seekExact
argument_list|(
name|expected
operator|.
name|term
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|ord
argument_list|()
argument_list|,
name|actual
operator|.
name|ord
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|term
argument_list|()
argument_list|,
name|actual
operator|.
name|term
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// sequential seekCeil(BytesRef) through all terms
for|for
control|(
name|long
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numOrds
condition|;
name|i
operator|++
control|)
block|{
name|expected
operator|.
name|seekExact
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|SeekStatus
operator|.
name|FOUND
argument_list|,
name|actual
operator|.
name|seekCeil
argument_list|(
name|expected
operator|.
name|term
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|ord
argument_list|()
argument_list|,
name|actual
operator|.
name|ord
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|term
argument_list|()
argument_list|,
name|actual
operator|.
name|term
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// random seekExact(ord)
for|for
control|(
name|long
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numOrds
condition|;
name|i
operator|++
control|)
block|{
name|long
name|randomOrd
init|=
name|TestUtil
operator|.
name|nextLong
argument_list|(
name|random
argument_list|()
argument_list|,
literal|0
argument_list|,
name|numOrds
operator|-
literal|1
argument_list|)
decl_stmt|;
name|expected
operator|.
name|seekExact
argument_list|(
name|randomOrd
argument_list|)
expr_stmt|;
name|actual
operator|.
name|seekExact
argument_list|(
name|randomOrd
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|ord
argument_list|()
argument_list|,
name|actual
operator|.
name|ord
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|term
argument_list|()
argument_list|,
name|actual
operator|.
name|term
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// random seekExact(BytesRef)
for|for
control|(
name|long
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numOrds
condition|;
name|i
operator|++
control|)
block|{
name|long
name|randomOrd
init|=
name|TestUtil
operator|.
name|nextLong
argument_list|(
name|random
argument_list|()
argument_list|,
literal|0
argument_list|,
name|numOrds
operator|-
literal|1
argument_list|)
decl_stmt|;
name|expected
operator|.
name|seekExact
argument_list|(
name|randomOrd
argument_list|)
expr_stmt|;
name|actual
operator|.
name|seekExact
argument_list|(
name|expected
operator|.
name|term
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|ord
argument_list|()
argument_list|,
name|actual
operator|.
name|ord
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|term
argument_list|()
argument_list|,
name|actual
operator|.
name|term
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// random seekCeil(BytesRef)
for|for
control|(
name|long
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numOrds
condition|;
name|i
operator|++
control|)
block|{
name|BytesRef
name|target
init|=
operator|new
name|BytesRef
argument_list|(
name|TestUtil
operator|.
name|randomUnicodeString
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|SeekStatus
name|expectedStatus
init|=
name|expected
operator|.
name|seekCeil
argument_list|(
name|target
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedStatus
argument_list|,
name|actual
operator|.
name|seekCeil
argument_list|(
name|target
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|expectedStatus
operator|!=
name|SeekStatus
operator|.
name|END
condition|)
block|{
name|assertEquals
argument_list|(
name|expected
operator|.
name|ord
argument_list|()
argument_list|,
name|actual
operator|.
name|ord
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|term
argument_list|()
argument_list|,
name|actual
operator|.
name|term
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testSparseLongValues
specifier|public
name|void
name|testSparseLongValues
parameter_list|()
block|{
specifier|final
name|int
name|iters
init|=
name|atLeast
argument_list|(
literal|5
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|iter
init|=
literal|0
init|;
name|iter
operator|<
name|iters
condition|;
operator|++
name|iter
control|)
block|{
specifier|final
name|int
name|numDocs
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|100
argument_list|)
decl_stmt|;
specifier|final
name|long
index|[]
name|docIds
init|=
operator|new
name|long
index|[
name|numDocs
index|]
decl_stmt|;
specifier|final
name|long
index|[]
name|values
init|=
operator|new
name|long
index|[
name|numDocs
index|]
decl_stmt|;
specifier|final
name|long
name|maxDoc
decl_stmt|;
if|if
condition|(
name|numDocs
operator|==
literal|0
condition|)
block|{
name|maxDoc
operator|=
literal|1
operator|+
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|docIds
index|[
literal|0
index|]
operator|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|docIds
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|docIds
index|[
name|i
index|]
operator|=
name|docIds
index|[
name|i
operator|-
literal|1
index|]
operator|+
literal|1
operator|+
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
name|maxDoc
operator|=
name|docIds
index|[
name|numDocs
operator|-
literal|1
index|]
operator|+
literal|1
operator|+
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|values
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|values
index|[
name|i
index|]
operator|=
name|random
argument_list|()
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
specifier|final
name|long
name|missingValue
init|=
name|random
argument_list|()
operator|.
name|nextLong
argument_list|()
decl_stmt|;
specifier|final
name|LongValues
name|docIdsValues
init|=
operator|new
name|LongValues
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|long
name|get
parameter_list|(
name|long
name|index
parameter_list|)
block|{
return|return
name|docIds
index|[
name|Math
operator|.
name|toIntExact
argument_list|(
name|index
argument_list|)
index|]
return|;
block|}
block|}
decl_stmt|;
specifier|final
name|LongValues
name|valuesValues
init|=
operator|new
name|LongValues
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|long
name|get
parameter_list|(
name|long
name|index
parameter_list|)
block|{
return|return
name|values
index|[
name|Math
operator|.
name|toIntExact
argument_list|(
name|index
argument_list|)
index|]
return|;
block|}
block|}
decl_stmt|;
specifier|final
name|SparseBits
name|liveBits
init|=
operator|new
name|SparseBits
argument_list|(
name|maxDoc
argument_list|,
name|numDocs
argument_list|,
name|docIdsValues
argument_list|)
decl_stmt|;
comment|// random-access
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2000
condition|;
operator|++
name|i
control|)
block|{
specifier|final
name|long
name|docId
init|=
name|TestUtil
operator|.
name|nextLong
argument_list|(
name|random
argument_list|()
argument_list|,
literal|0
argument_list|,
name|maxDoc
operator|-
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|exists
init|=
name|liveBits
operator|.
name|get
argument_list|(
name|Math
operator|.
name|toIntExact
argument_list|(
name|docId
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|binarySearch
argument_list|(
name|docIds
argument_list|,
name|docId
argument_list|)
operator|>=
literal|0
argument_list|,
name|exists
argument_list|)
expr_stmt|;
block|}
comment|// sequential access
for|for
control|(
name|int
name|docId
init|=
literal|0
init|;
name|docId
operator|<
name|maxDoc
condition|;
name|docId
operator|+=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|3
argument_list|)
control|)
block|{
specifier|final
name|boolean
name|exists
init|=
name|liveBits
operator|.
name|get
argument_list|(
name|Math
operator|.
name|toIntExact
argument_list|(
name|docId
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|binarySearch
argument_list|(
name|docIds
argument_list|,
name|docId
argument_list|)
operator|>=
literal|0
argument_list|,
name|exists
argument_list|)
expr_stmt|;
block|}
specifier|final
name|SparseLongValues
name|sparseValues
init|=
operator|new
name|SparseLongValues
argument_list|(
name|liveBits
argument_list|,
name|valuesValues
argument_list|,
name|missingValue
argument_list|)
decl_stmt|;
comment|// random-access
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2000
condition|;
operator|++
name|i
control|)
block|{
specifier|final
name|long
name|docId
init|=
name|TestUtil
operator|.
name|nextLong
argument_list|(
name|random
argument_list|()
argument_list|,
literal|0
argument_list|,
name|maxDoc
operator|-
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|int
name|idx
init|=
name|Arrays
operator|.
name|binarySearch
argument_list|(
name|docIds
argument_list|,
name|docId
argument_list|)
decl_stmt|;
specifier|final
name|long
name|value
init|=
name|sparseValues
operator|.
name|get
argument_list|(
name|docId
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|>=
literal|0
condition|)
block|{
name|assertEquals
argument_list|(
name|values
index|[
name|idx
index|]
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
name|missingValue
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
comment|// sequential access
for|for
control|(
name|int
name|docId
init|=
literal|0
init|;
name|docId
operator|<
name|maxDoc
condition|;
name|docId
operator|+=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|3
argument_list|)
control|)
block|{
specifier|final
name|int
name|idx
init|=
name|Arrays
operator|.
name|binarySearch
argument_list|(
name|docIds
argument_list|,
name|docId
argument_list|)
decl_stmt|;
specifier|final
name|long
name|value
init|=
name|sparseValues
operator|.
name|get
argument_list|(
name|docId
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|>=
literal|0
condition|)
block|{
name|assertEquals
argument_list|(
name|values
index|[
name|idx
index|]
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
name|missingValue
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Slow
DECL|method|testSortedSetAroundBlockSize
specifier|public
name|void
name|testSortedSetAroundBlockSize
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|int
name|frontier
init|=
literal|1
operator|<<
name|Lucene54DocValuesFormat
operator|.
name|DIRECT_MONOTONIC_BLOCK_SHIFT
decl_stmt|;
for|for
control|(
name|int
name|maxDoc
init|=
name|frontier
operator|-
literal|1
init|;
name|maxDoc
operator|<=
name|frontier
operator|+
literal|1
condition|;
operator|++
name|maxDoc
control|)
block|{
specifier|final
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|w
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|newIndexWriterConfig
argument_list|()
operator|.
name|setMergePolicy
argument_list|(
name|newLogMergePolicy
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|RAMFile
name|buffer
init|=
operator|new
name|RAMFile
argument_list|()
decl_stmt|;
name|RAMOutputStream
name|out
init|=
operator|new
name|RAMOutputStream
argument_list|(
name|buffer
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|SortedSetDocValuesField
name|field1
init|=
operator|new
name|SortedSetDocValuesField
argument_list|(
literal|"sset"
argument_list|,
operator|new
name|BytesRef
argument_list|()
argument_list|)
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|field1
argument_list|)
expr_stmt|;
name|SortedSetDocValuesField
name|field2
init|=
operator|new
name|SortedSetDocValuesField
argument_list|(
literal|"sset"
argument_list|,
operator|new
name|BytesRef
argument_list|()
argument_list|)
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|field2
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|maxDoc
condition|;
operator|++
name|i
control|)
block|{
name|BytesRef
name|s1
init|=
operator|new
name|BytesRef
argument_list|(
name|TestUtil
operator|.
name|randomSimpleString
argument_list|(
name|random
argument_list|()
argument_list|,
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|BytesRef
name|s2
init|=
operator|new
name|BytesRef
argument_list|(
name|TestUtil
operator|.
name|randomSimpleString
argument_list|(
name|random
argument_list|()
argument_list|,
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|field1
operator|.
name|setBytesValue
argument_list|(
name|s1
argument_list|)
expr_stmt|;
name|field2
operator|.
name|setBytesValue
argument_list|(
name|s2
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|BytesRef
argument_list|>
name|set
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|s1
argument_list|,
name|s2
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|set
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|BytesRef
name|ref
range|:
name|set
control|)
block|{
name|out
operator|.
name|writeVInt
argument_list|(
name|ref
operator|.
name|length
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBytes
argument_list|(
name|ref
operator|.
name|bytes
argument_list|,
name|ref
operator|.
name|offset
argument_list|,
name|ref
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
block|}
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|w
operator|.
name|forceMerge
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|DirectoryReader
name|r
init|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|w
argument_list|)
decl_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|SegmentReader
name|sr
init|=
name|getOnlySegmentReader
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|maxDoc
argument_list|,
name|sr
operator|.
name|maxDoc
argument_list|()
argument_list|)
expr_stmt|;
name|SortedSetDocValues
name|values
init|=
name|sr
operator|.
name|getSortedSetDocValues
argument_list|(
literal|"sset"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|values
argument_list|)
expr_stmt|;
name|RAMInputStream
name|in
init|=
operator|new
name|RAMInputStream
argument_list|(
literal|""
argument_list|,
name|buffer
argument_list|)
decl_stmt|;
name|BytesRefBuilder
name|b
init|=
operator|new
name|BytesRefBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|maxDoc
condition|;
operator|++
name|i
control|)
block|{
name|values
operator|.
name|setDocument
argument_list|(
name|i
argument_list|)
expr_stmt|;
specifier|final
name|int
name|numValues
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|numValues
condition|;
operator|++
name|j
control|)
block|{
name|b
operator|.
name|setLength
argument_list|(
name|in
operator|.
name|readVInt
argument_list|()
argument_list|)
expr_stmt|;
name|b
operator|.
name|grow
argument_list|(
name|b
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|in
operator|.
name|readBytes
argument_list|(
name|b
operator|.
name|bytes
argument_list|()
argument_list|,
literal|0
argument_list|,
name|b
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|b
operator|.
name|get
argument_list|()
argument_list|,
name|values
operator|.
name|lookupOrd
argument_list|(
name|values
operator|.
name|nextOrd
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|SortedSetDocValues
operator|.
name|NO_MORE_ORDS
argument_list|,
name|values
operator|.
name|nextOrd
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Slow
DECL|method|testSortedNumericAroundBlockSize
specifier|public
name|void
name|testSortedNumericAroundBlockSize
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|int
name|frontier
init|=
literal|1
operator|<<
name|Lucene54DocValuesFormat
operator|.
name|DIRECT_MONOTONIC_BLOCK_SHIFT
decl_stmt|;
for|for
control|(
name|int
name|maxDoc
init|=
name|frontier
operator|-
literal|1
init|;
name|maxDoc
operator|<=
name|frontier
operator|+
literal|1
condition|;
operator|++
name|maxDoc
control|)
block|{
specifier|final
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|w
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|newIndexWriterConfig
argument_list|()
operator|.
name|setMergePolicy
argument_list|(
name|newLogMergePolicy
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|RAMFile
name|buffer
init|=
operator|new
name|RAMFile
argument_list|()
decl_stmt|;
name|RAMOutputStream
name|out
init|=
operator|new
name|RAMOutputStream
argument_list|(
name|buffer
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|SortedNumericDocValuesField
name|field1
init|=
operator|new
name|SortedNumericDocValuesField
argument_list|(
literal|"snum"
argument_list|,
literal|0L
argument_list|)
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|field1
argument_list|)
expr_stmt|;
name|SortedNumericDocValuesField
name|field2
init|=
operator|new
name|SortedNumericDocValuesField
argument_list|(
literal|"snum"
argument_list|,
literal|0L
argument_list|)
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|field2
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|maxDoc
condition|;
operator|++
name|i
control|)
block|{
name|long
name|s1
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
decl_stmt|;
name|long
name|s2
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
decl_stmt|;
name|field1
operator|.
name|setLongValue
argument_list|(
name|s1
argument_list|)
expr_stmt|;
name|field2
operator|.
name|setLongValue
argument_list|(
name|s2
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVLong
argument_list|(
name|Math
operator|.
name|min
argument_list|(
name|s1
argument_list|,
name|s2
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVLong
argument_list|(
name|Math
operator|.
name|max
argument_list|(
name|s1
argument_list|,
name|s2
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|w
operator|.
name|forceMerge
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|DirectoryReader
name|r
init|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|w
argument_list|)
decl_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|SegmentReader
name|sr
init|=
name|getOnlySegmentReader
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|maxDoc
argument_list|,
name|sr
operator|.
name|maxDoc
argument_list|()
argument_list|)
expr_stmt|;
name|SortedNumericDocValues
name|values
init|=
name|sr
operator|.
name|getSortedNumericDocValues
argument_list|(
literal|"snum"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|values
argument_list|)
expr_stmt|;
name|RAMInputStream
name|in
init|=
operator|new
name|RAMInputStream
argument_list|(
literal|""
argument_list|,
name|buffer
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|maxDoc
condition|;
operator|++
name|i
control|)
block|{
name|values
operator|.
name|setDocument
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|values
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|in
operator|.
name|readVLong
argument_list|()
argument_list|,
name|values
operator|.
name|valueAt
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|in
operator|.
name|readVLong
argument_list|()
argument_list|,
name|values
operator|.
name|valueAt
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class
end_unit
