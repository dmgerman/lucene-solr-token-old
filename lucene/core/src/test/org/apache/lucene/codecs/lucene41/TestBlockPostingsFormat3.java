begin_unit
begin_package
DECL|package|org.apache.lucene.codecs.lucene41
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|lucene41
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Analyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|MockFixedLengthPayloadFilter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|MockTokenizer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|MockVariableLengthPayloadFilter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenFilter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Tokenizer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|FieldType
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|TextField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|AtomicReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|AtomicReaderContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|FieldInfo
operator|.
name|IndexOptions
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriterConfig
operator|.
name|OpenMode
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|TermsEnum
operator|.
name|SeekStatus
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DirectoryReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DocsAndPositionsEnum
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DocsEnum
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriterConfig
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|RandomIndexWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Terms
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|TermsEnum
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|DocIdSetIterator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Bits
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|English
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|FixedBitSet
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|TestUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|TestUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|automaton
operator|.
name|AutomatonTestUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|automaton
operator|.
name|CompiledAutomaton
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|automaton
operator|.
name|RegExp
import|;
end_import
begin_comment
comment|/**   * Tests partial enumeration (only pulling a subset of the indexed data)   */
end_comment
begin_class
DECL|class|TestBlockPostingsFormat3
specifier|public
class|class
name|TestBlockPostingsFormat3
extends|extends
name|LuceneTestCase
block|{
DECL|field|MAXDOC
specifier|static
specifier|final
name|int
name|MAXDOC
init|=
name|Lucene41PostingsFormat
operator|.
name|BLOCK_SIZE
operator|*
literal|20
decl_stmt|;
comment|// creates 8 fields with different options and does "duels" of fields against each other
DECL|method|test
specifier|public
name|void
name|test
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|Analyzer
name|analyzer
init|=
operator|new
name|Analyzer
argument_list|(
name|Analyzer
operator|.
name|PER_FIELD_REUSE_STRATEGY
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|TokenStreamComponents
name|createComponents
parameter_list|(
name|String
name|fieldName
parameter_list|)
block|{
name|Tokenizer
name|tokenizer
init|=
operator|new
name|MockTokenizer
argument_list|()
decl_stmt|;
if|if
condition|(
name|fieldName
operator|.
name|contains
argument_list|(
literal|"payloadsFixed"
argument_list|)
condition|)
block|{
name|TokenFilter
name|filter
init|=
operator|new
name|MockFixedLengthPayloadFilter
argument_list|(
operator|new
name|Random
argument_list|(
literal|0
argument_list|)
argument_list|,
name|tokenizer
argument_list|,
literal|1
argument_list|)
decl_stmt|;
return|return
operator|new
name|TokenStreamComponents
argument_list|(
name|tokenizer
argument_list|,
name|filter
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|fieldName
operator|.
name|contains
argument_list|(
literal|"payloadsVariable"
argument_list|)
condition|)
block|{
name|TokenFilter
name|filter
init|=
operator|new
name|MockVariableLengthPayloadFilter
argument_list|(
operator|new
name|Random
argument_list|(
literal|0
argument_list|)
argument_list|,
name|tokenizer
argument_list|)
decl_stmt|;
return|return
operator|new
name|TokenStreamComponents
argument_list|(
name|tokenizer
argument_list|,
name|filter
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|TokenStreamComponents
argument_list|(
name|tokenizer
argument_list|)
return|;
block|}
block|}
block|}
decl_stmt|;
name|IndexWriterConfig
name|iwc
init|=
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
name|analyzer
argument_list|)
decl_stmt|;
name|iwc
operator|.
name|setCodec
argument_list|(
name|TestUtil
operator|.
name|alwaysPostingsFormat
argument_list|(
operator|new
name|Lucene41PostingsFormat
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// TODO we could actually add more fields implemented with different PFs
comment|// or, just put this test into the usual rotation?
name|RandomIndexWriter
name|iw
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|,
name|iwc
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|FieldType
name|docsOnlyType
init|=
operator|new
name|FieldType
argument_list|(
name|TextField
operator|.
name|TYPE_NOT_STORED
argument_list|)
decl_stmt|;
comment|// turn this on for a cross-check
name|docsOnlyType
operator|.
name|setStoreTermVectors
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|docsOnlyType
operator|.
name|setIndexOptions
argument_list|(
name|IndexOptions
operator|.
name|DOCS_ONLY
argument_list|)
expr_stmt|;
name|FieldType
name|docsAndFreqsType
init|=
operator|new
name|FieldType
argument_list|(
name|TextField
operator|.
name|TYPE_NOT_STORED
argument_list|)
decl_stmt|;
comment|// turn this on for a cross-check
name|docsAndFreqsType
operator|.
name|setStoreTermVectors
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|docsAndFreqsType
operator|.
name|setIndexOptions
argument_list|(
name|IndexOptions
operator|.
name|DOCS_AND_FREQS
argument_list|)
expr_stmt|;
name|FieldType
name|positionsType
init|=
operator|new
name|FieldType
argument_list|(
name|TextField
operator|.
name|TYPE_NOT_STORED
argument_list|)
decl_stmt|;
comment|// turn these on for a cross-check
name|positionsType
operator|.
name|setStoreTermVectors
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|positionsType
operator|.
name|setStoreTermVectorPositions
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|positionsType
operator|.
name|setStoreTermVectorOffsets
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|positionsType
operator|.
name|setStoreTermVectorPayloads
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|FieldType
name|offsetsType
init|=
operator|new
name|FieldType
argument_list|(
name|positionsType
argument_list|)
decl_stmt|;
name|offsetsType
operator|.
name|setIndexOptions
argument_list|(
name|IndexOptions
operator|.
name|DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS
argument_list|)
expr_stmt|;
name|Field
name|field1
init|=
operator|new
name|Field
argument_list|(
literal|"field1docs"
argument_list|,
literal|""
argument_list|,
name|docsOnlyType
argument_list|)
decl_stmt|;
name|Field
name|field2
init|=
operator|new
name|Field
argument_list|(
literal|"field2freqs"
argument_list|,
literal|""
argument_list|,
name|docsAndFreqsType
argument_list|)
decl_stmt|;
name|Field
name|field3
init|=
operator|new
name|Field
argument_list|(
literal|"field3positions"
argument_list|,
literal|""
argument_list|,
name|positionsType
argument_list|)
decl_stmt|;
name|Field
name|field4
init|=
operator|new
name|Field
argument_list|(
literal|"field4offsets"
argument_list|,
literal|""
argument_list|,
name|offsetsType
argument_list|)
decl_stmt|;
name|Field
name|field5
init|=
operator|new
name|Field
argument_list|(
literal|"field5payloadsFixed"
argument_list|,
literal|""
argument_list|,
name|positionsType
argument_list|)
decl_stmt|;
name|Field
name|field6
init|=
operator|new
name|Field
argument_list|(
literal|"field6payloadsVariable"
argument_list|,
literal|""
argument_list|,
name|positionsType
argument_list|)
decl_stmt|;
name|Field
name|field7
init|=
operator|new
name|Field
argument_list|(
literal|"field7payloadsFixedOffsets"
argument_list|,
literal|""
argument_list|,
name|offsetsType
argument_list|)
decl_stmt|;
name|Field
name|field8
init|=
operator|new
name|Field
argument_list|(
literal|"field8payloadsVariableOffsets"
argument_list|,
literal|""
argument_list|,
name|offsetsType
argument_list|)
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|field1
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|field2
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|field3
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|field4
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|field5
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|field6
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|field7
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|field8
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|MAXDOC
condition|;
name|i
operator|++
control|)
block|{
name|String
name|stringValue
init|=
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
operator|+
literal|" verycommon "
operator|+
name|English
operator|.
name|intToEnglish
argument_list|(
name|i
argument_list|)
operator|.
name|replace
argument_list|(
literal|'-'
argument_list|,
literal|' '
argument_list|)
operator|+
literal|" "
operator|+
name|TestUtil
operator|.
name|randomSimpleString
argument_list|(
name|random
argument_list|()
argument_list|)
decl_stmt|;
name|field1
operator|.
name|setStringValue
argument_list|(
name|stringValue
argument_list|)
expr_stmt|;
name|field2
operator|.
name|setStringValue
argument_list|(
name|stringValue
argument_list|)
expr_stmt|;
name|field3
operator|.
name|setStringValue
argument_list|(
name|stringValue
argument_list|)
expr_stmt|;
name|field4
operator|.
name|setStringValue
argument_list|(
name|stringValue
argument_list|)
expr_stmt|;
name|field5
operator|.
name|setStringValue
argument_list|(
name|stringValue
argument_list|)
expr_stmt|;
name|field6
operator|.
name|setStringValue
argument_list|(
name|stringValue
argument_list|)
expr_stmt|;
name|field7
operator|.
name|setStringValue
argument_list|(
name|stringValue
argument_list|)
expr_stmt|;
name|field8
operator|.
name|setStringValue
argument_list|(
name|stringValue
argument_list|)
expr_stmt|;
name|iw
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
name|iw
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|TestUtil
operator|.
name|checkIndex
argument_list|(
name|dir
argument_list|)
expr_stmt|;
comment|// for some extra coverage, checkIndex before we forceMerge
name|iwc
operator|=
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
name|analyzer
argument_list|)
expr_stmt|;
name|iwc
operator|.
name|setCodec
argument_list|(
name|TestUtil
operator|.
name|alwaysPostingsFormat
argument_list|(
operator|new
name|Lucene41PostingsFormat
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|iwc
operator|.
name|setOpenMode
argument_list|(
name|OpenMode
operator|.
name|APPEND
argument_list|)
expr_stmt|;
name|IndexWriter
name|iw2
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|iwc
argument_list|)
decl_stmt|;
name|iw2
operator|.
name|forceMerge
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|iw2
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|verify
specifier|private
name|void
name|verify
parameter_list|(
name|Directory
name|dir
parameter_list|)
throws|throws
name|Exception
block|{
name|DirectoryReader
name|ir
init|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|dir
argument_list|)
decl_stmt|;
for|for
control|(
name|AtomicReaderContext
name|leaf
range|:
name|ir
operator|.
name|leaves
argument_list|()
control|)
block|{
name|AtomicReader
name|leafReader
init|=
name|leaf
operator|.
name|reader
argument_list|()
decl_stmt|;
name|assertTerms
argument_list|(
name|leafReader
operator|.
name|terms
argument_list|(
literal|"field1docs"
argument_list|)
argument_list|,
name|leafReader
operator|.
name|terms
argument_list|(
literal|"field2freqs"
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertTerms
argument_list|(
name|leafReader
operator|.
name|terms
argument_list|(
literal|"field3positions"
argument_list|)
argument_list|,
name|leafReader
operator|.
name|terms
argument_list|(
literal|"field4offsets"
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertTerms
argument_list|(
name|leafReader
operator|.
name|terms
argument_list|(
literal|"field4offsets"
argument_list|)
argument_list|,
name|leafReader
operator|.
name|terms
argument_list|(
literal|"field5payloadsFixed"
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertTerms
argument_list|(
name|leafReader
operator|.
name|terms
argument_list|(
literal|"field5payloadsFixed"
argument_list|)
argument_list|,
name|leafReader
operator|.
name|terms
argument_list|(
literal|"field6payloadsVariable"
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertTerms
argument_list|(
name|leafReader
operator|.
name|terms
argument_list|(
literal|"field6payloadsVariable"
argument_list|)
argument_list|,
name|leafReader
operator|.
name|terms
argument_list|(
literal|"field7payloadsFixedOffsets"
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertTerms
argument_list|(
name|leafReader
operator|.
name|terms
argument_list|(
literal|"field7payloadsFixedOffsets"
argument_list|)
argument_list|,
name|leafReader
operator|.
name|terms
argument_list|(
literal|"field8payloadsVariableOffsets"
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|ir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// following code is almost an exact dup of code from TestDuelingCodecs: sorry!
DECL|method|assertTerms
specifier|public
name|void
name|assertTerms
parameter_list|(
name|Terms
name|leftTerms
parameter_list|,
name|Terms
name|rightTerms
parameter_list|,
name|boolean
name|deep
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|leftTerms
operator|==
literal|null
operator|||
name|rightTerms
operator|==
literal|null
condition|)
block|{
name|assertNull
argument_list|(
name|leftTerms
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|rightTerms
argument_list|)
expr_stmt|;
return|return;
block|}
name|assertTermsStatistics
argument_list|(
name|leftTerms
argument_list|,
name|rightTerms
argument_list|)
expr_stmt|;
comment|// NOTE: we don't assert hasOffsets/hasPositions/hasPayloads because they are allowed to be different
name|TermsEnum
name|leftTermsEnum
init|=
name|leftTerms
operator|.
name|iterator
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|TermsEnum
name|rightTermsEnum
init|=
name|rightTerms
operator|.
name|iterator
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|assertTermsEnum
argument_list|(
name|leftTermsEnum
argument_list|,
name|rightTermsEnum
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertTermsSeeking
argument_list|(
name|leftTerms
argument_list|,
name|rightTerms
argument_list|)
expr_stmt|;
if|if
condition|(
name|deep
condition|)
block|{
name|int
name|numIntersections
init|=
name|atLeast
argument_list|(
literal|3
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numIntersections
condition|;
name|i
operator|++
control|)
block|{
name|String
name|re
init|=
name|AutomatonTestUtil
operator|.
name|randomRegexp
argument_list|(
name|random
argument_list|()
argument_list|)
decl_stmt|;
name|CompiledAutomaton
name|automaton
init|=
operator|new
name|CompiledAutomaton
argument_list|(
operator|new
name|RegExp
argument_list|(
name|re
argument_list|,
name|RegExp
operator|.
name|NONE
argument_list|)
operator|.
name|toLightAutomaton
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|automaton
operator|.
name|type
operator|==
name|CompiledAutomaton
operator|.
name|AUTOMATON_TYPE
operator|.
name|NORMAL
condition|)
block|{
comment|// TODO: test start term too
name|TermsEnum
name|leftIntersection
init|=
name|leftTerms
operator|.
name|intersect
argument_list|(
name|automaton
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|TermsEnum
name|rightIntersection
init|=
name|rightTerms
operator|.
name|intersect
argument_list|(
name|automaton
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertTermsEnum
argument_list|(
name|leftIntersection
argument_list|,
name|rightIntersection
argument_list|,
name|rarely
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|assertTermsSeeking
specifier|private
name|void
name|assertTermsSeeking
parameter_list|(
name|Terms
name|leftTerms
parameter_list|,
name|Terms
name|rightTerms
parameter_list|)
throws|throws
name|Exception
block|{
name|TermsEnum
name|leftEnum
init|=
literal|null
decl_stmt|;
name|TermsEnum
name|rightEnum
init|=
literal|null
decl_stmt|;
comment|// just an upper bound
name|int
name|numTests
init|=
name|atLeast
argument_list|(
literal|20
argument_list|)
decl_stmt|;
name|Random
name|random
init|=
name|random
argument_list|()
decl_stmt|;
comment|// collect this number of terms from the left side
name|HashSet
argument_list|<
name|BytesRef
argument_list|>
name|tests
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|numPasses
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|numPasses
operator|<
literal|10
operator|&&
name|tests
operator|.
name|size
argument_list|()
operator|<
name|numTests
condition|)
block|{
name|leftEnum
operator|=
name|leftTerms
operator|.
name|iterator
argument_list|(
name|leftEnum
argument_list|)
expr_stmt|;
name|BytesRef
name|term
init|=
literal|null
decl_stmt|;
while|while
condition|(
operator|(
name|term
operator|=
name|leftEnum
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|int
name|code
init|=
name|random
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
decl_stmt|;
if|if
condition|(
name|code
operator|==
literal|0
condition|)
block|{
comment|// the term
name|tests
operator|.
name|add
argument_list|(
name|BytesRef
operator|.
name|deepCopyOf
argument_list|(
name|term
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|code
operator|==
literal|1
condition|)
block|{
comment|// truncated subsequence of term
name|term
operator|=
name|BytesRef
operator|.
name|deepCopyOf
argument_list|(
name|term
argument_list|)
expr_stmt|;
if|if
condition|(
name|term
operator|.
name|length
operator|>
literal|0
condition|)
block|{
comment|// truncate it
name|term
operator|.
name|length
operator|=
name|random
operator|.
name|nextInt
argument_list|(
name|term
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|code
operator|==
literal|2
condition|)
block|{
comment|// term, but ensure a non-zero offset
name|byte
name|newbytes
index|[]
init|=
operator|new
name|byte
index|[
name|term
operator|.
name|length
operator|+
literal|5
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|term
operator|.
name|bytes
argument_list|,
name|term
operator|.
name|offset
argument_list|,
name|newbytes
argument_list|,
literal|5
argument_list|,
name|term
operator|.
name|length
argument_list|)
expr_stmt|;
name|tests
operator|.
name|add
argument_list|(
operator|new
name|BytesRef
argument_list|(
name|newbytes
argument_list|,
literal|5
argument_list|,
name|term
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|numPasses
operator|++
expr_stmt|;
block|}
name|ArrayList
argument_list|<
name|BytesRef
argument_list|>
name|shuffledTests
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|tests
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|shuffle
argument_list|(
name|shuffledTests
argument_list|,
name|random
argument_list|)
expr_stmt|;
for|for
control|(
name|BytesRef
name|b
range|:
name|shuffledTests
control|)
block|{
name|leftEnum
operator|=
name|leftTerms
operator|.
name|iterator
argument_list|(
name|leftEnum
argument_list|)
expr_stmt|;
name|rightEnum
operator|=
name|rightTerms
operator|.
name|iterator
argument_list|(
name|rightEnum
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|leftEnum
operator|.
name|seekExact
argument_list|(
name|b
argument_list|)
argument_list|,
name|rightEnum
operator|.
name|seekExact
argument_list|(
name|b
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|leftEnum
operator|.
name|seekExact
argument_list|(
name|b
argument_list|)
argument_list|,
name|rightEnum
operator|.
name|seekExact
argument_list|(
name|b
argument_list|)
argument_list|)
expr_stmt|;
name|SeekStatus
name|leftStatus
decl_stmt|;
name|SeekStatus
name|rightStatus
decl_stmt|;
name|leftStatus
operator|=
name|leftEnum
operator|.
name|seekCeil
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|rightStatus
operator|=
name|rightEnum
operator|.
name|seekCeil
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|leftStatus
argument_list|,
name|rightStatus
argument_list|)
expr_stmt|;
if|if
condition|(
name|leftStatus
operator|!=
name|SeekStatus
operator|.
name|END
condition|)
block|{
name|assertEquals
argument_list|(
name|leftEnum
operator|.
name|term
argument_list|()
argument_list|,
name|rightEnum
operator|.
name|term
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|leftStatus
operator|=
name|leftEnum
operator|.
name|seekCeil
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|rightStatus
operator|=
name|rightEnum
operator|.
name|seekCeil
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|leftStatus
argument_list|,
name|rightStatus
argument_list|)
expr_stmt|;
if|if
condition|(
name|leftStatus
operator|!=
name|SeekStatus
operator|.
name|END
condition|)
block|{
name|assertEquals
argument_list|(
name|leftEnum
operator|.
name|term
argument_list|()
argument_list|,
name|rightEnum
operator|.
name|term
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**     * checks collection-level statistics on Terms     */
DECL|method|assertTermsStatistics
specifier|public
name|void
name|assertTermsStatistics
parameter_list|(
name|Terms
name|leftTerms
parameter_list|,
name|Terms
name|rightTerms
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|leftTerms
operator|.
name|getDocCount
argument_list|()
operator|!=
operator|-
literal|1
operator|&&
name|rightTerms
operator|.
name|getDocCount
argument_list|()
operator|!=
operator|-
literal|1
condition|)
block|{
name|assertEquals
argument_list|(
name|leftTerms
operator|.
name|getDocCount
argument_list|()
argument_list|,
name|rightTerms
operator|.
name|getDocCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|leftTerms
operator|.
name|getSumDocFreq
argument_list|()
operator|!=
operator|-
literal|1
operator|&&
name|rightTerms
operator|.
name|getSumDocFreq
argument_list|()
operator|!=
operator|-
literal|1
condition|)
block|{
name|assertEquals
argument_list|(
name|leftTerms
operator|.
name|getSumDocFreq
argument_list|()
argument_list|,
name|rightTerms
operator|.
name|getSumDocFreq
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|leftTerms
operator|.
name|getSumTotalTermFreq
argument_list|()
operator|!=
operator|-
literal|1
operator|&&
name|rightTerms
operator|.
name|getSumTotalTermFreq
argument_list|()
operator|!=
operator|-
literal|1
condition|)
block|{
name|assertEquals
argument_list|(
name|leftTerms
operator|.
name|getSumTotalTermFreq
argument_list|()
argument_list|,
name|rightTerms
operator|.
name|getSumTotalTermFreq
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|leftTerms
operator|.
name|size
argument_list|()
operator|!=
operator|-
literal|1
operator|&&
name|rightTerms
operator|.
name|size
argument_list|()
operator|!=
operator|-
literal|1
condition|)
block|{
name|assertEquals
argument_list|(
name|leftTerms
operator|.
name|size
argument_list|()
argument_list|,
name|rightTerms
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**     * checks the terms enum sequentially    * if deep is false, it does a 'shallow' test that doesnt go down to the docsenums    */
DECL|method|assertTermsEnum
specifier|public
name|void
name|assertTermsEnum
parameter_list|(
name|TermsEnum
name|leftTermsEnum
parameter_list|,
name|TermsEnum
name|rightTermsEnum
parameter_list|,
name|boolean
name|deep
parameter_list|)
throws|throws
name|Exception
block|{
name|BytesRef
name|term
decl_stmt|;
name|Bits
name|randomBits
init|=
operator|new
name|RandomBits
argument_list|(
name|MAXDOC
argument_list|,
name|random
argument_list|()
operator|.
name|nextDouble
argument_list|()
argument_list|,
name|random
argument_list|()
argument_list|)
decl_stmt|;
name|DocsAndPositionsEnum
name|leftPositions
init|=
literal|null
decl_stmt|;
name|DocsAndPositionsEnum
name|rightPositions
init|=
literal|null
decl_stmt|;
name|DocsEnum
name|leftDocs
init|=
literal|null
decl_stmt|;
name|DocsEnum
name|rightDocs
init|=
literal|null
decl_stmt|;
while|while
condition|(
operator|(
name|term
operator|=
name|leftTermsEnum
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|assertEquals
argument_list|(
name|term
argument_list|,
name|rightTermsEnum
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertTermStats
argument_list|(
name|leftTermsEnum
argument_list|,
name|rightTermsEnum
argument_list|)
expr_stmt|;
if|if
condition|(
name|deep
condition|)
block|{
comment|// with payloads + off
name|assertDocsAndPositionsEnum
argument_list|(
name|leftPositions
operator|=
name|leftTermsEnum
operator|.
name|docsAndPositions
argument_list|(
literal|null
argument_list|,
name|leftPositions
argument_list|)
argument_list|,
name|rightPositions
operator|=
name|rightTermsEnum
operator|.
name|docsAndPositions
argument_list|(
literal|null
argument_list|,
name|rightPositions
argument_list|)
argument_list|)
expr_stmt|;
name|assertDocsAndPositionsEnum
argument_list|(
name|leftPositions
operator|=
name|leftTermsEnum
operator|.
name|docsAndPositions
argument_list|(
name|randomBits
argument_list|,
name|leftPositions
argument_list|)
argument_list|,
name|rightPositions
operator|=
name|rightTermsEnum
operator|.
name|docsAndPositions
argument_list|(
name|randomBits
argument_list|,
name|rightPositions
argument_list|)
argument_list|)
expr_stmt|;
name|assertPositionsSkipping
argument_list|(
name|leftTermsEnum
operator|.
name|docFreq
argument_list|()
argument_list|,
name|leftPositions
operator|=
name|leftTermsEnum
operator|.
name|docsAndPositions
argument_list|(
literal|null
argument_list|,
name|leftPositions
argument_list|)
argument_list|,
name|rightPositions
operator|=
name|rightTermsEnum
operator|.
name|docsAndPositions
argument_list|(
literal|null
argument_list|,
name|rightPositions
argument_list|)
argument_list|)
expr_stmt|;
name|assertPositionsSkipping
argument_list|(
name|leftTermsEnum
operator|.
name|docFreq
argument_list|()
argument_list|,
name|leftPositions
operator|=
name|leftTermsEnum
operator|.
name|docsAndPositions
argument_list|(
name|randomBits
argument_list|,
name|leftPositions
argument_list|)
argument_list|,
name|rightPositions
operator|=
name|rightTermsEnum
operator|.
name|docsAndPositions
argument_list|(
name|randomBits
argument_list|,
name|rightPositions
argument_list|)
argument_list|)
expr_stmt|;
comment|// with payloads only
name|assertDocsAndPositionsEnum
argument_list|(
name|leftPositions
operator|=
name|leftTermsEnum
operator|.
name|docsAndPositions
argument_list|(
literal|null
argument_list|,
name|leftPositions
argument_list|,
name|DocsAndPositionsEnum
operator|.
name|FLAG_PAYLOADS
argument_list|)
argument_list|,
name|rightPositions
operator|=
name|rightTermsEnum
operator|.
name|docsAndPositions
argument_list|(
literal|null
argument_list|,
name|rightPositions
argument_list|,
name|DocsAndPositionsEnum
operator|.
name|FLAG_PAYLOADS
argument_list|)
argument_list|)
expr_stmt|;
name|assertDocsAndPositionsEnum
argument_list|(
name|leftPositions
operator|=
name|leftTermsEnum
operator|.
name|docsAndPositions
argument_list|(
name|randomBits
argument_list|,
name|leftPositions
argument_list|,
name|DocsAndPositionsEnum
operator|.
name|FLAG_PAYLOADS
argument_list|)
argument_list|,
name|rightPositions
operator|=
name|rightTermsEnum
operator|.
name|docsAndPositions
argument_list|(
name|randomBits
argument_list|,
name|rightPositions
argument_list|,
name|DocsAndPositionsEnum
operator|.
name|FLAG_PAYLOADS
argument_list|)
argument_list|)
expr_stmt|;
name|assertPositionsSkipping
argument_list|(
name|leftTermsEnum
operator|.
name|docFreq
argument_list|()
argument_list|,
name|leftPositions
operator|=
name|leftTermsEnum
operator|.
name|docsAndPositions
argument_list|(
literal|null
argument_list|,
name|leftPositions
argument_list|,
name|DocsAndPositionsEnum
operator|.
name|FLAG_PAYLOADS
argument_list|)
argument_list|,
name|rightPositions
operator|=
name|rightTermsEnum
operator|.
name|docsAndPositions
argument_list|(
literal|null
argument_list|,
name|rightPositions
argument_list|,
name|DocsAndPositionsEnum
operator|.
name|FLAG_PAYLOADS
argument_list|)
argument_list|)
expr_stmt|;
name|assertPositionsSkipping
argument_list|(
name|leftTermsEnum
operator|.
name|docFreq
argument_list|()
argument_list|,
name|leftPositions
operator|=
name|leftTermsEnum
operator|.
name|docsAndPositions
argument_list|(
name|randomBits
argument_list|,
name|leftPositions
argument_list|,
name|DocsAndPositionsEnum
operator|.
name|FLAG_PAYLOADS
argument_list|)
argument_list|,
name|rightPositions
operator|=
name|rightTermsEnum
operator|.
name|docsAndPositions
argument_list|(
name|randomBits
argument_list|,
name|rightPositions
argument_list|,
name|DocsAndPositionsEnum
operator|.
name|FLAG_PAYLOADS
argument_list|)
argument_list|)
expr_stmt|;
comment|// with offsets only
name|assertDocsAndPositionsEnum
argument_list|(
name|leftPositions
operator|=
name|leftTermsEnum
operator|.
name|docsAndPositions
argument_list|(
literal|null
argument_list|,
name|leftPositions
argument_list|,
name|DocsAndPositionsEnum
operator|.
name|FLAG_OFFSETS
argument_list|)
argument_list|,
name|rightPositions
operator|=
name|rightTermsEnum
operator|.
name|docsAndPositions
argument_list|(
literal|null
argument_list|,
name|rightPositions
argument_list|,
name|DocsAndPositionsEnum
operator|.
name|FLAG_OFFSETS
argument_list|)
argument_list|)
expr_stmt|;
name|assertDocsAndPositionsEnum
argument_list|(
name|leftPositions
operator|=
name|leftTermsEnum
operator|.
name|docsAndPositions
argument_list|(
name|randomBits
argument_list|,
name|leftPositions
argument_list|,
name|DocsAndPositionsEnum
operator|.
name|FLAG_OFFSETS
argument_list|)
argument_list|,
name|rightPositions
operator|=
name|rightTermsEnum
operator|.
name|docsAndPositions
argument_list|(
name|randomBits
argument_list|,
name|rightPositions
argument_list|,
name|DocsAndPositionsEnum
operator|.
name|FLAG_OFFSETS
argument_list|)
argument_list|)
expr_stmt|;
name|assertPositionsSkipping
argument_list|(
name|leftTermsEnum
operator|.
name|docFreq
argument_list|()
argument_list|,
name|leftPositions
operator|=
name|leftTermsEnum
operator|.
name|docsAndPositions
argument_list|(
literal|null
argument_list|,
name|leftPositions
argument_list|,
name|DocsAndPositionsEnum
operator|.
name|FLAG_OFFSETS
argument_list|)
argument_list|,
name|rightPositions
operator|=
name|rightTermsEnum
operator|.
name|docsAndPositions
argument_list|(
literal|null
argument_list|,
name|rightPositions
argument_list|,
name|DocsAndPositionsEnum
operator|.
name|FLAG_OFFSETS
argument_list|)
argument_list|)
expr_stmt|;
name|assertPositionsSkipping
argument_list|(
name|leftTermsEnum
operator|.
name|docFreq
argument_list|()
argument_list|,
name|leftPositions
operator|=
name|leftTermsEnum
operator|.
name|docsAndPositions
argument_list|(
name|randomBits
argument_list|,
name|leftPositions
argument_list|,
name|DocsAndPositionsEnum
operator|.
name|FLAG_OFFSETS
argument_list|)
argument_list|,
name|rightPositions
operator|=
name|rightTermsEnum
operator|.
name|docsAndPositions
argument_list|(
name|randomBits
argument_list|,
name|rightPositions
argument_list|,
name|DocsAndPositionsEnum
operator|.
name|FLAG_OFFSETS
argument_list|)
argument_list|)
expr_stmt|;
comment|// with positions only
name|assertDocsAndPositionsEnum
argument_list|(
name|leftPositions
operator|=
name|leftTermsEnum
operator|.
name|docsAndPositions
argument_list|(
literal|null
argument_list|,
name|leftPositions
argument_list|,
name|DocsEnum
operator|.
name|FLAG_NONE
argument_list|)
argument_list|,
name|rightPositions
operator|=
name|rightTermsEnum
operator|.
name|docsAndPositions
argument_list|(
literal|null
argument_list|,
name|rightPositions
argument_list|,
name|DocsEnum
operator|.
name|FLAG_NONE
argument_list|)
argument_list|)
expr_stmt|;
name|assertDocsAndPositionsEnum
argument_list|(
name|leftPositions
operator|=
name|leftTermsEnum
operator|.
name|docsAndPositions
argument_list|(
name|randomBits
argument_list|,
name|leftPositions
argument_list|,
name|DocsEnum
operator|.
name|FLAG_NONE
argument_list|)
argument_list|,
name|rightPositions
operator|=
name|rightTermsEnum
operator|.
name|docsAndPositions
argument_list|(
name|randomBits
argument_list|,
name|rightPositions
argument_list|,
name|DocsEnum
operator|.
name|FLAG_NONE
argument_list|)
argument_list|)
expr_stmt|;
name|assertPositionsSkipping
argument_list|(
name|leftTermsEnum
operator|.
name|docFreq
argument_list|()
argument_list|,
name|leftPositions
operator|=
name|leftTermsEnum
operator|.
name|docsAndPositions
argument_list|(
literal|null
argument_list|,
name|leftPositions
argument_list|,
name|DocsEnum
operator|.
name|FLAG_NONE
argument_list|)
argument_list|,
name|rightPositions
operator|=
name|rightTermsEnum
operator|.
name|docsAndPositions
argument_list|(
literal|null
argument_list|,
name|rightPositions
argument_list|,
name|DocsEnum
operator|.
name|FLAG_NONE
argument_list|)
argument_list|)
expr_stmt|;
name|assertPositionsSkipping
argument_list|(
name|leftTermsEnum
operator|.
name|docFreq
argument_list|()
argument_list|,
name|leftPositions
operator|=
name|leftTermsEnum
operator|.
name|docsAndPositions
argument_list|(
name|randomBits
argument_list|,
name|leftPositions
argument_list|,
name|DocsEnum
operator|.
name|FLAG_NONE
argument_list|)
argument_list|,
name|rightPositions
operator|=
name|rightTermsEnum
operator|.
name|docsAndPositions
argument_list|(
name|randomBits
argument_list|,
name|rightPositions
argument_list|,
name|DocsEnum
operator|.
name|FLAG_NONE
argument_list|)
argument_list|)
expr_stmt|;
comment|// with freqs:
name|assertDocsEnum
argument_list|(
name|leftDocs
operator|=
name|leftTermsEnum
operator|.
name|docs
argument_list|(
literal|null
argument_list|,
name|leftDocs
argument_list|)
argument_list|,
name|rightDocs
operator|=
name|rightTermsEnum
operator|.
name|docs
argument_list|(
literal|null
argument_list|,
name|rightDocs
argument_list|)
argument_list|)
expr_stmt|;
name|assertDocsEnum
argument_list|(
name|leftDocs
operator|=
name|leftTermsEnum
operator|.
name|docs
argument_list|(
name|randomBits
argument_list|,
name|leftDocs
argument_list|)
argument_list|,
name|rightDocs
operator|=
name|rightTermsEnum
operator|.
name|docs
argument_list|(
name|randomBits
argument_list|,
name|rightDocs
argument_list|)
argument_list|)
expr_stmt|;
comment|// w/o freqs:
name|assertDocsEnum
argument_list|(
name|leftDocs
operator|=
name|leftTermsEnum
operator|.
name|docs
argument_list|(
literal|null
argument_list|,
name|leftDocs
argument_list|,
name|DocsEnum
operator|.
name|FLAG_NONE
argument_list|)
argument_list|,
name|rightDocs
operator|=
name|rightTermsEnum
operator|.
name|docs
argument_list|(
literal|null
argument_list|,
name|rightDocs
argument_list|,
name|DocsEnum
operator|.
name|FLAG_NONE
argument_list|)
argument_list|)
expr_stmt|;
name|assertDocsEnum
argument_list|(
name|leftDocs
operator|=
name|leftTermsEnum
operator|.
name|docs
argument_list|(
name|randomBits
argument_list|,
name|leftDocs
argument_list|,
name|DocsEnum
operator|.
name|FLAG_NONE
argument_list|)
argument_list|,
name|rightDocs
operator|=
name|rightTermsEnum
operator|.
name|docs
argument_list|(
name|randomBits
argument_list|,
name|rightDocs
argument_list|,
name|DocsEnum
operator|.
name|FLAG_NONE
argument_list|)
argument_list|)
expr_stmt|;
comment|// with freqs:
name|assertDocsSkipping
argument_list|(
name|leftTermsEnum
operator|.
name|docFreq
argument_list|()
argument_list|,
name|leftDocs
operator|=
name|leftTermsEnum
operator|.
name|docs
argument_list|(
literal|null
argument_list|,
name|leftDocs
argument_list|)
argument_list|,
name|rightDocs
operator|=
name|rightTermsEnum
operator|.
name|docs
argument_list|(
literal|null
argument_list|,
name|rightDocs
argument_list|)
argument_list|)
expr_stmt|;
name|assertDocsSkipping
argument_list|(
name|leftTermsEnum
operator|.
name|docFreq
argument_list|()
argument_list|,
name|leftDocs
operator|=
name|leftTermsEnum
operator|.
name|docs
argument_list|(
name|randomBits
argument_list|,
name|leftDocs
argument_list|)
argument_list|,
name|rightDocs
operator|=
name|rightTermsEnum
operator|.
name|docs
argument_list|(
name|randomBits
argument_list|,
name|rightDocs
argument_list|)
argument_list|)
expr_stmt|;
comment|// w/o freqs:
name|assertDocsSkipping
argument_list|(
name|leftTermsEnum
operator|.
name|docFreq
argument_list|()
argument_list|,
name|leftDocs
operator|=
name|leftTermsEnum
operator|.
name|docs
argument_list|(
literal|null
argument_list|,
name|leftDocs
argument_list|,
name|DocsEnum
operator|.
name|FLAG_NONE
argument_list|)
argument_list|,
name|rightDocs
operator|=
name|rightTermsEnum
operator|.
name|docs
argument_list|(
literal|null
argument_list|,
name|rightDocs
argument_list|,
name|DocsEnum
operator|.
name|FLAG_NONE
argument_list|)
argument_list|)
expr_stmt|;
name|assertDocsSkipping
argument_list|(
name|leftTermsEnum
operator|.
name|docFreq
argument_list|()
argument_list|,
name|leftDocs
operator|=
name|leftTermsEnum
operator|.
name|docs
argument_list|(
name|randomBits
argument_list|,
name|leftDocs
argument_list|,
name|DocsEnum
operator|.
name|FLAG_NONE
argument_list|)
argument_list|,
name|rightDocs
operator|=
name|rightTermsEnum
operator|.
name|docs
argument_list|(
name|randomBits
argument_list|,
name|rightDocs
argument_list|,
name|DocsEnum
operator|.
name|FLAG_NONE
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|assertNull
argument_list|(
name|rightTermsEnum
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * checks term-level statistics    */
DECL|method|assertTermStats
specifier|public
name|void
name|assertTermStats
parameter_list|(
name|TermsEnum
name|leftTermsEnum
parameter_list|,
name|TermsEnum
name|rightTermsEnum
parameter_list|)
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
name|leftTermsEnum
operator|.
name|docFreq
argument_list|()
argument_list|,
name|rightTermsEnum
operator|.
name|docFreq
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|leftTermsEnum
operator|.
name|totalTermFreq
argument_list|()
operator|!=
operator|-
literal|1
operator|&&
name|rightTermsEnum
operator|.
name|totalTermFreq
argument_list|()
operator|!=
operator|-
literal|1
condition|)
block|{
name|assertEquals
argument_list|(
name|leftTermsEnum
operator|.
name|totalTermFreq
argument_list|()
argument_list|,
name|rightTermsEnum
operator|.
name|totalTermFreq
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * checks docs + freqs + positions + payloads, sequentially    */
DECL|method|assertDocsAndPositionsEnum
specifier|public
name|void
name|assertDocsAndPositionsEnum
parameter_list|(
name|DocsAndPositionsEnum
name|leftDocs
parameter_list|,
name|DocsAndPositionsEnum
name|rightDocs
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|leftDocs
operator|==
literal|null
operator|||
name|rightDocs
operator|==
literal|null
condition|)
block|{
name|assertNull
argument_list|(
name|leftDocs
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|rightDocs
argument_list|)
expr_stmt|;
return|return;
block|}
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|leftDocs
operator|.
name|docID
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|rightDocs
operator|.
name|docID
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|docid
decl_stmt|;
while|while
condition|(
operator|(
name|docid
operator|=
name|leftDocs
operator|.
name|nextDoc
argument_list|()
operator|)
operator|!=
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
condition|)
block|{
name|assertEquals
argument_list|(
name|docid
argument_list|,
name|rightDocs
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|freq
init|=
name|leftDocs
operator|.
name|freq
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|freq
argument_list|,
name|rightDocs
operator|.
name|freq
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|freq
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|leftDocs
operator|.
name|nextPosition
argument_list|()
argument_list|,
name|rightDocs
operator|.
name|nextPosition
argument_list|()
argument_list|)
expr_stmt|;
comment|// we don't assert offsets/payloads, they are allowed to be different
block|}
block|}
name|assertEquals
argument_list|(
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
argument_list|,
name|rightDocs
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * checks docs + freqs, sequentially    */
DECL|method|assertDocsEnum
specifier|public
name|void
name|assertDocsEnum
parameter_list|(
name|DocsEnum
name|leftDocs
parameter_list|,
name|DocsEnum
name|rightDocs
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|leftDocs
operator|==
literal|null
condition|)
block|{
name|assertNull
argument_list|(
name|rightDocs
argument_list|)
expr_stmt|;
return|return;
block|}
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|leftDocs
operator|.
name|docID
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|rightDocs
operator|.
name|docID
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|docid
decl_stmt|;
while|while
condition|(
operator|(
name|docid
operator|=
name|leftDocs
operator|.
name|nextDoc
argument_list|()
operator|)
operator|!=
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
condition|)
block|{
name|assertEquals
argument_list|(
name|docid
argument_list|,
name|rightDocs
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
comment|// we don't assert freqs, they are allowed to be different
block|}
name|assertEquals
argument_list|(
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
argument_list|,
name|rightDocs
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * checks advancing docs    */
DECL|method|assertDocsSkipping
specifier|public
name|void
name|assertDocsSkipping
parameter_list|(
name|int
name|docFreq
parameter_list|,
name|DocsEnum
name|leftDocs
parameter_list|,
name|DocsEnum
name|rightDocs
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|leftDocs
operator|==
literal|null
condition|)
block|{
name|assertNull
argument_list|(
name|rightDocs
argument_list|)
expr_stmt|;
return|return;
block|}
name|int
name|docid
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|averageGap
init|=
name|MAXDOC
operator|/
operator|(
literal|1
operator|+
name|docFreq
operator|)
decl_stmt|;
name|int
name|skipInterval
init|=
literal|16
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
comment|// nextDoc()
name|docid
operator|=
name|leftDocs
operator|.
name|nextDoc
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|docid
argument_list|,
name|rightDocs
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// advance()
name|int
name|skip
init|=
name|docid
operator|+
operator|(
name|int
operator|)
name|Math
operator|.
name|ceil
argument_list|(
name|Math
operator|.
name|abs
argument_list|(
name|skipInterval
operator|+
name|random
argument_list|()
operator|.
name|nextGaussian
argument_list|()
operator|*
name|averageGap
argument_list|)
argument_list|)
decl_stmt|;
name|docid
operator|=
name|leftDocs
operator|.
name|advance
argument_list|(
name|skip
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|docid
argument_list|,
name|rightDocs
operator|.
name|advance
argument_list|(
name|skip
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|docid
operator|==
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
condition|)
block|{
return|return;
block|}
comment|// we don't assert freqs, they are allowed to be different
block|}
block|}
comment|/**    * checks advancing docs + positions    */
DECL|method|assertPositionsSkipping
specifier|public
name|void
name|assertPositionsSkipping
parameter_list|(
name|int
name|docFreq
parameter_list|,
name|DocsAndPositionsEnum
name|leftDocs
parameter_list|,
name|DocsAndPositionsEnum
name|rightDocs
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|leftDocs
operator|==
literal|null
operator|||
name|rightDocs
operator|==
literal|null
condition|)
block|{
name|assertNull
argument_list|(
name|leftDocs
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|rightDocs
argument_list|)
expr_stmt|;
return|return;
block|}
name|int
name|docid
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|averageGap
init|=
name|MAXDOC
operator|/
operator|(
literal|1
operator|+
name|docFreq
operator|)
decl_stmt|;
name|int
name|skipInterval
init|=
literal|16
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
comment|// nextDoc()
name|docid
operator|=
name|leftDocs
operator|.
name|nextDoc
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|docid
argument_list|,
name|rightDocs
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// advance()
name|int
name|skip
init|=
name|docid
operator|+
operator|(
name|int
operator|)
name|Math
operator|.
name|ceil
argument_list|(
name|Math
operator|.
name|abs
argument_list|(
name|skipInterval
operator|+
name|random
argument_list|()
operator|.
name|nextGaussian
argument_list|()
operator|*
name|averageGap
argument_list|)
argument_list|)
decl_stmt|;
name|docid
operator|=
name|leftDocs
operator|.
name|advance
argument_list|(
name|skip
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|docid
argument_list|,
name|rightDocs
operator|.
name|advance
argument_list|(
name|skip
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|docid
operator|==
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
condition|)
block|{
return|return;
block|}
name|int
name|freq
init|=
name|leftDocs
operator|.
name|freq
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|freq
argument_list|,
name|rightDocs
operator|.
name|freq
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|freq
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|leftDocs
operator|.
name|nextPosition
argument_list|()
argument_list|,
name|rightDocs
operator|.
name|nextPosition
argument_list|()
argument_list|)
expr_stmt|;
comment|// we don't compare the payloads, its allowed that one is empty etc
block|}
block|}
block|}
DECL|class|RandomBits
specifier|private
specifier|static
class|class
name|RandomBits
implements|implements
name|Bits
block|{
DECL|field|bits
name|FixedBitSet
name|bits
decl_stmt|;
DECL|method|RandomBits
name|RandomBits
parameter_list|(
name|int
name|maxDoc
parameter_list|,
name|double
name|pctLive
parameter_list|,
name|Random
name|random
parameter_list|)
block|{
name|bits
operator|=
operator|new
name|FixedBitSet
argument_list|(
name|maxDoc
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|maxDoc
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|random
operator|.
name|nextDouble
argument_list|()
operator|<=
name|pctLive
condition|)
block|{
name|bits
operator|.
name|set
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|get
specifier|public
name|boolean
name|get
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|bits
operator|.
name|get
argument_list|(
name|index
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|length
specifier|public
name|int
name|length
parameter_list|()
block|{
return|return
name|bits
operator|.
name|length
argument_list|()
return|;
block|}
block|}
block|}
end_class
end_unit
