begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.codecs.compressing
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|compressing
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|TestUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|UnicodeUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_comment
comment|/**  * Test for {@link GrowableByteArrayDataOutput}  */
end_comment
begin_class
DECL|class|TestGrowableByteArrayDataOutput
specifier|public
class|class
name|TestGrowableByteArrayDataOutput
extends|extends
name|LuceneTestCase
block|{
annotation|@
name|Test
DECL|method|testWriteSmallStrings
specifier|public
name|void
name|testWriteSmallStrings
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|minSizeForDoublePass
init|=
name|GrowableByteArrayDataOutput
operator|.
name|MIN_UTF8_SIZE_TO_ENABLE_DOUBLE_PASS_ENCODING
decl_stmt|;
comment|// a simple string encoding test
name|int
name|num
init|=
name|atLeast
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|num
condition|;
name|i
operator|++
control|)
block|{
comment|// create a small string such that the single pass approach is used
name|int
name|length
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
name|minSizeForDoublePass
operator|-
literal|1
argument_list|)
decl_stmt|;
name|String
name|unicode
init|=
name|TestUtil
operator|.
name|randomFixedByteLengthUnicodeString
argument_list|(
name|random
argument_list|()
argument_list|,
name|length
argument_list|)
decl_stmt|;
name|byte
index|[]
name|utf8
init|=
operator|new
name|byte
index|[
name|unicode
operator|.
name|length
argument_list|()
operator|*
name|UnicodeUtil
operator|.
name|MAX_UTF8_BYTES_PER_CHAR
index|]
decl_stmt|;
name|int
name|len
init|=
name|UnicodeUtil
operator|.
name|UTF16toUTF8
argument_list|(
name|unicode
argument_list|,
literal|0
argument_list|,
name|unicode
operator|.
name|length
argument_list|()
argument_list|,
name|utf8
argument_list|)
decl_stmt|;
name|GrowableByteArrayDataOutput
name|dataOutput
init|=
operator|new
name|GrowableByteArrayDataOutput
argument_list|(
literal|1
operator|<<
literal|8
argument_list|)
decl_stmt|;
comment|//explicitly write utf8 len so that we know how many bytes it occupies
name|dataOutput
operator|.
name|writeVInt
argument_list|(
name|len
argument_list|)
expr_stmt|;
name|int
name|vintLen
init|=
name|dataOutput
operator|.
name|length
decl_stmt|;
comment|// now write the string which will internally write number of bytes as a vint and then utf8 bytes
name|dataOutput
operator|.
name|writeString
argument_list|(
name|unicode
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"GrowableByteArrayDataOutput wrote the wrong length after encode"
argument_list|,
name|len
operator|+
name|vintLen
operator|*
literal|2
argument_list|,
name|dataOutput
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|,
name|k
init|=
name|vintLen
operator|*
literal|2
init|;
name|j
operator|<
name|len
condition|;
name|j
operator|++
operator|,
name|k
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|utf8
index|[
name|j
index|]
argument_list|,
name|dataOutput
operator|.
name|bytes
index|[
name|k
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testWriteLargeStrings
specifier|public
name|void
name|testWriteLargeStrings
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|minSizeForDoublePass
init|=
name|GrowableByteArrayDataOutput
operator|.
name|MIN_UTF8_SIZE_TO_ENABLE_DOUBLE_PASS_ENCODING
decl_stmt|;
name|int
name|num
init|=
name|atLeast
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|num
condition|;
name|i
operator|++
control|)
block|{
name|String
name|unicode
init|=
name|TestUtil
operator|.
name|randomRealisticUnicodeString
argument_list|(
name|random
argument_list|()
argument_list|,
name|minSizeForDoublePass
argument_list|,
literal|10
operator|*
name|minSizeForDoublePass
argument_list|)
decl_stmt|;
name|byte
index|[]
name|utf8
init|=
operator|new
name|byte
index|[
name|unicode
operator|.
name|length
argument_list|()
operator|*
name|UnicodeUtil
operator|.
name|MAX_UTF8_BYTES_PER_CHAR
index|]
decl_stmt|;
name|int
name|len
init|=
name|UnicodeUtil
operator|.
name|UTF16toUTF8
argument_list|(
name|unicode
argument_list|,
literal|0
argument_list|,
name|unicode
operator|.
name|length
argument_list|()
argument_list|,
name|utf8
argument_list|)
decl_stmt|;
name|GrowableByteArrayDataOutput
name|dataOutput
init|=
operator|new
name|GrowableByteArrayDataOutput
argument_list|(
literal|1
operator|<<
literal|8
argument_list|)
decl_stmt|;
comment|//explicitly write utf8 len so that we know how many bytes it occupies
name|dataOutput
operator|.
name|writeVInt
argument_list|(
name|len
argument_list|)
expr_stmt|;
name|int
name|vintLen
init|=
name|dataOutput
operator|.
name|length
decl_stmt|;
comment|// now write the string which will internally write number of bytes as a vint and then utf8 bytes
name|dataOutput
operator|.
name|writeString
argument_list|(
name|unicode
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"GrowableByteArrayDataOutput wrote the wrong length after encode"
argument_list|,
name|len
operator|+
name|vintLen
operator|*
literal|2
argument_list|,
name|dataOutput
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|,
name|k
init|=
name|vintLen
operator|*
literal|2
init|;
name|j
operator|<
name|len
condition|;
name|j
operator|++
operator|,
name|k
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|utf8
index|[
name|j
index|]
argument_list|,
name|dataOutput
operator|.
name|bytes
index|[
name|k
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class
end_unit
