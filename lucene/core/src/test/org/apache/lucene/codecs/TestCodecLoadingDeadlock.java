begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.codecs
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
package|;
end_package
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CyclicBarrier
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|IntStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|NamedThreadFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import
begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|RandomizedContext
import|;
end_import
begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|RandomizedRunner
import|;
end_import
begin_comment
comment|/* WARNING: This test does *not* extend LuceneTestCase to prevent static class  * initialization when spawned as subprocess (and please let default codecs alive)! */
end_comment
begin_class
annotation|@
name|RunWith
argument_list|(
name|RandomizedRunner
operator|.
name|class
argument_list|)
DECL|class|TestCodecLoadingDeadlock
specifier|public
class|class
name|TestCodecLoadingDeadlock
extends|extends
name|Assert
block|{
annotation|@
name|Test
DECL|method|testDeadlock
specifier|public
name|void
name|testDeadlock
parameter_list|()
throws|throws
name|Exception
block|{
name|LuceneTestCase
operator|.
name|assumeFalse
argument_list|(
literal|"This test fails on UNIX with Turkish default locale (https://issues.apache.org/jira/browse/LUCENE-6036)"
argument_list|,
operator|new
name|Locale
argument_list|(
literal|"tr"
argument_list|)
operator|.
name|getLanguage
argument_list|()
operator|.
name|equals
argument_list|(
name|Locale
operator|.
name|getDefault
argument_list|()
operator|.
name|getLanguage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// pick random codec names for stress test in separate process:
specifier|final
name|Random
name|rnd
init|=
name|RandomizedContext
operator|.
name|current
argument_list|()
operator|.
name|getRandom
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|avail
decl_stmt|;
specifier|final
name|String
name|codecName
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|avail
operator|=
name|Codec
operator|.
name|availableCodecs
argument_list|()
argument_list|)
operator|.
name|get
argument_list|(
name|rnd
operator|.
name|nextInt
argument_list|(
name|avail
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|String
name|pfName
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|avail
operator|=
name|PostingsFormat
operator|.
name|availablePostingsFormats
argument_list|()
argument_list|)
operator|.
name|get
argument_list|(
name|rnd
operator|.
name|nextInt
argument_list|(
name|avail
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|String
name|dvfName
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|avail
operator|=
name|DocValuesFormat
operator|.
name|availableDocValuesFormats
argument_list|()
argument_list|)
operator|.
name|get
argument_list|(
name|rnd
operator|.
name|nextInt
argument_list|(
name|avail
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
comment|// spawn separate JVM:
specifier|final
name|Process
name|p
init|=
operator|new
name|ProcessBuilder
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.home"
argument_list|)
argument_list|,
literal|"bin"
argument_list|,
literal|"java"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
literal|"-cp"
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.class.path"
argument_list|)
argument_list|,
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|codecName
argument_list|,
name|pfName
argument_list|,
name|dvfName
argument_list|)
operator|.
name|inheritIO
argument_list|()
operator|.
name|start
argument_list|()
decl_stmt|;
if|if
condition|(
name|p
operator|.
name|waitFor
argument_list|(
literal|30
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Process died abnormally"
argument_list|,
literal|0
argument_list|,
name|p
operator|.
name|waitFor
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|p
operator|.
name|destroyForcibly
argument_list|()
operator|.
name|waitFor
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Process did not exit after 30 secs -> classloader deadlock?"
argument_list|)
expr_stmt|;
block|}
block|}
comment|// this method is called in a spawned process:
DECL|method|main
specifier|public
specifier|static
name|void
name|main
parameter_list|(
specifier|final
name|String
modifier|...
name|args
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|String
name|codecName
init|=
name|args
index|[
literal|0
index|]
decl_stmt|;
specifier|final
name|String
name|pfName
init|=
name|args
index|[
literal|1
index|]
decl_stmt|;
specifier|final
name|String
name|dvfName
init|=
name|args
index|[
literal|2
index|]
decl_stmt|;
specifier|final
name|int
name|numThreads
init|=
literal|14
decl_stmt|;
comment|// two times the modulo in switch statement below
specifier|final
name|ExecutorService
name|pool
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
name|numThreads
argument_list|,
operator|new
name|NamedThreadFactory
argument_list|(
literal|"deadlockchecker"
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|CyclicBarrier
name|barrier
init|=
operator|new
name|CyclicBarrier
argument_list|(
name|numThreads
argument_list|)
decl_stmt|;
name|IntStream
operator|.
name|range
argument_list|(
literal|0
argument_list|,
name|numThreads
argument_list|)
operator|.
name|forEach
argument_list|(
name|taskNo
lambda|->
name|pool
operator|.
name|execute
argument_list|(
parameter_list|()
lambda|->
block|{
block|try
block|{
name|barrier
operator|.
name|await
argument_list|()
expr_stmt|;
switch|switch
condition|(
name|taskNo
operator|%
literal|7
condition|)
block|{
case|case
literal|0
case|:
name|Codec
operator|.
name|getDefault
argument_list|()
expr_stmt|;
break|break;
case|case
literal|1
case|:
name|Codec
operator|.
name|forName
argument_list|(
name|codecName
argument_list|)
expr_stmt|;
break|break;
case|case
literal|2
case|:
name|PostingsFormat
operator|.
name|forName
argument_list|(
name|pfName
argument_list|)
expr_stmt|;
break|break;
case|case
literal|3
case|:
name|DocValuesFormat
operator|.
name|forName
argument_list|(
name|dvfName
argument_list|)
expr_stmt|;
break|break;
case|case
literal|4
case|:
name|Codec
operator|.
name|availableCodecs
argument_list|()
expr_stmt|;
break|break;
case|case
literal|5
case|:
name|PostingsFormat
operator|.
name|availablePostingsFormats
argument_list|()
expr_stmt|;
break|break;
case|case
literal|6
case|:
name|DocValuesFormat
operator|.
name|availableDocValuesFormats
argument_list|()
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|()
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
synchronized|synchronized
init|(
name|args
init|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" failed to lookup codec service:"
argument_list|)
expr_stmt|;
name|t
operator|.
name|printStackTrace
argument_list|(
name|System
operator|.
name|err
argument_list|)
expr_stmt|;
block|}
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|halt
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// signal failure to caller
block|}
block|}
block|)
end_class
begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt
begin_expr_stmt
name|pool
operator|.
name|shutdown
argument_list|()
expr_stmt|;
end_expr_stmt
begin_while
while|while
condition|(
operator|!
name|pool
operator|.
name|awaitTermination
argument_list|(
literal|1
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
condition|)
empty_stmt|;
end_while
unit|}  }
end_unit
