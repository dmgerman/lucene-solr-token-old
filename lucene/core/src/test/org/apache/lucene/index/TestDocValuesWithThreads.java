begin_unit
begin_package
DECL|package|org.apache.lucene.index
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|MockAnalyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|BinaryDocValuesField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|LongDocValuesField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|SortedBytesDocValuesField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|FieldCache
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|_TestUtil
import|;
end_import
begin_class
DECL|class|TestDocValuesWithThreads
specifier|public
class|class
name|TestDocValuesWithThreads
extends|extends
name|LuceneTestCase
block|{
DECL|method|test
specifier|public
name|void
name|test
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|w
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setMergePolicy
argument_list|(
name|newLogMergePolicy
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Long
argument_list|>
name|numbers
init|=
operator|new
name|ArrayList
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|BytesRef
argument_list|>
name|binary
init|=
operator|new
name|ArrayList
argument_list|<
name|BytesRef
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|BytesRef
argument_list|>
name|sorted
init|=
operator|new
name|ArrayList
argument_list|<
name|BytesRef
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|int
name|numDocs
init|=
name|atLeast
argument_list|(
literal|100
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
name|i
operator|++
control|)
block|{
name|Document
name|d
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|long
name|number
init|=
name|random
argument_list|()
operator|.
name|nextLong
argument_list|()
decl_stmt|;
name|d
operator|.
name|add
argument_list|(
operator|new
name|LongDocValuesField
argument_list|(
literal|"number"
argument_list|,
name|number
argument_list|)
argument_list|)
expr_stmt|;
name|BytesRef
name|bytes
init|=
operator|new
name|BytesRef
argument_list|(
name|_TestUtil
operator|.
name|randomRealisticUnicodeString
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|d
operator|.
name|add
argument_list|(
operator|new
name|BinaryDocValuesField
argument_list|(
literal|"bytes"
argument_list|,
name|bytes
argument_list|)
argument_list|)
expr_stmt|;
name|binary
operator|.
name|add
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
name|bytes
operator|=
operator|new
name|BytesRef
argument_list|(
name|_TestUtil
operator|.
name|randomRealisticUnicodeString
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|.
name|add
argument_list|(
operator|new
name|SortedBytesDocValuesField
argument_list|(
literal|"sorted"
argument_list|,
name|bytes
argument_list|)
argument_list|)
expr_stmt|;
name|sorted
operator|.
name|add
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|numbers
operator|.
name|add
argument_list|(
name|number
argument_list|)
expr_stmt|;
block|}
name|w
operator|.
name|forceMerge
argument_list|(
literal|1
argument_list|)
expr_stmt|;
specifier|final
name|IndexReader
name|r
init|=
name|w
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|r
operator|.
name|leaves
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|AtomicReader
name|ar
init|=
name|r
operator|.
name|leaves
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|reader
argument_list|()
decl_stmt|;
name|int
name|numThreads
init|=
name|_TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|2
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Thread
argument_list|>
name|threads
init|=
operator|new
name|ArrayList
argument_list|<
name|Thread
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|CountDownLatch
name|startingGun
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|t
init|=
literal|0
init|;
name|t
operator|<
name|numThreads
condition|;
name|t
operator|++
control|)
block|{
specifier|final
name|Random
name|threadRandom
init|=
operator|new
name|Random
argument_list|(
name|random
argument_list|()
operator|.
name|nextLong
argument_list|()
argument_list|)
decl_stmt|;
name|Thread
name|thread
init|=
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
comment|//NumericDocValues ndv = ar.getNumericDocValues("number");
name|FieldCache
operator|.
name|Longs
name|ndv
init|=
name|FieldCache
operator|.
name|DEFAULT
operator|.
name|getLongs
argument_list|(
name|ar
argument_list|,
literal|"number"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|//BinaryDocValues bdv = ar.getBinaryDocValues("bytes");
name|BinaryDocValues
name|bdv
init|=
name|FieldCache
operator|.
name|DEFAULT
operator|.
name|getTerms
argument_list|(
name|ar
argument_list|,
literal|"bytes"
argument_list|)
decl_stmt|;
name|SortedDocValues
name|sdv
init|=
name|FieldCache
operator|.
name|DEFAULT
operator|.
name|getTermsIndex
argument_list|(
name|ar
argument_list|,
literal|"sorted"
argument_list|)
decl_stmt|;
name|startingGun
operator|.
name|await
argument_list|()
expr_stmt|;
name|int
name|iters
init|=
name|atLeast
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
name|BytesRef
name|scratch
init|=
operator|new
name|BytesRef
argument_list|()
decl_stmt|;
name|BytesRef
name|scratch2
init|=
operator|new
name|BytesRef
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|iter
init|=
literal|0
init|;
name|iter
operator|<
name|iters
condition|;
name|iter
operator|++
control|)
block|{
name|int
name|docID
init|=
name|threadRandom
operator|.
name|nextInt
argument_list|(
name|numDocs
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|threadRandom
operator|.
name|nextInt
argument_list|(
literal|6
argument_list|)
condition|)
block|{
case|case
literal|0
case|:
name|assertEquals
argument_list|(
operator|(
name|byte
operator|)
name|numbers
operator|.
name|get
argument_list|(
name|docID
argument_list|)
operator|.
name|longValue
argument_list|()
argument_list|,
name|FieldCache
operator|.
name|DEFAULT
operator|.
name|getBytes
argument_list|(
name|ar
argument_list|,
literal|"number"
argument_list|,
literal|false
argument_list|)
operator|.
name|get
argument_list|(
name|docID
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|1
case|:
name|assertEquals
argument_list|(
operator|(
name|short
operator|)
name|numbers
operator|.
name|get
argument_list|(
name|docID
argument_list|)
operator|.
name|longValue
argument_list|()
argument_list|,
name|FieldCache
operator|.
name|DEFAULT
operator|.
name|getShorts
argument_list|(
name|ar
argument_list|,
literal|"number"
argument_list|,
literal|false
argument_list|)
operator|.
name|get
argument_list|(
name|docID
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|2
case|:
name|assertEquals
argument_list|(
operator|(
name|int
operator|)
name|numbers
operator|.
name|get
argument_list|(
name|docID
argument_list|)
operator|.
name|longValue
argument_list|()
argument_list|,
name|FieldCache
operator|.
name|DEFAULT
operator|.
name|getInts
argument_list|(
name|ar
argument_list|,
literal|"number"
argument_list|,
literal|false
argument_list|)
operator|.
name|get
argument_list|(
name|docID
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|3
case|:
name|assertEquals
argument_list|(
name|numbers
operator|.
name|get
argument_list|(
name|docID
argument_list|)
operator|.
name|longValue
argument_list|()
argument_list|,
name|FieldCache
operator|.
name|DEFAULT
operator|.
name|getLongs
argument_list|(
name|ar
argument_list|,
literal|"number"
argument_list|,
literal|false
argument_list|)
operator|.
name|get
argument_list|(
name|docID
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|4
case|:
name|assertEquals
argument_list|(
name|Float
operator|.
name|intBitsToFloat
argument_list|(
operator|(
name|int
operator|)
name|numbers
operator|.
name|get
argument_list|(
name|docID
argument_list|)
operator|.
name|longValue
argument_list|()
argument_list|)
argument_list|,
name|FieldCache
operator|.
name|DEFAULT
operator|.
name|getFloats
argument_list|(
name|ar
argument_list|,
literal|"number"
argument_list|,
literal|false
argument_list|)
operator|.
name|get
argument_list|(
name|docID
argument_list|)
argument_list|,
literal|0.0f
argument_list|)
expr_stmt|;
break|break;
case|case
literal|5
case|:
name|assertEquals
argument_list|(
name|Double
operator|.
name|longBitsToDouble
argument_list|(
name|numbers
operator|.
name|get
argument_list|(
name|docID
argument_list|)
operator|.
name|longValue
argument_list|()
argument_list|)
argument_list|,
name|FieldCache
operator|.
name|DEFAULT
operator|.
name|getDoubles
argument_list|(
name|ar
argument_list|,
literal|"number"
argument_list|,
literal|false
argument_list|)
operator|.
name|get
argument_list|(
name|docID
argument_list|)
argument_list|,
literal|0.0
argument_list|)
expr_stmt|;
break|break;
block|}
name|bdv
operator|.
name|get
argument_list|(
name|docID
argument_list|,
name|scratch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|binary
operator|.
name|get
argument_list|(
name|docID
argument_list|)
argument_list|,
name|scratch
argument_list|)
expr_stmt|;
comment|// Cannot share a single scratch against two "sources":
name|sdv
operator|.
name|get
argument_list|(
name|docID
argument_list|,
name|scratch2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|sorted
operator|.
name|get
argument_list|(
name|docID
argument_list|)
argument_list|,
name|scratch2
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
decl_stmt|;
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
name|threads
operator|.
name|add
argument_list|(
name|thread
argument_list|)
expr_stmt|;
block|}
name|startingGun
operator|.
name|countDown
argument_list|()
expr_stmt|;
for|for
control|(
name|Thread
name|thread
range|:
name|threads
control|)
block|{
name|thread
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class
end_unit
