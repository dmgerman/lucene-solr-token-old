begin_unit
begin_package
DECL|package|org.apache.lucene.index
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|CannedTokenStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|MockAnalyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|MockTokenizer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Token
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|CharTermAttribute
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|OffsetAttribute
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|PayloadAttribute
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|PositionIncrementAttribute
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
operator|.
name|Store
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|FieldType
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|IntField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|TextField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|AttributeImpl
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|_TestUtil
import|;
end_import
begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|generators
operator|.
name|RandomInts
import|;
end_import
begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|generators
operator|.
name|RandomPicks
import|;
end_import
begin_class
DECL|class|TestPayloadsOnVectors
specifier|public
class|class
name|TestPayloadsOnVectors
extends|extends
name|LuceneTestCase
block|{
comment|/** some docs have payload att, some not */
DECL|method|testMixupDocs
specifier|public
name|void
name|testMixupDocs
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriterConfig
name|iwc
init|=
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|iwc
operator|.
name|setMergePolicy
argument_list|(
name|newLogMergePolicy
argument_list|()
argument_list|)
expr_stmt|;
name|RandomIndexWriter
name|writer
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|,
name|iwc
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|FieldType
name|customType
init|=
operator|new
name|FieldType
argument_list|(
name|TextField
operator|.
name|TYPE_NOT_STORED
argument_list|)
decl_stmt|;
name|customType
operator|.
name|setStoreTermVectors
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|customType
operator|.
name|setStoreTermVectorPositions
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|customType
operator|.
name|setStoreTermVectorPayloads
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|customType
operator|.
name|setStoreTermVectorOffsets
argument_list|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
argument_list|)
expr_stmt|;
name|Field
name|field
init|=
operator|new
name|Field
argument_list|(
literal|"field"
argument_list|,
literal|""
argument_list|,
name|customType
argument_list|)
decl_stmt|;
name|TokenStream
name|ts
init|=
operator|new
name|MockTokenizer
argument_list|(
operator|new
name|StringReader
argument_list|(
literal|"here we go"
argument_list|)
argument_list|,
name|MockTokenizer
operator|.
name|WHITESPACE
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|ts
operator|.
name|hasAttribute
argument_list|(
name|PayloadAttribute
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|field
operator|.
name|setTokenStream
argument_list|(
name|ts
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|Token
name|withPayload
init|=
operator|new
name|Token
argument_list|(
literal|"withPayload"
argument_list|,
literal|0
argument_list|,
literal|11
argument_list|)
decl_stmt|;
name|withPayload
operator|.
name|setPayload
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
name|ts
operator|=
operator|new
name|CannedTokenStream
argument_list|(
name|withPayload
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ts
operator|.
name|hasAttribute
argument_list|(
name|PayloadAttribute
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|field
operator|.
name|setTokenStream
argument_list|(
name|ts
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|ts
operator|=
operator|new
name|MockTokenizer
argument_list|(
operator|new
name|StringReader
argument_list|(
literal|"another"
argument_list|)
argument_list|,
name|MockTokenizer
operator|.
name|WHITESPACE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ts
operator|.
name|hasAttribute
argument_list|(
name|PayloadAttribute
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|field
operator|.
name|setTokenStream
argument_list|(
name|ts
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|DirectoryReader
name|reader
init|=
name|writer
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|Terms
name|terms
init|=
name|reader
operator|.
name|getTermVector
argument_list|(
literal|1
argument_list|,
literal|"field"
argument_list|)
decl_stmt|;
assert|assert
name|terms
operator|!=
literal|null
assert|;
name|TermsEnum
name|termsEnum
init|=
name|terms
operator|.
name|iterator
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|termsEnum
operator|.
name|seekExact
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"withPayload"
argument_list|)
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|DocsAndPositionsEnum
name|de
init|=
name|termsEnum
operator|.
name|docsAndPositions
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|de
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|de
operator|.
name|nextPosition
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"test"
argument_list|)
argument_list|,
name|de
operator|.
name|getPayload
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/** some field instances have payload att, some not */
DECL|method|testMixupMultiValued
specifier|public
name|void
name|testMixupMultiValued
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|RandomIndexWriter
name|writer
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|FieldType
name|customType
init|=
operator|new
name|FieldType
argument_list|(
name|TextField
operator|.
name|TYPE_NOT_STORED
argument_list|)
decl_stmt|;
name|customType
operator|.
name|setStoreTermVectors
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|customType
operator|.
name|setStoreTermVectorPositions
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|customType
operator|.
name|setStoreTermVectorPayloads
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|customType
operator|.
name|setStoreTermVectorOffsets
argument_list|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
argument_list|)
expr_stmt|;
name|Field
name|field
init|=
operator|new
name|Field
argument_list|(
literal|"field"
argument_list|,
literal|""
argument_list|,
name|customType
argument_list|)
decl_stmt|;
name|TokenStream
name|ts
init|=
operator|new
name|MockTokenizer
argument_list|(
operator|new
name|StringReader
argument_list|(
literal|"here we go"
argument_list|)
argument_list|,
name|MockTokenizer
operator|.
name|WHITESPACE
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|ts
operator|.
name|hasAttribute
argument_list|(
name|PayloadAttribute
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|field
operator|.
name|setTokenStream
argument_list|(
name|ts
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|Field
name|field2
init|=
operator|new
name|Field
argument_list|(
literal|"field"
argument_list|,
literal|""
argument_list|,
name|customType
argument_list|)
decl_stmt|;
name|Token
name|withPayload
init|=
operator|new
name|Token
argument_list|(
literal|"withPayload"
argument_list|,
literal|0
argument_list|,
literal|11
argument_list|)
decl_stmt|;
name|withPayload
operator|.
name|setPayload
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
name|ts
operator|=
operator|new
name|CannedTokenStream
argument_list|(
name|withPayload
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ts
operator|.
name|hasAttribute
argument_list|(
name|PayloadAttribute
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|field2
operator|.
name|setTokenStream
argument_list|(
name|ts
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|field2
argument_list|)
expr_stmt|;
name|Field
name|field3
init|=
operator|new
name|Field
argument_list|(
literal|"field"
argument_list|,
literal|""
argument_list|,
name|customType
argument_list|)
decl_stmt|;
name|ts
operator|=
operator|new
name|MockTokenizer
argument_list|(
operator|new
name|StringReader
argument_list|(
literal|"nopayload"
argument_list|)
argument_list|,
name|MockTokenizer
operator|.
name|WHITESPACE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ts
operator|.
name|hasAttribute
argument_list|(
name|PayloadAttribute
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|field3
operator|.
name|setTokenStream
argument_list|(
name|ts
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|field3
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|DirectoryReader
name|reader
init|=
name|writer
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|Terms
name|terms
init|=
name|reader
operator|.
name|getTermVector
argument_list|(
literal|0
argument_list|,
literal|"field"
argument_list|)
decl_stmt|;
assert|assert
name|terms
operator|!=
literal|null
assert|;
name|TermsEnum
name|termsEnum
init|=
name|terms
operator|.
name|iterator
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|termsEnum
operator|.
name|seekExact
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"withPayload"
argument_list|)
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|DocsAndPositionsEnum
name|de
init|=
name|termsEnum
operator|.
name|docsAndPositions
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|de
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|de
operator|.
name|nextPosition
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"test"
argument_list|)
argument_list|,
name|de
operator|.
name|getPayload
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testPayloadsWithoutPositions
specifier|public
name|void
name|testPayloadsWithoutPositions
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|RandomIndexWriter
name|writer
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|FieldType
name|customType
init|=
operator|new
name|FieldType
argument_list|(
name|TextField
operator|.
name|TYPE_NOT_STORED
argument_list|)
decl_stmt|;
name|customType
operator|.
name|setStoreTermVectors
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|customType
operator|.
name|setStoreTermVectorPositions
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|customType
operator|.
name|setStoreTermVectorPayloads
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|customType
operator|.
name|setStoreTermVectorOffsets
argument_list|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"field"
argument_list|,
literal|"foo"
argument_list|,
name|customType
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{
comment|// expected
block|}
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// custom impl to test cases that are forbidden by the default OffsetAttribute impl
DECL|class|PermissiveOffsetAttributeImpl
specifier|static
class|class
name|PermissiveOffsetAttributeImpl
extends|extends
name|AttributeImpl
implements|implements
name|OffsetAttribute
block|{
DECL|field|start
DECL|field|end
name|int
name|start
decl_stmt|,
name|end
decl_stmt|;
annotation|@
name|Override
DECL|method|startOffset
specifier|public
name|int
name|startOffset
parameter_list|()
block|{
return|return
name|start
return|;
block|}
annotation|@
name|Override
DECL|method|endOffset
specifier|public
name|int
name|endOffset
parameter_list|()
block|{
return|return
name|end
return|;
block|}
annotation|@
name|Override
DECL|method|setOffset
specifier|public
name|void
name|setOffset
parameter_list|(
name|int
name|startOffset
parameter_list|,
name|int
name|endOffset
parameter_list|)
block|{
comment|// no check!
name|start
operator|=
name|startOffset
expr_stmt|;
name|end
operator|=
name|endOffset
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|clear
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|start
operator|=
name|end
operator|=
literal|0
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|==
name|this
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|other
operator|instanceof
name|PermissiveOffsetAttributeImpl
condition|)
block|{
name|PermissiveOffsetAttributeImpl
name|o
init|=
operator|(
name|PermissiveOffsetAttributeImpl
operator|)
name|other
decl_stmt|;
return|return
name|o
operator|.
name|start
operator|==
name|start
operator|&&
name|o
operator|.
name|end
operator|==
name|end
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|start
operator|+
literal|31
operator|*
name|end
return|;
block|}
annotation|@
name|Override
DECL|method|copyTo
specifier|public
name|void
name|copyTo
parameter_list|(
name|AttributeImpl
name|target
parameter_list|)
block|{
name|OffsetAttribute
name|t
init|=
operator|(
name|OffsetAttribute
operator|)
name|target
decl_stmt|;
name|t
operator|.
name|setOffset
argument_list|(
name|start
argument_list|,
name|end
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|randomPayload
specifier|static
name|BytesRef
name|randomPayload
parameter_list|()
block|{
specifier|final
name|int
name|len
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|5
argument_list|)
decl_stmt|;
if|if
condition|(
name|len
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|BytesRef
name|payload
init|=
operator|new
name|BytesRef
argument_list|(
name|len
argument_list|)
decl_stmt|;
name|random
argument_list|()
operator|.
name|nextBytes
argument_list|(
name|payload
operator|.
name|bytes
argument_list|)
expr_stmt|;
name|payload
operator|.
name|length
operator|=
name|len
expr_stmt|;
return|return
name|payload
return|;
block|}
DECL|class|RandomTokenStream
class|class
name|RandomTokenStream
extends|extends
name|TokenStream
block|{
DECL|field|terms
specifier|final
name|String
index|[]
name|terms
decl_stmt|;
DECL|field|positionsIncrements
specifier|final
name|int
index|[]
name|positionsIncrements
decl_stmt|;
DECL|field|positions
specifier|final
name|int
index|[]
name|positions
decl_stmt|;
DECL|field|startOffsets
DECL|field|endOffsets
specifier|final
name|int
index|[]
name|startOffsets
decl_stmt|,
name|endOffsets
decl_stmt|;
DECL|field|payloads
specifier|final
name|BytesRef
index|[]
name|payloads
decl_stmt|;
DECL|field|positionToTerms
specifier|final
name|Map
argument_list|<
name|Integer
argument_list|,
name|Set
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|positionToTerms
decl_stmt|;
DECL|field|startOffsetToTerms
specifier|final
name|Map
argument_list|<
name|Integer
argument_list|,
name|Set
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|startOffsetToTerms
decl_stmt|;
DECL|field|termAtt
specifier|final
name|CharTermAttribute
name|termAtt
decl_stmt|;
DECL|field|piAtt
specifier|final
name|PositionIncrementAttribute
name|piAtt
decl_stmt|;
DECL|field|oAtt
specifier|final
name|OffsetAttribute
name|oAtt
decl_stmt|;
DECL|field|pAtt
specifier|final
name|PayloadAttribute
name|pAtt
decl_stmt|;
DECL|field|i
name|int
name|i
init|=
literal|0
decl_stmt|;
DECL|method|RandomTokenStream
name|RandomTokenStream
parameter_list|(
name|int
name|len
parameter_list|,
name|String
index|[]
name|sampleTerms
parameter_list|,
name|boolean
name|weird
parameter_list|)
block|{
name|terms
operator|=
operator|new
name|String
index|[
name|len
index|]
expr_stmt|;
name|positionsIncrements
operator|=
operator|new
name|int
index|[
name|len
index|]
expr_stmt|;
name|positions
operator|=
operator|new
name|int
index|[
name|len
index|]
expr_stmt|;
name|startOffsets
operator|=
operator|new
name|int
index|[
name|len
index|]
expr_stmt|;
name|endOffsets
operator|=
operator|new
name|int
index|[
name|len
index|]
expr_stmt|;
name|payloads
operator|=
operator|new
name|BytesRef
index|[
name|len
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
operator|++
name|i
control|)
block|{
name|terms
index|[
name|i
index|]
operator|=
name|RandomPicks
operator|.
name|randomFrom
argument_list|(
name|random
argument_list|()
argument_list|,
name|sampleTerms
argument_list|)
expr_stmt|;
if|if
condition|(
name|weird
condition|)
block|{
name|positionsIncrements
index|[
name|i
index|]
operator|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|1
operator|<<
literal|18
argument_list|)
expr_stmt|;
name|startOffsets
index|[
name|i
index|]
operator|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|()
expr_stmt|;
name|endOffsets
index|[
name|i
index|]
operator|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
name|positionsIncrements
index|[
name|i
index|]
operator|=
name|_TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|1
operator|<<
literal|5
argument_list|)
expr_stmt|;
name|startOffsets
index|[
name|i
index|]
operator|=
name|_TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|1
operator|<<
literal|16
argument_list|)
expr_stmt|;
name|endOffsets
index|[
name|i
index|]
operator|=
name|startOffsets
index|[
name|i
index|]
operator|+
name|_TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|0
argument_list|,
name|rarely
argument_list|()
condition|?
literal|1
operator|<<
literal|10
else|:
literal|20
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|positionsIncrements
index|[
name|i
index|]
operator|=
name|_TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|1
operator|<<
literal|5
argument_list|)
expr_stmt|;
name|startOffsets
index|[
name|i
index|]
operator|=
name|startOffsets
index|[
name|i
operator|-
literal|1
index|]
operator|+
name|_TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|1
operator|<<
literal|16
argument_list|)
expr_stmt|;
name|endOffsets
index|[
name|i
index|]
operator|=
name|startOffsets
index|[
name|i
index|]
operator|+
name|_TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|0
argument_list|,
name|rarely
argument_list|()
condition|?
literal|1
operator|<<
literal|10
else|:
literal|20
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
name|positions
index|[
name|i
index|]
operator|=
name|positionsIncrements
index|[
name|i
index|]
operator|-
literal|1
expr_stmt|;
block|}
else|else
block|{
name|positions
index|[
name|i
index|]
operator|=
name|positions
index|[
name|i
operator|-
literal|1
index|]
operator|+
name|positionsIncrements
index|[
name|i
index|]
expr_stmt|;
block|}
block|}
if|if
condition|(
name|rarely
argument_list|()
condition|)
block|{
name|Arrays
operator|.
name|fill
argument_list|(
name|payloads
argument_list|,
name|randomPayload
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
operator|++
name|i
control|)
block|{
name|payloads
index|[
name|i
index|]
operator|=
name|randomPayload
argument_list|()
expr_stmt|;
block|}
block|}
name|positionToTerms
operator|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|Set
argument_list|<
name|Integer
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|startOffsetToTerms
operator|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|Set
argument_list|<
name|Integer
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
operator|!
name|positionToTerms
operator|.
name|containsKey
argument_list|(
name|positions
index|[
name|i
index|]
argument_list|)
condition|)
block|{
name|positionToTerms
operator|.
name|put
argument_list|(
name|positions
index|[
name|i
index|]
argument_list|,
operator|new
name|HashSet
argument_list|<
name|Integer
argument_list|>
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|positionToTerms
operator|.
name|get
argument_list|(
name|positions
index|[
name|i
index|]
argument_list|)
operator|.
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|startOffsetToTerms
operator|.
name|containsKey
argument_list|(
name|startOffsets
index|[
name|i
index|]
argument_list|)
condition|)
block|{
name|startOffsetToTerms
operator|.
name|put
argument_list|(
name|startOffsets
index|[
name|i
index|]
argument_list|,
operator|new
name|HashSet
argument_list|<
name|Integer
argument_list|>
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|startOffsetToTerms
operator|.
name|get
argument_list|(
name|startOffsets
index|[
name|i
index|]
argument_list|)
operator|.
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
name|addAttributeImpl
argument_list|(
operator|new
name|PermissiveOffsetAttributeImpl
argument_list|()
argument_list|)
expr_stmt|;
name|termAtt
operator|=
name|addAttribute
argument_list|(
name|CharTermAttribute
operator|.
name|class
argument_list|)
expr_stmt|;
name|piAtt
operator|=
name|addAttribute
argument_list|(
name|PositionIncrementAttribute
operator|.
name|class
argument_list|)
expr_stmt|;
name|oAtt
operator|=
name|addAttribute
argument_list|(
name|OffsetAttribute
operator|.
name|class
argument_list|)
expr_stmt|;
name|pAtt
operator|=
name|addAttribute
argument_list|(
name|PayloadAttribute
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|incrementToken
specifier|public
specifier|final
name|boolean
name|incrementToken
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|i
operator|<
name|terms
operator|.
name|length
condition|)
block|{
name|termAtt
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
operator|.
name|append
argument_list|(
name|terms
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|piAtt
operator|.
name|setPositionIncrement
argument_list|(
name|positionsIncrements
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|oAtt
operator|.
name|setOffset
argument_list|(
name|startOffsets
index|[
name|i
index|]
argument_list|,
name|endOffsets
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|pAtt
operator|.
name|setPayload
argument_list|(
name|payloads
index|[
name|i
index|]
argument_list|)
expr_stmt|;
operator|++
name|i
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
DECL|method|randomFieldType
specifier|static
name|FieldType
name|randomFieldType
parameter_list|()
block|{
name|FieldType
name|ft
init|=
operator|new
name|FieldType
argument_list|(
name|TextField
operator|.
name|TYPE_NOT_STORED
argument_list|)
decl_stmt|;
name|ft
operator|.
name|setStoreTermVectors
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ft
operator|.
name|setStoreTermVectorPositions
argument_list|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
argument_list|)
expr_stmt|;
name|ft
operator|.
name|setStoreTermVectorOffsets
argument_list|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|ft
operator|.
name|setStoreTermVectorPositions
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ft
operator|.
name|setStoreTermVectorPayloads
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|ft
operator|.
name|freeze
argument_list|()
expr_stmt|;
return|return
name|ft
return|;
block|}
DECL|method|testRandomVectors
specifier|public
name|void
name|testRandomVectors
parameter_list|()
throws|throws
name|IOException
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriterConfig
name|iwConf
init|=
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|iwConf
operator|.
name|setMaxBufferedDocs
argument_list|(
name|RandomInts
operator|.
name|randomIntBetween
argument_list|(
name|random
argument_list|()
argument_list|,
literal|2
argument_list|,
literal|30
argument_list|)
argument_list|)
expr_stmt|;
name|RandomIndexWriter
name|iw
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|,
name|iwConf
argument_list|)
decl_stmt|;
name|String
index|[]
name|sampleTerms
init|=
operator|new
name|String
index|[
name|RandomInts
operator|.
name|randomIntBetween
argument_list|(
name|random
argument_list|()
argument_list|,
literal|20
argument_list|,
literal|50
argument_list|)
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sampleTerms
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|sampleTerms
index|[
name|i
index|]
operator|=
name|_TestUtil
operator|.
name|randomUnicodeString
argument_list|(
name|random
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|FieldType
name|ft
init|=
name|randomFieldType
argument_list|()
decl_stmt|;
comment|// generate random documents and index them
specifier|final
name|String
index|[]
name|fieldNames
init|=
operator|new
name|String
index|[
name|_TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|200
argument_list|)
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fieldNames
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|String
name|fieldName
decl_stmt|;
do|do
block|{
name|fieldName
operator|=
name|_TestUtil
operator|.
name|randomSimpleString
argument_list|(
name|random
argument_list|()
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
literal|"id"
operator|.
name|equals
argument_list|(
name|fieldName
argument_list|)
condition|)
do|;
name|fieldNames
index|[
name|i
index|]
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|final
name|int
name|numDocs
init|=
name|_TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|10
argument_list|,
literal|100
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|RandomTokenStream
argument_list|>
index|[]
name|fieldValues
init|=
operator|new
name|Map
index|[
name|numDocs
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
operator|++
name|i
control|)
block|{
name|fieldValues
index|[
name|i
index|]
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|RandomTokenStream
argument_list|>
argument_list|()
expr_stmt|;
specifier|final
name|int
name|numFields
init|=
name|_TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|0
argument_list|,
name|rarely
argument_list|()
condition|?
name|fieldNames
operator|.
name|length
else|:
literal|5
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|numFields
condition|;
operator|++
name|j
control|)
block|{
specifier|final
name|String
name|fieldName
init|=
name|fieldNames
index|[
operator|(
name|i
operator|+
name|j
operator|*
literal|31
operator|)
operator|%
name|fieldNames
operator|.
name|length
index|]
decl_stmt|;
specifier|final
name|int
name|tokenStreamLen
init|=
name|_TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
name|rarely
argument_list|()
condition|?
literal|300
else|:
literal|5
argument_list|)
decl_stmt|;
name|fieldValues
index|[
name|i
index|]
operator|.
name|put
argument_list|(
name|fieldName
argument_list|,
operator|new
name|RandomTokenStream
argument_list|(
name|tokenStreamLen
argument_list|,
name|sampleTerms
argument_list|,
name|rarely
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// index them
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
operator|++
name|i
control|)
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|IntField
argument_list|(
literal|"id"
argument_list|,
name|i
argument_list|,
name|Store
operator|.
name|YES
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|RandomTokenStream
argument_list|>
name|entry
range|:
name|fieldValues
index|[
name|i
index|]
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
name|ft
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|iw
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
name|iw
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|// make sure the format can merge
name|iw
operator|.
name|forceMerge
argument_list|(
literal|2
argument_list|)
expr_stmt|;
comment|// read term vectors
specifier|final
name|DirectoryReader
name|reader
init|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|dir
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
operator|++
name|i
control|)
block|{
specifier|final
name|int
name|docID
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|numDocs
argument_list|)
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|RandomTokenStream
argument_list|>
name|fvs
init|=
name|fieldValues
index|[
name|reader
operator|.
name|document
argument_list|(
name|docID
argument_list|)
operator|.
name|getField
argument_list|(
literal|"id"
argument_list|)
operator|.
name|numericValue
argument_list|()
operator|.
name|intValue
argument_list|()
index|]
decl_stmt|;
specifier|final
name|Fields
name|fields
init|=
name|reader
operator|.
name|getTermVectors
argument_list|(
name|docID
argument_list|)
decl_stmt|;
if|if
condition|(
name|fvs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|assertNull
argument_list|(
name|fields
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|fns
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|field
range|:
name|fields
control|)
block|{
name|fns
operator|.
name|add
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|fields
operator|.
name|size
argument_list|()
argument_list|,
name|fns
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|fvs
operator|.
name|keySet
argument_list|()
argument_list|,
name|fns
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|field
range|:
name|fields
control|)
block|{
specifier|final
name|RandomTokenStream
name|tk
init|=
name|fvs
operator|.
name|get
argument_list|(
name|field
argument_list|)
decl_stmt|;
assert|assert
name|tk
operator|!=
literal|null
assert|;
specifier|final
name|Terms
name|terms
init|=
name|fields
operator|.
name|terms
argument_list|(
name|field
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ft
operator|.
name|storeTermVectorPositions
argument_list|()
argument_list|,
name|terms
operator|.
name|hasPositions
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ft
operator|.
name|storeTermVectorOffsets
argument_list|()
argument_list|,
name|terms
operator|.
name|hasOffsets
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|terms
operator|.
name|getDocCount
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|TermsEnum
name|termsEnum
init|=
name|terms
operator|.
name|iterator
argument_list|(
literal|null
argument_list|)
decl_stmt|;
while|while
condition|(
name|termsEnum
operator|.
name|next
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|termsEnum
operator|.
name|docFreq
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|DocsAndPositionsEnum
name|docsAndPositionsEnum
init|=
name|termsEnum
operator|.
name|docsAndPositions
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
specifier|final
name|DocsEnum
name|docsEnum
init|=
name|docsAndPositionsEnum
operator|==
literal|null
condition|?
name|termsEnum
operator|.
name|docs
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
else|:
name|docsAndPositionsEnum
decl_stmt|;
if|if
condition|(
name|ft
operator|.
name|storeTermVectorOffsets
argument_list|()
operator|||
name|ft
operator|.
name|storeTermVectorPositions
argument_list|()
condition|)
block|{
name|assertNotNull
argument_list|(
name|docsAndPositionsEnum
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|docsEnum
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|terms
operator|.
name|hasPositions
argument_list|()
operator|||
name|terms
operator|.
name|hasOffsets
argument_list|()
condition|)
block|{
specifier|final
name|int
name|freq
init|=
name|docsEnum
operator|.
name|freq
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|freq
operator|>=
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|docsAndPositionsEnum
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|freq
condition|;
operator|++
name|k
control|)
block|{
specifier|final
name|int
name|position
init|=
name|docsAndPositionsEnum
operator|.
name|nextPosition
argument_list|()
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|Integer
argument_list|>
name|indexes
decl_stmt|;
if|if
condition|(
name|terms
operator|.
name|hasPositions
argument_list|()
condition|)
block|{
name|indexes
operator|=
name|tk
operator|.
name|positionToTerms
operator|.
name|get
argument_list|(
name|position
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|tk
operator|.
name|positionToTerms
operator|.
name|keySet
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|" does not contain "
operator|+
name|position
argument_list|,
name|indexes
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|indexes
operator|=
name|tk
operator|.
name|startOffsetToTerms
operator|.
name|get
argument_list|(
name|docsAndPositionsEnum
operator|.
name|startOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|indexes
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|terms
operator|.
name|hasPositions
argument_list|()
condition|)
block|{
name|boolean
name|foundPosition
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|index
range|:
name|indexes
control|)
block|{
if|if
condition|(
operator|new
name|BytesRef
argument_list|(
name|tk
operator|.
name|terms
index|[
name|index
index|]
argument_list|)
operator|.
name|equals
argument_list|(
name|termsEnum
operator|.
name|term
argument_list|()
argument_list|)
operator|&&
name|tk
operator|.
name|positions
index|[
name|index
index|]
operator|==
name|position
condition|)
block|{
name|foundPosition
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
name|assertTrue
argument_list|(
name|foundPosition
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|terms
operator|.
name|hasOffsets
argument_list|()
condition|)
block|{
name|boolean
name|foundOffset
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|index
range|:
name|indexes
control|)
block|{
if|if
condition|(
operator|new
name|BytesRef
argument_list|(
name|tk
operator|.
name|terms
index|[
name|index
index|]
argument_list|)
operator|.
name|equals
argument_list|(
name|termsEnum
operator|.
name|term
argument_list|()
argument_list|)
operator|&&
name|tk
operator|.
name|startOffsets
index|[
name|index
index|]
operator|==
name|docsAndPositionsEnum
operator|.
name|startOffset
argument_list|()
operator|&&
name|tk
operator|.
name|endOffsets
index|[
name|index
index|]
operator|==
name|docsAndPositionsEnum
operator|.
name|endOffset
argument_list|()
condition|)
block|{
name|foundOffset
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
name|assertTrue
argument_list|(
name|foundOffset
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|terms
operator|.
name|hasPayloads
argument_list|()
condition|)
block|{
name|boolean
name|foundPayload
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|index
range|:
name|indexes
control|)
block|{
if|if
condition|(
operator|new
name|BytesRef
argument_list|(
name|tk
operator|.
name|terms
index|[
name|index
index|]
argument_list|)
operator|.
name|equals
argument_list|(
name|termsEnum
operator|.
name|term
argument_list|()
argument_list|)
operator|&&
name|equals
argument_list|(
name|tk
operator|.
name|payloads
index|[
name|index
index|]
argument_list|,
name|docsAndPositionsEnum
operator|.
name|getPayload
argument_list|()
argument_list|)
condition|)
block|{
name|foundPayload
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
name|assertTrue
argument_list|(
name|foundPayload
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
name|DocsEnum
operator|.
name|NO_MORE_DOCS
argument_list|,
name|docsEnum
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|IOUtils
operator|.
name|close
argument_list|(
name|reader
argument_list|,
name|iw
argument_list|,
name|dir
argument_list|)
expr_stmt|;
block|}
DECL|method|equals
specifier|private
specifier|static
name|boolean
name|equals
parameter_list|(
name|Object
name|o1
parameter_list|,
name|Object
name|o2
parameter_list|)
block|{
if|if
condition|(
name|o1
operator|==
literal|null
condition|)
block|{
return|return
name|o2
operator|==
literal|null
return|;
block|}
else|else
block|{
return|return
name|o1
operator|.
name|equals
argument_list|(
name|o2
argument_list|)
return|;
block|}
block|}
block|}
end_class
end_unit
