begin_unit
begin_package
DECL|package|org.apache.lucene.index
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
package|;
end_package
begin_comment
comment|/**  * Copyright 2004 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|MockAnalyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|Codec
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|StringField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|TextField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TermQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TopDocs
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|AlreadyClosedException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|MockDirectoryWrapper
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|RAMDirectory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|ThreadInterruptedException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|_TestUtil
import|;
end_import
begin_class
DECL|class|TestIndexWriterReader
specifier|public
class|class
name|TestIndexWriterReader
extends|extends
name|LuceneTestCase
block|{
DECL|field|numThreads
specifier|private
specifier|final
name|int
name|numThreads
init|=
name|TEST_NIGHTLY
condition|?
literal|5
else|:
literal|3
decl_stmt|;
DECL|method|count
specifier|public
specifier|static
name|int
name|count
parameter_list|(
name|Term
name|t
parameter_list|,
name|IndexReader
name|r
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
name|DocsEnum
name|td
init|=
name|_TestUtil
operator|.
name|docs
argument_list|(
name|random
argument_list|,
name|r
argument_list|,
name|t
operator|.
name|field
argument_list|()
argument_list|,
operator|new
name|BytesRef
argument_list|(
name|t
operator|.
name|text
argument_list|()
argument_list|)
argument_list|,
name|MultiFields
operator|.
name|getLiveDocs
argument_list|(
name|r
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|td
operator|!=
literal|null
condition|)
block|{
while|while
condition|(
name|td
operator|.
name|nextDoc
argument_list|()
operator|!=
name|DocsEnum
operator|.
name|NO_MORE_DOCS
condition|)
block|{
name|td
operator|.
name|docID
argument_list|()
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
block|}
return|return
name|count
return|;
block|}
DECL|method|testAddCloseOpen
specifier|public
name|void
name|testAddCloseOpen
parameter_list|()
throws|throws
name|IOException
block|{
name|Directory
name|dir1
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriterConfig
name|iwc
init|=
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|)
argument_list|)
decl_stmt|;
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir1
argument_list|,
name|iwc
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|97
condition|;
name|i
operator|++
control|)
block|{
name|DirectoryReader
name|reader
init|=
name|writer
operator|.
name|getReader
argument_list|()
decl_stmt|;
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
name|writer
operator|.
name|addDocument
argument_list|(
name|DocHelper
operator|.
name|createDocument
argument_list|(
name|i
argument_list|,
literal|"x"
argument_list|,
literal|1
operator|+
name|random
operator|.
name|nextInt
argument_list|(
literal|5
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|int
name|previous
init|=
name|random
operator|.
name|nextInt
argument_list|(
name|i
argument_list|)
decl_stmt|;
comment|// a check if the reader is current here could fail since there might be
comment|// merges going on.
switch|switch
condition|(
name|random
operator|.
name|nextInt
argument_list|(
literal|5
argument_list|)
condition|)
block|{
case|case
literal|0
case|:
case|case
literal|1
case|:
case|case
literal|2
case|:
name|writer
operator|.
name|addDocument
argument_list|(
name|DocHelper
operator|.
name|createDocument
argument_list|(
name|i
argument_list|,
literal|"x"
argument_list|,
literal|1
operator|+
name|random
operator|.
name|nextInt
argument_list|(
literal|5
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|3
case|:
name|writer
operator|.
name|updateDocument
argument_list|(
operator|new
name|Term
argument_list|(
literal|"id"
argument_list|,
literal|""
operator|+
name|previous
argument_list|)
argument_list|,
name|DocHelper
operator|.
name|createDocument
argument_list|(
name|previous
argument_list|,
literal|"x"
argument_list|,
literal|1
operator|+
name|random
operator|.
name|nextInt
argument_list|(
literal|5
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|4
case|:
name|writer
operator|.
name|deleteDocuments
argument_list|(
operator|new
name|Term
argument_list|(
literal|"id"
argument_list|,
literal|""
operator|+
name|previous
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|assertFalse
argument_list|(
name|reader
operator|.
name|isCurrent
argument_list|()
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|writer
operator|.
name|forceMerge
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// make sure all merging is done etc.
name|DirectoryReader
name|reader
init|=
name|writer
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|writer
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|// no changes that are not visible to the reader
name|assertTrue
argument_list|(
name|reader
operator|.
name|isCurrent
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|reader
operator|.
name|isCurrent
argument_list|()
argument_list|)
expr_stmt|;
comment|// all changes are visible to the reader
name|iwc
operator|=
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|=
operator|new
name|IndexWriter
argument_list|(
name|dir1
argument_list|,
name|iwc
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|reader
operator|.
name|isCurrent
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|DocHelper
operator|.
name|createDocument
argument_list|(
literal|1
argument_list|,
literal|"x"
argument_list|,
literal|1
operator|+
name|random
operator|.
name|nextInt
argument_list|(
literal|5
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|reader
operator|.
name|isCurrent
argument_list|()
argument_list|)
expr_stmt|;
comment|// segments in ram but IW is different to the readers one
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|reader
operator|.
name|isCurrent
argument_list|()
argument_list|)
expr_stmt|;
comment|// segments written
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir1
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testUpdateDocument
specifier|public
name|void
name|testUpdateDocument
parameter_list|()
throws|throws
name|Exception
block|{
name|boolean
name|doFullMerge
init|=
literal|true
decl_stmt|;
name|Directory
name|dir1
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriterConfig
name|iwc
init|=
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|iwc
operator|.
name|getMaxBufferedDocs
argument_list|()
operator|<
literal|20
condition|)
block|{
name|iwc
operator|.
name|setMaxBufferedDocs
argument_list|(
literal|20
argument_list|)
expr_stmt|;
block|}
comment|// no merging
if|if
condition|(
name|random
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|iwc
operator|.
name|setMergePolicy
argument_list|(
name|NoMergePolicy
operator|.
name|NO_COMPOUND_FILES
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iwc
operator|.
name|setMergePolicy
argument_list|(
name|NoMergePolicy
operator|.
name|COMPOUND_FILES
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TEST: make index"
argument_list|)
expr_stmt|;
block|}
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir1
argument_list|,
name|iwc
argument_list|)
decl_stmt|;
comment|// create the index
name|createIndexNoClose
argument_list|(
operator|!
name|doFullMerge
argument_list|,
literal|"index1"
argument_list|,
name|writer
argument_list|)
expr_stmt|;
comment|// writer.flush(false, true, true);
comment|// get a reader
name|DirectoryReader
name|r1
init|=
name|writer
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|r1
operator|.
name|isCurrent
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|id10
init|=
name|r1
operator|.
name|document
argument_list|(
literal|10
argument_list|)
operator|.
name|getField
argument_list|(
literal|"id"
argument_list|)
operator|.
name|stringValue
argument_list|()
decl_stmt|;
name|Document
name|newDoc
init|=
name|r1
operator|.
name|document
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|newDoc
operator|.
name|removeField
argument_list|(
literal|"id"
argument_list|)
expr_stmt|;
name|newDoc
operator|.
name|add
argument_list|(
name|newField
argument_list|(
literal|"id"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
literal|8000
argument_list|)
argument_list|,
name|StringField
operator|.
name|TYPE_STORED
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|updateDocument
argument_list|(
operator|new
name|Term
argument_list|(
literal|"id"
argument_list|,
name|id10
argument_list|)
argument_list|,
name|newDoc
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|r1
operator|.
name|isCurrent
argument_list|()
argument_list|)
expr_stmt|;
name|DirectoryReader
name|r2
init|=
name|writer
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|r2
operator|.
name|isCurrent
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|count
argument_list|(
operator|new
name|Term
argument_list|(
literal|"id"
argument_list|,
name|id10
argument_list|)
argument_list|,
name|r2
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TEST: verify id"
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|count
argument_list|(
operator|new
name|Term
argument_list|(
literal|"id"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
literal|8000
argument_list|)
argument_list|)
argument_list|,
name|r2
argument_list|)
argument_list|)
expr_stmt|;
name|r1
operator|.
name|close
argument_list|()
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|r2
operator|.
name|isCurrent
argument_list|()
argument_list|)
expr_stmt|;
name|DirectoryReader
name|r3
init|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir1
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|r3
operator|.
name|isCurrent
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|r2
operator|.
name|isCurrent
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|count
argument_list|(
operator|new
name|Term
argument_list|(
literal|"id"
argument_list|,
name|id10
argument_list|)
argument_list|,
name|r3
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|count
argument_list|(
operator|new
name|Term
argument_list|(
literal|"id"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
literal|8000
argument_list|)
argument_list|)
argument_list|,
name|r3
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|=
operator|new
name|IndexWriter
argument_list|(
name|dir1
argument_list|,
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newField
argument_list|(
literal|"field"
argument_list|,
literal|"a b c"
argument_list|,
name|TextField
operator|.
name|TYPE_UNSTORED
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|r2
operator|.
name|isCurrent
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|r3
operator|.
name|isCurrent
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|r2
operator|.
name|isCurrent
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|r3
operator|.
name|isCurrent
argument_list|()
argument_list|)
expr_stmt|;
name|r2
operator|.
name|close
argument_list|()
expr_stmt|;
name|r3
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir1
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testIsCurrent
specifier|public
name|void
name|testIsCurrent
parameter_list|()
throws|throws
name|IOException
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriterConfig
name|iwc
init|=
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|)
argument_list|)
decl_stmt|;
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|iwc
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newField
argument_list|(
literal|"field"
argument_list|,
literal|"a b c"
argument_list|,
name|TextField
operator|.
name|TYPE_UNSTORED
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|iwc
operator|=
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|iwc
argument_list|)
expr_stmt|;
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newField
argument_list|(
literal|"field"
argument_list|,
literal|"a b c"
argument_list|,
name|TextField
operator|.
name|TYPE_UNSTORED
argument_list|)
argument_list|)
expr_stmt|;
name|DirectoryReader
name|nrtReader
init|=
name|writer
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|nrtReader
operator|.
name|isCurrent
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|nrtReader
operator|.
name|isCurrent
argument_list|()
argument_list|)
expr_stmt|;
comment|// should see the changes
name|writer
operator|.
name|forceMerge
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// make sure we don't have a merge going on
name|assertFalse
argument_list|(
name|nrtReader
operator|.
name|isCurrent
argument_list|()
argument_list|)
expr_stmt|;
name|nrtReader
operator|.
name|close
argument_list|()
expr_stmt|;
name|DirectoryReader
name|dirReader
init|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|)
decl_stmt|;
name|nrtReader
operator|=
name|writer
operator|.
name|getReader
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|dirReader
operator|.
name|isCurrent
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|nrtReader
operator|.
name|isCurrent
argument_list|()
argument_list|)
expr_stmt|;
comment|// nothing was committed yet so we are still current
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|nrtReader
operator|.
name|maxDoc
argument_list|()
argument_list|)
expr_stmt|;
comment|// sees the actual document added
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|dirReader
operator|.
name|maxDoc
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// close is actually a commit both should see the changes
name|assertTrue
argument_list|(
name|nrtReader
operator|.
name|isCurrent
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|dirReader
operator|.
name|isCurrent
argument_list|()
argument_list|)
expr_stmt|;
comment|// this reader has been opened before the writer was closed / committed
name|dirReader
operator|.
name|close
argument_list|()
expr_stmt|;
name|nrtReader
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * Test using IW.addIndexes    *     * @throws Exception    */
DECL|method|testAddIndexes
specifier|public
name|void
name|testAddIndexes
parameter_list|()
throws|throws
name|Exception
block|{
name|boolean
name|doFullMerge
init|=
literal|false
decl_stmt|;
name|Directory
name|dir1
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriterConfig
name|iwc
init|=
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|iwc
operator|.
name|getMaxBufferedDocs
argument_list|()
operator|<
literal|20
condition|)
block|{
name|iwc
operator|.
name|setMaxBufferedDocs
argument_list|(
literal|20
argument_list|)
expr_stmt|;
block|}
comment|// no merging
if|if
condition|(
name|random
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|iwc
operator|.
name|setMergePolicy
argument_list|(
name|NoMergePolicy
operator|.
name|NO_COMPOUND_FILES
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iwc
operator|.
name|setMergePolicy
argument_list|(
name|NoMergePolicy
operator|.
name|COMPOUND_FILES
argument_list|)
expr_stmt|;
block|}
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir1
argument_list|,
name|iwc
argument_list|)
decl_stmt|;
comment|// create the index
name|createIndexNoClose
argument_list|(
operator|!
name|doFullMerge
argument_list|,
literal|"index1"
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|writer
operator|.
name|flush
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// create a 2nd index
name|Directory
name|dir2
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|writer2
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir2
argument_list|,
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|createIndexNoClose
argument_list|(
operator|!
name|doFullMerge
argument_list|,
literal|"index2"
argument_list|,
name|writer2
argument_list|)
expr_stmt|;
name|writer2
operator|.
name|close
argument_list|()
expr_stmt|;
name|DirectoryReader
name|r0
init|=
name|writer
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|r0
operator|.
name|isCurrent
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addIndexes
argument_list|(
name|dir2
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|r0
operator|.
name|isCurrent
argument_list|()
argument_list|)
expr_stmt|;
name|r0
operator|.
name|close
argument_list|()
expr_stmt|;
name|DirectoryReader
name|r1
init|=
name|writer
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|r1
operator|.
name|isCurrent
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|r1
operator|.
name|isCurrent
argument_list|()
argument_list|)
expr_stmt|;
comment|// we have seen all changes - no change after opening the NRT reader
name|assertEquals
argument_list|(
literal|200
argument_list|,
name|r1
operator|.
name|maxDoc
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|index2df
init|=
name|r1
operator|.
name|docFreq
argument_list|(
operator|new
name|Term
argument_list|(
literal|"indexname"
argument_list|,
literal|"index2"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|100
argument_list|,
name|index2df
argument_list|)
expr_stmt|;
comment|// verify the docs are from different indexes
name|Document
name|doc5
init|=
name|r1
operator|.
name|document
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"index1"
argument_list|,
name|doc5
operator|.
name|get
argument_list|(
literal|"indexname"
argument_list|)
argument_list|)
expr_stmt|;
name|Document
name|doc150
init|=
name|r1
operator|.
name|document
argument_list|(
literal|150
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"index2"
argument_list|,
name|doc150
operator|.
name|get
argument_list|(
literal|"indexname"
argument_list|)
argument_list|)
expr_stmt|;
name|r1
operator|.
name|close
argument_list|()
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir1
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir2
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testAddIndexes2
specifier|public
name|void
name|testAddIndexes2
parameter_list|()
throws|throws
name|Exception
block|{
name|boolean
name|doFullMerge
init|=
literal|false
decl_stmt|;
name|Directory
name|dir1
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir1
argument_list|,
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
comment|// create a 2nd index
name|Directory
name|dir2
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|writer2
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir2
argument_list|,
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|createIndexNoClose
argument_list|(
operator|!
name|doFullMerge
argument_list|,
literal|"index2"
argument_list|,
name|writer2
argument_list|)
expr_stmt|;
name|writer2
operator|.
name|close
argument_list|()
expr_stmt|;
name|writer
operator|.
name|addIndexes
argument_list|(
name|dir2
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addIndexes
argument_list|(
name|dir2
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addIndexes
argument_list|(
name|dir2
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addIndexes
argument_list|(
name|dir2
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addIndexes
argument_list|(
name|dir2
argument_list|)
expr_stmt|;
name|IndexReader
name|r1
init|=
name|writer
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|500
argument_list|,
name|r1
operator|.
name|maxDoc
argument_list|()
argument_list|)
expr_stmt|;
name|r1
operator|.
name|close
argument_list|()
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir1
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir2
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * Deletes using IW.deleteDocuments    *     * @throws Exception    */
DECL|method|testDeleteFromIndexWriter
specifier|public
name|void
name|testDeleteFromIndexWriter
parameter_list|()
throws|throws
name|Exception
block|{
name|boolean
name|doFullMerge
init|=
literal|true
decl_stmt|;
name|Directory
name|dir1
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir1
argument_list|,
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|)
argument_list|)
operator|.
name|setReaderTermsIndexDivisor
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
comment|// create the index
name|createIndexNoClose
argument_list|(
operator|!
name|doFullMerge
argument_list|,
literal|"index1"
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|writer
operator|.
name|flush
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// get a reader
name|IndexReader
name|r1
init|=
name|writer
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|String
name|id10
init|=
name|r1
operator|.
name|document
argument_list|(
literal|10
argument_list|)
operator|.
name|getField
argument_list|(
literal|"id"
argument_list|)
operator|.
name|stringValue
argument_list|()
decl_stmt|;
comment|// deleted IW docs should not show up in the next getReader
name|writer
operator|.
name|deleteDocuments
argument_list|(
operator|new
name|Term
argument_list|(
literal|"id"
argument_list|,
name|id10
argument_list|)
argument_list|)
expr_stmt|;
name|IndexReader
name|r2
init|=
name|writer
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|count
argument_list|(
operator|new
name|Term
argument_list|(
literal|"id"
argument_list|,
name|id10
argument_list|)
argument_list|,
name|r1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|count
argument_list|(
operator|new
name|Term
argument_list|(
literal|"id"
argument_list|,
name|id10
argument_list|)
argument_list|,
name|r2
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|id50
init|=
name|r1
operator|.
name|document
argument_list|(
literal|50
argument_list|)
operator|.
name|getField
argument_list|(
literal|"id"
argument_list|)
operator|.
name|stringValue
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|count
argument_list|(
operator|new
name|Term
argument_list|(
literal|"id"
argument_list|,
name|id50
argument_list|)
argument_list|,
name|r1
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|deleteDocuments
argument_list|(
operator|new
name|Term
argument_list|(
literal|"id"
argument_list|,
name|id50
argument_list|)
argument_list|)
expr_stmt|;
name|IndexReader
name|r3
init|=
name|writer
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|count
argument_list|(
operator|new
name|Term
argument_list|(
literal|"id"
argument_list|,
name|id10
argument_list|)
argument_list|,
name|r3
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|count
argument_list|(
operator|new
name|Term
argument_list|(
literal|"id"
argument_list|,
name|id50
argument_list|)
argument_list|,
name|r3
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|id75
init|=
name|r1
operator|.
name|document
argument_list|(
literal|75
argument_list|)
operator|.
name|getField
argument_list|(
literal|"id"
argument_list|)
operator|.
name|stringValue
argument_list|()
decl_stmt|;
name|writer
operator|.
name|deleteDocuments
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"id"
argument_list|,
name|id75
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|IndexReader
name|r4
init|=
name|writer
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|count
argument_list|(
operator|new
name|Term
argument_list|(
literal|"id"
argument_list|,
name|id75
argument_list|)
argument_list|,
name|r3
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|count
argument_list|(
operator|new
name|Term
argument_list|(
literal|"id"
argument_list|,
name|id75
argument_list|)
argument_list|,
name|r4
argument_list|)
argument_list|)
expr_stmt|;
name|r1
operator|.
name|close
argument_list|()
expr_stmt|;
name|r2
operator|.
name|close
argument_list|()
expr_stmt|;
name|r3
operator|.
name|close
argument_list|()
expr_stmt|;
name|r4
operator|.
name|close
argument_list|()
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// reopen the writer to verify the delete made it to the directory
name|writer
operator|=
operator|new
name|IndexWriter
argument_list|(
name|dir1
argument_list|,
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|IndexReader
name|w2r1
init|=
name|writer
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|count
argument_list|(
operator|new
name|Term
argument_list|(
literal|"id"
argument_list|,
name|id10
argument_list|)
argument_list|,
name|w2r1
argument_list|)
argument_list|)
expr_stmt|;
name|w2r1
operator|.
name|close
argument_list|()
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir1
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testAddIndexesAndDoDeletesThreads
specifier|public
name|void
name|testAddIndexesAndDoDeletesThreads
parameter_list|()
throws|throws
name|Throwable
block|{
specifier|final
name|int
name|numIter
init|=
literal|2
decl_stmt|;
name|int
name|numDirs
init|=
literal|3
decl_stmt|;
name|Directory
name|mainDir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|mainWriter
init|=
operator|new
name|IndexWriter
argument_list|(
name|mainDir
argument_list|,
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|)
argument_list|)
operator|.
name|setMergePolicy
argument_list|(
name|newLogMergePolicy
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|_TestUtil
operator|.
name|reduceOpenFiles
argument_list|(
name|mainWriter
argument_list|)
expr_stmt|;
name|AddDirectoriesThreads
name|addDirThreads
init|=
operator|new
name|AddDirectoriesThreads
argument_list|(
name|numIter
argument_list|,
name|mainWriter
argument_list|)
decl_stmt|;
name|addDirThreads
operator|.
name|launchThreads
argument_list|(
name|numDirs
argument_list|)
expr_stmt|;
name|addDirThreads
operator|.
name|joinThreads
argument_list|()
expr_stmt|;
comment|//assertEquals(100 + numDirs * (3 * numIter / 4) * addDirThreads.numThreads
comment|//    * addDirThreads.NUM_INIT_DOCS, addDirThreads.mainWriter.numDocs());
name|assertEquals
argument_list|(
name|addDirThreads
operator|.
name|count
operator|.
name|intValue
argument_list|()
argument_list|,
name|addDirThreads
operator|.
name|mainWriter
operator|.
name|numDocs
argument_list|()
argument_list|)
expr_stmt|;
name|addDirThreads
operator|.
name|close
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|addDirThreads
operator|.
name|failures
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|_TestUtil
operator|.
name|checkIndex
argument_list|(
name|mainDir
argument_list|)
expr_stmt|;
name|IndexReader
name|reader
init|=
name|IndexReader
operator|.
name|open
argument_list|(
name|mainDir
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|addDirThreads
operator|.
name|count
operator|.
name|intValue
argument_list|()
argument_list|,
name|reader
operator|.
name|numDocs
argument_list|()
argument_list|)
expr_stmt|;
comment|//assertEquals(100 + numDirs * (3 * numIter / 4) * addDirThreads.numThreads
comment|//    * addDirThreads.NUM_INIT_DOCS, reader.numDocs());
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|addDirThreads
operator|.
name|closeDir
argument_list|()
expr_stmt|;
name|mainDir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|class|AddDirectoriesThreads
specifier|private
class|class
name|AddDirectoriesThreads
block|{
DECL|field|addDir
name|Directory
name|addDir
decl_stmt|;
DECL|field|NUM_INIT_DOCS
specifier|final
specifier|static
name|int
name|NUM_INIT_DOCS
init|=
literal|100
decl_stmt|;
DECL|field|numDirs
name|int
name|numDirs
decl_stmt|;
DECL|field|threads
specifier|final
name|Thread
index|[]
name|threads
init|=
operator|new
name|Thread
index|[
name|numThreads
index|]
decl_stmt|;
DECL|field|mainWriter
name|IndexWriter
name|mainWriter
decl_stmt|;
DECL|field|failures
specifier|final
name|List
argument_list|<
name|Throwable
argument_list|>
name|failures
init|=
operator|new
name|ArrayList
argument_list|<
name|Throwable
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|readers
name|IndexReader
index|[]
name|readers
decl_stmt|;
DECL|field|didClose
name|boolean
name|didClose
init|=
literal|false
decl_stmt|;
DECL|field|count
name|AtomicInteger
name|count
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
DECL|field|numaddIndexes
name|AtomicInteger
name|numaddIndexes
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
DECL|method|AddDirectoriesThreads
specifier|public
name|AddDirectoriesThreads
parameter_list|(
name|int
name|numDirs
parameter_list|,
name|IndexWriter
name|mainWriter
parameter_list|)
throws|throws
name|Throwable
block|{
name|this
operator|.
name|numDirs
operator|=
name|numDirs
expr_stmt|;
name|this
operator|.
name|mainWriter
operator|=
name|mainWriter
expr_stmt|;
name|addDir
operator|=
name|newDirectory
argument_list|()
expr_stmt|;
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|addDir
argument_list|,
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|)
argument_list|)
operator|.
name|setMaxBufferedDocs
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_INIT_DOCS
condition|;
name|i
operator|++
control|)
block|{
name|Document
name|doc
init|=
name|DocHelper
operator|.
name|createDocument
argument_list|(
name|i
argument_list|,
literal|"addindex"
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|readers
operator|=
operator|new
name|IndexReader
index|[
name|numDirs
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDirs
condition|;
name|i
operator|++
control|)
name|readers
index|[
name|i
index|]
operator|=
name|IndexReader
operator|.
name|open
argument_list|(
name|addDir
argument_list|)
expr_stmt|;
block|}
DECL|method|joinThreads
name|void
name|joinThreads
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numThreads
condition|;
name|i
operator|++
control|)
try|try
block|{
name|threads
index|[
name|i
index|]
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
throw|throw
operator|new
name|ThreadInterruptedException
argument_list|(
name|ie
argument_list|)
throw|;
block|}
block|}
DECL|method|close
name|void
name|close
parameter_list|(
name|boolean
name|doWait
parameter_list|)
throws|throws
name|Throwable
block|{
name|didClose
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|doWait
condition|)
block|{
name|mainWriter
operator|.
name|waitForMerges
argument_list|()
expr_stmt|;
block|}
name|mainWriter
operator|.
name|close
argument_list|(
name|doWait
argument_list|)
expr_stmt|;
block|}
DECL|method|closeDir
name|void
name|closeDir
parameter_list|()
throws|throws
name|Throwable
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDirs
condition|;
name|i
operator|++
control|)
name|readers
index|[
name|i
index|]
operator|.
name|close
argument_list|()
expr_stmt|;
name|addDir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|handle
name|void
name|handle
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|t
operator|.
name|printStackTrace
argument_list|(
name|System
operator|.
name|out
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|failures
init|)
block|{
name|failures
operator|.
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|launchThreads
name|void
name|launchThreads
parameter_list|(
specifier|final
name|int
name|numIter
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numThreads
condition|;
name|i
operator|++
control|)
block|{
name|threads
index|[
name|i
index|]
operator|=
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
specifier|final
name|Directory
index|[]
name|dirs
init|=
operator|new
name|Directory
index|[
name|numDirs
index|]
decl_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|numDirs
condition|;
name|k
operator|++
control|)
name|dirs
index|[
name|k
index|]
operator|=
operator|new
name|MockDirectoryWrapper
argument_list|(
name|random
argument_list|,
operator|new
name|RAMDirectory
argument_list|(
name|addDir
argument_list|,
name|newIOContext
argument_list|(
name|random
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|//int j = 0;
comment|//while (true) {
comment|// System.out.println(Thread.currentThread().getName() + ": iter
comment|// j=" + j);
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|numIter
condition|;
name|x
operator|++
control|)
block|{
comment|// only do addIndexes
name|doBody
argument_list|(
name|x
argument_list|,
name|dirs
argument_list|)
expr_stmt|;
block|}
comment|//if (numIter> 0&& j == numIter)
comment|//  break;
comment|//doBody(j++, dirs);
comment|//doBody(5, dirs);
comment|//}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|handle
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
block|}
block|}
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numThreads
condition|;
name|i
operator|++
control|)
name|threads
index|[
name|i
index|]
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
DECL|method|doBody
name|void
name|doBody
parameter_list|(
name|int
name|j
parameter_list|,
name|Directory
index|[]
name|dirs
parameter_list|)
throws|throws
name|Throwable
block|{
switch|switch
condition|(
name|j
operator|%
literal|4
condition|)
block|{
case|case
literal|0
case|:
name|mainWriter
operator|.
name|addIndexes
argument_list|(
name|dirs
argument_list|)
expr_stmt|;
name|mainWriter
operator|.
name|forceMerge
argument_list|(
literal|1
argument_list|)
expr_stmt|;
break|break;
case|case
literal|1
case|:
name|mainWriter
operator|.
name|addIndexes
argument_list|(
name|dirs
argument_list|)
expr_stmt|;
name|numaddIndexes
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
break|break;
case|case
literal|2
case|:
name|mainWriter
operator|.
name|addIndexes
argument_list|(
name|readers
argument_list|)
expr_stmt|;
break|break;
case|case
literal|3
case|:
name|mainWriter
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
name|count
operator|.
name|addAndGet
argument_list|(
name|dirs
operator|.
name|length
operator|*
name|NUM_INIT_DOCS
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testIndexWriterReopenSegmentFullMerge
specifier|public
name|void
name|testIndexWriterReopenSegmentFullMerge
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestIndexWriterReopenSegment
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|testIndexWriterReopenSegment
specifier|public
name|void
name|testIndexWriterReopenSegment
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestIndexWriterReopenSegment
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests creating a segment, then check to insure the segment can be seen via    * IW.getReader    */
DECL|method|doTestIndexWriterReopenSegment
specifier|public
name|void
name|doTestIndexWriterReopenSegment
parameter_list|(
name|boolean
name|doFullMerge
parameter_list|)
throws|throws
name|Exception
block|{
name|Directory
name|dir1
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir1
argument_list|,
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|IndexReader
name|r1
init|=
name|writer
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|r1
operator|.
name|maxDoc
argument_list|()
argument_list|)
expr_stmt|;
name|createIndexNoClose
argument_list|(
literal|false
argument_list|,
literal|"index1"
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|writer
operator|.
name|flush
argument_list|(
operator|!
name|doFullMerge
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|IndexReader
name|iwr1
init|=
name|writer
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|100
argument_list|,
name|iwr1
operator|.
name|maxDoc
argument_list|()
argument_list|)
expr_stmt|;
name|IndexReader
name|r2
init|=
name|writer
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|r2
operator|.
name|maxDoc
argument_list|()
argument_list|,
literal|100
argument_list|)
expr_stmt|;
comment|// add 100 documents
for|for
control|(
name|int
name|x
init|=
literal|10000
init|;
name|x
operator|<
literal|10000
operator|+
literal|100
condition|;
name|x
operator|++
control|)
block|{
name|Document
name|d
init|=
name|DocHelper
operator|.
name|createDocument
argument_list|(
name|x
argument_list|,
literal|"index1"
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|flush
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// verify the reader was reopened internally
name|IndexReader
name|iwr2
init|=
name|writer
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|iwr2
operator|!=
name|r1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|200
argument_list|,
name|iwr2
operator|.
name|maxDoc
argument_list|()
argument_list|)
expr_stmt|;
comment|// should have flushed out a segment
name|IndexReader
name|r3
init|=
name|writer
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|r2
operator|!=
name|r3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|200
argument_list|,
name|r3
operator|.
name|maxDoc
argument_list|()
argument_list|)
expr_stmt|;
comment|// dec ref the readers rather than close them because
comment|// closing flushes changes to the writer
name|r1
operator|.
name|close
argument_list|()
expr_stmt|;
name|iwr1
operator|.
name|close
argument_list|()
expr_stmt|;
name|r2
operator|.
name|close
argument_list|()
expr_stmt|;
name|r3
operator|.
name|close
argument_list|()
expr_stmt|;
name|iwr2
operator|.
name|close
argument_list|()
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// test whether the changes made it to the directory
name|writer
operator|=
operator|new
name|IndexWriter
argument_list|(
name|dir1
argument_list|,
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|IndexReader
name|w2r1
init|=
name|writer
operator|.
name|getReader
argument_list|()
decl_stmt|;
comment|// insure the deletes were actually flushed to the directory
name|assertEquals
argument_list|(
literal|200
argument_list|,
name|w2r1
operator|.
name|maxDoc
argument_list|()
argument_list|)
expr_stmt|;
name|w2r1
operator|.
name|close
argument_list|()
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir1
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/*    * Delete a document by term and return the doc id    *     * public static int deleteDocument(Term term, IndexWriter writer) throws    * IOException { IndexReader reader = writer.getReader(); TermDocs td =    * reader.termDocs(term); int doc = -1; //if (td.next()) { // doc = td.doc();    * //} //writer.deleteDocuments(term); td.close(); return doc; }    */
DECL|method|createIndex
specifier|public
specifier|static
name|void
name|createIndex
parameter_list|(
name|Random
name|random
parameter_list|,
name|Directory
name|dir1
parameter_list|,
name|String
name|indexName
parameter_list|,
name|boolean
name|multiSegment
parameter_list|)
throws|throws
name|IOException
block|{
name|IndexWriter
name|w
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir1
argument_list|,
name|LuceneTestCase
operator|.
name|newIndexWriterConfig
argument_list|(
name|random
argument_list|,
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|)
argument_list|)
operator|.
name|setMergePolicy
argument_list|(
operator|new
name|LogDocMergePolicy
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|w
operator|.
name|addDocument
argument_list|(
name|DocHelper
operator|.
name|createDocument
argument_list|(
name|i
argument_list|,
name|indexName
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|multiSegment
condition|)
block|{
name|w
operator|.
name|forceMerge
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|createIndexNoClose
specifier|public
specifier|static
name|void
name|createIndexNoClose
parameter_list|(
name|boolean
name|multiSegment
parameter_list|,
name|String
name|indexName
parameter_list|,
name|IndexWriter
name|w
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|w
operator|.
name|addDocument
argument_list|(
name|DocHelper
operator|.
name|createDocument
argument_list|(
name|i
argument_list|,
name|indexName
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|multiSegment
condition|)
block|{
name|w
operator|.
name|forceMerge
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|MyWarmer
specifier|private
specifier|static
class|class
name|MyWarmer
extends|extends
name|IndexWriter
operator|.
name|IndexReaderWarmer
block|{
DECL|field|warmCount
name|int
name|warmCount
decl_stmt|;
annotation|@
name|Override
DECL|method|warm
specifier|public
name|void
name|warm
parameter_list|(
name|AtomicReader
name|reader
parameter_list|)
throws|throws
name|IOException
block|{
name|warmCount
operator|++
expr_stmt|;
block|}
block|}
DECL|method|testMergeWarmer
specifier|public
name|void
name|testMergeWarmer
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|dir1
init|=
name|newDirectory
argument_list|()
decl_stmt|;
comment|// Enroll warmer
name|MyWarmer
name|warmer
init|=
operator|new
name|MyWarmer
argument_list|()
decl_stmt|;
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir1
argument_list|,
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|)
argument_list|)
operator|.
name|setMaxBufferedDocs
argument_list|(
literal|2
argument_list|)
operator|.
name|setMergedSegmentWarmer
argument_list|(
name|warmer
argument_list|)
operator|.
name|setMergeScheduler
argument_list|(
operator|new
name|ConcurrentMergeScheduler
argument_list|()
argument_list|)
operator|.
name|setMergePolicy
argument_list|(
name|newLogMergePolicy
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
comment|// create the index
name|createIndexNoClose
argument_list|(
literal|false
argument_list|,
literal|"test"
argument_list|,
name|writer
argument_list|)
expr_stmt|;
comment|// get a reader to put writer into near real-time mode
name|IndexReader
name|r1
init|=
name|writer
operator|.
name|getReader
argument_list|()
decl_stmt|;
operator|(
operator|(
name|LogMergePolicy
operator|)
name|writer
operator|.
name|getConfig
argument_list|()
operator|.
name|getMergePolicy
argument_list|()
operator|)
operator|.
name|setMergeFactor
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|int
name|num
init|=
name|atLeast
argument_list|(
literal|100
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|num
condition|;
name|i
operator|++
control|)
block|{
name|writer
operator|.
name|addDocument
argument_list|(
name|DocHelper
operator|.
name|createDocument
argument_list|(
name|i
argument_list|,
literal|"test"
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
block|}
operator|(
operator|(
name|ConcurrentMergeScheduler
operator|)
name|writer
operator|.
name|getConfig
argument_list|()
operator|.
name|getMergeScheduler
argument_list|()
operator|)
operator|.
name|sync
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|warmer
operator|.
name|warmCount
operator|>
literal|0
argument_list|)
expr_stmt|;
specifier|final
name|int
name|count
init|=
name|warmer
operator|.
name|warmCount
decl_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|DocHelper
operator|.
name|createDocument
argument_list|(
literal|17
argument_list|,
literal|"test"
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|forceMerge
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|warmer
operator|.
name|warmCount
operator|>
name|count
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|r1
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir1
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testAfterCommit
specifier|public
name|void
name|testAfterCommit
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|dir1
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir1
argument_list|,
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|)
argument_list|)
operator|.
name|setMergeScheduler
argument_list|(
operator|new
name|ConcurrentMergeScheduler
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|writer
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|// create the index
name|createIndexNoClose
argument_list|(
literal|false
argument_list|,
literal|"test"
argument_list|,
name|writer
argument_list|)
expr_stmt|;
comment|// get a reader to put writer into near real-time mode
name|DirectoryReader
name|r1
init|=
name|writer
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|_TestUtil
operator|.
name|checkIndex
argument_list|(
name|dir1
argument_list|)
expr_stmt|;
name|writer
operator|.
name|commit
argument_list|()
expr_stmt|;
name|_TestUtil
operator|.
name|checkIndex
argument_list|(
name|dir1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|100
argument_list|,
name|r1
operator|.
name|numDocs
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|writer
operator|.
name|addDocument
argument_list|(
name|DocHelper
operator|.
name|createDocument
argument_list|(
name|i
argument_list|,
literal|"test"
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
block|}
operator|(
operator|(
name|ConcurrentMergeScheduler
operator|)
name|writer
operator|.
name|getConfig
argument_list|()
operator|.
name|getMergeScheduler
argument_list|()
operator|)
operator|.
name|sync
argument_list|()
expr_stmt|;
name|DirectoryReader
name|r2
init|=
name|DirectoryReader
operator|.
name|openIfChanged
argument_list|(
name|r1
argument_list|)
decl_stmt|;
if|if
condition|(
name|r2
operator|!=
literal|null
condition|)
block|{
name|r1
operator|.
name|close
argument_list|()
expr_stmt|;
name|r1
operator|=
name|r2
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|110
argument_list|,
name|r1
operator|.
name|numDocs
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|r1
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir1
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// Make sure reader remains usable even if IndexWriter closes
DECL|method|testAfterClose
specifier|public
name|void
name|testAfterClose
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|dir1
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir1
argument_list|,
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
comment|// create the index
name|createIndexNoClose
argument_list|(
literal|false
argument_list|,
literal|"test"
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|DirectoryReader
name|r
init|=
name|writer
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|_TestUtil
operator|.
name|checkIndex
argument_list|(
name|dir1
argument_list|)
expr_stmt|;
comment|// reader should remain usable even after IndexWriter is closed:
name|assertEquals
argument_list|(
literal|100
argument_list|,
name|r
operator|.
name|numDocs
argument_list|()
argument_list|)
expr_stmt|;
name|Query
name|q
init|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"indexname"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
decl_stmt|;
name|IndexSearcher
name|searcher
init|=
name|newSearcher
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|100
argument_list|,
name|searcher
operator|.
name|search
argument_list|(
name|q
argument_list|,
literal|10
argument_list|)
operator|.
name|totalHits
argument_list|)
expr_stmt|;
try|try
block|{
name|DirectoryReader
operator|.
name|openIfChanged
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"failed to hit AlreadyClosedException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AlreadyClosedException
name|ace
parameter_list|)
block|{
comment|// expected
block|}
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir1
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// Stress test reopen during addIndexes
DECL|method|testDuringAddIndexes
specifier|public
name|void
name|testDuringAddIndexes
parameter_list|()
throws|throws
name|Exception
block|{
name|MockDirectoryWrapper
name|dir1
init|=
name|newDirectory
argument_list|()
decl_stmt|;
specifier|final
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir1
argument_list|,
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|)
argument_list|)
operator|.
name|setMergePolicy
argument_list|(
name|newLogMergePolicy
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
comment|// create the index
name|createIndexNoClose
argument_list|(
literal|false
argument_list|,
literal|"test"
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|writer
operator|.
name|commit
argument_list|()
expr_stmt|;
specifier|final
name|Directory
index|[]
name|dirs
init|=
operator|new
name|Directory
index|[
literal|10
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|dirs
index|[
name|i
index|]
operator|=
operator|new
name|MockDirectoryWrapper
argument_list|(
name|random
argument_list|,
operator|new
name|RAMDirectory
argument_list|(
name|dir1
argument_list|,
name|newIOContext
argument_list|(
name|random
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|DirectoryReader
name|r
init|=
name|writer
operator|.
name|getReader
argument_list|()
decl_stmt|;
specifier|final
name|float
name|SECONDS
init|=
literal|0.5f
decl_stmt|;
specifier|final
name|long
name|endTime
init|=
call|(
name|long
call|)
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
literal|1000.
operator|*
name|SECONDS
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Throwable
argument_list|>
name|excs
init|=
name|Collections
operator|.
name|synchronizedList
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|Throwable
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Thread
index|[]
name|threads
init|=
operator|new
name|Thread
index|[
name|numThreads
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numThreads
condition|;
name|i
operator|++
control|)
block|{
name|threads
index|[
name|i
index|]
operator|=
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
do|do
block|{
try|try
block|{
name|writer
operator|.
name|addIndexes
argument_list|(
name|dirs
argument_list|)
expr_stmt|;
name|writer
operator|.
name|maybeMerge
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|excs
operator|.
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|t
argument_list|)
throw|;
block|}
block|}
do|while
condition|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|<
name|endTime
condition|)
do|;
block|}
block|}
expr_stmt|;
name|threads
index|[
name|i
index|]
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|threads
index|[
name|i
index|]
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
name|int
name|lastCount
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|<
name|endTime
condition|)
block|{
name|DirectoryReader
name|r2
init|=
name|DirectoryReader
operator|.
name|openIfChanged
argument_list|(
name|r
argument_list|)
decl_stmt|;
if|if
condition|(
name|r2
operator|!=
literal|null
condition|)
block|{
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
name|r
operator|=
name|r2
expr_stmt|;
block|}
name|Query
name|q
init|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"indexname"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
decl_stmt|;
name|IndexSearcher
name|searcher
init|=
name|newSearcher
argument_list|(
name|r
argument_list|)
decl_stmt|;
specifier|final
name|int
name|count
init|=
name|searcher
operator|.
name|search
argument_list|(
name|q
argument_list|,
literal|10
argument_list|)
operator|.
name|totalHits
decl_stmt|;
name|assertTrue
argument_list|(
name|count
operator|>=
name|lastCount
argument_list|)
expr_stmt|;
name|lastCount
operator|=
name|count
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numThreads
condition|;
name|i
operator|++
control|)
block|{
name|threads
index|[
name|i
index|]
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
comment|// final check
name|DirectoryReader
name|r2
init|=
name|DirectoryReader
operator|.
name|openIfChanged
argument_list|(
name|r
argument_list|)
decl_stmt|;
if|if
condition|(
name|r2
operator|!=
literal|null
condition|)
block|{
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
name|r
operator|=
name|r2
expr_stmt|;
block|}
name|Query
name|q
init|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"indexname"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
decl_stmt|;
name|IndexSearcher
name|searcher
init|=
name|newSearcher
argument_list|(
name|r
argument_list|)
decl_stmt|;
specifier|final
name|int
name|count
init|=
name|searcher
operator|.
name|search
argument_list|(
name|q
argument_list|,
literal|10
argument_list|)
operator|.
name|totalHits
decl_stmt|;
name|assertTrue
argument_list|(
name|count
operator|>=
name|lastCount
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|excs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
specifier|final
name|Collection
argument_list|<
name|String
argument_list|>
name|openDeletedFiles
init|=
name|dir1
operator|.
name|getOpenDeletedFiles
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"openDeleted="
operator|+
name|openDeletedFiles
argument_list|,
literal|0
argument_list|,
name|openDeletedFiles
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir1
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// Stress test reopen during add/delete
DECL|method|testDuringAddDelete
specifier|public
name|void
name|testDuringAddDelete
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|dir1
init|=
name|newDirectory
argument_list|()
decl_stmt|;
specifier|final
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir1
argument_list|,
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|)
argument_list|)
operator|.
name|setMergePolicy
argument_list|(
name|newLogMergePolicy
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
comment|// create the index
name|createIndexNoClose
argument_list|(
literal|false
argument_list|,
literal|"test"
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|writer
operator|.
name|commit
argument_list|()
expr_stmt|;
name|DirectoryReader
name|r
init|=
name|writer
operator|.
name|getReader
argument_list|()
decl_stmt|;
specifier|final
name|float
name|SECONDS
init|=
literal|0.5f
decl_stmt|;
specifier|final
name|long
name|endTime
init|=
call|(
name|long
call|)
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
literal|1000.
operator|*
name|SECONDS
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Throwable
argument_list|>
name|excs
init|=
name|Collections
operator|.
name|synchronizedList
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|Throwable
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Thread
index|[]
name|threads
init|=
operator|new
name|Thread
index|[
name|numThreads
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numThreads
condition|;
name|i
operator|++
control|)
block|{
name|threads
index|[
name|i
index|]
operator|=
operator|new
name|Thread
argument_list|()
block|{
specifier|final
name|Random
name|r
init|=
operator|new
name|Random
argument_list|(
name|random
operator|.
name|nextLong
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
do|do
block|{
try|try
block|{
for|for
control|(
name|int
name|docUpto
init|=
literal|0
init|;
name|docUpto
operator|<
literal|10
condition|;
name|docUpto
operator|++
control|)
block|{
name|writer
operator|.
name|addDocument
argument_list|(
name|DocHelper
operator|.
name|createDocument
argument_list|(
literal|10
operator|*
name|count
operator|+
name|docUpto
argument_list|,
literal|"test"
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|count
operator|++
expr_stmt|;
specifier|final
name|int
name|limit
init|=
name|count
operator|*
literal|10
decl_stmt|;
for|for
control|(
name|int
name|delUpto
init|=
literal|0
init|;
name|delUpto
operator|<
literal|5
condition|;
name|delUpto
operator|++
control|)
block|{
name|int
name|x
init|=
name|r
operator|.
name|nextInt
argument_list|(
name|limit
argument_list|)
decl_stmt|;
name|writer
operator|.
name|deleteDocuments
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field3"
argument_list|,
literal|"b"
operator|+
name|x
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|excs
operator|.
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|t
argument_list|)
throw|;
block|}
block|}
do|while
condition|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|<
name|endTime
condition|)
do|;
block|}
block|}
expr_stmt|;
name|threads
index|[
name|i
index|]
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|threads
index|[
name|i
index|]
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
name|int
name|sum
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|<
name|endTime
condition|)
block|{
name|DirectoryReader
name|r2
init|=
name|DirectoryReader
operator|.
name|openIfChanged
argument_list|(
name|r
argument_list|)
decl_stmt|;
if|if
condition|(
name|r2
operator|!=
literal|null
condition|)
block|{
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
name|r
operator|=
name|r2
expr_stmt|;
block|}
name|Query
name|q
init|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"indexname"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
decl_stmt|;
name|IndexSearcher
name|searcher
init|=
name|newSearcher
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|sum
operator|+=
name|searcher
operator|.
name|search
argument_list|(
name|q
argument_list|,
literal|10
argument_list|)
operator|.
name|totalHits
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numThreads
condition|;
name|i
operator|++
control|)
block|{
name|threads
index|[
name|i
index|]
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
comment|// at least search once
name|DirectoryReader
name|r2
init|=
name|DirectoryReader
operator|.
name|openIfChanged
argument_list|(
name|r
argument_list|)
decl_stmt|;
if|if
condition|(
name|r2
operator|!=
literal|null
condition|)
block|{
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
name|r
operator|=
name|r2
expr_stmt|;
block|}
name|Query
name|q
init|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"indexname"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
decl_stmt|;
name|IndexSearcher
name|searcher
init|=
name|newSearcher
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|sum
operator|+=
name|searcher
operator|.
name|search
argument_list|(
name|q
argument_list|,
literal|10
argument_list|)
operator|.
name|totalHits
expr_stmt|;
name|assertTrue
argument_list|(
literal|"no documents found at all"
argument_list|,
name|sum
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|excs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir1
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testForceMergeDeletes
specifier|public
name|void
name|testForceMergeDeletes
parameter_list|()
throws|throws
name|Throwable
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
specifier|final
name|IndexWriter
name|w
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|)
argument_list|)
operator|.
name|setMergePolicy
argument_list|(
name|newLogMergePolicy
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newField
argument_list|(
literal|"field"
argument_list|,
literal|"a b c"
argument_list|,
name|TextField
operator|.
name|TYPE_UNSTORED
argument_list|)
argument_list|)
expr_stmt|;
name|Field
name|id
init|=
name|newField
argument_list|(
literal|"id"
argument_list|,
literal|""
argument_list|,
name|StringField
operator|.
name|TYPE_UNSTORED
argument_list|)
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|id
operator|.
name|setStringValue
argument_list|(
literal|"0"
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|id
operator|.
name|setStringValue
argument_list|(
literal|"1"
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|w
operator|.
name|deleteDocuments
argument_list|(
operator|new
name|Term
argument_list|(
literal|"id"
argument_list|,
literal|"0"
argument_list|)
argument_list|)
expr_stmt|;
name|IndexReader
name|r
init|=
name|w
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|w
operator|.
name|forceMergeDeletes
argument_list|()
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
name|r
operator|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|r
operator|.
name|numDocs
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|r
operator|.
name|hasDeletions
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testDeletesNumDocs
specifier|public
name|void
name|testDeletesNumDocs
parameter_list|()
throws|throws
name|Throwable
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
specifier|final
name|IndexWriter
name|w
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newField
argument_list|(
literal|"field"
argument_list|,
literal|"a b c"
argument_list|,
name|TextField
operator|.
name|TYPE_UNSTORED
argument_list|)
argument_list|)
expr_stmt|;
name|Field
name|id
init|=
name|newField
argument_list|(
literal|"id"
argument_list|,
literal|""
argument_list|,
name|StringField
operator|.
name|TYPE_UNSTORED
argument_list|)
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|id
operator|.
name|setStringValue
argument_list|(
literal|"0"
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|id
operator|.
name|setStringValue
argument_list|(
literal|"1"
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|IndexReader
name|r
init|=
name|w
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|r
operator|.
name|numDocs
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
name|w
operator|.
name|deleteDocuments
argument_list|(
operator|new
name|Term
argument_list|(
literal|"id"
argument_list|,
literal|"0"
argument_list|)
argument_list|)
expr_stmt|;
name|r
operator|=
name|w
operator|.
name|getReader
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|r
operator|.
name|numDocs
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
name|w
operator|.
name|deleteDocuments
argument_list|(
operator|new
name|Term
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|r
operator|=
name|w
operator|.
name|getReader
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|r
operator|.
name|numDocs
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testEmptyIndex
specifier|public
name|void
name|testEmptyIndex
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Ensures that getReader works on an empty index, which hasn't been committed yet.
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|w
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|IndexReader
name|r
init|=
name|w
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|r
operator|.
name|numDocs
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testSegmentWarmer
specifier|public
name|void
name|testSegmentWarmer
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
specifier|final
name|AtomicBoolean
name|didWarm
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
name|IndexWriter
name|w
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|)
argument_list|)
operator|.
name|setMaxBufferedDocs
argument_list|(
literal|2
argument_list|)
operator|.
name|setReaderPooling
argument_list|(
literal|true
argument_list|)
operator|.
name|setMergedSegmentWarmer
argument_list|(
operator|new
name|IndexWriter
operator|.
name|IndexReaderWarmer
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|warm
parameter_list|(
name|AtomicReader
name|r
parameter_list|)
throws|throws
name|IOException
block|{
name|IndexSearcher
name|s
init|=
name|newSearcher
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|TopDocs
name|hits
init|=
name|s
operator|.
name|search
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|20
argument_list|,
name|hits
operator|.
name|totalHits
argument_list|)
expr_stmt|;
name|didWarm
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
operator|.
name|setMergePolicy
argument_list|(
name|newLogMergePolicy
argument_list|(
literal|10
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newField
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|,
name|StringField
operator|.
name|TYPE_UNSTORED
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|20
condition|;
name|i
operator|++
control|)
block|{
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
name|w
operator|.
name|waitForMerges
argument_list|()
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|didWarm
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testNoTermsIndex
specifier|public
name|void
name|testNoTermsIndex
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Some Codecs don't honor the ReaderTermsIndexDivisor, so skip the test if
comment|// they're picked.
name|assumeFalse
argument_list|(
literal|"PreFlex codec does not support ReaderTermsIndexDivisor!"
argument_list|,
literal|"Lucene3x"
operator|.
name|equals
argument_list|(
name|Codec
operator|.
name|getDefault
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|IndexWriterConfig
name|conf
init|=
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|)
argument_list|)
operator|.
name|setReaderTermsIndexDivisor
argument_list|(
operator|-
literal|1
argument_list|)
decl_stmt|;
comment|// Don't proceed if picked Codec is in the list of illegal ones.
specifier|final
name|String
name|format
init|=
name|_TestUtil
operator|.
name|getPostingsFormat
argument_list|(
literal|"f"
argument_list|)
decl_stmt|;
name|assumeFalse
argument_list|(
literal|"Format: "
operator|+
name|format
operator|+
literal|" does not support ReaderTermsIndexDivisor!"
argument_list|,
operator|(
name|format
operator|.
name|equals
argument_list|(
literal|"SimpleText"
argument_list|)
operator|||
name|format
operator|.
name|equals
argument_list|(
literal|"Memory"
argument_list|)
operator|)
argument_list|)
expr_stmt|;
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|w
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
literal|"f"
argument_list|,
literal|"val"
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|IndexReader
name|r
init|=
name|IndexReader
operator|.
name|open
argument_list|(
name|w
argument_list|,
literal|true
argument_list|)
operator|.
name|getSequentialSubReaders
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
try|try
block|{
name|_TestUtil
operator|.
name|docs
argument_list|(
name|random
argument_list|,
name|r
argument_list|,
literal|"f"
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"val"
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should have failed to seek since terms index was not loaded."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|e
parameter_list|)
block|{
comment|// expected - we didn't load the term index
block|}
finally|finally
block|{
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|testReopenAfterNoRealChange
specifier|public
name|void
name|testReopenAfterNoRealChange
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|d
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|w
init|=
operator|new
name|IndexWriter
argument_list|(
name|d
argument_list|,
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|DirectoryReader
name|r
init|=
name|w
operator|.
name|getReader
argument_list|()
decl_stmt|;
comment|// start pooling readers
name|DirectoryReader
name|r2
init|=
name|DirectoryReader
operator|.
name|openIfChanged
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|r2
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
operator|new
name|Document
argument_list|()
argument_list|)
expr_stmt|;
name|DirectoryReader
name|r3
init|=
name|DirectoryReader
operator|.
name|openIfChanged
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|r3
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|r3
operator|.
name|getVersion
argument_list|()
operator|!=
name|r
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|r3
operator|.
name|isCurrent
argument_list|()
argument_list|)
expr_stmt|;
comment|// Deletes nothing in reality...:
name|w
operator|.
name|deleteDocuments
argument_list|(
operator|new
name|Term
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
comment|// ... but IW marks this as not current:
name|assertFalse
argument_list|(
name|r3
operator|.
name|isCurrent
argument_list|()
argument_list|)
expr_stmt|;
name|DirectoryReader
name|r4
init|=
name|DirectoryReader
operator|.
name|openIfChanged
argument_list|(
name|r3
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|r4
argument_list|)
expr_stmt|;
comment|// Deletes nothing in reality...:
name|w
operator|.
name|deleteDocuments
argument_list|(
operator|new
name|Term
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|DirectoryReader
name|r5
init|=
name|DirectoryReader
operator|.
name|openIfChanged
argument_list|(
name|r3
argument_list|,
name|w
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|r5
argument_list|)
expr_stmt|;
name|r3
operator|.
name|close
argument_list|()
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|d
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class
end_unit
