begin_unit
begin_package
DECL|package|org.apache.lucene.index
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|MockAnalyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
operator|.
name|Store
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|StringField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriterConfig
operator|.
name|OpenMode
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|ReferenceManager
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|SearcherFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|SearcherManager
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TermQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TopDocs
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|RAMDirectory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_class
DECL|class|TestTryDelete
specifier|public
class|class
name|TestTryDelete
extends|extends
name|LuceneTestCase
block|{
DECL|method|getWriter
specifier|private
specifier|static
name|IndexWriter
name|getWriter
parameter_list|(
name|Directory
name|directory
parameter_list|)
throws|throws
name|IOException
block|{
name|MergePolicy
name|policy
init|=
operator|new
name|LogByteSizeMergePolicy
argument_list|()
decl_stmt|;
name|IndexWriterConfig
name|conf
init|=
operator|new
name|IndexWriterConfig
argument_list|(
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|conf
operator|.
name|setMergePolicy
argument_list|(
name|policy
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setOpenMode
argument_list|(
name|OpenMode
operator|.
name|CREATE_OR_APPEND
argument_list|)
expr_stmt|;
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|directory
argument_list|,
name|conf
argument_list|)
decl_stmt|;
return|return
name|writer
return|;
block|}
DECL|method|createIndex
specifier|private
specifier|static
name|Directory
name|createIndex
parameter_list|()
throws|throws
name|IOException
block|{
name|Directory
name|directory
init|=
operator|new
name|RAMDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|writer
init|=
name|getWriter
argument_list|(
name|directory
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|StringField
argument_list|(
literal|"foo"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|,
name|Store
operator|.
name|YES
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|commit
argument_list|()
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|directory
return|;
block|}
DECL|method|testTryDeleteDocument
specifier|public
name|void
name|testTryDeleteDocument
parameter_list|()
throws|throws
name|IOException
block|{
name|Directory
name|directory
init|=
name|createIndex
argument_list|()
decl_stmt|;
name|IndexWriter
name|writer
init|=
name|getWriter
argument_list|(
name|directory
argument_list|)
decl_stmt|;
name|ReferenceManager
argument_list|<
name|IndexSearcher
argument_list|>
name|mgr
init|=
operator|new
name|SearcherManager
argument_list|(
name|writer
argument_list|,
operator|new
name|SearcherFactory
argument_list|()
argument_list|)
decl_stmt|;
name|TrackingIndexWriter
name|mgrWriter
init|=
operator|new
name|TrackingIndexWriter
argument_list|(
name|writer
argument_list|)
decl_stmt|;
name|IndexSearcher
name|searcher
init|=
name|mgr
operator|.
name|acquire
argument_list|()
decl_stmt|;
name|TopDocs
name|topDocs
init|=
name|searcher
operator|.
name|search
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"foo"
argument_list|,
literal|"0"
argument_list|)
argument_list|)
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|topDocs
operator|.
name|totalHits
argument_list|)
expr_stmt|;
name|long
name|result
decl_stmt|;
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|IndexReader
name|r
init|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|writer
argument_list|)
decl_stmt|;
name|result
operator|=
name|mgrWriter
operator|.
name|tryDeleteDocument
argument_list|(
name|r
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
name|mgrWriter
operator|.
name|tryDeleteDocument
argument_list|(
name|searcher
operator|.
name|getIndexReader
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
comment|// The tryDeleteDocument should have succeeded:
name|assertTrue
argument_list|(
name|result
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|writer
operator|.
name|hasDeletions
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|writer
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|writer
operator|.
name|hasDeletions
argument_list|()
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|maybeRefresh
argument_list|()
expr_stmt|;
name|searcher
operator|=
name|mgr
operator|.
name|acquire
argument_list|()
expr_stmt|;
name|topDocs
operator|=
name|searcher
operator|.
name|search
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"foo"
argument_list|,
literal|"0"
argument_list|)
argument_list|)
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|topDocs
operator|.
name|totalHits
argument_list|)
expr_stmt|;
block|}
DECL|method|testTryDeleteDocumentCloseAndReopen
specifier|public
name|void
name|testTryDeleteDocumentCloseAndReopen
parameter_list|()
throws|throws
name|IOException
block|{
name|Directory
name|directory
init|=
name|createIndex
argument_list|()
decl_stmt|;
name|IndexWriter
name|writer
init|=
name|getWriter
argument_list|(
name|directory
argument_list|)
decl_stmt|;
name|ReferenceManager
argument_list|<
name|IndexSearcher
argument_list|>
name|mgr
init|=
operator|new
name|SearcherManager
argument_list|(
name|writer
argument_list|,
operator|new
name|SearcherFactory
argument_list|()
argument_list|)
decl_stmt|;
name|IndexSearcher
name|searcher
init|=
name|mgr
operator|.
name|acquire
argument_list|()
decl_stmt|;
name|TopDocs
name|topDocs
init|=
name|searcher
operator|.
name|search
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"foo"
argument_list|,
literal|"0"
argument_list|)
argument_list|)
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|topDocs
operator|.
name|totalHits
argument_list|)
expr_stmt|;
name|TrackingIndexWriter
name|mgrWriter
init|=
operator|new
name|TrackingIndexWriter
argument_list|(
name|writer
argument_list|)
decl_stmt|;
name|long
name|result
init|=
name|mgrWriter
operator|.
name|tryDeleteDocument
argument_list|(
name|DirectoryReader
operator|.
name|open
argument_list|(
name|writer
argument_list|)
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|writer
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|writer
operator|.
name|hasDeletions
argument_list|()
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|maybeRefresh
argument_list|()
expr_stmt|;
name|searcher
operator|=
name|mgr
operator|.
name|acquire
argument_list|()
expr_stmt|;
name|topDocs
operator|=
name|searcher
operator|.
name|search
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"foo"
argument_list|,
literal|"0"
argument_list|)
argument_list|)
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|topDocs
operator|.
name|totalHits
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|searcher
operator|=
operator|new
name|IndexSearcher
argument_list|(
name|DirectoryReader
operator|.
name|open
argument_list|(
name|directory
argument_list|)
argument_list|)
expr_stmt|;
name|topDocs
operator|=
name|searcher
operator|.
name|search
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"foo"
argument_list|,
literal|"0"
argument_list|)
argument_list|)
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|topDocs
operator|.
name|totalHits
argument_list|)
expr_stmt|;
block|}
DECL|method|testDeleteDocuments
specifier|public
name|void
name|testDeleteDocuments
parameter_list|()
throws|throws
name|IOException
block|{
name|Directory
name|directory
init|=
name|createIndex
argument_list|()
decl_stmt|;
name|IndexWriter
name|writer
init|=
name|getWriter
argument_list|(
name|directory
argument_list|)
decl_stmt|;
name|ReferenceManager
argument_list|<
name|IndexSearcher
argument_list|>
name|mgr
init|=
operator|new
name|SearcherManager
argument_list|(
name|writer
argument_list|,
operator|new
name|SearcherFactory
argument_list|()
argument_list|)
decl_stmt|;
name|IndexSearcher
name|searcher
init|=
name|mgr
operator|.
name|acquire
argument_list|()
decl_stmt|;
name|TopDocs
name|topDocs
init|=
name|searcher
operator|.
name|search
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"foo"
argument_list|,
literal|"0"
argument_list|)
argument_list|)
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|topDocs
operator|.
name|totalHits
argument_list|)
expr_stmt|;
name|TrackingIndexWriter
name|mgrWriter
init|=
operator|new
name|TrackingIndexWriter
argument_list|(
name|writer
argument_list|)
decl_stmt|;
name|long
name|result
init|=
name|mgrWriter
operator|.
name|deleteDocuments
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"foo"
argument_list|,
literal|"0"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
argument_list|)
expr_stmt|;
comment|// writer.commit();
name|assertTrue
argument_list|(
name|writer
operator|.
name|hasDeletions
argument_list|()
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|maybeRefresh
argument_list|()
expr_stmt|;
name|searcher
operator|=
name|mgr
operator|.
name|acquire
argument_list|()
expr_stmt|;
name|topDocs
operator|=
name|searcher
operator|.
name|search
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"foo"
argument_list|,
literal|"0"
argument_list|)
argument_list|)
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|topDocs
operator|.
name|totalHits
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
