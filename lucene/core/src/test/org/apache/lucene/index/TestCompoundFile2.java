begin_unit
begin_package
DECL|package|org.apache.lucene.index
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|CompoundFileDirectory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexInput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|StringHelper
import|;
end_import
begin_comment
comment|/**   * Setup a large compound file with a number of components, each of  * which is a sequential file (so that we can easily tell that we are  * reading in the right byte). The methods sets up 20 files - f0 to f19,  * the size of each file is 1000 bytes.  */
end_comment
begin_class
DECL|class|TestCompoundFile2
specifier|public
class|class
name|TestCompoundFile2
extends|extends
name|LuceneTestCase
block|{
DECL|field|dir
specifier|private
name|Directory
name|dir
decl_stmt|;
DECL|field|id
name|byte
name|id
index|[]
decl_stmt|;
annotation|@
name|Override
DECL|method|setUp
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|id
operator|=
name|StringHelper
operator|.
name|randomId
argument_list|()
expr_stmt|;
name|dir
operator|=
name|newDirectory
argument_list|()
expr_stmt|;
name|CompoundFileDirectory
name|cw
init|=
operator|new
name|CompoundFileDirectory
argument_list|(
name|id
argument_list|,
name|dir
argument_list|,
literal|"f.comp"
argument_list|,
name|newIOContext
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|20
condition|;
name|i
operator|++
control|)
block|{
name|TestCompoundFile
operator|.
name|createSequenceFile
argument_list|(
name|dir
argument_list|,
literal|"f"
operator|+
name|i
argument_list|,
operator|(
name|byte
operator|)
literal|0
argument_list|,
literal|2000
argument_list|)
expr_stmt|;
name|String
name|fileName
init|=
literal|"f"
operator|+
name|i
decl_stmt|;
name|dir
operator|.
name|copy
argument_list|(
name|cw
argument_list|,
name|fileName
argument_list|,
name|fileName
argument_list|,
name|newIOContext
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|cw
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|tearDown
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
DECL|method|testClonedStreamsClosing
specifier|public
name|void
name|testClonedStreamsClosing
parameter_list|()
throws|throws
name|IOException
block|{
name|CompoundFileDirectory
name|cr
init|=
operator|new
name|CompoundFileDirectory
argument_list|(
name|id
argument_list|,
name|dir
argument_list|,
literal|"f.comp"
argument_list|,
name|newIOContext
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// basic clone
name|IndexInput
name|expected
init|=
name|dir
operator|.
name|openInput
argument_list|(
literal|"f11"
argument_list|,
name|newIOContext
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|IndexInput
name|one
init|=
name|cr
operator|.
name|openInput
argument_list|(
literal|"f11"
argument_list|,
name|newIOContext
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|IndexInput
name|two
init|=
name|one
operator|.
name|clone
argument_list|()
decl_stmt|;
name|TestCompoundFile
operator|.
name|assertSameStreams
argument_list|(
literal|"basic clone one"
argument_list|,
name|expected
argument_list|,
name|one
argument_list|)
expr_stmt|;
name|expected
operator|.
name|seek
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|TestCompoundFile
operator|.
name|assertSameStreams
argument_list|(
literal|"basic clone two"
argument_list|,
name|expected
argument_list|,
name|two
argument_list|)
expr_stmt|;
comment|// Now close the first stream
name|one
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// The following should really fail since we couldn't expect to
comment|// access a file once close has been called on it (regardless of
comment|// buffering and/or clone magic)
name|expected
operator|.
name|seek
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|two
operator|.
name|seek
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|TestCompoundFile
operator|.
name|assertSameStreams
argument_list|(
literal|"basic clone two/2"
argument_list|,
name|expected
argument_list|,
name|two
argument_list|)
expr_stmt|;
comment|// Now close the compound reader
name|cr
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// The following may also fail since the compound stream is closed
name|expected
operator|.
name|seek
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|two
operator|.
name|seek
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|//assertSameStreams("basic clone two/3", expected, two);
comment|// Now close the second clone
name|two
operator|.
name|close
argument_list|()
expr_stmt|;
name|expected
operator|.
name|seek
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|//assertSameStreams("basic clone two/4", expected, two);
name|expected
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/** This test opens two files from a compound stream and verifies that    *  their file positions are independent of each other.    */
DECL|method|testRandomAccess
specifier|public
name|void
name|testRandomAccess
parameter_list|()
throws|throws
name|IOException
block|{
name|CompoundFileDirectory
name|cr
init|=
operator|new
name|CompoundFileDirectory
argument_list|(
name|id
argument_list|,
name|dir
argument_list|,
literal|"f.comp"
argument_list|,
name|newIOContext
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// Open two files
name|IndexInput
name|e1
init|=
name|dir
operator|.
name|openInput
argument_list|(
literal|"f11"
argument_list|,
name|newIOContext
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|IndexInput
name|e2
init|=
name|dir
operator|.
name|openInput
argument_list|(
literal|"f3"
argument_list|,
name|newIOContext
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|IndexInput
name|a1
init|=
name|cr
operator|.
name|openInput
argument_list|(
literal|"f11"
argument_list|,
name|newIOContext
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|IndexInput
name|a2
init|=
name|dir
operator|.
name|openInput
argument_list|(
literal|"f3"
argument_list|,
name|newIOContext
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
comment|// Seek the first pair
name|e1
operator|.
name|seek
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|a1
operator|.
name|seek
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|100
argument_list|,
name|e1
operator|.
name|getFilePointer
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|100
argument_list|,
name|a1
operator|.
name|getFilePointer
argument_list|()
argument_list|)
expr_stmt|;
name|byte
name|be1
init|=
name|e1
operator|.
name|readByte
argument_list|()
decl_stmt|;
name|byte
name|ba1
init|=
name|a1
operator|.
name|readByte
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|be1
argument_list|,
name|ba1
argument_list|)
expr_stmt|;
comment|// Now seek the second pair
name|e2
operator|.
name|seek
argument_list|(
literal|1027
argument_list|)
expr_stmt|;
name|a2
operator|.
name|seek
argument_list|(
literal|1027
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1027
argument_list|,
name|e2
operator|.
name|getFilePointer
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1027
argument_list|,
name|a2
operator|.
name|getFilePointer
argument_list|()
argument_list|)
expr_stmt|;
name|byte
name|be2
init|=
name|e2
operator|.
name|readByte
argument_list|()
decl_stmt|;
name|byte
name|ba2
init|=
name|a2
operator|.
name|readByte
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|be2
argument_list|,
name|ba2
argument_list|)
expr_stmt|;
comment|// Now make sure the first one didn't move
name|assertEquals
argument_list|(
literal|101
argument_list|,
name|e1
operator|.
name|getFilePointer
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|101
argument_list|,
name|a1
operator|.
name|getFilePointer
argument_list|()
argument_list|)
expr_stmt|;
name|be1
operator|=
name|e1
operator|.
name|readByte
argument_list|()
expr_stmt|;
name|ba1
operator|=
name|a1
operator|.
name|readByte
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|be1
argument_list|,
name|ba1
argument_list|)
expr_stmt|;
comment|// Now more the first one again, past the buffer length
name|e1
operator|.
name|seek
argument_list|(
literal|1910
argument_list|)
expr_stmt|;
name|a1
operator|.
name|seek
argument_list|(
literal|1910
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1910
argument_list|,
name|e1
operator|.
name|getFilePointer
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1910
argument_list|,
name|a1
operator|.
name|getFilePointer
argument_list|()
argument_list|)
expr_stmt|;
name|be1
operator|=
name|e1
operator|.
name|readByte
argument_list|()
expr_stmt|;
name|ba1
operator|=
name|a1
operator|.
name|readByte
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|be1
argument_list|,
name|ba1
argument_list|)
expr_stmt|;
comment|// Now make sure the second set didn't move
name|assertEquals
argument_list|(
literal|1028
argument_list|,
name|e2
operator|.
name|getFilePointer
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1028
argument_list|,
name|a2
operator|.
name|getFilePointer
argument_list|()
argument_list|)
expr_stmt|;
name|be2
operator|=
name|e2
operator|.
name|readByte
argument_list|()
expr_stmt|;
name|ba2
operator|=
name|a2
operator|.
name|readByte
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|be2
argument_list|,
name|ba2
argument_list|)
expr_stmt|;
comment|// Move the second set back, again cross the buffer size
name|e2
operator|.
name|seek
argument_list|(
literal|17
argument_list|)
expr_stmt|;
name|a2
operator|.
name|seek
argument_list|(
literal|17
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|17
argument_list|,
name|e2
operator|.
name|getFilePointer
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|17
argument_list|,
name|a2
operator|.
name|getFilePointer
argument_list|()
argument_list|)
expr_stmt|;
name|be2
operator|=
name|e2
operator|.
name|readByte
argument_list|()
expr_stmt|;
name|ba2
operator|=
name|a2
operator|.
name|readByte
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|be2
argument_list|,
name|ba2
argument_list|)
expr_stmt|;
comment|// Finally, make sure the first set didn't move
comment|// Now make sure the first one didn't move
name|assertEquals
argument_list|(
literal|1911
argument_list|,
name|e1
operator|.
name|getFilePointer
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1911
argument_list|,
name|a1
operator|.
name|getFilePointer
argument_list|()
argument_list|)
expr_stmt|;
name|be1
operator|=
name|e1
operator|.
name|readByte
argument_list|()
expr_stmt|;
name|ba1
operator|=
name|a1
operator|.
name|readByte
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|be1
argument_list|,
name|ba1
argument_list|)
expr_stmt|;
name|e1
operator|.
name|close
argument_list|()
expr_stmt|;
name|e2
operator|.
name|close
argument_list|()
expr_stmt|;
name|a1
operator|.
name|close
argument_list|()
expr_stmt|;
name|a2
operator|.
name|close
argument_list|()
expr_stmt|;
name|cr
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/** This test opens two files from a compound stream and verifies that    *  their file positions are independent of each other.    */
DECL|method|testRandomAccessClones
specifier|public
name|void
name|testRandomAccessClones
parameter_list|()
throws|throws
name|IOException
block|{
name|CompoundFileDirectory
name|cr
init|=
operator|new
name|CompoundFileDirectory
argument_list|(
name|id
argument_list|,
name|dir
argument_list|,
literal|"f.comp"
argument_list|,
name|newIOContext
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// Open two files
name|IndexInput
name|e1
init|=
name|cr
operator|.
name|openInput
argument_list|(
literal|"f11"
argument_list|,
name|newIOContext
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|IndexInput
name|e2
init|=
name|cr
operator|.
name|openInput
argument_list|(
literal|"f3"
argument_list|,
name|newIOContext
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|IndexInput
name|a1
init|=
name|e1
operator|.
name|clone
argument_list|()
decl_stmt|;
name|IndexInput
name|a2
init|=
name|e2
operator|.
name|clone
argument_list|()
decl_stmt|;
comment|// Seek the first pair
name|e1
operator|.
name|seek
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|a1
operator|.
name|seek
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|100
argument_list|,
name|e1
operator|.
name|getFilePointer
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|100
argument_list|,
name|a1
operator|.
name|getFilePointer
argument_list|()
argument_list|)
expr_stmt|;
name|byte
name|be1
init|=
name|e1
operator|.
name|readByte
argument_list|()
decl_stmt|;
name|byte
name|ba1
init|=
name|a1
operator|.
name|readByte
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|be1
argument_list|,
name|ba1
argument_list|)
expr_stmt|;
comment|// Now seek the second pair
name|e2
operator|.
name|seek
argument_list|(
literal|1027
argument_list|)
expr_stmt|;
name|a2
operator|.
name|seek
argument_list|(
literal|1027
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1027
argument_list|,
name|e2
operator|.
name|getFilePointer
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1027
argument_list|,
name|a2
operator|.
name|getFilePointer
argument_list|()
argument_list|)
expr_stmt|;
name|byte
name|be2
init|=
name|e2
operator|.
name|readByte
argument_list|()
decl_stmt|;
name|byte
name|ba2
init|=
name|a2
operator|.
name|readByte
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|be2
argument_list|,
name|ba2
argument_list|)
expr_stmt|;
comment|// Now make sure the first one didn't move
name|assertEquals
argument_list|(
literal|101
argument_list|,
name|e1
operator|.
name|getFilePointer
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|101
argument_list|,
name|a1
operator|.
name|getFilePointer
argument_list|()
argument_list|)
expr_stmt|;
name|be1
operator|=
name|e1
operator|.
name|readByte
argument_list|()
expr_stmt|;
name|ba1
operator|=
name|a1
operator|.
name|readByte
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|be1
argument_list|,
name|ba1
argument_list|)
expr_stmt|;
comment|// Now more the first one again, past the buffer length
name|e1
operator|.
name|seek
argument_list|(
literal|1910
argument_list|)
expr_stmt|;
name|a1
operator|.
name|seek
argument_list|(
literal|1910
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1910
argument_list|,
name|e1
operator|.
name|getFilePointer
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1910
argument_list|,
name|a1
operator|.
name|getFilePointer
argument_list|()
argument_list|)
expr_stmt|;
name|be1
operator|=
name|e1
operator|.
name|readByte
argument_list|()
expr_stmt|;
name|ba1
operator|=
name|a1
operator|.
name|readByte
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|be1
argument_list|,
name|ba1
argument_list|)
expr_stmt|;
comment|// Now make sure the second set didn't move
name|assertEquals
argument_list|(
literal|1028
argument_list|,
name|e2
operator|.
name|getFilePointer
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1028
argument_list|,
name|a2
operator|.
name|getFilePointer
argument_list|()
argument_list|)
expr_stmt|;
name|be2
operator|=
name|e2
operator|.
name|readByte
argument_list|()
expr_stmt|;
name|ba2
operator|=
name|a2
operator|.
name|readByte
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|be2
argument_list|,
name|ba2
argument_list|)
expr_stmt|;
comment|// Move the second set back, again cross the buffer size
name|e2
operator|.
name|seek
argument_list|(
literal|17
argument_list|)
expr_stmt|;
name|a2
operator|.
name|seek
argument_list|(
literal|17
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|17
argument_list|,
name|e2
operator|.
name|getFilePointer
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|17
argument_list|,
name|a2
operator|.
name|getFilePointer
argument_list|()
argument_list|)
expr_stmt|;
name|be2
operator|=
name|e2
operator|.
name|readByte
argument_list|()
expr_stmt|;
name|ba2
operator|=
name|a2
operator|.
name|readByte
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|be2
argument_list|,
name|ba2
argument_list|)
expr_stmt|;
comment|// Finally, make sure the first set didn't move
comment|// Now make sure the first one didn't move
name|assertEquals
argument_list|(
literal|1911
argument_list|,
name|e1
operator|.
name|getFilePointer
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1911
argument_list|,
name|a1
operator|.
name|getFilePointer
argument_list|()
argument_list|)
expr_stmt|;
name|be1
operator|=
name|e1
operator|.
name|readByte
argument_list|()
expr_stmt|;
name|ba1
operator|=
name|a1
operator|.
name|readByte
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|be1
argument_list|,
name|ba1
argument_list|)
expr_stmt|;
name|e1
operator|.
name|close
argument_list|()
expr_stmt|;
name|e2
operator|.
name|close
argument_list|()
expr_stmt|;
name|a1
operator|.
name|close
argument_list|()
expr_stmt|;
name|a2
operator|.
name|close
argument_list|()
expr_stmt|;
name|cr
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testFileNotFound
specifier|public
name|void
name|testFileNotFound
parameter_list|()
throws|throws
name|IOException
block|{
name|CompoundFileDirectory
name|cr
init|=
operator|new
name|CompoundFileDirectory
argument_list|(
name|id
argument_list|,
name|dir
argument_list|,
literal|"f.comp"
argument_list|,
name|newIOContext
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// Open two files
try|try
block|{
name|cr
operator|.
name|openInput
argument_list|(
literal|"bogus"
argument_list|,
name|newIOContext
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"File not found"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|/* success */
comment|//System.out.println("SUCCESS: File Not Found: " + e);
block|}
name|cr
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testReadPastEOF
specifier|public
name|void
name|testReadPastEOF
parameter_list|()
throws|throws
name|IOException
block|{
name|CompoundFileDirectory
name|cr
init|=
operator|new
name|CompoundFileDirectory
argument_list|(
name|id
argument_list|,
name|dir
argument_list|,
literal|"f.comp"
argument_list|,
name|newIOContext
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|IndexInput
name|is
init|=
name|cr
operator|.
name|openInput
argument_list|(
literal|"f2"
argument_list|,
name|newIOContext
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|is
operator|.
name|seek
argument_list|(
name|is
operator|.
name|length
argument_list|()
operator|-
literal|10
argument_list|)
expr_stmt|;
name|byte
name|b
index|[]
init|=
operator|new
name|byte
index|[
literal|100
index|]
decl_stmt|;
name|is
operator|.
name|readBytes
argument_list|(
name|b
argument_list|,
literal|0
argument_list|,
literal|10
argument_list|)
expr_stmt|;
try|try
block|{
name|is
operator|.
name|readByte
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Single byte read past end of file"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|/* success */
comment|//System.out.println("SUCCESS: single byte read past end of file: " + e);
block|}
name|is
operator|.
name|seek
argument_list|(
name|is
operator|.
name|length
argument_list|()
operator|-
literal|10
argument_list|)
expr_stmt|;
try|try
block|{
name|is
operator|.
name|readBytes
argument_list|(
name|b
argument_list|,
literal|0
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Block read past end of file"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|/* success */
comment|//System.out.println("SUCCESS: block read past end of file: " + e);
block|}
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
name|cr
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class
end_unit
