begin_unit
begin_package
DECL|package|org.apache.lucene.index
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|CompoundFileDirectory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IOContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexOutput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexInput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|SimpleFSDirectory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|_TestHelper
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|_TestUtil
import|;
end_import
begin_class
DECL|class|TestCompoundFile
specifier|public
class|class
name|TestCompoundFile
extends|extends
name|LuceneTestCase
block|{
DECL|field|dir
specifier|private
name|Directory
name|dir
decl_stmt|;
annotation|@
name|Override
DECL|method|setUp
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|File
name|file
init|=
name|_TestUtil
operator|.
name|getTempDir
argument_list|(
literal|"testIndex"
argument_list|)
decl_stmt|;
comment|// use a simple FSDir here, to be sure to have SimpleFSInputs
name|dir
operator|=
operator|new
name|SimpleFSDirectory
argument_list|(
name|file
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|tearDown
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
comment|/** Creates a file of the specified size with random data. */
DECL|method|createRandomFile
specifier|private
name|void
name|createRandomFile
parameter_list|(
name|Directory
name|dir
parameter_list|,
name|String
name|name
parameter_list|,
name|int
name|size
parameter_list|)
throws|throws
name|IOException
block|{
name|IndexOutput
name|os
init|=
name|dir
operator|.
name|createOutput
argument_list|(
name|name
argument_list|,
name|newIOContext
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|byte
name|b
init|=
call|(
name|byte
call|)
argument_list|(
name|Math
operator|.
name|random
argument_list|()
operator|*
literal|256
argument_list|)
decl_stmt|;
name|os
operator|.
name|writeByte
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/** Creates a file of the specified size with sequential data. The first      *  byte is written as the start byte provided. All subsequent bytes are      *  computed as start + offset where offset is the number of the byte.      */
DECL|method|createSequenceFile
specifier|private
name|void
name|createSequenceFile
parameter_list|(
name|Directory
name|dir
parameter_list|,
name|String
name|name
parameter_list|,
name|byte
name|start
parameter_list|,
name|int
name|size
parameter_list|)
throws|throws
name|IOException
block|{
name|IndexOutput
name|os
init|=
name|dir
operator|.
name|createOutput
argument_list|(
name|name
argument_list|,
name|newIOContext
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|os
operator|.
name|writeByte
argument_list|(
name|start
argument_list|)
expr_stmt|;
name|start
operator|++
expr_stmt|;
block|}
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|assertSameStreams
specifier|private
name|void
name|assertSameStreams
parameter_list|(
name|String
name|msg
parameter_list|,
name|IndexInput
name|expected
parameter_list|,
name|IndexInput
name|test
parameter_list|)
throws|throws
name|IOException
block|{
name|assertNotNull
argument_list|(
name|msg
operator|+
literal|" null expected"
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|msg
operator|+
literal|" null test"
argument_list|,
name|test
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|msg
operator|+
literal|" length"
argument_list|,
name|expected
operator|.
name|length
argument_list|()
argument_list|,
name|test
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|msg
operator|+
literal|" position"
argument_list|,
name|expected
operator|.
name|getFilePointer
argument_list|()
argument_list|,
name|test
operator|.
name|getFilePointer
argument_list|()
argument_list|)
expr_stmt|;
name|byte
name|expectedBuffer
index|[]
init|=
operator|new
name|byte
index|[
literal|512
index|]
decl_stmt|;
name|byte
name|testBuffer
index|[]
init|=
operator|new
name|byte
index|[
name|expectedBuffer
operator|.
name|length
index|]
decl_stmt|;
name|long
name|remainder
init|=
name|expected
operator|.
name|length
argument_list|()
operator|-
name|expected
operator|.
name|getFilePointer
argument_list|()
decl_stmt|;
while|while
condition|(
name|remainder
operator|>
literal|0
condition|)
block|{
name|int
name|readLen
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|min
argument_list|(
name|remainder
argument_list|,
name|expectedBuffer
operator|.
name|length
argument_list|)
decl_stmt|;
name|expected
operator|.
name|readBytes
argument_list|(
name|expectedBuffer
argument_list|,
literal|0
argument_list|,
name|readLen
argument_list|)
expr_stmt|;
name|test
operator|.
name|readBytes
argument_list|(
name|testBuffer
argument_list|,
literal|0
argument_list|,
name|readLen
argument_list|)
expr_stmt|;
name|assertEqualArrays
argument_list|(
name|msg
operator|+
literal|", remainder "
operator|+
name|remainder
argument_list|,
name|expectedBuffer
argument_list|,
name|testBuffer
argument_list|,
literal|0
argument_list|,
name|readLen
argument_list|)
expr_stmt|;
name|remainder
operator|-=
name|readLen
expr_stmt|;
block|}
block|}
DECL|method|assertSameStreams
specifier|private
name|void
name|assertSameStreams
parameter_list|(
name|String
name|msg
parameter_list|,
name|IndexInput
name|expected
parameter_list|,
name|IndexInput
name|actual
parameter_list|,
name|long
name|seekTo
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|seekTo
operator|>=
literal|0
operator|&&
name|seekTo
operator|<
name|expected
operator|.
name|length
argument_list|()
condition|)
block|{
name|expected
operator|.
name|seek
argument_list|(
name|seekTo
argument_list|)
expr_stmt|;
name|actual
operator|.
name|seek
argument_list|(
name|seekTo
argument_list|)
expr_stmt|;
name|assertSameStreams
argument_list|(
name|msg
operator|+
literal|", seek(mid)"
argument_list|,
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|assertSameSeekBehavior
specifier|private
name|void
name|assertSameSeekBehavior
parameter_list|(
name|String
name|msg
parameter_list|,
name|IndexInput
name|expected
parameter_list|,
name|IndexInput
name|actual
parameter_list|)
throws|throws
name|IOException
block|{
comment|// seek to 0
name|long
name|point
init|=
literal|0
decl_stmt|;
name|assertSameStreams
argument_list|(
name|msg
operator|+
literal|", seek(0)"
argument_list|,
name|expected
argument_list|,
name|actual
argument_list|,
name|point
argument_list|)
expr_stmt|;
comment|// seek to middle
name|point
operator|=
name|expected
operator|.
name|length
argument_list|()
operator|/
literal|2l
expr_stmt|;
name|assertSameStreams
argument_list|(
name|msg
operator|+
literal|", seek(mid)"
argument_list|,
name|expected
argument_list|,
name|actual
argument_list|,
name|point
argument_list|)
expr_stmt|;
comment|// seek to end - 2
name|point
operator|=
name|expected
operator|.
name|length
argument_list|()
operator|-
literal|2
expr_stmt|;
name|assertSameStreams
argument_list|(
name|msg
operator|+
literal|", seek(end-2)"
argument_list|,
name|expected
argument_list|,
name|actual
argument_list|,
name|point
argument_list|)
expr_stmt|;
comment|// seek to end - 1
name|point
operator|=
name|expected
operator|.
name|length
argument_list|()
operator|-
literal|1
expr_stmt|;
name|assertSameStreams
argument_list|(
name|msg
operator|+
literal|", seek(end-1)"
argument_list|,
name|expected
argument_list|,
name|actual
argument_list|,
name|point
argument_list|)
expr_stmt|;
comment|// seek to the end
name|point
operator|=
name|expected
operator|.
name|length
argument_list|()
expr_stmt|;
name|assertSameStreams
argument_list|(
name|msg
operator|+
literal|", seek(end)"
argument_list|,
name|expected
argument_list|,
name|actual
argument_list|,
name|point
argument_list|)
expr_stmt|;
comment|// seek past end
name|point
operator|=
name|expected
operator|.
name|length
argument_list|()
operator|+
literal|1
expr_stmt|;
name|assertSameStreams
argument_list|(
name|msg
operator|+
literal|", seek(end+1)"
argument_list|,
name|expected
argument_list|,
name|actual
argument_list|,
name|point
argument_list|)
expr_stmt|;
block|}
DECL|method|assertEqualArrays
specifier|private
name|void
name|assertEqualArrays
parameter_list|(
name|String
name|msg
parameter_list|,
name|byte
index|[]
name|expected
parameter_list|,
name|byte
index|[]
name|test
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|len
parameter_list|)
block|{
name|assertNotNull
argument_list|(
name|msg
operator|+
literal|" null expected"
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|msg
operator|+
literal|" null test"
argument_list|,
name|test
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|start
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|msg
operator|+
literal|" "
operator|+
name|i
argument_list|,
name|expected
index|[
name|i
index|]
argument_list|,
name|test
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
comment|// ===========================================================
comment|//  Tests of the basic CompoundFile functionality
comment|// ===========================================================
comment|/** This test creates compound file based on a single file.      *  Files of different sizes are tested: 0, 1, 10, 100 bytes.      */
DECL|method|testSingleFile
specifier|public
name|void
name|testSingleFile
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|data
index|[]
init|=
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|1
block|,
literal|10
block|,
literal|100
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|data
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|name
init|=
literal|"t"
operator|+
name|data
index|[
name|i
index|]
decl_stmt|;
name|createSequenceFile
argument_list|(
name|dir
argument_list|,
name|name
argument_list|,
operator|(
name|byte
operator|)
literal|0
argument_list|,
name|data
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|CompoundFileDirectory
name|csw
init|=
operator|new
name|CompoundFileDirectory
argument_list|(
name|dir
argument_list|,
name|name
operator|+
literal|".cfs"
argument_list|,
name|newIOContext
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|dir
operator|.
name|copy
argument_list|(
name|csw
argument_list|,
name|name
argument_list|,
name|name
argument_list|,
name|newIOContext
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|csw
operator|.
name|close
argument_list|()
expr_stmt|;
name|CompoundFileDirectory
name|csr
init|=
operator|new
name|CompoundFileDirectory
argument_list|(
name|dir
argument_list|,
name|name
operator|+
literal|".cfs"
argument_list|,
name|newIOContext
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|IndexInput
name|expected
init|=
name|dir
operator|.
name|openInput
argument_list|(
name|name
argument_list|,
name|newIOContext
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|IndexInput
name|actual
init|=
name|csr
operator|.
name|openInput
argument_list|(
name|name
argument_list|,
name|newIOContext
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertSameStreams
argument_list|(
name|name
argument_list|,
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
name|assertSameSeekBehavior
argument_list|(
name|name
argument_list|,
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
name|expected
operator|.
name|close
argument_list|()
expr_stmt|;
name|actual
operator|.
name|close
argument_list|()
expr_stmt|;
name|csr
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/** This test creates compound file based on two files.      *      */
DECL|method|testTwoFiles
specifier|public
name|void
name|testTwoFiles
parameter_list|()
throws|throws
name|IOException
block|{
name|createSequenceFile
argument_list|(
name|dir
argument_list|,
literal|"d1"
argument_list|,
operator|(
name|byte
operator|)
literal|0
argument_list|,
literal|15
argument_list|)
expr_stmt|;
name|createSequenceFile
argument_list|(
name|dir
argument_list|,
literal|"d2"
argument_list|,
operator|(
name|byte
operator|)
literal|0
argument_list|,
literal|114
argument_list|)
expr_stmt|;
name|CompoundFileDirectory
name|csw
init|=
operator|new
name|CompoundFileDirectory
argument_list|(
name|dir
argument_list|,
literal|"d.cfs"
argument_list|,
name|newIOContext
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|dir
operator|.
name|copy
argument_list|(
name|csw
argument_list|,
literal|"d1"
argument_list|,
literal|"d1"
argument_list|,
name|newIOContext
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|dir
operator|.
name|copy
argument_list|(
name|csw
argument_list|,
literal|"d2"
argument_list|,
literal|"d2"
argument_list|,
name|newIOContext
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|csw
operator|.
name|close
argument_list|()
expr_stmt|;
name|CompoundFileDirectory
name|csr
init|=
operator|new
name|CompoundFileDirectory
argument_list|(
name|dir
argument_list|,
literal|"d.cfs"
argument_list|,
name|newIOContext
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|IndexInput
name|expected
init|=
name|dir
operator|.
name|openInput
argument_list|(
literal|"d1"
argument_list|,
name|newIOContext
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|IndexInput
name|actual
init|=
name|csr
operator|.
name|openInput
argument_list|(
literal|"d1"
argument_list|,
name|newIOContext
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertSameStreams
argument_list|(
literal|"d1"
argument_list|,
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
name|assertSameSeekBehavior
argument_list|(
literal|"d1"
argument_list|,
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
name|expected
operator|.
name|close
argument_list|()
expr_stmt|;
name|actual
operator|.
name|close
argument_list|()
expr_stmt|;
name|expected
operator|=
name|dir
operator|.
name|openInput
argument_list|(
literal|"d2"
argument_list|,
name|newIOContext
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|actual
operator|=
name|csr
operator|.
name|openInput
argument_list|(
literal|"d2"
argument_list|,
name|newIOContext
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertSameStreams
argument_list|(
literal|"d2"
argument_list|,
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
name|assertSameSeekBehavior
argument_list|(
literal|"d2"
argument_list|,
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
name|expected
operator|.
name|close
argument_list|()
expr_stmt|;
name|actual
operator|.
name|close
argument_list|()
expr_stmt|;
name|csr
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/** This test creates a compound file based on a large number of files of      *  various length. The file content is generated randomly. The sizes range      *  from 0 to 1Mb. Some of the sizes are selected to test the buffering      *  logic in the file reading code. For this the chunk variable is set to      *  the length of the buffer used internally by the compound file logic.      */
DECL|method|testRandomFiles
specifier|public
name|void
name|testRandomFiles
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Setup the test segment
name|String
name|segment
init|=
literal|"test"
decl_stmt|;
name|int
name|chunk
init|=
literal|1024
decl_stmt|;
comment|// internal buffer size used by the stream
name|createRandomFile
argument_list|(
name|dir
argument_list|,
name|segment
operator|+
literal|".zero"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|createRandomFile
argument_list|(
name|dir
argument_list|,
name|segment
operator|+
literal|".one"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|createRandomFile
argument_list|(
name|dir
argument_list|,
name|segment
operator|+
literal|".ten"
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|createRandomFile
argument_list|(
name|dir
argument_list|,
name|segment
operator|+
literal|".hundred"
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|createRandomFile
argument_list|(
name|dir
argument_list|,
name|segment
operator|+
literal|".big1"
argument_list|,
name|chunk
argument_list|)
expr_stmt|;
name|createRandomFile
argument_list|(
name|dir
argument_list|,
name|segment
operator|+
literal|".big2"
argument_list|,
name|chunk
operator|-
literal|1
argument_list|)
expr_stmt|;
name|createRandomFile
argument_list|(
name|dir
argument_list|,
name|segment
operator|+
literal|".big3"
argument_list|,
name|chunk
operator|+
literal|1
argument_list|)
expr_stmt|;
name|createRandomFile
argument_list|(
name|dir
argument_list|,
name|segment
operator|+
literal|".big4"
argument_list|,
literal|3
operator|*
name|chunk
argument_list|)
expr_stmt|;
name|createRandomFile
argument_list|(
name|dir
argument_list|,
name|segment
operator|+
literal|".big5"
argument_list|,
literal|3
operator|*
name|chunk
operator|-
literal|1
argument_list|)
expr_stmt|;
name|createRandomFile
argument_list|(
name|dir
argument_list|,
name|segment
operator|+
literal|".big6"
argument_list|,
literal|3
operator|*
name|chunk
operator|+
literal|1
argument_list|)
expr_stmt|;
name|createRandomFile
argument_list|(
name|dir
argument_list|,
name|segment
operator|+
literal|".big7"
argument_list|,
literal|1000
operator|*
name|chunk
argument_list|)
expr_stmt|;
comment|// Setup extraneous files
name|createRandomFile
argument_list|(
name|dir
argument_list|,
literal|"onetwothree"
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|createRandomFile
argument_list|(
name|dir
argument_list|,
name|segment
operator|+
literal|".notIn"
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|createRandomFile
argument_list|(
name|dir
argument_list|,
name|segment
operator|+
literal|".notIn2"
argument_list|,
literal|51
argument_list|)
expr_stmt|;
comment|// Now test
name|CompoundFileDirectory
name|csw
init|=
operator|new
name|CompoundFileDirectory
argument_list|(
name|dir
argument_list|,
literal|"test.cfs"
argument_list|,
name|newIOContext
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
specifier|final
name|String
name|data
index|[]
init|=
operator|new
name|String
index|[]
block|{
literal|".zero"
block|,
literal|".one"
block|,
literal|".ten"
block|,
literal|".hundred"
block|,
literal|".big1"
block|,
literal|".big2"
block|,
literal|".big3"
block|,
literal|".big4"
block|,
literal|".big5"
block|,
literal|".big6"
block|,
literal|".big7"
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|data
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|fileName
init|=
name|segment
operator|+
name|data
index|[
name|i
index|]
decl_stmt|;
name|dir
operator|.
name|copy
argument_list|(
name|csw
argument_list|,
name|fileName
argument_list|,
name|fileName
argument_list|,
name|newIOContext
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|csw
operator|.
name|close
argument_list|()
expr_stmt|;
name|CompoundFileDirectory
name|csr
init|=
operator|new
name|CompoundFileDirectory
argument_list|(
name|dir
argument_list|,
literal|"test.cfs"
argument_list|,
name|newIOContext
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|data
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|IndexInput
name|check
init|=
name|dir
operator|.
name|openInput
argument_list|(
name|segment
operator|+
name|data
index|[
name|i
index|]
argument_list|,
name|newIOContext
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|IndexInput
name|test
init|=
name|csr
operator|.
name|openInput
argument_list|(
name|segment
operator|+
name|data
index|[
name|i
index|]
argument_list|,
name|newIOContext
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertSameStreams
argument_list|(
name|data
index|[
name|i
index|]
argument_list|,
name|check
argument_list|,
name|test
argument_list|)
expr_stmt|;
name|assertSameSeekBehavior
argument_list|(
name|data
index|[
name|i
index|]
argument_list|,
name|check
argument_list|,
name|test
argument_list|)
expr_stmt|;
name|test
operator|.
name|close
argument_list|()
expr_stmt|;
name|check
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|csr
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/** Setup a larger compound file with a number of components, each of      *  which is a sequential file (so that we can easily tell that we are      *  reading in the right byte). The methods sets up 20 files - f0 to f19,      *  the size of each file is 1000 bytes.      */
DECL|method|setUp_2
specifier|private
name|void
name|setUp_2
parameter_list|()
throws|throws
name|IOException
block|{
name|CompoundFileDirectory
name|cw
init|=
operator|new
name|CompoundFileDirectory
argument_list|(
name|dir
argument_list|,
literal|"f.comp"
argument_list|,
name|newIOContext
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|20
condition|;
name|i
operator|++
control|)
block|{
name|createSequenceFile
argument_list|(
name|dir
argument_list|,
literal|"f"
operator|+
name|i
argument_list|,
operator|(
name|byte
operator|)
literal|0
argument_list|,
literal|2000
argument_list|)
expr_stmt|;
name|String
name|fileName
init|=
literal|"f"
operator|+
name|i
decl_stmt|;
name|dir
operator|.
name|copy
argument_list|(
name|cw
argument_list|,
name|fileName
argument_list|,
name|fileName
argument_list|,
name|newIOContext
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|cw
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testReadAfterClose
specifier|public
name|void
name|testReadAfterClose
parameter_list|()
throws|throws
name|IOException
block|{
name|demo_FSIndexInputBug
argument_list|(
name|dir
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
block|}
DECL|method|demo_FSIndexInputBug
specifier|private
name|void
name|demo_FSIndexInputBug
parameter_list|(
name|Directory
name|fsdir
parameter_list|,
name|String
name|file
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Setup the test file - we need more than 1024 bytes
name|IndexOutput
name|os
init|=
name|fsdir
operator|.
name|createOutput
argument_list|(
name|file
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2000
condition|;
name|i
operator|++
control|)
block|{
name|os
operator|.
name|writeByte
argument_list|(
operator|(
name|byte
operator|)
name|i
argument_list|)
expr_stmt|;
block|}
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
name|IndexInput
name|in
init|=
name|fsdir
operator|.
name|openInput
argument_list|(
name|file
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
comment|// This read primes the buffer in IndexInput
name|in
operator|.
name|readByte
argument_list|()
expr_stmt|;
comment|// Close the file
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// ERROR: this call should fail, but succeeds because the buffer
comment|// is still filled
name|in
operator|.
name|readByte
argument_list|()
expr_stmt|;
comment|// ERROR: this call should fail, but succeeds for some reason as well
name|in
operator|.
name|seek
argument_list|(
literal|1099
argument_list|)
expr_stmt|;
try|try
block|{
comment|// OK: this call correctly fails. We are now past the 1024 internal
comment|// buffer, so an actual IO is attempted, which fails
name|in
operator|.
name|readByte
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"expected readByte() to throw exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// expected exception
block|}
block|}
DECL|method|testClonedStreamsClosing
specifier|public
name|void
name|testClonedStreamsClosing
parameter_list|()
throws|throws
name|IOException
block|{
name|setUp_2
argument_list|()
expr_stmt|;
name|CompoundFileDirectory
name|cr
init|=
operator|new
name|CompoundFileDirectory
argument_list|(
name|dir
argument_list|,
literal|"f.comp"
argument_list|,
name|newIOContext
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// basic clone
name|IndexInput
name|expected
init|=
name|dir
operator|.
name|openInput
argument_list|(
literal|"f11"
argument_list|,
name|newIOContext
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
comment|// this test only works for FSIndexInput
name|assertTrue
argument_list|(
name|_TestHelper
operator|.
name|isSimpleFSIndexInput
argument_list|(
name|expected
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|_TestHelper
operator|.
name|isSimpleFSIndexInputOpen
argument_list|(
name|expected
argument_list|)
argument_list|)
expr_stmt|;
name|IndexInput
name|one
init|=
name|cr
operator|.
name|openInput
argument_list|(
literal|"f11"
argument_list|,
name|newIOContext
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|IndexInput
name|two
init|=
operator|(
name|IndexInput
operator|)
name|one
operator|.
name|clone
argument_list|()
decl_stmt|;
name|assertSameStreams
argument_list|(
literal|"basic clone one"
argument_list|,
name|expected
argument_list|,
name|one
argument_list|)
expr_stmt|;
name|expected
operator|.
name|seek
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertSameStreams
argument_list|(
literal|"basic clone two"
argument_list|,
name|expected
argument_list|,
name|two
argument_list|)
expr_stmt|;
comment|// Now close the first stream
name|one
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// The following should really fail since we couldn't expect to
comment|// access a file once close has been called on it (regardless of
comment|// buffering and/or clone magic)
name|expected
operator|.
name|seek
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|two
operator|.
name|seek
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertSameStreams
argument_list|(
literal|"basic clone two/2"
argument_list|,
name|expected
argument_list|,
name|two
argument_list|)
expr_stmt|;
comment|// Now close the compound reader
name|cr
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// The following may also fail since the compound stream is closed
name|expected
operator|.
name|seek
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|two
operator|.
name|seek
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|//assertSameStreams("basic clone two/3", expected, two);
comment|// Now close the second clone
name|two
operator|.
name|close
argument_list|()
expr_stmt|;
name|expected
operator|.
name|seek
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|two
operator|.
name|seek
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|//assertSameStreams("basic clone two/4", expected, two);
name|expected
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/** This test opens two files from a compound stream and verifies that      *  their file positions are independent of each other.      */
DECL|method|testRandomAccess
specifier|public
name|void
name|testRandomAccess
parameter_list|()
throws|throws
name|IOException
block|{
name|setUp_2
argument_list|()
expr_stmt|;
name|CompoundFileDirectory
name|cr
init|=
operator|new
name|CompoundFileDirectory
argument_list|(
name|dir
argument_list|,
literal|"f.comp"
argument_list|,
name|newIOContext
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// Open two files
name|IndexInput
name|e1
init|=
name|dir
operator|.
name|openInput
argument_list|(
literal|"f11"
argument_list|,
name|newIOContext
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|IndexInput
name|e2
init|=
name|dir
operator|.
name|openInput
argument_list|(
literal|"f3"
argument_list|,
name|newIOContext
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|IndexInput
name|a1
init|=
name|cr
operator|.
name|openInput
argument_list|(
literal|"f11"
argument_list|,
name|newIOContext
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|IndexInput
name|a2
init|=
name|dir
operator|.
name|openInput
argument_list|(
literal|"f3"
argument_list|,
name|newIOContext
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
comment|// Seek the first pair
name|e1
operator|.
name|seek
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|a1
operator|.
name|seek
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|100
argument_list|,
name|e1
operator|.
name|getFilePointer
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|100
argument_list|,
name|a1
operator|.
name|getFilePointer
argument_list|()
argument_list|)
expr_stmt|;
name|byte
name|be1
init|=
name|e1
operator|.
name|readByte
argument_list|()
decl_stmt|;
name|byte
name|ba1
init|=
name|a1
operator|.
name|readByte
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|be1
argument_list|,
name|ba1
argument_list|)
expr_stmt|;
comment|// Now seek the second pair
name|e2
operator|.
name|seek
argument_list|(
literal|1027
argument_list|)
expr_stmt|;
name|a2
operator|.
name|seek
argument_list|(
literal|1027
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1027
argument_list|,
name|e2
operator|.
name|getFilePointer
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1027
argument_list|,
name|a2
operator|.
name|getFilePointer
argument_list|()
argument_list|)
expr_stmt|;
name|byte
name|be2
init|=
name|e2
operator|.
name|readByte
argument_list|()
decl_stmt|;
name|byte
name|ba2
init|=
name|a2
operator|.
name|readByte
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|be2
argument_list|,
name|ba2
argument_list|)
expr_stmt|;
comment|// Now make sure the first one didn't move
name|assertEquals
argument_list|(
literal|101
argument_list|,
name|e1
operator|.
name|getFilePointer
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|101
argument_list|,
name|a1
operator|.
name|getFilePointer
argument_list|()
argument_list|)
expr_stmt|;
name|be1
operator|=
name|e1
operator|.
name|readByte
argument_list|()
expr_stmt|;
name|ba1
operator|=
name|a1
operator|.
name|readByte
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|be1
argument_list|,
name|ba1
argument_list|)
expr_stmt|;
comment|// Now more the first one again, past the buffer length
name|e1
operator|.
name|seek
argument_list|(
literal|1910
argument_list|)
expr_stmt|;
name|a1
operator|.
name|seek
argument_list|(
literal|1910
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1910
argument_list|,
name|e1
operator|.
name|getFilePointer
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1910
argument_list|,
name|a1
operator|.
name|getFilePointer
argument_list|()
argument_list|)
expr_stmt|;
name|be1
operator|=
name|e1
operator|.
name|readByte
argument_list|()
expr_stmt|;
name|ba1
operator|=
name|a1
operator|.
name|readByte
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|be1
argument_list|,
name|ba1
argument_list|)
expr_stmt|;
comment|// Now make sure the second set didn't move
name|assertEquals
argument_list|(
literal|1028
argument_list|,
name|e2
operator|.
name|getFilePointer
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1028
argument_list|,
name|a2
operator|.
name|getFilePointer
argument_list|()
argument_list|)
expr_stmt|;
name|be2
operator|=
name|e2
operator|.
name|readByte
argument_list|()
expr_stmt|;
name|ba2
operator|=
name|a2
operator|.
name|readByte
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|be2
argument_list|,
name|ba2
argument_list|)
expr_stmt|;
comment|// Move the second set back, again cross the buffer size
name|e2
operator|.
name|seek
argument_list|(
literal|17
argument_list|)
expr_stmt|;
name|a2
operator|.
name|seek
argument_list|(
literal|17
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|17
argument_list|,
name|e2
operator|.
name|getFilePointer
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|17
argument_list|,
name|a2
operator|.
name|getFilePointer
argument_list|()
argument_list|)
expr_stmt|;
name|be2
operator|=
name|e2
operator|.
name|readByte
argument_list|()
expr_stmt|;
name|ba2
operator|=
name|a2
operator|.
name|readByte
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|be2
argument_list|,
name|ba2
argument_list|)
expr_stmt|;
comment|// Finally, make sure the first set didn't move
comment|// Now make sure the first one didn't move
name|assertEquals
argument_list|(
literal|1911
argument_list|,
name|e1
operator|.
name|getFilePointer
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1911
argument_list|,
name|a1
operator|.
name|getFilePointer
argument_list|()
argument_list|)
expr_stmt|;
name|be1
operator|=
name|e1
operator|.
name|readByte
argument_list|()
expr_stmt|;
name|ba1
operator|=
name|a1
operator|.
name|readByte
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|be1
argument_list|,
name|ba1
argument_list|)
expr_stmt|;
name|e1
operator|.
name|close
argument_list|()
expr_stmt|;
name|e2
operator|.
name|close
argument_list|()
expr_stmt|;
name|a1
operator|.
name|close
argument_list|()
expr_stmt|;
name|a2
operator|.
name|close
argument_list|()
expr_stmt|;
name|cr
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/** This test opens two files from a compound stream and verifies that      *  their file positions are independent of each other.      */
DECL|method|testRandomAccessClones
specifier|public
name|void
name|testRandomAccessClones
parameter_list|()
throws|throws
name|IOException
block|{
name|setUp_2
argument_list|()
expr_stmt|;
name|CompoundFileDirectory
name|cr
init|=
operator|new
name|CompoundFileDirectory
argument_list|(
name|dir
argument_list|,
literal|"f.comp"
argument_list|,
name|newIOContext
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// Open two files
name|IndexInput
name|e1
init|=
name|cr
operator|.
name|openInput
argument_list|(
literal|"f11"
argument_list|,
name|newIOContext
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|IndexInput
name|e2
init|=
name|cr
operator|.
name|openInput
argument_list|(
literal|"f3"
argument_list|,
name|newIOContext
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|IndexInput
name|a1
init|=
operator|(
name|IndexInput
operator|)
name|e1
operator|.
name|clone
argument_list|()
decl_stmt|;
name|IndexInput
name|a2
init|=
operator|(
name|IndexInput
operator|)
name|e2
operator|.
name|clone
argument_list|()
decl_stmt|;
comment|// Seek the first pair
name|e1
operator|.
name|seek
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|a1
operator|.
name|seek
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|100
argument_list|,
name|e1
operator|.
name|getFilePointer
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|100
argument_list|,
name|a1
operator|.
name|getFilePointer
argument_list|()
argument_list|)
expr_stmt|;
name|byte
name|be1
init|=
name|e1
operator|.
name|readByte
argument_list|()
decl_stmt|;
name|byte
name|ba1
init|=
name|a1
operator|.
name|readByte
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|be1
argument_list|,
name|ba1
argument_list|)
expr_stmt|;
comment|// Now seek the second pair
name|e2
operator|.
name|seek
argument_list|(
literal|1027
argument_list|)
expr_stmt|;
name|a2
operator|.
name|seek
argument_list|(
literal|1027
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1027
argument_list|,
name|e2
operator|.
name|getFilePointer
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1027
argument_list|,
name|a2
operator|.
name|getFilePointer
argument_list|()
argument_list|)
expr_stmt|;
name|byte
name|be2
init|=
name|e2
operator|.
name|readByte
argument_list|()
decl_stmt|;
name|byte
name|ba2
init|=
name|a2
operator|.
name|readByte
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|be2
argument_list|,
name|ba2
argument_list|)
expr_stmt|;
comment|// Now make sure the first one didn't move
name|assertEquals
argument_list|(
literal|101
argument_list|,
name|e1
operator|.
name|getFilePointer
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|101
argument_list|,
name|a1
operator|.
name|getFilePointer
argument_list|()
argument_list|)
expr_stmt|;
name|be1
operator|=
name|e1
operator|.
name|readByte
argument_list|()
expr_stmt|;
name|ba1
operator|=
name|a1
operator|.
name|readByte
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|be1
argument_list|,
name|ba1
argument_list|)
expr_stmt|;
comment|// Now more the first one again, past the buffer length
name|e1
operator|.
name|seek
argument_list|(
literal|1910
argument_list|)
expr_stmt|;
name|a1
operator|.
name|seek
argument_list|(
literal|1910
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1910
argument_list|,
name|e1
operator|.
name|getFilePointer
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1910
argument_list|,
name|a1
operator|.
name|getFilePointer
argument_list|()
argument_list|)
expr_stmt|;
name|be1
operator|=
name|e1
operator|.
name|readByte
argument_list|()
expr_stmt|;
name|ba1
operator|=
name|a1
operator|.
name|readByte
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|be1
argument_list|,
name|ba1
argument_list|)
expr_stmt|;
comment|// Now make sure the second set didn't move
name|assertEquals
argument_list|(
literal|1028
argument_list|,
name|e2
operator|.
name|getFilePointer
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1028
argument_list|,
name|a2
operator|.
name|getFilePointer
argument_list|()
argument_list|)
expr_stmt|;
name|be2
operator|=
name|e2
operator|.
name|readByte
argument_list|()
expr_stmt|;
name|ba2
operator|=
name|a2
operator|.
name|readByte
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|be2
argument_list|,
name|ba2
argument_list|)
expr_stmt|;
comment|// Move the second set back, again cross the buffer size
name|e2
operator|.
name|seek
argument_list|(
literal|17
argument_list|)
expr_stmt|;
name|a2
operator|.
name|seek
argument_list|(
literal|17
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|17
argument_list|,
name|e2
operator|.
name|getFilePointer
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|17
argument_list|,
name|a2
operator|.
name|getFilePointer
argument_list|()
argument_list|)
expr_stmt|;
name|be2
operator|=
name|e2
operator|.
name|readByte
argument_list|()
expr_stmt|;
name|ba2
operator|=
name|a2
operator|.
name|readByte
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|be2
argument_list|,
name|ba2
argument_list|)
expr_stmt|;
comment|// Finally, make sure the first set didn't move
comment|// Now make sure the first one didn't move
name|assertEquals
argument_list|(
literal|1911
argument_list|,
name|e1
operator|.
name|getFilePointer
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1911
argument_list|,
name|a1
operator|.
name|getFilePointer
argument_list|()
argument_list|)
expr_stmt|;
name|be1
operator|=
name|e1
operator|.
name|readByte
argument_list|()
expr_stmt|;
name|ba1
operator|=
name|a1
operator|.
name|readByte
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|be1
argument_list|,
name|ba1
argument_list|)
expr_stmt|;
name|e1
operator|.
name|close
argument_list|()
expr_stmt|;
name|e2
operator|.
name|close
argument_list|()
expr_stmt|;
name|a1
operator|.
name|close
argument_list|()
expr_stmt|;
name|a2
operator|.
name|close
argument_list|()
expr_stmt|;
name|cr
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testFileNotFound
specifier|public
name|void
name|testFileNotFound
parameter_list|()
throws|throws
name|IOException
block|{
name|setUp_2
argument_list|()
expr_stmt|;
name|CompoundFileDirectory
name|cr
init|=
operator|new
name|CompoundFileDirectory
argument_list|(
name|dir
argument_list|,
literal|"f.comp"
argument_list|,
name|newIOContext
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// Open two files
try|try
block|{
name|cr
operator|.
name|openInput
argument_list|(
literal|"bogus"
argument_list|,
name|newIOContext
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"File not found"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|/* success */
comment|//System.out.println("SUCCESS: File Not Found: " + e);
block|}
name|cr
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testReadPastEOF
specifier|public
name|void
name|testReadPastEOF
parameter_list|()
throws|throws
name|IOException
block|{
name|setUp_2
argument_list|()
expr_stmt|;
name|CompoundFileDirectory
name|cr
init|=
operator|new
name|CompoundFileDirectory
argument_list|(
name|dir
argument_list|,
literal|"f.comp"
argument_list|,
name|newIOContext
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|IndexInput
name|is
init|=
name|cr
operator|.
name|openInput
argument_list|(
literal|"f2"
argument_list|,
name|newIOContext
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|is
operator|.
name|seek
argument_list|(
name|is
operator|.
name|length
argument_list|()
operator|-
literal|10
argument_list|)
expr_stmt|;
name|byte
name|b
index|[]
init|=
operator|new
name|byte
index|[
literal|100
index|]
decl_stmt|;
name|is
operator|.
name|readBytes
argument_list|(
name|b
argument_list|,
literal|0
argument_list|,
literal|10
argument_list|)
expr_stmt|;
try|try
block|{
name|is
operator|.
name|readByte
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Single byte read past end of file"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|/* success */
comment|//System.out.println("SUCCESS: single byte read past end of file: " + e);
block|}
name|is
operator|.
name|seek
argument_list|(
name|is
operator|.
name|length
argument_list|()
operator|-
literal|10
argument_list|)
expr_stmt|;
try|try
block|{
name|is
operator|.
name|readBytes
argument_list|(
name|b
argument_list|,
literal|0
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Block read past end of file"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|/* success */
comment|//System.out.println("SUCCESS: block read past end of file: " + e);
block|}
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
name|cr
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/** This test that writes larger than the size of the buffer output      * will correctly increment the file pointer.      */
DECL|method|testLargeWrites
specifier|public
name|void
name|testLargeWrites
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexOutput
name|os
init|=
name|dir
operator|.
name|createOutput
argument_list|(
literal|"testBufferStart.txt"
argument_list|,
name|newIOContext
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|byte
index|[]
name|largeBuf
init|=
operator|new
name|byte
index|[
literal|2048
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|largeBuf
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|largeBuf
index|[
name|i
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|Math
operator|.
name|random
argument_list|()
operator|*
literal|256
argument_list|)
expr_stmt|;
block|}
name|long
name|currentPos
init|=
name|os
operator|.
name|getFilePointer
argument_list|()
decl_stmt|;
name|os
operator|.
name|writeBytes
argument_list|(
name|largeBuf
argument_list|,
name|largeBuf
operator|.
name|length
argument_list|)
expr_stmt|;
try|try
block|{
name|assertEquals
argument_list|(
name|currentPos
operator|+
name|largeBuf
operator|.
name|length
argument_list|,
name|os
operator|.
name|getFilePointer
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|testAddExternalFile
specifier|public
name|void
name|testAddExternalFile
parameter_list|()
throws|throws
name|IOException
block|{
name|createSequenceFile
argument_list|(
name|dir
argument_list|,
literal|"d1"
argument_list|,
operator|(
name|byte
operator|)
literal|0
argument_list|,
literal|15
argument_list|)
expr_stmt|;
name|Directory
name|newDir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|CompoundFileDirectory
name|csw
init|=
operator|new
name|CompoundFileDirectory
argument_list|(
name|newDir
argument_list|,
literal|"d.cfs"
argument_list|,
name|newIOContext
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|dir
operator|.
name|copy
argument_list|(
name|csw
argument_list|,
literal|"d1"
argument_list|,
literal|"d1"
argument_list|,
name|newIOContext
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|csw
operator|.
name|close
argument_list|()
expr_stmt|;
name|CompoundFileDirectory
name|csr
init|=
operator|new
name|CompoundFileDirectory
argument_list|(
name|newDir
argument_list|,
literal|"d.cfs"
argument_list|,
name|newIOContext
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|IndexInput
name|expected
init|=
name|dir
operator|.
name|openInput
argument_list|(
literal|"d1"
argument_list|,
name|newIOContext
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|IndexInput
name|actual
init|=
name|csr
operator|.
name|openInput
argument_list|(
literal|"d1"
argument_list|,
name|newIOContext
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertSameStreams
argument_list|(
literal|"d1"
argument_list|,
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
name|assertSameSeekBehavior
argument_list|(
literal|"d1"
argument_list|,
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
name|expected
operator|.
name|close
argument_list|()
expr_stmt|;
name|actual
operator|.
name|close
argument_list|()
expr_stmt|;
name|csr
operator|.
name|close
argument_list|()
expr_stmt|;
name|newDir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testAppend
specifier|public
name|void
name|testAppend
parameter_list|()
throws|throws
name|IOException
block|{
name|Directory
name|newDir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|CompoundFileDirectory
name|csw
init|=
operator|new
name|CompoundFileDirectory
argument_list|(
name|newDir
argument_list|,
literal|"d.cfs"
argument_list|,
name|newIOContext
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|int
name|size
init|=
literal|5
operator|+
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|128
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|2
condition|;
name|j
operator|++
control|)
block|{
name|IndexOutput
name|os
init|=
name|csw
operator|.
name|createOutput
argument_list|(
literal|"seg_"
operator|+
name|j
operator|+
literal|"_foo.txt"
argument_list|,
name|newIOContext
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|os
operator|.
name|writeInt
argument_list|(
name|i
operator|*
name|j
argument_list|)
expr_stmt|;
block|}
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
name|String
index|[]
name|listAll
init|=
name|newDir
operator|.
name|listAll
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|listAll
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"d.cfs"
argument_list|,
name|listAll
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
name|createSequenceFile
argument_list|(
name|dir
argument_list|,
literal|"d1"
argument_list|,
operator|(
name|byte
operator|)
literal|0
argument_list|,
literal|15
argument_list|)
expr_stmt|;
name|dir
operator|.
name|copy
argument_list|(
name|csw
argument_list|,
literal|"d1"
argument_list|,
literal|"d1"
argument_list|,
name|newIOContext
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|String
index|[]
name|listAll
init|=
name|newDir
operator|.
name|listAll
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|listAll
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"d.cfs"
argument_list|,
name|listAll
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|csw
operator|.
name|close
argument_list|()
expr_stmt|;
name|CompoundFileDirectory
name|csr
init|=
operator|new
name|CompoundFileDirectory
argument_list|(
name|newDir
argument_list|,
literal|"d.cfs"
argument_list|,
name|newIOContext
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|2
condition|;
name|j
operator|++
control|)
block|{
name|IndexInput
name|openInput
init|=
name|csr
operator|.
name|openInput
argument_list|(
literal|"seg_"
operator|+
name|j
operator|+
literal|"_foo.txt"
argument_list|,
name|newIOContext
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|size
operator|*
literal|4
argument_list|,
name|openInput
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|i
operator|*
name|j
argument_list|,
name|openInput
operator|.
name|readInt
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|openInput
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|IndexInput
name|expected
init|=
name|dir
operator|.
name|openInput
argument_list|(
literal|"d1"
argument_list|,
name|newIOContext
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|IndexInput
name|actual
init|=
name|csr
operator|.
name|openInput
argument_list|(
literal|"d1"
argument_list|,
name|newIOContext
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertSameStreams
argument_list|(
literal|"d1"
argument_list|,
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
name|assertSameSeekBehavior
argument_list|(
literal|"d1"
argument_list|,
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
name|expected
operator|.
name|close
argument_list|()
expr_stmt|;
name|actual
operator|.
name|close
argument_list|()
expr_stmt|;
name|csr
operator|.
name|close
argument_list|()
expr_stmt|;
name|newDir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testAppendTwice
specifier|public
name|void
name|testAppendTwice
parameter_list|()
throws|throws
name|IOException
block|{
name|Directory
name|newDir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|CompoundFileDirectory
name|csw
init|=
operator|new
name|CompoundFileDirectory
argument_list|(
name|newDir
argument_list|,
literal|"d.cfs"
argument_list|,
name|newIOContext
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|createSequenceFile
argument_list|(
name|newDir
argument_list|,
literal|"d1"
argument_list|,
operator|(
name|byte
operator|)
literal|0
argument_list|,
literal|15
argument_list|)
expr_stmt|;
name|IndexOutput
name|out
init|=
name|csw
operator|.
name|createOutput
argument_list|(
literal|"d.xyz"
argument_list|,
name|newIOContext
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
literal|0
argument_list|)
expr_stmt|;
try|try
block|{
name|newDir
operator|.
name|copy
argument_list|(
name|csw
argument_list|,
literal|"d1"
argument_list|,
literal|"d1"
argument_list|,
name|newIOContext
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"file does already exist"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|//
block|}
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|csw
operator|.
name|listAll
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"d.xyz"
argument_list|,
name|csw
operator|.
name|listAll
argument_list|()
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|csw
operator|.
name|close
argument_list|()
expr_stmt|;
name|CompoundFileDirectory
name|cfr
init|=
operator|new
name|CompoundFileDirectory
argument_list|(
name|newDir
argument_list|,
literal|"d.cfs"
argument_list|,
name|newIOContext
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|cfr
operator|.
name|listAll
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"d.xyz"
argument_list|,
name|cfr
operator|.
name|listAll
argument_list|()
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|cfr
operator|.
name|close
argument_list|()
expr_stmt|;
name|newDir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testEmptyCFS
specifier|public
name|void
name|testEmptyCFS
parameter_list|()
throws|throws
name|IOException
block|{
name|Directory
name|newDir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|CompoundFileDirectory
name|csw
init|=
operator|new
name|CompoundFileDirectory
argument_list|(
name|newDir
argument_list|,
literal|"d.cfs"
argument_list|,
name|newIOContext
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|csw
operator|.
name|close
argument_list|()
expr_stmt|;
name|CompoundFileDirectory
name|csr
init|=
operator|new
name|CompoundFileDirectory
argument_list|(
name|newDir
argument_list|,
literal|"d.cfs"
argument_list|,
name|newIOContext
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|csr
operator|.
name|listAll
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|csr
operator|.
name|close
argument_list|()
expr_stmt|;
name|newDir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testReadNestedCFP
specifier|public
name|void
name|testReadNestedCFP
parameter_list|()
throws|throws
name|IOException
block|{
name|Directory
name|newDir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|CompoundFileDirectory
name|csw
init|=
operator|new
name|CompoundFileDirectory
argument_list|(
name|newDir
argument_list|,
literal|"d.cfs"
argument_list|,
name|newIOContext
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|CompoundFileDirectory
name|nested
init|=
operator|new
name|CompoundFileDirectory
argument_list|(
name|newDir
argument_list|,
literal|"b.cfs"
argument_list|,
name|newIOContext
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|IndexOutput
name|out
init|=
name|nested
operator|.
name|createOutput
argument_list|(
literal|"b.xyz"
argument_list|,
name|newIOContext
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|IndexOutput
name|out1
init|=
name|nested
operator|.
name|createOutput
argument_list|(
literal|"b_1.xyz"
argument_list|,
name|newIOContext
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|out1
operator|.
name|writeInt
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|out1
operator|.
name|close
argument_list|()
expr_stmt|;
name|nested
operator|.
name|close
argument_list|()
expr_stmt|;
name|newDir
operator|.
name|copy
argument_list|(
name|csw
argument_list|,
literal|"b.cfs"
argument_list|,
literal|"b.cfs"
argument_list|,
name|newIOContext
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|newDir
operator|.
name|copy
argument_list|(
name|csw
argument_list|,
literal|"b.cfe"
argument_list|,
literal|"b.cfe"
argument_list|,
name|newIOContext
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|newDir
operator|.
name|deleteFile
argument_list|(
literal|"b.cfs"
argument_list|)
expr_stmt|;
name|newDir
operator|.
name|deleteFile
argument_list|(
literal|"b.cfe"
argument_list|)
expr_stmt|;
name|csw
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|newDir
operator|.
name|listAll
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|csw
operator|=
operator|new
name|CompoundFileDirectory
argument_list|(
name|newDir
argument_list|,
literal|"d.cfs"
argument_list|,
name|newIOContext
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|csw
operator|.
name|listAll
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|nested
operator|=
operator|new
name|CompoundFileDirectory
argument_list|(
name|csw
argument_list|,
literal|"b.cfs"
argument_list|,
name|newIOContext
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|nested
operator|.
name|listAll
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|IndexInput
name|openInput
init|=
name|nested
operator|.
name|openInput
argument_list|(
literal|"b.xyz"
argument_list|,
name|newIOContext
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|openInput
operator|.
name|readInt
argument_list|()
argument_list|)
expr_stmt|;
name|openInput
operator|.
name|close
argument_list|()
expr_stmt|;
name|openInput
operator|=
name|nested
operator|.
name|openInput
argument_list|(
literal|"b_1.xyz"
argument_list|,
name|newIOContext
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|openInput
operator|.
name|readInt
argument_list|()
argument_list|)
expr_stmt|;
name|openInput
operator|.
name|close
argument_list|()
expr_stmt|;
name|nested
operator|.
name|close
argument_list|()
expr_stmt|;
name|csw
operator|.
name|close
argument_list|()
expr_stmt|;
name|newDir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testDoubleClose
specifier|public
name|void
name|testDoubleClose
parameter_list|()
throws|throws
name|IOException
block|{
name|Directory
name|newDir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|CompoundFileDirectory
name|csw
init|=
operator|new
name|CompoundFileDirectory
argument_list|(
name|newDir
argument_list|,
literal|"d.cfs"
argument_list|,
name|newIOContext
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|IndexOutput
name|out
init|=
name|csw
operator|.
name|createOutput
argument_list|(
literal|"d.xyz"
argument_list|,
name|newIOContext
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|csw
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// close a second time - must have no effect according to Closeable
name|csw
operator|.
name|close
argument_list|()
expr_stmt|;
name|csw
operator|=
operator|new
name|CompoundFileDirectory
argument_list|(
name|newDir
argument_list|,
literal|"d.cfs"
argument_list|,
name|newIOContext
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|IndexInput
name|openInput
init|=
name|csw
operator|.
name|openInput
argument_list|(
literal|"d.xyz"
argument_list|,
name|newIOContext
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|openInput
operator|.
name|readInt
argument_list|()
argument_list|)
expr_stmt|;
name|openInput
operator|.
name|close
argument_list|()
expr_stmt|;
name|csw
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// close a second time - must have no effect according to Closeable
name|csw
operator|.
name|close
argument_list|()
expr_stmt|;
name|newDir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// Make sure we don't somehow use more than 1 descriptor
comment|// when reading a CFS with many subs:
DECL|method|testManySubFiles
specifier|public
name|void
name|testManySubFiles
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|Directory
name|d
init|=
name|newFSDirectory
argument_list|(
name|_TestUtil
operator|.
name|getTempDir
argument_list|(
literal|"CFSManySubFiles"
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|int
name|FILE_COUNT
init|=
name|atLeast
argument_list|(
literal|500
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|fileIdx
init|=
literal|0
init|;
name|fileIdx
operator|<
name|FILE_COUNT
condition|;
name|fileIdx
operator|++
control|)
block|{
name|IndexOutput
name|out
init|=
name|d
operator|.
name|createOutput
argument_list|(
literal|"file."
operator|+
name|fileIdx
argument_list|,
name|newIOContext
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|writeByte
argument_list|(
operator|(
name|byte
operator|)
name|fileIdx
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|final
name|CompoundFileDirectory
name|cfd
init|=
operator|new
name|CompoundFileDirectory
argument_list|(
name|d
argument_list|,
literal|"c.cfs"
argument_list|,
name|newIOContext
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|fileIdx
init|=
literal|0
init|;
name|fileIdx
operator|<
name|FILE_COUNT
condition|;
name|fileIdx
operator|++
control|)
block|{
specifier|final
name|String
name|fileName
init|=
literal|"file."
operator|+
name|fileIdx
decl_stmt|;
name|d
operator|.
name|copy
argument_list|(
name|cfd
argument_list|,
name|fileName
argument_list|,
name|fileName
argument_list|,
name|newIOContext
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|cfd
operator|.
name|close
argument_list|()
expr_stmt|;
specifier|final
name|IndexInput
index|[]
name|ins
init|=
operator|new
name|IndexInput
index|[
name|FILE_COUNT
index|]
decl_stmt|;
specifier|final
name|CompoundFileDirectory
name|cfr
init|=
operator|new
name|CompoundFileDirectory
argument_list|(
name|d
argument_list|,
literal|"c.cfs"
argument_list|,
name|newIOContext
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|fileIdx
init|=
literal|0
init|;
name|fileIdx
operator|<
name|FILE_COUNT
condition|;
name|fileIdx
operator|++
control|)
block|{
name|ins
index|[
name|fileIdx
index|]
operator|=
name|cfr
operator|.
name|openInput
argument_list|(
literal|"file."
operator|+
name|fileIdx
argument_list|,
name|newIOContext
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|fileIdx
init|=
literal|0
init|;
name|fileIdx
operator|<
name|FILE_COUNT
condition|;
name|fileIdx
operator|++
control|)
block|{
name|assertEquals
argument_list|(
operator|(
name|byte
operator|)
name|fileIdx
argument_list|,
name|ins
index|[
name|fileIdx
index|]
operator|.
name|readByte
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|fileIdx
init|=
literal|0
init|;
name|fileIdx
operator|<
name|FILE_COUNT
condition|;
name|fileIdx
operator|++
control|)
block|{
name|ins
index|[
name|fileIdx
index|]
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|cfr
operator|.
name|close
argument_list|()
expr_stmt|;
name|d
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testListAll
specifier|public
name|void
name|testListAll
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
comment|// riw should sometimes create docvalues fields, etc
name|RandomIndexWriter
name|riw
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
comment|// these fields should sometimes get term vectors, etc
name|Field
name|idField
init|=
name|newStringField
argument_list|(
literal|"id"
argument_list|,
literal|""
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
decl_stmt|;
name|Field
name|bodyField
init|=
name|newTextField
argument_list|(
literal|"body"
argument_list|,
literal|""
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|idField
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|bodyField
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|idField
operator|.
name|setStringValue
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|bodyField
operator|.
name|setStringValue
argument_list|(
name|_TestUtil
operator|.
name|randomUnicodeString
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|riw
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|7
argument_list|)
operator|==
literal|0
condition|)
block|{
name|riw
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
block|}
name|riw
operator|.
name|close
argument_list|()
expr_stmt|;
name|checkFiles
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// checks that we can open all files returned by listAll!
DECL|method|checkFiles
specifier|private
name|void
name|checkFiles
parameter_list|(
name|Directory
name|dir
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|String
name|file
range|:
name|dir
operator|.
name|listAll
argument_list|()
control|)
block|{
if|if
condition|(
name|file
operator|.
name|endsWith
argument_list|(
name|IndexFileNames
operator|.
name|COMPOUND_FILE_EXTENSION
argument_list|)
condition|)
block|{
name|CompoundFileDirectory
name|cfsDir
init|=
operator|new
name|CompoundFileDirectory
argument_list|(
name|dir
argument_list|,
name|file
argument_list|,
name|newIOContext
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|checkFiles
argument_list|(
name|cfsDir
argument_list|)
expr_stmt|;
comment|// recurse into cfs
name|cfsDir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|IndexInput
name|in
init|=
literal|null
decl_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|in
operator|=
name|dir
operator|.
name|openInput
argument_list|(
name|file
argument_list|,
name|newIOContext
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|success
condition|)
block|{
name|IOUtils
operator|.
name|close
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|IOUtils
operator|.
name|closeWhileHandlingException
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class
end_unit
