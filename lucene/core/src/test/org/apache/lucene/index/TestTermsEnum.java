begin_unit
begin_package
DECL|package|org.apache.lucene.index
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|MockAnalyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|IntField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|DocIdSetIterator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|FieldCache
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LineFileDocs
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
operator|.
name|SuppressCodecs
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|TestUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|automaton
operator|.
name|Automaton
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|automaton
operator|.
name|BasicAutomata
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|automaton
operator|.
name|CompiledAutomaton
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|automaton
operator|.
name|RegExp
import|;
end_import
begin_class
annotation|@
name|SuppressCodecs
argument_list|(
block|{
literal|"SimpleText"
block|,
literal|"Memory"
block|,
literal|"Direct"
block|}
argument_list|)
DECL|class|TestTermsEnum
specifier|public
class|class
name|TestTermsEnum
extends|extends
name|LuceneTestCase
block|{
DECL|method|test
specifier|public
name|void
name|test
parameter_list|()
throws|throws
name|Exception
block|{
name|Random
name|random
init|=
operator|new
name|Random
argument_list|(
name|random
argument_list|()
operator|.
name|nextLong
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|LineFileDocs
name|docs
init|=
operator|new
name|LineFileDocs
argument_list|(
name|random
argument_list|,
literal|true
argument_list|)
decl_stmt|;
specifier|final
name|Directory
name|d
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|MockAnalyzer
name|analyzer
init|=
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
decl_stmt|;
name|analyzer
operator|.
name|setMaxTokenLength
argument_list|(
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
name|IndexWriter
operator|.
name|MAX_TERM_LENGTH
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|RandomIndexWriter
name|w
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|d
argument_list|,
name|analyzer
argument_list|)
decl_stmt|;
specifier|final
name|int
name|numDocs
init|=
name|atLeast
argument_list|(
literal|10
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|docCount
init|=
literal|0
init|;
name|docCount
operator|<
name|numDocs
condition|;
name|docCount
operator|++
control|)
block|{
name|w
operator|.
name|addDocument
argument_list|(
name|docs
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|final
name|IndexReader
name|r
init|=
name|w
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|w
operator|.
name|shutdown
argument_list|()
expr_stmt|;
specifier|final
name|List
argument_list|<
name|BytesRef
argument_list|>
name|terms
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|TermsEnum
name|termsEnum
init|=
name|MultiFields
operator|.
name|getTerms
argument_list|(
name|r
argument_list|,
literal|"body"
argument_list|)
operator|.
name|iterator
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|BytesRef
name|term
decl_stmt|;
while|while
condition|(
operator|(
name|term
operator|=
name|termsEnum
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|terms
operator|.
name|add
argument_list|(
name|BytesRef
operator|.
name|deepCopyOf
argument_list|(
name|term
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TEST: "
operator|+
name|terms
operator|.
name|size
argument_list|()
operator|+
literal|" terms"
argument_list|)
expr_stmt|;
block|}
name|int
name|upto
init|=
operator|-
literal|1
decl_stmt|;
specifier|final
name|int
name|iters
init|=
name|atLeast
argument_list|(
literal|200
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|iter
init|=
literal|0
init|;
name|iter
operator|<
name|iters
condition|;
name|iter
operator|++
control|)
block|{
specifier|final
name|boolean
name|isEnd
decl_stmt|;
if|if
condition|(
name|upto
operator|!=
operator|-
literal|1
operator|&&
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
comment|// next
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TEST: iter next"
argument_list|)
expr_stmt|;
block|}
name|isEnd
operator|=
name|termsEnum
operator|.
name|next
argument_list|()
operator|==
literal|null
expr_stmt|;
name|upto
operator|++
expr_stmt|;
if|if
condition|(
name|isEnd
condition|)
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  end"
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|upto
argument_list|,
name|terms
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|upto
operator|=
operator|-
literal|1
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  got term="
operator|+
name|termsEnum
operator|.
name|term
argument_list|()
operator|.
name|utf8ToString
argument_list|()
operator|+
literal|" expected="
operator|+
name|terms
operator|.
name|get
argument_list|(
name|upto
argument_list|)
operator|.
name|utf8ToString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|upto
operator|<
name|terms
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|terms
operator|.
name|get
argument_list|(
name|upto
argument_list|)
argument_list|,
name|termsEnum
operator|.
name|term
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
specifier|final
name|BytesRef
name|target
decl_stmt|;
specifier|final
name|String
name|exists
decl_stmt|;
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
comment|// likely fake term
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|target
operator|=
operator|new
name|BytesRef
argument_list|(
name|TestUtil
operator|.
name|randomSimpleString
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|target
operator|=
operator|new
name|BytesRef
argument_list|(
name|TestUtil
operator|.
name|randomRealisticUnicodeString
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|exists
operator|=
literal|"likely not"
expr_stmt|;
block|}
else|else
block|{
comment|// real term
name|target
operator|=
name|terms
operator|.
name|get
argument_list|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|terms
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|exists
operator|=
literal|"yes"
expr_stmt|;
block|}
name|upto
operator|=
name|Collections
operator|.
name|binarySearch
argument_list|(
name|terms
argument_list|,
name|target
argument_list|)
expr_stmt|;
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TEST: iter seekCeil target="
operator|+
name|target
operator|.
name|utf8ToString
argument_list|()
operator|+
literal|" exists="
operator|+
name|exists
argument_list|)
expr_stmt|;
block|}
comment|// seekCeil
specifier|final
name|TermsEnum
operator|.
name|SeekStatus
name|status
init|=
name|termsEnum
operator|.
name|seekCeil
argument_list|(
name|target
argument_list|)
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  got "
operator|+
name|status
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|upto
operator|<
literal|0
condition|)
block|{
name|upto
operator|=
operator|-
operator|(
name|upto
operator|+
literal|1
operator|)
expr_stmt|;
if|if
condition|(
name|upto
operator|>=
name|terms
operator|.
name|size
argument_list|()
condition|)
block|{
name|assertEquals
argument_list|(
name|TermsEnum
operator|.
name|SeekStatus
operator|.
name|END
argument_list|,
name|status
argument_list|)
expr_stmt|;
name|upto
operator|=
operator|-
literal|1
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
name|TermsEnum
operator|.
name|SeekStatus
operator|.
name|NOT_FOUND
argument_list|,
name|status
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|terms
operator|.
name|get
argument_list|(
name|upto
argument_list|)
argument_list|,
name|termsEnum
operator|.
name|term
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|assertEquals
argument_list|(
name|TermsEnum
operator|.
name|SeekStatus
operator|.
name|FOUND
argument_list|,
name|status
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|terms
operator|.
name|get
argument_list|(
name|upto
argument_list|)
argument_list|,
name|termsEnum
operator|.
name|term
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TEST: iter seekExact target="
operator|+
name|target
operator|.
name|utf8ToString
argument_list|()
operator|+
literal|" exists="
operator|+
name|exists
argument_list|)
expr_stmt|;
block|}
comment|// seekExact
specifier|final
name|boolean
name|result
init|=
name|termsEnum
operator|.
name|seekExact
argument_list|(
name|target
argument_list|)
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  got "
operator|+
name|result
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|upto
operator|<
literal|0
condition|)
block|{
name|assertFalse
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|upto
operator|=
operator|-
literal|1
expr_stmt|;
block|}
else|else
block|{
name|assertTrue
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|target
argument_list|,
name|termsEnum
operator|.
name|term
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
name|d
operator|.
name|close
argument_list|()
expr_stmt|;
name|docs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|addDoc
specifier|private
name|void
name|addDoc
parameter_list|(
name|RandomIndexWriter
name|w
parameter_list|,
name|Collection
argument_list|<
name|String
argument_list|>
name|terms
parameter_list|,
name|Map
argument_list|<
name|BytesRef
argument_list|,
name|Integer
argument_list|>
name|termToID
parameter_list|,
name|int
name|id
parameter_list|)
throws|throws
name|IOException
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|IntField
argument_list|(
literal|"id"
argument_list|,
name|id
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TEST: addDoc id:"
operator|+
name|id
operator|+
literal|" terms="
operator|+
name|terms
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|s2
range|:
name|terms
control|)
block|{
name|doc
operator|.
name|add
argument_list|(
name|newStringField
argument_list|(
literal|"f"
argument_list|,
name|s2
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|termToID
operator|.
name|put
argument_list|(
operator|new
name|BytesRef
argument_list|(
name|s2
argument_list|)
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|terms
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
DECL|method|accepts
specifier|private
name|boolean
name|accepts
parameter_list|(
name|CompiledAutomaton
name|c
parameter_list|,
name|BytesRef
name|b
parameter_list|)
block|{
name|int
name|state
init|=
name|c
operator|.
name|runAutomaton
operator|.
name|getInitialState
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|b
operator|.
name|length
condition|;
name|idx
operator|++
control|)
block|{
name|assertTrue
argument_list|(
name|state
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|state
operator|=
name|c
operator|.
name|runAutomaton
operator|.
name|step
argument_list|(
name|state
argument_list|,
name|b
operator|.
name|bytes
index|[
name|b
operator|.
name|offset
operator|+
name|idx
index|]
operator|&
literal|0xff
argument_list|)
expr_stmt|;
block|}
return|return
name|c
operator|.
name|runAutomaton
operator|.
name|isAccept
argument_list|(
name|state
argument_list|)
return|;
block|}
comment|// Tests Terms.intersect
DECL|method|testIntersectRandom
specifier|public
name|void
name|testIntersectRandom
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
specifier|final
name|RandomIndexWriter
name|w
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|)
decl_stmt|;
specifier|final
name|int
name|numTerms
init|=
name|atLeast
argument_list|(
literal|300
argument_list|)
decl_stmt|;
comment|//final int numTerms = 50;
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|terms
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|Collection
argument_list|<
name|String
argument_list|>
name|pendingTerms
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|BytesRef
argument_list|,
name|Integer
argument_list|>
name|termToID
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|id
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|terms
operator|.
name|size
argument_list|()
operator|!=
name|numTerms
condition|)
block|{
specifier|final
name|String
name|s
init|=
name|getRandomString
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|terms
operator|.
name|contains
argument_list|(
name|s
argument_list|)
condition|)
block|{
name|terms
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|pendingTerms
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|20
argument_list|)
operator|==
literal|7
condition|)
block|{
name|addDoc
argument_list|(
name|w
argument_list|,
name|pendingTerms
argument_list|,
name|termToID
argument_list|,
name|id
operator|++
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|addDoc
argument_list|(
name|w
argument_list|,
name|pendingTerms
argument_list|,
name|termToID
argument_list|,
name|id
operator|++
argument_list|)
expr_stmt|;
specifier|final
name|BytesRef
index|[]
name|termsArray
init|=
operator|new
name|BytesRef
index|[
name|terms
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|BytesRef
argument_list|>
name|termsSet
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
block|{
name|int
name|upto
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|terms
control|)
block|{
specifier|final
name|BytesRef
name|b
init|=
operator|new
name|BytesRef
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|termsArray
index|[
name|upto
operator|++
index|]
operator|=
name|b
expr_stmt|;
name|termsSet
operator|.
name|add
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
name|Arrays
operator|.
name|sort
argument_list|(
name|termsArray
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\nTEST: indexed terms (unicode order):"
argument_list|)
expr_stmt|;
for|for
control|(
name|BytesRef
name|t
range|:
name|termsArray
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  "
operator|+
name|t
operator|.
name|utf8ToString
argument_list|()
operator|+
literal|" -> id:"
operator|+
name|termToID
operator|.
name|get
argument_list|(
name|t
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|IndexReader
name|r
init|=
name|w
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|w
operator|.
name|shutdown
argument_list|()
expr_stmt|;
comment|// NOTE: intentional insanity!!
specifier|final
name|FieldCache
operator|.
name|Ints
name|docIDToID
init|=
name|FieldCache
operator|.
name|DEFAULT
operator|.
name|getInts
argument_list|(
name|SlowCompositeReaderWrapper
operator|.
name|wrap
argument_list|(
name|r
argument_list|)
argument_list|,
literal|"id"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|iter
init|=
literal|0
init|;
name|iter
operator|<
literal|10
operator|*
name|RANDOM_MULTIPLIER
condition|;
name|iter
operator|++
control|)
block|{
comment|// TODO: can we also test infinite As here...?
comment|// From the random terms, pick some ratio and compile an
comment|// automaton:
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|acceptTerms
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|TreeSet
argument_list|<
name|BytesRef
argument_list|>
name|sortedAcceptTerms
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|double
name|keepPct
init|=
name|random
argument_list|()
operator|.
name|nextDouble
argument_list|()
decl_stmt|;
name|Automaton
name|a
decl_stmt|;
if|if
condition|(
name|iter
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\nTEST: empty automaton"
argument_list|)
expr_stmt|;
block|}
name|a
operator|=
name|BasicAutomata
operator|.
name|makeEmpty
argument_list|()
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\nTEST: keepPct="
operator|+
name|keepPct
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|s
range|:
name|terms
control|)
block|{
specifier|final
name|String
name|s2
decl_stmt|;
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextDouble
argument_list|()
operator|<=
name|keepPct
condition|)
block|{
name|s2
operator|=
name|s
expr_stmt|;
block|}
else|else
block|{
name|s2
operator|=
name|getRandomString
argument_list|()
expr_stmt|;
block|}
name|acceptTerms
operator|.
name|add
argument_list|(
name|s2
argument_list|)
expr_stmt|;
name|sortedAcceptTerms
operator|.
name|add
argument_list|(
operator|new
name|BytesRef
argument_list|(
name|s2
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|a
operator|=
name|BasicAutomata
operator|.
name|makeStringUnion
argument_list|(
name|sortedAcceptTerms
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TEST: reduce the automaton"
argument_list|)
expr_stmt|;
block|}
name|a
operator|.
name|reduce
argument_list|()
expr_stmt|;
block|}
specifier|final
name|CompiledAutomaton
name|c
init|=
operator|new
name|CompiledAutomaton
argument_list|(
name|a
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|BytesRef
index|[]
name|acceptTermsArray
init|=
operator|new
name|BytesRef
index|[
name|acceptTerms
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|BytesRef
argument_list|>
name|acceptTermsSet
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|upto
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|acceptTerms
control|)
block|{
specifier|final
name|BytesRef
name|b
init|=
operator|new
name|BytesRef
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|acceptTermsArray
index|[
name|upto
operator|++
index|]
operator|=
name|b
expr_stmt|;
name|acceptTermsSet
operator|.
name|add
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|accepts
argument_list|(
name|c
argument_list|,
name|b
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Arrays
operator|.
name|sort
argument_list|(
name|acceptTermsArray
argument_list|)
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\nTEST: accept terms (unicode order):"
argument_list|)
expr_stmt|;
for|for
control|(
name|BytesRef
name|t
range|:
name|acceptTermsArray
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  "
operator|+
name|t
operator|.
name|utf8ToString
argument_list|()
operator|+
operator|(
name|termsSet
operator|.
name|contains
argument_list|(
name|t
argument_list|)
condition|?
literal|" (exists)"
else|:
literal|""
operator|)
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|a
operator|.
name|toDot
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|iter2
init|=
literal|0
init|;
name|iter2
operator|<
literal|100
condition|;
name|iter2
operator|++
control|)
block|{
specifier|final
name|BytesRef
name|startTerm
init|=
name|acceptTermsArray
operator|.
name|length
operator|==
literal|0
operator|||
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
literal|null
else|:
name|acceptTermsArray
index|[
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|acceptTermsArray
operator|.
name|length
argument_list|)
index|]
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\nTEST: iter2="
operator|+
name|iter2
operator|+
literal|" startTerm="
operator|+
operator|(
name|startTerm
operator|==
literal|null
condition|?
literal|"<null>"
else|:
name|startTerm
operator|.
name|utf8ToString
argument_list|()
operator|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|startTerm
operator|!=
literal|null
condition|)
block|{
name|int
name|state
init|=
name|c
operator|.
name|runAutomaton
operator|.
name|getInitialState
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|startTerm
operator|.
name|length
condition|;
name|idx
operator|++
control|)
block|{
specifier|final
name|int
name|label
init|=
name|startTerm
operator|.
name|bytes
index|[
name|startTerm
operator|.
name|offset
operator|+
name|idx
index|]
operator|&
literal|0xff
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  state="
operator|+
name|state
operator|+
literal|" label="
operator|+
name|label
argument_list|)
expr_stmt|;
name|state
operator|=
name|c
operator|.
name|runAutomaton
operator|.
name|step
argument_list|(
name|state
argument_list|,
name|label
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|state
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  state="
operator|+
name|state
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|TermsEnum
name|te
init|=
name|MultiFields
operator|.
name|getTerms
argument_list|(
name|r
argument_list|,
literal|"f"
argument_list|)
operator|.
name|intersect
argument_list|(
name|c
argument_list|,
name|startTerm
argument_list|)
decl_stmt|;
name|int
name|loc
decl_stmt|;
if|if
condition|(
name|startTerm
operator|==
literal|null
condition|)
block|{
name|loc
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
name|loc
operator|=
name|Arrays
operator|.
name|binarySearch
argument_list|(
name|termsArray
argument_list|,
name|BytesRef
operator|.
name|deepCopyOf
argument_list|(
name|startTerm
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|loc
operator|<
literal|0
condition|)
block|{
name|loc
operator|=
operator|-
operator|(
name|loc
operator|+
literal|1
operator|)
expr_stmt|;
block|}
else|else
block|{
comment|// startTerm exists in index
name|loc
operator|++
expr_stmt|;
block|}
block|}
while|while
condition|(
name|loc
operator|<
name|termsArray
operator|.
name|length
operator|&&
operator|!
name|acceptTermsSet
operator|.
name|contains
argument_list|(
name|termsArray
index|[
name|loc
index|]
argument_list|)
condition|)
block|{
name|loc
operator|++
expr_stmt|;
block|}
name|DocsEnum
name|docsEnum
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|loc
operator|<
name|termsArray
operator|.
name|length
condition|)
block|{
specifier|final
name|BytesRef
name|expected
init|=
name|termsArray
index|[
name|loc
index|]
decl_stmt|;
specifier|final
name|BytesRef
name|actual
init|=
name|te
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TEST:   next() expected="
operator|+
name|expected
operator|.
name|utf8ToString
argument_list|()
operator|+
literal|" actual="
operator|+
operator|(
name|actual
operator|==
literal|null
condition|?
literal|"null"
else|:
name|actual
operator|.
name|utf8ToString
argument_list|()
operator|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|te
operator|.
name|docFreq
argument_list|()
argument_list|)
expr_stmt|;
name|docsEnum
operator|=
name|TestUtil
operator|.
name|docs
argument_list|(
name|random
argument_list|()
argument_list|,
name|te
argument_list|,
literal|null
argument_list|,
name|docsEnum
argument_list|,
name|DocsEnum
operator|.
name|FLAG_NONE
argument_list|)
expr_stmt|;
specifier|final
name|int
name|docID
init|=
name|docsEnum
operator|.
name|nextDoc
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|docID
operator|!=
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|docIDToID
operator|.
name|get
argument_list|(
name|docID
argument_list|)
argument_list|,
name|termToID
operator|.
name|get
argument_list|(
name|expected
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
do|do
block|{
name|loc
operator|++
expr_stmt|;
block|}
do|while
condition|(
name|loc
operator|<
name|termsArray
operator|.
name|length
operator|&&
operator|!
name|acceptTermsSet
operator|.
name|contains
argument_list|(
name|termsArray
index|[
name|loc
index|]
argument_list|)
condition|)
do|;
block|}
name|assertNull
argument_list|(
name|te
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|field|d
specifier|private
name|Directory
name|d
decl_stmt|;
DECL|field|r
specifier|private
name|IndexReader
name|r
decl_stmt|;
DECL|field|FIELD
specifier|private
specifier|final
name|String
name|FIELD
init|=
literal|"field"
decl_stmt|;
DECL|method|makeIndex
specifier|private
name|IndexReader
name|makeIndex
parameter_list|(
name|String
modifier|...
name|terms
parameter_list|)
throws|throws
name|Exception
block|{
name|d
operator|=
name|newDirectory
argument_list|()
expr_stmt|;
name|IndexWriterConfig
name|iwc
init|=
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
comment|/*     iwc.setCodec(new StandardCodec(minTermsInBlock, maxTermsInBlock));     */
specifier|final
name|RandomIndexWriter
name|w
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|d
argument_list|,
name|iwc
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|term
range|:
name|terms
control|)
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|Field
name|f
init|=
name|newStringField
argument_list|(
name|FIELD
argument_list|,
name|term
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|r
operator|!=
literal|null
condition|)
block|{
name|close
argument_list|()
expr_stmt|;
block|}
name|r
operator|=
name|w
operator|.
name|getReader
argument_list|()
expr_stmt|;
name|w
operator|.
name|shutdown
argument_list|()
expr_stmt|;
return|return
name|r
return|;
block|}
DECL|method|close
specifier|private
name|void
name|close
parameter_list|()
throws|throws
name|Exception
block|{
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
name|d
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|docFreq
specifier|private
name|int
name|docFreq
parameter_list|(
name|IndexReader
name|r
parameter_list|,
name|String
name|term
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|r
operator|.
name|docFreq
argument_list|(
operator|new
name|Term
argument_list|(
name|FIELD
argument_list|,
name|term
argument_list|)
argument_list|)
return|;
block|}
DECL|method|testEasy
specifier|public
name|void
name|testEasy
parameter_list|()
throws|throws
name|Exception
block|{
comment|// No floor arcs:
name|r
operator|=
name|makeIndex
argument_list|(
literal|"aa0"
argument_list|,
literal|"aa1"
argument_list|,
literal|"aa2"
argument_list|,
literal|"aa3"
argument_list|,
literal|"bb0"
argument_list|,
literal|"bb1"
argument_list|,
literal|"bb2"
argument_list|,
literal|"bb3"
argument_list|,
literal|"aa"
argument_list|)
expr_stmt|;
comment|// First term in block:
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|docFreq
argument_list|(
name|r
argument_list|,
literal|"aa0"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Scan forward to another term in same block
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|docFreq
argument_list|(
name|r
argument_list|,
literal|"aa2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|docFreq
argument_list|(
name|r
argument_list|,
literal|"aa"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Reset same block then scan forwards
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|docFreq
argument_list|(
name|r
argument_list|,
literal|"aa1"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Not found, in same block
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|docFreq
argument_list|(
name|r
argument_list|,
literal|"aa5"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Found, in same block
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|docFreq
argument_list|(
name|r
argument_list|,
literal|"aa2"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Not found in index:
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|docFreq
argument_list|(
name|r
argument_list|,
literal|"b0"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Found:
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|docFreq
argument_list|(
name|r
argument_list|,
literal|"aa2"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Found, rewind:
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|docFreq
argument_list|(
name|r
argument_list|,
literal|"aa0"
argument_list|)
argument_list|)
expr_stmt|;
comment|// First term in block:
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|docFreq
argument_list|(
name|r
argument_list|,
literal|"bb0"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Scan forward to another term in same block
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|docFreq
argument_list|(
name|r
argument_list|,
literal|"bb2"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Reset same block then scan forwards
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|docFreq
argument_list|(
name|r
argument_list|,
literal|"bb1"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Not found, in same block
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|docFreq
argument_list|(
name|r
argument_list|,
literal|"bb5"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Found, in same block
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|docFreq
argument_list|(
name|r
argument_list|,
literal|"bb2"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Not found in index:
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|docFreq
argument_list|(
name|r
argument_list|,
literal|"b0"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Found:
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|docFreq
argument_list|(
name|r
argument_list|,
literal|"bb2"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Found, rewind:
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|docFreq
argument_list|(
name|r
argument_list|,
literal|"bb0"
argument_list|)
argument_list|)
expr_stmt|;
name|close
argument_list|()
expr_stmt|;
block|}
comment|// tests:
comment|//   - test same prefix has non-floor block and floor block (ie, has 2 long outputs on same term prefix)
comment|//   - term that's entirely in the index
DECL|method|testFloorBlocks
specifier|public
name|void
name|testFloorBlocks
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
index|[]
name|terms
init|=
operator|new
name|String
index|[]
block|{
literal|"aa0"
block|,
literal|"aa1"
block|,
literal|"aa2"
block|,
literal|"aa3"
block|,
literal|"aa4"
block|,
literal|"aa5"
block|,
literal|"aa6"
block|,
literal|"aa7"
block|,
literal|"aa8"
block|,
literal|"aa9"
block|,
literal|"aa"
block|,
literal|"xx"
block|}
decl_stmt|;
name|r
operator|=
name|makeIndex
argument_list|(
name|terms
argument_list|)
expr_stmt|;
comment|//r = makeIndex("aa0", "aa1", "aa2", "aa3", "aa4", "aa5", "aa6", "aa7", "aa8", "aa9");
comment|// First term in first block:
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|docFreq
argument_list|(
name|r
argument_list|,
literal|"aa0"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|docFreq
argument_list|(
name|r
argument_list|,
literal|"aa4"
argument_list|)
argument_list|)
expr_stmt|;
comment|// No block
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|docFreq
argument_list|(
name|r
argument_list|,
literal|"bb0"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Second block
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|docFreq
argument_list|(
name|r
argument_list|,
literal|"aa4"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Backwards to prior floor block:
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|docFreq
argument_list|(
name|r
argument_list|,
literal|"aa0"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Forwards to last floor block:
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|docFreq
argument_list|(
name|r
argument_list|,
literal|"aa9"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|docFreq
argument_list|(
name|r
argument_list|,
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|docFreq
argument_list|(
name|r
argument_list|,
literal|"aa"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|docFreq
argument_list|(
name|r
argument_list|,
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|docFreq
argument_list|(
name|r
argument_list|,
literal|"aa"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Forwards to last floor block:
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|docFreq
argument_list|(
name|r
argument_list|,
literal|"xx"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|docFreq
argument_list|(
name|r
argument_list|,
literal|"aa1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|docFreq
argument_list|(
name|r
argument_list|,
literal|"yy"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|docFreq
argument_list|(
name|r
argument_list|,
literal|"xx"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|docFreq
argument_list|(
name|r
argument_list|,
literal|"aa9"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|docFreq
argument_list|(
name|r
argument_list|,
literal|"xx"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|docFreq
argument_list|(
name|r
argument_list|,
literal|"aa4"
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|TermsEnum
name|te
init|=
name|MultiFields
operator|.
name|getTerms
argument_list|(
name|r
argument_list|,
name|FIELD
argument_list|)
operator|.
name|iterator
argument_list|(
literal|null
argument_list|)
decl_stmt|;
while|while
condition|(
name|te
operator|.
name|next
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|//System.out.println("TEST: next term=" + te.term().utf8ToString());
block|}
name|assertTrue
argument_list|(
name|seekExact
argument_list|(
name|te
argument_list|,
literal|"aa1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"aa2"
argument_list|,
name|next
argument_list|(
name|te
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|seekExact
argument_list|(
name|te
argument_list|,
literal|"aa8"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"aa9"
argument_list|,
name|next
argument_list|(
name|te
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"xx"
argument_list|,
name|next
argument_list|(
name|te
argument_list|)
argument_list|)
expr_stmt|;
name|testRandomSeeks
argument_list|(
name|r
argument_list|,
name|terms
argument_list|)
expr_stmt|;
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testZeroTerms
specifier|public
name|void
name|testZeroTerms
parameter_list|()
throws|throws
name|Exception
block|{
name|d
operator|=
name|newDirectory
argument_list|()
expr_stmt|;
specifier|final
name|RandomIndexWriter
name|w
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|d
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newTextField
argument_list|(
literal|"field"
argument_list|,
literal|"one two three"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newTextField
argument_list|(
literal|"field2"
argument_list|,
literal|"one two three"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|w
operator|.
name|commit
argument_list|()
expr_stmt|;
name|w
operator|.
name|deleteDocuments
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"one"
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|forceMerge
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|IndexReader
name|r
init|=
name|w
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|w
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|r
operator|.
name|numDocs
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|r
operator|.
name|maxDoc
argument_list|()
argument_list|)
expr_stmt|;
name|Terms
name|terms
init|=
name|MultiFields
operator|.
name|getTerms
argument_list|(
name|r
argument_list|,
literal|"field"
argument_list|)
decl_stmt|;
if|if
condition|(
name|terms
operator|!=
literal|null
condition|)
block|{
name|assertNull
argument_list|(
name|terms
operator|.
name|iterator
argument_list|(
literal|null
argument_list|)
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
name|d
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|getRandomString
specifier|private
name|String
name|getRandomString
parameter_list|()
block|{
comment|//return _TestUtil.randomSimpleString(random());
return|return
name|TestUtil
operator|.
name|randomRealisticUnicodeString
argument_list|(
name|random
argument_list|()
argument_list|)
return|;
block|}
DECL|method|testRandomTerms
specifier|public
name|void
name|testRandomTerms
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
index|[]
name|terms
init|=
operator|new
name|String
index|[
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
name|atLeast
argument_list|(
literal|1000
argument_list|)
argument_list|)
index|]
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|seen
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|boolean
name|allowEmptyString
init|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
decl_stmt|;
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
operator|==
literal|7
operator|&&
name|terms
operator|.
name|length
operator|>
literal|2
condition|)
block|{
comment|// Sometimes add a bunch of terms sharing a longish common prefix:
specifier|final
name|int
name|numTermsSamePrefix
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|terms
operator|.
name|length
operator|/
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
name|numTermsSamePrefix
operator|>
literal|0
condition|)
block|{
name|String
name|prefix
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|prefix
operator|=
name|getRandomString
argument_list|()
expr_stmt|;
if|if
condition|(
name|prefix
operator|.
name|length
argument_list|()
operator|<
literal|5
condition|)
block|{
continue|continue;
block|}
else|else
block|{
break|break;
block|}
block|}
while|while
condition|(
name|seen
operator|.
name|size
argument_list|()
operator|<
name|numTermsSamePrefix
condition|)
block|{
specifier|final
name|String
name|t
init|=
name|prefix
operator|+
name|getRandomString
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|seen
operator|.
name|contains
argument_list|(
name|t
argument_list|)
condition|)
block|{
name|terms
index|[
name|seen
operator|.
name|size
argument_list|()
index|]
operator|=
name|t
expr_stmt|;
name|seen
operator|.
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
while|while
condition|(
name|seen
operator|.
name|size
argument_list|()
operator|<
name|terms
operator|.
name|length
condition|)
block|{
specifier|final
name|String
name|t
init|=
name|getRandomString
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|seen
operator|.
name|contains
argument_list|(
name|t
argument_list|)
operator|&&
operator|(
name|allowEmptyString
operator|||
name|t
operator|.
name|length
argument_list|()
operator|!=
literal|0
operator|)
condition|)
block|{
name|terms
index|[
name|seen
operator|.
name|size
argument_list|()
index|]
operator|=
name|t
expr_stmt|;
name|seen
operator|.
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
block|}
name|r
operator|=
name|makeIndex
argument_list|(
name|terms
argument_list|)
expr_stmt|;
name|testRandomSeeks
argument_list|(
name|r
argument_list|,
name|terms
argument_list|)
expr_stmt|;
name|close
argument_list|()
expr_stmt|;
block|}
comment|// sugar
DECL|method|seekExact
specifier|private
name|boolean
name|seekExact
parameter_list|(
name|TermsEnum
name|te
parameter_list|,
name|String
name|term
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|te
operator|.
name|seekExact
argument_list|(
operator|new
name|BytesRef
argument_list|(
name|term
argument_list|)
argument_list|)
return|;
block|}
comment|// sugar
DECL|method|next
specifier|private
name|String
name|next
parameter_list|(
name|TermsEnum
name|te
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|BytesRef
name|br
init|=
name|te
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|br
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
name|br
operator|.
name|utf8ToString
argument_list|()
return|;
block|}
block|}
DECL|method|getNonExistTerm
specifier|private
name|BytesRef
name|getNonExistTerm
parameter_list|(
name|BytesRef
index|[]
name|terms
parameter_list|)
block|{
name|BytesRef
name|t
init|=
literal|null
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
specifier|final
name|String
name|ts
init|=
name|getRandomString
argument_list|()
decl_stmt|;
name|t
operator|=
operator|new
name|BytesRef
argument_list|(
name|ts
argument_list|)
expr_stmt|;
if|if
condition|(
name|Arrays
operator|.
name|binarySearch
argument_list|(
name|terms
argument_list|,
name|t
argument_list|)
operator|<
literal|0
condition|)
block|{
return|return
name|t
return|;
block|}
block|}
block|}
DECL|class|TermAndState
specifier|private
specifier|static
class|class
name|TermAndState
block|{
DECL|field|term
specifier|public
specifier|final
name|BytesRef
name|term
decl_stmt|;
DECL|field|state
specifier|public
specifier|final
name|TermState
name|state
decl_stmt|;
DECL|method|TermAndState
specifier|public
name|TermAndState
parameter_list|(
name|BytesRef
name|term
parameter_list|,
name|TermState
name|state
parameter_list|)
block|{
name|this
operator|.
name|term
operator|=
name|term
expr_stmt|;
name|this
operator|.
name|state
operator|=
name|state
expr_stmt|;
block|}
block|}
DECL|method|testRandomSeeks
specifier|private
name|void
name|testRandomSeeks
parameter_list|(
name|IndexReader
name|r
parameter_list|,
name|String
modifier|...
name|validTermStrings
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|BytesRef
index|[]
name|validTerms
init|=
operator|new
name|BytesRef
index|[
name|validTermStrings
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|termIDX
init|=
literal|0
init|;
name|termIDX
operator|<
name|validTermStrings
operator|.
name|length
condition|;
name|termIDX
operator|++
control|)
block|{
name|validTerms
index|[
name|termIDX
index|]
operator|=
operator|new
name|BytesRef
argument_list|(
name|validTermStrings
index|[
name|termIDX
index|]
argument_list|)
expr_stmt|;
block|}
name|Arrays
operator|.
name|sort
argument_list|(
name|validTerms
argument_list|)
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TEST: "
operator|+
name|validTerms
operator|.
name|length
operator|+
literal|" terms:"
argument_list|)
expr_stmt|;
for|for
control|(
name|BytesRef
name|t
range|:
name|validTerms
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  "
operator|+
name|t
operator|.
name|utf8ToString
argument_list|()
operator|+
literal|" "
operator|+
name|t
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|TermsEnum
name|te
init|=
name|MultiFields
operator|.
name|getTerms
argument_list|(
name|r
argument_list|,
name|FIELD
argument_list|)
operator|.
name|iterator
argument_list|(
literal|null
argument_list|)
decl_stmt|;
specifier|final
name|int
name|END_LOC
init|=
operator|-
name|validTerms
operator|.
name|length
operator|-
literal|1
decl_stmt|;
specifier|final
name|List
argument_list|<
name|TermAndState
argument_list|>
name|termStates
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|iter
init|=
literal|0
init|;
name|iter
operator|<
literal|100
operator|*
name|RANDOM_MULTIPLIER
condition|;
name|iter
operator|++
control|)
block|{
specifier|final
name|BytesRef
name|t
decl_stmt|;
name|int
name|loc
decl_stmt|;
specifier|final
name|TermState
name|termState
decl_stmt|;
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|6
argument_list|)
operator|==
literal|4
condition|)
block|{
comment|// pick term that doens't exist:
name|t
operator|=
name|getNonExistTerm
argument_list|(
name|validTerms
argument_list|)
expr_stmt|;
name|termState
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\nTEST: invalid term="
operator|+
name|t
operator|.
name|utf8ToString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|loc
operator|=
name|Arrays
operator|.
name|binarySearch
argument_list|(
name|validTerms
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|termStates
operator|.
name|size
argument_list|()
operator|!=
literal|0
operator|&&
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|4
argument_list|)
operator|==
literal|1
condition|)
block|{
specifier|final
name|TermAndState
name|ts
init|=
name|termStates
operator|.
name|get
argument_list|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|termStates
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|t
operator|=
name|ts
operator|.
name|term
expr_stmt|;
name|loc
operator|=
name|Arrays
operator|.
name|binarySearch
argument_list|(
name|validTerms
argument_list|,
name|t
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|loc
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|termState
operator|=
name|ts
operator|.
name|state
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\nTEST: valid termState term="
operator|+
name|t
operator|.
name|utf8ToString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// pick valid term
name|loc
operator|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|validTerms
operator|.
name|length
argument_list|)
expr_stmt|;
name|t
operator|=
name|BytesRef
operator|.
name|deepCopyOf
argument_list|(
name|validTerms
index|[
name|loc
index|]
argument_list|)
expr_stmt|;
name|termState
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\nTEST: valid term="
operator|+
name|t
operator|.
name|utf8ToString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// seekCeil or seekExact:
specifier|final
name|boolean
name|doSeekExact
init|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
decl_stmt|;
if|if
condition|(
name|termState
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  seekExact termState"
argument_list|)
expr_stmt|;
block|}
name|te
operator|.
name|seekExact
argument_list|(
name|t
argument_list|,
name|termState
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|doSeekExact
condition|)
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  seekExact"
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|loc
operator|>=
literal|0
argument_list|,
name|te
operator|.
name|seekExact
argument_list|(
name|t
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  seekCeil"
argument_list|)
expr_stmt|;
block|}
specifier|final
name|TermsEnum
operator|.
name|SeekStatus
name|result
init|=
name|te
operator|.
name|seekCeil
argument_list|(
name|t
argument_list|)
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  got "
operator|+
name|result
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|loc
operator|>=
literal|0
condition|)
block|{
name|assertEquals
argument_list|(
name|TermsEnum
operator|.
name|SeekStatus
operator|.
name|FOUND
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|loc
operator|==
name|END_LOC
condition|)
block|{
name|assertEquals
argument_list|(
name|TermsEnum
operator|.
name|SeekStatus
operator|.
name|END
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
else|else
block|{
assert|assert
name|loc
operator|>=
operator|-
name|validTerms
operator|.
name|length
assert|;
name|assertEquals
argument_list|(
name|TermsEnum
operator|.
name|SeekStatus
operator|.
name|NOT_FOUND
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|loc
operator|>=
literal|0
condition|)
block|{
name|assertEquals
argument_list|(
name|t
argument_list|,
name|te
operator|.
name|term
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|doSeekExact
condition|)
block|{
comment|// TermsEnum is unpositioned if seekExact returns false
continue|continue;
block|}
elseif|else
if|if
condition|(
name|loc
operator|==
name|END_LOC
condition|)
block|{
continue|continue;
block|}
else|else
block|{
name|loc
operator|=
operator|-
name|loc
operator|-
literal|1
expr_stmt|;
name|assertEquals
argument_list|(
name|validTerms
index|[
name|loc
index|]
argument_list|,
name|te
operator|.
name|term
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Do a bunch of next's after the seek
specifier|final
name|int
name|numNext
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|validTerms
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|nextCount
init|=
literal|0
init|;
name|nextCount
operator|<
name|numNext
condition|;
name|nextCount
operator|++
control|)
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\nTEST: next loc="
operator|+
name|loc
operator|+
literal|" of "
operator|+
name|validTerms
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
specifier|final
name|BytesRef
name|t2
init|=
name|te
operator|.
name|next
argument_list|()
decl_stmt|;
name|loc
operator|++
expr_stmt|;
if|if
condition|(
name|loc
operator|==
name|validTerms
operator|.
name|length
condition|)
block|{
name|assertNull
argument_list|(
name|t2
argument_list|)
expr_stmt|;
break|break;
block|}
else|else
block|{
name|assertEquals
argument_list|(
name|validTerms
index|[
name|loc
index|]
argument_list|,
name|t2
argument_list|)
expr_stmt|;
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|40
argument_list|)
operator|==
literal|17
operator|&&
name|termStates
operator|.
name|size
argument_list|()
operator|<
literal|100
condition|)
block|{
name|termStates
operator|.
name|add
argument_list|(
operator|new
name|TermAndState
argument_list|(
name|validTerms
index|[
name|loc
index|]
argument_list|,
name|te
operator|.
name|termState
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
DECL|method|testIntersectBasic
specifier|public
name|void
name|testIntersectBasic
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriterConfig
name|iwc
init|=
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|iwc
operator|.
name|setMergePolicy
argument_list|(
operator|new
name|LogDocMergePolicy
argument_list|()
argument_list|)
expr_stmt|;
name|RandomIndexWriter
name|w
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|,
name|iwc
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newTextField
argument_list|(
literal|"field"
argument_list|,
literal|"aaa"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newStringField
argument_list|(
literal|"field"
argument_list|,
literal|"bbb"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newTextField
argument_list|(
literal|"field"
argument_list|,
literal|"ccc"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|w
operator|.
name|forceMerge
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|DirectoryReader
name|r
init|=
name|w
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|w
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|AtomicReader
name|sub
init|=
name|getOnlySegmentReader
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|Terms
name|terms
init|=
name|sub
operator|.
name|fields
argument_list|()
operator|.
name|terms
argument_list|(
literal|"field"
argument_list|)
decl_stmt|;
name|Automaton
name|automaton
init|=
operator|new
name|RegExp
argument_list|(
literal|".*"
argument_list|,
name|RegExp
operator|.
name|NONE
argument_list|)
operator|.
name|toAutomaton
argument_list|()
decl_stmt|;
name|CompiledAutomaton
name|ca
init|=
operator|new
name|CompiledAutomaton
argument_list|(
name|automaton
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|TermsEnum
name|te
init|=
name|terms
operator|.
name|intersect
argument_list|(
name|ca
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"aaa"
argument_list|,
name|te
operator|.
name|next
argument_list|()
operator|.
name|utf8ToString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|te
operator|.
name|docs
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|DocsEnum
operator|.
name|FLAG_NONE
argument_list|)
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bbb"
argument_list|,
name|te
operator|.
name|next
argument_list|()
operator|.
name|utf8ToString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|te
operator|.
name|docs
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|DocsEnum
operator|.
name|FLAG_NONE
argument_list|)
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ccc"
argument_list|,
name|te
operator|.
name|next
argument_list|()
operator|.
name|utf8ToString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|te
operator|.
name|docs
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|DocsEnum
operator|.
name|FLAG_NONE
argument_list|)
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|te
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|te
operator|=
name|terms
operator|.
name|intersect
argument_list|(
name|ca
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"abc"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bbb"
argument_list|,
name|te
operator|.
name|next
argument_list|()
operator|.
name|utf8ToString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|te
operator|.
name|docs
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|DocsEnum
operator|.
name|FLAG_NONE
argument_list|)
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ccc"
argument_list|,
name|te
operator|.
name|next
argument_list|()
operator|.
name|utf8ToString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|te
operator|.
name|docs
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|DocsEnum
operator|.
name|FLAG_NONE
argument_list|)
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|te
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|te
operator|=
name|terms
operator|.
name|intersect
argument_list|(
name|ca
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"aaa"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bbb"
argument_list|,
name|te
operator|.
name|next
argument_list|()
operator|.
name|utf8ToString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|te
operator|.
name|docs
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|DocsEnum
operator|.
name|FLAG_NONE
argument_list|)
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ccc"
argument_list|,
name|te
operator|.
name|next
argument_list|()
operator|.
name|utf8ToString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|te
operator|.
name|docs
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|DocsEnum
operator|.
name|FLAG_NONE
argument_list|)
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|te
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testIntersectStartTerm
specifier|public
name|void
name|testIntersectStartTerm
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriterConfig
name|iwc
init|=
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|iwc
operator|.
name|setMergePolicy
argument_list|(
operator|new
name|LogDocMergePolicy
argument_list|()
argument_list|)
expr_stmt|;
name|RandomIndexWriter
name|w
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|,
name|iwc
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newStringField
argument_list|(
literal|"field"
argument_list|,
literal|"abc"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newStringField
argument_list|(
literal|"field"
argument_list|,
literal|"abd"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newStringField
argument_list|(
literal|"field"
argument_list|,
literal|"acd"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newStringField
argument_list|(
literal|"field"
argument_list|,
literal|"bcd"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|w
operator|.
name|forceMerge
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|DirectoryReader
name|r
init|=
name|w
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|w
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|AtomicReader
name|sub
init|=
name|getOnlySegmentReader
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|Terms
name|terms
init|=
name|sub
operator|.
name|fields
argument_list|()
operator|.
name|terms
argument_list|(
literal|"field"
argument_list|)
decl_stmt|;
name|Automaton
name|automaton
init|=
operator|new
name|RegExp
argument_list|(
literal|".*d"
argument_list|,
name|RegExp
operator|.
name|NONE
argument_list|)
operator|.
name|toAutomaton
argument_list|()
decl_stmt|;
name|CompiledAutomaton
name|ca
init|=
operator|new
name|CompiledAutomaton
argument_list|(
name|automaton
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|TermsEnum
name|te
decl_stmt|;
comment|// should seek to startTerm
name|te
operator|=
name|terms
operator|.
name|intersect
argument_list|(
name|ca
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"aad"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"abd"
argument_list|,
name|te
operator|.
name|next
argument_list|()
operator|.
name|utf8ToString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|te
operator|.
name|docs
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|DocsEnum
operator|.
name|FLAG_NONE
argument_list|)
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"acd"
argument_list|,
name|te
operator|.
name|next
argument_list|()
operator|.
name|utf8ToString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|te
operator|.
name|docs
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|DocsEnum
operator|.
name|FLAG_NONE
argument_list|)
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bcd"
argument_list|,
name|te
operator|.
name|next
argument_list|()
operator|.
name|utf8ToString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|te
operator|.
name|docs
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|DocsEnum
operator|.
name|FLAG_NONE
argument_list|)
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|te
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
comment|// should fail to find ceil label on second arc, rewind
name|te
operator|=
name|terms
operator|.
name|intersect
argument_list|(
name|ca
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"add"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bcd"
argument_list|,
name|te
operator|.
name|next
argument_list|()
operator|.
name|utf8ToString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|te
operator|.
name|docs
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|DocsEnum
operator|.
name|FLAG_NONE
argument_list|)
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|te
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
comment|// should reach end
name|te
operator|=
name|terms
operator|.
name|intersect
argument_list|(
name|ca
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"bcd"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|te
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|te
operator|=
name|terms
operator|.
name|intersect
argument_list|(
name|ca
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"ddd"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|te
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testIntersectEmptyString
specifier|public
name|void
name|testIntersectEmptyString
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriterConfig
name|iwc
init|=
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|iwc
operator|.
name|setMergePolicy
argument_list|(
operator|new
name|LogDocMergePolicy
argument_list|()
argument_list|)
expr_stmt|;
name|RandomIndexWriter
name|w
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|,
name|iwc
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newStringField
argument_list|(
literal|"field"
argument_list|,
literal|""
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newStringField
argument_list|(
literal|"field"
argument_list|,
literal|"abc"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
comment|// add empty string to both documents, so that singletonDocID == -1.
comment|// For a FST-based term dict, we'll expect to see the first arc is
comment|// flaged with HAS_FINAL_OUTPUT
name|doc
operator|.
name|add
argument_list|(
name|newStringField
argument_list|(
literal|"field"
argument_list|,
literal|"abc"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newStringField
argument_list|(
literal|"field"
argument_list|,
literal|""
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|w
operator|.
name|forceMerge
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|DirectoryReader
name|r
init|=
name|w
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|w
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|AtomicReader
name|sub
init|=
name|getOnlySegmentReader
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|Terms
name|terms
init|=
name|sub
operator|.
name|fields
argument_list|()
operator|.
name|terms
argument_list|(
literal|"field"
argument_list|)
decl_stmt|;
name|Automaton
name|automaton
init|=
operator|new
name|RegExp
argument_list|(
literal|".*"
argument_list|,
name|RegExp
operator|.
name|NONE
argument_list|)
operator|.
name|toAutomaton
argument_list|()
decl_stmt|;
comment|// accept ALL
name|CompiledAutomaton
name|ca
init|=
operator|new
name|CompiledAutomaton
argument_list|(
name|automaton
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|TermsEnum
name|te
init|=
name|terms
operator|.
name|intersect
argument_list|(
name|ca
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|DocsEnum
name|de
decl_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|te
operator|.
name|next
argument_list|()
operator|.
name|utf8ToString
argument_list|()
argument_list|)
expr_stmt|;
name|de
operator|=
name|te
operator|.
name|docs
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|DocsEnum
operator|.
name|FLAG_NONE
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|de
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|de
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"abc"
argument_list|,
name|te
operator|.
name|next
argument_list|()
operator|.
name|utf8ToString
argument_list|()
argument_list|)
expr_stmt|;
name|de
operator|=
name|te
operator|.
name|docs
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|DocsEnum
operator|.
name|FLAG_NONE
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|de
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|de
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|te
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
comment|// pass empty string
name|te
operator|=
name|terms
operator|.
name|intersect
argument_list|(
name|ca
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"abc"
argument_list|,
name|te
operator|.
name|next
argument_list|()
operator|.
name|utf8ToString
argument_list|()
argument_list|)
expr_stmt|;
name|de
operator|=
name|te
operator|.
name|docs
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|DocsEnum
operator|.
name|FLAG_NONE
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|de
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|de
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|te
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class
end_unit
