begin_unit
begin_package
DECL|package|org.apache.lucene.index
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|MockAnalyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|FieldType
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|TextField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriterConfig
operator|.
name|OpenMode
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|ScoreDoc
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TermQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|_TestUtil
import|;
end_import
begin_class
DECL|class|TestDirectoryReaderReopen
specifier|public
class|class
name|TestDirectoryReaderReopen
extends|extends
name|LuceneTestCase
block|{
DECL|method|testReopen
specifier|public
name|void
name|testReopen
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Directory
name|dir1
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|createIndex
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|performDefaultTests
argument_list|(
operator|new
name|TestReopen
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|void
name|modifyIndex
parameter_list|(
name|int
name|i
parameter_list|)
throws|throws
name|IOException
block|{
name|TestDirectoryReaderReopen
operator|.
name|modifyIndex
argument_list|(
name|i
argument_list|,
name|dir1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|DirectoryReader
name|openReader
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|DirectoryReader
operator|.
name|open
argument_list|(
name|dir1
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|dir1
operator|.
name|close
argument_list|()
expr_stmt|;
specifier|final
name|Directory
name|dir2
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|createIndex
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir2
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|performDefaultTests
argument_list|(
operator|new
name|TestReopen
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|void
name|modifyIndex
parameter_list|(
name|int
name|i
parameter_list|)
throws|throws
name|IOException
block|{
name|TestDirectoryReaderReopen
operator|.
name|modifyIndex
argument_list|(
name|i
argument_list|,
name|dir2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|DirectoryReader
name|openReader
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|DirectoryReader
operator|.
name|open
argument_list|(
name|dir2
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|dir2
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// LUCENE-1228: IndexWriter.commit() does not update the index version
comment|// populate an index in iterations.
comment|// at the end of every iteration, commit the index and reopen/recreate the reader.
comment|// in each iteration verify the work of previous iteration.
comment|// try this once with reopen once recreate, on both RAMDir and FSDir.
DECL|method|testCommitReopen
specifier|public
name|void
name|testCommitReopen
parameter_list|()
throws|throws
name|IOException
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|doTestReopenWithCommit
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testCommitRecreate
specifier|public
name|void
name|testCommitRecreate
parameter_list|()
throws|throws
name|IOException
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|doTestReopenWithCommit
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|doTestReopenWithCommit
specifier|private
name|void
name|doTestReopenWithCommit
parameter_list|(
name|Random
name|random
parameter_list|,
name|Directory
name|dir
parameter_list|,
name|boolean
name|withReopen
parameter_list|)
throws|throws
name|IOException
block|{
name|IndexWriter
name|iwriter
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|)
argument_list|)
operator|.
name|setOpenMode
argument_list|(
name|OpenMode
operator|.
name|CREATE
argument_list|)
operator|.
name|setMergeScheduler
argument_list|(
operator|new
name|SerialMergeScheduler
argument_list|()
argument_list|)
operator|.
name|setMergePolicy
argument_list|(
name|newLogMergePolicy
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|iwriter
operator|.
name|commit
argument_list|()
expr_stmt|;
name|DirectoryReader
name|reader
init|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|dir
argument_list|)
decl_stmt|;
try|try
block|{
name|int
name|M
init|=
literal|3
decl_stmt|;
name|FieldType
name|customType
init|=
operator|new
name|FieldType
argument_list|(
name|TextField
operator|.
name|TYPE_STORED
argument_list|)
decl_stmt|;
name|customType
operator|.
name|setTokenized
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|FieldType
name|customType2
init|=
operator|new
name|FieldType
argument_list|(
name|TextField
operator|.
name|TYPE_STORED
argument_list|)
decl_stmt|;
name|customType2
operator|.
name|setTokenized
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|customType2
operator|.
name|setOmitNorms
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|FieldType
name|customType3
init|=
operator|new
name|FieldType
argument_list|()
decl_stmt|;
name|customType3
operator|.
name|setStored
argument_list|(
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|M
condition|;
name|j
operator|++
control|)
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newField
argument_list|(
literal|"id"
argument_list|,
name|i
operator|+
literal|"_"
operator|+
name|j
argument_list|,
name|customType
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newField
argument_list|(
literal|"id2"
argument_list|,
name|i
operator|+
literal|"_"
operator|+
name|j
argument_list|,
name|customType2
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newField
argument_list|(
literal|"id3"
argument_list|,
name|i
operator|+
literal|"_"
operator|+
name|j
argument_list|,
name|customType3
argument_list|)
argument_list|)
expr_stmt|;
name|iwriter
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|int
name|k
init|=
name|i
operator|-
literal|1
decl_stmt|;
name|int
name|n
init|=
name|j
operator|+
name|k
operator|*
name|M
decl_stmt|;
name|StoredDocument
name|prevItereationDoc
init|=
name|reader
operator|.
name|document
argument_list|(
name|n
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|prevItereationDoc
argument_list|)
expr_stmt|;
name|String
name|id
init|=
name|prevItereationDoc
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|k
operator|+
literal|"_"
operator|+
name|j
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
block|}
name|iwriter
operator|.
name|commit
argument_list|()
expr_stmt|;
if|if
condition|(
name|withReopen
condition|)
block|{
comment|// reopen
name|DirectoryReader
name|r2
init|=
name|DirectoryReader
operator|.
name|openIfChanged
argument_list|(
name|reader
argument_list|)
decl_stmt|;
if|if
condition|(
name|r2
operator|!=
literal|null
condition|)
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|reader
operator|=
name|r2
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// recreate
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|reader
operator|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|dir
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|iwriter
operator|.
name|close
argument_list|()
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|performDefaultTests
specifier|private
name|void
name|performDefaultTests
parameter_list|(
name|TestReopen
name|test
parameter_list|)
throws|throws
name|Exception
block|{
name|DirectoryReader
name|index1
init|=
name|test
operator|.
name|openReader
argument_list|()
decl_stmt|;
name|DirectoryReader
name|index2
init|=
name|test
operator|.
name|openReader
argument_list|()
decl_stmt|;
name|TestDirectoryReader
operator|.
name|assertIndexEquals
argument_list|(
name|index1
argument_list|,
name|index2
argument_list|)
expr_stmt|;
comment|// verify that reopen() does not return a new reader instance
comment|// in case the index has no changes
name|ReaderCouple
name|couple
init|=
name|refreshReader
argument_list|(
name|index2
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|couple
operator|.
name|refreshedReader
operator|==
name|index2
argument_list|)
expr_stmt|;
name|couple
operator|=
name|refreshReader
argument_list|(
name|index2
argument_list|,
name|test
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|index1
operator|.
name|close
argument_list|()
expr_stmt|;
name|index1
operator|=
name|couple
operator|.
name|newReader
expr_stmt|;
name|DirectoryReader
name|index2_refreshed
init|=
name|couple
operator|.
name|refreshedReader
decl_stmt|;
name|index2
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// test if refreshed reader and newly opened reader return equal results
name|TestDirectoryReader
operator|.
name|assertIndexEquals
argument_list|(
name|index1
argument_list|,
name|index2_refreshed
argument_list|)
expr_stmt|;
name|index2_refreshed
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertReaderClosed
argument_list|(
name|index2
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertReaderClosed
argument_list|(
name|index2_refreshed
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|index2
operator|=
name|test
operator|.
name|openReader
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|index1
operator|.
name|close
argument_list|()
expr_stmt|;
name|couple
operator|=
name|refreshReader
argument_list|(
name|index2
argument_list|,
name|test
argument_list|,
name|i
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// refresh DirectoryReader
name|index2
operator|.
name|close
argument_list|()
expr_stmt|;
name|index2
operator|=
name|couple
operator|.
name|refreshedReader
expr_stmt|;
name|index1
operator|=
name|couple
operator|.
name|newReader
expr_stmt|;
name|TestDirectoryReader
operator|.
name|assertIndexEquals
argument_list|(
name|index1
argument_list|,
name|index2
argument_list|)
expr_stmt|;
block|}
name|index1
operator|.
name|close
argument_list|()
expr_stmt|;
name|index2
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertReaderClosed
argument_list|(
name|index1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertReaderClosed
argument_list|(
name|index2
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|testThreadSafety
specifier|public
name|void
name|testThreadSafety
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
comment|// NOTE: this also controls the number of threads!
specifier|final
name|int
name|n
init|=
name|_TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|20
argument_list|,
literal|40
argument_list|)
decl_stmt|;
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|writer
operator|.
name|addDocument
argument_list|(
name|createDocument
argument_list|(
name|i
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|forceMerge
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
specifier|final
name|TestReopen
name|test
init|=
operator|new
name|TestReopen
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|void
name|modifyIndex
parameter_list|(
name|int
name|i
parameter_list|)
throws|throws
name|IOException
block|{
name|IndexWriter
name|modifier
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|modifier
operator|.
name|addDocument
argument_list|(
name|createDocument
argument_list|(
name|n
operator|+
name|i
argument_list|,
literal|6
argument_list|)
argument_list|)
expr_stmt|;
name|modifier
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|DirectoryReader
name|openReader
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|DirectoryReader
operator|.
name|open
argument_list|(
name|dir
argument_list|)
return|;
block|}
block|}
decl_stmt|;
specifier|final
name|List
argument_list|<
name|ReaderCouple
argument_list|>
name|readers
init|=
name|Collections
operator|.
name|synchronizedList
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|ReaderCouple
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
name|DirectoryReader
name|firstReader
init|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|dir
argument_list|)
decl_stmt|;
name|DirectoryReader
name|reader
init|=
name|firstReader
decl_stmt|;
name|ReaderThread
index|[]
name|threads
init|=
operator|new
name|ReaderThread
index|[
name|n
index|]
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|DirectoryReader
argument_list|>
name|readersToClose
init|=
name|Collections
operator|.
name|synchronizedSet
argument_list|(
operator|new
name|HashSet
argument_list|<
name|DirectoryReader
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|%
literal|2
operator|==
literal|0
condition|)
block|{
name|DirectoryReader
name|refreshed
init|=
name|DirectoryReader
operator|.
name|openIfChanged
argument_list|(
name|reader
argument_list|)
decl_stmt|;
if|if
condition|(
name|refreshed
operator|!=
literal|null
condition|)
block|{
name|readersToClose
operator|.
name|add
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|reader
operator|=
name|refreshed
expr_stmt|;
block|}
block|}
specifier|final
name|DirectoryReader
name|r
init|=
name|reader
decl_stmt|;
specifier|final
name|int
name|index
init|=
name|i
decl_stmt|;
name|ReaderThreadTask
name|task
decl_stmt|;
if|if
condition|(
name|i
argument_list|<
literal|4
operator|||
operator|(
name|i
operator|>=
literal|10
operator|&&
name|i
operator|<
literal|14
operator|)
operator|||
name|i
argument_list|>
literal|18
condition|)
block|{
name|task
operator|=
operator|new
name|ReaderThreadTask
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|Random
name|rnd
init|=
name|LuceneTestCase
operator|.
name|random
argument_list|()
decl_stmt|;
while|while
condition|(
operator|!
name|stopped
condition|)
block|{
if|if
condition|(
name|index
operator|%
literal|2
operator|==
literal|0
condition|)
block|{
comment|// refresh reader synchronized
name|ReaderCouple
name|c
init|=
operator|(
name|refreshReader
argument_list|(
name|r
argument_list|,
name|test
argument_list|,
name|index
argument_list|,
literal|true
argument_list|)
operator|)
decl_stmt|;
name|readersToClose
operator|.
name|add
argument_list|(
name|c
operator|.
name|newReader
argument_list|)
expr_stmt|;
name|readersToClose
operator|.
name|add
argument_list|(
name|c
operator|.
name|refreshedReader
argument_list|)
expr_stmt|;
name|readers
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
comment|// prevent too many readers
break|break;
block|}
else|else
block|{
comment|// not synchronized
name|DirectoryReader
name|refreshed
init|=
name|DirectoryReader
operator|.
name|openIfChanged
argument_list|(
name|r
argument_list|)
decl_stmt|;
if|if
condition|(
name|refreshed
operator|==
literal|null
condition|)
block|{
name|refreshed
operator|=
name|r
expr_stmt|;
block|}
name|IndexSearcher
name|searcher
init|=
name|newSearcher
argument_list|(
name|refreshed
argument_list|)
decl_stmt|;
name|ScoreDoc
index|[]
name|hits
init|=
name|searcher
operator|.
name|search
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field1"
argument_list|,
literal|"a"
operator|+
name|rnd
operator|.
name|nextInt
argument_list|(
name|refreshed
operator|.
name|maxDoc
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|1000
argument_list|)
operator|.
name|scoreDocs
decl_stmt|;
if|if
condition|(
name|hits
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|searcher
operator|.
name|doc
argument_list|(
name|hits
index|[
literal|0
index|]
operator|.
name|doc
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|refreshed
operator|!=
name|r
condition|)
block|{
name|refreshed
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
synchronized|synchronized
init|(
name|this
init|)
block|{
name|wait
argument_list|(
name|_TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|100
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
expr_stmt|;
block|}
else|else
block|{
name|task
operator|=
operator|new
name|ReaderThreadTask
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|Random
name|rnd
init|=
name|LuceneTestCase
operator|.
name|random
argument_list|()
decl_stmt|;
while|while
condition|(
operator|!
name|stopped
condition|)
block|{
name|int
name|numReaders
init|=
name|readers
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|numReaders
operator|>
literal|0
condition|)
block|{
name|ReaderCouple
name|c
init|=
name|readers
operator|.
name|get
argument_list|(
name|rnd
operator|.
name|nextInt
argument_list|(
name|numReaders
argument_list|)
argument_list|)
decl_stmt|;
name|TestDirectoryReader
operator|.
name|assertIndexEquals
argument_list|(
name|c
operator|.
name|newReader
argument_list|,
name|c
operator|.
name|refreshedReader
argument_list|)
expr_stmt|;
block|}
synchronized|synchronized
init|(
name|this
init|)
block|{
name|wait
argument_list|(
name|_TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|100
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
expr_stmt|;
block|}
name|threads
index|[
name|i
index|]
operator|=
operator|new
name|ReaderThread
argument_list|(
name|task
argument_list|)
expr_stmt|;
name|threads
index|[
name|i
index|]
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
synchronized|synchronized
init|(
name|this
init|)
block|{
name|wait
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|threads
index|[
name|i
index|]
operator|!=
literal|null
condition|)
block|{
name|threads
index|[
name|i
index|]
operator|.
name|stopThread
argument_list|()
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|threads
index|[
name|i
index|]
operator|!=
literal|null
condition|)
block|{
name|threads
index|[
name|i
index|]
operator|.
name|join
argument_list|()
expr_stmt|;
if|if
condition|(
name|threads
index|[
name|i
index|]
operator|.
name|error
operator|!=
literal|null
condition|)
block|{
name|String
name|msg
init|=
literal|"Error occurred in thread "
operator|+
name|threads
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
operator|+
literal|":\n"
operator|+
name|threads
index|[
name|i
index|]
operator|.
name|error
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|fail
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
specifier|final
name|DirectoryReader
name|readerToClose
range|:
name|readersToClose
control|)
block|{
name|readerToClose
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|firstReader
operator|.
name|close
argument_list|()
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
for|for
control|(
specifier|final
name|DirectoryReader
name|readerToClose
range|:
name|readersToClose
control|)
block|{
name|assertReaderClosed
argument_list|(
name|readerToClose
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|assertReaderClosed
argument_list|(
name|reader
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertReaderClosed
argument_list|(
name|firstReader
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|class|ReaderCouple
specifier|private
specifier|static
class|class
name|ReaderCouple
block|{
DECL|method|ReaderCouple
name|ReaderCouple
parameter_list|(
name|DirectoryReader
name|r1
parameter_list|,
name|DirectoryReader
name|r2
parameter_list|)
block|{
name|newReader
operator|=
name|r1
expr_stmt|;
name|refreshedReader
operator|=
name|r2
expr_stmt|;
block|}
DECL|field|newReader
name|DirectoryReader
name|newReader
decl_stmt|;
DECL|field|refreshedReader
name|DirectoryReader
name|refreshedReader
decl_stmt|;
block|}
DECL|class|ReaderThreadTask
specifier|abstract
specifier|static
class|class
name|ReaderThreadTask
block|{
DECL|field|stopped
specifier|protected
specifier|volatile
name|boolean
name|stopped
decl_stmt|;
DECL|method|stop
specifier|public
name|void
name|stop
parameter_list|()
block|{
name|this
operator|.
name|stopped
operator|=
literal|true
expr_stmt|;
block|}
DECL|method|run
specifier|public
specifier|abstract
name|void
name|run
parameter_list|()
throws|throws
name|Exception
function_decl|;
block|}
DECL|class|ReaderThread
specifier|private
specifier|static
class|class
name|ReaderThread
extends|extends
name|Thread
block|{
DECL|field|task
name|ReaderThreadTask
name|task
decl_stmt|;
DECL|field|error
name|Throwable
name|error
decl_stmt|;
DECL|method|ReaderThread
name|ReaderThread
parameter_list|(
name|ReaderThreadTask
name|task
parameter_list|)
block|{
name|this
operator|.
name|task
operator|=
name|task
expr_stmt|;
block|}
DECL|method|stopThread
specifier|public
name|void
name|stopThread
parameter_list|()
block|{
name|this
operator|.
name|task
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|this
operator|.
name|task
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|r
parameter_list|)
block|{
name|r
operator|.
name|printStackTrace
argument_list|(
name|System
operator|.
name|out
argument_list|)
expr_stmt|;
name|this
operator|.
name|error
operator|=
name|r
expr_stmt|;
block|}
block|}
block|}
DECL|field|createReaderMutex
specifier|private
name|Object
name|createReaderMutex
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
DECL|method|refreshReader
specifier|private
name|ReaderCouple
name|refreshReader
parameter_list|(
name|DirectoryReader
name|reader
parameter_list|,
name|boolean
name|hasChanges
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|refreshReader
argument_list|(
name|reader
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
name|hasChanges
argument_list|)
return|;
block|}
DECL|method|refreshReader
name|ReaderCouple
name|refreshReader
parameter_list|(
name|DirectoryReader
name|reader
parameter_list|,
name|TestReopen
name|test
parameter_list|,
name|int
name|modify
parameter_list|,
name|boolean
name|hasChanges
parameter_list|)
throws|throws
name|IOException
block|{
synchronized|synchronized
init|(
name|createReaderMutex
init|)
block|{
name|DirectoryReader
name|r
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|test
operator|!=
literal|null
condition|)
block|{
name|test
operator|.
name|modifyIndex
argument_list|(
name|modify
argument_list|)
expr_stmt|;
name|r
operator|=
name|test
operator|.
name|openReader
argument_list|()
expr_stmt|;
block|}
name|DirectoryReader
name|refreshed
init|=
literal|null
decl_stmt|;
try|try
block|{
name|refreshed
operator|=
name|DirectoryReader
operator|.
name|openIfChanged
argument_list|(
name|reader
argument_list|)
expr_stmt|;
if|if
condition|(
name|refreshed
operator|==
literal|null
condition|)
block|{
name|refreshed
operator|=
name|reader
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|refreshed
operator|==
literal|null
operator|&&
name|r
operator|!=
literal|null
condition|)
block|{
comment|// Hit exception -- close opened reader
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|hasChanges
condition|)
block|{
if|if
condition|(
name|refreshed
operator|==
name|reader
condition|)
block|{
name|fail
argument_list|(
literal|"No new DirectoryReader instance created during refresh."
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|refreshed
operator|!=
name|reader
condition|)
block|{
name|fail
argument_list|(
literal|"New DirectoryReader instance created during refresh even though index had no changes."
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|ReaderCouple
argument_list|(
name|r
argument_list|,
name|refreshed
argument_list|)
return|;
block|}
block|}
DECL|method|createIndex
specifier|public
specifier|static
name|void
name|createIndex
parameter_list|(
name|Random
name|random
parameter_list|,
name|Directory
name|dir
parameter_list|,
name|boolean
name|multiSegment
parameter_list|)
throws|throws
name|IOException
block|{
name|IndexWriter
operator|.
name|unlock
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|IndexWriter
name|w
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|LuceneTestCase
operator|.
name|newIndexWriterConfig
argument_list|(
name|random
argument_list|,
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|)
argument_list|)
operator|.
name|setMergePolicy
argument_list|(
operator|new
name|LogDocMergePolicy
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|w
operator|.
name|addDocument
argument_list|(
name|createDocument
argument_list|(
name|i
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|multiSegment
operator|&&
operator|(
name|i
operator|%
literal|10
operator|)
operator|==
literal|0
condition|)
block|{
name|w
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|multiSegment
condition|)
block|{
name|w
operator|.
name|forceMerge
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|DirectoryReader
name|r
init|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|dir
argument_list|)
decl_stmt|;
if|if
condition|(
name|multiSegment
condition|)
block|{
name|assertTrue
argument_list|(
name|r
operator|.
name|leaves
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertTrue
argument_list|(
name|r
operator|.
name|leaves
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
block|}
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|createDocument
specifier|public
specifier|static
name|Document
name|createDocument
parameter_list|(
name|int
name|n
parameter_list|,
name|int
name|numFields
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|n
argument_list|)
expr_stmt|;
name|FieldType
name|customType2
init|=
operator|new
name|FieldType
argument_list|(
name|TextField
operator|.
name|TYPE_STORED
argument_list|)
decl_stmt|;
name|customType2
operator|.
name|setTokenized
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|customType2
operator|.
name|setOmitNorms
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|FieldType
name|customType3
init|=
operator|new
name|FieldType
argument_list|()
decl_stmt|;
name|customType3
operator|.
name|setStored
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
literal|"field1"
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"fielda"
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|,
name|customType2
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"fieldb"
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|,
name|customType3
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" b"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|n
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|numFields
condition|;
name|i
operator|++
control|)
block|{
name|doc
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
literal|"field"
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|doc
return|;
block|}
DECL|method|modifyIndex
specifier|static
name|void
name|modifyIndex
parameter_list|(
name|int
name|i
parameter_list|,
name|Directory
name|dir
parameter_list|)
throws|throws
name|IOException
block|{
switch|switch
condition|(
name|i
condition|)
block|{
case|case
literal|0
case|:
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TEST: modify index"
argument_list|)
expr_stmt|;
block|}
name|IndexWriter
name|w
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|w
operator|.
name|deleteDocuments
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field2"
argument_list|,
literal|"a11"
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|deleteDocuments
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field2"
argument_list|,
literal|"b30"
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
literal|1
case|:
block|{
name|IndexWriter
name|w
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|w
operator|.
name|forceMerge
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
literal|2
case|:
block|{
name|IndexWriter
name|w
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|createDocument
argument_list|(
literal|101
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|forceMerge
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|createDocument
argument_list|(
literal|102
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|createDocument
argument_list|(
literal|103
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
literal|3
case|:
block|{
name|IndexWriter
name|w
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|createDocument
argument_list|(
literal|101
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
block|}
DECL|method|assertReaderClosed
specifier|static
name|void
name|assertReaderClosed
parameter_list|(
name|IndexReader
name|reader
parameter_list|,
name|boolean
name|checkSubReaders
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|reader
operator|.
name|getRefCount
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|checkSubReaders
operator|&&
name|reader
operator|instanceof
name|CompositeReader
condition|)
block|{
comment|// we cannot use reader context here, as reader is
comment|// already closed and calling getTopReaderContext() throws AlreadyClosed!
name|List
argument_list|<
name|?
extends|extends
name|IndexReader
argument_list|>
name|subReaders
init|=
operator|(
operator|(
name|CompositeReader
operator|)
name|reader
operator|)
operator|.
name|getSequentialSubReaders
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|IndexReader
name|r
range|:
name|subReaders
control|)
block|{
name|assertReaderClosed
argument_list|(
name|r
argument_list|,
name|checkSubReaders
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|class|TestReopen
specifier|abstract
specifier|static
class|class
name|TestReopen
block|{
DECL|method|openReader
specifier|protected
specifier|abstract
name|DirectoryReader
name|openReader
parameter_list|()
throws|throws
name|IOException
function_decl|;
DECL|method|modifyIndex
specifier|protected
specifier|abstract
name|void
name|modifyIndex
parameter_list|(
name|int
name|i
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
DECL|class|KeepAllCommits
specifier|static
class|class
name|KeepAllCommits
implements|implements
name|IndexDeletionPolicy
block|{
DECL|method|onInit
specifier|public
name|void
name|onInit
parameter_list|(
name|List
argument_list|<
name|?
extends|extends
name|IndexCommit
argument_list|>
name|commits
parameter_list|)
block|{     }
DECL|method|onCommit
specifier|public
name|void
name|onCommit
parameter_list|(
name|List
argument_list|<
name|?
extends|extends
name|IndexCommit
argument_list|>
name|commits
parameter_list|)
block|{     }
block|}
DECL|method|testReopenOnCommit
specifier|public
name|void
name|testReopenOnCommit
parameter_list|()
throws|throws
name|Throwable
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setIndexDeletionPolicy
argument_list|(
operator|new
name|KeepAllCommits
argument_list|()
argument_list|)
operator|.
name|setMaxBufferedDocs
argument_list|(
operator|-
literal|1
argument_list|)
operator|.
name|setMergePolicy
argument_list|(
name|newLogMergePolicy
argument_list|(
literal|10
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newStringField
argument_list|(
literal|"id"
argument_list|,
literal|""
operator|+
name|i
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|data
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|data
operator|.
name|put
argument_list|(
literal|"index"
argument_list|,
name|i
operator|+
literal|""
argument_list|)
expr_stmt|;
name|writer
operator|.
name|commit
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|writer
operator|.
name|deleteDocuments
argument_list|(
operator|new
name|Term
argument_list|(
literal|"id"
argument_list|,
literal|""
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|data
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|data
operator|.
name|put
argument_list|(
literal|"index"
argument_list|,
operator|(
literal|4
operator|+
name|i
operator|)
operator|+
literal|""
argument_list|)
expr_stmt|;
name|writer
operator|.
name|commit
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|DirectoryReader
name|r
init|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|dir
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|r
operator|.
name|numDocs
argument_list|()
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|IndexCommit
argument_list|>
name|commits
init|=
name|DirectoryReader
operator|.
name|listCommits
argument_list|(
name|dir
argument_list|)
decl_stmt|;
for|for
control|(
specifier|final
name|IndexCommit
name|commit
range|:
name|commits
control|)
block|{
name|DirectoryReader
name|r2
init|=
name|DirectoryReader
operator|.
name|openIfChanged
argument_list|(
name|r
argument_list|,
name|commit
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|r2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|r2
operator|!=
name|r
argument_list|)
expr_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|s
init|=
name|commit
operator|.
name|getUserData
argument_list|()
decl_stmt|;
specifier|final
name|int
name|v
decl_stmt|;
if|if
condition|(
name|s
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|// First commit created by IW
name|v
operator|=
operator|-
literal|1
expr_stmt|;
block|}
else|else
block|{
name|v
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|s
operator|.
name|get
argument_list|(
literal|"index"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|v
operator|<
literal|4
condition|)
block|{
name|assertEquals
argument_list|(
literal|1
operator|+
name|v
argument_list|,
name|r2
operator|.
name|numDocs
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
literal|7
operator|-
name|v
argument_list|,
name|r2
operator|.
name|numDocs
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
name|r
operator|=
name|r2
expr_stmt|;
block|}
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class
end_unit
