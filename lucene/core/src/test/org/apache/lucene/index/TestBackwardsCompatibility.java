begin_unit
begin_package
DECL|package|org.apache.lucene.index
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|MockAnalyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|BinaryDocValuesField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|DoubleDocValuesField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|FieldType
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|FloatDocValuesField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|IntField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|LongField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|NumericDocValuesField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|SortedDocValuesField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|SortedSetDocValuesField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|StringField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|TextField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|FieldInfo
operator|.
name|IndexOptions
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriterConfig
operator|.
name|OpenMode
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|DocIdSetIterator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|NumericRangeQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|ScoreDoc
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TermQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|BaseDirectoryWrapper
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|FSDirectory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|NIOFSDirectory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|RAMDirectory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|SimpleFSDirectory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Bits
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Constants
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|InfoStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
operator|.
name|SuppressCodecs
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|NumericUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|StringHelper
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|TestUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import
begin_comment
comment|/*   Verify we can read the pre-5.0 file format, do searches   against it, and add documents to it. */
end_comment
begin_comment
comment|// note: add this if we make a 4.x impersonator
end_comment
begin_comment
comment|// TODO: don't use 4.x codec, its unrealistic since it means
end_comment
begin_comment
comment|// we won't even be running the actual code, only the impostor
end_comment
begin_comment
comment|// @SuppressCodecs("Lucene4x")
end_comment
begin_comment
comment|// Sep codec cannot yet handle the offsets in our 4.x index!
end_comment
begin_class
annotation|@
name|SuppressCodecs
argument_list|(
block|{
literal|"Lucene40"
block|,
literal|"Lucene41"
block|,
literal|"Lucene42"
block|,
literal|"Lucene45"
block|}
argument_list|)
DECL|class|TestBackwardsCompatibility
specifier|public
class|class
name|TestBackwardsCompatibility
extends|extends
name|LuceneTestCase
block|{
comment|// Uncomment these cases& run them on an older Lucene version,
comment|// to generate indexes to test backwards compatibility.  These
comment|// indexes will be created under directory /tmp/idx/.
comment|//
comment|// However, you must first disable the Lucene TestSecurityManager,
comment|// which will otherwise disallow writing outside of the build/
comment|// directory - to do this, comment out the "java.security.manager"
comment|//<sysproperty> under the "test-macro"<macrodef>.
comment|//
comment|// Be sure to create the indexes with the actual format:
comment|//  ant test -Dtestcase=TestBackwardsCompatibility -Dversion=x.y.z
comment|//      -Dtests.codec=LuceneXY -Dtests.postingsformat=LuceneXY -Dtests.docvaluesformat=LuceneXY
comment|//
comment|// Zip up the generated indexes:
comment|//
comment|//    cd /tmp/idx/index.cfs   ; zip index.<VERSION>.cfs.zip *
comment|//    cd /tmp/idx/index.nocfs ; zip index.<VERSION>.nocfs.zip *
comment|//
comment|// Then move those 2 zip files to your trunk checkout and add them
comment|// to the oldNames array.
comment|/*   public void testCreateCFS() throws IOException {     createIndex("index.cfs", true, false);   }    public void testCreateNoCFS() throws IOException {     createIndex("index.nocfs", false, false);   }   */
comment|/*   // These are only needed for the special upgrade test to verify   // that also single-segment indexes are correctly upgraded by IndexUpgrader.   // You don't need them to be build for non-4.0 (the test is happy with just one   // "old" segment format, version is unimportant:      public void testCreateSingleSegmentCFS() throws IOException {     createIndex("index.singlesegment.cfs", true, true);   }    public void testCreateSingleSegmentNoCFS() throws IOException {     createIndex("index.singlesegment.nocfs", false, true);   }  */
comment|/*   public void testCreateMoreTermsIndex() throws Exception {     // we use a real directory name that is not cleaned up,     // because this method is only used to create backwards     // indexes:     File indexDir = new File("moreterms");     _TestUtil.rmDir(indexDir);     Directory dir = newFSDirectory(indexDir);      LogByteSizeMergePolicy mp = new LogByteSizeMergePolicy();     mp.setUseCompoundFile(false);     mp.setNoCFSRatio(1.0);     mp.setMaxCFSSegmentSizeMB(Double.POSITIVE_INFINITY);     MockAnalyzer analyzer = new MockAnalyzer(random());     analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));      // TODO: remove randomness     IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, analyzer)       .setMergePolicy(mp);     conf.setCodec(Codec.forName("Lucene40"));     IndexWriter writer = new IndexWriter(dir, conf);     LineFileDocs docs = new LineFileDocs(null, true);     for(int i=0;i<50;i++) {       writer.addDocument(docs.nextDoc());     }     writer.shutdown();     dir.close();      // Gives you time to copy the index out!: (there is also     // a test option to not remove temp dir...):     Thread.sleep(100000);   }   */
DECL|method|updateNumeric
specifier|private
name|void
name|updateNumeric
parameter_list|(
name|IndexWriter
name|writer
parameter_list|,
name|String
name|id
parameter_list|,
name|String
name|f
parameter_list|,
name|String
name|cf
parameter_list|,
name|long
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|writer
operator|.
name|updateNumericDocValue
argument_list|(
operator|new
name|Term
argument_list|(
literal|"id"
argument_list|,
name|id
argument_list|)
argument_list|,
name|f
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|writer
operator|.
name|updateNumericDocValue
argument_list|(
operator|new
name|Term
argument_list|(
literal|"id"
argument_list|,
name|id
argument_list|)
argument_list|,
name|cf
argument_list|,
name|value
operator|*
literal|2
argument_list|)
expr_stmt|;
block|}
DECL|method|updateBinary
specifier|private
name|void
name|updateBinary
parameter_list|(
name|IndexWriter
name|writer
parameter_list|,
name|String
name|id
parameter_list|,
name|String
name|f
parameter_list|,
name|String
name|cf
parameter_list|,
name|long
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|writer
operator|.
name|updateBinaryDocValue
argument_list|(
operator|new
name|Term
argument_list|(
literal|"id"
argument_list|,
name|id
argument_list|)
argument_list|,
name|f
argument_list|,
name|TestBinaryDocValuesUpdates
operator|.
name|toBytes
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|updateBinaryDocValue
argument_list|(
operator|new
name|Term
argument_list|(
literal|"id"
argument_list|,
name|id
argument_list|)
argument_list|,
name|cf
argument_list|,
name|TestBinaryDocValuesUpdates
operator|.
name|toBytes
argument_list|(
name|value
operator|*
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/*  // Creates an index with DocValues updates   public void testCreateIndexWithDocValuesUpdates() throws Exception {     // we use a real directory name that is not cleaned up,     // because this method is only used to create backwards     // indexes:     File indexDir = new File("/tmp/idx/dvupdates");     TestUtil.rm(indexDir);     Directory dir = newFSDirectory(indexDir);          IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))       .setUseCompoundFile(false).setMergePolicy(NoMergePolicy.INSTANCE);     IndexWriter writer = new IndexWriter(dir, conf);     // create an index w/ few doc-values fields, some with updates and some without     for (int i = 0; i< 30; i++) {       Document doc = new Document();       doc.add(new StringField("id", "" + i, Store.NO));       doc.add(new NumericDocValuesField("ndv1", i));       doc.add(new NumericDocValuesField("ndv1_c", i*2));       doc.add(new NumericDocValuesField("ndv2", i*3));       doc.add(new NumericDocValuesField("ndv2_c", i*6));       doc.add(new BinaryDocValuesField("bdv1", TestBinaryDocValuesUpdates.toBytes(i)));       doc.add(new BinaryDocValuesField("bdv1_c", TestBinaryDocValuesUpdates.toBytes(i*2)));       doc.add(new BinaryDocValuesField("bdv2", TestBinaryDocValuesUpdates.toBytes(i*3)));       doc.add(new BinaryDocValuesField("bdv2_c", TestBinaryDocValuesUpdates.toBytes(i*6)));       writer.addDocument(doc);       if ((i+1) % 10 == 0) {         writer.commit(); // flush every 10 docs       }     }          // first segment: no updates          // second segment: update two fields, same gen     updateNumeric(writer, "10", "ndv1", "ndv1_c", 100L);     updateBinary(writer, "11", "bdv1", "bdv1_c", 100L);     writer.commit();          // third segment: update few fields, different gens, few docs     updateNumeric(writer, "20", "ndv1", "ndv1_c", 100L);     updateBinary(writer, "21", "bdv1", "bdv1_c", 100L);     writer.commit();     updateNumeric(writer, "22", "ndv1", "ndv1_c", 200L); // update the field again     writer.commit();          writer.shutdown();     dir.close();   }*/
DECL|field|oldNames
specifier|final
specifier|static
name|String
index|[]
name|oldNames
init|=
block|{
literal|"40.cfs"
block|,
literal|"40.nocfs"
block|,
literal|"41.cfs"
block|,
literal|"41.nocfs"
block|,
literal|"42.cfs"
block|,
literal|"42.nocfs"
block|,
comment|// TODO: these are on 4x, but something is wrong (they seem to be a too old DV format):
literal|"45.cfs"
block|,
literal|"45.nocfs"
block|,
literal|"461.cfs"
block|,
literal|"461.nocfs"
block|,   }
decl_stmt|;
DECL|field|unsupportedNames
specifier|final
name|String
index|[]
name|unsupportedNames
init|=
block|{
literal|"19.cfs"
block|,
literal|"19.nocfs"
block|,
literal|"20.cfs"
block|,
literal|"20.nocfs"
block|,
literal|"21.cfs"
block|,
literal|"21.nocfs"
block|,
literal|"22.cfs"
block|,
literal|"22.nocfs"
block|,
literal|"23.cfs"
block|,
literal|"23.nocfs"
block|,
literal|"24.cfs"
block|,
literal|"24.nocfs"
block|,
literal|"29.cfs"
block|,
literal|"29.nocfs"
block|,
literal|"30.cfs"
block|,
literal|"30.nocfs"
block|,
literal|"31.cfs"
block|,
literal|"31.nocfs"
block|,
literal|"32.cfs"
block|,
literal|"32.nocfs"
block|,
literal|"34.cfs"
block|,
literal|"34.nocfs"
block|}
decl_stmt|;
DECL|field|oldSingleSegmentNames
specifier|final
specifier|static
name|String
index|[]
name|oldSingleSegmentNames
init|=
block|{
literal|"40.optimized.cfs"
block|,
literal|"40.optimized.nocfs"
block|,   }
decl_stmt|;
DECL|field|oldIndexDirs
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Directory
argument_list|>
name|oldIndexDirs
decl_stmt|;
comment|/**    * Randomizes the use of some of hte constructor variations    */
DECL|method|newIndexUpgrader
specifier|private
specifier|static
name|IndexUpgrader
name|newIndexUpgrader
parameter_list|(
name|Directory
name|dir
parameter_list|)
block|{
specifier|final
name|boolean
name|streamType
init|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
decl_stmt|;
specifier|final
name|int
name|choice
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|choice
condition|)
block|{
case|case
literal|0
case|:
return|return
operator|new
name|IndexUpgrader
argument_list|(
name|dir
argument_list|,
name|TEST_VERSION_CURRENT
argument_list|)
return|;
case|case
literal|1
case|:
return|return
operator|new
name|IndexUpgrader
argument_list|(
name|dir
argument_list|,
name|TEST_VERSION_CURRENT
argument_list|,
name|streamType
condition|?
literal|null
else|:
name|InfoStream
operator|.
name|NO_OUTPUT
argument_list|,
literal|false
argument_list|)
return|;
case|case
literal|2
case|:
return|return
operator|new
name|IndexUpgrader
argument_list|(
name|dir
argument_list|,
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
literal|null
argument_list|)
argument_list|,
literal|false
argument_list|)
return|;
default|default:
name|fail
argument_list|(
literal|"case statement didn't get updated when random bounds changed"
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
comment|// never get here
block|}
annotation|@
name|BeforeClass
DECL|method|beforeClass
specifier|public
specifier|static
name|void
name|beforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|assertFalse
argument_list|(
literal|"test infra is broken!"
argument_list|,
name|LuceneTestCase
operator|.
name|OLD_FORMAT_IMPERSONATION_IS_ACTIVE
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|names
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|oldNames
operator|.
name|length
operator|+
name|oldSingleSegmentNames
operator|.
name|length
argument_list|)
decl_stmt|;
name|names
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|oldNames
argument_list|)
argument_list|)
expr_stmt|;
name|names
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|oldSingleSegmentNames
argument_list|)
argument_list|)
expr_stmt|;
name|oldIndexDirs
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|name
range|:
name|names
control|)
block|{
name|File
name|dir
init|=
name|createTempDir
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|File
name|dataFile
init|=
operator|new
name|File
argument_list|(
name|TestBackwardsCompatibility
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"index."
operator|+
name|name
operator|+
literal|".zip"
argument_list|)
operator|.
name|toURI
argument_list|()
argument_list|)
decl_stmt|;
name|TestUtil
operator|.
name|unzip
argument_list|(
name|dataFile
argument_list|,
name|dir
argument_list|)
expr_stmt|;
name|oldIndexDirs
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|newFSDirectory
argument_list|(
name|dir
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|AfterClass
DECL|method|afterClass
specifier|public
specifier|static
name|void
name|afterClass
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|Directory
name|d
range|:
name|oldIndexDirs
operator|.
name|values
argument_list|()
control|)
block|{
name|d
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|oldIndexDirs
operator|=
literal|null
expr_stmt|;
block|}
comment|/** This test checks that *only* IndexFormatTooOldExceptions are thrown when you open and operate on too old indexes! */
DECL|method|testUnsupportedOldIndexes
specifier|public
name|void
name|testUnsupportedOldIndexes
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|unsupportedNames
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TEST: index "
operator|+
name|unsupportedNames
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|File
name|oldIndxeDir
init|=
name|createTempDir
argument_list|(
name|unsupportedNames
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|TestUtil
operator|.
name|unzip
argument_list|(
name|getDataFile
argument_list|(
literal|"unsupported."
operator|+
name|unsupportedNames
index|[
name|i
index|]
operator|+
literal|".zip"
argument_list|)
argument_list|,
name|oldIndxeDir
argument_list|)
expr_stmt|;
name|BaseDirectoryWrapper
name|dir
init|=
name|newFSDirectory
argument_list|(
name|oldIndxeDir
argument_list|)
decl_stmt|;
comment|// don't checkindex, these are intentionally not supported
name|dir
operator|.
name|setCheckIndexOnClose
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|IndexReader
name|reader
init|=
literal|null
decl_stmt|;
name|IndexWriter
name|writer
init|=
literal|null
decl_stmt|;
try|try
block|{
name|reader
operator|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"DirectoryReader.open should not pass for "
operator|+
name|unsupportedNames
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexFormatTooOldException
name|e
parameter_list|)
block|{
comment|// pass
block|}
finally|finally
block|{
if|if
condition|(
name|reader
operator|!=
literal|null
condition|)
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|reader
operator|=
literal|null
expr_stmt|;
block|}
try|try
block|{
name|writer
operator|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"IndexWriter creation should not pass for "
operator|+
name|unsupportedNames
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexFormatTooOldException
name|e
parameter_list|)
block|{
comment|// pass
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TEST: got expected exc:"
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|(
name|System
operator|.
name|out
argument_list|)
expr_stmt|;
block|}
comment|// Make sure exc message includes a path=
name|assertTrue
argument_list|(
literal|"got exc message: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|"path=\""
argument_list|)
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// we should fail to open IW, and so it should be null when we get here.
comment|// However, if the test fails (i.e., IW did not fail on open), we need
comment|// to close IW. However, if merges are run, IW may throw
comment|// IndexFormatTooOldException, and we don't want to mask the fail()
comment|// above, so close without waiting for merges.
if|if
condition|(
name|writer
operator|!=
literal|null
condition|)
block|{
name|writer
operator|.
name|shutdown
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|writer
operator|=
literal|null
expr_stmt|;
block|}
name|ByteArrayOutputStream
name|bos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|(
literal|1024
argument_list|)
decl_stmt|;
name|CheckIndex
name|checker
init|=
operator|new
name|CheckIndex
argument_list|(
name|dir
argument_list|)
decl_stmt|;
name|checker
operator|.
name|setInfoStream
argument_list|(
operator|new
name|PrintStream
argument_list|(
name|bos
argument_list|,
literal|false
argument_list|,
name|IOUtils
operator|.
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
name|CheckIndex
operator|.
name|Status
name|indexStatus
init|=
name|checker
operator|.
name|checkIndex
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|indexStatus
operator|.
name|clean
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bos
operator|.
name|toString
argument_list|(
name|IOUtils
operator|.
name|UTF_8
argument_list|)
operator|.
name|contains
argument_list|(
name|IndexFormatTooOldException
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
name|TestUtil
operator|.
name|rm
argument_list|(
name|oldIndxeDir
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testFullyMergeOldIndex
specifier|public
name|void
name|testFullyMergeOldIndex
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|String
name|name
range|:
name|oldNames
control|)
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\nTEST: index="
operator|+
name|name
argument_list|)
expr_stmt|;
block|}
name|Directory
name|dir
init|=
name|newDirectory
argument_list|(
name|oldIndexDirs
operator|.
name|get
argument_list|(
name|name
argument_list|)
argument_list|)
decl_stmt|;
name|IndexWriter
name|w
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|w
operator|.
name|forceMerge
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|w
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|testAddOldIndexes
specifier|public
name|void
name|testAddOldIndexes
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|String
name|name
range|:
name|oldNames
control|)
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\nTEST: old index "
operator|+
name|name
argument_list|)
expr_stmt|;
block|}
name|Directory
name|targetDir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|w
init|=
operator|new
name|IndexWriter
argument_list|(
name|targetDir
argument_list|,
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|w
operator|.
name|addIndexes
argument_list|(
name|oldIndexDirs
operator|.
name|get
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\nTEST: done adding indices; now close"
argument_list|)
expr_stmt|;
block|}
name|w
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|targetDir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|testAddOldIndexesReader
specifier|public
name|void
name|testAddOldIndexesReader
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|String
name|name
range|:
name|oldNames
control|)
block|{
name|IndexReader
name|reader
init|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|oldIndexDirs
operator|.
name|get
argument_list|(
name|name
argument_list|)
argument_list|)
decl_stmt|;
name|Directory
name|targetDir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|w
init|=
operator|new
name|IndexWriter
argument_list|(
name|targetDir
argument_list|,
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|w
operator|.
name|addIndexes
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|w
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|targetDir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|testSearchOldIndex
specifier|public
name|void
name|testSearchOldIndex
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|String
name|name
range|:
name|oldNames
control|)
block|{
name|searchIndex
argument_list|(
name|oldIndexDirs
operator|.
name|get
argument_list|(
name|name
argument_list|)
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testIndexOldIndexNoAdds
specifier|public
name|void
name|testIndexOldIndexNoAdds
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|String
name|name
range|:
name|oldNames
control|)
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|(
name|oldIndexDirs
operator|.
name|get
argument_list|(
name|name
argument_list|)
argument_list|)
decl_stmt|;
name|changeIndexNoAdds
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|)
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|testIndexOldIndex
specifier|public
name|void
name|testIndexOldIndex
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|String
name|name
range|:
name|oldNames
control|)
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TEST: oldName="
operator|+
name|name
argument_list|)
expr_stmt|;
block|}
name|Directory
name|dir
init|=
name|newDirectory
argument_list|(
name|oldIndexDirs
operator|.
name|get
argument_list|(
name|name
argument_list|)
argument_list|)
decl_stmt|;
name|changeIndexWithAdds
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|doTestHits
specifier|private
name|void
name|doTestHits
parameter_list|(
name|ScoreDoc
index|[]
name|hits
parameter_list|,
name|int
name|expectedCount
parameter_list|,
name|IndexReader
name|reader
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|int
name|hitCount
init|=
name|hits
operator|.
name|length
decl_stmt|;
name|assertEquals
argument_list|(
literal|"wrong number of hits"
argument_list|,
name|expectedCount
argument_list|,
name|hitCount
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|hitCount
condition|;
name|i
operator|++
control|)
block|{
name|reader
operator|.
name|document
argument_list|(
name|hits
index|[
name|i
index|]
operator|.
name|doc
argument_list|)
expr_stmt|;
name|reader
operator|.
name|getTermVectors
argument_list|(
name|hits
index|[
name|i
index|]
operator|.
name|doc
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|searchIndex
specifier|public
name|void
name|searchIndex
parameter_list|(
name|Directory
name|dir
parameter_list|,
name|String
name|oldName
parameter_list|)
throws|throws
name|IOException
block|{
comment|//QueryParser parser = new QueryParser("contents", new MockAnalyzer(random));
comment|//Query query = parser.parse("handle:1");
name|IndexReader
name|reader
init|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|dir
argument_list|)
decl_stmt|;
name|IndexSearcher
name|searcher
init|=
name|newSearcher
argument_list|(
name|reader
argument_list|)
decl_stmt|;
name|TestUtil
operator|.
name|checkIndex
argument_list|(
name|dir
argument_list|)
expr_stmt|;
comment|// true if this is a 4.0+ index
specifier|final
name|boolean
name|is40Index
init|=
name|MultiFields
operator|.
name|getMergedFieldInfos
argument_list|(
name|reader
argument_list|)
operator|.
name|fieldInfo
argument_list|(
literal|"content5"
argument_list|)
operator|!=
literal|null
decl_stmt|;
comment|// true if this is a 4.2+ index
specifier|final
name|boolean
name|is42Index
init|=
name|MultiFields
operator|.
name|getMergedFieldInfos
argument_list|(
name|reader
argument_list|)
operator|.
name|fieldInfo
argument_list|(
literal|"dvSortedSet"
argument_list|)
operator|!=
literal|null
decl_stmt|;
assert|assert
name|is40Index
assert|;
comment|// NOTE: currently we can only do this on trunk!
specifier|final
name|Bits
name|liveDocs
init|=
name|MultiFields
operator|.
name|getLiveDocs
argument_list|(
name|reader
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|35
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|liveDocs
operator|.
name|get
argument_list|(
name|i
argument_list|)
condition|)
block|{
name|StoredDocument
name|d
init|=
name|reader
operator|.
name|document
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|StorableField
argument_list|>
name|fields
init|=
name|d
operator|.
name|getFields
argument_list|()
decl_stmt|;
name|boolean
name|isProxDoc
init|=
name|d
operator|.
name|getField
argument_list|(
literal|"content3"
argument_list|)
operator|==
literal|null
decl_stmt|;
if|if
condition|(
name|isProxDoc
condition|)
block|{
specifier|final
name|int
name|numFields
init|=
name|is40Index
condition|?
literal|7
else|:
literal|5
decl_stmt|;
name|assertEquals
argument_list|(
name|numFields
argument_list|,
name|fields
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|StorableField
name|f
init|=
name|d
operator|.
name|getField
argument_list|(
literal|"id"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|""
operator|+
name|i
argument_list|,
name|f
operator|.
name|stringValue
argument_list|()
argument_list|)
expr_stmt|;
name|f
operator|=
name|d
operator|.
name|getField
argument_list|(
literal|"utf8"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Lu\uD834\uDD1Ece\uD834\uDD60ne \u0000 \u2620 ab\ud917\udc17cd"
argument_list|,
name|f
operator|.
name|stringValue
argument_list|()
argument_list|)
expr_stmt|;
name|f
operator|=
name|d
operator|.
name|getField
argument_list|(
literal|"autf8"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Lu\uD834\uDD1Ece\uD834\uDD60ne \u0000 \u2620 ab\ud917\udc17cd"
argument_list|,
name|f
operator|.
name|stringValue
argument_list|()
argument_list|)
expr_stmt|;
name|f
operator|=
name|d
operator|.
name|getField
argument_list|(
literal|"content2"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"here is more content with aaa aaa aaa"
argument_list|,
name|f
operator|.
name|stringValue
argument_list|()
argument_list|)
expr_stmt|;
name|f
operator|=
name|d
operator|.
name|getField
argument_list|(
literal|"fie\u2C77ld"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"field with non-ascii name"
argument_list|,
name|f
operator|.
name|stringValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Fields
name|tfvFields
init|=
name|reader
operator|.
name|getTermVectors
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"i="
operator|+
name|i
argument_list|,
name|tfvFields
argument_list|)
expr_stmt|;
name|Terms
name|tfv
init|=
name|tfvFields
operator|.
name|terms
argument_list|(
literal|"utf8"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"docID="
operator|+
name|i
operator|+
literal|" index="
operator|+
name|oldName
argument_list|,
name|tfv
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Only ID 7 is deleted
name|assertEquals
argument_list|(
literal|7
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|is40Index
condition|)
block|{
comment|// check docvalues fields
name|NumericDocValues
name|dvByte
init|=
name|MultiDocValues
operator|.
name|getNumericValues
argument_list|(
name|reader
argument_list|,
literal|"dvByte"
argument_list|)
decl_stmt|;
name|BinaryDocValues
name|dvBytesDerefFixed
init|=
name|MultiDocValues
operator|.
name|getBinaryValues
argument_list|(
name|reader
argument_list|,
literal|"dvBytesDerefFixed"
argument_list|)
decl_stmt|;
name|BinaryDocValues
name|dvBytesDerefVar
init|=
name|MultiDocValues
operator|.
name|getBinaryValues
argument_list|(
name|reader
argument_list|,
literal|"dvBytesDerefVar"
argument_list|)
decl_stmt|;
name|SortedDocValues
name|dvBytesSortedFixed
init|=
name|MultiDocValues
operator|.
name|getSortedValues
argument_list|(
name|reader
argument_list|,
literal|"dvBytesSortedFixed"
argument_list|)
decl_stmt|;
name|SortedDocValues
name|dvBytesSortedVar
init|=
name|MultiDocValues
operator|.
name|getSortedValues
argument_list|(
name|reader
argument_list|,
literal|"dvBytesSortedVar"
argument_list|)
decl_stmt|;
name|BinaryDocValues
name|dvBytesStraightFixed
init|=
name|MultiDocValues
operator|.
name|getBinaryValues
argument_list|(
name|reader
argument_list|,
literal|"dvBytesStraightFixed"
argument_list|)
decl_stmt|;
name|BinaryDocValues
name|dvBytesStraightVar
init|=
name|MultiDocValues
operator|.
name|getBinaryValues
argument_list|(
name|reader
argument_list|,
literal|"dvBytesStraightVar"
argument_list|)
decl_stmt|;
name|NumericDocValues
name|dvDouble
init|=
name|MultiDocValues
operator|.
name|getNumericValues
argument_list|(
name|reader
argument_list|,
literal|"dvDouble"
argument_list|)
decl_stmt|;
name|NumericDocValues
name|dvFloat
init|=
name|MultiDocValues
operator|.
name|getNumericValues
argument_list|(
name|reader
argument_list|,
literal|"dvFloat"
argument_list|)
decl_stmt|;
name|NumericDocValues
name|dvInt
init|=
name|MultiDocValues
operator|.
name|getNumericValues
argument_list|(
name|reader
argument_list|,
literal|"dvInt"
argument_list|)
decl_stmt|;
name|NumericDocValues
name|dvLong
init|=
name|MultiDocValues
operator|.
name|getNumericValues
argument_list|(
name|reader
argument_list|,
literal|"dvLong"
argument_list|)
decl_stmt|;
name|NumericDocValues
name|dvPacked
init|=
name|MultiDocValues
operator|.
name|getNumericValues
argument_list|(
name|reader
argument_list|,
literal|"dvPacked"
argument_list|)
decl_stmt|;
name|NumericDocValues
name|dvShort
init|=
name|MultiDocValues
operator|.
name|getNumericValues
argument_list|(
name|reader
argument_list|,
literal|"dvShort"
argument_list|)
decl_stmt|;
name|SortedSetDocValues
name|dvSortedSet
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|is42Index
condition|)
block|{
name|dvSortedSet
operator|=
name|MultiDocValues
operator|.
name|getSortedSetValues
argument_list|(
name|reader
argument_list|,
literal|"dvSortedSet"
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|35
condition|;
name|i
operator|++
control|)
block|{
name|int
name|id
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|reader
operator|.
name|document
argument_list|(
name|i
argument_list|)
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|id
argument_list|,
name|dvByte
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|byte
name|bytes
index|[]
init|=
operator|new
name|byte
index|[]
block|{
call|(
name|byte
call|)
argument_list|(
name|id
operator|>>>
literal|24
argument_list|)
block|,
call|(
name|byte
call|)
argument_list|(
name|id
operator|>>>
literal|16
argument_list|)
block|,
call|(
name|byte
call|)
argument_list|(
name|id
operator|>>>
literal|8
argument_list|)
block|,
operator|(
name|byte
operator|)
name|id
block|}
decl_stmt|;
name|BytesRef
name|expectedRef
init|=
operator|new
name|BytesRef
argument_list|(
name|bytes
argument_list|)
decl_stmt|;
name|BytesRef
name|scratch
init|=
operator|new
name|BytesRef
argument_list|()
decl_stmt|;
name|dvBytesDerefFixed
operator|.
name|get
argument_list|(
name|i
argument_list|,
name|scratch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedRef
argument_list|,
name|scratch
argument_list|)
expr_stmt|;
name|dvBytesDerefVar
operator|.
name|get
argument_list|(
name|i
argument_list|,
name|scratch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedRef
argument_list|,
name|scratch
argument_list|)
expr_stmt|;
name|dvBytesSortedFixed
operator|.
name|get
argument_list|(
name|i
argument_list|,
name|scratch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedRef
argument_list|,
name|scratch
argument_list|)
expr_stmt|;
name|dvBytesSortedVar
operator|.
name|get
argument_list|(
name|i
argument_list|,
name|scratch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedRef
argument_list|,
name|scratch
argument_list|)
expr_stmt|;
name|dvBytesStraightFixed
operator|.
name|get
argument_list|(
name|i
argument_list|,
name|scratch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedRef
argument_list|,
name|scratch
argument_list|)
expr_stmt|;
name|dvBytesStraightVar
operator|.
name|get
argument_list|(
name|i
argument_list|,
name|scratch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedRef
argument_list|,
name|scratch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|double
operator|)
name|id
argument_list|,
name|Double
operator|.
name|longBitsToDouble
argument_list|(
name|dvDouble
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|,
literal|0D
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|float
operator|)
name|id
argument_list|,
name|Float
operator|.
name|intBitsToFloat
argument_list|(
operator|(
name|int
operator|)
name|dvFloat
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|,
literal|0F
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|id
argument_list|,
name|dvInt
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|id
argument_list|,
name|dvLong
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|id
argument_list|,
name|dvPacked
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|id
argument_list|,
name|dvShort
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|is42Index
condition|)
block|{
name|dvSortedSet
operator|.
name|setDocument
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|long
name|ord
init|=
name|dvSortedSet
operator|.
name|nextOrd
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|SortedSetDocValues
operator|.
name|NO_MORE_ORDS
argument_list|,
name|dvSortedSet
operator|.
name|nextOrd
argument_list|()
argument_list|)
expr_stmt|;
name|dvSortedSet
operator|.
name|lookupOrd
argument_list|(
name|ord
argument_list|,
name|scratch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedRef
argument_list|,
name|scratch
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|ScoreDoc
index|[]
name|hits
init|=
name|searcher
operator|.
name|search
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
operator|new
name|String
argument_list|(
literal|"content"
argument_list|)
argument_list|,
literal|"aaa"
argument_list|)
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|1000
argument_list|)
operator|.
name|scoreDocs
decl_stmt|;
comment|// First document should be #0
name|StoredDocument
name|d
init|=
name|searcher
operator|.
name|getIndexReader
argument_list|()
operator|.
name|document
argument_list|(
name|hits
index|[
literal|0
index|]
operator|.
name|doc
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"didn't get the right document first"
argument_list|,
literal|"0"
argument_list|,
name|d
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
name|doTestHits
argument_list|(
name|hits
argument_list|,
literal|34
argument_list|,
name|searcher
operator|.
name|getIndexReader
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|is40Index
condition|)
block|{
name|hits
operator|=
name|searcher
operator|.
name|search
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
operator|new
name|String
argument_list|(
literal|"content5"
argument_list|)
argument_list|,
literal|"aaa"
argument_list|)
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|1000
argument_list|)
operator|.
name|scoreDocs
expr_stmt|;
name|doTestHits
argument_list|(
name|hits
argument_list|,
literal|34
argument_list|,
name|searcher
operator|.
name|getIndexReader
argument_list|()
argument_list|)
expr_stmt|;
name|hits
operator|=
name|searcher
operator|.
name|search
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
operator|new
name|String
argument_list|(
literal|"content6"
argument_list|)
argument_list|,
literal|"aaa"
argument_list|)
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|1000
argument_list|)
operator|.
name|scoreDocs
expr_stmt|;
name|doTestHits
argument_list|(
name|hits
argument_list|,
literal|34
argument_list|,
name|searcher
operator|.
name|getIndexReader
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|hits
operator|=
name|searcher
operator|.
name|search
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"utf8"
argument_list|,
literal|"\u0000"
argument_list|)
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|1000
argument_list|)
operator|.
name|scoreDocs
expr_stmt|;
name|assertEquals
argument_list|(
literal|34
argument_list|,
name|hits
operator|.
name|length
argument_list|)
expr_stmt|;
name|hits
operator|=
name|searcher
operator|.
name|search
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
operator|new
name|String
argument_list|(
literal|"utf8"
argument_list|)
argument_list|,
literal|"lu\uD834\uDD1Ece\uD834\uDD60ne"
argument_list|)
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|1000
argument_list|)
operator|.
name|scoreDocs
expr_stmt|;
name|assertEquals
argument_list|(
literal|34
argument_list|,
name|hits
operator|.
name|length
argument_list|)
expr_stmt|;
name|hits
operator|=
name|searcher
operator|.
name|search
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"utf8"
argument_list|,
literal|"ab\ud917\udc17cd"
argument_list|)
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|1000
argument_list|)
operator|.
name|scoreDocs
expr_stmt|;
name|assertEquals
argument_list|(
literal|34
argument_list|,
name|hits
operator|.
name|length
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|compare
specifier|private
name|int
name|compare
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|v
parameter_list|)
block|{
name|int
name|v0
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|name
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|v1
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|v
argument_list|)
decl_stmt|;
return|return
name|v0
operator|-
name|v1
return|;
block|}
DECL|method|changeIndexWithAdds
specifier|public
name|void
name|changeIndexWithAdds
parameter_list|(
name|Random
name|random
parameter_list|,
name|Directory
name|dir
parameter_list|,
name|String
name|origOldName
parameter_list|)
throws|throws
name|IOException
block|{
comment|// open writer
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|)
argument_list|)
operator|.
name|setOpenMode
argument_list|(
name|OpenMode
operator|.
name|APPEND
argument_list|)
operator|.
name|setMergePolicy
argument_list|(
name|newLogMergePolicy
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
comment|// add 10 docs
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|addDoc
argument_list|(
name|writer
argument_list|,
literal|35
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
comment|// make sure writer sees right total -- writer seems not to know about deletes in .del?
specifier|final
name|int
name|expected
decl_stmt|;
if|if
condition|(
name|compare
argument_list|(
name|origOldName
argument_list|,
literal|"24"
argument_list|)
operator|<
literal|0
condition|)
block|{
name|expected
operator|=
literal|44
expr_stmt|;
block|}
else|else
block|{
name|expected
operator|=
literal|45
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"wrong doc count"
argument_list|,
name|expected
argument_list|,
name|writer
operator|.
name|numDocs
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|shutdown
argument_list|()
expr_stmt|;
comment|// make sure searching sees right # hits
name|IndexReader
name|reader
init|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|dir
argument_list|)
decl_stmt|;
name|IndexSearcher
name|searcher
init|=
name|newSearcher
argument_list|(
name|reader
argument_list|)
decl_stmt|;
name|ScoreDoc
index|[]
name|hits
init|=
name|searcher
operator|.
name|search
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"content"
argument_list|,
literal|"aaa"
argument_list|)
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|1000
argument_list|)
operator|.
name|scoreDocs
decl_stmt|;
name|StoredDocument
name|d
init|=
name|searcher
operator|.
name|getIndexReader
argument_list|()
operator|.
name|document
argument_list|(
name|hits
index|[
literal|0
index|]
operator|.
name|doc
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"wrong first document"
argument_list|,
literal|"0"
argument_list|,
name|d
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
name|doTestHits
argument_list|(
name|hits
argument_list|,
literal|44
argument_list|,
name|searcher
operator|.
name|getIndexReader
argument_list|()
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// fully merge
name|writer
operator|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|)
argument_list|)
operator|.
name|setOpenMode
argument_list|(
name|OpenMode
operator|.
name|APPEND
argument_list|)
operator|.
name|setMergePolicy
argument_list|(
name|newLogMergePolicy
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|forceMerge
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|writer
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|reader
operator|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|searcher
operator|=
name|newSearcher
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|hits
operator|=
name|searcher
operator|.
name|search
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"content"
argument_list|,
literal|"aaa"
argument_list|)
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|1000
argument_list|)
operator|.
name|scoreDocs
expr_stmt|;
name|assertEquals
argument_list|(
literal|"wrong number of hits"
argument_list|,
literal|44
argument_list|,
name|hits
operator|.
name|length
argument_list|)
expr_stmt|;
name|d
operator|=
name|searcher
operator|.
name|doc
argument_list|(
name|hits
index|[
literal|0
index|]
operator|.
name|doc
argument_list|)
expr_stmt|;
name|doTestHits
argument_list|(
name|hits
argument_list|,
literal|44
argument_list|,
name|searcher
operator|.
name|getIndexReader
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"wrong first document"
argument_list|,
literal|"0"
argument_list|,
name|d
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|changeIndexNoAdds
specifier|public
name|void
name|changeIndexNoAdds
parameter_list|(
name|Random
name|random
parameter_list|,
name|Directory
name|dir
parameter_list|)
throws|throws
name|IOException
block|{
comment|// make sure searching sees right # hits
name|DirectoryReader
name|reader
init|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|dir
argument_list|)
decl_stmt|;
name|IndexSearcher
name|searcher
init|=
name|newSearcher
argument_list|(
name|reader
argument_list|)
decl_stmt|;
name|ScoreDoc
index|[]
name|hits
init|=
name|searcher
operator|.
name|search
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"content"
argument_list|,
literal|"aaa"
argument_list|)
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|1000
argument_list|)
operator|.
name|scoreDocs
decl_stmt|;
name|assertEquals
argument_list|(
literal|"wrong number of hits"
argument_list|,
literal|34
argument_list|,
name|hits
operator|.
name|length
argument_list|)
expr_stmt|;
name|StoredDocument
name|d
init|=
name|searcher
operator|.
name|doc
argument_list|(
name|hits
index|[
literal|0
index|]
operator|.
name|doc
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"wrong first document"
argument_list|,
literal|"0"
argument_list|,
name|d
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// fully merge
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|)
argument_list|)
operator|.
name|setOpenMode
argument_list|(
name|OpenMode
operator|.
name|APPEND
argument_list|)
argument_list|)
decl_stmt|;
name|writer
operator|.
name|forceMerge
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|writer
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|reader
operator|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|searcher
operator|=
name|newSearcher
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|hits
operator|=
name|searcher
operator|.
name|search
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"content"
argument_list|,
literal|"aaa"
argument_list|)
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|1000
argument_list|)
operator|.
name|scoreDocs
expr_stmt|;
name|assertEquals
argument_list|(
literal|"wrong number of hits"
argument_list|,
literal|34
argument_list|,
name|hits
operator|.
name|length
argument_list|)
expr_stmt|;
name|doTestHits
argument_list|(
name|hits
argument_list|,
literal|34
argument_list|,
name|searcher
operator|.
name|getIndexReader
argument_list|()
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|createIndex
specifier|public
name|File
name|createIndex
parameter_list|(
name|String
name|dirName
parameter_list|,
name|boolean
name|doCFS
parameter_list|,
name|boolean
name|fullyMerged
parameter_list|)
throws|throws
name|IOException
block|{
comment|// we use a real directory name that is not cleaned up, because this method is only used to create backwards indexes:
name|File
name|indexDir
init|=
operator|new
name|File
argument_list|(
literal|"/tmp/idx"
argument_list|,
name|dirName
argument_list|)
decl_stmt|;
name|TestUtil
operator|.
name|rm
argument_list|(
name|indexDir
argument_list|)
expr_stmt|;
name|Directory
name|dir
init|=
name|newFSDirectory
argument_list|(
name|indexDir
argument_list|)
decl_stmt|;
name|LogByteSizeMergePolicy
name|mp
init|=
operator|new
name|LogByteSizeMergePolicy
argument_list|()
decl_stmt|;
name|mp
operator|.
name|setNoCFSRatio
argument_list|(
name|doCFS
condition|?
literal|1.0
else|:
literal|0.0
argument_list|)
expr_stmt|;
name|mp
operator|.
name|setMaxCFSSegmentSizeMB
argument_list|(
name|Double
operator|.
name|POSITIVE_INFINITY
argument_list|)
expr_stmt|;
comment|// TODO: remove randomness
name|IndexWriterConfig
name|conf
init|=
operator|new
name|IndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setMaxBufferedDocs
argument_list|(
literal|10
argument_list|)
operator|.
name|setMergePolicy
argument_list|(
name|mp
argument_list|)
decl_stmt|;
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|conf
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|35
condition|;
name|i
operator|++
control|)
block|{
name|addDoc
argument_list|(
name|writer
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"wrong doc count"
argument_list|,
literal|35
argument_list|,
name|writer
operator|.
name|maxDoc
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|fullyMerged
condition|)
block|{
name|writer
operator|.
name|forceMerge
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|shutdown
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|fullyMerged
condition|)
block|{
comment|// open fresh writer so we get no prx file in the added segment
name|mp
operator|=
operator|new
name|LogByteSizeMergePolicy
argument_list|()
expr_stmt|;
name|mp
operator|.
name|setNoCFSRatio
argument_list|(
name|doCFS
condition|?
literal|1.0
else|:
literal|0.0
argument_list|)
expr_stmt|;
comment|// TODO: remove randomness
name|conf
operator|=
operator|new
name|IndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setMaxBufferedDocs
argument_list|(
literal|10
argument_list|)
operator|.
name|setMergePolicy
argument_list|(
name|mp
argument_list|)
expr_stmt|;
name|writer
operator|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|addNoProxDoc
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|writer
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|writer
operator|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|conf
operator|.
name|setMergePolicy
argument_list|(
name|NoMergePolicy
operator|.
name|INSTANCE
argument_list|)
argument_list|)
expr_stmt|;
name|Term
name|searchTerm
init|=
operator|new
name|Term
argument_list|(
literal|"id"
argument_list|,
literal|"7"
argument_list|)
decl_stmt|;
name|writer
operator|.
name|deleteDocuments
argument_list|(
name|searchTerm
argument_list|)
expr_stmt|;
name|writer
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|indexDir
return|;
block|}
DECL|method|addDoc
specifier|private
name|void
name|addDoc
parameter_list|(
name|IndexWriter
name|writer
parameter_list|,
name|int
name|id
parameter_list|)
throws|throws
name|IOException
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
literal|"content"
argument_list|,
literal|"aaa"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|StringField
argument_list|(
literal|"id"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|id
argument_list|)
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|)
argument_list|)
expr_stmt|;
name|FieldType
name|customType2
init|=
operator|new
name|FieldType
argument_list|(
name|TextField
operator|.
name|TYPE_STORED
argument_list|)
decl_stmt|;
name|customType2
operator|.
name|setStoreTermVectors
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|customType2
operator|.
name|setStoreTermVectorPositions
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|customType2
operator|.
name|setStoreTermVectorOffsets
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"autf8"
argument_list|,
literal|"Lu\uD834\uDD1Ece\uD834\uDD60ne \u0000 \u2620 ab\ud917\udc17cd"
argument_list|,
name|customType2
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"utf8"
argument_list|,
literal|"Lu\uD834\uDD1Ece\uD834\uDD60ne \u0000 \u2620 ab\ud917\udc17cd"
argument_list|,
name|customType2
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"content2"
argument_list|,
literal|"here is more content with aaa aaa aaa"
argument_list|,
name|customType2
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"fie\u2C77ld"
argument_list|,
literal|"field with non-ascii name"
argument_list|,
name|customType2
argument_list|)
argument_list|)
expr_stmt|;
comment|// add numeric fields, to test if flex preserves encoding
name|doc
operator|.
name|add
argument_list|(
operator|new
name|IntField
argument_list|(
literal|"trieInt"
argument_list|,
name|id
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|LongField
argument_list|(
literal|"trieLong"
argument_list|,
operator|(
name|long
operator|)
name|id
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
comment|// add docvalues fields
name|doc
operator|.
name|add
argument_list|(
operator|new
name|NumericDocValuesField
argument_list|(
literal|"dvByte"
argument_list|,
operator|(
name|byte
operator|)
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|byte
name|bytes
index|[]
init|=
operator|new
name|byte
index|[]
block|{
call|(
name|byte
call|)
argument_list|(
name|id
operator|>>>
literal|24
argument_list|)
block|,
call|(
name|byte
call|)
argument_list|(
name|id
operator|>>>
literal|16
argument_list|)
block|,
call|(
name|byte
call|)
argument_list|(
name|id
operator|>>>
literal|8
argument_list|)
block|,
operator|(
name|byte
operator|)
name|id
block|}
decl_stmt|;
name|BytesRef
name|ref
init|=
operator|new
name|BytesRef
argument_list|(
name|bytes
argument_list|)
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|BinaryDocValuesField
argument_list|(
literal|"dvBytesDerefFixed"
argument_list|,
name|ref
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|BinaryDocValuesField
argument_list|(
literal|"dvBytesDerefVar"
argument_list|,
name|ref
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|SortedDocValuesField
argument_list|(
literal|"dvBytesSortedFixed"
argument_list|,
name|ref
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|SortedDocValuesField
argument_list|(
literal|"dvBytesSortedVar"
argument_list|,
name|ref
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|BinaryDocValuesField
argument_list|(
literal|"dvBytesStraightFixed"
argument_list|,
name|ref
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|BinaryDocValuesField
argument_list|(
literal|"dvBytesStraightVar"
argument_list|,
name|ref
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|DoubleDocValuesField
argument_list|(
literal|"dvDouble"
argument_list|,
operator|(
name|double
operator|)
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|FloatDocValuesField
argument_list|(
literal|"dvFloat"
argument_list|,
operator|(
name|float
operator|)
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|NumericDocValuesField
argument_list|(
literal|"dvInt"
argument_list|,
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|NumericDocValuesField
argument_list|(
literal|"dvLong"
argument_list|,
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|NumericDocValuesField
argument_list|(
literal|"dvPacked"
argument_list|,
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|NumericDocValuesField
argument_list|(
literal|"dvShort"
argument_list|,
operator|(
name|short
operator|)
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|SortedSetDocValuesField
argument_list|(
literal|"dvSortedSet"
argument_list|,
name|ref
argument_list|)
argument_list|)
expr_stmt|;
comment|// a field with both offsets and term vectors for a cross-check
name|FieldType
name|customType3
init|=
operator|new
name|FieldType
argument_list|(
name|TextField
operator|.
name|TYPE_STORED
argument_list|)
decl_stmt|;
name|customType3
operator|.
name|setStoreTermVectors
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|customType3
operator|.
name|setStoreTermVectorPositions
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|customType3
operator|.
name|setStoreTermVectorOffsets
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|customType3
operator|.
name|setIndexOptions
argument_list|(
name|IndexOptions
operator|.
name|DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"content5"
argument_list|,
literal|"here is more content with aaa aaa aaa"
argument_list|,
name|customType3
argument_list|)
argument_list|)
expr_stmt|;
comment|// a field that omits only positions
name|FieldType
name|customType4
init|=
operator|new
name|FieldType
argument_list|(
name|TextField
operator|.
name|TYPE_STORED
argument_list|)
decl_stmt|;
name|customType4
operator|.
name|setStoreTermVectors
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|customType4
operator|.
name|setStoreTermVectorPositions
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|customType4
operator|.
name|setStoreTermVectorOffsets
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|customType4
operator|.
name|setIndexOptions
argument_list|(
name|IndexOptions
operator|.
name|DOCS_AND_FREQS
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"content6"
argument_list|,
literal|"here is more content with aaa aaa aaa"
argument_list|,
name|customType4
argument_list|)
argument_list|)
expr_stmt|;
comment|// TODO:
comment|//   index different norms types via similarity (we use a random one currently?!)
comment|//   remove any analyzer randomness, explicitly add payloads for certain fields.
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
DECL|method|addNoProxDoc
specifier|private
name|void
name|addNoProxDoc
parameter_list|(
name|IndexWriter
name|writer
parameter_list|)
throws|throws
name|IOException
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|FieldType
name|customType
init|=
operator|new
name|FieldType
argument_list|(
name|TextField
operator|.
name|TYPE_STORED
argument_list|)
decl_stmt|;
name|customType
operator|.
name|setIndexOptions
argument_list|(
name|IndexOptions
operator|.
name|DOCS_ONLY
argument_list|)
expr_stmt|;
name|Field
name|f
init|=
operator|new
name|Field
argument_list|(
literal|"content3"
argument_list|,
literal|"aaa"
argument_list|,
name|customType
argument_list|)
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|FieldType
name|customType2
init|=
operator|new
name|FieldType
argument_list|()
decl_stmt|;
name|customType2
operator|.
name|setStored
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|customType2
operator|.
name|setIndexOptions
argument_list|(
name|IndexOptions
operator|.
name|DOCS_ONLY
argument_list|)
expr_stmt|;
name|f
operator|=
operator|new
name|Field
argument_list|(
literal|"content4"
argument_list|,
literal|"aaa"
argument_list|,
name|customType2
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
DECL|method|countDocs
specifier|private
name|int
name|countDocs
parameter_list|(
name|DocsEnum
name|docs
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|(
name|docs
operator|.
name|nextDoc
argument_list|()
operator|)
operator|!=
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
condition|)
block|{
name|count
operator|++
expr_stmt|;
block|}
return|return
name|count
return|;
block|}
comment|// flex: test basics of TermsEnum api on non-flex index
DECL|method|testNextIntoWrongField
specifier|public
name|void
name|testNextIntoWrongField
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|String
name|name
range|:
name|oldNames
control|)
block|{
name|Directory
name|dir
init|=
name|oldIndexDirs
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|IndexReader
name|r
init|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|dir
argument_list|)
decl_stmt|;
name|TermsEnum
name|terms
init|=
name|MultiFields
operator|.
name|getFields
argument_list|(
name|r
argument_list|)
operator|.
name|terms
argument_list|(
literal|"content"
argument_list|)
operator|.
name|iterator
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|BytesRef
name|t
init|=
name|terms
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|t
argument_list|)
expr_stmt|;
comment|// content field only has term aaa:
name|assertEquals
argument_list|(
literal|"aaa"
argument_list|,
name|t
operator|.
name|utf8ToString
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|terms
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|BytesRef
name|aaaTerm
init|=
operator|new
name|BytesRef
argument_list|(
literal|"aaa"
argument_list|)
decl_stmt|;
comment|// should be found exactly
name|assertEquals
argument_list|(
name|TermsEnum
operator|.
name|SeekStatus
operator|.
name|FOUND
argument_list|,
name|terms
operator|.
name|seekCeil
argument_list|(
name|aaaTerm
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|35
argument_list|,
name|countDocs
argument_list|(
name|TestUtil
operator|.
name|docs
argument_list|(
name|random
argument_list|()
argument_list|,
name|terms
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|DocsEnum
operator|.
name|FLAG_NONE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|terms
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
comment|// should hit end of field
name|assertEquals
argument_list|(
name|TermsEnum
operator|.
name|SeekStatus
operator|.
name|END
argument_list|,
name|terms
operator|.
name|seekCeil
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"bbb"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|terms
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
comment|// should seek to aaa
name|assertEquals
argument_list|(
name|TermsEnum
operator|.
name|SeekStatus
operator|.
name|NOT_FOUND
argument_list|,
name|terms
operator|.
name|seekCeil
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"a"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|terms
operator|.
name|term
argument_list|()
operator|.
name|bytesEquals
argument_list|(
name|aaaTerm
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|35
argument_list|,
name|countDocs
argument_list|(
name|TestUtil
operator|.
name|docs
argument_list|(
name|random
argument_list|()
argument_list|,
name|terms
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|DocsEnum
operator|.
name|FLAG_NONE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|terms
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TermsEnum
operator|.
name|SeekStatus
operator|.
name|FOUND
argument_list|,
name|terms
operator|.
name|seekCeil
argument_list|(
name|aaaTerm
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|35
argument_list|,
name|countDocs
argument_list|(
name|TestUtil
operator|.
name|docs
argument_list|(
name|random
argument_list|()
argument_list|,
name|terms
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|DocsEnum
operator|.
name|FLAG_NONE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|terms
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**     * Test that we didn't forget to bump the current Constants.LUCENE_MAIN_VERSION.    * This is important so that we can determine which version of lucene wrote the segment.    */
DECL|method|testOldVersions
specifier|public
name|void
name|testOldVersions
parameter_list|()
throws|throws
name|Exception
block|{
comment|// first create a little index with the current code and get the version
name|Directory
name|currentDir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|RandomIndexWriter
name|riw
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|currentDir
argument_list|)
decl_stmt|;
name|riw
operator|.
name|addDocument
argument_list|(
operator|new
name|Document
argument_list|()
argument_list|)
expr_stmt|;
name|riw
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|DirectoryReader
name|ir
init|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|currentDir
argument_list|)
decl_stmt|;
name|SegmentReader
name|air
init|=
operator|(
name|SegmentReader
operator|)
name|ir
operator|.
name|leaves
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|reader
argument_list|()
decl_stmt|;
name|String
name|currentVersion
init|=
name|air
operator|.
name|getSegmentInfo
argument_list|()
operator|.
name|info
operator|.
name|getVersion
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|currentVersion
argument_list|)
expr_stmt|;
comment|// only 3.0 segments can have a null version
name|ir
operator|.
name|close
argument_list|()
expr_stmt|;
name|currentDir
operator|.
name|close
argument_list|()
expr_stmt|;
name|Comparator
argument_list|<
name|String
argument_list|>
name|comparator
init|=
name|StringHelper
operator|.
name|getVersionComparator
argument_list|()
decl_stmt|;
comment|// now check all the old indexes, their version should be< the current version
for|for
control|(
name|String
name|name
range|:
name|oldNames
control|)
block|{
name|Directory
name|dir
init|=
name|oldIndexDirs
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|DirectoryReader
name|r
init|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|dir
argument_list|)
decl_stmt|;
for|for
control|(
name|AtomicReaderContext
name|context
range|:
name|r
operator|.
name|leaves
argument_list|()
control|)
block|{
name|air
operator|=
operator|(
name|SegmentReader
operator|)
name|context
operator|.
name|reader
argument_list|()
expr_stmt|;
name|String
name|oldVersion
init|=
name|air
operator|.
name|getSegmentInfo
argument_list|()
operator|.
name|info
operator|.
name|getVersion
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|oldVersion
argument_list|)
expr_stmt|;
comment|// only 3.0 segments can have a null version
name|assertTrue
argument_list|(
literal|"current Constants.LUCENE_MAIN_VERSION is<= an old index: did you forget to bump it?!"
argument_list|,
name|comparator
operator|.
name|compare
argument_list|(
name|oldVersion
argument_list|,
name|currentVersion
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
block|}
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|testNumericFields
specifier|public
name|void
name|testNumericFields
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|String
name|name
range|:
name|oldNames
control|)
block|{
name|Directory
name|dir
init|=
name|oldIndexDirs
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|IndexReader
name|reader
init|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|dir
argument_list|)
decl_stmt|;
name|IndexSearcher
name|searcher
init|=
name|newSearcher
argument_list|(
name|reader
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|id
init|=
literal|10
init|;
name|id
operator|<
literal|15
condition|;
name|id
operator|++
control|)
block|{
name|ScoreDoc
index|[]
name|hits
init|=
name|searcher
operator|.
name|search
argument_list|(
name|NumericRangeQuery
operator|.
name|newIntRange
argument_list|(
literal|"trieInt"
argument_list|,
literal|4
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|id
argument_list|)
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|id
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|,
literal|100
argument_list|)
operator|.
name|scoreDocs
decl_stmt|;
name|assertEquals
argument_list|(
literal|"wrong number of hits"
argument_list|,
literal|1
argument_list|,
name|hits
operator|.
name|length
argument_list|)
expr_stmt|;
name|StoredDocument
name|d
init|=
name|searcher
operator|.
name|doc
argument_list|(
name|hits
index|[
literal|0
index|]
operator|.
name|doc
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|id
argument_list|)
argument_list|,
name|d
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
name|hits
operator|=
name|searcher
operator|.
name|search
argument_list|(
name|NumericRangeQuery
operator|.
name|newLongRange
argument_list|(
literal|"trieLong"
argument_list|,
literal|4
argument_list|,
name|Long
operator|.
name|valueOf
argument_list|(
name|id
argument_list|)
argument_list|,
name|Long
operator|.
name|valueOf
argument_list|(
name|id
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|,
literal|100
argument_list|)
operator|.
name|scoreDocs
expr_stmt|;
name|assertEquals
argument_list|(
literal|"wrong number of hits"
argument_list|,
literal|1
argument_list|,
name|hits
operator|.
name|length
argument_list|)
expr_stmt|;
name|d
operator|=
name|searcher
operator|.
name|doc
argument_list|(
name|hits
index|[
literal|0
index|]
operator|.
name|doc
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|id
argument_list|)
argument_list|,
name|d
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// check that also lower-precision fields are ok
name|ScoreDoc
index|[]
name|hits
init|=
name|searcher
operator|.
name|search
argument_list|(
name|NumericRangeQuery
operator|.
name|newIntRange
argument_list|(
literal|"trieInt"
argument_list|,
literal|4
argument_list|,
name|Integer
operator|.
name|MIN_VALUE
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
argument_list|,
literal|100
argument_list|)
operator|.
name|scoreDocs
decl_stmt|;
name|assertEquals
argument_list|(
literal|"wrong number of hits"
argument_list|,
literal|34
argument_list|,
name|hits
operator|.
name|length
argument_list|)
expr_stmt|;
name|hits
operator|=
name|searcher
operator|.
name|search
argument_list|(
name|NumericRangeQuery
operator|.
name|newLongRange
argument_list|(
literal|"trieLong"
argument_list|,
literal|4
argument_list|,
name|Long
operator|.
name|MIN_VALUE
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
argument_list|,
literal|100
argument_list|)
operator|.
name|scoreDocs
expr_stmt|;
name|assertEquals
argument_list|(
literal|"wrong number of hits"
argument_list|,
literal|34
argument_list|,
name|hits
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// check decoding of terms
name|Terms
name|terms
init|=
name|MultiFields
operator|.
name|getTerms
argument_list|(
name|searcher
operator|.
name|getIndexReader
argument_list|()
argument_list|,
literal|"trieInt"
argument_list|)
decl_stmt|;
name|TermsEnum
name|termsEnum
init|=
name|NumericUtils
operator|.
name|filterPrefixCodedInts
argument_list|(
name|terms
operator|.
name|iterator
argument_list|(
literal|null
argument_list|)
argument_list|)
decl_stmt|;
while|while
condition|(
name|termsEnum
operator|.
name|next
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|int
name|val
init|=
name|NumericUtils
operator|.
name|prefixCodedToInt
argument_list|(
name|termsEnum
operator|.
name|term
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"value in id bounds"
argument_list|,
name|val
operator|>=
literal|0
operator|&&
name|val
operator|<
literal|35
argument_list|)
expr_stmt|;
block|}
name|terms
operator|=
name|MultiFields
operator|.
name|getTerms
argument_list|(
name|searcher
operator|.
name|getIndexReader
argument_list|()
argument_list|,
literal|"trieLong"
argument_list|)
expr_stmt|;
name|termsEnum
operator|=
name|NumericUtils
operator|.
name|filterPrefixCodedLongs
argument_list|(
name|terms
operator|.
name|iterator
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
while|while
condition|(
name|termsEnum
operator|.
name|next
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|long
name|val
init|=
name|NumericUtils
operator|.
name|prefixCodedToLong
argument_list|(
name|termsEnum
operator|.
name|term
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"value in id bounds"
argument_list|,
name|val
operator|>=
literal|0L
operator|&&
name|val
operator|<
literal|35L
argument_list|)
expr_stmt|;
block|}
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|checkAllSegmentsUpgraded
specifier|private
name|int
name|checkAllSegmentsUpgraded
parameter_list|(
name|Directory
name|dir
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|SegmentInfos
name|infos
init|=
operator|new
name|SegmentInfos
argument_list|()
decl_stmt|;
name|infos
operator|.
name|read
argument_list|(
name|dir
argument_list|)
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"checkAllSegmentsUpgraded: "
operator|+
name|infos
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|SegmentCommitInfo
name|si
range|:
name|infos
control|)
block|{
name|assertEquals
argument_list|(
name|Constants
operator|.
name|LUCENE_MAIN_VERSION
argument_list|,
name|si
operator|.
name|info
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|infos
operator|.
name|size
argument_list|()
return|;
block|}
DECL|method|getNumberOfSegments
specifier|private
name|int
name|getNumberOfSegments
parameter_list|(
name|Directory
name|dir
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|SegmentInfos
name|infos
init|=
operator|new
name|SegmentInfos
argument_list|()
decl_stmt|;
name|infos
operator|.
name|read
argument_list|(
name|dir
argument_list|)
expr_stmt|;
return|return
name|infos
operator|.
name|size
argument_list|()
return|;
block|}
DECL|method|testUpgradeOldIndex
specifier|public
name|void
name|testUpgradeOldIndex
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|names
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|oldNames
operator|.
name|length
operator|+
name|oldSingleSegmentNames
operator|.
name|length
argument_list|)
decl_stmt|;
name|names
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|oldNames
argument_list|)
argument_list|)
expr_stmt|;
name|names
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|oldSingleSegmentNames
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|name
range|:
name|names
control|)
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testUpgradeOldIndex: index="
operator|+
name|name
argument_list|)
expr_stmt|;
block|}
name|Directory
name|dir
init|=
name|newDirectory
argument_list|(
name|oldIndexDirs
operator|.
name|get
argument_list|(
name|name
argument_list|)
argument_list|)
decl_stmt|;
name|newIndexUpgrader
argument_list|(
name|dir
argument_list|)
operator|.
name|upgrade
argument_list|()
expr_stmt|;
name|checkAllSegmentsUpgraded
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|testCommandLineArgs
specifier|public
name|void
name|testCommandLineArgs
parameter_list|()
throws|throws
name|Exception
block|{
name|PrintStream
name|savedSystemOut
init|=
name|System
operator|.
name|out
decl_stmt|;
name|System
operator|.
name|setOut
argument_list|(
operator|new
name|PrintStream
argument_list|(
operator|new
name|ByteArrayOutputStream
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
for|for
control|(
name|String
name|name
range|:
name|oldIndexDirs
operator|.
name|keySet
argument_list|()
control|)
block|{
name|File
name|dir
init|=
name|createTempDir
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|File
name|dataFile
init|=
operator|new
name|File
argument_list|(
name|TestBackwardsCompatibility
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"index."
operator|+
name|name
operator|+
literal|".zip"
argument_list|)
operator|.
name|toURI
argument_list|()
argument_list|)
decl_stmt|;
name|TestUtil
operator|.
name|unzip
argument_list|(
name|dataFile
argument_list|,
name|dir
argument_list|)
expr_stmt|;
name|String
name|path
init|=
name|dir
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|args
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|args
operator|.
name|add
argument_list|(
literal|"-verbose"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|args
operator|.
name|add
argument_list|(
literal|"-delete-prior-commits"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
comment|// TODO: need to better randomize this, but ...
comment|//  - LuceneTestCase.FS_DIRECTORIES is private
comment|//  - newFSDirectory returns BaseDirectoryWrapper
comment|//  - BaseDirectoryWrapper doesn't expose delegate
name|Class
argument_list|<
name|?
extends|extends
name|FSDirectory
argument_list|>
name|dirImpl
init|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
name|SimpleFSDirectory
operator|.
name|class
else|:
name|NIOFSDirectory
operator|.
name|class
decl_stmt|;
name|args
operator|.
name|add
argument_list|(
literal|"-dir-impl"
argument_list|)
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
name|dirImpl
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|args
operator|.
name|add
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|IndexUpgrader
name|upgrader
init|=
literal|null
decl_stmt|;
try|try
block|{
name|upgrader
operator|=
name|IndexUpgrader
operator|.
name|parseArgs
argument_list|(
name|args
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"unable to parse args: "
operator|+
name|args
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|upgrader
operator|.
name|upgrade
argument_list|()
expr_stmt|;
name|Directory
name|upgradedDir
init|=
name|newFSDirectory
argument_list|(
name|dir
argument_list|)
decl_stmt|;
try|try
block|{
name|checkAllSegmentsUpgraded
argument_list|(
name|upgradedDir
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|upgradedDir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|System
operator|.
name|setOut
argument_list|(
name|savedSystemOut
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testUpgradeOldSingleSegmentIndexWithAdditions
specifier|public
name|void
name|testUpgradeOldSingleSegmentIndexWithAdditions
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|String
name|name
range|:
name|oldSingleSegmentNames
control|)
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testUpgradeOldSingleSegmentIndexWithAdditions: index="
operator|+
name|name
argument_list|)
expr_stmt|;
block|}
name|Directory
name|dir
init|=
name|newDirectory
argument_list|(
name|oldIndexDirs
operator|.
name|get
argument_list|(
name|name
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Original index must be single segment"
argument_list|,
literal|1
argument_list|,
name|getNumberOfSegments
argument_list|(
name|dir
argument_list|)
argument_list|)
expr_stmt|;
comment|// create a bunch of dummy segments
name|int
name|id
init|=
literal|40
decl_stmt|;
name|RAMDirectory
name|ramDir
init|=
operator|new
name|RAMDirectory
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
comment|// only use Log- or TieredMergePolicy, to make document addition predictable and not suddenly merge:
name|MergePolicy
name|mp
init|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
name|newLogMergePolicy
argument_list|()
else|:
name|newTieredMergePolicy
argument_list|()
decl_stmt|;
name|IndexWriterConfig
name|iwc
init|=
operator|new
name|IndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setMergePolicy
argument_list|(
name|mp
argument_list|)
decl_stmt|;
name|IndexWriter
name|w
init|=
operator|new
name|IndexWriter
argument_list|(
name|ramDir
argument_list|,
name|iwc
argument_list|)
decl_stmt|;
comment|// add few more docs:
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|RANDOM_MULTIPLIER
operator|*
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|30
argument_list|)
condition|;
name|j
operator|++
control|)
block|{
name|addDoc
argument_list|(
name|w
argument_list|,
name|id
operator|++
argument_list|)
expr_stmt|;
block|}
name|w
operator|.
name|shutdown
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
comment|// add dummy segments (which are all in current
comment|// version) to single segment index
name|MergePolicy
name|mp
init|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
name|newLogMergePolicy
argument_list|()
else|:
name|newTieredMergePolicy
argument_list|()
decl_stmt|;
name|IndexWriterConfig
name|iwc
init|=
operator|new
name|IndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
literal|null
argument_list|)
operator|.
name|setMergePolicy
argument_list|(
name|mp
argument_list|)
decl_stmt|;
name|IndexWriter
name|w
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|iwc
argument_list|)
decl_stmt|;
name|w
operator|.
name|addIndexes
argument_list|(
name|ramDir
argument_list|)
expr_stmt|;
name|w
operator|.
name|shutdown
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// determine count of segments in modified index
specifier|final
name|int
name|origSegCount
init|=
name|getNumberOfSegments
argument_list|(
name|dir
argument_list|)
decl_stmt|;
name|newIndexUpgrader
argument_list|(
name|dir
argument_list|)
operator|.
name|upgrade
argument_list|()
expr_stmt|;
specifier|final
name|int
name|segCount
init|=
name|checkAllSegmentsUpgraded
argument_list|(
name|dir
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Index must still contain the same number of segments, as only one segment was upgraded and nothing else merged"
argument_list|,
name|origSegCount
argument_list|,
name|segCount
argument_list|)
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|field|moreTermsIndex
specifier|public
specifier|static
specifier|final
name|String
name|moreTermsIndex
init|=
literal|"moreterms.40.zip"
decl_stmt|;
DECL|method|testMoreTerms
specifier|public
name|void
name|testMoreTerms
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|oldIndexDir
init|=
name|createTempDir
argument_list|(
literal|"moreterms"
argument_list|)
decl_stmt|;
name|TestUtil
operator|.
name|unzip
argument_list|(
name|getDataFile
argument_list|(
name|moreTermsIndex
argument_list|)
argument_list|,
name|oldIndexDir
argument_list|)
expr_stmt|;
name|Directory
name|dir
init|=
name|newFSDirectory
argument_list|(
name|oldIndexDir
argument_list|)
decl_stmt|;
comment|// TODO: more tests
name|TestUtil
operator|.
name|checkIndex
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|field|dvUpdatesIndex
specifier|public
specifier|static
specifier|final
name|String
name|dvUpdatesIndex
init|=
literal|"dvupdates.48.zip"
decl_stmt|;
DECL|method|assertNumericDocValues
specifier|private
name|void
name|assertNumericDocValues
parameter_list|(
name|AtomicReader
name|r
parameter_list|,
name|String
name|f
parameter_list|,
name|String
name|cf
parameter_list|)
throws|throws
name|IOException
block|{
name|NumericDocValues
name|ndvf
init|=
name|r
operator|.
name|getNumericDocValues
argument_list|(
name|f
argument_list|)
decl_stmt|;
name|NumericDocValues
name|ndvcf
init|=
name|r
operator|.
name|getNumericDocValues
argument_list|(
name|cf
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|r
operator|.
name|maxDoc
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|ndvcf
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|ndvf
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|*
literal|2
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|assertBinaryDocValues
specifier|private
name|void
name|assertBinaryDocValues
parameter_list|(
name|AtomicReader
name|r
parameter_list|,
name|String
name|f
parameter_list|,
name|String
name|cf
parameter_list|)
throws|throws
name|IOException
block|{
name|BinaryDocValues
name|bdvf
init|=
name|r
operator|.
name|getBinaryDocValues
argument_list|(
name|f
argument_list|)
decl_stmt|;
name|BinaryDocValues
name|bdvcf
init|=
name|r
operator|.
name|getBinaryDocValues
argument_list|(
name|cf
argument_list|)
decl_stmt|;
name|BytesRef
name|scratch
init|=
operator|new
name|BytesRef
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|r
operator|.
name|maxDoc
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|TestBinaryDocValuesUpdates
operator|.
name|getValue
argument_list|(
name|bdvcf
argument_list|,
name|i
argument_list|,
name|scratch
argument_list|)
argument_list|,
name|TestBinaryDocValuesUpdates
operator|.
name|getValue
argument_list|(
name|bdvf
argument_list|,
name|i
argument_list|,
name|scratch
argument_list|)
operator|*
literal|2
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|verifyDocValues
specifier|private
name|void
name|verifyDocValues
parameter_list|(
name|Directory
name|dir
parameter_list|)
throws|throws
name|IOException
block|{
name|DirectoryReader
name|reader
init|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|dir
argument_list|)
decl_stmt|;
for|for
control|(
name|AtomicReaderContext
name|context
range|:
name|reader
operator|.
name|leaves
argument_list|()
control|)
block|{
name|AtomicReader
name|r
init|=
name|context
operator|.
name|reader
argument_list|()
decl_stmt|;
name|assertNumericDocValues
argument_list|(
name|r
argument_list|,
literal|"ndv1"
argument_list|,
literal|"ndv1_c"
argument_list|)
expr_stmt|;
name|assertNumericDocValues
argument_list|(
name|r
argument_list|,
literal|"ndv2"
argument_list|,
literal|"ndv2_c"
argument_list|)
expr_stmt|;
name|assertBinaryDocValues
argument_list|(
name|r
argument_list|,
literal|"bdv1"
argument_list|,
literal|"bdv1_c"
argument_list|)
expr_stmt|;
name|assertBinaryDocValues
argument_list|(
name|r
argument_list|,
literal|"bdv2"
argument_list|,
literal|"bdv2_c"
argument_list|)
expr_stmt|;
block|}
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testDocValuesUpdates
specifier|public
name|void
name|testDocValuesUpdates
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|oldIndexDir
init|=
name|createTempDir
argument_list|(
literal|"dvupdates"
argument_list|)
decl_stmt|;
name|TestUtil
operator|.
name|unzip
argument_list|(
name|getDataFile
argument_list|(
name|dvUpdatesIndex
argument_list|)
argument_list|,
name|oldIndexDir
argument_list|)
expr_stmt|;
name|Directory
name|dir
init|=
name|newFSDirectory
argument_list|(
name|oldIndexDir
argument_list|)
decl_stmt|;
name|verifyDocValues
argument_list|(
name|dir
argument_list|)
expr_stmt|;
comment|// update fields and verify index
name|IndexWriterConfig
name|conf
init|=
operator|new
name|IndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|updateNumeric
argument_list|(
name|writer
argument_list|,
literal|"1"
argument_list|,
literal|"ndv1"
argument_list|,
literal|"ndv1_c"
argument_list|,
literal|300L
argument_list|)
expr_stmt|;
name|updateNumeric
argument_list|(
name|writer
argument_list|,
literal|"1"
argument_list|,
literal|"ndv2"
argument_list|,
literal|"ndv2_c"
argument_list|,
literal|300L
argument_list|)
expr_stmt|;
name|updateBinary
argument_list|(
name|writer
argument_list|,
literal|"1"
argument_list|,
literal|"bdv1"
argument_list|,
literal|"bdv1_c"
argument_list|,
literal|300L
argument_list|)
expr_stmt|;
name|updateBinary
argument_list|(
name|writer
argument_list|,
literal|"1"
argument_list|,
literal|"bdv2"
argument_list|,
literal|"bdv2_c"
argument_list|,
literal|300L
argument_list|)
expr_stmt|;
name|writer
operator|.
name|commit
argument_list|()
expr_stmt|;
name|verifyDocValues
argument_list|(
name|dir
argument_list|)
expr_stmt|;
comment|// merge all segments
name|writer
operator|.
name|forceMerge
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|writer
operator|.
name|commit
argument_list|()
expr_stmt|;
name|verifyDocValues
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|writer
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class
end_unit
