begin_unit
begin_package
DECL|package|org.apache.lucene.index
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|MockAnalyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|ByteDocValuesField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|DerefBytesDocValuesField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|DoubleDocValuesField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|FieldType
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|FloatDocValuesField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|IntDocValuesField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|IntField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|LongDocValuesField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|LongField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|PackedLongDocValuesField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|ShortDocValuesField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|SortedBytesDocValuesField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|StraightBytesDocValuesField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|StringField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|TextField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DocValues
operator|.
name|Source
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|FieldInfo
operator|.
name|IndexOptions
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriterConfig
operator|.
name|OpenMode
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|DocIdSetIterator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|FieldCache
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|NumericRangeQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|ScoreDoc
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TermQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|BaseDirectoryWrapper
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|MockDirectoryWrapper
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|RAMDirectory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Bits
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Constants
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|_TestUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
operator|.
name|SuppressCodecs
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import
begin_comment
comment|/*   Verify we can read the pre-5.0 file format, do searches   against it, and add documents to it. */
end_comment
begin_comment
comment|// note: add this if we make a 4.x impersonator
end_comment
begin_comment
comment|// TODO: don't use 4.x codec, its unrealistic since it means
end_comment
begin_comment
comment|// we won't even be running the actual code, only the impostor
end_comment
begin_comment
comment|// @SuppressCodecs("Lucene4x")
end_comment
begin_comment
comment|// Sep codec cannot yet handle the offsets in our 4.x index!
end_comment
begin_class
annotation|@
name|SuppressCodecs
argument_list|(
block|{
literal|"MockFixedIntBlock"
block|,
literal|"MockVariableIntBlock"
block|,
literal|"MockSep"
block|,
literal|"MockRandom"
block|,
literal|"For"
block|,
literal|"PFor"
block|}
argument_list|)
DECL|class|TestBackwardsCompatibility
specifier|public
class|class
name|TestBackwardsCompatibility
extends|extends
name|LuceneTestCase
block|{
comment|// Uncomment these cases& run them on an older Lucene
comment|// version, to generate an index to test backwards
comment|// compatibility.  Then, cd to build/test/index.cfs and
comment|// run "zip index.<VERSION>.cfs.zip *"; cd to
comment|// build/test/index.nocfs and run "zip
comment|// index.<VERSION>.nocfs.zip *".  Then move those 2 zip
comment|// files to your trunk checkout and add them to the
comment|// oldNames array.
comment|/*   public void testCreateCFS() throws IOException {     createIndex("index.cfs", true, false);   }    public void testCreateNoCFS() throws IOException {     createIndex("index.nocfs", false, false);   }   */
comment|/*   // These are only needed for the special upgrade test to verify   // that also single-segment indexes are correctly upgraded by IndexUpgrader.   // You don't need them to be build for non-4.0 (the test is happy with just one   // "old" segment format, version is unimportant:      public void testCreateSingleSegmentCFS() throws IOException {     createIndex("index.singlesegment.cfs", true, true);   }    public void testCreateSingleSegmentNoCFS() throws IOException {     createIndex("index.singlesegment.nocfs", false, true);   }  */
DECL|field|oldNames
specifier|final
specifier|static
name|String
index|[]
name|oldNames
init|=
block|{
literal|"40.cfs"
block|,
literal|"40.nocfs"
block|,   }
decl_stmt|;
DECL|field|unsupportedNames
specifier|final
name|String
index|[]
name|unsupportedNames
init|=
block|{
literal|"19.cfs"
block|,
literal|"19.nocfs"
block|,
literal|"20.cfs"
block|,
literal|"20.nocfs"
block|,
literal|"21.cfs"
block|,
literal|"21.nocfs"
block|,
literal|"22.cfs"
block|,
literal|"22.nocfs"
block|,
literal|"23.cfs"
block|,
literal|"23.nocfs"
block|,
literal|"24.cfs"
block|,
literal|"24.nocfs"
block|,
literal|"29.cfs"
block|,
literal|"29.nocfs"
block|,
literal|"30.cfs"
block|,
literal|"30.nocfs"
block|,
literal|"31.cfs"
block|,
literal|"31.nocfs"
block|,
literal|"32.cfs"
block|,
literal|"32.nocfs"
block|,
literal|"34.cfs"
block|,
literal|"34.nocfs"
block|}
decl_stmt|;
DECL|field|oldSingleSegmentNames
specifier|final
specifier|static
name|String
index|[]
name|oldSingleSegmentNames
init|=
block|{
literal|"40.optimized.cfs"
block|,
literal|"40.optimized.nocfs"
block|,   }
decl_stmt|;
DECL|field|oldIndexDirs
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Directory
argument_list|>
name|oldIndexDirs
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|beforeClass
specifier|public
specifier|static
name|void
name|beforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|names
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|oldNames
operator|.
name|length
operator|+
name|oldSingleSegmentNames
operator|.
name|length
argument_list|)
decl_stmt|;
name|names
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|oldNames
argument_list|)
argument_list|)
expr_stmt|;
name|names
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|oldSingleSegmentNames
argument_list|)
argument_list|)
expr_stmt|;
name|oldIndexDirs
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Directory
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|name
range|:
name|names
control|)
block|{
name|File
name|dir
init|=
name|_TestUtil
operator|.
name|getTempDir
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|File
name|dataFile
init|=
operator|new
name|File
argument_list|(
name|TestBackwardsCompatibility
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"index."
operator|+
name|name
operator|+
literal|".zip"
argument_list|)
operator|.
name|toURI
argument_list|()
argument_list|)
decl_stmt|;
name|_TestUtil
operator|.
name|unzip
argument_list|(
name|dataFile
argument_list|,
name|dir
argument_list|)
expr_stmt|;
name|oldIndexDirs
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|newFSDirectory
argument_list|(
name|dir
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|AfterClass
DECL|method|afterClass
specifier|public
specifier|static
name|void
name|afterClass
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|Directory
name|d
range|:
name|oldIndexDirs
operator|.
name|values
argument_list|()
control|)
block|{
name|d
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|oldIndexDirs
operator|=
literal|null
expr_stmt|;
block|}
comment|/** This test checks that *only* IndexFormatTooOldExceptions are thrown when you open and operate on too old indexes! */
DECL|method|testUnsupportedOldIndexes
specifier|public
name|void
name|testUnsupportedOldIndexes
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|unsupportedNames
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TEST: index "
operator|+
name|unsupportedNames
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|File
name|oldIndxeDir
init|=
name|_TestUtil
operator|.
name|getTempDir
argument_list|(
name|unsupportedNames
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|_TestUtil
operator|.
name|unzip
argument_list|(
name|getDataFile
argument_list|(
literal|"unsupported."
operator|+
name|unsupportedNames
index|[
name|i
index|]
operator|+
literal|".zip"
argument_list|)
argument_list|,
name|oldIndxeDir
argument_list|)
expr_stmt|;
name|BaseDirectoryWrapper
name|dir
init|=
name|newFSDirectory
argument_list|(
name|oldIndxeDir
argument_list|)
decl_stmt|;
comment|// don't checkindex, these are intentionally not supported
name|dir
operator|.
name|setCheckIndexOnClose
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|IndexReader
name|reader
init|=
literal|null
decl_stmt|;
name|IndexWriter
name|writer
init|=
literal|null
decl_stmt|;
try|try
block|{
name|reader
operator|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"DirectoryReader.open should not pass for "
operator|+
name|unsupportedNames
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexFormatTooOldException
name|e
parameter_list|)
block|{
comment|// pass
block|}
finally|finally
block|{
if|if
condition|(
name|reader
operator|!=
literal|null
condition|)
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|reader
operator|=
literal|null
expr_stmt|;
block|}
try|try
block|{
name|writer
operator|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"IndexWriter creation should not pass for "
operator|+
name|unsupportedNames
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexFormatTooOldException
name|e
parameter_list|)
block|{
comment|// pass
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TEST: got expected exc:"
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|(
name|System
operator|.
name|out
argument_list|)
expr_stmt|;
block|}
comment|// Make sure exc message includes a path=
name|assertTrue
argument_list|(
literal|"got exc message: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|"path=\""
argument_list|)
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// we should fail to open IW, and so it should be null when we get here.
comment|// However, if the test fails (i.e., IW did not fail on open), we need
comment|// to close IW. However, if merges are run, IW may throw
comment|// IndexFormatTooOldException, and we don't want to mask the fail()
comment|// above, so close without waiting for merges.
if|if
condition|(
name|writer
operator|!=
literal|null
condition|)
block|{
name|writer
operator|.
name|close
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|writer
operator|=
literal|null
expr_stmt|;
block|}
name|ByteArrayOutputStream
name|bos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|(
literal|1024
argument_list|)
decl_stmt|;
name|CheckIndex
name|checker
init|=
operator|new
name|CheckIndex
argument_list|(
name|dir
argument_list|)
decl_stmt|;
name|checker
operator|.
name|setInfoStream
argument_list|(
operator|new
name|PrintStream
argument_list|(
name|bos
argument_list|,
literal|false
argument_list|,
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
name|CheckIndex
operator|.
name|Status
name|indexStatus
init|=
name|checker
operator|.
name|checkIndex
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|indexStatus
operator|.
name|clean
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bos
operator|.
name|toString
argument_list|(
literal|"UTF-8"
argument_list|)
operator|.
name|contains
argument_list|(
name|IndexFormatTooOldException
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
name|_TestUtil
operator|.
name|rmDir
argument_list|(
name|oldIndxeDir
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testFullyMergeOldIndex
specifier|public
name|void
name|testFullyMergeOldIndex
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|String
name|name
range|:
name|oldNames
control|)
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\nTEST: index="
operator|+
name|name
argument_list|)
expr_stmt|;
block|}
name|Directory
name|dir
init|=
name|newDirectory
argument_list|(
name|oldIndexDirs
operator|.
name|get
argument_list|(
name|name
argument_list|)
argument_list|)
decl_stmt|;
name|IndexWriter
name|w
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|w
operator|.
name|forceMerge
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|testAddOldIndexes
specifier|public
name|void
name|testAddOldIndexes
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|String
name|name
range|:
name|oldNames
control|)
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\nTEST: old index "
operator|+
name|name
argument_list|)
expr_stmt|;
block|}
name|Directory
name|targetDir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|w
init|=
operator|new
name|IndexWriter
argument_list|(
name|targetDir
argument_list|,
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|w
operator|.
name|addIndexes
argument_list|(
name|oldIndexDirs
operator|.
name|get
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\nTEST: done adding indices; now close"
argument_list|)
expr_stmt|;
block|}
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|targetDir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|testAddOldIndexesReader
specifier|public
name|void
name|testAddOldIndexesReader
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|String
name|name
range|:
name|oldNames
control|)
block|{
name|IndexReader
name|reader
init|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|oldIndexDirs
operator|.
name|get
argument_list|(
name|name
argument_list|)
argument_list|)
decl_stmt|;
name|Directory
name|targetDir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|w
init|=
operator|new
name|IndexWriter
argument_list|(
name|targetDir
argument_list|,
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|w
operator|.
name|addIndexes
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|targetDir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|testSearchOldIndex
specifier|public
name|void
name|testSearchOldIndex
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|String
name|name
range|:
name|oldNames
control|)
block|{
name|searchIndex
argument_list|(
name|oldIndexDirs
operator|.
name|get
argument_list|(
name|name
argument_list|)
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testIndexOldIndexNoAdds
specifier|public
name|void
name|testIndexOldIndexNoAdds
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|String
name|name
range|:
name|oldNames
control|)
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|(
name|oldIndexDirs
operator|.
name|get
argument_list|(
name|name
argument_list|)
argument_list|)
decl_stmt|;
name|changeIndexNoAdds
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|)
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|testIndexOldIndex
specifier|public
name|void
name|testIndexOldIndex
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|String
name|name
range|:
name|oldNames
control|)
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TEST: oldName="
operator|+
name|name
argument_list|)
expr_stmt|;
block|}
name|Directory
name|dir
init|=
name|newDirectory
argument_list|(
name|oldIndexDirs
operator|.
name|get
argument_list|(
name|name
argument_list|)
argument_list|)
decl_stmt|;
name|changeIndexWithAdds
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|doTestHits
specifier|private
name|void
name|doTestHits
parameter_list|(
name|ScoreDoc
index|[]
name|hits
parameter_list|,
name|int
name|expectedCount
parameter_list|,
name|IndexReader
name|reader
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|int
name|hitCount
init|=
name|hits
operator|.
name|length
decl_stmt|;
name|assertEquals
argument_list|(
literal|"wrong number of hits"
argument_list|,
name|expectedCount
argument_list|,
name|hitCount
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|hitCount
condition|;
name|i
operator|++
control|)
block|{
name|reader
operator|.
name|document
argument_list|(
name|hits
index|[
name|i
index|]
operator|.
name|doc
argument_list|)
expr_stmt|;
name|reader
operator|.
name|getTermVectors
argument_list|(
name|hits
index|[
name|i
index|]
operator|.
name|doc
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|searchIndex
specifier|public
name|void
name|searchIndex
parameter_list|(
name|Directory
name|dir
parameter_list|,
name|String
name|oldName
parameter_list|)
throws|throws
name|IOException
block|{
comment|//QueryParser parser = new QueryParser("contents", new MockAnalyzer(random));
comment|//Query query = parser.parse("handle:1");
name|IndexReader
name|reader
init|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|dir
argument_list|)
decl_stmt|;
name|IndexSearcher
name|searcher
init|=
operator|new
name|IndexSearcher
argument_list|(
name|reader
argument_list|)
decl_stmt|;
name|_TestUtil
operator|.
name|checkIndex
argument_list|(
name|dir
argument_list|)
expr_stmt|;
comment|// true if this is a 4.0+ index
specifier|final
name|boolean
name|is40Index
init|=
name|MultiFields
operator|.
name|getMergedFieldInfos
argument_list|(
name|reader
argument_list|)
operator|.
name|fieldInfo
argument_list|(
literal|"content5"
argument_list|)
operator|!=
literal|null
decl_stmt|;
assert|assert
name|is40Index
assert|;
comment|// NOTE: currently we can only do this on trunk!
specifier|final
name|Bits
name|liveDocs
init|=
name|MultiFields
operator|.
name|getLiveDocs
argument_list|(
name|reader
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|35
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|liveDocs
operator|.
name|get
argument_list|(
name|i
argument_list|)
condition|)
block|{
name|Document
name|d
init|=
name|reader
operator|.
name|document
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|IndexableField
argument_list|>
name|fields
init|=
name|d
operator|.
name|getFields
argument_list|()
decl_stmt|;
name|boolean
name|isProxDoc
init|=
name|d
operator|.
name|getField
argument_list|(
literal|"content3"
argument_list|)
operator|==
literal|null
decl_stmt|;
if|if
condition|(
name|isProxDoc
condition|)
block|{
specifier|final
name|int
name|numFields
init|=
name|is40Index
condition|?
literal|7
else|:
literal|5
decl_stmt|;
name|assertEquals
argument_list|(
name|numFields
argument_list|,
name|fields
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|IndexableField
name|f
init|=
name|d
operator|.
name|getField
argument_list|(
literal|"id"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|""
operator|+
name|i
argument_list|,
name|f
operator|.
name|stringValue
argument_list|()
argument_list|)
expr_stmt|;
name|f
operator|=
name|d
operator|.
name|getField
argument_list|(
literal|"utf8"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Lu\uD834\uDD1Ece\uD834\uDD60ne \u0000 \u2620 ab\ud917\udc17cd"
argument_list|,
name|f
operator|.
name|stringValue
argument_list|()
argument_list|)
expr_stmt|;
name|f
operator|=
name|d
operator|.
name|getField
argument_list|(
literal|"autf8"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Lu\uD834\uDD1Ece\uD834\uDD60ne \u0000 \u2620 ab\ud917\udc17cd"
argument_list|,
name|f
operator|.
name|stringValue
argument_list|()
argument_list|)
expr_stmt|;
name|f
operator|=
name|d
operator|.
name|getField
argument_list|(
literal|"content2"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"here is more content with aaa aaa aaa"
argument_list|,
name|f
operator|.
name|stringValue
argument_list|()
argument_list|)
expr_stmt|;
name|f
operator|=
name|d
operator|.
name|getField
argument_list|(
literal|"fie\u2C77ld"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"field with non-ascii name"
argument_list|,
name|f
operator|.
name|stringValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Fields
name|tfvFields
init|=
name|reader
operator|.
name|getTermVectors
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"i="
operator|+
name|i
argument_list|,
name|tfvFields
argument_list|)
expr_stmt|;
name|Terms
name|tfv
init|=
name|tfvFields
operator|.
name|terms
argument_list|(
literal|"utf8"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"docID="
operator|+
name|i
operator|+
literal|" index="
operator|+
name|oldName
argument_list|,
name|tfv
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Only ID 7 is deleted
name|assertEquals
argument_list|(
literal|7
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|is40Index
condition|)
block|{
comment|// check docvalues fields
name|Source
name|dvByte
init|=
name|MultiDocValues
operator|.
name|getDocValues
argument_list|(
name|reader
argument_list|,
literal|"dvByte"
argument_list|)
operator|.
name|getSource
argument_list|()
decl_stmt|;
name|Source
name|dvBytesDerefFixed
init|=
name|MultiDocValues
operator|.
name|getDocValues
argument_list|(
name|reader
argument_list|,
literal|"dvBytesDerefFixed"
argument_list|)
operator|.
name|getSource
argument_list|()
decl_stmt|;
name|Source
name|dvBytesDerefVar
init|=
name|MultiDocValues
operator|.
name|getDocValues
argument_list|(
name|reader
argument_list|,
literal|"dvBytesDerefVar"
argument_list|)
operator|.
name|getSource
argument_list|()
decl_stmt|;
name|Source
name|dvBytesSortedFixed
init|=
name|MultiDocValues
operator|.
name|getDocValues
argument_list|(
name|reader
argument_list|,
literal|"dvBytesSortedFixed"
argument_list|)
operator|.
name|getSource
argument_list|()
decl_stmt|;
name|Source
name|dvBytesSortedVar
init|=
name|MultiDocValues
operator|.
name|getDocValues
argument_list|(
name|reader
argument_list|,
literal|"dvBytesSortedVar"
argument_list|)
operator|.
name|getSource
argument_list|()
decl_stmt|;
name|Source
name|dvBytesStraightFixed
init|=
name|MultiDocValues
operator|.
name|getDocValues
argument_list|(
name|reader
argument_list|,
literal|"dvBytesStraightFixed"
argument_list|)
operator|.
name|getSource
argument_list|()
decl_stmt|;
name|Source
name|dvBytesStraightVar
init|=
name|MultiDocValues
operator|.
name|getDocValues
argument_list|(
name|reader
argument_list|,
literal|"dvBytesStraightVar"
argument_list|)
operator|.
name|getSource
argument_list|()
decl_stmt|;
name|Source
name|dvDouble
init|=
name|MultiDocValues
operator|.
name|getDocValues
argument_list|(
name|reader
argument_list|,
literal|"dvDouble"
argument_list|)
operator|.
name|getSource
argument_list|()
decl_stmt|;
name|Source
name|dvFloat
init|=
name|MultiDocValues
operator|.
name|getDocValues
argument_list|(
name|reader
argument_list|,
literal|"dvFloat"
argument_list|)
operator|.
name|getSource
argument_list|()
decl_stmt|;
name|Source
name|dvInt
init|=
name|MultiDocValues
operator|.
name|getDocValues
argument_list|(
name|reader
argument_list|,
literal|"dvInt"
argument_list|)
operator|.
name|getSource
argument_list|()
decl_stmt|;
name|Source
name|dvLong
init|=
name|MultiDocValues
operator|.
name|getDocValues
argument_list|(
name|reader
argument_list|,
literal|"dvLong"
argument_list|)
operator|.
name|getSource
argument_list|()
decl_stmt|;
name|Source
name|dvPacked
init|=
name|MultiDocValues
operator|.
name|getDocValues
argument_list|(
name|reader
argument_list|,
literal|"dvPacked"
argument_list|)
operator|.
name|getSource
argument_list|()
decl_stmt|;
name|Source
name|dvShort
init|=
name|MultiDocValues
operator|.
name|getDocValues
argument_list|(
name|reader
argument_list|,
literal|"dvShort"
argument_list|)
operator|.
name|getSource
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|35
condition|;
name|i
operator|++
control|)
block|{
name|int
name|id
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|reader
operator|.
name|document
argument_list|(
name|i
argument_list|)
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
operator|(
name|byte
operator|)
name|id
argument_list|,
name|dvByte
operator|.
name|getInt
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|byte
name|bytes
index|[]
init|=
operator|new
name|byte
index|[]
block|{
call|(
name|byte
call|)
argument_list|(
name|id
operator|>>>
literal|24
argument_list|)
block|,
call|(
name|byte
call|)
argument_list|(
name|id
operator|>>>
literal|16
argument_list|)
block|,
call|(
name|byte
call|)
argument_list|(
name|id
operator|>>>
literal|8
argument_list|)
block|,
operator|(
name|byte
operator|)
name|id
block|}
decl_stmt|;
name|BytesRef
name|expectedRef
init|=
operator|new
name|BytesRef
argument_list|(
name|bytes
argument_list|)
decl_stmt|;
name|BytesRef
name|scratch
init|=
operator|new
name|BytesRef
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedRef
argument_list|,
name|dvBytesDerefFixed
operator|.
name|getBytes
argument_list|(
name|i
argument_list|,
name|scratch
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedRef
argument_list|,
name|dvBytesDerefVar
operator|.
name|getBytes
argument_list|(
name|i
argument_list|,
name|scratch
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedRef
argument_list|,
name|dvBytesSortedFixed
operator|.
name|getBytes
argument_list|(
name|i
argument_list|,
name|scratch
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedRef
argument_list|,
name|dvBytesSortedVar
operator|.
name|getBytes
argument_list|(
name|i
argument_list|,
name|scratch
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedRef
argument_list|,
name|dvBytesStraightFixed
operator|.
name|getBytes
argument_list|(
name|i
argument_list|,
name|scratch
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedRef
argument_list|,
name|dvBytesStraightVar
operator|.
name|getBytes
argument_list|(
name|i
argument_list|,
name|scratch
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|double
operator|)
name|id
argument_list|,
name|dvDouble
operator|.
name|getFloat
argument_list|(
name|i
argument_list|)
argument_list|,
literal|0D
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|float
operator|)
name|id
argument_list|,
name|dvFloat
operator|.
name|getFloat
argument_list|(
name|i
argument_list|)
argument_list|,
literal|0F
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|id
argument_list|,
name|dvInt
operator|.
name|getInt
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|id
argument_list|,
name|dvLong
operator|.
name|getInt
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|id
argument_list|,
name|dvPacked
operator|.
name|getInt
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|id
argument_list|,
name|dvShort
operator|.
name|getInt
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|ScoreDoc
index|[]
name|hits
init|=
name|searcher
operator|.
name|search
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
operator|new
name|String
argument_list|(
literal|"content"
argument_list|)
argument_list|,
literal|"aaa"
argument_list|)
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|1000
argument_list|)
operator|.
name|scoreDocs
decl_stmt|;
comment|// First document should be #0
name|Document
name|d
init|=
name|searcher
operator|.
name|getIndexReader
argument_list|()
operator|.
name|document
argument_list|(
name|hits
index|[
literal|0
index|]
operator|.
name|doc
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"didn't get the right document first"
argument_list|,
literal|"0"
argument_list|,
name|d
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
name|doTestHits
argument_list|(
name|hits
argument_list|,
literal|34
argument_list|,
name|searcher
operator|.
name|getIndexReader
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|is40Index
condition|)
block|{
name|hits
operator|=
name|searcher
operator|.
name|search
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
operator|new
name|String
argument_list|(
literal|"content5"
argument_list|)
argument_list|,
literal|"aaa"
argument_list|)
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|1000
argument_list|)
operator|.
name|scoreDocs
expr_stmt|;
name|doTestHits
argument_list|(
name|hits
argument_list|,
literal|34
argument_list|,
name|searcher
operator|.
name|getIndexReader
argument_list|()
argument_list|)
expr_stmt|;
name|hits
operator|=
name|searcher
operator|.
name|search
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
operator|new
name|String
argument_list|(
literal|"content6"
argument_list|)
argument_list|,
literal|"aaa"
argument_list|)
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|1000
argument_list|)
operator|.
name|scoreDocs
expr_stmt|;
name|doTestHits
argument_list|(
name|hits
argument_list|,
literal|34
argument_list|,
name|searcher
operator|.
name|getIndexReader
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|hits
operator|=
name|searcher
operator|.
name|search
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"utf8"
argument_list|,
literal|"\u0000"
argument_list|)
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|1000
argument_list|)
operator|.
name|scoreDocs
expr_stmt|;
name|assertEquals
argument_list|(
literal|34
argument_list|,
name|hits
operator|.
name|length
argument_list|)
expr_stmt|;
name|hits
operator|=
name|searcher
operator|.
name|search
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
operator|new
name|String
argument_list|(
literal|"utf8"
argument_list|)
argument_list|,
literal|"lu\uD834\uDD1Ece\uD834\uDD60ne"
argument_list|)
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|1000
argument_list|)
operator|.
name|scoreDocs
expr_stmt|;
name|assertEquals
argument_list|(
literal|34
argument_list|,
name|hits
operator|.
name|length
argument_list|)
expr_stmt|;
name|hits
operator|=
name|searcher
operator|.
name|search
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"utf8"
argument_list|,
literal|"ab\ud917\udc17cd"
argument_list|)
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|1000
argument_list|)
operator|.
name|scoreDocs
expr_stmt|;
name|assertEquals
argument_list|(
literal|34
argument_list|,
name|hits
operator|.
name|length
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|compare
specifier|private
name|int
name|compare
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|v
parameter_list|)
block|{
name|int
name|v0
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|name
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|v1
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|v
argument_list|)
decl_stmt|;
return|return
name|v0
operator|-
name|v1
return|;
block|}
DECL|method|changeIndexWithAdds
specifier|public
name|void
name|changeIndexWithAdds
parameter_list|(
name|Random
name|random
parameter_list|,
name|Directory
name|dir
parameter_list|,
name|String
name|origOldName
parameter_list|)
throws|throws
name|IOException
block|{
comment|// open writer
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|)
argument_list|)
operator|.
name|setOpenMode
argument_list|(
name|OpenMode
operator|.
name|APPEND
argument_list|)
operator|.
name|setMergePolicy
argument_list|(
name|newLogMergePolicy
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
comment|// add 10 docs
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|addDoc
argument_list|(
name|writer
argument_list|,
literal|35
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
comment|// make sure writer sees right total -- writer seems not to know about deletes in .del?
specifier|final
name|int
name|expected
decl_stmt|;
if|if
condition|(
name|compare
argument_list|(
name|origOldName
argument_list|,
literal|"24"
argument_list|)
operator|<
literal|0
condition|)
block|{
name|expected
operator|=
literal|44
expr_stmt|;
block|}
else|else
block|{
name|expected
operator|=
literal|45
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"wrong doc count"
argument_list|,
name|expected
argument_list|,
name|writer
operator|.
name|numDocs
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// make sure searching sees right # hits
name|IndexReader
name|reader
init|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|dir
argument_list|)
decl_stmt|;
name|IndexSearcher
name|searcher
init|=
operator|new
name|IndexSearcher
argument_list|(
name|reader
argument_list|)
decl_stmt|;
name|ScoreDoc
index|[]
name|hits
init|=
name|searcher
operator|.
name|search
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"content"
argument_list|,
literal|"aaa"
argument_list|)
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|1000
argument_list|)
operator|.
name|scoreDocs
decl_stmt|;
name|Document
name|d
init|=
name|searcher
operator|.
name|getIndexReader
argument_list|()
operator|.
name|document
argument_list|(
name|hits
index|[
literal|0
index|]
operator|.
name|doc
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"wrong first document"
argument_list|,
literal|"0"
argument_list|,
name|d
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
name|doTestHits
argument_list|(
name|hits
argument_list|,
literal|44
argument_list|,
name|searcher
operator|.
name|getIndexReader
argument_list|()
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// fully merge
name|writer
operator|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|)
argument_list|)
operator|.
name|setOpenMode
argument_list|(
name|OpenMode
operator|.
name|APPEND
argument_list|)
operator|.
name|setMergePolicy
argument_list|(
name|newLogMergePolicy
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|forceMerge
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|reader
operator|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|searcher
operator|=
operator|new
name|IndexSearcher
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|hits
operator|=
name|searcher
operator|.
name|search
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"content"
argument_list|,
literal|"aaa"
argument_list|)
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|1000
argument_list|)
operator|.
name|scoreDocs
expr_stmt|;
name|assertEquals
argument_list|(
literal|"wrong number of hits"
argument_list|,
literal|44
argument_list|,
name|hits
operator|.
name|length
argument_list|)
expr_stmt|;
name|d
operator|=
name|searcher
operator|.
name|doc
argument_list|(
name|hits
index|[
literal|0
index|]
operator|.
name|doc
argument_list|)
expr_stmt|;
name|doTestHits
argument_list|(
name|hits
argument_list|,
literal|44
argument_list|,
name|searcher
operator|.
name|getIndexReader
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"wrong first document"
argument_list|,
literal|"0"
argument_list|,
name|d
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|changeIndexNoAdds
specifier|public
name|void
name|changeIndexNoAdds
parameter_list|(
name|Random
name|random
parameter_list|,
name|Directory
name|dir
parameter_list|)
throws|throws
name|IOException
block|{
comment|// make sure searching sees right # hits
name|DirectoryReader
name|reader
init|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|dir
argument_list|)
decl_stmt|;
name|IndexSearcher
name|searcher
init|=
operator|new
name|IndexSearcher
argument_list|(
name|reader
argument_list|)
decl_stmt|;
name|ScoreDoc
index|[]
name|hits
init|=
name|searcher
operator|.
name|search
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"content"
argument_list|,
literal|"aaa"
argument_list|)
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|1000
argument_list|)
operator|.
name|scoreDocs
decl_stmt|;
name|assertEquals
argument_list|(
literal|"wrong number of hits"
argument_list|,
literal|34
argument_list|,
name|hits
operator|.
name|length
argument_list|)
expr_stmt|;
name|Document
name|d
init|=
name|searcher
operator|.
name|doc
argument_list|(
name|hits
index|[
literal|0
index|]
operator|.
name|doc
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"wrong first document"
argument_list|,
literal|"0"
argument_list|,
name|d
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// fully merge
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|)
argument_list|)
operator|.
name|setOpenMode
argument_list|(
name|OpenMode
operator|.
name|APPEND
argument_list|)
argument_list|)
decl_stmt|;
name|writer
operator|.
name|forceMerge
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|reader
operator|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|searcher
operator|=
operator|new
name|IndexSearcher
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|hits
operator|=
name|searcher
operator|.
name|search
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"content"
argument_list|,
literal|"aaa"
argument_list|)
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|1000
argument_list|)
operator|.
name|scoreDocs
expr_stmt|;
name|assertEquals
argument_list|(
literal|"wrong number of hits"
argument_list|,
literal|34
argument_list|,
name|hits
operator|.
name|length
argument_list|)
expr_stmt|;
name|doTestHits
argument_list|(
name|hits
argument_list|,
literal|34
argument_list|,
name|searcher
operator|.
name|getIndexReader
argument_list|()
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|createIndex
specifier|public
name|File
name|createIndex
parameter_list|(
name|String
name|dirName
parameter_list|,
name|boolean
name|doCFS
parameter_list|,
name|boolean
name|fullyMerged
parameter_list|)
throws|throws
name|IOException
block|{
comment|// we use a real directory name that is not cleaned up, because this method is only used to create backwards indexes:
name|File
name|indexDir
init|=
operator|new
name|File
argument_list|(
literal|"/tmp/4x"
argument_list|,
name|dirName
argument_list|)
decl_stmt|;
name|_TestUtil
operator|.
name|rmDir
argument_list|(
name|indexDir
argument_list|)
expr_stmt|;
name|Directory
name|dir
init|=
name|newFSDirectory
argument_list|(
name|indexDir
argument_list|)
decl_stmt|;
name|LogByteSizeMergePolicy
name|mp
init|=
operator|new
name|LogByteSizeMergePolicy
argument_list|()
decl_stmt|;
name|mp
operator|.
name|setUseCompoundFile
argument_list|(
name|doCFS
argument_list|)
expr_stmt|;
name|mp
operator|.
name|setNoCFSRatio
argument_list|(
literal|1.0
argument_list|)
expr_stmt|;
comment|// TODO: remove randomness
name|IndexWriterConfig
name|conf
init|=
operator|new
name|IndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setMaxBufferedDocs
argument_list|(
literal|10
argument_list|)
operator|.
name|setMergePolicy
argument_list|(
name|mp
argument_list|)
decl_stmt|;
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|conf
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|35
condition|;
name|i
operator|++
control|)
block|{
name|addDoc
argument_list|(
name|writer
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"wrong doc count"
argument_list|,
literal|35
argument_list|,
name|writer
operator|.
name|maxDoc
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|fullyMerged
condition|)
block|{
name|writer
operator|.
name|forceMerge
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|fullyMerged
condition|)
block|{
comment|// open fresh writer so we get no prx file in the added segment
name|mp
operator|=
operator|new
name|LogByteSizeMergePolicy
argument_list|()
expr_stmt|;
name|mp
operator|.
name|setUseCompoundFile
argument_list|(
name|doCFS
argument_list|)
expr_stmt|;
name|mp
operator|.
name|setNoCFSRatio
argument_list|(
literal|1.0
argument_list|)
expr_stmt|;
comment|// TODO: remove randomness
name|conf
operator|=
operator|new
name|IndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setMaxBufferedDocs
argument_list|(
literal|10
argument_list|)
operator|.
name|setMergePolicy
argument_list|(
name|mp
argument_list|)
expr_stmt|;
name|writer
operator|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|addNoProxDoc
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|writer
operator|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|conf
operator|.
name|setMergePolicy
argument_list|(
name|doCFS
condition|?
name|NoMergePolicy
operator|.
name|COMPOUND_FILES
else|:
name|NoMergePolicy
operator|.
name|NO_COMPOUND_FILES
argument_list|)
argument_list|)
expr_stmt|;
name|Term
name|searchTerm
init|=
operator|new
name|Term
argument_list|(
literal|"id"
argument_list|,
literal|"7"
argument_list|)
decl_stmt|;
name|writer
operator|.
name|deleteDocuments
argument_list|(
name|searchTerm
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|indexDir
return|;
block|}
comment|/* Verifies that the expected file names were produced */
DECL|method|testExactFileNames
specifier|public
name|void
name|testExactFileNames
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|outputDirName
init|=
literal|"lucene.backwardscompat0.index"
decl_stmt|;
name|File
name|outputDir
init|=
name|_TestUtil
operator|.
name|getTempDir
argument_list|(
name|outputDirName
argument_list|)
decl_stmt|;
name|_TestUtil
operator|.
name|rmDir
argument_list|(
name|outputDir
argument_list|)
expr_stmt|;
try|try
block|{
name|Directory
name|dir
init|=
name|newFSDirectory
argument_list|(
name|outputDir
argument_list|)
decl_stmt|;
name|LogMergePolicy
name|mergePolicy
init|=
name|newLogMergePolicy
argument_list|(
literal|true
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|mergePolicy
operator|.
name|setNoCFSRatio
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// This test expects all of its segments to be in CFS
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setMaxBufferedDocs
argument_list|(
operator|-
literal|1
argument_list|)
operator|.
name|setRAMBufferSizeMB
argument_list|(
literal|16.0
argument_list|)
operator|.
name|setMergePolicy
argument_list|(
name|mergePolicy
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|35
condition|;
name|i
operator|++
control|)
block|{
name|addDoc
argument_list|(
name|writer
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"wrong doc count"
argument_list|,
literal|35
argument_list|,
name|writer
operator|.
name|maxDoc
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Delete one doc so we get a .del file:
name|writer
operator|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setMergePolicy
argument_list|(
name|NoMergePolicy
operator|.
name|NO_COMPOUND_FILES
argument_list|)
argument_list|)
expr_stmt|;
name|Term
name|searchTerm
init|=
operator|new
name|Term
argument_list|(
literal|"id"
argument_list|,
literal|"7"
argument_list|)
decl_stmt|;
name|writer
operator|.
name|deleteDocuments
argument_list|(
name|searchTerm
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Now verify file names... TODO: fix this test better, we could populate from
comment|// separateFiles() or something.
name|String
index|[]
name|expected
init|=
operator|new
name|String
index|[]
block|{
literal|"_0.cfs"
block|,
literal|"_0.cfe"
block|,
literal|"_0_1.del"
block|,
literal|"_0.si"
block|,
literal|"segments_2"
block|,
literal|"segments.gen"
block|}
decl_stmt|;
name|String
index|[]
name|expectedSimpleText
init|=
operator|new
name|String
index|[]
block|{
literal|"_0.cfs"
block|,
literal|"_0.cfe"
block|,
literal|"_0_1.liv"
block|,
literal|"_0.si"
block|,
literal|"segments_2"
block|,
literal|"segments.gen"
block|}
decl_stmt|;
name|String
index|[]
name|actual
init|=
name|dir
operator|.
name|listAll
argument_list|()
decl_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|expected
argument_list|)
expr_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|expectedSimpleText
argument_list|)
expr_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|actual
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|Arrays
operator|.
name|equals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
operator|&&
operator|!
name|Arrays
operator|.
name|equals
argument_list|(
name|expectedSimpleText
argument_list|,
name|actual
argument_list|)
condition|)
block|{
name|fail
argument_list|(
literal|"incorrect filenames in index: expected:\n    "
operator|+
name|asString
argument_list|(
name|expected
argument_list|)
operator|+
literal|"\n or "
operator|+
name|asString
argument_list|(
name|expectedSimpleText
argument_list|)
operator|+
literal|"\n actual:\n    "
operator|+
name|asString
argument_list|(
name|actual
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|_TestUtil
operator|.
name|rmDir
argument_list|(
name|outputDir
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|asString
specifier|private
name|String
name|asString
parameter_list|(
name|String
index|[]
name|l
parameter_list|)
block|{
name|String
name|s
init|=
literal|""
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|l
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|s
operator|+=
literal|"\n    "
expr_stmt|;
block|}
name|s
operator|+=
name|l
index|[
name|i
index|]
expr_stmt|;
block|}
return|return
name|s
return|;
block|}
DECL|method|addDoc
specifier|private
name|void
name|addDoc
parameter_list|(
name|IndexWriter
name|writer
parameter_list|,
name|int
name|id
parameter_list|)
throws|throws
name|IOException
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
literal|"content"
argument_list|,
literal|"aaa"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|StringField
argument_list|(
literal|"id"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|id
argument_list|)
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|)
argument_list|)
expr_stmt|;
name|FieldType
name|customType2
init|=
operator|new
name|FieldType
argument_list|(
name|TextField
operator|.
name|TYPE_STORED
argument_list|)
decl_stmt|;
name|customType2
operator|.
name|setStoreTermVectors
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|customType2
operator|.
name|setStoreTermVectorPositions
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|customType2
operator|.
name|setStoreTermVectorOffsets
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"autf8"
argument_list|,
literal|"Lu\uD834\uDD1Ece\uD834\uDD60ne \u0000 \u2620 ab\ud917\udc17cd"
argument_list|,
name|customType2
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"utf8"
argument_list|,
literal|"Lu\uD834\uDD1Ece\uD834\uDD60ne \u0000 \u2620 ab\ud917\udc17cd"
argument_list|,
name|customType2
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"content2"
argument_list|,
literal|"here is more content with aaa aaa aaa"
argument_list|,
name|customType2
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"fie\u2C77ld"
argument_list|,
literal|"field with non-ascii name"
argument_list|,
name|customType2
argument_list|)
argument_list|)
expr_stmt|;
comment|// add numeric fields, to test if flex preserves encoding
name|doc
operator|.
name|add
argument_list|(
operator|new
name|IntField
argument_list|(
literal|"trieInt"
argument_list|,
name|id
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|LongField
argument_list|(
literal|"trieLong"
argument_list|,
operator|(
name|long
operator|)
name|id
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
comment|// add docvalues fields
name|doc
operator|.
name|add
argument_list|(
operator|new
name|ByteDocValuesField
argument_list|(
literal|"dvByte"
argument_list|,
operator|(
name|byte
operator|)
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|byte
name|bytes
index|[]
init|=
operator|new
name|byte
index|[]
block|{
call|(
name|byte
call|)
argument_list|(
name|id
operator|>>>
literal|24
argument_list|)
block|,
call|(
name|byte
call|)
argument_list|(
name|id
operator|>>>
literal|16
argument_list|)
block|,
call|(
name|byte
call|)
argument_list|(
name|id
operator|>>>
literal|8
argument_list|)
block|,
operator|(
name|byte
operator|)
name|id
block|}
decl_stmt|;
name|BytesRef
name|ref
init|=
operator|new
name|BytesRef
argument_list|(
name|bytes
argument_list|)
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|DerefBytesDocValuesField
argument_list|(
literal|"dvBytesDerefFixed"
argument_list|,
name|ref
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|DerefBytesDocValuesField
argument_list|(
literal|"dvBytesDerefVar"
argument_list|,
name|ref
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|SortedBytesDocValuesField
argument_list|(
literal|"dvBytesSortedFixed"
argument_list|,
name|ref
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|SortedBytesDocValuesField
argument_list|(
literal|"dvBytesSortedVar"
argument_list|,
name|ref
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|StraightBytesDocValuesField
argument_list|(
literal|"dvBytesStraightFixed"
argument_list|,
name|ref
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|StraightBytesDocValuesField
argument_list|(
literal|"dvBytesStraightVar"
argument_list|,
name|ref
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|DoubleDocValuesField
argument_list|(
literal|"dvDouble"
argument_list|,
operator|(
name|double
operator|)
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|FloatDocValuesField
argument_list|(
literal|"dvFloat"
argument_list|,
operator|(
name|float
operator|)
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|IntDocValuesField
argument_list|(
literal|"dvInt"
argument_list|,
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|LongDocValuesField
argument_list|(
literal|"dvLong"
argument_list|,
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|PackedLongDocValuesField
argument_list|(
literal|"dvPacked"
argument_list|,
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|ShortDocValuesField
argument_list|(
literal|"dvShort"
argument_list|,
operator|(
name|short
operator|)
name|id
argument_list|)
argument_list|)
expr_stmt|;
comment|// a field with both offsets and term vectors for a cross-check
name|FieldType
name|customType3
init|=
operator|new
name|FieldType
argument_list|(
name|TextField
operator|.
name|TYPE_STORED
argument_list|)
decl_stmt|;
name|customType3
operator|.
name|setStoreTermVectors
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|customType3
operator|.
name|setStoreTermVectorPositions
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|customType3
operator|.
name|setStoreTermVectorOffsets
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|customType3
operator|.
name|setIndexOptions
argument_list|(
name|IndexOptions
operator|.
name|DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"content5"
argument_list|,
literal|"here is more content with aaa aaa aaa"
argument_list|,
name|customType3
argument_list|)
argument_list|)
expr_stmt|;
comment|// a field that omits only positions
name|FieldType
name|customType4
init|=
operator|new
name|FieldType
argument_list|(
name|TextField
operator|.
name|TYPE_STORED
argument_list|)
decl_stmt|;
name|customType4
operator|.
name|setStoreTermVectors
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|customType4
operator|.
name|setStoreTermVectorPositions
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|customType4
operator|.
name|setStoreTermVectorOffsets
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|customType4
operator|.
name|setIndexOptions
argument_list|(
name|IndexOptions
operator|.
name|DOCS_AND_FREQS
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"content6"
argument_list|,
literal|"here is more content with aaa aaa aaa"
argument_list|,
name|customType4
argument_list|)
argument_list|)
expr_stmt|;
comment|// TODO:
comment|//   index different norms types via similarity (we use a random one currently?!)
comment|//   remove any analyzer randomness, explicitly add payloads for certain fields.
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
DECL|method|addNoProxDoc
specifier|private
name|void
name|addNoProxDoc
parameter_list|(
name|IndexWriter
name|writer
parameter_list|)
throws|throws
name|IOException
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|FieldType
name|customType
init|=
operator|new
name|FieldType
argument_list|(
name|TextField
operator|.
name|TYPE_STORED
argument_list|)
decl_stmt|;
name|customType
operator|.
name|setIndexOptions
argument_list|(
name|IndexOptions
operator|.
name|DOCS_ONLY
argument_list|)
expr_stmt|;
name|Field
name|f
init|=
operator|new
name|Field
argument_list|(
literal|"content3"
argument_list|,
literal|"aaa"
argument_list|,
name|customType
argument_list|)
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|FieldType
name|customType2
init|=
operator|new
name|FieldType
argument_list|()
decl_stmt|;
name|customType2
operator|.
name|setStored
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|customType2
operator|.
name|setIndexOptions
argument_list|(
name|IndexOptions
operator|.
name|DOCS_ONLY
argument_list|)
expr_stmt|;
name|f
operator|=
operator|new
name|Field
argument_list|(
literal|"content4"
argument_list|,
literal|"aaa"
argument_list|,
name|customType2
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
DECL|method|countDocs
specifier|private
name|int
name|countDocs
parameter_list|(
name|DocsEnum
name|docs
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|(
name|docs
operator|.
name|nextDoc
argument_list|()
operator|)
operator|!=
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
condition|)
block|{
name|count
operator|++
expr_stmt|;
block|}
return|return
name|count
return|;
block|}
comment|// flex: test basics of TermsEnum api on non-flex index
DECL|method|testNextIntoWrongField
specifier|public
name|void
name|testNextIntoWrongField
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|String
name|name
range|:
name|oldNames
control|)
block|{
name|Directory
name|dir
init|=
name|oldIndexDirs
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|IndexReader
name|r
init|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|dir
argument_list|)
decl_stmt|;
name|TermsEnum
name|terms
init|=
name|MultiFields
operator|.
name|getFields
argument_list|(
name|r
argument_list|)
operator|.
name|terms
argument_list|(
literal|"content"
argument_list|)
operator|.
name|iterator
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|BytesRef
name|t
init|=
name|terms
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|t
argument_list|)
expr_stmt|;
comment|// content field only has term aaa:
name|assertEquals
argument_list|(
literal|"aaa"
argument_list|,
name|t
operator|.
name|utf8ToString
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|terms
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|BytesRef
name|aaaTerm
init|=
operator|new
name|BytesRef
argument_list|(
literal|"aaa"
argument_list|)
decl_stmt|;
comment|// should be found exactly
name|assertEquals
argument_list|(
name|TermsEnum
operator|.
name|SeekStatus
operator|.
name|FOUND
argument_list|,
name|terms
operator|.
name|seekCeil
argument_list|(
name|aaaTerm
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|35
argument_list|,
name|countDocs
argument_list|(
name|_TestUtil
operator|.
name|docs
argument_list|(
name|random
argument_list|()
argument_list|,
name|terms
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|terms
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
comment|// should hit end of field
name|assertEquals
argument_list|(
name|TermsEnum
operator|.
name|SeekStatus
operator|.
name|END
argument_list|,
name|terms
operator|.
name|seekCeil
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"bbb"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|terms
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
comment|// should seek to aaa
name|assertEquals
argument_list|(
name|TermsEnum
operator|.
name|SeekStatus
operator|.
name|NOT_FOUND
argument_list|,
name|terms
operator|.
name|seekCeil
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"a"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|terms
operator|.
name|term
argument_list|()
operator|.
name|bytesEquals
argument_list|(
name|aaaTerm
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|35
argument_list|,
name|countDocs
argument_list|(
name|_TestUtil
operator|.
name|docs
argument_list|(
name|random
argument_list|()
argument_list|,
name|terms
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|terms
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TermsEnum
operator|.
name|SeekStatus
operator|.
name|FOUND
argument_list|,
name|terms
operator|.
name|seekCeil
argument_list|(
name|aaaTerm
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|35
argument_list|,
name|countDocs
argument_list|(
name|_TestUtil
operator|.
name|docs
argument_list|(
name|random
argument_list|()
argument_list|,
name|terms
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|terms
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|testNumericFields
specifier|public
name|void
name|testNumericFields
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|String
name|name
range|:
name|oldNames
control|)
block|{
name|Directory
name|dir
init|=
name|oldIndexDirs
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|IndexReader
name|reader
init|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|dir
argument_list|)
decl_stmt|;
name|IndexSearcher
name|searcher
init|=
operator|new
name|IndexSearcher
argument_list|(
name|reader
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|id
init|=
literal|10
init|;
name|id
operator|<
literal|15
condition|;
name|id
operator|++
control|)
block|{
name|ScoreDoc
index|[]
name|hits
init|=
name|searcher
operator|.
name|search
argument_list|(
name|NumericRangeQuery
operator|.
name|newIntRange
argument_list|(
literal|"trieInt"
argument_list|,
literal|4
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|id
argument_list|)
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|id
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|,
literal|100
argument_list|)
operator|.
name|scoreDocs
decl_stmt|;
name|assertEquals
argument_list|(
literal|"wrong number of hits"
argument_list|,
literal|1
argument_list|,
name|hits
operator|.
name|length
argument_list|)
expr_stmt|;
name|Document
name|d
init|=
name|searcher
operator|.
name|doc
argument_list|(
name|hits
index|[
literal|0
index|]
operator|.
name|doc
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|id
argument_list|)
argument_list|,
name|d
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
name|hits
operator|=
name|searcher
operator|.
name|search
argument_list|(
name|NumericRangeQuery
operator|.
name|newLongRange
argument_list|(
literal|"trieLong"
argument_list|,
literal|4
argument_list|,
name|Long
operator|.
name|valueOf
argument_list|(
name|id
argument_list|)
argument_list|,
name|Long
operator|.
name|valueOf
argument_list|(
name|id
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|,
literal|100
argument_list|)
operator|.
name|scoreDocs
expr_stmt|;
name|assertEquals
argument_list|(
literal|"wrong number of hits"
argument_list|,
literal|1
argument_list|,
name|hits
operator|.
name|length
argument_list|)
expr_stmt|;
name|d
operator|=
name|searcher
operator|.
name|doc
argument_list|(
name|hits
index|[
literal|0
index|]
operator|.
name|doc
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|id
argument_list|)
argument_list|,
name|d
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// check that also lower-precision fields are ok
name|ScoreDoc
index|[]
name|hits
init|=
name|searcher
operator|.
name|search
argument_list|(
name|NumericRangeQuery
operator|.
name|newIntRange
argument_list|(
literal|"trieInt"
argument_list|,
literal|4
argument_list|,
name|Integer
operator|.
name|MIN_VALUE
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
argument_list|,
literal|100
argument_list|)
operator|.
name|scoreDocs
decl_stmt|;
name|assertEquals
argument_list|(
literal|"wrong number of hits"
argument_list|,
literal|34
argument_list|,
name|hits
operator|.
name|length
argument_list|)
expr_stmt|;
name|hits
operator|=
name|searcher
operator|.
name|search
argument_list|(
name|NumericRangeQuery
operator|.
name|newLongRange
argument_list|(
literal|"trieLong"
argument_list|,
literal|4
argument_list|,
name|Long
operator|.
name|MIN_VALUE
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
argument_list|,
literal|100
argument_list|)
operator|.
name|scoreDocs
expr_stmt|;
name|assertEquals
argument_list|(
literal|"wrong number of hits"
argument_list|,
literal|34
argument_list|,
name|hits
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// check decoding into field cache
name|int
index|[]
name|fci
init|=
name|FieldCache
operator|.
name|DEFAULT
operator|.
name|getInts
argument_list|(
name|SlowCompositeReaderWrapper
operator|.
name|wrap
argument_list|(
name|searcher
operator|.
name|getIndexReader
argument_list|()
argument_list|)
argument_list|,
literal|"trieInt"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|val
range|:
name|fci
control|)
block|{
name|assertTrue
argument_list|(
literal|"value in id bounds"
argument_list|,
name|val
operator|>=
literal|0
operator|&&
name|val
operator|<
literal|35
argument_list|)
expr_stmt|;
block|}
name|long
index|[]
name|fcl
init|=
name|FieldCache
operator|.
name|DEFAULT
operator|.
name|getLongs
argument_list|(
name|SlowCompositeReaderWrapper
operator|.
name|wrap
argument_list|(
name|searcher
operator|.
name|getIndexReader
argument_list|()
argument_list|)
argument_list|,
literal|"trieLong"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
for|for
control|(
name|long
name|val
range|:
name|fcl
control|)
block|{
name|assertTrue
argument_list|(
literal|"value in id bounds"
argument_list|,
name|val
operator|>=
literal|0L
operator|&&
name|val
operator|<
literal|35L
argument_list|)
expr_stmt|;
block|}
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|checkAllSegmentsUpgraded
specifier|private
name|int
name|checkAllSegmentsUpgraded
parameter_list|(
name|Directory
name|dir
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|SegmentInfos
name|infos
init|=
operator|new
name|SegmentInfos
argument_list|()
decl_stmt|;
name|infos
operator|.
name|read
argument_list|(
name|dir
argument_list|)
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"checkAllSegmentsUpgraded: "
operator|+
name|infos
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|SegmentInfoPerCommit
name|si
range|:
name|infos
control|)
block|{
name|assertEquals
argument_list|(
name|Constants
operator|.
name|LUCENE_MAIN_VERSION
argument_list|,
name|si
operator|.
name|info
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|infos
operator|.
name|size
argument_list|()
return|;
block|}
DECL|method|getNumberOfSegments
specifier|private
name|int
name|getNumberOfSegments
parameter_list|(
name|Directory
name|dir
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|SegmentInfos
name|infos
init|=
operator|new
name|SegmentInfos
argument_list|()
decl_stmt|;
name|infos
operator|.
name|read
argument_list|(
name|dir
argument_list|)
expr_stmt|;
return|return
name|infos
operator|.
name|size
argument_list|()
return|;
block|}
DECL|method|testUpgradeOldIndex
specifier|public
name|void
name|testUpgradeOldIndex
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|names
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|oldNames
operator|.
name|length
operator|+
name|oldSingleSegmentNames
operator|.
name|length
argument_list|)
decl_stmt|;
name|names
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|oldNames
argument_list|)
argument_list|)
expr_stmt|;
name|names
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|oldSingleSegmentNames
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|name
range|:
name|names
control|)
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testUpgradeOldIndex: index="
operator|+
name|name
argument_list|)
expr_stmt|;
block|}
name|Directory
name|dir
init|=
name|newDirectory
argument_list|(
name|oldIndexDirs
operator|.
name|get
argument_list|(
name|name
argument_list|)
argument_list|)
decl_stmt|;
operator|new
name|IndexUpgrader
argument_list|(
name|dir
argument_list|,
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
literal|null
argument_list|)
argument_list|,
literal|false
argument_list|)
operator|.
name|upgrade
argument_list|()
expr_stmt|;
name|checkAllSegmentsUpgraded
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|testUpgradeOldSingleSegmentIndexWithAdditions
specifier|public
name|void
name|testUpgradeOldSingleSegmentIndexWithAdditions
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|String
name|name
range|:
name|oldSingleSegmentNames
control|)
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testUpgradeOldSingleSegmentIndexWithAdditions: index="
operator|+
name|name
argument_list|)
expr_stmt|;
block|}
name|Directory
name|dir
init|=
name|newDirectory
argument_list|(
name|oldIndexDirs
operator|.
name|get
argument_list|(
name|name
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Original index must be single segment"
argument_list|,
literal|1
argument_list|,
name|getNumberOfSegments
argument_list|(
name|dir
argument_list|)
argument_list|)
expr_stmt|;
comment|// create a bunch of dummy segments
name|int
name|id
init|=
literal|40
decl_stmt|;
name|RAMDirectory
name|ramDir
init|=
operator|new
name|RAMDirectory
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
comment|// only use Log- or TieredMergePolicy, to make document addition predictable and not suddenly merge:
name|MergePolicy
name|mp
init|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
name|newLogMergePolicy
argument_list|()
else|:
name|newTieredMergePolicy
argument_list|()
decl_stmt|;
name|IndexWriterConfig
name|iwc
init|=
operator|new
name|IndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setMergePolicy
argument_list|(
name|mp
argument_list|)
decl_stmt|;
name|IndexWriter
name|w
init|=
operator|new
name|IndexWriter
argument_list|(
name|ramDir
argument_list|,
name|iwc
argument_list|)
decl_stmt|;
comment|// add few more docs:
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|RANDOM_MULTIPLIER
operator|*
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|30
argument_list|)
condition|;
name|j
operator|++
control|)
block|{
name|addDoc
argument_list|(
name|w
argument_list|,
name|id
operator|++
argument_list|)
expr_stmt|;
block|}
name|w
operator|.
name|close
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
comment|// add dummy segments (which are all in current
comment|// version) to single segment index
name|MergePolicy
name|mp
init|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
name|newLogMergePolicy
argument_list|()
else|:
name|newTieredMergePolicy
argument_list|()
decl_stmt|;
name|IndexWriterConfig
name|iwc
init|=
operator|new
name|IndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
literal|null
argument_list|)
operator|.
name|setMergePolicy
argument_list|(
name|mp
argument_list|)
decl_stmt|;
name|IndexWriter
name|w
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|iwc
argument_list|)
decl_stmt|;
name|w
operator|.
name|addIndexes
argument_list|(
name|ramDir
argument_list|)
expr_stmt|;
name|w
operator|.
name|close
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// determine count of segments in modified index
specifier|final
name|int
name|origSegCount
init|=
name|getNumberOfSegments
argument_list|(
name|dir
argument_list|)
decl_stmt|;
operator|new
name|IndexUpgrader
argument_list|(
name|dir
argument_list|,
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
literal|null
argument_list|)
argument_list|,
literal|false
argument_list|)
operator|.
name|upgrade
argument_list|()
expr_stmt|;
specifier|final
name|int
name|segCount
init|=
name|checkAllSegmentsUpgraded
argument_list|(
name|dir
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Index must still contain the same number of segments, as only one segment was upgraded and nothing else merged"
argument_list|,
name|origSegCount
argument_list|,
name|segCount
argument_list|)
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class
end_unit
