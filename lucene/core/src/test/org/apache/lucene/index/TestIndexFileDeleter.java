begin_unit
begin_package
DECL|package|org.apache.lucene.index
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import
begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|FileSystem
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|MockAnalyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|simpletext
operator|.
name|SimpleTextCodec
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriterConfig
operator|.
name|OpenMode
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|mockfile
operator|.
name|FilterPath
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|mockfile
operator|.
name|VirusCheckingFS
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|AlreadyClosedException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IOContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexInput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexOutput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|MockDirectoryWrapper
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|InfoStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_comment
comment|/*   Verify we can read the pre-2.1 file format, do searches   against it, and add documents to it. */
end_comment
begin_class
DECL|class|TestIndexFileDeleter
specifier|public
class|class
name|TestIndexFileDeleter
extends|extends
name|LuceneTestCase
block|{
DECL|method|testDeleteLeftoverFiles
specifier|public
name|void
name|testDeleteLeftoverFiles
parameter_list|()
throws|throws
name|IOException
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
if|if
condition|(
name|dir
operator|instanceof
name|MockDirectoryWrapper
condition|)
block|{
operator|(
operator|(
name|MockDirectoryWrapper
operator|)
name|dir
operator|)
operator|.
name|setPreventDoubleWrite
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|MergePolicy
name|mergePolicy
init|=
name|newLogMergePolicy
argument_list|(
literal|true
argument_list|,
literal|10
argument_list|)
decl_stmt|;
comment|// This test expects all of its segments to be in CFS
name|mergePolicy
operator|.
name|setNoCFSRatio
argument_list|(
literal|1.0
argument_list|)
expr_stmt|;
name|mergePolicy
operator|.
name|setMaxCFSSegmentSizeMB
argument_list|(
name|Double
operator|.
name|POSITIVE_INFINITY
argument_list|)
expr_stmt|;
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|newIndexWriterConfig
argument_list|(
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setMaxBufferedDocs
argument_list|(
literal|10
argument_list|)
operator|.
name|setMergePolicy
argument_list|(
name|mergePolicy
argument_list|)
operator|.
name|setUseCompoundFile
argument_list|(
literal|true
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|i
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
literal|35
condition|;
name|i
operator|++
control|)
block|{
name|addDoc
argument_list|(
name|writer
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|getConfig
argument_list|()
operator|.
name|getMergePolicy
argument_list|()
operator|.
name|setNoCFSRatio
argument_list|(
literal|0.0
argument_list|)
expr_stmt|;
name|writer
operator|.
name|getConfig
argument_list|()
operator|.
name|setUseCompoundFile
argument_list|(
literal|false
argument_list|)
expr_stmt|;
for|for
control|(
init|;
name|i
operator|<
literal|45
condition|;
name|i
operator|++
control|)
block|{
name|addDoc
argument_list|(
name|writer
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Delete one doc so we get a .del file:
name|writer
operator|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|newIndexWriterConfig
argument_list|(
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setMergePolicy
argument_list|(
name|NoMergePolicy
operator|.
name|INSTANCE
argument_list|)
operator|.
name|setUseCompoundFile
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|Term
name|searchTerm
init|=
operator|new
name|Term
argument_list|(
literal|"id"
argument_list|,
literal|"7"
argument_list|)
decl_stmt|;
name|writer
operator|.
name|deleteDocuments
argument_list|(
name|searchTerm
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// read in index to try to not depend on codec-specific filenames so much
name|SegmentInfos
name|sis
init|=
name|SegmentInfos
operator|.
name|readLatestCommit
argument_list|(
name|dir
argument_list|)
decl_stmt|;
name|SegmentInfo
name|si0
init|=
name|sis
operator|.
name|info
argument_list|(
literal|0
argument_list|)
operator|.
name|info
decl_stmt|;
name|SegmentInfo
name|si1
init|=
name|sis
operator|.
name|info
argument_list|(
literal|1
argument_list|)
operator|.
name|info
decl_stmt|;
name|SegmentInfo
name|si3
init|=
name|sis
operator|.
name|info
argument_list|(
literal|3
argument_list|)
operator|.
name|info
decl_stmt|;
comment|// Now, artificially create an extra .del file& extra
comment|// .s0 file:
name|String
index|[]
name|files
init|=
name|dir
operator|.
name|listAll
argument_list|()
decl_stmt|;
comment|/*     for(int j=0;j<files.length;j++) {       System.out.println(j + ": " + files[j]);     }     */
comment|// TODO: fix this test better
name|String
name|ext
init|=
literal|".liv"
decl_stmt|;
comment|// Create a bogus separate del file for a
comment|// segment that already has a separate del file:
name|copyFile
argument_list|(
name|dir
argument_list|,
literal|"_0_1"
operator|+
name|ext
argument_list|,
literal|"_0_2"
operator|+
name|ext
argument_list|)
expr_stmt|;
comment|// Create a bogus separate del file for a
comment|// segment that does not yet have a separate del file:
name|copyFile
argument_list|(
name|dir
argument_list|,
literal|"_0_1"
operator|+
name|ext
argument_list|,
literal|"_1_1"
operator|+
name|ext
argument_list|)
expr_stmt|;
comment|// Create a bogus separate del file for a
comment|// non-existent segment:
name|copyFile
argument_list|(
name|dir
argument_list|,
literal|"_0_1"
operator|+
name|ext
argument_list|,
literal|"_188_1"
operator|+
name|ext
argument_list|)
expr_stmt|;
name|String
name|cfsFiles0
index|[]
init|=
name|si0
operator|.
name|getCodec
argument_list|()
operator|instanceof
name|SimpleTextCodec
condition|?
operator|new
name|String
index|[]
block|{
literal|"_0.scf"
block|}
else|:
operator|new
name|String
index|[]
block|{
literal|"_0.cfs"
block|,
literal|"_0.cfe"
block|}
decl_stmt|;
comment|// Create a bogus segment file:
name|copyFile
argument_list|(
name|dir
argument_list|,
name|cfsFiles0
index|[
literal|0
index|]
argument_list|,
literal|"_188.cfs"
argument_list|)
expr_stmt|;
comment|// Create a bogus fnm file when the CFS already exists:
name|copyFile
argument_list|(
name|dir
argument_list|,
name|cfsFiles0
index|[
literal|0
index|]
argument_list|,
literal|"_0.fnm"
argument_list|)
expr_stmt|;
comment|// Create a bogus cfs file shadowing a non-cfs segment:
comment|// TODO: assert is bogus (relies upon codec-specific filenames)
name|assertTrue
argument_list|(
name|slowFileExists
argument_list|(
name|dir
argument_list|,
literal|"_3.fdt"
argument_list|)
operator|||
name|slowFileExists
argument_list|(
name|dir
argument_list|,
literal|"_3.fld"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|cfsFiles3
index|[]
init|=
name|si3
operator|.
name|getCodec
argument_list|()
operator|instanceof
name|SimpleTextCodec
condition|?
operator|new
name|String
index|[]
block|{
literal|"_3.scf"
block|}
else|:
operator|new
name|String
index|[]
block|{
literal|"_3.cfs"
block|,
literal|"_3.cfe"
block|}
decl_stmt|;
for|for
control|(
name|String
name|f
range|:
name|cfsFiles3
control|)
block|{
name|assertTrue
argument_list|(
operator|!
name|slowFileExists
argument_list|(
name|dir
argument_list|,
name|f
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|cfsFiles1
index|[]
init|=
name|si1
operator|.
name|getCodec
argument_list|()
operator|instanceof
name|SimpleTextCodec
condition|?
operator|new
name|String
index|[]
block|{
literal|"_1.scf"
block|}
else|:
operator|new
name|String
index|[]
block|{
literal|"_1.cfs"
block|,
literal|"_1.cfe"
block|}
decl_stmt|;
name|copyFile
argument_list|(
name|dir
argument_list|,
name|cfsFiles1
index|[
literal|0
index|]
argument_list|,
literal|"_3.cfs"
argument_list|)
expr_stmt|;
name|String
index|[]
name|filesPre
init|=
name|dir
operator|.
name|listAll
argument_list|()
decl_stmt|;
comment|// Open& close a writer: it should delete the above files and nothing more:
name|writer
operator|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|newIndexWriterConfig
argument_list|(
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setOpenMode
argument_list|(
name|OpenMode
operator|.
name|APPEND
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|String
index|[]
name|files2
init|=
name|dir
operator|.
name|listAll
argument_list|()
decl_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|files
argument_list|)
expr_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|files2
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|dif
init|=
name|difFiles
argument_list|(
name|files
argument_list|,
name|files2
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|Arrays
operator|.
name|equals
argument_list|(
name|files
argument_list|,
name|files2
argument_list|)
condition|)
block|{
name|fail
argument_list|(
literal|"IndexFileDeleter failed to delete unreferenced extra files: should have deleted "
operator|+
operator|(
name|filesPre
operator|.
name|length
operator|-
name|files
operator|.
name|length
operator|)
operator|+
literal|" files but only deleted "
operator|+
operator|(
name|filesPre
operator|.
name|length
operator|-
name|files2
operator|.
name|length
operator|)
operator|+
literal|"; expected files:\n    "
operator|+
name|asString
argument_list|(
name|files
argument_list|)
operator|+
literal|"\n  actual files:\n    "
operator|+
name|asString
argument_list|(
name|files2
argument_list|)
operator|+
literal|"\ndiff: "
operator|+
name|dif
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|difFiles
specifier|private
specifier|static
name|Set
argument_list|<
name|String
argument_list|>
name|difFiles
parameter_list|(
name|String
index|[]
name|files1
parameter_list|,
name|String
index|[]
name|files2
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|set1
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|set2
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|extra
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|files1
operator|.
name|length
condition|;
name|x
operator|++
control|)
block|{
name|set1
operator|.
name|add
argument_list|(
name|files1
index|[
name|x
index|]
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|files2
operator|.
name|length
condition|;
name|x
operator|++
control|)
block|{
name|set2
operator|.
name|add
argument_list|(
name|files2
index|[
name|x
index|]
argument_list|)
expr_stmt|;
block|}
name|Iterator
argument_list|<
name|String
argument_list|>
name|i1
init|=
name|set1
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|i1
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|o
init|=
name|i1
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|set2
operator|.
name|contains
argument_list|(
name|o
argument_list|)
condition|)
block|{
name|extra
operator|.
name|add
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
block|}
name|Iterator
argument_list|<
name|String
argument_list|>
name|i2
init|=
name|set2
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|i2
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|o
init|=
name|i2
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|set1
operator|.
name|contains
argument_list|(
name|o
argument_list|)
condition|)
block|{
name|extra
operator|.
name|add
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|extra
return|;
block|}
DECL|method|asString
specifier|private
name|String
name|asString
parameter_list|(
name|String
index|[]
name|l
parameter_list|)
block|{
name|String
name|s
init|=
literal|""
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|l
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|s
operator|+=
literal|"\n    "
expr_stmt|;
block|}
name|s
operator|+=
name|l
index|[
name|i
index|]
expr_stmt|;
block|}
return|return
name|s
return|;
block|}
DECL|method|copyFile
specifier|public
name|void
name|copyFile
parameter_list|(
name|Directory
name|dir
parameter_list|,
name|String
name|src
parameter_list|,
name|String
name|dest
parameter_list|)
throws|throws
name|IOException
block|{
name|IndexInput
name|in
init|=
name|dir
operator|.
name|openInput
argument_list|(
name|src
argument_list|,
name|newIOContext
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|IndexOutput
name|out
init|=
name|dir
operator|.
name|createOutput
argument_list|(
name|dest
argument_list|,
name|newIOContext
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|byte
index|[]
name|b
init|=
operator|new
name|byte
index|[
literal|1024
index|]
decl_stmt|;
name|long
name|remainder
init|=
name|in
operator|.
name|length
argument_list|()
decl_stmt|;
while|while
condition|(
name|remainder
operator|>
literal|0
condition|)
block|{
name|int
name|len
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|min
argument_list|(
name|b
operator|.
name|length
argument_list|,
name|remainder
argument_list|)
decl_stmt|;
name|in
operator|.
name|readBytes
argument_list|(
name|b
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBytes
argument_list|(
name|b
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|remainder
operator|-=
name|len
expr_stmt|;
block|}
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|addDoc
specifier|private
name|void
name|addDoc
parameter_list|(
name|IndexWriter
name|writer
parameter_list|,
name|int
name|id
parameter_list|)
throws|throws
name|IOException
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newTextField
argument_list|(
literal|"content"
argument_list|,
literal|"aaa"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newStringField
argument_list|(
literal|"id"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|id
argument_list|)
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
DECL|method|testVirusScannerDoesntCorruptIndex
specifier|public
name|void
name|testVirusScannerDoesntCorruptIndex
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|path
init|=
name|createTempDir
argument_list|()
decl_stmt|;
name|VirusCheckingFS
name|fs
init|=
operator|new
name|VirusCheckingFS
argument_list|(
name|path
operator|.
name|getFileSystem
argument_list|()
argument_list|,
name|random
argument_list|()
operator|.
name|nextLong
argument_list|()
argument_list|)
decl_stmt|;
name|FileSystem
name|filesystem
init|=
name|fs
operator|.
name|getFileSystem
argument_list|(
name|URI
operator|.
name|create
argument_list|(
literal|"file:///"
argument_list|)
argument_list|)
decl_stmt|;
name|fs
operator|.
name|disable
argument_list|()
expr_stmt|;
name|Path
name|path2
init|=
operator|new
name|FilterPath
argument_list|(
name|path
argument_list|,
name|filesystem
argument_list|)
decl_stmt|;
name|Directory
name|dir
init|=
name|newFSDirectory
argument_list|(
name|path2
argument_list|)
decl_stmt|;
comment|// add empty commit
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
literal|null
argument_list|)
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// add a trash unreferenced file
name|dir
operator|.
name|createOutput
argument_list|(
literal|"_0.si"
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// start virus scanner
name|fs
operator|.
name|enable
argument_list|()
expr_stmt|;
name|IndexWriter
name|iw
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|iw
operator|.
name|addDocument
argument_list|(
operator|new
name|Document
argument_list|()
argument_list|)
expr_stmt|;
comment|// stop virus scanner
name|fs
operator|.
name|disable
argument_list|()
expr_stmt|;
name|iw
operator|.
name|commit
argument_list|()
expr_stmt|;
name|iw
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testNoSegmentsDotGenInflation
specifier|public
name|void
name|testNoSegmentsDotGenInflation
parameter_list|()
throws|throws
name|IOException
block|{
name|Directory
name|dir
init|=
name|newMockDirectory
argument_list|()
decl_stmt|;
comment|// empty commit
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
literal|null
argument_list|)
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|SegmentInfos
name|sis
init|=
name|SegmentInfos
operator|.
name|readLatestCommit
argument_list|(
name|dir
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|sis
operator|.
name|getGeneration
argument_list|()
argument_list|)
expr_stmt|;
comment|// no inflation
name|inflateGens
argument_list|(
name|sis
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|dir
operator|.
name|listAll
argument_list|()
argument_list|)
argument_list|,
name|InfoStream
operator|.
name|getDefault
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|sis
operator|.
name|getGeneration
argument_list|()
argument_list|)
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testSegmentsInflation
specifier|public
name|void
name|testSegmentsInflation
parameter_list|()
throws|throws
name|IOException
block|{
name|MockDirectoryWrapper
name|dir
init|=
name|newMockDirectory
argument_list|()
decl_stmt|;
name|dir
operator|.
name|setCheckIndexOnClose
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// TODO: allow falling back more than one commit
comment|// empty commit
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
literal|null
argument_list|)
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|SegmentInfos
name|sis
init|=
name|SegmentInfos
operator|.
name|readLatestCommit
argument_list|(
name|dir
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|sis
operator|.
name|getGeneration
argument_list|()
argument_list|)
expr_stmt|;
comment|// add trash commit
name|dir
operator|.
name|createOutput
argument_list|(
name|IndexFileNames
operator|.
name|SEGMENTS
operator|+
literal|"_2"
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// ensure inflation
name|inflateGens
argument_list|(
name|sis
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|dir
operator|.
name|listAll
argument_list|()
argument_list|)
argument_list|,
name|InfoStream
operator|.
name|getDefault
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|sis
operator|.
name|getGeneration
argument_list|()
argument_list|)
expr_stmt|;
comment|// add another trash commit
name|dir
operator|.
name|createOutput
argument_list|(
name|IndexFileNames
operator|.
name|SEGMENTS
operator|+
literal|"_4"
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|inflateGens
argument_list|(
name|sis
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|dir
operator|.
name|listAll
argument_list|()
argument_list|)
argument_list|,
name|InfoStream
operator|.
name|getDefault
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|sis
operator|.
name|getGeneration
argument_list|()
argument_list|)
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testSegmentNameInflation
specifier|public
name|void
name|testSegmentNameInflation
parameter_list|()
throws|throws
name|IOException
block|{
name|MockDirectoryWrapper
name|dir
init|=
name|newMockDirectory
argument_list|()
decl_stmt|;
comment|// empty commit
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
literal|null
argument_list|)
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|SegmentInfos
name|sis
init|=
name|SegmentInfos
operator|.
name|readLatestCommit
argument_list|(
name|dir
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|sis
operator|.
name|counter
argument_list|)
expr_stmt|;
comment|// no inflation
name|inflateGens
argument_list|(
name|sis
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|dir
operator|.
name|listAll
argument_list|()
argument_list|)
argument_list|,
name|InfoStream
operator|.
name|getDefault
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|sis
operator|.
name|counter
argument_list|)
expr_stmt|;
comment|// add trash per-segment file
name|dir
operator|.
name|createOutput
argument_list|(
name|IndexFileNames
operator|.
name|segmentFileName
argument_list|(
literal|"_0"
argument_list|,
literal|""
argument_list|,
literal|"foo"
argument_list|)
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// ensure inflation
name|inflateGens
argument_list|(
name|sis
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|dir
operator|.
name|listAll
argument_list|()
argument_list|)
argument_list|,
name|InfoStream
operator|.
name|getDefault
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|sis
operator|.
name|counter
argument_list|)
expr_stmt|;
comment|// add trash per-segment file
name|dir
operator|.
name|createOutput
argument_list|(
name|IndexFileNames
operator|.
name|segmentFileName
argument_list|(
literal|"_3"
argument_list|,
literal|""
argument_list|,
literal|"foo"
argument_list|)
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|inflateGens
argument_list|(
name|sis
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|dir
operator|.
name|listAll
argument_list|()
argument_list|)
argument_list|,
name|InfoStream
operator|.
name|getDefault
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|sis
operator|.
name|counter
argument_list|)
expr_stmt|;
comment|// ensure we write _4 segment next
name|IndexWriter
name|iw
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|iw
operator|.
name|addDocument
argument_list|(
operator|new
name|Document
argument_list|()
argument_list|)
expr_stmt|;
name|iw
operator|.
name|commit
argument_list|()
expr_stmt|;
name|iw
operator|.
name|close
argument_list|()
expr_stmt|;
name|sis
operator|=
name|SegmentInfos
operator|.
name|readLatestCommit
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"_4"
argument_list|,
name|sis
operator|.
name|info
argument_list|(
literal|0
argument_list|)
operator|.
name|info
operator|.
name|name
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|sis
operator|.
name|counter
argument_list|)
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testGenerationInflation
specifier|public
name|void
name|testGenerationInflation
parameter_list|()
throws|throws
name|IOException
block|{
name|MockDirectoryWrapper
name|dir
init|=
name|newMockDirectory
argument_list|()
decl_stmt|;
comment|// initial commit
name|IndexWriter
name|iw
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|iw
operator|.
name|addDocument
argument_list|(
operator|new
name|Document
argument_list|()
argument_list|)
expr_stmt|;
name|iw
operator|.
name|commit
argument_list|()
expr_stmt|;
name|iw
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// no deletes: start at 1
name|SegmentInfos
name|sis
init|=
name|SegmentInfos
operator|.
name|readLatestCommit
argument_list|(
name|dir
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|sis
operator|.
name|info
argument_list|(
literal|0
argument_list|)
operator|.
name|getNextDelGen
argument_list|()
argument_list|)
expr_stmt|;
comment|// no inflation
name|inflateGens
argument_list|(
name|sis
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|dir
operator|.
name|listAll
argument_list|()
argument_list|)
argument_list|,
name|InfoStream
operator|.
name|getDefault
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|sis
operator|.
name|info
argument_list|(
literal|0
argument_list|)
operator|.
name|getNextDelGen
argument_list|()
argument_list|)
expr_stmt|;
comment|// add trash per-segment deletes file
name|dir
operator|.
name|createOutput
argument_list|(
name|IndexFileNames
operator|.
name|fileNameFromGeneration
argument_list|(
literal|"_0"
argument_list|,
literal|"del"
argument_list|,
literal|2
argument_list|)
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// ensure inflation
name|inflateGens
argument_list|(
name|sis
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|dir
operator|.
name|listAll
argument_list|()
argument_list|)
argument_list|,
name|InfoStream
operator|.
name|getDefault
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|sis
operator|.
name|info
argument_list|(
literal|0
argument_list|)
operator|.
name|getNextDelGen
argument_list|()
argument_list|)
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testTrashyFile
specifier|public
name|void
name|testTrashyFile
parameter_list|()
throws|throws
name|IOException
block|{
name|MockDirectoryWrapper
name|dir
init|=
name|newMockDirectory
argument_list|()
decl_stmt|;
name|dir
operator|.
name|setCheckIndexOnClose
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// TODO: maybe handle such trash better elsewhere...
comment|// empty commit
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
literal|null
argument_list|)
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|SegmentInfos
name|sis
init|=
name|SegmentInfos
operator|.
name|readLatestCommit
argument_list|(
name|dir
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|sis
operator|.
name|getGeneration
argument_list|()
argument_list|)
expr_stmt|;
comment|// add trash file
name|dir
operator|.
name|createOutput
argument_list|(
name|IndexFileNames
operator|.
name|SEGMENTS
operator|+
literal|"_"
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// no inflation
name|inflateGens
argument_list|(
name|sis
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|dir
operator|.
name|listAll
argument_list|()
argument_list|)
argument_list|,
name|InfoStream
operator|.
name|getDefault
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|sis
operator|.
name|getGeneration
argument_list|()
argument_list|)
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testTrashyGenFile
specifier|public
name|void
name|testTrashyGenFile
parameter_list|()
throws|throws
name|IOException
block|{
name|MockDirectoryWrapper
name|dir
init|=
name|newMockDirectory
argument_list|()
decl_stmt|;
comment|// initial commit
name|IndexWriter
name|iw
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|iw
operator|.
name|addDocument
argument_list|(
operator|new
name|Document
argument_list|()
argument_list|)
expr_stmt|;
name|iw
operator|.
name|commit
argument_list|()
expr_stmt|;
name|iw
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// no deletes: start at 1
name|SegmentInfos
name|sis
init|=
name|SegmentInfos
operator|.
name|readLatestCommit
argument_list|(
name|dir
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|sis
operator|.
name|info
argument_list|(
literal|0
argument_list|)
operator|.
name|getNextDelGen
argument_list|()
argument_list|)
expr_stmt|;
comment|// add trash file
name|dir
operator|.
name|createOutput
argument_list|(
literal|"_1_A"
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// no inflation
name|inflateGens
argument_list|(
name|sis
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|dir
operator|.
name|listAll
argument_list|()
argument_list|)
argument_list|,
name|InfoStream
operator|.
name|getDefault
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|sis
operator|.
name|info
argument_list|(
literal|0
argument_list|)
operator|.
name|getNextDelGen
argument_list|()
argument_list|)
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// IFD's inflater is "raw" and expects to only see codec files,
comment|// and rightfully so, it filters them out.
DECL|method|inflateGens
specifier|static
name|void
name|inflateGens
parameter_list|(
name|SegmentInfos
name|sis
parameter_list|,
name|Collection
argument_list|<
name|String
argument_list|>
name|files
parameter_list|,
name|InfoStream
name|stream
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|filtered
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|file
range|:
name|files
control|)
block|{
if|if
condition|(
name|IndexFileNames
operator|.
name|CODEC_FILE_PATTERN
operator|.
name|matcher
argument_list|(
name|file
argument_list|)
operator|.
name|matches
argument_list|()
operator|||
name|file
operator|.
name|startsWith
argument_list|(
name|IndexFileNames
operator|.
name|SEGMENTS
argument_list|)
operator|||
name|file
operator|.
name|startsWith
argument_list|(
name|IndexFileNames
operator|.
name|PENDING_SEGMENTS
argument_list|)
condition|)
block|{
name|filtered
operator|.
name|add
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
block|}
name|IndexFileDeleter
operator|.
name|inflateGens
argument_list|(
name|sis
argument_list|,
name|filtered
argument_list|,
name|stream
argument_list|)
expr_stmt|;
block|}
comment|// LUCENE-5919
DECL|method|testExcInDecRef
specifier|public
name|void
name|testExcInDecRef
parameter_list|()
throws|throws
name|Throwable
block|{
name|MockDirectoryWrapper
name|dir
init|=
name|newMockDirectory
argument_list|()
decl_stmt|;
comment|// disable slow things: we don't rely upon sleeps here.
name|dir
operator|.
name|setThrottling
argument_list|(
name|MockDirectoryWrapper
operator|.
name|Throttling
operator|.
name|NEVER
argument_list|)
expr_stmt|;
name|dir
operator|.
name|setUseSlowOpenClosers
argument_list|(
literal|false
argument_list|)
expr_stmt|;
specifier|final
name|AtomicBoolean
name|doFailExc
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
name|dir
operator|.
name|failOn
argument_list|(
operator|new
name|MockDirectoryWrapper
operator|.
name|Failure
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|eval
parameter_list|(
name|MockDirectoryWrapper
name|dir
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|doFailExc
operator|.
name|get
argument_list|()
operator|&&
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|4
argument_list|)
operator|==
literal|1
condition|)
block|{
name|Exception
name|e
init|=
operator|new
name|Exception
argument_list|()
decl_stmt|;
name|StackTraceElement
name|stack
index|[]
init|=
name|e
operator|.
name|getStackTrace
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|stack
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|stack
index|[
name|i
index|]
operator|.
name|getClassName
argument_list|()
operator|.
name|equals
argument_list|(
name|IndexFileDeleter
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
operator|&&
name|stack
index|[
name|i
index|]
operator|.
name|getMethodName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"decRef"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"fake fail"
argument_list|)
throw|;
block|}
block|}
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|IndexWriterConfig
name|iwc
init|=
name|newIndexWriterConfig
argument_list|(
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
comment|//iwc.setMergeScheduler(new SerialMergeScheduler());
name|MergeScheduler
name|ms
init|=
name|iwc
operator|.
name|getMergeScheduler
argument_list|()
decl_stmt|;
if|if
condition|(
name|ms
operator|instanceof
name|ConcurrentMergeScheduler
condition|)
block|{
specifier|final
name|ConcurrentMergeScheduler
name|suppressFakeFail
init|=
operator|new
name|ConcurrentMergeScheduler
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|void
name|handleMergeException
parameter_list|(
name|Directory
name|dir
parameter_list|,
name|Throwable
name|exc
parameter_list|)
block|{
comment|// suppress only FakeIOException:
if|if
condition|(
name|exc
operator|instanceof
name|RuntimeException
operator|&&
name|exc
operator|.
name|getMessage
argument_list|()
operator|.
name|equals
argument_list|(
literal|"fake fail"
argument_list|)
condition|)
block|{
comment|// ok to ignore
block|}
elseif|else
if|if
condition|(
operator|(
name|exc
operator|instanceof
name|AlreadyClosedException
operator|||
name|exc
operator|instanceof
name|IllegalStateException
operator|)
operator|&&
name|exc
operator|.
name|getCause
argument_list|()
operator|!=
literal|null
operator|&&
literal|"fake fail"
operator|.
name|equals
argument_list|(
name|exc
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|)
condition|)
block|{
comment|// also ok to ignore
block|}
else|else
block|{
name|super
operator|.
name|handleMergeException
argument_list|(
name|dir
argument_list|,
name|exc
argument_list|)
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
specifier|final
name|ConcurrentMergeScheduler
name|cms
init|=
operator|(
name|ConcurrentMergeScheduler
operator|)
name|ms
decl_stmt|;
name|suppressFakeFail
operator|.
name|setMaxMergesAndThreads
argument_list|(
name|cms
operator|.
name|getMaxMergeCount
argument_list|()
argument_list|,
name|cms
operator|.
name|getMaxThreadCount
argument_list|()
argument_list|)
expr_stmt|;
name|iwc
operator|.
name|setMergeScheduler
argument_list|(
name|suppressFakeFail
argument_list|)
expr_stmt|;
block|}
name|RandomIndexWriter
name|w
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|,
name|iwc
argument_list|)
decl_stmt|;
comment|// Since we hit exc during merging, a partial
comment|// forceMerge can easily return when there are still
comment|// too many segments in the index:
name|w
operator|.
name|setDoRandomForceMergeAssert
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|doFailExc
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|int
name|ITERS
init|=
name|atLeast
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|iter
init|=
literal|0
init|;
name|iter
operator|<
name|ITERS
condition|;
name|iter
operator|++
control|)
block|{
try|try
block|{
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
operator|==
literal|5
condition|)
block|{
name|w
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
operator|==
literal|7
condition|)
block|{
name|w
operator|.
name|getReader
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newTextField
argument_list|(
literal|"field"
argument_list|,
literal|"some text"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|t
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"fake fail"
argument_list|)
operator|||
operator|(
name|t
operator|.
name|getCause
argument_list|()
operator|!=
literal|null
operator|&&
name|t
operator|.
name|getCause
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"fake fail"
argument_list|)
operator|)
condition|)
block|{
comment|// ok
block|}
else|else
block|{
throw|throw
name|t
throw|;
block|}
block|}
block|}
name|doFailExc
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class
end_unit
