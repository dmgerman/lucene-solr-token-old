begin_unit
begin_package
DECL|package|org.apache.lucene.index
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|Codec
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|FieldsConsumer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|FieldsProducer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|PostingsConsumer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|TermStats
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|TermsConsumer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|FieldInfo
operator|.
name|IndexOptions
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IOContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Bits
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Constants
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|FixedBitSet
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|_TestUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import
begin_comment
comment|/* NOTE: This test focuses on the postings  * (docs/freqs/positions/payloads/offsets) impl, not the  * terms dict.  The [stretch] goal is for this test to be  * so thorough in testing a new PostingsFormat that if this  * test passes, then all Lucene/Solr tests should also pass.  Ie,  * if there is some bug in a given PostingsFormat that this  * test fails to catch then this test needs to be improved! */
end_comment
begin_comment
comment|// TODO can we make it easy for testing to pair up a "random terms dict impl" with your postings base format...
end_comment
begin_comment
comment|// TODO test when you reuse after skipping a term or two, eg the block reuse case
end_comment
begin_comment
comment|// TODO hmm contract says .doc() can return NO_MORE_DOCS
end_comment
begin_comment
comment|// before nextDoc too...?
end_comment
begin_comment
comment|/* TODO   - threads   - assert doc=-1 before any nextDoc   - if a PF passes this test but fails other tests then this     test has a bug!!   - test tricky reuse cases, eg across fields   - verify you get null if you pass needFreq/needOffset but     they weren't indexed */
end_comment
begin_class
DECL|class|TestPostingsFormat
specifier|public
class|class
name|TestPostingsFormat
extends|extends
name|LuceneTestCase
block|{
DECL|enum|Option
specifier|private
enum|enum
name|Option
block|{
comment|// Sometimes use .advance():
DECL|enum constant|SKIPPING
name|SKIPPING
block|,
comment|// Sometimes reuse the Docs/AndPositionsEnum across terms:
DECL|enum constant|REUSE_ENUMS
name|REUSE_ENUMS
block|,
comment|// Sometimes pass non-null live docs:
DECL|enum constant|LIVE_DOCS
name|LIVE_DOCS
block|,
comment|// Sometimes seek to term using previously saved TermState:
DECL|enum constant|TERM_STATE
name|TERM_STATE
block|,
comment|// Sometimes don't fully consume docs from the enum
DECL|enum constant|PARTIAL_DOC_CONSUME
name|PARTIAL_DOC_CONSUME
block|,
comment|// Sometimes don't fully consume positions at each doc
DECL|enum constant|PARTIAL_POS_CONSUME
name|PARTIAL_POS_CONSUME
block|,
comment|// Sometimes check payloads
DECL|enum constant|PAYLOADS
name|PAYLOADS
block|,
comment|// Test w/ multiple threads
DECL|enum constant|THREADS
name|THREADS
block|}
empty_stmt|;
DECL|class|FieldAndTerm
specifier|private
specifier|static
class|class
name|FieldAndTerm
block|{
DECL|field|field
name|String
name|field
decl_stmt|;
DECL|field|term
name|BytesRef
name|term
decl_stmt|;
DECL|method|FieldAndTerm
specifier|public
name|FieldAndTerm
parameter_list|(
name|String
name|field
parameter_list|,
name|BytesRef
name|term
parameter_list|)
block|{
name|this
operator|.
name|field
operator|=
name|field
expr_stmt|;
name|this
operator|.
name|term
operator|=
name|BytesRef
operator|.
name|deepCopyOf
argument_list|(
name|term
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|Position
specifier|private
specifier|static
class|class
name|Position
block|{
DECL|field|position
name|int
name|position
decl_stmt|;
DECL|field|payload
name|byte
index|[]
name|payload
decl_stmt|;
DECL|field|startOffset
name|int
name|startOffset
decl_stmt|;
DECL|field|endOffset
name|int
name|endOffset
decl_stmt|;
block|}
DECL|class|Posting
specifier|private
specifier|static
class|class
name|Posting
implements|implements
name|Comparable
argument_list|<
name|Posting
argument_list|>
block|{
DECL|field|docID
name|int
name|docID
decl_stmt|;
DECL|field|positions
name|List
argument_list|<
name|Position
argument_list|>
name|positions
decl_stmt|;
DECL|method|compareTo
specifier|public
name|int
name|compareTo
parameter_list|(
name|Posting
name|other
parameter_list|)
block|{
return|return
name|docID
operator|-
name|other
operator|.
name|docID
return|;
block|}
block|}
comment|// Holds all postings:
DECL|field|fields
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|BytesRef
argument_list|,
name|List
argument_list|<
name|Posting
argument_list|>
argument_list|>
argument_list|>
name|fields
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|BytesRef
argument_list|,
name|List
argument_list|<
name|Posting
argument_list|>
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
comment|// Holds only live doc postings:
DECL|field|fieldsLive
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|BytesRef
argument_list|,
name|List
argument_list|<
name|Posting
argument_list|>
argument_list|>
argument_list|>
name|fieldsLive
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|BytesRef
argument_list|,
name|List
argument_list|<
name|Posting
argument_list|>
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|fieldInfos
specifier|private
specifier|static
name|FieldInfos
name|fieldInfos
decl_stmt|;
DECL|field|maxDocID
specifier|private
specifier|static
name|int
name|maxDocID
decl_stmt|;
DECL|field|globalLiveDocs
specifier|private
specifier|static
name|FixedBitSet
name|globalLiveDocs
decl_stmt|;
DECL|field|allTerms
specifier|private
specifier|static
name|List
argument_list|<
name|FieldAndTerm
argument_list|>
name|allTerms
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|createPostings
specifier|public
specifier|static
name|void
name|createPostings
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|int
name|numFields
init|=
name|_TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|5
argument_list|)
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TEST: "
operator|+
name|numFields
operator|+
literal|" fields"
argument_list|)
expr_stmt|;
block|}
name|FieldInfo
index|[]
name|fieldInfoArray
init|=
operator|new
name|FieldInfo
index|[
name|numFields
index|]
decl_stmt|;
name|int
name|fieldUpto
init|=
literal|0
decl_stmt|;
name|int
name|numMediumTerms
init|=
literal|0
decl_stmt|;
name|int
name|numBigTerms
init|=
literal|0
decl_stmt|;
name|int
name|numManyPositions
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|fieldUpto
operator|<
name|numFields
condition|)
block|{
name|String
name|field
init|=
name|_TestUtil
operator|.
name|randomSimpleString
argument_list|(
name|random
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|.
name|containsKey
argument_list|(
name|field
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|boolean
name|fieldHasPayloads
init|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
decl_stmt|;
name|fieldInfoArray
index|[
name|fieldUpto
index|]
operator|=
operator|new
name|FieldInfo
argument_list|(
name|field
argument_list|,
literal|true
argument_list|,
name|fieldUpto
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|fieldHasPayloads
argument_list|,
name|IndexOptions
operator|.
name|DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS
argument_list|,
literal|null
argument_list|,
name|DocValues
operator|.
name|Type
operator|.
name|FIXED_INTS_8
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fieldUpto
operator|++
expr_stmt|;
name|Map
argument_list|<
name|BytesRef
argument_list|,
name|List
argument_list|<
name|Posting
argument_list|>
argument_list|>
name|postings
init|=
operator|new
name|TreeMap
argument_list|<
name|BytesRef
argument_list|,
name|List
argument_list|<
name|Posting
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|fields
operator|.
name|put
argument_list|(
name|field
argument_list|,
name|postings
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|seenTerms
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|// TODO
comment|//final int numTerms = atLeast(10);
specifier|final
name|int
name|numTerms
init|=
literal|4
decl_stmt|;
for|for
control|(
name|int
name|termUpto
init|=
literal|0
init|;
name|termUpto
operator|<
name|numTerms
condition|;
name|termUpto
operator|++
control|)
block|{
name|String
name|term
init|=
name|_TestUtil
operator|.
name|randomSimpleString
argument_list|(
name|random
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|seenTerms
operator|.
name|contains
argument_list|(
name|term
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|seenTerms
operator|.
name|add
argument_list|(
name|term
argument_list|)
expr_stmt|;
name|int
name|numDocs
decl_stmt|;
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
operator|==
literal|3
operator|&&
name|numBigTerms
operator|<
literal|3
condition|)
block|{
comment|// 10% of the time make a highish freq term:
name|numDocs
operator|=
name|_TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|50000
argument_list|,
literal|70000
argument_list|)
expr_stmt|;
name|numBigTerms
operator|++
expr_stmt|;
name|term
operator|=
literal|"big_"
operator|+
name|term
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
operator|==
literal|3
operator|&&
name|numMediumTerms
operator|<
literal|10
condition|)
block|{
comment|// 10% of the time make a medium freq term:
comment|// TODO not high enough to test level 1 skipping:
name|numDocs
operator|=
name|atLeast
argument_list|(
literal|3000
argument_list|)
expr_stmt|;
name|numMediumTerms
operator|++
expr_stmt|;
name|term
operator|=
literal|"medium_"
operator|+
name|term
expr_stmt|;
block|}
else|else
block|{
comment|// Low freq term:
name|numDocs
operator|=
name|_TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|40
argument_list|)
expr_stmt|;
name|term
operator|=
literal|"low_"
operator|+
name|term
expr_stmt|;
block|}
name|numDocs
operator|*=
name|RANDOM_MULTIPLIER
expr_stmt|;
name|List
argument_list|<
name|Posting
argument_list|>
name|termPostings
init|=
operator|new
name|ArrayList
argument_list|<
name|Posting
argument_list|>
argument_list|()
decl_stmt|;
name|postings
operator|.
name|put
argument_list|(
operator|new
name|BytesRef
argument_list|(
name|term
argument_list|)
argument_list|,
name|termPostings
argument_list|)
expr_stmt|;
name|int
name|docID
init|=
literal|0
decl_stmt|;
comment|// TODO: more realistic to inversely tie this to numDocs:
name|int
name|maxDocSpacing
init|=
name|_TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|100
argument_list|)
decl_stmt|;
comment|// 10% of the time create big payloads:
name|int
name|payloadSize
decl_stmt|;
if|if
condition|(
operator|!
name|fieldHasPayloads
condition|)
block|{
name|payloadSize
operator|=
literal|0
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
operator|==
literal|7
condition|)
block|{
name|payloadSize
operator|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|50
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|payloadSize
operator|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
name|boolean
name|fixedPayloads
init|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|docUpto
init|=
literal|0
init|;
name|docUpto
operator|<
name|numDocs
condition|;
name|docUpto
operator|++
control|)
block|{
if|if
condition|(
name|docUpto
operator|==
literal|0
operator|&&
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
comment|// Sometimes index docID = 0
block|}
elseif|else
if|if
condition|(
name|maxDocSpacing
operator|==
literal|1
condition|)
block|{
name|docID
operator|++
expr_stmt|;
block|}
else|else
block|{
comment|// TODO: sometimes have a biggish gap here!
name|docID
operator|+=
name|_TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
name|maxDocSpacing
argument_list|)
expr_stmt|;
block|}
name|Posting
name|posting
init|=
operator|new
name|Posting
argument_list|()
decl_stmt|;
name|posting
operator|.
name|docID
operator|=
name|docID
expr_stmt|;
name|maxDocID
operator|=
name|Math
operator|.
name|max
argument_list|(
name|docID
argument_list|,
name|maxDocID
argument_list|)
expr_stmt|;
name|posting
operator|.
name|positions
operator|=
operator|new
name|ArrayList
argument_list|<
name|Position
argument_list|>
argument_list|()
expr_stmt|;
name|termPostings
operator|.
name|add
argument_list|(
name|posting
argument_list|)
expr_stmt|;
name|int
name|freq
decl_stmt|;
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|30
argument_list|)
operator|==
literal|17
operator|&&
name|numManyPositions
operator|<
literal|10
condition|)
block|{
name|freq
operator|=
name|_TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|numManyPositions
operator|++
expr_stmt|;
block|}
else|else
block|{
name|freq
operator|=
name|_TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|20
argument_list|)
expr_stmt|;
block|}
name|int
name|pos
init|=
literal|0
decl_stmt|;
name|int
name|offset
init|=
literal|0
decl_stmt|;
name|int
name|posSpacing
init|=
name|_TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|100
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|posUpto
init|=
literal|0
init|;
name|posUpto
operator|<
name|freq
condition|;
name|posUpto
operator|++
control|)
block|{
if|if
condition|(
name|posUpto
operator|==
literal|0
operator|&&
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
comment|// Sometimes index pos = 0
block|}
elseif|else
if|if
condition|(
name|posSpacing
operator|==
literal|1
condition|)
block|{
name|pos
operator|++
expr_stmt|;
block|}
else|else
block|{
name|pos
operator|+=
name|_TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
name|posSpacing
argument_list|)
expr_stmt|;
block|}
name|Position
name|position
init|=
operator|new
name|Position
argument_list|()
decl_stmt|;
name|posting
operator|.
name|positions
operator|.
name|add
argument_list|(
name|position
argument_list|)
expr_stmt|;
name|position
operator|.
name|position
operator|=
name|pos
expr_stmt|;
if|if
condition|(
name|payloadSize
operator|!=
literal|0
condition|)
block|{
if|if
condition|(
name|fixedPayloads
condition|)
block|{
name|position
operator|.
name|payload
operator|=
operator|new
name|byte
index|[
name|payloadSize
index|]
expr_stmt|;
block|}
else|else
block|{
name|int
name|thisPayloadSize
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|payloadSize
argument_list|)
decl_stmt|;
if|if
condition|(
name|thisPayloadSize
operator|!=
literal|0
condition|)
block|{
name|position
operator|.
name|payload
operator|=
operator|new
name|byte
index|[
name|thisPayloadSize
index|]
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|position
operator|.
name|payload
operator|!=
literal|null
condition|)
block|{
name|random
argument_list|()
operator|.
name|nextBytes
argument_list|(
name|position
operator|.
name|payload
argument_list|)
expr_stmt|;
block|}
name|position
operator|.
name|startOffset
operator|=
name|offset
operator|+
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|position
operator|.
name|endOffset
operator|=
name|position
operator|.
name|startOffset
operator|+
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|offset
operator|=
name|position
operator|.
name|endOffset
expr_stmt|;
block|}
block|}
block|}
block|}
name|fieldInfos
operator|=
operator|new
name|FieldInfos
argument_list|(
name|fieldInfoArray
argument_list|)
expr_stmt|;
name|globalLiveDocs
operator|=
operator|new
name|FixedBitSet
argument_list|(
literal|1
operator|+
name|maxDocID
argument_list|)
expr_stmt|;
name|double
name|liveRatio
init|=
name|random
argument_list|()
operator|.
name|nextDouble
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1
operator|+
name|maxDocID
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextDouble
argument_list|()
operator|<=
name|liveRatio
condition|)
block|{
name|globalLiveDocs
operator|.
name|set
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Pre-filter postings by globalLiveDocs:
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|BytesRef
argument_list|,
name|List
argument_list|<
name|Posting
argument_list|>
argument_list|>
argument_list|>
name|fieldEnt
range|:
name|fields
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Map
argument_list|<
name|BytesRef
argument_list|,
name|List
argument_list|<
name|Posting
argument_list|>
argument_list|>
name|postingsLive
init|=
operator|new
name|TreeMap
argument_list|<
name|BytesRef
argument_list|,
name|List
argument_list|<
name|Posting
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|fieldsLive
operator|.
name|put
argument_list|(
name|fieldEnt
operator|.
name|getKey
argument_list|()
argument_list|,
name|postingsLive
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|BytesRef
argument_list|,
name|List
argument_list|<
name|Posting
argument_list|>
argument_list|>
name|termEnt
range|:
name|fieldEnt
operator|.
name|getValue
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|List
argument_list|<
name|Posting
argument_list|>
name|termPostingsLive
init|=
operator|new
name|ArrayList
argument_list|<
name|Posting
argument_list|>
argument_list|()
decl_stmt|;
name|postingsLive
operator|.
name|put
argument_list|(
name|termEnt
operator|.
name|getKey
argument_list|()
argument_list|,
name|termPostingsLive
argument_list|)
expr_stmt|;
for|for
control|(
name|Posting
name|posting
range|:
name|termEnt
operator|.
name|getValue
argument_list|()
control|)
block|{
if|if
condition|(
name|globalLiveDocs
operator|.
name|get
argument_list|(
name|posting
operator|.
name|docID
argument_list|)
condition|)
block|{
name|termPostingsLive
operator|.
name|add
argument_list|(
name|posting
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|allTerms
operator|=
operator|new
name|ArrayList
argument_list|<
name|FieldAndTerm
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|BytesRef
argument_list|,
name|List
argument_list|<
name|Posting
argument_list|>
argument_list|>
argument_list|>
name|fieldEnt
range|:
name|fields
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|field
init|=
name|fieldEnt
operator|.
name|getKey
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|BytesRef
argument_list|,
name|List
argument_list|<
name|Posting
argument_list|>
argument_list|>
name|termEnt
range|:
name|fieldEnt
operator|.
name|getValue
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|allTerms
operator|.
name|add
argument_list|(
operator|new
name|FieldAndTerm
argument_list|(
name|field
argument_list|,
name|termEnt
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TEST: done init postings; maxDocID="
operator|+
name|maxDocID
operator|+
literal|"; "
operator|+
name|allTerms
operator|.
name|size
argument_list|()
operator|+
literal|" total terms, across "
operator|+
name|fieldInfos
operator|.
name|size
argument_list|()
operator|+
literal|" fields"
argument_list|)
expr_stmt|;
block|}
block|}
comment|// TODO maybe instead of @BeforeClass just make a single test run: build postings& index& test it?
DECL|field|currentFieldInfos
specifier|private
name|FieldInfos
name|currentFieldInfos
decl_stmt|;
comment|// maxAllowed = the "highest" we can index, but we will still
comment|// randomly index at lower IndexOption
DECL|method|buildIndex
specifier|private
name|FieldsProducer
name|buildIndex
parameter_list|(
name|Directory
name|dir
parameter_list|,
name|IndexOptions
name|maxAllowed
parameter_list|,
name|boolean
name|allowPayloads
parameter_list|)
throws|throws
name|IOException
block|{
name|SegmentInfo
name|segmentInfo
init|=
operator|new
name|SegmentInfo
argument_list|(
name|dir
argument_list|,
name|Constants
operator|.
name|LUCENE_MAIN_VERSION
argument_list|,
literal|"_0"
argument_list|,
literal|1
operator|+
name|maxDocID
argument_list|,
literal|false
argument_list|,
name|Codec
operator|.
name|getDefault
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|int
name|maxIndexOption
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|IndexOptions
operator|.
name|values
argument_list|()
argument_list|)
operator|.
name|indexOf
argument_list|(
name|maxAllowed
argument_list|)
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\nTEST: now build index"
argument_list|)
expr_stmt|;
block|}
name|int
name|maxIndexOptionNoOffsets
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|IndexOptions
operator|.
name|values
argument_list|()
argument_list|)
operator|.
name|indexOf
argument_list|(
name|IndexOptions
operator|.
name|DOCS_AND_FREQS_AND_POSITIONS
argument_list|)
decl_stmt|;
comment|// TODO use allowPayloads
name|FieldInfo
index|[]
name|newFieldInfoArray
init|=
operator|new
name|FieldInfo
index|[
name|fields
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|fieldUpto
init|=
literal|0
init|;
name|fieldUpto
operator|<
name|fields
operator|.
name|size
argument_list|()
condition|;
name|fieldUpto
operator|++
control|)
block|{
name|FieldInfo
name|oldFieldInfo
init|=
name|fieldInfos
operator|.
name|fieldInfo
argument_list|(
name|fieldUpto
argument_list|)
decl_stmt|;
name|String
name|pf
init|=
name|_TestUtil
operator|.
name|getPostingsFormat
argument_list|(
name|oldFieldInfo
operator|.
name|name
argument_list|)
decl_stmt|;
name|int
name|fieldMaxIndexOption
decl_stmt|;
if|if
condition|(
name|doesntSupportOffsets
operator|.
name|contains
argument_list|(
name|pf
argument_list|)
condition|)
block|{
name|fieldMaxIndexOption
operator|=
name|Math
operator|.
name|min
argument_list|(
name|maxIndexOptionNoOffsets
argument_list|,
name|maxIndexOption
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fieldMaxIndexOption
operator|=
name|maxIndexOption
expr_stmt|;
block|}
comment|// Randomly picked the IndexOptions to index this
comment|// field with:
name|IndexOptions
name|indexOptions
init|=
name|IndexOptions
operator|.
name|values
argument_list|()
index|[
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|1
operator|+
name|fieldMaxIndexOption
argument_list|)
index|]
decl_stmt|;
name|boolean
name|doPayloads
init|=
name|indexOptions
operator|.
name|compareTo
argument_list|(
name|IndexOptions
operator|.
name|DOCS_AND_FREQS_AND_POSITIONS
argument_list|)
operator|>=
literal|0
operator|&&
name|allowPayloads
decl_stmt|;
name|newFieldInfoArray
index|[
name|fieldUpto
index|]
operator|=
operator|new
name|FieldInfo
argument_list|(
name|oldFieldInfo
operator|.
name|name
argument_list|,
literal|true
argument_list|,
name|fieldUpto
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|doPayloads
argument_list|,
name|indexOptions
argument_list|,
literal|null
argument_list|,
name|DocValues
operator|.
name|Type
operator|.
name|FIXED_INTS_8
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|FieldInfos
name|newFieldInfos
init|=
operator|new
name|FieldInfos
argument_list|(
name|newFieldInfoArray
argument_list|)
decl_stmt|;
name|SegmentWriteState
name|writeState
init|=
operator|new
name|SegmentWriteState
argument_list|(
literal|null
argument_list|,
name|dir
argument_list|,
name|segmentInfo
argument_list|,
name|newFieldInfos
argument_list|,
literal|32
argument_list|,
literal|null
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
name|FieldsConsumer
name|fieldsConsumer
init|=
name|Codec
operator|.
name|getDefault
argument_list|()
operator|.
name|postingsFormat
argument_list|()
operator|.
name|fieldsConsumer
argument_list|(
name|writeState
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|BytesRef
argument_list|,
name|List
argument_list|<
name|Posting
argument_list|>
argument_list|>
argument_list|>
name|fieldEnt
range|:
name|fields
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|field
init|=
name|fieldEnt
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|BytesRef
argument_list|,
name|List
argument_list|<
name|Posting
argument_list|>
argument_list|>
name|terms
init|=
name|fieldEnt
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|FieldInfo
name|fieldInfo
init|=
name|newFieldInfos
operator|.
name|fieldInfo
argument_list|(
name|field
argument_list|)
decl_stmt|;
name|IndexOptions
name|indexOptions
init|=
name|fieldInfo
operator|.
name|getIndexOptions
argument_list|()
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"field="
operator|+
name|field
operator|+
literal|" indexOtions="
operator|+
name|indexOptions
argument_list|)
expr_stmt|;
block|}
name|boolean
name|doFreq
init|=
name|indexOptions
operator|.
name|compareTo
argument_list|(
name|IndexOptions
operator|.
name|DOCS_AND_FREQS
argument_list|)
operator|>=
literal|0
decl_stmt|;
name|boolean
name|doPos
init|=
name|indexOptions
operator|.
name|compareTo
argument_list|(
name|IndexOptions
operator|.
name|DOCS_AND_FREQS_AND_POSITIONS
argument_list|)
operator|>=
literal|0
decl_stmt|;
name|boolean
name|doPayloads
init|=
name|indexOptions
operator|.
name|compareTo
argument_list|(
name|IndexOptions
operator|.
name|DOCS_AND_FREQS_AND_POSITIONS
argument_list|)
operator|>=
literal|0
operator|&&
name|allowPayloads
decl_stmt|;
name|boolean
name|doOffsets
init|=
name|indexOptions
operator|.
name|compareTo
argument_list|(
name|IndexOptions
operator|.
name|DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS
argument_list|)
operator|>=
literal|0
decl_stmt|;
name|TermsConsumer
name|termsConsumer
init|=
name|fieldsConsumer
operator|.
name|addField
argument_list|(
name|fieldInfo
argument_list|)
decl_stmt|;
name|long
name|sumTotalTF
init|=
literal|0
decl_stmt|;
name|long
name|sumDF
init|=
literal|0
decl_stmt|;
name|FixedBitSet
name|seenDocs
init|=
operator|new
name|FixedBitSet
argument_list|(
name|maxDocID
operator|+
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|BytesRef
argument_list|,
name|List
argument_list|<
name|Posting
argument_list|>
argument_list|>
name|termEnt
range|:
name|terms
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|BytesRef
name|term
init|=
name|termEnt
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Posting
argument_list|>
name|postings
init|=
name|termEnt
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  term="
operator|+
name|field
operator|+
literal|":"
operator|+
name|term
operator|.
name|utf8ToString
argument_list|()
operator|+
literal|" docFreq="
operator|+
name|postings
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|PostingsConsumer
name|postingsConsumer
init|=
name|termsConsumer
operator|.
name|startTerm
argument_list|(
name|term
argument_list|)
decl_stmt|;
name|long
name|totalTF
init|=
literal|0
decl_stmt|;
name|int
name|docCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Posting
name|posting
range|:
name|postings
control|)
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"    "
operator|+
name|docCount
operator|+
literal|": docID="
operator|+
name|posting
operator|.
name|docID
operator|+
literal|" freq="
operator|+
name|posting
operator|.
name|positions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|postingsConsumer
operator|.
name|startDoc
argument_list|(
name|posting
operator|.
name|docID
argument_list|,
name|doFreq
condition|?
name|posting
operator|.
name|positions
operator|.
name|size
argument_list|()
else|:
operator|-
literal|1
argument_list|)
expr_stmt|;
name|seenDocs
operator|.
name|set
argument_list|(
name|posting
operator|.
name|docID
argument_list|)
expr_stmt|;
if|if
condition|(
name|doPos
condition|)
block|{
name|totalTF
operator|+=
name|posting
operator|.
name|positions
operator|.
name|size
argument_list|()
expr_stmt|;
for|for
control|(
name|Position
name|pos
range|:
name|posting
operator|.
name|positions
control|)
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
if|if
condition|(
name|doPayloads
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"      pos="
operator|+
name|pos
operator|.
name|position
operator|+
literal|" payload="
operator|+
operator|(
name|pos
operator|.
name|payload
operator|==
literal|null
condition|?
literal|"null"
else|:
name|pos
operator|.
name|payload
operator|.
name|length
operator|+
literal|" bytes"
operator|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"      pos="
operator|+
name|pos
operator|.
name|position
argument_list|)
expr_stmt|;
block|}
block|}
name|postingsConsumer
operator|.
name|addPosition
argument_list|(
name|pos
operator|.
name|position
argument_list|,
operator|(
name|doPayloads
operator|&&
name|pos
operator|.
name|payload
operator|!=
literal|null
operator|)
condition|?
operator|new
name|BytesRef
argument_list|(
name|pos
operator|.
name|payload
argument_list|)
else|:
literal|null
argument_list|,
name|doOffsets
condition|?
name|pos
operator|.
name|startOffset
else|:
operator|-
literal|1
argument_list|,
name|doOffsets
condition|?
name|pos
operator|.
name|endOffset
else|:
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|doFreq
condition|)
block|{
name|totalTF
operator|+=
name|posting
operator|.
name|positions
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|totalTF
operator|++
expr_stmt|;
block|}
name|postingsConsumer
operator|.
name|finishDoc
argument_list|()
expr_stmt|;
name|docCount
operator|++
expr_stmt|;
block|}
name|termsConsumer
operator|.
name|finishTerm
argument_list|(
name|term
argument_list|,
operator|new
name|TermStats
argument_list|(
name|postings
operator|.
name|size
argument_list|()
argument_list|,
name|doFreq
condition|?
name|totalTF
else|:
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|sumTotalTF
operator|+=
name|totalTF
expr_stmt|;
name|sumDF
operator|+=
name|postings
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
name|termsConsumer
operator|.
name|finish
argument_list|(
name|doFreq
condition|?
name|sumTotalTF
else|:
operator|-
literal|1
argument_list|,
name|sumDF
argument_list|,
name|seenDocs
operator|.
name|cardinality
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|fieldsConsumer
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TEST: after indexing: files="
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|file
range|:
name|dir
operator|.
name|listAll
argument_list|()
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  "
operator|+
name|file
operator|+
literal|": "
operator|+
name|dir
operator|.
name|fileLength
argument_list|(
name|file
argument_list|)
operator|+
literal|" bytes"
argument_list|)
expr_stmt|;
block|}
block|}
name|currentFieldInfos
operator|=
name|newFieldInfos
expr_stmt|;
name|SegmentReadState
name|readState
init|=
operator|new
name|SegmentReadState
argument_list|(
name|dir
argument_list|,
name|segmentInfo
argument_list|,
name|newFieldInfos
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|,
literal|1
argument_list|)
decl_stmt|;
return|return
name|Codec
operator|.
name|getDefault
argument_list|()
operator|.
name|postingsFormat
argument_list|()
operator|.
name|fieldsProducer
argument_list|(
name|readState
argument_list|)
return|;
block|}
DECL|class|ThreadState
specifier|private
specifier|static
class|class
name|ThreadState
block|{
comment|// Only used with REUSE option:
DECL|field|reuseDocsEnum
specifier|public
name|DocsEnum
name|reuseDocsEnum
decl_stmt|;
DECL|field|reuseDocsAndPositionsEnum
specifier|public
name|DocsAndPositionsEnum
name|reuseDocsAndPositionsEnum
decl_stmt|;
block|}
DECL|method|verifyEnum
specifier|private
name|void
name|verifyEnum
parameter_list|(
name|ThreadState
name|threadState
parameter_list|,
name|String
name|field
parameter_list|,
name|BytesRef
name|term
parameter_list|,
name|TermsEnum
name|termsEnum
parameter_list|,
comment|// Maximum options (docs/freqs/positions/offsets) to test:
name|IndexOptions
name|maxIndexOptions
parameter_list|,
name|EnumSet
argument_list|<
name|Option
argument_list|>
name|options
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  verifyEnum: options="
operator|+
name|options
operator|+
literal|" maxIndexOptions="
operator|+
name|maxIndexOptions
argument_list|)
expr_stmt|;
block|}
comment|// 50% of the time time pass liveDocs:
name|Bits
name|liveDocs
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|BytesRef
argument_list|,
name|List
argument_list|<
name|Posting
argument_list|>
argument_list|>
argument_list|>
name|fieldsToUse
decl_stmt|;
if|if
condition|(
name|options
operator|.
name|contains
argument_list|(
name|Option
operator|.
name|LIVE_DOCS
argument_list|)
operator|&&
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|liveDocs
operator|=
name|globalLiveDocs
expr_stmt|;
name|fieldsToUse
operator|=
name|fieldsLive
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  use liveDocs"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|liveDocs
operator|=
literal|null
expr_stmt|;
name|fieldsToUse
operator|=
name|fields
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  no liveDocs"
argument_list|)
expr_stmt|;
block|}
block|}
name|FieldInfo
name|fieldInfo
init|=
name|currentFieldInfos
operator|.
name|fieldInfo
argument_list|(
name|field
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|fields
operator|.
name|get
argument_list|(
name|field
argument_list|)
operator|.
name|get
argument_list|(
name|term
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|termsEnum
operator|.
name|docFreq
argument_list|()
argument_list|)
expr_stmt|;
comment|// NOTE: can be empty list if we are using liveDocs:
name|List
argument_list|<
name|Posting
argument_list|>
name|expected
init|=
name|fieldsToUse
operator|.
name|get
argument_list|(
name|field
argument_list|)
operator|.
name|get
argument_list|(
name|term
argument_list|)
decl_stmt|;
name|boolean
name|allowFreqs
init|=
name|fieldInfo
operator|.
name|getIndexOptions
argument_list|()
operator|.
name|compareTo
argument_list|(
name|IndexOptions
operator|.
name|DOCS_AND_FREQS
argument_list|)
operator|>=
literal|0
operator|&&
name|maxIndexOptions
operator|.
name|compareTo
argument_list|(
name|IndexOptions
operator|.
name|DOCS_AND_FREQS
argument_list|)
operator|>=
literal|0
decl_stmt|;
name|boolean
name|doCheckFreqs
init|=
name|allowFreqs
operator|&&
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|3
argument_list|)
operator|<=
literal|2
decl_stmt|;
name|boolean
name|allowPositions
init|=
name|fieldInfo
operator|.
name|getIndexOptions
argument_list|()
operator|.
name|compareTo
argument_list|(
name|IndexOptions
operator|.
name|DOCS_AND_FREQS_AND_POSITIONS
argument_list|)
operator|>=
literal|0
operator|&&
name|maxIndexOptions
operator|.
name|compareTo
argument_list|(
name|IndexOptions
operator|.
name|DOCS_AND_FREQS_AND_POSITIONS
argument_list|)
operator|>=
literal|0
decl_stmt|;
name|boolean
name|doCheckPositions
init|=
name|allowPositions
operator|&&
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|3
argument_list|)
operator|<=
literal|2
decl_stmt|;
name|boolean
name|allowOffsets
init|=
name|fieldInfo
operator|.
name|getIndexOptions
argument_list|()
operator|.
name|compareTo
argument_list|(
name|IndexOptions
operator|.
name|DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS
argument_list|)
operator|>=
literal|0
operator|&&
name|maxIndexOptions
operator|.
name|compareTo
argument_list|(
name|IndexOptions
operator|.
name|DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS
argument_list|)
operator|>=
literal|0
decl_stmt|;
name|boolean
name|doCheckOffsets
init|=
name|allowOffsets
operator|&&
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|3
argument_list|)
operator|<=
literal|2
decl_stmt|;
name|boolean
name|doCheckPayloads
init|=
name|options
operator|.
name|contains
argument_list|(
name|Option
operator|.
name|PAYLOADS
argument_list|)
operator|&&
name|allowPositions
operator|&&
name|fieldInfo
operator|.
name|hasPayloads
argument_list|()
decl_stmt|;
name|DocsEnum
name|prevDocsEnum
init|=
literal|null
decl_stmt|;
name|DocsEnum
name|docsEnum
decl_stmt|;
name|DocsAndPositionsEnum
name|docsAndPositionsEnum
decl_stmt|;
if|if
condition|(
operator|!
name|doCheckPositions
condition|)
block|{
if|if
condition|(
name|allowPositions
operator|&&
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
operator|==
literal|7
condition|)
block|{
comment|// 10% of the time, even though we will not check positions, pull a DocsAndPositions enum
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  get DocsAndPositionsEnum (but we won't check positions)"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|options
operator|.
name|contains
argument_list|(
name|Option
operator|.
name|REUSE_ENUMS
argument_list|)
operator|&&
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
operator|<
literal|9
condition|)
block|{
name|prevDocsEnum
operator|=
name|threadState
operator|.
name|reuseDocsAndPositionsEnum
expr_stmt|;
block|}
name|threadState
operator|.
name|reuseDocsAndPositionsEnum
operator|=
name|termsEnum
operator|.
name|docsAndPositions
argument_list|(
name|liveDocs
argument_list|,
operator|(
name|DocsAndPositionsEnum
operator|)
name|prevDocsEnum
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|docsEnum
operator|=
name|threadState
operator|.
name|reuseDocsAndPositionsEnum
expr_stmt|;
name|docsAndPositionsEnum
operator|=
name|threadState
operator|.
name|reuseDocsAndPositionsEnum
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  get DocsEnum"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|options
operator|.
name|contains
argument_list|(
name|Option
operator|.
name|REUSE_ENUMS
argument_list|)
operator|&&
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
operator|<
literal|9
condition|)
block|{
name|prevDocsEnum
operator|=
name|threadState
operator|.
name|reuseDocsEnum
expr_stmt|;
block|}
name|threadState
operator|.
name|reuseDocsEnum
operator|=
name|termsEnum
operator|.
name|docs
argument_list|(
name|liveDocs
argument_list|,
name|prevDocsEnum
argument_list|,
name|doCheckFreqs
argument_list|)
expr_stmt|;
name|docsEnum
operator|=
name|threadState
operator|.
name|reuseDocsEnum
expr_stmt|;
name|docsAndPositionsEnum
operator|=
literal|null
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  get DocsAndPositionsEnum"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|options
operator|.
name|contains
argument_list|(
name|Option
operator|.
name|REUSE_ENUMS
argument_list|)
operator|&&
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
operator|<
literal|9
condition|)
block|{
name|prevDocsEnum
operator|=
name|threadState
operator|.
name|reuseDocsAndPositionsEnum
expr_stmt|;
block|}
name|threadState
operator|.
name|reuseDocsAndPositionsEnum
operator|=
name|termsEnum
operator|.
name|docsAndPositions
argument_list|(
name|liveDocs
argument_list|,
operator|(
name|DocsAndPositionsEnum
operator|)
name|prevDocsEnum
argument_list|,
name|doCheckOffsets
argument_list|)
expr_stmt|;
name|docsEnum
operator|=
name|threadState
operator|.
name|reuseDocsAndPositionsEnum
expr_stmt|;
name|docsAndPositionsEnum
operator|=
name|threadState
operator|.
name|reuseDocsAndPositionsEnum
expr_stmt|;
block|}
name|assertNotNull
argument_list|(
literal|"null DocsEnum"
argument_list|,
name|docsEnum
argument_list|)
expr_stmt|;
name|int
name|initialDocID
init|=
name|docsEnum
operator|.
name|docID
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"inital docID should be -1 or NO_MORE_DOCS"
argument_list|,
name|initialDocID
operator|==
operator|-
literal|1
operator|||
name|initialDocID
operator|==
name|DocsEnum
operator|.
name|NO_MORE_DOCS
argument_list|)
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
if|if
condition|(
name|prevDocsEnum
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  got enum="
operator|+
name|docsEnum
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|prevDocsEnum
operator|==
name|docsEnum
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  got reuse enum="
operator|+
name|docsEnum
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  got enum="
operator|+
name|docsEnum
operator|+
literal|" (reuse of "
operator|+
name|prevDocsEnum
operator|+
literal|" failed)"
argument_list|)
expr_stmt|;
block|}
block|}
comment|// 10% of the time don't consume all docs:
name|int
name|stopAt
decl_stmt|;
if|if
condition|(
name|options
operator|.
name|contains
argument_list|(
name|Option
operator|.
name|PARTIAL_DOC_CONSUME
argument_list|)
operator|&&
name|expected
operator|.
name|size
argument_list|()
operator|>
literal|1
operator|&&
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
operator|==
literal|7
condition|)
block|{
name|stopAt
operator|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|expected
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  will not consume all docs ("
operator|+
name|stopAt
operator|+
literal|" vs "
operator|+
name|expected
operator|.
name|size
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|stopAt
operator|=
name|expected
operator|.
name|size
argument_list|()
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  consume all docs"
argument_list|)
expr_stmt|;
block|}
block|}
name|double
name|skipChance
init|=
name|random
argument_list|()
operator|.
name|nextDouble
argument_list|()
decl_stmt|;
name|int
name|numSkips
init|=
name|expected
operator|.
name|size
argument_list|()
operator|<
literal|3
condition|?
literal|1
else|:
name|_TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
name|Math
operator|.
name|min
argument_list|(
literal|20
argument_list|,
name|expected
operator|.
name|size
argument_list|()
operator|/
literal|3
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|skipInc
init|=
name|expected
operator|.
name|size
argument_list|()
operator|/
name|numSkips
decl_stmt|;
name|int
name|skipDocInc
init|=
operator|(
literal|1
operator|+
name|maxDocID
operator|)
operator|/
name|numSkips
decl_stmt|;
comment|// Sometimes do 100% skipping:
name|boolean
name|doAllSkipping
init|=
name|options
operator|.
name|contains
argument_list|(
name|Option
operator|.
name|SKIPPING
argument_list|)
operator|&&
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|7
argument_list|)
operator|==
literal|1
decl_stmt|;
name|double
name|freqAskChance
init|=
name|random
argument_list|()
operator|.
name|nextDouble
argument_list|()
decl_stmt|;
name|double
name|payloadCheckChance
init|=
name|random
argument_list|()
operator|.
name|nextDouble
argument_list|()
decl_stmt|;
name|double
name|offsetCheckChance
init|=
name|random
argument_list|()
operator|.
name|nextDouble
argument_list|()
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
if|if
condition|(
name|options
operator|.
name|contains
argument_list|(
name|Option
operator|.
name|SKIPPING
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  skipChance="
operator|+
name|skipChance
operator|+
literal|" numSkips="
operator|+
name|numSkips
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  no skipping"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|doCheckFreqs
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  freqAskChance="
operator|+
name|freqAskChance
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|doCheckPayloads
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  payloadCheckChance="
operator|+
name|payloadCheckChance
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|doCheckOffsets
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  offsetCheckChance="
operator|+
name|offsetCheckChance
argument_list|)
expr_stmt|;
block|}
block|}
name|int
name|nextPosting
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|nextPosting
operator|<=
name|stopAt
condition|)
block|{
if|if
condition|(
name|nextPosting
operator|==
name|stopAt
condition|)
block|{
if|if
condition|(
name|stopAt
operator|==
name|expected
operator|.
name|size
argument_list|()
condition|)
block|{
name|assertEquals
argument_list|(
literal|"DocsEnum should have ended but didn't"
argument_list|,
name|DocsEnum
operator|.
name|NO_MORE_DOCS
argument_list|,
name|docsEnum
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
comment|// Common bug is to forget to set this.doc=NO_MORE_DOCS in the enum!:
name|assertEquals
argument_list|(
literal|"DocsEnum should have ended but didn't"
argument_list|,
name|DocsEnum
operator|.
name|NO_MORE_DOCS
argument_list|,
name|docsEnum
operator|.
name|docID
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
name|Posting
name|posting
decl_stmt|;
if|if
condition|(
name|options
operator|.
name|contains
argument_list|(
name|Option
operator|.
name|SKIPPING
argument_list|)
operator|&&
operator|(
name|doAllSkipping
operator|||
name|random
argument_list|()
operator|.
name|nextDouble
argument_list|()
operator|<=
name|skipChance
operator|)
condition|)
block|{
name|int
name|targetDocID
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|nextPosting
operator|<
name|stopAt
operator|&&
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
comment|// Pick target we know exists:
name|nextPosting
operator|=
name|_TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
name|nextPosting
argument_list|,
name|nextPosting
operator|+
name|skipInc
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Pick random target (might not exist):
name|Posting
name|target
init|=
operator|new
name|Posting
argument_list|()
decl_stmt|;
name|target
operator|.
name|docID
operator|=
name|_TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
name|expected
operator|.
name|get
argument_list|(
name|nextPosting
argument_list|)
operator|.
name|docID
argument_list|,
name|expected
operator|.
name|get
argument_list|(
name|nextPosting
argument_list|)
operator|.
name|docID
operator|+
name|skipDocInc
argument_list|)
expr_stmt|;
name|targetDocID
operator|=
name|target
operator|.
name|docID
expr_stmt|;
name|int
name|loc
init|=
name|Collections
operator|.
name|binarySearch
argument_list|(
name|expected
operator|.
name|subList
argument_list|(
name|nextPosting
argument_list|,
name|expected
operator|.
name|size
argument_list|()
argument_list|)
argument_list|,
name|target
argument_list|)
decl_stmt|;
if|if
condition|(
name|loc
operator|<
literal|0
condition|)
block|{
name|loc
operator|=
operator|-
name|loc
operator|-
literal|1
expr_stmt|;
block|}
name|nextPosting
operator|=
name|nextPosting
operator|+
name|loc
expr_stmt|;
block|}
if|if
condition|(
name|nextPosting
operator|>=
name|stopAt
condition|)
block|{
name|int
name|target
init|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
operator|(
name|maxDocID
operator|+
literal|1
operator|)
else|:
name|DocsEnum
operator|.
name|NO_MORE_DOCS
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  now advance to end (target="
operator|+
name|target
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"DocsEnum should have ended but didn't"
argument_list|,
name|DocsEnum
operator|.
name|NO_MORE_DOCS
argument_list|,
name|docsEnum
operator|.
name|advance
argument_list|(
name|target
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
else|else
block|{
name|posting
operator|=
name|expected
operator|.
name|get
argument_list|(
name|nextPosting
operator|++
argument_list|)
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
if|if
condition|(
name|targetDocID
operator|!=
operator|-
literal|1
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  now advance to random target="
operator|+
name|targetDocID
operator|+
literal|" ("
operator|+
name|nextPosting
operator|+
literal|" of "
operator|+
name|stopAt
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  now advance to known-exists target="
operator|+
name|posting
operator|.
name|docID
operator|+
literal|" ("
operator|+
name|nextPosting
operator|+
literal|" of "
operator|+
name|stopAt
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
block|}
name|int
name|docID
init|=
name|docsEnum
operator|.
name|advance
argument_list|(
name|targetDocID
operator|!=
operator|-
literal|1
condition|?
name|targetDocID
else|:
name|posting
operator|.
name|docID
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"docID is wrong"
argument_list|,
name|posting
operator|.
name|docID
argument_list|,
name|docID
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|posting
operator|=
name|expected
operator|.
name|get
argument_list|(
name|nextPosting
operator|++
argument_list|)
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  now nextDoc to "
operator|+
name|posting
operator|.
name|docID
operator|+
literal|" ("
operator|+
name|nextPosting
operator|+
literal|" of "
operator|+
name|stopAt
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
name|int
name|docID
init|=
name|docsEnum
operator|.
name|nextDoc
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"docID is wrong"
argument_list|,
name|posting
operator|.
name|docID
argument_list|,
name|docID
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|doCheckFreqs
operator|&&
name|random
argument_list|()
operator|.
name|nextDouble
argument_list|()
operator|<=
name|freqAskChance
condition|)
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"    now freq()="
operator|+
name|posting
operator|.
name|positions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|int
name|freq
init|=
name|docsEnum
operator|.
name|freq
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"freq is wrong"
argument_list|,
name|posting
operator|.
name|positions
operator|.
name|size
argument_list|()
argument_list|,
name|freq
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|doCheckPositions
condition|)
block|{
name|int
name|freq
init|=
name|docsEnum
operator|.
name|freq
argument_list|()
decl_stmt|;
name|int
name|numPosToConsume
decl_stmt|;
if|if
condition|(
name|options
operator|.
name|contains
argument_list|(
name|Option
operator|.
name|PARTIAL_POS_CONSUME
argument_list|)
operator|&&
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|5
argument_list|)
operator|==
literal|1
condition|)
block|{
name|numPosToConsume
operator|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|freq
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|numPosToConsume
operator|=
name|freq
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numPosToConsume
condition|;
name|i
operator|++
control|)
block|{
name|Position
name|position
init|=
name|posting
operator|.
name|positions
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"    now nextPosition to "
operator|+
name|position
operator|.
name|position
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"position is wrong"
argument_list|,
name|position
operator|.
name|position
argument_list|,
name|docsAndPositionsEnum
operator|.
name|nextPosition
argument_list|()
argument_list|)
expr_stmt|;
comment|// TODO sometimes don't pull the payload even
comment|// though we pulled the position
if|if
condition|(
name|doCheckPayloads
condition|)
block|{
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextDouble
argument_list|()
operator|<=
name|payloadCheckChance
condition|)
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"      now check payload length="
operator|+
operator|(
name|position
operator|.
name|payload
operator|==
literal|null
condition|?
literal|0
else|:
name|position
operator|.
name|payload
operator|.
name|length
operator|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|position
operator|.
name|payload
operator|==
literal|null
operator|||
name|position
operator|.
name|payload
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|assertFalse
argument_list|(
literal|"should not have payload"
argument_list|,
name|docsAndPositionsEnum
operator|.
name|hasPayload
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertTrue
argument_list|(
literal|"should have payload but doesn't"
argument_list|,
name|docsAndPositionsEnum
operator|.
name|hasPayload
argument_list|()
argument_list|)
expr_stmt|;
name|BytesRef
name|payload
init|=
name|docsAndPositionsEnum
operator|.
name|getPayload
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
literal|"2nd call to hasPayload should be false"
argument_list|,
name|docsAndPositionsEnum
operator|.
name|hasPayload
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"payload should not be null"
argument_list|,
name|payload
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"payload length is wrong"
argument_list|,
name|position
operator|.
name|payload
operator|.
name|length
argument_list|,
name|payload
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|byteUpto
init|=
literal|0
init|;
name|byteUpto
operator|<
name|position
operator|.
name|payload
operator|.
name|length
condition|;
name|byteUpto
operator|++
control|)
block|{
name|assertEquals
argument_list|(
literal|"payload bytes are wrong"
argument_list|,
name|position
operator|.
name|payload
index|[
name|byteUpto
index|]
argument_list|,
name|payload
operator|.
name|bytes
index|[
name|payload
operator|.
name|offset
operator|+
name|byteUpto
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"      skip check payload length="
operator|+
operator|(
name|position
operator|.
name|payload
operator|==
literal|null
condition|?
literal|0
else|:
name|position
operator|.
name|payload
operator|.
name|length
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|doCheckOffsets
condition|)
block|{
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextDouble
argument_list|()
operator|<=
name|offsetCheckChance
condition|)
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"      now check offsets: startOff="
operator|+
name|position
operator|.
name|startOffset
operator|+
literal|" endOffset="
operator|+
name|position
operator|.
name|endOffset
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"startOffset is wrong"
argument_list|,
name|position
operator|.
name|startOffset
argument_list|,
name|docsAndPositionsEnum
operator|.
name|startOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"endOffset is wrong"
argument_list|,
name|position
operator|.
name|endOffset
argument_list|,
name|docsAndPositionsEnum
operator|.
name|endOffset
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"      skip check offsets"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"      now check offsets are -1"
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"startOffset isn't -1"
argument_list|,
operator|-
literal|1
argument_list|,
name|docsAndPositionsEnum
operator|.
name|startOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"endOffset isn't -1"
argument_list|,
operator|-
literal|1
argument_list|,
name|docsAndPositionsEnum
operator|.
name|endOffset
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
DECL|method|testTerms
specifier|private
name|void
name|testTerms
parameter_list|(
specifier|final
name|Fields
name|fieldsSource
parameter_list|,
specifier|final
name|EnumSet
argument_list|<
name|Option
argument_list|>
name|options
parameter_list|,
specifier|final
name|IndexOptions
name|maxIndexOptions
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|options
operator|.
name|contains
argument_list|(
name|Option
operator|.
name|THREADS
argument_list|)
condition|)
block|{
name|int
name|numThreads
init|=
name|_TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|2
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|Thread
index|[]
name|threads
init|=
operator|new
name|Thread
index|[
name|numThreads
index|]
decl_stmt|;
for|for
control|(
name|int
name|threadUpto
init|=
literal|0
init|;
name|threadUpto
operator|<
name|numThreads
condition|;
name|threadUpto
operator|++
control|)
block|{
name|threads
index|[
name|threadUpto
index|]
operator|=
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|testTermsOneThread
argument_list|(
name|fieldsSource
argument_list|,
name|options
argument_list|,
name|maxIndexOptions
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|t
argument_list|)
throw|;
block|}
block|}
block|}
expr_stmt|;
name|threads
index|[
name|threadUpto
index|]
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|int
name|threadUpto
init|=
literal|0
init|;
name|threadUpto
operator|<
name|numThreads
condition|;
name|threadUpto
operator|++
control|)
block|{
name|threads
index|[
name|threadUpto
index|]
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|testTermsOneThread
argument_list|(
name|fieldsSource
argument_list|,
name|options
argument_list|,
name|maxIndexOptions
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testTermsOneThread
specifier|private
name|void
name|testTermsOneThread
parameter_list|(
name|Fields
name|fieldsSource
parameter_list|,
name|EnumSet
argument_list|<
name|Option
argument_list|>
name|options
parameter_list|,
name|IndexOptions
name|maxIndexOptions
parameter_list|)
throws|throws
name|IOException
block|{
name|ThreadState
name|threadState
init|=
operator|new
name|ThreadState
argument_list|()
decl_stmt|;
comment|// Test random terms/fields:
name|List
argument_list|<
name|TermState
argument_list|>
name|termStates
init|=
operator|new
name|ArrayList
argument_list|<
name|TermState
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|FieldAndTerm
argument_list|>
name|termStateTerms
init|=
operator|new
name|ArrayList
argument_list|<
name|FieldAndTerm
argument_list|>
argument_list|()
decl_stmt|;
name|Collections
operator|.
name|shuffle
argument_list|(
name|allTerms
argument_list|,
name|random
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|upto
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|upto
operator|<
name|allTerms
operator|.
name|size
argument_list|()
condition|)
block|{
name|boolean
name|useTermState
init|=
name|termStates
operator|.
name|size
argument_list|()
operator|!=
literal|0
operator|&&
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|5
argument_list|)
operator|==
literal|1
decl_stmt|;
name|FieldAndTerm
name|fieldAndTerm
decl_stmt|;
name|TermsEnum
name|termsEnum
decl_stmt|;
name|TermState
name|termState
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|useTermState
condition|)
block|{
comment|// Seek by random field+term:
name|fieldAndTerm
operator|=
name|allTerms
operator|.
name|get
argument_list|(
name|upto
operator|++
argument_list|)
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\nTEST: seek to term="
operator|+
name|fieldAndTerm
operator|.
name|field
operator|+
literal|":"
operator|+
name|fieldAndTerm
operator|.
name|term
operator|.
name|utf8ToString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// Seek by previous saved TermState
name|int
name|idx
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|termStates
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|fieldAndTerm
operator|=
name|termStateTerms
operator|.
name|get
argument_list|(
name|idx
argument_list|)
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\nTEST: seek using TermState to term="
operator|+
name|fieldAndTerm
operator|.
name|field
operator|+
literal|":"
operator|+
name|fieldAndTerm
operator|.
name|term
operator|.
name|utf8ToString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|termState
operator|=
name|termStates
operator|.
name|get
argument_list|(
name|idx
argument_list|)
expr_stmt|;
block|}
name|Terms
name|terms
init|=
name|fieldsSource
operator|.
name|terms
argument_list|(
name|fieldAndTerm
operator|.
name|field
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|terms
argument_list|)
expr_stmt|;
name|termsEnum
operator|=
name|terms
operator|.
name|iterator
argument_list|(
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|useTermState
condition|)
block|{
name|assertTrue
argument_list|(
name|termsEnum
operator|.
name|seekExact
argument_list|(
name|fieldAndTerm
operator|.
name|term
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|termsEnum
operator|.
name|seekExact
argument_list|(
name|fieldAndTerm
operator|.
name|term
argument_list|,
name|termState
argument_list|)
expr_stmt|;
block|}
name|boolean
name|savedTermState
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|options
operator|.
name|contains
argument_list|(
name|Option
operator|.
name|TERM_STATE
argument_list|)
operator|&&
operator|!
name|useTermState
operator|&&
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|5
argument_list|)
operator|==
literal|1
condition|)
block|{
comment|// Save away this TermState:
name|termStates
operator|.
name|add
argument_list|(
name|termsEnum
operator|.
name|termState
argument_list|()
argument_list|)
expr_stmt|;
name|termStateTerms
operator|.
name|add
argument_list|(
name|fieldAndTerm
argument_list|)
expr_stmt|;
name|savedTermState
operator|=
literal|true
expr_stmt|;
block|}
name|verifyEnum
argument_list|(
name|threadState
argument_list|,
name|fieldAndTerm
operator|.
name|field
argument_list|,
name|fieldAndTerm
operator|.
name|term
argument_list|,
name|termsEnum
argument_list|,
name|maxIndexOptions
argument_list|,
name|options
argument_list|)
expr_stmt|;
comment|// Sometimes save term state after pulling the enum:
if|if
condition|(
name|options
operator|.
name|contains
argument_list|(
name|Option
operator|.
name|TERM_STATE
argument_list|)
operator|&&
operator|!
name|useTermState
operator|&&
operator|!
name|savedTermState
operator|&&
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|5
argument_list|)
operator|==
literal|1
condition|)
block|{
comment|// Save away this TermState:
name|termStates
operator|.
name|add
argument_list|(
name|termsEnum
operator|.
name|termState
argument_list|()
argument_list|)
expr_stmt|;
name|termStateTerms
operator|.
name|add
argument_list|(
name|fieldAndTerm
argument_list|)
expr_stmt|;
name|useTermState
operator|=
literal|true
expr_stmt|;
block|}
comment|// 10% of the time make sure you can pull another enum
comment|// from the same term:
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
operator|==
literal|7
condition|)
block|{
comment|// Try same term again
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TEST: try enum again on same term"
argument_list|)
expr_stmt|;
block|}
name|verifyEnum
argument_list|(
name|threadState
argument_list|,
name|fieldAndTerm
operator|.
name|field
argument_list|,
name|fieldAndTerm
operator|.
name|term
argument_list|,
name|termsEnum
argument_list|,
name|maxIndexOptions
argument_list|,
name|options
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|test
specifier|public
name|void
name|test
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|boolean
name|indexPayloads
init|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
decl_stmt|;
comment|// TODO test thread safety of buildIndex too
name|FieldsProducer
name|fieldsProducer
init|=
name|buildIndex
argument_list|(
name|dir
argument_list|,
name|IndexOptions
operator|.
name|DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS
argument_list|,
name|indexPayloads
argument_list|)
decl_stmt|;
comment|//testTerms(fieldsProducer, EnumSet.noneOf(Option.class), IndexOptions.DOCS_AND_FREQS_AND_POSITIONS);
comment|//testTerms(fieldsProducer, EnumSet.of(Option.LIVE_DOCS), IndexOptions.DOCS_AND_FREQS_AND_POSITIONS);
comment|//testTerms(fieldsProducer, EnumSet.of(Option.TERM_STATE, Option.LIVE_DOCS, Option.PARTIAL_DOC_CONSUME, Option.PARTIAL_POS_CONSUME), IndexOptions.DOCS_AND_FREQS_AND_POSITIONS);
comment|//testTerms(fieldsProducer, EnumSet.of(Option.SKIPPING), IndexOptions.DOCS_AND_FREQS_AND_POSITIONS);
comment|//testTerms(fieldsProducer, EnumSet.of(Option.THREADS, Option.TERM_STATE, Option.SKIPPING, Option.PARTIAL_DOC_CONSUME, Option.PARTIAL_POS_CONSUME), IndexOptions.DOCS_AND_FREQS_AND_POSITIONS);
comment|//testTerms(fieldsProducer, EnumSet.of(Option.TERM_STATE, Option.SKIPPING, Option.PARTIAL_DOC_CONSUME, Option.PARTIAL_POS_CONSUME), IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS);
comment|//testTerms(fieldsProducer, EnumSet.of(Option.TERM_STATE, Option.PAYLOADS, Option.PARTIAL_DOC_CONSUME, Option.PARTIAL_POS_CONSUME, Option.SKIPPING), IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS);
comment|// NOTE: you can also test "weaker" index options than
comment|// you indexed with:
name|testTerms
argument_list|(
name|fieldsProducer
argument_list|,
name|EnumSet
operator|.
name|allOf
argument_list|(
name|Option
operator|.
name|class
argument_list|)
argument_list|,
name|IndexOptions
operator|.
name|DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS
argument_list|)
expr_stmt|;
name|fieldsProducer
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class
begin_comment
comment|// TODO test that start/endOffset return -1 if field has
end_comment
begin_comment
comment|// no offsets
end_comment
end_unit
