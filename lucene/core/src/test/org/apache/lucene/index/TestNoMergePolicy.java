begin_unit
begin_package
DECL|package|org.apache.lucene.index
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import
begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import
begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Modifier
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_class
DECL|class|TestNoMergePolicy
specifier|public
class|class
name|TestNoMergePolicy
extends|extends
name|BaseMergePolicyTestCase
block|{
DECL|method|mergePolicy
specifier|public
name|MergePolicy
name|mergePolicy
parameter_list|()
block|{
return|return
name|NoMergePolicy
operator|.
name|INSTANCE
return|;
block|}
annotation|@
name|Test
DECL|method|testNoMergePolicy
specifier|public
name|void
name|testNoMergePolicy
parameter_list|()
throws|throws
name|Exception
block|{
name|MergePolicy
name|mp
init|=
name|mergePolicy
argument_list|()
decl_stmt|;
name|assertNull
argument_list|(
name|mp
operator|.
name|findMerges
argument_list|(
literal|null
argument_list|,
operator|(
name|SegmentInfos
operator|)
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|mp
operator|.
name|findForcedMerges
argument_list|(
literal|null
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|mp
operator|.
name|findForcedDeletesMerges
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFinalSingleton
specifier|public
name|void
name|testFinalSingleton
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
name|Modifier
operator|.
name|isFinal
argument_list|(
name|NoMergePolicy
operator|.
name|class
operator|.
name|getModifiers
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Constructor
argument_list|<
name|?
argument_list|>
index|[]
name|ctors
init|=
name|NoMergePolicy
operator|.
name|class
operator|.
name|getDeclaredConstructors
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"expected 1 private ctor only: "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|ctors
argument_list|)
argument_list|,
literal|1
argument_list|,
name|ctors
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"that 1 should be private: "
operator|+
name|ctors
index|[
literal|0
index|]
argument_list|,
name|Modifier
operator|.
name|isPrivate
argument_list|(
name|ctors
index|[
literal|0
index|]
operator|.
name|getModifiers
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMethodsOverridden
specifier|public
name|void
name|testMethodsOverridden
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Ensures that all methods of MergePolicy are overridden. That's important
comment|// to ensure that NoMergePolicy overrides everything, so that no unexpected
comment|// behavior/error occurs
for|for
control|(
name|Method
name|m
range|:
name|NoMergePolicy
operator|.
name|class
operator|.
name|getMethods
argument_list|()
control|)
block|{
comment|// getDeclaredMethods() returns just those methods that are declared on
comment|// NoMergePolicy. getMethods() returns those that are visible in that
comment|// context, including ones from Object. So just filter out Object. If in
comment|// the future MergePolicy will extend a different class than Object, this
comment|// will need to change.
if|if
condition|(
name|m
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"clone"
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|m
operator|.
name|getDeclaringClass
argument_list|()
operator|!=
name|Object
operator|.
name|class
operator|&&
operator|!
name|Modifier
operator|.
name|isFinal
argument_list|(
name|m
operator|.
name|getModifiers
argument_list|()
argument_list|)
condition|)
block|{
name|assertTrue
argument_list|(
name|m
operator|+
literal|" is not overridden ! "
argument_list|,
name|m
operator|.
name|getDeclaringClass
argument_list|()
operator|==
name|NoMergePolicy
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class
end_unit
