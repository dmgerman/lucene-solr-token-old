begin_unit
begin_package
DECL|package|org.apache.lucene.index
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|MockAnalyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|CharTermAttribute
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|OffsetAttribute
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|PayloadAttribute
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|BinaryDocValuesField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|BinaryPoint
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
operator|.
name|Store
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|FieldType
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|NumericDocValuesField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|SortedDocValuesField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|SortedNumericDocValuesField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|SortedSetDocValuesField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|StringField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|TextField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|PointValues
operator|.
name|IntersectVisitor
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|PointValues
operator|.
name|Relation
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|TermsEnum
operator|.
name|SeekStatus
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|CollectionStatistics
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|DocIdSetIterator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Sort
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|SortField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TermQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TermStatistics
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TopDocs
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|similarities
operator|.
name|Similarity
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Bits
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|FixedBitSet
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|NumericUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|TestUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import
begin_comment
comment|// nocommit test tie break
end_comment
begin_comment
comment|// nocommit test multiple sorts
end_comment
begin_comment
comment|// nocommit test update dvs
end_comment
begin_comment
comment|// nocommit test EarlyTerminatingCollector
end_comment
begin_comment
comment|// nocommit must test all supported SortField.Type
end_comment
begin_class
DECL|class|TestIndexSorting
specifier|public
class|class
name|TestIndexSorting
extends|extends
name|LuceneTestCase
block|{
DECL|method|testSortOnMerge
specifier|public
name|void
name|testSortOnMerge
parameter_list|(
name|boolean
name|withDeletes
parameter_list|)
throws|throws
name|IOException
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriterConfig
name|iwc
init|=
operator|new
name|IndexWriterConfig
argument_list|(
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Sort
name|indexSort
init|=
operator|new
name|Sort
argument_list|(
operator|new
name|SortField
argument_list|(
literal|"foo"
argument_list|,
name|SortField
operator|.
name|Type
operator|.
name|LONG
argument_list|)
argument_list|)
decl_stmt|;
name|iwc
operator|.
name|setIndexSort
argument_list|(
name|indexSort
argument_list|)
expr_stmt|;
name|IndexWriter
name|w
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|iwc
argument_list|)
decl_stmt|;
specifier|final
name|int
name|numDocs
init|=
name|atLeast
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
specifier|final
name|FixedBitSet
name|deleted
init|=
operator|new
name|FixedBitSet
argument_list|(
name|numDocs
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
operator|++
name|i
control|)
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|NumericDocValuesField
argument_list|(
literal|"foo"
argument_list|,
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|20
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|StringField
argument_list|(
literal|"id"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|,
name|Store
operator|.
name|YES
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|NumericDocValuesField
argument_list|(
literal|"id"
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|5
argument_list|)
operator|==
literal|0
condition|)
block|{
name|w
operator|.
name|getReader
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|30
argument_list|)
operator|==
literal|0
condition|)
block|{
name|w
operator|.
name|forceMerge
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|4
argument_list|)
operator|==
literal|0
condition|)
block|{
specifier|final
name|int
name|id
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|0
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|deleted
operator|.
name|set
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|w
operator|.
name|deleteDocuments
argument_list|(
operator|new
name|Term
argument_list|(
literal|"id"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|id
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Check that segments are sorted
name|DirectoryReader
name|reader
init|=
name|w
operator|.
name|getReader
argument_list|()
decl_stmt|;
for|for
control|(
name|LeafReaderContext
name|ctx
range|:
name|reader
operator|.
name|leaves
argument_list|()
control|)
block|{
specifier|final
name|SegmentReader
name|leaf
init|=
operator|(
name|SegmentReader
operator|)
name|ctx
operator|.
name|reader
argument_list|()
decl_stmt|;
name|SegmentInfo
name|info
init|=
name|leaf
operator|.
name|getSegmentInfo
argument_list|()
operator|.
name|info
decl_stmt|;
switch|switch
condition|(
name|info
operator|.
name|getDiagnostics
argument_list|()
operator|.
name|get
argument_list|(
name|IndexWriter
operator|.
name|SOURCE
argument_list|)
condition|)
block|{
case|case
name|IndexWriter
operator|.
name|SOURCE_FLUSH
case|:
name|assertNull
argument_list|(
name|info
operator|.
name|getIndexSort
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|IndexWriter
operator|.
name|SOURCE_MERGE
case|:
name|assertEquals
argument_list|(
name|indexSort
argument_list|,
name|info
operator|.
name|getIndexSort
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|NumericDocValues
name|values
init|=
name|leaf
operator|.
name|getNumericDocValues
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|long
name|previous
init|=
name|Long
operator|.
name|MIN_VALUE
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|leaf
operator|.
name|maxDoc
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|final
name|long
name|value
init|=
name|values
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|value
operator|>=
name|previous
argument_list|)
expr_stmt|;
name|previous
operator|=
name|value
expr_stmt|;
block|}
break|break;
default|default:
name|fail
argument_list|()
expr_stmt|;
block|}
block|}
comment|// Now check that the index is consistent
name|IndexSearcher
name|searcher
init|=
name|newSearcher
argument_list|(
name|reader
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
operator|++
name|i
control|)
block|{
name|TermQuery
name|termQuery
init|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"id"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|TopDocs
name|topDocs
init|=
name|searcher
operator|.
name|search
argument_list|(
name|termQuery
argument_list|,
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|deleted
operator|.
name|get
argument_list|(
name|i
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|topDocs
operator|.
name|totalHits
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|topDocs
operator|.
name|totalHits
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|i
argument_list|,
name|MultiDocValues
operator|.
name|getNumericValues
argument_list|(
name|reader
argument_list|,
literal|"id"
argument_list|)
operator|.
name|get
argument_list|(
name|topDocs
operator|.
name|scoreDocs
index|[
literal|0
index|]
operator|.
name|doc
argument_list|)
argument_list|)
expr_stmt|;
name|Document
name|document
init|=
name|reader
operator|.
name|document
argument_list|(
name|topDocs
operator|.
name|scoreDocs
index|[
literal|0
index|]
operator|.
name|doc
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|,
name|document
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testSortOnMerge
specifier|public
name|void
name|testSortOnMerge
parameter_list|()
throws|throws
name|IOException
block|{
name|testSortOnMerge
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|testSortOnMergeWithDeletes
specifier|public
name|void
name|testSortOnMergeWithDeletes
parameter_list|()
throws|throws
name|IOException
block|{
name|testSortOnMerge
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|class|UpdateRunnable
specifier|static
class|class
name|UpdateRunnable
implements|implements
name|Runnable
block|{
DECL|field|numDocs
specifier|private
specifier|final
name|int
name|numDocs
decl_stmt|;
DECL|field|random
specifier|private
specifier|final
name|Random
name|random
decl_stmt|;
DECL|field|updateCount
specifier|private
specifier|final
name|AtomicInteger
name|updateCount
decl_stmt|;
DECL|field|w
specifier|private
specifier|final
name|IndexWriter
name|w
decl_stmt|;
DECL|field|values
specifier|private
specifier|final
name|Map
argument_list|<
name|Integer
argument_list|,
name|Long
argument_list|>
name|values
decl_stmt|;
DECL|field|latch
specifier|private
specifier|final
name|CountDownLatch
name|latch
decl_stmt|;
DECL|method|UpdateRunnable
name|UpdateRunnable
parameter_list|(
name|int
name|numDocs
parameter_list|,
name|Random
name|random
parameter_list|,
name|CountDownLatch
name|latch
parameter_list|,
name|AtomicInteger
name|updateCount
parameter_list|,
name|IndexWriter
name|w
parameter_list|,
name|Map
argument_list|<
name|Integer
argument_list|,
name|Long
argument_list|>
name|values
parameter_list|)
block|{
name|this
operator|.
name|numDocs
operator|=
name|numDocs
expr_stmt|;
name|this
operator|.
name|random
operator|=
name|random
expr_stmt|;
name|this
operator|.
name|latch
operator|=
name|latch
expr_stmt|;
name|this
operator|.
name|updateCount
operator|=
name|updateCount
expr_stmt|;
name|this
operator|.
name|w
operator|=
name|w
expr_stmt|;
name|this
operator|.
name|values
operator|=
name|values
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|latch
operator|.
name|await
argument_list|()
expr_stmt|;
while|while
condition|(
name|updateCount
operator|.
name|decrementAndGet
argument_list|()
operator|>=
literal|0
condition|)
block|{
specifier|final
name|int
name|id
init|=
name|random
operator|.
name|nextInt
argument_list|(
name|numDocs
argument_list|)
decl_stmt|;
specifier|final
name|long
name|value
init|=
name|random
operator|.
name|nextInt
argument_list|(
literal|20
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|StringField
argument_list|(
literal|"id"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|id
argument_list|)
argument_list|,
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|NumericDocValuesField
argument_list|(
literal|"foo"
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|values
init|)
block|{
name|w
operator|.
name|updateDocument
argument_list|(
operator|new
name|Term
argument_list|(
literal|"id"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|id
argument_list|)
argument_list|)
argument_list|,
name|doc
argument_list|)
expr_stmt|;
name|values
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
switch|switch
condition|(
name|random
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
condition|)
block|{
case|case
literal|0
case|:
case|case
literal|1
case|:
comment|// reopen
name|DirectoryReader
operator|.
name|open
argument_list|(
name|w
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
break|break;
case|case
literal|2
case|:
name|w
operator|.
name|forceMerge
argument_list|(
literal|3
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
decl||
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
comment|// There is tricky logic to resolve deletes that happened while merging
DECL|method|testConcurrentUpdates
specifier|public
name|void
name|testConcurrentUpdates
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriterConfig
name|iwc
init|=
operator|new
name|IndexWriterConfig
argument_list|(
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Sort
name|indexSort
init|=
operator|new
name|Sort
argument_list|(
operator|new
name|SortField
argument_list|(
literal|"foo"
argument_list|,
name|SortField
operator|.
name|Type
operator|.
name|LONG
argument_list|)
argument_list|)
decl_stmt|;
name|iwc
operator|.
name|setIndexSort
argument_list|(
name|indexSort
argument_list|)
expr_stmt|;
name|IndexWriter
name|w
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|iwc
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|Integer
argument_list|,
name|Long
argument_list|>
name|values
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|int
name|numDocs
init|=
name|atLeast
argument_list|(
literal|100
argument_list|)
decl_stmt|;
name|Thread
index|[]
name|threads
init|=
operator|new
name|Thread
index|[
literal|2
index|]
decl_stmt|;
specifier|final
name|AtomicInteger
name|updateCount
init|=
operator|new
name|AtomicInteger
argument_list|(
name|atLeast
argument_list|(
literal|1000
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|threads
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|Random
name|r
init|=
operator|new
name|Random
argument_list|(
name|random
argument_list|()
operator|.
name|nextLong
argument_list|()
argument_list|)
decl_stmt|;
name|threads
index|[
name|i
index|]
operator|=
operator|new
name|Thread
argument_list|(
operator|new
name|UpdateRunnable
argument_list|(
name|numDocs
argument_list|,
name|r
argument_list|,
name|latch
argument_list|,
name|updateCount
argument_list|,
name|w
argument_list|,
name|values
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Thread
name|thread
range|:
name|threads
control|)
block|{
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
for|for
control|(
name|Thread
name|thread
range|:
name|threads
control|)
block|{
name|thread
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
name|w
operator|.
name|forceMerge
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|DirectoryReader
name|reader
init|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|w
argument_list|)
decl_stmt|;
name|IndexSearcher
name|searcher
init|=
name|newSearcher
argument_list|(
name|reader
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
operator|++
name|i
control|)
block|{
specifier|final
name|TopDocs
name|topDocs
init|=
name|searcher
operator|.
name|search
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"id"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
argument_list|,
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|values
operator|.
name|containsKey
argument_list|(
name|i
argument_list|)
operator|==
literal|false
condition|)
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|topDocs
operator|.
name|totalHits
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|topDocs
operator|.
name|totalHits
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|values
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|longValue
argument_list|()
argument_list|,
name|MultiDocValues
operator|.
name|getNumericValues
argument_list|(
name|reader
argument_list|,
literal|"foo"
argument_list|)
operator|.
name|get
argument_list|(
name|topDocs
operator|.
name|scoreDocs
index|[
literal|0
index|]
operator|.
name|doc
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|class|DVUpdateRunnable
specifier|static
class|class
name|DVUpdateRunnable
implements|implements
name|Runnable
block|{
DECL|field|numDocs
specifier|private
specifier|final
name|int
name|numDocs
decl_stmt|;
DECL|field|random
specifier|private
specifier|final
name|Random
name|random
decl_stmt|;
DECL|field|updateCount
specifier|private
specifier|final
name|AtomicInteger
name|updateCount
decl_stmt|;
DECL|field|w
specifier|private
specifier|final
name|IndexWriter
name|w
decl_stmt|;
DECL|field|values
specifier|private
specifier|final
name|Map
argument_list|<
name|Integer
argument_list|,
name|Long
argument_list|>
name|values
decl_stmt|;
DECL|field|latch
specifier|private
specifier|final
name|CountDownLatch
name|latch
decl_stmt|;
DECL|method|DVUpdateRunnable
name|DVUpdateRunnable
parameter_list|(
name|int
name|numDocs
parameter_list|,
name|Random
name|random
parameter_list|,
name|CountDownLatch
name|latch
parameter_list|,
name|AtomicInteger
name|updateCount
parameter_list|,
name|IndexWriter
name|w
parameter_list|,
name|Map
argument_list|<
name|Integer
argument_list|,
name|Long
argument_list|>
name|values
parameter_list|)
block|{
name|this
operator|.
name|numDocs
operator|=
name|numDocs
expr_stmt|;
name|this
operator|.
name|random
operator|=
name|random
expr_stmt|;
name|this
operator|.
name|latch
operator|=
name|latch
expr_stmt|;
name|this
operator|.
name|updateCount
operator|=
name|updateCount
expr_stmt|;
name|this
operator|.
name|w
operator|=
name|w
expr_stmt|;
name|this
operator|.
name|values
operator|=
name|values
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|latch
operator|.
name|await
argument_list|()
expr_stmt|;
while|while
condition|(
name|updateCount
operator|.
name|decrementAndGet
argument_list|()
operator|>=
literal|0
condition|)
block|{
specifier|final
name|int
name|id
init|=
name|random
operator|.
name|nextInt
argument_list|(
name|numDocs
argument_list|)
decl_stmt|;
specifier|final
name|long
name|value
init|=
name|random
operator|.
name|nextInt
argument_list|(
literal|20
argument_list|)
decl_stmt|;
synchronized|synchronized
init|(
name|values
init|)
block|{
name|w
operator|.
name|updateDocValues
argument_list|(
operator|new
name|Term
argument_list|(
literal|"id"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|id
argument_list|)
argument_list|)
argument_list|,
operator|new
name|NumericDocValuesField
argument_list|(
literal|"foo"
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|values
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
switch|switch
condition|(
name|random
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
condition|)
block|{
case|case
literal|0
case|:
case|case
literal|1
case|:
comment|// reopen
name|DirectoryReader
operator|.
name|open
argument_list|(
name|w
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
break|break;
case|case
literal|2
case|:
name|w
operator|.
name|forceMerge
argument_list|(
literal|3
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
decl||
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
comment|// There is tricky logic to resolve dv updates that happened while merging
DECL|method|testConcurrentDVUpdates
specifier|public
name|void
name|testConcurrentDVUpdates
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriterConfig
name|iwc
init|=
operator|new
name|IndexWriterConfig
argument_list|(
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Sort
name|indexSort
init|=
operator|new
name|Sort
argument_list|(
operator|new
name|SortField
argument_list|(
literal|"foo"
argument_list|,
name|SortField
operator|.
name|Type
operator|.
name|LONG
argument_list|)
argument_list|)
decl_stmt|;
name|iwc
operator|.
name|setIndexSort
argument_list|(
name|indexSort
argument_list|)
expr_stmt|;
name|IndexWriter
name|w
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|iwc
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|Integer
argument_list|,
name|Long
argument_list|>
name|values
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|int
name|numDocs
init|=
name|atLeast
argument_list|(
literal|100
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
operator|++
name|i
control|)
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|StringField
argument_list|(
literal|"id"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|,
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|NumericDocValuesField
argument_list|(
literal|"foo"
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|values
operator|.
name|put
argument_list|(
name|i
argument_list|,
operator|-
literal|1L
argument_list|)
expr_stmt|;
block|}
name|Thread
index|[]
name|threads
init|=
operator|new
name|Thread
index|[
literal|2
index|]
decl_stmt|;
specifier|final
name|AtomicInteger
name|updateCount
init|=
operator|new
name|AtomicInteger
argument_list|(
name|atLeast
argument_list|(
literal|1000
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|threads
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|Random
name|r
init|=
operator|new
name|Random
argument_list|(
name|random
argument_list|()
operator|.
name|nextLong
argument_list|()
argument_list|)
decl_stmt|;
name|threads
index|[
name|i
index|]
operator|=
operator|new
name|Thread
argument_list|(
operator|new
name|DVUpdateRunnable
argument_list|(
name|numDocs
argument_list|,
name|r
argument_list|,
name|latch
argument_list|,
name|updateCount
argument_list|,
name|w
argument_list|,
name|values
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Thread
name|thread
range|:
name|threads
control|)
block|{
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
for|for
control|(
name|Thread
name|thread
range|:
name|threads
control|)
block|{
name|thread
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
name|w
operator|.
name|forceMerge
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|DirectoryReader
name|reader
init|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|w
argument_list|)
decl_stmt|;
name|IndexSearcher
name|searcher
init|=
name|newSearcher
argument_list|(
name|reader
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
operator|++
name|i
control|)
block|{
specifier|final
name|TopDocs
name|topDocs
init|=
name|searcher
operator|.
name|search
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"id"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|topDocs
operator|.
name|totalHits
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|values
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|longValue
argument_list|()
argument_list|,
name|MultiDocValues
operator|.
name|getNumericValues
argument_list|(
name|reader
argument_list|,
literal|"foo"
argument_list|)
operator|.
name|get
argument_list|(
name|topDocs
operator|.
name|scoreDocs
index|[
literal|0
index|]
operator|.
name|doc
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testAddIndexes
specifier|public
name|void
name|testAddIndexes
parameter_list|(
name|boolean
name|withDeletes
parameter_list|)
throws|throws
name|Exception
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|RandomIndexWriter
name|w
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|)
decl_stmt|;
specifier|final
name|int
name|numDocs
init|=
name|atLeast
argument_list|(
literal|100
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
operator|++
name|i
control|)
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|StringField
argument_list|(
literal|"id"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|,
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|NumericDocValuesField
argument_list|(
literal|"foo"
argument_list|,
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|20
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|withDeletes
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|5
argument_list|)
init|;
name|i
operator|<
name|numDocs
condition|;
name|i
operator|+=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|5
argument_list|)
control|)
block|{
name|w
operator|.
name|deleteDocuments
argument_list|(
operator|new
name|Term
argument_list|(
literal|"id"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|IndexReader
name|reader
init|=
name|w
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|Directory
name|dir2
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriterConfig
name|iwc
init|=
operator|new
name|IndexWriterConfig
argument_list|(
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Sort
name|indexSort
init|=
operator|new
name|Sort
argument_list|(
operator|new
name|SortField
argument_list|(
literal|"foo"
argument_list|,
name|SortField
operator|.
name|Type
operator|.
name|LONG
argument_list|)
argument_list|)
decl_stmt|;
name|iwc
operator|.
name|setIndexSort
argument_list|(
name|indexSort
argument_list|)
expr_stmt|;
name|IndexWriter
name|w2
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir2
argument_list|,
name|iwc
argument_list|)
decl_stmt|;
name|CodecReader
index|[]
name|codecReaders
init|=
operator|new
name|CodecReader
index|[
name|reader
operator|.
name|leaves
argument_list|()
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|codecReaders
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|codecReaders
index|[
name|i
index|]
operator|=
operator|(
name|CodecReader
operator|)
name|reader
operator|.
name|leaves
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|reader
argument_list|()
expr_stmt|;
block|}
name|w2
operator|.
name|addIndexes
argument_list|(
name|codecReaders
argument_list|)
expr_stmt|;
specifier|final
name|IndexReader
name|reader2
init|=
name|w2
operator|.
name|getReader
argument_list|()
decl_stmt|;
specifier|final
name|IndexSearcher
name|searcher
init|=
name|newSearcher
argument_list|(
name|reader
argument_list|)
decl_stmt|;
specifier|final
name|IndexSearcher
name|searcher2
init|=
name|newSearcher
argument_list|(
name|reader2
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
operator|++
name|i
control|)
block|{
name|Query
name|query
init|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"id"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|TopDocs
name|topDocs
init|=
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|TopDocs
name|topDocs2
init|=
name|searcher2
operator|.
name|search
argument_list|(
name|query
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|topDocs
operator|.
name|totalHits
argument_list|,
name|topDocs2
operator|.
name|totalHits
argument_list|)
expr_stmt|;
if|if
condition|(
name|topDocs
operator|.
name|totalHits
operator|==
literal|1
condition|)
block|{
name|assertEquals
argument_list|(
name|MultiDocValues
operator|.
name|getNumericValues
argument_list|(
name|reader
argument_list|,
literal|"foo"
argument_list|)
operator|.
name|get
argument_list|(
name|topDocs
operator|.
name|scoreDocs
index|[
literal|0
index|]
operator|.
name|doc
argument_list|)
argument_list|,
name|MultiDocValues
operator|.
name|getNumericValues
argument_list|(
name|reader2
argument_list|,
literal|"foo"
argument_list|)
operator|.
name|get
argument_list|(
name|topDocs2
operator|.
name|scoreDocs
index|[
literal|0
index|]
operator|.
name|doc
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|IOUtils
operator|.
name|close
argument_list|(
name|reader
argument_list|,
name|reader2
argument_list|,
name|w
argument_list|,
name|w2
argument_list|,
name|dir
argument_list|,
name|dir2
argument_list|)
expr_stmt|;
block|}
DECL|method|testAddIndexes
specifier|public
name|void
name|testAddIndexes
parameter_list|()
throws|throws
name|Exception
block|{
name|testAddIndexes
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|testAddIndexesWithDeletions
specifier|public
name|void
name|testAddIndexesWithDeletions
parameter_list|()
throws|throws
name|Exception
block|{
name|testAddIndexes
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|testBadSort
specifier|public
name|void
name|testBadSort
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexWriterConfig
name|iwc
init|=
operator|new
name|IndexWriterConfig
argument_list|(
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|IllegalArgumentException
name|expected
init|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|iwc
operator|.
name|setIndexSort
argument_list|(
name|Sort
operator|.
name|RELEVANCE
argument_list|)
expr_stmt|;
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"invalid SortField type: must be one of [STRING, INT, FLOAT, LONG, DOUBLE, BYTES] but got:<score>"
argument_list|,
name|expected
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// you can't change the index sort on an existing index:
DECL|method|testIllegalChangeSort
specifier|public
name|void
name|testIllegalChangeSort
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriterConfig
name|iwc
init|=
operator|new
name|IndexWriterConfig
argument_list|(
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|iwc
operator|.
name|setIndexSort
argument_list|(
operator|new
name|Sort
argument_list|(
operator|new
name|SortField
argument_list|(
literal|"foo"
argument_list|,
name|SortField
operator|.
name|Type
operator|.
name|LONG
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|IndexWriter
name|w
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|iwc
argument_list|)
decl_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
operator|new
name|Document
argument_list|()
argument_list|)
expr_stmt|;
name|DirectoryReader
operator|.
name|open
argument_list|(
name|w
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
operator|new
name|Document
argument_list|()
argument_list|)
expr_stmt|;
name|w
operator|.
name|forceMerge
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
specifier|final
name|IndexWriterConfig
name|iwc2
init|=
operator|new
name|IndexWriterConfig
argument_list|(
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|iwc2
operator|.
name|setIndexSort
argument_list|(
operator|new
name|Sort
argument_list|(
operator|new
name|SortField
argument_list|(
literal|"bar"
argument_list|,
name|SortField
operator|.
name|Type
operator|.
name|LONG
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|IllegalArgumentException
name|e
init|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|iwc2
argument_list|)
expr_stmt|;
block|}
argument_list|)
decl_stmt|;
name|String
name|message
init|=
name|e
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|message
operator|.
name|contains
argument_list|(
literal|"cannot change previous indexSort=<long: \"foo\">"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|message
operator|.
name|contains
argument_list|(
literal|"to new indexSort=<long: \"bar\">"
argument_list|)
argument_list|)
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|class|NormsSimilarity
specifier|static
specifier|final
class|class
name|NormsSimilarity
extends|extends
name|Similarity
block|{
DECL|field|in
specifier|private
specifier|final
name|Similarity
name|in
decl_stmt|;
DECL|method|NormsSimilarity
specifier|public
name|NormsSimilarity
parameter_list|(
name|Similarity
name|in
parameter_list|)
block|{
name|this
operator|.
name|in
operator|=
name|in
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|computeNorm
specifier|public
name|long
name|computeNorm
parameter_list|(
name|FieldInvertState
name|state
parameter_list|)
block|{
if|if
condition|(
name|state
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|NORMS_FIELD
argument_list|)
condition|)
block|{
return|return
name|Float
operator|.
name|floatToIntBits
argument_list|(
name|state
operator|.
name|getBoost
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|in
operator|.
name|computeNorm
argument_list|(
name|state
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|computeWeight
specifier|public
name|SimWeight
name|computeWeight
parameter_list|(
name|CollectionStatistics
name|collectionStats
parameter_list|,
name|TermStatistics
modifier|...
name|termStats
parameter_list|)
block|{
return|return
name|in
operator|.
name|computeWeight
argument_list|(
name|collectionStats
argument_list|,
name|termStats
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|simScorer
specifier|public
name|SimScorer
name|simScorer
parameter_list|(
name|SimWeight
name|weight
parameter_list|,
name|LeafReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|in
operator|.
name|simScorer
argument_list|(
name|weight
argument_list|,
name|context
argument_list|)
return|;
block|}
block|}
DECL|class|PositionsTokenStream
specifier|static
specifier|final
class|class
name|PositionsTokenStream
extends|extends
name|TokenStream
block|{
DECL|field|term
specifier|private
specifier|final
name|CharTermAttribute
name|term
decl_stmt|;
DECL|field|payload
specifier|private
specifier|final
name|PayloadAttribute
name|payload
decl_stmt|;
DECL|field|offset
specifier|private
specifier|final
name|OffsetAttribute
name|offset
decl_stmt|;
DECL|field|pos
DECL|field|off
specifier|private
name|int
name|pos
decl_stmt|,
name|off
decl_stmt|;
DECL|method|PositionsTokenStream
specifier|public
name|PositionsTokenStream
parameter_list|()
block|{
name|term
operator|=
name|addAttribute
argument_list|(
name|CharTermAttribute
operator|.
name|class
argument_list|)
expr_stmt|;
name|payload
operator|=
name|addAttribute
argument_list|(
name|PayloadAttribute
operator|.
name|class
argument_list|)
expr_stmt|;
name|offset
operator|=
name|addAttribute
argument_list|(
name|OffsetAttribute
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|incrementToken
specifier|public
name|boolean
name|incrementToken
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|pos
operator|==
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
name|clearAttributes
argument_list|()
expr_stmt|;
name|term
operator|.
name|append
argument_list|(
name|DOC_POSITIONS_TERM
argument_list|)
expr_stmt|;
name|payload
operator|.
name|setPayload
argument_list|(
operator|new
name|BytesRef
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|pos
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|offset
operator|.
name|setOffset
argument_list|(
name|off
argument_list|,
name|off
argument_list|)
expr_stmt|;
operator|--
name|pos
expr_stmt|;
operator|++
name|off
expr_stmt|;
return|return
literal|true
return|;
block|}
DECL|method|setId
name|void
name|setId
parameter_list|(
name|int
name|id
parameter_list|)
block|{
name|pos
operator|=
name|id
operator|/
literal|10
operator|+
literal|1
expr_stmt|;
name|off
operator|=
literal|0
expr_stmt|;
block|}
block|}
DECL|field|dir
specifier|private
specifier|static
name|Directory
name|dir
decl_stmt|;
DECL|field|sortedReader
specifier|private
specifier|static
name|IndexReader
name|sortedReader
decl_stmt|;
DECL|field|TERM_VECTORS_TYPE
specifier|private
specifier|static
specifier|final
name|FieldType
name|TERM_VECTORS_TYPE
init|=
operator|new
name|FieldType
argument_list|(
name|TextField
operator|.
name|TYPE_NOT_STORED
argument_list|)
decl_stmt|;
static|static
block|{
name|TERM_VECTORS_TYPE
operator|.
name|setStoreTermVectors
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|TERM_VECTORS_TYPE
operator|.
name|freeze
argument_list|()
expr_stmt|;
block|}
DECL|field|POSITIONS_TYPE
specifier|private
specifier|static
specifier|final
name|FieldType
name|POSITIONS_TYPE
init|=
operator|new
name|FieldType
argument_list|(
name|TextField
operator|.
name|TYPE_NOT_STORED
argument_list|)
decl_stmt|;
static|static
block|{
name|POSITIONS_TYPE
operator|.
name|setIndexOptions
argument_list|(
name|IndexOptions
operator|.
name|DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS
argument_list|)
expr_stmt|;
name|POSITIONS_TYPE
operator|.
name|freeze
argument_list|()
expr_stmt|;
block|}
DECL|field|ID_FIELD
specifier|private
specifier|static
specifier|final
name|String
name|ID_FIELD
init|=
literal|"id"
decl_stmt|;
DECL|field|DOCS_ENUM_FIELD
specifier|private
specifier|static
specifier|final
name|String
name|DOCS_ENUM_FIELD
init|=
literal|"docs"
decl_stmt|;
DECL|field|DOCS_ENUM_TERM
specifier|private
specifier|static
specifier|final
name|String
name|DOCS_ENUM_TERM
init|=
literal|"$all$"
decl_stmt|;
DECL|field|DOC_POSITIONS_FIELD
specifier|private
specifier|static
specifier|final
name|String
name|DOC_POSITIONS_FIELD
init|=
literal|"positions"
decl_stmt|;
DECL|field|DOC_POSITIONS_TERM
specifier|private
specifier|static
specifier|final
name|String
name|DOC_POSITIONS_TERM
init|=
literal|"$all$"
decl_stmt|;
DECL|field|NUMERIC_DV_FIELD
specifier|private
specifier|static
specifier|final
name|String
name|NUMERIC_DV_FIELD
init|=
literal|"numeric"
decl_stmt|;
DECL|field|SORTED_NUMERIC_DV_FIELD
specifier|private
specifier|static
specifier|final
name|String
name|SORTED_NUMERIC_DV_FIELD
init|=
literal|"sorted_numeric"
decl_stmt|;
DECL|field|NORMS_FIELD
specifier|private
specifier|static
specifier|final
name|String
name|NORMS_FIELD
init|=
literal|"norm"
decl_stmt|;
DECL|field|BINARY_DV_FIELD
specifier|private
specifier|static
specifier|final
name|String
name|BINARY_DV_FIELD
init|=
literal|"binary"
decl_stmt|;
DECL|field|SORTED_DV_FIELD
specifier|private
specifier|static
specifier|final
name|String
name|SORTED_DV_FIELD
init|=
literal|"sorted"
decl_stmt|;
DECL|field|SORTED_SET_DV_FIELD
specifier|private
specifier|static
specifier|final
name|String
name|SORTED_SET_DV_FIELD
init|=
literal|"sorted_set"
decl_stmt|;
DECL|field|TERM_VECTORS_FIELD
specifier|private
specifier|static
specifier|final
name|String
name|TERM_VECTORS_FIELD
init|=
literal|"term_vectors"
decl_stmt|;
DECL|field|DIMENSIONAL_FIELD
specifier|private
specifier|static
specifier|final
name|String
name|DIMENSIONAL_FIELD
init|=
literal|"numeric1d"
decl_stmt|;
DECL|method|doc
specifier|private
specifier|static
name|Document
name|doc
parameter_list|(
specifier|final
name|int
name|id
parameter_list|,
name|PositionsTokenStream
name|positions
parameter_list|)
block|{
specifier|final
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|StringField
argument_list|(
name|ID_FIELD
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|id
argument_list|)
argument_list|,
name|Store
operator|.
name|YES
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|StringField
argument_list|(
name|DOCS_ENUM_FIELD
argument_list|,
name|DOCS_ENUM_TERM
argument_list|,
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|positions
operator|.
name|setId
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
name|DOC_POSITIONS_FIELD
argument_list|,
name|positions
argument_list|,
name|POSITIONS_TYPE
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|NumericDocValuesField
argument_list|(
name|NUMERIC_DV_FIELD
argument_list|,
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|TextField
name|norms
init|=
operator|new
name|TextField
argument_list|(
name|NORMS_FIELD
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|id
argument_list|)
argument_list|,
name|Store
operator|.
name|NO
argument_list|)
decl_stmt|;
name|norms
operator|.
name|setBoost
argument_list|(
name|Float
operator|.
name|intBitsToFloat
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|norms
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|BinaryDocValuesField
argument_list|(
name|BINARY_DV_FIELD
argument_list|,
operator|new
name|BytesRef
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|id
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|SortedDocValuesField
argument_list|(
name|SORTED_DV_FIELD
argument_list|,
operator|new
name|BytesRef
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|id
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|SortedSetDocValuesField
argument_list|(
name|SORTED_SET_DV_FIELD
argument_list|,
operator|new
name|BytesRef
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|id
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|SortedSetDocValuesField
argument_list|(
name|SORTED_SET_DV_FIELD
argument_list|,
operator|new
name|BytesRef
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|id
operator|+
literal|1
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|SortedNumericDocValuesField
argument_list|(
name|SORTED_NUMERIC_DV_FIELD
argument_list|,
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|SortedNumericDocValuesField
argument_list|(
name|SORTED_NUMERIC_DV_FIELD
argument_list|,
name|id
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
name|TERM_VECTORS_FIELD
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|id
argument_list|)
argument_list|,
name|TERM_VECTORS_TYPE
argument_list|)
argument_list|)
expr_stmt|;
name|byte
index|[]
name|bytes
init|=
operator|new
name|byte
index|[
literal|4
index|]
decl_stmt|;
name|NumericUtils
operator|.
name|intToSortableBytes
argument_list|(
name|id
argument_list|,
name|bytes
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|BinaryPoint
argument_list|(
name|DIMENSIONAL_FIELD
argument_list|,
name|bytes
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|doc
return|;
block|}
annotation|@
name|AfterClass
DECL|method|afterClass
specifier|public
specifier|static
name|void
name|afterClass
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|sortedReader
operator|!=
literal|null
condition|)
block|{
name|sortedReader
operator|.
name|close
argument_list|()
expr_stmt|;
name|sortedReader
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|dir
operator|!=
literal|null
condition|)
block|{
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|BeforeClass
DECL|method|createIndex
specifier|public
specifier|static
name|void
name|createIndex
parameter_list|()
throws|throws
name|Exception
block|{
name|dir
operator|=
name|newFSDirectory
argument_list|(
name|createTempDir
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|numDocs
init|=
name|atLeast
argument_list|(
literal|100
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|ids
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
name|i
operator|++
control|)
block|{
name|ids
operator|.
name|add
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|i
operator|*
literal|10
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// shuffle them for indexing
name|Collections
operator|.
name|shuffle
argument_list|(
name|ids
argument_list|,
name|random
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Shuffled IDs for indexing: "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|ids
operator|.
name|toArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|PositionsTokenStream
name|positions
init|=
operator|new
name|PositionsTokenStream
argument_list|()
decl_stmt|;
name|IndexWriterConfig
name|conf
init|=
name|newIndexWriterConfig
argument_list|(
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|conf
operator|.
name|setMaxBufferedDocs
argument_list|(
literal|4
argument_list|)
expr_stmt|;
comment|// create some segments
name|conf
operator|.
name|setSimilarity
argument_list|(
operator|new
name|NormsSimilarity
argument_list|(
name|conf
operator|.
name|getSimilarity
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// for testing norms field
comment|// nocommit
name|conf
operator|.
name|setMergeScheduler
argument_list|(
operator|new
name|SerialMergeScheduler
argument_list|()
argument_list|)
expr_stmt|;
comment|// sort the index by id (as integer, in NUMERIC_DV_FIELD)
name|conf
operator|.
name|setIndexSort
argument_list|(
operator|new
name|Sort
argument_list|(
operator|new
name|SortField
argument_list|(
name|NUMERIC_DV_FIELD
argument_list|,
name|SortField
operator|.
name|Type
operator|.
name|INT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|RandomIndexWriter
name|writer
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|writer
operator|.
name|setDoRandomForceMerge
argument_list|(
literal|false
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|id
range|:
name|ids
control|)
block|{
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|(
name|id
argument_list|,
name|positions
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// delete some documents
name|writer
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|// nocommit need thread safety test too
for|for
control|(
name|Integer
name|id
range|:
name|ids
control|)
block|{
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextDouble
argument_list|()
operator|<
literal|0.2
condition|)
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"delete doc_id "
operator|+
name|id
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|deleteDocuments
argument_list|(
operator|new
name|Term
argument_list|(
name|ID_FIELD
argument_list|,
name|id
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|sortedReader
operator|=
name|writer
operator|.
name|getReader
argument_list|()
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|TestUtil
operator|.
name|checkReader
argument_list|(
name|sortedReader
argument_list|)
expr_stmt|;
block|}
comment|// nocommit just do assertReaderEquals, don't use @BeforeClass, etc.?
DECL|method|testBinaryDocValuesField
specifier|public
name|void
name|testBinaryDocValuesField
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|LeafReaderContext
name|ctx
range|:
name|sortedReader
operator|.
name|leaves
argument_list|()
control|)
block|{
name|LeafReader
name|reader
init|=
name|ctx
operator|.
name|reader
argument_list|()
decl_stmt|;
name|BinaryDocValues
name|dv
init|=
name|reader
operator|.
name|getBinaryDocValues
argument_list|(
name|BINARY_DV_FIELD
argument_list|)
decl_stmt|;
name|boolean
name|isSorted
init|=
name|reader
operator|.
name|getIndexSort
argument_list|()
operator|!=
literal|null
decl_stmt|;
name|int
name|lastID
init|=
name|Integer
operator|.
name|MIN_VALUE
decl_stmt|;
for|for
control|(
name|int
name|docID
init|=
literal|0
init|;
name|docID
operator|<
name|reader
operator|.
name|maxDoc
argument_list|()
condition|;
name|docID
operator|++
control|)
block|{
name|BytesRef
name|bytes
init|=
name|dv
operator|.
name|get
argument_list|(
name|docID
argument_list|)
decl_stmt|;
name|String
name|idString
init|=
name|reader
operator|.
name|document
argument_list|(
name|docID
argument_list|)
operator|.
name|get
argument_list|(
name|ID_FIELD
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect binary DocValues for doc "
operator|+
name|docID
argument_list|,
name|idString
argument_list|,
name|bytes
operator|.
name|utf8ToString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|isSorted
condition|)
block|{
name|int
name|id
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|idString
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"lastID="
operator|+
name|lastID
operator|+
literal|" vs id="
operator|+
name|id
argument_list|,
name|lastID
operator|<
name|id
argument_list|)
expr_stmt|;
name|lastID
operator|=
name|id
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|testPostings
specifier|public
name|void
name|testPostings
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|LeafReaderContext
name|ctx
range|:
name|sortedReader
operator|.
name|leaves
argument_list|()
control|)
block|{
name|LeafReader
name|reader
init|=
name|ctx
operator|.
name|reader
argument_list|()
decl_stmt|;
name|TermsEnum
name|termsEnum
init|=
name|reader
operator|.
name|terms
argument_list|(
name|DOC_POSITIONS_FIELD
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|SeekStatus
operator|.
name|FOUND
argument_list|,
name|termsEnum
operator|.
name|seekCeil
argument_list|(
operator|new
name|BytesRef
argument_list|(
name|DOC_POSITIONS_TERM
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|PostingsEnum
name|sortedPositions
init|=
name|termsEnum
operator|.
name|postings
argument_list|(
literal|null
argument_list|,
name|PostingsEnum
operator|.
name|ALL
argument_list|)
decl_stmt|;
name|int
name|doc
decl_stmt|;
comment|// test nextDoc()
while|while
condition|(
operator|(
name|doc
operator|=
name|sortedPositions
operator|.
name|nextDoc
argument_list|()
operator|)
operator|!=
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
condition|)
block|{
name|int
name|freq
init|=
name|sortedPositions
operator|.
name|freq
argument_list|()
decl_stmt|;
name|int
name|id
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|reader
operator|.
name|document
argument_list|(
name|doc
argument_list|)
operator|.
name|get
argument_list|(
name|ID_FIELD
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect freq for doc="
operator|+
name|doc
argument_list|,
name|id
operator|/
literal|10
operator|+
literal|1
argument_list|,
name|freq
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|freq
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
literal|"incorrect position for doc="
operator|+
name|doc
argument_list|,
name|i
argument_list|,
name|sortedPositions
operator|.
name|nextPosition
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect startOffset for doc="
operator|+
name|doc
argument_list|,
name|i
argument_list|,
name|sortedPositions
operator|.
name|startOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect endOffset for doc="
operator|+
name|doc
argument_list|,
name|i
argument_list|,
name|sortedPositions
operator|.
name|endOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect payload for doc="
operator|+
name|doc
argument_list|,
name|freq
operator|-
name|i
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|sortedPositions
operator|.
name|getPayload
argument_list|()
operator|.
name|utf8ToString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// test advance()
specifier|final
name|PostingsEnum
name|reuse
init|=
name|sortedPositions
decl_stmt|;
name|sortedPositions
operator|=
name|termsEnum
operator|.
name|postings
argument_list|(
name|reuse
argument_list|,
name|PostingsEnum
operator|.
name|ALL
argument_list|)
expr_stmt|;
name|doc
operator|=
literal|0
expr_stmt|;
while|while
condition|(
operator|(
name|doc
operator|=
name|sortedPositions
operator|.
name|advance
argument_list|(
name|doc
operator|+
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|5
argument_list|)
argument_list|)
operator|)
operator|!=
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
condition|)
block|{
name|int
name|freq
init|=
name|sortedPositions
operator|.
name|freq
argument_list|()
decl_stmt|;
name|int
name|id
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|reader
operator|.
name|document
argument_list|(
name|doc
argument_list|)
operator|.
name|get
argument_list|(
name|ID_FIELD
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect freq for doc="
operator|+
name|doc
argument_list|,
name|id
operator|/
literal|10
operator|+
literal|1
argument_list|,
name|freq
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|freq
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
literal|"incorrect position for doc="
operator|+
name|doc
argument_list|,
name|i
argument_list|,
name|sortedPositions
operator|.
name|nextPosition
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect startOffset for doc="
operator|+
name|doc
argument_list|,
name|i
argument_list|,
name|sortedPositions
operator|.
name|startOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect endOffset for doc="
operator|+
name|doc
argument_list|,
name|i
argument_list|,
name|sortedPositions
operator|.
name|endOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect payload for doc="
operator|+
name|doc
argument_list|,
name|freq
operator|-
name|i
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|sortedPositions
operator|.
name|getPayload
argument_list|()
operator|.
name|utf8ToString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|testDocsAreSortedByID
specifier|public
name|void
name|testDocsAreSortedByID
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|LeafReaderContext
name|ctx
range|:
name|sortedReader
operator|.
name|leaves
argument_list|()
control|)
block|{
name|LeafReader
name|reader
init|=
name|ctx
operator|.
name|reader
argument_list|()
decl_stmt|;
if|if
condition|(
name|reader
operator|.
name|getIndexSort
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|int
name|maxDoc
init|=
name|reader
operator|.
name|maxDoc
argument_list|()
decl_stmt|;
name|int
name|lastID
init|=
name|Integer
operator|.
name|MIN_VALUE
decl_stmt|;
for|for
control|(
name|int
name|doc
init|=
literal|0
init|;
name|doc
operator|<
name|maxDoc
condition|;
name|doc
operator|++
control|)
block|{
name|int
name|id
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|reader
operator|.
name|document
argument_list|(
name|doc
argument_list|)
operator|.
name|get
argument_list|(
name|ID_FIELD
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|id
operator|>
name|lastID
argument_list|)
expr_stmt|;
name|lastID
operator|=
name|id
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|testNormValues
specifier|public
name|void
name|testNormValues
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|LeafReaderContext
name|ctx
range|:
name|sortedReader
operator|.
name|leaves
argument_list|()
control|)
block|{
name|LeafReader
name|reader
init|=
name|ctx
operator|.
name|reader
argument_list|()
decl_stmt|;
name|NumericDocValues
name|dv
init|=
name|reader
operator|.
name|getNormValues
argument_list|(
name|NORMS_FIELD
argument_list|)
decl_stmt|;
name|int
name|maxDoc
init|=
name|reader
operator|.
name|maxDoc
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|doc
init|=
literal|0
init|;
name|doc
operator|<
name|maxDoc
condition|;
name|doc
operator|++
control|)
block|{
name|int
name|id
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|reader
operator|.
name|document
argument_list|(
name|doc
argument_list|)
operator|.
name|get
argument_list|(
name|ID_FIELD
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect norm value for doc "
operator|+
name|doc
argument_list|,
name|id
argument_list|,
name|dv
operator|.
name|get
argument_list|(
name|doc
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testNumericDocValuesField
specifier|public
name|void
name|testNumericDocValuesField
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|LeafReaderContext
name|ctx
range|:
name|sortedReader
operator|.
name|leaves
argument_list|()
control|)
block|{
name|LeafReader
name|reader
init|=
name|ctx
operator|.
name|reader
argument_list|()
decl_stmt|;
name|NumericDocValues
name|dv
init|=
name|reader
operator|.
name|getNumericDocValues
argument_list|(
name|NUMERIC_DV_FIELD
argument_list|)
decl_stmt|;
name|int
name|maxDoc
init|=
name|reader
operator|.
name|maxDoc
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|doc
init|=
literal|0
init|;
name|doc
operator|<
name|maxDoc
condition|;
name|doc
operator|++
control|)
block|{
name|int
name|id
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|reader
operator|.
name|document
argument_list|(
name|doc
argument_list|)
operator|.
name|get
argument_list|(
name|ID_FIELD
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect numeric DocValues for doc "
operator|+
name|doc
argument_list|,
name|id
argument_list|,
name|dv
operator|.
name|get
argument_list|(
name|doc
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testSortedDocValuesField
specifier|public
name|void
name|testSortedDocValuesField
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|LeafReaderContext
name|ctx
range|:
name|sortedReader
operator|.
name|leaves
argument_list|()
control|)
block|{
name|LeafReader
name|reader
init|=
name|ctx
operator|.
name|reader
argument_list|()
decl_stmt|;
name|SortedDocValues
name|dv
init|=
name|reader
operator|.
name|getSortedDocValues
argument_list|(
name|SORTED_DV_FIELD
argument_list|)
decl_stmt|;
name|int
name|maxDoc
init|=
name|reader
operator|.
name|maxDoc
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|doc
init|=
literal|0
init|;
name|doc
operator|<
name|maxDoc
condition|;
name|doc
operator|++
control|)
block|{
specifier|final
name|BytesRef
name|bytes
init|=
name|dv
operator|.
name|get
argument_list|(
name|doc
argument_list|)
decl_stmt|;
name|String
name|id
init|=
name|reader
operator|.
name|document
argument_list|(
name|doc
argument_list|)
operator|.
name|get
argument_list|(
name|ID_FIELD
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect sorted DocValues for doc "
operator|+
name|doc
argument_list|,
name|id
argument_list|,
name|bytes
operator|.
name|utf8ToString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testSortedSetDocValuesField
specifier|public
name|void
name|testSortedSetDocValuesField
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|LeafReaderContext
name|ctx
range|:
name|sortedReader
operator|.
name|leaves
argument_list|()
control|)
block|{
name|LeafReader
name|reader
init|=
name|ctx
operator|.
name|reader
argument_list|()
decl_stmt|;
name|SortedSetDocValues
name|dv
init|=
name|reader
operator|.
name|getSortedSetDocValues
argument_list|(
name|SORTED_SET_DV_FIELD
argument_list|)
decl_stmt|;
name|int
name|maxDoc
init|=
name|reader
operator|.
name|maxDoc
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|doc
init|=
literal|0
init|;
name|doc
operator|<
name|maxDoc
condition|;
name|doc
operator|++
control|)
block|{
name|dv
operator|.
name|setDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|BytesRef
name|bytes
init|=
name|dv
operator|.
name|lookupOrd
argument_list|(
name|dv
operator|.
name|nextOrd
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|id
init|=
name|reader
operator|.
name|document
argument_list|(
name|doc
argument_list|)
operator|.
name|get
argument_list|(
name|ID_FIELD
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect sorted-set DocValues for doc "
operator|+
name|doc
argument_list|,
name|id
argument_list|,
name|bytes
operator|.
name|utf8ToString
argument_list|()
argument_list|)
expr_stmt|;
name|bytes
operator|=
name|dv
operator|.
name|lookupOrd
argument_list|(
name|dv
operator|.
name|nextOrd
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect sorted-set DocValues for doc "
operator|+
name|doc
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|id
argument_list|)
operator|+
literal|1
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|bytes
operator|.
name|utf8ToString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|SortedSetDocValues
operator|.
name|NO_MORE_ORDS
argument_list|,
name|dv
operator|.
name|nextOrd
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testSortedNumericDocValuesField
specifier|public
name|void
name|testSortedNumericDocValuesField
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|LeafReaderContext
name|ctx
range|:
name|sortedReader
operator|.
name|leaves
argument_list|()
control|)
block|{
name|LeafReader
name|reader
init|=
name|ctx
operator|.
name|reader
argument_list|()
decl_stmt|;
name|SortedNumericDocValues
name|dv
init|=
name|reader
operator|.
name|getSortedNumericDocValues
argument_list|(
name|SORTED_NUMERIC_DV_FIELD
argument_list|)
decl_stmt|;
name|int
name|maxDoc
init|=
name|reader
operator|.
name|maxDoc
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|doc
init|=
literal|0
init|;
name|doc
operator|<
name|maxDoc
condition|;
name|doc
operator|++
control|)
block|{
name|dv
operator|.
name|setDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|dv
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|id
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|reader
operator|.
name|document
argument_list|(
name|doc
argument_list|)
operator|.
name|get
argument_list|(
name|ID_FIELD
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect sorted-numeric DocValues for doc "
operator|+
name|doc
argument_list|,
name|id
argument_list|,
name|dv
operator|.
name|valueAt
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect sorted-numeric DocValues for doc "
operator|+
name|doc
argument_list|,
name|id
operator|+
literal|1
argument_list|,
name|dv
operator|.
name|valueAt
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testTermVectors
specifier|public
name|void
name|testTermVectors
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|LeafReaderContext
name|ctx
range|:
name|sortedReader
operator|.
name|leaves
argument_list|()
control|)
block|{
name|LeafReader
name|reader
init|=
name|ctx
operator|.
name|reader
argument_list|()
decl_stmt|;
name|int
name|maxDoc
init|=
name|reader
operator|.
name|maxDoc
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|doc
init|=
literal|0
init|;
name|doc
operator|<
name|maxDoc
condition|;
name|doc
operator|++
control|)
block|{
name|Terms
name|terms
init|=
name|reader
operator|.
name|getTermVector
argument_list|(
name|doc
argument_list|,
name|TERM_VECTORS_FIELD
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"term vectors not found for doc "
operator|+
name|doc
operator|+
literal|" field ["
operator|+
name|TERM_VECTORS_FIELD
operator|+
literal|"]"
argument_list|,
name|terms
argument_list|)
expr_stmt|;
name|String
name|id
init|=
name|reader
operator|.
name|document
argument_list|(
name|doc
argument_list|)
operator|.
name|get
argument_list|(
name|ID_FIELD
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect term vector for doc "
operator|+
name|doc
argument_list|,
name|id
argument_list|,
name|terms
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|utf8ToString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testPoints
specifier|public
name|void
name|testPoints
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|LeafReaderContext
name|ctx
range|:
name|sortedReader
operator|.
name|leaves
argument_list|()
control|)
block|{
specifier|final
name|LeafReader
name|reader
init|=
name|ctx
operator|.
name|reader
argument_list|()
decl_stmt|;
name|PointValues
name|values
init|=
name|reader
operator|.
name|getPointValues
argument_list|()
decl_stmt|;
name|values
operator|.
name|intersect
argument_list|(
name|DIMENSIONAL_FIELD
argument_list|,
operator|new
name|IntersectVisitor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|visit
parameter_list|(
name|int
name|docID
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|visit
parameter_list|(
name|int
name|docID
parameter_list|,
name|byte
index|[]
name|packedValues
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|id
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|reader
operator|.
name|document
argument_list|(
name|docID
argument_list|)
operator|.
name|get
argument_list|(
name|ID_FIELD
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|id
argument_list|,
name|NumericUtils
operator|.
name|sortableBytesToInt
argument_list|(
name|packedValues
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Relation
name|compare
parameter_list|(
name|byte
index|[]
name|minPackedValue
parameter_list|,
name|byte
index|[]
name|maxPackedValue
parameter_list|)
block|{
return|return
name|Relation
operator|.
name|CELL_CROSSES_QUERY
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class
end_unit
