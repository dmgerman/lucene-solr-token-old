begin_unit
begin_package
DECL|package|org.apache.lucene.document
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|FieldType
operator|.
name|NumericType
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DocValuesType
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexOptions
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_comment
comment|/** simple testcases for concrete impl of IndexableFieldType */
end_comment
begin_class
DECL|class|TestFieldType
specifier|public
class|class
name|TestFieldType
extends|extends
name|LuceneTestCase
block|{
DECL|method|testEquals
specifier|public
name|void
name|testEquals
parameter_list|()
throws|throws
name|Exception
block|{
name|FieldType
name|ft
init|=
operator|new
name|FieldType
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|ft
argument_list|,
name|ft
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ft
operator|.
name|equals
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|FieldType
name|ft2
init|=
operator|new
name|FieldType
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|ft
argument_list|,
name|ft2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ft
operator|.
name|hashCode
argument_list|()
argument_list|,
name|ft2
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|FieldType
name|ft3
init|=
operator|new
name|FieldType
argument_list|()
decl_stmt|;
name|ft3
operator|.
name|setIndexOptions
argument_list|(
name|IndexOptions
operator|.
name|DOCS_AND_FREQS
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ft3
operator|.
name|equals
argument_list|(
name|ft
argument_list|)
argument_list|)
expr_stmt|;
name|FieldType
name|ft4
init|=
operator|new
name|FieldType
argument_list|()
decl_stmt|;
name|ft4
operator|.
name|setDocValuesType
argument_list|(
name|DocValuesType
operator|.
name|BINARY
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ft4
operator|.
name|equals
argument_list|(
name|ft
argument_list|)
argument_list|)
expr_stmt|;
name|FieldType
name|ft5
init|=
operator|new
name|FieldType
argument_list|()
decl_stmt|;
name|ft5
operator|.
name|setIndexOptions
argument_list|(
name|IndexOptions
operator|.
name|DOCS_AND_FREQS_AND_POSITIONS
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ft5
operator|.
name|equals
argument_list|(
name|ft
argument_list|)
argument_list|)
expr_stmt|;
name|FieldType
name|ft6
init|=
operator|new
name|FieldType
argument_list|()
decl_stmt|;
name|ft6
operator|.
name|setStored
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ft6
operator|.
name|equals
argument_list|(
name|ft
argument_list|)
argument_list|)
expr_stmt|;
name|FieldType
name|ft7
init|=
operator|new
name|FieldType
argument_list|()
decl_stmt|;
name|ft7
operator|.
name|setOmitNorms
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ft7
operator|.
name|equals
argument_list|(
name|ft
argument_list|)
argument_list|)
expr_stmt|;
name|FieldType
name|ft8
init|=
operator|new
name|FieldType
argument_list|()
decl_stmt|;
name|ft8
operator|.
name|setNumericType
argument_list|(
name|NumericType
operator|.
name|DOUBLE
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ft8
operator|.
name|equals
argument_list|(
name|ft
argument_list|)
argument_list|)
expr_stmt|;
name|FieldType
name|ft9
init|=
operator|new
name|FieldType
argument_list|()
decl_stmt|;
name|ft9
operator|.
name|setNumericPrecisionStep
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ft9
operator|.
name|equals
argument_list|(
name|ft
argument_list|)
argument_list|)
expr_stmt|;
name|FieldType
name|ft10
init|=
operator|new
name|FieldType
argument_list|()
decl_stmt|;
name|ft10
operator|.
name|setStoreTermVectors
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ft10
operator|.
name|equals
argument_list|(
name|ft
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
