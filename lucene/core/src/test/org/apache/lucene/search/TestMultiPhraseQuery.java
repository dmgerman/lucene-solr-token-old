begin_unit
begin_package
DECL|package|org.apache.lucene.search
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|CannedTokenStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Token
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|TextField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DirectoryReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriterConfig
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|MultiFields
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|RandomIndexWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|TermsEnum
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|similarities
operator|.
name|DefaultSimilarity
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|RAMDirectory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import
begin_comment
comment|/**  * This class tests the MultiPhraseQuery class.  *   *   */
end_comment
begin_class
DECL|class|TestMultiPhraseQuery
specifier|public
class|class
name|TestMultiPhraseQuery
extends|extends
name|LuceneTestCase
block|{
DECL|method|testPhrasePrefix
specifier|public
name|void
name|testPhrasePrefix
parameter_list|()
throws|throws
name|IOException
block|{
name|Directory
name|indexStore
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|RandomIndexWriter
name|writer
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|indexStore
argument_list|)
decl_stmt|;
name|add
argument_list|(
literal|"blueberry pie"
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|add
argument_list|(
literal|"blueberry strudel"
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|add
argument_list|(
literal|"blueberry pizza"
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|add
argument_list|(
literal|"blueberry chewing gum"
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|add
argument_list|(
literal|"bluebird pizza"
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|add
argument_list|(
literal|"bluebird foobar pizza"
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|add
argument_list|(
literal|"piccadilly circus"
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|IndexReader
name|reader
init|=
name|writer
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|IndexSearcher
name|searcher
init|=
name|newSearcher
argument_list|(
name|reader
argument_list|)
decl_stmt|;
comment|// search for "blueberry pi*":
name|MultiPhraseQuery
name|query1
init|=
operator|new
name|MultiPhraseQuery
argument_list|()
decl_stmt|;
comment|// search for "strawberry pi*":
name|MultiPhraseQuery
name|query2
init|=
operator|new
name|MultiPhraseQuery
argument_list|()
decl_stmt|;
name|query1
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
literal|"body"
argument_list|,
literal|"blueberry"
argument_list|)
argument_list|)
expr_stmt|;
name|query2
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
literal|"body"
argument_list|,
literal|"strawberry"
argument_list|)
argument_list|)
expr_stmt|;
name|LinkedList
argument_list|<
name|Term
argument_list|>
name|termsWithPrefix
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// this TermEnum gives "piccadilly", "pie" and "pizza".
name|String
name|prefix
init|=
literal|"pi"
decl_stmt|;
name|TermsEnum
name|te
init|=
name|MultiFields
operator|.
name|getFields
argument_list|(
name|reader
argument_list|)
operator|.
name|terms
argument_list|(
literal|"body"
argument_list|)
operator|.
name|iterator
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|te
operator|.
name|seekCeil
argument_list|(
operator|new
name|BytesRef
argument_list|(
name|prefix
argument_list|)
argument_list|)
expr_stmt|;
do|do
block|{
name|String
name|s
init|=
name|te
operator|.
name|term
argument_list|()
operator|.
name|utf8ToString
argument_list|()
decl_stmt|;
if|if
condition|(
name|s
operator|.
name|startsWith
argument_list|(
name|prefix
argument_list|)
condition|)
block|{
name|termsWithPrefix
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
literal|"body"
argument_list|,
name|s
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
do|while
condition|(
name|te
operator|.
name|next
argument_list|()
operator|!=
literal|null
condition|)
do|;
name|query1
operator|.
name|add
argument_list|(
name|termsWithPrefix
operator|.
name|toArray
argument_list|(
operator|new
name|Term
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"body:\"blueberry (piccadilly pie pizza)\""
argument_list|,
name|query1
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|query2
operator|.
name|add
argument_list|(
name|termsWithPrefix
operator|.
name|toArray
argument_list|(
operator|new
name|Term
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"body:\"strawberry (piccadilly pie pizza)\""
argument_list|,
name|query2
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|ScoreDoc
index|[]
name|result
decl_stmt|;
name|result
operator|=
name|searcher
operator|.
name|search
argument_list|(
name|query1
argument_list|,
literal|1000
argument_list|)
operator|.
name|scoreDocs
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|result
operator|.
name|length
argument_list|)
expr_stmt|;
name|result
operator|=
name|searcher
operator|.
name|search
argument_list|(
name|query2
argument_list|,
literal|1000
argument_list|)
operator|.
name|scoreDocs
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// search for "blue* pizza":
name|MultiPhraseQuery
name|query3
init|=
operator|new
name|MultiPhraseQuery
argument_list|()
decl_stmt|;
name|termsWithPrefix
operator|.
name|clear
argument_list|()
expr_stmt|;
name|prefix
operator|=
literal|"blue"
expr_stmt|;
name|te
operator|.
name|seekCeil
argument_list|(
operator|new
name|BytesRef
argument_list|(
name|prefix
argument_list|)
argument_list|)
expr_stmt|;
do|do
block|{
if|if
condition|(
name|te
operator|.
name|term
argument_list|()
operator|.
name|utf8ToString
argument_list|()
operator|.
name|startsWith
argument_list|(
name|prefix
argument_list|)
condition|)
block|{
name|termsWithPrefix
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
literal|"body"
argument_list|,
name|te
operator|.
name|term
argument_list|()
operator|.
name|utf8ToString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
do|while
condition|(
name|te
operator|.
name|next
argument_list|()
operator|!=
literal|null
condition|)
do|;
name|query3
operator|.
name|add
argument_list|(
name|termsWithPrefix
operator|.
name|toArray
argument_list|(
operator|new
name|Term
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|query3
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
literal|"body"
argument_list|,
literal|"pizza"
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|=
name|searcher
operator|.
name|search
argument_list|(
name|query3
argument_list|,
literal|1000
argument_list|)
operator|.
name|scoreDocs
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|result
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// blueberry pizza, bluebird pizza
name|assertEquals
argument_list|(
literal|"body:\"(blueberry bluebird) pizza\""
argument_list|,
name|query3
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// test slop:
name|query3
operator|.
name|setSlop
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|result
operator|=
name|searcher
operator|.
name|search
argument_list|(
name|query3
argument_list|,
literal|1000
argument_list|)
operator|.
name|scoreDocs
expr_stmt|;
comment|// just make sure no exc:
name|searcher
operator|.
name|explain
argument_list|(
name|query3
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|result
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// blueberry pizza, bluebird pizza, bluebird
comment|// foobar pizza
name|MultiPhraseQuery
name|query4
init|=
operator|new
name|MultiPhraseQuery
argument_list|()
decl_stmt|;
try|try
block|{
name|query4
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field1"
argument_list|,
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|query4
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field2"
argument_list|,
literal|"foobar"
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|// okay, all terms must belong to the same field
block|}
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|indexStore
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// LUCENE-2580
DECL|method|testTall
specifier|public
name|void
name|testTall
parameter_list|()
throws|throws
name|IOException
block|{
name|Directory
name|indexStore
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|RandomIndexWriter
name|writer
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|indexStore
argument_list|)
decl_stmt|;
name|add
argument_list|(
literal|"blueberry chocolate pie"
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|add
argument_list|(
literal|"blueberry chocolate tart"
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|IndexReader
name|r
init|=
name|writer
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|IndexSearcher
name|searcher
init|=
name|newSearcher
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|MultiPhraseQuery
name|q
init|=
operator|new
name|MultiPhraseQuery
argument_list|()
decl_stmt|;
name|q
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
literal|"body"
argument_list|,
literal|"blueberry"
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
literal|"body"
argument_list|,
literal|"chocolate"
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|.
name|add
argument_list|(
operator|new
name|Term
index|[]
block|{
operator|new
name|Term
argument_list|(
literal|"body"
argument_list|,
literal|"pie"
argument_list|)
block|,
operator|new
name|Term
argument_list|(
literal|"body"
argument_list|,
literal|"tart"
argument_list|)
block|}
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|searcher
operator|.
name|search
argument_list|(
name|q
argument_list|,
literal|1
argument_list|)
operator|.
name|totalHits
argument_list|)
expr_stmt|;
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
name|indexStore
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Ignore
comment|//LUCENE-3821 fixes sloppy phrase scoring, except for this known problem
DECL|method|testMultiSloppyWithRepeats
specifier|public
name|void
name|testMultiSloppyWithRepeats
parameter_list|()
throws|throws
name|IOException
block|{
name|Directory
name|indexStore
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|RandomIndexWriter
name|writer
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|indexStore
argument_list|)
decl_stmt|;
name|add
argument_list|(
literal|"a b c d e f g h i k"
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|IndexReader
name|r
init|=
name|writer
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|IndexSearcher
name|searcher
init|=
name|newSearcher
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|MultiPhraseQuery
name|q
init|=
operator|new
name|MultiPhraseQuery
argument_list|()
decl_stmt|;
comment|// this will fail, when the scorer would propagate [a] rather than [a,b],
name|q
operator|.
name|add
argument_list|(
operator|new
name|Term
index|[]
block|{
operator|new
name|Term
argument_list|(
literal|"body"
argument_list|,
literal|"a"
argument_list|)
block|,
operator|new
name|Term
argument_list|(
literal|"body"
argument_list|,
literal|"b"
argument_list|)
block|}
argument_list|)
expr_stmt|;
name|q
operator|.
name|add
argument_list|(
operator|new
name|Term
index|[]
block|{
operator|new
name|Term
argument_list|(
literal|"body"
argument_list|,
literal|"a"
argument_list|)
block|}
argument_list|)
expr_stmt|;
name|q
operator|.
name|setSlop
argument_list|(
literal|6
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|searcher
operator|.
name|search
argument_list|(
name|q
argument_list|,
literal|1
argument_list|)
operator|.
name|totalHits
argument_list|)
expr_stmt|;
comment|// should match on "a b"
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
name|indexStore
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testMultiExactWithRepeats
specifier|public
name|void
name|testMultiExactWithRepeats
parameter_list|()
throws|throws
name|IOException
block|{
name|Directory
name|indexStore
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|RandomIndexWriter
name|writer
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|indexStore
argument_list|)
decl_stmt|;
name|add
argument_list|(
literal|"a b c d e f g h i k"
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|IndexReader
name|r
init|=
name|writer
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|IndexSearcher
name|searcher
init|=
name|newSearcher
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|MultiPhraseQuery
name|q
init|=
operator|new
name|MultiPhraseQuery
argument_list|()
decl_stmt|;
name|q
operator|.
name|add
argument_list|(
operator|new
name|Term
index|[]
block|{
operator|new
name|Term
argument_list|(
literal|"body"
argument_list|,
literal|"a"
argument_list|)
block|,
operator|new
name|Term
argument_list|(
literal|"body"
argument_list|,
literal|"d"
argument_list|)
block|}
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|q
operator|.
name|add
argument_list|(
operator|new
name|Term
index|[]
block|{
operator|new
name|Term
argument_list|(
literal|"body"
argument_list|,
literal|"a"
argument_list|)
block|,
operator|new
name|Term
argument_list|(
literal|"body"
argument_list|,
literal|"f"
argument_list|)
block|}
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|searcher
operator|.
name|search
argument_list|(
name|q
argument_list|,
literal|1
argument_list|)
operator|.
name|totalHits
argument_list|)
expr_stmt|;
comment|// should match on "a b"
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
name|indexStore
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|add
specifier|private
name|void
name|add
parameter_list|(
name|String
name|s
parameter_list|,
name|RandomIndexWriter
name|writer
parameter_list|)
throws|throws
name|IOException
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newTextField
argument_list|(
literal|"body"
argument_list|,
name|s
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
DECL|method|testBooleanQueryContainingSingleTermPrefixQuery
specifier|public
name|void
name|testBooleanQueryContainingSingleTermPrefixQuery
parameter_list|()
throws|throws
name|IOException
block|{
comment|// this tests against bug 33161 (now fixed)
comment|// In order to cause the bug, the outer query must have more than one term
comment|// and all terms required.
comment|// The contained PhraseMultiQuery must contain exactly one term array.
name|Directory
name|indexStore
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|RandomIndexWriter
name|writer
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|indexStore
argument_list|)
decl_stmt|;
name|add
argument_list|(
literal|"blueberry pie"
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|add
argument_list|(
literal|"blueberry chewing gum"
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|add
argument_list|(
literal|"blue raspberry pie"
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|IndexReader
name|reader
init|=
name|writer
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|IndexSearcher
name|searcher
init|=
name|newSearcher
argument_list|(
name|reader
argument_list|)
decl_stmt|;
comment|// This query will be equivalent to +body:pie +body:"blue*"
name|BooleanQuery
name|q
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
name|q
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"body"
argument_list|,
literal|"pie"
argument_list|)
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|MultiPhraseQuery
name|trouble
init|=
operator|new
name|MultiPhraseQuery
argument_list|()
decl_stmt|;
name|trouble
operator|.
name|add
argument_list|(
operator|new
name|Term
index|[]
block|{
operator|new
name|Term
argument_list|(
literal|"body"
argument_list|,
literal|"blueberry"
argument_list|)
block|,
operator|new
name|Term
argument_list|(
literal|"body"
argument_list|,
literal|"blue"
argument_list|)
block|}
argument_list|)
expr_stmt|;
name|q
operator|.
name|add
argument_list|(
name|trouble
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
comment|// exception will be thrown here without fix
name|ScoreDoc
index|[]
name|hits
init|=
name|searcher
operator|.
name|search
argument_list|(
name|q
argument_list|,
literal|1000
argument_list|)
operator|.
name|scoreDocs
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong number of hits"
argument_list|,
literal|2
argument_list|,
name|hits
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// just make sure no exc:
name|searcher
operator|.
name|explain
argument_list|(
name|q
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|indexStore
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testPhrasePrefixWithBooleanQuery
specifier|public
name|void
name|testPhrasePrefixWithBooleanQuery
parameter_list|()
throws|throws
name|IOException
block|{
name|Directory
name|indexStore
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|RandomIndexWriter
name|writer
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|indexStore
argument_list|)
decl_stmt|;
name|add
argument_list|(
literal|"This is a test"
argument_list|,
literal|"object"
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|add
argument_list|(
literal|"a note"
argument_list|,
literal|"note"
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|IndexReader
name|reader
init|=
name|writer
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|IndexSearcher
name|searcher
init|=
name|newSearcher
argument_list|(
name|reader
argument_list|)
decl_stmt|;
comment|// This query will be equivalent to +type:note +body:"a t*"
name|BooleanQuery
name|q
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
name|q
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"type"
argument_list|,
literal|"note"
argument_list|)
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|MultiPhraseQuery
name|trouble
init|=
operator|new
name|MultiPhraseQuery
argument_list|()
decl_stmt|;
name|trouble
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
literal|"body"
argument_list|,
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|trouble
operator|.
name|add
argument_list|(
operator|new
name|Term
index|[]
block|{
operator|new
name|Term
argument_list|(
literal|"body"
argument_list|,
literal|"test"
argument_list|)
block|,
operator|new
name|Term
argument_list|(
literal|"body"
argument_list|,
literal|"this"
argument_list|)
block|}
argument_list|)
expr_stmt|;
name|q
operator|.
name|add
argument_list|(
name|trouble
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
comment|// exception will be thrown here without fix for #35626:
name|ScoreDoc
index|[]
name|hits
init|=
name|searcher
operator|.
name|search
argument_list|(
name|q
argument_list|,
literal|1000
argument_list|)
operator|.
name|scoreDocs
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong number of hits"
argument_list|,
literal|0
argument_list|,
name|hits
operator|.
name|length
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|indexStore
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testNoDocs
specifier|public
name|void
name|testNoDocs
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|indexStore
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|RandomIndexWriter
name|writer
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|indexStore
argument_list|)
decl_stmt|;
name|add
argument_list|(
literal|"a note"
argument_list|,
literal|"note"
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|IndexReader
name|reader
init|=
name|writer
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|IndexSearcher
name|searcher
init|=
name|newSearcher
argument_list|(
name|reader
argument_list|)
decl_stmt|;
name|MultiPhraseQuery
name|q
init|=
operator|new
name|MultiPhraseQuery
argument_list|()
decl_stmt|;
name|q
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
literal|"body"
argument_list|,
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|.
name|add
argument_list|(
operator|new
name|Term
index|[]
block|{
operator|new
name|Term
argument_list|(
literal|"body"
argument_list|,
literal|"nope"
argument_list|)
block|,
operator|new
name|Term
argument_list|(
literal|"body"
argument_list|,
literal|"nope"
argument_list|)
block|}
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong number of hits"
argument_list|,
literal|0
argument_list|,
name|searcher
operator|.
name|search
argument_list|(
name|q
argument_list|,
literal|1
argument_list|)
operator|.
name|totalHits
argument_list|)
expr_stmt|;
comment|// just make sure no exc:
name|searcher
operator|.
name|explain
argument_list|(
name|q
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|indexStore
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testHashCodeAndEquals
specifier|public
name|void
name|testHashCodeAndEquals
parameter_list|()
block|{
name|MultiPhraseQuery
name|query1
init|=
operator|new
name|MultiPhraseQuery
argument_list|()
decl_stmt|;
name|MultiPhraseQuery
name|query2
init|=
operator|new
name|MultiPhraseQuery
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|query1
operator|.
name|hashCode
argument_list|()
argument_list|,
name|query2
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|query1
argument_list|,
name|query2
argument_list|)
expr_stmt|;
name|Term
name|term1
init|=
operator|new
name|Term
argument_list|(
literal|"someField"
argument_list|,
literal|"someText"
argument_list|)
decl_stmt|;
name|query1
operator|.
name|add
argument_list|(
name|term1
argument_list|)
expr_stmt|;
name|query2
operator|.
name|add
argument_list|(
name|term1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|query1
operator|.
name|hashCode
argument_list|()
argument_list|,
name|query2
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|query1
argument_list|,
name|query2
argument_list|)
expr_stmt|;
name|Term
name|term2
init|=
operator|new
name|Term
argument_list|(
literal|"someField"
argument_list|,
literal|"someMoreText"
argument_list|)
decl_stmt|;
name|query1
operator|.
name|add
argument_list|(
name|term2
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|query1
operator|.
name|hashCode
argument_list|()
operator|==
name|query2
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|query1
operator|.
name|equals
argument_list|(
name|query2
argument_list|)
argument_list|)
expr_stmt|;
name|query2
operator|.
name|add
argument_list|(
name|term2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|query1
operator|.
name|hashCode
argument_list|()
argument_list|,
name|query2
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|query1
argument_list|,
name|query2
argument_list|)
expr_stmt|;
block|}
DECL|method|add
specifier|private
name|void
name|add
parameter_list|(
name|String
name|s
parameter_list|,
name|String
name|type
parameter_list|,
name|RandomIndexWriter
name|writer
parameter_list|)
throws|throws
name|IOException
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newTextField
argument_list|(
literal|"body"
argument_list|,
name|s
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newStringField
argument_list|(
literal|"type"
argument_list|,
name|type
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
comment|// LUCENE-2526
DECL|method|testEmptyToString
specifier|public
name|void
name|testEmptyToString
parameter_list|()
block|{
operator|new
name|MultiPhraseQuery
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
DECL|method|testCustomIDF
specifier|public
name|void
name|testCustomIDF
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|indexStore
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|RandomIndexWriter
name|writer
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|indexStore
argument_list|)
decl_stmt|;
name|add
argument_list|(
literal|"This is a test"
argument_list|,
literal|"object"
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|add
argument_list|(
literal|"a note"
argument_list|,
literal|"note"
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|IndexReader
name|reader
init|=
name|writer
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|IndexSearcher
name|searcher
init|=
name|newSearcher
argument_list|(
name|reader
argument_list|)
decl_stmt|;
name|searcher
operator|.
name|setSimilarity
argument_list|(
operator|new
name|DefaultSimilarity
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Explanation
name|idfExplain
parameter_list|(
name|CollectionStatistics
name|collectionStats
parameter_list|,
name|TermStatistics
name|termStats
index|[]
parameter_list|)
block|{
return|return
operator|new
name|Explanation
argument_list|(
literal|10f
argument_list|,
literal|"just a test"
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|MultiPhraseQuery
name|query
init|=
operator|new
name|MultiPhraseQuery
argument_list|()
decl_stmt|;
name|query
operator|.
name|add
argument_list|(
operator|new
name|Term
index|[]
block|{
operator|new
name|Term
argument_list|(
literal|"body"
argument_list|,
literal|"this"
argument_list|)
block|,
operator|new
name|Term
argument_list|(
literal|"body"
argument_list|,
literal|"that"
argument_list|)
block|}
argument_list|)
expr_stmt|;
name|query
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
literal|"body"
argument_list|,
literal|"is"
argument_list|)
argument_list|)
expr_stmt|;
name|Weight
name|weight
init|=
name|query
operator|.
name|createWeight
argument_list|(
name|searcher
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|10f
operator|*
literal|10f
argument_list|,
name|weight
operator|.
name|getValueForNormalization
argument_list|()
argument_list|,
literal|0.001f
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|indexStore
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testZeroPosIncr
specifier|public
name|void
name|testZeroPosIncr
parameter_list|()
throws|throws
name|IOException
block|{
name|Directory
name|dir
init|=
operator|new
name|RAMDirectory
argument_list|()
decl_stmt|;
specifier|final
name|Token
index|[]
name|tokens
init|=
operator|new
name|Token
index|[
literal|3
index|]
decl_stmt|;
name|tokens
index|[
literal|0
index|]
operator|=
operator|new
name|Token
argument_list|()
expr_stmt|;
name|tokens
index|[
literal|0
index|]
operator|.
name|append
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|tokens
index|[
literal|0
index|]
operator|.
name|setPositionIncrement
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|tokens
index|[
literal|1
index|]
operator|=
operator|new
name|Token
argument_list|()
expr_stmt|;
name|tokens
index|[
literal|1
index|]
operator|.
name|append
argument_list|(
literal|"b"
argument_list|)
expr_stmt|;
name|tokens
index|[
literal|1
index|]
operator|.
name|setPositionIncrement
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|tokens
index|[
literal|2
index|]
operator|=
operator|new
name|Token
argument_list|()
expr_stmt|;
name|tokens
index|[
literal|2
index|]
operator|.
name|append
argument_list|(
literal|"c"
argument_list|)
expr_stmt|;
name|tokens
index|[
literal|2
index|]
operator|.
name|setPositionIncrement
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|RandomIndexWriter
name|writer
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
literal|"field"
argument_list|,
operator|new
name|CannedTokenStream
argument_list|(
name|tokens
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
literal|"field"
argument_list|,
operator|new
name|CannedTokenStream
argument_list|(
name|tokens
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|IndexReader
name|r
init|=
name|writer
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|IndexSearcher
name|s
init|=
name|newSearcher
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|MultiPhraseQuery
name|mpq
init|=
operator|new
name|MultiPhraseQuery
argument_list|()
decl_stmt|;
comment|//mpq.setSlop(1);
comment|// NOTE: not great that if we do the else clause here we
comment|// get different scores!  MultiPhraseQuery counts that
comment|// phrase as occurring twice per doc (it should be 1, I
comment|// think?).  This is because MultipleTermPositions is able to
comment|// return the same position more than once (0, in this
comment|// case):
if|if
condition|(
literal|true
condition|)
block|{
name|mpq
operator|.
name|add
argument_list|(
operator|new
name|Term
index|[]
block|{
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"b"
argument_list|)
block|,
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"c"
argument_list|)
block|}
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|mpq
operator|.
name|add
argument_list|(
operator|new
name|Term
index|[]
block|{
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"a"
argument_list|)
block|}
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|mpq
operator|.
name|add
argument_list|(
operator|new
name|Term
index|[]
block|{
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"a"
argument_list|)
block|}
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|mpq
operator|.
name|add
argument_list|(
operator|new
name|Term
index|[]
block|{
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"b"
argument_list|)
block|,
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"c"
argument_list|)
block|}
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
name|TopDocs
name|hits
init|=
name|s
operator|.
name|search
argument_list|(
name|mpq
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|hits
operator|.
name|totalHits
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|hits
operator|.
name|scoreDocs
index|[
literal|0
index|]
operator|.
name|score
argument_list|,
name|hits
operator|.
name|scoreDocs
index|[
literal|1
index|]
operator|.
name|score
argument_list|,
literal|1e-5
argument_list|)
expr_stmt|;
comment|/*     for(int hit=0;hit<hits.totalHits;hit++) {       ScoreDoc sd = hits.scoreDocs[hit];       System.out.println("  hit doc=" + sd.doc + " score=" + sd.score);     }     */
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|makeToken
specifier|private
specifier|static
name|Token
name|makeToken
parameter_list|(
name|String
name|text
parameter_list|,
name|int
name|posIncr
parameter_list|)
block|{
specifier|final
name|Token
name|t
init|=
operator|new
name|Token
argument_list|()
decl_stmt|;
name|t
operator|.
name|append
argument_list|(
name|text
argument_list|)
expr_stmt|;
name|t
operator|.
name|setPositionIncrement
argument_list|(
name|posIncr
argument_list|)
expr_stmt|;
return|return
name|t
return|;
block|}
DECL|field|INCR_0_DOC_TOKENS
specifier|private
specifier|final
specifier|static
name|Token
index|[]
name|INCR_0_DOC_TOKENS
init|=
operator|new
name|Token
index|[]
block|{
name|makeToken
argument_list|(
literal|"x"
argument_list|,
literal|1
argument_list|)
block|,
name|makeToken
argument_list|(
literal|"a"
argument_list|,
literal|1
argument_list|)
block|,
name|makeToken
argument_list|(
literal|"1"
argument_list|,
literal|0
argument_list|)
block|,
name|makeToken
argument_list|(
literal|"m"
argument_list|,
literal|1
argument_list|)
block|,
comment|// not existing, relying on slop=2
name|makeToken
argument_list|(
literal|"b"
argument_list|,
literal|1
argument_list|)
block|,
name|makeToken
argument_list|(
literal|"1"
argument_list|,
literal|0
argument_list|)
block|,
name|makeToken
argument_list|(
literal|"n"
argument_list|,
literal|1
argument_list|)
block|,
comment|// not existing, relying on slop=2
name|makeToken
argument_list|(
literal|"c"
argument_list|,
literal|1
argument_list|)
block|,
name|makeToken
argument_list|(
literal|"y"
argument_list|,
literal|1
argument_list|)
block|}
decl_stmt|;
DECL|field|INCR_0_QUERY_TOKENS_AND
specifier|private
specifier|final
specifier|static
name|Token
index|[]
name|INCR_0_QUERY_TOKENS_AND
init|=
operator|new
name|Token
index|[]
block|{
name|makeToken
argument_list|(
literal|"a"
argument_list|,
literal|1
argument_list|)
block|,
name|makeToken
argument_list|(
literal|"1"
argument_list|,
literal|0
argument_list|)
block|,
name|makeToken
argument_list|(
literal|"b"
argument_list|,
literal|1
argument_list|)
block|,
name|makeToken
argument_list|(
literal|"1"
argument_list|,
literal|0
argument_list|)
block|,
name|makeToken
argument_list|(
literal|"c"
argument_list|,
literal|1
argument_list|)
block|}
decl_stmt|;
DECL|field|INCR_0_QUERY_TOKENS_AND_OR_MATCH
specifier|private
specifier|final
specifier|static
name|Token
index|[]
index|[]
name|INCR_0_QUERY_TOKENS_AND_OR_MATCH
init|=
operator|new
name|Token
index|[]
index|[]
block|{
block|{
name|makeToken
argument_list|(
literal|"a"
argument_list|,
literal|1
argument_list|)
block|}
block|,
block|{
name|makeToken
argument_list|(
literal|"x"
argument_list|,
literal|1
argument_list|)
block|,
name|makeToken
argument_list|(
literal|"1"
argument_list|,
literal|0
argument_list|)
block|}
block|,
block|{
name|makeToken
argument_list|(
literal|"b"
argument_list|,
literal|2
argument_list|)
block|}
block|,
block|{
name|makeToken
argument_list|(
literal|"x"
argument_list|,
literal|2
argument_list|)
block|,
name|makeToken
argument_list|(
literal|"1"
argument_list|,
literal|0
argument_list|)
block|}
block|,
block|{
name|makeToken
argument_list|(
literal|"c"
argument_list|,
literal|3
argument_list|)
block|}
block|}
decl_stmt|;
DECL|field|INCR_0_QUERY_TOKENS_AND_OR_NO_MATCHN
specifier|private
specifier|final
specifier|static
name|Token
index|[]
index|[]
name|INCR_0_QUERY_TOKENS_AND_OR_NO_MATCHN
init|=
operator|new
name|Token
index|[]
index|[]
block|{
block|{
name|makeToken
argument_list|(
literal|"x"
argument_list|,
literal|1
argument_list|)
block|}
block|,
block|{
name|makeToken
argument_list|(
literal|"a"
argument_list|,
literal|1
argument_list|)
block|,
name|makeToken
argument_list|(
literal|"1"
argument_list|,
literal|0
argument_list|)
block|}
block|,
block|{
name|makeToken
argument_list|(
literal|"x"
argument_list|,
literal|2
argument_list|)
block|}
block|,
block|{
name|makeToken
argument_list|(
literal|"b"
argument_list|,
literal|2
argument_list|)
block|,
name|makeToken
argument_list|(
literal|"1"
argument_list|,
literal|0
argument_list|)
block|}
block|,
block|{
name|makeToken
argument_list|(
literal|"c"
argument_list|,
literal|3
argument_list|)
block|}
block|}
decl_stmt|;
comment|/**    * using query parser, MPQ will be created, and will not be strict about having all query terms     * in each position - one of each position is sufficient (OR logic)    */
DECL|method|testZeroPosIncrSloppyParsedAnd
specifier|public
name|void
name|testZeroPosIncrSloppyParsedAnd
parameter_list|()
throws|throws
name|IOException
block|{
name|MultiPhraseQuery
name|q
init|=
operator|new
name|MultiPhraseQuery
argument_list|()
decl_stmt|;
name|q
operator|.
name|add
argument_list|(
operator|new
name|Term
index|[]
block|{
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"a"
argument_list|)
block|,
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"1"
argument_list|)
block|}
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|q
operator|.
name|add
argument_list|(
operator|new
name|Term
index|[]
block|{
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"b"
argument_list|)
block|,
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"1"
argument_list|)
block|}
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|q
operator|.
name|add
argument_list|(
operator|new
name|Term
index|[]
block|{
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"c"
argument_list|)
block|}
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|doTestZeroPosIncrSloppy
argument_list|(
name|q
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|q
operator|.
name|setSlop
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|doTestZeroPosIncrSloppy
argument_list|(
name|q
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|q
operator|.
name|setSlop
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|doTestZeroPosIncrSloppy
argument_list|(
name|q
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|method|doTestZeroPosIncrSloppy
specifier|private
name|void
name|doTestZeroPosIncrSloppy
parameter_list|(
name|Query
name|q
parameter_list|,
name|int
name|nExpected
parameter_list|)
throws|throws
name|IOException
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
comment|// random dir
name|IndexWriterConfig
name|cfg
init|=
name|newIndexWriterConfig
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|cfg
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
literal|"field"
argument_list|,
operator|new
name|CannedTokenStream
argument_list|(
name|INCR_0_DOC_TOKENS
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|IndexReader
name|r
init|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|writer
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|IndexSearcher
name|s
init|=
name|newSearcher
argument_list|(
name|r
argument_list|)
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"QUERY="
operator|+
name|q
argument_list|)
expr_stmt|;
block|}
name|TopDocs
name|hits
init|=
name|s
operator|.
name|search
argument_list|(
name|q
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"wrong number of results"
argument_list|,
name|nExpected
argument_list|,
name|hits
operator|.
name|totalHits
argument_list|)
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
for|for
control|(
name|int
name|hit
init|=
literal|0
init|;
name|hit
operator|<
name|hits
operator|.
name|totalHits
condition|;
name|hit
operator|++
control|)
block|{
name|ScoreDoc
name|sd
init|=
name|hits
operator|.
name|scoreDocs
index|[
name|hit
index|]
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  hit doc="
operator|+
name|sd
operator|.
name|doc
operator|+
literal|" score="
operator|+
name|sd
operator|.
name|score
argument_list|)
expr_stmt|;
block|}
block|}
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * PQ AND Mode - Manually creating a phrase query    */
DECL|method|testZeroPosIncrSloppyPqAnd
specifier|public
name|void
name|testZeroPosIncrSloppyPqAnd
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|PhraseQuery
name|pq
init|=
operator|new
name|PhraseQuery
argument_list|()
decl_stmt|;
name|int
name|pos
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|Token
name|tap
range|:
name|INCR_0_QUERY_TOKENS_AND
control|)
block|{
name|pos
operator|+=
name|tap
operator|.
name|getPositionIncrement
argument_list|()
expr_stmt|;
name|pq
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
name|tap
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
name|pos
argument_list|)
expr_stmt|;
block|}
name|doTestZeroPosIncrSloppy
argument_list|(
name|pq
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|pq
operator|.
name|setSlop
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|doTestZeroPosIncrSloppy
argument_list|(
name|pq
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|pq
operator|.
name|setSlop
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|doTestZeroPosIncrSloppy
argument_list|(
name|pq
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/**    * MPQ AND Mode - Manually creating a multiple phrase query    */
DECL|method|testZeroPosIncrSloppyMpqAnd
specifier|public
name|void
name|testZeroPosIncrSloppyMpqAnd
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|MultiPhraseQuery
name|mpq
init|=
operator|new
name|MultiPhraseQuery
argument_list|()
decl_stmt|;
name|int
name|pos
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|Token
name|tap
range|:
name|INCR_0_QUERY_TOKENS_AND
control|)
block|{
name|pos
operator|+=
name|tap
operator|.
name|getPositionIncrement
argument_list|()
expr_stmt|;
name|mpq
operator|.
name|add
argument_list|(
operator|new
name|Term
index|[]
block|{
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
name|tap
operator|.
name|toString
argument_list|()
argument_list|)
block|}
argument_list|,
name|pos
argument_list|)
expr_stmt|;
comment|//AND logic
block|}
name|doTestZeroPosIncrSloppy
argument_list|(
name|mpq
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|mpq
operator|.
name|setSlop
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|doTestZeroPosIncrSloppy
argument_list|(
name|mpq
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|mpq
operator|.
name|setSlop
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|doTestZeroPosIncrSloppy
argument_list|(
name|mpq
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/**    * MPQ Combined AND OR Mode - Manually creating a multiple phrase query    */
DECL|method|testZeroPosIncrSloppyMpqAndOrMatch
specifier|public
name|void
name|testZeroPosIncrSloppyMpqAndOrMatch
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|MultiPhraseQuery
name|mpq
init|=
operator|new
name|MultiPhraseQuery
argument_list|()
decl_stmt|;
for|for
control|(
name|Token
name|tap
index|[]
range|:
name|INCR_0_QUERY_TOKENS_AND_OR_MATCH
control|)
block|{
name|Term
index|[]
name|terms
init|=
name|tapTerms
argument_list|(
name|tap
argument_list|)
decl_stmt|;
specifier|final
name|int
name|pos
init|=
name|tap
index|[
literal|0
index|]
operator|.
name|getPositionIncrement
argument_list|()
operator|-
literal|1
decl_stmt|;
name|mpq
operator|.
name|add
argument_list|(
name|terms
argument_list|,
name|pos
argument_list|)
expr_stmt|;
comment|//AND logic in pos, OR across lines
block|}
name|doTestZeroPosIncrSloppy
argument_list|(
name|mpq
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|mpq
operator|.
name|setSlop
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|doTestZeroPosIncrSloppy
argument_list|(
name|mpq
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|mpq
operator|.
name|setSlop
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|doTestZeroPosIncrSloppy
argument_list|(
name|mpq
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/**    * MPQ Combined AND OR Mode - Manually creating a multiple phrase query - with no match    */
DECL|method|testZeroPosIncrSloppyMpqAndOrNoMatch
specifier|public
name|void
name|testZeroPosIncrSloppyMpqAndOrNoMatch
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|MultiPhraseQuery
name|mpq
init|=
operator|new
name|MultiPhraseQuery
argument_list|()
decl_stmt|;
for|for
control|(
name|Token
name|tap
index|[]
range|:
name|INCR_0_QUERY_TOKENS_AND_OR_NO_MATCHN
control|)
block|{
name|Term
index|[]
name|terms
init|=
name|tapTerms
argument_list|(
name|tap
argument_list|)
decl_stmt|;
specifier|final
name|int
name|pos
init|=
name|tap
index|[
literal|0
index|]
operator|.
name|getPositionIncrement
argument_list|()
operator|-
literal|1
decl_stmt|;
name|mpq
operator|.
name|add
argument_list|(
name|terms
argument_list|,
name|pos
argument_list|)
expr_stmt|;
comment|//AND logic in pos, OR across lines
block|}
name|doTestZeroPosIncrSloppy
argument_list|(
name|mpq
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|mpq
operator|.
name|setSlop
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|doTestZeroPosIncrSloppy
argument_list|(
name|mpq
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|tapTerms
specifier|private
name|Term
index|[]
name|tapTerms
parameter_list|(
name|Token
index|[]
name|tap
parameter_list|)
block|{
name|Term
index|[]
name|terms
init|=
operator|new
name|Term
index|[
name|tap
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|terms
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|terms
index|[
name|i
index|]
operator|=
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
name|tap
index|[
name|i
index|]
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|terms
return|;
block|}
DECL|method|testNegativeSlop
specifier|public
name|void
name|testNegativeSlop
parameter_list|()
throws|throws
name|Exception
block|{
name|MultiPhraseQuery
name|query
init|=
operator|new
name|MultiPhraseQuery
argument_list|()
decl_stmt|;
name|query
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"two"
argument_list|)
argument_list|)
expr_stmt|;
name|query
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"one"
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|query
operator|.
name|setSlop
argument_list|(
operator|-
literal|2
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"didn't get expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{
comment|// expected exception
block|}
block|}
block|}
end_class
end_unit
