begin_unit
begin_package
DECL|package|org.apache.lucene.search
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ConcurrentModificationException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import
begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|generators
operator|.
name|RandomPicks
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
operator|.
name|Store
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|StringField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|TextField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DirectoryReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriterConfig
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReaderContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|RandomIndexWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SerialMergeScheduler
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanClause
operator|.
name|Occur
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Bits
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|RamUsageTester
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|TestUtil
import|;
end_import
begin_class
DECL|class|TestLRUQueryCache
specifier|public
class|class
name|TestLRUQueryCache
extends|extends
name|LuceneTestCase
block|{
DECL|field|NEVER_CACHE
specifier|private
specifier|static
specifier|final
name|QueryCachingPolicy
name|NEVER_CACHE
init|=
operator|new
name|QueryCachingPolicy
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onUse
parameter_list|(
name|Query
name|query
parameter_list|)
block|{}
annotation|@
name|Override
specifier|public
name|boolean
name|shouldCache
parameter_list|(
name|Query
name|query
parameter_list|,
name|LeafReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|false
return|;
block|}
block|}
decl_stmt|;
DECL|method|testFilterRamBytesUsed
specifier|public
name|void
name|testFilterRamBytesUsed
parameter_list|()
block|{
specifier|final
name|Query
name|simpleQuery
init|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"some_field"
argument_list|,
literal|"some_term"
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|long
name|actualRamBytesUsed
init|=
name|RamUsageTester
operator|.
name|sizeOf
argument_list|(
name|simpleQuery
argument_list|)
decl_stmt|;
specifier|final
name|long
name|ramBytesUsed
init|=
name|LRUQueryCache
operator|.
name|QUERY_DEFAULT_RAM_BYTES_USED
decl_stmt|;
comment|// we cannot assert exactly that the constant is correct since actual
comment|// memory usage depends on JVM implementations and settings (eg. UseCompressedOops)
name|assertEquals
argument_list|(
name|actualRamBytesUsed
argument_list|,
name|ramBytesUsed
argument_list|,
name|actualRamBytesUsed
operator|/
literal|2
argument_list|)
expr_stmt|;
block|}
DECL|method|testConcurrency
specifier|public
name|void
name|testConcurrency
parameter_list|()
throws|throws
name|Throwable
block|{
specifier|final
name|LRUQueryCache
name|queryCache
init|=
operator|new
name|LRUQueryCache
argument_list|(
literal|1
operator|+
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|20
argument_list|)
argument_list|,
literal|1
operator|+
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|10000
argument_list|)
argument_list|)
decl_stmt|;
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
specifier|final
name|RandomIndexWriter
name|w
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|)
decl_stmt|;
specifier|final
name|SearcherFactory
name|searcherFactory
init|=
operator|new
name|SearcherFactory
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|IndexSearcher
name|newSearcher
parameter_list|(
name|IndexReader
name|reader
parameter_list|,
name|IndexReader
name|previous
parameter_list|)
throws|throws
name|IOException
block|{
name|IndexSearcher
name|searcher
init|=
operator|new
name|IndexSearcher
argument_list|(
name|reader
argument_list|)
decl_stmt|;
name|searcher
operator|.
name|setQueryCachingPolicy
argument_list|(
name|MAYBE_CACHE_POLICY
argument_list|)
expr_stmt|;
name|searcher
operator|.
name|setQueryCache
argument_list|(
name|queryCache
argument_list|)
expr_stmt|;
return|return
name|searcher
return|;
block|}
block|}
decl_stmt|;
specifier|final
name|boolean
name|applyDeletes
init|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
decl_stmt|;
specifier|final
name|SearcherManager
name|mgr
init|=
operator|new
name|SearcherManager
argument_list|(
name|w
operator|.
name|w
argument_list|,
name|applyDeletes
argument_list|,
name|searcherFactory
argument_list|)
decl_stmt|;
specifier|final
name|AtomicBoolean
name|indexing
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|true
argument_list|)
decl_stmt|;
specifier|final
name|AtomicReference
argument_list|<
name|Throwable
argument_list|>
name|error
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|int
name|numDocs
init|=
name|atLeast
argument_list|(
literal|10000
argument_list|)
decl_stmt|;
name|Thread
index|[]
name|threads
init|=
operator|new
name|Thread
index|[
literal|3
index|]
decl_stmt|;
name|threads
index|[
literal|0
index|]
operator|=
operator|new
name|Thread
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|StringField
name|f
init|=
operator|new
name|StringField
argument_list|(
literal|"color"
argument_list|,
literal|""
argument_list|,
name|Store
operator|.
name|NO
argument_list|)
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|f
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|indexing
operator|.
name|get
argument_list|()
operator|&&
name|i
operator|<
name|numDocs
condition|;
operator|++
name|i
control|)
block|{
name|f
operator|.
name|setStringValue
argument_list|(
name|RandomPicks
operator|.
name|randomFrom
argument_list|(
name|random
argument_list|()
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"blue"
block|,
literal|"red"
block|,
literal|"yellow"
block|}
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|i
operator|&
literal|63
operator|)
operator|==
literal|0
condition|)
block|{
name|mgr
operator|.
name|maybeRefresh
argument_list|()
expr_stmt|;
if|if
condition|(
name|rarely
argument_list|()
condition|)
block|{
name|queryCache
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|rarely
argument_list|()
condition|)
block|{
specifier|final
name|String
name|color
init|=
name|RandomPicks
operator|.
name|randomFrom
argument_list|(
name|random
argument_list|()
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"blue"
block|,
literal|"red"
block|,
literal|"yellow"
block|}
argument_list|)
decl_stmt|;
name|w
operator|.
name|deleteDocuments
argument_list|(
operator|new
name|Term
argument_list|(
literal|"color"
argument_list|,
name|color
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|error
operator|.
name|compareAndSet
argument_list|(
literal|null
argument_list|,
name|t
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
name|indexing
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|threads
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|threads
index|[
name|i
index|]
operator|=
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
while|while
condition|(
name|indexing
operator|.
name|get
argument_list|()
condition|)
block|{
try|try
block|{
specifier|final
name|IndexSearcher
name|searcher
init|=
name|mgr
operator|.
name|acquire
argument_list|()
decl_stmt|;
try|try
block|{
specifier|final
name|String
name|value
init|=
name|RandomPicks
operator|.
name|randomFrom
argument_list|(
name|random
argument_list|()
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"blue"
block|,
literal|"red"
block|,
literal|"yellow"
block|,
literal|"green"
block|}
argument_list|)
decl_stmt|;
specifier|final
name|Query
name|q
init|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"color"
argument_list|,
name|value
argument_list|)
argument_list|)
decl_stmt|;
name|TotalHitCountCollector
name|collector
init|=
operator|new
name|TotalHitCountCollector
argument_list|()
decl_stmt|;
name|searcher
operator|.
name|search
argument_list|(
name|q
argument_list|,
name|collector
argument_list|)
expr_stmt|;
comment|// will use the cache
specifier|final
name|int
name|totalHits1
init|=
name|collector
operator|.
name|getTotalHits
argument_list|()
decl_stmt|;
specifier|final
name|int
name|totalHits2
init|=
name|searcher
operator|.
name|search
argument_list|(
name|q
argument_list|,
literal|1
argument_list|)
operator|.
name|totalHits
decl_stmt|;
comment|// will not use the cache because of scores
name|assertEquals
argument_list|(
name|totalHits2
argument_list|,
name|totalHits1
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|mgr
operator|.
name|release
argument_list|(
name|searcher
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|error
operator|.
name|compareAndSet
argument_list|(
literal|null
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
expr_stmt|;
block|}
for|for
control|(
name|Thread
name|thread
range|:
name|threads
control|)
block|{
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|Thread
name|thread
range|:
name|threads
control|)
block|{
name|thread
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|error
operator|.
name|get
argument_list|()
operator|!=
literal|null
condition|)
block|{
throw|throw
name|error
operator|.
name|get
argument_list|()
throw|;
block|}
name|queryCache
operator|.
name|assertConsistent
argument_list|()
expr_stmt|;
name|mgr
operator|.
name|close
argument_list|()
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
name|queryCache
operator|.
name|assertConsistent
argument_list|()
expr_stmt|;
block|}
DECL|method|testLRUEviction
specifier|public
name|void
name|testLRUEviction
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
specifier|final
name|RandomIndexWriter
name|w
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|StringField
name|f
init|=
operator|new
name|StringField
argument_list|(
literal|"color"
argument_list|,
literal|"blue"
argument_list|,
name|Store
operator|.
name|NO
argument_list|)
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|f
operator|.
name|setStringValue
argument_list|(
literal|"red"
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|f
operator|.
name|setStringValue
argument_list|(
literal|"green"
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
specifier|final
name|DirectoryReader
name|reader
init|=
name|w
operator|.
name|getReader
argument_list|()
decl_stmt|;
specifier|final
name|IndexSearcher
name|searcher
init|=
name|newSearcher
argument_list|(
name|reader
argument_list|)
decl_stmt|;
specifier|final
name|LRUQueryCache
name|queryCache
init|=
operator|new
name|LRUQueryCache
argument_list|(
literal|2
argument_list|,
literal|100000
argument_list|)
decl_stmt|;
specifier|final
name|Query
name|blue
init|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"color"
argument_list|,
literal|"blue"
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|Query
name|red
init|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"color"
argument_list|,
literal|"red"
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|Query
name|green
init|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"color"
argument_list|,
literal|"green"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|queryCache
operator|.
name|cachedQueries
argument_list|()
argument_list|)
expr_stmt|;
name|searcher
operator|.
name|setQueryCache
argument_list|(
name|queryCache
argument_list|)
expr_stmt|;
comment|// the filter is not cached on any segment: no changes
name|searcher
operator|.
name|setQueryCachingPolicy
argument_list|(
name|NEVER_CACHE
argument_list|)
expr_stmt|;
name|searcher
operator|.
name|search
argument_list|(
operator|new
name|ConstantScoreQuery
argument_list|(
name|green
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|queryCache
operator|.
name|cachedQueries
argument_list|()
argument_list|)
expr_stmt|;
name|searcher
operator|.
name|setQueryCachingPolicy
argument_list|(
name|QueryCachingPolicy
operator|.
name|ALWAYS_CACHE
argument_list|)
expr_stmt|;
name|searcher
operator|.
name|search
argument_list|(
operator|new
name|ConstantScoreQuery
argument_list|(
name|red
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|red
argument_list|)
argument_list|,
name|queryCache
operator|.
name|cachedQueries
argument_list|()
argument_list|)
expr_stmt|;
name|searcher
operator|.
name|search
argument_list|(
operator|new
name|ConstantScoreQuery
argument_list|(
name|green
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|red
argument_list|,
name|green
argument_list|)
argument_list|,
name|queryCache
operator|.
name|cachedQueries
argument_list|()
argument_list|)
expr_stmt|;
name|searcher
operator|.
name|search
argument_list|(
operator|new
name|ConstantScoreQuery
argument_list|(
name|red
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|green
argument_list|,
name|red
argument_list|)
argument_list|,
name|queryCache
operator|.
name|cachedQueries
argument_list|()
argument_list|)
expr_stmt|;
name|searcher
operator|.
name|search
argument_list|(
operator|new
name|ConstantScoreQuery
argument_list|(
name|blue
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|red
argument_list|,
name|blue
argument_list|)
argument_list|,
name|queryCache
operator|.
name|cachedQueries
argument_list|()
argument_list|)
expr_stmt|;
name|searcher
operator|.
name|search
argument_list|(
operator|new
name|ConstantScoreQuery
argument_list|(
name|blue
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|red
argument_list|,
name|blue
argument_list|)
argument_list|,
name|queryCache
operator|.
name|cachedQueries
argument_list|()
argument_list|)
expr_stmt|;
name|searcher
operator|.
name|search
argument_list|(
operator|new
name|ConstantScoreQuery
argument_list|(
name|green
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|blue
argument_list|,
name|green
argument_list|)
argument_list|,
name|queryCache
operator|.
name|cachedQueries
argument_list|()
argument_list|)
expr_stmt|;
name|searcher
operator|.
name|setQueryCachingPolicy
argument_list|(
name|NEVER_CACHE
argument_list|)
expr_stmt|;
name|searcher
operator|.
name|search
argument_list|(
operator|new
name|ConstantScoreQuery
argument_list|(
name|red
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|blue
argument_list|,
name|green
argument_list|)
argument_list|,
name|queryCache
operator|.
name|cachedQueries
argument_list|()
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testClearFilter
specifier|public
name|void
name|testClearFilter
parameter_list|()
throws|throws
name|IOException
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
specifier|final
name|RandomIndexWriter
name|w
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|StringField
name|f
init|=
operator|new
name|StringField
argument_list|(
literal|"color"
argument_list|,
literal|""
argument_list|,
name|Store
operator|.
name|NO
argument_list|)
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|f
argument_list|)
expr_stmt|;
specifier|final
name|int
name|numDocs
init|=
name|atLeast
argument_list|(
literal|10
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
operator|++
name|i
control|)
block|{
name|f
operator|.
name|setStringValue
argument_list|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
literal|"red"
else|:
literal|"blue"
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
specifier|final
name|DirectoryReader
name|reader
init|=
name|w
operator|.
name|getReader
argument_list|()
decl_stmt|;
specifier|final
name|IndexSearcher
name|searcher
init|=
name|newSearcher
argument_list|(
name|reader
argument_list|)
decl_stmt|;
specifier|final
name|Query
name|query1
init|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"color"
argument_list|,
literal|"blue"
argument_list|)
argument_list|)
decl_stmt|;
name|query1
operator|.
name|setBoost
argument_list|(
name|random
argument_list|()
operator|.
name|nextFloat
argument_list|()
argument_list|)
expr_stmt|;
comment|// different instance yet equal
specifier|final
name|Query
name|query2
init|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"color"
argument_list|,
literal|"blue"
argument_list|)
argument_list|)
decl_stmt|;
name|query2
operator|.
name|setBoost
argument_list|(
name|random
argument_list|()
operator|.
name|nextFloat
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|LRUQueryCache
name|queryCache
init|=
operator|new
name|LRUQueryCache
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
name|searcher
operator|.
name|setQueryCache
argument_list|(
name|queryCache
argument_list|)
expr_stmt|;
name|searcher
operator|.
name|setQueryCachingPolicy
argument_list|(
name|QueryCachingPolicy
operator|.
name|ALWAYS_CACHE
argument_list|)
expr_stmt|;
name|searcher
operator|.
name|search
argument_list|(
operator|new
name|ConstantScoreQuery
argument_list|(
name|query1
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|queryCache
operator|.
name|cachedQueries
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|queryCache
operator|.
name|clearQuery
argument_list|(
name|query2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|queryCache
operator|.
name|cachedQueries
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|queryCache
operator|.
name|assertConsistent
argument_list|()
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// This test makes sure that by making the same assumptions as LRUQueryCache, RAMUsageTester
comment|// computes the same memory usage.
DECL|method|testRamBytesUsedAgreesWithRamUsageTester
specifier|public
name|void
name|testRamBytesUsedAgreesWithRamUsageTester
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|LRUQueryCache
name|queryCache
init|=
operator|new
name|LRUQueryCache
argument_list|(
literal|1
operator|+
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|5
argument_list|)
argument_list|,
literal|1
operator|+
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|10000
argument_list|)
argument_list|)
decl_stmt|;
comment|// an accumulator that only sums up memory usage of referenced filters and doc id sets
specifier|final
name|RamUsageTester
operator|.
name|Accumulator
name|acc
init|=
operator|new
name|RamUsageTester
operator|.
name|Accumulator
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|long
name|accumulateObject
parameter_list|(
name|Object
name|o
parameter_list|,
name|long
name|shallowSize
parameter_list|,
name|Map
argument_list|<
name|Field
argument_list|,
name|Object
argument_list|>
name|fieldValues
parameter_list|,
name|Collection
argument_list|<
name|Object
argument_list|>
name|queue
parameter_list|)
block|{
if|if
condition|(
name|o
operator|instanceof
name|DocIdSet
condition|)
block|{
return|return
operator|(
operator|(
name|DocIdSet
operator|)
name|o
operator|)
operator|.
name|ramBytesUsed
argument_list|()
return|;
block|}
if|if
condition|(
name|o
operator|instanceof
name|Query
condition|)
block|{
return|return
name|queryCache
operator|.
name|ramBytesUsed
argument_list|(
operator|(
name|Query
operator|)
name|o
argument_list|)
return|;
block|}
if|if
condition|(
name|o
operator|instanceof
name|IndexReader
operator|||
name|o
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"SegmentCoreReaders"
argument_list|)
condition|)
block|{
comment|// do not take readers or core cache keys into account
return|return
literal|0
return|;
block|}
if|if
condition|(
name|o
operator|instanceof
name|Map
condition|)
block|{
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|map
init|=
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|o
decl_stmt|;
name|queue
operator|.
name|addAll
argument_list|(
name|map
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
name|queue
operator|.
name|addAll
argument_list|(
name|map
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|long
name|sizePerEntry
init|=
name|o
operator|instanceof
name|LinkedHashMap
condition|?
name|LRUQueryCache
operator|.
name|LINKED_HASHTABLE_RAM_BYTES_PER_ENTRY
else|:
name|LRUQueryCache
operator|.
name|HASHTABLE_RAM_BYTES_PER_ENTRY
decl_stmt|;
return|return
name|sizePerEntry
operator|*
name|map
operator|.
name|size
argument_list|()
return|;
block|}
comment|// follow links to other objects, but ignore their memory usage
name|super
operator|.
name|accumulateObject
argument_list|(
name|o
argument_list|,
name|shallowSize
argument_list|,
name|fieldValues
argument_list|,
name|queue
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|accumulateArray
parameter_list|(
name|Object
name|array
parameter_list|,
name|long
name|shallowSize
parameter_list|,
name|List
argument_list|<
name|Object
argument_list|>
name|values
parameter_list|,
name|Collection
argument_list|<
name|Object
argument_list|>
name|queue
parameter_list|)
block|{
comment|// follow links to other objects, but ignore their memory usage
name|super
operator|.
name|accumulateArray
argument_list|(
name|array
argument_list|,
name|shallowSize
argument_list|,
name|values
argument_list|,
name|queue
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
block|}
decl_stmt|;
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
comment|// serial merges so that segments do not get closed while we are measuring ram usage
comment|// with RamUsageTester
name|IndexWriterConfig
name|iwc
init|=
name|newIndexWriterConfig
argument_list|()
operator|.
name|setMergeScheduler
argument_list|(
operator|new
name|SerialMergeScheduler
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|RandomIndexWriter
name|w
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|,
name|iwc
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|colors
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"blue"
argument_list|,
literal|"red"
argument_list|,
literal|"green"
argument_list|,
literal|"yellow"
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|StringField
name|f
init|=
operator|new
name|StringField
argument_list|(
literal|"color"
argument_list|,
literal|""
argument_list|,
name|Store
operator|.
name|NO
argument_list|)
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|f
argument_list|)
expr_stmt|;
specifier|final
name|int
name|iters
init|=
name|atLeast
argument_list|(
literal|5
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|iter
init|=
literal|0
init|;
name|iter
operator|<
name|iters
condition|;
operator|++
name|iter
control|)
block|{
specifier|final
name|int
name|numDocs
init|=
name|atLeast
argument_list|(
literal|10
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
operator|++
name|i
control|)
block|{
name|f
operator|.
name|setStringValue
argument_list|(
name|RandomPicks
operator|.
name|randomFrom
argument_list|(
name|random
argument_list|()
argument_list|,
name|colors
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
try|try
init|(
specifier|final
name|DirectoryReader
name|reader
init|=
name|w
operator|.
name|getReader
argument_list|()
init|)
block|{
specifier|final
name|IndexSearcher
name|searcher
init|=
name|newSearcher
argument_list|(
name|reader
argument_list|)
decl_stmt|;
name|searcher
operator|.
name|setQueryCache
argument_list|(
name|queryCache
argument_list|)
expr_stmt|;
name|searcher
operator|.
name|setQueryCachingPolicy
argument_list|(
name|MAYBE_CACHE_POLICY
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
operator|++
name|i
control|)
block|{
specifier|final
name|Query
name|query
init|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"color"
argument_list|,
name|RandomPicks
operator|.
name|randomFrom
argument_list|(
name|random
argument_list|()
argument_list|,
name|colors
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|searcher
operator|.
name|search
argument_list|(
operator|new
name|ConstantScoreQuery
argument_list|(
name|query
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
name|queryCache
operator|.
name|assertConsistent
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|RamUsageTester
operator|.
name|sizeOf
argument_list|(
name|queryCache
argument_list|,
name|acc
argument_list|)
argument_list|,
name|queryCache
operator|.
name|ramBytesUsed
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/** A query that doesn't match anything */
DECL|class|DummyQuery
specifier|private
specifier|static
class|class
name|DummyQuery
extends|extends
name|Query
block|{
DECL|field|COUNTER
specifier|private
specifier|static
name|int
name|COUNTER
init|=
literal|0
decl_stmt|;
DECL|field|id
specifier|private
specifier|final
name|int
name|id
decl_stmt|;
DECL|method|DummyQuery
name|DummyQuery
parameter_list|()
block|{
name|id
operator|=
name|COUNTER
operator|++
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createWeight
specifier|public
name|Weight
name|createWeight
parameter_list|(
name|IndexSearcher
name|searcher
parameter_list|,
name|boolean
name|needsScores
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|ConstantScoreWeight
argument_list|(
name|this
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Scorer
name|scorer
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|,
name|Bits
name|acceptDocs
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|null
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|instanceof
name|DummyQuery
operator|==
literal|false
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|id
operator|==
operator|(
operator|(
name|DummyQuery
operator|)
name|obj
operator|)
operator|.
name|id
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|id
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|(
name|String
name|field
parameter_list|)
block|{
return|return
literal|"DummyQuery"
return|;
block|}
block|}
comment|// Test what happens when the cache contains only filters and doc id sets
comment|// that require very little memory. In that case most of the memory is taken
comment|// by the cache itself, not cache entries, and we want to make sure that
comment|// memory usage is not grossly underestimated.
DECL|method|testRamBytesUsedConstantEntryOverhead
specifier|public
name|void
name|testRamBytesUsedConstantEntryOverhead
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|LRUQueryCache
name|queryCache
init|=
operator|new
name|LRUQueryCache
argument_list|(
literal|1000000
argument_list|,
literal|10000000
argument_list|)
decl_stmt|;
specifier|final
name|RamUsageTester
operator|.
name|Accumulator
name|acc
init|=
operator|new
name|RamUsageTester
operator|.
name|Accumulator
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|long
name|accumulateObject
parameter_list|(
name|Object
name|o
parameter_list|,
name|long
name|shallowSize
parameter_list|,
name|Map
argument_list|<
name|Field
argument_list|,
name|Object
argument_list|>
name|fieldValues
parameter_list|,
name|Collection
argument_list|<
name|Object
argument_list|>
name|queue
parameter_list|)
block|{
if|if
condition|(
name|o
operator|instanceof
name|DocIdSet
condition|)
block|{
return|return
operator|(
operator|(
name|DocIdSet
operator|)
name|o
operator|)
operator|.
name|ramBytesUsed
argument_list|()
return|;
block|}
if|if
condition|(
name|o
operator|instanceof
name|Query
condition|)
block|{
return|return
name|queryCache
operator|.
name|ramBytesUsed
argument_list|(
operator|(
name|Query
operator|)
name|o
argument_list|)
return|;
block|}
if|if
condition|(
name|o
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"SegmentCoreReaders"
argument_list|)
condition|)
block|{
comment|// do not follow references to core cache keys
return|return
literal|0
return|;
block|}
return|return
name|super
operator|.
name|accumulateObject
argument_list|(
name|o
argument_list|,
name|shallowSize
argument_list|,
name|fieldValues
argument_list|,
name|queue
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
specifier|final
name|RandomIndexWriter
name|w
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
specifier|final
name|int
name|numDocs
init|=
name|atLeast
argument_list|(
literal|100
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
operator|++
name|i
control|)
block|{
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
specifier|final
name|DirectoryReader
name|reader
init|=
name|w
operator|.
name|getReader
argument_list|()
decl_stmt|;
specifier|final
name|IndexSearcher
name|searcher
init|=
operator|new
name|IndexSearcher
argument_list|(
name|reader
argument_list|)
decl_stmt|;
name|searcher
operator|.
name|setQueryCache
argument_list|(
name|queryCache
argument_list|)
expr_stmt|;
name|searcher
operator|.
name|setQueryCachingPolicy
argument_list|(
name|QueryCachingPolicy
operator|.
name|ALWAYS_CACHE
argument_list|)
expr_stmt|;
specifier|final
name|int
name|numQueries
init|=
name|atLeast
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numQueries
condition|;
operator|++
name|i
control|)
block|{
specifier|final
name|Query
name|query
init|=
operator|new
name|DummyQuery
argument_list|()
decl_stmt|;
name|searcher
operator|.
name|search
argument_list|(
operator|new
name|ConstantScoreQuery
argument_list|(
name|query
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|queryCache
operator|.
name|getCacheCount
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
specifier|final
name|long
name|actualRamBytesUsed
init|=
name|RamUsageTester
operator|.
name|sizeOf
argument_list|(
name|queryCache
argument_list|,
name|acc
argument_list|)
decl_stmt|;
specifier|final
name|long
name|expectedRamBytesUsed
init|=
name|queryCache
operator|.
name|ramBytesUsed
argument_list|()
decl_stmt|;
comment|// error< 30%
name|assertEquals
argument_list|(
name|actualRamBytesUsed
argument_list|,
name|expectedRamBytesUsed
argument_list|,
literal|30
operator|*
name|actualRamBytesUsed
operator|/
literal|100
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testOnUse
specifier|public
name|void
name|testOnUse
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|LRUQueryCache
name|queryCache
init|=
operator|new
name|LRUQueryCache
argument_list|(
literal|1
operator|+
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|5
argument_list|)
argument_list|,
literal|1
operator|+
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|1000
argument_list|)
argument_list|)
decl_stmt|;
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
specifier|final
name|RandomIndexWriter
name|w
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|StringField
name|f
init|=
operator|new
name|StringField
argument_list|(
literal|"color"
argument_list|,
literal|""
argument_list|,
name|Store
operator|.
name|NO
argument_list|)
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|f
argument_list|)
expr_stmt|;
specifier|final
name|int
name|numDocs
init|=
name|atLeast
argument_list|(
literal|10
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
operator|++
name|i
control|)
block|{
name|f
operator|.
name|setStringValue
argument_list|(
name|RandomPicks
operator|.
name|randomFrom
argument_list|(
name|random
argument_list|()
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"red"
argument_list|,
literal|"blue"
argument_list|,
literal|"green"
argument_list|,
literal|"yellow"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|w
operator|.
name|getReader
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|final
name|DirectoryReader
name|reader
init|=
name|w
operator|.
name|getReader
argument_list|()
decl_stmt|;
specifier|final
name|IndexSearcher
name|searcher
init|=
operator|new
name|IndexSearcher
argument_list|(
name|reader
argument_list|)
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|Query
argument_list|,
name|Integer
argument_list|>
name|actualCounts
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|Query
argument_list|,
name|Integer
argument_list|>
name|expectedCounts
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|QueryCachingPolicy
name|countingPolicy
init|=
operator|new
name|QueryCachingPolicy
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|shouldCache
parameter_list|(
name|Query
name|query
parameter_list|,
name|LeafReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onUse
parameter_list|(
name|Query
name|query
parameter_list|)
block|{
name|expectedCounts
operator|.
name|put
argument_list|(
name|query
argument_list|,
literal|1
operator|+
name|expectedCounts
operator|.
name|getOrDefault
argument_list|(
name|query
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|Query
index|[]
name|queries
init|=
operator|new
name|Query
index|[
literal|10
operator|+
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|queries
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|queries
index|[
name|i
index|]
operator|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"color"
argument_list|,
name|RandomPicks
operator|.
name|randomFrom
argument_list|(
name|random
argument_list|()
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"red"
argument_list|,
literal|"blue"
argument_list|,
literal|"green"
argument_list|,
literal|"yellow"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|queries
index|[
name|i
index|]
operator|.
name|setBoost
argument_list|(
name|random
argument_list|()
operator|.
name|nextFloat
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|searcher
operator|.
name|setQueryCache
argument_list|(
name|queryCache
argument_list|)
expr_stmt|;
name|searcher
operator|.
name|setQueryCachingPolicy
argument_list|(
name|countingPolicy
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|20
condition|;
operator|++
name|i
control|)
block|{
specifier|final
name|int
name|idx
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|queries
operator|.
name|length
argument_list|)
decl_stmt|;
name|searcher
operator|.
name|search
argument_list|(
operator|new
name|ConstantScoreQuery
argument_list|(
name|queries
index|[
name|idx
index|]
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|actualCounts
operator|.
name|put
argument_list|(
name|queries
index|[
name|idx
index|]
argument_list|,
literal|1
operator|+
name|actualCounts
operator|.
name|getOrDefault
argument_list|(
name|queries
index|[
name|idx
index|]
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|actualCounts
argument_list|,
name|expectedCounts
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testStats
specifier|public
name|void
name|testStats
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|LRUQueryCache
name|queryCache
init|=
operator|new
name|LRUQueryCache
argument_list|(
literal|1
argument_list|,
literal|10000000
argument_list|)
decl_stmt|;
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
specifier|final
name|RandomIndexWriter
name|w
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|colors
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"blue"
argument_list|,
literal|"red"
argument_list|,
literal|"green"
argument_list|,
literal|"yellow"
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|StringField
name|f
init|=
operator|new
name|StringField
argument_list|(
literal|"color"
argument_list|,
literal|""
argument_list|,
name|Store
operator|.
name|NO
argument_list|)
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|f
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
operator|++
name|i
control|)
block|{
name|f
operator|.
name|setStringValue
argument_list|(
name|RandomPicks
operator|.
name|randomFrom
argument_list|(
name|random
argument_list|()
argument_list|,
name|colors
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|w
operator|.
name|getReader
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|final
name|DirectoryReader
name|reader
init|=
name|w
operator|.
name|getReader
argument_list|()
decl_stmt|;
specifier|final
name|int
name|segmentCount
init|=
name|reader
operator|.
name|leaves
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
specifier|final
name|IndexSearcher
name|searcher
init|=
operator|new
name|IndexSearcher
argument_list|(
name|reader
argument_list|)
decl_stmt|;
specifier|final
name|Query
name|query
init|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"color"
argument_list|,
literal|"red"
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|Query
name|query2
init|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"color"
argument_list|,
literal|"blue"
argument_list|)
argument_list|)
decl_stmt|;
name|searcher
operator|.
name|setQueryCache
argument_list|(
name|queryCache
argument_list|)
expr_stmt|;
comment|// first pass, lookups without caching that all miss
name|searcher
operator|.
name|setQueryCachingPolicy
argument_list|(
name|NEVER_CACHE
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
operator|++
name|i
control|)
block|{
name|searcher
operator|.
name|search
argument_list|(
operator|new
name|ConstantScoreQuery
argument_list|(
name|query
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|10
operator|*
name|segmentCount
argument_list|,
name|queryCache
operator|.
name|getTotalCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|queryCache
operator|.
name|getHitCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
operator|*
name|segmentCount
argument_list|,
name|queryCache
operator|.
name|getMissCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|queryCache
operator|.
name|getCacheCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|queryCache
operator|.
name|getEvictionCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|queryCache
operator|.
name|getCacheSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// second pass, lookups + caching, only the first one is a miss
name|searcher
operator|.
name|setQueryCachingPolicy
argument_list|(
name|QueryCachingPolicy
operator|.
name|ALWAYS_CACHE
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
operator|++
name|i
control|)
block|{
name|searcher
operator|.
name|search
argument_list|(
operator|new
name|ConstantScoreQuery
argument_list|(
name|query
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|20
operator|*
name|segmentCount
argument_list|,
name|queryCache
operator|.
name|getTotalCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|9
operator|*
name|segmentCount
argument_list|,
name|queryCache
operator|.
name|getHitCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|11
operator|*
name|segmentCount
argument_list|,
name|queryCache
operator|.
name|getMissCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
operator|*
name|segmentCount
argument_list|,
name|queryCache
operator|.
name|getCacheCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|queryCache
operator|.
name|getEvictionCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
operator|*
name|segmentCount
argument_list|,
name|queryCache
operator|.
name|getCacheSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// third pass lookups without caching, we only have hits
name|searcher
operator|.
name|setQueryCachingPolicy
argument_list|(
name|NEVER_CACHE
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
operator|++
name|i
control|)
block|{
name|searcher
operator|.
name|search
argument_list|(
operator|new
name|ConstantScoreQuery
argument_list|(
name|query
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|30
operator|*
name|segmentCount
argument_list|,
name|queryCache
operator|.
name|getTotalCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|19
operator|*
name|segmentCount
argument_list|,
name|queryCache
operator|.
name|getHitCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|11
operator|*
name|segmentCount
argument_list|,
name|queryCache
operator|.
name|getMissCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
operator|*
name|segmentCount
argument_list|,
name|queryCache
operator|.
name|getCacheCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|queryCache
operator|.
name|getEvictionCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
operator|*
name|segmentCount
argument_list|,
name|queryCache
operator|.
name|getCacheSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// fourth pass with a different filter which will trigger evictions since the size is 1
name|searcher
operator|.
name|setQueryCachingPolicy
argument_list|(
name|QueryCachingPolicy
operator|.
name|ALWAYS_CACHE
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
operator|++
name|i
control|)
block|{
name|searcher
operator|.
name|search
argument_list|(
operator|new
name|ConstantScoreQuery
argument_list|(
name|query2
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|40
operator|*
name|segmentCount
argument_list|,
name|queryCache
operator|.
name|getTotalCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|28
operator|*
name|segmentCount
argument_list|,
name|queryCache
operator|.
name|getHitCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|12
operator|*
name|segmentCount
argument_list|,
name|queryCache
operator|.
name|getMissCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
operator|*
name|segmentCount
argument_list|,
name|queryCache
operator|.
name|getCacheCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
operator|*
name|segmentCount
argument_list|,
name|queryCache
operator|.
name|getEvictionCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
operator|*
name|segmentCount
argument_list|,
name|queryCache
operator|.
name|getCacheSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// now close, causing evictions due to the closing of segment cores
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|40
operator|*
name|segmentCount
argument_list|,
name|queryCache
operator|.
name|getTotalCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|28
operator|*
name|segmentCount
argument_list|,
name|queryCache
operator|.
name|getHitCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|12
operator|*
name|segmentCount
argument_list|,
name|queryCache
operator|.
name|getMissCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
operator|*
name|segmentCount
argument_list|,
name|queryCache
operator|.
name|getCacheCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
operator|*
name|segmentCount
argument_list|,
name|queryCache
operator|.
name|getEvictionCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|queryCache
operator|.
name|getCacheSize
argument_list|()
argument_list|)
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testFineGrainedStats
specifier|public
name|void
name|testFineGrainedStats
parameter_list|()
throws|throws
name|IOException
block|{
name|Directory
name|dir1
init|=
name|newDirectory
argument_list|()
decl_stmt|;
specifier|final
name|RandomIndexWriter
name|w1
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir1
argument_list|)
decl_stmt|;
name|Directory
name|dir2
init|=
name|newDirectory
argument_list|()
decl_stmt|;
specifier|final
name|RandomIndexWriter
name|w2
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir2
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|colors
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"blue"
argument_list|,
literal|"red"
argument_list|,
literal|"green"
argument_list|,
literal|"yellow"
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|StringField
name|f
init|=
operator|new
name|StringField
argument_list|(
literal|"color"
argument_list|,
literal|""
argument_list|,
name|Store
operator|.
name|NO
argument_list|)
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|f
argument_list|)
expr_stmt|;
for|for
control|(
name|RandomIndexWriter
name|w
range|:
name|Arrays
operator|.
name|asList
argument_list|(
name|w1
argument_list|,
name|w2
argument_list|)
control|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
operator|++
name|i
control|)
block|{
name|f
operator|.
name|setStringValue
argument_list|(
name|RandomPicks
operator|.
name|randomFrom
argument_list|(
name|random
argument_list|()
argument_list|,
name|colors
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|w
operator|.
name|getReader
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|final
name|DirectoryReader
name|reader1
init|=
name|w1
operator|.
name|getReader
argument_list|()
decl_stmt|;
specifier|final
name|int
name|segmentCount1
init|=
name|reader1
operator|.
name|leaves
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
specifier|final
name|IndexSearcher
name|searcher1
init|=
operator|new
name|IndexSearcher
argument_list|(
name|reader1
argument_list|)
decl_stmt|;
specifier|final
name|DirectoryReader
name|reader2
init|=
name|w2
operator|.
name|getReader
argument_list|()
decl_stmt|;
specifier|final
name|int
name|segmentCount2
init|=
name|reader2
operator|.
name|leaves
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
specifier|final
name|IndexSearcher
name|searcher2
init|=
operator|new
name|IndexSearcher
argument_list|(
name|reader2
argument_list|)
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|Object
argument_list|,
name|Integer
argument_list|>
name|indexId
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|LeafReaderContext
name|ctx
range|:
name|reader1
operator|.
name|leaves
argument_list|()
control|)
block|{
name|indexId
operator|.
name|put
argument_list|(
name|ctx
operator|.
name|reader
argument_list|()
operator|.
name|getCoreCacheKey
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|LeafReaderContext
name|ctx
range|:
name|reader2
operator|.
name|leaves
argument_list|()
control|)
block|{
name|indexId
operator|.
name|put
argument_list|(
name|ctx
operator|.
name|reader
argument_list|()
operator|.
name|getCoreCacheKey
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
specifier|final
name|AtomicLong
name|hitCount1
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
specifier|final
name|AtomicLong
name|hitCount2
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
specifier|final
name|AtomicLong
name|missCount1
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
specifier|final
name|AtomicLong
name|missCount2
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
specifier|final
name|AtomicLong
name|ramBytesUsage
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
specifier|final
name|AtomicLong
name|cacheSize
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
specifier|final
name|LRUQueryCache
name|queryCache
init|=
operator|new
name|LRUQueryCache
argument_list|(
literal|2
argument_list|,
literal|10000000
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|void
name|onHit
parameter_list|(
name|Object
name|readerCoreKey
parameter_list|,
name|Query
name|query
parameter_list|)
block|{
name|super
operator|.
name|onHit
argument_list|(
name|readerCoreKey
argument_list|,
name|query
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|indexId
operator|.
name|get
argument_list|(
name|readerCoreKey
argument_list|)
operator|.
name|intValue
argument_list|()
condition|)
block|{
case|case
literal|1
case|:
name|hitCount1
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
break|break;
case|case
literal|2
case|:
name|hitCount2
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|()
throw|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|onMiss
parameter_list|(
name|Object
name|readerCoreKey
parameter_list|,
name|Query
name|query
parameter_list|)
block|{
name|super
operator|.
name|onMiss
argument_list|(
name|readerCoreKey
argument_list|,
name|query
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|indexId
operator|.
name|get
argument_list|(
name|readerCoreKey
argument_list|)
operator|.
name|intValue
argument_list|()
condition|)
block|{
case|case
literal|1
case|:
name|missCount1
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
break|break;
case|case
literal|2
case|:
name|missCount2
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|()
throw|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|onQueryCache
parameter_list|(
name|Query
name|query
parameter_list|,
name|long
name|ramBytesUsed
parameter_list|)
block|{
name|super
operator|.
name|onQueryCache
argument_list|(
name|query
argument_list|,
name|ramBytesUsed
argument_list|)
expr_stmt|;
name|ramBytesUsage
operator|.
name|addAndGet
argument_list|(
name|ramBytesUsed
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|onQueryEviction
parameter_list|(
name|Query
name|query
parameter_list|,
name|long
name|ramBytesUsed
parameter_list|)
block|{
name|super
operator|.
name|onQueryEviction
argument_list|(
name|query
argument_list|,
name|ramBytesUsed
argument_list|)
expr_stmt|;
name|ramBytesUsage
operator|.
name|addAndGet
argument_list|(
operator|-
name|ramBytesUsed
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|onDocIdSetCache
parameter_list|(
name|Object
name|readerCoreKey
parameter_list|,
name|long
name|ramBytesUsed
parameter_list|)
block|{
name|super
operator|.
name|onDocIdSetCache
argument_list|(
name|readerCoreKey
argument_list|,
name|ramBytesUsed
argument_list|)
expr_stmt|;
name|ramBytesUsage
operator|.
name|addAndGet
argument_list|(
name|ramBytesUsed
argument_list|)
expr_stmt|;
name|cacheSize
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|onDocIdSetEviction
parameter_list|(
name|Object
name|readerCoreKey
parameter_list|,
name|int
name|numEntries
parameter_list|,
name|long
name|sumRamBytesUsed
parameter_list|)
block|{
name|super
operator|.
name|onDocIdSetEviction
argument_list|(
name|readerCoreKey
argument_list|,
name|numEntries
argument_list|,
name|sumRamBytesUsed
argument_list|)
expr_stmt|;
name|ramBytesUsage
operator|.
name|addAndGet
argument_list|(
operator|-
name|sumRamBytesUsed
argument_list|)
expr_stmt|;
name|cacheSize
operator|.
name|addAndGet
argument_list|(
operator|-
name|numEntries
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|onClear
parameter_list|()
block|{
name|super
operator|.
name|onClear
argument_list|()
expr_stmt|;
name|ramBytesUsage
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|cacheSize
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
specifier|final
name|Query
name|query
init|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"color"
argument_list|,
literal|"red"
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|Query
name|query2
init|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"color"
argument_list|,
literal|"blue"
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|Query
name|query3
init|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"color"
argument_list|,
literal|"green"
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|IndexSearcher
name|searcher
range|:
name|Arrays
operator|.
name|asList
argument_list|(
name|searcher1
argument_list|,
name|searcher2
argument_list|)
control|)
block|{
name|searcher
operator|.
name|setQueryCache
argument_list|(
name|queryCache
argument_list|)
expr_stmt|;
name|searcher
operator|.
name|setQueryCachingPolicy
argument_list|(
name|QueryCachingPolicy
operator|.
name|ALWAYS_CACHE
argument_list|)
expr_stmt|;
block|}
comment|// search on searcher1
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
operator|++
name|i
control|)
block|{
name|searcher1
operator|.
name|search
argument_list|(
operator|new
name|ConstantScoreQuery
argument_list|(
name|query
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|9
operator|*
name|segmentCount1
argument_list|,
name|hitCount1
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|hitCount2
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|segmentCount1
argument_list|,
name|missCount1
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|missCount2
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
comment|// then on searcher2
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|20
condition|;
operator|++
name|i
control|)
block|{
name|searcher2
operator|.
name|search
argument_list|(
operator|new
name|ConstantScoreQuery
argument_list|(
name|query2
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|9
operator|*
name|segmentCount1
argument_list|,
name|hitCount1
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|19
operator|*
name|segmentCount2
argument_list|,
name|hitCount2
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|segmentCount1
argument_list|,
name|missCount1
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|segmentCount2
argument_list|,
name|missCount2
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
comment|// now on searcher1 again to trigger evictions
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|30
condition|;
operator|++
name|i
control|)
block|{
name|searcher1
operator|.
name|search
argument_list|(
operator|new
name|ConstantScoreQuery
argument_list|(
name|query3
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|segmentCount1
argument_list|,
name|queryCache
operator|.
name|getEvictionCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|38
operator|*
name|segmentCount1
argument_list|,
name|hitCount1
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|19
operator|*
name|segmentCount2
argument_list|,
name|hitCount2
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
operator|*
name|segmentCount1
argument_list|,
name|missCount1
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|segmentCount2
argument_list|,
name|missCount2
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
comment|// check that the recomputed stats are the same as those reported by the cache
name|assertEquals
argument_list|(
name|queryCache
operator|.
name|ramBytesUsed
argument_list|()
argument_list|,
operator|(
name|segmentCount1
operator|+
name|segmentCount2
operator|)
operator|*
name|LRUQueryCache
operator|.
name|HASHTABLE_RAM_BYTES_PER_ENTRY
operator|+
name|ramBytesUsage
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|queryCache
operator|.
name|getCacheSize
argument_list|()
argument_list|,
name|cacheSize
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|reader1
operator|.
name|close
argument_list|()
expr_stmt|;
name|reader2
operator|.
name|close
argument_list|()
expr_stmt|;
name|w1
operator|.
name|close
argument_list|()
expr_stmt|;
name|w2
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|queryCache
operator|.
name|ramBytesUsed
argument_list|()
argument_list|,
name|ramBytesUsage
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cacheSize
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|queryCache
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ramBytesUsage
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cacheSize
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|dir1
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir2
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testUseRewrittenQueryAsCacheKey
specifier|public
name|void
name|testUseRewrittenQueryAsCacheKey
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|Query
name|expectedCacheKey
init|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|BooleanQuery
name|query
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
specifier|final
name|Query
name|sub
init|=
name|expectedCacheKey
operator|.
name|clone
argument_list|()
decl_stmt|;
name|sub
operator|.
name|setBoost
argument_list|(
literal|42
argument_list|)
expr_stmt|;
name|query
operator|.
name|add
argument_list|(
name|sub
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
specifier|final
name|LRUQueryCache
name|queryCache
init|=
operator|new
name|LRUQueryCache
argument_list|(
literal|1000000
argument_list|,
literal|10000000
argument_list|)
decl_stmt|;
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
specifier|final
name|RandomIndexWriter
name|w
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|StringField
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|,
name|Store
operator|.
name|YES
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|w
operator|.
name|commit
argument_list|()
expr_stmt|;
specifier|final
name|IndexReader
name|reader
init|=
name|w
operator|.
name|getReader
argument_list|()
decl_stmt|;
specifier|final
name|IndexSearcher
name|searcher
init|=
name|newSearcher
argument_list|(
name|reader
argument_list|)
decl_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
specifier|final
name|QueryCachingPolicy
name|policy
init|=
operator|new
name|QueryCachingPolicy
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|shouldCache
parameter_list|(
name|Query
name|query
parameter_list|,
name|LeafReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|assertEquals
argument_list|(
name|expectedCacheKey
argument_list|,
name|QueryCache
operator|.
name|cacheKey
argument_list|(
name|query
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onUse
parameter_list|(
name|Query
name|query
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|expectedCacheKey
argument_list|,
name|QueryCache
operator|.
name|cacheKey
argument_list|(
name|query
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|searcher
operator|.
name|setQueryCache
argument_list|(
name|queryCache
argument_list|)
expr_stmt|;
name|searcher
operator|.
name|setQueryCachingPolicy
argument_list|(
name|policy
argument_list|)
expr_stmt|;
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
operator|new
name|TotalHitCountCollector
argument_list|()
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testBooleanQueryCachesSubClauses
specifier|public
name|void
name|testBooleanQueryCachesSubClauses
parameter_list|()
throws|throws
name|IOException
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
specifier|final
name|RandomIndexWriter
name|w
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|StringField
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|,
name|Store
operator|.
name|YES
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|w
operator|.
name|commit
argument_list|()
expr_stmt|;
specifier|final
name|IndexReader
name|reader
init|=
name|w
operator|.
name|getReader
argument_list|()
decl_stmt|;
specifier|final
name|IndexSearcher
name|searcher
init|=
name|newSearcher
argument_list|(
name|reader
argument_list|)
decl_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
specifier|final
name|LRUQueryCache
name|queryCache
init|=
operator|new
name|LRUQueryCache
argument_list|(
literal|1000000
argument_list|,
literal|10000000
argument_list|)
decl_stmt|;
name|searcher
operator|.
name|setQueryCache
argument_list|(
name|queryCache
argument_list|)
expr_stmt|;
name|searcher
operator|.
name|setQueryCachingPolicy
argument_list|(
name|QueryCachingPolicy
operator|.
name|ALWAYS_CACHE
argument_list|)
expr_stmt|;
name|BooleanQuery
name|bq
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
name|TermQuery
name|should
init|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"foo"
argument_list|,
literal|"baz"
argument_list|)
argument_list|)
decl_stmt|;
name|TermQuery
name|must
init|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
decl_stmt|;
name|TermQuery
name|filter
init|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
decl_stmt|;
name|TermQuery
name|mustNot
init|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"foo"
argument_list|,
literal|"foo"
argument_list|)
argument_list|)
decl_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|should
argument_list|,
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|must
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|filter
argument_list|,
name|Occur
operator|.
name|FILTER
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|mustNot
argument_list|,
name|Occur
operator|.
name|MUST_NOT
argument_list|)
expr_stmt|;
comment|// same bq but with FILTER instead of MUST
name|BooleanQuery
name|bq2
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
name|bq2
operator|.
name|add
argument_list|(
name|should
argument_list|,
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|bq2
operator|.
name|add
argument_list|(
name|must
argument_list|,
name|Occur
operator|.
name|FILTER
argument_list|)
expr_stmt|;
name|bq2
operator|.
name|add
argument_list|(
name|filter
argument_list|,
name|Occur
operator|.
name|FILTER
argument_list|)
expr_stmt|;
name|bq2
operator|.
name|add
argument_list|(
name|mustNot
argument_list|,
name|Occur
operator|.
name|MUST_NOT
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|emptySet
argument_list|()
argument_list|,
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|queryCache
operator|.
name|cachedQueries
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|searcher
operator|.
name|search
argument_list|(
name|bq
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|filter
argument_list|,
name|mustNot
argument_list|)
argument_list|)
argument_list|,
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|queryCache
operator|.
name|cachedQueries
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|queryCache
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|emptySet
argument_list|()
argument_list|,
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|queryCache
operator|.
name|cachedQueries
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|searcher
operator|.
name|search
argument_list|(
operator|new
name|ConstantScoreQuery
argument_list|(
name|bq
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|bq2
argument_list|,
name|should
argument_list|,
name|must
argument_list|,
name|filter
argument_list|,
name|mustNot
argument_list|)
argument_list|)
argument_list|,
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|queryCache
operator|.
name|cachedQueries
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|randomTerm
specifier|private
specifier|static
name|Term
name|randomTerm
parameter_list|()
block|{
specifier|final
name|String
name|term
init|=
name|RandomPicks
operator|.
name|randomFrom
argument_list|(
name|random
argument_list|()
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|,
literal|"baz"
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|Term
argument_list|(
literal|"foo"
argument_list|,
name|term
argument_list|)
return|;
block|}
DECL|method|buildRandomQuery
specifier|private
specifier|static
name|Query
name|buildRandomQuery
parameter_list|(
name|int
name|level
parameter_list|)
block|{
if|if
condition|(
name|level
operator|==
literal|10
condition|)
block|{
comment|// at most 10 levels
return|return
operator|new
name|MatchAllDocsQuery
argument_list|()
return|;
block|}
switch|switch
condition|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|6
argument_list|)
condition|)
block|{
case|case
literal|0
case|:
return|return
operator|new
name|TermQuery
argument_list|(
name|randomTerm
argument_list|()
argument_list|)
return|;
case|case
literal|1
case|:
name|BooleanQuery
name|bq
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
specifier|final
name|int
name|numClauses
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|int
name|numShould
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numClauses
condition|;
operator|++
name|i
control|)
block|{
specifier|final
name|Occur
name|occur
init|=
name|RandomPicks
operator|.
name|randomFrom
argument_list|(
name|random
argument_list|()
argument_list|,
name|Occur
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|buildRandomQuery
argument_list|(
name|level
operator|+
literal|1
argument_list|)
argument_list|,
name|occur
argument_list|)
expr_stmt|;
if|if
condition|(
name|occur
operator|==
name|Occur
operator|.
name|SHOULD
condition|)
block|{
name|numShould
operator|++
expr_stmt|;
block|}
block|}
name|bq
operator|.
name|setMinimumNumberShouldMatch
argument_list|(
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|0
argument_list|,
name|numShould
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|bq
return|;
case|case
literal|2
case|:
name|PhraseQuery
name|pq
init|=
operator|new
name|PhraseQuery
argument_list|()
decl_stmt|;
name|pq
operator|.
name|add
argument_list|(
name|randomTerm
argument_list|()
argument_list|)
expr_stmt|;
name|pq
operator|.
name|add
argument_list|(
name|randomTerm
argument_list|()
argument_list|)
expr_stmt|;
name|pq
operator|.
name|setSlop
argument_list|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|pq
return|;
case|case
literal|3
case|:
return|return
operator|new
name|MatchAllDocsQuery
argument_list|()
return|;
case|case
literal|4
case|:
return|return
operator|new
name|ConstantScoreQuery
argument_list|(
name|buildRandomQuery
argument_list|(
name|level
operator|+
literal|1
argument_list|)
argument_list|)
return|;
case|case
literal|5
case|:
name|DisjunctionMaxQuery
name|dmq
init|=
operator|new
name|DisjunctionMaxQuery
argument_list|(
name|random
argument_list|()
operator|.
name|nextFloat
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|int
name|numQueries
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numQueries
condition|;
operator|++
name|i
control|)
block|{
name|dmq
operator|.
name|add
argument_list|(
name|buildRandomQuery
argument_list|(
name|level
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|dmq
return|;
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|()
throw|;
block|}
block|}
DECL|method|testRandom
specifier|public
name|void
name|testRandom
parameter_list|()
throws|throws
name|IOException
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
specifier|final
name|RandomIndexWriter
name|w
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|TextField
name|f
init|=
operator|new
name|TextField
argument_list|(
literal|"foo"
argument_list|,
literal|"foo"
argument_list|,
name|Store
operator|.
name|NO
argument_list|)
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|IndexReader
name|reader
init|=
name|w
operator|.
name|getReader
argument_list|()
decl_stmt|;
specifier|final
name|int
name|maxSize
decl_stmt|;
specifier|final
name|long
name|maxRamBytesUsed
decl_stmt|;
specifier|final
name|int
name|iters
decl_stmt|;
if|if
condition|(
name|TEST_NIGHTLY
condition|)
block|{
name|maxSize
operator|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|10000
argument_list|)
expr_stmt|;
name|maxRamBytesUsed
operator|=
name|TestUtil
operator|.
name|nextLong
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|5000000
argument_list|)
expr_stmt|;
name|iters
operator|=
name|atLeast
argument_list|(
literal|20000
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|maxSize
operator|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|maxRamBytesUsed
operator|=
name|TestUtil
operator|.
name|nextLong
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|500000
argument_list|)
expr_stmt|;
name|iters
operator|=
name|atLeast
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
block|}
specifier|final
name|LRUQueryCache
name|queryCache
init|=
operator|new
name|LRUQueryCache
argument_list|(
name|maxSize
argument_list|,
name|maxRamBytesUsed
argument_list|)
decl_stmt|;
name|IndexSearcher
name|uncachedSearcher
init|=
literal|null
decl_stmt|;
name|IndexSearcher
name|cachedSearcher
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iters
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|i
operator|==
literal|0
operator|||
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
operator|==
literal|1
condition|)
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|f
operator|.
name|setStringValue
argument_list|(
name|RandomPicks
operator|.
name|randomFrom
argument_list|(
name|random
argument_list|()
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|,
literal|"bar baz"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|w
operator|.
name|deleteDocuments
argument_list|(
name|buildRandomQuery
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|reader
operator|=
name|w
operator|.
name|getReader
argument_list|()
expr_stmt|;
name|uncachedSearcher
operator|=
name|newSearcher
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|uncachedSearcher
operator|.
name|setQueryCache
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|cachedSearcher
operator|=
name|newSearcher
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|cachedSearcher
operator|.
name|setQueryCache
argument_list|(
name|queryCache
argument_list|)
expr_stmt|;
name|cachedSearcher
operator|.
name|setQueryCachingPolicy
argument_list|(
name|QueryCachingPolicy
operator|.
name|ALWAYS_CACHE
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Query
name|q
init|=
name|buildRandomQuery
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|uncachedSearcher
operator|.
name|count
argument_list|(
name|q
argument_list|)
argument_list|,
name|cachedSearcher
operator|.
name|count
argument_list|(
name|q
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|rarely
argument_list|()
condition|)
block|{
name|queryCache
operator|.
name|assertConsistent
argument_list|()
expr_stmt|;
block|}
block|}
name|queryCache
operator|.
name|assertConsistent
argument_list|()
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
name|queryCache
operator|.
name|assertConsistent
argument_list|()
expr_stmt|;
block|}
DECL|class|BadQuery
specifier|private
specifier|static
class|class
name|BadQuery
extends|extends
name|Query
block|{
DECL|field|i
name|int
index|[]
name|i
init|=
operator|new
name|int
index|[]
block|{
literal|42
block|}
decl_stmt|;
comment|// an array so that clone keeps the reference
annotation|@
name|Override
DECL|method|createWeight
specifier|public
name|Weight
name|createWeight
parameter_list|(
name|IndexSearcher
name|searcher
parameter_list|,
name|boolean
name|needsScores
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|ConstantScoreWeight
argument_list|(
name|this
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Scorer
name|scorer
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|,
name|Bits
name|acceptDocs
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|null
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|(
name|String
name|field
parameter_list|)
block|{
return|return
literal|"BadQuery"
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|super
operator|.
name|hashCode
argument_list|()
operator|^
name|i
index|[
literal|0
index|]
return|;
block|}
block|}
DECL|method|testDetectMutatedQueries
specifier|public
name|void
name|testDetectMutatedQueries
parameter_list|()
throws|throws
name|IOException
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
specifier|final
name|RandomIndexWriter
name|w
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|)
decl_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
operator|new
name|Document
argument_list|()
argument_list|)
expr_stmt|;
name|IndexReader
name|reader
init|=
name|w
operator|.
name|getReader
argument_list|()
decl_stmt|;
comment|// size of 1 so that 2nd query evicts from the cache
specifier|final
name|LRUQueryCache
name|queryCache
init|=
operator|new
name|LRUQueryCache
argument_list|(
literal|1
argument_list|,
literal|10000
argument_list|)
decl_stmt|;
specifier|final
name|IndexSearcher
name|searcher
init|=
name|newSearcher
argument_list|(
name|reader
argument_list|)
decl_stmt|;
name|searcher
operator|.
name|setQueryCache
argument_list|(
name|queryCache
argument_list|)
expr_stmt|;
name|searcher
operator|.
name|setQueryCachingPolicy
argument_list|(
name|QueryCachingPolicy
operator|.
name|ALWAYS_CACHE
argument_list|)
expr_stmt|;
name|BadQuery
name|query
init|=
operator|new
name|BadQuery
argument_list|()
decl_stmt|;
name|searcher
operator|.
name|count
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|query
operator|.
name|i
index|[
literal|0
index|]
operator|+=
literal|1
expr_stmt|;
comment|// change the hashCode!
try|try
block|{
comment|// trigger an eviction
name|searcher
operator|.
name|count
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ConcurrentModificationException
name|e
parameter_list|)
block|{
comment|// expected
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
comment|// expected: wrapped when executor is in use
name|Throwable
name|cause
init|=
name|e
operator|.
name|getCause
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|cause
operator|instanceof
name|ExecutionException
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cause
operator|.
name|getCause
argument_list|()
operator|instanceof
name|ConcurrentModificationException
argument_list|)
expr_stmt|;
block|}
name|IOUtils
operator|.
name|close
argument_list|(
name|w
argument_list|,
name|reader
argument_list|,
name|dir
argument_list|)
expr_stmt|;
block|}
DECL|method|testRefuseToCacheTooLargeEntries
specifier|public
name|void
name|testRefuseToCacheTooLargeEntries
parameter_list|()
throws|throws
name|IOException
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
specifier|final
name|RandomIndexWriter
name|w
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
operator|++
name|i
control|)
block|{
name|w
operator|.
name|addDocument
argument_list|(
operator|new
name|Document
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|IndexReader
name|reader
init|=
name|w
operator|.
name|getReader
argument_list|()
decl_stmt|;
comment|// size of 1 byte
specifier|final
name|LRUQueryCache
name|queryCache
init|=
operator|new
name|LRUQueryCache
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|IndexSearcher
name|searcher
init|=
name|newSearcher
argument_list|(
name|reader
argument_list|)
decl_stmt|;
name|searcher
operator|.
name|setQueryCache
argument_list|(
name|queryCache
argument_list|)
expr_stmt|;
name|searcher
operator|.
name|setQueryCachingPolicy
argument_list|(
name|QueryCachingPolicy
operator|.
name|ALWAYS_CACHE
argument_list|)
expr_stmt|;
name|searcher
operator|.
name|count
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|queryCache
operator|.
name|getCacheCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|queryCache
operator|.
name|getEvictionCount
argument_list|()
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class
end_unit
