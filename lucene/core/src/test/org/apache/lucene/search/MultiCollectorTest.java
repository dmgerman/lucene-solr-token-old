begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.search
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DirectoryReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReaderContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|RandomIndexWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_class
DECL|class|MultiCollectorTest
specifier|public
class|class
name|MultiCollectorTest
extends|extends
name|LuceneTestCase
block|{
DECL|class|DummyCollector
specifier|private
specifier|static
class|class
name|DummyCollector
extends|extends
name|SimpleCollector
block|{
DECL|field|collectCalled
name|boolean
name|collectCalled
init|=
literal|false
decl_stmt|;
DECL|field|setNextReaderCalled
name|boolean
name|setNextReaderCalled
init|=
literal|false
decl_stmt|;
DECL|field|setScorerCalled
name|boolean
name|setScorerCalled
init|=
literal|false
decl_stmt|;
annotation|@
name|Override
DECL|method|collect
specifier|public
name|void
name|collect
parameter_list|(
name|int
name|doc
parameter_list|)
throws|throws
name|IOException
block|{
name|collectCalled
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doSetNextReader
specifier|protected
name|void
name|doSetNextReader
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|setNextReaderCalled
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setScorer
specifier|public
name|void
name|setScorer
parameter_list|(
name|Scorer
name|scorer
parameter_list|)
throws|throws
name|IOException
block|{
name|setScorerCalled
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|needsScores
specifier|public
name|boolean
name|needsScores
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
block|}
annotation|@
name|Test
DECL|method|testNullCollectors
specifier|public
name|void
name|testNullCollectors
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Tests that the collector rejects all null collectors.
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|MultiCollector
operator|.
name|wrap
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
comment|// Tests that the collector handles some null collectors well. If it
comment|// doesn't, an NPE would be thrown.
name|Collector
name|c
init|=
name|MultiCollector
operator|.
name|wrap
argument_list|(
operator|new
name|DummyCollector
argument_list|()
argument_list|,
literal|null
argument_list|,
operator|new
name|DummyCollector
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|c
operator|instanceof
name|MultiCollector
argument_list|)
expr_stmt|;
specifier|final
name|LeafCollector
name|ac
init|=
name|c
operator|.
name|getLeafCollector
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|ac
operator|.
name|collect
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|c
operator|.
name|getLeafCollector
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|c
operator|.
name|getLeafCollector
argument_list|(
literal|null
argument_list|)
operator|.
name|setScorer
argument_list|(
operator|new
name|FakeScorer
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSingleCollector
specifier|public
name|void
name|testSingleCollector
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Tests that if a single Collector is input, it is returned (and not MultiCollector).
name|DummyCollector
name|dc
init|=
operator|new
name|DummyCollector
argument_list|()
decl_stmt|;
name|assertSame
argument_list|(
name|dc
argument_list|,
name|MultiCollector
operator|.
name|wrap
argument_list|(
name|dc
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|dc
argument_list|,
name|MultiCollector
operator|.
name|wrap
argument_list|(
name|dc
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCollector
specifier|public
name|void
name|testCollector
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Tests that the collector delegates calls to input collectors properly.
comment|// Tests that the collector handles some null collectors well. If it
comment|// doesn't, an NPE would be thrown.
name|DummyCollector
index|[]
name|dcs
init|=
operator|new
name|DummyCollector
index|[]
block|{
operator|new
name|DummyCollector
argument_list|()
block|,
operator|new
name|DummyCollector
argument_list|()
block|}
decl_stmt|;
name|Collector
name|c
init|=
name|MultiCollector
operator|.
name|wrap
argument_list|(
name|dcs
argument_list|)
decl_stmt|;
name|LeafCollector
name|ac
init|=
name|c
operator|.
name|getLeafCollector
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|ac
operator|.
name|collect
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|ac
operator|=
name|c
operator|.
name|getLeafCollector
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|ac
operator|.
name|setScorer
argument_list|(
operator|new
name|FakeScorer
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|DummyCollector
name|dc
range|:
name|dcs
control|)
block|{
name|assertTrue
argument_list|(
name|dc
operator|.
name|collectCalled
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dc
operator|.
name|setNextReaderCalled
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dc
operator|.
name|setScorerCalled
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|collector
specifier|private
specifier|static
name|Collector
name|collector
parameter_list|(
name|boolean
name|needsScores
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|expectedScorer
parameter_list|)
block|{
return|return
operator|new
name|Collector
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|LeafCollector
name|getLeafCollector
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|LeafCollector
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|setScorer
parameter_list|(
name|Scorer
name|scorer
parameter_list|)
throws|throws
name|IOException
block|{
name|assertEquals
argument_list|(
name|expectedScorer
argument_list|,
name|scorer
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|collect
parameter_list|(
name|int
name|doc
parameter_list|)
throws|throws
name|IOException
block|{}
block|}
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|needsScores
parameter_list|()
block|{
return|return
name|needsScores
return|;
block|}
block|}
return|;
block|}
DECL|method|testCacheScoresIfNecessary
specifier|public
name|void
name|testCacheScoresIfNecessary
parameter_list|()
throws|throws
name|IOException
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|RandomIndexWriter
name|iw
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|)
decl_stmt|;
name|iw
operator|.
name|addDocument
argument_list|(
operator|new
name|Document
argument_list|()
argument_list|)
expr_stmt|;
name|iw
operator|.
name|commit
argument_list|()
expr_stmt|;
name|DirectoryReader
name|reader
init|=
name|iw
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|iw
operator|.
name|close
argument_list|()
expr_stmt|;
specifier|final
name|LeafReaderContext
name|ctx
init|=
name|reader
operator|.
name|leaves
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|expectThrows
argument_list|(
name|AssertionError
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|collector
argument_list|(
literal|false
argument_list|,
name|ScoreCachingWrappingScorer
operator|.
name|class
argument_list|)
operator|.
name|getLeafCollector
argument_list|(
name|ctx
argument_list|)
operator|.
name|setScorer
argument_list|(
operator|new
name|FakeScorer
argument_list|()
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
comment|// no collector needs scores => no caching
name|Collector
name|c1
init|=
name|collector
argument_list|(
literal|false
argument_list|,
name|FakeScorer
operator|.
name|class
argument_list|)
decl_stmt|;
name|Collector
name|c2
init|=
name|collector
argument_list|(
literal|false
argument_list|,
name|FakeScorer
operator|.
name|class
argument_list|)
decl_stmt|;
name|MultiCollector
operator|.
name|wrap
argument_list|(
name|c1
argument_list|,
name|c2
argument_list|)
operator|.
name|getLeafCollector
argument_list|(
name|ctx
argument_list|)
operator|.
name|setScorer
argument_list|(
operator|new
name|FakeScorer
argument_list|()
argument_list|)
expr_stmt|;
comment|// only one collector needs scores => no caching
name|c1
operator|=
name|collector
argument_list|(
literal|true
argument_list|,
name|FakeScorer
operator|.
name|class
argument_list|)
expr_stmt|;
name|c2
operator|=
name|collector
argument_list|(
literal|false
argument_list|,
name|FakeScorer
operator|.
name|class
argument_list|)
expr_stmt|;
name|MultiCollector
operator|.
name|wrap
argument_list|(
name|c1
argument_list|,
name|c2
argument_list|)
operator|.
name|getLeafCollector
argument_list|(
name|ctx
argument_list|)
operator|.
name|setScorer
argument_list|(
operator|new
name|FakeScorer
argument_list|()
argument_list|)
expr_stmt|;
comment|// several collectors need scores => caching
name|c1
operator|=
name|collector
argument_list|(
literal|true
argument_list|,
name|ScoreCachingWrappingScorer
operator|.
name|class
argument_list|)
expr_stmt|;
name|c2
operator|=
name|collector
argument_list|(
literal|true
argument_list|,
name|ScoreCachingWrappingScorer
operator|.
name|class
argument_list|)
expr_stmt|;
name|MultiCollector
operator|.
name|wrap
argument_list|(
name|c1
argument_list|,
name|c2
argument_list|)
operator|.
name|getLeafCollector
argument_list|(
name|ctx
argument_list|)
operator|.
name|setScorer
argument_list|(
operator|new
name|FakeScorer
argument_list|()
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class
end_unit
