begin_unit
begin_package
DECL|package|org.apache.lucene.search
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|BitSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|MockAnalyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|AtomicReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|AtomicReaderContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DocsEnum
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|RandomIndexWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanClause
operator|.
name|Occur
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|FilteredQuery
operator|.
name|FilterStrategy
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Bits
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|DocIdBitSet
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|_TestUtil
import|;
end_import
begin_comment
comment|/**  * FilteredQuery JUnit tests.  *  *<p>Created: Apr 21, 2004 1:21:46 PM  *  *  * @since   1.4  */
end_comment
begin_class
DECL|class|TestFilteredQuery
specifier|public
class|class
name|TestFilteredQuery
extends|extends
name|LuceneTestCase
block|{
DECL|field|searcher
specifier|private
name|IndexSearcher
name|searcher
decl_stmt|;
DECL|field|reader
specifier|private
name|IndexReader
name|reader
decl_stmt|;
DECL|field|directory
specifier|private
name|Directory
name|directory
decl_stmt|;
DECL|field|query
specifier|private
name|Query
name|query
decl_stmt|;
DECL|field|filter
specifier|private
name|Filter
name|filter
decl_stmt|;
annotation|@
name|Override
DECL|method|setUp
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|directory
operator|=
name|newDirectory
argument_list|()
expr_stmt|;
name|RandomIndexWriter
name|writer
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|directory
argument_list|,
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setMergePolicy
argument_list|(
name|newLogMergePolicy
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newTextField
argument_list|(
literal|"field"
argument_list|,
literal|"one two three four five"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newTextField
argument_list|(
literal|"sorter"
argument_list|,
literal|"b"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newTextField
argument_list|(
literal|"field"
argument_list|,
literal|"one two three four"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newTextField
argument_list|(
literal|"sorter"
argument_list|,
literal|"d"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newTextField
argument_list|(
literal|"field"
argument_list|,
literal|"one two three y"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newTextField
argument_list|(
literal|"sorter"
argument_list|,
literal|"a"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newTextField
argument_list|(
literal|"field"
argument_list|,
literal|"one two x"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newTextField
argument_list|(
literal|"sorter"
argument_list|,
literal|"c"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
comment|// tests here require single segment (eg try seed
comment|// 8239472272678419952L), because SingleDocTestFilter(x)
comment|// blindly accepts that docID in any sub-segment
name|writer
operator|.
name|forceMerge
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|reader
operator|=
name|writer
operator|.
name|getReader
argument_list|()
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|searcher
operator|=
name|newSearcher
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|query
operator|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"three"
argument_list|)
argument_list|)
expr_stmt|;
name|filter
operator|=
name|newStaticFilterB
argument_list|()
expr_stmt|;
block|}
comment|// must be static for serialization tests
DECL|method|newStaticFilterB
specifier|private
specifier|static
name|Filter
name|newStaticFilterB
parameter_list|()
block|{
return|return
operator|new
name|Filter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|DocIdSet
name|getDocIdSet
parameter_list|(
name|AtomicReaderContext
name|context
parameter_list|,
name|Bits
name|acceptDocs
parameter_list|)
block|{
if|if
condition|(
name|acceptDocs
operator|==
literal|null
condition|)
name|acceptDocs
operator|=
operator|new
name|Bits
operator|.
name|MatchAllBits
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|BitSet
name|bitset
init|=
operator|new
name|BitSet
argument_list|(
literal|5
argument_list|)
decl_stmt|;
if|if
condition|(
name|acceptDocs
operator|.
name|get
argument_list|(
literal|1
argument_list|)
condition|)
name|bitset
operator|.
name|set
argument_list|(
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|acceptDocs
operator|.
name|get
argument_list|(
literal|3
argument_list|)
condition|)
name|bitset
operator|.
name|set
argument_list|(
literal|3
argument_list|)
expr_stmt|;
return|return
operator|new
name|DocIdBitSet
argument_list|(
name|bitset
argument_list|)
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|tearDown
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|directory
operator|.
name|close
argument_list|()
expr_stmt|;
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
DECL|method|testFilteredQuery
specifier|public
name|void
name|testFilteredQuery
parameter_list|()
throws|throws
name|Exception
block|{
comment|// force the filter to be executed as bits
name|tFilteredQuery
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// force the filter to be executed as iterator
name|tFilteredQuery
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|tFilteredQuery
specifier|private
name|void
name|tFilteredQuery
parameter_list|(
specifier|final
name|boolean
name|useRandomAccess
parameter_list|)
throws|throws
name|Exception
block|{
name|Query
name|filteredquery
init|=
operator|new
name|FilteredQuery
argument_list|(
name|query
argument_list|,
name|filter
argument_list|,
name|randomFilterStrategy
argument_list|(
name|random
argument_list|()
argument_list|,
name|useRandomAccess
argument_list|)
argument_list|)
decl_stmt|;
name|ScoreDoc
index|[]
name|hits
init|=
name|searcher
operator|.
name|search
argument_list|(
name|filteredquery
argument_list|,
literal|null
argument_list|,
literal|1000
argument_list|)
operator|.
name|scoreDocs
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|hits
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|hits
index|[
literal|0
index|]
operator|.
name|doc
argument_list|)
expr_stmt|;
name|QueryUtils
operator|.
name|check
argument_list|(
name|random
argument_list|()
argument_list|,
name|filteredquery
argument_list|,
name|searcher
argument_list|)
expr_stmt|;
name|hits
operator|=
name|searcher
operator|.
name|search
argument_list|(
name|filteredquery
argument_list|,
literal|null
argument_list|,
literal|1000
argument_list|,
operator|new
name|Sort
argument_list|(
operator|new
name|SortField
argument_list|(
literal|"sorter"
argument_list|,
name|SortField
operator|.
name|Type
operator|.
name|STRING
argument_list|)
argument_list|)
argument_list|)
operator|.
name|scoreDocs
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|hits
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|hits
index|[
literal|0
index|]
operator|.
name|doc
argument_list|)
expr_stmt|;
name|filteredquery
operator|=
operator|new
name|FilteredQuery
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"one"
argument_list|)
argument_list|)
argument_list|,
name|filter
argument_list|,
name|randomFilterStrategy
argument_list|(
name|random
argument_list|()
argument_list|,
name|useRandomAccess
argument_list|)
argument_list|)
expr_stmt|;
name|hits
operator|=
name|searcher
operator|.
name|search
argument_list|(
name|filteredquery
argument_list|,
literal|null
argument_list|,
literal|1000
argument_list|)
operator|.
name|scoreDocs
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|hits
operator|.
name|length
argument_list|)
expr_stmt|;
name|QueryUtils
operator|.
name|check
argument_list|(
name|random
argument_list|()
argument_list|,
name|filteredquery
argument_list|,
name|searcher
argument_list|)
expr_stmt|;
name|filteredquery
operator|=
operator|new
name|FilteredQuery
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
name|filter
argument_list|,
name|randomFilterStrategy
argument_list|(
name|random
argument_list|()
argument_list|,
name|useRandomAccess
argument_list|)
argument_list|)
expr_stmt|;
name|hits
operator|=
name|searcher
operator|.
name|search
argument_list|(
name|filteredquery
argument_list|,
literal|null
argument_list|,
literal|1000
argument_list|)
operator|.
name|scoreDocs
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|hits
operator|.
name|length
argument_list|)
expr_stmt|;
name|QueryUtils
operator|.
name|check
argument_list|(
name|random
argument_list|()
argument_list|,
name|filteredquery
argument_list|,
name|searcher
argument_list|)
expr_stmt|;
name|filteredquery
operator|=
operator|new
name|FilteredQuery
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"x"
argument_list|)
argument_list|)
argument_list|,
name|filter
argument_list|,
name|randomFilterStrategy
argument_list|(
name|random
argument_list|()
argument_list|,
name|useRandomAccess
argument_list|)
argument_list|)
expr_stmt|;
name|hits
operator|=
name|searcher
operator|.
name|search
argument_list|(
name|filteredquery
argument_list|,
literal|null
argument_list|,
literal|1000
argument_list|)
operator|.
name|scoreDocs
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|hits
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|hits
index|[
literal|0
index|]
operator|.
name|doc
argument_list|)
expr_stmt|;
name|QueryUtils
operator|.
name|check
argument_list|(
name|random
argument_list|()
argument_list|,
name|filteredquery
argument_list|,
name|searcher
argument_list|)
expr_stmt|;
name|filteredquery
operator|=
operator|new
name|FilteredQuery
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"y"
argument_list|)
argument_list|)
argument_list|,
name|filter
argument_list|,
name|randomFilterStrategy
argument_list|(
name|random
argument_list|()
argument_list|,
name|useRandomAccess
argument_list|)
argument_list|)
expr_stmt|;
name|hits
operator|=
name|searcher
operator|.
name|search
argument_list|(
name|filteredquery
argument_list|,
literal|null
argument_list|,
literal|1000
argument_list|)
operator|.
name|scoreDocs
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|hits
operator|.
name|length
argument_list|)
expr_stmt|;
name|QueryUtils
operator|.
name|check
argument_list|(
name|random
argument_list|()
argument_list|,
name|filteredquery
argument_list|,
name|searcher
argument_list|)
expr_stmt|;
comment|// test boost
name|Filter
name|f
init|=
name|newStaticFilterA
argument_list|()
decl_stmt|;
name|float
name|boost
init|=
literal|2.5f
decl_stmt|;
name|BooleanQuery
name|bq1
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
name|TermQuery
name|tq
init|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"one"
argument_list|)
argument_list|)
decl_stmt|;
name|tq
operator|.
name|setBoost
argument_list|(
name|boost
argument_list|)
expr_stmt|;
name|bq1
operator|.
name|add
argument_list|(
name|tq
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|bq1
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"five"
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|BooleanQuery
name|bq2
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
name|tq
operator|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"one"
argument_list|)
argument_list|)
expr_stmt|;
name|filteredquery
operator|=
operator|new
name|FilteredQuery
argument_list|(
name|tq
argument_list|,
name|f
argument_list|,
name|randomFilterStrategy
argument_list|(
name|random
argument_list|()
argument_list|,
name|useRandomAccess
argument_list|)
argument_list|)
expr_stmt|;
name|filteredquery
operator|.
name|setBoost
argument_list|(
name|boost
argument_list|)
expr_stmt|;
name|bq2
operator|.
name|add
argument_list|(
name|filteredquery
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|bq2
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"five"
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|assertScoreEquals
argument_list|(
name|bq1
argument_list|,
name|bq2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|boost
argument_list|,
name|filteredquery
operator|.
name|getBoost
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1.0f
argument_list|,
name|tq
operator|.
name|getBoost
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// the boost value of the underlying query shouldn't have changed
block|}
comment|// must be static for serialization tests
DECL|method|newStaticFilterA
specifier|private
specifier|static
name|Filter
name|newStaticFilterA
parameter_list|()
block|{
return|return
operator|new
name|Filter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|DocIdSet
name|getDocIdSet
parameter_list|(
name|AtomicReaderContext
name|context
parameter_list|,
name|Bits
name|acceptDocs
parameter_list|)
block|{
name|assertNull
argument_list|(
literal|"acceptDocs should be null, as we have an index without deletions"
argument_list|,
name|acceptDocs
argument_list|)
expr_stmt|;
name|BitSet
name|bitset
init|=
operator|new
name|BitSet
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|bitset
operator|.
name|set
argument_list|(
literal|0
argument_list|,
literal|5
argument_list|)
expr_stmt|;
return|return
operator|new
name|DocIdBitSet
argument_list|(
name|bitset
argument_list|)
return|;
block|}
block|}
return|;
block|}
comment|/**    * Tests whether the scores of the two queries are the same.    */
DECL|method|assertScoreEquals
specifier|public
name|void
name|assertScoreEquals
parameter_list|(
name|Query
name|q1
parameter_list|,
name|Query
name|q2
parameter_list|)
throws|throws
name|Exception
block|{
name|ScoreDoc
index|[]
name|hits1
init|=
name|searcher
operator|.
name|search
argument_list|(
name|q1
argument_list|,
literal|null
argument_list|,
literal|1000
argument_list|)
operator|.
name|scoreDocs
decl_stmt|;
name|ScoreDoc
index|[]
name|hits2
init|=
name|searcher
operator|.
name|search
argument_list|(
name|q2
argument_list|,
literal|null
argument_list|,
literal|1000
argument_list|)
operator|.
name|scoreDocs
decl_stmt|;
name|assertEquals
argument_list|(
name|hits1
operator|.
name|length
argument_list|,
name|hits2
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|hits1
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|hits1
index|[
name|i
index|]
operator|.
name|score
argument_list|,
name|hits2
index|[
name|i
index|]
operator|.
name|score
argument_list|,
literal|0.000001f
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * This tests FilteredQuery's rewrite correctness    */
DECL|method|testRangeQuery
specifier|public
name|void
name|testRangeQuery
parameter_list|()
throws|throws
name|Exception
block|{
comment|// force the filter to be executed as bits
name|tRangeQuery
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|tRangeQuery
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|tRangeQuery
specifier|private
name|void
name|tRangeQuery
parameter_list|(
specifier|final
name|boolean
name|useRandomAccess
parameter_list|)
throws|throws
name|Exception
block|{
name|TermRangeQuery
name|rq
init|=
name|TermRangeQuery
operator|.
name|newStringRange
argument_list|(
literal|"sorter"
argument_list|,
literal|"b"
argument_list|,
literal|"d"
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Query
name|filteredquery
init|=
operator|new
name|FilteredQuery
argument_list|(
name|rq
argument_list|,
name|filter
argument_list|,
name|randomFilterStrategy
argument_list|(
name|random
argument_list|()
argument_list|,
name|useRandomAccess
argument_list|)
argument_list|)
decl_stmt|;
name|ScoreDoc
index|[]
name|hits
init|=
name|searcher
operator|.
name|search
argument_list|(
name|filteredquery
argument_list|,
literal|null
argument_list|,
literal|1000
argument_list|)
operator|.
name|scoreDocs
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|hits
operator|.
name|length
argument_list|)
expr_stmt|;
name|QueryUtils
operator|.
name|check
argument_list|(
name|random
argument_list|()
argument_list|,
name|filteredquery
argument_list|,
name|searcher
argument_list|)
expr_stmt|;
block|}
DECL|method|testBooleanMUST
specifier|public
name|void
name|testBooleanMUST
parameter_list|()
throws|throws
name|Exception
block|{
comment|// force the filter to be executed as bits
name|tBooleanMUST
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// force the filter to be executed as iterator
name|tBooleanMUST
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|tBooleanMUST
specifier|private
name|void
name|tBooleanMUST
parameter_list|(
specifier|final
name|boolean
name|useRandomAccess
parameter_list|)
throws|throws
name|Exception
block|{
name|BooleanQuery
name|bq
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
name|Query
name|query
init|=
operator|new
name|FilteredQuery
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"one"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|SingleDocTestFilter
argument_list|(
literal|0
argument_list|)
argument_list|,
name|randomFilterStrategy
argument_list|(
name|random
argument_list|()
argument_list|,
name|useRandomAccess
argument_list|)
argument_list|)
decl_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|query
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|query
operator|=
operator|new
name|FilteredQuery
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"one"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|SingleDocTestFilter
argument_list|(
literal|1
argument_list|)
argument_list|,
name|randomFilterStrategy
argument_list|(
name|random
argument_list|()
argument_list|,
name|useRandomAccess
argument_list|)
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|query
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|ScoreDoc
index|[]
name|hits
init|=
name|searcher
operator|.
name|search
argument_list|(
name|bq
argument_list|,
literal|null
argument_list|,
literal|1000
argument_list|)
operator|.
name|scoreDocs
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|hits
operator|.
name|length
argument_list|)
expr_stmt|;
name|QueryUtils
operator|.
name|check
argument_list|(
name|random
argument_list|()
argument_list|,
name|query
argument_list|,
name|searcher
argument_list|)
expr_stmt|;
block|}
DECL|method|testBooleanSHOULD
specifier|public
name|void
name|testBooleanSHOULD
parameter_list|()
throws|throws
name|Exception
block|{
comment|// force the filter to be executed as bits
name|tBooleanSHOULD
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// force the filter to be executed as iterator
name|tBooleanSHOULD
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|tBooleanSHOULD
specifier|private
name|void
name|tBooleanSHOULD
parameter_list|(
specifier|final
name|boolean
name|useRandomAccess
parameter_list|)
throws|throws
name|Exception
block|{
name|BooleanQuery
name|bq
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
name|Query
name|query
init|=
operator|new
name|FilteredQuery
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"one"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|SingleDocTestFilter
argument_list|(
literal|0
argument_list|)
argument_list|,
name|randomFilterStrategy
argument_list|(
name|random
argument_list|()
argument_list|,
name|useRandomAccess
argument_list|)
argument_list|)
decl_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|query
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|query
operator|=
operator|new
name|FilteredQuery
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"one"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|SingleDocTestFilter
argument_list|(
literal|1
argument_list|)
argument_list|,
name|randomFilterStrategy
argument_list|(
name|random
argument_list|()
argument_list|,
name|useRandomAccess
argument_list|)
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|query
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|ScoreDoc
index|[]
name|hits
init|=
name|searcher
operator|.
name|search
argument_list|(
name|bq
argument_list|,
literal|null
argument_list|,
literal|1000
argument_list|)
operator|.
name|scoreDocs
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|hits
operator|.
name|length
argument_list|)
expr_stmt|;
name|QueryUtils
operator|.
name|check
argument_list|(
name|random
argument_list|()
argument_list|,
name|query
argument_list|,
name|searcher
argument_list|)
expr_stmt|;
block|}
comment|// Make sure BooleanQuery, which does out-of-order
comment|// scoring, inside FilteredQuery, works
DECL|method|testBoolean2
specifier|public
name|void
name|testBoolean2
parameter_list|()
throws|throws
name|Exception
block|{
comment|// force the filter to be executed as bits
name|tBoolean2
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// force the filter to be executed as iterator
name|tBoolean2
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|tBoolean2
specifier|private
name|void
name|tBoolean2
parameter_list|(
specifier|final
name|boolean
name|useRandomAccess
parameter_list|)
throws|throws
name|Exception
block|{
name|BooleanQuery
name|bq
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
name|Query
name|query
init|=
operator|new
name|FilteredQuery
argument_list|(
name|bq
argument_list|,
operator|new
name|SingleDocTestFilter
argument_list|(
literal|0
argument_list|)
argument_list|,
name|randomFilterStrategy
argument_list|(
name|random
argument_list|()
argument_list|,
name|useRandomAccess
argument_list|)
argument_list|)
decl_stmt|;
name|bq
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"one"
argument_list|)
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"two"
argument_list|)
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|ScoreDoc
index|[]
name|hits
init|=
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
literal|1000
argument_list|)
operator|.
name|scoreDocs
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|hits
operator|.
name|length
argument_list|)
expr_stmt|;
name|QueryUtils
operator|.
name|check
argument_list|(
name|random
argument_list|()
argument_list|,
name|query
argument_list|,
name|searcher
argument_list|)
expr_stmt|;
block|}
DECL|method|testChainedFilters
specifier|public
name|void
name|testChainedFilters
parameter_list|()
throws|throws
name|Exception
block|{
comment|// force the filter to be executed as bits
name|tChainedFilters
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// force the filter to be executed as iterator
name|tChainedFilters
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|tChainedFilters
specifier|private
name|void
name|tChainedFilters
parameter_list|(
specifier|final
name|boolean
name|useRandomAccess
parameter_list|)
throws|throws
name|Exception
block|{
name|Query
name|query
init|=
operator|new
name|FilteredQuery
argument_list|(
operator|new
name|FilteredQuery
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
operator|new
name|CachingWrapperFilter
argument_list|(
operator|new
name|QueryWrapperFilter
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"three"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|randomFilterStrategy
argument_list|(
name|random
argument_list|()
argument_list|,
name|useRandomAccess
argument_list|)
argument_list|)
argument_list|,
operator|new
name|CachingWrapperFilter
argument_list|(
operator|new
name|QueryWrapperFilter
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"four"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|randomFilterStrategy
argument_list|(
name|random
argument_list|()
argument_list|,
name|useRandomAccess
argument_list|)
argument_list|)
decl_stmt|;
name|ScoreDoc
index|[]
name|hits
init|=
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
literal|10
argument_list|)
operator|.
name|scoreDocs
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|hits
operator|.
name|length
argument_list|)
expr_stmt|;
name|QueryUtils
operator|.
name|check
argument_list|(
name|random
argument_list|()
argument_list|,
name|query
argument_list|,
name|searcher
argument_list|)
expr_stmt|;
comment|// one more:
name|query
operator|=
operator|new
name|FilteredQuery
argument_list|(
name|query
argument_list|,
operator|new
name|CachingWrapperFilter
argument_list|(
operator|new
name|QueryWrapperFilter
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"five"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|randomFilterStrategy
argument_list|(
name|random
argument_list|()
argument_list|,
name|useRandomAccess
argument_list|)
argument_list|)
expr_stmt|;
name|hits
operator|=
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
literal|10
argument_list|)
operator|.
name|scoreDocs
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|hits
operator|.
name|length
argument_list|)
expr_stmt|;
name|QueryUtils
operator|.
name|check
argument_list|(
name|random
argument_list|()
argument_list|,
name|query
argument_list|,
name|searcher
argument_list|)
expr_stmt|;
block|}
DECL|method|testEqualsHashcode
specifier|public
name|void
name|testEqualsHashcode
parameter_list|()
throws|throws
name|Exception
block|{
comment|// some tests before, if the used queries and filters work:
name|assertEquals
argument_list|(
operator|new
name|PrefixFilter
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"o"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|PrefixFilter
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"o"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
operator|new
name|PrefixFilter
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"a"
argument_list|)
argument_list|)
operator|.
name|equals
argument_list|(
operator|new
name|PrefixFilter
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"o"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QueryUtils
operator|.
name|checkHashEquals
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"one"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QueryUtils
operator|.
name|checkUnequal
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"one"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"two"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// now test FilteredQuery equals/hashcode:
name|QueryUtils
operator|.
name|checkHashEquals
argument_list|(
operator|new
name|FilteredQuery
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"one"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|PrefixFilter
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"o"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QueryUtils
operator|.
name|checkUnequal
argument_list|(
operator|new
name|FilteredQuery
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"one"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|PrefixFilter
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"o"
argument_list|)
argument_list|)
argument_list|)
argument_list|,
operator|new
name|FilteredQuery
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"two"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|PrefixFilter
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"o"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QueryUtils
operator|.
name|checkUnequal
argument_list|(
operator|new
name|FilteredQuery
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"one"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|PrefixFilter
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"a"
argument_list|)
argument_list|)
argument_list|)
argument_list|,
operator|new
name|FilteredQuery
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"one"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|PrefixFilter
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"o"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testInvalidArguments
specifier|public
name|void
name|testInvalidArguments
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
operator|new
name|FilteredQuery
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should throw IllegalArgumentException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|iae
parameter_list|)
block|{
comment|// pass
block|}
try|try
block|{
operator|new
name|FilteredQuery
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"one"
argument_list|)
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should throw IllegalArgumentException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|iae
parameter_list|)
block|{
comment|// pass
block|}
try|try
block|{
operator|new
name|FilteredQuery
argument_list|(
literal|null
argument_list|,
operator|new
name|PrefixFilter
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"o"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should throw IllegalArgumentException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|iae
parameter_list|)
block|{
comment|// pass
block|}
block|}
DECL|method|randomFilterStrategy
specifier|private
name|FilterStrategy
name|randomFilterStrategy
parameter_list|()
block|{
return|return
name|randomFilterStrategy
argument_list|(
name|random
argument_list|()
argument_list|,
literal|true
argument_list|)
return|;
block|}
DECL|method|assertRewrite
specifier|private
name|void
name|assertRewrite
parameter_list|(
name|FilteredQuery
name|fq
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|Query
argument_list|>
name|clazz
parameter_list|)
throws|throws
name|Exception
block|{
comment|// assign crazy boost to FQ
specifier|final
name|float
name|boost
init|=
name|random
argument_list|()
operator|.
name|nextFloat
argument_list|()
operator|*
literal|100.f
decl_stmt|;
name|fq
operator|.
name|setBoost
argument_list|(
name|boost
argument_list|)
expr_stmt|;
comment|// assign crazy boost to inner
specifier|final
name|float
name|innerBoost
init|=
name|random
argument_list|()
operator|.
name|nextFloat
argument_list|()
operator|*
literal|100.f
decl_stmt|;
name|fq
operator|.
name|getQuery
argument_list|()
operator|.
name|setBoost
argument_list|(
name|innerBoost
argument_list|)
expr_stmt|;
comment|// check the class and boosts of rewritten query
specifier|final
name|Query
name|rewritten
init|=
name|searcher
operator|.
name|rewrite
argument_list|(
name|fq
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"is not instance of "
operator|+
name|clazz
operator|.
name|getName
argument_list|()
argument_list|,
name|clazz
operator|.
name|isInstance
argument_list|(
name|rewritten
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|rewritten
operator|instanceof
name|FilteredQuery
condition|)
block|{
name|assertEquals
argument_list|(
name|boost
argument_list|,
name|rewritten
operator|.
name|getBoost
argument_list|()
argument_list|,
literal|1.E
operator|-
literal|5f
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|innerBoost
argument_list|,
operator|(
operator|(
name|FilteredQuery
operator|)
name|rewritten
operator|)
operator|.
name|getQuery
argument_list|()
operator|.
name|getBoost
argument_list|()
argument_list|,
literal|1.E
operator|-
literal|5f
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|fq
operator|.
name|getFilterStrategy
argument_list|()
argument_list|,
operator|(
operator|(
name|FilteredQuery
operator|)
name|rewritten
operator|)
operator|.
name|getFilterStrategy
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
name|boost
operator|*
name|innerBoost
argument_list|,
name|rewritten
operator|.
name|getBoost
argument_list|()
argument_list|,
literal|1.E
operator|-
literal|5f
argument_list|)
expr_stmt|;
block|}
comment|// check that the original query was not modified
name|assertEquals
argument_list|(
name|boost
argument_list|,
name|fq
operator|.
name|getBoost
argument_list|()
argument_list|,
literal|1.E
operator|-
literal|5f
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|innerBoost
argument_list|,
name|fq
operator|.
name|getQuery
argument_list|()
operator|.
name|getBoost
argument_list|()
argument_list|,
literal|1.E
operator|-
literal|5f
argument_list|)
expr_stmt|;
block|}
DECL|method|testRewrite
specifier|public
name|void
name|testRewrite
parameter_list|()
throws|throws
name|Exception
block|{
name|assertRewrite
argument_list|(
operator|new
name|FilteredQuery
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"one"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|PrefixFilter
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"o"
argument_list|)
argument_list|)
argument_list|,
name|randomFilterStrategy
argument_list|()
argument_list|)
argument_list|,
name|FilteredQuery
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertRewrite
argument_list|(
operator|new
name|FilteredQuery
argument_list|(
operator|new
name|PrefixQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"one"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|PrefixFilter
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"o"
argument_list|)
argument_list|)
argument_list|,
name|randomFilterStrategy
argument_list|()
argument_list|)
argument_list|,
name|FilteredQuery
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertRewrite
argument_list|(
operator|new
name|FilteredQuery
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
operator|new
name|PrefixFilter
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"o"
argument_list|)
argument_list|)
argument_list|,
name|randomFilterStrategy
argument_list|()
argument_list|)
argument_list|,
name|ConstantScoreQuery
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|method|testGetFilterStrategy
specifier|public
name|void
name|testGetFilterStrategy
parameter_list|()
block|{
name|FilterStrategy
name|randomFilterStrategy
init|=
name|randomFilterStrategy
argument_list|()
decl_stmt|;
name|FilteredQuery
name|filteredQuery
init|=
operator|new
name|FilteredQuery
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"one"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|PrefixFilter
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"o"
argument_list|)
argument_list|)
argument_list|,
name|randomFilterStrategy
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|randomFilterStrategy
argument_list|,
name|filteredQuery
operator|.
name|getFilterStrategy
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|randomFilterStrategy
specifier|private
specifier|static
name|FilteredQuery
operator|.
name|FilterStrategy
name|randomFilterStrategy
parameter_list|(
name|Random
name|random
parameter_list|,
specifier|final
name|boolean
name|useRandomAccess
parameter_list|)
block|{
if|if
condition|(
name|useRandomAccess
condition|)
block|{
return|return
operator|new
name|FilteredQuery
operator|.
name|RandomAccessFilterStrategy
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|boolean
name|useRandomAccess
parameter_list|(
name|Bits
name|bits
parameter_list|,
name|int
name|firstFilterDoc
parameter_list|)
block|{
return|return
name|useRandomAccess
return|;
block|}
block|}
return|;
block|}
return|return
name|_TestUtil
operator|.
name|randomFilterStrategy
argument_list|(
name|random
argument_list|)
return|;
block|}
comment|/*    * Test if the QueryFirst strategy calls the bits only if the document has    * been matched by the query and not otherwise    */
DECL|method|testQueryFirstFilterStrategy
specifier|public
name|void
name|testQueryFirstFilterStrategy
parameter_list|()
throws|throws
name|IOException
block|{
name|Directory
name|directory
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|RandomIndexWriter
name|writer
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|directory
argument_list|,
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|numDocs
init|=
name|atLeast
argument_list|(
literal|50
argument_list|)
decl_stmt|;
name|int
name|totalDocsWithZero
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
name|i
operator|++
control|)
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|int
name|num
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|5
argument_list|)
decl_stmt|;
if|if
condition|(
name|num
operator|==
literal|0
condition|)
block|{
name|totalDocsWithZero
operator|++
expr_stmt|;
block|}
name|doc
operator|.
name|add
argument_list|(
name|newTextField
argument_list|(
literal|"field"
argument_list|,
literal|""
operator|+
name|num
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
name|IndexReader
name|reader
init|=
name|writer
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|IndexSearcher
name|searcher
init|=
name|newSearcher
argument_list|(
name|reader
argument_list|)
decl_stmt|;
name|Query
name|query
init|=
operator|new
name|FilteredQuery
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"0"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|Filter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|DocIdSet
name|getDocIdSet
parameter_list|(
name|AtomicReaderContext
name|context
parameter_list|,
name|Bits
name|acceptDocs
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|boolean
name|nullBitset
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
operator|==
literal|5
decl_stmt|;
specifier|final
name|AtomicReader
name|reader
init|=
name|context
operator|.
name|reader
argument_list|()
decl_stmt|;
name|DocsEnum
name|termDocsEnum
init|=
name|reader
operator|.
name|termDocsEnum
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"0"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|termDocsEnum
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
comment|// no docs -- return null
block|}
specifier|final
name|BitSet
name|bitSet
init|=
operator|new
name|BitSet
argument_list|(
name|reader
operator|.
name|maxDoc
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|d
decl_stmt|;
while|while
condition|(
operator|(
name|d
operator|=
name|termDocsEnum
operator|.
name|nextDoc
argument_list|()
operator|)
operator|!=
name|DocsEnum
operator|.
name|NO_MORE_DOCS
condition|)
block|{
name|bitSet
operator|.
name|set
argument_list|(
name|d
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|DocIdSet
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Bits
name|bits
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|nullBitset
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|new
name|Bits
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|get
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"filter was called for a non-matching doc"
argument_list|,
name|bitSet
operator|.
name|get
argument_list|(
name|index
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|bitSet
operator|.
name|get
argument_list|(
name|index
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|length
parameter_list|()
block|{
return|return
name|bitSet
operator|.
name|length
argument_list|()
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
specifier|public
name|DocIdSetIterator
name|iterator
parameter_list|()
throws|throws
name|IOException
block|{
name|assertTrue
argument_list|(
literal|"iterator should not be called if bitset is present"
argument_list|,
name|nullBitset
argument_list|)
expr_stmt|;
return|return
name|reader
operator|.
name|termDocsEnum
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"0"
argument_list|)
argument_list|)
return|;
block|}
block|}
return|;
block|}
block|}
argument_list|,
name|FilteredQuery
operator|.
name|QUERY_FIRST_FILTER_STRATEGY
argument_list|)
decl_stmt|;
name|TopDocs
name|search
init|=
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|totalDocsWithZero
argument_list|,
name|search
operator|.
name|totalHits
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|close
argument_list|(
name|reader
argument_list|,
name|writer
argument_list|,
name|directory
argument_list|)
expr_stmt|;
block|}
comment|/*    * Test if the leapfrog strategy works correctly in terms    * of advancing / next the right thing first    */
DECL|method|testLeapFrogStrategy
specifier|public
name|void
name|testLeapFrogStrategy
parameter_list|()
throws|throws
name|IOException
block|{
name|Directory
name|directory
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|RandomIndexWriter
name|writer
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|directory
argument_list|,
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|numDocs
init|=
name|atLeast
argument_list|(
literal|50
argument_list|)
decl_stmt|;
name|int
name|totalDocsWithZero
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
name|i
operator|++
control|)
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|int
name|num
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
decl_stmt|;
if|if
condition|(
name|num
operator|==
literal|0
condition|)
block|{
name|totalDocsWithZero
operator|++
expr_stmt|;
block|}
name|doc
operator|.
name|add
argument_list|(
name|newTextField
argument_list|(
literal|"field"
argument_list|,
literal|""
operator|+
name|num
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
name|IndexReader
name|reader
init|=
name|writer
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
specifier|final
name|boolean
name|queryFirst
init|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
decl_stmt|;
name|IndexSearcher
name|searcher
init|=
name|newSearcher
argument_list|(
name|reader
argument_list|)
decl_stmt|;
name|Query
name|query
init|=
operator|new
name|FilteredQuery
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"0"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|Filter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|DocIdSet
name|getDocIdSet
parameter_list|(
specifier|final
name|AtomicReaderContext
name|context
parameter_list|,
name|Bits
name|acceptDocs
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|DocIdSet
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Bits
name|bits
parameter_list|()
throws|throws
name|IOException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|DocIdSetIterator
name|iterator
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|DocsEnum
name|termDocsEnum
init|=
name|context
operator|.
name|reader
argument_list|()
operator|.
name|termDocsEnum
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"0"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|termDocsEnum
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|new
name|DocIdSetIterator
argument_list|()
block|{
name|boolean
name|nextCalled
decl_stmt|;
name|boolean
name|advanceCalled
decl_stmt|;
annotation|@
name|Override
specifier|public
name|int
name|nextDoc
parameter_list|()
throws|throws
name|IOException
block|{
name|assertTrue
argument_list|(
literal|"queryFirst: "
operator|+
name|queryFirst
operator|+
literal|" advanced: "
operator|+
name|advanceCalled
operator|+
literal|" next: "
operator|+
name|nextCalled
argument_list|,
name|nextCalled
operator|||
name|advanceCalled
operator|^
operator|!
name|queryFirst
argument_list|)
expr_stmt|;
name|nextCalled
operator|=
literal|true
expr_stmt|;
return|return
name|termDocsEnum
operator|.
name|nextDoc
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|docID
parameter_list|()
block|{
return|return
name|termDocsEnum
operator|.
name|docID
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|advance
parameter_list|(
name|int
name|target
parameter_list|)
throws|throws
name|IOException
block|{
name|assertTrue
argument_list|(
literal|"queryFirst: "
operator|+
name|queryFirst
operator|+
literal|" advanced: "
operator|+
name|advanceCalled
operator|+
literal|" next: "
operator|+
name|nextCalled
argument_list|,
name|advanceCalled
operator|||
name|nextCalled
operator|^
name|queryFirst
argument_list|)
expr_stmt|;
name|advanceCalled
operator|=
literal|true
expr_stmt|;
return|return
name|termDocsEnum
operator|.
name|advance
argument_list|(
name|target
argument_list|)
return|;
block|}
block|}
return|;
block|}
block|}
return|;
block|}
block|}
argument_list|,
name|queryFirst
condition|?
name|FilteredQuery
operator|.
name|LEAP_FROG_QUERY_FIRST_STRATEGY
else|:
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
name|FilteredQuery
operator|.
name|RANDOM_ACCESS_FILTER_STRATEGY
else|:
name|FilteredQuery
operator|.
name|LEAP_FROG_FILTER_FIRST_STRATEGY
argument_list|)
decl_stmt|;
comment|// if filterFirst, we can use random here since bits are null
name|TopDocs
name|search
init|=
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|totalDocsWithZero
argument_list|,
name|search
operator|.
name|totalHits
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|close
argument_list|(
name|reader
argument_list|,
name|writer
argument_list|,
name|directory
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
