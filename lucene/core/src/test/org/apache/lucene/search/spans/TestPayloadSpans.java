begin_unit
begin_package
DECL|package|org.apache.lucene.search.spans
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|spans
package|;
end_package
begin_comment
comment|/**  * Copyright 2004 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Analyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|MockTokenizer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenFilter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Tokenizer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|PayloadAttribute
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|PositionIncrementAttribute
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|CharTermAttribute
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|TextField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|RandomIndexWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TermQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TopDocs
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|payloads
operator|.
name|PayloadHelper
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|payloads
operator|.
name|PayloadSpanUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|similarities
operator|.
name|DefaultSimilarity
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|similarities
operator|.
name|Similarity
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_class
DECL|class|TestPayloadSpans
specifier|public
class|class
name|TestPayloadSpans
extends|extends
name|LuceneTestCase
block|{
DECL|field|searcher
specifier|private
name|IndexSearcher
name|searcher
decl_stmt|;
DECL|field|similarity
specifier|private
name|Similarity
name|similarity
init|=
operator|new
name|DefaultSimilarity
argument_list|()
decl_stmt|;
DECL|field|indexReader
specifier|protected
name|IndexReader
name|indexReader
decl_stmt|;
DECL|field|closeIndexReader
specifier|private
name|IndexReader
name|closeIndexReader
decl_stmt|;
DECL|field|directory
specifier|private
name|Directory
name|directory
decl_stmt|;
annotation|@
name|Override
DECL|method|setUp
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|PayloadHelper
name|helper
init|=
operator|new
name|PayloadHelper
argument_list|()
decl_stmt|;
name|searcher
operator|=
name|helper
operator|.
name|setUp
argument_list|(
name|random
argument_list|()
argument_list|,
name|similarity
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|indexReader
operator|=
name|searcher
operator|.
name|getIndexReader
argument_list|()
expr_stmt|;
block|}
DECL|method|testSpanTermQuery
specifier|public
name|void
name|testSpanTermQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|SpanTermQuery
name|stq
decl_stmt|;
name|Spans
name|spans
decl_stmt|;
name|stq
operator|=
operator|new
name|SpanTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|PayloadHelper
operator|.
name|FIELD
argument_list|,
literal|"seventy"
argument_list|)
argument_list|)
expr_stmt|;
name|spans
operator|=
name|MultiSpansWrapper
operator|.
name|wrap
argument_list|(
name|indexReader
operator|.
name|getContext
argument_list|()
argument_list|,
name|stq
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"spans is null and it shouldn't be"
argument_list|,
name|spans
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|checkSpans
argument_list|(
name|spans
argument_list|,
literal|100
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|stq
operator|=
operator|new
name|SpanTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|PayloadHelper
operator|.
name|NO_PAYLOAD_FIELD
argument_list|,
literal|"seventy"
argument_list|)
argument_list|)
expr_stmt|;
name|spans
operator|=
name|MultiSpansWrapper
operator|.
name|wrap
argument_list|(
name|indexReader
operator|.
name|getContext
argument_list|()
argument_list|,
name|stq
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"spans is null and it shouldn't be"
argument_list|,
name|spans
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|checkSpans
argument_list|(
name|spans
argument_list|,
literal|100
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|testSpanFirst
specifier|public
name|void
name|testSpanFirst
parameter_list|()
throws|throws
name|IOException
block|{
name|SpanQuery
name|match
decl_stmt|;
name|SpanFirstQuery
name|sfq
decl_stmt|;
name|match
operator|=
operator|new
name|SpanTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|PayloadHelper
operator|.
name|FIELD
argument_list|,
literal|"one"
argument_list|)
argument_list|)
expr_stmt|;
name|sfq
operator|=
operator|new
name|SpanFirstQuery
argument_list|(
name|match
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|Spans
name|spans
init|=
name|MultiSpansWrapper
operator|.
name|wrap
argument_list|(
name|indexReader
operator|.
name|getContext
argument_list|()
argument_list|,
name|sfq
argument_list|)
decl_stmt|;
name|checkSpans
argument_list|(
name|spans
argument_list|,
literal|109
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|//Test more complicated subclause
name|SpanQuery
index|[]
name|clauses
init|=
operator|new
name|SpanQuery
index|[
literal|2
index|]
decl_stmt|;
name|clauses
index|[
literal|0
index|]
operator|=
operator|new
name|SpanTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|PayloadHelper
operator|.
name|FIELD
argument_list|,
literal|"one"
argument_list|)
argument_list|)
expr_stmt|;
name|clauses
index|[
literal|1
index|]
operator|=
operator|new
name|SpanTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|PayloadHelper
operator|.
name|FIELD
argument_list|,
literal|"hundred"
argument_list|)
argument_list|)
expr_stmt|;
name|match
operator|=
operator|new
name|SpanNearQuery
argument_list|(
name|clauses
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|sfq
operator|=
operator|new
name|SpanFirstQuery
argument_list|(
name|match
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|checkSpans
argument_list|(
name|MultiSpansWrapper
operator|.
name|wrap
argument_list|(
name|indexReader
operator|.
name|getContext
argument_list|()
argument_list|,
name|sfq
argument_list|)
argument_list|,
literal|100
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|match
operator|=
operator|new
name|SpanNearQuery
argument_list|(
name|clauses
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|sfq
operator|=
operator|new
name|SpanFirstQuery
argument_list|(
name|match
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|checkSpans
argument_list|(
name|MultiSpansWrapper
operator|.
name|wrap
argument_list|(
name|indexReader
operator|.
name|getContext
argument_list|()
argument_list|,
name|sfq
argument_list|)
argument_list|,
literal|100
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|method|testSpanNot
specifier|public
name|void
name|testSpanNot
parameter_list|()
throws|throws
name|Exception
block|{
name|SpanQuery
index|[]
name|clauses
init|=
operator|new
name|SpanQuery
index|[
literal|2
index|]
decl_stmt|;
name|clauses
index|[
literal|0
index|]
operator|=
operator|new
name|SpanTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|PayloadHelper
operator|.
name|FIELD
argument_list|,
literal|"one"
argument_list|)
argument_list|)
expr_stmt|;
name|clauses
index|[
literal|1
index|]
operator|=
operator|new
name|SpanTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|PayloadHelper
operator|.
name|FIELD
argument_list|,
literal|"three"
argument_list|)
argument_list|)
expr_stmt|;
name|SpanQuery
name|spq
init|=
operator|new
name|SpanNearQuery
argument_list|(
name|clauses
argument_list|,
literal|5
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|SpanNotQuery
name|snq
init|=
operator|new
name|SpanNotQuery
argument_list|(
name|spq
argument_list|,
operator|new
name|SpanTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|PayloadHelper
operator|.
name|FIELD
argument_list|,
literal|"two"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|Directory
name|directory
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|RandomIndexWriter
name|writer
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|directory
argument_list|,
name|newIndexWriterConfig
argument_list|(
operator|new
name|PayloadAnalyzer
argument_list|()
argument_list|)
operator|.
name|setSimilarity
argument_list|(
name|similarity
argument_list|)
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newTextField
argument_list|(
name|PayloadHelper
operator|.
name|FIELD
argument_list|,
literal|"one two three one four three"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|IndexReader
name|reader
init|=
name|writer
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|checkSpans
argument_list|(
name|MultiSpansWrapper
operator|.
name|wrap
argument_list|(
name|reader
operator|.
name|getContext
argument_list|()
argument_list|,
name|snq
argument_list|)
argument_list|,
literal|1
argument_list|,
operator|new
name|int
index|[]
block|{
literal|2
block|}
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|directory
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testNestedSpans
specifier|public
name|void
name|testNestedSpans
parameter_list|()
throws|throws
name|Exception
block|{
name|SpanTermQuery
name|stq
decl_stmt|;
name|Spans
name|spans
decl_stmt|;
name|IndexSearcher
name|searcher
init|=
name|getSearcher
argument_list|()
decl_stmt|;
name|stq
operator|=
operator|new
name|SpanTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|PayloadHelper
operator|.
name|FIELD
argument_list|,
literal|"mark"
argument_list|)
argument_list|)
expr_stmt|;
name|spans
operator|=
name|MultiSpansWrapper
operator|.
name|wrap
argument_list|(
name|searcher
operator|.
name|getTopReaderContext
argument_list|()
argument_list|,
name|stq
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"spans is null and it shouldn't be"
argument_list|,
name|spans
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|checkSpans
argument_list|(
name|spans
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|SpanQuery
index|[]
name|clauses
init|=
operator|new
name|SpanQuery
index|[
literal|3
index|]
decl_stmt|;
name|clauses
index|[
literal|0
index|]
operator|=
operator|new
name|SpanTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|PayloadHelper
operator|.
name|FIELD
argument_list|,
literal|"rr"
argument_list|)
argument_list|)
expr_stmt|;
name|clauses
index|[
literal|1
index|]
operator|=
operator|new
name|SpanTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|PayloadHelper
operator|.
name|FIELD
argument_list|,
literal|"yy"
argument_list|)
argument_list|)
expr_stmt|;
name|clauses
index|[
literal|2
index|]
operator|=
operator|new
name|SpanTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|PayloadHelper
operator|.
name|FIELD
argument_list|,
literal|"xx"
argument_list|)
argument_list|)
expr_stmt|;
name|SpanNearQuery
name|spanNearQuery
init|=
operator|new
name|SpanNearQuery
argument_list|(
name|clauses
argument_list|,
literal|12
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|spans
operator|=
name|MultiSpansWrapper
operator|.
name|wrap
argument_list|(
name|searcher
operator|.
name|getTopReaderContext
argument_list|()
argument_list|,
name|spanNearQuery
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"spans is null and it shouldn't be"
argument_list|,
name|spans
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|checkSpans
argument_list|(
name|spans
argument_list|,
literal|2
argument_list|,
operator|new
name|int
index|[]
block|{
literal|3
block|,
literal|3
block|}
argument_list|)
expr_stmt|;
name|clauses
index|[
literal|0
index|]
operator|=
operator|new
name|SpanTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|PayloadHelper
operator|.
name|FIELD
argument_list|,
literal|"xx"
argument_list|)
argument_list|)
expr_stmt|;
name|clauses
index|[
literal|1
index|]
operator|=
operator|new
name|SpanTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|PayloadHelper
operator|.
name|FIELD
argument_list|,
literal|"rr"
argument_list|)
argument_list|)
expr_stmt|;
name|clauses
index|[
literal|2
index|]
operator|=
operator|new
name|SpanTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|PayloadHelper
operator|.
name|FIELD
argument_list|,
literal|"yy"
argument_list|)
argument_list|)
expr_stmt|;
name|spanNearQuery
operator|=
operator|new
name|SpanNearQuery
argument_list|(
name|clauses
argument_list|,
literal|6
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|spans
operator|=
name|MultiSpansWrapper
operator|.
name|wrap
argument_list|(
name|searcher
operator|.
name|getTopReaderContext
argument_list|()
argument_list|,
name|spanNearQuery
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"spans is null and it shouldn't be"
argument_list|,
name|spans
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|checkSpans
argument_list|(
name|spans
argument_list|,
literal|1
argument_list|,
operator|new
name|int
index|[]
block|{
literal|3
block|}
argument_list|)
expr_stmt|;
name|clauses
operator|=
operator|new
name|SpanQuery
index|[
literal|2
index|]
expr_stmt|;
name|clauses
index|[
literal|0
index|]
operator|=
operator|new
name|SpanTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|PayloadHelper
operator|.
name|FIELD
argument_list|,
literal|"xx"
argument_list|)
argument_list|)
expr_stmt|;
name|clauses
index|[
literal|1
index|]
operator|=
operator|new
name|SpanTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|PayloadHelper
operator|.
name|FIELD
argument_list|,
literal|"rr"
argument_list|)
argument_list|)
expr_stmt|;
name|spanNearQuery
operator|=
operator|new
name|SpanNearQuery
argument_list|(
name|clauses
argument_list|,
literal|6
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// xx within 6 of rr
name|SpanQuery
index|[]
name|clauses2
init|=
operator|new
name|SpanQuery
index|[
literal|2
index|]
decl_stmt|;
name|clauses2
index|[
literal|0
index|]
operator|=
operator|new
name|SpanTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|PayloadHelper
operator|.
name|FIELD
argument_list|,
literal|"yy"
argument_list|)
argument_list|)
expr_stmt|;
name|clauses2
index|[
literal|1
index|]
operator|=
name|spanNearQuery
expr_stmt|;
name|SpanNearQuery
name|nestedSpanNearQuery
init|=
operator|new
name|SpanNearQuery
argument_list|(
name|clauses2
argument_list|,
literal|6
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// yy within 6 of xx within 6 of rr
name|spans
operator|=
name|MultiSpansWrapper
operator|.
name|wrap
argument_list|(
name|searcher
operator|.
name|getTopReaderContext
argument_list|()
argument_list|,
name|nestedSpanNearQuery
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"spans is null and it shouldn't be"
argument_list|,
name|spans
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|checkSpans
argument_list|(
name|spans
argument_list|,
literal|2
argument_list|,
operator|new
name|int
index|[]
block|{
literal|3
block|,
literal|3
block|}
argument_list|)
expr_stmt|;
name|closeIndexReader
operator|.
name|close
argument_list|()
expr_stmt|;
name|directory
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testFirstClauseWithoutPayload
specifier|public
name|void
name|testFirstClauseWithoutPayload
parameter_list|()
throws|throws
name|Exception
block|{
name|Spans
name|spans
decl_stmt|;
name|IndexSearcher
name|searcher
init|=
name|getSearcher
argument_list|()
decl_stmt|;
name|SpanQuery
index|[]
name|clauses
init|=
operator|new
name|SpanQuery
index|[
literal|3
index|]
decl_stmt|;
name|clauses
index|[
literal|0
index|]
operator|=
operator|new
name|SpanTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|PayloadHelper
operator|.
name|FIELD
argument_list|,
literal|"nopayload"
argument_list|)
argument_list|)
expr_stmt|;
name|clauses
index|[
literal|1
index|]
operator|=
operator|new
name|SpanTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|PayloadHelper
operator|.
name|FIELD
argument_list|,
literal|"qq"
argument_list|)
argument_list|)
expr_stmt|;
name|clauses
index|[
literal|2
index|]
operator|=
operator|new
name|SpanTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|PayloadHelper
operator|.
name|FIELD
argument_list|,
literal|"ss"
argument_list|)
argument_list|)
expr_stmt|;
name|SpanNearQuery
name|spanNearQuery
init|=
operator|new
name|SpanNearQuery
argument_list|(
name|clauses
argument_list|,
literal|6
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|SpanQuery
index|[]
name|clauses2
init|=
operator|new
name|SpanQuery
index|[
literal|2
index|]
decl_stmt|;
name|clauses2
index|[
literal|0
index|]
operator|=
operator|new
name|SpanTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|PayloadHelper
operator|.
name|FIELD
argument_list|,
literal|"pp"
argument_list|)
argument_list|)
expr_stmt|;
name|clauses2
index|[
literal|1
index|]
operator|=
name|spanNearQuery
expr_stmt|;
name|SpanNearQuery
name|snq
init|=
operator|new
name|SpanNearQuery
argument_list|(
name|clauses2
argument_list|,
literal|6
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|SpanQuery
index|[]
name|clauses3
init|=
operator|new
name|SpanQuery
index|[
literal|2
index|]
decl_stmt|;
name|clauses3
index|[
literal|0
index|]
operator|=
operator|new
name|SpanTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|PayloadHelper
operator|.
name|FIELD
argument_list|,
literal|"np"
argument_list|)
argument_list|)
expr_stmt|;
name|clauses3
index|[
literal|1
index|]
operator|=
name|snq
expr_stmt|;
name|SpanNearQuery
name|nestedSpanNearQuery
init|=
operator|new
name|SpanNearQuery
argument_list|(
name|clauses3
argument_list|,
literal|6
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|spans
operator|=
name|MultiSpansWrapper
operator|.
name|wrap
argument_list|(
name|searcher
operator|.
name|getTopReaderContext
argument_list|()
argument_list|,
name|nestedSpanNearQuery
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"spans is null and it shouldn't be"
argument_list|,
name|spans
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|checkSpans
argument_list|(
name|spans
argument_list|,
literal|1
argument_list|,
operator|new
name|int
index|[]
block|{
literal|3
block|}
argument_list|)
expr_stmt|;
name|closeIndexReader
operator|.
name|close
argument_list|()
expr_stmt|;
name|directory
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testHeavilyNestedSpanQuery
specifier|public
name|void
name|testHeavilyNestedSpanQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|Spans
name|spans
decl_stmt|;
name|IndexSearcher
name|searcher
init|=
name|getSearcher
argument_list|()
decl_stmt|;
name|SpanQuery
index|[]
name|clauses
init|=
operator|new
name|SpanQuery
index|[
literal|3
index|]
decl_stmt|;
name|clauses
index|[
literal|0
index|]
operator|=
operator|new
name|SpanTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|PayloadHelper
operator|.
name|FIELD
argument_list|,
literal|"one"
argument_list|)
argument_list|)
expr_stmt|;
name|clauses
index|[
literal|1
index|]
operator|=
operator|new
name|SpanTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|PayloadHelper
operator|.
name|FIELD
argument_list|,
literal|"two"
argument_list|)
argument_list|)
expr_stmt|;
name|clauses
index|[
literal|2
index|]
operator|=
operator|new
name|SpanTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|PayloadHelper
operator|.
name|FIELD
argument_list|,
literal|"three"
argument_list|)
argument_list|)
expr_stmt|;
name|SpanNearQuery
name|spanNearQuery
init|=
operator|new
name|SpanNearQuery
argument_list|(
name|clauses
argument_list|,
literal|5
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|clauses
operator|=
operator|new
name|SpanQuery
index|[
literal|3
index|]
expr_stmt|;
name|clauses
index|[
literal|0
index|]
operator|=
name|spanNearQuery
expr_stmt|;
name|clauses
index|[
literal|1
index|]
operator|=
operator|new
name|SpanTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|PayloadHelper
operator|.
name|FIELD
argument_list|,
literal|"five"
argument_list|)
argument_list|)
expr_stmt|;
name|clauses
index|[
literal|2
index|]
operator|=
operator|new
name|SpanTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|PayloadHelper
operator|.
name|FIELD
argument_list|,
literal|"six"
argument_list|)
argument_list|)
expr_stmt|;
name|SpanNearQuery
name|spanNearQuery2
init|=
operator|new
name|SpanNearQuery
argument_list|(
name|clauses
argument_list|,
literal|6
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|SpanQuery
index|[]
name|clauses2
init|=
operator|new
name|SpanQuery
index|[
literal|2
index|]
decl_stmt|;
name|clauses2
index|[
literal|0
index|]
operator|=
operator|new
name|SpanTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|PayloadHelper
operator|.
name|FIELD
argument_list|,
literal|"eleven"
argument_list|)
argument_list|)
expr_stmt|;
name|clauses2
index|[
literal|1
index|]
operator|=
operator|new
name|SpanTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|PayloadHelper
operator|.
name|FIELD
argument_list|,
literal|"ten"
argument_list|)
argument_list|)
expr_stmt|;
name|SpanNearQuery
name|spanNearQuery3
init|=
operator|new
name|SpanNearQuery
argument_list|(
name|clauses2
argument_list|,
literal|2
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|SpanQuery
index|[]
name|clauses3
init|=
operator|new
name|SpanQuery
index|[
literal|3
index|]
decl_stmt|;
name|clauses3
index|[
literal|0
index|]
operator|=
operator|new
name|SpanTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|PayloadHelper
operator|.
name|FIELD
argument_list|,
literal|"nine"
argument_list|)
argument_list|)
expr_stmt|;
name|clauses3
index|[
literal|1
index|]
operator|=
name|spanNearQuery2
expr_stmt|;
name|clauses3
index|[
literal|2
index|]
operator|=
name|spanNearQuery3
expr_stmt|;
name|SpanNearQuery
name|nestedSpanNearQuery
init|=
operator|new
name|SpanNearQuery
argument_list|(
name|clauses3
argument_list|,
literal|6
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|spans
operator|=
name|MultiSpansWrapper
operator|.
name|wrap
argument_list|(
name|searcher
operator|.
name|getTopReaderContext
argument_list|()
argument_list|,
name|nestedSpanNearQuery
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"spans is null and it shouldn't be"
argument_list|,
name|spans
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|checkSpans
argument_list|(
name|spans
argument_list|,
literal|2
argument_list|,
operator|new
name|int
index|[]
block|{
literal|8
block|,
literal|8
block|}
argument_list|)
expr_stmt|;
name|closeIndexReader
operator|.
name|close
argument_list|()
expr_stmt|;
name|directory
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testShrinkToAfterShortestMatch
specifier|public
name|void
name|testShrinkToAfterShortestMatch
parameter_list|()
throws|throws
name|IOException
block|{
name|Directory
name|directory
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|RandomIndexWriter
name|writer
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|directory
argument_list|,
name|newIndexWriterConfig
argument_list|(
operator|new
name|TestPayloadAnalyzer
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
literal|"content"
argument_list|,
operator|new
name|StringReader
argument_list|(
literal|"a b c d e f g h i j a k"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|IndexReader
name|reader
init|=
name|writer
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|IndexSearcher
name|is
init|=
name|newSearcher
argument_list|(
name|reader
argument_list|)
decl_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|SpanTermQuery
name|stq1
init|=
operator|new
name|SpanTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"content"
argument_list|,
literal|"a"
argument_list|)
argument_list|)
decl_stmt|;
name|SpanTermQuery
name|stq2
init|=
operator|new
name|SpanTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"content"
argument_list|,
literal|"k"
argument_list|)
argument_list|)
decl_stmt|;
name|SpanQuery
index|[]
name|sqs
init|=
block|{
name|stq1
block|,
name|stq2
block|}
decl_stmt|;
name|SpanNearQuery
name|snq
init|=
operator|new
name|SpanNearQuery
argument_list|(
name|sqs
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Spans
name|spans
init|=
name|MultiSpansWrapper
operator|.
name|wrap
argument_list|(
name|is
operator|.
name|getTopReaderContext
argument_list|()
argument_list|,
name|snq
argument_list|)
decl_stmt|;
name|TopDocs
name|topDocs
init|=
name|is
operator|.
name|search
argument_list|(
name|snq
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|payloadSet
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|topDocs
operator|.
name|scoreDocs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
while|while
condition|(
name|spans
operator|.
name|next
argument_list|()
condition|)
block|{
name|Collection
argument_list|<
name|byte
index|[]
argument_list|>
name|payloads
init|=
name|spans
operator|.
name|getPayload
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|byte
index|[]
name|payload
range|:
name|payloads
control|)
block|{
name|payloadSet
operator|.
name|add
argument_list|(
operator|new
name|String
argument_list|(
name|payload
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|payloadSet
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|payloadSet
operator|.
name|contains
argument_list|(
literal|"a:Noise:10"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|payloadSet
operator|.
name|contains
argument_list|(
literal|"k:Noise:11"
argument_list|)
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|directory
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testShrinkToAfterShortestMatch2
specifier|public
name|void
name|testShrinkToAfterShortestMatch2
parameter_list|()
throws|throws
name|IOException
block|{
name|Directory
name|directory
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|RandomIndexWriter
name|writer
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|directory
argument_list|,
name|newIndexWriterConfig
argument_list|(
operator|new
name|TestPayloadAnalyzer
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
literal|"content"
argument_list|,
operator|new
name|StringReader
argument_list|(
literal|"a b a d k f a h i k a k"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|IndexReader
name|reader
init|=
name|writer
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|IndexSearcher
name|is
init|=
name|newSearcher
argument_list|(
name|reader
argument_list|)
decl_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|SpanTermQuery
name|stq1
init|=
operator|new
name|SpanTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"content"
argument_list|,
literal|"a"
argument_list|)
argument_list|)
decl_stmt|;
name|SpanTermQuery
name|stq2
init|=
operator|new
name|SpanTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"content"
argument_list|,
literal|"k"
argument_list|)
argument_list|)
decl_stmt|;
name|SpanQuery
index|[]
name|sqs
init|=
block|{
name|stq1
block|,
name|stq2
block|}
decl_stmt|;
name|SpanNearQuery
name|snq
init|=
operator|new
name|SpanNearQuery
argument_list|(
name|sqs
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Spans
name|spans
init|=
name|MultiSpansWrapper
operator|.
name|wrap
argument_list|(
name|is
operator|.
name|getTopReaderContext
argument_list|()
argument_list|,
name|snq
argument_list|)
decl_stmt|;
name|TopDocs
name|topDocs
init|=
name|is
operator|.
name|search
argument_list|(
name|snq
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|payloadSet
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|topDocs
operator|.
name|scoreDocs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
while|while
condition|(
name|spans
operator|.
name|next
argument_list|()
condition|)
block|{
name|Collection
argument_list|<
name|byte
index|[]
argument_list|>
name|payloads
init|=
name|spans
operator|.
name|getPayload
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|byte
index|[]
name|payload
range|:
name|payloads
control|)
block|{
name|payloadSet
operator|.
name|add
argument_list|(
operator|new
name|String
argument_list|(
name|payload
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|payloadSet
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|payloadSet
operator|.
name|contains
argument_list|(
literal|"a:Noise:10"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|payloadSet
operator|.
name|contains
argument_list|(
literal|"k:Noise:11"
argument_list|)
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|directory
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testShrinkToAfterShortestMatch3
specifier|public
name|void
name|testShrinkToAfterShortestMatch3
parameter_list|()
throws|throws
name|IOException
block|{
name|Directory
name|directory
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|RandomIndexWriter
name|writer
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|directory
argument_list|,
name|newIndexWriterConfig
argument_list|(
operator|new
name|TestPayloadAnalyzer
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
literal|"content"
argument_list|,
operator|new
name|StringReader
argument_list|(
literal|"j k a l f k k p a t a k l k t a"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|IndexReader
name|reader
init|=
name|writer
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|IndexSearcher
name|is
init|=
name|newSearcher
argument_list|(
name|reader
argument_list|)
decl_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|SpanTermQuery
name|stq1
init|=
operator|new
name|SpanTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"content"
argument_list|,
literal|"a"
argument_list|)
argument_list|)
decl_stmt|;
name|SpanTermQuery
name|stq2
init|=
operator|new
name|SpanTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"content"
argument_list|,
literal|"k"
argument_list|)
argument_list|)
decl_stmt|;
name|SpanQuery
index|[]
name|sqs
init|=
block|{
name|stq1
block|,
name|stq2
block|}
decl_stmt|;
name|SpanNearQuery
name|snq
init|=
operator|new
name|SpanNearQuery
argument_list|(
name|sqs
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Spans
name|spans
init|=
name|MultiSpansWrapper
operator|.
name|wrap
argument_list|(
name|is
operator|.
name|getTopReaderContext
argument_list|()
argument_list|,
name|snq
argument_list|)
decl_stmt|;
name|TopDocs
name|topDocs
init|=
name|is
operator|.
name|search
argument_list|(
name|snq
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|payloadSet
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|topDocs
operator|.
name|scoreDocs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
while|while
condition|(
name|spans
operator|.
name|next
argument_list|()
condition|)
block|{
name|Collection
argument_list|<
name|byte
index|[]
argument_list|>
name|payloads
init|=
name|spans
operator|.
name|getPayload
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|byte
index|[]
name|payload
range|:
name|payloads
control|)
block|{
name|payloadSet
operator|.
name|add
argument_list|(
operator|new
name|String
argument_list|(
name|payload
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|payloadSet
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
for|for
control|(
specifier|final
name|String
name|payload
range|:
name|payloadSet
control|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"match:"
operator|+
name|payload
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|payloadSet
operator|.
name|contains
argument_list|(
literal|"a:Noise:10"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|payloadSet
operator|.
name|contains
argument_list|(
literal|"k:Noise:11"
argument_list|)
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|directory
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testPayloadSpanUtil
specifier|public
name|void
name|testPayloadSpanUtil
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|directory
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|RandomIndexWriter
name|writer
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|directory
argument_list|,
name|newIndexWriterConfig
argument_list|(
operator|new
name|PayloadAnalyzer
argument_list|()
argument_list|)
operator|.
name|setSimilarity
argument_list|(
name|similarity
argument_list|)
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newTextField
argument_list|(
name|PayloadHelper
operator|.
name|FIELD
argument_list|,
literal|"xx rr yy mm  pp"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|IndexReader
name|reader
init|=
name|writer
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|IndexSearcher
name|searcher
init|=
name|newSearcher
argument_list|(
name|reader
argument_list|)
decl_stmt|;
name|PayloadSpanUtil
name|psu
init|=
operator|new
name|PayloadSpanUtil
argument_list|(
name|searcher
operator|.
name|getTopReaderContext
argument_list|()
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|byte
index|[]
argument_list|>
name|payloads
init|=
name|psu
operator|.
name|getPayloadsForQuery
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|PayloadHelper
operator|.
name|FIELD
argument_list|,
literal|"rr"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Num payloads:"
operator|+
name|payloads
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|byte
index|[]
name|bytes
range|:
name|payloads
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
operator|new
name|String
argument_list|(
name|bytes
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|directory
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|checkSpans
specifier|private
name|void
name|checkSpans
parameter_list|(
name|Spans
name|spans
parameter_list|,
name|int
name|expectedNumSpans
parameter_list|,
name|int
name|expectedNumPayloads
parameter_list|,
name|int
name|expectedPayloadLength
parameter_list|,
name|int
name|expectedFirstByte
parameter_list|)
throws|throws
name|IOException
block|{
name|assertTrue
argument_list|(
literal|"spans is null and it shouldn't be"
argument_list|,
name|spans
operator|!=
literal|null
argument_list|)
expr_stmt|;
comment|//each position match should have a span associated with it, since there is just one underlying term query, there should
comment|//only be one entry in the span
name|int
name|seen
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|spans
operator|.
name|next
argument_list|()
operator|==
literal|true
condition|)
block|{
comment|//if we expect payloads, then isPayloadAvailable should be true
if|if
condition|(
name|expectedNumPayloads
operator|>
literal|0
condition|)
block|{
name|assertTrue
argument_list|(
literal|"isPayloadAvailable is not returning the correct value: "
operator|+
name|spans
operator|.
name|isPayloadAvailable
argument_list|()
operator|+
literal|" and it should be: "
operator|+
operator|(
name|expectedNumPayloads
operator|>
literal|0
operator|)
argument_list|,
name|spans
operator|.
name|isPayloadAvailable
argument_list|()
operator|==
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertTrue
argument_list|(
literal|"isPayloadAvailable should be false"
argument_list|,
name|spans
operator|.
name|isPayloadAvailable
argument_list|()
operator|==
literal|false
argument_list|)
expr_stmt|;
block|}
comment|//See payload helper, for the PayloadHelper.FIELD field, there is a single byte payload at every token
if|if
condition|(
name|spans
operator|.
name|isPayloadAvailable
argument_list|()
condition|)
block|{
name|Collection
argument_list|<
name|byte
index|[]
argument_list|>
name|payload
init|=
name|spans
operator|.
name|getPayload
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"payload Size: "
operator|+
name|payload
operator|.
name|size
argument_list|()
operator|+
literal|" is not: "
operator|+
name|expectedNumPayloads
argument_list|,
name|payload
operator|.
name|size
argument_list|()
operator|==
name|expectedNumPayloads
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|byte
index|[]
name|thePayload
range|:
name|payload
control|)
block|{
name|assertTrue
argument_list|(
literal|"payload[0] Size: "
operator|+
name|thePayload
operator|.
name|length
operator|+
literal|" is not: "
operator|+
name|expectedPayloadLength
argument_list|,
name|thePayload
operator|.
name|length
operator|==
name|expectedPayloadLength
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|thePayload
index|[
literal|0
index|]
operator|+
literal|" does not equal: "
operator|+
name|expectedFirstByte
argument_list|,
name|thePayload
index|[
literal|0
index|]
operator|==
name|expectedFirstByte
argument_list|)
expr_stmt|;
block|}
block|}
name|seen
operator|++
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|seen
operator|+
literal|" does not equal: "
operator|+
name|expectedNumSpans
argument_list|,
name|seen
operator|==
name|expectedNumSpans
argument_list|)
expr_stmt|;
block|}
DECL|method|getSearcher
specifier|private
name|IndexSearcher
name|getSearcher
parameter_list|()
throws|throws
name|Exception
block|{
name|directory
operator|=
name|newDirectory
argument_list|()
expr_stmt|;
name|String
index|[]
name|docs
init|=
operator|new
name|String
index|[]
block|{
literal|"xx rr yy mm  pp"
block|,
literal|"xx yy mm rr pp"
block|,
literal|"nopayload qq ss pp np"
block|,
literal|"one two three four five six seven eight nine ten eleven"
block|,
literal|"nine one two three four five six seven eight eleven ten"
block|}
decl_stmt|;
name|RandomIndexWriter
name|writer
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|directory
argument_list|,
name|newIndexWriterConfig
argument_list|(
operator|new
name|PayloadAnalyzer
argument_list|()
argument_list|)
operator|.
name|setSimilarity
argument_list|(
name|similarity
argument_list|)
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|docs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|String
name|docText
init|=
name|docs
index|[
name|i
index|]
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newTextField
argument_list|(
name|PayloadHelper
operator|.
name|FIELD
argument_list|,
name|docText
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
name|closeIndexReader
operator|=
name|writer
operator|.
name|getReader
argument_list|()
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|IndexSearcher
name|searcher
init|=
name|newSearcher
argument_list|(
name|closeIndexReader
argument_list|)
decl_stmt|;
return|return
name|searcher
return|;
block|}
DECL|method|checkSpans
specifier|private
name|void
name|checkSpans
parameter_list|(
name|Spans
name|spans
parameter_list|,
name|int
name|numSpans
parameter_list|,
name|int
index|[]
name|numPayloads
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|cnt
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|spans
operator|.
name|next
argument_list|()
operator|==
literal|true
condition|)
block|{
if|if
condition|(
name|VERBOSE
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\nSpans Dump --"
argument_list|)
expr_stmt|;
if|if
condition|(
name|spans
operator|.
name|isPayloadAvailable
argument_list|()
condition|)
block|{
name|Collection
argument_list|<
name|byte
index|[]
argument_list|>
name|payload
init|=
name|spans
operator|.
name|getPayload
argument_list|()
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"payloads for span:"
operator|+
name|payload
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|byte
index|[]
name|bytes
range|:
name|payload
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"doc:"
operator|+
name|spans
operator|.
name|doc
argument_list|()
operator|+
literal|" s:"
operator|+
name|spans
operator|.
name|start
argument_list|()
operator|+
literal|" e:"
operator|+
name|spans
operator|.
name|end
argument_list|()
operator|+
literal|" "
operator|+
operator|new
name|String
argument_list|(
name|bytes
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
name|numPayloads
index|[
name|cnt
index|]
argument_list|,
name|payload
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertFalse
argument_list|(
literal|"Expected spans:"
operator|+
name|numPayloads
index|[
name|cnt
index|]
operator|+
literal|" found: 0"
argument_list|,
name|numPayloads
operator|.
name|length
operator|>
literal|0
operator|&&
name|numPayloads
index|[
name|cnt
index|]
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
name|cnt
operator|++
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|numSpans
argument_list|,
name|cnt
argument_list|)
expr_stmt|;
block|}
DECL|class|PayloadAnalyzer
specifier|final
class|class
name|PayloadAnalyzer
extends|extends
name|Analyzer
block|{
annotation|@
name|Override
DECL|method|createComponents
specifier|public
name|TokenStreamComponents
name|createComponents
parameter_list|(
name|String
name|fieldName
parameter_list|)
block|{
name|Tokenizer
name|result
init|=
operator|new
name|MockTokenizer
argument_list|(
name|MockTokenizer
operator|.
name|SIMPLE
argument_list|,
literal|true
argument_list|)
decl_stmt|;
return|return
operator|new
name|TokenStreamComponents
argument_list|(
name|result
argument_list|,
operator|new
name|PayloadFilter
argument_list|(
name|result
argument_list|)
argument_list|)
return|;
block|}
block|}
DECL|class|PayloadFilter
specifier|final
class|class
name|PayloadFilter
extends|extends
name|TokenFilter
block|{
DECL|field|entities
name|Set
argument_list|<
name|String
argument_list|>
name|entities
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|nopayload
name|Set
argument_list|<
name|String
argument_list|>
name|nopayload
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|pos
name|int
name|pos
decl_stmt|;
DECL|field|payloadAtt
name|PayloadAttribute
name|payloadAtt
decl_stmt|;
DECL|field|termAtt
name|CharTermAttribute
name|termAtt
decl_stmt|;
DECL|field|posIncrAtt
name|PositionIncrementAttribute
name|posIncrAtt
decl_stmt|;
DECL|method|PayloadFilter
specifier|public
name|PayloadFilter
parameter_list|(
name|TokenStream
name|input
parameter_list|)
block|{
name|super
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|pos
operator|=
literal|0
expr_stmt|;
name|entities
operator|.
name|add
argument_list|(
literal|"xx"
argument_list|)
expr_stmt|;
name|entities
operator|.
name|add
argument_list|(
literal|"one"
argument_list|)
expr_stmt|;
name|nopayload
operator|.
name|add
argument_list|(
literal|"nopayload"
argument_list|)
expr_stmt|;
name|nopayload
operator|.
name|add
argument_list|(
literal|"np"
argument_list|)
expr_stmt|;
name|termAtt
operator|=
name|addAttribute
argument_list|(
name|CharTermAttribute
operator|.
name|class
argument_list|)
expr_stmt|;
name|posIncrAtt
operator|=
name|addAttribute
argument_list|(
name|PositionIncrementAttribute
operator|.
name|class
argument_list|)
expr_stmt|;
name|payloadAtt
operator|=
name|addAttribute
argument_list|(
name|PayloadAttribute
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|incrementToken
specifier|public
name|boolean
name|incrementToken
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|input
operator|.
name|incrementToken
argument_list|()
condition|)
block|{
name|String
name|token
init|=
name|termAtt
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|nopayload
operator|.
name|contains
argument_list|(
name|token
argument_list|)
condition|)
block|{
if|if
condition|(
name|entities
operator|.
name|contains
argument_list|(
name|token
argument_list|)
condition|)
block|{
name|payloadAtt
operator|.
name|setPayload
argument_list|(
operator|new
name|BytesRef
argument_list|(
name|token
operator|+
literal|":Entity:"
operator|+
name|pos
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|payloadAtt
operator|.
name|setPayload
argument_list|(
operator|new
name|BytesRef
argument_list|(
name|token
operator|+
literal|":Noise:"
operator|+
name|pos
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|pos
operator|+=
name|posIncrAtt
operator|.
name|getPositionIncrement
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|reset
specifier|public
name|void
name|reset
parameter_list|()
throws|throws
name|IOException
block|{
name|super
operator|.
name|reset
argument_list|()
expr_stmt|;
name|this
operator|.
name|pos
operator|=
literal|0
expr_stmt|;
block|}
block|}
DECL|class|TestPayloadAnalyzer
specifier|public
specifier|final
class|class
name|TestPayloadAnalyzer
extends|extends
name|Analyzer
block|{
annotation|@
name|Override
DECL|method|createComponents
specifier|public
name|TokenStreamComponents
name|createComponents
parameter_list|(
name|String
name|fieldName
parameter_list|)
block|{
name|Tokenizer
name|result
init|=
operator|new
name|MockTokenizer
argument_list|(
name|MockTokenizer
operator|.
name|SIMPLE
argument_list|,
literal|true
argument_list|)
decl_stmt|;
return|return
operator|new
name|TokenStreamComponents
argument_list|(
name|result
argument_list|,
operator|new
name|PayloadFilter
argument_list|(
name|result
argument_list|)
argument_list|)
return|;
block|}
block|}
block|}
end_class
end_unit
