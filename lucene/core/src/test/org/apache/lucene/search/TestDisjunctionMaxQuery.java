begin_unit
begin_package
DECL|package|org.apache.lucene.search
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DecimalFormat
import|;
end_import
begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DecimalFormatSymbols
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Analyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|MockAnalyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|FieldType
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|TextField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DirectoryReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|FieldInvertState
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriterConfig
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReaderContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|RandomIndexWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SlowCompositeReaderWrapper
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|StoredDocument
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|similarities
operator|.
name|DefaultSimilarity
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|similarities
operator|.
name|Similarity
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|spans
operator|.
name|SpanQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|spans
operator|.
name|SpanTermQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_comment
comment|/**  * Test of the DisjunctionMaxQuery.  *   */
end_comment
begin_class
DECL|class|TestDisjunctionMaxQuery
specifier|public
class|class
name|TestDisjunctionMaxQuery
extends|extends
name|LuceneTestCase
block|{
comment|/** threshold for comparing floats */
DECL|field|SCORE_COMP_THRESH
specifier|public
specifier|static
specifier|final
name|float
name|SCORE_COMP_THRESH
init|=
literal|0.0000f
decl_stmt|;
comment|/**    * Similarity to eliminate tf, idf and lengthNorm effects to isolate test    * case.    *     *<p>    * same as TestRankingSimilarity in TestRanking.zip from    * http://issues.apache.org/jira/browse/LUCENE-323    *</p>    */
DECL|class|TestSimilarity
specifier|private
specifier|static
class|class
name|TestSimilarity
extends|extends
name|DefaultSimilarity
block|{
DECL|method|TestSimilarity
specifier|public
name|TestSimilarity
parameter_list|()
block|{}
annotation|@
name|Override
DECL|method|tf
specifier|public
name|float
name|tf
parameter_list|(
name|float
name|freq
parameter_list|)
block|{
if|if
condition|(
name|freq
operator|>
literal|0.0f
condition|)
return|return
literal|1.0f
return|;
else|else
return|return
literal|0.0f
return|;
block|}
annotation|@
name|Override
DECL|method|lengthNorm
specifier|public
name|float
name|lengthNorm
parameter_list|(
name|FieldInvertState
name|state
parameter_list|)
block|{
comment|// Disable length norm
return|return
name|state
operator|.
name|getBoost
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|idf
specifier|public
name|float
name|idf
parameter_list|(
name|long
name|docFreq
parameter_list|,
name|long
name|numDocs
parameter_list|)
block|{
return|return
literal|1.0f
return|;
block|}
block|}
DECL|field|sim
specifier|public
name|Similarity
name|sim
init|=
operator|new
name|TestSimilarity
argument_list|()
decl_stmt|;
DECL|field|index
specifier|public
name|Directory
name|index
decl_stmt|;
DECL|field|r
specifier|public
name|IndexReader
name|r
decl_stmt|;
DECL|field|s
specifier|public
name|IndexSearcher
name|s
decl_stmt|;
DECL|field|nonAnalyzedType
specifier|private
specifier|static
specifier|final
name|FieldType
name|nonAnalyzedType
init|=
operator|new
name|FieldType
argument_list|(
name|TextField
operator|.
name|TYPE_STORED
argument_list|)
decl_stmt|;
static|static
block|{
name|nonAnalyzedType
operator|.
name|setTokenized
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setUp
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|index
operator|=
name|newDirectory
argument_list|()
expr_stmt|;
name|RandomIndexWriter
name|writer
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|index
argument_list|,
name|newIndexWriterConfig
argument_list|(
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setSimilarity
argument_list|(
name|sim
argument_list|)
operator|.
name|setMergePolicy
argument_list|(
name|newLogMergePolicy
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
comment|// hed is the most important field, dek is secondary
comment|// d1 is an "ok" match for: albino elephant
block|{
name|Document
name|d1
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|d1
operator|.
name|add
argument_list|(
name|newField
argument_list|(
literal|"id"
argument_list|,
literal|"d1"
argument_list|,
name|nonAnalyzedType
argument_list|)
argument_list|)
expr_stmt|;
comment|// Field.Keyword("id",
comment|// "d1"));
name|d1
operator|.
name|add
argument_list|(
name|newTextField
argument_list|(
literal|"hed"
argument_list|,
literal|"elephant"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|)
argument_list|)
expr_stmt|;
comment|// Field.Text("hed", "elephant"));
name|d1
operator|.
name|add
argument_list|(
name|newTextField
argument_list|(
literal|"dek"
argument_list|,
literal|"elephant"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|)
argument_list|)
expr_stmt|;
comment|// Field.Text("dek", "elephant"));
name|writer
operator|.
name|addDocument
argument_list|(
name|d1
argument_list|)
expr_stmt|;
block|}
comment|// d2 is a "good" match for: albino elephant
block|{
name|Document
name|d2
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|d2
operator|.
name|add
argument_list|(
name|newField
argument_list|(
literal|"id"
argument_list|,
literal|"d2"
argument_list|,
name|nonAnalyzedType
argument_list|)
argument_list|)
expr_stmt|;
comment|// Field.Keyword("id",
comment|// "d2"));
name|d2
operator|.
name|add
argument_list|(
name|newTextField
argument_list|(
literal|"hed"
argument_list|,
literal|"elephant"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|)
argument_list|)
expr_stmt|;
comment|// Field.Text("hed", "elephant"));
name|d2
operator|.
name|add
argument_list|(
name|newTextField
argument_list|(
literal|"dek"
argument_list|,
literal|"albino"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|)
argument_list|)
expr_stmt|;
comment|// Field.Text("dek",
comment|// "albino"));
name|d2
operator|.
name|add
argument_list|(
name|newTextField
argument_list|(
literal|"dek"
argument_list|,
literal|"elephant"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|)
argument_list|)
expr_stmt|;
comment|// Field.Text("dek", "elephant"));
name|writer
operator|.
name|addDocument
argument_list|(
name|d2
argument_list|)
expr_stmt|;
block|}
comment|// d3 is a "better" match for: albino elephant
block|{
name|Document
name|d3
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|d3
operator|.
name|add
argument_list|(
name|newField
argument_list|(
literal|"id"
argument_list|,
literal|"d3"
argument_list|,
name|nonAnalyzedType
argument_list|)
argument_list|)
expr_stmt|;
comment|// Field.Keyword("id",
comment|// "d3"));
name|d3
operator|.
name|add
argument_list|(
name|newTextField
argument_list|(
literal|"hed"
argument_list|,
literal|"albino"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|)
argument_list|)
expr_stmt|;
comment|// Field.Text("hed",
comment|// "albino"));
name|d3
operator|.
name|add
argument_list|(
name|newTextField
argument_list|(
literal|"hed"
argument_list|,
literal|"elephant"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|)
argument_list|)
expr_stmt|;
comment|// Field.Text("hed", "elephant"));
name|writer
operator|.
name|addDocument
argument_list|(
name|d3
argument_list|)
expr_stmt|;
block|}
comment|// d4 is the "best" match for: albino elephant
block|{
name|Document
name|d4
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|d4
operator|.
name|add
argument_list|(
name|newField
argument_list|(
literal|"id"
argument_list|,
literal|"d4"
argument_list|,
name|nonAnalyzedType
argument_list|)
argument_list|)
expr_stmt|;
comment|// Field.Keyword("id",
comment|// "d4"));
name|d4
operator|.
name|add
argument_list|(
name|newTextField
argument_list|(
literal|"hed"
argument_list|,
literal|"albino"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|)
argument_list|)
expr_stmt|;
comment|// Field.Text("hed",
comment|// "albino"));
name|d4
operator|.
name|add
argument_list|(
name|newField
argument_list|(
literal|"hed"
argument_list|,
literal|"elephant"
argument_list|,
name|nonAnalyzedType
argument_list|)
argument_list|)
expr_stmt|;
comment|// Field.Text("hed", "elephant"));
name|d4
operator|.
name|add
argument_list|(
name|newTextField
argument_list|(
literal|"dek"
argument_list|,
literal|"albino"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|)
argument_list|)
expr_stmt|;
comment|// Field.Text("dek",
comment|// "albino"));
name|writer
operator|.
name|addDocument
argument_list|(
name|d4
argument_list|)
expr_stmt|;
block|}
name|r
operator|=
name|SlowCompositeReaderWrapper
operator|.
name|wrap
argument_list|(
name|writer
operator|.
name|getReader
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|s
operator|=
name|newSearcher
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|s
operator|.
name|setSimilarity
argument_list|(
name|sim
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|tearDown
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
name|index
operator|.
name|close
argument_list|()
expr_stmt|;
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
DECL|method|testSkipToFirsttimeMiss
specifier|public
name|void
name|testSkipToFirsttimeMiss
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|DisjunctionMaxQuery
name|dq
init|=
operator|new
name|DisjunctionMaxQuery
argument_list|(
literal|0.0f
argument_list|)
decl_stmt|;
name|dq
operator|.
name|add
argument_list|(
name|tq
argument_list|(
literal|"id"
argument_list|,
literal|"d1"
argument_list|)
argument_list|)
expr_stmt|;
name|dq
operator|.
name|add
argument_list|(
name|tq
argument_list|(
literal|"dek"
argument_list|,
literal|"DOES_NOT_EXIST"
argument_list|)
argument_list|)
expr_stmt|;
name|QueryUtils
operator|.
name|check
argument_list|(
name|random
argument_list|()
argument_list|,
name|dq
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|s
operator|.
name|getTopReaderContext
argument_list|()
operator|instanceof
name|LeafReaderContext
argument_list|)
expr_stmt|;
specifier|final
name|Weight
name|dw
init|=
name|s
operator|.
name|createNormalizedWeight
argument_list|(
name|dq
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|LeafReaderContext
name|context
init|=
operator|(
name|LeafReaderContext
operator|)
name|s
operator|.
name|getTopReaderContext
argument_list|()
decl_stmt|;
specifier|final
name|Scorer
name|ds
init|=
name|dw
operator|.
name|scorer
argument_list|(
name|context
argument_list|,
name|context
operator|.
name|reader
argument_list|()
operator|.
name|getLiveDocs
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|skipOk
init|=
name|ds
operator|.
name|advance
argument_list|(
literal|3
argument_list|)
operator|!=
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
decl_stmt|;
if|if
condition|(
name|skipOk
condition|)
block|{
name|fail
argument_list|(
literal|"firsttime skipTo found a match? ... "
operator|+
name|r
operator|.
name|document
argument_list|(
name|ds
operator|.
name|docID
argument_list|()
argument_list|)
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testSkipToFirsttimeHit
specifier|public
name|void
name|testSkipToFirsttimeHit
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|DisjunctionMaxQuery
name|dq
init|=
operator|new
name|DisjunctionMaxQuery
argument_list|(
literal|0.0f
argument_list|)
decl_stmt|;
name|dq
operator|.
name|add
argument_list|(
name|tq
argument_list|(
literal|"dek"
argument_list|,
literal|"albino"
argument_list|)
argument_list|)
expr_stmt|;
name|dq
operator|.
name|add
argument_list|(
name|tq
argument_list|(
literal|"dek"
argument_list|,
literal|"DOES_NOT_EXIST"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|s
operator|.
name|getTopReaderContext
argument_list|()
operator|instanceof
name|LeafReaderContext
argument_list|)
expr_stmt|;
name|QueryUtils
operator|.
name|check
argument_list|(
name|random
argument_list|()
argument_list|,
name|dq
argument_list|,
name|s
argument_list|)
expr_stmt|;
specifier|final
name|Weight
name|dw
init|=
name|s
operator|.
name|createNormalizedWeight
argument_list|(
name|dq
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|LeafReaderContext
name|context
init|=
operator|(
name|LeafReaderContext
operator|)
name|s
operator|.
name|getTopReaderContext
argument_list|()
decl_stmt|;
specifier|final
name|Scorer
name|ds
init|=
name|dw
operator|.
name|scorer
argument_list|(
name|context
argument_list|,
name|context
operator|.
name|reader
argument_list|()
operator|.
name|getLiveDocs
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"firsttime skipTo found no match"
argument_list|,
name|ds
operator|.
name|advance
argument_list|(
literal|3
argument_list|)
operator|!=
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"found wrong docid"
argument_list|,
literal|"d4"
argument_list|,
name|r
operator|.
name|document
argument_list|(
name|ds
operator|.
name|docID
argument_list|()
argument_list|)
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testSimpleEqualScores1
specifier|public
name|void
name|testSimpleEqualScores1
parameter_list|()
throws|throws
name|Exception
block|{
name|DisjunctionMaxQuery
name|q
init|=
operator|new
name|DisjunctionMaxQuery
argument_list|(
literal|0.0f
argument_list|)
decl_stmt|;
name|q
operator|.
name|add
argument_list|(
name|tq
argument_list|(
literal|"hed"
argument_list|,
literal|"albino"
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|.
name|add
argument_list|(
name|tq
argument_list|(
literal|"hed"
argument_list|,
literal|"elephant"
argument_list|)
argument_list|)
expr_stmt|;
name|QueryUtils
operator|.
name|check
argument_list|(
name|random
argument_list|()
argument_list|,
name|q
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|ScoreDoc
index|[]
name|h
init|=
name|s
operator|.
name|search
argument_list|(
name|q
argument_list|,
literal|1000
argument_list|)
operator|.
name|scoreDocs
decl_stmt|;
try|try
block|{
name|assertEquals
argument_list|(
literal|"all docs should match "
operator|+
name|q
operator|.
name|toString
argument_list|()
argument_list|,
literal|4
argument_list|,
name|h
operator|.
name|length
argument_list|)
expr_stmt|;
name|float
name|score
init|=
name|h
index|[
literal|0
index|]
operator|.
name|score
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|h
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
literal|"score #"
operator|+
name|i
operator|+
literal|" is not the same"
argument_list|,
name|score
argument_list|,
name|h
index|[
name|i
index|]
operator|.
name|score
argument_list|,
name|SCORE_COMP_THRESH
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Error
name|e
parameter_list|)
block|{
name|printHits
argument_list|(
literal|"testSimpleEqualScores1"
argument_list|,
name|h
argument_list|,
name|s
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
DECL|method|testSimpleEqualScores2
specifier|public
name|void
name|testSimpleEqualScores2
parameter_list|()
throws|throws
name|Exception
block|{
name|DisjunctionMaxQuery
name|q
init|=
operator|new
name|DisjunctionMaxQuery
argument_list|(
literal|0.0f
argument_list|)
decl_stmt|;
name|q
operator|.
name|add
argument_list|(
name|tq
argument_list|(
literal|"dek"
argument_list|,
literal|"albino"
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|.
name|add
argument_list|(
name|tq
argument_list|(
literal|"dek"
argument_list|,
literal|"elephant"
argument_list|)
argument_list|)
expr_stmt|;
name|QueryUtils
operator|.
name|check
argument_list|(
name|random
argument_list|()
argument_list|,
name|q
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|ScoreDoc
index|[]
name|h
init|=
name|s
operator|.
name|search
argument_list|(
name|q
argument_list|,
literal|1000
argument_list|)
operator|.
name|scoreDocs
decl_stmt|;
try|try
block|{
name|assertEquals
argument_list|(
literal|"3 docs should match "
operator|+
name|q
operator|.
name|toString
argument_list|()
argument_list|,
literal|3
argument_list|,
name|h
operator|.
name|length
argument_list|)
expr_stmt|;
name|float
name|score
init|=
name|h
index|[
literal|0
index|]
operator|.
name|score
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|h
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
literal|"score #"
operator|+
name|i
operator|+
literal|" is not the same"
argument_list|,
name|score
argument_list|,
name|h
index|[
name|i
index|]
operator|.
name|score
argument_list|,
name|SCORE_COMP_THRESH
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Error
name|e
parameter_list|)
block|{
name|printHits
argument_list|(
literal|"testSimpleEqualScores2"
argument_list|,
name|h
argument_list|,
name|s
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
DECL|method|testSimpleEqualScores3
specifier|public
name|void
name|testSimpleEqualScores3
parameter_list|()
throws|throws
name|Exception
block|{
name|DisjunctionMaxQuery
name|q
init|=
operator|new
name|DisjunctionMaxQuery
argument_list|(
literal|0.0f
argument_list|)
decl_stmt|;
name|q
operator|.
name|add
argument_list|(
name|tq
argument_list|(
literal|"hed"
argument_list|,
literal|"albino"
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|.
name|add
argument_list|(
name|tq
argument_list|(
literal|"hed"
argument_list|,
literal|"elephant"
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|.
name|add
argument_list|(
name|tq
argument_list|(
literal|"dek"
argument_list|,
literal|"albino"
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|.
name|add
argument_list|(
name|tq
argument_list|(
literal|"dek"
argument_list|,
literal|"elephant"
argument_list|)
argument_list|)
expr_stmt|;
name|QueryUtils
operator|.
name|check
argument_list|(
name|random
argument_list|()
argument_list|,
name|q
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|ScoreDoc
index|[]
name|h
init|=
name|s
operator|.
name|search
argument_list|(
name|q
argument_list|,
literal|1000
argument_list|)
operator|.
name|scoreDocs
decl_stmt|;
try|try
block|{
name|assertEquals
argument_list|(
literal|"all docs should match "
operator|+
name|q
operator|.
name|toString
argument_list|()
argument_list|,
literal|4
argument_list|,
name|h
operator|.
name|length
argument_list|)
expr_stmt|;
name|float
name|score
init|=
name|h
index|[
literal|0
index|]
operator|.
name|score
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|h
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
literal|"score #"
operator|+
name|i
operator|+
literal|" is not the same"
argument_list|,
name|score
argument_list|,
name|h
index|[
name|i
index|]
operator|.
name|score
argument_list|,
name|SCORE_COMP_THRESH
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Error
name|e
parameter_list|)
block|{
name|printHits
argument_list|(
literal|"testSimpleEqualScores3"
argument_list|,
name|h
argument_list|,
name|s
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
DECL|method|testSimpleTiebreaker
specifier|public
name|void
name|testSimpleTiebreaker
parameter_list|()
throws|throws
name|Exception
block|{
name|DisjunctionMaxQuery
name|q
init|=
operator|new
name|DisjunctionMaxQuery
argument_list|(
literal|0.01f
argument_list|)
decl_stmt|;
name|q
operator|.
name|add
argument_list|(
name|tq
argument_list|(
literal|"dek"
argument_list|,
literal|"albino"
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|.
name|add
argument_list|(
name|tq
argument_list|(
literal|"dek"
argument_list|,
literal|"elephant"
argument_list|)
argument_list|)
expr_stmt|;
name|QueryUtils
operator|.
name|check
argument_list|(
name|random
argument_list|()
argument_list|,
name|q
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|ScoreDoc
index|[]
name|h
init|=
name|s
operator|.
name|search
argument_list|(
name|q
argument_list|,
literal|1000
argument_list|)
operator|.
name|scoreDocs
decl_stmt|;
try|try
block|{
name|assertEquals
argument_list|(
literal|"3 docs should match "
operator|+
name|q
operator|.
name|toString
argument_list|()
argument_list|,
literal|3
argument_list|,
name|h
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"wrong first"
argument_list|,
literal|"d2"
argument_list|,
name|s
operator|.
name|doc
argument_list|(
name|h
index|[
literal|0
index|]
operator|.
name|doc
argument_list|)
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
name|float
name|score0
init|=
name|h
index|[
literal|0
index|]
operator|.
name|score
decl_stmt|;
name|float
name|score1
init|=
name|h
index|[
literal|1
index|]
operator|.
name|score
decl_stmt|;
name|float
name|score2
init|=
name|h
index|[
literal|2
index|]
operator|.
name|score
decl_stmt|;
name|assertTrue
argument_list|(
literal|"d2 does not have better score then others: "
operator|+
name|score0
operator|+
literal|">? "
operator|+
name|score1
argument_list|,
name|score0
operator|>
name|score1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"d4 and d1 don't have equal scores"
argument_list|,
name|score1
argument_list|,
name|score2
argument_list|,
name|SCORE_COMP_THRESH
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Error
name|e
parameter_list|)
block|{
name|printHits
argument_list|(
literal|"testSimpleTiebreaker"
argument_list|,
name|h
argument_list|,
name|s
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
DECL|method|testBooleanRequiredEqualScores
specifier|public
name|void
name|testBooleanRequiredEqualScores
parameter_list|()
throws|throws
name|Exception
block|{
name|BooleanQuery
name|q
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
block|{
name|DisjunctionMaxQuery
name|q1
init|=
operator|new
name|DisjunctionMaxQuery
argument_list|(
literal|0.0f
argument_list|)
decl_stmt|;
name|q1
operator|.
name|add
argument_list|(
name|tq
argument_list|(
literal|"hed"
argument_list|,
literal|"albino"
argument_list|)
argument_list|)
expr_stmt|;
name|q1
operator|.
name|add
argument_list|(
name|tq
argument_list|(
literal|"dek"
argument_list|,
literal|"albino"
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|.
name|add
argument_list|(
name|q1
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
comment|// true,false);
name|QueryUtils
operator|.
name|check
argument_list|(
name|random
argument_list|()
argument_list|,
name|q1
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
block|{
name|DisjunctionMaxQuery
name|q2
init|=
operator|new
name|DisjunctionMaxQuery
argument_list|(
literal|0.0f
argument_list|)
decl_stmt|;
name|q2
operator|.
name|add
argument_list|(
name|tq
argument_list|(
literal|"hed"
argument_list|,
literal|"elephant"
argument_list|)
argument_list|)
expr_stmt|;
name|q2
operator|.
name|add
argument_list|(
name|tq
argument_list|(
literal|"dek"
argument_list|,
literal|"elephant"
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|.
name|add
argument_list|(
name|q2
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
comment|// true,false);
name|QueryUtils
operator|.
name|check
argument_list|(
name|random
argument_list|()
argument_list|,
name|q2
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
name|QueryUtils
operator|.
name|check
argument_list|(
name|random
argument_list|()
argument_list|,
name|q
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|ScoreDoc
index|[]
name|h
init|=
name|s
operator|.
name|search
argument_list|(
name|q
argument_list|,
literal|1000
argument_list|)
operator|.
name|scoreDocs
decl_stmt|;
try|try
block|{
name|assertEquals
argument_list|(
literal|"3 docs should match "
operator|+
name|q
operator|.
name|toString
argument_list|()
argument_list|,
literal|3
argument_list|,
name|h
operator|.
name|length
argument_list|)
expr_stmt|;
name|float
name|score
init|=
name|h
index|[
literal|0
index|]
operator|.
name|score
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|h
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
literal|"score #"
operator|+
name|i
operator|+
literal|" is not the same"
argument_list|,
name|score
argument_list|,
name|h
index|[
name|i
index|]
operator|.
name|score
argument_list|,
name|SCORE_COMP_THRESH
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Error
name|e
parameter_list|)
block|{
name|printHits
argument_list|(
literal|"testBooleanRequiredEqualScores1"
argument_list|,
name|h
argument_list|,
name|s
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
DECL|method|testBooleanOptionalNoTiebreaker
specifier|public
name|void
name|testBooleanOptionalNoTiebreaker
parameter_list|()
throws|throws
name|Exception
block|{
name|BooleanQuery
name|q
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
block|{
name|DisjunctionMaxQuery
name|q1
init|=
operator|new
name|DisjunctionMaxQuery
argument_list|(
literal|0.0f
argument_list|)
decl_stmt|;
name|q1
operator|.
name|add
argument_list|(
name|tq
argument_list|(
literal|"hed"
argument_list|,
literal|"albino"
argument_list|)
argument_list|)
expr_stmt|;
name|q1
operator|.
name|add
argument_list|(
name|tq
argument_list|(
literal|"dek"
argument_list|,
literal|"albino"
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|.
name|add
argument_list|(
name|q1
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
comment|// false,false);
block|}
block|{
name|DisjunctionMaxQuery
name|q2
init|=
operator|new
name|DisjunctionMaxQuery
argument_list|(
literal|0.0f
argument_list|)
decl_stmt|;
name|q2
operator|.
name|add
argument_list|(
name|tq
argument_list|(
literal|"hed"
argument_list|,
literal|"elephant"
argument_list|)
argument_list|)
expr_stmt|;
name|q2
operator|.
name|add
argument_list|(
name|tq
argument_list|(
literal|"dek"
argument_list|,
literal|"elephant"
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|.
name|add
argument_list|(
name|q2
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
comment|// false,false);
block|}
name|QueryUtils
operator|.
name|check
argument_list|(
name|random
argument_list|()
argument_list|,
name|q
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|ScoreDoc
index|[]
name|h
init|=
name|s
operator|.
name|search
argument_list|(
name|q
argument_list|,
literal|1000
argument_list|)
operator|.
name|scoreDocs
decl_stmt|;
try|try
block|{
name|assertEquals
argument_list|(
literal|"4 docs should match "
operator|+
name|q
operator|.
name|toString
argument_list|()
argument_list|,
literal|4
argument_list|,
name|h
operator|.
name|length
argument_list|)
expr_stmt|;
name|float
name|score
init|=
name|h
index|[
literal|0
index|]
operator|.
name|score
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|h
operator|.
name|length
operator|-
literal|1
condition|;
name|i
operator|++
control|)
block|{
comment|/* note: -1 */
name|assertEquals
argument_list|(
literal|"score #"
operator|+
name|i
operator|+
literal|" is not the same"
argument_list|,
name|score
argument_list|,
name|h
index|[
name|i
index|]
operator|.
name|score
argument_list|,
name|SCORE_COMP_THRESH
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"wrong last"
argument_list|,
literal|"d1"
argument_list|,
name|s
operator|.
name|doc
argument_list|(
name|h
index|[
name|h
operator|.
name|length
operator|-
literal|1
index|]
operator|.
name|doc
argument_list|)
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
name|float
name|score1
init|=
name|h
index|[
name|h
operator|.
name|length
operator|-
literal|1
index|]
operator|.
name|score
decl_stmt|;
name|assertTrue
argument_list|(
literal|"d1 does not have worse score then others: "
operator|+
name|score
operator|+
literal|">? "
operator|+
name|score1
argument_list|,
name|score
operator|>
name|score1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Error
name|e
parameter_list|)
block|{
name|printHits
argument_list|(
literal|"testBooleanOptionalNoTiebreaker"
argument_list|,
name|h
argument_list|,
name|s
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
DECL|method|testBooleanOptionalWithTiebreaker
specifier|public
name|void
name|testBooleanOptionalWithTiebreaker
parameter_list|()
throws|throws
name|Exception
block|{
name|BooleanQuery
name|q
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
block|{
name|DisjunctionMaxQuery
name|q1
init|=
operator|new
name|DisjunctionMaxQuery
argument_list|(
literal|0.01f
argument_list|)
decl_stmt|;
name|q1
operator|.
name|add
argument_list|(
name|tq
argument_list|(
literal|"hed"
argument_list|,
literal|"albino"
argument_list|)
argument_list|)
expr_stmt|;
name|q1
operator|.
name|add
argument_list|(
name|tq
argument_list|(
literal|"dek"
argument_list|,
literal|"albino"
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|.
name|add
argument_list|(
name|q1
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
comment|// false,false);
block|}
block|{
name|DisjunctionMaxQuery
name|q2
init|=
operator|new
name|DisjunctionMaxQuery
argument_list|(
literal|0.01f
argument_list|)
decl_stmt|;
name|q2
operator|.
name|add
argument_list|(
name|tq
argument_list|(
literal|"hed"
argument_list|,
literal|"elephant"
argument_list|)
argument_list|)
expr_stmt|;
name|q2
operator|.
name|add
argument_list|(
name|tq
argument_list|(
literal|"dek"
argument_list|,
literal|"elephant"
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|.
name|add
argument_list|(
name|q2
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
comment|// false,false);
block|}
name|QueryUtils
operator|.
name|check
argument_list|(
name|random
argument_list|()
argument_list|,
name|q
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|ScoreDoc
index|[]
name|h
init|=
name|s
operator|.
name|search
argument_list|(
name|q
argument_list|,
literal|1000
argument_list|)
operator|.
name|scoreDocs
decl_stmt|;
try|try
block|{
name|assertEquals
argument_list|(
literal|"4 docs should match "
operator|+
name|q
operator|.
name|toString
argument_list|()
argument_list|,
literal|4
argument_list|,
name|h
operator|.
name|length
argument_list|)
expr_stmt|;
name|float
name|score0
init|=
name|h
index|[
literal|0
index|]
operator|.
name|score
decl_stmt|;
name|float
name|score1
init|=
name|h
index|[
literal|1
index|]
operator|.
name|score
decl_stmt|;
name|float
name|score2
init|=
name|h
index|[
literal|2
index|]
operator|.
name|score
decl_stmt|;
name|float
name|score3
init|=
name|h
index|[
literal|3
index|]
operator|.
name|score
decl_stmt|;
name|String
name|doc0
init|=
name|s
operator|.
name|doc
argument_list|(
name|h
index|[
literal|0
index|]
operator|.
name|doc
argument_list|)
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
decl_stmt|;
name|String
name|doc1
init|=
name|s
operator|.
name|doc
argument_list|(
name|h
index|[
literal|1
index|]
operator|.
name|doc
argument_list|)
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
decl_stmt|;
name|String
name|doc2
init|=
name|s
operator|.
name|doc
argument_list|(
name|h
index|[
literal|2
index|]
operator|.
name|doc
argument_list|)
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
decl_stmt|;
name|String
name|doc3
init|=
name|s
operator|.
name|doc
argument_list|(
name|h
index|[
literal|3
index|]
operator|.
name|doc
argument_list|)
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"doc0 should be d2 or d4: "
operator|+
name|doc0
argument_list|,
name|doc0
operator|.
name|equals
argument_list|(
literal|"d2"
argument_list|)
operator|||
name|doc0
operator|.
name|equals
argument_list|(
literal|"d4"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"doc1 should be d2 or d4: "
operator|+
name|doc0
argument_list|,
name|doc1
operator|.
name|equals
argument_list|(
literal|"d2"
argument_list|)
operator|||
name|doc1
operator|.
name|equals
argument_list|(
literal|"d4"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"score0 and score1 should match"
argument_list|,
name|score0
argument_list|,
name|score1
argument_list|,
name|SCORE_COMP_THRESH
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"wrong third"
argument_list|,
literal|"d3"
argument_list|,
name|doc2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"d3 does not have worse score then d2 and d4: "
operator|+
name|score1
operator|+
literal|">? "
operator|+
name|score2
argument_list|,
name|score1
operator|>
name|score2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"wrong fourth"
argument_list|,
literal|"d1"
argument_list|,
name|doc3
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"d1 does not have worse score then d3: "
operator|+
name|score2
operator|+
literal|">? "
operator|+
name|score3
argument_list|,
name|score2
operator|>
name|score3
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Error
name|e
parameter_list|)
block|{
name|printHits
argument_list|(
literal|"testBooleanOptionalWithTiebreaker"
argument_list|,
name|h
argument_list|,
name|s
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
DECL|method|testBooleanOptionalWithTiebreakerAndBoost
specifier|public
name|void
name|testBooleanOptionalWithTiebreakerAndBoost
parameter_list|()
throws|throws
name|Exception
block|{
name|BooleanQuery
name|q
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
block|{
name|DisjunctionMaxQuery
name|q1
init|=
operator|new
name|DisjunctionMaxQuery
argument_list|(
literal|0.01f
argument_list|)
decl_stmt|;
name|q1
operator|.
name|add
argument_list|(
name|tq
argument_list|(
literal|"hed"
argument_list|,
literal|"albino"
argument_list|,
literal|1.5f
argument_list|)
argument_list|)
expr_stmt|;
name|q1
operator|.
name|add
argument_list|(
name|tq
argument_list|(
literal|"dek"
argument_list|,
literal|"albino"
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|.
name|add
argument_list|(
name|q1
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
comment|// false,false);
block|}
block|{
name|DisjunctionMaxQuery
name|q2
init|=
operator|new
name|DisjunctionMaxQuery
argument_list|(
literal|0.01f
argument_list|)
decl_stmt|;
name|q2
operator|.
name|add
argument_list|(
name|tq
argument_list|(
literal|"hed"
argument_list|,
literal|"elephant"
argument_list|,
literal|1.5f
argument_list|)
argument_list|)
expr_stmt|;
name|q2
operator|.
name|add
argument_list|(
name|tq
argument_list|(
literal|"dek"
argument_list|,
literal|"elephant"
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|.
name|add
argument_list|(
name|q2
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
comment|// false,false);
block|}
name|QueryUtils
operator|.
name|check
argument_list|(
name|random
argument_list|()
argument_list|,
name|q
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|ScoreDoc
index|[]
name|h
init|=
name|s
operator|.
name|search
argument_list|(
name|q
argument_list|,
literal|1000
argument_list|)
operator|.
name|scoreDocs
decl_stmt|;
try|try
block|{
name|assertEquals
argument_list|(
literal|"4 docs should match "
operator|+
name|q
operator|.
name|toString
argument_list|()
argument_list|,
literal|4
argument_list|,
name|h
operator|.
name|length
argument_list|)
expr_stmt|;
name|float
name|score0
init|=
name|h
index|[
literal|0
index|]
operator|.
name|score
decl_stmt|;
name|float
name|score1
init|=
name|h
index|[
literal|1
index|]
operator|.
name|score
decl_stmt|;
name|float
name|score2
init|=
name|h
index|[
literal|2
index|]
operator|.
name|score
decl_stmt|;
name|float
name|score3
init|=
name|h
index|[
literal|3
index|]
operator|.
name|score
decl_stmt|;
name|String
name|doc0
init|=
name|s
operator|.
name|doc
argument_list|(
name|h
index|[
literal|0
index|]
operator|.
name|doc
argument_list|)
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
decl_stmt|;
name|String
name|doc1
init|=
name|s
operator|.
name|doc
argument_list|(
name|h
index|[
literal|1
index|]
operator|.
name|doc
argument_list|)
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
decl_stmt|;
name|String
name|doc2
init|=
name|s
operator|.
name|doc
argument_list|(
name|h
index|[
literal|2
index|]
operator|.
name|doc
argument_list|)
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
decl_stmt|;
name|String
name|doc3
init|=
name|s
operator|.
name|doc
argument_list|(
name|h
index|[
literal|3
index|]
operator|.
name|doc
argument_list|)
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"doc0 should be d4: "
argument_list|,
literal|"d4"
argument_list|,
name|doc0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"doc1 should be d3: "
argument_list|,
literal|"d3"
argument_list|,
name|doc1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"doc2 should be d2: "
argument_list|,
literal|"d2"
argument_list|,
name|doc2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"doc3 should be d1: "
argument_list|,
literal|"d1"
argument_list|,
name|doc3
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"d4 does not have a better score then d3: "
operator|+
name|score0
operator|+
literal|">? "
operator|+
name|score1
argument_list|,
name|score0
operator|>
name|score1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"d3 does not have a better score then d2: "
operator|+
name|score1
operator|+
literal|">? "
operator|+
name|score2
argument_list|,
name|score1
operator|>
name|score2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"d3 does not have a better score then d1: "
operator|+
name|score2
operator|+
literal|">? "
operator|+
name|score3
argument_list|,
name|score2
operator|>
name|score3
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Error
name|e
parameter_list|)
block|{
name|printHits
argument_list|(
literal|"testBooleanOptionalWithTiebreakerAndBoost"
argument_list|,
name|h
argument_list|,
name|s
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
comment|// LUCENE-4477 / LUCENE-4401:
DECL|method|testBooleanSpanQuery
specifier|public
name|void
name|testBooleanSpanQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|hits
init|=
literal|0
decl_stmt|;
name|Directory
name|directory
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|Analyzer
name|indexerAnalyzer
init|=
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
decl_stmt|;
name|IndexWriterConfig
name|config
init|=
operator|new
name|IndexWriterConfig
argument_list|(
name|indexerAnalyzer
argument_list|)
decl_stmt|;
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|directory
argument_list|,
name|config
argument_list|)
decl_stmt|;
name|String
name|FIELD
init|=
literal|"content"
decl_stmt|;
name|Document
name|d
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|d
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
name|FIELD
argument_list|,
literal|"clockwork orange"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|IndexReader
name|indexReader
init|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|directory
argument_list|)
decl_stmt|;
name|IndexSearcher
name|searcher
init|=
name|newSearcher
argument_list|(
name|indexReader
argument_list|)
decl_stmt|;
name|DisjunctionMaxQuery
name|query
init|=
operator|new
name|DisjunctionMaxQuery
argument_list|(
literal|1.0f
argument_list|)
decl_stmt|;
name|SpanQuery
name|sq1
init|=
operator|new
name|SpanTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|FIELD
argument_list|,
literal|"clockwork"
argument_list|)
argument_list|)
decl_stmt|;
name|SpanQuery
name|sq2
init|=
operator|new
name|SpanTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|FIELD
argument_list|,
literal|"clckwork"
argument_list|)
argument_list|)
decl_stmt|;
name|query
operator|.
name|add
argument_list|(
name|sq1
argument_list|)
expr_stmt|;
name|query
operator|.
name|add
argument_list|(
name|sq2
argument_list|)
expr_stmt|;
name|TopScoreDocCollector
name|collector
init|=
name|TopScoreDocCollector
operator|.
name|create
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
name|collector
argument_list|)
expr_stmt|;
name|hits
operator|=
name|collector
operator|.
name|topDocs
argument_list|()
operator|.
name|scoreDocs
operator|.
name|length
expr_stmt|;
for|for
control|(
name|ScoreDoc
name|scoreDoc
range|:
name|collector
operator|.
name|topDocs
argument_list|()
operator|.
name|scoreDocs
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|scoreDoc
operator|.
name|doc
argument_list|)
expr_stmt|;
block|}
name|indexReader
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|hits
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|directory
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/** macro */
DECL|method|tq
specifier|protected
name|Query
name|tq
parameter_list|(
name|String
name|f
parameter_list|,
name|String
name|t
parameter_list|)
block|{
return|return
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|f
argument_list|,
name|t
argument_list|)
argument_list|)
return|;
block|}
comment|/** macro */
DECL|method|tq
specifier|protected
name|Query
name|tq
parameter_list|(
name|String
name|f
parameter_list|,
name|String
name|t
parameter_list|,
name|float
name|b
parameter_list|)
block|{
name|Query
name|q
init|=
name|tq
argument_list|(
name|f
argument_list|,
name|t
argument_list|)
decl_stmt|;
name|q
operator|.
name|setBoost
argument_list|(
name|b
argument_list|)
expr_stmt|;
return|return
name|q
return|;
block|}
DECL|method|printHits
specifier|protected
name|void
name|printHits
parameter_list|(
name|String
name|test
parameter_list|,
name|ScoreDoc
index|[]
name|h
parameter_list|,
name|IndexSearcher
name|searcher
parameter_list|)
throws|throws
name|Exception
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"------- "
operator|+
name|test
operator|+
literal|" -------"
argument_list|)
expr_stmt|;
name|DecimalFormat
name|f
init|=
operator|new
name|DecimalFormat
argument_list|(
literal|"0.000000000"
argument_list|,
name|DecimalFormatSymbols
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|h
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|StoredDocument
name|d
init|=
name|searcher
operator|.
name|doc
argument_list|(
name|h
index|[
name|i
index|]
operator|.
name|doc
argument_list|)
decl_stmt|;
name|float
name|score
init|=
name|h
index|[
name|i
index|]
operator|.
name|score
decl_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"#"
operator|+
name|i
operator|+
literal|": "
operator|+
name|f
operator|.
name|format
argument_list|(
name|score
argument_list|)
operator|+
literal|" - "
operator|+
name|d
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class
end_unit
