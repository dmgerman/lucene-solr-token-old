begin_unit
begin_package
DECL|package|org.apache.lucene.search
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Analyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|MockAnalyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|TextField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DirectoryReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexCommit
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexDocument
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriterConfig
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|KeepOnlyLastCommitDeletionPolicy
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|NoMergePolicy
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|RandomIndexWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SnapshotDeletionPolicy
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|ThreadedIndexingAndSearchingTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|TrackingIndexWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|NRTCachingDirectory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
operator|.
name|SuppressCodecs
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|ThreadInterruptedException
import|;
end_import
begin_class
annotation|@
name|SuppressCodecs
argument_list|(
block|{
literal|"SimpleText"
block|,
literal|"Memory"
block|,
literal|"Direct"
block|}
argument_list|)
DECL|class|TestControlledRealTimeReopenThread
specifier|public
class|class
name|TestControlledRealTimeReopenThread
extends|extends
name|ThreadedIndexingAndSearchingTestCase
block|{
comment|// Not guaranteed to reflect deletes:
DECL|field|nrtNoDeletes
specifier|private
name|SearcherManager
name|nrtNoDeletes
decl_stmt|;
comment|// Is guaranteed to reflect deletes:
DECL|field|nrtDeletes
specifier|private
name|SearcherManager
name|nrtDeletes
decl_stmt|;
DECL|field|genWriter
specifier|private
name|TrackingIndexWriter
name|genWriter
decl_stmt|;
DECL|field|nrtDeletesThread
specifier|private
name|ControlledRealTimeReopenThread
argument_list|<
name|IndexSearcher
argument_list|>
name|nrtDeletesThread
decl_stmt|;
DECL|field|nrtNoDeletesThread
specifier|private
name|ControlledRealTimeReopenThread
argument_list|<
name|IndexSearcher
argument_list|>
name|nrtNoDeletesThread
decl_stmt|;
DECL|field|lastGens
specifier|private
specifier|final
name|ThreadLocal
argument_list|<
name|Long
argument_list|>
name|lastGens
init|=
operator|new
name|ThreadLocal
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|warmCalled
specifier|private
name|boolean
name|warmCalled
decl_stmt|;
DECL|method|testControlledRealTimeReopenThread
specifier|public
name|void
name|testControlledRealTimeReopenThread
parameter_list|()
throws|throws
name|Exception
block|{
name|runTest
argument_list|(
literal|"TestControlledRealTimeReopenThread"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getFinalSearcher
specifier|protected
name|IndexSearcher
name|getFinalSearcher
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TEST: finalSearcher maxGen="
operator|+
name|maxGen
argument_list|)
expr_stmt|;
block|}
name|nrtDeletesThread
operator|.
name|waitForGeneration
argument_list|(
name|maxGen
argument_list|)
expr_stmt|;
return|return
name|nrtDeletes
operator|.
name|acquire
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getDirectory
specifier|protected
name|Directory
name|getDirectory
parameter_list|(
name|Directory
name|in
parameter_list|)
block|{
comment|// Randomly swap in NRTCachingDir
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TEST: wrap NRTCachingDir"
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|NRTCachingDirectory
argument_list|(
name|in
argument_list|,
literal|5.0
argument_list|,
literal|60.0
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|in
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|updateDocuments
specifier|protected
name|void
name|updateDocuments
parameter_list|(
name|Term
name|id
parameter_list|,
name|List
argument_list|<
name|?
extends|extends
name|IndexDocument
argument_list|>
name|docs
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|long
name|gen
init|=
name|genWriter
operator|.
name|updateDocuments
argument_list|(
name|id
argument_list|,
name|docs
argument_list|)
decl_stmt|;
comment|// Randomly verify the update "took":
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|20
argument_list|)
operator|==
literal|2
condition|)
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|": nrt: verify "
operator|+
name|id
argument_list|)
expr_stmt|;
block|}
name|nrtDeletesThread
operator|.
name|waitForGeneration
argument_list|(
name|gen
argument_list|)
expr_stmt|;
specifier|final
name|IndexSearcher
name|s
init|=
name|nrtDeletes
operator|.
name|acquire
argument_list|()
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|": nrt: got searcher="
operator|+
name|s
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|assertEquals
argument_list|(
name|docs
operator|.
name|size
argument_list|()
argument_list|,
name|s
operator|.
name|search
argument_list|(
operator|new
name|TermQuery
argument_list|(
name|id
argument_list|)
argument_list|,
literal|10
argument_list|)
operator|.
name|totalHits
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|nrtDeletes
operator|.
name|release
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
name|lastGens
operator|.
name|set
argument_list|(
name|gen
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|addDocuments
specifier|protected
name|void
name|addDocuments
parameter_list|(
name|Term
name|id
parameter_list|,
name|List
argument_list|<
name|?
extends|extends
name|IndexDocument
argument_list|>
name|docs
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|long
name|gen
init|=
name|genWriter
operator|.
name|addDocuments
argument_list|(
name|docs
argument_list|)
decl_stmt|;
comment|// Randomly verify the add "took":
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|20
argument_list|)
operator|==
literal|2
condition|)
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|": nrt: verify "
operator|+
name|id
argument_list|)
expr_stmt|;
block|}
name|nrtNoDeletesThread
operator|.
name|waitForGeneration
argument_list|(
name|gen
argument_list|)
expr_stmt|;
specifier|final
name|IndexSearcher
name|s
init|=
name|nrtNoDeletes
operator|.
name|acquire
argument_list|()
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|": nrt: got searcher="
operator|+
name|s
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|assertEquals
argument_list|(
name|docs
operator|.
name|size
argument_list|()
argument_list|,
name|s
operator|.
name|search
argument_list|(
operator|new
name|TermQuery
argument_list|(
name|id
argument_list|)
argument_list|,
literal|10
argument_list|)
operator|.
name|totalHits
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|nrtNoDeletes
operator|.
name|release
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
name|lastGens
operator|.
name|set
argument_list|(
name|gen
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|addDocument
specifier|protected
name|void
name|addDocument
parameter_list|(
name|Term
name|id
parameter_list|,
name|IndexDocument
name|doc
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|long
name|gen
init|=
name|genWriter
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
decl_stmt|;
comment|// Randomly verify the add "took":
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|20
argument_list|)
operator|==
literal|2
condition|)
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|": nrt: verify "
operator|+
name|id
argument_list|)
expr_stmt|;
block|}
name|nrtNoDeletesThread
operator|.
name|waitForGeneration
argument_list|(
name|gen
argument_list|)
expr_stmt|;
specifier|final
name|IndexSearcher
name|s
init|=
name|nrtNoDeletes
operator|.
name|acquire
argument_list|()
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|": nrt: got searcher="
operator|+
name|s
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|s
operator|.
name|search
argument_list|(
operator|new
name|TermQuery
argument_list|(
name|id
argument_list|)
argument_list|,
literal|10
argument_list|)
operator|.
name|totalHits
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|nrtNoDeletes
operator|.
name|release
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
name|lastGens
operator|.
name|set
argument_list|(
name|gen
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|updateDocument
specifier|protected
name|void
name|updateDocument
parameter_list|(
name|Term
name|id
parameter_list|,
name|IndexDocument
name|doc
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|long
name|gen
init|=
name|genWriter
operator|.
name|updateDocument
argument_list|(
name|id
argument_list|,
name|doc
argument_list|)
decl_stmt|;
comment|// Randomly verify the udpate "took":
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|20
argument_list|)
operator|==
literal|2
condition|)
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|": nrt: verify "
operator|+
name|id
argument_list|)
expr_stmt|;
block|}
name|nrtDeletesThread
operator|.
name|waitForGeneration
argument_list|(
name|gen
argument_list|)
expr_stmt|;
specifier|final
name|IndexSearcher
name|s
init|=
name|nrtDeletes
operator|.
name|acquire
argument_list|()
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|": nrt: got searcher="
operator|+
name|s
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|s
operator|.
name|search
argument_list|(
operator|new
name|TermQuery
argument_list|(
name|id
argument_list|)
argument_list|,
literal|10
argument_list|)
operator|.
name|totalHits
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|nrtDeletes
operator|.
name|release
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
name|lastGens
operator|.
name|set
argument_list|(
name|gen
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|deleteDocuments
specifier|protected
name|void
name|deleteDocuments
parameter_list|(
name|Term
name|id
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|long
name|gen
init|=
name|genWriter
operator|.
name|deleteDocuments
argument_list|(
name|id
argument_list|)
decl_stmt|;
comment|// randomly verify the delete "took":
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|20
argument_list|)
operator|==
literal|7
condition|)
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|": nrt: verify del "
operator|+
name|id
argument_list|)
expr_stmt|;
block|}
name|nrtDeletesThread
operator|.
name|waitForGeneration
argument_list|(
name|gen
argument_list|)
expr_stmt|;
specifier|final
name|IndexSearcher
name|s
init|=
name|nrtDeletes
operator|.
name|acquire
argument_list|()
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|": nrt: got searcher="
operator|+
name|s
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|s
operator|.
name|search
argument_list|(
operator|new
name|TermQuery
argument_list|(
name|id
argument_list|)
argument_list|,
literal|10
argument_list|)
operator|.
name|totalHits
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|nrtDeletes
operator|.
name|release
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
name|lastGens
operator|.
name|set
argument_list|(
name|gen
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doAfterWriter
specifier|protected
name|void
name|doAfterWriter
parameter_list|(
specifier|final
name|ExecutorService
name|es
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|double
name|minReopenSec
init|=
literal|0.01
operator|+
literal|0.05
operator|*
name|random
argument_list|()
operator|.
name|nextDouble
argument_list|()
decl_stmt|;
specifier|final
name|double
name|maxReopenSec
init|=
name|minReopenSec
operator|*
operator|(
literal|1.0
operator|+
literal|10
operator|*
name|random
argument_list|()
operator|.
name|nextDouble
argument_list|()
operator|)
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TEST: make SearcherManager maxReopenSec="
operator|+
name|maxReopenSec
operator|+
literal|" minReopenSec="
operator|+
name|minReopenSec
argument_list|)
expr_stmt|;
block|}
name|genWriter
operator|=
operator|new
name|TrackingIndexWriter
argument_list|(
name|writer
argument_list|)
expr_stmt|;
specifier|final
name|SearcherFactory
name|sf
init|=
operator|new
name|SearcherFactory
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|IndexSearcher
name|newSearcher
parameter_list|(
name|IndexReader
name|r
parameter_list|,
name|IndexReader
name|previous
parameter_list|)
throws|throws
name|IOException
block|{
name|TestControlledRealTimeReopenThread
operator|.
name|this
operator|.
name|warmCalled
operator|=
literal|true
expr_stmt|;
name|IndexSearcher
name|s
init|=
operator|new
name|IndexSearcher
argument_list|(
name|r
argument_list|,
name|es
argument_list|)
decl_stmt|;
name|s
operator|.
name|search
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"body"
argument_list|,
literal|"united"
argument_list|)
argument_list|)
argument_list|,
literal|10
argument_list|)
expr_stmt|;
return|return
name|s
return|;
block|}
block|}
decl_stmt|;
name|nrtNoDeletes
operator|=
operator|new
name|SearcherManager
argument_list|(
name|writer
argument_list|,
literal|false
argument_list|,
name|sf
argument_list|)
expr_stmt|;
name|nrtDeletes
operator|=
operator|new
name|SearcherManager
argument_list|(
name|writer
argument_list|,
literal|true
argument_list|,
name|sf
argument_list|)
expr_stmt|;
name|nrtDeletesThread
operator|=
operator|new
name|ControlledRealTimeReopenThread
argument_list|<>
argument_list|(
name|genWriter
argument_list|,
name|nrtDeletes
argument_list|,
name|maxReopenSec
argument_list|,
name|minReopenSec
argument_list|)
expr_stmt|;
name|nrtDeletesThread
operator|.
name|setName
argument_list|(
literal|"NRTDeletes Reopen Thread"
argument_list|)
expr_stmt|;
name|nrtDeletesThread
operator|.
name|setPriority
argument_list|(
name|Math
operator|.
name|min
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getPriority
argument_list|()
operator|+
literal|2
argument_list|,
name|Thread
operator|.
name|MAX_PRIORITY
argument_list|)
argument_list|)
expr_stmt|;
name|nrtDeletesThread
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|nrtDeletesThread
operator|.
name|start
argument_list|()
expr_stmt|;
name|nrtNoDeletesThread
operator|=
operator|new
name|ControlledRealTimeReopenThread
argument_list|<>
argument_list|(
name|genWriter
argument_list|,
name|nrtNoDeletes
argument_list|,
name|maxReopenSec
argument_list|,
name|minReopenSec
argument_list|)
expr_stmt|;
name|nrtNoDeletesThread
operator|.
name|setName
argument_list|(
literal|"NRTNoDeletes Reopen Thread"
argument_list|)
expr_stmt|;
name|nrtNoDeletesThread
operator|.
name|setPriority
argument_list|(
name|Math
operator|.
name|min
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getPriority
argument_list|()
operator|+
literal|2
argument_list|,
name|Thread
operator|.
name|MAX_PRIORITY
argument_list|)
argument_list|)
expr_stmt|;
name|nrtNoDeletesThread
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|nrtNoDeletesThread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doAfterIndexingThreadDone
specifier|protected
name|void
name|doAfterIndexingThreadDone
parameter_list|()
block|{
name|Long
name|gen
init|=
name|lastGens
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|gen
operator|!=
literal|null
condition|)
block|{
name|addMaxGen
argument_list|(
name|gen
argument_list|)
expr_stmt|;
block|}
block|}
DECL|field|maxGen
specifier|private
name|long
name|maxGen
init|=
operator|-
literal|1
decl_stmt|;
DECL|method|addMaxGen
specifier|private
specifier|synchronized
name|void
name|addMaxGen
parameter_list|(
name|long
name|gen
parameter_list|)
block|{
name|maxGen
operator|=
name|Math
operator|.
name|max
argument_list|(
name|gen
argument_list|,
name|maxGen
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doSearching
specifier|protected
name|void
name|doSearching
parameter_list|(
name|ExecutorService
name|es
parameter_list|,
name|long
name|stopTime
parameter_list|)
throws|throws
name|Exception
block|{
name|runSearchThreads
argument_list|(
name|stopTime
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getCurrentSearcher
specifier|protected
name|IndexSearcher
name|getCurrentSearcher
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Test doesn't assert deletions until the end, so we
comment|// can randomize whether dels must be applied
specifier|final
name|SearcherManager
name|nrt
decl_stmt|;
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|nrt
operator|=
name|nrtDeletes
expr_stmt|;
block|}
else|else
block|{
name|nrt
operator|=
name|nrtNoDeletes
expr_stmt|;
block|}
return|return
name|nrt
operator|.
name|acquire
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|releaseSearcher
specifier|protected
name|void
name|releaseSearcher
parameter_list|(
name|IndexSearcher
name|s
parameter_list|)
throws|throws
name|Exception
block|{
comment|// NOTE: a bit iffy... technically you should release
comment|// against the same SearcherManager you acquired from... but
comment|// both impls just decRef the underlying reader so we
comment|// can get away w/ cheating:
name|nrtNoDeletes
operator|.
name|release
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doClose
specifier|protected
name|void
name|doClose
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
name|warmCalled
argument_list|)
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TEST: now close SearcherManagers"
argument_list|)
expr_stmt|;
block|}
name|nrtDeletesThread
operator|.
name|close
argument_list|()
expr_stmt|;
name|nrtDeletes
operator|.
name|close
argument_list|()
expr_stmt|;
name|nrtNoDeletesThread
operator|.
name|close
argument_list|()
expr_stmt|;
name|nrtNoDeletes
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/*    * LUCENE-3528 - NRTManager hangs in certain situations     */
DECL|method|testThreadStarvationNoDeleteNRTReader
specifier|public
name|void
name|testThreadStarvationNoDeleteNRTReader
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|IndexWriterConfig
name|conf
init|=
name|newIndexWriterConfig
argument_list|(
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|conf
operator|.
name|setMergePolicy
argument_list|(
name|NoMergePolicy
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
name|Directory
name|d
init|=
name|newDirectory
argument_list|()
decl_stmt|;
specifier|final
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|CountDownLatch
name|signal
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|LatchedIndexWriter
name|_writer
init|=
operator|new
name|LatchedIndexWriter
argument_list|(
name|d
argument_list|,
name|conf
argument_list|,
name|latch
argument_list|,
name|signal
argument_list|)
decl_stmt|;
specifier|final
name|TrackingIndexWriter
name|writer
init|=
operator|new
name|TrackingIndexWriter
argument_list|(
name|_writer
argument_list|)
decl_stmt|;
specifier|final
name|SearcherManager
name|manager
init|=
operator|new
name|SearcherManager
argument_list|(
name|_writer
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newTextField
argument_list|(
literal|"test"
argument_list|,
literal|"test"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|manager
operator|.
name|maybeRefresh
argument_list|()
expr_stmt|;
name|Thread
name|t
init|=
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|signal
operator|.
name|await
argument_list|()
expr_stmt|;
name|manager
operator|.
name|maybeRefresh
argument_list|()
expr_stmt|;
name|writer
operator|.
name|deleteDocuments
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"foo"
argument_list|,
literal|"barista"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|manager
operator|.
name|maybeRefresh
argument_list|()
expr_stmt|;
comment|// kick off another reopen so we inc. the internal gen
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
comment|// let the add below finish
block|}
block|}
block|}
decl_stmt|;
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
name|_writer
operator|.
name|waitAfterUpdate
operator|=
literal|true
expr_stmt|;
comment|// wait in addDocument to let some reopens go through
specifier|final
name|long
name|lastGen
init|=
name|writer
operator|.
name|updateDocument
argument_list|(
operator|new
name|Term
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
argument_list|,
name|doc
argument_list|)
decl_stmt|;
comment|// once this returns the doc is already reflected in the last reopen
name|assertFalse
argument_list|(
name|manager
operator|.
name|isSearcherCurrent
argument_list|()
argument_list|)
expr_stmt|;
comment|// false since there is a delete in the queue
name|IndexSearcher
name|searcher
init|=
name|manager
operator|.
name|acquire
argument_list|()
decl_stmt|;
try|try
block|{
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|searcher
operator|.
name|getIndexReader
argument_list|()
operator|.
name|numDocs
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|manager
operator|.
name|release
argument_list|(
name|searcher
argument_list|)
expr_stmt|;
block|}
specifier|final
name|ControlledRealTimeReopenThread
argument_list|<
name|IndexSearcher
argument_list|>
name|thread
init|=
operator|new
name|ControlledRealTimeReopenThread
argument_list|<>
argument_list|(
name|writer
argument_list|,
name|manager
argument_list|,
literal|0.01
argument_list|,
literal|0.01
argument_list|)
decl_stmt|;
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// start reopening
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"waiting now for generation "
operator|+
name|lastGen
argument_list|)
expr_stmt|;
block|}
specifier|final
name|AtomicBoolean
name|finished
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|Thread
name|waiter
init|=
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|thread
operator|.
name|waitForGeneration
argument_list|(
name|lastGen
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ie
argument_list|)
throw|;
block|}
name|finished
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|waiter
operator|.
name|start
argument_list|()
expr_stmt|;
name|manager
operator|.
name|maybeRefresh
argument_list|()
expr_stmt|;
name|waiter
operator|.
name|join
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|finished
operator|.
name|get
argument_list|()
condition|)
block|{
name|waiter
operator|.
name|interrupt
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"thread deadlocked on waitForGeneration"
argument_list|)
expr_stmt|;
block|}
name|thread
operator|.
name|close
argument_list|()
expr_stmt|;
name|thread
operator|.
name|join
argument_list|()
expr_stmt|;
name|_writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|IOUtils
operator|.
name|close
argument_list|(
name|manager
argument_list|,
name|d
argument_list|)
expr_stmt|;
block|}
DECL|class|LatchedIndexWriter
specifier|public
specifier|static
class|class
name|LatchedIndexWriter
extends|extends
name|IndexWriter
block|{
DECL|field|latch
specifier|private
name|CountDownLatch
name|latch
decl_stmt|;
DECL|field|waitAfterUpdate
name|boolean
name|waitAfterUpdate
init|=
literal|false
decl_stmt|;
DECL|field|signal
specifier|private
name|CountDownLatch
name|signal
decl_stmt|;
DECL|method|LatchedIndexWriter
specifier|public
name|LatchedIndexWriter
parameter_list|(
name|Directory
name|d
parameter_list|,
name|IndexWriterConfig
name|conf
parameter_list|,
name|CountDownLatch
name|latch
parameter_list|,
name|CountDownLatch
name|signal
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|d
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|latch
operator|=
name|latch
expr_stmt|;
name|this
operator|.
name|signal
operator|=
name|signal
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|updateDocument
specifier|public
name|void
name|updateDocument
parameter_list|(
name|Term
name|term
parameter_list|,
name|IndexDocument
name|doc
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|updateDocument
argument_list|(
name|term
argument_list|,
name|doc
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
name|waitAfterUpdate
condition|)
block|{
name|signal
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|latch
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ThreadInterruptedException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
DECL|method|testEvilSearcherFactory
specifier|public
name|void
name|testEvilSearcherFactory
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
specifier|final
name|RandomIndexWriter
name|w
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|)
decl_stmt|;
name|w
operator|.
name|commit
argument_list|()
expr_stmt|;
specifier|final
name|IndexReader
name|other
init|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|dir
argument_list|)
decl_stmt|;
specifier|final
name|SearcherFactory
name|theEvilOne
init|=
operator|new
name|SearcherFactory
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|IndexSearcher
name|newSearcher
parameter_list|(
name|IndexReader
name|ignored
parameter_list|,
name|IndexReader
name|previous
parameter_list|)
block|{
return|return
name|LuceneTestCase
operator|.
name|newSearcher
argument_list|(
name|other
argument_list|)
return|;
block|}
block|}
decl_stmt|;
try|try
block|{
operator|new
name|SearcherManager
argument_list|(
name|w
operator|.
name|w
argument_list|,
literal|false
argument_list|,
name|theEvilOne
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"didn't hit expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|ise
parameter_list|)
block|{
comment|// expected
block|}
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|other
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testListenerCalled
specifier|public
name|void
name|testListenerCalled
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|iw
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
literal|null
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|AtomicBoolean
name|afterRefreshCalled
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|SearcherManager
name|sm
init|=
operator|new
name|SearcherManager
argument_list|(
name|iw
argument_list|,
literal|true
argument_list|,
operator|new
name|SearcherFactory
argument_list|()
argument_list|)
decl_stmt|;
name|sm
operator|.
name|addListener
argument_list|(
operator|new
name|ReferenceManager
operator|.
name|RefreshListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|beforeRefresh
parameter_list|()
block|{       }
annotation|@
name|Override
specifier|public
name|void
name|afterRefresh
parameter_list|(
name|boolean
name|didRefresh
parameter_list|)
block|{
if|if
condition|(
name|didRefresh
condition|)
block|{
name|afterRefreshCalled
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|iw
operator|.
name|addDocument
argument_list|(
operator|new
name|Document
argument_list|()
argument_list|)
expr_stmt|;
name|iw
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|afterRefreshCalled
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|sm
operator|.
name|maybeRefreshBlocking
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|afterRefreshCalled
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|sm
operator|.
name|close
argument_list|()
expr_stmt|;
name|iw
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// Relies on wall clock time, so it can easily false-fail when the machine is otherwise busy:
annotation|@
name|AwaitsFix
argument_list|(
name|bugUrl
operator|=
literal|"https://issues.apache.org/jira/browse/LUCENE-5737"
argument_list|)
comment|// LUCENE-5461
DECL|method|testCRTReopen
specifier|public
name|void
name|testCRTReopen
parameter_list|()
throws|throws
name|Exception
block|{
comment|//test behaving badly
comment|//should be high enough
name|int
name|maxStaleSecs
init|=
literal|20
decl_stmt|;
comment|//build crap data just to store it.
name|String
name|s
init|=
literal|"        abcdefghijklmnopqrstuvwxyz     "
decl_stmt|;
name|char
index|[]
name|chars
init|=
name|s
operator|.
name|toCharArray
argument_list|()
decl_stmt|;
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|(
literal|2048
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2048
condition|;
name|i
operator|++
control|)
block|{
name|builder
operator|.
name|append
argument_list|(
name|chars
index|[
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|chars
operator|.
name|length
argument_list|)
index|]
argument_list|)
expr_stmt|;
block|}
name|String
name|content
init|=
name|builder
operator|.
name|toString
argument_list|()
decl_stmt|;
specifier|final
name|SnapshotDeletionPolicy
name|sdp
init|=
operator|new
name|SnapshotDeletionPolicy
argument_list|(
operator|new
name|KeepOnlyLastCommitDeletionPolicy
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Directory
name|dir
init|=
operator|new
name|NRTCachingDirectory
argument_list|(
name|newFSDirectory
argument_list|(
name|createTempDir
argument_list|(
literal|"nrt"
argument_list|)
argument_list|)
argument_list|,
literal|5
argument_list|,
literal|128
argument_list|)
decl_stmt|;
name|IndexWriterConfig
name|config
init|=
operator|new
name|IndexWriterConfig
argument_list|(
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|config
operator|.
name|setCommitOnClose
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|config
operator|.
name|setIndexDeletionPolicy
argument_list|(
name|sdp
argument_list|)
expr_stmt|;
name|config
operator|.
name|setOpenMode
argument_list|(
name|IndexWriterConfig
operator|.
name|OpenMode
operator|.
name|CREATE_OR_APPEND
argument_list|)
expr_stmt|;
specifier|final
name|IndexWriter
name|iw
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|config
argument_list|)
decl_stmt|;
name|SearcherManager
name|sm
init|=
operator|new
name|SearcherManager
argument_list|(
name|iw
argument_list|,
literal|true
argument_list|,
operator|new
name|SearcherFactory
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|TrackingIndexWriter
name|tiw
init|=
operator|new
name|TrackingIndexWriter
argument_list|(
name|iw
argument_list|)
decl_stmt|;
name|ControlledRealTimeReopenThread
argument_list|<
name|IndexSearcher
argument_list|>
name|controlledRealTimeReopenThread
init|=
operator|new
name|ControlledRealTimeReopenThread
argument_list|<>
argument_list|(
name|tiw
argument_list|,
name|sm
argument_list|,
name|maxStaleSecs
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|controlledRealTimeReopenThread
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|controlledRealTimeReopenThread
operator|.
name|start
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|Thread
argument_list|>
name|commitThreads
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|500
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
operator|&&
name|i
operator|%
literal|50
operator|==
literal|0
condition|)
block|{
name|Thread
name|commitThread
init|=
operator|new
name|Thread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|iw
operator|.
name|commit
argument_list|()
expr_stmt|;
name|IndexCommit
name|ic
init|=
name|sdp
operator|.
name|snapshot
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|ic
operator|.
name|getFileNames
argument_list|()
control|)
block|{
comment|//distribute, and backup
comment|//System.out.println(names);
name|assertTrue
argument_list|(
name|slowFileExists
argument_list|(
name|dir
argument_list|,
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
argument_list|)
decl_stmt|;
name|commitThread
operator|.
name|start
argument_list|()
expr_stmt|;
name|commitThreads
operator|.
name|add
argument_list|(
name|commitThread
argument_list|)
expr_stmt|;
block|}
name|Document
name|d
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|d
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
literal|"count"
argument_list|,
name|i
operator|+
literal|""
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
literal|"content"
argument_list|,
name|content
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|long
name|l
init|=
name|tiw
operator|.
name|addDocument
argument_list|(
name|d
argument_list|)
decl_stmt|;
name|controlledRealTimeReopenThread
operator|.
name|waitForGeneration
argument_list|(
name|l
argument_list|)
expr_stmt|;
name|long
name|wait
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
decl_stmt|;
name|assertTrue
argument_list|(
literal|"waited too long for generation "
operator|+
name|wait
argument_list|,
name|wait
operator|<
operator|(
name|maxStaleSecs
operator|*
literal|1000
operator|)
argument_list|)
expr_stmt|;
name|IndexSearcher
name|searcher
init|=
name|sm
operator|.
name|acquire
argument_list|()
decl_stmt|;
name|TopDocs
name|td
init|=
name|searcher
operator|.
name|search
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"count"
argument_list|,
name|i
operator|+
literal|""
argument_list|)
argument_list|)
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|sm
operator|.
name|release
argument_list|(
name|searcher
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|td
operator|.
name|totalHits
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Thread
name|commitThread
range|:
name|commitThreads
control|)
block|{
name|commitThread
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
name|controlledRealTimeReopenThread
operator|.
name|close
argument_list|()
expr_stmt|;
name|sm
operator|.
name|close
argument_list|()
expr_stmt|;
name|iw
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class
end_unit
