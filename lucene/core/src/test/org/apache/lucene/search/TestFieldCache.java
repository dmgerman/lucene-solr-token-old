begin_unit
begin_package
DECL|package|org.apache.lucene.search
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
package|;
end_package
begin_comment
comment|/**  * Copyright 2004 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CyclicBarrier
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|MockAnalyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|BinaryDocValuesField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|DoubleField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
operator|.
name|Store
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|FloatField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|IntField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|LongField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|NumericDocValuesField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|SortedDocValuesField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|SortedSetDocValuesField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|StoredField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|AtomicReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|BinaryDocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DirectoryReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DocTermOrds
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriterConfig
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|RandomIndexWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SlowCompositeReaderWrapper
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SortedDocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SortedSetDocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Terms
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|TermsEnum
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|FieldCache
operator|.
name|Doubles
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|FieldCache
operator|.
name|Floats
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|FieldCache
operator|.
name|Ints
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|FieldCache
operator|.
name|Longs
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Bits
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|NumericUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|_TestUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import
begin_class
DECL|class|TestFieldCache
specifier|public
class|class
name|TestFieldCache
extends|extends
name|LuceneTestCase
block|{
DECL|field|reader
specifier|private
specifier|static
name|AtomicReader
name|reader
decl_stmt|;
DECL|field|NUM_DOCS
specifier|private
specifier|static
name|int
name|NUM_DOCS
decl_stmt|;
DECL|field|NUM_ORDS
specifier|private
specifier|static
name|int
name|NUM_ORDS
decl_stmt|;
DECL|field|unicodeStrings
specifier|private
specifier|static
name|String
index|[]
name|unicodeStrings
decl_stmt|;
DECL|field|multiValued
specifier|private
specifier|static
name|BytesRef
index|[]
index|[]
name|multiValued
decl_stmt|;
DECL|field|directory
specifier|private
specifier|static
name|Directory
name|directory
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|beforeClass
specifier|public
specifier|static
name|void
name|beforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|NUM_DOCS
operator|=
name|atLeast
argument_list|(
literal|500
argument_list|)
expr_stmt|;
name|NUM_ORDS
operator|=
name|atLeast
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|directory
operator|=
name|newDirectory
argument_list|()
expr_stmt|;
name|RandomIndexWriter
name|writer
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|directory
argument_list|,
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setMergePolicy
argument_list|(
name|newLogMergePolicy
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|long
name|theLong
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
name|double
name|theDouble
init|=
name|Double
operator|.
name|MAX_VALUE
decl_stmt|;
name|int
name|theInt
init|=
name|Integer
operator|.
name|MAX_VALUE
decl_stmt|;
name|float
name|theFloat
init|=
name|Float
operator|.
name|MAX_VALUE
decl_stmt|;
name|unicodeStrings
operator|=
operator|new
name|String
index|[
name|NUM_DOCS
index|]
expr_stmt|;
name|multiValued
operator|=
operator|new
name|BytesRef
index|[
name|NUM_DOCS
index|]
index|[
name|NUM_ORDS
index|]
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TEST: setUp"
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_DOCS
condition|;
name|i
operator|++
control|)
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|LongField
argument_list|(
literal|"theLong"
argument_list|,
name|theLong
operator|--
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|DoubleField
argument_list|(
literal|"theDouble"
argument_list|,
name|theDouble
operator|--
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|IntField
argument_list|(
literal|"theInt"
argument_list|,
name|theInt
operator|--
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|FloatField
argument_list|(
literal|"theFloat"
argument_list|,
name|theFloat
operator|--
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|%
literal|2
operator|==
literal|0
condition|)
block|{
name|doc
operator|.
name|add
argument_list|(
operator|new
name|IntField
argument_list|(
literal|"sparse"
argument_list|,
name|i
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|i
operator|%
literal|2
operator|==
literal|0
condition|)
block|{
name|doc
operator|.
name|add
argument_list|(
operator|new
name|IntField
argument_list|(
literal|"numInt"
argument_list|,
name|i
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// sometimes skip the field:
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|40
argument_list|)
operator|!=
literal|17
condition|)
block|{
name|unicodeStrings
index|[
name|i
index|]
operator|=
name|generateString
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newStringField
argument_list|(
literal|"theRandomUnicodeString"
argument_list|,
name|unicodeStrings
index|[
name|i
index|]
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// sometimes skip the field:
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
operator|!=
literal|8
condition|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|NUM_ORDS
condition|;
name|j
operator|++
control|)
block|{
name|String
name|newValue
init|=
name|generateString
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|multiValued
index|[
name|i
index|]
index|[
name|j
index|]
operator|=
operator|new
name|BytesRef
argument_list|(
name|newValue
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newStringField
argument_list|(
literal|"theRandomUnicodeMultiValuedField"
argument_list|,
name|newValue
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Arrays
operator|.
name|sort
argument_list|(
name|multiValued
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
name|IndexReader
name|r
init|=
name|writer
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|reader
operator|=
name|SlowCompositeReaderWrapper
operator|.
name|wrap
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|afterClass
specifier|public
specifier|static
name|void
name|afterClass
parameter_list|()
throws|throws
name|Exception
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|reader
operator|=
literal|null
expr_stmt|;
name|directory
operator|.
name|close
argument_list|()
expr_stmt|;
name|directory
operator|=
literal|null
expr_stmt|;
name|unicodeStrings
operator|=
literal|null
expr_stmt|;
name|multiValued
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|testInfoStream
specifier|public
name|void
name|testInfoStream
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|FieldCache
name|cache
init|=
name|FieldCache
operator|.
name|DEFAULT
decl_stmt|;
name|ByteArrayOutputStream
name|bos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|(
literal|1024
argument_list|)
decl_stmt|;
name|cache
operator|.
name|setInfoStream
argument_list|(
operator|new
name|PrintStream
argument_list|(
name|bos
argument_list|,
literal|false
argument_list|,
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
name|cache
operator|.
name|getDoubles
argument_list|(
name|reader
argument_list|,
literal|"theDouble"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|cache
operator|.
name|getFloats
argument_list|(
name|reader
argument_list|,
literal|"theDouble"
argument_list|,
operator|new
name|FieldCache
operator|.
name|FloatParser
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|TermsEnum
name|termsEnum
parameter_list|(
name|Terms
name|terms
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|NumericUtils
operator|.
name|filterPrefixCodedLongs
argument_list|(
name|terms
operator|.
name|iterator
argument_list|(
literal|null
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|float
name|parseFloat
parameter_list|(
name|BytesRef
name|term
parameter_list|)
block|{
return|return
name|NumericUtils
operator|.
name|sortableIntToFloat
argument_list|(
operator|(
name|int
operator|)
name|NumericUtils
operator|.
name|prefixCodedToLong
argument_list|(
name|term
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bos
operator|.
name|toString
argument_list|(
literal|"UTF-8"
argument_list|)
operator|.
name|indexOf
argument_list|(
literal|"WARNING"
argument_list|)
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|FieldCache
operator|.
name|DEFAULT
operator|.
name|purgeAllCaches
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|test
specifier|public
name|void
name|test
parameter_list|()
throws|throws
name|IOException
block|{
name|FieldCache
name|cache
init|=
name|FieldCache
operator|.
name|DEFAULT
decl_stmt|;
name|FieldCache
operator|.
name|Doubles
name|doubles
init|=
name|cache
operator|.
name|getDoubles
argument_list|(
name|reader
argument_list|,
literal|"theDouble"
argument_list|,
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
literal|"Second request to cache return same array"
argument_list|,
name|doubles
argument_list|,
name|cache
operator|.
name|getDoubles
argument_list|(
name|reader
argument_list|,
literal|"theDouble"
argument_list|,
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
literal|"Second request with explicit parser return same array"
argument_list|,
name|doubles
argument_list|,
name|cache
operator|.
name|getDoubles
argument_list|(
name|reader
argument_list|,
literal|"theDouble"
argument_list|,
name|FieldCache
operator|.
name|NUMERIC_UTILS_DOUBLE_PARSER
argument_list|,
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_DOCS
condition|;
name|i
operator|++
control|)
block|{
name|assertTrue
argument_list|(
name|doubles
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|+
literal|" does not equal: "
operator|+
operator|(
name|Double
operator|.
name|MAX_VALUE
operator|-
name|i
operator|)
argument_list|,
name|doubles
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|==
operator|(
name|Double
operator|.
name|MAX_VALUE
operator|-
name|i
operator|)
argument_list|)
expr_stmt|;
block|}
name|FieldCache
operator|.
name|Longs
name|longs
init|=
name|cache
operator|.
name|getLongs
argument_list|(
name|reader
argument_list|,
literal|"theLong"
argument_list|,
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
literal|"Second request to cache return same array"
argument_list|,
name|longs
argument_list|,
name|cache
operator|.
name|getLongs
argument_list|(
name|reader
argument_list|,
literal|"theLong"
argument_list|,
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
literal|"Second request with explicit parser return same array"
argument_list|,
name|longs
argument_list|,
name|cache
operator|.
name|getLongs
argument_list|(
name|reader
argument_list|,
literal|"theLong"
argument_list|,
name|FieldCache
operator|.
name|NUMERIC_UTILS_LONG_PARSER
argument_list|,
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_DOCS
condition|;
name|i
operator|++
control|)
block|{
name|assertTrue
argument_list|(
name|longs
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|+
literal|" does not equal: "
operator|+
operator|(
name|Long
operator|.
name|MAX_VALUE
operator|-
name|i
operator|)
operator|+
literal|" i="
operator|+
name|i
argument_list|,
name|longs
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|==
operator|(
name|Long
operator|.
name|MAX_VALUE
operator|-
name|i
operator|)
argument_list|)
expr_stmt|;
block|}
name|FieldCache
operator|.
name|Ints
name|ints
init|=
name|cache
operator|.
name|getInts
argument_list|(
name|reader
argument_list|,
literal|"theInt"
argument_list|,
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
literal|"Second request to cache return same array"
argument_list|,
name|ints
argument_list|,
name|cache
operator|.
name|getInts
argument_list|(
name|reader
argument_list|,
literal|"theInt"
argument_list|,
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
literal|"Second request with explicit parser return same array"
argument_list|,
name|ints
argument_list|,
name|cache
operator|.
name|getInts
argument_list|(
name|reader
argument_list|,
literal|"theInt"
argument_list|,
name|FieldCache
operator|.
name|NUMERIC_UTILS_INT_PARSER
argument_list|,
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_DOCS
condition|;
name|i
operator|++
control|)
block|{
name|assertTrue
argument_list|(
name|ints
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|+
literal|" does not equal: "
operator|+
operator|(
name|Integer
operator|.
name|MAX_VALUE
operator|-
name|i
operator|)
argument_list|,
name|ints
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|==
operator|(
name|Integer
operator|.
name|MAX_VALUE
operator|-
name|i
operator|)
argument_list|)
expr_stmt|;
block|}
name|FieldCache
operator|.
name|Floats
name|floats
init|=
name|cache
operator|.
name|getFloats
argument_list|(
name|reader
argument_list|,
literal|"theFloat"
argument_list|,
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
literal|"Second request to cache return same array"
argument_list|,
name|floats
argument_list|,
name|cache
operator|.
name|getFloats
argument_list|(
name|reader
argument_list|,
literal|"theFloat"
argument_list|,
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
literal|"Second request with explicit parser return same array"
argument_list|,
name|floats
argument_list|,
name|cache
operator|.
name|getFloats
argument_list|(
name|reader
argument_list|,
literal|"theFloat"
argument_list|,
name|FieldCache
operator|.
name|NUMERIC_UTILS_FLOAT_PARSER
argument_list|,
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_DOCS
condition|;
name|i
operator|++
control|)
block|{
name|assertTrue
argument_list|(
name|floats
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|+
literal|" does not equal: "
operator|+
operator|(
name|Float
operator|.
name|MAX_VALUE
operator|-
name|i
operator|)
argument_list|,
name|floats
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|==
operator|(
name|Float
operator|.
name|MAX_VALUE
operator|-
name|i
operator|)
argument_list|)
expr_stmt|;
block|}
name|Bits
name|docsWithField
init|=
name|cache
operator|.
name|getDocsWithField
argument_list|(
name|reader
argument_list|,
literal|"theLong"
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
literal|"Second request to cache return same array"
argument_list|,
name|docsWithField
argument_list|,
name|cache
operator|.
name|getDocsWithField
argument_list|(
name|reader
argument_list|,
literal|"theLong"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"docsWithField(theLong) must be class Bits.MatchAllBits"
argument_list|,
name|docsWithField
operator|instanceof
name|Bits
operator|.
name|MatchAllBits
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"docsWithField(theLong) Size: "
operator|+
name|docsWithField
operator|.
name|length
argument_list|()
operator|+
literal|" is not: "
operator|+
name|NUM_DOCS
argument_list|,
name|docsWithField
operator|.
name|length
argument_list|()
operator|==
name|NUM_DOCS
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|docsWithField
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|assertTrue
argument_list|(
name|docsWithField
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|docsWithField
operator|=
name|cache
operator|.
name|getDocsWithField
argument_list|(
name|reader
argument_list|,
literal|"sparse"
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
literal|"Second request to cache return same array"
argument_list|,
name|docsWithField
argument_list|,
name|cache
operator|.
name|getDocsWithField
argument_list|(
name|reader
argument_list|,
literal|"sparse"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"docsWithField(sparse) must not be class Bits.MatchAllBits"
argument_list|,
name|docsWithField
operator|instanceof
name|Bits
operator|.
name|MatchAllBits
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"docsWithField(sparse) Size: "
operator|+
name|docsWithField
operator|.
name|length
argument_list|()
operator|+
literal|" is not: "
operator|+
name|NUM_DOCS
argument_list|,
name|docsWithField
operator|.
name|length
argument_list|()
operator|==
name|NUM_DOCS
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|docsWithField
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|i
operator|%
literal|2
operator|==
literal|0
argument_list|,
name|docsWithField
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// getTermsIndex
name|SortedDocValues
name|termsIndex
init|=
name|cache
operator|.
name|getTermsIndex
argument_list|(
name|reader
argument_list|,
literal|"theRandomUnicodeString"
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
literal|"Second request to cache return same array"
argument_list|,
name|termsIndex
argument_list|,
name|cache
operator|.
name|getTermsIndex
argument_list|(
name|reader
argument_list|,
literal|"theRandomUnicodeString"
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|BytesRef
name|br
init|=
operator|new
name|BytesRef
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_DOCS
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|BytesRef
name|term
decl_stmt|;
specifier|final
name|int
name|ord
init|=
name|termsIndex
operator|.
name|getOrd
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|ord
operator|==
operator|-
literal|1
condition|)
block|{
name|term
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|termsIndex
operator|.
name|lookupOrd
argument_list|(
name|ord
argument_list|,
name|br
argument_list|)
expr_stmt|;
name|term
operator|=
name|br
expr_stmt|;
block|}
specifier|final
name|String
name|s
init|=
name|term
operator|==
literal|null
condition|?
literal|null
else|:
name|term
operator|.
name|utf8ToString
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"for doc "
operator|+
name|i
operator|+
literal|": "
operator|+
name|s
operator|+
literal|" does not equal: "
operator|+
name|unicodeStrings
index|[
name|i
index|]
argument_list|,
name|unicodeStrings
index|[
name|i
index|]
operator|==
literal|null
operator|||
name|unicodeStrings
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|int
name|nTerms
init|=
name|termsIndex
operator|.
name|getValueCount
argument_list|()
decl_stmt|;
name|TermsEnum
name|tenum
init|=
name|termsIndex
operator|.
name|termsEnum
argument_list|()
decl_stmt|;
name|BytesRef
name|val
init|=
operator|new
name|BytesRef
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nTerms
condition|;
name|i
operator|++
control|)
block|{
name|BytesRef
name|val1
init|=
name|tenum
operator|.
name|next
argument_list|()
decl_stmt|;
name|termsIndex
operator|.
name|lookupOrd
argument_list|(
name|i
argument_list|,
name|val
argument_list|)
expr_stmt|;
comment|// System.out.println("i="+i);
name|assertEquals
argument_list|(
name|val
argument_list|,
name|val1
argument_list|)
expr_stmt|;
block|}
comment|// seek the enum around (note this isn't a great test here)
name|int
name|num
init|=
name|atLeast
argument_list|(
literal|100
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|num
condition|;
name|i
operator|++
control|)
block|{
name|int
name|k
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|nTerms
argument_list|)
decl_stmt|;
name|termsIndex
operator|.
name|lookupOrd
argument_list|(
name|k
argument_list|,
name|val
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TermsEnum
operator|.
name|SeekStatus
operator|.
name|FOUND
argument_list|,
name|tenum
operator|.
name|seekCeil
argument_list|(
name|val
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|val
argument_list|,
name|tenum
operator|.
name|term
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nTerms
condition|;
name|i
operator|++
control|)
block|{
name|termsIndex
operator|.
name|lookupOrd
argument_list|(
name|i
argument_list|,
name|val
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TermsEnum
operator|.
name|SeekStatus
operator|.
name|FOUND
argument_list|,
name|tenum
operator|.
name|seekCeil
argument_list|(
name|val
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|val
argument_list|,
name|tenum
operator|.
name|term
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// test bad field
name|termsIndex
operator|=
name|cache
operator|.
name|getTermsIndex
argument_list|(
name|reader
argument_list|,
literal|"bogusfield"
argument_list|)
expr_stmt|;
comment|// getTerms
name|BinaryDocValues
name|terms
init|=
name|cache
operator|.
name|getTerms
argument_list|(
name|reader
argument_list|,
literal|"theRandomUnicodeString"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
literal|"Second request to cache return same array"
argument_list|,
name|terms
argument_list|,
name|cache
operator|.
name|getTerms
argument_list|(
name|reader
argument_list|,
literal|"theRandomUnicodeString"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|Bits
name|bits
init|=
name|cache
operator|.
name|getDocsWithField
argument_list|(
name|reader
argument_list|,
literal|"theRandomUnicodeString"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_DOCS
condition|;
name|i
operator|++
control|)
block|{
name|terms
operator|.
name|get
argument_list|(
name|i
argument_list|,
name|br
argument_list|)
expr_stmt|;
specifier|final
name|BytesRef
name|term
decl_stmt|;
if|if
condition|(
operator|!
name|bits
operator|.
name|get
argument_list|(
name|i
argument_list|)
condition|)
block|{
name|term
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|term
operator|=
name|br
expr_stmt|;
block|}
specifier|final
name|String
name|s
init|=
name|term
operator|==
literal|null
condition|?
literal|null
else|:
name|term
operator|.
name|utf8ToString
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"for doc "
operator|+
name|i
operator|+
literal|": "
operator|+
name|s
operator|+
literal|" does not equal: "
operator|+
name|unicodeStrings
index|[
name|i
index|]
argument_list|,
name|unicodeStrings
index|[
name|i
index|]
operator|==
literal|null
operator|||
name|unicodeStrings
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// test bad field
name|terms
operator|=
name|cache
operator|.
name|getTerms
argument_list|(
name|reader
argument_list|,
literal|"bogusfield"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// getDocTermOrds
name|SortedSetDocValues
name|termOrds
init|=
name|cache
operator|.
name|getDocTermOrds
argument_list|(
name|reader
argument_list|,
literal|"theRandomUnicodeMultiValuedField"
argument_list|)
decl_stmt|;
name|int
name|numEntries
init|=
name|cache
operator|.
name|getCacheEntries
argument_list|()
operator|.
name|length
decl_stmt|;
comment|// ask for it again, and check that we didnt create any additional entries:
name|termOrds
operator|=
name|cache
operator|.
name|getDocTermOrds
argument_list|(
name|reader
argument_list|,
literal|"theRandomUnicodeMultiValuedField"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|numEntries
argument_list|,
name|cache
operator|.
name|getCacheEntries
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_DOCS
condition|;
name|i
operator|++
control|)
block|{
name|termOrds
operator|.
name|setDocument
argument_list|(
name|i
argument_list|)
expr_stmt|;
comment|// This will remove identical terms. A DocTermOrds doesn't return duplicate ords for a docId
name|List
argument_list|<
name|BytesRef
argument_list|>
name|values
init|=
operator|new
name|ArrayList
argument_list|<
name|BytesRef
argument_list|>
argument_list|(
operator|new
name|LinkedHashSet
argument_list|<
name|BytesRef
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|multiValued
index|[
name|i
index|]
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|BytesRef
name|v
range|:
name|values
control|)
block|{
if|if
condition|(
name|v
operator|==
literal|null
condition|)
block|{
comment|// why does this test use null values... instead of an empty list: confusing
break|break;
block|}
name|long
name|ord
init|=
name|termOrds
operator|.
name|nextOrd
argument_list|()
decl_stmt|;
assert|assert
name|ord
operator|!=
name|SortedSetDocValues
operator|.
name|NO_MORE_ORDS
assert|;
name|BytesRef
name|scratch
init|=
operator|new
name|BytesRef
argument_list|()
decl_stmt|;
name|termOrds
operator|.
name|lookupOrd
argument_list|(
name|ord
argument_list|,
name|scratch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|v
argument_list|,
name|scratch
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|SortedSetDocValues
operator|.
name|NO_MORE_ORDS
argument_list|,
name|termOrds
operator|.
name|nextOrd
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// test bad field
name|termOrds
operator|=
name|cache
operator|.
name|getDocTermOrds
argument_list|(
name|reader
argument_list|,
literal|"bogusfield"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|termOrds
operator|.
name|getValueCount
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|FieldCache
operator|.
name|DEFAULT
operator|.
name|purge
argument_list|(
name|reader
argument_list|)
expr_stmt|;
block|}
DECL|method|testEmptyIndex
specifier|public
name|void
name|testEmptyIndex
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setMaxBufferedDocs
argument_list|(
literal|500
argument_list|)
argument_list|)
decl_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|IndexReader
name|r
init|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|dir
argument_list|)
decl_stmt|;
name|AtomicReader
name|reader
init|=
name|SlowCompositeReaderWrapper
operator|.
name|wrap
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|FieldCache
operator|.
name|DEFAULT
operator|.
name|getTerms
argument_list|(
name|reader
argument_list|,
literal|"foobar"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|FieldCache
operator|.
name|DEFAULT
operator|.
name|getTermsIndex
argument_list|(
name|reader
argument_list|,
literal|"foobar"
argument_list|)
expr_stmt|;
name|FieldCache
operator|.
name|DEFAULT
operator|.
name|purge
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|generateString
specifier|private
specifier|static
name|String
name|generateString
parameter_list|(
name|int
name|i
parameter_list|)
block|{
name|String
name|s
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|i
operator|>
literal|0
operator|&&
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|3
argument_list|)
operator|==
literal|1
condition|)
block|{
comment|// reuse past string -- try to find one that's not null
for|for
control|(
name|int
name|iter
init|=
literal|0
init|;
name|iter
operator|<
literal|10
operator|&&
name|s
operator|==
literal|null
condition|;
name|iter
operator|++
control|)
block|{
name|s
operator|=
name|unicodeStrings
index|[
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|i
argument_list|)
index|]
expr_stmt|;
block|}
if|if
condition|(
name|s
operator|==
literal|null
condition|)
block|{
name|s
operator|=
name|_TestUtil
operator|.
name|randomUnicodeString
argument_list|(
name|random
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|s
operator|=
name|_TestUtil
operator|.
name|randomUnicodeString
argument_list|(
name|random
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|s
return|;
block|}
DECL|method|testDocsWithField
specifier|public
name|void
name|testDocsWithField
parameter_list|()
throws|throws
name|Exception
block|{
name|FieldCache
name|cache
init|=
name|FieldCache
operator|.
name|DEFAULT
decl_stmt|;
name|cache
operator|.
name|purgeAllCaches
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cache
operator|.
name|getCacheEntries
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|cache
operator|.
name|getDoubles
argument_list|(
name|reader
argument_list|,
literal|"theDouble"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// The double[] takes two slots (one w/ null parser, one
comment|// w/ real parser), and docsWithField should also
comment|// have been populated:
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|cache
operator|.
name|getCacheEntries
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|Bits
name|bits
init|=
name|cache
operator|.
name|getDocsWithField
argument_list|(
name|reader
argument_list|,
literal|"theDouble"
argument_list|)
decl_stmt|;
comment|// No new entries should appear:
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|cache
operator|.
name|getCacheEntries
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bits
operator|instanceof
name|Bits
operator|.
name|MatchAllBits
argument_list|)
expr_stmt|;
name|FieldCache
operator|.
name|Ints
name|ints
init|=
name|cache
operator|.
name|getInts
argument_list|(
name|reader
argument_list|,
literal|"sparse"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|cache
operator|.
name|getCacheEntries
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|Bits
name|docsWithField
init|=
name|cache
operator|.
name|getDocsWithField
argument_list|(
name|reader
argument_list|,
literal|"sparse"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|cache
operator|.
name|getCacheEntries
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|docsWithField
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|%
literal|2
operator|==
literal|0
condition|)
block|{
name|assertTrue
argument_list|(
name|docsWithField
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|i
argument_list|,
name|ints
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertFalse
argument_list|(
name|docsWithField
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|FieldCache
operator|.
name|Ints
name|numInts
init|=
name|cache
operator|.
name|getInts
argument_list|(
name|reader
argument_list|,
literal|"numInt"
argument_list|,
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
argument_list|)
decl_stmt|;
name|docsWithField
operator|=
name|cache
operator|.
name|getDocsWithField
argument_list|(
name|reader
argument_list|,
literal|"numInt"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|docsWithField
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|%
literal|2
operator|==
literal|0
condition|)
block|{
name|assertTrue
argument_list|(
name|docsWithField
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|i
argument_list|,
name|numInts
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertFalse
argument_list|(
name|docsWithField
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testGetDocsWithFieldThreadSafety
specifier|public
name|void
name|testGetDocsWithFieldThreadSafety
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|FieldCache
name|cache
init|=
name|FieldCache
operator|.
name|DEFAULT
decl_stmt|;
name|cache
operator|.
name|purgeAllCaches
argument_list|()
expr_stmt|;
name|int
name|NUM_THREADS
init|=
literal|3
decl_stmt|;
name|Thread
index|[]
name|threads
init|=
operator|new
name|Thread
index|[
name|NUM_THREADS
index|]
decl_stmt|;
specifier|final
name|AtomicBoolean
name|failed
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
specifier|final
name|AtomicInteger
name|iters
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
specifier|final
name|int
name|NUM_ITER
init|=
literal|200
operator|*
name|RANDOM_MULTIPLIER
decl_stmt|;
specifier|final
name|CyclicBarrier
name|restart
init|=
operator|new
name|CyclicBarrier
argument_list|(
name|NUM_THREADS
argument_list|,
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|cache
operator|.
name|purgeAllCaches
argument_list|()
expr_stmt|;
name|iters
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|threadIDX
init|=
literal|0
init|;
name|threadIDX
operator|<
name|NUM_THREADS
condition|;
name|threadIDX
operator|++
control|)
block|{
name|threads
index|[
name|threadIDX
index|]
operator|=
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
while|while
condition|(
operator|!
name|failed
operator|.
name|get
argument_list|()
condition|)
block|{
specifier|final
name|int
name|op
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|3
argument_list|)
decl_stmt|;
if|if
condition|(
name|op
operator|==
literal|0
condition|)
block|{
comment|// Purge all caches& resume, once all
comment|// threads get here:
name|restart
operator|.
name|await
argument_list|()
expr_stmt|;
if|if
condition|(
name|iters
operator|.
name|get
argument_list|()
operator|>=
name|NUM_ITER
condition|)
block|{
break|break;
block|}
block|}
elseif|else
if|if
condition|(
name|op
operator|==
literal|1
condition|)
block|{
name|Bits
name|docsWithField
init|=
name|cache
operator|.
name|getDocsWithField
argument_list|(
name|reader
argument_list|,
literal|"sparse"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|docsWithField
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|i
operator|%
literal|2
operator|==
literal|0
argument_list|,
name|docsWithField
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|FieldCache
operator|.
name|Ints
name|ints
init|=
name|cache
operator|.
name|getInts
argument_list|(
name|reader
argument_list|,
literal|"sparse"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Bits
name|docsWithField
init|=
name|cache
operator|.
name|getDocsWithField
argument_list|(
name|reader
argument_list|,
literal|"sparse"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|docsWithField
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|%
literal|2
operator|==
literal|0
condition|)
block|{
name|assertTrue
argument_list|(
name|docsWithField
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|i
argument_list|,
name|ints
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertFalse
argument_list|(
name|docsWithField
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|failed
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|restart
operator|.
name|reset
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|t
argument_list|)
throw|;
block|}
block|}
block|}
expr_stmt|;
name|threads
index|[
name|threadIDX
index|]
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|int
name|threadIDX
init|=
literal|0
init|;
name|threadIDX
operator|<
name|NUM_THREADS
condition|;
name|threadIDX
operator|++
control|)
block|{
name|threads
index|[
name|threadIDX
index|]
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
name|assertFalse
argument_list|(
name|failed
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testDocValuesIntegration
specifier|public
name|void
name|testDocValuesIntegration
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriterConfig
name|iwc
init|=
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|RandomIndexWriter
name|iw
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|,
name|iwc
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|BinaryDocValuesField
argument_list|(
literal|"binary"
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"binary value"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|SortedDocValuesField
argument_list|(
literal|"sorted"
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"sorted value"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|NumericDocValuesField
argument_list|(
literal|"numeric"
argument_list|,
literal|42
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|defaultCodecSupportsSortedSet
argument_list|()
condition|)
block|{
name|doc
operator|.
name|add
argument_list|(
operator|new
name|SortedSetDocValuesField
argument_list|(
literal|"sortedset"
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"sortedset value1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|SortedSetDocValuesField
argument_list|(
literal|"sortedset"
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"sortedset value2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|iw
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|DirectoryReader
name|ir
init|=
name|iw
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|iw
operator|.
name|close
argument_list|()
expr_stmt|;
name|AtomicReader
name|ar
init|=
name|getOnlySegmentReader
argument_list|(
name|ir
argument_list|)
decl_stmt|;
name|BytesRef
name|scratch
init|=
operator|new
name|BytesRef
argument_list|()
decl_stmt|;
comment|// Binary type: can be retrieved via getTerms()
try|try
block|{
name|FieldCache
operator|.
name|DEFAULT
operator|.
name|getInts
argument_list|(
name|ar
argument_list|,
literal|"binary"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{}
name|BinaryDocValues
name|binary
init|=
name|FieldCache
operator|.
name|DEFAULT
operator|.
name|getTerms
argument_list|(
name|ar
argument_list|,
literal|"binary"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|binary
operator|.
name|get
argument_list|(
literal|0
argument_list|,
name|scratch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"binary value"
argument_list|,
name|scratch
operator|.
name|utf8ToString
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|FieldCache
operator|.
name|DEFAULT
operator|.
name|getTermsIndex
argument_list|(
name|ar
argument_list|,
literal|"binary"
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{}
try|try
block|{
name|FieldCache
operator|.
name|DEFAULT
operator|.
name|getDocTermOrds
argument_list|(
name|ar
argument_list|,
literal|"binary"
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{}
try|try
block|{
operator|new
name|DocTermOrds
argument_list|(
name|ar
argument_list|,
literal|null
argument_list|,
literal|"binary"
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{}
name|Bits
name|bits
init|=
name|FieldCache
operator|.
name|DEFAULT
operator|.
name|getDocsWithField
argument_list|(
name|ar
argument_list|,
literal|"binary"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|bits
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// Sorted type: can be retrieved via getTerms(), getTermsIndex(), getDocTermOrds()
try|try
block|{
name|FieldCache
operator|.
name|DEFAULT
operator|.
name|getInts
argument_list|(
name|ar
argument_list|,
literal|"sorted"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{}
try|try
block|{
operator|new
name|DocTermOrds
argument_list|(
name|ar
argument_list|,
literal|null
argument_list|,
literal|"sorted"
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{}
name|binary
operator|=
name|FieldCache
operator|.
name|DEFAULT
operator|.
name|getTerms
argument_list|(
name|ar
argument_list|,
literal|"sorted"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|binary
operator|.
name|get
argument_list|(
literal|0
argument_list|,
name|scratch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"sorted value"
argument_list|,
name|scratch
operator|.
name|utf8ToString
argument_list|()
argument_list|)
expr_stmt|;
name|SortedDocValues
name|sorted
init|=
name|FieldCache
operator|.
name|DEFAULT
operator|.
name|getTermsIndex
argument_list|(
name|ar
argument_list|,
literal|"sorted"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|sorted
operator|.
name|getOrd
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|sorted
operator|.
name|getValueCount
argument_list|()
argument_list|)
expr_stmt|;
name|sorted
operator|.
name|get
argument_list|(
literal|0
argument_list|,
name|scratch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"sorted value"
argument_list|,
name|scratch
operator|.
name|utf8ToString
argument_list|()
argument_list|)
expr_stmt|;
name|SortedSetDocValues
name|sortedSet
init|=
name|FieldCache
operator|.
name|DEFAULT
operator|.
name|getDocTermOrds
argument_list|(
name|ar
argument_list|,
literal|"sorted"
argument_list|)
decl_stmt|;
name|sortedSet
operator|.
name|setDocument
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|sortedSet
operator|.
name|nextOrd
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|SortedSetDocValues
operator|.
name|NO_MORE_ORDS
argument_list|,
name|sortedSet
operator|.
name|nextOrd
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|sortedSet
operator|.
name|getValueCount
argument_list|()
argument_list|)
expr_stmt|;
name|bits
operator|=
name|FieldCache
operator|.
name|DEFAULT
operator|.
name|getDocsWithField
argument_list|(
name|ar
argument_list|,
literal|"sorted"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bits
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// Numeric type: can be retrieved via getInts() and so on
name|Ints
name|numeric
init|=
name|FieldCache
operator|.
name|DEFAULT
operator|.
name|getInts
argument_list|(
name|ar
argument_list|,
literal|"numeric"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|42
argument_list|,
name|numeric
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|FieldCache
operator|.
name|DEFAULT
operator|.
name|getTerms
argument_list|(
name|ar
argument_list|,
literal|"numeric"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{}
try|try
block|{
name|FieldCache
operator|.
name|DEFAULT
operator|.
name|getTermsIndex
argument_list|(
name|ar
argument_list|,
literal|"numeric"
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{}
try|try
block|{
name|FieldCache
operator|.
name|DEFAULT
operator|.
name|getDocTermOrds
argument_list|(
name|ar
argument_list|,
literal|"numeric"
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{}
try|try
block|{
operator|new
name|DocTermOrds
argument_list|(
name|ar
argument_list|,
literal|null
argument_list|,
literal|"numeric"
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{}
name|bits
operator|=
name|FieldCache
operator|.
name|DEFAULT
operator|.
name|getDocsWithField
argument_list|(
name|ar
argument_list|,
literal|"numeric"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bits
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// SortedSet type: can be retrieved via getDocTermOrds()
if|if
condition|(
name|defaultCodecSupportsSortedSet
argument_list|()
condition|)
block|{
try|try
block|{
name|FieldCache
operator|.
name|DEFAULT
operator|.
name|getInts
argument_list|(
name|ar
argument_list|,
literal|"sortedset"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{}
try|try
block|{
name|FieldCache
operator|.
name|DEFAULT
operator|.
name|getTerms
argument_list|(
name|ar
argument_list|,
literal|"sortedset"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{}
try|try
block|{
name|FieldCache
operator|.
name|DEFAULT
operator|.
name|getTermsIndex
argument_list|(
name|ar
argument_list|,
literal|"sortedset"
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{}
try|try
block|{
operator|new
name|DocTermOrds
argument_list|(
name|ar
argument_list|,
literal|null
argument_list|,
literal|"sortedset"
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{}
name|sortedSet
operator|=
name|FieldCache
operator|.
name|DEFAULT
operator|.
name|getDocTermOrds
argument_list|(
name|ar
argument_list|,
literal|"sortedset"
argument_list|)
expr_stmt|;
name|sortedSet
operator|.
name|setDocument
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|sortedSet
operator|.
name|nextOrd
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|sortedSet
operator|.
name|nextOrd
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|SortedSetDocValues
operator|.
name|NO_MORE_ORDS
argument_list|,
name|sortedSet
operator|.
name|nextOrd
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|sortedSet
operator|.
name|getValueCount
argument_list|()
argument_list|)
expr_stmt|;
name|bits
operator|=
name|FieldCache
operator|.
name|DEFAULT
operator|.
name|getDocsWithField
argument_list|(
name|ar
argument_list|,
literal|"sortedset"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bits
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ir
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testNonexistantFields
specifier|public
name|void
name|testNonexistantFields
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|RandomIndexWriter
name|iw
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|iw
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|DirectoryReader
name|ir
init|=
name|iw
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|iw
operator|.
name|close
argument_list|()
expr_stmt|;
name|AtomicReader
name|ar
init|=
name|getOnlySegmentReader
argument_list|(
name|ir
argument_list|)
decl_stmt|;
specifier|final
name|FieldCache
name|cache
init|=
name|FieldCache
operator|.
name|DEFAULT
decl_stmt|;
name|cache
operator|.
name|purgeAllCaches
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cache
operator|.
name|getCacheEntries
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|Ints
name|ints
init|=
name|cache
operator|.
name|getInts
argument_list|(
name|ar
argument_list|,
literal|"bogusints"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ints
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Longs
name|longs
init|=
name|cache
operator|.
name|getLongs
argument_list|(
name|ar
argument_list|,
literal|"boguslongs"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|longs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Floats
name|floats
init|=
name|cache
operator|.
name|getFloats
argument_list|(
name|ar
argument_list|,
literal|"bogusfloats"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|floats
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|0.0f
argument_list|)
expr_stmt|;
name|Doubles
name|doubles
init|=
name|cache
operator|.
name|getDoubles
argument_list|(
name|ar
argument_list|,
literal|"bogusdoubles"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|doubles
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|0.0D
argument_list|)
expr_stmt|;
name|BytesRef
name|scratch
init|=
operator|new
name|BytesRef
argument_list|()
decl_stmt|;
name|BinaryDocValues
name|binaries
init|=
name|cache
operator|.
name|getTerms
argument_list|(
name|ar
argument_list|,
literal|"bogusterms"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|binaries
operator|.
name|get
argument_list|(
literal|0
argument_list|,
name|scratch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|scratch
operator|.
name|length
argument_list|)
expr_stmt|;
name|SortedDocValues
name|sorted
init|=
name|cache
operator|.
name|getTermsIndex
argument_list|(
name|ar
argument_list|,
literal|"bogustermsindex"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|sorted
operator|.
name|getOrd
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|sorted
operator|.
name|get
argument_list|(
literal|0
argument_list|,
name|scratch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|scratch
operator|.
name|length
argument_list|)
expr_stmt|;
name|SortedSetDocValues
name|sortedSet
init|=
name|cache
operator|.
name|getDocTermOrds
argument_list|(
name|ar
argument_list|,
literal|"bogusmultivalued"
argument_list|)
decl_stmt|;
name|sortedSet
operator|.
name|setDocument
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|SortedSetDocValues
operator|.
name|NO_MORE_ORDS
argument_list|,
name|sortedSet
operator|.
name|nextOrd
argument_list|()
argument_list|)
expr_stmt|;
name|Bits
name|bits
init|=
name|cache
operator|.
name|getDocsWithField
argument_list|(
name|ar
argument_list|,
literal|"bogusbits"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|bits
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// check that we cached nothing
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cache
operator|.
name|getCacheEntries
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|ir
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testNonIndexedFields
specifier|public
name|void
name|testNonIndexedFields
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|RandomIndexWriter
name|iw
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|StoredField
argument_list|(
literal|"bogusbytes"
argument_list|,
literal|"bogus"
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|StoredField
argument_list|(
literal|"bogusshorts"
argument_list|,
literal|"bogus"
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|StoredField
argument_list|(
literal|"bogusints"
argument_list|,
literal|"bogus"
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|StoredField
argument_list|(
literal|"boguslongs"
argument_list|,
literal|"bogus"
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|StoredField
argument_list|(
literal|"bogusfloats"
argument_list|,
literal|"bogus"
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|StoredField
argument_list|(
literal|"bogusdoubles"
argument_list|,
literal|"bogus"
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|StoredField
argument_list|(
literal|"bogusterms"
argument_list|,
literal|"bogus"
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|StoredField
argument_list|(
literal|"bogustermsindex"
argument_list|,
literal|"bogus"
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|StoredField
argument_list|(
literal|"bogusmultivalued"
argument_list|,
literal|"bogus"
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|StoredField
argument_list|(
literal|"bogusbits"
argument_list|,
literal|"bogus"
argument_list|)
argument_list|)
expr_stmt|;
name|iw
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|DirectoryReader
name|ir
init|=
name|iw
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|iw
operator|.
name|close
argument_list|()
expr_stmt|;
name|AtomicReader
name|ar
init|=
name|getOnlySegmentReader
argument_list|(
name|ir
argument_list|)
decl_stmt|;
specifier|final
name|FieldCache
name|cache
init|=
name|FieldCache
operator|.
name|DEFAULT
decl_stmt|;
name|cache
operator|.
name|purgeAllCaches
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cache
operator|.
name|getCacheEntries
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|Ints
name|ints
init|=
name|cache
operator|.
name|getInts
argument_list|(
name|ar
argument_list|,
literal|"bogusints"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ints
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Longs
name|longs
init|=
name|cache
operator|.
name|getLongs
argument_list|(
name|ar
argument_list|,
literal|"boguslongs"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|longs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Floats
name|floats
init|=
name|cache
operator|.
name|getFloats
argument_list|(
name|ar
argument_list|,
literal|"bogusfloats"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|floats
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|0.0f
argument_list|)
expr_stmt|;
name|Doubles
name|doubles
init|=
name|cache
operator|.
name|getDoubles
argument_list|(
name|ar
argument_list|,
literal|"bogusdoubles"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|doubles
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|0.0D
argument_list|)
expr_stmt|;
name|BytesRef
name|scratch
init|=
operator|new
name|BytesRef
argument_list|()
decl_stmt|;
name|BinaryDocValues
name|binaries
init|=
name|cache
operator|.
name|getTerms
argument_list|(
name|ar
argument_list|,
literal|"bogusterms"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|binaries
operator|.
name|get
argument_list|(
literal|0
argument_list|,
name|scratch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|scratch
operator|.
name|length
argument_list|)
expr_stmt|;
name|SortedDocValues
name|sorted
init|=
name|cache
operator|.
name|getTermsIndex
argument_list|(
name|ar
argument_list|,
literal|"bogustermsindex"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|sorted
operator|.
name|getOrd
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|sorted
operator|.
name|get
argument_list|(
literal|0
argument_list|,
name|scratch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|scratch
operator|.
name|length
argument_list|)
expr_stmt|;
name|SortedSetDocValues
name|sortedSet
init|=
name|cache
operator|.
name|getDocTermOrds
argument_list|(
name|ar
argument_list|,
literal|"bogusmultivalued"
argument_list|)
decl_stmt|;
name|sortedSet
operator|.
name|setDocument
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|SortedSetDocValues
operator|.
name|NO_MORE_ORDS
argument_list|,
name|sortedSet
operator|.
name|nextOrd
argument_list|()
argument_list|)
expr_stmt|;
name|Bits
name|bits
init|=
name|cache
operator|.
name|getDocsWithField
argument_list|(
name|ar
argument_list|,
literal|"bogusbits"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|bits
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// check that we cached nothing
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cache
operator|.
name|getCacheEntries
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|ir
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// Make sure that the use of GrowableWriter doesn't prevent from using the full long range
DECL|method|testLongFieldCache
specifier|public
name|void
name|testLongFieldCache
parameter_list|()
throws|throws
name|IOException
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriterConfig
name|cfg
init|=
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|cfg
operator|.
name|setMergePolicy
argument_list|(
name|newLogMergePolicy
argument_list|()
argument_list|)
expr_stmt|;
name|RandomIndexWriter
name|iw
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|,
name|cfg
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|LongField
name|field
init|=
operator|new
name|LongField
argument_list|(
literal|"f"
argument_list|,
literal|0L
argument_list|,
name|Store
operator|.
name|YES
argument_list|)
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|field
argument_list|)
expr_stmt|;
specifier|final
name|long
index|[]
name|values
init|=
operator|new
name|long
index|[
name|_TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|10
argument_list|)
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|values
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
specifier|final
name|long
name|v
decl_stmt|;
switch|switch
condition|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
condition|)
block|{
case|case
literal|0
case|:
name|v
operator|=
name|Long
operator|.
name|MIN_VALUE
expr_stmt|;
break|break;
case|case
literal|1
case|:
name|v
operator|=
literal|0
expr_stmt|;
break|break;
case|case
literal|2
case|:
name|v
operator|=
name|Long
operator|.
name|MAX_VALUE
expr_stmt|;
break|break;
default|default:
name|v
operator|=
name|_TestUtil
operator|.
name|nextLong
argument_list|(
name|random
argument_list|()
argument_list|,
operator|-
literal|10
argument_list|,
literal|10
argument_list|)
expr_stmt|;
break|break;
block|}
name|values
index|[
name|i
index|]
operator|=
name|v
expr_stmt|;
if|if
condition|(
name|v
operator|==
literal|0
operator|&&
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
comment|// missing
name|iw
operator|.
name|addDocument
argument_list|(
operator|new
name|Document
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|field
operator|.
name|setLongValue
argument_list|(
name|v
argument_list|)
expr_stmt|;
name|iw
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
block|}
name|iw
operator|.
name|forceMerge
argument_list|(
literal|1
argument_list|)
expr_stmt|;
specifier|final
name|DirectoryReader
name|reader
init|=
name|iw
operator|.
name|getReader
argument_list|()
decl_stmt|;
specifier|final
name|FieldCache
operator|.
name|Longs
name|longs
init|=
name|FieldCache
operator|.
name|DEFAULT
operator|.
name|getLongs
argument_list|(
name|getOnlySegmentReader
argument_list|(
name|reader
argument_list|)
argument_list|,
literal|"f"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|values
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|assertEquals
argument_list|(
name|values
index|[
name|i
index|]
argument_list|,
name|longs
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|iw
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// Make sure that the use of GrowableWriter doesn't prevent from using the full int range
DECL|method|testIntFieldCache
specifier|public
name|void
name|testIntFieldCache
parameter_list|()
throws|throws
name|IOException
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriterConfig
name|cfg
init|=
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|cfg
operator|.
name|setMergePolicy
argument_list|(
name|newLogMergePolicy
argument_list|()
argument_list|)
expr_stmt|;
name|RandomIndexWriter
name|iw
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|,
name|cfg
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|IntField
name|field
init|=
operator|new
name|IntField
argument_list|(
literal|"f"
argument_list|,
literal|0
argument_list|,
name|Store
operator|.
name|YES
argument_list|)
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|field
argument_list|)
expr_stmt|;
specifier|final
name|int
index|[]
name|values
init|=
operator|new
name|int
index|[
name|_TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|10
argument_list|)
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|values
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
specifier|final
name|int
name|v
decl_stmt|;
switch|switch
condition|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
condition|)
block|{
case|case
literal|0
case|:
name|v
operator|=
name|Integer
operator|.
name|MIN_VALUE
expr_stmt|;
break|break;
case|case
literal|1
case|:
name|v
operator|=
literal|0
expr_stmt|;
break|break;
case|case
literal|2
case|:
name|v
operator|=
name|Integer
operator|.
name|MAX_VALUE
expr_stmt|;
break|break;
default|default:
name|v
operator|=
name|_TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
operator|-
literal|10
argument_list|,
literal|10
argument_list|)
expr_stmt|;
break|break;
block|}
name|values
index|[
name|i
index|]
operator|=
name|v
expr_stmt|;
if|if
condition|(
name|v
operator|==
literal|0
operator|&&
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
comment|// missing
name|iw
operator|.
name|addDocument
argument_list|(
operator|new
name|Document
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|field
operator|.
name|setIntValue
argument_list|(
name|v
argument_list|)
expr_stmt|;
name|iw
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
block|}
name|iw
operator|.
name|forceMerge
argument_list|(
literal|1
argument_list|)
expr_stmt|;
specifier|final
name|DirectoryReader
name|reader
init|=
name|iw
operator|.
name|getReader
argument_list|()
decl_stmt|;
specifier|final
name|FieldCache
operator|.
name|Ints
name|ints
init|=
name|FieldCache
operator|.
name|DEFAULT
operator|.
name|getInts
argument_list|(
name|getOnlySegmentReader
argument_list|(
name|reader
argument_list|)
argument_list|,
literal|"f"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|values
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|assertEquals
argument_list|(
name|values
index|[
name|i
index|]
argument_list|,
name|ints
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|iw
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class
end_unit
