begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.search
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
package|;
end_package
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|RandomIndexWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|TestUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assume
import|;
end_import
begin_comment
comment|/**  * subclass of TestSimpleExplanations that adds a lot of filler docs which will be ignored at query time.  * These filler docs will either all be empty in which case the queries will be unmodified, or they will   * all use terms from same set of source data as our regular docs (to emphasis the DocFreq factor in scoring),   * in which case the queries will be wrapped so they can be excluded.  */
end_comment
begin_class
DECL|class|TestSimpleExplanationsWithFillerDocs
specifier|public
class|class
name|TestSimpleExplanationsWithFillerDocs
extends|extends
name|TestSimpleExplanations
block|{
comment|/** num of empty docs injected between every doc in the index */
DECL|field|NUM_FILLER_DOCS
specifier|private
specifier|static
specifier|final
name|int
name|NUM_FILLER_DOCS
init|=
name|BooleanScorer
operator|.
name|SIZE
decl_stmt|;
comment|/** num of empty docs injected prior to the first doc in the (main) index */
DECL|field|PRE_FILLER_DOCS
specifier|private
specifier|static
name|int
name|PRE_FILLER_DOCS
decl_stmt|;
comment|/**     * If non-null then the filler docs are not empty, and need to be filtered out from queries     * using this as both field name&amp; field value     */
DECL|field|EXTRA
specifier|public
specifier|static
name|String
name|EXTRA
init|=
literal|null
decl_stmt|;
DECL|field|EMPTY_DOC
specifier|private
specifier|static
specifier|final
name|Document
name|EMPTY_DOC
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
comment|/**    * Replaces the index created by our superclass with a new one that includes a lot of docs filler docs.    * {@link #qtest} will account for these extra filler docs.    * @see #qtest    */
annotation|@
name|BeforeClass
DECL|method|replaceIndex
specifier|public
specifier|static
name|void
name|replaceIndex
parameter_list|()
throws|throws
name|Exception
block|{
name|EXTRA
operator|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
literal|null
else|:
literal|"extra"
expr_stmt|;
name|PRE_FILLER_DOCS
operator|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|0
argument_list|,
operator|(
name|NUM_FILLER_DOCS
operator|/
literal|2
operator|)
argument_list|)
expr_stmt|;
comment|// free up what our super class created that we won't be using
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|directory
operator|.
name|close
argument_list|()
expr_stmt|;
name|directory
operator|=
name|newDirectory
argument_list|()
expr_stmt|;
try|try
init|(
name|RandomIndexWriter
name|writer
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|directory
argument_list|,
name|newIndexWriterConfig
argument_list|(
name|analyzer
argument_list|)
operator|.
name|setMergePolicy
argument_list|(
name|newLogMergePolicy
argument_list|()
argument_list|)
argument_list|)
init|)
block|{
for|for
control|(
name|int
name|filler
init|=
literal|0
init|;
name|filler
operator|<
name|PRE_FILLER_DOCS
condition|;
name|filler
operator|++
control|)
block|{
name|writer
operator|.
name|addDocument
argument_list|(
name|makeFillerDoc
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|docFields
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|writer
operator|.
name|addDocument
argument_list|(
name|createDoc
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|filler
init|=
literal|0
init|;
name|filler
operator|<
name|NUM_FILLER_DOCS
condition|;
name|filler
operator|++
control|)
block|{
name|writer
operator|.
name|addDocument
argument_list|(
name|makeFillerDoc
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|reader
operator|=
name|writer
operator|.
name|getReader
argument_list|()
expr_stmt|;
name|searcher
operator|=
name|newSearcher
argument_list|(
name|reader
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|makeFillerDoc
specifier|private
specifier|static
name|Document
name|makeFillerDoc
parameter_list|()
block|{
if|if
condition|(
literal|null
operator|==
name|EXTRA
condition|)
block|{
return|return
name|EMPTY_DOC
return|;
block|}
name|Document
name|doc
init|=
name|createDoc
argument_list|(
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|0
argument_list|,
name|docFields
operator|.
name|length
operator|-
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newStringField
argument_list|(
name|EXTRA
argument_list|,
name|EXTRA
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|doc
return|;
block|}
comment|/**    * Adjusts<code>expDocNrs</code> based on the filler docs injected in the index,     * and if neccessary wraps the<code>q</code> in a BooleanQuery that will filter out all     * filler docs using the {@link #EXTRA} field.    *     * @see #replaceIndex    */
annotation|@
name|Override
DECL|method|qtest
specifier|public
name|void
name|qtest
parameter_list|(
name|Query
name|q
parameter_list|,
name|int
index|[]
name|expDocNrs
parameter_list|)
throws|throws
name|Exception
block|{
name|expDocNrs
operator|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|expDocNrs
argument_list|,
name|expDocNrs
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expDocNrs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|expDocNrs
index|[
name|i
index|]
operator|=
name|PRE_FILLER_DOCS
operator|+
operator|(
operator|(
name|NUM_FILLER_DOCS
operator|+
literal|1
operator|)
operator|*
name|expDocNrs
index|[
name|i
index|]
operator|)
expr_stmt|;
block|}
if|if
condition|(
literal|null
operator|!=
name|EXTRA
condition|)
block|{
name|BooleanQuery
operator|.
name|Builder
name|builder
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|add
argument_list|(
operator|new
name|BooleanClause
argument_list|(
name|q
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
operator|new
name|BooleanClause
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|EXTRA
argument_list|,
name|EXTRA
argument_list|)
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST_NOT
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
name|super
operator|.
name|qtest
argument_list|(
name|q
argument_list|,
name|expDocNrs
argument_list|)
expr_stmt|;
block|}
DECL|method|testMA1
specifier|public
name|void
name|testMA1
parameter_list|()
throws|throws
name|Exception
block|{
name|Assume
operator|.
name|assumeNotNull
argument_list|(
literal|"test is not viable with empty filler docs"
argument_list|,
name|EXTRA
argument_list|)
expr_stmt|;
name|super
operator|.
name|testMA1
argument_list|()
expr_stmt|;
block|}
DECL|method|testMA2
specifier|public
name|void
name|testMA2
parameter_list|()
throws|throws
name|Exception
block|{
name|Assume
operator|.
name|assumeNotNull
argument_list|(
literal|"test is not viable with empty filler docs"
argument_list|,
name|EXTRA
argument_list|)
expr_stmt|;
name|super
operator|.
name|testMA2
argument_list|()
expr_stmt|;
block|}
block|}
end_class
end_unit
