begin_unit
begin_package
DECL|package|org.apache.lucene.search.spans
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|spans
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|MockAnalyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|RandomIndexWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|CheckHits
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|English
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|TestUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|spans
operator|.
name|SpanTestUtil
operator|.
name|*
import|;
end_import
begin_comment
comment|/**  * Tests Spans (v2)  *  */
end_comment
begin_class
DECL|class|TestSpansEnum
specifier|public
class|class
name|TestSpansEnum
extends|extends
name|LuceneTestCase
block|{
DECL|field|searcher
specifier|private
specifier|static
name|IndexSearcher
name|searcher
decl_stmt|;
DECL|field|reader
specifier|private
specifier|static
name|IndexReader
name|reader
decl_stmt|;
DECL|field|directory
specifier|private
specifier|static
name|Directory
name|directory
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|beforeClass
specifier|public
specifier|static
name|void
name|beforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|directory
operator|=
name|newDirectory
argument_list|()
expr_stmt|;
name|RandomIndexWriter
name|writer
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|directory
argument_list|,
name|newIndexWriterConfig
argument_list|(
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setMaxBufferedDocs
argument_list|(
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|100
argument_list|,
literal|1000
argument_list|)
argument_list|)
operator|.
name|setMergePolicy
argument_list|(
name|newLogMergePolicy
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
comment|//writer.infoStream = System.out;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newTextField
argument_list|(
literal|"field"
argument_list|,
name|English
operator|.
name|intToEnglish
argument_list|(
name|i
argument_list|)
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|100
init|;
name|i
operator|<
literal|110
condition|;
name|i
operator|++
control|)
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
comment|// doc id 10-19 have 100-109
name|doc
operator|.
name|add
argument_list|(
name|newTextField
argument_list|(
literal|"field"
argument_list|,
name|English
operator|.
name|intToEnglish
argument_list|(
name|i
argument_list|)
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
name|reader
operator|=
name|writer
operator|.
name|getReader
argument_list|()
expr_stmt|;
name|searcher
operator|=
name|newSearcher
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|afterClass
specifier|public
specifier|static
name|void
name|afterClass
parameter_list|()
throws|throws
name|Exception
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|directory
operator|.
name|close
argument_list|()
expr_stmt|;
name|searcher
operator|=
literal|null
expr_stmt|;
name|reader
operator|=
literal|null
expr_stmt|;
name|directory
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|checkHits
specifier|private
name|void
name|checkHits
parameter_list|(
name|Query
name|query
parameter_list|,
name|int
index|[]
name|results
parameter_list|)
throws|throws
name|IOException
block|{
name|CheckHits
operator|.
name|checkHits
argument_list|(
name|random
argument_list|()
argument_list|,
name|query
argument_list|,
literal|"field"
argument_list|,
name|searcher
argument_list|,
name|results
argument_list|)
expr_stmt|;
block|}
DECL|method|testSpansEnumOr1
specifier|public
name|void
name|testSpansEnumOr1
parameter_list|()
throws|throws
name|Exception
block|{
name|checkHits
argument_list|(
name|spanOrQuery
argument_list|(
literal|"field"
argument_list|,
literal|"one"
argument_list|,
literal|"two"
argument_list|)
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|2
block|,
literal|10
block|,
literal|11
block|,
literal|12
block|,
literal|13
block|,
literal|14
block|,
literal|15
block|,
literal|16
block|,
literal|17
block|,
literal|18
block|,
literal|19
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|testSpansEnumOr2
specifier|public
name|void
name|testSpansEnumOr2
parameter_list|()
throws|throws
name|Exception
block|{
name|checkHits
argument_list|(
name|spanOrQuery
argument_list|(
literal|"field"
argument_list|,
literal|"one"
argument_list|,
literal|"eleven"
argument_list|)
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|10
block|,
literal|11
block|,
literal|12
block|,
literal|13
block|,
literal|14
block|,
literal|15
block|,
literal|16
block|,
literal|17
block|,
literal|18
block|,
literal|19
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|testSpansEnumOr3
specifier|public
name|void
name|testSpansEnumOr3
parameter_list|()
throws|throws
name|Exception
block|{
name|checkHits
argument_list|(
name|spanOrQuery
argument_list|(
literal|"field"
argument_list|,
literal|"twelve"
argument_list|,
literal|"eleven"
argument_list|)
argument_list|,
operator|new
name|int
index|[]
block|{}
argument_list|)
expr_stmt|;
block|}
DECL|method|spanTQ
specifier|public
name|SpanQuery
name|spanTQ
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
name|spanTermQuery
argument_list|(
literal|"field"
argument_list|,
name|s
argument_list|)
return|;
block|}
DECL|method|testSpansEnumOrNot1
specifier|public
name|void
name|testSpansEnumOrNot1
parameter_list|()
throws|throws
name|Exception
block|{
name|checkHits
argument_list|(
name|spanNotQuery
argument_list|(
name|spanOrQuery
argument_list|(
literal|"field"
argument_list|,
literal|"one"
argument_list|,
literal|"two"
argument_list|)
argument_list|,
name|spanTermQuery
argument_list|(
literal|"field"
argument_list|,
literal|"one"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|int
index|[]
block|{
literal|2
block|,
literal|12
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|testSpansEnumNotBeforeAfter1
specifier|public
name|void
name|testSpansEnumNotBeforeAfter1
parameter_list|()
throws|throws
name|Exception
block|{
name|checkHits
argument_list|(
name|spanNotQuery
argument_list|(
name|spanTermQuery
argument_list|(
literal|"field"
argument_list|,
literal|"hundred"
argument_list|)
argument_list|,
name|spanTermQuery
argument_list|(
literal|"field"
argument_list|,
literal|"one"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|int
index|[]
block|{
literal|10
block|,
literal|11
block|,
literal|12
block|,
literal|13
block|,
literal|14
block|,
literal|15
block|,
literal|16
block|,
literal|17
block|,
literal|18
block|,
literal|19
block|}
argument_list|)
expr_stmt|;
comment|// include all "one hundred ..."
block|}
DECL|method|testSpansEnumNotBeforeAfter2
specifier|public
name|void
name|testSpansEnumNotBeforeAfter2
parameter_list|()
throws|throws
name|Exception
block|{
name|checkHits
argument_list|(
name|spanNotQuery
argument_list|(
name|spanTermQuery
argument_list|(
literal|"field"
argument_list|,
literal|"hundred"
argument_list|)
argument_list|,
name|spanTermQuery
argument_list|(
literal|"field"
argument_list|,
literal|"one"
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
argument_list|,
operator|new
name|int
index|[]
block|{}
argument_list|)
expr_stmt|;
comment|// exclude all "one hundred ..."
block|}
DECL|method|testSpansEnumNotBeforeAfter3
specifier|public
name|void
name|testSpansEnumNotBeforeAfter3
parameter_list|()
throws|throws
name|Exception
block|{
name|checkHits
argument_list|(
name|spanNotQuery
argument_list|(
name|spanTermQuery
argument_list|(
literal|"field"
argument_list|,
literal|"hundred"
argument_list|)
argument_list|,
name|spanTermQuery
argument_list|(
literal|"field"
argument_list|,
literal|"one"
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|,
operator|new
name|int
index|[]
block|{
literal|10
block|,
literal|12
block|,
literal|13
block|,
literal|14
block|,
literal|15
block|,
literal|16
block|,
literal|17
block|,
literal|18
block|,
literal|19
block|}
argument_list|)
expr_stmt|;
comment|// exclude "one hundred one"
block|}
block|}
end_class
end_unit
