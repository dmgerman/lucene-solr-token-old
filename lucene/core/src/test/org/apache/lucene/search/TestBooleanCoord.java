begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.search
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|StringField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DirectoryReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|FieldInvertState
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriterConfig
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReaderContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|similarities
operator|.
name|Similarity
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import
begin_comment
comment|/**   * Tests coord() computation by BooleanQuery  */
end_comment
begin_class
DECL|class|TestBooleanCoord
specifier|public
class|class
name|TestBooleanCoord
extends|extends
name|LuceneTestCase
block|{
DECL|field|dir
specifier|static
name|Directory
name|dir
decl_stmt|;
DECL|field|reader
specifier|static
name|DirectoryReader
name|reader
decl_stmt|;
DECL|field|searcher
specifier|static
name|IndexSearcher
name|searcher
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|beforeClass
specifier|public
specifier|static
name|void
name|beforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|dir
operator|=
name|newDirectory
argument_list|()
expr_stmt|;
name|IndexWriter
name|iw
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
literal|null
argument_list|)
argument_list|)
decl_stmt|;
comment|// we only add two documents for testing:
comment|// the first document has 3 terms A,B,C (for positive matching). we test scores against this.
comment|// the second document has 3 negative terms 1,2,3 that exist in the segment (for non-null scorers)
comment|// to test terms that don't exist (null scorers), we use X,Y,Z
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|StringField
argument_list|(
literal|"field"
argument_list|,
literal|"A"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|StringField
argument_list|(
literal|"field"
argument_list|,
literal|"B"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|StringField
argument_list|(
literal|"field"
argument_list|,
literal|"C"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|iw
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|StringField
argument_list|(
literal|"field"
argument_list|,
literal|"1"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|StringField
argument_list|(
literal|"field"
argument_list|,
literal|"2"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|StringField
argument_list|(
literal|"field"
argument_list|,
literal|"3"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|iw
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|iw
operator|.
name|close
argument_list|()
expr_stmt|;
name|reader
operator|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|searcher
operator|=
operator|new
name|IndexSearcher
argument_list|(
name|reader
argument_list|)
expr_stmt|;
comment|// we set a similarity that just returns 1, the idea is to test coord
name|searcher
operator|.
name|setSimilarity
argument_list|(
operator|new
name|Similarity
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|float
name|coord
parameter_list|(
name|int
name|overlap
parameter_list|,
name|int
name|maxOverlap
parameter_list|)
block|{
comment|// we use a rather bogus/complex coord, because today coord() can really return anything.
comment|// note in the case of overlap == maxOverlap == 1: BooleanWeight always applies 1, (see LUCENE-4300).
return|return
name|overlap
operator|/
call|(
name|float
call|)
argument_list|(
name|maxOverlap
operator|+
literal|1
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|computeNorm
parameter_list|(
name|FieldInvertState
name|state
parameter_list|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|SimWeight
name|computeWeight
parameter_list|(
name|CollectionStatistics
name|collectionStats
parameter_list|,
name|TermStatistics
modifier|...
name|termStats
parameter_list|)
block|{
return|return
operator|new
name|SimWeight
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|float
name|getValueForNormalization
parameter_list|()
block|{
return|return
literal|1f
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|normalize
parameter_list|(
name|float
name|queryNorm
parameter_list|,
name|float
name|topLevelBoost
parameter_list|)
block|{}
block|}
return|;
block|}
annotation|@
name|Override
specifier|public
name|SimScorer
name|simScorer
parameter_list|(
name|SimWeight
name|weight
parameter_list|,
name|LeafReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|SimScorer
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|float
name|score
parameter_list|(
name|int
name|doc
parameter_list|,
name|float
name|freq
parameter_list|)
block|{
return|return
literal|1
return|;
block|}
annotation|@
name|Override
specifier|public
name|float
name|computeSlopFactor
parameter_list|(
name|int
name|distance
parameter_list|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|float
name|computePayloadFactor
parameter_list|(
name|int
name|doc
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|,
name|BytesRef
name|payload
parameter_list|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|()
throw|;
block|}
block|}
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|afterClass
specifier|public
specifier|static
name|void
name|afterClass
parameter_list|()
throws|throws
name|Exception
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|reader
operator|=
literal|null
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|=
literal|null
expr_stmt|;
name|searcher
operator|=
literal|null
expr_stmt|;
block|}
comment|// disjunctions
DECL|method|testDisjunction1TermMatches
specifier|public
name|void
name|testDisjunction1TermMatches
parameter_list|()
throws|throws
name|Exception
block|{
name|BooleanQuery
operator|.
name|Builder
name|bq
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"A"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
comment|// LUCENE-4300: coord(1,1) is always treated as 1
name|assertScore
argument_list|(
literal|1
operator|*
literal|1
argument_list|,
name|bq
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testDisjunction2TermMatches
specifier|public
name|void
name|testDisjunction2TermMatches
parameter_list|()
throws|throws
name|Exception
block|{
name|BooleanQuery
operator|.
name|Builder
name|bq
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"A"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"B"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|assertScore
argument_list|(
literal|2
operator|*
literal|2
operator|/
operator|(
literal|2f
operator|+
literal|1
operator|)
argument_list|,
name|bq
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testDisjunction1OutOf2
specifier|public
name|void
name|testDisjunction1OutOf2
parameter_list|()
throws|throws
name|Exception
block|{
name|BooleanQuery
operator|.
name|Builder
name|bq
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"A"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|assertScore
argument_list|(
literal|1
operator|*
literal|1
operator|/
operator|(
literal|2f
operator|+
literal|1
operator|)
argument_list|,
name|bq
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testDisjunction1OutOf2Missing
specifier|public
name|void
name|testDisjunction1OutOf2Missing
parameter_list|()
throws|throws
name|Exception
block|{
name|BooleanQuery
operator|.
name|Builder
name|bq
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"A"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"Z"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|assertScore
argument_list|(
literal|1
operator|*
literal|1
operator|/
operator|(
literal|2f
operator|+
literal|1
operator|)
argument_list|,
name|bq
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testDisjunction1OutOf3
specifier|public
name|void
name|testDisjunction1OutOf3
parameter_list|()
throws|throws
name|Exception
block|{
name|BooleanQuery
operator|.
name|Builder
name|bq
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"A"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"2"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|assertScore
argument_list|(
literal|1
operator|*
literal|1
operator|/
operator|(
literal|3f
operator|+
literal|1
operator|)
argument_list|,
name|bq
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testDisjunction1OutOf3MissingOne
specifier|public
name|void
name|testDisjunction1OutOf3MissingOne
parameter_list|()
throws|throws
name|Exception
block|{
name|BooleanQuery
operator|.
name|Builder
name|bq
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"A"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"Z"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|assertScore
argument_list|(
literal|1
operator|*
literal|1
operator|/
operator|(
literal|3f
operator|+
literal|1
operator|)
argument_list|,
name|bq
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testDisjunction1OutOf3MissingTwo
specifier|public
name|void
name|testDisjunction1OutOf3MissingTwo
parameter_list|()
throws|throws
name|Exception
block|{
name|BooleanQuery
operator|.
name|Builder
name|bq
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"A"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"Y"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"Z"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|assertScore
argument_list|(
literal|1
operator|*
literal|1
operator|/
operator|(
literal|3f
operator|+
literal|1
operator|)
argument_list|,
name|bq
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testDisjunction2OutOf3
specifier|public
name|void
name|testDisjunction2OutOf3
parameter_list|()
throws|throws
name|Exception
block|{
name|BooleanQuery
operator|.
name|Builder
name|bq
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"A"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"B"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|assertScore
argument_list|(
literal|2
operator|*
literal|2
operator|/
operator|(
literal|3f
operator|+
literal|1
operator|)
argument_list|,
name|bq
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testDisjunction2OutOf3Missing
specifier|public
name|void
name|testDisjunction2OutOf3Missing
parameter_list|()
throws|throws
name|Exception
block|{
name|BooleanQuery
operator|.
name|Builder
name|bq
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"A"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"B"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"Z"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|assertScore
argument_list|(
literal|2
operator|*
literal|2
operator|/
operator|(
literal|3f
operator|+
literal|1
operator|)
argument_list|,
name|bq
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// disjunctions with coord disabled
DECL|method|testDisjunction1TermMatchesCoordDisabled
specifier|public
name|void
name|testDisjunction1TermMatchesCoordDisabled
parameter_list|()
throws|throws
name|Exception
block|{
name|BooleanQuery
operator|.
name|Builder
name|bq
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|bq
operator|.
name|setDisableCoord
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"A"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|assertScore
argument_list|(
literal|1
argument_list|,
name|bq
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testDisjunction2TermMatchesCoordDisabled
specifier|public
name|void
name|testDisjunction2TermMatchesCoordDisabled
parameter_list|()
throws|throws
name|Exception
block|{
name|BooleanQuery
operator|.
name|Builder
name|bq
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|bq
operator|.
name|setDisableCoord
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"A"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"B"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|assertScore
argument_list|(
literal|2
argument_list|,
name|bq
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testDisjunction1OutOf2CoordDisabled
specifier|public
name|void
name|testDisjunction1OutOf2CoordDisabled
parameter_list|()
throws|throws
name|Exception
block|{
name|BooleanQuery
operator|.
name|Builder
name|bq
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|bq
operator|.
name|setDisableCoord
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"A"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|assertScore
argument_list|(
literal|1
argument_list|,
name|bq
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testDisjunction1OutOf2MissingCoordDisabled
specifier|public
name|void
name|testDisjunction1OutOf2MissingCoordDisabled
parameter_list|()
throws|throws
name|Exception
block|{
name|BooleanQuery
operator|.
name|Builder
name|bq
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|bq
operator|.
name|setDisableCoord
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"A"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"Z"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|assertScore
argument_list|(
literal|1
argument_list|,
name|bq
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testDisjunction1OutOf3CoordDisabled
specifier|public
name|void
name|testDisjunction1OutOf3CoordDisabled
parameter_list|()
throws|throws
name|Exception
block|{
name|BooleanQuery
operator|.
name|Builder
name|bq
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|bq
operator|.
name|setDisableCoord
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"A"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"2"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|assertScore
argument_list|(
literal|1
argument_list|,
name|bq
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testDisjunction1OutOf3MissingOneCoordDisabled
specifier|public
name|void
name|testDisjunction1OutOf3MissingOneCoordDisabled
parameter_list|()
throws|throws
name|Exception
block|{
name|BooleanQuery
operator|.
name|Builder
name|bq
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|bq
operator|.
name|setDisableCoord
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"A"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"Z"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|assertScore
argument_list|(
literal|1
argument_list|,
name|bq
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testDisjunction1OutOf3MissingTwoCoordDisabled
specifier|public
name|void
name|testDisjunction1OutOf3MissingTwoCoordDisabled
parameter_list|()
throws|throws
name|Exception
block|{
name|BooleanQuery
operator|.
name|Builder
name|bq
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|bq
operator|.
name|setDisableCoord
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"A"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"Y"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"Z"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|assertScore
argument_list|(
literal|1
argument_list|,
name|bq
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testDisjunction2OutOf3CoordDisabled
specifier|public
name|void
name|testDisjunction2OutOf3CoordDisabled
parameter_list|()
throws|throws
name|Exception
block|{
name|BooleanQuery
operator|.
name|Builder
name|bq
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|bq
operator|.
name|setDisableCoord
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"A"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"B"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|assertScore
argument_list|(
literal|2
argument_list|,
name|bq
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testDisjunction2OutOf3MissingCoordDisabled
specifier|public
name|void
name|testDisjunction2OutOf3MissingCoordDisabled
parameter_list|()
throws|throws
name|Exception
block|{
name|BooleanQuery
operator|.
name|Builder
name|bq
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|bq
operator|.
name|setDisableCoord
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"A"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"B"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"Z"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|assertScore
argument_list|(
literal|2
argument_list|,
name|bq
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// minShouldMatch
DECL|method|testMinShouldMatch1TermMatches
specifier|public
name|void
name|testMinShouldMatch1TermMatches
parameter_list|()
throws|throws
name|Exception
block|{
name|BooleanQuery
operator|.
name|Builder
name|bq
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|bq
operator|.
name|setMinimumNumberShouldMatch
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"A"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
comment|// LUCENE-4300: coord(1,1) is always treated as 1
name|assertScore
argument_list|(
literal|1
operator|*
literal|1
argument_list|,
name|bq
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testMinShouldMatchn2TermMatches
specifier|public
name|void
name|testMinShouldMatchn2TermMatches
parameter_list|()
throws|throws
name|Exception
block|{
name|BooleanQuery
operator|.
name|Builder
name|bq
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|bq
operator|.
name|setMinimumNumberShouldMatch
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"A"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"B"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|assertScore
argument_list|(
literal|2
operator|*
literal|2
operator|/
operator|(
literal|2f
operator|+
literal|1
operator|)
argument_list|,
name|bq
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testMinShouldMatch1OutOf2
specifier|public
name|void
name|testMinShouldMatch1OutOf2
parameter_list|()
throws|throws
name|Exception
block|{
name|BooleanQuery
operator|.
name|Builder
name|bq
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|bq
operator|.
name|setMinimumNumberShouldMatch
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"A"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|assertScore
argument_list|(
literal|1
operator|*
literal|1
operator|/
operator|(
literal|2f
operator|+
literal|1
operator|)
argument_list|,
name|bq
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testMinShouldMatch1OutOf2Missing
specifier|public
name|void
name|testMinShouldMatch1OutOf2Missing
parameter_list|()
throws|throws
name|Exception
block|{
name|BooleanQuery
operator|.
name|Builder
name|bq
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|bq
operator|.
name|setMinimumNumberShouldMatch
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"A"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"Z"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|assertScore
argument_list|(
literal|1
operator|*
literal|1
operator|/
operator|(
literal|2f
operator|+
literal|1
operator|)
argument_list|,
name|bq
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testMinShouldMatch1OutOf3
specifier|public
name|void
name|testMinShouldMatch1OutOf3
parameter_list|()
throws|throws
name|Exception
block|{
name|BooleanQuery
operator|.
name|Builder
name|bq
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|bq
operator|.
name|setMinimumNumberShouldMatch
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"A"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"2"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|assertScore
argument_list|(
literal|1
operator|*
literal|1
operator|/
operator|(
literal|3f
operator|+
literal|1
operator|)
argument_list|,
name|bq
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testMinShouldMatch1OutOf3MissingOne
specifier|public
name|void
name|testMinShouldMatch1OutOf3MissingOne
parameter_list|()
throws|throws
name|Exception
block|{
name|BooleanQuery
operator|.
name|Builder
name|bq
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|bq
operator|.
name|setMinimumNumberShouldMatch
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"A"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"Z"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|assertScore
argument_list|(
literal|1
operator|*
literal|1
operator|/
operator|(
literal|3f
operator|+
literal|1
operator|)
argument_list|,
name|bq
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testMinShouldMatch1OutOf3MissingTwo
specifier|public
name|void
name|testMinShouldMatch1OutOf3MissingTwo
parameter_list|()
throws|throws
name|Exception
block|{
name|BooleanQuery
operator|.
name|Builder
name|bq
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|bq
operator|.
name|setMinimumNumberShouldMatch
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"A"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"Y"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"Z"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|assertScore
argument_list|(
literal|1
operator|*
literal|1
operator|/
operator|(
literal|3f
operator|+
literal|1
operator|)
argument_list|,
name|bq
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testMinShouldMatch2OutOf3
specifier|public
name|void
name|testMinShouldMatch2OutOf3
parameter_list|()
throws|throws
name|Exception
block|{
name|BooleanQuery
operator|.
name|Builder
name|bq
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|bq
operator|.
name|setMinimumNumberShouldMatch
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"A"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"B"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|assertScore
argument_list|(
literal|2
operator|*
literal|2
operator|/
operator|(
literal|3f
operator|+
literal|1
operator|)
argument_list|,
name|bq
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testMinShouldMatch2OutOf3Missing
specifier|public
name|void
name|testMinShouldMatch2OutOf3Missing
parameter_list|()
throws|throws
name|Exception
block|{
name|BooleanQuery
operator|.
name|Builder
name|bq
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|bq
operator|.
name|setMinimumNumberShouldMatch
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"A"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"B"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"Z"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|assertScore
argument_list|(
literal|2
operator|*
literal|2
operator|/
operator|(
literal|3f
operator|+
literal|1
operator|)
argument_list|,
name|bq
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testMinShouldMatch2OutOf4
specifier|public
name|void
name|testMinShouldMatch2OutOf4
parameter_list|()
throws|throws
name|Exception
block|{
name|BooleanQuery
operator|.
name|Builder
name|bq
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|bq
operator|.
name|setMinimumNumberShouldMatch
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"A"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"B"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"2"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|assertScore
argument_list|(
literal|2
operator|*
literal|2
operator|/
operator|(
literal|4f
operator|+
literal|1
operator|)
argument_list|,
name|bq
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testMinShouldMatch2OutOf4Missing
specifier|public
name|void
name|testMinShouldMatch2OutOf4Missing
parameter_list|()
throws|throws
name|Exception
block|{
name|BooleanQuery
operator|.
name|Builder
name|bq
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|bq
operator|.
name|setMinimumNumberShouldMatch
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"A"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"B"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"Z"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|assertScore
argument_list|(
literal|2
operator|*
literal|2
operator|/
operator|(
literal|4f
operator|+
literal|1
operator|)
argument_list|,
name|bq
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// minShouldMatch with coord disabled
DECL|method|testMinShouldMatch1TermMatchesCoordDisabled
specifier|public
name|void
name|testMinShouldMatch1TermMatchesCoordDisabled
parameter_list|()
throws|throws
name|Exception
block|{
name|BooleanQuery
operator|.
name|Builder
name|bq
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|bq
operator|.
name|setDisableCoord
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|bq
operator|.
name|setMinimumNumberShouldMatch
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"A"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|assertScore
argument_list|(
literal|1
argument_list|,
name|bq
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testMinShouldMatch2TermMatchesCoordDisabled
specifier|public
name|void
name|testMinShouldMatch2TermMatchesCoordDisabled
parameter_list|()
throws|throws
name|Exception
block|{
name|BooleanQuery
operator|.
name|Builder
name|bq
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|bq
operator|.
name|setDisableCoord
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|bq
operator|.
name|setMinimumNumberShouldMatch
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"A"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"B"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|assertScore
argument_list|(
literal|2
argument_list|,
name|bq
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testMinShouldMatch1OutOf2CoordDisabled
specifier|public
name|void
name|testMinShouldMatch1OutOf2CoordDisabled
parameter_list|()
throws|throws
name|Exception
block|{
name|BooleanQuery
operator|.
name|Builder
name|bq
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|bq
operator|.
name|setDisableCoord
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|bq
operator|.
name|setMinimumNumberShouldMatch
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"A"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|assertScore
argument_list|(
literal|1
argument_list|,
name|bq
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testMinShouldMatch1OutOf2MissingCoordDisabled
specifier|public
name|void
name|testMinShouldMatch1OutOf2MissingCoordDisabled
parameter_list|()
throws|throws
name|Exception
block|{
name|BooleanQuery
operator|.
name|Builder
name|bq
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|bq
operator|.
name|setDisableCoord
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|bq
operator|.
name|setMinimumNumberShouldMatch
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"A"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"Z"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|assertScore
argument_list|(
literal|1
argument_list|,
name|bq
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testMinShouldMatch1OutOf3CoordDisabled
specifier|public
name|void
name|testMinShouldMatch1OutOf3CoordDisabled
parameter_list|()
throws|throws
name|Exception
block|{
name|BooleanQuery
operator|.
name|Builder
name|bq
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|bq
operator|.
name|setDisableCoord
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|bq
operator|.
name|setMinimumNumberShouldMatch
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"A"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"2"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|assertScore
argument_list|(
literal|1
argument_list|,
name|bq
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testMinShouldMatch1OutOf3MissingOneCoordDisabled
specifier|public
name|void
name|testMinShouldMatch1OutOf3MissingOneCoordDisabled
parameter_list|()
throws|throws
name|Exception
block|{
name|BooleanQuery
operator|.
name|Builder
name|bq
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|bq
operator|.
name|setDisableCoord
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|bq
operator|.
name|setMinimumNumberShouldMatch
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"A"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"Z"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|assertScore
argument_list|(
literal|1
argument_list|,
name|bq
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testMinShouldMatch1OutOf3MissingTwoCoordDisabled
specifier|public
name|void
name|testMinShouldMatch1OutOf3MissingTwoCoordDisabled
parameter_list|()
throws|throws
name|Exception
block|{
name|BooleanQuery
operator|.
name|Builder
name|bq
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|bq
operator|.
name|setDisableCoord
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|bq
operator|.
name|setMinimumNumberShouldMatch
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"A"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"Y"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"Z"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|assertScore
argument_list|(
literal|1
argument_list|,
name|bq
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testMinShouldMatch2OutOf3CoordDisabled
specifier|public
name|void
name|testMinShouldMatch2OutOf3CoordDisabled
parameter_list|()
throws|throws
name|Exception
block|{
name|BooleanQuery
operator|.
name|Builder
name|bq
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|bq
operator|.
name|setDisableCoord
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|bq
operator|.
name|setMinimumNumberShouldMatch
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"A"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"B"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|assertScore
argument_list|(
literal|2
argument_list|,
name|bq
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testMinShouldMatch2OutOf3MissingCoordDisabled
specifier|public
name|void
name|testMinShouldMatch2OutOf3MissingCoordDisabled
parameter_list|()
throws|throws
name|Exception
block|{
name|BooleanQuery
operator|.
name|Builder
name|bq
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|bq
operator|.
name|setDisableCoord
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|bq
operator|.
name|setMinimumNumberShouldMatch
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"A"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"B"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"Z"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|assertScore
argument_list|(
literal|2
argument_list|,
name|bq
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testMinShouldMatch2OutOf4CoordDisabled
specifier|public
name|void
name|testMinShouldMatch2OutOf4CoordDisabled
parameter_list|()
throws|throws
name|Exception
block|{
name|BooleanQuery
operator|.
name|Builder
name|bq
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|bq
operator|.
name|setDisableCoord
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|bq
operator|.
name|setMinimumNumberShouldMatch
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"A"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"B"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"2"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|assertScore
argument_list|(
literal|2
argument_list|,
name|bq
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testMinShouldMatch2OutOf4MissingCoordDisabled
specifier|public
name|void
name|testMinShouldMatch2OutOf4MissingCoordDisabled
parameter_list|()
throws|throws
name|Exception
block|{
name|BooleanQuery
operator|.
name|Builder
name|bq
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|bq
operator|.
name|setDisableCoord
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|bq
operator|.
name|setMinimumNumberShouldMatch
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"A"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"B"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"Z"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|assertScore
argument_list|(
literal|2
argument_list|,
name|bq
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// conjunctions
DECL|method|testConjunction1TermMatches
specifier|public
name|void
name|testConjunction1TermMatches
parameter_list|()
throws|throws
name|Exception
block|{
name|BooleanQuery
operator|.
name|Builder
name|bq
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"A"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
comment|// LUCENE-4300: coord(1,1) is always treated as 1
name|assertScore
argument_list|(
literal|1
operator|*
literal|1
argument_list|,
name|bq
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testConjunction1TermMatches1Prohib
specifier|public
name|void
name|testConjunction1TermMatches1Prohib
parameter_list|()
throws|throws
name|Exception
block|{
name|BooleanQuery
operator|.
name|Builder
name|bq
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"A"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST_NOT
argument_list|)
expr_stmt|;
comment|// LUCENE-4300: coord(1,1) is always treated as 1
name|assertScore
argument_list|(
literal|1
operator|*
literal|1
argument_list|,
name|bq
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testConjunction1TermMatches2Prohib
specifier|public
name|void
name|testConjunction1TermMatches2Prohib
parameter_list|()
throws|throws
name|Exception
block|{
name|BooleanQuery
operator|.
name|Builder
name|bq
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"A"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST_NOT
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"2"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST_NOT
argument_list|)
expr_stmt|;
comment|// LUCENE-4300: coord(1,1) is always treated as 1
name|assertScore
argument_list|(
literal|1
operator|*
literal|1
argument_list|,
name|bq
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testConjunction2TermMatches
specifier|public
name|void
name|testConjunction2TermMatches
parameter_list|()
throws|throws
name|Exception
block|{
name|BooleanQuery
operator|.
name|Builder
name|bq
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"A"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"B"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|assertScore
argument_list|(
literal|2
operator|*
literal|2
operator|/
operator|(
literal|2f
operator|+
literal|1
operator|)
argument_list|,
name|bq
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testConjunction3TermMatches
specifier|public
name|void
name|testConjunction3TermMatches
parameter_list|()
throws|throws
name|Exception
block|{
name|BooleanQuery
operator|.
name|Builder
name|bq
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"A"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"B"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"C"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|assertScore
argument_list|(
literal|3
operator|*
literal|3
operator|/
operator|(
literal|3f
operator|+
literal|1
operator|)
argument_list|,
name|bq
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// conjunctions coord disabled
DECL|method|testConjunction1TermMatchesCoordDisabled
specifier|public
name|void
name|testConjunction1TermMatchesCoordDisabled
parameter_list|()
throws|throws
name|Exception
block|{
name|BooleanQuery
operator|.
name|Builder
name|bq
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|bq
operator|.
name|setDisableCoord
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"A"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|assertScore
argument_list|(
literal|1
argument_list|,
name|bq
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testConjunction1TermMatches1ProhibCoordDisabled
specifier|public
name|void
name|testConjunction1TermMatches1ProhibCoordDisabled
parameter_list|()
throws|throws
name|Exception
block|{
name|BooleanQuery
operator|.
name|Builder
name|bq
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|bq
operator|.
name|setDisableCoord
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"A"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST_NOT
argument_list|)
expr_stmt|;
name|assertScore
argument_list|(
literal|1
argument_list|,
name|bq
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testConjunction1TermMatches2ProhibCoordDisabled
specifier|public
name|void
name|testConjunction1TermMatches2ProhibCoordDisabled
parameter_list|()
throws|throws
name|Exception
block|{
name|BooleanQuery
operator|.
name|Builder
name|bq
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|bq
operator|.
name|setDisableCoord
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"A"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST_NOT
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"2"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST_NOT
argument_list|)
expr_stmt|;
name|assertScore
argument_list|(
literal|1
argument_list|,
name|bq
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testConjunction2TermMatchesCoordDisabled
specifier|public
name|void
name|testConjunction2TermMatchesCoordDisabled
parameter_list|()
throws|throws
name|Exception
block|{
name|BooleanQuery
operator|.
name|Builder
name|bq
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|bq
operator|.
name|setDisableCoord
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"A"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"B"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|assertScore
argument_list|(
literal|2
argument_list|,
name|bq
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// optional + mandatory mix
DECL|method|testMix2TermMatches
specifier|public
name|void
name|testMix2TermMatches
parameter_list|()
throws|throws
name|Exception
block|{
name|BooleanQuery
operator|.
name|Builder
name|bq
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"A"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"B"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|assertScore
argument_list|(
literal|2
operator|*
literal|2
operator|/
operator|(
literal|2f
operator|+
literal|1
operator|)
argument_list|,
name|bq
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testMixMatch1OutOfTwo
specifier|public
name|void
name|testMixMatch1OutOfTwo
parameter_list|()
throws|throws
name|Exception
block|{
name|BooleanQuery
operator|.
name|Builder
name|bq
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"A"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|assertScore
argument_list|(
literal|1
operator|*
literal|1
operator|/
operator|(
literal|2f
operator|+
literal|1
operator|)
argument_list|,
name|bq
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testMixMatch1OutOfTwoMissing
specifier|public
name|void
name|testMixMatch1OutOfTwoMissing
parameter_list|()
throws|throws
name|Exception
block|{
name|BooleanQuery
operator|.
name|Builder
name|bq
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"A"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"Z"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|assertScore
argument_list|(
literal|1
operator|*
literal|1
operator|/
operator|(
literal|2f
operator|+
literal|1
operator|)
argument_list|,
name|bq
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testMixMatch1OutOfThree
specifier|public
name|void
name|testMixMatch1OutOfThree
parameter_list|()
throws|throws
name|Exception
block|{
name|BooleanQuery
operator|.
name|Builder
name|bq
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"A"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"2"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|assertScore
argument_list|(
literal|1
operator|*
literal|1
operator|/
operator|(
literal|3f
operator|+
literal|1
operator|)
argument_list|,
name|bq
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testMixMatch1OutOfThreeOneMissing
specifier|public
name|void
name|testMixMatch1OutOfThreeOneMissing
parameter_list|()
throws|throws
name|Exception
block|{
name|BooleanQuery
operator|.
name|Builder
name|bq
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"A"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"Z"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|assertScore
argument_list|(
literal|1
operator|*
literal|1
operator|/
operator|(
literal|3f
operator|+
literal|1
operator|)
argument_list|,
name|bq
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testMixMatch2OutOfThree
specifier|public
name|void
name|testMixMatch2OutOfThree
parameter_list|()
throws|throws
name|Exception
block|{
name|BooleanQuery
operator|.
name|Builder
name|bq
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"A"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"B"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|assertScore
argument_list|(
literal|2
operator|*
literal|2
operator|/
operator|(
literal|3f
operator|+
literal|1
operator|)
argument_list|,
name|bq
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testMixMatch2OutOfThreeMissing
specifier|public
name|void
name|testMixMatch2OutOfThreeMissing
parameter_list|()
throws|throws
name|Exception
block|{
name|BooleanQuery
operator|.
name|Builder
name|bq
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"A"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"B"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"Z"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|assertScore
argument_list|(
literal|2
operator|*
literal|2
operator|/
operator|(
literal|3f
operator|+
literal|1
operator|)
argument_list|,
name|bq
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testMix2TermMatchesCoordDisabled
specifier|public
name|void
name|testMix2TermMatchesCoordDisabled
parameter_list|()
throws|throws
name|Exception
block|{
name|BooleanQuery
operator|.
name|Builder
name|bq
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|bq
operator|.
name|setDisableCoord
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"A"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"B"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|assertScore
argument_list|(
literal|2
argument_list|,
name|bq
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testMixMatch1OutOfTwoCoordDisabled
specifier|public
name|void
name|testMixMatch1OutOfTwoCoordDisabled
parameter_list|()
throws|throws
name|Exception
block|{
name|BooleanQuery
operator|.
name|Builder
name|bq
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|bq
operator|.
name|setDisableCoord
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"A"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|assertScore
argument_list|(
literal|1
argument_list|,
name|bq
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testMixMatch1OutOfTwoMissingCoordDisabled
specifier|public
name|void
name|testMixMatch1OutOfTwoMissingCoordDisabled
parameter_list|()
throws|throws
name|Exception
block|{
name|BooleanQuery
operator|.
name|Builder
name|bq
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|bq
operator|.
name|setDisableCoord
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"A"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"Z"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|assertScore
argument_list|(
literal|1
argument_list|,
name|bq
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testMixMatch1OutOfThreeCoordDisabled
specifier|public
name|void
name|testMixMatch1OutOfThreeCoordDisabled
parameter_list|()
throws|throws
name|Exception
block|{
name|BooleanQuery
operator|.
name|Builder
name|bq
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|bq
operator|.
name|setDisableCoord
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"A"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"2"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|assertScore
argument_list|(
literal|1
argument_list|,
name|bq
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testMixMatch1OutOfThreeOneMissingCoordDisabled
specifier|public
name|void
name|testMixMatch1OutOfThreeOneMissingCoordDisabled
parameter_list|()
throws|throws
name|Exception
block|{
name|BooleanQuery
operator|.
name|Builder
name|bq
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"A"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"Z"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|assertScore
argument_list|(
literal|1
operator|*
literal|1
operator|/
operator|(
literal|3f
operator|+
literal|1
operator|)
argument_list|,
name|bq
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testMixMatch2OutOfThreeCoordDisabled
specifier|public
name|void
name|testMixMatch2OutOfThreeCoordDisabled
parameter_list|()
throws|throws
name|Exception
block|{
name|BooleanQuery
operator|.
name|Builder
name|bq
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|bq
operator|.
name|setDisableCoord
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"A"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"B"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|assertScore
argument_list|(
literal|2
argument_list|,
name|bq
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testMixMatch2OutOfThreeMissingCoordDisabled
specifier|public
name|void
name|testMixMatch2OutOfThreeMissingCoordDisabled
parameter_list|()
throws|throws
name|Exception
block|{
name|BooleanQuery
operator|.
name|Builder
name|bq
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|bq
operator|.
name|setDisableCoord
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"A"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"B"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"Z"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|assertScore
argument_list|(
literal|2
argument_list|,
name|bq
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// min should match + mandatory mix
DECL|method|testMixMinShouldMatch2OutOfThree
specifier|public
name|void
name|testMixMinShouldMatch2OutOfThree
parameter_list|()
throws|throws
name|Exception
block|{
name|BooleanQuery
operator|.
name|Builder
name|bq
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|bq
operator|.
name|setMinimumNumberShouldMatch
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"A"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"B"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|assertScore
argument_list|(
literal|2
operator|*
literal|2
operator|/
operator|(
literal|3f
operator|+
literal|1
operator|)
argument_list|,
name|bq
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testMixMinShouldMatch2OutOfThreeMissing
specifier|public
name|void
name|testMixMinShouldMatch2OutOfThreeMissing
parameter_list|()
throws|throws
name|Exception
block|{
name|BooleanQuery
operator|.
name|Builder
name|bq
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|bq
operator|.
name|setMinimumNumberShouldMatch
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"A"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"B"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"Z"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|assertScore
argument_list|(
literal|2
operator|*
literal|2
operator|/
operator|(
literal|3f
operator|+
literal|1
operator|)
argument_list|,
name|bq
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testMixMinShouldMatch3OutOfFour
specifier|public
name|void
name|testMixMinShouldMatch3OutOfFour
parameter_list|()
throws|throws
name|Exception
block|{
name|BooleanQuery
operator|.
name|Builder
name|bq
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|bq
operator|.
name|setMinimumNumberShouldMatch
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"A"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"B"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"C"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|assertScore
argument_list|(
literal|3
operator|*
literal|3
operator|/
operator|(
literal|4f
operator|+
literal|1
operator|)
argument_list|,
name|bq
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testMixMinShouldMatch3OutOfFourMissing
specifier|public
name|void
name|testMixMinShouldMatch3OutOfFourMissing
parameter_list|()
throws|throws
name|Exception
block|{
name|BooleanQuery
operator|.
name|Builder
name|bq
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|bq
operator|.
name|setMinimumNumberShouldMatch
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"A"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"B"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"C"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"Z"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|assertScore
argument_list|(
literal|3
operator|*
literal|3
operator|/
operator|(
literal|4f
operator|+
literal|1
operator|)
argument_list|,
name|bq
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testMixMinShouldMatch2OutOfThreeCoordDisabled
specifier|public
name|void
name|testMixMinShouldMatch2OutOfThreeCoordDisabled
parameter_list|()
throws|throws
name|Exception
block|{
name|BooleanQuery
operator|.
name|Builder
name|bq
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|bq
operator|.
name|setDisableCoord
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|bq
operator|.
name|setMinimumNumberShouldMatch
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"A"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"B"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|assertScore
argument_list|(
literal|2
argument_list|,
name|bq
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testMixMinShouldMatch2OutOfThreeMissingCoordDisabled
specifier|public
name|void
name|testMixMinShouldMatch2OutOfThreeMissingCoordDisabled
parameter_list|()
throws|throws
name|Exception
block|{
name|BooleanQuery
operator|.
name|Builder
name|bq
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|bq
operator|.
name|setDisableCoord
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|bq
operator|.
name|setMinimumNumberShouldMatch
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"A"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"B"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"Z"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|assertScore
argument_list|(
literal|2
argument_list|,
name|bq
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testMixMinShouldMatch3OutOfFourCoordDisabled
specifier|public
name|void
name|testMixMinShouldMatch3OutOfFourCoordDisabled
parameter_list|()
throws|throws
name|Exception
block|{
name|BooleanQuery
operator|.
name|Builder
name|bq
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|bq
operator|.
name|setDisableCoord
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|bq
operator|.
name|setMinimumNumberShouldMatch
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"A"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"B"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"C"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|assertScore
argument_list|(
literal|3
argument_list|,
name|bq
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testMixMinShouldMatch3OutOfFourMissingCoordDisabled
specifier|public
name|void
name|testMixMinShouldMatch3OutOfFourMissingCoordDisabled
parameter_list|()
throws|throws
name|Exception
block|{
name|BooleanQuery
operator|.
name|Builder
name|bq
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|bq
operator|.
name|setDisableCoord
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|bq
operator|.
name|setMinimumNumberShouldMatch
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"A"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"B"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"C"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"Z"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|assertScore
argument_list|(
literal|3
argument_list|,
name|bq
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// nested cases, make sure conjunctions propagate scoring
DECL|method|testConjunctionNested
specifier|public
name|void
name|testConjunctionNested
parameter_list|()
throws|throws
name|Exception
block|{
name|BooleanQuery
operator|.
name|Builder
name|inner
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|inner
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"A"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|inner
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"B"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|BooleanQuery
operator|.
name|Builder
name|outer
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|outer
operator|.
name|add
argument_list|(
name|inner
operator|.
name|build
argument_list|()
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|outer
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"C"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|float
name|innerScore
init|=
operator|(
literal|1
operator|+
literal|1
operator|)
operator|*
literal|2
operator|/
operator|(
literal|2f
operator|+
literal|1
operator|)
decl_stmt|;
name|float
name|outerScore
init|=
operator|(
name|innerScore
operator|+
literal|1
operator|)
operator|*
literal|2
operator|/
operator|(
literal|2f
operator|+
literal|1
operator|)
decl_stmt|;
name|assertScore
argument_list|(
name|outerScore
argument_list|,
name|outer
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testConjunctionNestedOuterCoordDisabled
specifier|public
name|void
name|testConjunctionNestedOuterCoordDisabled
parameter_list|()
throws|throws
name|Exception
block|{
name|BooleanQuery
operator|.
name|Builder
name|inner
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|inner
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"A"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|inner
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"B"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|BooleanQuery
operator|.
name|Builder
name|outer
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|outer
operator|.
name|setDisableCoord
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|outer
operator|.
name|add
argument_list|(
name|inner
operator|.
name|build
argument_list|()
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|outer
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"C"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|float
name|innerScore
init|=
operator|(
literal|1
operator|+
literal|1
operator|)
operator|*
literal|2
operator|/
operator|(
literal|2f
operator|+
literal|1
operator|)
decl_stmt|;
name|float
name|outerScore
init|=
operator|(
name|innerScore
operator|+
literal|1
operator|)
decl_stmt|;
name|assertScore
argument_list|(
name|outerScore
argument_list|,
name|outer
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testConjunctionNestedInnerCoordDisabled
specifier|public
name|void
name|testConjunctionNestedInnerCoordDisabled
parameter_list|()
throws|throws
name|Exception
block|{
name|BooleanQuery
operator|.
name|Builder
name|inner
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|inner
operator|.
name|setDisableCoord
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|inner
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"A"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|inner
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"B"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|BooleanQuery
operator|.
name|Builder
name|outer
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|outer
operator|.
name|add
argument_list|(
name|inner
operator|.
name|build
argument_list|()
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|outer
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"C"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|float
name|innerScore
init|=
operator|(
literal|1
operator|+
literal|1
operator|)
decl_stmt|;
name|float
name|outerScore
init|=
operator|(
name|innerScore
operator|+
literal|1
operator|)
operator|*
literal|2
operator|/
operator|(
literal|2f
operator|+
literal|1
operator|)
decl_stmt|;
name|assertScore
argument_list|(
name|outerScore
argument_list|,
name|outer
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testConjunctionNestedCoordDisabledEverywhere
specifier|public
name|void
name|testConjunctionNestedCoordDisabledEverywhere
parameter_list|()
throws|throws
name|Exception
block|{
name|BooleanQuery
operator|.
name|Builder
name|inner
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|inner
operator|.
name|setDisableCoord
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|inner
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"A"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|inner
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"B"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|BooleanQuery
operator|.
name|Builder
name|outer
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|outer
operator|.
name|setDisableCoord
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|outer
operator|.
name|add
argument_list|(
name|inner
operator|.
name|build
argument_list|()
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|outer
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"C"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|float
name|innerScore
init|=
operator|(
literal|1
operator|+
literal|1
operator|)
decl_stmt|;
name|float
name|outerScore
init|=
operator|(
name|innerScore
operator|+
literal|1
operator|)
decl_stmt|;
name|assertScore
argument_list|(
name|outerScore
argument_list|,
name|outer
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testConjunctionNestedSingle
specifier|public
name|void
name|testConjunctionNestedSingle
parameter_list|()
throws|throws
name|Exception
block|{
name|BooleanQuery
operator|.
name|Builder
name|inner
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|inner
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"A"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|inner
operator|.
name|add
argument_list|(
name|term
argument_list|(
literal|"B"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|BooleanQuery
operator|.
name|Builder
name|outer
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|outer
operator|.
name|add
argument_list|(
name|inner
operator|.
name|build
argument_list|()
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|float
name|innerScore
init|=
operator|(
literal|1
operator|+
literal|1
operator|)
operator|*
literal|2
operator|/
operator|(
literal|2f
operator|+
literal|1
operator|)
decl_stmt|;
comment|// LUCENE-4300: coord(1,1) is always treated as 1
name|float
name|outerScore
init|=
name|innerScore
operator|*
literal|1
decl_stmt|;
name|assertScore
argument_list|(
name|outerScore
argument_list|,
name|outer
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/** asserts score for our single matching good doc */
DECL|method|assertScore
specifier|private
name|void
name|assertScore
parameter_list|(
specifier|final
name|float
name|expected
parameter_list|,
name|Query
name|query
parameter_list|)
throws|throws
name|Exception
block|{
comment|// test in-order
name|Weight
name|weight
init|=
name|searcher
operator|.
name|createNormalizedWeight
argument_list|(
name|query
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Scorer
name|scorer
init|=
name|weight
operator|.
name|scorer
argument_list|(
name|reader
operator|.
name|leaves
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|scorer
operator|.
name|docID
argument_list|()
operator|==
operator|-
literal|1
operator|||
name|scorer
operator|.
name|docID
argument_list|()
operator|==
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|scorer
operator|.
name|iterator
argument_list|()
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|scorer
operator|.
name|score
argument_list|()
argument_list|,
literal|0.0001f
argument_list|)
expr_stmt|;
comment|// test bulk scorer
specifier|final
name|AtomicBoolean
name|seen
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|BulkScorer
name|bulkScorer
init|=
name|weight
operator|.
name|bulkScorer
argument_list|(
name|reader
operator|.
name|leaves
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|bulkScorer
argument_list|)
expr_stmt|;
name|bulkScorer
operator|.
name|score
argument_list|(
operator|new
name|LeafCollector
argument_list|()
block|{
name|Scorer
name|scorer
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|setScorer
parameter_list|(
name|Scorer
name|scorer
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|scorer
operator|=
name|scorer
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|collect
parameter_list|(
name|int
name|doc
parameter_list|)
throws|throws
name|IOException
block|{
name|assertFalse
argument_list|(
name|seen
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|doc
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|scorer
operator|.
name|score
argument_list|()
argument_list|,
literal|0.0001f
argument_list|)
expr_stmt|;
name|seen
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|seen
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
comment|// test the explanation
name|Explanation
name|expl
init|=
name|weight
operator|.
name|explain
argument_list|(
name|reader
operator|.
name|leaves
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|expl
operator|.
name|getValue
argument_list|()
argument_list|,
literal|0.0001f
argument_list|)
expr_stmt|;
block|}
DECL|method|term
specifier|private
name|Query
name|term
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
name|s
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class
end_unit
