begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.search
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Analyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|MockTokenizer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Tokenizer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DirectoryReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|RandomIndexWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|TestUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_class
DECL|class|FuzzyTermOnShortTermsTest
specifier|public
class|class
name|FuzzyTermOnShortTermsTest
extends|extends
name|LuceneTestCase
block|{
DECL|field|FIELD
specifier|private
specifier|final
specifier|static
name|String
name|FIELD
init|=
literal|"field"
decl_stmt|;
annotation|@
name|Test
DECL|method|test
specifier|public
name|void
name|test
parameter_list|()
throws|throws
name|Exception
block|{
comment|// proves rule that edit distance between the two terms
comment|// must be> smaller term for there to be a match
name|Analyzer
name|a
init|=
name|getAnalyzer
argument_list|()
decl_stmt|;
comment|//these work
name|countHits
argument_list|(
name|a
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"abc"
block|}
argument_list|,
operator|new
name|FuzzyQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|FIELD
argument_list|,
literal|"ab"
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|countHits
argument_list|(
name|a
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"ab"
block|}
argument_list|,
operator|new
name|FuzzyQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|FIELD
argument_list|,
literal|"abc"
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|countHits
argument_list|(
name|a
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"abcde"
block|}
argument_list|,
operator|new
name|FuzzyQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|FIELD
argument_list|,
literal|"abc"
argument_list|)
argument_list|,
literal|2
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|countHits
argument_list|(
name|a
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"abc"
block|}
argument_list|,
operator|new
name|FuzzyQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|FIELD
argument_list|,
literal|"abcde"
argument_list|)
argument_list|,
literal|2
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|//these don't
name|countHits
argument_list|(
name|a
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"ab"
block|}
argument_list|,
operator|new
name|FuzzyQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|FIELD
argument_list|,
literal|"a"
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|countHits
argument_list|(
name|a
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"a"
block|}
argument_list|,
operator|new
name|FuzzyQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|FIELD
argument_list|,
literal|"ab"
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|countHits
argument_list|(
name|a
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"abc"
block|}
argument_list|,
operator|new
name|FuzzyQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|FIELD
argument_list|,
literal|"a"
argument_list|)
argument_list|,
literal|2
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|countHits
argument_list|(
name|a
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"a"
block|}
argument_list|,
operator|new
name|FuzzyQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|FIELD
argument_list|,
literal|"abc"
argument_list|)
argument_list|,
literal|2
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|countHits
argument_list|(
name|a
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"abcd"
block|}
argument_list|,
operator|new
name|FuzzyQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|FIELD
argument_list|,
literal|"ab"
argument_list|)
argument_list|,
literal|2
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|countHits
argument_list|(
name|a
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"ab"
block|}
argument_list|,
operator|new
name|FuzzyQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|FIELD
argument_list|,
literal|"abcd"
argument_list|)
argument_list|,
literal|2
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|countHits
specifier|private
name|void
name|countHits
parameter_list|(
name|Analyzer
name|analyzer
parameter_list|,
name|String
index|[]
name|docs
parameter_list|,
name|Query
name|q
parameter_list|,
name|int
name|expected
parameter_list|)
throws|throws
name|Exception
block|{
name|Directory
name|d
init|=
name|getDirectory
argument_list|(
name|analyzer
argument_list|,
name|docs
argument_list|)
decl_stmt|;
name|IndexReader
name|r
init|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|d
argument_list|)
decl_stmt|;
name|IndexSearcher
name|s
init|=
operator|new
name|IndexSearcher
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|TotalHitCountCollector
name|c
init|=
operator|new
name|TotalHitCountCollector
argument_list|()
decl_stmt|;
name|s
operator|.
name|search
argument_list|(
name|q
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|q
operator|.
name|toString
argument_list|()
argument_list|,
name|expected
argument_list|,
name|c
operator|.
name|getTotalHits
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
name|d
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|getAnalyzer
specifier|public
specifier|static
name|Analyzer
name|getAnalyzer
parameter_list|()
block|{
return|return
operator|new
name|Analyzer
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|TokenStreamComponents
name|createComponents
parameter_list|(
name|String
name|fieldName
parameter_list|)
block|{
name|Tokenizer
name|tokenizer
init|=
operator|new
name|MockTokenizer
argument_list|(
name|MockTokenizer
operator|.
name|SIMPLE
argument_list|,
literal|true
argument_list|)
decl_stmt|;
return|return
operator|new
name|TokenStreamComponents
argument_list|(
name|tokenizer
argument_list|,
name|tokenizer
argument_list|)
return|;
block|}
block|}
return|;
block|}
DECL|method|getDirectory
specifier|public
specifier|static
name|Directory
name|getDirectory
parameter_list|(
name|Analyzer
name|analyzer
parameter_list|,
name|String
index|[]
name|vals
parameter_list|)
throws|throws
name|IOException
block|{
name|Directory
name|directory
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|RandomIndexWriter
name|writer
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|directory
argument_list|,
name|newIndexWriterConfig
argument_list|(
name|analyzer
argument_list|)
operator|.
name|setMaxBufferedDocs
argument_list|(
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|100
argument_list|,
literal|1000
argument_list|)
argument_list|)
operator|.
name|setMergePolicy
argument_list|(
name|newLogMergePolicy
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|vals
control|)
block|{
name|Document
name|d
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|d
operator|.
name|add
argument_list|(
name|newTextField
argument_list|(
name|FIELD
argument_list|,
name|s
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|directory
return|;
block|}
block|}
end_class
end_unit
