begin_unit
begin_package
DECL|package|org.apache.lucene.search
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
operator|.
name|Store
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|StringField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DirectoryReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriterConfig
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReaderContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|RandomIndexWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SerialMergeScheduler
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Bits
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|RamUsageTester
import|;
end_import
begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|generators
operator|.
name|RandomPicks
import|;
end_import
begin_class
DECL|class|TestLRUFilterCache
specifier|public
class|class
name|TestLRUFilterCache
extends|extends
name|LuceneTestCase
block|{
DECL|field|NEVER_CACHE
specifier|private
specifier|static
specifier|final
name|FilterCachingPolicy
name|NEVER_CACHE
init|=
operator|new
name|FilterCachingPolicy
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onCache
parameter_list|(
name|Filter
name|filter
parameter_list|)
block|{}
annotation|@
name|Override
specifier|public
name|boolean
name|shouldCache
parameter_list|(
name|Filter
name|filter
parameter_list|,
name|LeafReaderContext
name|context
parameter_list|,
name|DocIdSet
name|set
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|false
return|;
block|}
block|}
decl_stmt|;
DECL|method|testFilterRamBytesUsed
specifier|public
name|void
name|testFilterRamBytesUsed
parameter_list|()
block|{
specifier|final
name|Filter
name|simpleFilter
init|=
operator|new
name|QueryWrapperFilter
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"some_field"
argument_list|,
literal|"some_term"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|long
name|actualRamBytesUsed
init|=
name|RamUsageTester
operator|.
name|sizeOf
argument_list|(
name|simpleFilter
argument_list|)
decl_stmt|;
specifier|final
name|long
name|ramBytesUsed
init|=
name|LRUFilterCache
operator|.
name|FILTER_DEFAULT_RAM_BYTES_USED
decl_stmt|;
comment|// we cannot assert exactly that the constant is correct since actual
comment|// memory usage depends on JVM implementations and settings (eg. UseCompressedOops)
name|assertEquals
argument_list|(
name|actualRamBytesUsed
argument_list|,
name|ramBytesUsed
argument_list|,
name|actualRamBytesUsed
operator|/
literal|2
argument_list|)
expr_stmt|;
block|}
DECL|method|testConcurrency
specifier|public
name|void
name|testConcurrency
parameter_list|()
throws|throws
name|Throwable
block|{
specifier|final
name|LRUFilterCache
name|filterCache
init|=
operator|new
name|LRUFilterCache
argument_list|(
literal|1
operator|+
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|20
argument_list|)
argument_list|,
literal|1
operator|+
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|10000
argument_list|)
argument_list|)
decl_stmt|;
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
specifier|final
name|RandomIndexWriter
name|w
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|)
decl_stmt|;
name|SearcherManager
name|mgr
init|=
operator|new
name|SearcherManager
argument_list|(
name|w
operator|.
name|w
argument_list|,
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
argument_list|,
operator|new
name|SearcherFactory
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|AtomicBoolean
name|indexing
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|true
argument_list|)
decl_stmt|;
specifier|final
name|AtomicReference
argument_list|<
name|Throwable
argument_list|>
name|error
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|int
name|numDocs
init|=
name|atLeast
argument_list|(
literal|10000
argument_list|)
decl_stmt|;
name|Thread
index|[]
name|threads
init|=
operator|new
name|Thread
index|[
literal|3
index|]
decl_stmt|;
name|threads
index|[
literal|0
index|]
operator|=
operator|new
name|Thread
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|StringField
name|f
init|=
operator|new
name|StringField
argument_list|(
literal|"color"
argument_list|,
literal|""
argument_list|,
name|Store
operator|.
name|NO
argument_list|)
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|f
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|indexing
operator|.
name|get
argument_list|()
operator|&&
name|i
operator|<
name|numDocs
condition|;
operator|++
name|i
control|)
block|{
name|f
operator|.
name|setStringValue
argument_list|(
name|RandomPicks
operator|.
name|randomFrom
argument_list|(
name|random
argument_list|()
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"blue"
block|,
literal|"red"
block|,
literal|"yellow"
block|}
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|i
operator|&
literal|63
operator|)
operator|==
literal|0
condition|)
block|{
name|mgr
operator|.
name|maybeRefresh
argument_list|()
expr_stmt|;
if|if
condition|(
name|rarely
argument_list|()
condition|)
block|{
name|filterCache
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|rarely
argument_list|()
condition|)
block|{
specifier|final
name|String
name|color
init|=
name|RandomPicks
operator|.
name|randomFrom
argument_list|(
name|random
argument_list|()
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"blue"
block|,
literal|"red"
block|,
literal|"yellow"
block|}
argument_list|)
decl_stmt|;
name|w
operator|.
name|deleteDocuments
argument_list|(
operator|new
name|Term
argument_list|(
literal|"color"
argument_list|,
name|color
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|error
operator|.
name|compareAndSet
argument_list|(
literal|null
argument_list|,
name|t
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
name|indexing
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|threads
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|threads
index|[
name|i
index|]
operator|=
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
while|while
condition|(
name|indexing
operator|.
name|get
argument_list|()
condition|)
block|{
try|try
block|{
specifier|final
name|IndexSearcher
name|searcher
init|=
name|mgr
operator|.
name|acquire
argument_list|()
decl_stmt|;
try|try
block|{
specifier|final
name|String
name|value
init|=
name|RandomPicks
operator|.
name|randomFrom
argument_list|(
name|random
argument_list|()
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"blue"
block|,
literal|"red"
block|,
literal|"yellow"
block|,
literal|"green"
block|}
argument_list|)
decl_stmt|;
specifier|final
name|Filter
name|f
init|=
operator|new
name|QueryWrapperFilter
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"color"
argument_list|,
name|value
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|Filter
name|cached
init|=
name|filterCache
operator|.
name|doCache
argument_list|(
name|f
argument_list|,
name|MAYBE_CACHE_POLICY
argument_list|)
decl_stmt|;
name|TotalHitCountCollector
name|collector
init|=
operator|new
name|TotalHitCountCollector
argument_list|()
decl_stmt|;
name|searcher
operator|.
name|search
argument_list|(
operator|new
name|ConstantScoreQuery
argument_list|(
name|cached
argument_list|)
argument_list|,
name|collector
argument_list|)
expr_stmt|;
name|TotalHitCountCollector
name|collector2
init|=
operator|new
name|TotalHitCountCollector
argument_list|()
decl_stmt|;
name|searcher
operator|.
name|search
argument_list|(
operator|new
name|ConstantScoreQuery
argument_list|(
name|f
argument_list|)
argument_list|,
name|collector2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|collector
operator|.
name|getTotalHits
argument_list|()
argument_list|,
name|collector2
operator|.
name|getTotalHits
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|mgr
operator|.
name|release
argument_list|(
name|searcher
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|error
operator|.
name|compareAndSet
argument_list|(
literal|null
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
expr_stmt|;
block|}
for|for
control|(
name|Thread
name|thread
range|:
name|threads
control|)
block|{
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|Thread
name|thread
range|:
name|threads
control|)
block|{
name|thread
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|error
operator|.
name|get
argument_list|()
operator|!=
literal|null
condition|)
block|{
throw|throw
name|error
operator|.
name|get
argument_list|()
throw|;
block|}
name|filterCache
operator|.
name|assertConsistent
argument_list|()
expr_stmt|;
name|mgr
operator|.
name|close
argument_list|()
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
name|filterCache
operator|.
name|assertConsistent
argument_list|()
expr_stmt|;
block|}
DECL|method|testLRUEviction
specifier|public
name|void
name|testLRUEviction
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
specifier|final
name|RandomIndexWriter
name|w
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|StringField
name|f
init|=
operator|new
name|StringField
argument_list|(
literal|"color"
argument_list|,
literal|"blue"
argument_list|,
name|Store
operator|.
name|NO
argument_list|)
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|f
operator|.
name|setStringValue
argument_list|(
literal|"red"
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|f
operator|.
name|setStringValue
argument_list|(
literal|"green"
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
specifier|final
name|DirectoryReader
name|reader
init|=
name|w
operator|.
name|getReader
argument_list|()
decl_stmt|;
specifier|final
name|IndexSearcher
name|searcher
init|=
name|newSearcher
argument_list|(
name|reader
argument_list|)
decl_stmt|;
specifier|final
name|LRUFilterCache
name|filterCache
init|=
operator|new
name|LRUFilterCache
argument_list|(
literal|2
argument_list|,
literal|100000
argument_list|)
decl_stmt|;
specifier|final
name|Filter
name|blue
init|=
operator|new
name|QueryWrapperFilter
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"color"
argument_list|,
literal|"blue"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|Filter
name|red
init|=
operator|new
name|QueryWrapperFilter
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"color"
argument_list|,
literal|"red"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|Filter
name|green
init|=
operator|new
name|QueryWrapperFilter
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"color"
argument_list|,
literal|"green"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|filterCache
operator|.
name|cachedFilters
argument_list|()
argument_list|)
expr_stmt|;
comment|// the filter is not cached on any segment: no changes
name|searcher
operator|.
name|search
argument_list|(
operator|new
name|ConstantScoreQuery
argument_list|(
name|filterCache
operator|.
name|doCache
argument_list|(
name|green
argument_list|,
name|NEVER_CACHE
argument_list|)
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|filterCache
operator|.
name|cachedFilters
argument_list|()
argument_list|)
expr_stmt|;
name|searcher
operator|.
name|search
argument_list|(
operator|new
name|ConstantScoreQuery
argument_list|(
name|filterCache
operator|.
name|doCache
argument_list|(
name|red
argument_list|,
name|FilterCachingPolicy
operator|.
name|ALWAYS_CACHE
argument_list|)
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|red
argument_list|)
argument_list|,
name|filterCache
operator|.
name|cachedFilters
argument_list|()
argument_list|)
expr_stmt|;
name|searcher
operator|.
name|search
argument_list|(
operator|new
name|ConstantScoreQuery
argument_list|(
name|filterCache
operator|.
name|doCache
argument_list|(
name|green
argument_list|,
name|FilterCachingPolicy
operator|.
name|ALWAYS_CACHE
argument_list|)
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|red
argument_list|,
name|green
argument_list|)
argument_list|,
name|filterCache
operator|.
name|cachedFilters
argument_list|()
argument_list|)
expr_stmt|;
name|searcher
operator|.
name|search
argument_list|(
operator|new
name|ConstantScoreQuery
argument_list|(
name|filterCache
operator|.
name|doCache
argument_list|(
name|red
argument_list|,
name|FilterCachingPolicy
operator|.
name|ALWAYS_CACHE
argument_list|)
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|green
argument_list|,
name|red
argument_list|)
argument_list|,
name|filterCache
operator|.
name|cachedFilters
argument_list|()
argument_list|)
expr_stmt|;
name|searcher
operator|.
name|search
argument_list|(
operator|new
name|ConstantScoreQuery
argument_list|(
name|filterCache
operator|.
name|doCache
argument_list|(
name|blue
argument_list|,
name|FilterCachingPolicy
operator|.
name|ALWAYS_CACHE
argument_list|)
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|red
argument_list|,
name|blue
argument_list|)
argument_list|,
name|filterCache
operator|.
name|cachedFilters
argument_list|()
argument_list|)
expr_stmt|;
name|searcher
operator|.
name|search
argument_list|(
operator|new
name|ConstantScoreQuery
argument_list|(
name|filterCache
operator|.
name|doCache
argument_list|(
name|blue
argument_list|,
name|FilterCachingPolicy
operator|.
name|ALWAYS_CACHE
argument_list|)
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|red
argument_list|,
name|blue
argument_list|)
argument_list|,
name|filterCache
operator|.
name|cachedFilters
argument_list|()
argument_list|)
expr_stmt|;
name|searcher
operator|.
name|search
argument_list|(
operator|new
name|ConstantScoreQuery
argument_list|(
name|filterCache
operator|.
name|doCache
argument_list|(
name|green
argument_list|,
name|FilterCachingPolicy
operator|.
name|ALWAYS_CACHE
argument_list|)
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|blue
argument_list|,
name|green
argument_list|)
argument_list|,
name|filterCache
operator|.
name|cachedFilters
argument_list|()
argument_list|)
expr_stmt|;
name|searcher
operator|.
name|search
argument_list|(
operator|new
name|ConstantScoreQuery
argument_list|(
name|filterCache
operator|.
name|doCache
argument_list|(
name|red
argument_list|,
name|NEVER_CACHE
argument_list|)
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|blue
argument_list|,
name|green
argument_list|)
argument_list|,
name|filterCache
operator|.
name|cachedFilters
argument_list|()
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testCache
specifier|public
name|void
name|testCache
parameter_list|()
throws|throws
name|IOException
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
specifier|final
name|RandomIndexWriter
name|w
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|StringField
name|f
init|=
operator|new
name|StringField
argument_list|(
literal|"color"
argument_list|,
literal|""
argument_list|,
name|Store
operator|.
name|NO
argument_list|)
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|f
argument_list|)
expr_stmt|;
specifier|final
name|int
name|numDocs
init|=
name|atLeast
argument_list|(
literal|10
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
operator|++
name|i
control|)
block|{
name|f
operator|.
name|setStringValue
argument_list|(
name|RandomPicks
operator|.
name|randomFrom
argument_list|(
name|random
argument_list|()
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"blue"
argument_list|,
literal|"red"
argument_list|,
literal|"green"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
specifier|final
name|DirectoryReader
name|reader
init|=
name|w
operator|.
name|getReader
argument_list|()
decl_stmt|;
specifier|final
name|LeafReaderContext
name|leaf1
init|=
name|reader
operator|.
name|leaves
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Filter
name|filter1
init|=
operator|new
name|QueryWrapperFilter
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"color"
argument_list|,
literal|"blue"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
comment|// different instance yet equal
name|Filter
name|filter2
init|=
operator|new
name|QueryWrapperFilter
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"color"
argument_list|,
literal|"blue"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|LRUFilterCache
name|filterCache
init|=
operator|new
name|LRUFilterCache
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
specifier|final
name|Filter
name|cachedFilter1
init|=
name|filterCache
operator|.
name|doCache
argument_list|(
name|filter1
argument_list|,
name|FilterCachingPolicy
operator|.
name|ALWAYS_CACHE
argument_list|)
decl_stmt|;
name|DocIdSet
name|cached1
init|=
name|cachedFilter1
operator|.
name|getDocIdSet
argument_list|(
name|leaf1
argument_list|,
literal|null
argument_list|)
decl_stmt|;
specifier|final
name|Filter
name|cachedFilter2
init|=
name|filterCache
operator|.
name|doCache
argument_list|(
name|filter2
argument_list|,
name|NEVER_CACHE
argument_list|)
decl_stmt|;
name|DocIdSet
name|cached2
init|=
name|cachedFilter2
operator|.
name|getDocIdSet
argument_list|(
name|leaf1
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|cached1
argument_list|,
name|cached2
argument_list|)
expr_stmt|;
name|filterCache
operator|.
name|assertConsistent
argument_list|()
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testClearFilter
specifier|public
name|void
name|testClearFilter
parameter_list|()
throws|throws
name|IOException
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
specifier|final
name|RandomIndexWriter
name|w
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|StringField
name|f
init|=
operator|new
name|StringField
argument_list|(
literal|"color"
argument_list|,
literal|""
argument_list|,
name|Store
operator|.
name|NO
argument_list|)
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|f
argument_list|)
expr_stmt|;
specifier|final
name|int
name|numDocs
init|=
name|atLeast
argument_list|(
literal|10
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
operator|++
name|i
control|)
block|{
name|f
operator|.
name|setStringValue
argument_list|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
literal|"red"
else|:
literal|"blue"
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
specifier|final
name|DirectoryReader
name|reader
init|=
name|w
operator|.
name|getReader
argument_list|()
decl_stmt|;
specifier|final
name|LeafReaderContext
name|leaf1
init|=
name|reader
operator|.
name|leaves
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|Filter
name|filter1
init|=
operator|new
name|QueryWrapperFilter
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"color"
argument_list|,
literal|"blue"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
comment|// different instance yet equal
specifier|final
name|Filter
name|filter2
init|=
operator|new
name|QueryWrapperFilter
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"color"
argument_list|,
literal|"blue"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|LRUFilterCache
name|filterCache
init|=
operator|new
name|LRUFilterCache
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
specifier|final
name|Filter
name|cachedFilter1
init|=
name|filterCache
operator|.
name|doCache
argument_list|(
name|filter1
argument_list|,
name|FilterCachingPolicy
operator|.
name|ALWAYS_CACHE
argument_list|)
decl_stmt|;
name|cachedFilter1
operator|.
name|getDocIdSet
argument_list|(
name|leaf1
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|filterCache
operator|.
name|clearFilter
argument_list|(
name|filter2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|filterCache
operator|.
name|cachedFilters
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|filterCache
operator|.
name|assertConsistent
argument_list|()
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// This test makes sure that by making the same assumptions as LRUFilterCache, RAMUsageTester
comment|// computes the same memory usage.
DECL|method|testRamBytesUsedAgreesWithRamUsageTester
specifier|public
name|void
name|testRamBytesUsedAgreesWithRamUsageTester
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|LRUFilterCache
name|filterCache
init|=
operator|new
name|LRUFilterCache
argument_list|(
literal|1
operator|+
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|5
argument_list|)
argument_list|,
literal|1
operator|+
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|10000
argument_list|)
argument_list|)
decl_stmt|;
comment|// an accumulator that only sums up memory usage of referenced filters and doc id sets
specifier|final
name|RamUsageTester
operator|.
name|Accumulator
name|acc
init|=
operator|new
name|RamUsageTester
operator|.
name|Accumulator
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|long
name|accumulateObject
parameter_list|(
name|Object
name|o
parameter_list|,
name|long
name|shallowSize
parameter_list|,
name|Map
argument_list|<
name|Field
argument_list|,
name|Object
argument_list|>
name|fieldValues
parameter_list|,
name|Collection
argument_list|<
name|Object
argument_list|>
name|queue
parameter_list|)
block|{
if|if
condition|(
name|o
operator|instanceof
name|DocIdSet
condition|)
block|{
return|return
operator|(
operator|(
name|DocIdSet
operator|)
name|o
operator|)
operator|.
name|ramBytesUsed
argument_list|()
return|;
block|}
if|if
condition|(
name|o
operator|instanceof
name|Filter
condition|)
block|{
return|return
name|filterCache
operator|.
name|ramBytesUsed
argument_list|(
operator|(
name|Filter
operator|)
name|o
argument_list|)
return|;
block|}
if|if
condition|(
name|o
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"SegmentCoreReaders"
argument_list|)
condition|)
block|{
comment|// do not take core cache keys into account
return|return
literal|0
return|;
block|}
if|if
condition|(
name|o
operator|instanceof
name|Map
condition|)
block|{
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|map
init|=
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|o
decl_stmt|;
name|queue
operator|.
name|addAll
argument_list|(
name|map
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
name|queue
operator|.
name|addAll
argument_list|(
name|map
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|long
name|sizePerEntry
init|=
name|o
operator|instanceof
name|LinkedHashMap
condition|?
name|LRUFilterCache
operator|.
name|LINKED_HASHTABLE_RAM_BYTES_PER_ENTRY
else|:
name|LRUFilterCache
operator|.
name|HASHTABLE_RAM_BYTES_PER_ENTRY
decl_stmt|;
return|return
name|sizePerEntry
operator|*
name|map
operator|.
name|size
argument_list|()
return|;
block|}
comment|// follow links to other objects, but ignore their memory usage
name|super
operator|.
name|accumulateObject
argument_list|(
name|o
argument_list|,
name|shallowSize
argument_list|,
name|fieldValues
argument_list|,
name|queue
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|accumulateArray
parameter_list|(
name|Object
name|array
parameter_list|,
name|long
name|shallowSize
parameter_list|,
name|List
argument_list|<
name|Object
argument_list|>
name|values
parameter_list|,
name|Collection
argument_list|<
name|Object
argument_list|>
name|queue
parameter_list|)
block|{
comment|// follow links to other objects, but ignore their memory usage
name|super
operator|.
name|accumulateArray
argument_list|(
name|array
argument_list|,
name|shallowSize
argument_list|,
name|values
argument_list|,
name|queue
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
block|}
decl_stmt|;
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
comment|// serial merges so that segments do not get closed while we are measuring ram usage
comment|// with RamUsageTester
name|IndexWriterConfig
name|iwc
init|=
name|newIndexWriterConfig
argument_list|()
operator|.
name|setMergeScheduler
argument_list|(
operator|new
name|SerialMergeScheduler
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|RandomIndexWriter
name|w
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|,
name|iwc
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|colors
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"blue"
argument_list|,
literal|"red"
argument_list|,
literal|"green"
argument_list|,
literal|"yellow"
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|StringField
name|f
init|=
operator|new
name|StringField
argument_list|(
literal|"color"
argument_list|,
literal|""
argument_list|,
name|Store
operator|.
name|NO
argument_list|)
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|f
argument_list|)
expr_stmt|;
specifier|final
name|int
name|iters
init|=
name|atLeast
argument_list|(
literal|5
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|iter
init|=
literal|0
init|;
name|iter
operator|<
name|iters
condition|;
operator|++
name|iter
control|)
block|{
specifier|final
name|int
name|numDocs
init|=
name|atLeast
argument_list|(
literal|10
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
operator|++
name|i
control|)
block|{
name|f
operator|.
name|setStringValue
argument_list|(
name|RandomPicks
operator|.
name|randomFrom
argument_list|(
name|random
argument_list|()
argument_list|,
name|colors
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
try|try
init|(
specifier|final
name|DirectoryReader
name|reader
init|=
name|w
operator|.
name|getReader
argument_list|()
init|)
block|{
specifier|final
name|IndexSearcher
name|searcher
init|=
operator|new
name|IndexSearcher
argument_list|(
name|reader
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
operator|++
name|i
control|)
block|{
specifier|final
name|Filter
name|filter
init|=
operator|new
name|QueryWrapperFilter
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"color"
argument_list|,
name|RandomPicks
operator|.
name|randomFrom
argument_list|(
name|random
argument_list|()
argument_list|,
name|colors
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|searcher
operator|.
name|search
argument_list|(
operator|new
name|ConstantScoreQuery
argument_list|(
name|filterCache
operator|.
name|doCache
argument_list|(
name|filter
argument_list|,
name|MAYBE_CACHE_POLICY
argument_list|)
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
name|filterCache
operator|.
name|assertConsistent
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|RamUsageTester
operator|.
name|sizeOf
argument_list|(
name|filterCache
argument_list|,
name|acc
argument_list|)
argument_list|,
name|filterCache
operator|.
name|ramBytesUsed
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/** A filter that produces empty sets. */
DECL|class|DummyFilter
specifier|private
specifier|static
class|class
name|DummyFilter
extends|extends
name|Filter
block|{
annotation|@
name|Override
DECL|method|getDocIdSet
specifier|public
name|DocIdSet
name|getDocIdSet
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|,
name|Bits
name|acceptDocs
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|null
return|;
block|}
block|}
comment|// Test what happens when the cache contains only filters and doc id sets
comment|// that require very little memory. In that case most of the memory is taken
comment|// by the cache itself, not cache entries, and we want to make sure that
comment|// memory usage is not grossly underestimated.
DECL|method|testRamBytesUsedConstantEntryOverhead
specifier|public
name|void
name|testRamBytesUsedConstantEntryOverhead
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|LRUFilterCache
name|filterCache
init|=
operator|new
name|LRUFilterCache
argument_list|(
literal|1000000
argument_list|,
literal|10000000
argument_list|)
decl_stmt|;
specifier|final
name|RamUsageTester
operator|.
name|Accumulator
name|acc
init|=
operator|new
name|RamUsageTester
operator|.
name|Accumulator
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|long
name|accumulateObject
parameter_list|(
name|Object
name|o
parameter_list|,
name|long
name|shallowSize
parameter_list|,
name|Map
argument_list|<
name|Field
argument_list|,
name|Object
argument_list|>
name|fieldValues
parameter_list|,
name|Collection
argument_list|<
name|Object
argument_list|>
name|queue
parameter_list|)
block|{
if|if
condition|(
name|o
operator|instanceof
name|DocIdSet
condition|)
block|{
return|return
operator|(
operator|(
name|DocIdSet
operator|)
name|o
operator|)
operator|.
name|ramBytesUsed
argument_list|()
return|;
block|}
if|if
condition|(
name|o
operator|instanceof
name|Filter
condition|)
block|{
return|return
name|filterCache
operator|.
name|ramBytesUsed
argument_list|(
operator|(
name|Filter
operator|)
name|o
argument_list|)
return|;
block|}
if|if
condition|(
name|o
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"SegmentCoreReaders"
argument_list|)
condition|)
block|{
comment|// do not follow references to core cache keys
return|return
literal|0
return|;
block|}
return|return
name|super
operator|.
name|accumulateObject
argument_list|(
name|o
argument_list|,
name|shallowSize
argument_list|,
name|fieldValues
argument_list|,
name|queue
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
specifier|final
name|RandomIndexWriter
name|w
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
specifier|final
name|int
name|numDocs
init|=
name|atLeast
argument_list|(
literal|100
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
operator|++
name|i
control|)
block|{
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
specifier|final
name|DirectoryReader
name|reader
init|=
name|w
operator|.
name|getReader
argument_list|()
decl_stmt|;
specifier|final
name|IndexSearcher
name|searcher
init|=
operator|new
name|IndexSearcher
argument_list|(
name|reader
argument_list|)
decl_stmt|;
specifier|final
name|int
name|numFilters
init|=
name|atLeast
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numFilters
condition|;
operator|++
name|i
control|)
block|{
specifier|final
name|Filter
name|filter
init|=
operator|new
name|DummyFilter
argument_list|()
decl_stmt|;
specifier|final
name|Filter
name|cached
init|=
name|filterCache
operator|.
name|doCache
argument_list|(
name|filter
argument_list|,
name|FilterCachingPolicy
operator|.
name|ALWAYS_CACHE
argument_list|)
decl_stmt|;
name|searcher
operator|.
name|search
argument_list|(
operator|new
name|ConstantScoreQuery
argument_list|(
name|cached
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
specifier|final
name|long
name|actualRamBytesUsed
init|=
name|RamUsageTester
operator|.
name|sizeOf
argument_list|(
name|filterCache
argument_list|,
name|acc
argument_list|)
decl_stmt|;
specifier|final
name|long
name|expectedRamBytesUsed
init|=
name|filterCache
operator|.
name|ramBytesUsed
argument_list|()
decl_stmt|;
comment|// error< 30%
name|assertEquals
argument_list|(
name|actualRamBytesUsed
argument_list|,
name|expectedRamBytesUsed
argument_list|,
literal|30
operator|*
name|actualRamBytesUsed
operator|/
literal|100
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class
end_unit
