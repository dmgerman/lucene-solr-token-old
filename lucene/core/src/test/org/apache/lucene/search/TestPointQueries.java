begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.search
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|BitSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NoSuchElementException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|MockAnalyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|Codec
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|FilterCodec
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|PointsFormat
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|PointsReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|PointsWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|lucene60
operator|.
name|Lucene60PointsReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|lucene60
operator|.
name|Lucene60PointsWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|BinaryPoint
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|DoublePoint
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|FloatPoint
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|IntPoint
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|LongPoint
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|NumericDocValuesField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|SortedNumericDocValuesField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|StringField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DirectoryReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriterConfig
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReaderContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|MultiDocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|NumericDocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|PointValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|RandomIndexWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SegmentReadState
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SegmentWriteState
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|NumericUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|StringHelper
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|TestUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import
begin_class
DECL|class|TestPointQueries
specifier|public
class|class
name|TestPointQueries
extends|extends
name|LuceneTestCase
block|{
comment|// Controls what range of values we randomly generate, so we sometimes test narrow ranges:
DECL|field|valueMid
specifier|static
name|long
name|valueMid
decl_stmt|;
DECL|field|valueRange
specifier|static
name|int
name|valueRange
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|beforeClass
specifier|public
specifier|static
name|void
name|beforeClass
parameter_list|()
block|{
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|valueMid
operator|=
name|random
argument_list|()
operator|.
name|nextLong
argument_list|()
expr_stmt|;
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
comment|// Wide range
name|valueRange
operator|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Narrow range
name|valueRange
operator|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|100000
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TEST: will generate long values "
operator|+
name|valueMid
operator|+
literal|" +/- "
operator|+
name|valueRange
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// All longs
name|valueRange
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TEST: will generate all long values"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testBasicInts
specifier|public
name|void
name|testBasicInts
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|w
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|IntPoint
argument_list|(
literal|"point"
argument_list|,
operator|-
literal|7
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|IntPoint
argument_list|(
literal|"point"
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|IntPoint
argument_list|(
literal|"point"
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|DirectoryReader
name|r
init|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|w
argument_list|)
decl_stmt|;
name|IndexSearcher
name|s
init|=
operator|new
name|IndexSearcher
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|IntPoint
operator|.
name|newRangeQuery
argument_list|(
literal|"point"
argument_list|,
operator|-
literal|8
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|IntPoint
operator|.
name|newRangeQuery
argument_list|(
literal|"point"
argument_list|,
operator|-
literal|7
argument_list|,
literal|3
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|IntPoint
operator|.
name|newExactQuery
argument_list|(
literal|"point"
argument_list|,
operator|-
literal|7
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|IntPoint
operator|.
name|newExactQuery
argument_list|(
literal|"point"
argument_list|,
operator|-
literal|6
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testBasicFloats
specifier|public
name|void
name|testBasicFloats
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|w
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|FloatPoint
argument_list|(
literal|"point"
argument_list|,
operator|-
literal|7.0f
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|FloatPoint
argument_list|(
literal|"point"
argument_list|,
literal|0.0f
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|FloatPoint
argument_list|(
literal|"point"
argument_list|,
literal|3.0f
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|DirectoryReader
name|r
init|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|w
argument_list|)
decl_stmt|;
name|IndexSearcher
name|s
init|=
operator|new
name|IndexSearcher
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|FloatPoint
operator|.
name|newRangeQuery
argument_list|(
literal|"point"
argument_list|,
operator|-
literal|8.0f
argument_list|,
literal|1.0f
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|FloatPoint
operator|.
name|newRangeQuery
argument_list|(
literal|"point"
argument_list|,
operator|-
literal|7.0f
argument_list|,
literal|3.0f
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|FloatPoint
operator|.
name|newExactQuery
argument_list|(
literal|"point"
argument_list|,
operator|-
literal|7.0f
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|FloatPoint
operator|.
name|newExactQuery
argument_list|(
literal|"point"
argument_list|,
operator|-
literal|6.0f
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testBasicLongs
specifier|public
name|void
name|testBasicLongs
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|w
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|LongPoint
argument_list|(
literal|"point"
argument_list|,
operator|-
literal|7
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|LongPoint
argument_list|(
literal|"point"
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|LongPoint
argument_list|(
literal|"point"
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|DirectoryReader
name|r
init|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|w
argument_list|)
decl_stmt|;
name|IndexSearcher
name|s
init|=
operator|new
name|IndexSearcher
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|LongPoint
operator|.
name|newRangeQuery
argument_list|(
literal|"point"
argument_list|,
operator|-
literal|8L
argument_list|,
literal|1L
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|LongPoint
operator|.
name|newRangeQuery
argument_list|(
literal|"point"
argument_list|,
operator|-
literal|7L
argument_list|,
literal|3L
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|LongPoint
operator|.
name|newExactQuery
argument_list|(
literal|"point"
argument_list|,
operator|-
literal|7L
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|LongPoint
operator|.
name|newExactQuery
argument_list|(
literal|"point"
argument_list|,
operator|-
literal|6L
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testBasicDoubles
specifier|public
name|void
name|testBasicDoubles
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|w
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|DoublePoint
argument_list|(
literal|"point"
argument_list|,
operator|-
literal|7.0
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|DoublePoint
argument_list|(
literal|"point"
argument_list|,
literal|0.0
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|DoublePoint
argument_list|(
literal|"point"
argument_list|,
literal|3.0
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|DirectoryReader
name|r
init|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|w
argument_list|)
decl_stmt|;
name|IndexSearcher
name|s
init|=
operator|new
name|IndexSearcher
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|DoublePoint
operator|.
name|newRangeQuery
argument_list|(
literal|"point"
argument_list|,
operator|-
literal|8.0
argument_list|,
literal|1.0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|DoublePoint
operator|.
name|newRangeQuery
argument_list|(
literal|"point"
argument_list|,
operator|-
literal|7.0
argument_list|,
literal|3.0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|DoublePoint
operator|.
name|newExactQuery
argument_list|(
literal|"point"
argument_list|,
operator|-
literal|7.0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|DoublePoint
operator|.
name|newExactQuery
argument_list|(
literal|"point"
argument_list|,
operator|-
literal|6.0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testCrazyDoubles
specifier|public
name|void
name|testCrazyDoubles
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|w
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|DoublePoint
argument_list|(
literal|"point"
argument_list|,
name|Double
operator|.
name|NEGATIVE_INFINITY
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|DoublePoint
argument_list|(
literal|"point"
argument_list|,
operator|-
literal|0.0D
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|DoublePoint
argument_list|(
literal|"point"
argument_list|,
operator|+
literal|0.0D
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|DoublePoint
argument_list|(
literal|"point"
argument_list|,
name|Double
operator|.
name|MIN_VALUE
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|DoublePoint
argument_list|(
literal|"point"
argument_list|,
name|Double
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|DoublePoint
argument_list|(
literal|"point"
argument_list|,
name|Double
operator|.
name|POSITIVE_INFINITY
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|DoublePoint
argument_list|(
literal|"point"
argument_list|,
name|Double
operator|.
name|NaN
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|DirectoryReader
name|r
init|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|w
argument_list|)
decl_stmt|;
name|IndexSearcher
name|s
init|=
operator|new
name|IndexSearcher
argument_list|(
name|r
argument_list|)
decl_stmt|;
comment|// exact queries
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|DoublePoint
operator|.
name|newExactQuery
argument_list|(
literal|"point"
argument_list|,
name|Double
operator|.
name|NEGATIVE_INFINITY
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|DoublePoint
operator|.
name|newExactQuery
argument_list|(
literal|"point"
argument_list|,
operator|-
literal|0.0D
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|DoublePoint
operator|.
name|newExactQuery
argument_list|(
literal|"point"
argument_list|,
operator|+
literal|0.0D
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|DoublePoint
operator|.
name|newExactQuery
argument_list|(
literal|"point"
argument_list|,
name|Double
operator|.
name|MIN_VALUE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|DoublePoint
operator|.
name|newExactQuery
argument_list|(
literal|"point"
argument_list|,
name|Double
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|DoublePoint
operator|.
name|newExactQuery
argument_list|(
literal|"point"
argument_list|,
name|Double
operator|.
name|POSITIVE_INFINITY
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|DoublePoint
operator|.
name|newExactQuery
argument_list|(
literal|"point"
argument_list|,
name|Double
operator|.
name|NaN
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// set query
name|double
name|set
index|[]
init|=
operator|new
name|double
index|[]
block|{
name|Double
operator|.
name|MAX_VALUE
block|,
name|Double
operator|.
name|NaN
block|,
operator|+
literal|0.0D
block|,
name|Double
operator|.
name|NEGATIVE_INFINITY
block|,
name|Double
operator|.
name|MIN_VALUE
block|,
operator|-
literal|0.0D
block|,
name|Double
operator|.
name|POSITIVE_INFINITY
block|}
decl_stmt|;
name|assertEquals
argument_list|(
literal|7
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|DoublePoint
operator|.
name|newSetQuery
argument_list|(
literal|"point"
argument_list|,
name|set
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// ranges
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|DoublePoint
operator|.
name|newRangeQuery
argument_list|(
literal|"point"
argument_list|,
name|Double
operator|.
name|NEGATIVE_INFINITY
argument_list|,
operator|-
literal|0.0D
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|DoublePoint
operator|.
name|newRangeQuery
argument_list|(
literal|"point"
argument_list|,
operator|-
literal|0.0D
argument_list|,
literal|0.0D
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|DoublePoint
operator|.
name|newRangeQuery
argument_list|(
literal|"point"
argument_list|,
literal|0.0D
argument_list|,
name|Double
operator|.
name|MIN_VALUE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|DoublePoint
operator|.
name|newRangeQuery
argument_list|(
literal|"point"
argument_list|,
name|Double
operator|.
name|MIN_VALUE
argument_list|,
name|Double
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|DoublePoint
operator|.
name|newRangeQuery
argument_list|(
literal|"point"
argument_list|,
name|Double
operator|.
name|MAX_VALUE
argument_list|,
name|Double
operator|.
name|POSITIVE_INFINITY
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|DoublePoint
operator|.
name|newRangeQuery
argument_list|(
literal|"point"
argument_list|,
name|Double
operator|.
name|POSITIVE_INFINITY
argument_list|,
name|Double
operator|.
name|NaN
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testCrazyFloats
specifier|public
name|void
name|testCrazyFloats
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|w
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|FloatPoint
argument_list|(
literal|"point"
argument_list|,
name|Float
operator|.
name|NEGATIVE_INFINITY
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|FloatPoint
argument_list|(
literal|"point"
argument_list|,
operator|-
literal|0.0F
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|FloatPoint
argument_list|(
literal|"point"
argument_list|,
operator|+
literal|0.0F
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|FloatPoint
argument_list|(
literal|"point"
argument_list|,
name|Float
operator|.
name|MIN_VALUE
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|FloatPoint
argument_list|(
literal|"point"
argument_list|,
name|Float
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|FloatPoint
argument_list|(
literal|"point"
argument_list|,
name|Float
operator|.
name|POSITIVE_INFINITY
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|FloatPoint
argument_list|(
literal|"point"
argument_list|,
name|Float
operator|.
name|NaN
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|DirectoryReader
name|r
init|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|w
argument_list|)
decl_stmt|;
name|IndexSearcher
name|s
init|=
operator|new
name|IndexSearcher
argument_list|(
name|r
argument_list|)
decl_stmt|;
comment|// exact queries
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|FloatPoint
operator|.
name|newExactQuery
argument_list|(
literal|"point"
argument_list|,
name|Float
operator|.
name|NEGATIVE_INFINITY
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|FloatPoint
operator|.
name|newExactQuery
argument_list|(
literal|"point"
argument_list|,
operator|-
literal|0.0F
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|FloatPoint
operator|.
name|newExactQuery
argument_list|(
literal|"point"
argument_list|,
operator|+
literal|0.0F
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|FloatPoint
operator|.
name|newExactQuery
argument_list|(
literal|"point"
argument_list|,
name|Float
operator|.
name|MIN_VALUE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|FloatPoint
operator|.
name|newExactQuery
argument_list|(
literal|"point"
argument_list|,
name|Float
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|FloatPoint
operator|.
name|newExactQuery
argument_list|(
literal|"point"
argument_list|,
name|Float
operator|.
name|POSITIVE_INFINITY
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|FloatPoint
operator|.
name|newExactQuery
argument_list|(
literal|"point"
argument_list|,
name|Float
operator|.
name|NaN
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// set query
name|float
name|set
index|[]
init|=
operator|new
name|float
index|[]
block|{
name|Float
operator|.
name|MAX_VALUE
block|,
name|Float
operator|.
name|NaN
block|,
operator|+
literal|0.0F
block|,
name|Float
operator|.
name|NEGATIVE_INFINITY
block|,
name|Float
operator|.
name|MIN_VALUE
block|,
operator|-
literal|0.0F
block|,
name|Float
operator|.
name|POSITIVE_INFINITY
block|}
decl_stmt|;
name|assertEquals
argument_list|(
literal|7
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|FloatPoint
operator|.
name|newSetQuery
argument_list|(
literal|"point"
argument_list|,
name|set
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// ranges
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|FloatPoint
operator|.
name|newRangeQuery
argument_list|(
literal|"point"
argument_list|,
name|Float
operator|.
name|NEGATIVE_INFINITY
argument_list|,
operator|-
literal|0.0F
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|FloatPoint
operator|.
name|newRangeQuery
argument_list|(
literal|"point"
argument_list|,
operator|-
literal|0.0F
argument_list|,
literal|0.0F
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|FloatPoint
operator|.
name|newRangeQuery
argument_list|(
literal|"point"
argument_list|,
literal|0.0F
argument_list|,
name|Float
operator|.
name|MIN_VALUE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|FloatPoint
operator|.
name|newRangeQuery
argument_list|(
literal|"point"
argument_list|,
name|Float
operator|.
name|MIN_VALUE
argument_list|,
name|Float
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|FloatPoint
operator|.
name|newRangeQuery
argument_list|(
literal|"point"
argument_list|,
name|Float
operator|.
name|MAX_VALUE
argument_list|,
name|Float
operator|.
name|POSITIVE_INFINITY
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|FloatPoint
operator|.
name|newRangeQuery
argument_list|(
literal|"point"
argument_list|,
name|Float
operator|.
name|POSITIVE_INFINITY
argument_list|,
name|Float
operator|.
name|NaN
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testAllEqual
specifier|public
name|void
name|testAllEqual
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|numValues
init|=
name|atLeast
argument_list|(
literal|10000
argument_list|)
decl_stmt|;
name|long
name|value
init|=
name|randomValue
argument_list|()
decl_stmt|;
name|long
index|[]
name|values
init|=
operator|new
name|long
index|[
name|numValues
index|]
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TEST: use same value="
operator|+
name|value
argument_list|)
expr_stmt|;
block|}
name|Arrays
operator|.
name|fill
argument_list|(
name|values
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|verifyLongs
argument_list|(
name|values
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|testRandomLongsTiny
specifier|public
name|void
name|testRandomLongsTiny
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Make sure single-leaf-node case is OK:
name|doTestRandomLongs
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
DECL|method|testRandomLongsMedium
specifier|public
name|void
name|testRandomLongsMedium
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestRandomLongs
argument_list|(
literal|10000
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Nightly
DECL|method|testRandomLongsBig
specifier|public
name|void
name|testRandomLongsBig
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestRandomLongs
argument_list|(
literal|100000
argument_list|)
expr_stmt|;
block|}
DECL|method|doTestRandomLongs
specifier|private
name|void
name|doTestRandomLongs
parameter_list|(
name|int
name|count
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|numValues
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
name|count
argument_list|,
name|count
operator|*
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TEST: numValues="
operator|+
name|numValues
argument_list|)
expr_stmt|;
block|}
name|long
index|[]
name|values
init|=
operator|new
name|long
index|[
name|numValues
index|]
decl_stmt|;
name|int
index|[]
name|ids
init|=
operator|new
name|int
index|[
name|numValues
index|]
decl_stmt|;
name|boolean
name|singleValued
init|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
decl_stmt|;
name|int
name|sameValuePct
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
decl_stmt|;
name|int
name|id
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|ord
init|=
literal|0
init|;
name|ord
operator|<
name|numValues
condition|;
name|ord
operator|++
control|)
block|{
if|if
condition|(
name|ord
operator|>
literal|0
operator|&&
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
operator|<
name|sameValuePct
condition|)
block|{
comment|// Identical to old value
name|values
index|[
name|ord
index|]
operator|=
name|values
index|[
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|ord
argument_list|)
index|]
expr_stmt|;
block|}
else|else
block|{
name|values
index|[
name|ord
index|]
operator|=
name|randomValue
argument_list|()
expr_stmt|;
block|}
name|ids
index|[
name|ord
index|]
operator|=
name|id
expr_stmt|;
if|if
condition|(
name|singleValued
operator|||
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|2
argument_list|)
operator|==
literal|1
condition|)
block|{
name|id
operator|++
expr_stmt|;
block|}
block|}
name|verifyLongs
argument_list|(
name|values
argument_list|,
name|ids
argument_list|)
expr_stmt|;
block|}
DECL|method|testLongEncode
specifier|public
name|void
name|testLongEncode
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10000
condition|;
name|i
operator|++
control|)
block|{
name|long
name|v
init|=
name|random
argument_list|()
operator|.
name|nextLong
argument_list|()
decl_stmt|;
name|byte
index|[]
name|tmp
init|=
operator|new
name|byte
index|[
literal|8
index|]
decl_stmt|;
name|NumericUtils
operator|.
name|longToSortableBytes
argument_list|(
name|v
argument_list|,
name|tmp
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|long
name|v2
init|=
name|NumericUtils
operator|.
name|sortableBytesToLong
argument_list|(
name|tmp
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"got bytes="
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|tmp
argument_list|)
argument_list|,
name|v
argument_list|,
name|v2
argument_list|)
expr_stmt|;
block|}
block|}
comment|// verify for long values
DECL|method|verifyLongs
specifier|private
specifier|static
name|void
name|verifyLongs
parameter_list|(
name|long
index|[]
name|values
parameter_list|,
name|int
index|[]
name|ids
parameter_list|)
throws|throws
name|Exception
block|{
name|IndexWriterConfig
name|iwc
init|=
name|newIndexWriterConfig
argument_list|()
decl_stmt|;
comment|// Else we can get O(N^2) merging:
name|int
name|mbd
init|=
name|iwc
operator|.
name|getMaxBufferedDocs
argument_list|()
decl_stmt|;
if|if
condition|(
name|mbd
operator|!=
operator|-
literal|1
operator|&&
name|mbd
operator|<
name|values
operator|.
name|length
operator|/
literal|100
condition|)
block|{
name|iwc
operator|.
name|setMaxBufferedDocs
argument_list|(
name|values
operator|.
name|length
operator|/
literal|100
argument_list|)
expr_stmt|;
block|}
name|iwc
operator|.
name|setCodec
argument_list|(
name|getCodec
argument_list|()
argument_list|)
expr_stmt|;
name|Directory
name|dir
decl_stmt|;
if|if
condition|(
name|values
operator|.
name|length
operator|>
literal|100000
condition|)
block|{
name|dir
operator|=
name|newMaybeVirusCheckingFSDirectory
argument_list|(
name|createTempDir
argument_list|(
literal|"TestRangeTree"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|dir
operator|=
name|newMaybeVirusCheckingDirectory
argument_list|()
expr_stmt|;
block|}
name|int
name|missingPct
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
decl_stmt|;
name|int
name|deletedPct
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  missingPct="
operator|+
name|missingPct
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  deletedPct="
operator|+
name|deletedPct
argument_list|)
expr_stmt|;
block|}
name|BitSet
name|missing
init|=
operator|new
name|BitSet
argument_list|()
decl_stmt|;
name|BitSet
name|deleted
init|=
operator|new
name|BitSet
argument_list|()
decl_stmt|;
name|Document
name|doc
init|=
literal|null
decl_stmt|;
name|int
name|lastID
init|=
operator|-
literal|1
decl_stmt|;
name|RandomIndexWriter
name|w
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|,
name|iwc
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|ord
init|=
literal|0
init|;
name|ord
operator|<
name|values
operator|.
name|length
condition|;
name|ord
operator|++
control|)
block|{
name|int
name|id
decl_stmt|;
if|if
condition|(
name|ids
operator|==
literal|null
condition|)
block|{
name|id
operator|=
name|ord
expr_stmt|;
block|}
else|else
block|{
name|id
operator|=
name|ids
index|[
name|ord
index|]
expr_stmt|;
block|}
if|if
condition|(
name|id
operator|!=
name|lastID
condition|)
block|{
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
operator|<
name|missingPct
condition|)
block|{
name|missing
operator|.
name|set
argument_list|(
name|id
argument_list|)
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  missing id="
operator|+
name|id
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|doc
operator|!=
literal|null
condition|)
block|{
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
operator|<
name|deletedPct
condition|)
block|{
name|int
name|idToDelete
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|w
operator|.
name|deleteDocuments
argument_list|(
operator|new
name|Term
argument_list|(
literal|"id"
argument_list|,
literal|""
operator|+
name|idToDelete
argument_list|)
argument_list|)
expr_stmt|;
name|deleted
operator|.
name|set
argument_list|(
name|idToDelete
argument_list|)
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  delete id="
operator|+
name|idToDelete
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newStringField
argument_list|(
literal|"id"
argument_list|,
literal|""
operator|+
name|id
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|NumericDocValuesField
argument_list|(
literal|"id"
argument_list|,
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|lastID
operator|=
name|id
expr_stmt|;
block|}
if|if
condition|(
name|missing
operator|.
name|get
argument_list|(
name|id
argument_list|)
operator|==
literal|false
condition|)
block|{
name|doc
operator|.
name|add
argument_list|(
operator|new
name|LongPoint
argument_list|(
literal|"sn_value"
argument_list|,
name|values
index|[
name|id
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|byte
index|[]
name|bytes
init|=
operator|new
name|byte
index|[
literal|8
index|]
decl_stmt|;
name|NumericUtils
operator|.
name|longToSortableBytes
argument_list|(
name|values
index|[
name|id
index|]
argument_list|,
name|bytes
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|BinaryPoint
argument_list|(
literal|"ss_value"
argument_list|,
name|bytes
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  forceMerge(1)"
argument_list|)
expr_stmt|;
block|}
name|w
operator|.
name|forceMerge
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
specifier|final
name|IndexReader
name|r
init|=
name|w
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|IndexSearcher
name|s
init|=
name|newSearcher
argument_list|(
name|r
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|int
name|numThreads
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|2
argument_list|,
literal|5
argument_list|)
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TEST: use "
operator|+
name|numThreads
operator|+
literal|" query threads; searcher="
operator|+
name|s
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|Thread
argument_list|>
name|threads
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|int
name|iters
init|=
name|atLeast
argument_list|(
literal|100
argument_list|)
decl_stmt|;
specifier|final
name|CountDownLatch
name|startingGun
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|AtomicBoolean
name|failed
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numThreads
condition|;
name|i
operator|++
control|)
block|{
name|Thread
name|thread
init|=
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|_run
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|failed
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|_run
parameter_list|()
throws|throws
name|Exception
block|{
name|startingGun
operator|.
name|await
argument_list|()
expr_stmt|;
name|NumericDocValues
name|docIDToID
init|=
name|MultiDocValues
operator|.
name|getNumericValues
argument_list|(
name|r
argument_list|,
literal|"id"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|iter
init|=
literal|0
init|;
name|iter
operator|<
name|iters
operator|&&
name|failed
operator|.
name|get
argument_list|()
operator|==
literal|false
condition|;
name|iter
operator|++
control|)
block|{
name|Long
name|lower
init|=
name|randomValue
argument_list|()
decl_stmt|;
name|Long
name|upper
init|=
name|randomValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|upper
operator|<
name|lower
condition|)
block|{
name|long
name|x
init|=
name|lower
decl_stmt|;
name|lower
operator|=
name|upper
expr_stmt|;
name|upper
operator|=
name|x
expr_stmt|;
block|}
name|Query
name|query
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\n"
operator|+
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|": TEST: iter="
operator|+
name|iter
operator|+
literal|" value="
operator|+
name|lower
operator|+
literal|" TO "
operator|+
name|upper
argument_list|)
expr_stmt|;
name|byte
index|[]
name|tmp
init|=
operator|new
name|byte
index|[
literal|8
index|]
decl_stmt|;
if|if
condition|(
name|lower
operator|!=
literal|null
condition|)
block|{
name|NumericUtils
operator|.
name|longToSortableBytes
argument_list|(
name|lower
argument_list|,
name|tmp
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  lower bytes="
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|tmp
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|upper
operator|!=
literal|null
condition|)
block|{
name|NumericUtils
operator|.
name|longToSortableBytes
argument_list|(
name|upper
argument_list|,
name|tmp
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  upper bytes="
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|tmp
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|query
operator|=
name|LongPoint
operator|.
name|newRangeQuery
argument_list|(
literal|"sn_value"
argument_list|,
name|lower
argument_list|,
name|upper
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|byte
index|[]
name|lowerBytes
init|=
operator|new
name|byte
index|[
literal|8
index|]
decl_stmt|;
name|NumericUtils
operator|.
name|longToSortableBytes
argument_list|(
name|lower
argument_list|,
name|lowerBytes
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|byte
index|[]
name|upperBytes
init|=
operator|new
name|byte
index|[
literal|8
index|]
decl_stmt|;
name|NumericUtils
operator|.
name|longToSortableBytes
argument_list|(
name|upper
argument_list|,
name|upperBytes
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|query
operator|=
name|BinaryPoint
operator|.
name|newRangeQuery
argument_list|(
literal|"ss_value"
argument_list|,
name|lowerBytes
argument_list|,
name|upperBytes
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|":  using query: "
operator|+
name|query
argument_list|)
expr_stmt|;
block|}
specifier|final
name|BitSet
name|hits
init|=
operator|new
name|BitSet
argument_list|()
decl_stmt|;
name|s
operator|.
name|search
argument_list|(
name|query
argument_list|,
operator|new
name|SimpleCollector
argument_list|()
block|{
specifier|private
name|int
name|docBase
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|needsScores
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|doSetNextReader
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|docBase
operator|=
name|context
operator|.
name|docBase
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|collect
parameter_list|(
name|int
name|doc
parameter_list|)
block|{
name|hits
operator|.
name|set
argument_list|(
name|docBase
operator|+
name|doc
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|":  hitCount: "
operator|+
name|hits
operator|.
name|cardinality
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|docID
init|=
literal|0
init|;
name|docID
operator|<
name|r
operator|.
name|maxDoc
argument_list|()
condition|;
name|docID
operator|++
control|)
block|{
name|int
name|id
init|=
operator|(
name|int
operator|)
name|docIDToID
operator|.
name|get
argument_list|(
name|docID
argument_list|)
decl_stmt|;
name|boolean
name|expected
init|=
name|missing
operator|.
name|get
argument_list|(
name|id
argument_list|)
operator|==
literal|false
operator|&&
name|deleted
operator|.
name|get
argument_list|(
name|id
argument_list|)
operator|==
literal|false
operator|&&
name|values
index|[
name|id
index|]
operator|>=
name|lower
operator|&&
name|values
index|[
name|id
index|]
operator|<=
name|upper
decl_stmt|;
if|if
condition|(
name|hits
operator|.
name|get
argument_list|(
name|docID
argument_list|)
operator|!=
name|expected
condition|)
block|{
comment|// We do exact quantized comparison so the bbox query should never disagree:
name|fail
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|": iter="
operator|+
name|iter
operator|+
literal|" id="
operator|+
name|id
operator|+
literal|" docID="
operator|+
name|docID
operator|+
literal|" value="
operator|+
name|values
index|[
name|id
index|]
operator|+
literal|" (range: "
operator|+
name|lower
operator|+
literal|" TO "
operator|+
name|upper
operator|+
literal|") expected "
operator|+
name|expected
operator|+
literal|" but got: "
operator|+
name|hits
operator|.
name|get
argument_list|(
name|docID
argument_list|)
operator|+
literal|" deleted?="
operator|+
name|deleted
operator|.
name|get
argument_list|(
name|id
argument_list|)
operator|+
literal|" query="
operator|+
name|query
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
decl_stmt|;
name|thread
operator|.
name|setName
argument_list|(
literal|"T"
operator|+
name|i
argument_list|)
expr_stmt|;
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
name|threads
operator|.
name|add
argument_list|(
name|thread
argument_list|)
expr_stmt|;
block|}
name|startingGun
operator|.
name|countDown
argument_list|()
expr_stmt|;
for|for
control|(
name|Thread
name|thread
range|:
name|threads
control|)
block|{
name|thread
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
name|IOUtils
operator|.
name|close
argument_list|(
name|r
argument_list|,
name|dir
argument_list|)
expr_stmt|;
block|}
DECL|method|testRandomBinaryTiny
specifier|public
name|void
name|testRandomBinaryTiny
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestRandomBinary
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
DECL|method|testRandomBinaryMedium
specifier|public
name|void
name|testRandomBinaryMedium
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestRandomBinary
argument_list|(
literal|10000
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Nightly
DECL|method|testRandomBinaryBig
specifier|public
name|void
name|testRandomBinaryBig
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestRandomBinary
argument_list|(
literal|100000
argument_list|)
expr_stmt|;
block|}
DECL|method|doTestRandomBinary
specifier|private
name|void
name|doTestRandomBinary
parameter_list|(
name|int
name|count
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|numValues
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
name|count
argument_list|,
name|count
operator|*
literal|2
argument_list|)
decl_stmt|;
name|int
name|numBytesPerDim
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|2
argument_list|,
name|PointValues
operator|.
name|MAX_NUM_BYTES
argument_list|)
decl_stmt|;
name|int
name|numDims
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
name|PointValues
operator|.
name|MAX_DIMENSIONS
argument_list|)
decl_stmt|;
name|int
name|sameValuePct
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
index|[]
name|docValues
init|=
operator|new
name|byte
index|[
name|numValues
index|]
index|[]
index|[]
decl_stmt|;
name|boolean
name|singleValued
init|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
decl_stmt|;
name|int
index|[]
name|ids
init|=
operator|new
name|int
index|[
name|numValues
index|]
decl_stmt|;
name|int
name|id
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|ord
init|=
literal|0
init|;
name|ord
operator|<
name|numValues
condition|;
name|ord
operator|++
control|)
block|{
if|if
condition|(
name|ord
operator|>
literal|0
operator|&&
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
operator|<
name|sameValuePct
condition|)
block|{
comment|// Identical to old value
name|docValues
index|[
name|ord
index|]
operator|=
name|docValues
index|[
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|ord
argument_list|)
index|]
expr_stmt|;
block|}
else|else
block|{
comment|// Make a new random value
name|byte
index|[]
index|[]
name|values
init|=
operator|new
name|byte
index|[
name|numDims
index|]
index|[]
decl_stmt|;
for|for
control|(
name|int
name|dim
init|=
literal|0
init|;
name|dim
operator|<
name|numDims
condition|;
name|dim
operator|++
control|)
block|{
name|values
index|[
name|dim
index|]
operator|=
operator|new
name|byte
index|[
name|numBytesPerDim
index|]
expr_stmt|;
name|random
argument_list|()
operator|.
name|nextBytes
argument_list|(
name|values
index|[
name|dim
index|]
argument_list|)
expr_stmt|;
block|}
name|docValues
index|[
name|ord
index|]
operator|=
name|values
expr_stmt|;
block|}
name|ids
index|[
name|ord
index|]
operator|=
name|id
expr_stmt|;
if|if
condition|(
name|singleValued
operator|||
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|2
argument_list|)
operator|==
literal|1
condition|)
block|{
name|id
operator|++
expr_stmt|;
block|}
block|}
name|verifyBinary
argument_list|(
name|docValues
argument_list|,
name|ids
argument_list|,
name|numBytesPerDim
argument_list|)
expr_stmt|;
block|}
comment|// verify for byte[][] values
DECL|method|verifyBinary
specifier|private
name|void
name|verifyBinary
parameter_list|(
name|byte
index|[]
index|[]
index|[]
name|docValues
parameter_list|,
name|int
index|[]
name|ids
parameter_list|,
name|int
name|numBytesPerDim
parameter_list|)
throws|throws
name|Exception
block|{
name|IndexWriterConfig
name|iwc
init|=
name|newIndexWriterConfig
argument_list|()
decl_stmt|;
name|int
name|numDims
init|=
name|docValues
index|[
literal|0
index|]
operator|.
name|length
decl_stmt|;
name|int
name|bytesPerDim
init|=
name|docValues
index|[
literal|0
index|]
index|[
literal|0
index|]
operator|.
name|length
decl_stmt|;
comment|// Else we can get O(N^2) merging:
name|int
name|mbd
init|=
name|iwc
operator|.
name|getMaxBufferedDocs
argument_list|()
decl_stmt|;
if|if
condition|(
name|mbd
operator|!=
operator|-
literal|1
operator|&&
name|mbd
operator|<
name|docValues
operator|.
name|length
operator|/
literal|100
condition|)
block|{
name|iwc
operator|.
name|setMaxBufferedDocs
argument_list|(
name|docValues
operator|.
name|length
operator|/
literal|100
argument_list|)
expr_stmt|;
block|}
name|iwc
operator|.
name|setCodec
argument_list|(
name|getCodec
argument_list|()
argument_list|)
expr_stmt|;
name|Directory
name|dir
decl_stmt|;
if|if
condition|(
name|docValues
operator|.
name|length
operator|>
literal|100000
condition|)
block|{
name|dir
operator|=
name|newFSDirectory
argument_list|(
name|createTempDir
argument_list|(
literal|"TestPointQueries"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|dir
operator|=
name|newDirectory
argument_list|()
expr_stmt|;
block|}
name|RandomIndexWriter
name|w
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|,
name|iwc
argument_list|)
decl_stmt|;
name|int
name|numValues
init|=
name|docValues
operator|.
name|length
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TEST: numValues="
operator|+
name|numValues
operator|+
literal|" numDims="
operator|+
name|numDims
operator|+
literal|" numBytesPerDim="
operator|+
name|numBytesPerDim
argument_list|)
expr_stmt|;
block|}
name|int
name|missingPct
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
decl_stmt|;
name|int
name|deletedPct
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  missingPct="
operator|+
name|missingPct
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  deletedPct="
operator|+
name|deletedPct
argument_list|)
expr_stmt|;
block|}
name|BitSet
name|missing
init|=
operator|new
name|BitSet
argument_list|()
decl_stmt|;
name|BitSet
name|deleted
init|=
operator|new
name|BitSet
argument_list|()
decl_stmt|;
name|Document
name|doc
init|=
literal|null
decl_stmt|;
name|int
name|lastID
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|int
name|ord
init|=
literal|0
init|;
name|ord
operator|<
name|numValues
condition|;
name|ord
operator|++
control|)
block|{
name|int
name|id
init|=
name|ids
index|[
name|ord
index|]
decl_stmt|;
if|if
condition|(
name|id
operator|!=
name|lastID
condition|)
block|{
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
operator|<
name|missingPct
condition|)
block|{
name|missing
operator|.
name|set
argument_list|(
name|id
argument_list|)
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  missing id="
operator|+
name|id
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|doc
operator|!=
literal|null
condition|)
block|{
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
operator|<
name|deletedPct
condition|)
block|{
name|int
name|idToDelete
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|w
operator|.
name|deleteDocuments
argument_list|(
operator|new
name|Term
argument_list|(
literal|"id"
argument_list|,
literal|""
operator|+
name|idToDelete
argument_list|)
argument_list|)
expr_stmt|;
name|deleted
operator|.
name|set
argument_list|(
name|idToDelete
argument_list|)
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  delete id="
operator|+
name|idToDelete
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newStringField
argument_list|(
literal|"id"
argument_list|,
literal|""
operator|+
name|id
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|NumericDocValuesField
argument_list|(
literal|"id"
argument_list|,
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|lastID
operator|=
name|id
expr_stmt|;
block|}
if|if
condition|(
name|missing
operator|.
name|get
argument_list|(
name|id
argument_list|)
operator|==
literal|false
condition|)
block|{
name|doc
operator|.
name|add
argument_list|(
operator|new
name|BinaryPoint
argument_list|(
literal|"value"
argument_list|,
name|docValues
index|[
name|ord
index|]
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"id="
operator|+
name|id
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|dim
init|=
literal|0
init|;
name|dim
operator|<
name|numDims
condition|;
name|dim
operator|++
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  dim="
operator|+
name|dim
operator|+
literal|" value="
operator|+
name|bytesToString
argument_list|(
name|docValues
index|[
name|ord
index|]
index|[
name|dim
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  forceMerge(1)"
argument_list|)
expr_stmt|;
block|}
name|w
operator|.
name|forceMerge
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
specifier|final
name|IndexReader
name|r
init|=
name|w
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|IndexSearcher
name|s
init|=
name|newSearcher
argument_list|(
name|r
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|int
name|numThreads
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|2
argument_list|,
literal|5
argument_list|)
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TEST: use "
operator|+
name|numThreads
operator|+
literal|" query threads; searcher="
operator|+
name|s
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|Thread
argument_list|>
name|threads
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|int
name|iters
init|=
name|atLeast
argument_list|(
literal|100
argument_list|)
decl_stmt|;
specifier|final
name|CountDownLatch
name|startingGun
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|AtomicBoolean
name|failed
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numThreads
condition|;
name|i
operator|++
control|)
block|{
name|Thread
name|thread
init|=
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|_run
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|failed
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|_run
parameter_list|()
throws|throws
name|Exception
block|{
name|startingGun
operator|.
name|await
argument_list|()
expr_stmt|;
name|NumericDocValues
name|docIDToID
init|=
name|MultiDocValues
operator|.
name|getNumericValues
argument_list|(
name|r
argument_list|,
literal|"id"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|iter
init|=
literal|0
init|;
name|iter
operator|<
name|iters
operator|&&
name|failed
operator|.
name|get
argument_list|()
operator|==
literal|false
condition|;
name|iter
operator|++
control|)
block|{
name|byte
index|[]
index|[]
name|lower
init|=
operator|new
name|byte
index|[
name|numDims
index|]
index|[]
decl_stmt|;
name|byte
index|[]
index|[]
name|upper
init|=
operator|new
name|byte
index|[
name|numDims
index|]
index|[]
decl_stmt|;
for|for
control|(
name|int
name|dim
init|=
literal|0
init|;
name|dim
operator|<
name|numDims
condition|;
name|dim
operator|++
control|)
block|{
name|lower
index|[
name|dim
index|]
operator|=
operator|new
name|byte
index|[
name|bytesPerDim
index|]
expr_stmt|;
name|random
argument_list|()
operator|.
name|nextBytes
argument_list|(
name|lower
index|[
name|dim
index|]
argument_list|)
expr_stmt|;
name|upper
index|[
name|dim
index|]
operator|=
operator|new
name|byte
index|[
name|bytesPerDim
index|]
expr_stmt|;
name|random
argument_list|()
operator|.
name|nextBytes
argument_list|(
name|upper
index|[
name|dim
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|StringHelper
operator|.
name|compare
argument_list|(
name|bytesPerDim
argument_list|,
name|lower
index|[
name|dim
index|]
argument_list|,
literal|0
argument_list|,
name|upper
index|[
name|dim
index|]
argument_list|,
literal|0
argument_list|)
operator|>
literal|0
condition|)
block|{
name|byte
index|[]
name|x
init|=
name|lower
index|[
name|dim
index|]
decl_stmt|;
name|lower
index|[
name|dim
index|]
operator|=
name|upper
index|[
name|dim
index|]
expr_stmt|;
name|upper
index|[
name|dim
index|]
operator|=
name|x
expr_stmt|;
block|}
block|}
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\n"
operator|+
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|": TEST: iter="
operator|+
name|iter
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|dim
init|=
literal|0
init|;
name|dim
operator|<
name|numDims
condition|;
name|dim
operator|++
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  dim="
operator|+
name|dim
operator|+
literal|" "
operator|+
name|bytesToString
argument_list|(
name|lower
index|[
name|dim
index|]
argument_list|)
operator|+
literal|" TO "
operator|+
name|bytesToString
argument_list|(
name|upper
index|[
name|dim
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|Query
name|query
init|=
name|BinaryPoint
operator|.
name|newRangeQuery
argument_list|(
literal|"value"
argument_list|,
name|lower
argument_list|,
name|upper
argument_list|)
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|":  using query: "
operator|+
name|query
argument_list|)
expr_stmt|;
block|}
specifier|final
name|BitSet
name|hits
init|=
operator|new
name|BitSet
argument_list|()
decl_stmt|;
name|s
operator|.
name|search
argument_list|(
name|query
argument_list|,
operator|new
name|SimpleCollector
argument_list|()
block|{
specifier|private
name|int
name|docBase
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|needsScores
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|doSetNextReader
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|docBase
operator|=
name|context
operator|.
name|docBase
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|collect
parameter_list|(
name|int
name|doc
parameter_list|)
block|{
name|hits
operator|.
name|set
argument_list|(
name|docBase
operator|+
name|doc
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|":  hitCount: "
operator|+
name|hits
operator|.
name|cardinality
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|BitSet
name|expected
init|=
operator|new
name|BitSet
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|ord
init|=
literal|0
init|;
name|ord
operator|<
name|numValues
condition|;
name|ord
operator|++
control|)
block|{
name|int
name|id
init|=
name|ids
index|[
name|ord
index|]
decl_stmt|;
if|if
condition|(
name|missing
operator|.
name|get
argument_list|(
name|id
argument_list|)
operator|==
literal|false
operator|&&
name|deleted
operator|.
name|get
argument_list|(
name|id
argument_list|)
operator|==
literal|false
operator|&&
name|matches
argument_list|(
name|bytesPerDim
argument_list|,
name|lower
argument_list|,
name|upper
argument_list|,
name|docValues
index|[
name|ord
index|]
argument_list|)
condition|)
block|{
name|expected
operator|.
name|set
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
block|}
name|int
name|failCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|docID
init|=
literal|0
init|;
name|docID
operator|<
name|r
operator|.
name|maxDoc
argument_list|()
condition|;
name|docID
operator|++
control|)
block|{
name|int
name|id
init|=
operator|(
name|int
operator|)
name|docIDToID
operator|.
name|get
argument_list|(
name|docID
argument_list|)
decl_stmt|;
if|if
condition|(
name|hits
operator|.
name|get
argument_list|(
name|docID
argument_list|)
operator|!=
name|expected
operator|.
name|get
argument_list|(
name|id
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"FAIL: iter="
operator|+
name|iter
operator|+
literal|" id="
operator|+
name|id
operator|+
literal|" docID="
operator|+
name|docID
operator|+
literal|" expected="
operator|+
name|expected
operator|.
name|get
argument_list|(
name|id
argument_list|)
operator|+
literal|" but got "
operator|+
name|hits
operator|.
name|get
argument_list|(
name|docID
argument_list|)
operator|+
literal|" deleted?="
operator|+
name|deleted
operator|.
name|get
argument_list|(
name|id
argument_list|)
operator|+
literal|" missing?="
operator|+
name|missing
operator|.
name|get
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|dim
init|=
literal|0
init|;
name|dim
operator|<
name|numDims
condition|;
name|dim
operator|++
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  dim="
operator|+
name|dim
operator|+
literal|" range: "
operator|+
name|bytesToString
argument_list|(
name|lower
index|[
name|dim
index|]
argument_list|)
operator|+
literal|" TO "
operator|+
name|bytesToString
argument_list|(
name|upper
index|[
name|dim
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|failCount
operator|++
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|failCount
operator|!=
literal|0
condition|)
block|{
name|fail
argument_list|(
name|failCount
operator|+
literal|" hits were wrong"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
decl_stmt|;
name|thread
operator|.
name|setName
argument_list|(
literal|"T"
operator|+
name|i
argument_list|)
expr_stmt|;
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
name|threads
operator|.
name|add
argument_list|(
name|thread
argument_list|)
expr_stmt|;
block|}
name|startingGun
operator|.
name|countDown
argument_list|()
expr_stmt|;
for|for
control|(
name|Thread
name|thread
range|:
name|threads
control|)
block|{
name|thread
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
name|IOUtils
operator|.
name|close
argument_list|(
name|r
argument_list|,
name|dir
argument_list|)
expr_stmt|;
block|}
DECL|method|bytesToString
specifier|static
name|String
name|bytesToString
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|)
block|{
if|if
condition|(
name|bytes
operator|==
literal|null
condition|)
block|{
return|return
literal|"null"
return|;
block|}
return|return
operator|new
name|BytesRef
argument_list|(
name|bytes
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|matches
specifier|private
specifier|static
name|boolean
name|matches
parameter_list|(
name|int
name|bytesPerDim
parameter_list|,
name|byte
index|[]
index|[]
name|lower
parameter_list|,
name|byte
index|[]
index|[]
name|upper
parameter_list|,
name|byte
index|[]
index|[]
name|value
parameter_list|)
block|{
name|int
name|numDims
init|=
name|lower
operator|.
name|length
decl_stmt|;
for|for
control|(
name|int
name|dim
init|=
literal|0
init|;
name|dim
operator|<
name|numDims
condition|;
name|dim
operator|++
control|)
block|{
if|if
condition|(
name|StringHelper
operator|.
name|compare
argument_list|(
name|bytesPerDim
argument_list|,
name|value
index|[
name|dim
index|]
argument_list|,
literal|0
argument_list|,
name|lower
index|[
name|dim
index|]
argument_list|,
literal|0
argument_list|)
operator|<
literal|0
condition|)
block|{
comment|// Value is below the lower bound, on this dim
return|return
literal|false
return|;
block|}
if|if
condition|(
name|StringHelper
operator|.
name|compare
argument_list|(
name|bytesPerDim
argument_list|,
name|value
index|[
name|dim
index|]
argument_list|,
literal|0
argument_list|,
name|upper
index|[
name|dim
index|]
argument_list|,
literal|0
argument_list|)
operator|>
literal|0
condition|)
block|{
comment|// Value is above the upper bound, on this dim
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
DECL|method|randomValue
specifier|private
specifier|static
name|long
name|randomValue
parameter_list|()
block|{
if|if
condition|(
name|valueRange
operator|==
literal|0
condition|)
block|{
return|return
name|random
argument_list|()
operator|.
name|nextLong
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|valueMid
operator|+
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
operator|-
name|valueRange
argument_list|,
name|valueRange
argument_list|)
return|;
block|}
block|}
DECL|method|testMinMaxLong
specifier|public
name|void
name|testMinMaxLong
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriterConfig
name|iwc
init|=
name|newIndexWriterConfig
argument_list|()
decl_stmt|;
name|iwc
operator|.
name|setCodec
argument_list|(
name|getCodec
argument_list|()
argument_list|)
expr_stmt|;
name|RandomIndexWriter
name|w
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|,
name|iwc
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|LongPoint
argument_list|(
literal|"value"
argument_list|,
name|Long
operator|.
name|MIN_VALUE
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|LongPoint
argument_list|(
literal|"value"
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|IndexReader
name|r
init|=
name|w
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|IndexSearcher
name|s
init|=
name|newSearcher
argument_list|(
name|r
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|LongPoint
operator|.
name|newRangeQuery
argument_list|(
literal|"value"
argument_list|,
name|Long
operator|.
name|MIN_VALUE
argument_list|,
literal|0L
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|LongPoint
operator|.
name|newRangeQuery
argument_list|(
literal|"value"
argument_list|,
literal|0L
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|LongPoint
operator|.
name|newRangeQuery
argument_list|(
literal|"value"
argument_list|,
name|Long
operator|.
name|MIN_VALUE
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|close
argument_list|(
name|r
argument_list|,
name|w
argument_list|,
name|dir
argument_list|)
expr_stmt|;
block|}
DECL|method|toUTF8
specifier|private
specifier|static
name|byte
index|[]
name|toUTF8
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
name|s
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
return|;
block|}
comment|// Right zero pads:
DECL|method|toUTF8
specifier|private
specifier|static
name|byte
index|[]
name|toUTF8
parameter_list|(
name|String
name|s
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|byte
index|[]
name|bytes
init|=
name|s
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
decl_stmt|;
if|if
condition|(
name|length
operator|<
name|bytes
operator|.
name|length
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"length="
operator|+
name|length
operator|+
literal|" but string's UTF8 bytes has length="
operator|+
name|bytes
operator|.
name|length
argument_list|)
throw|;
block|}
name|byte
index|[]
name|result
init|=
operator|new
name|byte
index|[
name|length
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|bytes
argument_list|,
literal|0
argument_list|,
name|result
argument_list|,
literal|0
argument_list|,
name|bytes
operator|.
name|length
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
DECL|method|testBasicSortedSet
specifier|public
name|void
name|testBasicSortedSet
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriterConfig
name|iwc
init|=
name|newIndexWriterConfig
argument_list|()
decl_stmt|;
name|iwc
operator|.
name|setCodec
argument_list|(
name|getCodec
argument_list|()
argument_list|)
expr_stmt|;
name|RandomIndexWriter
name|w
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|,
name|iwc
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|BinaryPoint
argument_list|(
literal|"value"
argument_list|,
name|toUTF8
argument_list|(
literal|"abc"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|BinaryPoint
argument_list|(
literal|"value"
argument_list|,
name|toUTF8
argument_list|(
literal|"def"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|IndexReader
name|r
init|=
name|w
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|IndexSearcher
name|s
init|=
name|newSearcher
argument_list|(
name|r
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|BinaryPoint
operator|.
name|newRangeQuery
argument_list|(
literal|"value"
argument_list|,
name|toUTF8
argument_list|(
literal|"aaa"
argument_list|)
argument_list|,
name|toUTF8
argument_list|(
literal|"bbb"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|BinaryPoint
operator|.
name|newRangeQuery
argument_list|(
literal|"value"
argument_list|,
name|toUTF8
argument_list|(
literal|"c"
argument_list|,
literal|3
argument_list|)
argument_list|,
name|toUTF8
argument_list|(
literal|"e"
argument_list|,
literal|3
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|BinaryPoint
operator|.
name|newRangeQuery
argument_list|(
literal|"value"
argument_list|,
name|toUTF8
argument_list|(
literal|"a"
argument_list|,
literal|3
argument_list|)
argument_list|,
name|toUTF8
argument_list|(
literal|"z"
argument_list|,
literal|3
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|BinaryPoint
operator|.
name|newRangeQuery
argument_list|(
literal|"value"
argument_list|,
name|toUTF8
argument_list|(
literal|""
argument_list|,
literal|3
argument_list|)
argument_list|,
name|toUTF8
argument_list|(
literal|"abc"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|BinaryPoint
operator|.
name|newRangeQuery
argument_list|(
literal|"value"
argument_list|,
name|toUTF8
argument_list|(
literal|"a"
argument_list|,
literal|3
argument_list|)
argument_list|,
name|toUTF8
argument_list|(
literal|"abc"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|BinaryPoint
operator|.
name|newRangeQuery
argument_list|(
literal|"value"
argument_list|,
name|toUTF8
argument_list|(
literal|"a"
argument_list|,
literal|3
argument_list|)
argument_list|,
name|toUTF8
argument_list|(
literal|"abb"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|BinaryPoint
operator|.
name|newRangeQuery
argument_list|(
literal|"value"
argument_list|,
name|toUTF8
argument_list|(
literal|"def"
argument_list|)
argument_list|,
name|toUTF8
argument_list|(
literal|"zzz"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|BinaryPoint
operator|.
name|newRangeQuery
argument_list|(
literal|"value"
argument_list|,
name|toUTF8
argument_list|(
operator|(
literal|"def"
operator|)
argument_list|)
argument_list|,
name|toUTF8
argument_list|(
literal|"z"
argument_list|,
literal|3
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|BinaryPoint
operator|.
name|newRangeQuery
argument_list|(
literal|"value"
argument_list|,
name|toUTF8
argument_list|(
literal|"deg"
argument_list|)
argument_list|,
name|toUTF8
argument_list|(
literal|"z"
argument_list|,
literal|3
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|close
argument_list|(
name|r
argument_list|,
name|w
argument_list|,
name|dir
argument_list|)
expr_stmt|;
block|}
DECL|method|testLongMinMaxNumeric
specifier|public
name|void
name|testLongMinMaxNumeric
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriterConfig
name|iwc
init|=
name|newIndexWriterConfig
argument_list|()
decl_stmt|;
name|iwc
operator|.
name|setCodec
argument_list|(
name|getCodec
argument_list|()
argument_list|)
expr_stmt|;
name|RandomIndexWriter
name|w
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|,
name|iwc
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|LongPoint
argument_list|(
literal|"value"
argument_list|,
name|Long
operator|.
name|MIN_VALUE
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|LongPoint
argument_list|(
literal|"value"
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|IndexReader
name|r
init|=
name|w
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|IndexSearcher
name|s
init|=
name|newSearcher
argument_list|(
name|r
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|LongPoint
operator|.
name|newRangeQuery
argument_list|(
literal|"value"
argument_list|,
name|Long
operator|.
name|MIN_VALUE
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|LongPoint
operator|.
name|newRangeQuery
argument_list|(
literal|"value"
argument_list|,
name|Long
operator|.
name|MIN_VALUE
argument_list|,
name|Long
operator|.
name|MAX_VALUE
operator|-
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|LongPoint
operator|.
name|newRangeQuery
argument_list|(
literal|"value"
argument_list|,
name|Long
operator|.
name|MIN_VALUE
operator|+
literal|1
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|LongPoint
operator|.
name|newRangeQuery
argument_list|(
literal|"value"
argument_list|,
name|Long
operator|.
name|MIN_VALUE
operator|+
literal|1
argument_list|,
name|Long
operator|.
name|MAX_VALUE
operator|-
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|close
argument_list|(
name|r
argument_list|,
name|w
argument_list|,
name|dir
argument_list|)
expr_stmt|;
block|}
DECL|method|testLongMinMaxSortedSet
specifier|public
name|void
name|testLongMinMaxSortedSet
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriterConfig
name|iwc
init|=
name|newIndexWriterConfig
argument_list|()
decl_stmt|;
name|iwc
operator|.
name|setCodec
argument_list|(
name|getCodec
argument_list|()
argument_list|)
expr_stmt|;
name|RandomIndexWriter
name|w
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|,
name|iwc
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|LongPoint
argument_list|(
literal|"value"
argument_list|,
name|Long
operator|.
name|MIN_VALUE
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|LongPoint
argument_list|(
literal|"value"
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|IndexReader
name|r
init|=
name|w
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|IndexSearcher
name|s
init|=
name|newSearcher
argument_list|(
name|r
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|LongPoint
operator|.
name|newRangeQuery
argument_list|(
literal|"value"
argument_list|,
name|Long
operator|.
name|MIN_VALUE
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|LongPoint
operator|.
name|newRangeQuery
argument_list|(
literal|"value"
argument_list|,
name|Long
operator|.
name|MIN_VALUE
argument_list|,
name|Long
operator|.
name|MAX_VALUE
operator|-
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|LongPoint
operator|.
name|newRangeQuery
argument_list|(
literal|"value"
argument_list|,
name|Long
operator|.
name|MIN_VALUE
operator|+
literal|1
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|LongPoint
operator|.
name|newRangeQuery
argument_list|(
literal|"value"
argument_list|,
name|Long
operator|.
name|MIN_VALUE
operator|+
literal|1
argument_list|,
name|Long
operator|.
name|MAX_VALUE
operator|-
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|close
argument_list|(
name|r
argument_list|,
name|w
argument_list|,
name|dir
argument_list|)
expr_stmt|;
block|}
DECL|method|testSortedSetNoOrdsMatch
specifier|public
name|void
name|testSortedSetNoOrdsMatch
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriterConfig
name|iwc
init|=
name|newIndexWriterConfig
argument_list|()
decl_stmt|;
name|iwc
operator|.
name|setCodec
argument_list|(
name|getCodec
argument_list|()
argument_list|)
expr_stmt|;
name|RandomIndexWriter
name|w
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|,
name|iwc
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|BinaryPoint
argument_list|(
literal|"value"
argument_list|,
name|toUTF8
argument_list|(
literal|"a"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|BinaryPoint
argument_list|(
literal|"value"
argument_list|,
name|toUTF8
argument_list|(
literal|"z"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|IndexReader
name|r
init|=
name|w
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|IndexSearcher
name|s
init|=
name|newSearcher
argument_list|(
name|r
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|BinaryPoint
operator|.
name|newRangeQuery
argument_list|(
literal|"value"
argument_list|,
name|toUTF8
argument_list|(
literal|"m"
argument_list|)
argument_list|,
name|toUTF8
argument_list|(
literal|"m"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|close
argument_list|(
name|r
argument_list|,
name|w
argument_list|,
name|dir
argument_list|)
expr_stmt|;
block|}
DECL|method|testNumericNoValuesMatch
specifier|public
name|void
name|testNumericNoValuesMatch
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriterConfig
name|iwc
init|=
name|newIndexWriterConfig
argument_list|()
decl_stmt|;
name|iwc
operator|.
name|setCodec
argument_list|(
name|getCodec
argument_list|()
argument_list|)
expr_stmt|;
name|RandomIndexWriter
name|w
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|,
name|iwc
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|SortedNumericDocValuesField
argument_list|(
literal|"value"
argument_list|,
literal|17
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|SortedNumericDocValuesField
argument_list|(
literal|"value"
argument_list|,
literal|22
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|IndexReader
name|r
init|=
name|w
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|IndexSearcher
name|s
init|=
operator|new
name|IndexSearcher
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|LongPoint
operator|.
name|newRangeQuery
argument_list|(
literal|"value"
argument_list|,
literal|17L
argument_list|,
literal|13L
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|close
argument_list|(
name|r
argument_list|,
name|w
argument_list|,
name|dir
argument_list|)
expr_stmt|;
block|}
DECL|method|testNoDocs
specifier|public
name|void
name|testNoDocs
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriterConfig
name|iwc
init|=
name|newIndexWriterConfig
argument_list|()
decl_stmt|;
name|iwc
operator|.
name|setCodec
argument_list|(
name|getCodec
argument_list|()
argument_list|)
expr_stmt|;
name|RandomIndexWriter
name|w
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|,
name|iwc
argument_list|)
decl_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
operator|new
name|Document
argument_list|()
argument_list|)
expr_stmt|;
name|IndexReader
name|r
init|=
name|w
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|IndexSearcher
name|s
init|=
name|newSearcher
argument_list|(
name|r
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|LongPoint
operator|.
name|newRangeQuery
argument_list|(
literal|"value"
argument_list|,
literal|17L
argument_list|,
literal|13L
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|close
argument_list|(
name|r
argument_list|,
name|w
argument_list|,
name|dir
argument_list|)
expr_stmt|;
block|}
DECL|method|testWrongNumDims
specifier|public
name|void
name|testWrongNumDims
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriterConfig
name|iwc
init|=
name|newIndexWriterConfig
argument_list|()
decl_stmt|;
name|iwc
operator|.
name|setCodec
argument_list|(
name|getCodec
argument_list|()
argument_list|)
expr_stmt|;
name|RandomIndexWriter
name|w
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|,
name|iwc
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|LongPoint
argument_list|(
literal|"value"
argument_list|,
name|Long
operator|.
name|MIN_VALUE
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|IndexReader
name|r
init|=
name|w
operator|.
name|getReader
argument_list|()
decl_stmt|;
comment|// no wrapping, else the exc might happen in executor thread:
name|IndexSearcher
name|s
init|=
operator|new
name|IndexSearcher
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|point
init|=
operator|new
name|byte
index|[
literal|2
index|]
index|[]
decl_stmt|;
name|point
index|[
literal|0
index|]
operator|=
operator|new
name|byte
index|[
literal|8
index|]
expr_stmt|;
name|point
index|[
literal|1
index|]
operator|=
operator|new
name|byte
index|[
literal|8
index|]
expr_stmt|;
name|IllegalArgumentException
name|expected
init|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|s
operator|.
name|count
argument_list|(
name|BinaryPoint
operator|.
name|newRangeQuery
argument_list|(
literal|"value"
argument_list|,
name|point
argument_list|,
name|point
argument_list|)
argument_list|)
expr_stmt|;
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"field=\"value\" was indexed with numDims=1 but this query has numDims=2"
argument_list|,
name|expected
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|close
argument_list|(
name|r
argument_list|,
name|w
argument_list|,
name|dir
argument_list|)
expr_stmt|;
block|}
DECL|method|testWrongNumBytes
specifier|public
name|void
name|testWrongNumBytes
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriterConfig
name|iwc
init|=
name|newIndexWriterConfig
argument_list|()
decl_stmt|;
name|iwc
operator|.
name|setCodec
argument_list|(
name|getCodec
argument_list|()
argument_list|)
expr_stmt|;
name|RandomIndexWriter
name|w
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|,
name|iwc
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|LongPoint
argument_list|(
literal|"value"
argument_list|,
name|Long
operator|.
name|MIN_VALUE
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|IndexReader
name|r
init|=
name|w
operator|.
name|getReader
argument_list|()
decl_stmt|;
comment|// no wrapping, else the exc might happen in executor thread:
name|IndexSearcher
name|s
init|=
operator|new
name|IndexSearcher
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|point
init|=
operator|new
name|byte
index|[
literal|1
index|]
index|[]
decl_stmt|;
name|point
index|[
literal|0
index|]
operator|=
operator|new
name|byte
index|[
literal|10
index|]
expr_stmt|;
name|IllegalArgumentException
name|expected
init|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|s
operator|.
name|count
argument_list|(
name|BinaryPoint
operator|.
name|newRangeQuery
argument_list|(
literal|"value"
argument_list|,
name|point
argument_list|,
name|point
argument_list|)
argument_list|)
expr_stmt|;
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"field=\"value\" was indexed with bytesPerDim=8 but this query has bytesPerDim=10"
argument_list|,
name|expected
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|close
argument_list|(
name|r
argument_list|,
name|w
argument_list|,
name|dir
argument_list|)
expr_stmt|;
block|}
DECL|method|testAllPointDocsWereDeletedAndThenMergedAgain
specifier|public
name|void
name|testAllPointDocsWereDeletedAndThenMergedAgain
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriterConfig
name|iwc
init|=
name|newIndexWriterConfig
argument_list|()
decl_stmt|;
name|iwc
operator|.
name|setCodec
argument_list|(
name|getCodec
argument_list|()
argument_list|)
expr_stmt|;
name|IndexWriter
name|w
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|iwc
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|StringField
argument_list|(
literal|"id"
argument_list|,
literal|"0"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|LongPoint
argument_list|(
literal|"value"
argument_list|,
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
comment|// Add document that won't be deleted to avoid IW dropping
comment|// segment below since it's 100% deleted:
name|w
operator|.
name|addDocument
argument_list|(
operator|new
name|Document
argument_list|()
argument_list|)
expr_stmt|;
name|w
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|// Need another segment so we invoke BKDWriter.merge
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|StringField
argument_list|(
literal|"id"
argument_list|,
literal|"0"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|LongPoint
argument_list|(
literal|"value"
argument_list|,
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
operator|new
name|Document
argument_list|()
argument_list|)
expr_stmt|;
name|w
operator|.
name|deleteDocuments
argument_list|(
operator|new
name|Term
argument_list|(
literal|"id"
argument_list|,
literal|"0"
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|forceMerge
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|StringField
argument_list|(
literal|"id"
argument_list|,
literal|"0"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|LongPoint
argument_list|(
literal|"value"
argument_list|,
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
operator|new
name|Document
argument_list|()
argument_list|)
expr_stmt|;
name|w
operator|.
name|deleteDocuments
argument_list|(
operator|new
name|Term
argument_list|(
literal|"id"
argument_list|,
literal|"0"
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|forceMerge
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|close
argument_list|(
name|w
argument_list|,
name|dir
argument_list|)
expr_stmt|;
block|}
DECL|method|getCodec
specifier|private
specifier|static
name|Codec
name|getCodec
parameter_list|()
block|{
if|if
condition|(
name|Codec
operator|.
name|getDefault
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"Lucene62"
argument_list|)
condition|)
block|{
name|int
name|maxPointsInLeafNode
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|16
argument_list|,
literal|2048
argument_list|)
decl_stmt|;
name|double
name|maxMBSortInHeap
init|=
literal|5.0
operator|+
operator|(
literal|3
operator|*
name|random
argument_list|()
operator|.
name|nextDouble
argument_list|()
operator|)
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TEST: using Lucene60PointsFormat with maxPointsInLeafNode="
operator|+
name|maxPointsInLeafNode
operator|+
literal|" and maxMBSortInHeap="
operator|+
name|maxMBSortInHeap
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|FilterCodec
argument_list|(
literal|"Lucene62"
argument_list|,
name|Codec
operator|.
name|getDefault
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|PointsFormat
name|pointsFormat
parameter_list|()
block|{
return|return
operator|new
name|PointsFormat
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|PointsWriter
name|fieldsWriter
parameter_list|(
name|SegmentWriteState
name|writeState
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|Lucene60PointsWriter
argument_list|(
name|writeState
argument_list|,
name|maxPointsInLeafNode
argument_list|,
name|maxMBSortInHeap
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|PointsReader
name|fieldsReader
parameter_list|(
name|SegmentReadState
name|readState
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|Lucene60PointsReader
argument_list|(
name|readState
argument_list|)
return|;
block|}
block|}
return|;
block|}
block|}
return|;
block|}
else|else
block|{
return|return
name|Codec
operator|.
name|getDefault
argument_list|()
return|;
block|}
block|}
DECL|method|testExactPoints
specifier|public
name|void
name|testExactPoints
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriterConfig
name|iwc
init|=
name|newIndexWriterConfig
argument_list|()
decl_stmt|;
name|iwc
operator|.
name|setCodec
argument_list|(
name|getCodec
argument_list|()
argument_list|)
expr_stmt|;
name|IndexWriter
name|w
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|iwc
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|LongPoint
argument_list|(
literal|"long"
argument_list|,
literal|5L
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|IntPoint
argument_list|(
literal|"int"
argument_list|,
literal|42
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|FloatPoint
argument_list|(
literal|"float"
argument_list|,
literal|2.0f
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|DoublePoint
argument_list|(
literal|"double"
argument_list|,
literal|1.0
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|IndexReader
name|r
init|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|w
argument_list|)
decl_stmt|;
name|IndexSearcher
name|s
init|=
name|newSearcher
argument_list|(
name|r
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|IntPoint
operator|.
name|newExactQuery
argument_list|(
literal|"int"
argument_list|,
literal|42
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|IntPoint
operator|.
name|newExactQuery
argument_list|(
literal|"int"
argument_list|,
literal|41
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|LongPoint
operator|.
name|newExactQuery
argument_list|(
literal|"long"
argument_list|,
literal|5L
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|LongPoint
operator|.
name|newExactQuery
argument_list|(
literal|"long"
argument_list|,
operator|-
literal|1L
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|FloatPoint
operator|.
name|newExactQuery
argument_list|(
literal|"float"
argument_list|,
literal|2.0f
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|FloatPoint
operator|.
name|newExactQuery
argument_list|(
literal|"float"
argument_list|,
literal|1.0f
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|DoublePoint
operator|.
name|newExactQuery
argument_list|(
literal|"double"
argument_list|,
literal|1.0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|DoublePoint
operator|.
name|newExactQuery
argument_list|(
literal|"double"
argument_list|,
literal|2.0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testToString
specifier|public
name|void
name|testToString
parameter_list|()
throws|throws
name|Exception
block|{
comment|// ints
name|assertEquals
argument_list|(
literal|"field:[1 TO 2]"
argument_list|,
name|IntPoint
operator|.
name|newRangeQuery
argument_list|(
literal|"field"
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"field:[-2 TO 1]"
argument_list|,
name|IntPoint
operator|.
name|newRangeQuery
argument_list|(
literal|"field"
argument_list|,
operator|-
literal|2
argument_list|,
literal|1
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// longs
name|assertEquals
argument_list|(
literal|"field:[1099511627776 TO 2199023255552]"
argument_list|,
name|LongPoint
operator|.
name|newRangeQuery
argument_list|(
literal|"field"
argument_list|,
literal|1L
operator|<<
literal|40
argument_list|,
literal|1L
operator|<<
literal|41
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"field:[-5 TO 6]"
argument_list|,
name|LongPoint
operator|.
name|newRangeQuery
argument_list|(
literal|"field"
argument_list|,
operator|-
literal|5L
argument_list|,
literal|6L
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// floats
name|assertEquals
argument_list|(
literal|"field:[1.3 TO 2.5]"
argument_list|,
name|FloatPoint
operator|.
name|newRangeQuery
argument_list|(
literal|"field"
argument_list|,
literal|1.3F
argument_list|,
literal|2.5F
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"field:[-2.9 TO 1.0]"
argument_list|,
name|FloatPoint
operator|.
name|newRangeQuery
argument_list|(
literal|"field"
argument_list|,
operator|-
literal|2.9F
argument_list|,
literal|1.0F
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// doubles
name|assertEquals
argument_list|(
literal|"field:[1.3 TO 2.5]"
argument_list|,
name|DoublePoint
operator|.
name|newRangeQuery
argument_list|(
literal|"field"
argument_list|,
literal|1.3
argument_list|,
literal|2.5
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"field:[-2.9 TO 1.0]"
argument_list|,
name|DoublePoint
operator|.
name|newRangeQuery
argument_list|(
literal|"field"
argument_list|,
operator|-
literal|2.9
argument_list|,
literal|1.0
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// n-dimensional double
name|assertEquals
argument_list|(
literal|"field:[1.3 TO 2.5],[-2.9 TO 1.0]"
argument_list|,
name|DoublePoint
operator|.
name|newRangeQuery
argument_list|(
literal|"field"
argument_list|,
operator|new
name|double
index|[]
block|{
literal|1.3
block|,
operator|-
literal|2.9
block|}
argument_list|,
operator|new
name|double
index|[]
block|{
literal|2.5
block|,
literal|1.0
block|}
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|toArray
specifier|private
name|int
index|[]
name|toArray
parameter_list|(
name|Set
argument_list|<
name|Integer
argument_list|>
name|valuesSet
parameter_list|)
block|{
name|int
index|[]
name|values
init|=
operator|new
name|int
index|[
name|valuesSet
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|upto
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Integer
name|value
range|:
name|valuesSet
control|)
block|{
name|values
index|[
name|upto
operator|++
index|]
operator|=
name|value
expr_stmt|;
block|}
return|return
name|values
return|;
block|}
DECL|method|randomIntValue
specifier|private
specifier|static
name|int
name|randomIntValue
parameter_list|(
name|Integer
name|min
parameter_list|,
name|Integer
name|max
parameter_list|)
block|{
if|if
condition|(
name|min
operator|==
literal|null
condition|)
block|{
return|return
name|random
argument_list|()
operator|.
name|nextInt
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
name|min
argument_list|,
name|max
argument_list|)
return|;
block|}
block|}
DECL|method|testRandomPointInSetQuery
specifier|public
name|void
name|testRandomPointInSetQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|boolean
name|useNarrowRange
init|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
decl_stmt|;
specifier|final
name|Integer
name|valueMin
decl_stmt|;
specifier|final
name|Integer
name|valueMax
decl_stmt|;
name|int
name|numValues
decl_stmt|;
if|if
condition|(
name|useNarrowRange
condition|)
block|{
name|int
name|gap
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
decl_stmt|;
name|valueMin
operator|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
operator|-
name|gap
argument_list|)
expr_stmt|;
name|valueMax
operator|=
name|valueMin
operator|+
name|gap
expr_stmt|;
name|numValues
operator|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
name|gap
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|valueMin
operator|=
literal|null
expr_stmt|;
name|valueMax
operator|=
literal|null
expr_stmt|;
name|numValues
operator|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|100
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Set
argument_list|<
name|Integer
argument_list|>
name|valuesSet
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
while|while
condition|(
name|valuesSet
operator|.
name|size
argument_list|()
operator|<
name|numValues
condition|)
block|{
name|valuesSet
operator|.
name|add
argument_list|(
name|randomIntValue
argument_list|(
name|valueMin
argument_list|,
name|valueMax
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|int
index|[]
name|values
init|=
name|toArray
argument_list|(
name|valuesSet
argument_list|)
decl_stmt|;
name|int
name|numDocs
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|10000
argument_list|)
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TEST: numValues="
operator|+
name|numValues
operator|+
literal|" numDocs="
operator|+
name|numDocs
argument_list|)
expr_stmt|;
block|}
name|Directory
name|dir
decl_stmt|;
if|if
condition|(
name|numDocs
operator|>
literal|100000
condition|)
block|{
name|dir
operator|=
name|newFSDirectory
argument_list|(
name|createTempDir
argument_list|(
literal|"TestPointQueries"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|dir
operator|=
name|newDirectory
argument_list|()
expr_stmt|;
block|}
name|IndexWriterConfig
name|iwc
init|=
name|newIndexWriterConfig
argument_list|()
decl_stmt|;
name|iwc
operator|.
name|setCodec
argument_list|(
name|getCodec
argument_list|()
argument_list|)
expr_stmt|;
name|RandomIndexWriter
name|w
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|,
name|iwc
argument_list|)
decl_stmt|;
name|int
index|[]
name|docValues
init|=
operator|new
name|int
index|[
name|numDocs
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
name|i
operator|++
control|)
block|{
name|int
name|x
init|=
name|values
index|[
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|values
operator|.
name|length
argument_list|)
index|]
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|IntPoint
argument_list|(
literal|"int"
argument_list|,
name|x
argument_list|)
argument_list|)
expr_stmt|;
name|docValues
index|[
name|i
index|]
operator|=
name|x
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  forceMerge(1)"
argument_list|)
expr_stmt|;
block|}
name|w
operator|.
name|forceMerge
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
specifier|final
name|IndexReader
name|r
init|=
name|w
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|IndexSearcher
name|s
init|=
name|newSearcher
argument_list|(
name|r
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|int
name|numThreads
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|2
argument_list|,
literal|5
argument_list|)
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TEST: use "
operator|+
name|numThreads
operator|+
literal|" query threads; searcher="
operator|+
name|s
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|Thread
argument_list|>
name|threads
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|int
name|iters
init|=
name|atLeast
argument_list|(
literal|100
argument_list|)
decl_stmt|;
specifier|final
name|CountDownLatch
name|startingGun
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|AtomicBoolean
name|failed
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numThreads
condition|;
name|i
operator|++
control|)
block|{
name|Thread
name|thread
init|=
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|_run
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|failed
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|_run
parameter_list|()
throws|throws
name|Exception
block|{
name|startingGun
operator|.
name|await
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|iter
init|=
literal|0
init|;
name|iter
operator|<
name|iters
operator|&&
name|failed
operator|.
name|get
argument_list|()
operator|==
literal|false
condition|;
name|iter
operator|++
control|)
block|{
name|int
name|numValidValuesToQuery
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|values
operator|.
name|length
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Integer
argument_list|>
name|valuesToQuery
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
while|while
condition|(
name|valuesToQuery
operator|.
name|size
argument_list|()
operator|<
name|numValidValuesToQuery
condition|)
block|{
name|valuesToQuery
operator|.
name|add
argument_list|(
name|values
index|[
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|values
operator|.
name|length
argument_list|)
index|]
argument_list|)
expr_stmt|;
block|}
name|int
name|numExtraValuesToQuery
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|20
argument_list|)
decl_stmt|;
while|while
condition|(
name|valuesToQuery
operator|.
name|size
argument_list|()
operator|<
name|numValidValuesToQuery
operator|+
name|numExtraValuesToQuery
condition|)
block|{
name|valuesToQuery
operator|.
name|add
argument_list|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|int
name|expectedCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|value
range|:
name|docValues
control|)
block|{
if|if
condition|(
name|valuesToQuery
operator|.
name|contains
argument_list|(
name|value
argument_list|)
condition|)
block|{
name|expectedCount
operator|++
expr_stmt|;
block|}
block|}
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TEST: thread="
operator|+
name|Thread
operator|.
name|currentThread
argument_list|()
operator|+
literal|" values="
operator|+
name|valuesToQuery
operator|+
literal|" expectedCount="
operator|+
name|expectedCount
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|expectedCount
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|IntPoint
operator|.
name|newSetQuery
argument_list|(
literal|"int"
argument_list|,
name|toArray
argument_list|(
name|valuesToQuery
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|thread
operator|.
name|setName
argument_list|(
literal|"T"
operator|+
name|i
argument_list|)
expr_stmt|;
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
name|threads
operator|.
name|add
argument_list|(
name|thread
argument_list|)
expr_stmt|;
block|}
name|startingGun
operator|.
name|countDown
argument_list|()
expr_stmt|;
for|for
control|(
name|Thread
name|thread
range|:
name|threads
control|)
block|{
name|thread
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
name|IOUtils
operator|.
name|close
argument_list|(
name|r
argument_list|,
name|dir
argument_list|)
expr_stmt|;
block|}
comment|// TODO: in the future, if there is demand for real usage, we can "graduate" this test-only query factory as IntPoint.newMultiSetQuery or
comment|// something (and same for other XXXPoint classes):
DECL|method|newMultiDimIntSetQuery
specifier|private
specifier|static
name|Query
name|newMultiDimIntSetQuery
parameter_list|(
name|String
name|field
parameter_list|,
specifier|final
name|int
name|numDims
parameter_list|,
name|int
modifier|...
name|valuesIn
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|valuesIn
operator|.
name|length
operator|%
name|numDims
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"incongruent number of values: valuesIn.length="
operator|+
name|valuesIn
operator|.
name|length
operator|+
literal|" but numDims="
operator|+
name|numDims
argument_list|)
throw|;
block|}
comment|// Pack all values:
name|byte
index|[]
index|[]
name|packedValues
init|=
operator|new
name|byte
index|[
name|valuesIn
operator|.
name|length
operator|/
name|numDims
index|]
index|[]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|packedValues
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|byte
index|[]
name|packedValue
init|=
operator|new
name|byte
index|[
name|numDims
operator|*
name|Integer
operator|.
name|BYTES
index|]
decl_stmt|;
name|packedValues
index|[
name|i
index|]
operator|=
name|packedValue
expr_stmt|;
for|for
control|(
name|int
name|dim
init|=
literal|0
init|;
name|dim
operator|<
name|numDims
condition|;
name|dim
operator|++
control|)
block|{
name|IntPoint
operator|.
name|encodeDimension
argument_list|(
name|valuesIn
index|[
name|i
operator|*
name|numDims
operator|+
name|dim
index|]
argument_list|,
name|packedValue
argument_list|,
name|dim
operator|*
name|Integer
operator|.
name|BYTES
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Sort:
name|Arrays
operator|.
name|sort
argument_list|(
name|packedValues
argument_list|,
operator|new
name|Comparator
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|byte
index|[]
name|a
parameter_list|,
name|byte
index|[]
name|b
parameter_list|)
block|{
return|return
name|StringHelper
operator|.
name|compare
argument_list|(
name|a
operator|.
name|length
argument_list|,
name|a
argument_list|,
literal|0
argument_list|,
name|b
argument_list|,
literal|0
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
specifier|final
name|BytesRef
name|value
init|=
operator|new
name|BytesRef
argument_list|()
decl_stmt|;
name|value
operator|.
name|length
operator|=
name|numDims
operator|*
name|Integer
operator|.
name|BYTES
expr_stmt|;
return|return
operator|new
name|PointInSetQuery
argument_list|(
name|field
argument_list|,
name|numDims
argument_list|,
name|Integer
operator|.
name|BYTES
argument_list|,
operator|new
name|PointInSetQuery
operator|.
name|Stream
argument_list|()
block|{
name|int
name|upto
decl_stmt|;
annotation|@
name|Override
specifier|public
name|BytesRef
name|next
parameter_list|()
block|{
if|if
condition|(
name|upto
operator|>=
name|packedValues
operator|.
name|length
condition|)
block|{
return|return
literal|null
return|;
block|}
name|value
operator|.
name|bytes
operator|=
name|packedValues
index|[
name|upto
index|]
expr_stmt|;
name|upto
operator|++
expr_stmt|;
return|return
name|value
return|;
block|}
block|}
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|String
name|toString
parameter_list|(
name|byte
index|[]
name|value
parameter_list|)
block|{
assert|assert
name|value
operator|.
name|length
operator|==
name|numDims
operator|*
name|Integer
operator|.
name|BYTES
assert|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|dim
init|=
literal|0
init|;
name|dim
operator|<
name|numDims
condition|;
name|dim
operator|++
control|)
block|{
if|if
condition|(
name|dim
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|IntPoint
operator|.
name|decodeDimension
argument_list|(
name|value
argument_list|,
name|dim
operator|*
name|Integer
operator|.
name|BYTES
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
return|;
block|}
DECL|method|testBasicMultiDimPointInSetQuery
specifier|public
name|void
name|testBasicMultiDimPointInSetQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriterConfig
name|iwc
init|=
name|newIndexWriterConfig
argument_list|()
decl_stmt|;
name|iwc
operator|.
name|setCodec
argument_list|(
name|getCodec
argument_list|()
argument_list|)
expr_stmt|;
name|IndexWriter
name|w
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|iwc
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|IntPoint
argument_list|(
literal|"int"
argument_list|,
literal|17
argument_list|,
literal|42
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|IndexReader
name|r
init|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|w
argument_list|)
decl_stmt|;
name|IndexSearcher
name|s
init|=
name|newSearcher
argument_list|(
name|r
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|newMultiDimIntSetQuery
argument_list|(
literal|"int"
argument_list|,
literal|2
argument_list|,
literal|17
argument_list|,
literal|41
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|newMultiDimIntSetQuery
argument_list|(
literal|"int"
argument_list|,
literal|2
argument_list|,
literal|17
argument_list|,
literal|42
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|newMultiDimIntSetQuery
argument_list|(
literal|"int"
argument_list|,
literal|2
argument_list|,
operator|-
literal|7
argument_list|,
operator|-
literal|7
argument_list|,
literal|17
argument_list|,
literal|42
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|newMultiDimIntSetQuery
argument_list|(
literal|"int"
argument_list|,
literal|2
argument_list|,
literal|17
argument_list|,
literal|42
argument_list|,
operator|-
literal|14
argument_list|,
operator|-
literal|14
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testBasicMultiValueMultiDimPointInSetQuery
specifier|public
name|void
name|testBasicMultiValueMultiDimPointInSetQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriterConfig
name|iwc
init|=
name|newIndexWriterConfig
argument_list|()
decl_stmt|;
name|iwc
operator|.
name|setCodec
argument_list|(
name|getCodec
argument_list|()
argument_list|)
expr_stmt|;
name|IndexWriter
name|w
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|iwc
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|IntPoint
argument_list|(
literal|"int"
argument_list|,
literal|17
argument_list|,
literal|42
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|IntPoint
argument_list|(
literal|"int"
argument_list|,
literal|34
argument_list|,
literal|79
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|IndexReader
name|r
init|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|w
argument_list|)
decl_stmt|;
name|IndexSearcher
name|s
init|=
name|newSearcher
argument_list|(
name|r
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|newMultiDimIntSetQuery
argument_list|(
literal|"int"
argument_list|,
literal|2
argument_list|,
literal|17
argument_list|,
literal|41
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|newMultiDimIntSetQuery
argument_list|(
literal|"int"
argument_list|,
literal|2
argument_list|,
literal|17
argument_list|,
literal|42
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|newMultiDimIntSetQuery
argument_list|(
literal|"int"
argument_list|,
literal|2
argument_list|,
literal|17
argument_list|,
literal|42
argument_list|,
literal|34
argument_list|,
literal|79
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|newMultiDimIntSetQuery
argument_list|(
literal|"int"
argument_list|,
literal|2
argument_list|,
operator|-
literal|7
argument_list|,
operator|-
literal|7
argument_list|,
literal|17
argument_list|,
literal|42
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|newMultiDimIntSetQuery
argument_list|(
literal|"int"
argument_list|,
literal|2
argument_list|,
operator|-
literal|7
argument_list|,
operator|-
literal|7
argument_list|,
literal|34
argument_list|,
literal|79
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|newMultiDimIntSetQuery
argument_list|(
literal|"int"
argument_list|,
literal|2
argument_list|,
literal|17
argument_list|,
literal|42
argument_list|,
operator|-
literal|14
argument_list|,
operator|-
literal|14
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"int:{-14,-14 17,42}"
argument_list|,
name|newMultiDimIntSetQuery
argument_list|(
literal|"int"
argument_list|,
literal|2
argument_list|,
literal|17
argument_list|,
literal|42
argument_list|,
operator|-
literal|14
argument_list|,
operator|-
literal|14
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testManyEqualValuesMultiDimPointInSetQuery
specifier|public
name|void
name|testManyEqualValuesMultiDimPointInSetQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriterConfig
name|iwc
init|=
name|newIndexWriterConfig
argument_list|()
decl_stmt|;
name|iwc
operator|.
name|setCodec
argument_list|(
name|getCodec
argument_list|()
argument_list|)
expr_stmt|;
name|IndexWriter
name|w
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|iwc
argument_list|)
decl_stmt|;
name|int
name|zeroCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10000
condition|;
name|i
operator|++
control|)
block|{
name|int
name|x
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
name|x
operator|==
literal|0
condition|)
block|{
name|zeroCount
operator|++
expr_stmt|;
block|}
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|IntPoint
argument_list|(
literal|"int"
argument_list|,
name|x
argument_list|,
name|x
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
name|IndexReader
name|r
init|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|w
argument_list|)
decl_stmt|;
name|IndexSearcher
name|s
init|=
name|newSearcher
argument_list|(
name|r
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|zeroCount
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|newMultiDimIntSetQuery
argument_list|(
literal|"int"
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10000
operator|-
name|zeroCount
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|newMultiDimIntSetQuery
argument_list|(
literal|"int"
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|newMultiDimIntSetQuery
argument_list|(
literal|"int"
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testInvalidMultiDimPointInSetQuery
specifier|public
name|void
name|testInvalidMultiDimPointInSetQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|IllegalArgumentException
name|expected
init|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|newMultiDimIntSetQuery
argument_list|(
literal|"int"
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|)
expr_stmt|;
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incongruent number of values: valuesIn.length=3 but numDims=2"
argument_list|,
name|expected
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testBasicPointInSetQuery
specifier|public
name|void
name|testBasicPointInSetQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriterConfig
name|iwc
init|=
name|newIndexWriterConfig
argument_list|()
decl_stmt|;
name|iwc
operator|.
name|setCodec
argument_list|(
name|getCodec
argument_list|()
argument_list|)
expr_stmt|;
name|IndexWriter
name|w
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|iwc
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|IntPoint
argument_list|(
literal|"int"
argument_list|,
literal|17
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|LongPoint
argument_list|(
literal|"long"
argument_list|,
literal|17L
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|FloatPoint
argument_list|(
literal|"float"
argument_list|,
literal|17.0f
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|DoublePoint
argument_list|(
literal|"double"
argument_list|,
literal|17.0
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|BinaryPoint
argument_list|(
literal|"bytes"
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|0
block|,
literal|17
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|IntPoint
argument_list|(
literal|"int"
argument_list|,
literal|42
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|LongPoint
argument_list|(
literal|"long"
argument_list|,
literal|42L
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|FloatPoint
argument_list|(
literal|"float"
argument_list|,
literal|42.0f
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|DoublePoint
argument_list|(
literal|"double"
argument_list|,
literal|42.0
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|BinaryPoint
argument_list|(
literal|"bytes"
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|0
block|,
literal|42
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|IntPoint
argument_list|(
literal|"int"
argument_list|,
literal|97
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|LongPoint
argument_list|(
literal|"long"
argument_list|,
literal|97L
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|FloatPoint
argument_list|(
literal|"float"
argument_list|,
literal|97.0f
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|DoublePoint
argument_list|(
literal|"double"
argument_list|,
literal|97.0
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|BinaryPoint
argument_list|(
literal|"bytes"
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|0
block|,
literal|97
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|IndexReader
name|r
init|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|w
argument_list|)
decl_stmt|;
name|IndexSearcher
name|s
init|=
name|newSearcher
argument_list|(
name|r
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|IntPoint
operator|.
name|newSetQuery
argument_list|(
literal|"int"
argument_list|,
literal|16
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|IntPoint
operator|.
name|newSetQuery
argument_list|(
literal|"int"
argument_list|,
literal|17
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|IntPoint
operator|.
name|newSetQuery
argument_list|(
literal|"int"
argument_list|,
literal|17
argument_list|,
literal|97
argument_list|,
literal|42
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|IntPoint
operator|.
name|newSetQuery
argument_list|(
literal|"int"
argument_list|,
operator|-
literal|7
argument_list|,
literal|17
argument_list|,
literal|42
argument_list|,
literal|97
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|IntPoint
operator|.
name|newSetQuery
argument_list|(
literal|"int"
argument_list|,
literal|17
argument_list|,
literal|20
argument_list|,
literal|42
argument_list|,
literal|97
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|IntPoint
operator|.
name|newSetQuery
argument_list|(
literal|"int"
argument_list|,
literal|17
argument_list|,
literal|105
argument_list|,
literal|42
argument_list|,
literal|97
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|LongPoint
operator|.
name|newSetQuery
argument_list|(
literal|"long"
argument_list|,
literal|16
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|LongPoint
operator|.
name|newSetQuery
argument_list|(
literal|"long"
argument_list|,
literal|17
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|LongPoint
operator|.
name|newSetQuery
argument_list|(
literal|"long"
argument_list|,
literal|17
argument_list|,
literal|97
argument_list|,
literal|42
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|LongPoint
operator|.
name|newSetQuery
argument_list|(
literal|"long"
argument_list|,
operator|-
literal|7
argument_list|,
literal|17
argument_list|,
literal|42
argument_list|,
literal|97
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|LongPoint
operator|.
name|newSetQuery
argument_list|(
literal|"long"
argument_list|,
literal|17
argument_list|,
literal|20
argument_list|,
literal|42
argument_list|,
literal|97
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|LongPoint
operator|.
name|newSetQuery
argument_list|(
literal|"long"
argument_list|,
literal|17
argument_list|,
literal|105
argument_list|,
literal|42
argument_list|,
literal|97
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|FloatPoint
operator|.
name|newSetQuery
argument_list|(
literal|"float"
argument_list|,
literal|16
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|FloatPoint
operator|.
name|newSetQuery
argument_list|(
literal|"float"
argument_list|,
literal|17
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|FloatPoint
operator|.
name|newSetQuery
argument_list|(
literal|"float"
argument_list|,
literal|17
argument_list|,
literal|97
argument_list|,
literal|42
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|FloatPoint
operator|.
name|newSetQuery
argument_list|(
literal|"float"
argument_list|,
operator|-
literal|7
argument_list|,
literal|17
argument_list|,
literal|42
argument_list|,
literal|97
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|FloatPoint
operator|.
name|newSetQuery
argument_list|(
literal|"float"
argument_list|,
literal|17
argument_list|,
literal|20
argument_list|,
literal|42
argument_list|,
literal|97
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|FloatPoint
operator|.
name|newSetQuery
argument_list|(
literal|"float"
argument_list|,
literal|17
argument_list|,
literal|105
argument_list|,
literal|42
argument_list|,
literal|97
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|DoublePoint
operator|.
name|newSetQuery
argument_list|(
literal|"double"
argument_list|,
literal|16
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|DoublePoint
operator|.
name|newSetQuery
argument_list|(
literal|"double"
argument_list|,
literal|17
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|DoublePoint
operator|.
name|newSetQuery
argument_list|(
literal|"double"
argument_list|,
literal|17
argument_list|,
literal|97
argument_list|,
literal|42
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|DoublePoint
operator|.
name|newSetQuery
argument_list|(
literal|"double"
argument_list|,
operator|-
literal|7
argument_list|,
literal|17
argument_list|,
literal|42
argument_list|,
literal|97
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|DoublePoint
operator|.
name|newSetQuery
argument_list|(
literal|"double"
argument_list|,
literal|17
argument_list|,
literal|20
argument_list|,
literal|42
argument_list|,
literal|97
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|DoublePoint
operator|.
name|newSetQuery
argument_list|(
literal|"double"
argument_list|,
literal|17
argument_list|,
literal|105
argument_list|,
literal|42
argument_list|,
literal|97
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|BinaryPoint
operator|.
name|newSetQuery
argument_list|(
literal|"bytes"
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|0
block|,
literal|16
block|}
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|BinaryPoint
operator|.
name|newSetQuery
argument_list|(
literal|"bytes"
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|0
block|,
literal|17
block|}
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|BinaryPoint
operator|.
name|newSetQuery
argument_list|(
literal|"bytes"
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|0
block|,
literal|17
block|}
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|0
block|,
literal|97
block|}
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|0
block|,
literal|42
block|}
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|BinaryPoint
operator|.
name|newSetQuery
argument_list|(
literal|"bytes"
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|0
block|,
operator|-
literal|7
block|}
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|0
block|,
literal|17
block|}
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|0
block|,
literal|42
block|}
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|0
block|,
literal|97
block|}
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|BinaryPoint
operator|.
name|newSetQuery
argument_list|(
literal|"bytes"
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|0
block|,
literal|17
block|}
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|0
block|,
literal|20
block|}
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|0
block|,
literal|42
block|}
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|0
block|,
literal|97
block|}
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|BinaryPoint
operator|.
name|newSetQuery
argument_list|(
literal|"bytes"
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|0
block|,
literal|17
block|}
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|0
block|,
literal|105
block|}
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|0
block|,
literal|42
block|}
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|0
block|,
literal|97
block|}
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/** Boxed methods for primitive types should behave the same as unboxed: just sugar */
DECL|method|testPointIntSetBoxed
specifier|public
name|void
name|testPointIntSetBoxed
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
name|IntPoint
operator|.
name|newSetQuery
argument_list|(
literal|"foo"
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
argument_list|,
name|IntPoint
operator|.
name|newSetQuery
argument_list|(
literal|"foo"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|FloatPoint
operator|.
name|newSetQuery
argument_list|(
literal|"foo"
argument_list|,
literal|1F
argument_list|,
literal|2F
argument_list|,
literal|3F
argument_list|)
argument_list|,
name|FloatPoint
operator|.
name|newSetQuery
argument_list|(
literal|"foo"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|1F
argument_list|,
literal|2F
argument_list|,
literal|3F
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|LongPoint
operator|.
name|newSetQuery
argument_list|(
literal|"foo"
argument_list|,
literal|1L
argument_list|,
literal|2L
argument_list|,
literal|3L
argument_list|)
argument_list|,
name|LongPoint
operator|.
name|newSetQuery
argument_list|(
literal|"foo"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|1L
argument_list|,
literal|2L
argument_list|,
literal|3L
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DoublePoint
operator|.
name|newSetQuery
argument_list|(
literal|"foo"
argument_list|,
literal|1D
argument_list|,
literal|2D
argument_list|,
literal|3D
argument_list|)
argument_list|,
name|DoublePoint
operator|.
name|newSetQuery
argument_list|(
literal|"foo"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|1D
argument_list|,
literal|2D
argument_list|,
literal|3D
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testBasicMultiValuedPointInSetQuery
specifier|public
name|void
name|testBasicMultiValuedPointInSetQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriterConfig
name|iwc
init|=
name|newIndexWriterConfig
argument_list|()
decl_stmt|;
name|iwc
operator|.
name|setCodec
argument_list|(
name|getCodec
argument_list|()
argument_list|)
expr_stmt|;
name|IndexWriter
name|w
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|iwc
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|IntPoint
argument_list|(
literal|"int"
argument_list|,
literal|17
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|IntPoint
argument_list|(
literal|"int"
argument_list|,
literal|42
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|LongPoint
argument_list|(
literal|"long"
argument_list|,
literal|17L
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|LongPoint
argument_list|(
literal|"long"
argument_list|,
literal|42L
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|FloatPoint
argument_list|(
literal|"float"
argument_list|,
literal|17.0f
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|FloatPoint
argument_list|(
literal|"float"
argument_list|,
literal|42.0f
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|DoublePoint
argument_list|(
literal|"double"
argument_list|,
literal|17.0
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|DoublePoint
argument_list|(
literal|"double"
argument_list|,
literal|42.0
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|BinaryPoint
argument_list|(
literal|"bytes"
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|0
block|,
literal|17
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|BinaryPoint
argument_list|(
literal|"bytes"
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|0
block|,
literal|42
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|IndexReader
name|r
init|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|w
argument_list|)
decl_stmt|;
name|IndexSearcher
name|s
init|=
name|newSearcher
argument_list|(
name|r
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|IntPoint
operator|.
name|newSetQuery
argument_list|(
literal|"int"
argument_list|,
literal|16
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|IntPoint
operator|.
name|newSetQuery
argument_list|(
literal|"int"
argument_list|,
literal|17
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|IntPoint
operator|.
name|newSetQuery
argument_list|(
literal|"int"
argument_list|,
literal|17
argument_list|,
literal|97
argument_list|,
literal|42
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|IntPoint
operator|.
name|newSetQuery
argument_list|(
literal|"int"
argument_list|,
operator|-
literal|7
argument_list|,
literal|17
argument_list|,
literal|42
argument_list|,
literal|97
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|IntPoint
operator|.
name|newSetQuery
argument_list|(
literal|"int"
argument_list|,
literal|16
argument_list|,
literal|20
argument_list|,
literal|41
argument_list|,
literal|97
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|LongPoint
operator|.
name|newSetQuery
argument_list|(
literal|"long"
argument_list|,
literal|16
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|LongPoint
operator|.
name|newSetQuery
argument_list|(
literal|"long"
argument_list|,
literal|17
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|LongPoint
operator|.
name|newSetQuery
argument_list|(
literal|"long"
argument_list|,
literal|17
argument_list|,
literal|97
argument_list|,
literal|42
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|LongPoint
operator|.
name|newSetQuery
argument_list|(
literal|"long"
argument_list|,
operator|-
literal|7
argument_list|,
literal|17
argument_list|,
literal|42
argument_list|,
literal|97
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|LongPoint
operator|.
name|newSetQuery
argument_list|(
literal|"long"
argument_list|,
literal|16
argument_list|,
literal|20
argument_list|,
literal|41
argument_list|,
literal|97
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|FloatPoint
operator|.
name|newSetQuery
argument_list|(
literal|"float"
argument_list|,
literal|16
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|FloatPoint
operator|.
name|newSetQuery
argument_list|(
literal|"float"
argument_list|,
literal|17
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|FloatPoint
operator|.
name|newSetQuery
argument_list|(
literal|"float"
argument_list|,
literal|17
argument_list|,
literal|97
argument_list|,
literal|42
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|FloatPoint
operator|.
name|newSetQuery
argument_list|(
literal|"float"
argument_list|,
operator|-
literal|7
argument_list|,
literal|17
argument_list|,
literal|42
argument_list|,
literal|97
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|FloatPoint
operator|.
name|newSetQuery
argument_list|(
literal|"float"
argument_list|,
literal|16
argument_list|,
literal|20
argument_list|,
literal|41
argument_list|,
literal|97
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|DoublePoint
operator|.
name|newSetQuery
argument_list|(
literal|"double"
argument_list|,
literal|16
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|DoublePoint
operator|.
name|newSetQuery
argument_list|(
literal|"double"
argument_list|,
literal|17
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|DoublePoint
operator|.
name|newSetQuery
argument_list|(
literal|"double"
argument_list|,
literal|17
argument_list|,
literal|97
argument_list|,
literal|42
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|DoublePoint
operator|.
name|newSetQuery
argument_list|(
literal|"double"
argument_list|,
operator|-
literal|7
argument_list|,
literal|17
argument_list|,
literal|42
argument_list|,
literal|97
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|DoublePoint
operator|.
name|newSetQuery
argument_list|(
literal|"double"
argument_list|,
literal|16
argument_list|,
literal|20
argument_list|,
literal|41
argument_list|,
literal|97
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|BinaryPoint
operator|.
name|newSetQuery
argument_list|(
literal|"bytes"
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|0
block|,
literal|16
block|}
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|BinaryPoint
operator|.
name|newSetQuery
argument_list|(
literal|"bytes"
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|0
block|,
literal|17
block|}
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|BinaryPoint
operator|.
name|newSetQuery
argument_list|(
literal|"bytes"
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|0
block|,
literal|17
block|}
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|0
block|,
literal|97
block|}
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|0
block|,
literal|42
block|}
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|BinaryPoint
operator|.
name|newSetQuery
argument_list|(
literal|"bytes"
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|0
block|,
operator|-
literal|7
block|}
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|0
block|,
literal|17
block|}
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|0
block|,
literal|42
block|}
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|0
block|,
literal|97
block|}
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|BinaryPoint
operator|.
name|newSetQuery
argument_list|(
literal|"bytes"
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|0
block|,
literal|16
block|}
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|0
block|,
literal|20
block|}
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|0
block|,
literal|41
block|}
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|0
block|,
literal|97
block|}
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testEmptyPointInSetQuery
specifier|public
name|void
name|testEmptyPointInSetQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriterConfig
name|iwc
init|=
name|newIndexWriterConfig
argument_list|()
decl_stmt|;
name|iwc
operator|.
name|setCodec
argument_list|(
name|getCodec
argument_list|()
argument_list|)
expr_stmt|;
name|IndexWriter
name|w
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|iwc
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|IntPoint
argument_list|(
literal|"int"
argument_list|,
literal|17
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|LongPoint
argument_list|(
literal|"long"
argument_list|,
literal|17L
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|FloatPoint
argument_list|(
literal|"float"
argument_list|,
literal|17.0f
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|DoublePoint
argument_list|(
literal|"double"
argument_list|,
literal|17.0
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|BinaryPoint
argument_list|(
literal|"bytes"
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|0
block|,
literal|17
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|IndexReader
name|r
init|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|w
argument_list|)
decl_stmt|;
name|IndexSearcher
name|s
init|=
name|newSearcher
argument_list|(
name|r
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|IntPoint
operator|.
name|newSetQuery
argument_list|(
literal|"int"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|LongPoint
operator|.
name|newSetQuery
argument_list|(
literal|"long"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|FloatPoint
operator|.
name|newSetQuery
argument_list|(
literal|"float"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|DoublePoint
operator|.
name|newSetQuery
argument_list|(
literal|"double"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|BinaryPoint
operator|.
name|newSetQuery
argument_list|(
literal|"bytes"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testPointInSetQueryManyEqualValues
specifier|public
name|void
name|testPointInSetQueryManyEqualValues
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriterConfig
name|iwc
init|=
name|newIndexWriterConfig
argument_list|()
decl_stmt|;
name|iwc
operator|.
name|setCodec
argument_list|(
name|getCodec
argument_list|()
argument_list|)
expr_stmt|;
name|IndexWriter
name|w
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|iwc
argument_list|)
decl_stmt|;
name|int
name|zeroCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10000
condition|;
name|i
operator|++
control|)
block|{
name|int
name|x
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
name|x
operator|==
literal|0
condition|)
block|{
name|zeroCount
operator|++
expr_stmt|;
block|}
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|IntPoint
argument_list|(
literal|"int"
argument_list|,
name|x
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|LongPoint
argument_list|(
literal|"long"
argument_list|,
operator|(
name|long
operator|)
name|x
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|FloatPoint
argument_list|(
literal|"float"
argument_list|,
operator|(
name|float
operator|)
name|x
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|DoublePoint
argument_list|(
literal|"double"
argument_list|,
operator|(
name|double
operator|)
name|x
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|BinaryPoint
argument_list|(
literal|"bytes"
argument_list|,
operator|new
name|byte
index|[]
block|{
operator|(
name|byte
operator|)
name|x
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
name|IndexReader
name|r
init|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|w
argument_list|)
decl_stmt|;
name|IndexSearcher
name|s
init|=
name|newSearcher
argument_list|(
name|r
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|zeroCount
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|IntPoint
operator|.
name|newSetQuery
argument_list|(
literal|"int"
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|zeroCount
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|IntPoint
operator|.
name|newSetQuery
argument_list|(
literal|"int"
argument_list|,
literal|0
argument_list|,
operator|-
literal|7
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|zeroCount
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|IntPoint
operator|.
name|newSetQuery
argument_list|(
literal|"int"
argument_list|,
literal|7
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10000
operator|-
name|zeroCount
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|IntPoint
operator|.
name|newSetQuery
argument_list|(
literal|"int"
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|IntPoint
operator|.
name|newSetQuery
argument_list|(
literal|"int"
argument_list|,
literal|2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|zeroCount
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|LongPoint
operator|.
name|newSetQuery
argument_list|(
literal|"long"
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|zeroCount
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|LongPoint
operator|.
name|newSetQuery
argument_list|(
literal|"long"
argument_list|,
literal|0
argument_list|,
operator|-
literal|7
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|zeroCount
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|LongPoint
operator|.
name|newSetQuery
argument_list|(
literal|"long"
argument_list|,
literal|7
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10000
operator|-
name|zeroCount
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|LongPoint
operator|.
name|newSetQuery
argument_list|(
literal|"long"
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|LongPoint
operator|.
name|newSetQuery
argument_list|(
literal|"long"
argument_list|,
literal|2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|zeroCount
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|FloatPoint
operator|.
name|newSetQuery
argument_list|(
literal|"float"
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|zeroCount
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|FloatPoint
operator|.
name|newSetQuery
argument_list|(
literal|"float"
argument_list|,
literal|0
argument_list|,
operator|-
literal|7
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|zeroCount
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|FloatPoint
operator|.
name|newSetQuery
argument_list|(
literal|"float"
argument_list|,
literal|7
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10000
operator|-
name|zeroCount
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|FloatPoint
operator|.
name|newSetQuery
argument_list|(
literal|"float"
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|FloatPoint
operator|.
name|newSetQuery
argument_list|(
literal|"float"
argument_list|,
literal|2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|zeroCount
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|DoublePoint
operator|.
name|newSetQuery
argument_list|(
literal|"double"
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|zeroCount
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|DoublePoint
operator|.
name|newSetQuery
argument_list|(
literal|"double"
argument_list|,
literal|0
argument_list|,
operator|-
literal|7
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|zeroCount
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|DoublePoint
operator|.
name|newSetQuery
argument_list|(
literal|"double"
argument_list|,
literal|7
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10000
operator|-
name|zeroCount
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|DoublePoint
operator|.
name|newSetQuery
argument_list|(
literal|"double"
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|DoublePoint
operator|.
name|newSetQuery
argument_list|(
literal|"double"
argument_list|,
literal|2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|zeroCount
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|BinaryPoint
operator|.
name|newSetQuery
argument_list|(
literal|"bytes"
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|0
block|}
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|zeroCount
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|BinaryPoint
operator|.
name|newSetQuery
argument_list|(
literal|"bytes"
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|0
block|}
argument_list|,
operator|new
name|byte
index|[]
block|{
operator|-
literal|7
block|}
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|zeroCount
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|BinaryPoint
operator|.
name|newSetQuery
argument_list|(
literal|"bytes"
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|7
block|}
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|0
block|}
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10000
operator|-
name|zeroCount
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|BinaryPoint
operator|.
name|newSetQuery
argument_list|(
literal|"bytes"
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|1
block|}
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|BinaryPoint
operator|.
name|newSetQuery
argument_list|(
literal|"bytes"
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|2
block|}
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testPointInSetQueryManyEqualValuesWithBigGap
specifier|public
name|void
name|testPointInSetQueryManyEqualValuesWithBigGap
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriterConfig
name|iwc
init|=
name|newIndexWriterConfig
argument_list|()
decl_stmt|;
name|iwc
operator|.
name|setCodec
argument_list|(
name|getCodec
argument_list|()
argument_list|)
expr_stmt|;
name|IndexWriter
name|w
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|iwc
argument_list|)
decl_stmt|;
name|int
name|zeroCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10000
condition|;
name|i
operator|++
control|)
block|{
name|int
name|x
init|=
literal|200
operator|*
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
name|x
operator|==
literal|0
condition|)
block|{
name|zeroCount
operator|++
expr_stmt|;
block|}
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|IntPoint
argument_list|(
literal|"int"
argument_list|,
name|x
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|LongPoint
argument_list|(
literal|"long"
argument_list|,
operator|(
name|long
operator|)
name|x
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|FloatPoint
argument_list|(
literal|"float"
argument_list|,
operator|(
name|float
operator|)
name|x
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|DoublePoint
argument_list|(
literal|"double"
argument_list|,
operator|(
name|double
operator|)
name|x
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|BinaryPoint
argument_list|(
literal|"bytes"
argument_list|,
operator|new
name|byte
index|[]
block|{
operator|(
name|byte
operator|)
name|x
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
name|IndexReader
name|r
init|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|w
argument_list|)
decl_stmt|;
name|IndexSearcher
name|s
init|=
name|newSearcher
argument_list|(
name|r
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|zeroCount
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|IntPoint
operator|.
name|newSetQuery
argument_list|(
literal|"int"
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|zeroCount
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|IntPoint
operator|.
name|newSetQuery
argument_list|(
literal|"int"
argument_list|,
literal|0
argument_list|,
operator|-
literal|7
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|zeroCount
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|IntPoint
operator|.
name|newSetQuery
argument_list|(
literal|"int"
argument_list|,
literal|7
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10000
operator|-
name|zeroCount
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|IntPoint
operator|.
name|newSetQuery
argument_list|(
literal|"int"
argument_list|,
literal|200
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|IntPoint
operator|.
name|newSetQuery
argument_list|(
literal|"int"
argument_list|,
literal|2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|zeroCount
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|LongPoint
operator|.
name|newSetQuery
argument_list|(
literal|"long"
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|zeroCount
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|LongPoint
operator|.
name|newSetQuery
argument_list|(
literal|"long"
argument_list|,
literal|0
argument_list|,
operator|-
literal|7
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|zeroCount
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|LongPoint
operator|.
name|newSetQuery
argument_list|(
literal|"long"
argument_list|,
literal|7
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10000
operator|-
name|zeroCount
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|LongPoint
operator|.
name|newSetQuery
argument_list|(
literal|"long"
argument_list|,
literal|200
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|LongPoint
operator|.
name|newSetQuery
argument_list|(
literal|"long"
argument_list|,
literal|2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|zeroCount
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|FloatPoint
operator|.
name|newSetQuery
argument_list|(
literal|"float"
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|zeroCount
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|FloatPoint
operator|.
name|newSetQuery
argument_list|(
literal|"float"
argument_list|,
literal|0
argument_list|,
operator|-
literal|7
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|zeroCount
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|FloatPoint
operator|.
name|newSetQuery
argument_list|(
literal|"float"
argument_list|,
literal|7
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10000
operator|-
name|zeroCount
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|FloatPoint
operator|.
name|newSetQuery
argument_list|(
literal|"float"
argument_list|,
literal|200
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|FloatPoint
operator|.
name|newSetQuery
argument_list|(
literal|"float"
argument_list|,
literal|2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|zeroCount
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|DoublePoint
operator|.
name|newSetQuery
argument_list|(
literal|"double"
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|zeroCount
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|DoublePoint
operator|.
name|newSetQuery
argument_list|(
literal|"double"
argument_list|,
literal|0
argument_list|,
operator|-
literal|7
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|zeroCount
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|DoublePoint
operator|.
name|newSetQuery
argument_list|(
literal|"double"
argument_list|,
literal|7
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10000
operator|-
name|zeroCount
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|DoublePoint
operator|.
name|newSetQuery
argument_list|(
literal|"double"
argument_list|,
literal|200
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|DoublePoint
operator|.
name|newSetQuery
argument_list|(
literal|"double"
argument_list|,
literal|2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|zeroCount
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|BinaryPoint
operator|.
name|newSetQuery
argument_list|(
literal|"bytes"
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|0
block|}
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|zeroCount
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|BinaryPoint
operator|.
name|newSetQuery
argument_list|(
literal|"bytes"
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|0
block|}
argument_list|,
operator|new
name|byte
index|[]
block|{
operator|-
literal|7
block|}
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|zeroCount
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|BinaryPoint
operator|.
name|newSetQuery
argument_list|(
literal|"bytes"
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|7
block|}
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|0
block|}
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10000
operator|-
name|zeroCount
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|BinaryPoint
operator|.
name|newSetQuery
argument_list|(
literal|"bytes"
argument_list|,
operator|new
name|byte
index|[]
block|{
operator|(
name|byte
operator|)
literal|200
block|}
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|BinaryPoint
operator|.
name|newSetQuery
argument_list|(
literal|"bytes"
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|2
block|}
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testInvalidPointInSetQuery
specifier|public
name|void
name|testInvalidPointInSetQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|IllegalArgumentException
name|expected
init|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
operator|new
name|PointInSetQuery
argument_list|(
literal|"foo"
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
operator|new
name|PointInSetQuery
operator|.
name|Stream
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|BytesRef
name|next
parameter_list|()
block|{
return|return
operator|new
name|BytesRef
argument_list|(
operator|new
name|byte
index|[
literal|3
index|]
argument_list|)
return|;
block|}
block|}
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|String
name|toString
parameter_list|(
name|byte
index|[]
name|point
parameter_list|)
block|{
return|return
name|Arrays
operator|.
name|toString
argument_list|(
name|point
argument_list|)
return|;
block|}
block|}
expr_stmt|;
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"packed point length should be 12 but got 3; field=\"foo\" numDims=3 bytesPerDim=4"
argument_list|,
name|expected
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testInvalidPointInSetBinaryQuery
specifier|public
name|void
name|testInvalidPointInSetBinaryQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|IllegalArgumentException
name|expected
init|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|BinaryPoint
operator|.
name|newSetQuery
argument_list|(
literal|"bytes"
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|2
block|}
operator|,
operator|new
name|byte
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
block|}
block|)
class|;
end_class
begin_expr_stmt
name|assertEquals
argument_list|(
literal|"all byte[] must be the same length, but saw 1 and 0"
argument_list|,
name|expected
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt
begin_function
unit|}    public
DECL|method|testPointInSetQueryToString
name|void
name|testPointInSetQueryToString
parameter_list|()
throws|throws
name|Exception
block|{
comment|// int
name|assertEquals
argument_list|(
literal|"int:{-42 18}"
argument_list|,
name|IntPoint
operator|.
name|newSetQuery
argument_list|(
literal|"int"
argument_list|,
operator|-
literal|42
argument_list|,
literal|18
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// long
name|assertEquals
argument_list|(
literal|"long:{-42 18}"
argument_list|,
name|LongPoint
operator|.
name|newSetQuery
argument_list|(
literal|"long"
argument_list|,
operator|-
literal|42L
argument_list|,
literal|18L
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// float
name|assertEquals
argument_list|(
literal|"float:{-42.0 18.0}"
argument_list|,
name|FloatPoint
operator|.
name|newSetQuery
argument_list|(
literal|"float"
argument_list|,
operator|-
literal|42.0f
argument_list|,
literal|18.0f
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// double
name|assertEquals
argument_list|(
literal|"double:{-42.0 18.0}"
argument_list|,
name|DoublePoint
operator|.
name|newSetQuery
argument_list|(
literal|"double"
argument_list|,
operator|-
literal|42.0
argument_list|,
literal|18.0
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// binary
name|assertEquals
argument_list|(
literal|"bytes:{[12] [2a]}"
argument_list|,
name|BinaryPoint
operator|.
name|newSetQuery
argument_list|(
literal|"bytes"
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|42
block|}
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|18
block|}
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|method|testPointInSetQueryGetPackedPoints
specifier|public
name|void
name|testPointInSetQueryGetPackedPoints
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|numValues
init|=
name|randomIntValue
argument_list|(
literal|1
argument_list|,
literal|32
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|values
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|numValues
argument_list|)
decl_stmt|;
for|for
control|(
name|byte
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numValues
condition|;
name|i
operator|++
control|)
block|{
name|values
operator|.
name|add
argument_list|(
operator|new
name|byte
index|[]
block|{
name|i
block|}
argument_list|)
expr_stmt|;
block|}
name|PointInSetQuery
name|query
init|=
operator|(
name|PointInSetQuery
operator|)
name|BinaryPoint
operator|.
name|newSetQuery
argument_list|(
literal|"field"
argument_list|,
name|values
operator|.
name|toArray
argument_list|(
operator|new
name|byte
index|[]
index|[]
block|{}
argument_list|)
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|byte
index|[]
argument_list|>
name|packedPoints
init|=
name|query
operator|.
name|getPackedPoints
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|numValues
argument_list|,
name|packedPoints
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|byte
index|[]
argument_list|>
name|iterator
init|=
name|packedPoints
operator|.
name|iterator
argument_list|()
decl_stmt|;
for|for
control|(
name|byte
index|[]
name|expectedValue
range|:
name|values
control|)
block|{
name|assertArrayEquals
argument_list|(
name|expectedValue
argument_list|,
name|iterator
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|expectThrows
argument_list|(
name|NoSuchElementException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|iterator
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|iterator
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|method|testRangeOptimizesIfAllPointsMatch
specifier|public
name|void
name|testRangeOptimizesIfAllPointsMatch
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|int
name|numDims
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|RandomIndexWriter
name|w
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|int
index|[]
name|value
init|=
operator|new
name|int
index|[
name|numDims
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDims
condition|;
operator|++
name|i
control|)
block|{
name|value
index|[
name|i
index|]
operator|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|10
argument_list|)
expr_stmt|;
block|}
name|doc
operator|.
name|add
argument_list|(
operator|new
name|IntPoint
argument_list|(
literal|"point"
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|IndexReader
name|reader
init|=
name|w
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|IndexSearcher
name|searcher
init|=
operator|new
name|IndexSearcher
argument_list|(
name|reader
argument_list|)
decl_stmt|;
name|searcher
operator|.
name|setQueryCache
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|int
index|[]
name|lowerBound
init|=
operator|new
name|int
index|[
name|numDims
index|]
decl_stmt|;
name|int
index|[]
name|upperBound
init|=
operator|new
name|int
index|[
name|numDims
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDims
condition|;
operator|++
name|i
control|)
block|{
name|lowerBound
index|[
name|i
index|]
operator|=
name|value
index|[
name|i
index|]
operator|-
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|upperBound
index|[
name|i
index|]
operator|=
name|value
index|[
name|i
index|]
operator|+
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|Query
name|query
init|=
name|IntPoint
operator|.
name|newRangeQuery
argument_list|(
literal|"point"
argument_list|,
name|lowerBound
argument_list|,
name|upperBound
argument_list|)
decl_stmt|;
name|Weight
name|weight
init|=
name|searcher
operator|.
name|createNormalizedWeight
argument_list|(
name|query
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Scorer
name|scorer
init|=
name|weight
operator|.
name|scorer
argument_list|(
name|searcher
operator|.
name|getIndexReader
argument_list|()
operator|.
name|leaves
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|DocIdSetIterator
operator|.
name|all
argument_list|(
literal|1
argument_list|)
operator|.
name|getClass
argument_list|()
argument_list|,
name|scorer
operator|.
name|iterator
argument_list|()
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
comment|// When not all documents in the query have a value, the optimization is not applicable
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
operator|new
name|Document
argument_list|()
argument_list|)
expr_stmt|;
name|w
operator|.
name|forceMerge
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|reader
operator|=
name|w
operator|.
name|getReader
argument_list|()
expr_stmt|;
name|searcher
operator|=
operator|new
name|IndexSearcher
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|searcher
operator|.
name|setQueryCache
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|weight
operator|=
name|searcher
operator|.
name|createNormalizedWeight
argument_list|(
name|query
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|scorer
operator|=
name|weight
operator|.
name|scorer
argument_list|(
name|searcher
operator|.
name|getIndexReader
argument_list|()
operator|.
name|leaves
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|DocIdSetIterator
operator|.
name|all
argument_list|(
literal|1
argument_list|)
operator|.
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|scorer
operator|.
name|iterator
argument_list|()
operator|.
name|getClass
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|method|testPointRangeEquals
specifier|public
name|void
name|testPointRangeEquals
parameter_list|()
block|{
name|Query
name|q1
decl_stmt|,
name|q2
decl_stmt|;
name|q1
operator|=
name|IntPoint
operator|.
name|newRangeQuery
argument_list|(
literal|"a"
argument_list|,
literal|0
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|q2
operator|=
name|IntPoint
operator|.
name|newRangeQuery
argument_list|(
literal|"a"
argument_list|,
literal|0
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|q1
argument_list|,
name|q2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|q1
operator|.
name|hashCode
argument_list|()
argument_list|,
name|q2
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|q1
operator|.
name|equals
argument_list|(
name|IntPoint
operator|.
name|newRangeQuery
argument_list|(
literal|"a"
argument_list|,
literal|1
argument_list|,
literal|1000
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|q1
operator|.
name|equals
argument_list|(
name|IntPoint
operator|.
name|newRangeQuery
argument_list|(
literal|"b"
argument_list|,
literal|0
argument_list|,
literal|1000
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|q1
operator|=
name|LongPoint
operator|.
name|newRangeQuery
argument_list|(
literal|"a"
argument_list|,
literal|0
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|q2
operator|=
name|LongPoint
operator|.
name|newRangeQuery
argument_list|(
literal|"a"
argument_list|,
literal|0
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|q1
argument_list|,
name|q2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|q1
operator|.
name|hashCode
argument_list|()
argument_list|,
name|q2
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|q1
operator|.
name|equals
argument_list|(
name|LongPoint
operator|.
name|newRangeQuery
argument_list|(
literal|"a"
argument_list|,
literal|1
argument_list|,
literal|1000
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|q1
operator|=
name|FloatPoint
operator|.
name|newRangeQuery
argument_list|(
literal|"a"
argument_list|,
literal|0
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|q2
operator|=
name|FloatPoint
operator|.
name|newRangeQuery
argument_list|(
literal|"a"
argument_list|,
literal|0
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|q1
argument_list|,
name|q2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|q1
operator|.
name|hashCode
argument_list|()
argument_list|,
name|q2
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|q1
operator|.
name|equals
argument_list|(
name|FloatPoint
operator|.
name|newRangeQuery
argument_list|(
literal|"a"
argument_list|,
literal|1
argument_list|,
literal|1000
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|q1
operator|=
name|DoublePoint
operator|.
name|newRangeQuery
argument_list|(
literal|"a"
argument_list|,
literal|0
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|q2
operator|=
name|DoublePoint
operator|.
name|newRangeQuery
argument_list|(
literal|"a"
argument_list|,
literal|0
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|q1
argument_list|,
name|q2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|q1
operator|.
name|hashCode
argument_list|()
argument_list|,
name|q2
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|q1
operator|.
name|equals
argument_list|(
name|DoublePoint
operator|.
name|newRangeQuery
argument_list|(
literal|"a"
argument_list|,
literal|1
argument_list|,
literal|1000
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|byte
index|[]
name|zeros
init|=
operator|new
name|byte
index|[
literal|5
index|]
decl_stmt|;
name|byte
index|[]
name|ones
init|=
operator|new
name|byte
index|[
literal|5
index|]
decl_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|ones
argument_list|,
operator|(
name|byte
operator|)
literal|0xff
argument_list|)
expr_stmt|;
name|q1
operator|=
name|BinaryPoint
operator|.
name|newRangeQuery
argument_list|(
literal|"a"
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|zeros
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|ones
block|}
argument_list|)
expr_stmt|;
name|q2
operator|=
name|BinaryPoint
operator|.
name|newRangeQuery
argument_list|(
literal|"a"
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|zeros
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|ones
block|}
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|q1
argument_list|,
name|q2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|q1
operator|.
name|hashCode
argument_list|()
argument_list|,
name|q2
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|byte
index|[]
name|other
init|=
name|ones
operator|.
name|clone
argument_list|()
decl_stmt|;
name|other
index|[
literal|2
index|]
operator|=
operator|(
name|byte
operator|)
literal|5
expr_stmt|;
name|assertFalse
argument_list|(
name|q1
operator|.
name|equals
argument_list|(
name|BinaryPoint
operator|.
name|newRangeQuery
argument_list|(
literal|"a"
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|zeros
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|other
block|}
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|method|testPointExactEquals
specifier|public
name|void
name|testPointExactEquals
parameter_list|()
block|{
name|Query
name|q1
decl_stmt|,
name|q2
decl_stmt|;
name|q1
operator|=
name|IntPoint
operator|.
name|newExactQuery
argument_list|(
literal|"a"
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|q2
operator|=
name|IntPoint
operator|.
name|newExactQuery
argument_list|(
literal|"a"
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|q1
argument_list|,
name|q2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|q1
operator|.
name|hashCode
argument_list|()
argument_list|,
name|q2
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|q1
operator|.
name|equals
argument_list|(
name|IntPoint
operator|.
name|newExactQuery
argument_list|(
literal|"a"
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|q1
operator|.
name|equals
argument_list|(
name|IntPoint
operator|.
name|newExactQuery
argument_list|(
literal|"b"
argument_list|,
literal|1000
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|q1
operator|=
name|LongPoint
operator|.
name|newExactQuery
argument_list|(
literal|"a"
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|q2
operator|=
name|LongPoint
operator|.
name|newExactQuery
argument_list|(
literal|"a"
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|q1
argument_list|,
name|q2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|q1
operator|.
name|hashCode
argument_list|()
argument_list|,
name|q2
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|q1
operator|.
name|equals
argument_list|(
name|LongPoint
operator|.
name|newExactQuery
argument_list|(
literal|"a"
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|q1
operator|=
name|FloatPoint
operator|.
name|newExactQuery
argument_list|(
literal|"a"
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|q2
operator|=
name|FloatPoint
operator|.
name|newExactQuery
argument_list|(
literal|"a"
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|q1
argument_list|,
name|q2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|q1
operator|.
name|hashCode
argument_list|()
argument_list|,
name|q2
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|q1
operator|.
name|equals
argument_list|(
name|FloatPoint
operator|.
name|newExactQuery
argument_list|(
literal|"a"
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|q1
operator|=
name|DoublePoint
operator|.
name|newExactQuery
argument_list|(
literal|"a"
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|q2
operator|=
name|DoublePoint
operator|.
name|newExactQuery
argument_list|(
literal|"a"
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|q1
argument_list|,
name|q2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|q1
operator|.
name|hashCode
argument_list|()
argument_list|,
name|q2
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|q1
operator|.
name|equals
argument_list|(
name|DoublePoint
operator|.
name|newExactQuery
argument_list|(
literal|"a"
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|byte
index|[]
name|ones
init|=
operator|new
name|byte
index|[
literal|5
index|]
decl_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|ones
argument_list|,
operator|(
name|byte
operator|)
literal|0xff
argument_list|)
expr_stmt|;
name|q1
operator|=
name|BinaryPoint
operator|.
name|newExactQuery
argument_list|(
literal|"a"
argument_list|,
name|ones
argument_list|)
expr_stmt|;
name|q2
operator|=
name|BinaryPoint
operator|.
name|newExactQuery
argument_list|(
literal|"a"
argument_list|,
name|ones
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|q1
argument_list|,
name|q2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|q1
operator|.
name|hashCode
argument_list|()
argument_list|,
name|q2
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|byte
index|[]
name|other
init|=
name|ones
operator|.
name|clone
argument_list|()
decl_stmt|;
name|other
index|[
literal|2
index|]
operator|=
operator|(
name|byte
operator|)
literal|5
expr_stmt|;
name|assertFalse
argument_list|(
name|q1
operator|.
name|equals
argument_list|(
name|BinaryPoint
operator|.
name|newExactQuery
argument_list|(
literal|"a"
argument_list|,
name|other
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|method|testPointInSetEquals
specifier|public
name|void
name|testPointInSetEquals
parameter_list|()
block|{
name|Query
name|q1
decl_stmt|,
name|q2
decl_stmt|;
name|q1
operator|=
name|IntPoint
operator|.
name|newSetQuery
argument_list|(
literal|"a"
argument_list|,
literal|0
argument_list|,
literal|1000
argument_list|,
literal|17
argument_list|)
expr_stmt|;
name|q2
operator|=
name|IntPoint
operator|.
name|newSetQuery
argument_list|(
literal|"a"
argument_list|,
literal|17
argument_list|,
literal|0
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|q1
argument_list|,
name|q2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|q1
operator|.
name|hashCode
argument_list|()
argument_list|,
name|q2
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|q1
operator|.
name|equals
argument_list|(
name|IntPoint
operator|.
name|newSetQuery
argument_list|(
literal|"a"
argument_list|,
literal|1
argument_list|,
literal|17
argument_list|,
literal|1000
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|q1
operator|.
name|equals
argument_list|(
name|IntPoint
operator|.
name|newSetQuery
argument_list|(
literal|"b"
argument_list|,
literal|0
argument_list|,
literal|1000
argument_list|,
literal|17
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|q1
operator|=
name|LongPoint
operator|.
name|newSetQuery
argument_list|(
literal|"a"
argument_list|,
literal|0
argument_list|,
literal|1000
argument_list|,
literal|17
argument_list|)
expr_stmt|;
name|q2
operator|=
name|LongPoint
operator|.
name|newSetQuery
argument_list|(
literal|"a"
argument_list|,
literal|17
argument_list|,
literal|0
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|q1
argument_list|,
name|q2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|q1
operator|.
name|hashCode
argument_list|()
argument_list|,
name|q2
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|q1
operator|.
name|equals
argument_list|(
name|LongPoint
operator|.
name|newSetQuery
argument_list|(
literal|"a"
argument_list|,
literal|1
argument_list|,
literal|17
argument_list|,
literal|1000
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|q1
operator|=
name|FloatPoint
operator|.
name|newSetQuery
argument_list|(
literal|"a"
argument_list|,
literal|0
argument_list|,
literal|1000
argument_list|,
literal|17
argument_list|)
expr_stmt|;
name|q2
operator|=
name|FloatPoint
operator|.
name|newSetQuery
argument_list|(
literal|"a"
argument_list|,
literal|17
argument_list|,
literal|0
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|q1
argument_list|,
name|q2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|q1
operator|.
name|hashCode
argument_list|()
argument_list|,
name|q2
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|q1
operator|.
name|equals
argument_list|(
name|FloatPoint
operator|.
name|newSetQuery
argument_list|(
literal|"a"
argument_list|,
literal|1
argument_list|,
literal|17
argument_list|,
literal|1000
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|q1
operator|=
name|DoublePoint
operator|.
name|newSetQuery
argument_list|(
literal|"a"
argument_list|,
literal|0
argument_list|,
literal|1000
argument_list|,
literal|17
argument_list|)
expr_stmt|;
name|q2
operator|=
name|DoublePoint
operator|.
name|newSetQuery
argument_list|(
literal|"a"
argument_list|,
literal|17
argument_list|,
literal|0
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|q1
argument_list|,
name|q2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|q1
operator|.
name|hashCode
argument_list|()
argument_list|,
name|q2
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|q1
operator|.
name|equals
argument_list|(
name|DoublePoint
operator|.
name|newSetQuery
argument_list|(
literal|"a"
argument_list|,
literal|1
argument_list|,
literal|17
argument_list|,
literal|1000
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|byte
index|[]
name|zeros
init|=
operator|new
name|byte
index|[
literal|5
index|]
decl_stmt|;
name|byte
index|[]
name|ones
init|=
operator|new
name|byte
index|[
literal|5
index|]
decl_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|ones
argument_list|,
operator|(
name|byte
operator|)
literal|0xff
argument_list|)
expr_stmt|;
name|q1
operator|=
name|BinaryPoint
operator|.
name|newSetQuery
argument_list|(
literal|"a"
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|zeros
block|,
name|ones
block|}
argument_list|)
expr_stmt|;
name|q2
operator|=
name|BinaryPoint
operator|.
name|newSetQuery
argument_list|(
literal|"a"
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|zeros
block|,
name|ones
block|}
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|q1
argument_list|,
name|q2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|q1
operator|.
name|hashCode
argument_list|()
argument_list|,
name|q2
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|byte
index|[]
name|other
init|=
name|ones
operator|.
name|clone
argument_list|()
decl_stmt|;
name|other
index|[
literal|2
index|]
operator|=
operator|(
name|byte
operator|)
literal|5
expr_stmt|;
name|assertFalse
argument_list|(
name|q1
operator|.
name|equals
argument_list|(
name|BinaryPoint
operator|.
name|newSetQuery
argument_list|(
literal|"a"
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|zeros
block|,
name|other
block|}
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|method|testInvalidPointLength
specifier|public
name|void
name|testInvalidPointLength
parameter_list|()
block|{
name|IllegalArgumentException
name|e
init|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
operator|new
name|PointRangeQuery
argument_list|(
literal|"field"
argument_list|,
operator|new
name|byte
index|[
literal|4
index|]
argument_list|,
operator|new
name|byte
index|[
literal|8
index|]
argument_list|,
literal|1
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|String
name|toString
parameter_list|(
name|int
name|dimension
parameter_list|,
name|byte
index|[]
name|value
parameter_list|)
block|{
return|return
literal|"foo"
return|;
block|}
block|}
expr_stmt|;
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"lowerPoint has length=4 but upperPoint has different length=8"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
unit|}
end_unit
