begin_unit
begin_package
DECL|package|org.apache.lucene.search
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|MockAnalyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|MockTokenizer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|MultiReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|RandomIndexWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|StoredDocument
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanClause
operator|.
name|Occur
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|similarities
operator|.
name|DefaultSimilarity
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|automaton
operator|.
name|LevenshteinAutomata
import|;
end_import
begin_comment
comment|/**  * Tests {@link FuzzyQuery}.  *  */
end_comment
begin_class
DECL|class|TestFuzzyQuery
specifier|public
class|class
name|TestFuzzyQuery
extends|extends
name|LuceneTestCase
block|{
DECL|method|testBasicPrefix
specifier|public
name|void
name|testBasicPrefix
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|directory
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|RandomIndexWriter
name|writer
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|directory
argument_list|)
decl_stmt|;
name|addDoc
argument_list|(
literal|"abc"
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|IndexReader
name|reader
init|=
name|writer
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|IndexSearcher
name|searcher
init|=
name|newSearcher
argument_list|(
name|reader
argument_list|)
decl_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|FuzzyQuery
name|query
init|=
operator|new
name|FuzzyQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"abc"
argument_list|)
argument_list|,
name|FuzzyQuery
operator|.
name|defaultMaxEdits
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ScoreDoc
index|[]
name|hits
init|=
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
literal|1000
argument_list|)
operator|.
name|scoreDocs
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|hits
operator|.
name|length
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|directory
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testFuzziness
specifier|public
name|void
name|testFuzziness
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|directory
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|RandomIndexWriter
name|writer
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|directory
argument_list|)
decl_stmt|;
name|addDoc
argument_list|(
literal|"aaaaa"
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|addDoc
argument_list|(
literal|"aaaab"
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|addDoc
argument_list|(
literal|"aaabb"
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|addDoc
argument_list|(
literal|"aabbb"
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|addDoc
argument_list|(
literal|"abbbb"
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|addDoc
argument_list|(
literal|"bbbbb"
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|addDoc
argument_list|(
literal|"ddddd"
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|IndexReader
name|reader
init|=
name|writer
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|IndexSearcher
name|searcher
init|=
name|newSearcher
argument_list|(
name|reader
argument_list|)
decl_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|FuzzyQuery
name|query
init|=
operator|new
name|FuzzyQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"aaaaa"
argument_list|)
argument_list|,
name|FuzzyQuery
operator|.
name|defaultMaxEdits
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|ScoreDoc
index|[]
name|hits
init|=
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
literal|1000
argument_list|)
operator|.
name|scoreDocs
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|hits
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// same with prefix
name|query
operator|=
operator|new
name|FuzzyQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"aaaaa"
argument_list|)
argument_list|,
name|FuzzyQuery
operator|.
name|defaultMaxEdits
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|hits
operator|=
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
literal|1000
argument_list|)
operator|.
name|scoreDocs
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|hits
operator|.
name|length
argument_list|)
expr_stmt|;
name|query
operator|=
operator|new
name|FuzzyQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"aaaaa"
argument_list|)
argument_list|,
name|FuzzyQuery
operator|.
name|defaultMaxEdits
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|hits
operator|=
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
literal|1000
argument_list|)
operator|.
name|scoreDocs
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|hits
operator|.
name|length
argument_list|)
expr_stmt|;
name|query
operator|=
operator|new
name|FuzzyQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"aaaaa"
argument_list|)
argument_list|,
name|FuzzyQuery
operator|.
name|defaultMaxEdits
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|hits
operator|=
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
literal|1000
argument_list|)
operator|.
name|scoreDocs
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|hits
operator|.
name|length
argument_list|)
expr_stmt|;
name|query
operator|=
operator|new
name|FuzzyQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"aaaaa"
argument_list|)
argument_list|,
name|FuzzyQuery
operator|.
name|defaultMaxEdits
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|hits
operator|=
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
literal|1000
argument_list|)
operator|.
name|scoreDocs
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|hits
operator|.
name|length
argument_list|)
expr_stmt|;
name|query
operator|=
operator|new
name|FuzzyQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"aaaaa"
argument_list|)
argument_list|,
name|FuzzyQuery
operator|.
name|defaultMaxEdits
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|hits
operator|=
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
literal|1000
argument_list|)
operator|.
name|scoreDocs
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|hits
operator|.
name|length
argument_list|)
expr_stmt|;
name|query
operator|=
operator|new
name|FuzzyQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"aaaaa"
argument_list|)
argument_list|,
name|FuzzyQuery
operator|.
name|defaultMaxEdits
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|hits
operator|=
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
literal|1000
argument_list|)
operator|.
name|scoreDocs
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|hits
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// test scoring
name|query
operator|=
operator|new
name|FuzzyQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"bbbbb"
argument_list|)
argument_list|,
name|FuzzyQuery
operator|.
name|defaultMaxEdits
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|hits
operator|=
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
literal|1000
argument_list|)
operator|.
name|scoreDocs
expr_stmt|;
name|assertEquals
argument_list|(
literal|"3 documents should match"
argument_list|,
literal|3
argument_list|,
name|hits
operator|.
name|length
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|order
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"bbbbb"
argument_list|,
literal|"abbbb"
argument_list|,
literal|"aabbb"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|hits
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|String
name|term
init|=
name|searcher
operator|.
name|doc
argument_list|(
name|hits
index|[
name|i
index|]
operator|.
name|doc
argument_list|)
operator|.
name|get
argument_list|(
literal|"field"
argument_list|)
decl_stmt|;
comment|//System.out.println(hits[i].score);
name|assertEquals
argument_list|(
name|order
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|term
argument_list|)
expr_stmt|;
block|}
comment|// test pq size by supplying maxExpansions=2
comment|// This query would normally return 3 documents, because 3 terms match (see above):
name|query
operator|=
operator|new
name|FuzzyQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"bbbbb"
argument_list|)
argument_list|,
name|FuzzyQuery
operator|.
name|defaultMaxEdits
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|hits
operator|=
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
literal|1000
argument_list|)
operator|.
name|scoreDocs
expr_stmt|;
name|assertEquals
argument_list|(
literal|"only 2 documents should match"
argument_list|,
literal|2
argument_list|,
name|hits
operator|.
name|length
argument_list|)
expr_stmt|;
name|order
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"bbbbb"
argument_list|,
literal|"abbbb"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|hits
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|String
name|term
init|=
name|searcher
operator|.
name|doc
argument_list|(
name|hits
index|[
name|i
index|]
operator|.
name|doc
argument_list|)
operator|.
name|get
argument_list|(
literal|"field"
argument_list|)
decl_stmt|;
comment|//System.out.println(hits[i].score);
name|assertEquals
argument_list|(
name|order
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|term
argument_list|)
expr_stmt|;
block|}
comment|// not similar enough:
name|query
operator|=
operator|new
name|FuzzyQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"xxxxx"
argument_list|)
argument_list|,
name|FuzzyQuery
operator|.
name|defaultMaxEdits
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|hits
operator|=
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
literal|1000
argument_list|)
operator|.
name|scoreDocs
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|hits
operator|.
name|length
argument_list|)
expr_stmt|;
name|query
operator|=
operator|new
name|FuzzyQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"aaccc"
argument_list|)
argument_list|,
name|FuzzyQuery
operator|.
name|defaultMaxEdits
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// edit distance to "aaaaa" = 3
name|hits
operator|=
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
literal|1000
argument_list|)
operator|.
name|scoreDocs
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|hits
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// query identical to a word in the index:
name|query
operator|=
operator|new
name|FuzzyQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"aaaaa"
argument_list|)
argument_list|,
name|FuzzyQuery
operator|.
name|defaultMaxEdits
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|hits
operator|=
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
literal|1000
argument_list|)
operator|.
name|scoreDocs
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|hits
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|searcher
operator|.
name|doc
argument_list|(
name|hits
index|[
literal|0
index|]
operator|.
name|doc
argument_list|)
operator|.
name|get
argument_list|(
literal|"field"
argument_list|)
argument_list|,
operator|(
literal|"aaaaa"
operator|)
argument_list|)
expr_stmt|;
comment|// default allows for up to two edits:
name|assertEquals
argument_list|(
name|searcher
operator|.
name|doc
argument_list|(
name|hits
index|[
literal|1
index|]
operator|.
name|doc
argument_list|)
operator|.
name|get
argument_list|(
literal|"field"
argument_list|)
argument_list|,
operator|(
literal|"aaaab"
operator|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|searcher
operator|.
name|doc
argument_list|(
name|hits
index|[
literal|2
index|]
operator|.
name|doc
argument_list|)
operator|.
name|get
argument_list|(
literal|"field"
argument_list|)
argument_list|,
operator|(
literal|"aaabb"
operator|)
argument_list|)
expr_stmt|;
comment|// query similar to a word in the index:
name|query
operator|=
operator|new
name|FuzzyQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"aaaac"
argument_list|)
argument_list|,
name|FuzzyQuery
operator|.
name|defaultMaxEdits
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|hits
operator|=
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
literal|1000
argument_list|)
operator|.
name|scoreDocs
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|hits
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|searcher
operator|.
name|doc
argument_list|(
name|hits
index|[
literal|0
index|]
operator|.
name|doc
argument_list|)
operator|.
name|get
argument_list|(
literal|"field"
argument_list|)
argument_list|,
operator|(
literal|"aaaaa"
operator|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|searcher
operator|.
name|doc
argument_list|(
name|hits
index|[
literal|1
index|]
operator|.
name|doc
argument_list|)
operator|.
name|get
argument_list|(
literal|"field"
argument_list|)
argument_list|,
operator|(
literal|"aaaab"
operator|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|searcher
operator|.
name|doc
argument_list|(
name|hits
index|[
literal|2
index|]
operator|.
name|doc
argument_list|)
operator|.
name|get
argument_list|(
literal|"field"
argument_list|)
argument_list|,
operator|(
literal|"aaabb"
operator|)
argument_list|)
expr_stmt|;
comment|// now with prefix
name|query
operator|=
operator|new
name|FuzzyQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"aaaac"
argument_list|)
argument_list|,
name|FuzzyQuery
operator|.
name|defaultMaxEdits
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|hits
operator|=
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
literal|1000
argument_list|)
operator|.
name|scoreDocs
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|hits
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|searcher
operator|.
name|doc
argument_list|(
name|hits
index|[
literal|0
index|]
operator|.
name|doc
argument_list|)
operator|.
name|get
argument_list|(
literal|"field"
argument_list|)
argument_list|,
operator|(
literal|"aaaaa"
operator|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|searcher
operator|.
name|doc
argument_list|(
name|hits
index|[
literal|1
index|]
operator|.
name|doc
argument_list|)
operator|.
name|get
argument_list|(
literal|"field"
argument_list|)
argument_list|,
operator|(
literal|"aaaab"
operator|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|searcher
operator|.
name|doc
argument_list|(
name|hits
index|[
literal|2
index|]
operator|.
name|doc
argument_list|)
operator|.
name|get
argument_list|(
literal|"field"
argument_list|)
argument_list|,
operator|(
literal|"aaabb"
operator|)
argument_list|)
expr_stmt|;
name|query
operator|=
operator|new
name|FuzzyQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"aaaac"
argument_list|)
argument_list|,
name|FuzzyQuery
operator|.
name|defaultMaxEdits
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|hits
operator|=
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
literal|1000
argument_list|)
operator|.
name|scoreDocs
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|hits
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|searcher
operator|.
name|doc
argument_list|(
name|hits
index|[
literal|0
index|]
operator|.
name|doc
argument_list|)
operator|.
name|get
argument_list|(
literal|"field"
argument_list|)
argument_list|,
operator|(
literal|"aaaaa"
operator|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|searcher
operator|.
name|doc
argument_list|(
name|hits
index|[
literal|1
index|]
operator|.
name|doc
argument_list|)
operator|.
name|get
argument_list|(
literal|"field"
argument_list|)
argument_list|,
operator|(
literal|"aaaab"
operator|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|searcher
operator|.
name|doc
argument_list|(
name|hits
index|[
literal|2
index|]
operator|.
name|doc
argument_list|)
operator|.
name|get
argument_list|(
literal|"field"
argument_list|)
argument_list|,
operator|(
literal|"aaabb"
operator|)
argument_list|)
expr_stmt|;
name|query
operator|=
operator|new
name|FuzzyQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"aaaac"
argument_list|)
argument_list|,
name|FuzzyQuery
operator|.
name|defaultMaxEdits
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|hits
operator|=
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
literal|1000
argument_list|)
operator|.
name|scoreDocs
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|hits
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|searcher
operator|.
name|doc
argument_list|(
name|hits
index|[
literal|0
index|]
operator|.
name|doc
argument_list|)
operator|.
name|get
argument_list|(
literal|"field"
argument_list|)
argument_list|,
operator|(
literal|"aaaaa"
operator|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|searcher
operator|.
name|doc
argument_list|(
name|hits
index|[
literal|1
index|]
operator|.
name|doc
argument_list|)
operator|.
name|get
argument_list|(
literal|"field"
argument_list|)
argument_list|,
operator|(
literal|"aaaab"
operator|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|searcher
operator|.
name|doc
argument_list|(
name|hits
index|[
literal|2
index|]
operator|.
name|doc
argument_list|)
operator|.
name|get
argument_list|(
literal|"field"
argument_list|)
argument_list|,
operator|(
literal|"aaabb"
operator|)
argument_list|)
expr_stmt|;
name|query
operator|=
operator|new
name|FuzzyQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"aaaac"
argument_list|)
argument_list|,
name|FuzzyQuery
operator|.
name|defaultMaxEdits
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|hits
operator|=
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
literal|1000
argument_list|)
operator|.
name|scoreDocs
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|hits
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|searcher
operator|.
name|doc
argument_list|(
name|hits
index|[
literal|0
index|]
operator|.
name|doc
argument_list|)
operator|.
name|get
argument_list|(
literal|"field"
argument_list|)
argument_list|,
operator|(
literal|"aaaaa"
operator|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|searcher
operator|.
name|doc
argument_list|(
name|hits
index|[
literal|1
index|]
operator|.
name|doc
argument_list|)
operator|.
name|get
argument_list|(
literal|"field"
argument_list|)
argument_list|,
operator|(
literal|"aaaab"
operator|)
argument_list|)
expr_stmt|;
name|query
operator|=
operator|new
name|FuzzyQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"aaaac"
argument_list|)
argument_list|,
name|FuzzyQuery
operator|.
name|defaultMaxEdits
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|hits
operator|=
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
literal|1000
argument_list|)
operator|.
name|scoreDocs
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|hits
operator|.
name|length
argument_list|)
expr_stmt|;
name|query
operator|=
operator|new
name|FuzzyQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"ddddX"
argument_list|)
argument_list|,
name|FuzzyQuery
operator|.
name|defaultMaxEdits
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|hits
operator|=
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
literal|1000
argument_list|)
operator|.
name|scoreDocs
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|hits
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|searcher
operator|.
name|doc
argument_list|(
name|hits
index|[
literal|0
index|]
operator|.
name|doc
argument_list|)
operator|.
name|get
argument_list|(
literal|"field"
argument_list|)
argument_list|,
operator|(
literal|"ddddd"
operator|)
argument_list|)
expr_stmt|;
comment|// now with prefix
name|query
operator|=
operator|new
name|FuzzyQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"ddddX"
argument_list|)
argument_list|,
name|FuzzyQuery
operator|.
name|defaultMaxEdits
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|hits
operator|=
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
literal|1000
argument_list|)
operator|.
name|scoreDocs
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|hits
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|searcher
operator|.
name|doc
argument_list|(
name|hits
index|[
literal|0
index|]
operator|.
name|doc
argument_list|)
operator|.
name|get
argument_list|(
literal|"field"
argument_list|)
argument_list|,
operator|(
literal|"ddddd"
operator|)
argument_list|)
expr_stmt|;
name|query
operator|=
operator|new
name|FuzzyQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"ddddX"
argument_list|)
argument_list|,
name|FuzzyQuery
operator|.
name|defaultMaxEdits
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|hits
operator|=
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
literal|1000
argument_list|)
operator|.
name|scoreDocs
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|hits
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|searcher
operator|.
name|doc
argument_list|(
name|hits
index|[
literal|0
index|]
operator|.
name|doc
argument_list|)
operator|.
name|get
argument_list|(
literal|"field"
argument_list|)
argument_list|,
operator|(
literal|"ddddd"
operator|)
argument_list|)
expr_stmt|;
name|query
operator|=
operator|new
name|FuzzyQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"ddddX"
argument_list|)
argument_list|,
name|FuzzyQuery
operator|.
name|defaultMaxEdits
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|hits
operator|=
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
literal|1000
argument_list|)
operator|.
name|scoreDocs
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|hits
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|searcher
operator|.
name|doc
argument_list|(
name|hits
index|[
literal|0
index|]
operator|.
name|doc
argument_list|)
operator|.
name|get
argument_list|(
literal|"field"
argument_list|)
argument_list|,
operator|(
literal|"ddddd"
operator|)
argument_list|)
expr_stmt|;
name|query
operator|=
operator|new
name|FuzzyQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"ddddX"
argument_list|)
argument_list|,
name|FuzzyQuery
operator|.
name|defaultMaxEdits
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|hits
operator|=
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
literal|1000
argument_list|)
operator|.
name|scoreDocs
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|hits
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|searcher
operator|.
name|doc
argument_list|(
name|hits
index|[
literal|0
index|]
operator|.
name|doc
argument_list|)
operator|.
name|get
argument_list|(
literal|"field"
argument_list|)
argument_list|,
operator|(
literal|"ddddd"
operator|)
argument_list|)
expr_stmt|;
name|query
operator|=
operator|new
name|FuzzyQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"ddddX"
argument_list|)
argument_list|,
name|FuzzyQuery
operator|.
name|defaultMaxEdits
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|hits
operator|=
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
literal|1000
argument_list|)
operator|.
name|scoreDocs
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|hits
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// different field = no match:
name|query
operator|=
operator|new
name|FuzzyQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"anotherfield"
argument_list|,
literal|"ddddX"
argument_list|)
argument_list|,
name|FuzzyQuery
operator|.
name|defaultMaxEdits
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|hits
operator|=
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
literal|1000
argument_list|)
operator|.
name|scoreDocs
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|hits
operator|.
name|length
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|directory
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|test2
specifier|public
name|void
name|test2
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|directory
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|RandomIndexWriter
name|writer
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|directory
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|,
name|MockTokenizer
operator|.
name|KEYWORD
argument_list|,
literal|false
argument_list|)
argument_list|)
decl_stmt|;
name|addDoc
argument_list|(
literal|"LANGE"
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|addDoc
argument_list|(
literal|"LUETH"
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|addDoc
argument_list|(
literal|"PIRSING"
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|addDoc
argument_list|(
literal|"RIEGEL"
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|addDoc
argument_list|(
literal|"TRZECZIAK"
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|addDoc
argument_list|(
literal|"WALKER"
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|addDoc
argument_list|(
literal|"WBR"
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|addDoc
argument_list|(
literal|"WE"
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|addDoc
argument_list|(
literal|"WEB"
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|addDoc
argument_list|(
literal|"WEBE"
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|addDoc
argument_list|(
literal|"WEBER"
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|addDoc
argument_list|(
literal|"WEBERE"
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|addDoc
argument_list|(
literal|"WEBREE"
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|addDoc
argument_list|(
literal|"WEBEREI"
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|addDoc
argument_list|(
literal|"WBRE"
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|addDoc
argument_list|(
literal|"WITTKOPF"
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|addDoc
argument_list|(
literal|"WOJNAROWSKI"
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|addDoc
argument_list|(
literal|"WRICKE"
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|IndexReader
name|reader
init|=
name|writer
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|IndexSearcher
name|searcher
init|=
name|newSearcher
argument_list|(
name|reader
argument_list|)
decl_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|FuzzyQuery
name|query
init|=
operator|new
name|FuzzyQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"WEBER"
argument_list|)
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
decl_stmt|;
comment|//query.setRewriteMethod(FuzzyQuery.SCORING_BOOLEAN_QUERY_REWRITE);
name|ScoreDoc
index|[]
name|hits
init|=
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
literal|1000
argument_list|)
operator|.
name|scoreDocs
decl_stmt|;
name|assertEquals
argument_list|(
literal|8
argument_list|,
name|hits
operator|.
name|length
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|directory
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testSingleQueryExactMatchScoresHighest
specifier|public
name|void
name|testSingleQueryExactMatchScoresHighest
parameter_list|()
throws|throws
name|Exception
block|{
comment|//See issue LUCENE-329 - IDF shouldn't wreck similarity ranking
name|Directory
name|directory
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|RandomIndexWriter
name|writer
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|directory
argument_list|)
decl_stmt|;
name|addDoc
argument_list|(
literal|"smith"
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|addDoc
argument_list|(
literal|"smith"
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|addDoc
argument_list|(
literal|"smith"
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|addDoc
argument_list|(
literal|"smith"
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|addDoc
argument_list|(
literal|"smith"
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|addDoc
argument_list|(
literal|"smith"
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|addDoc
argument_list|(
literal|"smythe"
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|addDoc
argument_list|(
literal|"smdssasd"
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|IndexReader
name|reader
init|=
name|writer
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|IndexSearcher
name|searcher
init|=
name|newSearcher
argument_list|(
name|reader
argument_list|)
decl_stmt|;
name|searcher
operator|.
name|setSimilarity
argument_list|(
operator|new
name|DefaultSimilarity
argument_list|()
argument_list|)
expr_stmt|;
comment|//avoid randomisation of similarity algo by test framework
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|String
name|searchTerms
index|[]
init|=
block|{
literal|"smith"
block|,
literal|"smythe"
block|,
literal|"smdssasd"
block|}
decl_stmt|;
for|for
control|(
name|String
name|searchTerm
range|:
name|searchTerms
control|)
block|{
name|FuzzyQuery
name|query
init|=
operator|new
name|FuzzyQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
name|searchTerm
argument_list|)
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ScoreDoc
index|[]
name|hits
init|=
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
literal|1000
argument_list|)
operator|.
name|scoreDocs
decl_stmt|;
name|StoredDocument
name|bestDoc
init|=
name|searcher
operator|.
name|doc
argument_list|(
name|hits
index|[
literal|0
index|]
operator|.
name|doc
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|hits
operator|.
name|length
operator|>
literal|0
argument_list|)
expr_stmt|;
name|String
name|topMatch
init|=
name|bestDoc
operator|.
name|get
argument_list|(
literal|"field"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|searchTerm
argument_list|,
name|topMatch
argument_list|)
expr_stmt|;
if|if
condition|(
name|hits
operator|.
name|length
operator|>
literal|1
condition|)
block|{
name|StoredDocument
name|worstDoc
init|=
name|searcher
operator|.
name|doc
argument_list|(
name|hits
index|[
name|hits
operator|.
name|length
operator|-
literal|1
index|]
operator|.
name|doc
argument_list|)
decl_stmt|;
name|String
name|worstMatch
init|=
name|worstDoc
operator|.
name|get
argument_list|(
literal|"field"
argument_list|)
decl_stmt|;
name|assertNotSame
argument_list|(
name|searchTerm
argument_list|,
name|worstMatch
argument_list|)
expr_stmt|;
block|}
block|}
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|directory
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testMultipleQueriesIdfWorks
specifier|public
name|void
name|testMultipleQueriesIdfWorks
parameter_list|()
throws|throws
name|Exception
block|{
comment|// With issue LUCENE-329 - it could be argued a MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite
comment|// is the solution as it disables IDF.
comment|// However - IDF is still useful as in this case where there are multiple FuzzyQueries.
name|Directory
name|directory
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|RandomIndexWriter
name|writer
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|directory
argument_list|)
decl_stmt|;
name|addDoc
argument_list|(
literal|"michael smith"
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|addDoc
argument_list|(
literal|"michael lucero"
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|addDoc
argument_list|(
literal|"doug cutting"
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|addDoc
argument_list|(
literal|"doug cuttin"
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|addDoc
argument_list|(
literal|"michael wardle"
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|addDoc
argument_list|(
literal|"micheal vegas"
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|addDoc
argument_list|(
literal|"michael lydon"
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|IndexReader
name|reader
init|=
name|writer
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|IndexSearcher
name|searcher
init|=
name|newSearcher
argument_list|(
name|reader
argument_list|)
decl_stmt|;
name|searcher
operator|.
name|setSimilarity
argument_list|(
operator|new
name|DefaultSimilarity
argument_list|()
argument_list|)
expr_stmt|;
comment|//avoid randomisation of similarity algo by test framework
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|BooleanQuery
name|query
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
name|String
name|commonSearchTerm
init|=
literal|"michael"
decl_stmt|;
name|FuzzyQuery
name|commonQuery
init|=
operator|new
name|FuzzyQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
name|commonSearchTerm
argument_list|)
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|query
operator|.
name|add
argument_list|(
name|commonQuery
argument_list|,
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|String
name|rareSearchTerm
init|=
literal|"cutting"
decl_stmt|;
name|FuzzyQuery
name|rareQuery
init|=
operator|new
name|FuzzyQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
name|rareSearchTerm
argument_list|)
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|query
operator|.
name|add
argument_list|(
name|rareQuery
argument_list|,
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|ScoreDoc
index|[]
name|hits
init|=
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
literal|1000
argument_list|)
operator|.
name|scoreDocs
decl_stmt|;
comment|// Matches on the rare surname should be worth more than matches on the common forename
name|assertEquals
argument_list|(
literal|7
argument_list|,
name|hits
operator|.
name|length
argument_list|)
expr_stmt|;
name|StoredDocument
name|bestDoc
init|=
name|searcher
operator|.
name|doc
argument_list|(
name|hits
index|[
literal|0
index|]
operator|.
name|doc
argument_list|)
decl_stmt|;
name|String
name|topMatch
init|=
name|bestDoc
operator|.
name|get
argument_list|(
literal|"field"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|topMatch
operator|.
name|contains
argument_list|(
name|rareSearchTerm
argument_list|)
argument_list|)
expr_stmt|;
name|StoredDocument
name|runnerUpDoc
init|=
name|searcher
operator|.
name|doc
argument_list|(
name|hits
index|[
literal|1
index|]
operator|.
name|doc
argument_list|)
decl_stmt|;
name|String
name|runnerUpMatch
init|=
name|runnerUpDoc
operator|.
name|get
argument_list|(
literal|"field"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|runnerUpMatch
operator|.
name|contains
argument_list|(
literal|"cuttin"
argument_list|)
argument_list|)
expr_stmt|;
name|StoredDocument
name|worstDoc
init|=
name|searcher
operator|.
name|doc
argument_list|(
name|hits
index|[
name|hits
operator|.
name|length
operator|-
literal|1
index|]
operator|.
name|doc
argument_list|)
decl_stmt|;
name|String
name|worstMatch
init|=
name|worstDoc
operator|.
name|get
argument_list|(
literal|"field"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|worstMatch
operator|.
name|contains
argument_list|(
literal|"micheal"
argument_list|)
argument_list|)
expr_stmt|;
comment|//misspelling of common name
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|directory
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**     * MultiTermQuery provides (via attribute) information about which values    * must be competitive to enter the priority queue.     *     * FuzzyQuery optimizes itself around this information, if the attribute    * is not implemented correctly, there will be problems!    */
DECL|method|testTieBreaker
specifier|public
name|void
name|testTieBreaker
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|directory
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|RandomIndexWriter
name|writer
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|directory
argument_list|)
decl_stmt|;
name|addDoc
argument_list|(
literal|"a123456"
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|addDoc
argument_list|(
literal|"c123456"
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|addDoc
argument_list|(
literal|"d123456"
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|addDoc
argument_list|(
literal|"e123456"
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|Directory
name|directory2
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|RandomIndexWriter
name|writer2
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|directory2
argument_list|)
decl_stmt|;
name|addDoc
argument_list|(
literal|"a123456"
argument_list|,
name|writer2
argument_list|)
expr_stmt|;
name|addDoc
argument_list|(
literal|"b123456"
argument_list|,
name|writer2
argument_list|)
expr_stmt|;
name|addDoc
argument_list|(
literal|"b123456"
argument_list|,
name|writer2
argument_list|)
expr_stmt|;
name|addDoc
argument_list|(
literal|"b123456"
argument_list|,
name|writer2
argument_list|)
expr_stmt|;
name|addDoc
argument_list|(
literal|"c123456"
argument_list|,
name|writer2
argument_list|)
expr_stmt|;
name|addDoc
argument_list|(
literal|"f123456"
argument_list|,
name|writer2
argument_list|)
expr_stmt|;
name|IndexReader
name|ir1
init|=
name|writer
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|IndexReader
name|ir2
init|=
name|writer2
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|MultiReader
name|mr
init|=
operator|new
name|MultiReader
argument_list|(
name|ir1
argument_list|,
name|ir2
argument_list|)
decl_stmt|;
name|IndexSearcher
name|searcher
init|=
name|newSearcher
argument_list|(
name|mr
argument_list|)
decl_stmt|;
name|FuzzyQuery
name|fq
init|=
operator|new
name|FuzzyQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"z123456"
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|TopDocs
name|docs
init|=
name|searcher
operator|.
name|search
argument_list|(
name|fq
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|docs
operator|.
name|totalHits
argument_list|)
expr_stmt|;
comment|// 5 docs, from the a and b's
name|mr
operator|.
name|close
argument_list|()
expr_stmt|;
name|ir1
operator|.
name|close
argument_list|()
expr_stmt|;
name|ir2
operator|.
name|close
argument_list|()
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|writer2
operator|.
name|close
argument_list|()
expr_stmt|;
name|directory
operator|.
name|close
argument_list|()
expr_stmt|;
name|directory2
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/** Test the TopTermsBoostOnlyBooleanQueryRewrite rewrite method. */
DECL|method|testBoostOnlyRewrite
specifier|public
name|void
name|testBoostOnlyRewrite
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|directory
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|RandomIndexWriter
name|writer
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|directory
argument_list|)
decl_stmt|;
name|addDoc
argument_list|(
literal|"Lucene"
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|addDoc
argument_list|(
literal|"Lucene"
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|addDoc
argument_list|(
literal|"Lucenne"
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|IndexReader
name|reader
init|=
name|writer
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|IndexSearcher
name|searcher
init|=
name|newSearcher
argument_list|(
name|reader
argument_list|)
decl_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|FuzzyQuery
name|query
init|=
operator|new
name|FuzzyQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"lucene"
argument_list|)
argument_list|)
decl_stmt|;
name|query
operator|.
name|setRewriteMethod
argument_list|(
operator|new
name|MultiTermQuery
operator|.
name|TopTermsBoostOnlyBooleanQueryRewrite
argument_list|(
literal|50
argument_list|)
argument_list|)
expr_stmt|;
name|ScoreDoc
index|[]
name|hits
init|=
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
literal|1000
argument_list|)
operator|.
name|scoreDocs
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|hits
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// normally, 'Lucenne' would be the first result as IDF will skew the score.
name|assertEquals
argument_list|(
literal|"Lucene"
argument_list|,
name|reader
operator|.
name|document
argument_list|(
name|hits
index|[
literal|0
index|]
operator|.
name|doc
argument_list|)
operator|.
name|get
argument_list|(
literal|"field"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Lucene"
argument_list|,
name|reader
operator|.
name|document
argument_list|(
name|hits
index|[
literal|1
index|]
operator|.
name|doc
argument_list|)
operator|.
name|get
argument_list|(
literal|"field"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Lucenne"
argument_list|,
name|reader
operator|.
name|document
argument_list|(
name|hits
index|[
literal|2
index|]
operator|.
name|doc
argument_list|)
operator|.
name|get
argument_list|(
literal|"field"
argument_list|)
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|directory
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testGiga
specifier|public
name|void
name|testGiga
parameter_list|()
throws|throws
name|Exception
block|{
name|MockAnalyzer
name|analyzer
init|=
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
decl_stmt|;
name|Directory
name|index
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|RandomIndexWriter
name|w
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|index
argument_list|)
decl_stmt|;
name|addDoc
argument_list|(
literal|"Lucene in Action"
argument_list|,
name|w
argument_list|)
expr_stmt|;
name|addDoc
argument_list|(
literal|"Lucene for Dummies"
argument_list|,
name|w
argument_list|)
expr_stmt|;
comment|//addDoc("Giga", w);
name|addDoc
argument_list|(
literal|"Giga byte"
argument_list|,
name|w
argument_list|)
expr_stmt|;
name|addDoc
argument_list|(
literal|"ManagingGigabytesManagingGigabyte"
argument_list|,
name|w
argument_list|)
expr_stmt|;
name|addDoc
argument_list|(
literal|"ManagingGigabytesManagingGigabytes"
argument_list|,
name|w
argument_list|)
expr_stmt|;
name|addDoc
argument_list|(
literal|"The Art of Computer Science"
argument_list|,
name|w
argument_list|)
expr_stmt|;
name|addDoc
argument_list|(
literal|"J. K. Rowling"
argument_list|,
name|w
argument_list|)
expr_stmt|;
name|addDoc
argument_list|(
literal|"JK Rowling"
argument_list|,
name|w
argument_list|)
expr_stmt|;
name|addDoc
argument_list|(
literal|"Joanne K Roling"
argument_list|,
name|w
argument_list|)
expr_stmt|;
name|addDoc
argument_list|(
literal|"Bruce Willis"
argument_list|,
name|w
argument_list|)
expr_stmt|;
name|addDoc
argument_list|(
literal|"Willis bruce"
argument_list|,
name|w
argument_list|)
expr_stmt|;
name|addDoc
argument_list|(
literal|"Brute willis"
argument_list|,
name|w
argument_list|)
expr_stmt|;
name|addDoc
argument_list|(
literal|"B. willis"
argument_list|,
name|w
argument_list|)
expr_stmt|;
name|IndexReader
name|r
init|=
name|w
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|Query
name|q
init|=
operator|new
name|FuzzyQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"giga"
argument_list|)
argument_list|,
literal|0
argument_list|)
decl_stmt|;
comment|// 3. search
name|IndexSearcher
name|searcher
init|=
name|newSearcher
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|ScoreDoc
index|[]
name|hits
init|=
name|searcher
operator|.
name|search
argument_list|(
name|q
argument_list|,
literal|10
argument_list|)
operator|.
name|scoreDocs
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|hits
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Giga byte"
argument_list|,
name|searcher
operator|.
name|doc
argument_list|(
name|hits
index|[
literal|0
index|]
operator|.
name|doc
argument_list|)
operator|.
name|get
argument_list|(
literal|"field"
argument_list|)
argument_list|)
expr_stmt|;
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
name|index
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testDistanceAsEditsSearching
specifier|public
name|void
name|testDistanceAsEditsSearching
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|index
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|RandomIndexWriter
name|w
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|index
argument_list|)
decl_stmt|;
name|addDoc
argument_list|(
literal|"foobar"
argument_list|,
name|w
argument_list|)
expr_stmt|;
name|addDoc
argument_list|(
literal|"test"
argument_list|,
name|w
argument_list|)
expr_stmt|;
name|addDoc
argument_list|(
literal|"working"
argument_list|,
name|w
argument_list|)
expr_stmt|;
name|IndexReader
name|reader
init|=
name|w
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|IndexSearcher
name|searcher
init|=
name|newSearcher
argument_list|(
name|reader
argument_list|)
decl_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|FuzzyQuery
name|q
init|=
operator|new
name|FuzzyQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"fouba"
argument_list|)
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|ScoreDoc
index|[]
name|hits
init|=
name|searcher
operator|.
name|search
argument_list|(
name|q
argument_list|,
literal|10
argument_list|)
operator|.
name|scoreDocs
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|hits
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foobar"
argument_list|,
name|searcher
operator|.
name|doc
argument_list|(
name|hits
index|[
literal|0
index|]
operator|.
name|doc
argument_list|)
operator|.
name|get
argument_list|(
literal|"field"
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|=
operator|new
name|FuzzyQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"foubara"
argument_list|)
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|hits
operator|=
name|searcher
operator|.
name|search
argument_list|(
name|q
argument_list|,
literal|10
argument_list|)
operator|.
name|scoreDocs
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|hits
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foobar"
argument_list|,
name|searcher
operator|.
name|doc
argument_list|(
name|hits
index|[
literal|0
index|]
operator|.
name|doc
argument_list|)
operator|.
name|get
argument_list|(
literal|"field"
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|q
operator|=
operator|new
name|FuzzyQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"t"
argument_list|)
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{
comment|// expected
block|}
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|index
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testValidation
specifier|public
name|void
name|testValidation
parameter_list|()
block|{
try|try
block|{
operator|new
name|FuzzyQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"foo"
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected error for illegal max edits value"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"maxEdits"
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
operator|new
name|FuzzyQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"foo"
argument_list|)
argument_list|,
name|LevenshteinAutomata
operator|.
name|MAXIMUM_SUPPORTED_DISTANCE
operator|+
literal|1
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected error for illegal max edits value"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"maxEdits must be between"
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
operator|new
name|FuzzyQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"foo"
argument_list|)
argument_list|,
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected error for illegal prefix length value"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"prefixLength cannot be negative"
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
operator|new
name|FuzzyQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"foo"
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected error for illegal max expansions value"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"maxExpansions must be positive"
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
operator|new
name|FuzzyQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"foo"
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected error for illegal max expansions value"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"maxExpansions must be positive"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|addDoc
specifier|private
name|void
name|addDoc
parameter_list|(
name|String
name|text
parameter_list|,
name|RandomIndexWriter
name|writer
parameter_list|)
throws|throws
name|IOException
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newTextField
argument_list|(
literal|"field"
argument_list|,
name|text
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
