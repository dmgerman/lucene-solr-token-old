begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.util
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
package|;
end_package
begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigInteger
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_comment
comment|/**  * Tests for NumericUtils static methods.  */
end_comment
begin_class
DECL|class|TestNumericUtils
specifier|public
class|class
name|TestNumericUtils
extends|extends
name|LuceneTestCase
block|{
comment|/**    * generate a series of encoded longs, each numerical one bigger than the one before.    * check for correct ordering of the encoded bytes and that values round-trip.    */
DECL|method|testLongConversionAndOrdering
specifier|public
name|void
name|testLongConversionAndOrdering
parameter_list|()
throws|throws
name|Exception
block|{
name|BytesRef
name|previous
init|=
literal|null
decl_stmt|;
name|BytesRef
name|current
init|=
operator|new
name|BytesRef
argument_list|(
operator|new
name|byte
index|[
name|Long
operator|.
name|BYTES
index|]
argument_list|)
decl_stmt|;
for|for
control|(
name|long
name|value
init|=
operator|-
literal|100000L
init|;
name|value
operator|<
literal|100000L
condition|;
name|value
operator|++
control|)
block|{
name|NumericUtils
operator|.
name|longToSortableBytes
argument_list|(
name|value
argument_list|,
name|current
operator|.
name|bytes
argument_list|,
name|current
operator|.
name|offset
argument_list|)
expr_stmt|;
if|if
condition|(
name|previous
operator|==
literal|null
condition|)
block|{
name|previous
operator|=
operator|new
name|BytesRef
argument_list|(
operator|new
name|byte
index|[
name|Long
operator|.
name|BYTES
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// test if smaller
name|assertTrue
argument_list|(
literal|"current bigger than previous: "
argument_list|,
name|previous
operator|.
name|compareTo
argument_list|(
name|current
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
block|}
comment|// test is back and forward conversion works
name|assertEquals
argument_list|(
literal|"forward and back conversion should generate same long"
argument_list|,
name|value
argument_list|,
name|NumericUtils
operator|.
name|sortableBytesToLong
argument_list|(
name|current
operator|.
name|bytes
argument_list|,
name|current
operator|.
name|offset
argument_list|)
argument_list|)
expr_stmt|;
comment|// next step
name|System
operator|.
name|arraycopy
argument_list|(
name|current
operator|.
name|bytes
argument_list|,
name|current
operator|.
name|offset
argument_list|,
name|previous
operator|.
name|bytes
argument_list|,
name|previous
operator|.
name|offset
argument_list|,
name|current
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * generate a series of encoded ints, each numerical one bigger than the one before.    * check for correct ordering of the encoded bytes and that values round-trip.    */
DECL|method|testIntConversionAndOrdering
specifier|public
name|void
name|testIntConversionAndOrdering
parameter_list|()
throws|throws
name|Exception
block|{
name|BytesRef
name|previous
init|=
literal|null
decl_stmt|;
name|BytesRef
name|current
init|=
operator|new
name|BytesRef
argument_list|(
operator|new
name|byte
index|[
name|Integer
operator|.
name|BYTES
index|]
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|value
init|=
operator|-
literal|100000
init|;
name|value
operator|<
literal|100000
condition|;
name|value
operator|++
control|)
block|{
name|NumericUtils
operator|.
name|intToSortableBytes
argument_list|(
name|value
argument_list|,
name|current
operator|.
name|bytes
argument_list|,
name|current
operator|.
name|offset
argument_list|)
expr_stmt|;
if|if
condition|(
name|previous
operator|==
literal|null
condition|)
block|{
name|previous
operator|=
operator|new
name|BytesRef
argument_list|(
operator|new
name|byte
index|[
name|Integer
operator|.
name|BYTES
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// test if smaller
name|assertTrue
argument_list|(
literal|"current bigger than previous: "
argument_list|,
name|previous
operator|.
name|compareTo
argument_list|(
name|current
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
block|}
comment|// test is back and forward conversion works
name|assertEquals
argument_list|(
literal|"forward and back conversion should generate same int"
argument_list|,
name|value
argument_list|,
name|NumericUtils
operator|.
name|sortableBytesToInt
argument_list|(
name|current
operator|.
name|bytes
argument_list|,
name|current
operator|.
name|offset
argument_list|)
argument_list|)
expr_stmt|;
comment|// next step
name|System
operator|.
name|arraycopy
argument_list|(
name|current
operator|.
name|bytes
argument_list|,
name|current
operator|.
name|offset
argument_list|,
name|previous
operator|.
name|bytes
argument_list|,
name|previous
operator|.
name|offset
argument_list|,
name|current
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * generate a series of encoded BigIntegers, each numerical one bigger than the one before.    * check for correct ordering of the encoded bytes and that values round-trip.    */
DECL|method|testBigIntConversionAndOrdering
specifier|public
name|void
name|testBigIntConversionAndOrdering
parameter_list|()
throws|throws
name|Exception
block|{
comment|// we need at least 3 bytes of storage.
name|int
name|size
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|3
argument_list|,
literal|16
argument_list|)
decl_stmt|;
name|BytesRef
name|previous
init|=
literal|null
decl_stmt|;
name|BytesRef
name|current
init|=
operator|new
name|BytesRef
argument_list|(
operator|new
name|byte
index|[
name|size
index|]
argument_list|)
decl_stmt|;
for|for
control|(
name|long
name|value
init|=
operator|-
literal|100000L
init|;
name|value
operator|<
literal|100000L
condition|;
name|value
operator|++
control|)
block|{
name|NumericUtils
operator|.
name|bigIntToSortableBytes
argument_list|(
name|BigInteger
operator|.
name|valueOf
argument_list|(
name|value
argument_list|)
argument_list|,
name|size
argument_list|,
name|current
operator|.
name|bytes
argument_list|,
name|current
operator|.
name|offset
argument_list|)
expr_stmt|;
if|if
condition|(
name|previous
operator|==
literal|null
condition|)
block|{
name|previous
operator|=
operator|new
name|BytesRef
argument_list|(
operator|new
name|byte
index|[
name|size
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// test if smaller
name|assertTrue
argument_list|(
literal|"current bigger than previous: "
argument_list|,
name|previous
operator|.
name|compareTo
argument_list|(
name|current
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
block|}
comment|// test is back and forward conversion works
name|assertEquals
argument_list|(
literal|"forward and back conversion should generate same BigInteger"
argument_list|,
name|BigInteger
operator|.
name|valueOf
argument_list|(
name|value
argument_list|)
argument_list|,
name|NumericUtils
operator|.
name|sortableBytesToBigInt
argument_list|(
name|current
operator|.
name|bytes
argument_list|,
name|current
operator|.
name|offset
argument_list|,
name|current
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
comment|// next step
name|System
operator|.
name|arraycopy
argument_list|(
name|current
operator|.
name|bytes
argument_list|,
name|current
operator|.
name|offset
argument_list|,
name|previous
operator|.
name|bytes
argument_list|,
name|previous
operator|.
name|offset
argument_list|,
name|current
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * check extreme values of longs     * check for correct ordering of the encoded bytes and that values round-trip.    */
DECL|method|testLongSpecialValues
specifier|public
name|void
name|testLongSpecialValues
parameter_list|()
throws|throws
name|Exception
block|{
name|long
index|[]
name|values
init|=
operator|new
name|long
index|[]
block|{
name|Long
operator|.
name|MIN_VALUE
block|,
name|Long
operator|.
name|MIN_VALUE
operator|+
literal|1
block|,
name|Long
operator|.
name|MIN_VALUE
operator|+
literal|2
block|,
operator|-
literal|5003400000000L
block|,
operator|-
literal|4000L
block|,
operator|-
literal|3000L
block|,
operator|-
literal|2000L
block|,
operator|-
literal|1000L
block|,
operator|-
literal|1L
block|,
literal|0L
block|,
literal|1L
block|,
literal|10L
block|,
literal|300L
block|,
literal|50006789999999999L
block|,
name|Long
operator|.
name|MAX_VALUE
operator|-
literal|2
block|,
name|Long
operator|.
name|MAX_VALUE
operator|-
literal|1
block|,
name|Long
operator|.
name|MAX_VALUE
block|}
decl_stmt|;
name|BytesRef
index|[]
name|encoded
init|=
operator|new
name|BytesRef
index|[
name|values
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|values
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|encoded
index|[
name|i
index|]
operator|=
operator|new
name|BytesRef
argument_list|(
operator|new
name|byte
index|[
name|Long
operator|.
name|BYTES
index|]
argument_list|)
expr_stmt|;
name|NumericUtils
operator|.
name|longToSortableBytes
argument_list|(
name|values
index|[
name|i
index|]
argument_list|,
name|encoded
index|[
name|i
index|]
operator|.
name|bytes
argument_list|,
name|encoded
index|[
name|i
index|]
operator|.
name|offset
argument_list|)
expr_stmt|;
comment|// check forward and back conversion
name|assertEquals
argument_list|(
literal|"forward and back conversion should generate same long"
argument_list|,
name|values
index|[
name|i
index|]
argument_list|,
name|NumericUtils
operator|.
name|sortableBytesToLong
argument_list|(
name|encoded
index|[
name|i
index|]
operator|.
name|bytes
argument_list|,
name|encoded
index|[
name|i
index|]
operator|.
name|offset
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// check sort order (encoded values should be ascending)
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|encoded
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertTrue
argument_list|(
literal|"check sort order"
argument_list|,
name|encoded
index|[
name|i
operator|-
literal|1
index|]
operator|.
name|compareTo
argument_list|(
name|encoded
index|[
name|i
index|]
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * check extreme values of ints    * check for correct ordering of the encoded bytes and that values round-trip.    */
DECL|method|testIntSpecialValues
specifier|public
name|void
name|testIntSpecialValues
parameter_list|()
throws|throws
name|Exception
block|{
name|int
index|[]
name|values
init|=
operator|new
name|int
index|[]
block|{
name|Integer
operator|.
name|MIN_VALUE
block|,
name|Integer
operator|.
name|MIN_VALUE
operator|+
literal|1
block|,
name|Integer
operator|.
name|MIN_VALUE
operator|+
literal|2
block|,
operator|-
literal|64765767
block|,
operator|-
literal|4000
block|,
operator|-
literal|3000
block|,
operator|-
literal|2000
block|,
operator|-
literal|1000
block|,
operator|-
literal|1
block|,
literal|0
block|,
literal|1
block|,
literal|10
block|,
literal|300
block|,
literal|765878989
block|,
name|Integer
operator|.
name|MAX_VALUE
operator|-
literal|2
block|,
name|Integer
operator|.
name|MAX_VALUE
operator|-
literal|1
block|,
name|Integer
operator|.
name|MAX_VALUE
block|}
decl_stmt|;
name|BytesRef
index|[]
name|encoded
init|=
operator|new
name|BytesRef
index|[
name|values
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|values
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|encoded
index|[
name|i
index|]
operator|=
operator|new
name|BytesRef
argument_list|(
operator|new
name|byte
index|[
name|Integer
operator|.
name|BYTES
index|]
argument_list|)
expr_stmt|;
name|NumericUtils
operator|.
name|intToSortableBytes
argument_list|(
name|values
index|[
name|i
index|]
argument_list|,
name|encoded
index|[
name|i
index|]
operator|.
name|bytes
argument_list|,
name|encoded
index|[
name|i
index|]
operator|.
name|offset
argument_list|)
expr_stmt|;
comment|// check forward and back conversion
name|assertEquals
argument_list|(
literal|"forward and back conversion should generate same int"
argument_list|,
name|values
index|[
name|i
index|]
argument_list|,
name|NumericUtils
operator|.
name|sortableBytesToInt
argument_list|(
name|encoded
index|[
name|i
index|]
operator|.
name|bytes
argument_list|,
name|encoded
index|[
name|i
index|]
operator|.
name|offset
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// check sort order (encoded values should be ascending)
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|encoded
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertTrue
argument_list|(
literal|"check sort order"
argument_list|,
name|encoded
index|[
name|i
operator|-
literal|1
index|]
operator|.
name|compareTo
argument_list|(
name|encoded
index|[
name|i
index|]
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * check extreme values of big integers (4 bytes)    * check for correct ordering of the encoded bytes and that values round-trip.    */
DECL|method|testBigIntSpecialValues
specifier|public
name|void
name|testBigIntSpecialValues
parameter_list|()
throws|throws
name|Exception
block|{
name|BigInteger
index|[]
name|values
init|=
operator|new
name|BigInteger
index|[]
block|{
name|BigInteger
operator|.
name|valueOf
argument_list|(
name|Integer
operator|.
name|MIN_VALUE
argument_list|)
block|,
name|BigInteger
operator|.
name|valueOf
argument_list|(
name|Integer
operator|.
name|MIN_VALUE
operator|+
literal|1
argument_list|)
block|,
name|BigInteger
operator|.
name|valueOf
argument_list|(
name|Integer
operator|.
name|MIN_VALUE
operator|+
literal|2
argument_list|)
block|,
name|BigInteger
operator|.
name|valueOf
argument_list|(
operator|-
literal|64765767
argument_list|)
block|,
name|BigInteger
operator|.
name|valueOf
argument_list|(
operator|-
literal|4000
argument_list|)
block|,
name|BigInteger
operator|.
name|valueOf
argument_list|(
operator|-
literal|3000
argument_list|)
block|,
name|BigInteger
operator|.
name|valueOf
argument_list|(
operator|-
literal|2000
argument_list|)
block|,
name|BigInteger
operator|.
name|valueOf
argument_list|(
operator|-
literal|1000
argument_list|)
block|,
name|BigInteger
operator|.
name|valueOf
argument_list|(
operator|-
literal|1
argument_list|)
block|,
name|BigInteger
operator|.
name|valueOf
argument_list|(
literal|0
argument_list|)
block|,
name|BigInteger
operator|.
name|valueOf
argument_list|(
literal|1
argument_list|)
block|,
name|BigInteger
operator|.
name|valueOf
argument_list|(
literal|10
argument_list|)
block|,
name|BigInteger
operator|.
name|valueOf
argument_list|(
literal|300
argument_list|)
block|,
name|BigInteger
operator|.
name|valueOf
argument_list|(
literal|765878989
argument_list|)
block|,
name|BigInteger
operator|.
name|valueOf
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
operator|-
literal|2
argument_list|)
block|,
name|BigInteger
operator|.
name|valueOf
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
operator|-
literal|1
argument_list|)
block|,
name|BigInteger
operator|.
name|valueOf
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
block|}
decl_stmt|;
name|BytesRef
index|[]
name|encoded
init|=
operator|new
name|BytesRef
index|[
name|values
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|values
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|encoded
index|[
name|i
index|]
operator|=
operator|new
name|BytesRef
argument_list|(
operator|new
name|byte
index|[
name|Integer
operator|.
name|BYTES
index|]
argument_list|)
expr_stmt|;
name|NumericUtils
operator|.
name|bigIntToSortableBytes
argument_list|(
name|values
index|[
name|i
index|]
argument_list|,
name|Integer
operator|.
name|BYTES
argument_list|,
name|encoded
index|[
name|i
index|]
operator|.
name|bytes
argument_list|,
name|encoded
index|[
name|i
index|]
operator|.
name|offset
argument_list|)
expr_stmt|;
comment|// check forward and back conversion
name|assertEquals
argument_list|(
literal|"forward and back conversion should generate same big integer"
argument_list|,
name|values
index|[
name|i
index|]
argument_list|,
name|NumericUtils
operator|.
name|sortableBytesToBigInt
argument_list|(
name|encoded
index|[
name|i
index|]
operator|.
name|bytes
argument_list|,
name|encoded
index|[
name|i
index|]
operator|.
name|offset
argument_list|,
name|Integer
operator|.
name|BYTES
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// check sort order (encoded values should be ascending)
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|encoded
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertTrue
argument_list|(
literal|"check sort order"
argument_list|,
name|encoded
index|[
name|i
operator|-
literal|1
index|]
operator|.
name|compareTo
argument_list|(
name|encoded
index|[
name|i
index|]
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * check various sorted values of doubles (including extreme values)    * check for correct ordering of the encoded bytes and that values round-trip.    */
DECL|method|testDoubles
specifier|public
name|void
name|testDoubles
parameter_list|()
throws|throws
name|Exception
block|{
name|double
index|[]
name|values
init|=
operator|new
name|double
index|[]
block|{
name|Double
operator|.
name|NEGATIVE_INFINITY
block|,
operator|-
literal|2.3E25
block|,
operator|-
literal|1.0E15
block|,
operator|-
literal|1.0
block|,
operator|-
literal|1.0E
operator|-
literal|1
block|,
operator|-
literal|1.0E
operator|-
literal|2
block|,
operator|-
literal|0.0
block|,
operator|+
literal|0.0
block|,
literal|1.0E
operator|-
literal|2
block|,
literal|1.0E
operator|-
literal|1
block|,
literal|1.0
block|,
literal|1.0E15
block|,
literal|2.3E25
block|,
name|Double
operator|.
name|POSITIVE_INFINITY
block|,
name|Double
operator|.
name|NaN
block|}
decl_stmt|;
name|long
index|[]
name|encoded
init|=
operator|new
name|long
index|[
name|values
operator|.
name|length
index|]
decl_stmt|;
comment|// check forward and back conversion
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|values
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|encoded
index|[
name|i
index|]
operator|=
name|NumericUtils
operator|.
name|doubleToSortableLong
argument_list|(
name|values
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"forward and back conversion should generate same double"
argument_list|,
name|Double
operator|.
name|compare
argument_list|(
name|values
index|[
name|i
index|]
argument_list|,
name|NumericUtils
operator|.
name|sortableLongToDouble
argument_list|(
name|encoded
index|[
name|i
index|]
argument_list|)
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
comment|// check sort order (encoded values should be ascending)
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|encoded
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertTrue
argument_list|(
literal|"check sort order"
argument_list|,
name|encoded
index|[
name|i
operator|-
literal|1
index|]
operator|<
name|encoded
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
DECL|field|DOUBLE_NANs
specifier|public
specifier|static
specifier|final
name|double
index|[]
name|DOUBLE_NANs
init|=
block|{
name|Double
operator|.
name|NaN
block|,
name|Double
operator|.
name|longBitsToDouble
argument_list|(
literal|0x7ff0000000000001L
argument_list|)
block|,
name|Double
operator|.
name|longBitsToDouble
argument_list|(
literal|0x7fffffffffffffffL
argument_list|)
block|,
name|Double
operator|.
name|longBitsToDouble
argument_list|(
literal|0xfff0000000000001L
argument_list|)
block|,
name|Double
operator|.
name|longBitsToDouble
argument_list|(
literal|0xffffffffffffffffL
argument_list|)
block|}
decl_stmt|;
DECL|method|testSortableDoubleNaN
specifier|public
name|void
name|testSortableDoubleNaN
parameter_list|()
block|{
specifier|final
name|long
name|plusInf
init|=
name|NumericUtils
operator|.
name|doubleToSortableLong
argument_list|(
name|Double
operator|.
name|POSITIVE_INFINITY
argument_list|)
decl_stmt|;
for|for
control|(
name|double
name|nan
range|:
name|DOUBLE_NANs
control|)
block|{
name|assertTrue
argument_list|(
name|Double
operator|.
name|isNaN
argument_list|(
name|nan
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|long
name|sortable
init|=
name|NumericUtils
operator|.
name|doubleToSortableLong
argument_list|(
name|nan
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Double not sorted correctly: "
operator|+
name|nan
operator|+
literal|", long repr: "
operator|+
name|sortable
operator|+
literal|", positive inf.: "
operator|+
name|plusInf
argument_list|,
name|sortable
operator|>
name|plusInf
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * check various sorted values of floats (including extreme values)    * check for correct ordering of the encoded bytes and that values round-trip.    */
DECL|method|testFloats
specifier|public
name|void
name|testFloats
parameter_list|()
throws|throws
name|Exception
block|{
name|float
index|[]
name|values
init|=
operator|new
name|float
index|[]
block|{
name|Float
operator|.
name|NEGATIVE_INFINITY
block|,
operator|-
literal|2.3E25f
block|,
operator|-
literal|1.0E15f
block|,
operator|-
literal|1.0f
block|,
operator|-
literal|1.0E
operator|-
literal|1f
block|,
operator|-
literal|1.0E
operator|-
literal|2f
block|,
operator|-
literal|0.0f
block|,
operator|+
literal|0.0f
block|,
literal|1.0E
operator|-
literal|2f
block|,
literal|1.0E
operator|-
literal|1f
block|,
literal|1.0f
block|,
literal|1.0E15f
block|,
literal|2.3E25f
block|,
name|Float
operator|.
name|POSITIVE_INFINITY
block|,
name|Float
operator|.
name|NaN
block|}
decl_stmt|;
name|int
index|[]
name|encoded
init|=
operator|new
name|int
index|[
name|values
operator|.
name|length
index|]
decl_stmt|;
comment|// check forward and back conversion
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|values
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|encoded
index|[
name|i
index|]
operator|=
name|NumericUtils
operator|.
name|floatToSortableInt
argument_list|(
name|values
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"forward and back conversion should generate same float"
argument_list|,
name|Float
operator|.
name|compare
argument_list|(
name|values
index|[
name|i
index|]
argument_list|,
name|NumericUtils
operator|.
name|sortableIntToFloat
argument_list|(
name|encoded
index|[
name|i
index|]
argument_list|)
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
comment|// check sort order (encoded values should be ascending)
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|encoded
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertTrue
argument_list|(
literal|"check sort order"
argument_list|,
name|encoded
index|[
name|i
operator|-
literal|1
index|]
operator|<
name|encoded
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
DECL|field|FLOAT_NANs
specifier|public
specifier|static
specifier|final
name|float
index|[]
name|FLOAT_NANs
init|=
block|{
name|Float
operator|.
name|NaN
block|,
name|Float
operator|.
name|intBitsToFloat
argument_list|(
literal|0x7f800001
argument_list|)
block|,
name|Float
operator|.
name|intBitsToFloat
argument_list|(
literal|0x7fffffff
argument_list|)
block|,
name|Float
operator|.
name|intBitsToFloat
argument_list|(
literal|0xff800001
argument_list|)
block|,
name|Float
operator|.
name|intBitsToFloat
argument_list|(
literal|0xffffffff
argument_list|)
block|}
decl_stmt|;
DECL|method|testSortableFloatNaN
specifier|public
name|void
name|testSortableFloatNaN
parameter_list|()
block|{
specifier|final
name|int
name|plusInf
init|=
name|NumericUtils
operator|.
name|floatToSortableInt
argument_list|(
name|Float
operator|.
name|POSITIVE_INFINITY
argument_list|)
decl_stmt|;
for|for
control|(
name|float
name|nan
range|:
name|FLOAT_NANs
control|)
block|{
name|assertTrue
argument_list|(
name|Float
operator|.
name|isNaN
argument_list|(
name|nan
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|int
name|sortable
init|=
name|NumericUtils
operator|.
name|floatToSortableInt
argument_list|(
name|nan
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Float not sorted correctly: "
operator|+
name|nan
operator|+
literal|", int repr: "
operator|+
name|sortable
operator|+
literal|", positive inf.: "
operator|+
name|plusInf
argument_list|,
name|sortable
operator|>
name|plusInf
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testAdd
specifier|public
name|void
name|testAdd
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|iters
init|=
name|atLeast
argument_list|(
literal|10000
argument_list|)
decl_stmt|;
name|int
name|numBytes
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|100
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|iter
init|=
literal|0
init|;
name|iter
operator|<
name|iters
condition|;
name|iter
operator|++
control|)
block|{
name|BigInteger
name|v1
init|=
operator|new
name|BigInteger
argument_list|(
literal|8
operator|*
name|numBytes
operator|-
literal|1
argument_list|,
name|random
argument_list|()
argument_list|)
decl_stmt|;
name|BigInteger
name|v2
init|=
operator|new
name|BigInteger
argument_list|(
literal|8
operator|*
name|numBytes
operator|-
literal|1
argument_list|,
name|random
argument_list|()
argument_list|)
decl_stmt|;
name|byte
index|[]
name|v1Bytes
init|=
operator|new
name|byte
index|[
name|numBytes
index|]
decl_stmt|;
name|byte
index|[]
name|v1RawBytes
init|=
name|v1
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
assert|assert
name|v1RawBytes
operator|.
name|length
operator|<=
name|numBytes
assert|;
name|System
operator|.
name|arraycopy
argument_list|(
name|v1RawBytes
argument_list|,
literal|0
argument_list|,
name|v1Bytes
argument_list|,
name|v1Bytes
operator|.
name|length
operator|-
name|v1RawBytes
operator|.
name|length
argument_list|,
name|v1RawBytes
operator|.
name|length
argument_list|)
expr_stmt|;
name|byte
index|[]
name|v2Bytes
init|=
operator|new
name|byte
index|[
name|numBytes
index|]
decl_stmt|;
name|byte
index|[]
name|v2RawBytes
init|=
name|v2
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
assert|assert
name|v1RawBytes
operator|.
name|length
operator|<=
name|numBytes
assert|;
name|System
operator|.
name|arraycopy
argument_list|(
name|v2RawBytes
argument_list|,
literal|0
argument_list|,
name|v2Bytes
argument_list|,
name|v2Bytes
operator|.
name|length
operator|-
name|v2RawBytes
operator|.
name|length
argument_list|,
name|v2RawBytes
operator|.
name|length
argument_list|)
expr_stmt|;
name|byte
index|[]
name|result
init|=
operator|new
name|byte
index|[
name|numBytes
index|]
decl_stmt|;
name|NumericUtils
operator|.
name|add
argument_list|(
name|numBytes
argument_list|,
literal|0
argument_list|,
name|v1Bytes
argument_list|,
name|v2Bytes
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|BigInteger
name|sum
init|=
name|v1
operator|.
name|add
argument_list|(
name|v2
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"sum="
operator|+
name|sum
operator|+
literal|" v1="
operator|+
name|v1
operator|+
literal|" v2="
operator|+
name|v2
operator|+
literal|" but result="
operator|+
operator|new
name|BigInteger
argument_list|(
literal|1
argument_list|,
name|result
argument_list|)
argument_list|,
name|sum
operator|.
name|equals
argument_list|(
operator|new
name|BigInteger
argument_list|(
literal|1
argument_list|,
name|result
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testIllegalAdd
specifier|public
name|void
name|testIllegalAdd
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|bytes
init|=
operator|new
name|byte
index|[
literal|4
index|]
decl_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|bytes
argument_list|,
operator|(
name|byte
operator|)
literal|0xff
argument_list|)
expr_stmt|;
name|byte
index|[]
name|one
init|=
operator|new
name|byte
index|[
literal|4
index|]
decl_stmt|;
name|one
index|[
literal|3
index|]
operator|=
literal|1
expr_stmt|;
name|IllegalArgumentException
name|expected
init|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|NumericUtils
operator|.
name|add
argument_list|(
literal|4
argument_list|,
literal|0
argument_list|,
name|bytes
argument_list|,
name|one
argument_list|,
operator|new
name|byte
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"a + b overflows bytesPerDim=4"
argument_list|,
name|expected
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testSubtract
specifier|public
name|void
name|testSubtract
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|iters
init|=
name|atLeast
argument_list|(
literal|10000
argument_list|)
decl_stmt|;
name|int
name|numBytes
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|100
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|iter
init|=
literal|0
init|;
name|iter
operator|<
name|iters
condition|;
name|iter
operator|++
control|)
block|{
name|BigInteger
name|v1
init|=
operator|new
name|BigInteger
argument_list|(
literal|8
operator|*
name|numBytes
operator|-
literal|1
argument_list|,
name|random
argument_list|()
argument_list|)
decl_stmt|;
name|BigInteger
name|v2
init|=
operator|new
name|BigInteger
argument_list|(
literal|8
operator|*
name|numBytes
operator|-
literal|1
argument_list|,
name|random
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|v1
operator|.
name|compareTo
argument_list|(
name|v2
argument_list|)
operator|<
literal|0
condition|)
block|{
name|BigInteger
name|tmp
init|=
name|v1
decl_stmt|;
name|v1
operator|=
name|v2
expr_stmt|;
name|v2
operator|=
name|tmp
expr_stmt|;
block|}
name|byte
index|[]
name|v1Bytes
init|=
operator|new
name|byte
index|[
name|numBytes
index|]
decl_stmt|;
name|byte
index|[]
name|v1RawBytes
init|=
name|v1
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
assert|assert
name|v1RawBytes
operator|.
name|length
operator|<=
name|numBytes
operator|:
literal|"length="
operator|+
name|v1RawBytes
operator|.
name|length
operator|+
literal|" vs numBytes="
operator|+
name|numBytes
assert|;
name|System
operator|.
name|arraycopy
argument_list|(
name|v1RawBytes
argument_list|,
literal|0
argument_list|,
name|v1Bytes
argument_list|,
name|v1Bytes
operator|.
name|length
operator|-
name|v1RawBytes
operator|.
name|length
argument_list|,
name|v1RawBytes
operator|.
name|length
argument_list|)
expr_stmt|;
name|byte
index|[]
name|v2Bytes
init|=
operator|new
name|byte
index|[
name|numBytes
index|]
decl_stmt|;
name|byte
index|[]
name|v2RawBytes
init|=
name|v2
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
assert|assert
name|v2RawBytes
operator|.
name|length
operator|<=
name|numBytes
assert|;
assert|assert
name|v2RawBytes
operator|.
name|length
operator|<=
name|numBytes
operator|:
literal|"length="
operator|+
name|v2RawBytes
operator|.
name|length
operator|+
literal|" vs numBytes="
operator|+
name|numBytes
assert|;
name|System
operator|.
name|arraycopy
argument_list|(
name|v2RawBytes
argument_list|,
literal|0
argument_list|,
name|v2Bytes
argument_list|,
name|v2Bytes
operator|.
name|length
operator|-
name|v2RawBytes
operator|.
name|length
argument_list|,
name|v2RawBytes
operator|.
name|length
argument_list|)
expr_stmt|;
name|byte
index|[]
name|result
init|=
operator|new
name|byte
index|[
name|numBytes
index|]
decl_stmt|;
name|NumericUtils
operator|.
name|subtract
argument_list|(
name|numBytes
argument_list|,
literal|0
argument_list|,
name|v1Bytes
argument_list|,
name|v2Bytes
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|BigInteger
name|diff
init|=
name|v1
operator|.
name|subtract
argument_list|(
name|v2
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"diff="
operator|+
name|diff
operator|+
literal|" vs result="
operator|+
operator|new
name|BigInteger
argument_list|(
name|result
argument_list|)
operator|+
literal|" v1="
operator|+
name|v1
operator|+
literal|" v2="
operator|+
name|v2
argument_list|,
name|diff
operator|.
name|equals
argument_list|(
operator|new
name|BigInteger
argument_list|(
name|result
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testIllegalSubtract
specifier|public
name|void
name|testIllegalSubtract
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|v1
init|=
operator|new
name|byte
index|[
literal|4
index|]
decl_stmt|;
name|v1
index|[
literal|3
index|]
operator|=
operator|(
name|byte
operator|)
literal|0xf0
expr_stmt|;
name|byte
index|[]
name|v2
init|=
operator|new
name|byte
index|[
literal|4
index|]
decl_stmt|;
name|v2
index|[
literal|3
index|]
operator|=
operator|(
name|byte
operator|)
literal|0xf1
expr_stmt|;
name|IllegalArgumentException
name|expected
init|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|NumericUtils
operator|.
name|subtract
argument_list|(
literal|4
argument_list|,
literal|0
argument_list|,
name|v1
argument_list|,
name|v2
argument_list|,
operator|new
name|byte
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"a< b"
argument_list|,
name|expected
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/** test round-trip encoding of random integers */
DECL|method|testIntsRoundTrip
specifier|public
name|void
name|testIntsRoundTrip
parameter_list|()
block|{
name|byte
index|[]
name|encoded
init|=
operator|new
name|byte
index|[
name|Integer
operator|.
name|BYTES
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10000
condition|;
name|i
operator|++
control|)
block|{
name|int
name|value
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|()
decl_stmt|;
name|NumericUtils
operator|.
name|intToSortableBytes
argument_list|(
name|value
argument_list|,
name|encoded
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|value
argument_list|,
name|NumericUtils
operator|.
name|sortableBytesToInt
argument_list|(
name|encoded
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** test round-trip encoding of random longs */
DECL|method|testLongsRoundTrip
specifier|public
name|void
name|testLongsRoundTrip
parameter_list|()
block|{
name|byte
index|[]
name|encoded
init|=
operator|new
name|byte
index|[
name|Long
operator|.
name|BYTES
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10000
condition|;
name|i
operator|++
control|)
block|{
name|long
name|value
init|=
name|TestUtil
operator|.
name|nextLong
argument_list|(
name|random
argument_list|()
argument_list|,
name|Long
operator|.
name|MIN_VALUE
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
name|NumericUtils
operator|.
name|longToSortableBytes
argument_list|(
name|value
argument_list|,
name|encoded
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|value
argument_list|,
name|NumericUtils
operator|.
name|sortableBytesToLong
argument_list|(
name|encoded
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** test round-trip encoding of random floats */
DECL|method|testFloatsRoundTrip
specifier|public
name|void
name|testFloatsRoundTrip
parameter_list|()
block|{
name|byte
index|[]
name|encoded
init|=
operator|new
name|byte
index|[
name|Float
operator|.
name|BYTES
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10000
condition|;
name|i
operator|++
control|)
block|{
name|float
name|value
init|=
name|Float
operator|.
name|intBitsToFloat
argument_list|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|()
argument_list|)
decl_stmt|;
name|NumericUtils
operator|.
name|intToSortableBytes
argument_list|(
name|NumericUtils
operator|.
name|floatToSortableInt
argument_list|(
name|value
argument_list|)
argument_list|,
name|encoded
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|float
name|actual
init|=
name|NumericUtils
operator|.
name|sortableIntToFloat
argument_list|(
name|NumericUtils
operator|.
name|sortableBytesToInt
argument_list|(
name|encoded
argument_list|,
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Float
operator|.
name|floatToIntBits
argument_list|(
name|value
argument_list|)
argument_list|,
name|Float
operator|.
name|floatToIntBits
argument_list|(
name|actual
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** test round-trip encoding of random doubles */
DECL|method|testDoublesRoundTrip
specifier|public
name|void
name|testDoublesRoundTrip
parameter_list|()
block|{
name|byte
index|[]
name|encoded
init|=
operator|new
name|byte
index|[
name|Double
operator|.
name|BYTES
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10000
condition|;
name|i
operator|++
control|)
block|{
name|double
name|value
init|=
name|Double
operator|.
name|longBitsToDouble
argument_list|(
name|TestUtil
operator|.
name|nextLong
argument_list|(
name|random
argument_list|()
argument_list|,
name|Long
operator|.
name|MIN_VALUE
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
decl_stmt|;
name|NumericUtils
operator|.
name|longToSortableBytes
argument_list|(
name|NumericUtils
operator|.
name|doubleToSortableLong
argument_list|(
name|value
argument_list|)
argument_list|,
name|encoded
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|double
name|actual
init|=
name|NumericUtils
operator|.
name|sortableLongToDouble
argument_list|(
name|NumericUtils
operator|.
name|sortableBytesToLong
argument_list|(
name|encoded
argument_list|,
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Double
operator|.
name|doubleToLongBits
argument_list|(
name|value
argument_list|)
argument_list|,
name|Double
operator|.
name|doubleToLongBits
argument_list|(
name|actual
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** test round-trip encoding of random big integers */
DECL|method|testBigIntsRoundTrip
specifier|public
name|void
name|testBigIntsRoundTrip
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10000
condition|;
name|i
operator|++
control|)
block|{
name|BigInteger
name|value
init|=
name|TestUtil
operator|.
name|nextBigInteger
argument_list|(
name|random
argument_list|()
argument_list|,
literal|16
argument_list|)
decl_stmt|;
name|int
name|length
init|=
name|value
operator|.
name|toByteArray
argument_list|()
operator|.
name|length
decl_stmt|;
comment|// make sure sign extension is tested: sometimes pad to more bytes when encoding.
name|int
name|maxLength
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
name|length
argument_list|,
name|length
operator|+
literal|3
argument_list|)
decl_stmt|;
name|byte
index|[]
name|encoded
init|=
operator|new
name|byte
index|[
name|maxLength
index|]
decl_stmt|;
name|NumericUtils
operator|.
name|bigIntToSortableBytes
argument_list|(
name|value
argument_list|,
name|maxLength
argument_list|,
name|encoded
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|value
argument_list|,
name|NumericUtils
operator|.
name|sortableBytesToBigInt
argument_list|(
name|encoded
argument_list|,
literal|0
argument_list|,
name|maxLength
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** check sort order of random integers consistent with Integer.compare */
DECL|method|testIntsCompare
specifier|public
name|void
name|testIntsCompare
parameter_list|()
block|{
name|BytesRef
name|left
init|=
operator|new
name|BytesRef
argument_list|(
operator|new
name|byte
index|[
name|Integer
operator|.
name|BYTES
index|]
argument_list|)
decl_stmt|;
name|BytesRef
name|right
init|=
operator|new
name|BytesRef
argument_list|(
operator|new
name|byte
index|[
name|Integer
operator|.
name|BYTES
index|]
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10000
condition|;
name|i
operator|++
control|)
block|{
name|int
name|leftValue
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|()
decl_stmt|;
name|NumericUtils
operator|.
name|intToSortableBytes
argument_list|(
name|leftValue
argument_list|,
name|left
operator|.
name|bytes
argument_list|,
name|left
operator|.
name|offset
argument_list|)
expr_stmt|;
name|int
name|rightValue
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|()
decl_stmt|;
name|NumericUtils
operator|.
name|intToSortableBytes
argument_list|(
name|rightValue
argument_list|,
name|right
operator|.
name|bytes
argument_list|,
name|right
operator|.
name|offset
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|signum
argument_list|(
name|Integer
operator|.
name|compare
argument_list|(
name|leftValue
argument_list|,
name|rightValue
argument_list|)
argument_list|)
argument_list|,
name|Integer
operator|.
name|signum
argument_list|(
name|left
operator|.
name|compareTo
argument_list|(
name|right
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** check sort order of random longs consistent with Long.compare */
DECL|method|testLongsCompare
specifier|public
name|void
name|testLongsCompare
parameter_list|()
block|{
name|BytesRef
name|left
init|=
operator|new
name|BytesRef
argument_list|(
operator|new
name|byte
index|[
name|Long
operator|.
name|BYTES
index|]
argument_list|)
decl_stmt|;
name|BytesRef
name|right
init|=
operator|new
name|BytesRef
argument_list|(
operator|new
name|byte
index|[
name|Long
operator|.
name|BYTES
index|]
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10000
condition|;
name|i
operator|++
control|)
block|{
name|long
name|leftValue
init|=
name|TestUtil
operator|.
name|nextLong
argument_list|(
name|random
argument_list|()
argument_list|,
name|Long
operator|.
name|MIN_VALUE
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
name|NumericUtils
operator|.
name|longToSortableBytes
argument_list|(
name|leftValue
argument_list|,
name|left
operator|.
name|bytes
argument_list|,
name|left
operator|.
name|offset
argument_list|)
expr_stmt|;
name|long
name|rightValue
init|=
name|TestUtil
operator|.
name|nextLong
argument_list|(
name|random
argument_list|()
argument_list|,
name|Long
operator|.
name|MIN_VALUE
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
name|NumericUtils
operator|.
name|longToSortableBytes
argument_list|(
name|rightValue
argument_list|,
name|right
operator|.
name|bytes
argument_list|,
name|right
operator|.
name|offset
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|signum
argument_list|(
name|Long
operator|.
name|compare
argument_list|(
name|leftValue
argument_list|,
name|rightValue
argument_list|)
argument_list|)
argument_list|,
name|Integer
operator|.
name|signum
argument_list|(
name|left
operator|.
name|compareTo
argument_list|(
name|right
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** check sort order of random floats consistent with Float.compare */
DECL|method|testFloatsCompare
specifier|public
name|void
name|testFloatsCompare
parameter_list|()
block|{
name|BytesRef
name|left
init|=
operator|new
name|BytesRef
argument_list|(
operator|new
name|byte
index|[
name|Float
operator|.
name|BYTES
index|]
argument_list|)
decl_stmt|;
name|BytesRef
name|right
init|=
operator|new
name|BytesRef
argument_list|(
operator|new
name|byte
index|[
name|Float
operator|.
name|BYTES
index|]
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10000
condition|;
name|i
operator|++
control|)
block|{
name|float
name|leftValue
init|=
name|Float
operator|.
name|intBitsToFloat
argument_list|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|()
argument_list|)
decl_stmt|;
name|NumericUtils
operator|.
name|intToSortableBytes
argument_list|(
name|NumericUtils
operator|.
name|floatToSortableInt
argument_list|(
name|leftValue
argument_list|)
argument_list|,
name|left
operator|.
name|bytes
argument_list|,
name|left
operator|.
name|offset
argument_list|)
expr_stmt|;
name|float
name|rightValue
init|=
name|Float
operator|.
name|intBitsToFloat
argument_list|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|()
argument_list|)
decl_stmt|;
name|NumericUtils
operator|.
name|intToSortableBytes
argument_list|(
name|NumericUtils
operator|.
name|floatToSortableInt
argument_list|(
name|rightValue
argument_list|)
argument_list|,
name|right
operator|.
name|bytes
argument_list|,
name|right
operator|.
name|offset
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|signum
argument_list|(
name|Float
operator|.
name|compare
argument_list|(
name|leftValue
argument_list|,
name|rightValue
argument_list|)
argument_list|)
argument_list|,
name|Integer
operator|.
name|signum
argument_list|(
name|left
operator|.
name|compareTo
argument_list|(
name|right
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** check sort order of random doubles consistent with Double.compare */
DECL|method|testDoublesCompare
specifier|public
name|void
name|testDoublesCompare
parameter_list|()
block|{
name|BytesRef
name|left
init|=
operator|new
name|BytesRef
argument_list|(
operator|new
name|byte
index|[
name|Double
operator|.
name|BYTES
index|]
argument_list|)
decl_stmt|;
name|BytesRef
name|right
init|=
operator|new
name|BytesRef
argument_list|(
operator|new
name|byte
index|[
name|Double
operator|.
name|BYTES
index|]
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10000
condition|;
name|i
operator|++
control|)
block|{
name|double
name|leftValue
init|=
name|Double
operator|.
name|longBitsToDouble
argument_list|(
name|TestUtil
operator|.
name|nextLong
argument_list|(
name|random
argument_list|()
argument_list|,
name|Long
operator|.
name|MIN_VALUE
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
decl_stmt|;
name|NumericUtils
operator|.
name|longToSortableBytes
argument_list|(
name|NumericUtils
operator|.
name|doubleToSortableLong
argument_list|(
name|leftValue
argument_list|)
argument_list|,
name|left
operator|.
name|bytes
argument_list|,
name|left
operator|.
name|offset
argument_list|)
expr_stmt|;
name|double
name|rightValue
init|=
name|Double
operator|.
name|longBitsToDouble
argument_list|(
name|TestUtil
operator|.
name|nextLong
argument_list|(
name|random
argument_list|()
argument_list|,
name|Long
operator|.
name|MIN_VALUE
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
decl_stmt|;
name|NumericUtils
operator|.
name|longToSortableBytes
argument_list|(
name|NumericUtils
operator|.
name|doubleToSortableLong
argument_list|(
name|rightValue
argument_list|)
argument_list|,
name|right
operator|.
name|bytes
argument_list|,
name|right
operator|.
name|offset
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|signum
argument_list|(
name|Double
operator|.
name|compare
argument_list|(
name|leftValue
argument_list|,
name|rightValue
argument_list|)
argument_list|)
argument_list|,
name|Integer
operator|.
name|signum
argument_list|(
name|left
operator|.
name|compareTo
argument_list|(
name|right
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** check sort order of random bigintegers consistent with BigInteger.compareTo */
DECL|method|testBigIntsCompare
specifier|public
name|void
name|testBigIntsCompare
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10000
condition|;
name|i
operator|++
control|)
block|{
name|int
name|maxLength
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|16
argument_list|)
decl_stmt|;
name|BigInteger
name|leftValue
init|=
name|TestUtil
operator|.
name|nextBigInteger
argument_list|(
name|random
argument_list|()
argument_list|,
name|maxLength
argument_list|)
decl_stmt|;
name|BytesRef
name|left
init|=
operator|new
name|BytesRef
argument_list|(
operator|new
name|byte
index|[
name|maxLength
index|]
argument_list|)
decl_stmt|;
name|NumericUtils
operator|.
name|bigIntToSortableBytes
argument_list|(
name|leftValue
argument_list|,
name|maxLength
argument_list|,
name|left
operator|.
name|bytes
argument_list|,
name|left
operator|.
name|offset
argument_list|)
expr_stmt|;
name|BigInteger
name|rightValue
init|=
name|TestUtil
operator|.
name|nextBigInteger
argument_list|(
name|random
argument_list|()
argument_list|,
name|maxLength
argument_list|)
decl_stmt|;
name|BytesRef
name|right
init|=
operator|new
name|BytesRef
argument_list|(
operator|new
name|byte
index|[
name|maxLength
index|]
argument_list|)
decl_stmt|;
name|NumericUtils
operator|.
name|bigIntToSortableBytes
argument_list|(
name|rightValue
argument_list|,
name|maxLength
argument_list|,
name|right
operator|.
name|bytes
argument_list|,
name|right
operator|.
name|offset
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|signum
argument_list|(
name|leftValue
operator|.
name|compareTo
argument_list|(
name|rightValue
argument_list|)
argument_list|)
argument_list|,
name|Integer
operator|.
name|signum
argument_list|(
name|left
operator|.
name|compareTo
argument_list|(
name|right
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class
end_unit
