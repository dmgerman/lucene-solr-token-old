begin_unit
begin_package
DECL|package|org.apache.lucene.util.bkd
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|bkd
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigInteger
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|BitSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IOContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexInput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexOutput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|MockDirectoryWrapper
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
operator|.
name|SuppressSysoutChecks
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|RamUsageTester
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|TestUtil
import|;
end_import
begin_class
annotation|@
name|SuppressSysoutChecks
argument_list|(
name|bugUrl
operator|=
literal|"Stuff gets printed."
argument_list|)
DECL|class|TestBKD
specifier|public
class|class
name|TestBKD
extends|extends
name|LuceneTestCase
block|{
DECL|method|testBasicInts1D
specifier|public
name|void
name|testBasicInts1D
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|Directory
name|dir
init|=
name|getDirectory
argument_list|(
literal|100
argument_list|)
init|)
block|{
name|BKDWriter
name|w
init|=
operator|new
name|BKDWriter
argument_list|(
name|dir
argument_list|,
literal|"tmp"
argument_list|,
literal|1
argument_list|,
literal|4
argument_list|,
literal|2
argument_list|,
literal|1.0f
argument_list|)
decl_stmt|;
name|byte
index|[]
name|scratch
init|=
operator|new
name|byte
index|[
literal|4
index|]
decl_stmt|;
for|for
control|(
name|int
name|docID
init|=
literal|0
init|;
name|docID
operator|<
literal|100
condition|;
name|docID
operator|++
control|)
block|{
name|BKDUtil
operator|.
name|intToBytes
argument_list|(
name|docID
argument_list|,
name|scratch
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|w
operator|.
name|add
argument_list|(
name|scratch
argument_list|,
name|docID
argument_list|)
expr_stmt|;
block|}
name|long
name|indexFP
decl_stmt|;
try|try
init|(
name|IndexOutput
name|out
init|=
name|dir
operator|.
name|createOutput
argument_list|(
literal|"bkd"
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
init|)
block|{
name|indexFP
operator|=
name|w
operator|.
name|finish
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
try|try
init|(
name|IndexInput
name|in
init|=
name|dir
operator|.
name|openInput
argument_list|(
literal|"bkd"
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
init|)
block|{
name|in
operator|.
name|seek
argument_list|(
name|indexFP
argument_list|)
expr_stmt|;
name|BKDReader
name|r
init|=
operator|new
name|BKDReader
argument_list|(
name|in
argument_list|)
decl_stmt|;
comment|// Simple 1D range query:
specifier|final
name|int
name|queryMin
init|=
literal|42
decl_stmt|;
specifier|final
name|int
name|queryMax
init|=
literal|87
decl_stmt|;
specifier|final
name|BitSet
name|hits
init|=
operator|new
name|BitSet
argument_list|()
decl_stmt|;
name|r
operator|.
name|intersect
argument_list|(
operator|new
name|BKDReader
operator|.
name|IntersectVisitor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|visit
parameter_list|(
name|int
name|docID
parameter_list|)
block|{
name|hits
operator|.
name|set
argument_list|(
name|docID
argument_list|)
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"visit docID="
operator|+
name|docID
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|visit
parameter_list|(
name|int
name|docID
parameter_list|,
name|byte
index|[]
name|packedValue
parameter_list|)
block|{
name|int
name|x
init|=
name|BKDUtil
operator|.
name|bytesToInt
argument_list|(
name|packedValue
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"visit docID="
operator|+
name|docID
operator|+
literal|" x="
operator|+
name|x
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|x
operator|>=
name|queryMin
operator|&&
name|x
operator|<=
name|queryMax
condition|)
block|{
name|hits
operator|.
name|set
argument_list|(
name|docID
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|BKDReader
operator|.
name|Relation
name|compare
parameter_list|(
name|byte
index|[]
name|minPacked
parameter_list|,
name|byte
index|[]
name|maxPacked
parameter_list|)
block|{
name|int
name|min
init|=
name|BKDUtil
operator|.
name|bytesToInt
argument_list|(
name|minPacked
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|int
name|max
init|=
name|BKDUtil
operator|.
name|bytesToInt
argument_list|(
name|maxPacked
argument_list|,
literal|0
argument_list|)
decl_stmt|;
assert|assert
name|max
operator|>=
name|min
assert|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"compare: min="
operator|+
name|min
operator|+
literal|" max="
operator|+
name|max
operator|+
literal|" vs queryMin="
operator|+
name|queryMin
operator|+
literal|" queryMax="
operator|+
name|queryMax
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|max
argument_list|<
name|queryMin
operator|||
name|min
argument_list|>
name|queryMax
condition|)
block|{
return|return
name|BKDReader
operator|.
name|Relation
operator|.
name|QUERY_OUTSIDE_CELL
return|;
block|}
elseif|else
if|if
condition|(
name|min
operator|>=
name|queryMin
operator|&&
name|max
operator|<=
name|queryMax
condition|)
block|{
return|return
name|BKDReader
operator|.
name|Relation
operator|.
name|CELL_INSIDE_QUERY
return|;
block|}
else|else
block|{
return|return
name|BKDReader
operator|.
name|Relation
operator|.
name|QUERY_CROSSES_CELL
return|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|docID
init|=
literal|0
init|;
name|docID
operator|<
literal|100
condition|;
name|docID
operator|++
control|)
block|{
name|boolean
name|expected
init|=
name|docID
operator|>=
name|queryMin
operator|&&
name|docID
operator|<=
name|queryMax
decl_stmt|;
name|boolean
name|actual
init|=
name|hits
operator|.
name|get
argument_list|(
name|docID
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"docID="
operator|+
name|docID
argument_list|,
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|testRandomIntsNDims
specifier|public
name|void
name|testRandomIntsNDims
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|numDocs
init|=
name|atLeast
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
try|try
init|(
name|Directory
name|dir
init|=
name|getDirectory
argument_list|(
name|numDocs
argument_list|)
init|)
block|{
name|int
name|numDims
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|int
name|maxPointsInLeafNode
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|50
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|float
name|maxMB
init|=
operator|(
name|float
operator|)
literal|0.1
operator|+
operator|(
literal|3
operator|*
name|random
argument_list|()
operator|.
name|nextFloat
argument_list|()
operator|)
decl_stmt|;
name|BKDWriter
name|w
init|=
operator|new
name|BKDWriter
argument_list|(
name|dir
argument_list|,
literal|"tmp"
argument_list|,
name|numDims
argument_list|,
literal|4
argument_list|,
name|maxPointsInLeafNode
argument_list|,
name|maxMB
argument_list|)
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TEST: numDims="
operator|+
name|numDims
operator|+
literal|" numDocs="
operator|+
name|numDocs
argument_list|)
expr_stmt|;
block|}
name|int
index|[]
index|[]
name|docs
init|=
operator|new
name|int
index|[
name|numDocs
index|]
index|[]
decl_stmt|;
name|byte
index|[]
name|scratch
init|=
operator|new
name|byte
index|[
literal|4
operator|*
name|numDims
index|]
decl_stmt|;
for|for
control|(
name|int
name|docID
init|=
literal|0
init|;
name|docID
operator|<
name|numDocs
condition|;
name|docID
operator|++
control|)
block|{
name|int
index|[]
name|values
init|=
operator|new
name|int
index|[
name|numDims
index|]
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  docID="
operator|+
name|docID
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|dim
init|=
literal|0
init|;
name|dim
operator|<
name|numDims
condition|;
name|dim
operator|++
control|)
block|{
name|values
index|[
name|dim
index|]
operator|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|()
expr_stmt|;
name|BKDUtil
operator|.
name|intToBytes
argument_list|(
name|values
index|[
name|dim
index|]
argument_list|,
name|scratch
argument_list|,
name|dim
argument_list|)
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"    "
operator|+
name|dim
operator|+
literal|" -> "
operator|+
name|values
index|[
name|dim
index|]
argument_list|)
expr_stmt|;
block|}
block|}
name|docs
index|[
name|docID
index|]
operator|=
name|values
expr_stmt|;
name|w
operator|.
name|add
argument_list|(
name|scratch
argument_list|,
name|docID
argument_list|)
expr_stmt|;
block|}
name|long
name|indexFP
decl_stmt|;
try|try
init|(
name|IndexOutput
name|out
init|=
name|dir
operator|.
name|createOutput
argument_list|(
literal|"bkd"
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
init|)
block|{
name|indexFP
operator|=
name|w
operator|.
name|finish
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
try|try
init|(
name|IndexInput
name|in
init|=
name|dir
operator|.
name|openInput
argument_list|(
literal|"bkd"
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
init|)
block|{
name|in
operator|.
name|seek
argument_list|(
name|indexFP
argument_list|)
expr_stmt|;
name|BKDReader
name|r
init|=
operator|new
name|BKDReader
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|int
name|iters
init|=
name|atLeast
argument_list|(
literal|100
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|iter
init|=
literal|0
init|;
name|iter
operator|<
name|iters
condition|;
name|iter
operator|++
control|)
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\nTEST: iter="
operator|+
name|iter
argument_list|)
expr_stmt|;
block|}
comment|// Random N dims rect query:
name|int
index|[]
name|queryMin
init|=
operator|new
name|int
index|[
name|numDims
index|]
decl_stmt|;
name|int
index|[]
name|queryMax
init|=
operator|new
name|int
index|[
name|numDims
index|]
decl_stmt|;
for|for
control|(
name|int
name|dim
init|=
literal|0
init|;
name|dim
operator|<
name|numDims
condition|;
name|dim
operator|++
control|)
block|{
name|queryMin
index|[
name|dim
index|]
operator|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|()
expr_stmt|;
name|queryMax
index|[
name|dim
index|]
operator|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|()
expr_stmt|;
if|if
condition|(
name|queryMin
index|[
name|dim
index|]
operator|>
name|queryMax
index|[
name|dim
index|]
condition|)
block|{
name|int
name|x
init|=
name|queryMin
index|[
name|dim
index|]
decl_stmt|;
name|queryMin
index|[
name|dim
index|]
operator|=
name|queryMax
index|[
name|dim
index|]
expr_stmt|;
name|queryMax
index|[
name|dim
index|]
operator|=
name|x
expr_stmt|;
block|}
block|}
specifier|final
name|BitSet
name|hits
init|=
operator|new
name|BitSet
argument_list|()
decl_stmt|;
name|r
operator|.
name|intersect
argument_list|(
operator|new
name|BKDReader
operator|.
name|IntersectVisitor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|visit
parameter_list|(
name|int
name|docID
parameter_list|)
block|{
name|hits
operator|.
name|set
argument_list|(
name|docID
argument_list|)
expr_stmt|;
comment|//System.out.println("visit docID=" + docID);
block|}
annotation|@
name|Override
specifier|public
name|void
name|visit
parameter_list|(
name|int
name|docID
parameter_list|,
name|byte
index|[]
name|packedValue
parameter_list|)
block|{
comment|//System.out.println("visit check docID=" + docID);
for|for
control|(
name|int
name|dim
init|=
literal|0
init|;
name|dim
operator|<
name|numDims
condition|;
name|dim
operator|++
control|)
block|{
name|int
name|x
init|=
name|BKDUtil
operator|.
name|bytesToInt
argument_list|(
name|packedValue
argument_list|,
name|dim
argument_list|)
decl_stmt|;
if|if
condition|(
name|x
argument_list|<
name|queryMin
index|[
name|dim
index|]
operator|||
name|x
argument_list|>
name|queryMax
index|[
name|dim
index|]
condition|)
block|{
comment|//System.out.println("  no");
return|return;
block|}
block|}
comment|//System.out.println("  yes");
name|hits
operator|.
name|set
argument_list|(
name|docID
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|BKDReader
operator|.
name|Relation
name|compare
parameter_list|(
name|byte
index|[]
name|minPacked
parameter_list|,
name|byte
index|[]
name|maxPacked
parameter_list|)
block|{
name|boolean
name|crosses
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|dim
init|=
literal|0
init|;
name|dim
operator|<
name|numDims
condition|;
name|dim
operator|++
control|)
block|{
name|int
name|min
init|=
name|BKDUtil
operator|.
name|bytesToInt
argument_list|(
name|minPacked
argument_list|,
name|dim
argument_list|)
decl_stmt|;
name|int
name|max
init|=
name|BKDUtil
operator|.
name|bytesToInt
argument_list|(
name|maxPacked
argument_list|,
name|dim
argument_list|)
decl_stmt|;
assert|assert
name|max
operator|>=
name|min
assert|;
if|if
condition|(
name|max
argument_list|<
name|queryMin
index|[
name|dim
index|]
operator|||
name|min
argument_list|>
name|queryMax
index|[
name|dim
index|]
condition|)
block|{
return|return
name|BKDReader
operator|.
name|Relation
operator|.
name|QUERY_OUTSIDE_CELL
return|;
block|}
elseif|else
if|if
condition|(
name|min
argument_list|<
name|queryMin
index|[
name|dim
index|]
operator|||
name|max
argument_list|>
name|queryMax
index|[
name|dim
index|]
condition|)
block|{
name|crosses
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|crosses
condition|)
block|{
return|return
name|BKDReader
operator|.
name|Relation
operator|.
name|QUERY_CROSSES_CELL
return|;
block|}
else|else
block|{
return|return
name|BKDReader
operator|.
name|Relation
operator|.
name|CELL_INSIDE_QUERY
return|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|docID
init|=
literal|0
init|;
name|docID
operator|<
name|numDocs
condition|;
name|docID
operator|++
control|)
block|{
name|int
index|[]
name|docValues
init|=
name|docs
index|[
name|docID
index|]
decl_stmt|;
name|boolean
name|expected
init|=
literal|true
decl_stmt|;
for|for
control|(
name|int
name|dim
init|=
literal|0
init|;
name|dim
operator|<
name|numDims
condition|;
name|dim
operator|++
control|)
block|{
name|int
name|x
init|=
name|docValues
index|[
name|dim
index|]
decl_stmt|;
if|if
condition|(
name|x
argument_list|<
name|queryMin
index|[
name|dim
index|]
operator|||
name|x
argument_list|>
name|queryMax
index|[
name|dim
index|]
condition|)
block|{
name|expected
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
name|boolean
name|actual
init|=
name|hits
operator|.
name|get
argument_list|(
name|docID
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"docID="
operator|+
name|docID
argument_list|,
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
comment|// Tests on N-dimensional points where each dimension is a BigInteger
DECL|method|testBigIntNDims
specifier|public
name|void
name|testBigIntNDims
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|numDocs
init|=
name|atLeast
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
try|try
init|(
name|Directory
name|dir
init|=
name|getDirectory
argument_list|(
name|numDocs
argument_list|)
init|)
block|{
name|int
name|numBytesPerDim
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|2
argument_list|,
literal|30
argument_list|)
decl_stmt|;
name|int
name|numDims
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|int
name|maxPointsInLeafNode
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|50
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|float
name|maxMB
init|=
operator|(
name|float
operator|)
literal|0.1
operator|+
operator|(
literal|3
operator|*
name|random
argument_list|()
operator|.
name|nextFloat
argument_list|()
operator|)
decl_stmt|;
name|BKDWriter
name|w
init|=
operator|new
name|BKDWriter
argument_list|(
name|dir
argument_list|,
literal|"tmp"
argument_list|,
name|numDims
argument_list|,
name|numBytesPerDim
argument_list|,
name|maxPointsInLeafNode
argument_list|,
name|maxMB
argument_list|)
decl_stmt|;
name|BigInteger
index|[]
index|[]
name|docs
init|=
operator|new
name|BigInteger
index|[
name|numDocs
index|]
index|[]
decl_stmt|;
name|byte
index|[]
name|scratch
init|=
operator|new
name|byte
index|[
name|numBytesPerDim
operator|*
name|numDims
index|]
decl_stmt|;
for|for
control|(
name|int
name|docID
init|=
literal|0
init|;
name|docID
operator|<
name|numDocs
condition|;
name|docID
operator|++
control|)
block|{
name|BigInteger
index|[]
name|values
init|=
operator|new
name|BigInteger
index|[
name|numDims
index|]
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  docID="
operator|+
name|docID
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|dim
init|=
literal|0
init|;
name|dim
operator|<
name|numDims
condition|;
name|dim
operator|++
control|)
block|{
name|values
index|[
name|dim
index|]
operator|=
name|randomBigInt
argument_list|(
name|numBytesPerDim
argument_list|)
expr_stmt|;
name|BKDUtil
operator|.
name|bigIntToBytes
argument_list|(
name|values
index|[
name|dim
index|]
argument_list|,
name|scratch
argument_list|,
name|dim
argument_list|,
name|numBytesPerDim
argument_list|)
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"    "
operator|+
name|dim
operator|+
literal|" -> "
operator|+
name|values
index|[
name|dim
index|]
argument_list|)
expr_stmt|;
block|}
block|}
name|docs
index|[
name|docID
index|]
operator|=
name|values
expr_stmt|;
name|w
operator|.
name|add
argument_list|(
name|scratch
argument_list|,
name|docID
argument_list|)
expr_stmt|;
block|}
name|long
name|indexFP
decl_stmt|;
try|try
init|(
name|IndexOutput
name|out
init|=
name|dir
operator|.
name|createOutput
argument_list|(
literal|"bkd"
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
init|)
block|{
name|indexFP
operator|=
name|w
operator|.
name|finish
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
try|try
init|(
name|IndexInput
name|in
init|=
name|dir
operator|.
name|openInput
argument_list|(
literal|"bkd"
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
init|)
block|{
name|in
operator|.
name|seek
argument_list|(
name|indexFP
argument_list|)
expr_stmt|;
name|BKDReader
name|r
init|=
operator|new
name|BKDReader
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|int
name|iters
init|=
name|atLeast
argument_list|(
literal|100
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|iter
init|=
literal|0
init|;
name|iter
operator|<
name|iters
condition|;
name|iter
operator|++
control|)
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\nTEST: iter="
operator|+
name|iter
argument_list|)
expr_stmt|;
block|}
comment|// Random N dims rect query:
name|BigInteger
index|[]
name|queryMin
init|=
operator|new
name|BigInteger
index|[
name|numDims
index|]
decl_stmt|;
name|BigInteger
index|[]
name|queryMax
init|=
operator|new
name|BigInteger
index|[
name|numDims
index|]
decl_stmt|;
for|for
control|(
name|int
name|dim
init|=
literal|0
init|;
name|dim
operator|<
name|numDims
condition|;
name|dim
operator|++
control|)
block|{
name|queryMin
index|[
name|dim
index|]
operator|=
name|randomBigInt
argument_list|(
name|numBytesPerDim
argument_list|)
expr_stmt|;
name|queryMax
index|[
name|dim
index|]
operator|=
name|randomBigInt
argument_list|(
name|numBytesPerDim
argument_list|)
expr_stmt|;
if|if
condition|(
name|queryMin
index|[
name|dim
index|]
operator|.
name|compareTo
argument_list|(
name|queryMax
index|[
name|dim
index|]
argument_list|)
operator|>
literal|0
condition|)
block|{
name|BigInteger
name|x
init|=
name|queryMin
index|[
name|dim
index|]
decl_stmt|;
name|queryMin
index|[
name|dim
index|]
operator|=
name|queryMax
index|[
name|dim
index|]
expr_stmt|;
name|queryMax
index|[
name|dim
index|]
operator|=
name|x
expr_stmt|;
block|}
block|}
specifier|final
name|BitSet
name|hits
init|=
operator|new
name|BitSet
argument_list|()
decl_stmt|;
name|r
operator|.
name|intersect
argument_list|(
operator|new
name|BKDReader
operator|.
name|IntersectVisitor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|visit
parameter_list|(
name|int
name|docID
parameter_list|)
block|{
name|hits
operator|.
name|set
argument_list|(
name|docID
argument_list|)
expr_stmt|;
comment|//System.out.println("visit docID=" + docID);
block|}
annotation|@
name|Override
specifier|public
name|void
name|visit
parameter_list|(
name|int
name|docID
parameter_list|,
name|byte
index|[]
name|packedValue
parameter_list|)
block|{
comment|//System.out.println("visit check docID=" + docID);
for|for
control|(
name|int
name|dim
init|=
literal|0
init|;
name|dim
operator|<
name|numDims
condition|;
name|dim
operator|++
control|)
block|{
name|BigInteger
name|x
init|=
name|BKDUtil
operator|.
name|bytesToBigInt
argument_list|(
name|packedValue
argument_list|,
name|dim
argument_list|,
name|numBytesPerDim
argument_list|)
decl_stmt|;
if|if
condition|(
name|x
operator|.
name|compareTo
argument_list|(
name|queryMin
index|[
name|dim
index|]
argument_list|)
operator|<
literal|0
operator|||
name|x
operator|.
name|compareTo
argument_list|(
name|queryMax
index|[
name|dim
index|]
argument_list|)
operator|>
literal|0
condition|)
block|{
comment|//System.out.println("  no");
return|return;
block|}
block|}
comment|//System.out.println("  yes");
name|hits
operator|.
name|set
argument_list|(
name|docID
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|BKDReader
operator|.
name|Relation
name|compare
parameter_list|(
name|byte
index|[]
name|minPacked
parameter_list|,
name|byte
index|[]
name|maxPacked
parameter_list|)
block|{
name|boolean
name|crosses
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|dim
init|=
literal|0
init|;
name|dim
operator|<
name|numDims
condition|;
name|dim
operator|++
control|)
block|{
name|BigInteger
name|min
init|=
name|BKDUtil
operator|.
name|bytesToBigInt
argument_list|(
name|minPacked
argument_list|,
name|dim
argument_list|,
name|numBytesPerDim
argument_list|)
decl_stmt|;
name|BigInteger
name|max
init|=
name|BKDUtil
operator|.
name|bytesToBigInt
argument_list|(
name|maxPacked
argument_list|,
name|dim
argument_list|,
name|numBytesPerDim
argument_list|)
decl_stmt|;
assert|assert
name|max
operator|.
name|compareTo
argument_list|(
name|min
argument_list|)
operator|>=
literal|0
assert|;
if|if
condition|(
name|max
operator|.
name|compareTo
argument_list|(
name|queryMin
index|[
name|dim
index|]
argument_list|)
operator|<
literal|0
operator|||
name|min
operator|.
name|compareTo
argument_list|(
name|queryMax
index|[
name|dim
index|]
argument_list|)
operator|>
literal|0
condition|)
block|{
return|return
name|BKDReader
operator|.
name|Relation
operator|.
name|QUERY_OUTSIDE_CELL
return|;
block|}
elseif|else
if|if
condition|(
name|min
operator|.
name|compareTo
argument_list|(
name|queryMin
index|[
name|dim
index|]
argument_list|)
operator|<
literal|0
operator|||
name|max
operator|.
name|compareTo
argument_list|(
name|queryMax
index|[
name|dim
index|]
argument_list|)
operator|>
literal|0
condition|)
block|{
name|crosses
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|crosses
condition|)
block|{
return|return
name|BKDReader
operator|.
name|Relation
operator|.
name|QUERY_CROSSES_CELL
return|;
block|}
else|else
block|{
return|return
name|BKDReader
operator|.
name|Relation
operator|.
name|CELL_INSIDE_QUERY
return|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|docID
init|=
literal|0
init|;
name|docID
operator|<
name|numDocs
condition|;
name|docID
operator|++
control|)
block|{
name|BigInteger
index|[]
name|docValues
init|=
name|docs
index|[
name|docID
index|]
decl_stmt|;
name|boolean
name|expected
init|=
literal|true
decl_stmt|;
for|for
control|(
name|int
name|dim
init|=
literal|0
init|;
name|dim
operator|<
name|numDims
condition|;
name|dim
operator|++
control|)
block|{
name|BigInteger
name|x
init|=
name|docValues
index|[
name|dim
index|]
decl_stmt|;
if|if
condition|(
name|x
operator|.
name|compareTo
argument_list|(
name|queryMin
index|[
name|dim
index|]
argument_list|)
operator|<
literal|0
operator|||
name|x
operator|.
name|compareTo
argument_list|(
name|queryMax
index|[
name|dim
index|]
argument_list|)
operator|>
literal|0
condition|)
block|{
name|expected
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
name|boolean
name|actual
init|=
name|hits
operator|.
name|get
argument_list|(
name|docID
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"docID="
operator|+
name|docID
argument_list|,
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
comment|/** Make sure we close open files, delete temp files, etc., on exception */
DECL|method|testWithExceptions
specifier|public
name|void
name|testWithExceptions
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|numDocs
init|=
name|atLeast
argument_list|(
literal|10000
argument_list|)
decl_stmt|;
name|int
name|numBytesPerDim
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|2
argument_list|,
literal|30
argument_list|)
decl_stmt|;
name|int
name|numDims
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
index|[]
name|docValues
init|=
operator|new
name|byte
index|[
name|numDocs
index|]
index|[]
index|[]
decl_stmt|;
for|for
control|(
name|int
name|docID
init|=
literal|0
init|;
name|docID
operator|<
name|numDocs
condition|;
name|docID
operator|++
control|)
block|{
name|byte
index|[]
index|[]
name|values
init|=
operator|new
name|byte
index|[
name|numDims
index|]
index|[]
decl_stmt|;
for|for
control|(
name|int
name|dim
init|=
literal|0
init|;
name|dim
operator|<
name|numDims
condition|;
name|dim
operator|++
control|)
block|{
name|values
index|[
name|dim
index|]
operator|=
operator|new
name|byte
index|[
name|numBytesPerDim
index|]
expr_stmt|;
name|random
argument_list|()
operator|.
name|nextBytes
argument_list|(
name|values
index|[
name|dim
index|]
argument_list|)
expr_stmt|;
block|}
name|docValues
index|[
name|docID
index|]
operator|=
name|values
expr_stmt|;
block|}
name|double
name|maxMBHeap
init|=
literal|0.05
decl_stmt|;
comment|// Keep retrying until we 1) we allow a big enough heap, and 2) we hit a random IOExc from MDW:
name|boolean
name|done
init|=
literal|false
decl_stmt|;
while|while
condition|(
name|done
operator|==
literal|false
condition|)
block|{
try|try
init|(
name|MockDirectoryWrapper
name|dir
init|=
name|newMockFSDirectory
argument_list|(
name|createTempDir
argument_list|()
argument_list|)
init|)
block|{
try|try
block|{
name|dir
operator|.
name|setRandomIOExceptionRate
argument_list|(
literal|0.05
argument_list|)
expr_stmt|;
name|dir
operator|.
name|setRandomIOExceptionRateOnOpen
argument_list|(
literal|0.05
argument_list|)
expr_stmt|;
if|if
condition|(
name|dir
operator|instanceof
name|MockDirectoryWrapper
condition|)
block|{
name|dir
operator|.
name|setEnableVirusScanner
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|verify
argument_list|(
name|dir
argument_list|,
name|docValues
argument_list|,
literal|null
argument_list|,
name|numDims
argument_list|,
name|numBytesPerDim
argument_list|,
literal|50
argument_list|,
name|maxMBHeap
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|iae
parameter_list|)
block|{
comment|// This just means we got a too-small maxMB for the maxPointsInLeafNode; just retry w/ more heap
name|assertTrue
argument_list|(
name|iae
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"either increase maxMBSortInHeap or decrease maxPointsInLeafNode"
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  more heap"
argument_list|)
expr_stmt|;
name|maxMBHeap
operator|*=
literal|1.25
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
if|if
condition|(
name|ioe
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"a random IOException"
argument_list|)
condition|)
block|{
comment|// BKDWriter should fully clean up after itself:
name|done
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ioe
throw|;
block|}
block|}
name|String
index|[]
name|files
init|=
name|dir
operator|.
name|listAll
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"files="
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|files
argument_list|)
argument_list|,
name|files
operator|.
name|length
operator|==
literal|0
operator|||
name|Arrays
operator|.
name|equals
argument_list|(
name|files
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"extra0"
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testRandomBinaryTiny
specifier|public
name|void
name|testRandomBinaryTiny
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestRandomBinary
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
DECL|method|testRandomBinarydMedium
specifier|public
name|void
name|testRandomBinarydMedium
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestRandomBinary
argument_list|(
literal|10000
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Nightly
DECL|method|testRandomBinaryBig
specifier|public
name|void
name|testRandomBinaryBig
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestRandomBinary
argument_list|(
literal|200000
argument_list|)
expr_stmt|;
block|}
DECL|method|testTooLittleHeap
specifier|public
name|void
name|testTooLittleHeap
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|Directory
name|dir
init|=
name|getDirectory
argument_list|(
literal|0
argument_list|)
init|)
block|{
operator|new
name|BKDWriter
argument_list|(
name|dir
argument_list|,
literal|"bkd"
argument_list|,
literal|1
argument_list|,
literal|16
argument_list|,
literal|1000000
argument_list|,
literal|0.001
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"did not hit exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|iae
parameter_list|)
block|{
comment|// expected
name|assertTrue
argument_list|(
name|iae
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"either increase maxMBSortInHeap or decrease maxPointsInLeafNode"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|doTestRandomBinary
specifier|private
name|void
name|doTestRandomBinary
parameter_list|(
name|int
name|count
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|numDocs
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
name|count
argument_list|,
name|count
operator|*
literal|2
argument_list|)
decl_stmt|;
name|int
name|numBytesPerDim
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|2
argument_list|,
literal|30
argument_list|)
decl_stmt|;
name|int
name|numDims
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
index|[]
name|docValues
init|=
operator|new
name|byte
index|[
name|numDocs
index|]
index|[]
index|[]
decl_stmt|;
for|for
control|(
name|int
name|docID
init|=
literal|0
init|;
name|docID
operator|<
name|numDocs
condition|;
name|docID
operator|++
control|)
block|{
name|byte
index|[]
index|[]
name|values
init|=
operator|new
name|byte
index|[
name|numDims
index|]
index|[]
decl_stmt|;
for|for
control|(
name|int
name|dim
init|=
literal|0
init|;
name|dim
operator|<
name|numDims
condition|;
name|dim
operator|++
control|)
block|{
name|values
index|[
name|dim
index|]
operator|=
operator|new
name|byte
index|[
name|numBytesPerDim
index|]
expr_stmt|;
name|random
argument_list|()
operator|.
name|nextBytes
argument_list|(
name|values
index|[
name|dim
index|]
argument_list|)
expr_stmt|;
block|}
name|docValues
index|[
name|docID
index|]
operator|=
name|values
expr_stmt|;
block|}
name|verify
argument_list|(
name|docValues
argument_list|,
literal|null
argument_list|,
name|numDims
argument_list|,
name|numBytesPerDim
argument_list|)
expr_stmt|;
block|}
DECL|method|testAllEqual
specifier|public
name|void
name|testAllEqual
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|numBytesPerDim
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|2
argument_list|,
literal|30
argument_list|)
decl_stmt|;
name|int
name|numDims
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|int
name|numDocs
init|=
name|atLeast
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
index|[]
name|docValues
init|=
operator|new
name|byte
index|[
name|numDocs
index|]
index|[]
index|[]
decl_stmt|;
for|for
control|(
name|int
name|docID
init|=
literal|0
init|;
name|docID
operator|<
name|numDocs
condition|;
name|docID
operator|++
control|)
block|{
if|if
condition|(
name|docID
operator|==
literal|0
condition|)
block|{
name|byte
index|[]
index|[]
name|values
init|=
operator|new
name|byte
index|[
name|numDims
index|]
index|[]
decl_stmt|;
for|for
control|(
name|int
name|dim
init|=
literal|0
init|;
name|dim
operator|<
name|numDims
condition|;
name|dim
operator|++
control|)
block|{
name|values
index|[
name|dim
index|]
operator|=
operator|new
name|byte
index|[
name|numBytesPerDim
index|]
expr_stmt|;
name|random
argument_list|()
operator|.
name|nextBytes
argument_list|(
name|values
index|[
name|dim
index|]
argument_list|)
expr_stmt|;
block|}
name|docValues
index|[
name|docID
index|]
operator|=
name|values
expr_stmt|;
block|}
else|else
block|{
name|docValues
index|[
name|docID
index|]
operator|=
name|docValues
index|[
literal|0
index|]
expr_stmt|;
block|}
block|}
name|verify
argument_list|(
name|docValues
argument_list|,
literal|null
argument_list|,
name|numDims
argument_list|,
name|numBytesPerDim
argument_list|)
expr_stmt|;
block|}
DECL|method|testOneDimEqual
specifier|public
name|void
name|testOneDimEqual
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|numBytesPerDim
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|2
argument_list|,
literal|30
argument_list|)
decl_stmt|;
name|int
name|numDims
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|int
name|numDocs
init|=
name|atLeast
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
name|int
name|theEqualDim
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|numDims
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
index|[]
name|docValues
init|=
operator|new
name|byte
index|[
name|numDocs
index|]
index|[]
index|[]
decl_stmt|;
for|for
control|(
name|int
name|docID
init|=
literal|0
init|;
name|docID
operator|<
name|numDocs
condition|;
name|docID
operator|++
control|)
block|{
name|byte
index|[]
index|[]
name|values
init|=
operator|new
name|byte
index|[
name|numDims
index|]
index|[]
decl_stmt|;
for|for
control|(
name|int
name|dim
init|=
literal|0
init|;
name|dim
operator|<
name|numDims
condition|;
name|dim
operator|++
control|)
block|{
name|values
index|[
name|dim
index|]
operator|=
operator|new
name|byte
index|[
name|numBytesPerDim
index|]
expr_stmt|;
name|random
argument_list|()
operator|.
name|nextBytes
argument_list|(
name|values
index|[
name|dim
index|]
argument_list|)
expr_stmt|;
block|}
name|docValues
index|[
name|docID
index|]
operator|=
name|values
expr_stmt|;
if|if
condition|(
name|docID
operator|>
literal|0
condition|)
block|{
name|docValues
index|[
name|docID
index|]
index|[
name|theEqualDim
index|]
operator|=
name|docValues
index|[
literal|0
index|]
index|[
name|theEqualDim
index|]
expr_stmt|;
block|}
block|}
name|verify
argument_list|(
name|docValues
argument_list|,
literal|null
argument_list|,
name|numDims
argument_list|,
name|numBytesPerDim
argument_list|)
expr_stmt|;
block|}
DECL|method|testMultiValued
specifier|public
name|void
name|testMultiValued
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|numBytesPerDim
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|2
argument_list|,
literal|30
argument_list|)
decl_stmt|;
name|int
name|numDims
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|int
name|numDocs
init|=
name|atLeast
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|byte
index|[]
index|[]
argument_list|>
name|docValues
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|docIDs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|docID
init|=
literal|0
init|;
name|docID
operator|<
name|numDocs
condition|;
name|docID
operator|++
control|)
block|{
name|int
name|numValuesInDoc
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|5
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|ord
init|=
literal|0
init|;
name|ord
operator|<
name|numValuesInDoc
condition|;
name|ord
operator|++
control|)
block|{
name|docIDs
operator|.
name|add
argument_list|(
name|docID
argument_list|)
expr_stmt|;
name|byte
index|[]
index|[]
name|values
init|=
operator|new
name|byte
index|[
name|numDims
index|]
index|[]
decl_stmt|;
for|for
control|(
name|int
name|dim
init|=
literal|0
init|;
name|dim
operator|<
name|numDims
condition|;
name|dim
operator|++
control|)
block|{
name|values
index|[
name|dim
index|]
operator|=
operator|new
name|byte
index|[
name|numBytesPerDim
index|]
expr_stmt|;
name|random
argument_list|()
operator|.
name|nextBytes
argument_list|(
name|values
index|[
name|dim
index|]
argument_list|)
expr_stmt|;
block|}
name|docValues
operator|.
name|add
argument_list|(
name|values
argument_list|)
expr_stmt|;
block|}
block|}
name|byte
index|[]
index|[]
index|[]
name|docValuesArray
init|=
name|docValues
operator|.
name|toArray
argument_list|(
operator|new
name|byte
index|[
name|docValues
operator|.
name|size
argument_list|()
index|]
index|[]
index|[]
argument_list|)
decl_stmt|;
name|int
index|[]
name|docIDsArray
init|=
operator|new
name|int
index|[
name|docIDs
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|docIDsArray
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|docIDsArray
index|[
name|i
index|]
operator|=
name|docIDs
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
name|verify
argument_list|(
name|docValuesArray
argument_list|,
name|docIDsArray
argument_list|,
name|numDims
argument_list|,
name|numBytesPerDim
argument_list|)
expr_stmt|;
block|}
comment|/** docIDs can be null, for the single valued case, else it maps value to docID */
DECL|method|verify
specifier|private
name|void
name|verify
parameter_list|(
name|byte
index|[]
index|[]
index|[]
name|docValues
parameter_list|,
name|int
index|[]
name|docIDs
parameter_list|,
name|int
name|numDims
parameter_list|,
name|int
name|numBytesPerDim
parameter_list|)
throws|throws
name|Exception
block|{
try|try
init|(
name|Directory
name|dir
init|=
name|getDirectory
argument_list|(
name|docValues
operator|.
name|length
argument_list|)
init|)
block|{
while|while
condition|(
literal|true
condition|)
block|{
name|int
name|maxPointsInLeafNode
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|50
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|double
name|maxMB
init|=
operator|(
name|float
operator|)
literal|0.1
operator|+
operator|(
literal|3
operator|*
name|random
argument_list|()
operator|.
name|nextDouble
argument_list|()
operator|)
decl_stmt|;
try|try
block|{
name|verify
argument_list|(
name|dir
argument_list|,
name|docValues
argument_list|,
name|docIDs
argument_list|,
name|numDims
argument_list|,
name|numBytesPerDim
argument_list|,
name|maxPointsInLeafNode
argument_list|,
name|maxMB
argument_list|)
expr_stmt|;
return|return;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|iae
parameter_list|)
block|{
comment|// This just means we got a too-small maxMB for the maxPointsInLeafNode; just retry
name|assertTrue
argument_list|(
name|iae
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"either increase maxMBSortInHeap or decrease maxPointsInLeafNode"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|verify
specifier|private
name|void
name|verify
parameter_list|(
name|Directory
name|dir
parameter_list|,
name|byte
index|[]
index|[]
index|[]
name|docValues
parameter_list|,
name|int
index|[]
name|docIDs
parameter_list|,
name|int
name|numDims
parameter_list|,
name|int
name|numBytesPerDim
parameter_list|,
name|int
name|maxPointsInLeafNode
parameter_list|,
name|double
name|maxMB
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|numValues
init|=
name|docValues
operator|.
name|length
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TEST: numValues="
operator|+
name|numValues
operator|+
literal|" numDims="
operator|+
name|numDims
operator|+
literal|" numBytesPerDim="
operator|+
name|numBytesPerDim
operator|+
literal|" maxPointsInLeafNode="
operator|+
name|maxPointsInLeafNode
operator|+
literal|" maxMB="
operator|+
name|maxMB
argument_list|)
expr_stmt|;
block|}
name|long
name|indexFP
decl_stmt|;
try|try
init|(
name|BKDWriter
name|w
init|=
operator|new
name|BKDWriter
argument_list|(
name|dir
argument_list|,
literal|"tmp"
argument_list|,
name|numDims
argument_list|,
name|numBytesPerDim
argument_list|,
name|maxPointsInLeafNode
argument_list|,
name|maxMB
argument_list|)
init|)
block|{
name|byte
index|[]
name|scratch
init|=
operator|new
name|byte
index|[
name|numBytesPerDim
operator|*
name|numDims
index|]
decl_stmt|;
for|for
control|(
name|int
name|ord
init|=
literal|0
init|;
name|ord
operator|<
name|numValues
condition|;
name|ord
operator|++
control|)
block|{
name|int
name|docID
decl_stmt|;
if|if
condition|(
name|docIDs
operator|==
literal|null
condition|)
block|{
name|docID
operator|=
name|ord
expr_stmt|;
block|}
else|else
block|{
name|docID
operator|=
name|docIDs
index|[
name|ord
index|]
expr_stmt|;
block|}
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  ord="
operator|+
name|ord
operator|+
literal|" docID="
operator|+
name|docID
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|dim
init|=
literal|0
init|;
name|dim
operator|<
name|numDims
condition|;
name|dim
operator|++
control|)
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"    "
operator|+
name|dim
operator|+
literal|" -> "
operator|+
operator|new
name|BytesRef
argument_list|(
name|docValues
index|[
name|ord
index|]
index|[
name|dim
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|arraycopy
argument_list|(
name|docValues
index|[
name|ord
index|]
index|[
name|dim
index|]
argument_list|,
literal|0
argument_list|,
name|scratch
argument_list|,
name|dim
operator|*
name|numBytesPerDim
argument_list|,
name|numBytesPerDim
argument_list|)
expr_stmt|;
block|}
name|w
operator|.
name|add
argument_list|(
name|scratch
argument_list|,
name|docID
argument_list|)
expr_stmt|;
block|}
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
init|(
name|IndexOutput
name|out
init|=
name|dir
operator|.
name|createOutput
argument_list|(
literal|"bkd"
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
init|)
block|{
name|indexFP
operator|=
name|w
operator|.
name|finish
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|success
operator|==
literal|false
condition|)
block|{
name|IOUtils
operator|.
name|deleteFilesIgnoringExceptions
argument_list|(
name|dir
argument_list|,
literal|"bkd"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
try|try
init|(
name|IndexInput
name|in
init|=
name|dir
operator|.
name|openInput
argument_list|(
literal|"bkd"
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
init|)
block|{
name|in
operator|.
name|seek
argument_list|(
name|indexFP
argument_list|)
expr_stmt|;
name|BKDReader
name|r
init|=
operator|new
name|BKDReader
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|int
name|iters
init|=
name|atLeast
argument_list|(
literal|100
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|iter
init|=
literal|0
init|;
name|iter
operator|<
name|iters
condition|;
name|iter
operator|++
control|)
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\nTEST: iter="
operator|+
name|iter
argument_list|)
expr_stmt|;
block|}
comment|// Random N dims rect query:
name|byte
index|[]
index|[]
name|queryMin
init|=
operator|new
name|byte
index|[
name|numDims
index|]
index|[]
decl_stmt|;
name|byte
index|[]
index|[]
name|queryMax
init|=
operator|new
name|byte
index|[
name|numDims
index|]
index|[]
decl_stmt|;
for|for
control|(
name|int
name|dim
init|=
literal|0
init|;
name|dim
operator|<
name|numDims
condition|;
name|dim
operator|++
control|)
block|{
name|queryMin
index|[
name|dim
index|]
operator|=
operator|new
name|byte
index|[
name|numBytesPerDim
index|]
expr_stmt|;
name|random
argument_list|()
operator|.
name|nextBytes
argument_list|(
name|queryMin
index|[
name|dim
index|]
argument_list|)
expr_stmt|;
name|queryMax
index|[
name|dim
index|]
operator|=
operator|new
name|byte
index|[
name|numBytesPerDim
index|]
expr_stmt|;
name|random
argument_list|()
operator|.
name|nextBytes
argument_list|(
name|queryMax
index|[
name|dim
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|BKDUtil
operator|.
name|compare
argument_list|(
name|numBytesPerDim
argument_list|,
name|queryMin
index|[
name|dim
index|]
argument_list|,
literal|0
argument_list|,
name|queryMax
index|[
name|dim
index|]
argument_list|,
literal|0
argument_list|)
operator|>
literal|0
condition|)
block|{
name|byte
index|[]
name|x
init|=
name|queryMin
index|[
name|dim
index|]
decl_stmt|;
name|queryMin
index|[
name|dim
index|]
operator|=
name|queryMax
index|[
name|dim
index|]
expr_stmt|;
name|queryMax
index|[
name|dim
index|]
operator|=
name|x
expr_stmt|;
block|}
block|}
specifier|final
name|BitSet
name|hits
init|=
operator|new
name|BitSet
argument_list|()
decl_stmt|;
name|r
operator|.
name|intersect
argument_list|(
operator|new
name|BKDReader
operator|.
name|IntersectVisitor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|visit
parameter_list|(
name|int
name|docID
parameter_list|)
block|{
name|hits
operator|.
name|set
argument_list|(
name|docID
argument_list|)
expr_stmt|;
comment|//System.out.println("visit docID=" + docID);
block|}
annotation|@
name|Override
specifier|public
name|void
name|visit
parameter_list|(
name|int
name|docID
parameter_list|,
name|byte
index|[]
name|packedValue
parameter_list|)
block|{
comment|//System.out.println("visit check docID=" + docID);
for|for
control|(
name|int
name|dim
init|=
literal|0
init|;
name|dim
operator|<
name|numDims
condition|;
name|dim
operator|++
control|)
block|{
if|if
condition|(
name|BKDUtil
operator|.
name|compare
argument_list|(
name|numBytesPerDim
argument_list|,
name|packedValue
argument_list|,
name|dim
argument_list|,
name|queryMin
index|[
name|dim
index|]
argument_list|,
literal|0
argument_list|)
operator|<
literal|0
operator|||
name|BKDUtil
operator|.
name|compare
argument_list|(
name|numBytesPerDim
argument_list|,
name|packedValue
argument_list|,
name|dim
argument_list|,
name|queryMax
index|[
name|dim
index|]
argument_list|,
literal|0
argument_list|)
operator|>
literal|0
condition|)
block|{
comment|//System.out.println("  no");
return|return;
block|}
block|}
comment|//System.out.println("  yes");
name|hits
operator|.
name|set
argument_list|(
name|docID
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|BKDReader
operator|.
name|Relation
name|compare
parameter_list|(
name|byte
index|[]
name|minPacked
parameter_list|,
name|byte
index|[]
name|maxPacked
parameter_list|)
block|{
name|boolean
name|crosses
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|dim
init|=
literal|0
init|;
name|dim
operator|<
name|numDims
condition|;
name|dim
operator|++
control|)
block|{
name|BigInteger
name|min
init|=
name|BKDUtil
operator|.
name|bytesToBigInt
argument_list|(
name|minPacked
argument_list|,
name|dim
argument_list|,
name|numBytesPerDim
argument_list|)
decl_stmt|;
name|BigInteger
name|max
init|=
name|BKDUtil
operator|.
name|bytesToBigInt
argument_list|(
name|maxPacked
argument_list|,
name|dim
argument_list|,
name|numBytesPerDim
argument_list|)
decl_stmt|;
assert|assert
name|max
operator|.
name|compareTo
argument_list|(
name|min
argument_list|)
operator|>=
literal|0
assert|;
if|if
condition|(
name|BKDUtil
operator|.
name|compare
argument_list|(
name|numBytesPerDim
argument_list|,
name|maxPacked
argument_list|,
name|dim
argument_list|,
name|queryMin
index|[
name|dim
index|]
argument_list|,
literal|0
argument_list|)
operator|<
literal|0
operator|||
name|BKDUtil
operator|.
name|compare
argument_list|(
name|numBytesPerDim
argument_list|,
name|minPacked
argument_list|,
name|dim
argument_list|,
name|queryMax
index|[
name|dim
index|]
argument_list|,
literal|0
argument_list|)
operator|>
literal|0
condition|)
block|{
return|return
name|BKDReader
operator|.
name|Relation
operator|.
name|QUERY_OUTSIDE_CELL
return|;
block|}
elseif|else
if|if
condition|(
name|BKDUtil
operator|.
name|compare
argument_list|(
name|numBytesPerDim
argument_list|,
name|minPacked
argument_list|,
name|dim
argument_list|,
name|queryMin
index|[
name|dim
index|]
argument_list|,
literal|0
argument_list|)
operator|<
literal|0
operator|||
name|BKDUtil
operator|.
name|compare
argument_list|(
name|numBytesPerDim
argument_list|,
name|maxPacked
argument_list|,
name|dim
argument_list|,
name|queryMax
index|[
name|dim
index|]
argument_list|,
literal|0
argument_list|)
operator|>
literal|0
condition|)
block|{
name|crosses
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|crosses
condition|)
block|{
return|return
name|BKDReader
operator|.
name|Relation
operator|.
name|QUERY_CROSSES_CELL
return|;
block|}
else|else
block|{
return|return
name|BKDReader
operator|.
name|Relation
operator|.
name|CELL_INSIDE_QUERY
return|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|BitSet
name|expected
init|=
operator|new
name|BitSet
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|ord
init|=
literal|0
init|;
name|ord
operator|<
name|numValues
condition|;
name|ord
operator|++
control|)
block|{
name|boolean
name|matches
init|=
literal|true
decl_stmt|;
for|for
control|(
name|int
name|dim
init|=
literal|0
init|;
name|dim
operator|<
name|numDims
condition|;
name|dim
operator|++
control|)
block|{
name|byte
index|[]
name|x
init|=
name|docValues
index|[
name|ord
index|]
index|[
name|dim
index|]
decl_stmt|;
if|if
condition|(
name|BKDUtil
operator|.
name|compare
argument_list|(
name|numBytesPerDim
argument_list|,
name|x
argument_list|,
literal|0
argument_list|,
name|queryMin
index|[
name|dim
index|]
argument_list|,
literal|0
argument_list|)
operator|<
literal|0
operator|||
name|BKDUtil
operator|.
name|compare
argument_list|(
name|numBytesPerDim
argument_list|,
name|x
argument_list|,
literal|0
argument_list|,
name|queryMax
index|[
name|dim
index|]
argument_list|,
literal|0
argument_list|)
operator|>
literal|0
condition|)
block|{
name|matches
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|matches
condition|)
block|{
name|int
name|docID
decl_stmt|;
if|if
condition|(
name|docIDs
operator|==
literal|null
condition|)
block|{
name|docID
operator|=
name|ord
expr_stmt|;
block|}
else|else
block|{
name|docID
operator|=
name|docIDs
index|[
name|ord
index|]
expr_stmt|;
block|}
name|expected
operator|.
name|set
argument_list|(
name|docID
argument_list|)
expr_stmt|;
block|}
block|}
name|int
name|limit
init|=
name|Math
operator|.
name|max
argument_list|(
name|expected
operator|.
name|length
argument_list|()
argument_list|,
name|hits
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|docID
init|=
literal|0
init|;
name|docID
operator|<
name|limit
condition|;
name|docID
operator|++
control|)
block|{
name|assertEquals
argument_list|(
literal|"docID="
operator|+
name|docID
argument_list|,
name|expected
operator|.
name|get
argument_list|(
name|docID
argument_list|)
argument_list|,
name|hits
operator|.
name|get
argument_list|(
name|docID
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|dir
operator|.
name|deleteFile
argument_list|(
literal|"bkd"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|randomBigInt
specifier|private
name|BigInteger
name|randomBigInt
parameter_list|(
name|int
name|numBytes
parameter_list|)
block|{
name|BigInteger
name|x
init|=
operator|new
name|BigInteger
argument_list|(
name|numBytes
operator|*
literal|8
operator|-
literal|1
argument_list|,
name|random
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|x
operator|=
name|x
operator|.
name|negate
argument_list|()
expr_stmt|;
block|}
return|return
name|x
return|;
block|}
DECL|method|getDirectory
specifier|private
name|Directory
name|getDirectory
parameter_list|(
name|int
name|numPoints
parameter_list|)
block|{
name|Directory
name|dir
decl_stmt|;
if|if
condition|(
name|numPoints
operator|>
literal|100000
condition|)
block|{
name|dir
operator|=
name|newFSDirectory
argument_list|(
name|createTempDir
argument_list|(
literal|"TestBKDTree"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|dir
operator|=
name|newDirectory
argument_list|()
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"DIR: "
operator|+
name|dir
argument_list|)
expr_stmt|;
if|if
condition|(
name|dir
operator|instanceof
name|MockDirectoryWrapper
condition|)
block|{
operator|(
operator|(
name|MockDirectoryWrapper
operator|)
name|dir
operator|)
operator|.
name|setEnableVirusScanner
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
return|return
name|dir
return|;
block|}
block|}
end_class
end_unit
