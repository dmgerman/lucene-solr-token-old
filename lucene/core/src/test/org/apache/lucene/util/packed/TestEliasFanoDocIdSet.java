begin_unit
begin_package
DECL|package|org.apache.lucene.util.packed
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|packed
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|DocIdSetIterator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_class
DECL|class|TestEliasFanoDocIdSet
specifier|public
class|class
name|TestEliasFanoDocIdSet
extends|extends
name|LuceneTestCase
block|{
DECL|method|makeDisi
specifier|private
specifier|static
name|DocIdSetIterator
name|makeDisi
parameter_list|(
specifier|final
name|int
index|[]
name|docIds
parameter_list|)
block|{
class|class
name|IntArrayDisi
extends|extends
name|DocIdSetIterator
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
name|int
name|docId
init|=
operator|-
literal|1
decl_stmt|;
annotation|@
name|Override
specifier|public
name|int
name|docID
parameter_list|()
block|{
return|return
name|docId
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|nextDoc
parameter_list|()
block|{
if|if
condition|(
name|i
operator|>=
name|docIds
operator|.
name|length
condition|)
block|{
name|docId
operator|=
name|NO_MORE_DOCS
expr_stmt|;
return|return
name|docId
return|;
block|}
if|if
condition|(
name|docIds
index|[
name|i
index|]
operator|<
name|docId
condition|)
block|{
comment|// Elias-Fano sequence should be non decreasing.
comment|// The non decreasing condition for Elias-Fano is weaker than normal increasing for DocIdSetIterator
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"docIds[] out of order"
argument_list|)
throw|;
block|}
name|docId
operator|=
name|docIds
index|[
name|i
operator|++
index|]
expr_stmt|;
comment|// increase i to just after current
return|return
name|docId
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|advance
parameter_list|(
name|int
name|target
parameter_list|)
block|{
comment|// ( ((i == 0) and (docId == -1)) or
comment|//   ((i> 0) and (docIds.length> 0) and (i<= docIds.length) and (docId == docIds[i-1])) )
comment|// The behavior of this method is undefined when called with target â¤ current, or after the iterator has exhausted.
comment|// Both cases may result in unpredicted behavior, and may throw an assertion error or an IOOBE here.
comment|// So when nextDoc() or advance() were called earlier, the target should be bigger than current docId:
assert|assert
operator|(
name|docId
operator|==
operator|-
literal|1
operator|)
operator|||
operator|(
name|docId
operator|<
name|target
operator|)
assert|;
comment|// Do a binary search for the index j for which:
comment|// ((j>= i)
comment|//  and ((j< docIds.length) implies (docIds[j]>= target))
comment|//  and ((j>= 1) implies (docIds[j-1]< target)) )
name|int
name|j
init|=
name|docIds
operator|.
name|length
decl_stmt|;
while|while
condition|(
name|i
operator|<
name|j
condition|)
block|{
comment|// ((0<= i) and (i< j) and (j<= docIds.length)) so (docIds.length> 0)
name|int
name|m
init|=
name|i
operator|+
operator|(
name|j
operator|-
name|i
operator|)
operator|/
literal|2
decl_stmt|;
comment|// (i<= m) and (m< j); avoid overflow for (i + j)
if|if
condition|(
name|docIds
index|[
name|m
index|]
operator|<
name|target
condition|)
block|{
name|i
operator|=
name|m
operator|+
literal|1
expr_stmt|;
comment|// (docIds[i-1]<  target) and (i<= j)
block|}
else|else
block|{
name|j
operator|=
name|m
expr_stmt|;
comment|//     (docIds[j]>= target)   and (i<= j)
block|}
block|}
comment|// (i == j)
name|docId
operator|=
operator|(
name|i
operator|>=
name|docIds
operator|.
name|length
operator|)
condition|?
name|NO_MORE_DOCS
comment|// exhausted
else|:
name|docIds
index|[
name|i
operator|++
index|]
expr_stmt|;
comment|// increase i to just after current
return|return
name|docId
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|cost
parameter_list|()
block|{
return|return
name|docIds
operator|.
name|length
return|;
block|}
block|}
empty_stmt|;
return|return
operator|new
name|IntArrayDisi
argument_list|()
return|;
block|}
DECL|method|tstEqualDisisNext
specifier|public
name|void
name|tstEqualDisisNext
parameter_list|(
name|DocIdSetIterator
name|disi0
parameter_list|,
name|DocIdSetIterator
name|disi1
parameter_list|)
throws|throws
name|IOException
block|{
name|assertEquals
argument_list|(
name|disi0
operator|.
name|docID
argument_list|()
argument_list|,
name|disi1
operator|.
name|docID
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|d0
init|=
name|disi0
operator|.
name|nextDoc
argument_list|()
decl_stmt|;
name|int
name|d1
init|=
name|disi1
operator|.
name|nextDoc
argument_list|()
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|(
name|d0
operator|!=
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
operator|)
operator|&&
operator|(
name|d1
operator|!=
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
operator|)
condition|)
block|{
name|assertEquals
argument_list|(
literal|"index "
operator|+
name|i
argument_list|,
name|d0
argument_list|,
name|d1
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|d0
operator|=
name|disi0
operator|.
name|nextDoc
argument_list|()
expr_stmt|;
name|d1
operator|=
name|disi1
operator|.
name|nextDoc
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"at end"
argument_list|,
name|d0
argument_list|,
name|d1
argument_list|)
expr_stmt|;
block|}
DECL|method|tstEqualDisisAdvanceAsNext
specifier|public
name|void
name|tstEqualDisisAdvanceAsNext
parameter_list|(
name|DocIdSetIterator
name|disi0
parameter_list|,
name|DocIdSetIterator
name|disi1
parameter_list|)
throws|throws
name|IOException
block|{
name|assertEquals
argument_list|(
name|disi0
operator|.
name|docID
argument_list|()
argument_list|,
name|disi1
operator|.
name|docID
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|d0
init|=
name|disi0
operator|.
name|advance
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|int
name|d1
init|=
name|disi1
operator|.
name|advance
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|(
name|d0
operator|!=
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
operator|)
operator|&&
operator|(
name|d1
operator|!=
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
operator|)
condition|)
block|{
name|assertEquals
argument_list|(
literal|"index "
operator|+
name|i
argument_list|,
name|d0
argument_list|,
name|d1
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|d0
operator|=
name|disi0
operator|.
name|advance
argument_list|(
name|d1
operator|+
literal|1
argument_list|)
expr_stmt|;
name|d1
operator|=
name|disi1
operator|.
name|advance
argument_list|(
name|d1
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"at end disi0 "
operator|+
name|disi0
operator|+
literal|", disi1 "
operator|+
name|disi1
argument_list|,
name|d0
argument_list|,
name|d1
argument_list|)
expr_stmt|;
block|}
DECL|method|tstEF
specifier|public
name|void
name|tstEF
parameter_list|(
name|int
index|[]
name|docIds
parameter_list|)
block|{
name|int
name|maxDoc
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|int
name|docId
range|:
name|docIds
control|)
block|{
assert|assert
name|docId
operator|>=
name|maxDoc
assert|;
comment|// non decreasing
name|maxDoc
operator|=
name|docId
expr_stmt|;
block|}
try|try
block|{
name|EliasFanoDocIdSet
name|efd
init|=
operator|new
name|EliasFanoDocIdSet
argument_list|(
name|docIds
operator|.
name|length
argument_list|,
name|maxDoc
argument_list|)
decl_stmt|;
name|efd
operator|.
name|encodeFromDisi
argument_list|(
name|makeDisi
argument_list|(
name|docIds
argument_list|)
argument_list|)
expr_stmt|;
name|tstEqualDisisNext
argument_list|(
name|makeDisi
argument_list|(
name|docIds
argument_list|)
argument_list|,
name|efd
operator|.
name|iterator
argument_list|()
argument_list|)
expr_stmt|;
name|tstEqualDisisAdvanceAsNext
argument_list|(
name|makeDisi
argument_list|(
name|docIds
argument_list|)
argument_list|,
name|efd
operator|.
name|iterator
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|Error
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
block|}
DECL|method|testEmpty
specifier|public
name|void
name|testEmpty
parameter_list|()
block|{
name|tstEF
argument_list|(
operator|new
name|int
index|[]
block|{}
argument_list|)
expr_stmt|;
block|}
DECL|method|testOneElementZero
specifier|public
name|void
name|testOneElementZero
parameter_list|()
block|{
name|tstEF
argument_list|(
operator|new
name|int
index|[]
block|{
literal|0
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|testTwoElements
specifier|public
name|void
name|testTwoElements
parameter_list|()
block|{
name|tstEF
argument_list|(
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|1
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|testOneElementOneBit
specifier|public
name|void
name|testOneElementOneBit
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
operator|(
name|Integer
operator|.
name|SIZE
operator|-
literal|1
operator|)
condition|;
name|i
operator|++
control|)
block|{
name|tstEF
argument_list|(
operator|new
name|int
index|[]
block|{
literal|1
operator|<<
name|i
block|}
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testIncreasingSequences
specifier|public
name|void
name|testIncreasingSequences
parameter_list|()
block|{
specifier|final
name|int
name|TEST_NUMDOCS
init|=
literal|129
decl_stmt|;
name|int
index|[]
name|docIds
init|=
operator|new
name|int
index|[
name|TEST_NUMDOCS
index|]
decl_stmt|;
for|for
control|(
name|int
name|f
init|=
literal|1
init|;
name|f
operator|<=
literal|1025
condition|;
name|f
operator|++
control|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|TEST_NUMDOCS
condition|;
name|i
operator|++
control|)
block|{
name|docIds
index|[
name|i
index|]
operator|=
name|i
operator|*
name|f
expr_stmt|;
block|}
name|tstEF
argument_list|(
name|docIds
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class
end_unit
