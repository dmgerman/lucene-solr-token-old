begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.util
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
package|;
end_package
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NoSuchElementException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import
begin_class
DECL|class|TestPriorityQueue
specifier|public
class|class
name|TestPriorityQueue
extends|extends
name|LuceneTestCase
block|{
DECL|class|IntegerQueue
specifier|private
specifier|static
class|class
name|IntegerQueue
extends|extends
name|PriorityQueue
argument_list|<
name|Integer
argument_list|>
block|{
DECL|method|IntegerQueue
specifier|public
name|IntegerQueue
parameter_list|(
name|int
name|count
parameter_list|)
block|{
name|super
argument_list|(
name|count
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|lessThan
specifier|protected
name|boolean
name|lessThan
parameter_list|(
name|Integer
name|a
parameter_list|,
name|Integer
name|b
parameter_list|)
block|{
if|if
condition|(
name|a
operator|.
name|equals
argument_list|(
name|b
argument_list|)
condition|)
block|{
assert|assert
operator|(
name|a
operator|!=
name|b
operator|)
assert|;
name|int
name|hashA
init|=
name|System
operator|.
name|identityHashCode
argument_list|(
name|a
argument_list|)
decl_stmt|;
name|int
name|hashB
init|=
name|System
operator|.
name|identityHashCode
argument_list|(
name|b
argument_list|)
decl_stmt|;
assert|assert
operator|(
name|hashA
operator|!=
name|hashB
operator|)
assert|;
return|return
name|hashA
operator|<
name|hashB
return|;
block|}
return|return
operator|(
name|a
operator|<
name|b
operator|)
return|;
block|}
DECL|method|checkValidity
specifier|protected
specifier|final
name|void
name|checkValidity
parameter_list|()
block|{
name|Object
index|[]
name|heapArray
init|=
name|getHeapArray
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|int
name|parent
init|=
name|i
operator|>>>
literal|1
decl_stmt|;
if|if
condition|(
name|parent
operator|>
literal|1
condition|)
block|{
name|assertTrue
argument_list|(
name|lessThan
argument_list|(
operator|(
name|Integer
operator|)
name|heapArray
index|[
name|parent
index|]
argument_list|,
operator|(
name|Integer
operator|)
name|heapArray
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|testPQ
specifier|public
name|void
name|testPQ
parameter_list|()
throws|throws
name|Exception
block|{
name|testPQ
argument_list|(
name|atLeast
argument_list|(
literal|10000
argument_list|)
argument_list|,
name|random
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testPQ
specifier|public
specifier|static
name|void
name|testPQ
parameter_list|(
name|int
name|count
parameter_list|,
name|Random
name|gen
parameter_list|)
block|{
name|PriorityQueue
argument_list|<
name|Integer
argument_list|>
name|pq
init|=
operator|new
name|IntegerQueue
argument_list|(
name|count
argument_list|)
decl_stmt|;
name|int
name|sum
init|=
literal|0
decl_stmt|,
name|sum2
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|int
name|next
init|=
name|gen
operator|.
name|nextInt
argument_list|()
decl_stmt|;
name|sum
operator|+=
name|next
expr_stmt|;
name|pq
operator|.
name|add
argument_list|(
name|next
argument_list|)
expr_stmt|;
block|}
comment|//      Date end = new Date();
comment|//      System.out.print(((float)(end.getTime()-start.getTime()) / count) * 1000);
comment|//      System.out.println(" microseconds/put");
comment|//      start = new Date();
name|int
name|last
init|=
name|Integer
operator|.
name|MIN_VALUE
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|Integer
name|next
init|=
name|pq
operator|.
name|pop
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|next
operator|.
name|intValue
argument_list|()
operator|>=
name|last
argument_list|)
expr_stmt|;
name|last
operator|=
name|next
operator|.
name|intValue
argument_list|()
expr_stmt|;
name|sum2
operator|+=
name|last
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|sum
argument_list|,
name|sum2
argument_list|)
expr_stmt|;
comment|//      end = new Date();
comment|//      System.out.print(((float)(end.getTime()-start.getTime()) / count) * 1000);
comment|//      System.out.println(" microseconds/pop");
block|}
DECL|method|testClear
specifier|public
name|void
name|testClear
parameter_list|()
block|{
name|PriorityQueue
argument_list|<
name|Integer
argument_list|>
name|pq
init|=
operator|new
name|IntegerQueue
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|pq
operator|.
name|add
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|pq
operator|.
name|add
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|pq
operator|.
name|add
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|pq
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|pq
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|pq
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testFixedSize
specifier|public
name|void
name|testFixedSize
parameter_list|()
block|{
name|PriorityQueue
argument_list|<
name|Integer
argument_list|>
name|pq
init|=
operator|new
name|IntegerQueue
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|pq
operator|.
name|insertWithOverflow
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|pq
operator|.
name|insertWithOverflow
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|pq
operator|.
name|insertWithOverflow
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|pq
operator|.
name|insertWithOverflow
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|pq
operator|.
name|insertWithOverflow
argument_list|(
literal|7
argument_list|)
expr_stmt|;
name|pq
operator|.
name|insertWithOverflow
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|pq
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|Integer
operator|)
literal|3
argument_list|,
name|pq
operator|.
name|top
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testInsertWithOverflow
specifier|public
name|void
name|testInsertWithOverflow
parameter_list|()
block|{
name|int
name|size
init|=
literal|4
decl_stmt|;
name|PriorityQueue
argument_list|<
name|Integer
argument_list|>
name|pq
init|=
operator|new
name|IntegerQueue
argument_list|(
name|size
argument_list|)
decl_stmt|;
name|Integer
name|i1
init|=
literal|2
decl_stmt|;
name|Integer
name|i2
init|=
literal|3
decl_stmt|;
name|Integer
name|i3
init|=
literal|1
decl_stmt|;
name|Integer
name|i4
init|=
literal|5
decl_stmt|;
name|Integer
name|i5
init|=
literal|7
decl_stmt|;
name|Integer
name|i6
init|=
literal|1
decl_stmt|;
name|assertNull
argument_list|(
name|pq
operator|.
name|insertWithOverflow
argument_list|(
name|i1
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|pq
operator|.
name|insertWithOverflow
argument_list|(
name|i2
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|pq
operator|.
name|insertWithOverflow
argument_list|(
name|i3
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|pq
operator|.
name|insertWithOverflow
argument_list|(
name|i4
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|pq
operator|.
name|insertWithOverflow
argument_list|(
name|i5
argument_list|)
operator|==
name|i3
argument_list|)
expr_stmt|;
comment|// i3 should have been dropped
name|assertTrue
argument_list|(
name|pq
operator|.
name|insertWithOverflow
argument_list|(
name|i6
argument_list|)
operator|==
name|i6
argument_list|)
expr_stmt|;
comment|// i6 should not have been inserted
name|assertEquals
argument_list|(
name|size
argument_list|,
name|pq
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|Integer
operator|)
literal|2
argument_list|,
name|pq
operator|.
name|top
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testRemovalsAndInsertions
specifier|public
name|void
name|testRemovalsAndInsertions
parameter_list|()
block|{
name|Random
name|random
init|=
name|random
argument_list|()
decl_stmt|;
name|int
name|numDocsInPQ
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|,
literal|1
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|IntegerQueue
name|pq
init|=
operator|new
name|IntegerQueue
argument_list|(
name|numDocsInPQ
argument_list|)
decl_stmt|;
name|Integer
name|lastLeast
init|=
literal|null
decl_stmt|;
comment|// Basic insertion of new content
name|ArrayList
argument_list|<
name|Integer
argument_list|>
name|sds
init|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|(
name|numDocsInPQ
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocsInPQ
operator|*
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|Integer
name|newEntry
init|=
operator|new
name|Integer
argument_list|(
name|Math
operator|.
name|abs
argument_list|(
name|random
operator|.
name|nextInt
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|sds
operator|.
name|add
argument_list|(
name|newEntry
argument_list|)
expr_stmt|;
name|Integer
name|evicted
init|=
name|pq
operator|.
name|insertWithOverflow
argument_list|(
name|newEntry
argument_list|)
decl_stmt|;
name|pq
operator|.
name|checkValidity
argument_list|()
expr_stmt|;
if|if
condition|(
name|evicted
operator|!=
literal|null
condition|)
block|{
name|assertTrue
argument_list|(
name|sds
operator|.
name|remove
argument_list|(
name|evicted
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|evicted
operator|!=
name|newEntry
condition|)
block|{
name|assertTrue
argument_list|(
name|evicted
operator|==
name|lastLeast
argument_list|)
expr_stmt|;
block|}
block|}
name|Integer
name|newLeast
init|=
name|pq
operator|.
name|top
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|lastLeast
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|newLeast
operator|!=
name|newEntry
operator|)
operator|&&
operator|(
name|newLeast
operator|!=
name|lastLeast
operator|)
condition|)
block|{
comment|// If there has been a change of least entry and it wasn't our new
comment|// addition we expect the scores to increase
name|assertTrue
argument_list|(
name|newLeast
operator|<=
name|newEntry
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|newLeast
operator|>=
name|lastLeast
argument_list|)
expr_stmt|;
block|}
name|lastLeast
operator|=
name|newLeast
expr_stmt|;
block|}
comment|// Try many random additions to existing entries - we should always see
comment|// increasing scores in the lowest entry in the PQ
for|for
control|(
name|int
name|p
init|=
literal|0
init|;
name|p
operator|<
literal|500000
condition|;
name|p
operator|++
control|)
block|{
name|int
name|element
init|=
call|(
name|int
call|)
argument_list|(
name|random
operator|.
name|nextFloat
argument_list|()
operator|*
operator|(
name|sds
operator|.
name|size
argument_list|()
operator|-
literal|1
operator|)
argument_list|)
decl_stmt|;
name|Integer
name|objectToRemove
init|=
name|sds
operator|.
name|get
argument_list|(
name|element
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|sds
operator|.
name|remove
argument_list|(
name|element
argument_list|)
operator|==
name|objectToRemove
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|pq
operator|.
name|remove
argument_list|(
name|objectToRemove
argument_list|)
argument_list|)
expr_stmt|;
name|pq
operator|.
name|checkValidity
argument_list|()
expr_stmt|;
name|Integer
name|newEntry
init|=
operator|new
name|Integer
argument_list|(
name|Math
operator|.
name|abs
argument_list|(
name|random
operator|.
name|nextInt
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|sds
operator|.
name|add
argument_list|(
name|newEntry
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|pq
operator|.
name|insertWithOverflow
argument_list|(
name|newEntry
argument_list|)
argument_list|)
expr_stmt|;
name|pq
operator|.
name|checkValidity
argument_list|()
expr_stmt|;
name|Integer
name|newLeast
init|=
name|pq
operator|.
name|top
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|objectToRemove
operator|!=
name|lastLeast
operator|)
operator|&&
operator|(
name|lastLeast
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|newLeast
operator|!=
name|newEntry
operator|)
condition|)
block|{
comment|// If there has been a change of least entry and it wasn't our new
comment|// addition or the loss of our randomly removed entry we expect the
comment|// scores to increase
name|assertTrue
argument_list|(
name|newLeast
operator|<=
name|newEntry
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|newLeast
operator|>=
name|lastLeast
argument_list|)
expr_stmt|;
block|}
name|lastLeast
operator|=
name|newLeast
expr_stmt|;
block|}
block|}
DECL|method|testIterator
specifier|public
name|void
name|testIterator
parameter_list|()
block|{
name|IntegerQueue
name|queue
init|=
operator|new
name|IntegerQueue
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|Integer
argument_list|>
name|it
init|=
name|queue
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchElementException
name|e
parameter_list|)
block|{
comment|// ok
block|}
name|queue
operator|.
name|add
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|it
operator|=
name|queue
operator|.
name|iterator
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|1
argument_list|)
argument_list|,
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchElementException
name|e
parameter_list|)
block|{
comment|// ok
block|}
name|queue
operator|.
name|add
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|it
operator|=
name|queue
operator|.
name|iterator
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|1
argument_list|)
argument_list|,
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|2
argument_list|)
argument_list|,
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchElementException
name|e
parameter_list|)
block|{
comment|// ok
block|}
block|}
DECL|method|testIteratorRandom
specifier|public
name|void
name|testIteratorRandom
parameter_list|()
block|{
specifier|final
name|int
name|maxSize
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|20
argument_list|)
decl_stmt|;
name|IntegerQueue
name|queue
init|=
operator|new
name|IntegerQueue
argument_list|(
name|maxSize
argument_list|)
decl_stmt|;
specifier|final
name|int
name|iters
init|=
name|atLeast
argument_list|(
literal|100
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Integer
argument_list|>
name|expected
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|iter
init|=
literal|0
init|;
name|iter
operator|<
name|iters
condition|;
operator|++
name|iter
control|)
block|{
if|if
condition|(
name|queue
operator|.
name|size
argument_list|()
operator|==
literal|0
operator|||
operator|(
name|queue
operator|.
name|size
argument_list|()
operator|<
name|maxSize
operator|&&
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
operator|)
condition|)
block|{
specifier|final
name|Integer
name|value
init|=
operator|new
name|Integer
argument_list|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
argument_list|)
decl_stmt|;
name|queue
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|expected
operator|.
name|remove
argument_list|(
name|queue
operator|.
name|pop
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|Integer
argument_list|>
name|actual
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Integer
name|value
range|:
name|queue
control|)
block|{
name|actual
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
name|CollectionUtil
operator|.
name|introSort
argument_list|(
name|expected
argument_list|)
expr_stmt|;
name|CollectionUtil
operator|.
name|introSort
argument_list|(
name|actual
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class
end_unit
