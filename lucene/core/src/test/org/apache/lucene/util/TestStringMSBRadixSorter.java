begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.util
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
package|;
end_package
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_class
DECL|class|TestStringMSBRadixSorter
specifier|public
class|class
name|TestStringMSBRadixSorter
extends|extends
name|LuceneTestCase
block|{
DECL|method|test
specifier|private
name|void
name|test
parameter_list|(
name|BytesRef
index|[]
name|refs
parameter_list|,
name|int
name|len
parameter_list|)
block|{
name|BytesRef
index|[]
name|expected
init|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|refs
argument_list|,
name|len
argument_list|)
decl_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|expected
argument_list|)
expr_stmt|;
operator|new
name|StringMSBRadixSorter
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|BytesRef
name|get
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|refs
index|[
name|i
index|]
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|swap
parameter_list|(
name|int
name|i
parameter_list|,
name|int
name|j
parameter_list|)
block|{
name|BytesRef
name|tmp
init|=
name|refs
index|[
name|i
index|]
decl_stmt|;
name|refs
index|[
name|i
index|]
operator|=
name|refs
index|[
name|j
index|]
expr_stmt|;
name|refs
index|[
name|j
index|]
operator|=
name|tmp
expr_stmt|;
block|}
block|}
operator|.
name|sort
argument_list|(
literal|0
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|BytesRef
index|[]
name|actual
init|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|refs
argument_list|,
name|len
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
DECL|method|testEmpty
specifier|public
name|void
name|testEmpty
parameter_list|()
block|{
name|test
argument_list|(
operator|new
name|BytesRef
index|[
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|5
argument_list|)
index|]
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|testOneValue
specifier|public
name|void
name|testOneValue
parameter_list|()
block|{
name|BytesRef
name|bytes
init|=
operator|new
name|BytesRef
argument_list|(
name|TestUtil
operator|.
name|randomSimpleString
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|test
argument_list|(
operator|new
name|BytesRef
index|[]
block|{
name|bytes
block|}
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|method|testTwoValues
specifier|public
name|void
name|testTwoValues
parameter_list|()
block|{
name|BytesRef
name|bytes1
init|=
operator|new
name|BytesRef
argument_list|(
name|TestUtil
operator|.
name|randomSimpleString
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|BytesRef
name|bytes2
init|=
operator|new
name|BytesRef
argument_list|(
name|TestUtil
operator|.
name|randomSimpleString
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|test
argument_list|(
operator|new
name|BytesRef
index|[]
block|{
name|bytes1
block|,
name|bytes2
block|}
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
DECL|method|testRandom
specifier|private
name|void
name|testRandom
parameter_list|(
name|int
name|commonPrefixLen
parameter_list|,
name|int
name|maxLen
parameter_list|)
block|{
name|byte
index|[]
name|commonPrefix
init|=
operator|new
name|byte
index|[
name|commonPrefixLen
index|]
decl_stmt|;
name|random
argument_list|()
operator|.
name|nextBytes
argument_list|(
name|commonPrefix
argument_list|)
expr_stmt|;
specifier|final
name|int
name|len
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|100000
argument_list|)
decl_stmt|;
name|BytesRef
index|[]
name|bytes
init|=
operator|new
name|BytesRef
index|[
name|len
operator|+
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|50
argument_list|)
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
operator|++
name|i
control|)
block|{
name|byte
index|[]
name|b
init|=
operator|new
name|byte
index|[
name|commonPrefixLen
operator|+
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|maxLen
argument_list|)
index|]
decl_stmt|;
name|random
argument_list|()
operator|.
name|nextBytes
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|commonPrefix
argument_list|,
literal|0
argument_list|,
name|b
argument_list|,
literal|0
argument_list|,
name|commonPrefixLen
argument_list|)
expr_stmt|;
name|bytes
index|[
name|i
index|]
operator|=
operator|new
name|BytesRef
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
name|test
argument_list|(
name|bytes
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
DECL|method|testRandom
specifier|public
name|void
name|testRandom
parameter_list|()
block|{
for|for
control|(
name|int
name|iter
init|=
literal|0
init|;
name|iter
operator|<
literal|10
condition|;
operator|++
name|iter
control|)
block|{
name|testRandom
argument_list|(
literal|0
argument_list|,
literal|10
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testRandomWithLotsOfDuplicates
specifier|public
name|void
name|testRandomWithLotsOfDuplicates
parameter_list|()
block|{
for|for
control|(
name|int
name|iter
init|=
literal|0
init|;
name|iter
operator|<
literal|10
condition|;
operator|++
name|iter
control|)
block|{
name|testRandom
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testRandomWithSharedPrefix
specifier|public
name|void
name|testRandomWithSharedPrefix
parameter_list|()
block|{
for|for
control|(
name|int
name|iter
init|=
literal|0
init|;
name|iter
operator|<
literal|10
condition|;
operator|++
name|iter
control|)
block|{
name|testRandom
argument_list|(
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|30
argument_list|)
argument_list|,
literal|10
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testRandomWithSharedPrefixAndLotsOfDuplicates
specifier|public
name|void
name|testRandomWithSharedPrefixAndLotsOfDuplicates
parameter_list|()
block|{
for|for
control|(
name|int
name|iter
init|=
literal|0
init|;
name|iter
operator|<
literal|10
condition|;
operator|++
name|iter
control|)
block|{
name|testRandom
argument_list|(
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|30
argument_list|)
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class
end_unit
