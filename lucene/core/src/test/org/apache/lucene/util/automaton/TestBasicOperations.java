begin_unit
begin_package
DECL|package|org.apache.lucene.util.automaton
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|automaton
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|*
import|;
end_import
begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|generators
operator|.
name|RandomInts
import|;
end_import
begin_class
DECL|class|TestBasicOperations
specifier|public
class|class
name|TestBasicOperations
extends|extends
name|LuceneTestCase
block|{
comment|/** Test string union. */
DECL|method|testStringUnion
specifier|public
name|void
name|testStringUnion
parameter_list|()
block|{
name|List
argument_list|<
name|BytesRef
argument_list|>
name|strings
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|RandomInts
operator|.
name|randomIntBetween
argument_list|(
name|random
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|1000
argument_list|)
init|;
operator|--
name|i
operator|>=
literal|0
condition|;
control|)
block|{
name|strings
operator|.
name|add
argument_list|(
operator|new
name|BytesRef
argument_list|(
name|TestUtil
operator|.
name|randomUnicodeString
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|strings
argument_list|)
expr_stmt|;
name|Automaton
name|union
init|=
name|BasicAutomata
operator|.
name|makeStringUnion
argument_list|(
name|strings
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|union
operator|.
name|isDeterministic
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|BasicOperations
operator|.
name|sameLanguage
argument_list|(
name|union
argument_list|,
name|naiveUnion
argument_list|(
name|strings
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|naiveUnion
specifier|private
specifier|static
name|Automaton
name|naiveUnion
parameter_list|(
name|List
argument_list|<
name|BytesRef
argument_list|>
name|strings
parameter_list|)
block|{
name|Automaton
index|[]
name|eachIndividual
init|=
operator|new
name|Automaton
index|[
name|strings
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|BytesRef
name|bref
range|:
name|strings
control|)
block|{
name|eachIndividual
index|[
name|i
operator|++
index|]
operator|=
name|BasicAutomata
operator|.
name|makeString
argument_list|(
name|bref
operator|.
name|utf8ToString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|BasicOperations
operator|.
name|union
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|eachIndividual
argument_list|)
argument_list|)
return|;
block|}
comment|/** Test optimization to concatenate() */
DECL|method|testSingletonConcatenate
specifier|public
name|void
name|testSingletonConcatenate
parameter_list|()
block|{
name|Automaton
name|singleton
init|=
name|BasicAutomata
operator|.
name|makeString
argument_list|(
literal|"prefix"
argument_list|)
decl_stmt|;
name|Automaton
name|expandedSingleton
init|=
name|singleton
operator|.
name|cloneExpanded
argument_list|()
decl_stmt|;
name|Automaton
name|other
init|=
name|BasicAutomata
operator|.
name|makeCharRange
argument_list|(
literal|'5'
argument_list|,
literal|'7'
argument_list|)
decl_stmt|;
name|Automaton
name|concat
init|=
name|BasicOperations
operator|.
name|concatenate
argument_list|(
name|singleton
argument_list|,
name|other
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|concat
operator|.
name|isDeterministic
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|BasicOperations
operator|.
name|sameLanguage
argument_list|(
name|BasicOperations
operator|.
name|concatenate
argument_list|(
name|expandedSingleton
argument_list|,
name|other
argument_list|)
argument_list|,
name|concat
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Test optimization to concatenate() to an NFA */
DECL|method|testSingletonNFAConcatenate
specifier|public
name|void
name|testSingletonNFAConcatenate
parameter_list|()
block|{
name|Automaton
name|singleton
init|=
name|BasicAutomata
operator|.
name|makeString
argument_list|(
literal|"prefix"
argument_list|)
decl_stmt|;
name|Automaton
name|expandedSingleton
init|=
name|singleton
operator|.
name|cloneExpanded
argument_list|()
decl_stmt|;
comment|// an NFA (two transitions for 't' from initial state)
name|Automaton
name|nfa
init|=
name|BasicOperations
operator|.
name|union
argument_list|(
name|BasicAutomata
operator|.
name|makeString
argument_list|(
literal|"this"
argument_list|)
argument_list|,
name|BasicAutomata
operator|.
name|makeString
argument_list|(
literal|"three"
argument_list|)
argument_list|)
decl_stmt|;
name|Automaton
name|concat
init|=
name|BasicOperations
operator|.
name|concatenate
argument_list|(
name|singleton
argument_list|,
name|nfa
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|concat
operator|.
name|isDeterministic
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|BasicOperations
operator|.
name|sameLanguage
argument_list|(
name|BasicOperations
operator|.
name|concatenate
argument_list|(
name|expandedSingleton
argument_list|,
name|nfa
argument_list|)
argument_list|,
name|concat
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Test optimization to concatenate() with empty String */
DECL|method|testEmptySingletonConcatenate
specifier|public
name|void
name|testEmptySingletonConcatenate
parameter_list|()
block|{
name|Automaton
name|singleton
init|=
name|BasicAutomata
operator|.
name|makeString
argument_list|(
literal|""
argument_list|)
decl_stmt|;
name|Automaton
name|expandedSingleton
init|=
name|singleton
operator|.
name|cloneExpanded
argument_list|()
decl_stmt|;
name|Automaton
name|other
init|=
name|BasicAutomata
operator|.
name|makeCharRange
argument_list|(
literal|'5'
argument_list|,
literal|'7'
argument_list|)
decl_stmt|;
name|Automaton
name|concat1
init|=
name|BasicOperations
operator|.
name|concatenate
argument_list|(
name|expandedSingleton
argument_list|,
name|other
argument_list|)
decl_stmt|;
name|Automaton
name|concat2
init|=
name|BasicOperations
operator|.
name|concatenate
argument_list|(
name|singleton
argument_list|,
name|other
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|concat2
operator|.
name|isDeterministic
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|BasicOperations
operator|.
name|sameLanguage
argument_list|(
name|concat1
argument_list|,
name|concat2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|BasicOperations
operator|.
name|sameLanguage
argument_list|(
name|other
argument_list|,
name|concat1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|BasicOperations
operator|.
name|sameLanguage
argument_list|(
name|other
argument_list|,
name|concat2
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Test concatenation with empty language returns empty */
DECL|method|testEmptyLanguageConcatenate
specifier|public
name|void
name|testEmptyLanguageConcatenate
parameter_list|()
block|{
name|Automaton
name|a
init|=
name|BasicAutomata
operator|.
name|makeString
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
name|Automaton
name|concat
init|=
name|BasicOperations
operator|.
name|concatenate
argument_list|(
name|a
argument_list|,
name|BasicAutomata
operator|.
name|makeEmpty
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|BasicOperations
operator|.
name|isEmpty
argument_list|(
name|concat
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Test optimization to concatenate() with empty String to an NFA */
DECL|method|testEmptySingletonNFAConcatenate
specifier|public
name|void
name|testEmptySingletonNFAConcatenate
parameter_list|()
block|{
name|Automaton
name|singleton
init|=
name|BasicAutomata
operator|.
name|makeString
argument_list|(
literal|""
argument_list|)
decl_stmt|;
name|Automaton
name|expandedSingleton
init|=
name|singleton
operator|.
name|cloneExpanded
argument_list|()
decl_stmt|;
comment|// an NFA (two transitions for 't' from initial state)
name|Automaton
name|nfa
init|=
name|BasicOperations
operator|.
name|union
argument_list|(
name|BasicAutomata
operator|.
name|makeString
argument_list|(
literal|"this"
argument_list|)
argument_list|,
name|BasicAutomata
operator|.
name|makeString
argument_list|(
literal|"three"
argument_list|)
argument_list|)
decl_stmt|;
name|Automaton
name|concat1
init|=
name|BasicOperations
operator|.
name|concatenate
argument_list|(
name|expandedSingleton
argument_list|,
name|nfa
argument_list|)
decl_stmt|;
name|Automaton
name|concat2
init|=
name|BasicOperations
operator|.
name|concatenate
argument_list|(
name|singleton
argument_list|,
name|nfa
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|concat2
operator|.
name|isDeterministic
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|BasicOperations
operator|.
name|sameLanguage
argument_list|(
name|concat1
argument_list|,
name|concat2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|BasicOperations
operator|.
name|sameLanguage
argument_list|(
name|nfa
argument_list|,
name|concat1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|BasicOperations
operator|.
name|sameLanguage
argument_list|(
name|nfa
argument_list|,
name|concat2
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Test singletons work correctly */
DECL|method|testSingleton
specifier|public
name|void
name|testSingleton
parameter_list|()
block|{
name|Automaton
name|singleton
init|=
name|BasicAutomata
operator|.
name|makeString
argument_list|(
literal|"foobar"
argument_list|)
decl_stmt|;
name|Automaton
name|expandedSingleton
init|=
name|singleton
operator|.
name|cloneExpanded
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|BasicOperations
operator|.
name|sameLanguage
argument_list|(
name|singleton
argument_list|,
name|expandedSingleton
argument_list|)
argument_list|)
expr_stmt|;
name|singleton
operator|=
name|BasicAutomata
operator|.
name|makeString
argument_list|(
literal|"\ud801\udc1c"
argument_list|)
expr_stmt|;
name|expandedSingleton
operator|=
name|singleton
operator|.
name|cloneExpanded
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|BasicOperations
operator|.
name|sameLanguage
argument_list|(
name|singleton
argument_list|,
name|expandedSingleton
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testGetRandomAcceptedString
specifier|public
name|void
name|testGetRandomAcceptedString
parameter_list|()
throws|throws
name|Throwable
block|{
specifier|final
name|int
name|ITER1
init|=
name|atLeast
argument_list|(
literal|100
argument_list|)
decl_stmt|;
specifier|final
name|int
name|ITER2
init|=
name|atLeast
argument_list|(
literal|100
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ITER1
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|RegExp
name|re
init|=
operator|new
name|RegExp
argument_list|(
name|AutomatonTestUtil
operator|.
name|randomRegexp
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|,
name|RegExp
operator|.
name|NONE
argument_list|)
decl_stmt|;
specifier|final
name|Automaton
name|a
init|=
name|re
operator|.
name|toAutomaton
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|BasicOperations
operator|.
name|isEmpty
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|AutomatonTestUtil
operator|.
name|RandomAcceptedStrings
name|rx
init|=
operator|new
name|AutomatonTestUtil
operator|.
name|RandomAcceptedStrings
argument_list|(
name|a
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|ITER2
condition|;
name|j
operator|++
control|)
block|{
name|int
index|[]
name|acc
init|=
literal|null
decl_stmt|;
try|try
block|{
name|acc
operator|=
name|rx
operator|.
name|getRandomAcceptedString
argument_list|(
name|random
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|String
name|s
init|=
name|UnicodeUtil
operator|.
name|newString
argument_list|(
name|acc
argument_list|,
literal|0
argument_list|,
name|acc
operator|.
name|length
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|BasicOperations
operator|.
name|run
argument_list|(
name|a
argument_list|,
name|s
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"regexp: "
operator|+
name|re
argument_list|)
expr_stmt|;
if|if
condition|(
name|acc
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"fail acc re="
operator|+
name|re
operator|+
literal|" count="
operator|+
name|acc
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|acc
operator|.
name|length
condition|;
name|k
operator|++
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  "
operator|+
name|Integer
operator|.
name|toHexString
argument_list|(
name|acc
index|[
name|k
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
throw|throw
name|t
throw|;
block|}
block|}
block|}
block|}
block|}
end_class
end_unit
