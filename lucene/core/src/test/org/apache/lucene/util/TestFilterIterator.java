begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.util
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
package|;
end_package
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NoSuchElementException
import|;
end_import
begin_class
DECL|class|TestFilterIterator
specifier|public
class|class
name|TestFilterIterator
extends|extends
name|LuceneTestCase
block|{
DECL|field|set
specifier|private
specifier|static
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|set
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
argument_list|)
decl_stmt|;
DECL|method|assertNoMore
specifier|private
specifier|static
name|void
name|assertNoMore
parameter_list|(
name|Iterator
argument_list|<
name|?
argument_list|>
name|it
parameter_list|)
block|{
name|assertFalse
argument_list|(
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should throw NoSuchElementException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchElementException
name|nsee
parameter_list|)
block|{
comment|// pass
block|}
name|assertFalse
argument_list|(
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testEmpty
specifier|public
name|void
name|testEmpty
parameter_list|()
block|{
specifier|final
name|Iterator
argument_list|<
name|String
argument_list|>
name|it
init|=
operator|new
name|FilterIterator
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|(
name|set
operator|.
name|iterator
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|boolean
name|predicateFunction
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
decl_stmt|;
name|assertNoMore
argument_list|(
name|it
argument_list|)
expr_stmt|;
block|}
DECL|method|testA1
specifier|public
name|void
name|testA1
parameter_list|()
block|{
specifier|final
name|Iterator
argument_list|<
name|String
argument_list|>
name|it
init|=
operator|new
name|FilterIterator
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|(
name|set
operator|.
name|iterator
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|boolean
name|predicateFunction
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
literal|"a"
operator|.
name|equals
argument_list|(
name|s
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|assertTrue
argument_list|(
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertNoMore
argument_list|(
name|it
argument_list|)
expr_stmt|;
block|}
DECL|method|testA2
specifier|public
name|void
name|testA2
parameter_list|()
block|{
specifier|final
name|Iterator
argument_list|<
name|String
argument_list|>
name|it
init|=
operator|new
name|FilterIterator
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|(
name|set
operator|.
name|iterator
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|boolean
name|predicateFunction
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
literal|"a"
operator|.
name|equals
argument_list|(
name|s
argument_list|)
return|;
block|}
block|}
decl_stmt|;
comment|// this time without check: assertTrue(it.hasNext());
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertNoMore
argument_list|(
name|it
argument_list|)
expr_stmt|;
block|}
DECL|method|testB1
specifier|public
name|void
name|testB1
parameter_list|()
block|{
specifier|final
name|Iterator
argument_list|<
name|String
argument_list|>
name|it
init|=
operator|new
name|FilterIterator
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|(
name|set
operator|.
name|iterator
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|boolean
name|predicateFunction
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
literal|"b"
operator|.
name|equals
argument_list|(
name|s
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|assertTrue
argument_list|(
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"b"
argument_list|,
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertNoMore
argument_list|(
name|it
argument_list|)
expr_stmt|;
block|}
DECL|method|testB2
specifier|public
name|void
name|testB2
parameter_list|()
block|{
specifier|final
name|Iterator
argument_list|<
name|String
argument_list|>
name|it
init|=
operator|new
name|FilterIterator
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|(
name|set
operator|.
name|iterator
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|boolean
name|predicateFunction
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
literal|"b"
operator|.
name|equals
argument_list|(
name|s
argument_list|)
return|;
block|}
block|}
decl_stmt|;
comment|// this time without check: assertTrue(it.hasNext());
name|assertEquals
argument_list|(
literal|"b"
argument_list|,
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertNoMore
argument_list|(
name|it
argument_list|)
expr_stmt|;
block|}
DECL|method|testAll1
specifier|public
name|void
name|testAll1
parameter_list|()
block|{
specifier|final
name|Iterator
argument_list|<
name|String
argument_list|>
name|it
init|=
operator|new
name|FilterIterator
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|(
name|set
operator|.
name|iterator
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|boolean
name|predicateFunction
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
block|}
decl_stmt|;
name|assertTrue
argument_list|(
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"b"
argument_list|,
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"c"
argument_list|,
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertNoMore
argument_list|(
name|it
argument_list|)
expr_stmt|;
block|}
DECL|method|testAll2
specifier|public
name|void
name|testAll2
parameter_list|()
block|{
specifier|final
name|Iterator
argument_list|<
name|String
argument_list|>
name|it
init|=
operator|new
name|FilterIterator
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|(
name|set
operator|.
name|iterator
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|boolean
name|predicateFunction
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
block|}
decl_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"b"
argument_list|,
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"c"
argument_list|,
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertNoMore
argument_list|(
name|it
argument_list|)
expr_stmt|;
block|}
DECL|method|testUnmodifiable
specifier|public
name|void
name|testUnmodifiable
parameter_list|()
block|{
specifier|final
name|Iterator
argument_list|<
name|String
argument_list|>
name|it
init|=
operator|new
name|FilterIterator
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|(
name|set
operator|.
name|iterator
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|boolean
name|predicateFunction
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
block|}
decl_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should throw UnsupportedOperationException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|oue
parameter_list|)
block|{
comment|// pass
block|}
block|}
block|}
end_class
end_unit
