begin_unit
begin_package
DECL|package|org.apache.lucene.util
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|junitcompat
operator|.
name|WithNestedTests
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|JUnitCore
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|Result
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|notification
operator|.
name|Failure
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|notification
operator|.
name|RunListener
import|;
end_import
begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|SysGlobals
import|;
end_import
begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|annotations
operator|.
name|Repeat
import|;
end_import
begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|rules
operator|.
name|SystemPropertiesInvariantRule
import|;
end_import
begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|rules
operator|.
name|SystemPropertiesRestoreRule
import|;
end_import
begin_comment
comment|/**  * @see TestRuleIgnoreAfterMaxFailures  * @see SystemPropertiesInvariantRule  */
end_comment
begin_class
DECL|class|TestMaxFailuresRule
specifier|public
class|class
name|TestMaxFailuresRule
extends|extends
name|WithNestedTests
block|{
annotation|@
name|Rule
DECL|field|restoreSysProps
specifier|public
name|SystemPropertiesRestoreRule
name|restoreSysProps
init|=
operator|new
name|SystemPropertiesRestoreRule
argument_list|()
decl_stmt|;
DECL|method|TestMaxFailuresRule
specifier|public
name|TestMaxFailuresRule
parameter_list|()
block|{
name|super
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|class|Nested
specifier|public
specifier|static
class|class
name|Nested
extends|extends
name|WithNestedTests
operator|.
name|AbstractNestedTest
block|{
annotation|@
name|Repeat
argument_list|(
name|iterations
operator|=
literal|100
argument_list|)
DECL|method|testFailSometimes
specifier|public
name|void
name|testFailSometimes
parameter_list|()
block|{
name|assertFalse
argument_list|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|5
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testMaxFailures
specifier|public
name|void
name|testMaxFailures
parameter_list|()
block|{
name|int
name|maxFailures
init|=
name|LuceneTestCase
operator|.
name|ignoreAfterMaxFailures
operator|.
name|maxFailures
decl_stmt|;
name|int
name|failuresSoFar
init|=
name|LuceneTestCase
operator|.
name|ignoreAfterMaxFailures
operator|.
name|failuresSoFar
decl_stmt|;
name|System
operator|.
name|clearProperty
argument_list|(
name|SysGlobals
operator|.
name|SYSPROP_ITERATIONS
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|LuceneTestCase
operator|.
name|ignoreAfterMaxFailures
operator|.
name|maxFailures
operator|=
literal|2
expr_stmt|;
name|LuceneTestCase
operator|.
name|ignoreAfterMaxFailures
operator|.
name|failuresSoFar
operator|=
literal|0
expr_stmt|;
name|JUnitCore
name|core
init|=
operator|new
name|JUnitCore
argument_list|()
decl_stmt|;
specifier|final
name|int
index|[]
name|assumptions
init|=
operator|new
name|int
index|[
literal|1
index|]
decl_stmt|;
name|core
operator|.
name|addListener
argument_list|(
operator|new
name|RunListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|testAssumptionFailure
parameter_list|(
name|Failure
name|failure
parameter_list|)
block|{
name|assumptions
index|[
literal|0
index|]
operator|++
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|core
operator|.
name|run
argument_list|(
name|Nested
operator|.
name|class
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|100
argument_list|,
name|result
operator|.
name|getRunCount
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
operator|.
name|getIgnoreCount
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|result
operator|.
name|getFailureCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// JUnit doesn't pass back the number of successful tests, just make sure
comment|// we did have enough assumption-failures.
name|Assert
operator|.
name|assertTrue
argument_list|(
name|assumptions
index|[
literal|0
index|]
operator|>
literal|50
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|LuceneTestCase
operator|.
name|ignoreAfterMaxFailures
operator|.
name|maxFailures
operator|=
name|maxFailures
expr_stmt|;
name|LuceneTestCase
operator|.
name|ignoreAfterMaxFailures
operator|.
name|failuresSoFar
operator|=
name|failuresSoFar
expr_stmt|;
block|}
block|}
block|}
end_class
end_unit
