begin_unit
begin_package
DECL|package|org.apache.lucene.util
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
package|;
end_package
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_class
DECL|class|TestDoubleBarrelLRUCache
specifier|public
class|class
name|TestDoubleBarrelLRUCache
extends|extends
name|LuceneTestCase
block|{
DECL|method|testCache
specifier|private
name|void
name|testCache
parameter_list|(
name|DoubleBarrelLRUCache
argument_list|<
name|CloneableInteger
argument_list|,
name|Object
argument_list|>
name|cache
parameter_list|,
name|int
name|n
parameter_list|)
throws|throws
name|Exception
block|{
name|Object
name|dummy
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|cache
operator|.
name|put
argument_list|(
operator|new
name|CloneableInteger
argument_list|(
name|i
argument_list|)
argument_list|,
name|dummy
argument_list|)
expr_stmt|;
block|}
comment|// access every 2nd item in cache
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|+=
literal|2
control|)
block|{
name|assertNotNull
argument_list|(
name|cache
operator|.
name|get
argument_list|(
operator|new
name|CloneableInteger
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// add n/2 elements to cache, the ones that weren't
comment|// touched in the previous loop should now be thrown away
for|for
control|(
name|int
name|i
init|=
name|n
init|;
name|i
operator|<
name|n
operator|+
operator|(
name|n
operator|/
literal|2
operator|)
condition|;
name|i
operator|++
control|)
block|{
name|cache
operator|.
name|put
argument_list|(
operator|new
name|CloneableInteger
argument_list|(
name|i
argument_list|)
argument_list|,
name|dummy
argument_list|)
expr_stmt|;
block|}
comment|// access every 4th item in cache
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|+=
literal|4
control|)
block|{
name|assertNotNull
argument_list|(
name|cache
operator|.
name|get
argument_list|(
operator|new
name|CloneableInteger
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// add 3/4n elements to cache, the ones that weren't
comment|// touched in the previous loops should now be thrown away
for|for
control|(
name|int
name|i
init|=
name|n
init|;
name|i
operator|<
name|n
operator|+
operator|(
name|n
operator|*
literal|3
operator|/
literal|4
operator|)
condition|;
name|i
operator|++
control|)
block|{
name|cache
operator|.
name|put
argument_list|(
operator|new
name|CloneableInteger
argument_list|(
name|i
argument_list|)
argument_list|,
name|dummy
argument_list|)
expr_stmt|;
block|}
comment|// access every 4th item in cache
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|+=
literal|4
control|)
block|{
name|assertNotNull
argument_list|(
name|cache
operator|.
name|get
argument_list|(
operator|new
name|CloneableInteger
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testLRUCache
specifier|public
name|void
name|testLRUCache
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|n
init|=
literal|100
decl_stmt|;
name|testCache
argument_list|(
operator|new
name|DoubleBarrelLRUCache
argument_list|<
name|CloneableInteger
argument_list|,
name|Object
argument_list|>
argument_list|(
name|n
argument_list|)
argument_list|,
name|n
argument_list|)
expr_stmt|;
block|}
DECL|class|CacheThread
specifier|private
class|class
name|CacheThread
extends|extends
name|Thread
block|{
DECL|field|objs
specifier|private
specifier|final
name|CloneableObject
index|[]
name|objs
decl_stmt|;
DECL|field|c
specifier|private
specifier|final
name|DoubleBarrelLRUCache
argument_list|<
name|CloneableObject
argument_list|,
name|Object
argument_list|>
name|c
decl_stmt|;
DECL|field|endTime
specifier|private
specifier|final
name|long
name|endTime
decl_stmt|;
DECL|field|failed
specifier|volatile
name|boolean
name|failed
decl_stmt|;
DECL|method|CacheThread
specifier|public
name|CacheThread
parameter_list|(
name|DoubleBarrelLRUCache
argument_list|<
name|CloneableObject
argument_list|,
name|Object
argument_list|>
name|c
parameter_list|,
name|CloneableObject
index|[]
name|objs
parameter_list|,
name|long
name|endTime
parameter_list|)
block|{
name|this
operator|.
name|c
operator|=
name|c
expr_stmt|;
name|this
operator|.
name|objs
operator|=
name|objs
expr_stmt|;
name|this
operator|.
name|endTime
operator|=
name|endTime
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|long
name|count
init|=
literal|0
decl_stmt|;
name|long
name|miss
init|=
literal|0
decl_stmt|;
name|long
name|hit
init|=
literal|0
decl_stmt|;
specifier|final
name|int
name|limit
init|=
name|objs
operator|.
name|length
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
specifier|final
name|CloneableObject
name|obj
init|=
name|objs
index|[
call|(
name|int
call|)
argument_list|(
operator|(
name|count
operator|/
literal|2
operator|)
operator|%
name|limit
argument_list|)
index|]
decl_stmt|;
name|Object
name|v
init|=
name|c
operator|.
name|get
argument_list|(
name|obj
argument_list|)
decl_stmt|;
if|if
condition|(
name|v
operator|==
literal|null
condition|)
block|{
name|c
operator|.
name|put
argument_list|(
operator|new
name|CloneableObject
argument_list|(
name|obj
argument_list|)
argument_list|,
name|obj
argument_list|)
expr_stmt|;
name|miss
operator|++
expr_stmt|;
block|}
else|else
block|{
assert|assert
name|obj
operator|==
name|v
assert|;
name|hit
operator|++
expr_stmt|;
block|}
if|if
condition|(
operator|(
operator|++
name|count
operator|%
literal|10000
operator|)
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|>=
name|endTime
condition|)
block|{
break|break;
block|}
block|}
block|}
name|addResults
argument_list|(
name|miss
argument_list|,
name|hit
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|failed
operator|=
literal|true
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|t
argument_list|)
throw|;
block|}
block|}
block|}
DECL|field|totMiss
DECL|field|totHit
name|long
name|totMiss
decl_stmt|,
name|totHit
decl_stmt|;
DECL|method|addResults
name|void
name|addResults
parameter_list|(
name|long
name|miss
parameter_list|,
name|long
name|hit
parameter_list|)
block|{
name|totMiss
operator|+=
name|miss
expr_stmt|;
name|totHit
operator|+=
name|hit
expr_stmt|;
block|}
DECL|method|testThreadCorrectness
specifier|public
name|void
name|testThreadCorrectness
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|NUM_THREADS
init|=
literal|4
decl_stmt|;
specifier|final
name|int
name|CACHE_SIZE
init|=
literal|512
decl_stmt|;
specifier|final
name|int
name|OBJ_COUNT
init|=
literal|3
operator|*
name|CACHE_SIZE
decl_stmt|;
name|DoubleBarrelLRUCache
argument_list|<
name|CloneableObject
argument_list|,
name|Object
argument_list|>
name|c
init|=
operator|new
name|DoubleBarrelLRUCache
argument_list|<
name|CloneableObject
argument_list|,
name|Object
argument_list|>
argument_list|(
literal|1024
argument_list|)
decl_stmt|;
name|CloneableObject
index|[]
name|objs
init|=
operator|new
name|CloneableObject
index|[
name|OBJ_COUNT
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|OBJ_COUNT
condition|;
name|i
operator|++
control|)
block|{
name|objs
index|[
name|i
index|]
operator|=
operator|new
name|CloneableObject
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|final
name|CacheThread
index|[]
name|threads
init|=
operator|new
name|CacheThread
index|[
name|NUM_THREADS
index|]
decl_stmt|;
specifier|final
name|long
name|endTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
literal|1000L
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_THREADS
condition|;
name|i
operator|++
control|)
block|{
name|threads
index|[
name|i
index|]
operator|=
operator|new
name|CacheThread
argument_list|(
name|c
argument_list|,
name|objs
argument_list|,
name|endTime
argument_list|)
expr_stmt|;
name|threads
index|[
name|i
index|]
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_THREADS
condition|;
name|i
operator|++
control|)
block|{
name|threads
index|[
name|i
index|]
operator|.
name|join
argument_list|()
expr_stmt|;
assert|assert
operator|!
name|threads
index|[
name|i
index|]
operator|.
name|failed
assert|;
block|}
comment|//System.out.println("hits=" + totHit + " misses=" + totMiss);
block|}
DECL|class|CloneableObject
specifier|private
specifier|static
class|class
name|CloneableObject
extends|extends
name|DoubleBarrelLRUCache
operator|.
name|CloneableKey
block|{
DECL|field|value
specifier|private
name|Object
name|value
decl_stmt|;
DECL|method|CloneableObject
specifier|public
name|CloneableObject
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|other
parameter_list|)
block|{
return|return
name|this
operator|.
name|value
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|CloneableObject
operator|)
name|other
operator|)
operator|.
name|value
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|value
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|clone
specifier|public
name|CloneableObject
name|clone
parameter_list|()
block|{
return|return
operator|new
name|CloneableObject
argument_list|(
name|value
argument_list|)
return|;
block|}
block|}
DECL|class|CloneableInteger
specifier|protected
specifier|static
class|class
name|CloneableInteger
extends|extends
name|DoubleBarrelLRUCache
operator|.
name|CloneableKey
block|{
DECL|field|value
specifier|private
name|Integer
name|value
decl_stmt|;
DECL|method|CloneableInteger
specifier|public
name|CloneableInteger
parameter_list|(
name|Integer
name|value
parameter_list|)
block|{
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|other
parameter_list|)
block|{
return|return
name|this
operator|.
name|value
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|CloneableInteger
operator|)
name|other
operator|)
operator|.
name|value
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|value
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|clone
specifier|public
name|CloneableInteger
name|clone
parameter_list|()
block|{
return|return
operator|new
name|CloneableInteger
argument_list|(
name|value
argument_list|)
return|;
block|}
block|}
block|}
end_class
end_unit
