begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.util
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
package|;
end_package
begin_class
DECL|class|TestBitUtil
specifier|public
class|class
name|TestBitUtil
extends|extends
name|LuceneTestCase
block|{
DECL|method|slowNlz
specifier|private
specifier|static
name|int
name|slowNlz
parameter_list|(
name|long
name|x
parameter_list|)
block|{
if|if
condition|(
name|x
operator|==
literal|0L
condition|)
return|return
literal|64
return|;
name|int
name|nlz
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|(
operator|(
name|x
operator|<<
name|nlz
operator|)
operator|&
operator|(
literal|1L
operator|<<
literal|63
operator|)
operator|)
operator|==
literal|0
condition|)
block|{
name|nlz
operator|++
expr_stmt|;
block|}
return|return
name|nlz
return|;
block|}
DECL|method|checkNlz
specifier|private
name|void
name|checkNlz
parameter_list|(
name|long
name|x
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|slowNlz
argument_list|(
name|x
argument_list|)
argument_list|,
name|BitUtil
operator|.
name|nlz
argument_list|(
name|x
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Long
operator|.
name|numberOfLeadingZeros
argument_list|(
name|x
argument_list|)
argument_list|,
name|BitUtil
operator|.
name|nlz
argument_list|(
name|x
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testNlz
specifier|public
name|void
name|testNlz
parameter_list|()
block|{
name|checkNlz
argument_list|(
literal|0L
argument_list|)
expr_stmt|;
name|checkNlz
argument_list|(
literal|1L
argument_list|)
expr_stmt|;
name|checkNlz
argument_list|(
operator|-
literal|1L
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
literal|63
condition|;
name|i
operator|++
control|)
block|{
name|checkNlz
argument_list|(
literal|1L
operator|<<
name|i
argument_list|)
expr_stmt|;
name|checkNlz
argument_list|(
operator|(
literal|1L
operator|<<
name|i
operator|)
operator|+
operator|(
literal|1L
operator|<<
operator|(
name|i
operator|>>
literal|1
operator|)
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testBitUtils
specifier|public
name|void
name|testBitUtils
parameter_list|()
block|{
name|long
name|num
init|=
literal|100000
decl_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|BitUtil
operator|.
name|ntz
argument_list|(
name|num
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|BitUtil
operator|.
name|ntz2
argument_list|(
name|num
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|BitUtil
operator|.
name|ntz3
argument_list|(
name|num
argument_list|)
argument_list|)
expr_stmt|;
name|num
operator|=
literal|10
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|BitUtil
operator|.
name|ntz
argument_list|(
name|num
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|BitUtil
operator|.
name|ntz2
argument_list|(
name|num
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|BitUtil
operator|.
name|ntz3
argument_list|(
name|num
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|64
condition|;
name|i
operator|++
control|)
block|{
name|num
operator|=
literal|1L
operator|<<
name|i
expr_stmt|;
name|assertEquals
argument_list|(
name|i
argument_list|,
name|BitUtil
operator|.
name|ntz
argument_list|(
name|num
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|i
argument_list|,
name|BitUtil
operator|.
name|ntz2
argument_list|(
name|num
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|i
argument_list|,
name|BitUtil
operator|.
name|ntz3
argument_list|(
name|num
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testArg
specifier|private
name|long
name|testArg
parameter_list|(
name|int
name|shift
parameter_list|)
block|{
return|return
operator|(
literal|1L
operator|<<
name|shift
operator|)
operator|+
operator|(
literal|1L
operator|<<
operator|(
name|shift
operator|>>
literal|1
operator|)
operator|)
return|;
block|}
DECL|method|nlzBitUtilBasicLoop
specifier|private
name|long
name|nlzBitUtilBasicLoop
parameter_list|(
name|int
name|iters
parameter_list|)
block|{
name|long
name|sumRes
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|iters
operator|--
operator|>=
literal|0
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
literal|63
condition|;
name|i
operator|++
control|)
block|{
name|long
name|a
init|=
name|testArg
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|sumRes
operator|+=
name|BitUtil
operator|.
name|nlz
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|sumRes
operator|+=
name|BitUtil
operator|.
name|nlz
argument_list|(
name|a
operator|+
literal|1
argument_list|)
expr_stmt|;
name|sumRes
operator|+=
name|BitUtil
operator|.
name|nlz
argument_list|(
name|a
operator|-
literal|1
argument_list|)
expr_stmt|;
name|sumRes
operator|+=
name|BitUtil
operator|.
name|nlz
argument_list|(
name|a
operator|+
literal|10
argument_list|)
expr_stmt|;
name|sumRes
operator|+=
name|BitUtil
operator|.
name|nlz
argument_list|(
name|a
operator|-
literal|10
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|sumRes
return|;
block|}
DECL|method|nlzLongBasicLoop
specifier|private
name|long
name|nlzLongBasicLoop
parameter_list|(
name|int
name|iters
parameter_list|)
block|{
name|long
name|sumRes
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|iters
operator|--
operator|>=
literal|0
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
literal|63
condition|;
name|i
operator|++
control|)
block|{
name|long
name|a
init|=
name|testArg
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|sumRes
operator|+=
name|Long
operator|.
name|numberOfLeadingZeros
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|sumRes
operator|+=
name|Long
operator|.
name|numberOfLeadingZeros
argument_list|(
name|a
operator|+
literal|1
argument_list|)
expr_stmt|;
name|sumRes
operator|+=
name|Long
operator|.
name|numberOfLeadingZeros
argument_list|(
name|a
operator|-
literal|1
argument_list|)
expr_stmt|;
name|sumRes
operator|+=
name|Long
operator|.
name|numberOfLeadingZeros
argument_list|(
name|a
operator|+
literal|10
argument_list|)
expr_stmt|;
name|sumRes
operator|+=
name|Long
operator|.
name|numberOfLeadingZeros
argument_list|(
name|a
operator|-
literal|10
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|sumRes
return|;
block|}
DECL|method|tstPerfNlz
specifier|public
name|void
name|tstPerfNlz
parameter_list|()
block|{
comment|// See LUCENE-3197, prefer to use Long.numberOfLeadingZeros() over BitUtil.nlz().
specifier|final
name|long
name|measureMilliSecs
init|=
literal|2000
decl_stmt|;
specifier|final
name|int
name|basicIters
init|=
literal|100000
decl_stmt|;
name|long
name|startTime
decl_stmt|;
name|long
name|endTime
decl_stmt|;
name|long
name|curTime
decl_stmt|;
name|long
name|dummy
init|=
literal|0
decl_stmt|;
comment|// avoid optimizing away
name|dummy
operator|=
literal|0
expr_stmt|;
name|int
name|bitUtilLoops
init|=
literal|0
decl_stmt|;
name|startTime
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|endTime
operator|=
name|startTime
operator|+
name|measureMilliSecs
expr_stmt|;
do|do
block|{
name|dummy
operator|+=
name|nlzBitUtilBasicLoop
argument_list|(
name|basicIters
argument_list|)
expr_stmt|;
name|bitUtilLoops
operator|++
expr_stmt|;
name|curTime
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|curTime
operator|<
name|endTime
condition|)
do|;
name|int
name|bitUtilPsTime
init|=
call|(
name|int
call|)
argument_list|(
literal|1000000000
operator|*
operator|(
name|curTime
operator|-
name|startTime
operator|)
operator|/
operator|(
name|basicIters
operator|*
literal|5
operator|*
literal|63
operator|*
operator|(
name|float
operator|)
name|bitUtilLoops
operator|)
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"BitUtil nlz time: "
operator|+
operator|(
name|bitUtilPsTime
operator|/
literal|1
operator|)
operator|+
literal|" picosec/call, dummy: "
operator|+
name|dummy
argument_list|)
expr_stmt|;
name|dummy
operator|=
literal|0
expr_stmt|;
name|int
name|longLoops
init|=
literal|0
decl_stmt|;
name|startTime
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|endTime
operator|=
name|startTime
operator|+
name|measureMilliSecs
expr_stmt|;
do|do
block|{
name|dummy
operator|+=
name|nlzLongBasicLoop
argument_list|(
name|basicIters
argument_list|)
expr_stmt|;
name|longLoops
operator|++
expr_stmt|;
name|curTime
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|curTime
operator|<
name|endTime
condition|)
do|;
name|int
name|longPsTime
init|=
call|(
name|int
call|)
argument_list|(
literal|1000000000
operator|*
operator|(
name|curTime
operator|-
name|startTime
operator|)
operator|/
operator|(
name|basicIters
operator|*
literal|5
operator|*
literal|63
operator|*
operator|(
name|float
operator|)
name|longLoops
operator|)
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Long    nlz time: "
operator|+
name|longPsTime
operator|+
literal|" picosec/call, dummy: "
operator|+
name|dummy
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
