begin_unit
begin_package
DECL|package|org.apache.lucene.util.packed
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|packed
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|LongBuffer
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|CodecUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|ByteArrayDataInput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|DataInput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IOContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexInput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexOutput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|RAMDirectory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LongsRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
operator|.
name|Slow
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|RamUsageEstimator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|_TestUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|packed
operator|.
name|PackedInts
operator|.
name|Reader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import
begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|generators
operator|.
name|RandomInts
import|;
end_import
begin_class
annotation|@
name|Slow
DECL|class|TestPackedInts
specifier|public
class|class
name|TestPackedInts
extends|extends
name|LuceneTestCase
block|{
DECL|method|testByteCount
specifier|public
name|void
name|testByteCount
parameter_list|()
block|{
specifier|final
name|int
name|iters
init|=
name|atLeast
argument_list|(
literal|3
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iters
condition|;
operator|++
name|i
control|)
block|{
specifier|final
name|int
name|valueCount
init|=
name|RandomInts
operator|.
name|randomIntBetween
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
for|for
control|(
name|PackedInts
operator|.
name|Format
name|format
range|:
name|PackedInts
operator|.
name|Format
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|int
name|bpv
init|=
literal|1
init|;
name|bpv
operator|<=
literal|64
condition|;
operator|++
name|bpv
control|)
block|{
specifier|final
name|long
name|byteCount
init|=
name|format
operator|.
name|byteCount
argument_list|(
name|PackedInts
operator|.
name|VERSION_CURRENT
argument_list|,
name|valueCount
argument_list|,
name|bpv
argument_list|)
decl_stmt|;
name|String
name|msg
init|=
literal|"format="
operator|+
name|format
operator|+
literal|", byteCount="
operator|+
name|byteCount
operator|+
literal|", valueCount="
operator|+
name|valueCount
operator|+
literal|", bpv="
operator|+
name|bpv
decl_stmt|;
name|assertTrue
argument_list|(
name|msg
argument_list|,
name|byteCount
operator|*
literal|8
operator|>=
operator|(
name|long
operator|)
name|valueCount
operator|*
name|bpv
argument_list|)
expr_stmt|;
if|if
condition|(
name|format
operator|==
name|PackedInts
operator|.
name|Format
operator|.
name|PACKED
condition|)
block|{
name|assertTrue
argument_list|(
name|msg
argument_list|,
operator|(
name|byteCount
operator|-
literal|1
operator|)
operator|*
literal|8
operator|<
operator|(
name|long
operator|)
name|valueCount
operator|*
name|bpv
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
DECL|method|testBitsRequired
specifier|public
name|void
name|testBitsRequired
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|61
argument_list|,
name|PackedInts
operator|.
name|bitsRequired
argument_list|(
operator|(
name|long
operator|)
name|Math
operator|.
name|pow
argument_list|(
literal|2
argument_list|,
literal|61
argument_list|)
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|61
argument_list|,
name|PackedInts
operator|.
name|bitsRequired
argument_list|(
literal|0x1FFFFFFFFFFFFFFFL
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|62
argument_list|,
name|PackedInts
operator|.
name|bitsRequired
argument_list|(
literal|0x3FFFFFFFFFFFFFFFL
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|63
argument_list|,
name|PackedInts
operator|.
name|bitsRequired
argument_list|(
literal|0x7FFFFFFFFFFFFFFFL
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testMaxValues
specifier|public
name|void
name|testMaxValues
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"1 bit -> max == 1"
argument_list|,
literal|1
argument_list|,
name|PackedInts
operator|.
name|maxValue
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2 bit -> max == 3"
argument_list|,
literal|3
argument_list|,
name|PackedInts
operator|.
name|maxValue
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"8 bit -> max == 255"
argument_list|,
literal|255
argument_list|,
name|PackedInts
operator|.
name|maxValue
argument_list|(
literal|8
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"63 bit -> max == Long.MAX_VALUE"
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|,
name|PackedInts
operator|.
name|maxValue
argument_list|(
literal|63
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"64 bit -> max == Long.MAX_VALUE (same as for 63 bit)"
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|,
name|PackedInts
operator|.
name|maxValue
argument_list|(
literal|64
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testPackedInts
specifier|public
name|void
name|testPackedInts
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|num
init|=
name|atLeast
argument_list|(
literal|3
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|iter
init|=
literal|0
init|;
name|iter
operator|<
name|num
condition|;
name|iter
operator|++
control|)
block|{
for|for
control|(
name|int
name|nbits
init|=
literal|1
init|;
name|nbits
operator|<=
literal|64
condition|;
name|nbits
operator|++
control|)
block|{
specifier|final
name|long
name|maxValue
init|=
name|PackedInts
operator|.
name|maxValue
argument_list|(
name|nbits
argument_list|)
decl_stmt|;
specifier|final
name|int
name|valueCount
init|=
name|_TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|600
argument_list|)
decl_stmt|;
specifier|final
name|int
name|bufferSize
init|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
name|_TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|48
argument_list|)
else|:
name|_TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|4096
argument_list|)
decl_stmt|;
specifier|final
name|Directory
name|d
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexOutput
name|out
init|=
name|d
operator|.
name|createOutput
argument_list|(
literal|"out.bin"
argument_list|,
name|newIOContext
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|PackedInts
operator|.
name|Writer
name|w
init|=
name|PackedInts
operator|.
name|getWriter
argument_list|(
name|out
argument_list|,
name|valueCount
argument_list|,
name|nbits
argument_list|,
name|random
argument_list|()
operator|.
name|nextFloat
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|long
name|startFp
init|=
name|out
operator|.
name|getFilePointer
argument_list|()
decl_stmt|;
specifier|final
name|int
name|actualValueCount
init|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
name|valueCount
else|:
name|_TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|0
argument_list|,
name|valueCount
argument_list|)
decl_stmt|;
specifier|final
name|long
index|[]
name|values
init|=
operator|new
name|long
index|[
name|valueCount
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|actualValueCount
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|nbits
operator|==
literal|64
condition|)
block|{
name|values
index|[
name|i
index|]
operator|=
name|random
argument_list|()
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|values
index|[
name|i
index|]
operator|=
name|_TestUtil
operator|.
name|nextLong
argument_list|(
name|random
argument_list|()
argument_list|,
literal|0
argument_list|,
name|maxValue
argument_list|)
expr_stmt|;
block|}
name|w
operator|.
name|add
argument_list|(
name|values
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|w
operator|.
name|finish
argument_list|()
expr_stmt|;
specifier|final
name|long
name|fp
init|=
name|out
operator|.
name|getFilePointer
argument_list|()
decl_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// ensure that finish() added the (valueCount-actualValueCount) missing values
specifier|final
name|long
name|bytes
init|=
name|w
operator|.
name|getFormat
argument_list|()
operator|.
name|byteCount
argument_list|(
name|PackedInts
operator|.
name|VERSION_CURRENT
argument_list|,
name|valueCount
argument_list|,
name|w
operator|.
name|bitsPerValue
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|bytes
argument_list|,
name|fp
operator|-
name|startFp
argument_list|)
expr_stmt|;
block|{
comment|// test header
name|IndexInput
name|in
init|=
name|d
operator|.
name|openInput
argument_list|(
literal|"out.bin"
argument_list|,
name|newIOContext
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
comment|// header = codec header | bitsPerValue | valueCount | format
name|CodecUtil
operator|.
name|checkHeader
argument_list|(
name|in
argument_list|,
name|PackedInts
operator|.
name|CODEC_NAME
argument_list|,
name|PackedInts
operator|.
name|VERSION_START
argument_list|,
name|PackedInts
operator|.
name|VERSION_CURRENT
argument_list|)
expr_stmt|;
comment|// codec header
name|assertEquals
argument_list|(
name|w
operator|.
name|bitsPerValue
argument_list|,
name|in
operator|.
name|readVInt
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|valueCount
argument_list|,
name|in
operator|.
name|readVInt
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|w
operator|.
name|getFormat
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|in
operator|.
name|readVInt
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|startFp
argument_list|,
name|in
operator|.
name|getFilePointer
argument_list|()
argument_list|)
expr_stmt|;
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|{
comment|// test reader
name|IndexInput
name|in
init|=
name|d
operator|.
name|openInput
argument_list|(
literal|"out.bin"
argument_list|,
name|newIOContext
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|PackedInts
operator|.
name|Reader
name|r
init|=
name|PackedInts
operator|.
name|getReader
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|fp
argument_list|,
name|in
operator|.
name|getFilePointer
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|valueCount
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
literal|"index="
operator|+
name|i
operator|+
literal|" valueCount="
operator|+
name|valueCount
operator|+
literal|" nbits="
operator|+
name|nbits
operator|+
literal|" for "
operator|+
name|r
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|values
index|[
name|i
index|]
argument_list|,
name|r
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
specifier|final
name|long
name|expectedBytesUsed
init|=
name|RamUsageEstimator
operator|.
name|sizeOf
argument_list|(
name|r
argument_list|)
decl_stmt|;
specifier|final
name|long
name|computedBytesUsed
init|=
name|r
operator|.
name|ramBytesUsed
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|r
operator|.
name|getClass
argument_list|()
operator|+
literal|"expected "
operator|+
name|expectedBytesUsed
operator|+
literal|", got: "
operator|+
name|computedBytesUsed
argument_list|,
name|expectedBytesUsed
argument_list|,
name|computedBytesUsed
argument_list|)
expr_stmt|;
block|}
block|{
comment|// test reader iterator next
name|IndexInput
name|in
init|=
name|d
operator|.
name|openInput
argument_list|(
literal|"out.bin"
argument_list|,
name|newIOContext
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|PackedInts
operator|.
name|ReaderIterator
name|r
init|=
name|PackedInts
operator|.
name|getReaderIterator
argument_list|(
name|in
argument_list|,
name|bufferSize
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|valueCount
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
literal|"index="
operator|+
name|i
operator|+
literal|" valueCount="
operator|+
name|valueCount
operator|+
literal|" nbits="
operator|+
name|nbits
operator|+
literal|" for "
operator|+
name|r
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|values
index|[
name|i
index|]
argument_list|,
name|r
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|i
argument_list|,
name|r
operator|.
name|ord
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|fp
argument_list|,
name|in
operator|.
name|getFilePointer
argument_list|()
argument_list|)
expr_stmt|;
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|{
comment|// test reader iterator bulk next
name|IndexInput
name|in
init|=
name|d
operator|.
name|openInput
argument_list|(
literal|"out.bin"
argument_list|,
name|newIOContext
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|PackedInts
operator|.
name|ReaderIterator
name|r
init|=
name|PackedInts
operator|.
name|getReaderIterator
argument_list|(
name|in
argument_list|,
name|bufferSize
argument_list|)
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|i
operator|<
name|valueCount
condition|)
block|{
specifier|final
name|int
name|count
init|=
name|_TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|95
argument_list|)
decl_stmt|;
specifier|final
name|LongsRef
name|next
init|=
name|r
operator|.
name|next
argument_list|(
name|count
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|next
operator|.
name|length
condition|;
operator|++
name|k
control|)
block|{
name|assertEquals
argument_list|(
literal|"index="
operator|+
name|i
operator|+
literal|" valueCount="
operator|+
name|valueCount
operator|+
literal|" nbits="
operator|+
name|nbits
operator|+
literal|" for "
operator|+
name|r
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|values
index|[
name|i
operator|+
name|k
index|]
argument_list|,
name|next
operator|.
name|longs
index|[
name|next
operator|.
name|offset
operator|+
name|k
index|]
argument_list|)
expr_stmt|;
block|}
name|i
operator|+=
name|next
operator|.
name|length
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|fp
argument_list|,
name|in
operator|.
name|getFilePointer
argument_list|()
argument_list|)
expr_stmt|;
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|{
comment|// test direct reader get
name|IndexInput
name|in
init|=
name|d
operator|.
name|openInput
argument_list|(
literal|"out.bin"
argument_list|,
name|newIOContext
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|PackedInts
operator|.
name|Reader
name|intsEnum
init|=
name|PackedInts
operator|.
name|getDirectReader
argument_list|(
name|in
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|valueCount
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|String
name|msg
init|=
literal|"index="
operator|+
name|i
operator|+
literal|" valueCount="
operator|+
name|valueCount
operator|+
literal|" nbits="
operator|+
name|nbits
operator|+
literal|" for "
operator|+
name|intsEnum
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
decl_stmt|;
specifier|final
name|int
name|index
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|valueCount
argument_list|)
decl_stmt|;
name|long
name|value
init|=
name|intsEnum
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|msg
argument_list|,
name|value
argument_list|,
name|values
index|[
name|index
index|]
argument_list|)
expr_stmt|;
block|}
name|intsEnum
operator|.
name|get
argument_list|(
name|intsEnum
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|fp
argument_list|,
name|in
operator|.
name|getFilePointer
argument_list|()
argument_list|)
expr_stmt|;
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|d
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|testEndPointer
specifier|public
name|void
name|testEndPointer
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
specifier|final
name|int
name|valueCount
init|=
name|RandomInts
operator|.
name|randomIntBetween
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|1000
argument_list|)
decl_stmt|;
specifier|final
name|IndexOutput
name|out
init|=
name|dir
operator|.
name|createOutput
argument_list|(
literal|"tests.bin"
argument_list|,
name|newIOContext
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|valueCount
condition|;
operator|++
name|i
control|)
block|{
name|out
operator|.
name|writeLong
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
specifier|final
name|IndexInput
name|in
init|=
name|dir
operator|.
name|openInput
argument_list|(
literal|"tests.bin"
argument_list|,
name|newIOContext
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|version
init|=
name|PackedInts
operator|.
name|VERSION_START
init|;
name|version
operator|<=
name|PackedInts
operator|.
name|VERSION_CURRENT
condition|;
operator|++
name|version
control|)
block|{
for|for
control|(
name|int
name|bpv
init|=
literal|1
init|;
name|bpv
operator|<=
literal|64
condition|;
operator|++
name|bpv
control|)
block|{
for|for
control|(
name|PackedInts
operator|.
name|Format
name|format
range|:
name|PackedInts
operator|.
name|Format
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|format
operator|.
name|isSupported
argument_list|(
name|bpv
argument_list|)
condition|)
block|{
continue|continue;
block|}
specifier|final
name|long
name|byteCount
init|=
name|format
operator|.
name|byteCount
argument_list|(
name|version
argument_list|,
name|valueCount
argument_list|,
name|bpv
argument_list|)
decl_stmt|;
name|String
name|msg
init|=
literal|"format="
operator|+
name|format
operator|+
literal|",version="
operator|+
name|version
operator|+
literal|",valueCount="
operator|+
name|valueCount
operator|+
literal|",bpv="
operator|+
name|bpv
decl_stmt|;
comment|// test iterator
name|in
operator|.
name|seek
argument_list|(
literal|0L
argument_list|)
expr_stmt|;
specifier|final
name|PackedInts
operator|.
name|ReaderIterator
name|it
init|=
name|PackedInts
operator|.
name|getReaderIteratorNoHeader
argument_list|(
name|in
argument_list|,
name|format
argument_list|,
name|version
argument_list|,
name|valueCount
argument_list|,
name|bpv
argument_list|,
name|RandomInts
operator|.
name|randomIntBetween
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|1
operator|<<
literal|16
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|valueCount
condition|;
operator|++
name|i
control|)
block|{
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|msg
argument_list|,
name|byteCount
argument_list|,
name|in
operator|.
name|getFilePointer
argument_list|()
argument_list|)
expr_stmt|;
comment|// test direct reader
name|in
operator|.
name|seek
argument_list|(
literal|0L
argument_list|)
expr_stmt|;
specifier|final
name|PackedInts
operator|.
name|Reader
name|directReader
init|=
name|PackedInts
operator|.
name|getDirectReaderNoHeader
argument_list|(
name|in
argument_list|,
name|format
argument_list|,
name|version
argument_list|,
name|valueCount
argument_list|,
name|bpv
argument_list|)
decl_stmt|;
name|directReader
operator|.
name|get
argument_list|(
name|valueCount
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|msg
argument_list|,
name|byteCount
argument_list|,
name|in
operator|.
name|getFilePointer
argument_list|()
argument_list|)
expr_stmt|;
comment|// test reader
name|in
operator|.
name|seek
argument_list|(
literal|0L
argument_list|)
expr_stmt|;
name|PackedInts
operator|.
name|getReaderNoHeader
argument_list|(
name|in
argument_list|,
name|format
argument_list|,
name|version
argument_list|,
name|valueCount
argument_list|,
name|bpv
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|msg
argument_list|,
name|byteCount
argument_list|,
name|in
operator|.
name|getFilePointer
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testControlledEquality
specifier|public
name|void
name|testControlledEquality
parameter_list|()
block|{
specifier|final
name|int
name|VALUE_COUNT
init|=
literal|255
decl_stmt|;
specifier|final
name|int
name|BITS_PER_VALUE
init|=
literal|8
decl_stmt|;
name|List
argument_list|<
name|PackedInts
operator|.
name|Mutable
argument_list|>
name|packedInts
init|=
name|createPackedInts
argument_list|(
name|VALUE_COUNT
argument_list|,
name|BITS_PER_VALUE
argument_list|)
decl_stmt|;
for|for
control|(
name|PackedInts
operator|.
name|Mutable
name|packedInt
range|:
name|packedInts
control|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|packedInt
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|packedInt
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|i
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
name|assertListEquality
argument_list|(
name|packedInts
argument_list|)
expr_stmt|;
block|}
DECL|method|testRandomBulkCopy
specifier|public
name|void
name|testRandomBulkCopy
parameter_list|()
block|{
specifier|final
name|int
name|numIters
init|=
name|atLeast
argument_list|(
literal|3
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|iter
init|=
literal|0
init|;
name|iter
operator|<
name|numIters
condition|;
name|iter
operator|++
control|)
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\nTEST: iter="
operator|+
name|iter
argument_list|)
expr_stmt|;
block|}
specifier|final
name|int
name|valueCount
init|=
name|atLeast
argument_list|(
literal|100000
argument_list|)
decl_stmt|;
name|int
name|bits1
init|=
name|_TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|64
argument_list|)
decl_stmt|;
name|int
name|bits2
init|=
name|_TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|64
argument_list|)
decl_stmt|;
if|if
condition|(
name|bits1
operator|>
name|bits2
condition|)
block|{
name|int
name|tmp
init|=
name|bits1
decl_stmt|;
name|bits1
operator|=
name|bits2
expr_stmt|;
name|bits2
operator|=
name|tmp
expr_stmt|;
block|}
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  valueCount="
operator|+
name|valueCount
operator|+
literal|" bits1="
operator|+
name|bits1
operator|+
literal|" bits2="
operator|+
name|bits2
argument_list|)
expr_stmt|;
block|}
specifier|final
name|PackedInts
operator|.
name|Mutable
name|packed1
init|=
name|PackedInts
operator|.
name|getMutable
argument_list|(
name|valueCount
argument_list|,
name|bits1
argument_list|,
name|PackedInts
operator|.
name|COMPACT
argument_list|)
decl_stmt|;
specifier|final
name|PackedInts
operator|.
name|Mutable
name|packed2
init|=
name|PackedInts
operator|.
name|getMutable
argument_list|(
name|valueCount
argument_list|,
name|bits2
argument_list|,
name|PackedInts
operator|.
name|COMPACT
argument_list|)
decl_stmt|;
specifier|final
name|long
name|maxValue
init|=
name|PackedInts
operator|.
name|maxValue
argument_list|(
name|bits1
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|valueCount
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|long
name|val
init|=
name|_TestUtil
operator|.
name|nextLong
argument_list|(
name|random
argument_list|()
argument_list|,
literal|0
argument_list|,
name|maxValue
argument_list|)
decl_stmt|;
name|packed1
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|val
argument_list|)
expr_stmt|;
name|packed2
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
specifier|final
name|long
index|[]
name|buffer
init|=
operator|new
name|long
index|[
name|valueCount
index|]
decl_stmt|;
comment|// Copy random slice over, 20 times:
for|for
control|(
name|int
name|iter2
init|=
literal|0
init|;
name|iter2
operator|<
literal|20
condition|;
name|iter2
operator|++
control|)
block|{
name|int
name|start
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|valueCount
operator|-
literal|1
argument_list|)
decl_stmt|;
name|int
name|len
init|=
name|_TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
name|valueCount
operator|-
name|start
argument_list|)
decl_stmt|;
name|int
name|offset
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  copy "
operator|+
name|len
operator|+
literal|" values @ "
operator|+
name|start
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|len
operator|==
name|valueCount
condition|)
block|{
name|offset
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
name|offset
operator|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|valueCount
operator|-
name|len
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|int
name|got
init|=
name|packed1
operator|.
name|get
argument_list|(
name|start
argument_list|,
name|buffer
argument_list|,
name|offset
argument_list|,
name|len
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|got
operator|<=
name|len
argument_list|)
expr_stmt|;
name|int
name|sot
init|=
name|packed2
operator|.
name|set
argument_list|(
name|start
argument_list|,
name|buffer
argument_list|,
name|offset
argument_list|,
name|got
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|sot
operator|<=
name|got
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|PackedInts
operator|.
name|copy
argument_list|(
name|packed1
argument_list|,
name|offset
argument_list|,
name|packed2
argument_list|,
name|offset
argument_list|,
name|len
argument_list|,
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|10
operator|*
name|len
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/*         for(int i=0;i<valueCount;i++) {           assertEquals("value " + i, packed1.get(i), packed2.get(i));         }         */
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|valueCount
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
literal|"value "
operator|+
name|i
argument_list|,
name|packed1
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|packed2
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testRandomEquality
specifier|public
name|void
name|testRandomEquality
parameter_list|()
block|{
specifier|final
name|int
name|numIters
init|=
name|atLeast
argument_list|(
literal|2
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numIters
condition|;
operator|++
name|i
control|)
block|{
specifier|final
name|int
name|valueCount
init|=
name|_TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|300
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|bitsPerValue
init|=
literal|1
init|;
name|bitsPerValue
operator|<=
literal|64
condition|;
name|bitsPerValue
operator|++
control|)
block|{
name|assertRandomEquality
argument_list|(
name|valueCount
argument_list|,
name|bitsPerValue
argument_list|,
name|random
argument_list|()
operator|.
name|nextLong
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|assertRandomEquality
specifier|private
specifier|static
name|void
name|assertRandomEquality
parameter_list|(
name|int
name|valueCount
parameter_list|,
name|int
name|bitsPerValue
parameter_list|,
name|long
name|randomSeed
parameter_list|)
block|{
name|List
argument_list|<
name|PackedInts
operator|.
name|Mutable
argument_list|>
name|packedInts
init|=
name|createPackedInts
argument_list|(
name|valueCount
argument_list|,
name|bitsPerValue
argument_list|)
decl_stmt|;
for|for
control|(
name|PackedInts
operator|.
name|Mutable
name|packedInt
range|:
name|packedInts
control|)
block|{
try|try
block|{
name|fill
argument_list|(
name|packedInt
argument_list|,
name|PackedInts
operator|.
name|maxValue
argument_list|(
name|bitsPerValue
argument_list|)
argument_list|,
name|randomSeed
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|(
name|System
operator|.
name|err
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"Exception while filling %s: valueCount=%d, bitsPerValue=%s"
argument_list|,
name|packedInt
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|valueCount
argument_list|,
name|bitsPerValue
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|assertListEquality
argument_list|(
name|packedInts
argument_list|)
expr_stmt|;
block|}
DECL|method|createPackedInts
specifier|private
specifier|static
name|List
argument_list|<
name|PackedInts
operator|.
name|Mutable
argument_list|>
name|createPackedInts
parameter_list|(
name|int
name|valueCount
parameter_list|,
name|int
name|bitsPerValue
parameter_list|)
block|{
name|List
argument_list|<
name|PackedInts
operator|.
name|Mutable
argument_list|>
name|packedInts
init|=
operator|new
name|ArrayList
argument_list|<
name|PackedInts
operator|.
name|Mutable
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|bitsPerValue
operator|<=
literal|8
condition|)
block|{
name|packedInts
operator|.
name|add
argument_list|(
operator|new
name|Direct8
argument_list|(
name|valueCount
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|bitsPerValue
operator|<=
literal|16
condition|)
block|{
name|packedInts
operator|.
name|add
argument_list|(
operator|new
name|Direct16
argument_list|(
name|valueCount
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|bitsPerValue
operator|<=
literal|24
operator|&&
name|valueCount
operator|<=
name|Packed8ThreeBlocks
operator|.
name|MAX_SIZE
condition|)
block|{
name|packedInts
operator|.
name|add
argument_list|(
operator|new
name|Packed8ThreeBlocks
argument_list|(
name|valueCount
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|bitsPerValue
operator|<=
literal|32
condition|)
block|{
name|packedInts
operator|.
name|add
argument_list|(
operator|new
name|Direct32
argument_list|(
name|valueCount
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|bitsPerValue
operator|<=
literal|48
operator|&&
name|valueCount
operator|<=
name|Packed16ThreeBlocks
operator|.
name|MAX_SIZE
condition|)
block|{
name|packedInts
operator|.
name|add
argument_list|(
operator|new
name|Packed16ThreeBlocks
argument_list|(
name|valueCount
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|bitsPerValue
operator|<=
literal|63
condition|)
block|{
name|packedInts
operator|.
name|add
argument_list|(
operator|new
name|Packed64
argument_list|(
name|valueCount
argument_list|,
name|bitsPerValue
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|packedInts
operator|.
name|add
argument_list|(
operator|new
name|Direct64
argument_list|(
name|valueCount
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|bpv
init|=
name|bitsPerValue
init|;
name|bpv
operator|<=
name|Packed64SingleBlock
operator|.
name|MAX_SUPPORTED_BITS_PER_VALUE
condition|;
operator|++
name|bpv
control|)
block|{
if|if
condition|(
name|Packed64SingleBlock
operator|.
name|isSupported
argument_list|(
name|bpv
argument_list|)
condition|)
block|{
name|packedInts
operator|.
name|add
argument_list|(
name|Packed64SingleBlock
operator|.
name|create
argument_list|(
name|valueCount
argument_list|,
name|bpv
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|packedInts
return|;
block|}
DECL|method|fill
specifier|private
specifier|static
name|void
name|fill
parameter_list|(
name|PackedInts
operator|.
name|Mutable
name|packedInt
parameter_list|,
name|long
name|maxValue
parameter_list|,
name|long
name|randomSeed
parameter_list|)
block|{
name|Random
name|rnd2
init|=
operator|new
name|Random
argument_list|(
name|randomSeed
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|packedInt
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|long
name|value
init|=
name|_TestUtil
operator|.
name|nextLong
argument_list|(
name|rnd2
argument_list|,
literal|0
argument_list|,
name|maxValue
argument_list|)
decl_stmt|;
name|packedInt
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"The set/get of the value at index %d should match for %s"
argument_list|,
name|i
argument_list|,
name|packedInt
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
argument_list|,
name|value
argument_list|,
name|packedInt
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|assertListEquality
specifier|private
specifier|static
name|void
name|assertListEquality
parameter_list|(
name|List
argument_list|<
name|?
extends|extends
name|PackedInts
operator|.
name|Reader
argument_list|>
name|packedInts
parameter_list|)
block|{
name|assertListEquality
argument_list|(
literal|""
argument_list|,
name|packedInts
argument_list|)
expr_stmt|;
block|}
DECL|method|assertListEquality
specifier|private
specifier|static
name|void
name|assertListEquality
parameter_list|(
name|String
name|message
parameter_list|,
name|List
argument_list|<
name|?
extends|extends
name|PackedInts
operator|.
name|Reader
argument_list|>
name|packedInts
parameter_list|)
block|{
if|if
condition|(
name|packedInts
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return;
block|}
name|PackedInts
operator|.
name|Reader
name|base
init|=
name|packedInts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|int
name|valueCount
init|=
name|base
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|PackedInts
operator|.
name|Reader
name|packedInt
range|:
name|packedInts
control|)
block|{
name|assertEquals
argument_list|(
name|message
operator|+
literal|". The number of values should be the same "
argument_list|,
name|valueCount
argument_list|,
name|packedInt
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|valueCount
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|1
init|;
name|j
operator|<
name|packedInts
operator|.
name|size
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"%s. The value at index %d should be the same for %s and %s"
argument_list|,
name|message
argument_list|,
name|i
argument_list|,
name|base
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|packedInts
operator|.
name|get
argument_list|(
name|j
argument_list|)
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
argument_list|,
name|base
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|packedInts
operator|.
name|get
argument_list|(
name|j
argument_list|)
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testSingleValue
specifier|public
name|void
name|testSingleValue
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|bitsPerValue
init|=
literal|1
init|;
name|bitsPerValue
operator|<=
literal|64
condition|;
operator|++
name|bitsPerValue
control|)
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexOutput
name|out
init|=
name|dir
operator|.
name|createOutput
argument_list|(
literal|"out"
argument_list|,
name|newIOContext
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|PackedInts
operator|.
name|Writer
name|w
init|=
name|PackedInts
operator|.
name|getWriter
argument_list|(
name|out
argument_list|,
literal|1
argument_list|,
name|bitsPerValue
argument_list|,
name|PackedInts
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
name|long
name|value
init|=
literal|17L
operator|&
name|PackedInts
operator|.
name|maxValue
argument_list|(
name|bitsPerValue
argument_list|)
decl_stmt|;
name|w
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|w
operator|.
name|finish
argument_list|()
expr_stmt|;
specifier|final
name|long
name|end
init|=
name|out
operator|.
name|getFilePointer
argument_list|()
decl_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|IndexInput
name|in
init|=
name|dir
operator|.
name|openInput
argument_list|(
literal|"out"
argument_list|,
name|newIOContext
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Reader
name|reader
init|=
name|PackedInts
operator|.
name|getReader
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|String
name|msg
init|=
literal|"Impl="
operator|+
name|w
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|", bitsPerValue="
operator|+
name|bitsPerValue
decl_stmt|;
name|assertEquals
argument_list|(
name|msg
argument_list|,
literal|1
argument_list|,
name|reader
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|msg
argument_list|,
name|value
argument_list|,
name|reader
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|msg
argument_list|,
name|end
argument_list|,
name|in
operator|.
name|getFilePointer
argument_list|()
argument_list|)
expr_stmt|;
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|testSecondaryBlockChange
specifier|public
name|void
name|testSecondaryBlockChange
parameter_list|()
block|{
name|PackedInts
operator|.
name|Mutable
name|mutable
init|=
operator|new
name|Packed64
argument_list|(
literal|26
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|mutable
operator|.
name|set
argument_list|(
literal|24
argument_list|,
literal|31
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"The value #24 should be correct"
argument_list|,
literal|31
argument_list|,
name|mutable
operator|.
name|get
argument_list|(
literal|24
argument_list|)
argument_list|)
expr_stmt|;
name|mutable
operator|.
name|set
argument_list|(
literal|4
argument_list|,
literal|16
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"The value #24 should remain unchanged"
argument_list|,
literal|31
argument_list|,
name|mutable
operator|.
name|get
argument_list|(
literal|24
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/*     Check if the structures properly handle the case where     index * bitsPerValue> Integer.MAX_VALUE          NOTE: this test allocates 256 MB    */
annotation|@
name|Ignore
argument_list|(
literal|"See LUCENE-4488"
argument_list|)
DECL|method|testIntOverflow
specifier|public
name|void
name|testIntOverflow
parameter_list|()
block|{
name|int
name|INDEX
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|pow
argument_list|(
literal|2
argument_list|,
literal|30
argument_list|)
operator|+
literal|1
decl_stmt|;
name|int
name|BITS
init|=
literal|2
decl_stmt|;
name|Packed64
name|p64
init|=
literal|null
decl_stmt|;
try|try
block|{
name|p64
operator|=
operator|new
name|Packed64
argument_list|(
name|INDEX
argument_list|,
name|BITS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OutOfMemoryError
name|oome
parameter_list|)
block|{
comment|// This can easily happen: we're allocating a
comment|// long[] that needs 256-273 MB.  Heap is 512 MB,
comment|// but not all of that is available for large
comment|// objects ... empirical testing shows we only
comment|// have ~ 67 MB free.
block|}
if|if
condition|(
name|p64
operator|!=
literal|null
condition|)
block|{
name|p64
operator|.
name|set
argument_list|(
name|INDEX
operator|-
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"The value at position "
operator|+
operator|(
name|INDEX
operator|-
literal|1
operator|)
operator|+
literal|" should be correct for Packed64"
argument_list|,
literal|1
argument_list|,
name|p64
operator|.
name|get
argument_list|(
name|INDEX
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|p64
operator|=
literal|null
expr_stmt|;
block|}
name|Packed64SingleBlock
name|p64sb
init|=
literal|null
decl_stmt|;
try|try
block|{
name|p64sb
operator|=
name|Packed64SingleBlock
operator|.
name|create
argument_list|(
name|INDEX
argument_list|,
name|BITS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OutOfMemoryError
name|oome
parameter_list|)
block|{
comment|// Ignore: see comment above
block|}
if|if
condition|(
name|p64sb
operator|!=
literal|null
condition|)
block|{
name|p64sb
operator|.
name|set
argument_list|(
name|INDEX
operator|-
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"The value at position "
operator|+
operator|(
name|INDEX
operator|-
literal|1
operator|)
operator|+
literal|" should be correct for "
operator|+
name|p64sb
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|,
literal|1
argument_list|,
name|p64sb
operator|.
name|get
argument_list|(
name|INDEX
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|int
name|index
init|=
name|Integer
operator|.
name|MAX_VALUE
operator|/
literal|24
operator|+
literal|1
decl_stmt|;
name|Packed8ThreeBlocks
name|p8
init|=
literal|null
decl_stmt|;
try|try
block|{
name|p8
operator|=
operator|new
name|Packed8ThreeBlocks
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OutOfMemoryError
name|oome
parameter_list|)
block|{
comment|// Ignore: see comment above
block|}
if|if
condition|(
name|p8
operator|!=
literal|null
condition|)
block|{
name|p8
operator|.
name|set
argument_list|(
name|index
operator|-
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"The value at position "
operator|+
operator|(
name|index
operator|-
literal|1
operator|)
operator|+
literal|" should be correct for Packed8ThreeBlocks"
argument_list|,
literal|1
argument_list|,
name|p8
operator|.
name|get
argument_list|(
name|index
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|p8
operator|=
literal|null
expr_stmt|;
block|}
name|index
operator|=
name|Integer
operator|.
name|MAX_VALUE
operator|/
literal|48
operator|+
literal|1
expr_stmt|;
name|Packed16ThreeBlocks
name|p16
init|=
literal|null
decl_stmt|;
try|try
block|{
name|p16
operator|=
operator|new
name|Packed16ThreeBlocks
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OutOfMemoryError
name|oome
parameter_list|)
block|{
comment|// Ignore: see comment above
block|}
if|if
condition|(
name|p16
operator|!=
literal|null
condition|)
block|{
name|p16
operator|.
name|set
argument_list|(
name|index
operator|-
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"The value at position "
operator|+
operator|(
name|index
operator|-
literal|1
operator|)
operator|+
literal|" should be correct for Packed16ThreeBlocks"
argument_list|,
literal|1
argument_list|,
name|p16
operator|.
name|get
argument_list|(
name|index
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|p16
operator|=
literal|null
expr_stmt|;
block|}
block|}
DECL|method|testFill
specifier|public
name|void
name|testFill
parameter_list|()
block|{
specifier|final
name|int
name|valueCount
init|=
literal|1111
decl_stmt|;
specifier|final
name|int
name|from
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|valueCount
operator|+
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|int
name|to
init|=
name|from
operator|+
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|valueCount
operator|+
literal|1
operator|-
name|from
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|bpv
init|=
literal|1
init|;
name|bpv
operator|<=
literal|64
condition|;
operator|++
name|bpv
control|)
block|{
specifier|final
name|long
name|val
init|=
name|_TestUtil
operator|.
name|nextLong
argument_list|(
name|random
argument_list|()
argument_list|,
literal|0
argument_list|,
name|PackedInts
operator|.
name|maxValue
argument_list|(
name|bpv
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|PackedInts
operator|.
name|Mutable
argument_list|>
name|packedInts
init|=
name|createPackedInts
argument_list|(
name|valueCount
argument_list|,
name|bpv
argument_list|)
decl_stmt|;
for|for
control|(
name|PackedInts
operator|.
name|Mutable
name|ints
range|:
name|packedInts
control|)
block|{
name|String
name|msg
init|=
name|ints
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" bpv="
operator|+
name|bpv
operator|+
literal|", from="
operator|+
name|from
operator|+
literal|", to="
operator|+
name|to
operator|+
literal|", val="
operator|+
name|val
decl_stmt|;
name|ints
operator|.
name|fill
argument_list|(
literal|0
argument_list|,
name|ints
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|ints
operator|.
name|fill
argument_list|(
name|from
argument_list|,
name|to
argument_list|,
name|val
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ints
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|i
operator|>=
name|from
operator|&&
name|i
operator|<
name|to
condition|)
block|{
name|assertEquals
argument_list|(
name|msg
operator|+
literal|", i="
operator|+
name|i
argument_list|,
name|val
argument_list|,
name|ints
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
name|msg
operator|+
literal|", i="
operator|+
name|i
argument_list|,
literal|1
argument_list|,
name|ints
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
DECL|method|testBulkGet
specifier|public
name|void
name|testBulkGet
parameter_list|()
block|{
specifier|final
name|int
name|valueCount
init|=
literal|1111
decl_stmt|;
specifier|final
name|int
name|index
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|valueCount
argument_list|)
decl_stmt|;
specifier|final
name|int
name|len
init|=
name|_TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
name|valueCount
operator|*
literal|2
argument_list|)
decl_stmt|;
specifier|final
name|int
name|off
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|77
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|bpv
init|=
literal|1
init|;
name|bpv
operator|<=
literal|64
condition|;
operator|++
name|bpv
control|)
block|{
name|long
name|mask
init|=
name|PackedInts
operator|.
name|maxValue
argument_list|(
name|bpv
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|PackedInts
operator|.
name|Mutable
argument_list|>
name|packedInts
init|=
name|createPackedInts
argument_list|(
name|valueCount
argument_list|,
name|bpv
argument_list|)
decl_stmt|;
for|for
control|(
name|PackedInts
operator|.
name|Mutable
name|ints
range|:
name|packedInts
control|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ints
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|ints
operator|.
name|set
argument_list|(
name|i
argument_list|,
operator|(
literal|31L
operator|*
name|i
operator|-
literal|1099
operator|)
operator|&
name|mask
argument_list|)
expr_stmt|;
block|}
name|long
index|[]
name|arr
init|=
operator|new
name|long
index|[
name|off
operator|+
name|len
index|]
decl_stmt|;
name|String
name|msg
init|=
name|ints
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" valueCount="
operator|+
name|valueCount
operator|+
literal|", index="
operator|+
name|index
operator|+
literal|", len="
operator|+
name|len
operator|+
literal|", off="
operator|+
name|off
decl_stmt|;
specifier|final
name|int
name|gets
init|=
name|ints
operator|.
name|get
argument_list|(
name|index
argument_list|,
name|arr
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|msg
argument_list|,
name|gets
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|msg
argument_list|,
name|gets
operator|<=
name|len
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|msg
argument_list|,
name|gets
operator|<=
name|ints
operator|.
name|size
argument_list|()
operator|-
name|index
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|arr
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|String
name|m
init|=
name|msg
operator|+
literal|", i="
operator|+
name|i
decl_stmt|;
if|if
condition|(
name|i
operator|>=
name|off
operator|&&
name|i
operator|<
name|off
operator|+
name|gets
condition|)
block|{
name|assertEquals
argument_list|(
name|m
argument_list|,
name|ints
operator|.
name|get
argument_list|(
name|i
operator|-
name|off
operator|+
name|index
argument_list|)
argument_list|,
name|arr
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
name|m
argument_list|,
literal|0
argument_list|,
name|arr
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
DECL|method|testBulkSet
specifier|public
name|void
name|testBulkSet
parameter_list|()
block|{
specifier|final
name|int
name|valueCount
init|=
literal|1111
decl_stmt|;
specifier|final
name|int
name|index
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|valueCount
argument_list|)
decl_stmt|;
specifier|final
name|int
name|len
init|=
name|_TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
name|valueCount
operator|*
literal|2
argument_list|)
decl_stmt|;
specifier|final
name|int
name|off
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|77
argument_list|)
decl_stmt|;
name|long
index|[]
name|arr
init|=
operator|new
name|long
index|[
name|off
operator|+
name|len
index|]
decl_stmt|;
for|for
control|(
name|int
name|bpv
init|=
literal|1
init|;
name|bpv
operator|<=
literal|64
condition|;
operator|++
name|bpv
control|)
block|{
name|long
name|mask
init|=
name|PackedInts
operator|.
name|maxValue
argument_list|(
name|bpv
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|PackedInts
operator|.
name|Mutable
argument_list|>
name|packedInts
init|=
name|createPackedInts
argument_list|(
name|valueCount
argument_list|,
name|bpv
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|arr
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|arr
index|[
name|i
index|]
operator|=
operator|(
literal|31L
operator|*
name|i
operator|+
literal|19
operator|)
operator|&
name|mask
expr_stmt|;
block|}
for|for
control|(
name|PackedInts
operator|.
name|Mutable
name|ints
range|:
name|packedInts
control|)
block|{
name|String
name|msg
init|=
name|ints
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" valueCount="
operator|+
name|valueCount
operator|+
literal|", index="
operator|+
name|index
operator|+
literal|", len="
operator|+
name|len
operator|+
literal|", off="
operator|+
name|off
decl_stmt|;
specifier|final
name|int
name|sets
init|=
name|ints
operator|.
name|set
argument_list|(
name|index
argument_list|,
name|arr
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|msg
argument_list|,
name|sets
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|msg
argument_list|,
name|sets
operator|<=
name|len
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ints
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|String
name|m
init|=
name|msg
operator|+
literal|", i="
operator|+
name|i
decl_stmt|;
if|if
condition|(
name|i
operator|>=
name|index
operator|&&
name|i
operator|<
name|index
operator|+
name|sets
condition|)
block|{
name|assertEquals
argument_list|(
name|m
argument_list|,
name|arr
index|[
name|off
operator|-
name|index
operator|+
name|i
index|]
argument_list|,
name|ints
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
name|m
argument_list|,
literal|0
argument_list|,
name|ints
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
DECL|method|testCopy
specifier|public
name|void
name|testCopy
parameter_list|()
block|{
specifier|final
name|int
name|valueCount
init|=
name|_TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|5
argument_list|,
literal|600
argument_list|)
decl_stmt|;
specifier|final
name|int
name|off1
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|valueCount
argument_list|)
decl_stmt|;
specifier|final
name|int
name|off2
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|valueCount
argument_list|)
decl_stmt|;
specifier|final
name|int
name|len
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|Math
operator|.
name|min
argument_list|(
name|valueCount
operator|-
name|off1
argument_list|,
name|valueCount
operator|-
name|off2
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|int
name|mem
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|1024
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|bpv
init|=
literal|1
init|;
name|bpv
operator|<=
literal|64
condition|;
operator|++
name|bpv
control|)
block|{
name|long
name|mask
init|=
name|PackedInts
operator|.
name|maxValue
argument_list|(
name|bpv
argument_list|)
decl_stmt|;
for|for
control|(
name|PackedInts
operator|.
name|Mutable
name|r1
range|:
name|createPackedInts
argument_list|(
name|valueCount
argument_list|,
name|bpv
argument_list|)
control|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|r1
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|r1
operator|.
name|set
argument_list|(
name|i
argument_list|,
operator|(
literal|31L
operator|*
name|i
operator|-
literal|1023
operator|)
operator|&
name|mask
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|PackedInts
operator|.
name|Mutable
name|r2
range|:
name|createPackedInts
argument_list|(
name|valueCount
argument_list|,
name|bpv
argument_list|)
control|)
block|{
name|String
name|msg
init|=
literal|"src="
operator|+
name|r1
operator|+
literal|", dest="
operator|+
name|r2
operator|+
literal|", srcPos="
operator|+
name|off1
operator|+
literal|", destPos="
operator|+
name|off2
operator|+
literal|", len="
operator|+
name|len
operator|+
literal|", mem="
operator|+
name|mem
decl_stmt|;
name|PackedInts
operator|.
name|copy
argument_list|(
name|r1
argument_list|,
name|off1
argument_list|,
name|r2
argument_list|,
name|off2
argument_list|,
name|len
argument_list|,
name|mem
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|r2
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|String
name|m
init|=
name|msg
operator|+
literal|", i="
operator|+
name|i
decl_stmt|;
if|if
condition|(
name|i
operator|>=
name|off2
operator|&&
name|i
operator|<
name|off2
operator|+
name|len
condition|)
block|{
name|assertEquals
argument_list|(
name|m
argument_list|,
name|r1
operator|.
name|get
argument_list|(
name|i
operator|-
name|off2
operator|+
name|off1
argument_list|)
argument_list|,
name|r2
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
name|m
argument_list|,
literal|0
argument_list|,
name|r2
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
DECL|method|testGrowableWriter
specifier|public
name|void
name|testGrowableWriter
parameter_list|()
block|{
specifier|final
name|int
name|valueCount
init|=
literal|113
operator|+
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|1111
argument_list|)
decl_stmt|;
name|GrowableWriter
name|wrt
init|=
operator|new
name|GrowableWriter
argument_list|(
literal|1
argument_list|,
name|valueCount
argument_list|,
name|PackedInts
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
name|wrt
operator|.
name|set
argument_list|(
literal|4
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|wrt
operator|.
name|set
argument_list|(
literal|7
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|wrt
operator|.
name|set
argument_list|(
name|valueCount
operator|-
literal|10
argument_list|,
literal|99
argument_list|)
expr_stmt|;
name|wrt
operator|.
name|set
argument_list|(
literal|99
argument_list|,
literal|999
argument_list|)
expr_stmt|;
name|wrt
operator|.
name|set
argument_list|(
name|valueCount
operator|-
literal|1
argument_list|,
literal|1
operator|<<
literal|10
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
operator|<<
literal|10
argument_list|,
name|wrt
operator|.
name|get
argument_list|(
name|valueCount
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|wrt
operator|.
name|set
argument_list|(
literal|99
argument_list|,
operator|(
literal|1
operator|<<
literal|23
operator|)
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
operator|<<
literal|10
argument_list|,
name|wrt
operator|.
name|get
argument_list|(
name|valueCount
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|wrt
operator|.
name|set
argument_list|(
literal|1
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|wrt
operator|.
name|set
argument_list|(
literal|2
argument_list|,
operator|-
literal|3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|64
argument_list|,
name|wrt
operator|.
name|getBitsPerValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
operator|<<
literal|10
argument_list|,
name|wrt
operator|.
name|get
argument_list|(
name|valueCount
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|,
name|wrt
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|3L
argument_list|,
name|wrt
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|wrt
operator|.
name|get
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
literal|1
operator|<<
literal|23
operator|)
operator|-
literal|1
argument_list|,
name|wrt
operator|.
name|get
argument_list|(
literal|99
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|wrt
operator|.
name|get
argument_list|(
literal|7
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|99
argument_list|,
name|wrt
operator|.
name|get
argument_list|(
name|valueCount
operator|-
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
operator|<<
literal|10
argument_list|,
name|wrt
operator|.
name|get
argument_list|(
name|valueCount
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|RamUsageEstimator
operator|.
name|sizeOf
argument_list|(
name|wrt
argument_list|)
argument_list|,
name|wrt
operator|.
name|ramBytesUsed
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testPagedGrowableWriter
specifier|public
name|void
name|testPagedGrowableWriter
parameter_list|()
block|{
name|int
name|pageSize
init|=
literal|1
operator|<<
operator|(
name|_TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|6
argument_list|,
literal|30
argument_list|)
operator|)
decl_stmt|;
comment|// supports 0 values?
name|PagedGrowableWriter
name|writer
init|=
operator|new
name|PagedGrowableWriter
argument_list|(
literal|0
argument_list|,
name|pageSize
argument_list|,
name|_TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|64
argument_list|)
argument_list|,
name|random
argument_list|()
operator|.
name|nextFloat
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|writer
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// compare against AppendingLongBuffer
name|AppendingLongBuffer
name|buf
init|=
operator|new
name|AppendingLongBuffer
argument_list|()
decl_stmt|;
name|int
name|size
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|1000000
argument_list|)
decl_stmt|;
name|long
name|max
init|=
literal|5
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
operator|++
name|i
control|)
block|{
name|buf
operator|.
name|add
argument_list|(
name|_TestUtil
operator|.
name|nextLong
argument_list|(
name|random
argument_list|()
argument_list|,
literal|0
argument_list|,
name|max
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|rarely
argument_list|()
condition|)
block|{
name|max
operator|=
name|PackedInts
operator|.
name|maxValue
argument_list|(
name|rarely
argument_list|()
condition|?
name|_TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|63
argument_list|)
else|:
name|_TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|31
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|writer
operator|=
operator|new
name|PagedGrowableWriter
argument_list|(
name|size
argument_list|,
name|pageSize
argument_list|,
name|_TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|64
argument_list|)
argument_list|,
name|random
argument_list|()
operator|.
name|nextFloat
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|size
argument_list|,
name|writer
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|size
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
operator|--
name|i
control|)
block|{
name|writer
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|buf
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
operator|++
name|i
control|)
block|{
name|assertEquals
argument_list|(
name|buf
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|writer
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// test ramBytesUsed
name|assertEquals
argument_list|(
name|RamUsageEstimator
operator|.
name|sizeOf
argument_list|(
name|writer
argument_list|)
argument_list|,
name|writer
operator|.
name|ramBytesUsed
argument_list|()
argument_list|,
literal|8
argument_list|)
expr_stmt|;
comment|// test copy
name|PagedGrowableWriter
name|copy
init|=
name|writer
operator|.
name|resize
argument_list|(
name|_TestUtil
operator|.
name|nextLong
argument_list|(
name|random
argument_list|()
argument_list|,
name|writer
operator|.
name|size
argument_list|()
operator|/
literal|2
argument_list|,
name|writer
operator|.
name|size
argument_list|()
operator|*
literal|3
operator|/
literal|2
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|long
name|i
init|=
literal|0
init|;
name|i
operator|<
name|copy
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|i
operator|<
name|writer
operator|.
name|size
argument_list|()
condition|)
block|{
name|assertEquals
argument_list|(
name|writer
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|copy
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|copy
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// test grow
name|PagedGrowableWriter
name|grow
init|=
name|writer
operator|.
name|grow
argument_list|(
name|_TestUtil
operator|.
name|nextLong
argument_list|(
name|random
argument_list|()
argument_list|,
name|writer
operator|.
name|size
argument_list|()
operator|/
literal|2
argument_list|,
name|writer
operator|.
name|size
argument_list|()
operator|*
literal|3
operator|/
literal|2
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|long
name|i
init|=
literal|0
init|;
name|i
operator|<
name|grow
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|i
operator|<
name|writer
operator|.
name|size
argument_list|()
condition|)
block|{
name|assertEquals
argument_list|(
name|writer
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|grow
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|grow
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testPagedMutable
specifier|public
name|void
name|testPagedMutable
parameter_list|()
block|{
specifier|final
name|int
name|bitsPerValue
init|=
name|_TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|64
argument_list|)
decl_stmt|;
specifier|final
name|long
name|max
init|=
name|PackedInts
operator|.
name|maxValue
argument_list|(
name|bitsPerValue
argument_list|)
decl_stmt|;
name|int
name|pageSize
init|=
literal|1
operator|<<
operator|(
name|_TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|6
argument_list|,
literal|30
argument_list|)
operator|)
decl_stmt|;
comment|// supports 0 values?
name|PagedMutable
name|writer
init|=
operator|new
name|PagedMutable
argument_list|(
literal|0
argument_list|,
name|pageSize
argument_list|,
name|bitsPerValue
argument_list|,
name|random
argument_list|()
operator|.
name|nextFloat
argument_list|()
operator|/
literal|2
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|writer
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// compare against AppendingLongBuffer
name|AppendingLongBuffer
name|buf
init|=
operator|new
name|AppendingLongBuffer
argument_list|()
decl_stmt|;
name|int
name|size
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|1000000
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
operator|++
name|i
control|)
block|{
name|buf
operator|.
name|add
argument_list|(
name|bitsPerValue
operator|==
literal|64
condition|?
name|random
argument_list|()
operator|.
name|nextLong
argument_list|()
else|:
name|_TestUtil
operator|.
name|nextLong
argument_list|(
name|random
argument_list|()
argument_list|,
literal|0
argument_list|,
name|max
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|writer
operator|=
operator|new
name|PagedMutable
argument_list|(
name|size
argument_list|,
name|pageSize
argument_list|,
name|bitsPerValue
argument_list|,
name|random
argument_list|()
operator|.
name|nextFloat
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|size
argument_list|,
name|writer
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|size
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
operator|--
name|i
control|)
block|{
name|writer
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|buf
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
operator|++
name|i
control|)
block|{
name|assertEquals
argument_list|(
name|buf
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|writer
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// test ramBytesUsed
name|assertEquals
argument_list|(
name|RamUsageEstimator
operator|.
name|sizeOf
argument_list|(
name|writer
argument_list|)
operator|-
name|RamUsageEstimator
operator|.
name|sizeOf
argument_list|(
name|writer
operator|.
name|format
argument_list|)
argument_list|,
name|writer
operator|.
name|ramBytesUsed
argument_list|()
argument_list|)
expr_stmt|;
comment|// test copy
name|PagedMutable
name|copy
init|=
name|writer
operator|.
name|resize
argument_list|(
name|_TestUtil
operator|.
name|nextLong
argument_list|(
name|random
argument_list|()
argument_list|,
name|writer
operator|.
name|size
argument_list|()
operator|/
literal|2
argument_list|,
name|writer
operator|.
name|size
argument_list|()
operator|*
literal|3
operator|/
literal|2
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|long
name|i
init|=
literal|0
init|;
name|i
operator|<
name|copy
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|i
operator|<
name|writer
operator|.
name|size
argument_list|()
condition|)
block|{
name|assertEquals
argument_list|(
name|writer
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|copy
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|copy
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// test grow
name|PagedMutable
name|grow
init|=
name|writer
operator|.
name|grow
argument_list|(
name|_TestUtil
operator|.
name|nextLong
argument_list|(
name|random
argument_list|()
argument_list|,
name|writer
operator|.
name|size
argument_list|()
operator|/
literal|2
argument_list|,
name|writer
operator|.
name|size
argument_list|()
operator|*
literal|3
operator|/
literal|2
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|long
name|i
init|=
literal|0
init|;
name|i
operator|<
name|grow
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|i
operator|<
name|writer
operator|.
name|size
argument_list|()
condition|)
block|{
name|assertEquals
argument_list|(
name|writer
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|grow
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|grow
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// memory hole
annotation|@
name|Ignore
DECL|method|testPagedGrowableWriterOverflow
specifier|public
name|void
name|testPagedGrowableWriterOverflow
parameter_list|()
block|{
specifier|final
name|long
name|size
init|=
name|_TestUtil
operator|.
name|nextLong
argument_list|(
name|random
argument_list|()
argument_list|,
literal|2
operator|*
operator|(
name|long
operator|)
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
literal|3
operator|*
operator|(
name|long
operator|)
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
specifier|final
name|int
name|pageSize
init|=
literal|1
operator|<<
operator|(
name|_TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|16
argument_list|,
literal|30
argument_list|)
operator|)
decl_stmt|;
specifier|final
name|PagedGrowableWriter
name|writer
init|=
operator|new
name|PagedGrowableWriter
argument_list|(
name|size
argument_list|,
name|pageSize
argument_list|,
literal|1
argument_list|,
name|random
argument_list|()
operator|.
name|nextFloat
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|long
name|index
init|=
name|_TestUtil
operator|.
name|nextLong
argument_list|(
name|random
argument_list|()
argument_list|,
operator|(
name|long
operator|)
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|size
operator|-
literal|1
argument_list|)
decl_stmt|;
name|writer
operator|.
name|set
argument_list|(
name|index
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|writer
operator|.
name|get
argument_list|(
name|index
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1000000
condition|;
operator|++
name|i
control|)
block|{
specifier|final
name|long
name|idx
init|=
name|_TestUtil
operator|.
name|nextLong
argument_list|(
name|random
argument_list|()
argument_list|,
literal|0
argument_list|,
name|size
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|==
name|index
condition|)
block|{
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|writer
operator|.
name|get
argument_list|(
name|idx
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|writer
operator|.
name|get
argument_list|(
name|idx
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testSave
specifier|public
name|void
name|testSave
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|int
name|valueCount
init|=
name|_TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|2048
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|bpv
init|=
literal|1
init|;
name|bpv
operator|<=
literal|64
condition|;
operator|++
name|bpv
control|)
block|{
specifier|final
name|int
name|maxValue
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|min
argument_list|(
name|PackedInts
operator|.
name|maxValue
argument_list|(
literal|31
argument_list|)
argument_list|,
name|PackedInts
operator|.
name|maxValue
argument_list|(
name|bpv
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|RAMDirectory
name|directory
init|=
operator|new
name|RAMDirectory
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|PackedInts
operator|.
name|Mutable
argument_list|>
name|packedInts
init|=
name|createPackedInts
argument_list|(
name|valueCount
argument_list|,
name|bpv
argument_list|)
decl_stmt|;
for|for
control|(
name|PackedInts
operator|.
name|Mutable
name|mutable
range|:
name|packedInts
control|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|mutable
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|mutable
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|maxValue
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|IndexOutput
name|out
init|=
name|directory
operator|.
name|createOutput
argument_list|(
literal|"packed-ints.bin"
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
name|mutable
operator|.
name|save
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|IndexInput
name|in
init|=
name|directory
operator|.
name|openInput
argument_list|(
literal|"packed-ints.bin"
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
name|PackedInts
operator|.
name|Reader
name|reader
init|=
name|PackedInts
operator|.
name|getReader
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|mutable
operator|.
name|getBitsPerValue
argument_list|()
argument_list|,
name|reader
operator|.
name|getBitsPerValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|valueCount
argument_list|,
name|reader
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|mutable
operator|instanceof
name|Packed64SingleBlock
condition|)
block|{
comment|// make sure that we used the right format so that the reader has
comment|// the same performance characteristics as the mutable that has been
comment|// serialized
name|assertTrue
argument_list|(
name|reader
operator|instanceof
name|Packed64SingleBlock
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertFalse
argument_list|(
name|reader
operator|instanceof
name|Packed64SingleBlock
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|valueCount
condition|;
operator|++
name|i
control|)
block|{
name|assertEquals
argument_list|(
name|mutable
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|reader
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
name|directory
operator|.
name|deleteFile
argument_list|(
literal|"packed-ints.bin"
argument_list|)
expr_stmt|;
block|}
name|directory
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|testEncodeDecode
specifier|public
name|void
name|testEncodeDecode
parameter_list|()
block|{
for|for
control|(
name|PackedInts
operator|.
name|Format
name|format
range|:
name|PackedInts
operator|.
name|Format
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|int
name|bpv
init|=
literal|1
init|;
name|bpv
operator|<=
literal|64
condition|;
operator|++
name|bpv
control|)
block|{
if|if
condition|(
operator|!
name|format
operator|.
name|isSupported
argument_list|(
name|bpv
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|String
name|msg
init|=
name|format
operator|+
literal|" "
operator|+
name|bpv
decl_stmt|;
specifier|final
name|PackedInts
operator|.
name|Encoder
name|encoder
init|=
name|PackedInts
operator|.
name|getEncoder
argument_list|(
name|format
argument_list|,
name|PackedInts
operator|.
name|VERSION_CURRENT
argument_list|,
name|bpv
argument_list|)
decl_stmt|;
specifier|final
name|PackedInts
operator|.
name|Decoder
name|decoder
init|=
name|PackedInts
operator|.
name|getDecoder
argument_list|(
name|format
argument_list|,
name|PackedInts
operator|.
name|VERSION_CURRENT
argument_list|,
name|bpv
argument_list|)
decl_stmt|;
specifier|final
name|int
name|longBlockCount
init|=
name|encoder
operator|.
name|longBlockCount
argument_list|()
decl_stmt|;
specifier|final
name|int
name|longValueCount
init|=
name|encoder
operator|.
name|longValueCount
argument_list|()
decl_stmt|;
specifier|final
name|int
name|byteBlockCount
init|=
name|encoder
operator|.
name|byteBlockCount
argument_list|()
decl_stmt|;
specifier|final
name|int
name|byteValueCount
init|=
name|encoder
operator|.
name|byteValueCount
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|longBlockCount
argument_list|,
name|decoder
operator|.
name|longBlockCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|longValueCount
argument_list|,
name|decoder
operator|.
name|longValueCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|byteBlockCount
argument_list|,
name|decoder
operator|.
name|byteBlockCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|byteValueCount
argument_list|,
name|decoder
operator|.
name|byteValueCount
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|int
name|longIterations
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
decl_stmt|;
specifier|final
name|int
name|byteIterations
init|=
name|longIterations
operator|*
name|longValueCount
operator|/
name|byteValueCount
decl_stmt|;
name|assertEquals
argument_list|(
name|longIterations
operator|*
name|longValueCount
argument_list|,
name|byteIterations
operator|*
name|byteValueCount
argument_list|)
expr_stmt|;
specifier|final
name|int
name|blocksOffset
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
decl_stmt|;
specifier|final
name|int
name|valuesOffset
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
decl_stmt|;
specifier|final
name|int
name|blocksOffset2
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
decl_stmt|;
specifier|final
name|int
name|blocksLen
init|=
name|longIterations
operator|*
name|longBlockCount
decl_stmt|;
comment|// 1. generate random inputs
specifier|final
name|long
index|[]
name|blocks
init|=
operator|new
name|long
index|[
name|blocksOffset
operator|+
name|blocksLen
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|blocks
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|blocks
index|[
name|i
index|]
operator|=
name|random
argument_list|()
operator|.
name|nextLong
argument_list|()
expr_stmt|;
if|if
condition|(
name|format
operator|==
name|PackedInts
operator|.
name|Format
operator|.
name|PACKED_SINGLE_BLOCK
operator|&&
literal|64
operator|%
name|bpv
operator|!=
literal|0
condition|)
block|{
comment|// clear highest bits for packed
specifier|final
name|int
name|toClear
init|=
literal|64
operator|%
name|bpv
decl_stmt|;
name|blocks
index|[
name|i
index|]
operator|=
operator|(
name|blocks
index|[
name|i
index|]
operator|<<
name|toClear
operator|)
operator|>>>
name|toClear
expr_stmt|;
block|}
block|}
comment|// 2. decode
specifier|final
name|long
index|[]
name|values
init|=
operator|new
name|long
index|[
name|valuesOffset
operator|+
name|longIterations
operator|*
name|longValueCount
index|]
decl_stmt|;
name|decoder
operator|.
name|decode
argument_list|(
name|blocks
argument_list|,
name|blocksOffset
argument_list|,
name|values
argument_list|,
name|valuesOffset
argument_list|,
name|longIterations
argument_list|)
expr_stmt|;
for|for
control|(
name|long
name|value
range|:
name|values
control|)
block|{
name|assertTrue
argument_list|(
name|value
operator|<=
name|PackedInts
operator|.
name|maxValue
argument_list|(
name|bpv
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// test decoding to int[]
specifier|final
name|int
index|[]
name|intValues
decl_stmt|;
if|if
condition|(
name|bpv
operator|<=
literal|32
condition|)
block|{
name|intValues
operator|=
operator|new
name|int
index|[
name|values
operator|.
name|length
index|]
expr_stmt|;
name|decoder
operator|.
name|decode
argument_list|(
name|blocks
argument_list|,
name|blocksOffset
argument_list|,
name|intValues
argument_list|,
name|valuesOffset
argument_list|,
name|longIterations
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|equals
argument_list|(
name|intValues
argument_list|,
name|values
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|intValues
operator|=
literal|null
expr_stmt|;
block|}
comment|// 3. re-encode
specifier|final
name|long
index|[]
name|blocks2
init|=
operator|new
name|long
index|[
name|blocksOffset2
operator|+
name|blocksLen
index|]
decl_stmt|;
name|encoder
operator|.
name|encode
argument_list|(
name|values
argument_list|,
name|valuesOffset
argument_list|,
name|blocks2
argument_list|,
name|blocksOffset2
argument_list|,
name|longIterations
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|msg
argument_list|,
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|blocks
argument_list|,
name|blocksOffset
argument_list|,
name|blocks
operator|.
name|length
argument_list|)
argument_list|,
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|blocks2
argument_list|,
name|blocksOffset2
argument_list|,
name|blocks2
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
comment|// test encoding from int[]
if|if
condition|(
name|bpv
operator|<=
literal|32
condition|)
block|{
specifier|final
name|long
index|[]
name|blocks3
init|=
operator|new
name|long
index|[
name|blocks2
operator|.
name|length
index|]
decl_stmt|;
name|encoder
operator|.
name|encode
argument_list|(
name|intValues
argument_list|,
name|valuesOffset
argument_list|,
name|blocks3
argument_list|,
name|blocksOffset2
argument_list|,
name|longIterations
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|msg
argument_list|,
name|blocks2
argument_list|,
name|blocks3
argument_list|)
expr_stmt|;
block|}
comment|// 4. byte[] decoding
specifier|final
name|byte
index|[]
name|byteBlocks
init|=
operator|new
name|byte
index|[
literal|8
operator|*
name|blocks
operator|.
name|length
index|]
decl_stmt|;
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|byteBlocks
argument_list|)
operator|.
name|asLongBuffer
argument_list|()
operator|.
name|put
argument_list|(
name|blocks
argument_list|)
expr_stmt|;
specifier|final
name|long
index|[]
name|values2
init|=
operator|new
name|long
index|[
name|valuesOffset
operator|+
name|longIterations
operator|*
name|longValueCount
index|]
decl_stmt|;
name|decoder
operator|.
name|decode
argument_list|(
name|byteBlocks
argument_list|,
name|blocksOffset
operator|*
literal|8
argument_list|,
name|values2
argument_list|,
name|valuesOffset
argument_list|,
name|byteIterations
argument_list|)
expr_stmt|;
for|for
control|(
name|long
name|value
range|:
name|values2
control|)
block|{
name|assertTrue
argument_list|(
name|msg
argument_list|,
name|value
operator|<=
name|PackedInts
operator|.
name|maxValue
argument_list|(
name|bpv
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertArrayEquals
argument_list|(
name|msg
argument_list|,
name|values
argument_list|,
name|values2
argument_list|)
expr_stmt|;
comment|// test decoding to int[]
if|if
condition|(
name|bpv
operator|<=
literal|32
condition|)
block|{
specifier|final
name|int
index|[]
name|intValues2
init|=
operator|new
name|int
index|[
name|values2
operator|.
name|length
index|]
decl_stmt|;
name|decoder
operator|.
name|decode
argument_list|(
name|byteBlocks
argument_list|,
name|blocksOffset
operator|*
literal|8
argument_list|,
name|intValues2
argument_list|,
name|valuesOffset
argument_list|,
name|byteIterations
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|msg
argument_list|,
name|equals
argument_list|(
name|intValues2
argument_list|,
name|values2
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// 5. byte[] encoding
specifier|final
name|byte
index|[]
name|blocks3
init|=
operator|new
name|byte
index|[
literal|8
operator|*
operator|(
name|blocksOffset2
operator|+
name|blocksLen
operator|)
index|]
decl_stmt|;
name|encoder
operator|.
name|encode
argument_list|(
name|values
argument_list|,
name|valuesOffset
argument_list|,
name|blocks3
argument_list|,
literal|8
operator|*
name|blocksOffset2
argument_list|,
name|byteIterations
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|msg
argument_list|,
name|LongBuffer
operator|.
name|wrap
argument_list|(
name|blocks2
argument_list|)
argument_list|,
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|blocks3
argument_list|)
operator|.
name|asLongBuffer
argument_list|()
argument_list|)
expr_stmt|;
comment|// test encoding from int[]
if|if
condition|(
name|bpv
operator|<=
literal|32
condition|)
block|{
specifier|final
name|byte
index|[]
name|blocks4
init|=
operator|new
name|byte
index|[
name|blocks3
operator|.
name|length
index|]
decl_stmt|;
name|encoder
operator|.
name|encode
argument_list|(
name|intValues
argument_list|,
name|valuesOffset
argument_list|,
name|blocks4
argument_list|,
literal|8
operator|*
name|blocksOffset2
argument_list|,
name|byteIterations
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|msg
argument_list|,
name|blocks3
argument_list|,
name|blocks4
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|equals
specifier|private
specifier|static
name|boolean
name|equals
parameter_list|(
name|int
index|[]
name|ints
parameter_list|,
name|long
index|[]
name|longs
parameter_list|)
block|{
if|if
condition|(
name|ints
operator|.
name|length
operator|!=
name|longs
operator|.
name|length
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ints
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
operator|(
name|ints
index|[
name|i
index|]
operator|&
literal|0xFFFFFFFFL
operator|)
operator|!=
name|longs
index|[
name|i
index|]
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
DECL|method|testAppendingLongBuffer
specifier|public
name|void
name|testAppendingLongBuffer
parameter_list|()
block|{
specifier|final
name|long
index|[]
name|arr
init|=
operator|new
name|long
index|[
name|RandomInts
operator|.
name|randomIntBetween
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|1000000
argument_list|)
index|]
decl_stmt|;
for|for
control|(
name|int
name|bpv
range|:
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|1
block|,
literal|63
block|,
literal|64
block|,
name|RandomInts
operator|.
name|randomIntBetween
argument_list|(
name|random
argument_list|()
argument_list|,
literal|2
argument_list|,
literal|62
argument_list|)
block|}
control|)
block|{
for|for
control|(
name|boolean
name|monotonic
range|:
operator|new
name|boolean
index|[]
block|{
literal|true
block|,
literal|false
block|}
control|)
block|{
specifier|final
name|int
name|pageSize
init|=
literal|1
operator|<<
name|_TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|6
argument_list|,
literal|20
argument_list|)
decl_stmt|;
specifier|final
name|int
name|initialPageCount
init|=
name|_TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|16
argument_list|)
decl_stmt|;
name|AbstractAppendingLongBuffer
name|buf
decl_stmt|;
specifier|final
name|int
name|inc
decl_stmt|;
if|if
condition|(
name|monotonic
condition|)
block|{
name|buf
operator|=
operator|new
name|MonotonicAppendingLongBuffer
argument_list|(
name|initialPageCount
argument_list|,
name|pageSize
argument_list|)
expr_stmt|;
name|inc
operator|=
name|_TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
operator|-
literal|1000
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|buf
operator|=
operator|new
name|AppendingLongBuffer
argument_list|(
name|initialPageCount
argument_list|,
name|pageSize
argument_list|)
expr_stmt|;
name|inc
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|bpv
operator|==
literal|0
condition|)
block|{
name|arr
index|[
literal|0
index|]
operator|=
name|random
argument_list|()
operator|.
name|nextLong
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|arr
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|arr
index|[
name|i
index|]
operator|=
name|arr
index|[
name|i
operator|-
literal|1
index|]
operator|+
name|inc
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|bpv
operator|==
literal|64
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|arr
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|arr
index|[
name|i
index|]
operator|=
name|random
argument_list|()
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
specifier|final
name|long
name|minValue
init|=
name|_TestUtil
operator|.
name|nextLong
argument_list|(
name|random
argument_list|()
argument_list|,
name|Long
operator|.
name|MIN_VALUE
argument_list|,
name|Long
operator|.
name|MAX_VALUE
operator|-
name|PackedInts
operator|.
name|maxValue
argument_list|(
name|bpv
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|arr
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|arr
index|[
name|i
index|]
operator|=
name|minValue
operator|+
name|inc
operator|*
name|i
operator|+
name|random
argument_list|()
operator|.
name|nextLong
argument_list|()
operator|&
name|PackedInts
operator|.
name|maxValue
argument_list|(
name|bpv
argument_list|)
expr_stmt|;
comment|// _TestUtil.nextLong is too slow
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|arr
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|buf
operator|.
name|add
argument_list|(
name|arr
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|arr
operator|.
name|length
argument_list|,
name|buf
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|AbstractAppendingLongBuffer
operator|.
name|Iterator
name|it
init|=
name|buf
operator|.
name|iterator
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|arr
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|assertTrue
argument_list|(
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|arr
index|[
name|i
index|]
argument_list|,
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|arr
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|assertEquals
argument_list|(
name|arr
index|[
name|i
index|]
argument_list|,
name|buf
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|long
name|expectedBytesUsed
init|=
name|RamUsageEstimator
operator|.
name|sizeOf
argument_list|(
name|buf
argument_list|)
decl_stmt|;
specifier|final
name|long
name|computedBytesUsed
init|=
name|buf
operator|.
name|ramBytesUsed
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"got "
operator|+
name|computedBytesUsed
operator|+
literal|", expected: "
operator|+
name|expectedBytesUsed
argument_list|,
name|expectedBytesUsed
argument_list|,
name|computedBytesUsed
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testPackedInputOutput
specifier|public
name|void
name|testPackedInputOutput
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|long
index|[]
name|longs
init|=
operator|new
name|long
index|[
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|8192
argument_list|)
index|]
decl_stmt|;
specifier|final
name|int
index|[]
name|bitsPerValues
init|=
operator|new
name|int
index|[
name|longs
operator|.
name|length
index|]
decl_stmt|;
specifier|final
name|boolean
index|[]
name|skip
init|=
operator|new
name|boolean
index|[
name|longs
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|longs
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
specifier|final
name|int
name|bpv
init|=
name|RandomInts
operator|.
name|randomIntBetween
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|64
argument_list|)
decl_stmt|;
name|bitsPerValues
index|[
name|i
index|]
operator|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
name|bpv
else|:
name|_TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
name|bpv
argument_list|,
literal|64
argument_list|)
expr_stmt|;
if|if
condition|(
name|bpv
operator|==
literal|64
condition|)
block|{
name|longs
index|[
name|i
index|]
operator|=
name|random
argument_list|()
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|longs
index|[
name|i
index|]
operator|=
name|_TestUtil
operator|.
name|nextLong
argument_list|(
name|random
argument_list|()
argument_list|,
literal|0
argument_list|,
name|PackedInts
operator|.
name|maxValue
argument_list|(
name|bpv
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|skip
index|[
name|i
index|]
operator|=
name|rarely
argument_list|()
expr_stmt|;
block|}
specifier|final
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
specifier|final
name|IndexOutput
name|out
init|=
name|dir
operator|.
name|createOutput
argument_list|(
literal|"out.bin"
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
name|PackedDataOutput
name|pout
init|=
operator|new
name|PackedDataOutput
argument_list|(
name|out
argument_list|)
decl_stmt|;
name|long
name|totalBits
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|longs
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|pout
operator|.
name|writeLong
argument_list|(
name|longs
index|[
name|i
index|]
argument_list|,
name|bitsPerValues
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|totalBits
operator|+=
name|bitsPerValues
index|[
name|i
index|]
expr_stmt|;
if|if
condition|(
name|skip
index|[
name|i
index|]
condition|)
block|{
name|pout
operator|.
name|flush
argument_list|()
expr_stmt|;
name|totalBits
operator|=
literal|8
operator|*
operator|(
name|long
operator|)
name|Math
operator|.
name|ceil
argument_list|(
operator|(
name|double
operator|)
name|totalBits
operator|/
literal|8
argument_list|)
expr_stmt|;
block|}
block|}
name|pout
operator|.
name|flush
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|long
operator|)
name|Math
operator|.
name|ceil
argument_list|(
operator|(
name|double
operator|)
name|totalBits
operator|/
literal|8
argument_list|)
argument_list|,
name|out
operator|.
name|getFilePointer
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
specifier|final
name|IndexInput
name|in
init|=
name|dir
operator|.
name|openInput
argument_list|(
literal|"out.bin"
argument_list|,
name|IOContext
operator|.
name|READONCE
argument_list|)
decl_stmt|;
specifier|final
name|PackedDataInput
name|pin
init|=
operator|new
name|PackedDataInput
argument_list|(
name|in
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|longs
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|assertEquals
argument_list|(
literal|""
operator|+
name|i
argument_list|,
name|longs
index|[
name|i
index|]
argument_list|,
name|pin
operator|.
name|readLong
argument_list|(
name|bitsPerValues
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|skip
index|[
name|i
index|]
condition|)
block|{
name|pin
operator|.
name|skipToNextByte
argument_list|()
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
operator|(
name|long
operator|)
name|Math
operator|.
name|ceil
argument_list|(
operator|(
name|double
operator|)
name|totalBits
operator|/
literal|8
argument_list|)
argument_list|,
name|in
operator|.
name|getFilePointer
argument_list|()
argument_list|)
expr_stmt|;
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testBlockPackedReaderWriter
specifier|public
name|void
name|testBlockPackedReaderWriter
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|int
name|iters
init|=
name|atLeast
argument_list|(
literal|2
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|iter
init|=
literal|0
init|;
name|iter
operator|<
name|iters
condition|;
operator|++
name|iter
control|)
block|{
specifier|final
name|int
name|blockSize
init|=
literal|1
operator|<<
name|_TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|6
argument_list|,
literal|18
argument_list|)
decl_stmt|;
specifier|final
name|int
name|valueCount
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|1
operator|<<
literal|18
argument_list|)
decl_stmt|;
specifier|final
name|long
index|[]
name|values
init|=
operator|new
name|long
index|[
name|valueCount
index|]
decl_stmt|;
name|long
name|minValue
init|=
literal|0
decl_stmt|;
name|int
name|bpv
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|valueCount
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|i
operator|%
name|blockSize
operator|==
literal|0
condition|)
block|{
name|minValue
operator|=
name|rarely
argument_list|()
condition|?
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|256
argument_list|)
else|:
name|rarely
argument_list|()
condition|?
operator|-
literal|5
else|:
name|random
argument_list|()
operator|.
name|nextLong
argument_list|()
expr_stmt|;
name|bpv
operator|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|65
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|bpv
operator|==
literal|0
condition|)
block|{
name|values
index|[
name|i
index|]
operator|=
name|minValue
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|bpv
operator|==
literal|64
condition|)
block|{
name|values
index|[
name|i
index|]
operator|=
name|random
argument_list|()
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|values
index|[
name|i
index|]
operator|=
name|minValue
operator|+
name|_TestUtil
operator|.
name|nextLong
argument_list|(
name|random
argument_list|()
argument_list|,
literal|0
argument_list|,
operator|(
literal|1L
operator|<<
name|bpv
operator|)
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
specifier|final
name|IndexOutput
name|out
init|=
name|dir
operator|.
name|createOutput
argument_list|(
literal|"out.bin"
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
specifier|final
name|BlockPackedWriter
name|writer
init|=
operator|new
name|BlockPackedWriter
argument_list|(
name|out
argument_list|,
name|blockSize
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|valueCount
condition|;
operator|++
name|i
control|)
block|{
name|assertEquals
argument_list|(
name|i
argument_list|,
name|writer
operator|.
name|ord
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|add
argument_list|(
name|values
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|valueCount
argument_list|,
name|writer
operator|.
name|ord
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|finish
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|valueCount
argument_list|,
name|writer
operator|.
name|ord
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|long
name|fp
init|=
name|out
operator|.
name|getFilePointer
argument_list|()
decl_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|IndexInput
name|in1
init|=
name|dir
operator|.
name|openInput
argument_list|(
literal|"out.bin"
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
operator|(
name|int
operator|)
name|fp
index|]
decl_stmt|;
name|in1
operator|.
name|readBytes
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
operator|(
name|int
operator|)
name|fp
argument_list|)
expr_stmt|;
name|in1
operator|.
name|seek
argument_list|(
literal|0L
argument_list|)
expr_stmt|;
name|ByteArrayDataInput
name|in2
init|=
operator|new
name|ByteArrayDataInput
argument_list|(
name|buf
argument_list|)
decl_stmt|;
specifier|final
name|DataInput
name|in
init|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
name|in1
else|:
name|in2
decl_stmt|;
specifier|final
name|BlockPackedReaderIterator
name|it
init|=
operator|new
name|BlockPackedReaderIterator
argument_list|(
name|in
argument_list|,
name|PackedInts
operator|.
name|VERSION_CURRENT
argument_list|,
name|blockSize
argument_list|,
name|valueCount
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|valueCount
condition|;
control|)
block|{
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|assertEquals
argument_list|(
literal|""
operator|+
name|i
argument_list|,
name|values
index|[
name|i
index|]
argument_list|,
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
operator|++
name|i
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|LongsRef
name|nextValues
init|=
name|it
operator|.
name|next
argument_list|(
name|_TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|1024
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|nextValues
operator|.
name|length
condition|;
operator|++
name|j
control|)
block|{
name|assertEquals
argument_list|(
literal|""
operator|+
operator|(
name|i
operator|+
name|j
operator|)
argument_list|,
name|values
index|[
name|i
operator|+
name|j
index|]
argument_list|,
name|nextValues
operator|.
name|longs
index|[
name|nextValues
operator|.
name|offset
operator|+
name|j
index|]
argument_list|)
expr_stmt|;
block|}
name|i
operator|+=
name|nextValues
operator|.
name|length
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|i
argument_list|,
name|it
operator|.
name|ord
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|fp
argument_list|,
name|in
operator|instanceof
name|ByteArrayDataInput
condition|?
operator|(
operator|(
name|ByteArrayDataInput
operator|)
name|in
operator|)
operator|.
name|getPosition
argument_list|()
else|:
operator|(
operator|(
name|IndexInput
operator|)
name|in
operator|)
operator|.
name|getFilePointer
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// OK
block|}
if|if
condition|(
name|in
operator|instanceof
name|ByteArrayDataInput
condition|)
block|{
operator|(
operator|(
name|ByteArrayDataInput
operator|)
name|in
operator|)
operator|.
name|setPosition
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
operator|(
operator|(
name|IndexInput
operator|)
name|in
operator|)
operator|.
name|seek
argument_list|(
literal|0L
argument_list|)
expr_stmt|;
block|}
specifier|final
name|BlockPackedReaderIterator
name|it2
init|=
operator|new
name|BlockPackedReaderIterator
argument_list|(
name|in
argument_list|,
name|PackedInts
operator|.
name|VERSION_CURRENT
argument_list|,
name|blockSize
argument_list|,
name|valueCount
argument_list|)
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
specifier|final
name|int
name|skip
init|=
name|_TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|0
argument_list|,
name|valueCount
operator|-
name|i
argument_list|)
decl_stmt|;
name|it2
operator|.
name|skip
argument_list|(
name|skip
argument_list|)
expr_stmt|;
name|i
operator|+=
name|skip
expr_stmt|;
name|assertEquals
argument_list|(
name|i
argument_list|,
name|it2
operator|.
name|ord
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|==
name|valueCount
condition|)
block|{
break|break;
block|}
else|else
block|{
name|assertEquals
argument_list|(
name|values
index|[
name|i
index|]
argument_list|,
name|it2
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
operator|++
name|i
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
name|fp
argument_list|,
name|in
operator|instanceof
name|ByteArrayDataInput
condition|?
operator|(
operator|(
name|ByteArrayDataInput
operator|)
name|in
operator|)
operator|.
name|getPosition
argument_list|()
else|:
operator|(
operator|(
name|IndexInput
operator|)
name|in
operator|)
operator|.
name|getFilePointer
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|it2
operator|.
name|skip
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// OK
block|}
name|in1
operator|.
name|seek
argument_list|(
literal|0L
argument_list|)
expr_stmt|;
specifier|final
name|BlockPackedReader
name|reader
init|=
operator|new
name|BlockPackedReader
argument_list|(
name|in1
argument_list|,
name|PackedInts
operator|.
name|VERSION_CURRENT
argument_list|,
name|blockSize
argument_list|,
name|valueCount
argument_list|,
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|in1
operator|.
name|getFilePointer
argument_list|()
argument_list|,
name|in1
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|valueCount
condition|;
operator|++
name|i
control|)
block|{
name|assertEquals
argument_list|(
literal|"i="
operator|+
name|i
argument_list|,
name|values
index|[
name|i
index|]
argument_list|,
name|reader
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|in1
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|testMonotonicBlockPackedReaderWriter
specifier|public
name|void
name|testMonotonicBlockPackedReaderWriter
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|int
name|iters
init|=
name|atLeast
argument_list|(
literal|2
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|iter
init|=
literal|0
init|;
name|iter
operator|<
name|iters
condition|;
operator|++
name|iter
control|)
block|{
specifier|final
name|int
name|blockSize
init|=
literal|1
operator|<<
name|_TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|6
argument_list|,
literal|18
argument_list|)
decl_stmt|;
specifier|final
name|int
name|valueCount
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|1
operator|<<
literal|18
argument_list|)
decl_stmt|;
specifier|final
name|long
index|[]
name|values
init|=
operator|new
name|long
index|[
name|valueCount
index|]
decl_stmt|;
if|if
condition|(
name|valueCount
operator|>
literal|0
condition|)
block|{
name|values
index|[
literal|0
index|]
operator|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
else|:
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|int
name|maxDelta
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|64
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|valueCount
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextDouble
argument_list|()
operator|<
literal|0.1d
condition|)
block|{
name|maxDelta
operator|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|64
argument_list|)
expr_stmt|;
block|}
name|values
index|[
name|i
index|]
operator|=
name|Math
operator|.
name|max
argument_list|(
literal|0
argument_list|,
name|values
index|[
name|i
operator|-
literal|1
index|]
operator|+
name|_TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
operator|-
literal|16
argument_list|,
name|maxDelta
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
specifier|final
name|IndexOutput
name|out
init|=
name|dir
operator|.
name|createOutput
argument_list|(
literal|"out.bin"
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
specifier|final
name|MonotonicBlockPackedWriter
name|writer
init|=
operator|new
name|MonotonicBlockPackedWriter
argument_list|(
name|out
argument_list|,
name|blockSize
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|valueCount
condition|;
operator|++
name|i
control|)
block|{
name|assertEquals
argument_list|(
name|i
argument_list|,
name|writer
operator|.
name|ord
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|add
argument_list|(
name|values
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|valueCount
argument_list|,
name|writer
operator|.
name|ord
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|finish
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|valueCount
argument_list|,
name|writer
operator|.
name|ord
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|long
name|fp
init|=
name|out
operator|.
name|getFilePointer
argument_list|()
decl_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
specifier|final
name|IndexInput
name|in
init|=
name|dir
operator|.
name|openInput
argument_list|(
literal|"out.bin"
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
specifier|final
name|MonotonicBlockPackedReader
name|reader
init|=
operator|new
name|MonotonicBlockPackedReader
argument_list|(
name|in
argument_list|,
name|PackedInts
operator|.
name|VERSION_CURRENT
argument_list|,
name|blockSize
argument_list|,
name|valueCount
argument_list|,
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|fp
argument_list|,
name|in
operator|.
name|getFilePointer
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|valueCount
condition|;
operator|++
name|i
control|)
block|{
name|assertEquals
argument_list|(
literal|"i="
operator|+
name|i
argument_list|,
name|values
index|[
name|i
index|]
argument_list|,
name|reader
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Nightly
DECL|method|testBlockReaderOverflow
specifier|public
name|void
name|testBlockReaderOverflow
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|long
name|valueCount
init|=
name|_TestUtil
operator|.
name|nextLong
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1L
operator|+
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
operator|(
name|long
operator|)
name|Integer
operator|.
name|MAX_VALUE
operator|*
literal|2
argument_list|)
decl_stmt|;
specifier|final
name|int
name|blockSize
init|=
literal|1
operator|<<
name|_TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|20
argument_list|,
literal|22
argument_list|)
decl_stmt|;
specifier|final
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
specifier|final
name|IndexOutput
name|out
init|=
name|dir
operator|.
name|createOutput
argument_list|(
literal|"out.bin"
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
specifier|final
name|BlockPackedWriter
name|writer
init|=
operator|new
name|BlockPackedWriter
argument_list|(
name|out
argument_list|,
name|blockSize
argument_list|)
decl_stmt|;
name|long
name|value
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|()
operator|&
literal|0xFFFFFFFFL
decl_stmt|;
name|long
name|valueOffset
init|=
name|_TestUtil
operator|.
name|nextLong
argument_list|(
name|random
argument_list|()
argument_list|,
literal|0
argument_list|,
name|valueCount
operator|-
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|long
name|i
init|=
literal|0
init|;
name|i
operator|<
name|valueCount
condition|;
control|)
block|{
name|assertEquals
argument_list|(
name|i
argument_list|,
name|writer
operator|.
name|ord
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|i
operator|&
operator|(
name|blockSize
operator|-
literal|1
operator|)
operator|)
operator|==
literal|0
operator|&&
operator|(
name|i
operator|+
name|blockSize
argument_list|<
name|valueOffset
operator|||
name|i
argument_list|>
name|valueOffset
operator|&&
name|i
operator|+
name|blockSize
operator|<
name|valueCount
operator|)
condition|)
block|{
name|writer
operator|.
name|addBlockOfZeros
argument_list|()
expr_stmt|;
name|i
operator|+=
name|blockSize
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|i
operator|==
name|valueOffset
condition|)
block|{
name|writer
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
operator|++
name|i
expr_stmt|;
block|}
else|else
block|{
name|writer
operator|.
name|add
argument_list|(
literal|0
argument_list|)
expr_stmt|;
operator|++
name|i
expr_stmt|;
block|}
block|}
name|writer
operator|.
name|finish
argument_list|()
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
specifier|final
name|IndexInput
name|in
init|=
name|dir
operator|.
name|openInput
argument_list|(
literal|"out.bin"
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
specifier|final
name|BlockPackedReaderIterator
name|it
init|=
operator|new
name|BlockPackedReaderIterator
argument_list|(
name|in
argument_list|,
name|PackedInts
operator|.
name|VERSION_CURRENT
argument_list|,
name|blockSize
argument_list|,
name|valueCount
argument_list|)
decl_stmt|;
name|it
operator|.
name|skip
argument_list|(
name|valueOffset
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|value
argument_list|,
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|in
operator|.
name|seek
argument_list|(
literal|0L
argument_list|)
expr_stmt|;
specifier|final
name|BlockPackedReader
name|reader
init|=
operator|new
name|BlockPackedReader
argument_list|(
name|in
argument_list|,
name|PackedInts
operator|.
name|VERSION_CURRENT
argument_list|,
name|blockSize
argument_list|,
name|valueCount
argument_list|,
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|value
argument_list|,
name|reader
operator|.
name|get
argument_list|(
name|valueOffset
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
operator|++
name|i
control|)
block|{
specifier|final
name|long
name|offset
init|=
name|_TestUtil
operator|.
name|nextLong
argument_list|(
name|random
argument_list|()
argument_list|,
literal|0
argument_list|,
name|valueCount
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|offset
operator|==
name|valueOffset
condition|)
block|{
name|assertEquals
argument_list|(
name|value
argument_list|,
name|reader
operator|.
name|get
argument_list|(
name|offset
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|reader
operator|.
name|get
argument_list|(
name|offset
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class
end_unit
