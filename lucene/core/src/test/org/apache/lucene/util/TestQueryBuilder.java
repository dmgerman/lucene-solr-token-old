begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.util
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Analyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|MockAnalyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|MockTokenizer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenFilter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Tokenizer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|CharTermAttribute
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|PositionIncrementAttribute
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanClause
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|MultiPhraseQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|PhraseQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|SynonymQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TermQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|automaton
operator|.
name|CharacterRunAutomaton
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|automaton
operator|.
name|RegExp
import|;
end_import
begin_class
DECL|class|TestQueryBuilder
specifier|public
class|class
name|TestQueryBuilder
extends|extends
name|LuceneTestCase
block|{
DECL|method|testTerm
specifier|public
name|void
name|testTerm
parameter_list|()
block|{
name|TermQuery
name|expected
init|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
decl_stmt|;
name|QueryBuilder
name|builder
init|=
operator|new
name|QueryBuilder
argument_list|(
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|builder
operator|.
name|createBooleanQuery
argument_list|(
literal|"field"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testBoolean
specifier|public
name|void
name|testBoolean
parameter_list|()
block|{
name|BooleanQuery
operator|.
name|Builder
name|expected
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|expected
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"foo"
argument_list|)
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|QueryBuilder
name|builder
init|=
operator|new
name|QueryBuilder
argument_list|(
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|build
argument_list|()
argument_list|,
name|builder
operator|.
name|createBooleanQuery
argument_list|(
literal|"field"
argument_list|,
literal|"foo bar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testBooleanMust
specifier|public
name|void
name|testBooleanMust
parameter_list|()
block|{
name|BooleanQuery
operator|.
name|Builder
name|expected
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|expected
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"foo"
argument_list|)
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|QueryBuilder
name|builder
init|=
operator|new
name|QueryBuilder
argument_list|(
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|build
argument_list|()
argument_list|,
name|builder
operator|.
name|createBooleanQuery
argument_list|(
literal|"field"
argument_list|,
literal|"foo bar"
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testMinShouldMatchNone
specifier|public
name|void
name|testMinShouldMatchNone
parameter_list|()
block|{
name|QueryBuilder
name|builder
init|=
operator|new
name|QueryBuilder
argument_list|(
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|builder
operator|.
name|createBooleanQuery
argument_list|(
literal|"field"
argument_list|,
literal|"one two three four"
argument_list|)
argument_list|,
name|builder
operator|.
name|createMinShouldMatchQuery
argument_list|(
literal|"field"
argument_list|,
literal|"one two three four"
argument_list|,
literal|0f
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testMinShouldMatchAll
specifier|public
name|void
name|testMinShouldMatchAll
parameter_list|()
block|{
name|QueryBuilder
name|builder
init|=
operator|new
name|QueryBuilder
argument_list|(
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|builder
operator|.
name|createBooleanQuery
argument_list|(
literal|"field"
argument_list|,
literal|"one two three four"
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
argument_list|,
name|builder
operator|.
name|createMinShouldMatchQuery
argument_list|(
literal|"field"
argument_list|,
literal|"one two three four"
argument_list|,
literal|1f
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testMinShouldMatch
specifier|public
name|void
name|testMinShouldMatch
parameter_list|()
block|{
name|BooleanQuery
operator|.
name|Builder
name|expectedB
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|expectedB
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"one"
argument_list|)
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|expectedB
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"two"
argument_list|)
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|expectedB
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"three"
argument_list|)
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|expectedB
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"four"
argument_list|)
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|expectedB
operator|.
name|setMinimumNumberShouldMatch
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|Query
name|expected
init|=
name|expectedB
operator|.
name|build
argument_list|()
decl_stmt|;
name|QueryBuilder
name|builder
init|=
operator|new
name|QueryBuilder
argument_list|(
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
comment|//assertEquals(expected, builder.createMinShouldMatchQuery("field", "one two three four", 0.1f));
comment|//assertEquals(expected, builder.createMinShouldMatchQuery("field", "one two three four", 0.24f));
name|expectedB
operator|.
name|setMinimumNumberShouldMatch
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|expected
operator|=
name|expectedB
operator|.
name|build
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|builder
operator|.
name|createMinShouldMatchQuery
argument_list|(
literal|"field"
argument_list|,
literal|"one two three four"
argument_list|,
literal|0.25f
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|builder
operator|.
name|createMinShouldMatchQuery
argument_list|(
literal|"field"
argument_list|,
literal|"one two three four"
argument_list|,
literal|0.49f
argument_list|)
argument_list|)
expr_stmt|;
name|expectedB
operator|.
name|setMinimumNumberShouldMatch
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|expected
operator|=
name|expectedB
operator|.
name|build
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|builder
operator|.
name|createMinShouldMatchQuery
argument_list|(
literal|"field"
argument_list|,
literal|"one two three four"
argument_list|,
literal|0.5f
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|builder
operator|.
name|createMinShouldMatchQuery
argument_list|(
literal|"field"
argument_list|,
literal|"one two three four"
argument_list|,
literal|0.74f
argument_list|)
argument_list|)
expr_stmt|;
name|expectedB
operator|.
name|setMinimumNumberShouldMatch
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|expected
operator|=
name|expectedB
operator|.
name|build
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|builder
operator|.
name|createMinShouldMatchQuery
argument_list|(
literal|"field"
argument_list|,
literal|"one two three four"
argument_list|,
literal|0.75f
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|builder
operator|.
name|createMinShouldMatchQuery
argument_list|(
literal|"field"
argument_list|,
literal|"one two three four"
argument_list|,
literal|0.99f
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testPhraseQueryPositionIncrements
specifier|public
name|void
name|testPhraseQueryPositionIncrements
parameter_list|()
throws|throws
name|Exception
block|{
name|PhraseQuery
operator|.
name|Builder
name|pqBuilder
init|=
operator|new
name|PhraseQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|pqBuilder
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"1"
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|pqBuilder
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"2"
argument_list|)
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|PhraseQuery
name|expected
init|=
name|pqBuilder
operator|.
name|build
argument_list|()
decl_stmt|;
name|CharacterRunAutomaton
name|stopList
init|=
operator|new
name|CharacterRunAutomaton
argument_list|(
operator|new
name|RegExp
argument_list|(
literal|"[sS][tT][oO][pP]"
argument_list|)
operator|.
name|toAutomaton
argument_list|()
argument_list|)
decl_stmt|;
name|Analyzer
name|analyzer
init|=
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|,
name|MockTokenizer
operator|.
name|WHITESPACE
argument_list|,
literal|false
argument_list|,
name|stopList
argument_list|)
decl_stmt|;
name|QueryBuilder
name|builder
init|=
operator|new
name|QueryBuilder
argument_list|(
name|analyzer
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|builder
operator|.
name|createPhraseQuery
argument_list|(
literal|"field"
argument_list|,
literal|"1 stop 2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testEmpty
specifier|public
name|void
name|testEmpty
parameter_list|()
block|{
name|QueryBuilder
name|builder
init|=
operator|new
name|QueryBuilder
argument_list|(
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|builder
operator|.
name|createBooleanQuery
argument_list|(
literal|"field"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** adds synonym of "dog" for "dogs". */
DECL|class|MockSynonymAnalyzer
specifier|static
class|class
name|MockSynonymAnalyzer
extends|extends
name|Analyzer
block|{
annotation|@
name|Override
DECL|method|createComponents
specifier|protected
name|TokenStreamComponents
name|createComponents
parameter_list|(
name|String
name|fieldName
parameter_list|)
block|{
name|MockTokenizer
name|tokenizer
init|=
operator|new
name|MockTokenizer
argument_list|()
decl_stmt|;
return|return
operator|new
name|TokenStreamComponents
argument_list|(
name|tokenizer
argument_list|,
operator|new
name|MockSynonymFilter
argument_list|(
name|tokenizer
argument_list|)
argument_list|)
return|;
block|}
block|}
comment|/**    * adds synonym of "dog" for "dogs".    */
DECL|class|MockSynonymFilter
specifier|protected
specifier|static
class|class
name|MockSynonymFilter
extends|extends
name|TokenFilter
block|{
DECL|field|termAtt
name|CharTermAttribute
name|termAtt
init|=
name|addAttribute
argument_list|(
name|CharTermAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|posIncAtt
name|PositionIncrementAttribute
name|posIncAtt
init|=
name|addAttribute
argument_list|(
name|PositionIncrementAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|addSynonym
name|boolean
name|addSynonym
init|=
literal|false
decl_stmt|;
DECL|method|MockSynonymFilter
specifier|public
name|MockSynonymFilter
parameter_list|(
name|TokenStream
name|input
parameter_list|)
block|{
name|super
argument_list|(
name|input
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|incrementToken
specifier|public
specifier|final
name|boolean
name|incrementToken
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|addSynonym
condition|)
block|{
comment|// inject our synonym
name|clearAttributes
argument_list|()
expr_stmt|;
name|termAtt
operator|.
name|setEmpty
argument_list|()
operator|.
name|append
argument_list|(
literal|"dog"
argument_list|)
expr_stmt|;
name|posIncAtt
operator|.
name|setPositionIncrement
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|addSynonym
operator|=
literal|false
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|input
operator|.
name|incrementToken
argument_list|()
condition|)
block|{
name|addSynonym
operator|=
name|termAtt
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
literal|"dogs"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
comment|/** simple synonyms test */
DECL|method|testSynonyms
specifier|public
name|void
name|testSynonyms
parameter_list|()
throws|throws
name|Exception
block|{
name|SynonymQuery
name|expected
init|=
operator|new
name|SynonymQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"dogs"
argument_list|)
argument_list|,
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"dog"
argument_list|)
argument_list|)
decl_stmt|;
name|QueryBuilder
name|builder
init|=
operator|new
name|QueryBuilder
argument_list|(
operator|new
name|MockSynonymAnalyzer
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|builder
operator|.
name|createBooleanQuery
argument_list|(
literal|"field"
argument_list|,
literal|"dogs"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|builder
operator|.
name|createPhraseQuery
argument_list|(
literal|"field"
argument_list|,
literal|"dogs"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|builder
operator|.
name|createBooleanQuery
argument_list|(
literal|"field"
argument_list|,
literal|"dogs"
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|builder
operator|.
name|createPhraseQuery
argument_list|(
literal|"field"
argument_list|,
literal|"dogs"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** forms multiphrase query */
DECL|method|testSynonymsPhrase
specifier|public
name|void
name|testSynonymsPhrase
parameter_list|()
throws|throws
name|Exception
block|{
name|MultiPhraseQuery
name|expected
init|=
operator|new
name|MultiPhraseQuery
argument_list|()
decl_stmt|;
name|expected
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"old"
argument_list|)
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
operator|new
name|Term
index|[]
block|{
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"dogs"
argument_list|)
block|,
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"dog"
argument_list|)
block|}
argument_list|)
expr_stmt|;
name|QueryBuilder
name|builder
init|=
operator|new
name|QueryBuilder
argument_list|(
operator|new
name|MockSynonymAnalyzer
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|builder
operator|.
name|createPhraseQuery
argument_list|(
literal|"field"
argument_list|,
literal|"old dogs"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|class|SimpleCJKTokenizer
specifier|protected
specifier|static
class|class
name|SimpleCJKTokenizer
extends|extends
name|Tokenizer
block|{
DECL|field|termAtt
specifier|private
name|CharTermAttribute
name|termAtt
init|=
name|addAttribute
argument_list|(
name|CharTermAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|SimpleCJKTokenizer
specifier|public
name|SimpleCJKTokenizer
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|incrementToken
specifier|public
specifier|final
name|boolean
name|incrementToken
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|ch
init|=
name|input
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|ch
operator|<
literal|0
condition|)
return|return
literal|false
return|;
name|clearAttributes
argument_list|()
expr_stmt|;
name|termAtt
operator|.
name|setEmpty
argument_list|()
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
name|ch
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
DECL|class|SimpleCJKAnalyzer
specifier|private
class|class
name|SimpleCJKAnalyzer
extends|extends
name|Analyzer
block|{
annotation|@
name|Override
DECL|method|createComponents
specifier|public
name|TokenStreamComponents
name|createComponents
parameter_list|(
name|String
name|fieldName
parameter_list|)
block|{
return|return
operator|new
name|TokenStreamComponents
argument_list|(
operator|new
name|SimpleCJKTokenizer
argument_list|()
argument_list|)
return|;
block|}
block|}
DECL|method|testCJKTerm
specifier|public
name|void
name|testCJKTerm
parameter_list|()
throws|throws
name|Exception
block|{
comment|// individual CJK chars as terms
name|SimpleCJKAnalyzer
name|analyzer
init|=
operator|new
name|SimpleCJKAnalyzer
argument_list|()
decl_stmt|;
name|BooleanQuery
operator|.
name|Builder
name|expected
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|expected
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"ä¸­"
argument_list|)
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"å½"
argument_list|)
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|QueryBuilder
name|builder
init|=
operator|new
name|QueryBuilder
argument_list|(
name|analyzer
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|build
argument_list|()
argument_list|,
name|builder
operator|.
name|createBooleanQuery
argument_list|(
literal|"field"
argument_list|,
literal|"ä¸­å½"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testCJKPhrase
specifier|public
name|void
name|testCJKPhrase
parameter_list|()
throws|throws
name|Exception
block|{
comment|// individual CJK chars as terms
name|SimpleCJKAnalyzer
name|analyzer
init|=
operator|new
name|SimpleCJKAnalyzer
argument_list|()
decl_stmt|;
name|PhraseQuery
name|expected
init|=
operator|new
name|PhraseQuery
argument_list|(
literal|"field"
argument_list|,
literal|"ä¸­"
argument_list|,
literal|"å½"
argument_list|)
decl_stmt|;
name|QueryBuilder
name|builder
init|=
operator|new
name|QueryBuilder
argument_list|(
name|analyzer
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|builder
operator|.
name|createPhraseQuery
argument_list|(
literal|"field"
argument_list|,
literal|"ä¸­å½"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testCJKSloppyPhrase
specifier|public
name|void
name|testCJKSloppyPhrase
parameter_list|()
throws|throws
name|Exception
block|{
comment|// individual CJK chars as terms
name|SimpleCJKAnalyzer
name|analyzer
init|=
operator|new
name|SimpleCJKAnalyzer
argument_list|()
decl_stmt|;
name|PhraseQuery
name|expected
init|=
operator|new
name|PhraseQuery
argument_list|(
literal|3
argument_list|,
literal|"field"
argument_list|,
literal|"ä¸­"
argument_list|,
literal|"å½"
argument_list|)
decl_stmt|;
name|QueryBuilder
name|builder
init|=
operator|new
name|QueryBuilder
argument_list|(
name|analyzer
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|builder
operator|.
name|createPhraseQuery
argument_list|(
literal|"field"
argument_list|,
literal|"ä¸­å½"
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * adds synonym of "å" for "å½".    */
DECL|class|MockCJKSynonymFilter
specifier|protected
specifier|static
class|class
name|MockCJKSynonymFilter
extends|extends
name|TokenFilter
block|{
DECL|field|termAtt
name|CharTermAttribute
name|termAtt
init|=
name|addAttribute
argument_list|(
name|CharTermAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|posIncAtt
name|PositionIncrementAttribute
name|posIncAtt
init|=
name|addAttribute
argument_list|(
name|PositionIncrementAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|addSynonym
name|boolean
name|addSynonym
init|=
literal|false
decl_stmt|;
DECL|method|MockCJKSynonymFilter
specifier|public
name|MockCJKSynonymFilter
parameter_list|(
name|TokenStream
name|input
parameter_list|)
block|{
name|super
argument_list|(
name|input
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|incrementToken
specifier|public
specifier|final
name|boolean
name|incrementToken
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|addSynonym
condition|)
block|{
comment|// inject our synonym
name|clearAttributes
argument_list|()
expr_stmt|;
name|termAtt
operator|.
name|setEmpty
argument_list|()
operator|.
name|append
argument_list|(
literal|"å"
argument_list|)
expr_stmt|;
name|posIncAtt
operator|.
name|setPositionIncrement
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|addSynonym
operator|=
literal|false
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|input
operator|.
name|incrementToken
argument_list|()
condition|)
block|{
name|addSynonym
operator|=
name|termAtt
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
literal|"å½"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
DECL|class|MockCJKSynonymAnalyzer
specifier|static
class|class
name|MockCJKSynonymAnalyzer
extends|extends
name|Analyzer
block|{
annotation|@
name|Override
DECL|method|createComponents
specifier|protected
name|TokenStreamComponents
name|createComponents
parameter_list|(
name|String
name|fieldName
parameter_list|)
block|{
name|Tokenizer
name|tokenizer
init|=
operator|new
name|SimpleCJKTokenizer
argument_list|()
decl_stmt|;
return|return
operator|new
name|TokenStreamComponents
argument_list|(
name|tokenizer
argument_list|,
operator|new
name|MockCJKSynonymFilter
argument_list|(
name|tokenizer
argument_list|)
argument_list|)
return|;
block|}
block|}
comment|/** simple CJK synonym test */
DECL|method|testCJKSynonym
specifier|public
name|void
name|testCJKSynonym
parameter_list|()
throws|throws
name|Exception
block|{
name|SynonymQuery
name|expected
init|=
operator|new
name|SynonymQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"å½"
argument_list|)
argument_list|,
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"å"
argument_list|)
argument_list|)
decl_stmt|;
name|QueryBuilder
name|builder
init|=
operator|new
name|QueryBuilder
argument_list|(
operator|new
name|MockCJKSynonymAnalyzer
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|builder
operator|.
name|createBooleanQuery
argument_list|(
literal|"field"
argument_list|,
literal|"å½"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|builder
operator|.
name|createPhraseQuery
argument_list|(
literal|"field"
argument_list|,
literal|"å½"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|builder
operator|.
name|createBooleanQuery
argument_list|(
literal|"field"
argument_list|,
literal|"å½"
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** synonyms with default OR operator */
DECL|method|testCJKSynonymsOR
specifier|public
name|void
name|testCJKSynonymsOR
parameter_list|()
throws|throws
name|Exception
block|{
name|BooleanQuery
operator|.
name|Builder
name|expected
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|expected
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"ä¸­"
argument_list|)
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|SynonymQuery
name|inner
init|=
operator|new
name|SynonymQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"å½"
argument_list|)
argument_list|,
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"å"
argument_list|)
argument_list|)
decl_stmt|;
name|expected
operator|.
name|add
argument_list|(
name|inner
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|QueryBuilder
name|builder
init|=
operator|new
name|QueryBuilder
argument_list|(
operator|new
name|MockCJKSynonymAnalyzer
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|build
argument_list|()
argument_list|,
name|builder
operator|.
name|createBooleanQuery
argument_list|(
literal|"field"
argument_list|,
literal|"ä¸­å½"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** more complex synonyms with default OR operator */
DECL|method|testCJKSynonymsOR2
specifier|public
name|void
name|testCJKSynonymsOR2
parameter_list|()
throws|throws
name|Exception
block|{
name|BooleanQuery
operator|.
name|Builder
name|expected
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|expected
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"ä¸­"
argument_list|)
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|SynonymQuery
name|inner
init|=
operator|new
name|SynonymQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"å½"
argument_list|)
argument_list|,
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"å"
argument_list|)
argument_list|)
decl_stmt|;
name|expected
operator|.
name|add
argument_list|(
name|inner
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|SynonymQuery
name|inner2
init|=
operator|new
name|SynonymQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"å½"
argument_list|)
argument_list|,
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"å"
argument_list|)
argument_list|)
decl_stmt|;
name|expected
operator|.
name|add
argument_list|(
name|inner2
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|QueryBuilder
name|builder
init|=
operator|new
name|QueryBuilder
argument_list|(
operator|new
name|MockCJKSynonymAnalyzer
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|build
argument_list|()
argument_list|,
name|builder
operator|.
name|createBooleanQuery
argument_list|(
literal|"field"
argument_list|,
literal|"ä¸­å½å½"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** synonyms with default AND operator */
DECL|method|testCJKSynonymsAND
specifier|public
name|void
name|testCJKSynonymsAND
parameter_list|()
throws|throws
name|Exception
block|{
name|BooleanQuery
operator|.
name|Builder
name|expected
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|expected
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"ä¸­"
argument_list|)
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|SynonymQuery
name|inner
init|=
operator|new
name|SynonymQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"å½"
argument_list|)
argument_list|,
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"å"
argument_list|)
argument_list|)
decl_stmt|;
name|expected
operator|.
name|add
argument_list|(
name|inner
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|QueryBuilder
name|builder
init|=
operator|new
name|QueryBuilder
argument_list|(
operator|new
name|MockCJKSynonymAnalyzer
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|build
argument_list|()
argument_list|,
name|builder
operator|.
name|createBooleanQuery
argument_list|(
literal|"field"
argument_list|,
literal|"ä¸­å½"
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** more complex synonyms with default AND operator */
DECL|method|testCJKSynonymsAND2
specifier|public
name|void
name|testCJKSynonymsAND2
parameter_list|()
throws|throws
name|Exception
block|{
name|BooleanQuery
operator|.
name|Builder
name|expected
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|expected
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"ä¸­"
argument_list|)
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|SynonymQuery
name|inner
init|=
operator|new
name|SynonymQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"å½"
argument_list|)
argument_list|,
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"å"
argument_list|)
argument_list|)
decl_stmt|;
name|expected
operator|.
name|add
argument_list|(
name|inner
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|SynonymQuery
name|inner2
init|=
operator|new
name|SynonymQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"å½"
argument_list|)
argument_list|,
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"å"
argument_list|)
argument_list|)
decl_stmt|;
name|expected
operator|.
name|add
argument_list|(
name|inner2
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|QueryBuilder
name|builder
init|=
operator|new
name|QueryBuilder
argument_list|(
operator|new
name|MockCJKSynonymAnalyzer
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|build
argument_list|()
argument_list|,
name|builder
operator|.
name|createBooleanQuery
argument_list|(
literal|"field"
argument_list|,
literal|"ä¸­å½å½"
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** forms multiphrase query */
DECL|method|testCJKSynonymsPhrase
specifier|public
name|void
name|testCJKSynonymsPhrase
parameter_list|()
throws|throws
name|Exception
block|{
name|MultiPhraseQuery
name|expected
init|=
operator|new
name|MultiPhraseQuery
argument_list|()
decl_stmt|;
name|expected
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"ä¸­"
argument_list|)
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
operator|new
name|Term
index|[]
block|{
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"å½"
argument_list|)
block|,
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"å"
argument_list|)
block|}
argument_list|)
expr_stmt|;
name|QueryBuilder
name|builder
init|=
operator|new
name|QueryBuilder
argument_list|(
operator|new
name|MockCJKSynonymAnalyzer
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|builder
operator|.
name|createPhraseQuery
argument_list|(
literal|"field"
argument_list|,
literal|"ä¸­å½"
argument_list|)
argument_list|)
expr_stmt|;
name|expected
operator|.
name|setSlop
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|builder
operator|.
name|createPhraseQuery
argument_list|(
literal|"field"
argument_list|,
literal|"ä¸­å½"
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testNoTermAttribute
specifier|public
name|void
name|testNoTermAttribute
parameter_list|()
block|{
comment|//Can't use MockTokenizer because it adds TermAttribute and we don't want that
name|Analyzer
name|analyzer
init|=
operator|new
name|Analyzer
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|TokenStreamComponents
name|createComponents
parameter_list|(
name|String
name|fieldName
parameter_list|)
block|{
return|return
operator|new
name|TokenStreamComponents
argument_list|(
operator|new
name|Tokenizer
argument_list|()
block|{
name|boolean
name|wasReset
init|=
literal|false
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|reset
parameter_list|()
throws|throws
name|IOException
block|{
name|super
operator|.
name|reset
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|wasReset
argument_list|)
expr_stmt|;
name|wasReset
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|incrementToken
parameter_list|()
throws|throws
name|IOException
block|{
name|assertTrue
argument_list|(
name|wasReset
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|QueryBuilder
name|builder
init|=
operator|new
name|QueryBuilder
argument_list|(
name|analyzer
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|builder
operator|.
name|createBooleanQuery
argument_list|(
literal|"field"
argument_list|,
literal|"whatever"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
