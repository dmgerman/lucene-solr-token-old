begin_unit
begin_package
DECL|package|org.apache.lucene.util.automaton
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|automaton
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IntsRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IntsRefBuilder
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|TestUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|fst
operator|.
name|Util
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|automaton
operator|.
name|FiniteStringsIteratorTest
operator|.
name|getFiniteStrings
import|;
end_import
begin_comment
comment|/**  * Test for {@link FiniteStringsIterator}.  */
end_comment
begin_class
DECL|class|LimitedFiniteStringsIteratorTest
specifier|public
class|class
name|LimitedFiniteStringsIteratorTest
extends|extends
name|LuceneTestCase
block|{
DECL|method|testRandomFiniteStrings
specifier|public
name|void
name|testRandomFiniteStrings
parameter_list|()
block|{
comment|// Just makes sure we can run on any random finite
comment|// automaton:
name|int
name|iters
init|=
name|atLeast
argument_list|(
literal|100
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iters
condition|;
name|i
operator|++
control|)
block|{
name|Automaton
name|a
init|=
name|AutomatonTestUtil
operator|.
name|randomAutomaton
argument_list|(
name|random
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
comment|// Must pass a limit because the random automaton
comment|// can accept MANY strings:
name|getFiniteStrings
argument_list|(
operator|new
name|LimitedFiniteStringsIterator
argument_list|(
name|a
argument_list|,
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|1000
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// NOTE: cannot do this, because the method is not
comment|// guaranteed to detect cycles when you have a limit
comment|//assertTrue(Operations.isFinite(a));
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|iae
parameter_list|)
block|{
name|assertFalse
argument_list|(
name|Operations
operator|.
name|isFinite
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testInvalidLimitNegative
specifier|public
name|void
name|testInvalidLimitNegative
parameter_list|()
block|{
name|Automaton
name|a
init|=
name|AutomatonTestUtil
operator|.
name|randomAutomaton
argument_list|(
name|random
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
operator|new
name|LimitedFiniteStringsIterator
argument_list|(
name|a
argument_list|,
operator|-
literal|7
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"did not hit exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|iae
parameter_list|)
block|{
comment|// expected
block|}
block|}
DECL|method|testInvalidLimitNull
specifier|public
name|void
name|testInvalidLimitNull
parameter_list|()
block|{
name|Automaton
name|a
init|=
name|AutomatonTestUtil
operator|.
name|randomAutomaton
argument_list|(
name|random
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
operator|new
name|LimitedFiniteStringsIterator
argument_list|(
name|a
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"did not hit exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|iae
parameter_list|)
block|{
comment|// expected
block|}
block|}
DECL|method|testSingleton
specifier|public
name|void
name|testSingleton
parameter_list|()
block|{
name|Automaton
name|a
init|=
name|Automata
operator|.
name|makeString
argument_list|(
literal|"foobar"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|IntsRef
argument_list|>
name|actual
init|=
name|getFiniteStrings
argument_list|(
operator|new
name|LimitedFiniteStringsIterator
argument_list|(
name|a
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|actual
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|IntsRefBuilder
name|scratch
init|=
operator|new
name|IntsRefBuilder
argument_list|()
decl_stmt|;
name|Util
operator|.
name|toUTF32
argument_list|(
literal|"foobar"
operator|.
name|toCharArray
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|6
argument_list|,
name|scratch
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|actual
operator|.
name|contains
argument_list|(
name|scratch
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testLimit
specifier|public
name|void
name|testLimit
parameter_list|()
block|{
name|Automaton
name|a
init|=
name|Operations
operator|.
name|union
argument_list|(
name|Automata
operator|.
name|makeString
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|Automata
operator|.
name|makeString
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
decl_stmt|;
comment|// Test without limit
name|FiniteStringsIterator
name|withoutLimit
init|=
operator|new
name|LimitedFiniteStringsIterator
argument_list|(
name|a
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|getFiniteStrings
argument_list|(
name|withoutLimit
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test with limit
name|FiniteStringsIterator
name|withLimit
init|=
operator|new
name|LimitedFiniteStringsIterator
argument_list|(
name|a
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|getFiniteStrings
argument_list|(
name|withLimit
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testSize
specifier|public
name|void
name|testSize
parameter_list|()
block|{
name|Automaton
name|a
init|=
name|Operations
operator|.
name|union
argument_list|(
name|Automata
operator|.
name|makeString
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|Automata
operator|.
name|makeString
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
decl_stmt|;
name|LimitedFiniteStringsIterator
name|iterator
init|=
operator|new
name|LimitedFiniteStringsIterator
argument_list|(
name|a
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|IntsRef
argument_list|>
name|actual
init|=
name|getFiniteStrings
argument_list|(
name|iterator
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|actual
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|iterator
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
