begin_unit
begin_package
DECL|package|org.apache.lucene.util.junitcompat
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|junitcompat
package|;
end_package
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Stack
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestRule
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|Description
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|JUnitCore
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|model
operator|.
name|Statement
import|;
end_import
begin_comment
comment|/**  * This verifies that JUnit {@link Rule}s are invoked before   * {@link Before} and {@link  After} hooks. This should be the  * case from JUnit 4.10 on.  */
end_comment
begin_class
DECL|class|TestJUnitRuleOrder
specifier|public
class|class
name|TestJUnitRuleOrder
extends|extends
name|WithNestedTests
block|{
DECL|field|stack
specifier|static
name|Stack
argument_list|<
name|String
argument_list|>
name|stack
decl_stmt|;
DECL|method|TestJUnitRuleOrder
specifier|public
name|TestJUnitRuleOrder
parameter_list|()
block|{
name|super
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|class|Nested
specifier|public
specifier|static
class|class
name|Nested
extends|extends
name|WithNestedTests
operator|.
name|AbstractNestedTest
block|{
annotation|@
name|Before
DECL|method|before
specifier|public
name|void
name|before
parameter_list|()
block|{
name|stack
operator|.
name|push
argument_list|(
literal|"@Before"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|after
specifier|public
name|void
name|after
parameter_list|()
block|{
name|stack
operator|.
name|push
argument_list|(
literal|"@After"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Rule
DECL|field|testRule
specifier|public
name|TestRule
name|testRule
init|=
operator|new
name|TestRule
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Statement
name|apply
parameter_list|(
specifier|final
name|Statement
name|base
parameter_list|,
name|Description
name|description
parameter_list|)
block|{
return|return
operator|new
name|Statement
argument_list|()
block|{
specifier|public
name|void
name|evaluate
parameter_list|()
throws|throws
name|Throwable
block|{
name|stack
operator|.
name|push
argument_list|(
literal|"@Rule before"
argument_list|)
expr_stmt|;
name|base
operator|.
name|evaluate
argument_list|()
expr_stmt|;
name|stack
operator|.
name|push
argument_list|(
literal|"@Rule after"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
decl_stmt|;
annotation|@
name|Test
DECL|method|test
specifier|public
name|void
name|test
parameter_list|()
block|{
comment|/* empty */
block|}
annotation|@
name|BeforeClass
DECL|method|beforeClassCleanup
specifier|public
specifier|static
name|void
name|beforeClassCleanup
parameter_list|()
block|{
name|stack
operator|=
operator|new
name|Stack
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|afterClassCheck
specifier|public
specifier|static
name|void
name|afterClassCheck
parameter_list|()
block|{
name|stack
operator|.
name|push
argument_list|(
literal|"@AfterClass"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testRuleOrder
specifier|public
name|void
name|testRuleOrder
parameter_list|()
block|{
name|JUnitCore
operator|.
name|runClasses
argument_list|(
name|Nested
operator|.
name|class
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|toString
argument_list|(
name|stack
operator|.
name|toArray
argument_list|()
argument_list|)
argument_list|,
literal|"[@Rule before, @Before, @After, @Rule after, @AfterClass]"
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
