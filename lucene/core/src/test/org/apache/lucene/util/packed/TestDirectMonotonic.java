begin_unit
begin_package
DECL|package|org.apache.lucene.util.packed
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|packed
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IOContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexInput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexOutput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LongValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|TestUtil
import|;
end_import
begin_class
DECL|class|TestDirectMonotonic
specifier|public
class|class
name|TestDirectMonotonic
extends|extends
name|LuceneTestCase
block|{
DECL|method|testEmpty
specifier|public
name|void
name|testEmpty
parameter_list|()
throws|throws
name|IOException
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
specifier|final
name|int
name|blockShift
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
name|DirectMonotonicWriter
operator|.
name|MIN_BLOCK_SHIFT
argument_list|,
name|DirectMonotonicWriter
operator|.
name|MAX_BLOCK_SHIFT
argument_list|)
decl_stmt|;
specifier|final
name|long
name|dataLength
decl_stmt|;
try|try
init|(
name|IndexOutput
name|metaOut
init|=
name|dir
operator|.
name|createOutput
argument_list|(
literal|"meta"
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
init|;
name|IndexOutput
name|dataOut
operator|=
name|dir
operator|.
name|createOutput
argument_list|(
literal|"data"
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
init|)
block|{
name|DirectMonotonicWriter
name|w
init|=
name|DirectMonotonicWriter
operator|.
name|getInstance
argument_list|(
name|metaOut
argument_list|,
name|dataOut
argument_list|,
literal|0
argument_list|,
name|blockShift
argument_list|)
decl_stmt|;
name|w
operator|.
name|finish
argument_list|()
expr_stmt|;
name|dataLength
operator|=
name|dataOut
operator|.
name|getFilePointer
argument_list|()
expr_stmt|;
block|}
try|try
init|(
name|IndexInput
name|metaIn
init|=
name|dir
operator|.
name|openInput
argument_list|(
literal|"meta"
argument_list|,
name|IOContext
operator|.
name|READONCE
argument_list|)
init|;
name|IndexInput
name|dataIn
operator|=
name|dir
operator|.
name|openInput
argument_list|(
literal|"data"
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
init|)
block|{
name|DirectMonotonicReader
operator|.
name|Meta
name|meta
init|=
name|DirectMonotonicReader
operator|.
name|loadMeta
argument_list|(
name|metaIn
argument_list|,
literal|0
argument_list|,
name|blockShift
argument_list|)
decl_stmt|;
name|DirectMonotonicReader
operator|.
name|getInstance
argument_list|(
name|meta
argument_list|,
name|dataIn
operator|.
name|randomAccessSlice
argument_list|(
literal|0
argument_list|,
name|dataLength
argument_list|)
argument_list|)
expr_stmt|;
comment|// no exception
block|}
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testSimple
specifier|public
name|void
name|testSimple
parameter_list|()
throws|throws
name|IOException
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
specifier|final
name|int
name|blockShift
init|=
literal|2
decl_stmt|;
name|List
argument_list|<
name|Long
argument_list|>
name|actualValues
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|1L
argument_list|,
literal|2L
argument_list|,
literal|5L
argument_list|,
literal|7L
argument_list|,
literal|8L
argument_list|,
literal|100L
argument_list|)
decl_stmt|;
specifier|final
name|int
name|numValues
init|=
name|actualValues
operator|.
name|size
argument_list|()
decl_stmt|;
specifier|final
name|long
name|dataLength
decl_stmt|;
try|try
init|(
name|IndexOutput
name|metaOut
init|=
name|dir
operator|.
name|createOutput
argument_list|(
literal|"meta"
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
init|;
name|IndexOutput
name|dataOut
operator|=
name|dir
operator|.
name|createOutput
argument_list|(
literal|"data"
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
init|)
block|{
name|DirectMonotonicWriter
name|w
init|=
name|DirectMonotonicWriter
operator|.
name|getInstance
argument_list|(
name|metaOut
argument_list|,
name|dataOut
argument_list|,
name|numValues
argument_list|,
name|blockShift
argument_list|)
decl_stmt|;
for|for
control|(
name|long
name|v
range|:
name|actualValues
control|)
block|{
name|w
operator|.
name|add
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
name|w
operator|.
name|finish
argument_list|()
expr_stmt|;
name|dataLength
operator|=
name|dataOut
operator|.
name|getFilePointer
argument_list|()
expr_stmt|;
block|}
try|try
init|(
name|IndexInput
name|metaIn
init|=
name|dir
operator|.
name|openInput
argument_list|(
literal|"meta"
argument_list|,
name|IOContext
operator|.
name|READONCE
argument_list|)
init|;
name|IndexInput
name|dataIn
operator|=
name|dir
operator|.
name|openInput
argument_list|(
literal|"data"
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
init|)
block|{
name|DirectMonotonicReader
operator|.
name|Meta
name|meta
init|=
name|DirectMonotonicReader
operator|.
name|loadMeta
argument_list|(
name|metaIn
argument_list|,
name|numValues
argument_list|,
name|blockShift
argument_list|)
decl_stmt|;
name|LongValues
name|values
init|=
name|DirectMonotonicReader
operator|.
name|getInstance
argument_list|(
name|meta
argument_list|,
name|dataIn
operator|.
name|randomAccessSlice
argument_list|(
literal|0
argument_list|,
name|dataLength
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numValues
condition|;
operator|++
name|i
control|)
block|{
specifier|final
name|long
name|v
init|=
name|values
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|actualValues
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|longValue
argument_list|()
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
block|}
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testConstantSlope
specifier|public
name|void
name|testConstantSlope
parameter_list|()
throws|throws
name|IOException
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
specifier|final
name|int
name|blockShift
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
name|DirectMonotonicWriter
operator|.
name|MIN_BLOCK_SHIFT
argument_list|,
name|DirectMonotonicWriter
operator|.
name|MAX_BLOCK_SHIFT
argument_list|)
decl_stmt|;
specifier|final
name|int
name|numValues
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|1
operator|<<
literal|20
argument_list|)
decl_stmt|;
specifier|final
name|long
name|min
init|=
name|random
argument_list|()
operator|.
name|nextLong
argument_list|()
decl_stmt|;
specifier|final
name|long
name|inc
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|1
operator|<<
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|20
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Long
argument_list|>
name|actualValues
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numValues
condition|;
operator|++
name|i
control|)
block|{
name|actualValues
operator|.
name|add
argument_list|(
name|min
operator|+
name|inc
operator|*
name|i
argument_list|)
expr_stmt|;
block|}
specifier|final
name|long
name|dataLength
decl_stmt|;
try|try
init|(
name|IndexOutput
name|metaOut
init|=
name|dir
operator|.
name|createOutput
argument_list|(
literal|"meta"
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
init|;
name|IndexOutput
name|dataOut
operator|=
name|dir
operator|.
name|createOutput
argument_list|(
literal|"data"
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
init|)
block|{
name|DirectMonotonicWriter
name|w
init|=
name|DirectMonotonicWriter
operator|.
name|getInstance
argument_list|(
name|metaOut
argument_list|,
name|dataOut
argument_list|,
name|numValues
argument_list|,
name|blockShift
argument_list|)
decl_stmt|;
for|for
control|(
name|long
name|v
range|:
name|actualValues
control|)
block|{
name|w
operator|.
name|add
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
name|w
operator|.
name|finish
argument_list|()
expr_stmt|;
name|dataLength
operator|=
name|dataOut
operator|.
name|getFilePointer
argument_list|()
expr_stmt|;
block|}
try|try
init|(
name|IndexInput
name|metaIn
init|=
name|dir
operator|.
name|openInput
argument_list|(
literal|"meta"
argument_list|,
name|IOContext
operator|.
name|READONCE
argument_list|)
init|;
name|IndexInput
name|dataIn
operator|=
name|dir
operator|.
name|openInput
argument_list|(
literal|"data"
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
init|)
block|{
name|DirectMonotonicReader
operator|.
name|Meta
name|meta
init|=
name|DirectMonotonicReader
operator|.
name|loadMeta
argument_list|(
name|metaIn
argument_list|,
name|numValues
argument_list|,
name|blockShift
argument_list|)
decl_stmt|;
name|LongValues
name|values
init|=
name|DirectMonotonicReader
operator|.
name|getInstance
argument_list|(
name|meta
argument_list|,
name|dataIn
operator|.
name|randomAccessSlice
argument_list|(
literal|0
argument_list|,
name|dataLength
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numValues
condition|;
operator|++
name|i
control|)
block|{
name|assertEquals
argument_list|(
name|actualValues
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|longValue
argument_list|()
argument_list|,
name|values
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|dataIn
operator|.
name|getFilePointer
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testRandom
specifier|public
name|void
name|testRandom
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|int
name|iters
init|=
name|atLeast
argument_list|(
literal|3
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|iter
init|=
literal|0
init|;
name|iter
operator|<
name|iters
condition|;
operator|++
name|iter
control|)
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
specifier|final
name|int
name|blockShift
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
name|DirectMonotonicWriter
operator|.
name|MIN_BLOCK_SHIFT
argument_list|,
name|DirectMonotonicWriter
operator|.
name|MAX_BLOCK_SHIFT
argument_list|)
decl_stmt|;
specifier|final
name|int
name|maxNumValues
init|=
literal|1
operator|<<
literal|20
decl_stmt|;
specifier|final
name|int
name|numValues
decl_stmt|;
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
comment|// random number
name|numValues
operator|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
name|maxNumValues
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// multiple of the block size
specifier|final
name|int
name|numBlocks
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|0
argument_list|,
name|maxNumValues
operator|>>>
name|blockShift
argument_list|)
decl_stmt|;
name|numValues
operator|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|0
argument_list|,
name|numBlocks
argument_list|)
operator|<<
name|blockShift
expr_stmt|;
block|}
name|List
argument_list|<
name|Long
argument_list|>
name|actualValues
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|long
name|previous
init|=
name|random
argument_list|()
operator|.
name|nextLong
argument_list|()
decl_stmt|;
if|if
condition|(
name|numValues
operator|>
literal|0
condition|)
block|{
name|actualValues
operator|.
name|add
argument_list|(
name|previous
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|numValues
condition|;
operator|++
name|i
control|)
block|{
name|previous
operator|+=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|1
operator|<<
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|20
argument_list|)
argument_list|)
expr_stmt|;
name|actualValues
operator|.
name|add
argument_list|(
name|previous
argument_list|)
expr_stmt|;
block|}
specifier|final
name|long
name|dataLength
decl_stmt|;
try|try
init|(
name|IndexOutput
name|metaOut
init|=
name|dir
operator|.
name|createOutput
argument_list|(
literal|"meta"
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
init|;
name|IndexOutput
name|dataOut
operator|=
name|dir
operator|.
name|createOutput
argument_list|(
literal|"data"
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
init|)
block|{
name|DirectMonotonicWriter
name|w
init|=
name|DirectMonotonicWriter
operator|.
name|getInstance
argument_list|(
name|metaOut
argument_list|,
name|dataOut
argument_list|,
name|numValues
argument_list|,
name|blockShift
argument_list|)
decl_stmt|;
for|for
control|(
name|long
name|v
range|:
name|actualValues
control|)
block|{
name|w
operator|.
name|add
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
name|w
operator|.
name|finish
argument_list|()
expr_stmt|;
name|dataLength
operator|=
name|dataOut
operator|.
name|getFilePointer
argument_list|()
expr_stmt|;
block|}
try|try
init|(
name|IndexInput
name|metaIn
init|=
name|dir
operator|.
name|openInput
argument_list|(
literal|"meta"
argument_list|,
name|IOContext
operator|.
name|READONCE
argument_list|)
init|;
name|IndexInput
name|dataIn
operator|=
name|dir
operator|.
name|openInput
argument_list|(
literal|"data"
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
init|)
block|{
name|DirectMonotonicReader
operator|.
name|Meta
name|meta
init|=
name|DirectMonotonicReader
operator|.
name|loadMeta
argument_list|(
name|metaIn
argument_list|,
name|numValues
argument_list|,
name|blockShift
argument_list|)
decl_stmt|;
name|LongValues
name|values
init|=
name|DirectMonotonicReader
operator|.
name|getInstance
argument_list|(
name|meta
argument_list|,
name|dataIn
operator|.
name|randomAccessSlice
argument_list|(
literal|0
argument_list|,
name|dataLength
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numValues
condition|;
operator|++
name|i
control|)
block|{
name|assertEquals
argument_list|(
name|actualValues
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|longValue
argument_list|()
argument_list|,
name|values
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class
end_unit
