begin_unit
begin_package
DECL|package|org.apache.lucene.util
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|PagedBytes
operator|.
name|PagedBytesDataInput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|PagedBytes
operator|.
name|PagedBytesDataOutput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import
begin_class
annotation|@
name|Ignore
argument_list|(
literal|"You must increase heap to> 2 G to run this"
argument_list|)
DECL|class|Test2BPagedBytes
specifier|public
class|class
name|Test2BPagedBytes
extends|extends
name|LuceneTestCase
block|{
DECL|method|test
specifier|public
name|void
name|test
parameter_list|()
throws|throws
name|Exception
block|{
name|PagedBytes
name|pb
init|=
operator|new
name|PagedBytes
argument_list|(
literal|15
argument_list|)
decl_stmt|;
name|PagedBytesDataOutput
name|dataOutput
init|=
name|pb
operator|.
name|getDataOutput
argument_list|()
decl_stmt|;
name|long
name|netBytes
init|=
literal|0
decl_stmt|;
name|long
name|seed
init|=
name|random
argument_list|()
operator|.
name|nextLong
argument_list|()
decl_stmt|;
name|long
name|lastFP
init|=
literal|0
decl_stmt|;
name|Random
name|r2
init|=
operator|new
name|Random
argument_list|(
name|seed
argument_list|)
decl_stmt|;
while|while
condition|(
name|netBytes
operator|<
literal|1.1
operator|*
name|Integer
operator|.
name|MAX_VALUE
condition|)
block|{
name|int
name|numBytes
init|=
name|_TestUtil
operator|.
name|nextInt
argument_list|(
name|r2
argument_list|,
literal|1
argument_list|,
literal|100000
argument_list|)
decl_stmt|;
name|byte
index|[]
name|bytes
init|=
operator|new
name|byte
index|[
name|numBytes
index|]
decl_stmt|;
name|r2
operator|.
name|nextBytes
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
name|dataOutput
operator|.
name|writeBytes
argument_list|(
name|bytes
argument_list|,
name|bytes
operator|.
name|length
argument_list|)
expr_stmt|;
name|long
name|fp
init|=
name|dataOutput
operator|.
name|getPosition
argument_list|()
decl_stmt|;
assert|assert
name|fp
operator|==
name|lastFP
operator|+
name|numBytes
assert|;
name|lastFP
operator|=
name|fp
expr_stmt|;
name|netBytes
operator|+=
name|numBytes
expr_stmt|;
block|}
name|pb
operator|.
name|freeze
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|PagedBytesDataInput
name|dataInput
init|=
name|pb
operator|.
name|getDataInput
argument_list|()
decl_stmt|;
name|lastFP
operator|=
literal|0
expr_stmt|;
name|r2
operator|=
operator|new
name|Random
argument_list|(
name|seed
argument_list|)
expr_stmt|;
name|netBytes
operator|=
literal|0
expr_stmt|;
while|while
condition|(
name|netBytes
operator|<
literal|1.1
operator|*
name|Integer
operator|.
name|MAX_VALUE
condition|)
block|{
name|int
name|numBytes
init|=
name|_TestUtil
operator|.
name|nextInt
argument_list|(
name|r2
argument_list|,
literal|1
argument_list|,
literal|100000
argument_list|)
decl_stmt|;
name|byte
index|[]
name|bytes
init|=
operator|new
name|byte
index|[
name|numBytes
index|]
decl_stmt|;
name|r2
operator|.
name|nextBytes
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
name|byte
index|[]
name|bytesIn
init|=
operator|new
name|byte
index|[
name|numBytes
index|]
decl_stmt|;
name|dataInput
operator|.
name|readBytes
argument_list|(
name|bytesIn
argument_list|,
literal|0
argument_list|,
name|numBytes
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|bytes
argument_list|,
name|bytesIn
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|fp
init|=
name|dataInput
operator|.
name|getPosition
argument_list|()
decl_stmt|;
assert|assert
name|fp
operator|==
name|lastFP
operator|+
name|numBytes
assert|;
name|lastFP
operator|=
name|fp
expr_stmt|;
name|netBytes
operator|+=
name|numBytes
expr_stmt|;
block|}
block|}
block|}
end_class
end_unit
