begin_unit
begin_package
DECL|package|org.apache.lucene.util
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import
begin_comment
comment|/** Simple test methods for IOUtils */
end_comment
begin_class
DECL|class|TestIOUtils
specifier|public
class|class
name|TestIOUtils
extends|extends
name|LuceneTestCase
block|{
DECL|method|testDeleteFileIgnoringExceptions
specifier|public
name|void
name|testDeleteFileIgnoringExceptions
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|dir
init|=
name|createTempDir
argument_list|()
decl_stmt|;
name|Path
name|file1
init|=
name|dir
operator|.
name|resolve
argument_list|(
literal|"file1"
argument_list|)
decl_stmt|;
name|Files
operator|.
name|createFile
argument_list|(
name|file1
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|deleteFilesIgnoringExceptions
argument_list|(
name|file1
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|file1
argument_list|)
argument_list|)
expr_stmt|;
comment|// actually deletes
block|}
DECL|method|testDontDeleteFileIgnoringExceptions
specifier|public
name|void
name|testDontDeleteFileIgnoringExceptions
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|dir
init|=
name|createTempDir
argument_list|()
decl_stmt|;
name|Path
name|file1
init|=
name|dir
operator|.
name|resolve
argument_list|(
literal|"file1"
argument_list|)
decl_stmt|;
name|IOUtils
operator|.
name|deleteFilesIgnoringExceptions
argument_list|(
name|file1
argument_list|)
expr_stmt|;
comment|// no exception
block|}
DECL|method|testDeleteTwoFilesIgnoringExceptions
specifier|public
name|void
name|testDeleteTwoFilesIgnoringExceptions
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|dir
init|=
name|createTempDir
argument_list|()
decl_stmt|;
name|Path
name|file1
init|=
name|dir
operator|.
name|resolve
argument_list|(
literal|"file1"
argument_list|)
decl_stmt|;
name|Path
name|file2
init|=
name|dir
operator|.
name|resolve
argument_list|(
literal|"file2"
argument_list|)
decl_stmt|;
comment|// only create file2
name|Files
operator|.
name|createFile
argument_list|(
name|file2
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|deleteFilesIgnoringExceptions
argument_list|(
name|file1
argument_list|,
name|file2
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|file2
argument_list|)
argument_list|)
expr_stmt|;
comment|// no exception
comment|// actually deletes file2
block|}
DECL|method|testDeleteFileIfExists
specifier|public
name|void
name|testDeleteFileIfExists
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|dir
init|=
name|createTempDir
argument_list|()
decl_stmt|;
name|Path
name|file1
init|=
name|dir
operator|.
name|resolve
argument_list|(
literal|"file1"
argument_list|)
decl_stmt|;
name|Files
operator|.
name|createFile
argument_list|(
name|file1
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|deleteFilesIfExist
argument_list|(
name|file1
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|file1
argument_list|)
argument_list|)
expr_stmt|;
comment|// actually deletes
block|}
DECL|method|testDontDeleteDoesntExist
specifier|public
name|void
name|testDontDeleteDoesntExist
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|dir
init|=
name|createTempDir
argument_list|()
decl_stmt|;
name|Path
name|file1
init|=
name|dir
operator|.
name|resolve
argument_list|(
literal|"file1"
argument_list|)
decl_stmt|;
name|IOUtils
operator|.
name|deleteFilesIfExist
argument_list|(
name|file1
argument_list|)
expr_stmt|;
comment|// no exception
block|}
DECL|method|testDeleteTwoFilesIfExist
specifier|public
name|void
name|testDeleteTwoFilesIfExist
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|dir
init|=
name|createTempDir
argument_list|()
decl_stmt|;
name|Path
name|file1
init|=
name|dir
operator|.
name|resolve
argument_list|(
literal|"file1"
argument_list|)
decl_stmt|;
name|Path
name|file2
init|=
name|dir
operator|.
name|resolve
argument_list|(
literal|"file2"
argument_list|)
decl_stmt|;
comment|// only create file2
name|Files
operator|.
name|createFile
argument_list|(
name|file2
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|deleteFilesIfExist
argument_list|(
name|file1
argument_list|,
name|file2
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|file2
argument_list|)
argument_list|)
expr_stmt|;
comment|// no exception
comment|// actually deletes file2
block|}
block|}
end_class
end_unit
