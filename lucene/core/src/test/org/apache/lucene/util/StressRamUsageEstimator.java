begin_unit
begin_package
DECL|package|org.apache.lucene.util
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
package|;
end_package
begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|GarbageCollectorMXBean
import|;
end_import
begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|ManagementFactory
import|;
end_import
begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|MemoryMXBean
import|;
end_import
begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|MemoryUsage
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import
begin_comment
comment|/**  * Estimates how {@link RamUsageEstimator} estimates physical memory consumption  * of Java objects.   */
end_comment
begin_class
DECL|class|StressRamUsageEstimator
specifier|public
class|class
name|StressRamUsageEstimator
extends|extends
name|LuceneTestCase
block|{
DECL|class|Entry
specifier|static
class|class
name|Entry
block|{
DECL|field|o
name|Object
name|o
decl_stmt|;
DECL|field|next
name|Entry
name|next
decl_stmt|;
DECL|method|createNext
specifier|public
name|Entry
name|createNext
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
name|Entry
name|e
init|=
operator|new
name|Entry
argument_list|()
decl_stmt|;
name|e
operator|.
name|o
operator|=
name|o
expr_stmt|;
name|e
operator|.
name|next
operator|=
name|next
expr_stmt|;
name|this
operator|.
name|next
operator|=
name|e
expr_stmt|;
return|return
name|e
return|;
block|}
block|}
comment|// This shows an easy stack overflow because we're counting recursively.
annotation|@
name|Ignore
DECL|method|testChainedEstimation
specifier|public
name|void
name|testChainedEstimation
parameter_list|()
block|{
name|MemoryMXBean
name|memoryMXBean
init|=
name|ManagementFactory
operator|.
name|getMemoryMXBean
argument_list|()
decl_stmt|;
name|Random
name|rnd
init|=
name|random
decl_stmt|;
name|Entry
name|first
init|=
operator|new
name|Entry
argument_list|()
decl_stmt|;
try|try
block|{
while|while
condition|(
literal|true
condition|)
block|{
comment|// Check the current memory consumption and provide the estimate.
name|long
name|jvmUsed
init|=
name|memoryMXBean
operator|.
name|getHeapMemoryUsage
argument_list|()
operator|.
name|getUsed
argument_list|()
decl_stmt|;
name|long
name|estimated
init|=
name|RamUsageEstimator
operator|.
name|sizeOf
argument_list|(
name|first
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ENGLISH
argument_list|,
literal|"%10d, %10d"
argument_list|,
name|jvmUsed
argument_list|,
name|estimated
argument_list|)
argument_list|)
expr_stmt|;
comment|// Make a batch of objects.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5000
condition|;
name|i
operator|++
control|)
block|{
name|first
operator|.
name|createNext
argument_list|(
operator|new
name|byte
index|[
name|rnd
operator|.
name|nextInt
argument_list|(
literal|1024
argument_list|)
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|OutOfMemoryError
name|e
parameter_list|)
block|{
comment|// Release and quit.
block|}
block|}
DECL|field|guard
specifier|volatile
name|Object
name|guard
decl_stmt|;
comment|// This shows an easy stack overflow because we're counting recursively.
DECL|method|testLargeSetOfByteArrays
specifier|public
name|void
name|testLargeSetOfByteArrays
parameter_list|()
block|{
name|MemoryMXBean
name|memoryMXBean
init|=
name|ManagementFactory
operator|.
name|getMemoryMXBean
argument_list|()
decl_stmt|;
name|causeGc
argument_list|()
expr_stmt|;
name|long
name|before
init|=
name|memoryMXBean
operator|.
name|getHeapMemoryUsage
argument_list|()
operator|.
name|getUsed
argument_list|()
decl_stmt|;
name|Object
index|[]
name|all
init|=
operator|new
name|Object
index|[
literal|1000000
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|all
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|all
index|[
name|i
index|]
operator|=
operator|new
name|byte
index|[
name|random
operator|.
name|nextInt
argument_list|(
literal|3
argument_list|)
index|]
expr_stmt|;
block|}
name|causeGc
argument_list|()
expr_stmt|;
name|long
name|after
init|=
name|memoryMXBean
operator|.
name|getHeapMemoryUsage
argument_list|()
operator|.
name|getUsed
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"mx:  "
operator|+
name|RamUsageEstimator
operator|.
name|humanReadableUnits
argument_list|(
name|after
operator|-
name|before
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"rue: "
operator|+
name|RamUsageEstimator
operator|.
name|humanReadableUnits
argument_list|(
name|shallowSizeOf
argument_list|(
name|all
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|guard
operator|=
name|all
expr_stmt|;
block|}
DECL|method|shallowSizeOf
specifier|private
name|long
name|shallowSizeOf
parameter_list|(
name|Object
index|[]
name|all
parameter_list|)
block|{
name|long
name|s
init|=
name|RamUsageEstimator
operator|.
name|shallowSizeOf
argument_list|(
name|all
argument_list|)
decl_stmt|;
for|for
control|(
name|Object
name|o
range|:
name|all
control|)
block|{
name|s
operator|+=
name|RamUsageEstimator
operator|.
name|shallowSizeOf
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
return|return
name|s
return|;
block|}
DECL|method|shallowSizeOf
specifier|private
name|long
name|shallowSizeOf
parameter_list|(
name|Object
index|[]
index|[]
name|all
parameter_list|)
block|{
name|long
name|s
init|=
name|RamUsageEstimator
operator|.
name|shallowSizeOf
argument_list|(
name|all
argument_list|)
decl_stmt|;
for|for
control|(
name|Object
index|[]
name|o
range|:
name|all
control|)
block|{
name|s
operator|+=
name|RamUsageEstimator
operator|.
name|shallowSizeOf
argument_list|(
name|o
argument_list|)
expr_stmt|;
for|for
control|(
name|Object
name|o2
range|:
name|o
control|)
block|{
name|s
operator|+=
name|RamUsageEstimator
operator|.
name|shallowSizeOf
argument_list|(
name|o2
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|s
return|;
block|}
DECL|method|testSimpleByteArrays
specifier|public
name|void
name|testSimpleByteArrays
parameter_list|()
block|{
name|MemoryMXBean
name|memoryMXBean
init|=
name|ManagementFactory
operator|.
name|getMemoryMXBean
argument_list|()
decl_stmt|;
name|Object
index|[]
index|[]
name|all
init|=
operator|new
name|Object
index|[
literal|0
index|]
index|[]
decl_stmt|;
try|try
block|{
while|while
condition|(
literal|true
condition|)
block|{
comment|// Check the current memory consumption and provide the estimate.
name|causeGc
argument_list|()
expr_stmt|;
name|MemoryUsage
name|mu
init|=
name|memoryMXBean
operator|.
name|getHeapMemoryUsage
argument_list|()
decl_stmt|;
name|long
name|estimated
init|=
name|shallowSizeOf
argument_list|(
name|all
argument_list|)
decl_stmt|;
if|if
condition|(
name|estimated
operator|>
literal|50
operator|*
name|RamUsageEstimator
operator|.
name|ONE_MB
condition|)
block|{
break|break;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ENGLISH
argument_list|,
literal|"%10s\t%10s\t%10s"
argument_list|,
name|RamUsageEstimator
operator|.
name|humanReadableUnits
argument_list|(
name|mu
operator|.
name|getUsed
argument_list|()
argument_list|)
argument_list|,
name|RamUsageEstimator
operator|.
name|humanReadableUnits
argument_list|(
name|mu
operator|.
name|getMax
argument_list|()
argument_list|)
argument_list|,
name|RamUsageEstimator
operator|.
name|humanReadableUnits
argument_list|(
name|estimated
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Make another batch of objects.
name|Object
index|[]
name|seg
init|=
operator|new
name|Object
index|[
literal|10000
index|]
decl_stmt|;
name|all
operator|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|all
argument_list|,
name|all
operator|.
name|length
operator|+
literal|1
argument_list|)
expr_stmt|;
name|all
index|[
name|all
operator|.
name|length
operator|-
literal|1
index|]
operator|=
name|seg
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|seg
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|seg
index|[
name|i
index|]
operator|=
operator|new
name|byte
index|[
name|random
operator|.
name|nextInt
argument_list|(
literal|7
argument_list|)
index|]
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|OutOfMemoryError
name|e
parameter_list|)
block|{
comment|// Release and quit.
block|}
block|}
comment|/**    * Very hacky, very crude, but (sometimes) works.     * Don't look, it will burn your eyes out.     */
DECL|method|causeGc
specifier|private
name|void
name|causeGc
parameter_list|()
block|{
name|List
argument_list|<
name|GarbageCollectorMXBean
argument_list|>
name|garbageCollectorMXBeans
init|=
name|ManagementFactory
operator|.
name|getGarbageCollectorMXBeans
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Long
argument_list|>
name|ccounts
init|=
operator|new
name|ArrayList
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|GarbageCollectorMXBean
name|g
range|:
name|garbageCollectorMXBeans
control|)
block|{
name|ccounts
operator|.
name|add
argument_list|(
name|g
operator|.
name|getCollectionCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|Long
argument_list|>
name|ccounts2
init|=
operator|new
name|ArrayList
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
do|do
block|{
name|System
operator|.
name|gc
argument_list|()
expr_stmt|;
name|ccounts
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|GarbageCollectorMXBean
name|g
range|:
name|garbageCollectorMXBeans
control|)
block|{
name|ccounts2
operator|.
name|add
argument_list|(
name|g
operator|.
name|getCollectionCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
do|while
condition|(
name|ccounts2
operator|.
name|equals
argument_list|(
name|ccounts
argument_list|)
condition|)
do|;
block|}
block|}
end_class
end_unit
