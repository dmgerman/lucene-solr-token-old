begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.util
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
package|;
end_package
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_class
DECL|class|BaseSortTestCase
specifier|public
specifier|abstract
class|class
name|BaseSortTestCase
extends|extends
name|LuceneTestCase
block|{
DECL|class|Entry
specifier|public
specifier|static
class|class
name|Entry
implements|implements
name|java
operator|.
name|lang
operator|.
name|Comparable
argument_list|<
name|Entry
argument_list|>
block|{
DECL|field|value
specifier|public
specifier|final
name|int
name|value
decl_stmt|;
DECL|field|ord
specifier|public
specifier|final
name|int
name|ord
decl_stmt|;
DECL|method|Entry
specifier|public
name|Entry
parameter_list|(
name|int
name|value
parameter_list|,
name|int
name|ord
parameter_list|)
block|{
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
name|this
operator|.
name|ord
operator|=
name|ord
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|compareTo
specifier|public
name|int
name|compareTo
parameter_list|(
name|Entry
name|other
parameter_list|)
block|{
return|return
name|value
operator|<
name|other
operator|.
name|value
condition|?
operator|-
literal|1
else|:
name|value
operator|==
name|other
operator|.
name|value
condition|?
literal|0
else|:
literal|1
return|;
block|}
block|}
DECL|field|stable
specifier|private
specifier|final
name|boolean
name|stable
decl_stmt|;
DECL|method|BaseSortTestCase
specifier|public
name|BaseSortTestCase
parameter_list|(
name|boolean
name|stable
parameter_list|)
block|{
name|this
operator|.
name|stable
operator|=
name|stable
expr_stmt|;
block|}
DECL|method|newSorter
specifier|public
specifier|abstract
name|Sorter
name|newSorter
parameter_list|(
name|Entry
index|[]
name|arr
parameter_list|)
function_decl|;
DECL|method|assertSorted
specifier|public
name|void
name|assertSorted
parameter_list|(
name|Entry
index|[]
name|original
parameter_list|,
name|Entry
index|[]
name|sorted
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|original
operator|.
name|length
argument_list|,
name|sorted
operator|.
name|length
argument_list|)
expr_stmt|;
name|Entry
index|[]
name|actuallySorted
init|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|original
argument_list|,
name|original
operator|.
name|length
argument_list|)
decl_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|actuallySorted
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|original
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|assertEquals
argument_list|(
name|actuallySorted
index|[
name|i
index|]
operator|.
name|value
argument_list|,
name|sorted
index|[
name|i
index|]
operator|.
name|value
argument_list|)
expr_stmt|;
if|if
condition|(
name|stable
condition|)
block|{
name|assertEquals
argument_list|(
name|actuallySorted
index|[
name|i
index|]
operator|.
name|ord
argument_list|,
name|sorted
index|[
name|i
index|]
operator|.
name|ord
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|test
specifier|public
name|void
name|test
parameter_list|(
name|Entry
index|[]
name|arr
parameter_list|)
block|{
specifier|final
name|int
name|o
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
specifier|final
name|Entry
index|[]
name|toSort
init|=
operator|new
name|Entry
index|[
name|o
operator|+
name|arr
operator|.
name|length
operator|+
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|3
argument_list|)
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|arr
argument_list|,
literal|0
argument_list|,
name|toSort
argument_list|,
name|o
argument_list|,
name|arr
operator|.
name|length
argument_list|)
expr_stmt|;
specifier|final
name|Sorter
name|sorter
init|=
name|newSorter
argument_list|(
name|toSort
argument_list|)
decl_stmt|;
name|sorter
operator|.
name|sort
argument_list|(
name|o
argument_list|,
name|o
operator|+
name|arr
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertSorted
argument_list|(
name|arr
argument_list|,
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|toSort
argument_list|,
name|o
argument_list|,
name|o
operator|+
name|arr
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|enum|Strategy
enum|enum
name|Strategy
block|{
DECL|enum constant|RANDOM
name|RANDOM
block|{
annotation|@
name|Override
specifier|public
name|void
name|set
parameter_list|(
name|Entry
index|[]
name|arr
parameter_list|,
name|int
name|i
parameter_list|)
block|{
name|arr
index|[
name|i
index|]
operator|=
operator|new
name|Entry
argument_list|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|()
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
block|}
block|,
DECL|enum constant|RANDOM_LOW_CARDINALITY
name|RANDOM_LOW_CARDINALITY
block|{
annotation|@
name|Override
specifier|public
name|void
name|set
parameter_list|(
name|Entry
index|[]
name|arr
parameter_list|,
name|int
name|i
parameter_list|)
block|{
name|arr
index|[
name|i
index|]
operator|=
operator|new
name|Entry
argument_list|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|6
argument_list|)
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
block|}
block|,
DECL|enum constant|ASCENDING
name|ASCENDING
block|{
annotation|@
name|Override
specifier|public
name|void
name|set
parameter_list|(
name|Entry
index|[]
name|arr
parameter_list|,
name|int
name|i
parameter_list|)
block|{
name|arr
index|[
name|i
index|]
operator|=
name|i
operator|==
literal|0
condition|?
operator|new
name|Entry
argument_list|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|6
argument_list|)
argument_list|,
literal|0
argument_list|)
else|:
operator|new
name|Entry
argument_list|(
name|arr
index|[
name|i
operator|-
literal|1
index|]
operator|.
name|value
operator|+
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|6
argument_list|)
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
block|}
block|,
DECL|enum constant|DESCENDING
name|DESCENDING
block|{
annotation|@
name|Override
specifier|public
name|void
name|set
parameter_list|(
name|Entry
index|[]
name|arr
parameter_list|,
name|int
name|i
parameter_list|)
block|{
name|arr
index|[
name|i
index|]
operator|=
name|i
operator|==
literal|0
condition|?
operator|new
name|Entry
argument_list|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|6
argument_list|)
argument_list|,
literal|0
argument_list|)
else|:
operator|new
name|Entry
argument_list|(
name|arr
index|[
name|i
operator|-
literal|1
index|]
operator|.
name|value
operator|-
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|6
argument_list|)
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
block|}
block|,
DECL|enum constant|STRICTLY_DESCENDING
name|STRICTLY_DESCENDING
block|{
annotation|@
name|Override
specifier|public
name|void
name|set
parameter_list|(
name|Entry
index|[]
name|arr
parameter_list|,
name|int
name|i
parameter_list|)
block|{
name|arr
index|[
name|i
index|]
operator|=
name|i
operator|==
literal|0
condition|?
operator|new
name|Entry
argument_list|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|6
argument_list|)
argument_list|,
literal|0
argument_list|)
else|:
operator|new
name|Entry
argument_list|(
name|arr
index|[
name|i
operator|-
literal|1
index|]
operator|.
name|value
operator|-
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|5
argument_list|)
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
block|}
block|,
DECL|enum constant|ASCENDING_SEQUENCES
name|ASCENDING_SEQUENCES
block|{
annotation|@
name|Override
specifier|public
name|void
name|set
parameter_list|(
name|Entry
index|[]
name|arr
parameter_list|,
name|int
name|i
parameter_list|)
block|{
name|arr
index|[
name|i
index|]
operator|=
name|i
operator|==
literal|0
condition|?
operator|new
name|Entry
argument_list|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|6
argument_list|)
argument_list|,
literal|0
argument_list|)
else|:
operator|new
name|Entry
argument_list|(
name|rarely
argument_list|()
condition|?
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|1000
argument_list|)
else|:
name|arr
index|[
name|i
operator|-
literal|1
index|]
operator|.
name|value
operator|+
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|6
argument_list|)
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
block|}
block|,
DECL|enum constant|MOSTLY_ASCENDING
name|MOSTLY_ASCENDING
block|{
annotation|@
name|Override
specifier|public
name|void
name|set
parameter_list|(
name|Entry
index|[]
name|arr
parameter_list|,
name|int
name|i
parameter_list|)
block|{
name|arr
index|[
name|i
index|]
operator|=
name|i
operator|==
literal|0
condition|?
operator|new
name|Entry
argument_list|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|6
argument_list|)
argument_list|,
literal|0
argument_list|)
else|:
operator|new
name|Entry
argument_list|(
name|arr
index|[
name|i
operator|-
literal|1
index|]
operator|.
name|value
operator|+
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
operator|-
literal|8
argument_list|,
literal|10
argument_list|)
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
block|}
block|;
DECL|method|set
specifier|public
specifier|abstract
name|void
name|set
parameter_list|(
name|Entry
index|[]
name|arr
parameter_list|,
name|int
name|i
parameter_list|)
function_decl|;
block|}
DECL|method|test
specifier|public
name|void
name|test
parameter_list|(
name|Strategy
name|strategy
parameter_list|,
name|int
name|length
parameter_list|)
block|{
specifier|final
name|Entry
index|[]
name|arr
init|=
operator|new
name|Entry
index|[
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|arr
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|strategy
operator|.
name|set
argument_list|(
name|arr
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
name|test
argument_list|(
name|arr
argument_list|)
expr_stmt|;
block|}
DECL|method|test
specifier|public
name|void
name|test
parameter_list|(
name|Strategy
name|strategy
parameter_list|)
block|{
name|test
argument_list|(
name|strategy
argument_list|,
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|20000
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testEmpty
specifier|public
name|void
name|testEmpty
parameter_list|()
block|{
name|test
argument_list|(
operator|new
name|Entry
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
DECL|method|testOne
specifier|public
name|void
name|testOne
parameter_list|()
block|{
name|test
argument_list|(
name|Strategy
operator|.
name|RANDOM
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|method|testTwo
specifier|public
name|void
name|testTwo
parameter_list|()
block|{
name|test
argument_list|(
name|Strategy
operator|.
name|RANDOM_LOW_CARDINALITY
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
DECL|method|testRandom
specifier|public
name|void
name|testRandom
parameter_list|()
block|{
name|test
argument_list|(
name|Strategy
operator|.
name|RANDOM
argument_list|)
expr_stmt|;
block|}
DECL|method|testRandomLowCardinality
specifier|public
name|void
name|testRandomLowCardinality
parameter_list|()
block|{
name|test
argument_list|(
name|Strategy
operator|.
name|RANDOM_LOW_CARDINALITY
argument_list|)
expr_stmt|;
block|}
DECL|method|testAscending
specifier|public
name|void
name|testAscending
parameter_list|()
block|{
name|test
argument_list|(
name|Strategy
operator|.
name|ASCENDING
argument_list|)
expr_stmt|;
block|}
DECL|method|testAscendingSequences
specifier|public
name|void
name|testAscendingSequences
parameter_list|()
block|{
name|test
argument_list|(
name|Strategy
operator|.
name|ASCENDING_SEQUENCES
argument_list|)
expr_stmt|;
block|}
DECL|method|testDescending
specifier|public
name|void
name|testDescending
parameter_list|()
block|{
name|test
argument_list|(
name|Strategy
operator|.
name|DESCENDING
argument_list|)
expr_stmt|;
block|}
DECL|method|testStrictlyDescending
specifier|public
name|void
name|testStrictlyDescending
parameter_list|()
block|{
name|test
argument_list|(
name|Strategy
operator|.
name|STRICTLY_DESCENDING
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
