begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.util
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
package|;
end_package
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import
begin_class
DECL|class|TestFixedLengthBytesRefArray
specifier|public
class|class
name|TestFixedLengthBytesRefArray
extends|extends
name|LuceneTestCase
block|{
DECL|method|testBasic
specifier|public
name|void
name|testBasic
parameter_list|()
throws|throws
name|Exception
block|{
name|FixedLengthBytesRefArray
name|a
init|=
operator|new
name|FixedLengthBytesRefArray
argument_list|(
name|Integer
operator|.
name|BYTES
argument_list|)
decl_stmt|;
name|int
name|numValues
init|=
literal|100
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numValues
condition|;
name|i
operator|++
control|)
block|{
name|byte
index|[]
name|bytes
init|=
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
call|(
name|byte
call|)
argument_list|(
literal|10
operator|-
name|i
argument_list|)
block|}
decl_stmt|;
name|a
operator|.
name|append
argument_list|(
operator|new
name|BytesRef
argument_list|(
name|bytes
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|BytesRefIterator
name|iterator
init|=
name|a
operator|.
name|iterator
argument_list|(
operator|new
name|Comparator
argument_list|<
name|BytesRef
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|BytesRef
name|a
parameter_list|,
name|BytesRef
name|b
parameter_list|)
block|{
return|return
name|a
operator|.
name|compareTo
argument_list|(
name|b
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|BytesRef
name|last
init|=
literal|null
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|BytesRef
name|bytes
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|bytes
operator|==
literal|null
condition|)
block|{
break|break;
block|}
if|if
condition|(
name|last
operator|!=
literal|null
condition|)
block|{
name|assertTrue
argument_list|(
literal|"count="
operator|+
name|count
operator|+
literal|" last="
operator|+
name|last
operator|+
literal|" bytes="
operator|+
name|bytes
argument_list|,
name|last
operator|.
name|compareTo
argument_list|(
name|bytes
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
block|}
name|last
operator|=
name|BytesRef
operator|.
name|deepCopyOf
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|numValues
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
DECL|method|testRandom
specifier|public
name|void
name|testRandom
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|length
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|4
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|int
name|count
init|=
name|atLeast
argument_list|(
literal|10000
argument_list|)
decl_stmt|;
name|BytesRef
index|[]
name|values
init|=
operator|new
name|BytesRef
index|[
name|count
index|]
decl_stmt|;
name|FixedLengthBytesRefArray
name|a
init|=
operator|new
name|FixedLengthBytesRefArray
argument_list|(
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|BytesRef
name|value
init|=
operator|new
name|BytesRef
argument_list|(
operator|new
name|byte
index|[
name|length
index|]
argument_list|)
decl_stmt|;
name|random
argument_list|()
operator|.
name|nextBytes
argument_list|(
name|value
operator|.
name|bytes
argument_list|)
expr_stmt|;
name|values
index|[
name|i
index|]
operator|=
name|value
expr_stmt|;
name|a
operator|.
name|append
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
name|Arrays
operator|.
name|sort
argument_list|(
name|values
argument_list|)
expr_stmt|;
name|BytesRefIterator
name|iterator
init|=
name|a
operator|.
name|iterator
argument_list|(
operator|new
name|Comparator
argument_list|<
name|BytesRef
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|BytesRef
name|a
parameter_list|,
name|BytesRef
name|b
parameter_list|)
block|{
return|return
name|a
operator|.
name|compareTo
argument_list|(
name|b
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|BytesRef
name|next
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|next
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|values
index|[
name|i
index|]
argument_list|,
name|next
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class
end_unit
