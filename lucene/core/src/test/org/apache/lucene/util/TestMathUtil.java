begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.util
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
package|;
end_package
begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigInteger
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|generators
operator|.
name|RandomPicks
import|;
end_import
begin_class
DECL|class|TestMathUtil
specifier|public
class|class
name|TestMathUtil
extends|extends
name|LuceneTestCase
block|{
DECL|field|PRIMES
specifier|static
name|long
index|[]
name|PRIMES
init|=
operator|new
name|long
index|[]
block|{
literal|2
block|,
literal|3
block|,
literal|5
block|,
literal|7
block|,
literal|11
block|,
literal|13
block|,
literal|17
block|,
literal|19
block|,
literal|23
block|,
literal|29
block|}
decl_stmt|;
DECL|method|randomLong
specifier|static
name|long
name|randomLong
parameter_list|()
block|{
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|long
name|l
init|=
literal|1
decl_stmt|;
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|l
operator|*=
operator|-
literal|1
expr_stmt|;
block|}
for|for
control|(
name|long
name|i
range|:
name|PRIMES
control|)
block|{
specifier|final
name|int
name|m
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|3
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|m
condition|;
operator|++
name|j
control|)
block|{
name|l
operator|*=
name|i
expr_stmt|;
block|}
block|}
return|return
name|l
return|;
block|}
elseif|else
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
return|return
name|random
argument_list|()
operator|.
name|nextLong
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|RandomPicks
operator|.
name|randomFrom
argument_list|(
name|random
argument_list|()
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|Long
operator|.
name|MIN_VALUE
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|,
literal|0L
argument_list|,
operator|-
literal|1L
argument_list|,
literal|1L
argument_list|)
argument_list|)
return|;
block|}
block|}
comment|// slow version used for testing
DECL|method|gcd
specifier|static
name|long
name|gcd
parameter_list|(
name|long
name|l1
parameter_list|,
name|long
name|l2
parameter_list|)
block|{
specifier|final
name|BigInteger
name|gcd
init|=
name|BigInteger
operator|.
name|valueOf
argument_list|(
name|l1
argument_list|)
operator|.
name|gcd
argument_list|(
name|BigInteger
operator|.
name|valueOf
argument_list|(
name|l2
argument_list|)
argument_list|)
decl_stmt|;
assert|assert
name|gcd
operator|.
name|bitCount
argument_list|()
operator|<=
literal|64
assert|;
return|return
name|gcd
operator|.
name|longValue
argument_list|()
return|;
block|}
DECL|method|testGCD
specifier|public
name|void
name|testGCD
parameter_list|()
block|{
specifier|final
name|int
name|iters
init|=
name|atLeast
argument_list|(
literal|100
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iters
condition|;
operator|++
name|i
control|)
block|{
specifier|final
name|long
name|l1
init|=
name|randomLong
argument_list|()
decl_stmt|;
specifier|final
name|long
name|l2
init|=
name|randomLong
argument_list|()
decl_stmt|;
specifier|final
name|long
name|gcd
init|=
name|MathUtil
operator|.
name|gcd
argument_list|(
name|l1
argument_list|,
name|l2
argument_list|)
decl_stmt|;
specifier|final
name|long
name|actualGcd
init|=
name|gcd
argument_list|(
name|l1
argument_list|,
name|l2
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|actualGcd
argument_list|,
name|gcd
argument_list|)
expr_stmt|;
if|if
condition|(
name|gcd
operator|!=
literal|0
condition|)
block|{
name|assertEquals
argument_list|(
name|l1
argument_list|,
operator|(
name|l1
operator|/
name|gcd
operator|)
operator|*
name|gcd
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|l2
argument_list|,
operator|(
name|l2
operator|/
name|gcd
operator|)
operator|*
name|gcd
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// ported test from commons-math
DECL|method|testGCD2
specifier|public
name|void
name|testGCD2
parameter_list|()
block|{
name|long
name|a
init|=
literal|30
decl_stmt|;
name|long
name|b
init|=
literal|50
decl_stmt|;
name|long
name|c
init|=
literal|77
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|MathUtil
operator|.
name|gcd
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|b
argument_list|,
name|MathUtil
operator|.
name|gcd
argument_list|(
literal|0
argument_list|,
name|b
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|a
argument_list|,
name|MathUtil
operator|.
name|gcd
argument_list|(
name|a
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|b
argument_list|,
name|MathUtil
operator|.
name|gcd
argument_list|(
literal|0
argument_list|,
operator|-
name|b
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|a
argument_list|,
name|MathUtil
operator|.
name|gcd
argument_list|(
operator|-
name|a
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|MathUtil
operator|.
name|gcd
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|MathUtil
operator|.
name|gcd
argument_list|(
operator|-
name|a
argument_list|,
name|b
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|MathUtil
operator|.
name|gcd
argument_list|(
name|a
argument_list|,
operator|-
name|b
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|MathUtil
operator|.
name|gcd
argument_list|(
operator|-
name|a
argument_list|,
operator|-
name|b
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|MathUtil
operator|.
name|gcd
argument_list|(
name|a
argument_list|,
name|c
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|MathUtil
operator|.
name|gcd
argument_list|(
operator|-
name|a
argument_list|,
name|c
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|MathUtil
operator|.
name|gcd
argument_list|(
name|a
argument_list|,
operator|-
name|c
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|MathUtil
operator|.
name|gcd
argument_list|(
operator|-
name|a
argument_list|,
operator|-
name|c
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3L
operator|*
operator|(
literal|1L
operator|<<
literal|45
operator|)
argument_list|,
name|MathUtil
operator|.
name|gcd
argument_list|(
literal|3L
operator|*
operator|(
literal|1L
operator|<<
literal|50
operator|)
argument_list|,
literal|9L
operator|*
operator|(
literal|1L
operator|<<
literal|45
operator|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1L
operator|<<
literal|45
argument_list|,
name|MathUtil
operator|.
name|gcd
argument_list|(
literal|1L
operator|<<
literal|45
argument_list|,
name|Long
operator|.
name|MIN_VALUE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|,
name|MathUtil
operator|.
name|gcd
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|,
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|,
name|MathUtil
operator|.
name|gcd
argument_list|(
operator|-
name|Long
operator|.
name|MAX_VALUE
argument_list|,
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|MathUtil
operator|.
name|gcd
argument_list|(
literal|60247241209L
argument_list|,
literal|153092023L
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Long
operator|.
name|MIN_VALUE
argument_list|,
name|MathUtil
operator|.
name|gcd
argument_list|(
name|Long
operator|.
name|MIN_VALUE
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Long
operator|.
name|MIN_VALUE
argument_list|,
name|MathUtil
operator|.
name|gcd
argument_list|(
literal|0
argument_list|,
name|Long
operator|.
name|MIN_VALUE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Long
operator|.
name|MIN_VALUE
argument_list|,
name|MathUtil
operator|.
name|gcd
argument_list|(
name|Long
operator|.
name|MIN_VALUE
argument_list|,
name|Long
operator|.
name|MIN_VALUE
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testAcoshMethod
specifier|public
name|void
name|testAcoshMethod
parameter_list|()
block|{
comment|// acosh(NaN) == NaN
name|assertTrue
argument_list|(
name|Double
operator|.
name|isNaN
argument_list|(
name|MathUtil
operator|.
name|acosh
argument_list|(
name|Double
operator|.
name|NaN
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// acosh(1) == +0
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|Double
operator|.
name|doubleToLongBits
argument_list|(
name|MathUtil
operator|.
name|acosh
argument_list|(
literal|1D
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// acosh(POSITIVE_INFINITY) == POSITIVE_INFINITY
name|assertEquals
argument_list|(
name|Double
operator|.
name|doubleToLongBits
argument_list|(
name|Double
operator|.
name|POSITIVE_INFINITY
argument_list|)
argument_list|,
name|Double
operator|.
name|doubleToLongBits
argument_list|(
name|MathUtil
operator|.
name|acosh
argument_list|(
name|Double
operator|.
name|POSITIVE_INFINITY
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// acosh(x) : x< 1 == NaN
name|assertTrue
argument_list|(
name|Double
operator|.
name|isNaN
argument_list|(
name|MathUtil
operator|.
name|acosh
argument_list|(
literal|0.9D
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// x< 1
name|assertTrue
argument_list|(
name|Double
operator|.
name|isNaN
argument_list|(
name|MathUtil
operator|.
name|acosh
argument_list|(
literal|0D
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// x == 0
name|assertTrue
argument_list|(
name|Double
operator|.
name|isNaN
argument_list|(
name|MathUtil
operator|.
name|acosh
argument_list|(
operator|-
literal|0D
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// x == -0
name|assertTrue
argument_list|(
name|Double
operator|.
name|isNaN
argument_list|(
name|MathUtil
operator|.
name|acosh
argument_list|(
operator|-
literal|0.9D
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// x< 0
name|assertTrue
argument_list|(
name|Double
operator|.
name|isNaN
argument_list|(
name|MathUtil
operator|.
name|acosh
argument_list|(
operator|-
literal|1D
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// x == -1
name|assertTrue
argument_list|(
name|Double
operator|.
name|isNaN
argument_list|(
name|MathUtil
operator|.
name|acosh
argument_list|(
operator|-
literal|10D
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// x< -1
name|assertTrue
argument_list|(
name|Double
operator|.
name|isNaN
argument_list|(
name|MathUtil
operator|.
name|acosh
argument_list|(
name|Double
operator|.
name|NEGATIVE_INFINITY
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// x == -Inf
name|double
name|epsilon
init|=
literal|0.000001
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|MathUtil
operator|.
name|acosh
argument_list|(
literal|1
argument_list|)
argument_list|,
name|epsilon
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1.5667992369724109
argument_list|,
name|MathUtil
operator|.
name|acosh
argument_list|(
literal|2.5
argument_list|)
argument_list|,
name|epsilon
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|14.719378760739708
argument_list|,
name|MathUtil
operator|.
name|acosh
argument_list|(
literal|1234567.89
argument_list|)
argument_list|,
name|epsilon
argument_list|)
expr_stmt|;
block|}
DECL|method|testAsinhMethod
specifier|public
name|void
name|testAsinhMethod
parameter_list|()
block|{
comment|// asinh(NaN) == NaN
name|assertTrue
argument_list|(
name|Double
operator|.
name|isNaN
argument_list|(
name|MathUtil
operator|.
name|asinh
argument_list|(
name|Double
operator|.
name|NaN
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// asinh(+0) == +0
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|Double
operator|.
name|doubleToLongBits
argument_list|(
name|MathUtil
operator|.
name|asinh
argument_list|(
literal|0D
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// asinh(-0) == -0
name|assertEquals
argument_list|(
name|Double
operator|.
name|doubleToLongBits
argument_list|(
operator|-
literal|0D
argument_list|)
argument_list|,
name|Double
operator|.
name|doubleToLongBits
argument_list|(
name|MathUtil
operator|.
name|asinh
argument_list|(
operator|-
literal|0D
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// asinh(POSITIVE_INFINITY) == POSITIVE_INFINITY
name|assertEquals
argument_list|(
name|Double
operator|.
name|doubleToLongBits
argument_list|(
name|Double
operator|.
name|POSITIVE_INFINITY
argument_list|)
argument_list|,
name|Double
operator|.
name|doubleToLongBits
argument_list|(
name|MathUtil
operator|.
name|asinh
argument_list|(
name|Double
operator|.
name|POSITIVE_INFINITY
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// asinh(NEGATIVE_INFINITY) == NEGATIVE_INFINITY
name|assertEquals
argument_list|(
name|Double
operator|.
name|doubleToLongBits
argument_list|(
name|Double
operator|.
name|NEGATIVE_INFINITY
argument_list|)
argument_list|,
name|Double
operator|.
name|doubleToLongBits
argument_list|(
name|MathUtil
operator|.
name|asinh
argument_list|(
name|Double
operator|.
name|NEGATIVE_INFINITY
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|double
name|epsilon
init|=
literal|0.000001
decl_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|14.719378760740035
argument_list|,
name|MathUtil
operator|.
name|asinh
argument_list|(
operator|-
literal|1234567.89
argument_list|)
argument_list|,
name|epsilon
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1.6472311463710958
argument_list|,
name|MathUtil
operator|.
name|asinh
argument_list|(
operator|-
literal|2.5
argument_list|)
argument_list|,
name|epsilon
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|0.8813735870195429
argument_list|,
name|MathUtil
operator|.
name|asinh
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|,
name|epsilon
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|MathUtil
operator|.
name|asinh
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.8813735870195429
argument_list|,
name|MathUtil
operator|.
name|asinh
argument_list|(
literal|1
argument_list|)
argument_list|,
name|epsilon
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1.6472311463710958
argument_list|,
name|MathUtil
operator|.
name|asinh
argument_list|(
literal|2.5
argument_list|)
argument_list|,
name|epsilon
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|14.719378760740035
argument_list|,
name|MathUtil
operator|.
name|asinh
argument_list|(
literal|1234567.89
argument_list|)
argument_list|,
name|epsilon
argument_list|)
expr_stmt|;
block|}
DECL|method|testAtanhMethod
specifier|public
name|void
name|testAtanhMethod
parameter_list|()
block|{
comment|// atanh(NaN) == NaN
name|assertTrue
argument_list|(
name|Double
operator|.
name|isNaN
argument_list|(
name|MathUtil
operator|.
name|atanh
argument_list|(
name|Double
operator|.
name|NaN
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// atanh(+0) == +0
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|Double
operator|.
name|doubleToLongBits
argument_list|(
name|MathUtil
operator|.
name|atanh
argument_list|(
literal|0D
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// atanh(-0) == -0
name|assertEquals
argument_list|(
name|Double
operator|.
name|doubleToLongBits
argument_list|(
operator|-
literal|0D
argument_list|)
argument_list|,
name|Double
operator|.
name|doubleToLongBits
argument_list|(
name|MathUtil
operator|.
name|atanh
argument_list|(
operator|-
literal|0D
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// atanh(1) == POSITIVE_INFINITY
name|assertEquals
argument_list|(
name|Double
operator|.
name|doubleToLongBits
argument_list|(
name|Double
operator|.
name|POSITIVE_INFINITY
argument_list|)
argument_list|,
name|Double
operator|.
name|doubleToLongBits
argument_list|(
name|MathUtil
operator|.
name|atanh
argument_list|(
literal|1D
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// atanh(-1) == NEGATIVE_INFINITY
name|assertEquals
argument_list|(
name|Double
operator|.
name|doubleToLongBits
argument_list|(
name|Double
operator|.
name|NEGATIVE_INFINITY
argument_list|)
argument_list|,
name|Double
operator|.
name|doubleToLongBits
argument_list|(
name|MathUtil
operator|.
name|atanh
argument_list|(
operator|-
literal|1D
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// atanh(x) : Math.abs(x)> 1 == NaN
name|assertTrue
argument_list|(
name|Double
operator|.
name|isNaN
argument_list|(
name|MathUtil
operator|.
name|atanh
argument_list|(
literal|1.1D
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// x> 1
name|assertTrue
argument_list|(
name|Double
operator|.
name|isNaN
argument_list|(
name|MathUtil
operator|.
name|atanh
argument_list|(
name|Double
operator|.
name|POSITIVE_INFINITY
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// x == Inf
name|assertTrue
argument_list|(
name|Double
operator|.
name|isNaN
argument_list|(
name|MathUtil
operator|.
name|atanh
argument_list|(
operator|-
literal|1.1D
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// x< -1
name|assertTrue
argument_list|(
name|Double
operator|.
name|isNaN
argument_list|(
name|MathUtil
operator|.
name|atanh
argument_list|(
name|Double
operator|.
name|NEGATIVE_INFINITY
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// x == -Inf
name|double
name|epsilon
init|=
literal|0.000001
decl_stmt|;
name|assertEquals
argument_list|(
name|Double
operator|.
name|NEGATIVE_INFINITY
argument_list|,
name|MathUtil
operator|.
name|atanh
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|0.5493061443340549
argument_list|,
name|MathUtil
operator|.
name|atanh
argument_list|(
operator|-
literal|0.5
argument_list|)
argument_list|,
name|epsilon
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|MathUtil
operator|.
name|atanh
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.5493061443340549
argument_list|,
name|MathUtil
operator|.
name|atanh
argument_list|(
literal|0.5
argument_list|)
argument_list|,
name|epsilon
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Double
operator|.
name|POSITIVE_INFINITY
argument_list|,
name|MathUtil
operator|.
name|atanh
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
