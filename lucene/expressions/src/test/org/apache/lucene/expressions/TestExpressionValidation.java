begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.expressions
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|expressions
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|expressions
operator|.
name|js
operator|.
name|JavascriptCompiler
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|SortField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_comment
comment|/** Tests validation of bindings */
end_comment
begin_class
DECL|class|TestExpressionValidation
specifier|public
class|class
name|TestExpressionValidation
extends|extends
name|LuceneTestCase
block|{
DECL|method|testValidExternals
specifier|public
name|void
name|testValidExternals
parameter_list|()
throws|throws
name|Exception
block|{
name|SimpleBindings
name|bindings
init|=
operator|new
name|SimpleBindings
argument_list|()
decl_stmt|;
name|bindings
operator|.
name|add
argument_list|(
operator|new
name|SortField
argument_list|(
literal|"valid0"
argument_list|,
name|SortField
operator|.
name|Type
operator|.
name|INT
argument_list|)
argument_list|)
expr_stmt|;
name|bindings
operator|.
name|add
argument_list|(
operator|new
name|SortField
argument_list|(
literal|"valid1"
argument_list|,
name|SortField
operator|.
name|Type
operator|.
name|INT
argument_list|)
argument_list|)
expr_stmt|;
name|bindings
operator|.
name|add
argument_list|(
operator|new
name|SortField
argument_list|(
literal|"valid2"
argument_list|,
name|SortField
operator|.
name|Type
operator|.
name|INT
argument_list|)
argument_list|)
expr_stmt|;
name|bindings
operator|.
name|add
argument_list|(
operator|new
name|SortField
argument_list|(
literal|"_score"
argument_list|,
name|SortField
operator|.
name|Type
operator|.
name|SCORE
argument_list|)
argument_list|)
expr_stmt|;
name|bindings
operator|.
name|add
argument_list|(
literal|"valide0"
argument_list|,
name|JavascriptCompiler
operator|.
name|compile
argument_list|(
literal|"valid0 - valid1 + valid2 + _score"
argument_list|)
argument_list|)
expr_stmt|;
name|bindings
operator|.
name|validate
argument_list|()
expr_stmt|;
name|bindings
operator|.
name|add
argument_list|(
literal|"valide1"
argument_list|,
name|JavascriptCompiler
operator|.
name|compile
argument_list|(
literal|"valide0 + valid0"
argument_list|)
argument_list|)
expr_stmt|;
name|bindings
operator|.
name|validate
argument_list|()
expr_stmt|;
name|bindings
operator|.
name|add
argument_list|(
literal|"valide2"
argument_list|,
name|JavascriptCompiler
operator|.
name|compile
argument_list|(
literal|"valide0 * valide1"
argument_list|)
argument_list|)
expr_stmt|;
name|bindings
operator|.
name|validate
argument_list|()
expr_stmt|;
block|}
DECL|method|testInvalidExternal
specifier|public
name|void
name|testInvalidExternal
parameter_list|()
throws|throws
name|Exception
block|{
name|SimpleBindings
name|bindings
init|=
operator|new
name|SimpleBindings
argument_list|()
decl_stmt|;
name|bindings
operator|.
name|add
argument_list|(
operator|new
name|SortField
argument_list|(
literal|"valid"
argument_list|,
name|SortField
operator|.
name|Type
operator|.
name|INT
argument_list|)
argument_list|)
expr_stmt|;
name|bindings
operator|.
name|add
argument_list|(
literal|"invalid"
argument_list|,
name|JavascriptCompiler
operator|.
name|compile
argument_list|(
literal|"badreference"
argument_list|)
argument_list|)
expr_stmt|;
name|IllegalArgumentException
name|expected
init|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|bindings
operator|.
name|validate
argument_list|()
expr_stmt|;
block|}
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|expected
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Invalid reference"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testInvalidExternal2
specifier|public
name|void
name|testInvalidExternal2
parameter_list|()
throws|throws
name|Exception
block|{
name|SimpleBindings
name|bindings
init|=
operator|new
name|SimpleBindings
argument_list|()
decl_stmt|;
name|bindings
operator|.
name|add
argument_list|(
operator|new
name|SortField
argument_list|(
literal|"valid"
argument_list|,
name|SortField
operator|.
name|Type
operator|.
name|INT
argument_list|)
argument_list|)
expr_stmt|;
name|bindings
operator|.
name|add
argument_list|(
literal|"invalid"
argument_list|,
name|JavascriptCompiler
operator|.
name|compile
argument_list|(
literal|"valid + badreference"
argument_list|)
argument_list|)
expr_stmt|;
name|IllegalArgumentException
name|expected
init|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|bindings
operator|.
name|validate
argument_list|()
expr_stmt|;
block|}
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|expected
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Invalid reference"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testSelfRecursion
specifier|public
name|void
name|testSelfRecursion
parameter_list|()
throws|throws
name|Exception
block|{
name|SimpleBindings
name|bindings
init|=
operator|new
name|SimpleBindings
argument_list|()
decl_stmt|;
name|bindings
operator|.
name|add
argument_list|(
literal|"cycle0"
argument_list|,
name|JavascriptCompiler
operator|.
name|compile
argument_list|(
literal|"cycle0"
argument_list|)
argument_list|)
expr_stmt|;
name|IllegalArgumentException
name|expected
init|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|bindings
operator|.
name|validate
argument_list|()
expr_stmt|;
block|}
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|expected
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Cycle detected"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testCoRecursion
specifier|public
name|void
name|testCoRecursion
parameter_list|()
throws|throws
name|Exception
block|{
name|SimpleBindings
name|bindings
init|=
operator|new
name|SimpleBindings
argument_list|()
decl_stmt|;
name|bindings
operator|.
name|add
argument_list|(
literal|"cycle0"
argument_list|,
name|JavascriptCompiler
operator|.
name|compile
argument_list|(
literal|"cycle1"
argument_list|)
argument_list|)
expr_stmt|;
name|bindings
operator|.
name|add
argument_list|(
literal|"cycle1"
argument_list|,
name|JavascriptCompiler
operator|.
name|compile
argument_list|(
literal|"cycle0"
argument_list|)
argument_list|)
expr_stmt|;
name|IllegalArgumentException
name|expected
init|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|bindings
operator|.
name|validate
argument_list|()
expr_stmt|;
block|}
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|expected
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Cycle detected"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testCoRecursion2
specifier|public
name|void
name|testCoRecursion2
parameter_list|()
throws|throws
name|Exception
block|{
name|SimpleBindings
name|bindings
init|=
operator|new
name|SimpleBindings
argument_list|()
decl_stmt|;
name|bindings
operator|.
name|add
argument_list|(
literal|"cycle0"
argument_list|,
name|JavascriptCompiler
operator|.
name|compile
argument_list|(
literal|"cycle1"
argument_list|)
argument_list|)
expr_stmt|;
name|bindings
operator|.
name|add
argument_list|(
literal|"cycle1"
argument_list|,
name|JavascriptCompiler
operator|.
name|compile
argument_list|(
literal|"cycle2"
argument_list|)
argument_list|)
expr_stmt|;
name|bindings
operator|.
name|add
argument_list|(
literal|"cycle2"
argument_list|,
name|JavascriptCompiler
operator|.
name|compile
argument_list|(
literal|"cycle0"
argument_list|)
argument_list|)
expr_stmt|;
name|IllegalArgumentException
name|expected
init|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|bindings
operator|.
name|validate
argument_list|()
expr_stmt|;
block|}
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|expected
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Cycle detected"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testCoRecursion3
specifier|public
name|void
name|testCoRecursion3
parameter_list|()
throws|throws
name|Exception
block|{
name|SimpleBindings
name|bindings
init|=
operator|new
name|SimpleBindings
argument_list|()
decl_stmt|;
name|bindings
operator|.
name|add
argument_list|(
literal|"cycle0"
argument_list|,
name|JavascriptCompiler
operator|.
name|compile
argument_list|(
literal|"100"
argument_list|)
argument_list|)
expr_stmt|;
name|bindings
operator|.
name|add
argument_list|(
literal|"cycle1"
argument_list|,
name|JavascriptCompiler
operator|.
name|compile
argument_list|(
literal|"cycle0 + cycle2"
argument_list|)
argument_list|)
expr_stmt|;
name|bindings
operator|.
name|add
argument_list|(
literal|"cycle2"
argument_list|,
name|JavascriptCompiler
operator|.
name|compile
argument_list|(
literal|"cycle0 + cycle1"
argument_list|)
argument_list|)
expr_stmt|;
name|IllegalArgumentException
name|expected
init|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|bindings
operator|.
name|validate
argument_list|()
expr_stmt|;
block|}
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|expected
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Cycle detected"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testCoRecursion4
specifier|public
name|void
name|testCoRecursion4
parameter_list|()
throws|throws
name|Exception
block|{
name|SimpleBindings
name|bindings
init|=
operator|new
name|SimpleBindings
argument_list|()
decl_stmt|;
name|bindings
operator|.
name|add
argument_list|(
literal|"cycle0"
argument_list|,
name|JavascriptCompiler
operator|.
name|compile
argument_list|(
literal|"100"
argument_list|)
argument_list|)
expr_stmt|;
name|bindings
operator|.
name|add
argument_list|(
literal|"cycle1"
argument_list|,
name|JavascriptCompiler
operator|.
name|compile
argument_list|(
literal|"100"
argument_list|)
argument_list|)
expr_stmt|;
name|bindings
operator|.
name|add
argument_list|(
literal|"cycle2"
argument_list|,
name|JavascriptCompiler
operator|.
name|compile
argument_list|(
literal|"cycle1 + cycle0 + cycle3"
argument_list|)
argument_list|)
expr_stmt|;
name|bindings
operator|.
name|add
argument_list|(
literal|"cycle3"
argument_list|,
name|JavascriptCompiler
operator|.
name|compile
argument_list|(
literal|"cycle0 + cycle1 + cycle2"
argument_list|)
argument_list|)
expr_stmt|;
name|IllegalArgumentException
name|expected
init|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|bindings
operator|.
name|validate
argument_list|()
expr_stmt|;
block|}
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|expected
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Cycle detected"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
