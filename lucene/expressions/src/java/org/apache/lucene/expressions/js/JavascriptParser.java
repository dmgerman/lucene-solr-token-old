begin_unit
begin_comment
comment|// ANTLR GENERATED CODE: DO NOT EDIT
end_comment
begin_package
DECL|package|org.apache.lucene.expressions.js
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|expressions
operator|.
name|js
package|;
end_package
begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|antlr
operator|.
name|runtime
operator|.
name|*
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Stack
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|antlr
operator|.
name|runtime
operator|.
name|tree
operator|.
name|*
import|;
end_import
begin_class
annotation|@
name|SuppressWarnings
argument_list|(
literal|"all"
argument_list|)
class|class
DECL|class|JavascriptParser
name|JavascriptParser
extends|extends
name|Parser
block|{
DECL|field|tokenNames
specifier|public
specifier|static
specifier|final
name|String
index|[]
name|tokenNames
init|=
operator|new
name|String
index|[]
block|{
literal|"<invalid>"
block|,
literal|"<EOR>"
block|,
literal|"<DOWN>"
block|,
literal|"<UP>"
block|,
literal|"AT_ADD"
block|,
literal|"AT_BIT_AND"
block|,
literal|"AT_BIT_NOT"
block|,
literal|"AT_BIT_OR"
block|,
literal|"AT_BIT_SHL"
block|,
literal|"AT_BIT_SHR"
block|,
literal|"AT_BIT_SHU"
block|,
literal|"AT_BIT_XOR"
block|,
literal|"AT_BOOL_AND"
block|,
literal|"AT_BOOL_NOT"
block|,
literal|"AT_BOOL_OR"
block|,
literal|"AT_CALL"
block|,
literal|"AT_COLON"
block|,
literal|"AT_COMMA"
block|,
literal|"AT_COMP_EQ"
block|,
literal|"AT_COMP_GT"
block|,
literal|"AT_COMP_GTE"
block|,
literal|"AT_COMP_LT"
block|,
literal|"AT_COMP_LTE"
block|,
literal|"AT_COMP_NEQ"
block|,
literal|"AT_COND_QUE"
block|,
literal|"AT_DIVIDE"
block|,
literal|"AT_DOT"
block|,
literal|"AT_LPAREN"
block|,
literal|"AT_MODULO"
block|,
literal|"AT_MULTIPLY"
block|,
literal|"AT_NEGATE"
block|,
literal|"AT_RPAREN"
block|,
literal|"AT_SUBTRACT"
block|,
literal|"DECIMAL"
block|,
literal|"DECIMALDIGIT"
block|,
literal|"DECIMALINTEGER"
block|,
literal|"EXPONENT"
block|,
literal|"HEX"
block|,
literal|"HEXDIGIT"
block|,
literal|"ID"
block|,
literal|"NAMESPACE_ID"
block|,
literal|"OCTAL"
block|,
literal|"OCTALDIGIT"
block|,
literal|"WS"
block|}
decl_stmt|;
DECL|field|EOF
specifier|public
specifier|static
specifier|final
name|int
name|EOF
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|AT_ADD
specifier|public
specifier|static
specifier|final
name|int
name|AT_ADD
init|=
literal|4
decl_stmt|;
DECL|field|AT_BIT_AND
specifier|public
specifier|static
specifier|final
name|int
name|AT_BIT_AND
init|=
literal|5
decl_stmt|;
DECL|field|AT_BIT_NOT
specifier|public
specifier|static
specifier|final
name|int
name|AT_BIT_NOT
init|=
literal|6
decl_stmt|;
DECL|field|AT_BIT_OR
specifier|public
specifier|static
specifier|final
name|int
name|AT_BIT_OR
init|=
literal|7
decl_stmt|;
DECL|field|AT_BIT_SHL
specifier|public
specifier|static
specifier|final
name|int
name|AT_BIT_SHL
init|=
literal|8
decl_stmt|;
DECL|field|AT_BIT_SHR
specifier|public
specifier|static
specifier|final
name|int
name|AT_BIT_SHR
init|=
literal|9
decl_stmt|;
DECL|field|AT_BIT_SHU
specifier|public
specifier|static
specifier|final
name|int
name|AT_BIT_SHU
init|=
literal|10
decl_stmt|;
DECL|field|AT_BIT_XOR
specifier|public
specifier|static
specifier|final
name|int
name|AT_BIT_XOR
init|=
literal|11
decl_stmt|;
DECL|field|AT_BOOL_AND
specifier|public
specifier|static
specifier|final
name|int
name|AT_BOOL_AND
init|=
literal|12
decl_stmt|;
DECL|field|AT_BOOL_NOT
specifier|public
specifier|static
specifier|final
name|int
name|AT_BOOL_NOT
init|=
literal|13
decl_stmt|;
DECL|field|AT_BOOL_OR
specifier|public
specifier|static
specifier|final
name|int
name|AT_BOOL_OR
init|=
literal|14
decl_stmt|;
DECL|field|AT_CALL
specifier|public
specifier|static
specifier|final
name|int
name|AT_CALL
init|=
literal|15
decl_stmt|;
DECL|field|AT_COLON
specifier|public
specifier|static
specifier|final
name|int
name|AT_COLON
init|=
literal|16
decl_stmt|;
DECL|field|AT_COMMA
specifier|public
specifier|static
specifier|final
name|int
name|AT_COMMA
init|=
literal|17
decl_stmt|;
DECL|field|AT_COMP_EQ
specifier|public
specifier|static
specifier|final
name|int
name|AT_COMP_EQ
init|=
literal|18
decl_stmt|;
DECL|field|AT_COMP_GT
specifier|public
specifier|static
specifier|final
name|int
name|AT_COMP_GT
init|=
literal|19
decl_stmt|;
DECL|field|AT_COMP_GTE
specifier|public
specifier|static
specifier|final
name|int
name|AT_COMP_GTE
init|=
literal|20
decl_stmt|;
DECL|field|AT_COMP_LT
specifier|public
specifier|static
specifier|final
name|int
name|AT_COMP_LT
init|=
literal|21
decl_stmt|;
DECL|field|AT_COMP_LTE
specifier|public
specifier|static
specifier|final
name|int
name|AT_COMP_LTE
init|=
literal|22
decl_stmt|;
DECL|field|AT_COMP_NEQ
specifier|public
specifier|static
specifier|final
name|int
name|AT_COMP_NEQ
init|=
literal|23
decl_stmt|;
DECL|field|AT_COND_QUE
specifier|public
specifier|static
specifier|final
name|int
name|AT_COND_QUE
init|=
literal|24
decl_stmt|;
DECL|field|AT_DIVIDE
specifier|public
specifier|static
specifier|final
name|int
name|AT_DIVIDE
init|=
literal|25
decl_stmt|;
DECL|field|AT_DOT
specifier|public
specifier|static
specifier|final
name|int
name|AT_DOT
init|=
literal|26
decl_stmt|;
DECL|field|AT_LPAREN
specifier|public
specifier|static
specifier|final
name|int
name|AT_LPAREN
init|=
literal|27
decl_stmt|;
DECL|field|AT_MODULO
specifier|public
specifier|static
specifier|final
name|int
name|AT_MODULO
init|=
literal|28
decl_stmt|;
DECL|field|AT_MULTIPLY
specifier|public
specifier|static
specifier|final
name|int
name|AT_MULTIPLY
init|=
literal|29
decl_stmt|;
DECL|field|AT_NEGATE
specifier|public
specifier|static
specifier|final
name|int
name|AT_NEGATE
init|=
literal|30
decl_stmt|;
DECL|field|AT_RPAREN
specifier|public
specifier|static
specifier|final
name|int
name|AT_RPAREN
init|=
literal|31
decl_stmt|;
DECL|field|AT_SUBTRACT
specifier|public
specifier|static
specifier|final
name|int
name|AT_SUBTRACT
init|=
literal|32
decl_stmt|;
DECL|field|DECIMAL
specifier|public
specifier|static
specifier|final
name|int
name|DECIMAL
init|=
literal|33
decl_stmt|;
DECL|field|DECIMALDIGIT
specifier|public
specifier|static
specifier|final
name|int
name|DECIMALDIGIT
init|=
literal|34
decl_stmt|;
DECL|field|DECIMALINTEGER
specifier|public
specifier|static
specifier|final
name|int
name|DECIMALINTEGER
init|=
literal|35
decl_stmt|;
DECL|field|EXPONENT
specifier|public
specifier|static
specifier|final
name|int
name|EXPONENT
init|=
literal|36
decl_stmt|;
DECL|field|HEX
specifier|public
specifier|static
specifier|final
name|int
name|HEX
init|=
literal|37
decl_stmt|;
DECL|field|HEXDIGIT
specifier|public
specifier|static
specifier|final
name|int
name|HEXDIGIT
init|=
literal|38
decl_stmt|;
DECL|field|ID
specifier|public
specifier|static
specifier|final
name|int
name|ID
init|=
literal|39
decl_stmt|;
DECL|field|NAMESPACE_ID
specifier|public
specifier|static
specifier|final
name|int
name|NAMESPACE_ID
init|=
literal|40
decl_stmt|;
DECL|field|OCTAL
specifier|public
specifier|static
specifier|final
name|int
name|OCTAL
init|=
literal|41
decl_stmt|;
DECL|field|OCTALDIGIT
specifier|public
specifier|static
specifier|final
name|int
name|OCTALDIGIT
init|=
literal|42
decl_stmt|;
DECL|field|WS
specifier|public
specifier|static
specifier|final
name|int
name|WS
init|=
literal|43
decl_stmt|;
comment|// delegates
DECL|method|getDelegates
specifier|public
name|Parser
index|[]
name|getDelegates
parameter_list|()
block|{
return|return
operator|new
name|Parser
index|[]
block|{}
return|;
block|}
comment|// delegators
DECL|method|JavascriptParser
specifier|public
name|JavascriptParser
parameter_list|(
name|TokenStream
name|input
parameter_list|)
block|{
name|this
argument_list|(
name|input
argument_list|,
operator|new
name|RecognizerSharedState
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|JavascriptParser
specifier|public
name|JavascriptParser
parameter_list|(
name|TokenStream
name|input
parameter_list|,
name|RecognizerSharedState
name|state
parameter_list|)
block|{
name|super
argument_list|(
name|input
argument_list|,
name|state
argument_list|)
expr_stmt|;
block|}
DECL|field|adaptor
specifier|protected
name|TreeAdaptor
name|adaptor
init|=
operator|new
name|CommonTreeAdaptor
argument_list|()
decl_stmt|;
DECL|method|setTreeAdaptor
specifier|public
name|void
name|setTreeAdaptor
parameter_list|(
name|TreeAdaptor
name|adaptor
parameter_list|)
block|{
name|this
operator|.
name|adaptor
operator|=
name|adaptor
expr_stmt|;
block|}
DECL|method|getTreeAdaptor
specifier|public
name|TreeAdaptor
name|getTreeAdaptor
parameter_list|()
block|{
return|return
name|adaptor
return|;
block|}
DECL|method|getTokenNames
annotation|@
name|Override
specifier|public
name|String
index|[]
name|getTokenNames
parameter_list|()
block|{
return|return
name|JavascriptParser
operator|.
name|tokenNames
return|;
block|}
DECL|method|getGrammarFileName
annotation|@
name|Override
specifier|public
name|String
name|getGrammarFileName
parameter_list|()
block|{
return|return
literal|"src/java/org/apache/lucene/expressions/js/Javascript.g"
return|;
block|}
annotation|@
name|Override
DECL|method|displayRecognitionError
specifier|public
name|void
name|displayRecognitionError
parameter_list|(
name|String
index|[]
name|tokenNames
parameter_list|,
name|RecognitionException
name|re
parameter_list|)
block|{
name|String
name|message
decl_stmt|;
if|if
condition|(
name|re
operator|.
name|token
operator|==
literal|null
condition|)
block|{
name|message
operator|=
literal|" unknown error (missing token)."
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|re
operator|instanceof
name|UnwantedTokenException
condition|)
block|{
name|message
operator|=
literal|" extraneous "
operator|+
name|getReadableTokenString
argument_list|(
name|re
operator|.
name|token
argument_list|)
operator|+
literal|" at position ("
operator|+
name|re
operator|.
name|charPositionInLine
operator|+
literal|")."
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|re
operator|instanceof
name|MissingTokenException
condition|)
block|{
name|message
operator|=
literal|" missing "
operator|+
name|getReadableTokenString
argument_list|(
name|re
operator|.
name|token
argument_list|)
operator|+
literal|" at position ("
operator|+
name|re
operator|.
name|charPositionInLine
operator|+
literal|")."
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|re
operator|instanceof
name|NoViableAltException
condition|)
block|{
switch|switch
condition|(
name|re
operator|.
name|token
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|EOF
case|:
name|message
operator|=
literal|" unexpected end of expression."
expr_stmt|;
break|break;
default|default:
name|message
operator|=
literal|" invalid sequence of tokens near "
operator|+
name|getReadableTokenString
argument_list|(
name|re
operator|.
name|token
argument_list|)
operator|+
literal|" at position ("
operator|+
name|re
operator|.
name|charPositionInLine
operator|+
literal|")."
expr_stmt|;
break|break;
block|}
block|}
else|else
block|{
name|message
operator|=
literal|" unexpected token "
operator|+
name|getReadableTokenString
argument_list|(
name|re
operator|.
name|token
argument_list|)
operator|+
literal|" at position ("
operator|+
name|re
operator|.
name|charPositionInLine
operator|+
literal|")."
expr_stmt|;
block|}
name|ParseException
name|parseException
init|=
operator|new
name|ParseException
argument_list|(
name|message
argument_list|,
name|re
operator|.
name|charPositionInLine
argument_list|)
decl_stmt|;
name|parseException
operator|.
name|initCause
argument_list|(
name|re
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|parseException
argument_list|)
throw|;
block|}
DECL|method|getReadableTokenString
specifier|public
specifier|static
name|String
name|getReadableTokenString
parameter_list|(
name|Token
name|token
parameter_list|)
block|{
if|if
condition|(
name|token
operator|==
literal|null
condition|)
block|{
return|return
literal|"unknown token"
return|;
block|}
switch|switch
condition|(
name|token
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|AT_LPAREN
case|:
return|return
literal|"open parenthesis '('"
return|;
case|case
name|AT_RPAREN
case|:
return|return
literal|"close parenthesis ')'"
return|;
case|case
name|AT_COMP_LT
case|:
return|return
literal|"less than '<'"
return|;
case|case
name|AT_COMP_LTE
case|:
return|return
literal|"less than or equal '<='"
return|;
case|case
name|AT_COMP_GT
case|:
return|return
literal|"greater than '>'"
return|;
case|case
name|AT_COMP_GTE
case|:
return|return
literal|"greater than or equal '>='"
return|;
case|case
name|AT_COMP_EQ
case|:
return|return
literal|"equal '=='"
return|;
case|case
name|AT_NEGATE
case|:
return|return
literal|"negate '!='"
return|;
case|case
name|AT_BOOL_NOT
case|:
return|return
literal|"boolean not '!'"
return|;
case|case
name|AT_BOOL_AND
case|:
return|return
literal|"boolean and '&&'"
return|;
case|case
name|AT_BOOL_OR
case|:
return|return
literal|"boolean or '||'"
return|;
case|case
name|AT_COND_QUE
case|:
return|return
literal|"conditional '?'"
return|;
case|case
name|AT_ADD
case|:
return|return
literal|"addition '+'"
return|;
case|case
name|AT_SUBTRACT
case|:
return|return
literal|"subtraction '-'"
return|;
case|case
name|AT_MULTIPLY
case|:
return|return
literal|"multiplication '*'"
return|;
case|case
name|AT_DIVIDE
case|:
return|return
literal|"division '/'"
return|;
case|case
name|AT_MODULO
case|:
return|return
literal|"modulo '%'"
return|;
case|case
name|AT_BIT_SHL
case|:
return|return
literal|"bit shift left '<<'"
return|;
case|case
name|AT_BIT_SHR
case|:
return|return
literal|"bit shift right '>>'"
return|;
case|case
name|AT_BIT_SHU
case|:
return|return
literal|"unsigned bit shift right '>>>'"
return|;
case|case
name|AT_BIT_AND
case|:
return|return
literal|"bitwise and '&'"
return|;
case|case
name|AT_BIT_OR
case|:
return|return
literal|"bitwise or '|'"
return|;
case|case
name|AT_BIT_XOR
case|:
return|return
literal|"bitwise xor '^'"
return|;
case|case
name|AT_BIT_NOT
case|:
return|return
literal|"bitwise not '~'"
return|;
case|case
name|ID
case|:
return|return
literal|"identifier '"
operator|+
name|token
operator|.
name|getText
argument_list|()
operator|+
literal|"'"
return|;
case|case
name|DECIMAL
case|:
return|return
literal|"decimal '"
operator|+
name|token
operator|.
name|getText
argument_list|()
operator|+
literal|"'"
return|;
case|case
name|OCTAL
case|:
return|return
literal|"octal '"
operator|+
name|token
operator|.
name|getText
argument_list|()
operator|+
literal|"'"
return|;
case|case
name|HEX
case|:
return|return
literal|"hex '"
operator|+
name|token
operator|.
name|getText
argument_list|()
operator|+
literal|"'"
return|;
case|case
name|EOF
case|:
return|return
literal|"end of expression"
return|;
default|default:
return|return
literal|"'"
operator|+
name|token
operator|.
name|getText
argument_list|()
operator|+
literal|"'"
return|;
block|}
block|}
DECL|class|expression_return
specifier|public
specifier|static
class|class
name|expression_return
extends|extends
name|ParserRuleReturnScope
block|{
DECL|field|tree
name|CommonTree
name|tree
decl_stmt|;
annotation|@
name|Override
DECL|method|getTree
specifier|public
name|CommonTree
name|getTree
parameter_list|()
block|{
return|return
name|tree
return|;
block|}
block|}
empty_stmt|;
comment|// $ANTLR start "expression"
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:250:1: expression : conditional EOF !;
DECL|method|expression
specifier|public
specifier|final
name|JavascriptParser
operator|.
name|expression_return
name|expression
parameter_list|()
throws|throws
name|RecognitionException
block|{
name|JavascriptParser
operator|.
name|expression_return
name|retval
init|=
operator|new
name|JavascriptParser
operator|.
name|expression_return
argument_list|()
decl_stmt|;
name|retval
operator|.
name|start
operator|=
name|input
operator|.
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|CommonTree
name|root_0
init|=
literal|null
decl_stmt|;
name|Token
name|EOF2
init|=
literal|null
decl_stmt|;
name|ParserRuleReturnScope
name|conditional1
init|=
literal|null
decl_stmt|;
name|CommonTree
name|EOF2_tree
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:251:5: ( conditional EOF !)
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:251:7: conditional EOF !
block|{
name|root_0
operator|=
operator|(
name|CommonTree
operator|)
name|adaptor
operator|.
name|nil
argument_list|()
expr_stmt|;
name|pushFollow
argument_list|(
name|FOLLOW_conditional_in_expression737
argument_list|)
expr_stmt|;
name|conditional1
operator|=
name|conditional
argument_list|()
expr_stmt|;
name|state
operator|.
name|_fsp
operator|--
expr_stmt|;
name|adaptor
operator|.
name|addChild
argument_list|(
name|root_0
argument_list|,
name|conditional1
operator|.
name|getTree
argument_list|()
argument_list|)
expr_stmt|;
name|EOF2
operator|=
operator|(
name|Token
operator|)
name|match
argument_list|(
name|input
argument_list|,
name|EOF
argument_list|,
name|FOLLOW_EOF_in_expression739
argument_list|)
expr_stmt|;
block|}
name|retval
operator|.
name|stop
operator|=
name|input
operator|.
name|LT
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|retval
operator|.
name|tree
operator|=
operator|(
name|CommonTree
operator|)
name|adaptor
operator|.
name|rulePostProcessing
argument_list|(
name|root_0
argument_list|)
expr_stmt|;
name|adaptor
operator|.
name|setTokenBoundaries
argument_list|(
name|retval
operator|.
name|tree
argument_list|,
name|retval
operator|.
name|start
argument_list|,
name|retval
operator|.
name|stop
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|re
parameter_list|)
block|{
name|reportError
argument_list|(
name|re
argument_list|)
expr_stmt|;
name|recover
argument_list|(
name|input
argument_list|,
name|re
argument_list|)
expr_stmt|;
name|retval
operator|.
name|tree
operator|=
operator|(
name|CommonTree
operator|)
name|adaptor
operator|.
name|errorNode
argument_list|(
name|input
argument_list|,
name|retval
operator|.
name|start
argument_list|,
name|input
operator|.
name|LT
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|,
name|re
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// do for sure before leaving
block|}
return|return
name|retval
return|;
block|}
comment|// $ANTLR end "expression"
DECL|class|conditional_return
specifier|public
specifier|static
class|class
name|conditional_return
extends|extends
name|ParserRuleReturnScope
block|{
DECL|field|tree
name|CommonTree
name|tree
decl_stmt|;
annotation|@
name|Override
DECL|method|getTree
specifier|public
name|CommonTree
name|getTree
parameter_list|()
block|{
return|return
name|tree
return|;
block|}
block|}
empty_stmt|;
comment|// $ANTLR start "conditional"
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:254:1: conditional : logical_or ( AT_COND_QUE ^ conditional AT_COLON ! conditional )? ;
DECL|method|conditional
specifier|public
specifier|final
name|JavascriptParser
operator|.
name|conditional_return
name|conditional
parameter_list|()
throws|throws
name|RecognitionException
block|{
name|JavascriptParser
operator|.
name|conditional_return
name|retval
init|=
operator|new
name|JavascriptParser
operator|.
name|conditional_return
argument_list|()
decl_stmt|;
name|retval
operator|.
name|start
operator|=
name|input
operator|.
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|CommonTree
name|root_0
init|=
literal|null
decl_stmt|;
name|Token
name|AT_COND_QUE4
init|=
literal|null
decl_stmt|;
name|Token
name|AT_COLON6
init|=
literal|null
decl_stmt|;
name|ParserRuleReturnScope
name|logical_or3
init|=
literal|null
decl_stmt|;
name|ParserRuleReturnScope
name|conditional5
init|=
literal|null
decl_stmt|;
name|ParserRuleReturnScope
name|conditional7
init|=
literal|null
decl_stmt|;
name|CommonTree
name|AT_COND_QUE4_tree
init|=
literal|null
decl_stmt|;
name|CommonTree
name|AT_COLON6_tree
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:255:5: ( logical_or ( AT_COND_QUE ^ conditional AT_COLON ! conditional )? )
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:255:7: logical_or ( AT_COND_QUE ^ conditional AT_COLON ! conditional )?
block|{
name|root_0
operator|=
operator|(
name|CommonTree
operator|)
name|adaptor
operator|.
name|nil
argument_list|()
expr_stmt|;
name|pushFollow
argument_list|(
name|FOLLOW_logical_or_in_conditional757
argument_list|)
expr_stmt|;
name|logical_or3
operator|=
name|logical_or
argument_list|()
expr_stmt|;
name|state
operator|.
name|_fsp
operator|--
expr_stmt|;
name|adaptor
operator|.
name|addChild
argument_list|(
name|root_0
argument_list|,
name|logical_or3
operator|.
name|getTree
argument_list|()
argument_list|)
expr_stmt|;
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:255:18: ( AT_COND_QUE ^ conditional AT_COLON ! conditional )?
name|int
name|alt1
init|=
literal|2
decl_stmt|;
name|int
name|LA1_0
init|=
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA1_0
operator|==
name|AT_COND_QUE
operator|)
condition|)
block|{
name|alt1
operator|=
literal|1
expr_stmt|;
block|}
switch|switch
condition|(
name|alt1
condition|)
block|{
case|case
literal|1
case|:
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:255:19: AT_COND_QUE ^ conditional AT_COLON ! conditional
block|{
name|AT_COND_QUE4
operator|=
operator|(
name|Token
operator|)
name|match
argument_list|(
name|input
argument_list|,
name|AT_COND_QUE
argument_list|,
name|FOLLOW_AT_COND_QUE_in_conditional760
argument_list|)
expr_stmt|;
name|AT_COND_QUE4_tree
operator|=
operator|(
name|CommonTree
operator|)
name|adaptor
operator|.
name|create
argument_list|(
name|AT_COND_QUE4
argument_list|)
expr_stmt|;
name|root_0
operator|=
operator|(
name|CommonTree
operator|)
name|adaptor
operator|.
name|becomeRoot
argument_list|(
name|AT_COND_QUE4_tree
argument_list|,
name|root_0
argument_list|)
expr_stmt|;
name|pushFollow
argument_list|(
name|FOLLOW_conditional_in_conditional763
argument_list|)
expr_stmt|;
name|conditional5
operator|=
name|conditional
argument_list|()
expr_stmt|;
name|state
operator|.
name|_fsp
operator|--
expr_stmt|;
name|adaptor
operator|.
name|addChild
argument_list|(
name|root_0
argument_list|,
name|conditional5
operator|.
name|getTree
argument_list|()
argument_list|)
expr_stmt|;
name|AT_COLON6
operator|=
operator|(
name|Token
operator|)
name|match
argument_list|(
name|input
argument_list|,
name|AT_COLON
argument_list|,
name|FOLLOW_AT_COLON_in_conditional765
argument_list|)
expr_stmt|;
name|pushFollow
argument_list|(
name|FOLLOW_conditional_in_conditional768
argument_list|)
expr_stmt|;
name|conditional7
operator|=
name|conditional
argument_list|()
expr_stmt|;
name|state
operator|.
name|_fsp
operator|--
expr_stmt|;
name|adaptor
operator|.
name|addChild
argument_list|(
name|root_0
argument_list|,
name|conditional7
operator|.
name|getTree
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
name|retval
operator|.
name|stop
operator|=
name|input
operator|.
name|LT
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|retval
operator|.
name|tree
operator|=
operator|(
name|CommonTree
operator|)
name|adaptor
operator|.
name|rulePostProcessing
argument_list|(
name|root_0
argument_list|)
expr_stmt|;
name|adaptor
operator|.
name|setTokenBoundaries
argument_list|(
name|retval
operator|.
name|tree
argument_list|,
name|retval
operator|.
name|start
argument_list|,
name|retval
operator|.
name|stop
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|re
parameter_list|)
block|{
name|reportError
argument_list|(
name|re
argument_list|)
expr_stmt|;
name|recover
argument_list|(
name|input
argument_list|,
name|re
argument_list|)
expr_stmt|;
name|retval
operator|.
name|tree
operator|=
operator|(
name|CommonTree
operator|)
name|adaptor
operator|.
name|errorNode
argument_list|(
name|input
argument_list|,
name|retval
operator|.
name|start
argument_list|,
name|input
operator|.
name|LT
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|,
name|re
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// do for sure before leaving
block|}
return|return
name|retval
return|;
block|}
comment|// $ANTLR end "conditional"
DECL|class|logical_or_return
specifier|public
specifier|static
class|class
name|logical_or_return
extends|extends
name|ParserRuleReturnScope
block|{
DECL|field|tree
name|CommonTree
name|tree
decl_stmt|;
annotation|@
name|Override
DECL|method|getTree
specifier|public
name|CommonTree
name|getTree
parameter_list|()
block|{
return|return
name|tree
return|;
block|}
block|}
empty_stmt|;
comment|// $ANTLR start "logical_or"
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:258:1: logical_or : logical_and ( AT_BOOL_OR ^ logical_and )* ;
DECL|method|logical_or
specifier|public
specifier|final
name|JavascriptParser
operator|.
name|logical_or_return
name|logical_or
parameter_list|()
throws|throws
name|RecognitionException
block|{
name|JavascriptParser
operator|.
name|logical_or_return
name|retval
init|=
operator|new
name|JavascriptParser
operator|.
name|logical_or_return
argument_list|()
decl_stmt|;
name|retval
operator|.
name|start
operator|=
name|input
operator|.
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|CommonTree
name|root_0
init|=
literal|null
decl_stmt|;
name|Token
name|AT_BOOL_OR9
init|=
literal|null
decl_stmt|;
name|ParserRuleReturnScope
name|logical_and8
init|=
literal|null
decl_stmt|;
name|ParserRuleReturnScope
name|logical_and10
init|=
literal|null
decl_stmt|;
name|CommonTree
name|AT_BOOL_OR9_tree
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:259:5: ( logical_and ( AT_BOOL_OR ^ logical_and )* )
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:259:7: logical_and ( AT_BOOL_OR ^ logical_and )*
block|{
name|root_0
operator|=
operator|(
name|CommonTree
operator|)
name|adaptor
operator|.
name|nil
argument_list|()
expr_stmt|;
name|pushFollow
argument_list|(
name|FOLLOW_logical_and_in_logical_or787
argument_list|)
expr_stmt|;
name|logical_and8
operator|=
name|logical_and
argument_list|()
expr_stmt|;
name|state
operator|.
name|_fsp
operator|--
expr_stmt|;
name|adaptor
operator|.
name|addChild
argument_list|(
name|root_0
argument_list|,
name|logical_and8
operator|.
name|getTree
argument_list|()
argument_list|)
expr_stmt|;
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:259:19: ( AT_BOOL_OR ^ logical_and )*
name|loop2
label|:
while|while
condition|(
literal|true
condition|)
block|{
name|int
name|alt2
init|=
literal|2
decl_stmt|;
name|int
name|LA2_0
init|=
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA2_0
operator|==
name|AT_BOOL_OR
operator|)
condition|)
block|{
name|alt2
operator|=
literal|1
expr_stmt|;
block|}
switch|switch
condition|(
name|alt2
condition|)
block|{
case|case
literal|1
case|:
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:259:20: AT_BOOL_OR ^ logical_and
block|{
name|AT_BOOL_OR9
operator|=
operator|(
name|Token
operator|)
name|match
argument_list|(
name|input
argument_list|,
name|AT_BOOL_OR
argument_list|,
name|FOLLOW_AT_BOOL_OR_in_logical_or790
argument_list|)
expr_stmt|;
name|AT_BOOL_OR9_tree
operator|=
operator|(
name|CommonTree
operator|)
name|adaptor
operator|.
name|create
argument_list|(
name|AT_BOOL_OR9
argument_list|)
expr_stmt|;
name|root_0
operator|=
operator|(
name|CommonTree
operator|)
name|adaptor
operator|.
name|becomeRoot
argument_list|(
name|AT_BOOL_OR9_tree
argument_list|,
name|root_0
argument_list|)
expr_stmt|;
name|pushFollow
argument_list|(
name|FOLLOW_logical_and_in_logical_or793
argument_list|)
expr_stmt|;
name|logical_and10
operator|=
name|logical_and
argument_list|()
expr_stmt|;
name|state
operator|.
name|_fsp
operator|--
expr_stmt|;
name|adaptor
operator|.
name|addChild
argument_list|(
name|root_0
argument_list|,
name|logical_and10
operator|.
name|getTree
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
default|default :
break|break
name|loop2
break|;
block|}
block|}
block|}
name|retval
operator|.
name|stop
operator|=
name|input
operator|.
name|LT
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|retval
operator|.
name|tree
operator|=
operator|(
name|CommonTree
operator|)
name|adaptor
operator|.
name|rulePostProcessing
argument_list|(
name|root_0
argument_list|)
expr_stmt|;
name|adaptor
operator|.
name|setTokenBoundaries
argument_list|(
name|retval
operator|.
name|tree
argument_list|,
name|retval
operator|.
name|start
argument_list|,
name|retval
operator|.
name|stop
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|re
parameter_list|)
block|{
name|reportError
argument_list|(
name|re
argument_list|)
expr_stmt|;
name|recover
argument_list|(
name|input
argument_list|,
name|re
argument_list|)
expr_stmt|;
name|retval
operator|.
name|tree
operator|=
operator|(
name|CommonTree
operator|)
name|adaptor
operator|.
name|errorNode
argument_list|(
name|input
argument_list|,
name|retval
operator|.
name|start
argument_list|,
name|input
operator|.
name|LT
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|,
name|re
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// do for sure before leaving
block|}
return|return
name|retval
return|;
block|}
comment|// $ANTLR end "logical_or"
DECL|class|logical_and_return
specifier|public
specifier|static
class|class
name|logical_and_return
extends|extends
name|ParserRuleReturnScope
block|{
DECL|field|tree
name|CommonTree
name|tree
decl_stmt|;
annotation|@
name|Override
DECL|method|getTree
specifier|public
name|CommonTree
name|getTree
parameter_list|()
block|{
return|return
name|tree
return|;
block|}
block|}
empty_stmt|;
comment|// $ANTLR start "logical_and"
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:262:1: logical_and : bitwise_or ( AT_BOOL_AND ^ bitwise_or )* ;
DECL|method|logical_and
specifier|public
specifier|final
name|JavascriptParser
operator|.
name|logical_and_return
name|logical_and
parameter_list|()
throws|throws
name|RecognitionException
block|{
name|JavascriptParser
operator|.
name|logical_and_return
name|retval
init|=
operator|new
name|JavascriptParser
operator|.
name|logical_and_return
argument_list|()
decl_stmt|;
name|retval
operator|.
name|start
operator|=
name|input
operator|.
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|CommonTree
name|root_0
init|=
literal|null
decl_stmt|;
name|Token
name|AT_BOOL_AND12
init|=
literal|null
decl_stmt|;
name|ParserRuleReturnScope
name|bitwise_or11
init|=
literal|null
decl_stmt|;
name|ParserRuleReturnScope
name|bitwise_or13
init|=
literal|null
decl_stmt|;
name|CommonTree
name|AT_BOOL_AND12_tree
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:263:5: ( bitwise_or ( AT_BOOL_AND ^ bitwise_or )* )
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:263:7: bitwise_or ( AT_BOOL_AND ^ bitwise_or )*
block|{
name|root_0
operator|=
operator|(
name|CommonTree
operator|)
name|adaptor
operator|.
name|nil
argument_list|()
expr_stmt|;
name|pushFollow
argument_list|(
name|FOLLOW_bitwise_or_in_logical_and812
argument_list|)
expr_stmt|;
name|bitwise_or11
operator|=
name|bitwise_or
argument_list|()
expr_stmt|;
name|state
operator|.
name|_fsp
operator|--
expr_stmt|;
name|adaptor
operator|.
name|addChild
argument_list|(
name|root_0
argument_list|,
name|bitwise_or11
operator|.
name|getTree
argument_list|()
argument_list|)
expr_stmt|;
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:263:18: ( AT_BOOL_AND ^ bitwise_or )*
name|loop3
label|:
while|while
condition|(
literal|true
condition|)
block|{
name|int
name|alt3
init|=
literal|2
decl_stmt|;
name|int
name|LA3_0
init|=
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA3_0
operator|==
name|AT_BOOL_AND
operator|)
condition|)
block|{
name|alt3
operator|=
literal|1
expr_stmt|;
block|}
switch|switch
condition|(
name|alt3
condition|)
block|{
case|case
literal|1
case|:
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:263:19: AT_BOOL_AND ^ bitwise_or
block|{
name|AT_BOOL_AND12
operator|=
operator|(
name|Token
operator|)
name|match
argument_list|(
name|input
argument_list|,
name|AT_BOOL_AND
argument_list|,
name|FOLLOW_AT_BOOL_AND_in_logical_and815
argument_list|)
expr_stmt|;
name|AT_BOOL_AND12_tree
operator|=
operator|(
name|CommonTree
operator|)
name|adaptor
operator|.
name|create
argument_list|(
name|AT_BOOL_AND12
argument_list|)
expr_stmt|;
name|root_0
operator|=
operator|(
name|CommonTree
operator|)
name|adaptor
operator|.
name|becomeRoot
argument_list|(
name|AT_BOOL_AND12_tree
argument_list|,
name|root_0
argument_list|)
expr_stmt|;
name|pushFollow
argument_list|(
name|FOLLOW_bitwise_or_in_logical_and818
argument_list|)
expr_stmt|;
name|bitwise_or13
operator|=
name|bitwise_or
argument_list|()
expr_stmt|;
name|state
operator|.
name|_fsp
operator|--
expr_stmt|;
name|adaptor
operator|.
name|addChild
argument_list|(
name|root_0
argument_list|,
name|bitwise_or13
operator|.
name|getTree
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
default|default :
break|break
name|loop3
break|;
block|}
block|}
block|}
name|retval
operator|.
name|stop
operator|=
name|input
operator|.
name|LT
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|retval
operator|.
name|tree
operator|=
operator|(
name|CommonTree
operator|)
name|adaptor
operator|.
name|rulePostProcessing
argument_list|(
name|root_0
argument_list|)
expr_stmt|;
name|adaptor
operator|.
name|setTokenBoundaries
argument_list|(
name|retval
operator|.
name|tree
argument_list|,
name|retval
operator|.
name|start
argument_list|,
name|retval
operator|.
name|stop
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|re
parameter_list|)
block|{
name|reportError
argument_list|(
name|re
argument_list|)
expr_stmt|;
name|recover
argument_list|(
name|input
argument_list|,
name|re
argument_list|)
expr_stmt|;
name|retval
operator|.
name|tree
operator|=
operator|(
name|CommonTree
operator|)
name|adaptor
operator|.
name|errorNode
argument_list|(
name|input
argument_list|,
name|retval
operator|.
name|start
argument_list|,
name|input
operator|.
name|LT
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|,
name|re
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// do for sure before leaving
block|}
return|return
name|retval
return|;
block|}
comment|// $ANTLR end "logical_and"
DECL|class|bitwise_or_return
specifier|public
specifier|static
class|class
name|bitwise_or_return
extends|extends
name|ParserRuleReturnScope
block|{
DECL|field|tree
name|CommonTree
name|tree
decl_stmt|;
annotation|@
name|Override
DECL|method|getTree
specifier|public
name|CommonTree
name|getTree
parameter_list|()
block|{
return|return
name|tree
return|;
block|}
block|}
empty_stmt|;
comment|// $ANTLR start "bitwise_or"
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:266:1: bitwise_or : bitwise_xor ( AT_BIT_OR ^ bitwise_xor )* ;
DECL|method|bitwise_or
specifier|public
specifier|final
name|JavascriptParser
operator|.
name|bitwise_or_return
name|bitwise_or
parameter_list|()
throws|throws
name|RecognitionException
block|{
name|JavascriptParser
operator|.
name|bitwise_or_return
name|retval
init|=
operator|new
name|JavascriptParser
operator|.
name|bitwise_or_return
argument_list|()
decl_stmt|;
name|retval
operator|.
name|start
operator|=
name|input
operator|.
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|CommonTree
name|root_0
init|=
literal|null
decl_stmt|;
name|Token
name|AT_BIT_OR15
init|=
literal|null
decl_stmt|;
name|ParserRuleReturnScope
name|bitwise_xor14
init|=
literal|null
decl_stmt|;
name|ParserRuleReturnScope
name|bitwise_xor16
init|=
literal|null
decl_stmt|;
name|CommonTree
name|AT_BIT_OR15_tree
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:267:5: ( bitwise_xor ( AT_BIT_OR ^ bitwise_xor )* )
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:267:7: bitwise_xor ( AT_BIT_OR ^ bitwise_xor )*
block|{
name|root_0
operator|=
operator|(
name|CommonTree
operator|)
name|adaptor
operator|.
name|nil
argument_list|()
expr_stmt|;
name|pushFollow
argument_list|(
name|FOLLOW_bitwise_xor_in_bitwise_or837
argument_list|)
expr_stmt|;
name|bitwise_xor14
operator|=
name|bitwise_xor
argument_list|()
expr_stmt|;
name|state
operator|.
name|_fsp
operator|--
expr_stmt|;
name|adaptor
operator|.
name|addChild
argument_list|(
name|root_0
argument_list|,
name|bitwise_xor14
operator|.
name|getTree
argument_list|()
argument_list|)
expr_stmt|;
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:267:19: ( AT_BIT_OR ^ bitwise_xor )*
name|loop4
label|:
while|while
condition|(
literal|true
condition|)
block|{
name|int
name|alt4
init|=
literal|2
decl_stmt|;
name|int
name|LA4_0
init|=
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA4_0
operator|==
name|AT_BIT_OR
operator|)
condition|)
block|{
name|alt4
operator|=
literal|1
expr_stmt|;
block|}
switch|switch
condition|(
name|alt4
condition|)
block|{
case|case
literal|1
case|:
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:267:20: AT_BIT_OR ^ bitwise_xor
block|{
name|AT_BIT_OR15
operator|=
operator|(
name|Token
operator|)
name|match
argument_list|(
name|input
argument_list|,
name|AT_BIT_OR
argument_list|,
name|FOLLOW_AT_BIT_OR_in_bitwise_or840
argument_list|)
expr_stmt|;
name|AT_BIT_OR15_tree
operator|=
operator|(
name|CommonTree
operator|)
name|adaptor
operator|.
name|create
argument_list|(
name|AT_BIT_OR15
argument_list|)
expr_stmt|;
name|root_0
operator|=
operator|(
name|CommonTree
operator|)
name|adaptor
operator|.
name|becomeRoot
argument_list|(
name|AT_BIT_OR15_tree
argument_list|,
name|root_0
argument_list|)
expr_stmt|;
name|pushFollow
argument_list|(
name|FOLLOW_bitwise_xor_in_bitwise_or843
argument_list|)
expr_stmt|;
name|bitwise_xor16
operator|=
name|bitwise_xor
argument_list|()
expr_stmt|;
name|state
operator|.
name|_fsp
operator|--
expr_stmt|;
name|adaptor
operator|.
name|addChild
argument_list|(
name|root_0
argument_list|,
name|bitwise_xor16
operator|.
name|getTree
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
default|default :
break|break
name|loop4
break|;
block|}
block|}
block|}
name|retval
operator|.
name|stop
operator|=
name|input
operator|.
name|LT
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|retval
operator|.
name|tree
operator|=
operator|(
name|CommonTree
operator|)
name|adaptor
operator|.
name|rulePostProcessing
argument_list|(
name|root_0
argument_list|)
expr_stmt|;
name|adaptor
operator|.
name|setTokenBoundaries
argument_list|(
name|retval
operator|.
name|tree
argument_list|,
name|retval
operator|.
name|start
argument_list|,
name|retval
operator|.
name|stop
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|re
parameter_list|)
block|{
name|reportError
argument_list|(
name|re
argument_list|)
expr_stmt|;
name|recover
argument_list|(
name|input
argument_list|,
name|re
argument_list|)
expr_stmt|;
name|retval
operator|.
name|tree
operator|=
operator|(
name|CommonTree
operator|)
name|adaptor
operator|.
name|errorNode
argument_list|(
name|input
argument_list|,
name|retval
operator|.
name|start
argument_list|,
name|input
operator|.
name|LT
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|,
name|re
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// do for sure before leaving
block|}
return|return
name|retval
return|;
block|}
comment|// $ANTLR end "bitwise_or"
DECL|class|bitwise_xor_return
specifier|public
specifier|static
class|class
name|bitwise_xor_return
extends|extends
name|ParserRuleReturnScope
block|{
DECL|field|tree
name|CommonTree
name|tree
decl_stmt|;
annotation|@
name|Override
DECL|method|getTree
specifier|public
name|CommonTree
name|getTree
parameter_list|()
block|{
return|return
name|tree
return|;
block|}
block|}
empty_stmt|;
comment|// $ANTLR start "bitwise_xor"
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:270:1: bitwise_xor : bitwise_and ( AT_BIT_XOR ^ bitwise_and )* ;
DECL|method|bitwise_xor
specifier|public
specifier|final
name|JavascriptParser
operator|.
name|bitwise_xor_return
name|bitwise_xor
parameter_list|()
throws|throws
name|RecognitionException
block|{
name|JavascriptParser
operator|.
name|bitwise_xor_return
name|retval
init|=
operator|new
name|JavascriptParser
operator|.
name|bitwise_xor_return
argument_list|()
decl_stmt|;
name|retval
operator|.
name|start
operator|=
name|input
operator|.
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|CommonTree
name|root_0
init|=
literal|null
decl_stmt|;
name|Token
name|AT_BIT_XOR18
init|=
literal|null
decl_stmt|;
name|ParserRuleReturnScope
name|bitwise_and17
init|=
literal|null
decl_stmt|;
name|ParserRuleReturnScope
name|bitwise_and19
init|=
literal|null
decl_stmt|;
name|CommonTree
name|AT_BIT_XOR18_tree
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:271:5: ( bitwise_and ( AT_BIT_XOR ^ bitwise_and )* )
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:271:7: bitwise_and ( AT_BIT_XOR ^ bitwise_and )*
block|{
name|root_0
operator|=
operator|(
name|CommonTree
operator|)
name|adaptor
operator|.
name|nil
argument_list|()
expr_stmt|;
name|pushFollow
argument_list|(
name|FOLLOW_bitwise_and_in_bitwise_xor862
argument_list|)
expr_stmt|;
name|bitwise_and17
operator|=
name|bitwise_and
argument_list|()
expr_stmt|;
name|state
operator|.
name|_fsp
operator|--
expr_stmt|;
name|adaptor
operator|.
name|addChild
argument_list|(
name|root_0
argument_list|,
name|bitwise_and17
operator|.
name|getTree
argument_list|()
argument_list|)
expr_stmt|;
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:271:19: ( AT_BIT_XOR ^ bitwise_and )*
name|loop5
label|:
while|while
condition|(
literal|true
condition|)
block|{
name|int
name|alt5
init|=
literal|2
decl_stmt|;
name|int
name|LA5_0
init|=
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA5_0
operator|==
name|AT_BIT_XOR
operator|)
condition|)
block|{
name|alt5
operator|=
literal|1
expr_stmt|;
block|}
switch|switch
condition|(
name|alt5
condition|)
block|{
case|case
literal|1
case|:
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:271:20: AT_BIT_XOR ^ bitwise_and
block|{
name|AT_BIT_XOR18
operator|=
operator|(
name|Token
operator|)
name|match
argument_list|(
name|input
argument_list|,
name|AT_BIT_XOR
argument_list|,
name|FOLLOW_AT_BIT_XOR_in_bitwise_xor865
argument_list|)
expr_stmt|;
name|AT_BIT_XOR18_tree
operator|=
operator|(
name|CommonTree
operator|)
name|adaptor
operator|.
name|create
argument_list|(
name|AT_BIT_XOR18
argument_list|)
expr_stmt|;
name|root_0
operator|=
operator|(
name|CommonTree
operator|)
name|adaptor
operator|.
name|becomeRoot
argument_list|(
name|AT_BIT_XOR18_tree
argument_list|,
name|root_0
argument_list|)
expr_stmt|;
name|pushFollow
argument_list|(
name|FOLLOW_bitwise_and_in_bitwise_xor868
argument_list|)
expr_stmt|;
name|bitwise_and19
operator|=
name|bitwise_and
argument_list|()
expr_stmt|;
name|state
operator|.
name|_fsp
operator|--
expr_stmt|;
name|adaptor
operator|.
name|addChild
argument_list|(
name|root_0
argument_list|,
name|bitwise_and19
operator|.
name|getTree
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
default|default :
break|break
name|loop5
break|;
block|}
block|}
block|}
name|retval
operator|.
name|stop
operator|=
name|input
operator|.
name|LT
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|retval
operator|.
name|tree
operator|=
operator|(
name|CommonTree
operator|)
name|adaptor
operator|.
name|rulePostProcessing
argument_list|(
name|root_0
argument_list|)
expr_stmt|;
name|adaptor
operator|.
name|setTokenBoundaries
argument_list|(
name|retval
operator|.
name|tree
argument_list|,
name|retval
operator|.
name|start
argument_list|,
name|retval
operator|.
name|stop
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|re
parameter_list|)
block|{
name|reportError
argument_list|(
name|re
argument_list|)
expr_stmt|;
name|recover
argument_list|(
name|input
argument_list|,
name|re
argument_list|)
expr_stmt|;
name|retval
operator|.
name|tree
operator|=
operator|(
name|CommonTree
operator|)
name|adaptor
operator|.
name|errorNode
argument_list|(
name|input
argument_list|,
name|retval
operator|.
name|start
argument_list|,
name|input
operator|.
name|LT
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|,
name|re
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// do for sure before leaving
block|}
return|return
name|retval
return|;
block|}
comment|// $ANTLR end "bitwise_xor"
DECL|class|bitwise_and_return
specifier|public
specifier|static
class|class
name|bitwise_and_return
extends|extends
name|ParserRuleReturnScope
block|{
DECL|field|tree
name|CommonTree
name|tree
decl_stmt|;
annotation|@
name|Override
DECL|method|getTree
specifier|public
name|CommonTree
name|getTree
parameter_list|()
block|{
return|return
name|tree
return|;
block|}
block|}
empty_stmt|;
comment|// $ANTLR start "bitwise_and"
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:274:1: bitwise_and : equality ( AT_BIT_AND ^ equality )* ;
DECL|method|bitwise_and
specifier|public
specifier|final
name|JavascriptParser
operator|.
name|bitwise_and_return
name|bitwise_and
parameter_list|()
throws|throws
name|RecognitionException
block|{
name|JavascriptParser
operator|.
name|bitwise_and_return
name|retval
init|=
operator|new
name|JavascriptParser
operator|.
name|bitwise_and_return
argument_list|()
decl_stmt|;
name|retval
operator|.
name|start
operator|=
name|input
operator|.
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|CommonTree
name|root_0
init|=
literal|null
decl_stmt|;
name|Token
name|AT_BIT_AND21
init|=
literal|null
decl_stmt|;
name|ParserRuleReturnScope
name|equality20
init|=
literal|null
decl_stmt|;
name|ParserRuleReturnScope
name|equality22
init|=
literal|null
decl_stmt|;
name|CommonTree
name|AT_BIT_AND21_tree
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:275:5: ( equality ( AT_BIT_AND ^ equality )* )
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:275:8: equality ( AT_BIT_AND ^ equality )*
block|{
name|root_0
operator|=
operator|(
name|CommonTree
operator|)
name|adaptor
operator|.
name|nil
argument_list|()
expr_stmt|;
name|pushFollow
argument_list|(
name|FOLLOW_equality_in_bitwise_and888
argument_list|)
expr_stmt|;
name|equality20
operator|=
name|equality
argument_list|()
expr_stmt|;
name|state
operator|.
name|_fsp
operator|--
expr_stmt|;
name|adaptor
operator|.
name|addChild
argument_list|(
name|root_0
argument_list|,
name|equality20
operator|.
name|getTree
argument_list|()
argument_list|)
expr_stmt|;
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:275:17: ( AT_BIT_AND ^ equality )*
name|loop6
label|:
while|while
condition|(
literal|true
condition|)
block|{
name|int
name|alt6
init|=
literal|2
decl_stmt|;
name|int
name|LA6_0
init|=
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA6_0
operator|==
name|AT_BIT_AND
operator|)
condition|)
block|{
name|alt6
operator|=
literal|1
expr_stmt|;
block|}
switch|switch
condition|(
name|alt6
condition|)
block|{
case|case
literal|1
case|:
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:275:18: AT_BIT_AND ^ equality
block|{
name|AT_BIT_AND21
operator|=
operator|(
name|Token
operator|)
name|match
argument_list|(
name|input
argument_list|,
name|AT_BIT_AND
argument_list|,
name|FOLLOW_AT_BIT_AND_in_bitwise_and891
argument_list|)
expr_stmt|;
name|AT_BIT_AND21_tree
operator|=
operator|(
name|CommonTree
operator|)
name|adaptor
operator|.
name|create
argument_list|(
name|AT_BIT_AND21
argument_list|)
expr_stmt|;
name|root_0
operator|=
operator|(
name|CommonTree
operator|)
name|adaptor
operator|.
name|becomeRoot
argument_list|(
name|AT_BIT_AND21_tree
argument_list|,
name|root_0
argument_list|)
expr_stmt|;
name|pushFollow
argument_list|(
name|FOLLOW_equality_in_bitwise_and894
argument_list|)
expr_stmt|;
name|equality22
operator|=
name|equality
argument_list|()
expr_stmt|;
name|state
operator|.
name|_fsp
operator|--
expr_stmt|;
name|adaptor
operator|.
name|addChild
argument_list|(
name|root_0
argument_list|,
name|equality22
operator|.
name|getTree
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
default|default :
break|break
name|loop6
break|;
block|}
block|}
block|}
name|retval
operator|.
name|stop
operator|=
name|input
operator|.
name|LT
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|retval
operator|.
name|tree
operator|=
operator|(
name|CommonTree
operator|)
name|adaptor
operator|.
name|rulePostProcessing
argument_list|(
name|root_0
argument_list|)
expr_stmt|;
name|adaptor
operator|.
name|setTokenBoundaries
argument_list|(
name|retval
operator|.
name|tree
argument_list|,
name|retval
operator|.
name|start
argument_list|,
name|retval
operator|.
name|stop
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|re
parameter_list|)
block|{
name|reportError
argument_list|(
name|re
argument_list|)
expr_stmt|;
name|recover
argument_list|(
name|input
argument_list|,
name|re
argument_list|)
expr_stmt|;
name|retval
operator|.
name|tree
operator|=
operator|(
name|CommonTree
operator|)
name|adaptor
operator|.
name|errorNode
argument_list|(
name|input
argument_list|,
name|retval
operator|.
name|start
argument_list|,
name|input
operator|.
name|LT
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|,
name|re
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// do for sure before leaving
block|}
return|return
name|retval
return|;
block|}
comment|// $ANTLR end "bitwise_and"
DECL|class|equality_return
specifier|public
specifier|static
class|class
name|equality_return
extends|extends
name|ParserRuleReturnScope
block|{
DECL|field|tree
name|CommonTree
name|tree
decl_stmt|;
annotation|@
name|Override
DECL|method|getTree
specifier|public
name|CommonTree
name|getTree
parameter_list|()
block|{
return|return
name|tree
return|;
block|}
block|}
empty_stmt|;
comment|// $ANTLR start "equality"
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:278:1: equality : relational ( ( AT_COMP_EQ | AT_COMP_NEQ ) ^ relational )* ;
DECL|method|equality
specifier|public
specifier|final
name|JavascriptParser
operator|.
name|equality_return
name|equality
parameter_list|()
throws|throws
name|RecognitionException
block|{
name|JavascriptParser
operator|.
name|equality_return
name|retval
init|=
operator|new
name|JavascriptParser
operator|.
name|equality_return
argument_list|()
decl_stmt|;
name|retval
operator|.
name|start
operator|=
name|input
operator|.
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|CommonTree
name|root_0
init|=
literal|null
decl_stmt|;
name|Token
name|set24
init|=
literal|null
decl_stmt|;
name|ParserRuleReturnScope
name|relational23
init|=
literal|null
decl_stmt|;
name|ParserRuleReturnScope
name|relational25
init|=
literal|null
decl_stmt|;
name|CommonTree
name|set24_tree
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:279:5: ( relational ( ( AT_COMP_EQ | AT_COMP_NEQ ) ^ relational )* )
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:279:7: relational ( ( AT_COMP_EQ | AT_COMP_NEQ ) ^ relational )*
block|{
name|root_0
operator|=
operator|(
name|CommonTree
operator|)
name|adaptor
operator|.
name|nil
argument_list|()
expr_stmt|;
name|pushFollow
argument_list|(
name|FOLLOW_relational_in_equality913
argument_list|)
expr_stmt|;
name|relational23
operator|=
name|relational
argument_list|()
expr_stmt|;
name|state
operator|.
name|_fsp
operator|--
expr_stmt|;
name|adaptor
operator|.
name|addChild
argument_list|(
name|root_0
argument_list|,
name|relational23
operator|.
name|getTree
argument_list|()
argument_list|)
expr_stmt|;
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:279:18: ( ( AT_COMP_EQ | AT_COMP_NEQ ) ^ relational )*
name|loop7
label|:
while|while
condition|(
literal|true
condition|)
block|{
name|int
name|alt7
init|=
literal|2
decl_stmt|;
name|int
name|LA7_0
init|=
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA7_0
operator|==
name|AT_COMP_EQ
operator|||
name|LA7_0
operator|==
name|AT_COMP_NEQ
operator|)
condition|)
block|{
name|alt7
operator|=
literal|1
expr_stmt|;
block|}
switch|switch
condition|(
name|alt7
condition|)
block|{
case|case
literal|1
case|:
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:279:19: ( AT_COMP_EQ | AT_COMP_NEQ ) ^ relational
block|{
name|set24
operator|=
name|input
operator|.
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|set24
operator|=
name|input
operator|.
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|AT_COMP_EQ
operator|||
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|AT_COMP_NEQ
condition|)
block|{
name|input
operator|.
name|consume
argument_list|()
expr_stmt|;
name|root_0
operator|=
operator|(
name|CommonTree
operator|)
name|adaptor
operator|.
name|becomeRoot
argument_list|(
operator|(
name|CommonTree
operator|)
name|adaptor
operator|.
name|create
argument_list|(
name|set24
argument_list|)
argument_list|,
name|root_0
argument_list|)
expr_stmt|;
name|state
operator|.
name|errorRecovery
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|MismatchedSetException
name|mse
init|=
operator|new
name|MismatchedSetException
argument_list|(
literal|null
argument_list|,
name|input
argument_list|)
decl_stmt|;
throw|throw
name|mse
throw|;
block|}
name|pushFollow
argument_list|(
name|FOLLOW_relational_in_equality925
argument_list|)
expr_stmt|;
name|relational25
operator|=
name|relational
argument_list|()
expr_stmt|;
name|state
operator|.
name|_fsp
operator|--
expr_stmt|;
name|adaptor
operator|.
name|addChild
argument_list|(
name|root_0
argument_list|,
name|relational25
operator|.
name|getTree
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
default|default :
break|break
name|loop7
break|;
block|}
block|}
block|}
name|retval
operator|.
name|stop
operator|=
name|input
operator|.
name|LT
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|retval
operator|.
name|tree
operator|=
operator|(
name|CommonTree
operator|)
name|adaptor
operator|.
name|rulePostProcessing
argument_list|(
name|root_0
argument_list|)
expr_stmt|;
name|adaptor
operator|.
name|setTokenBoundaries
argument_list|(
name|retval
operator|.
name|tree
argument_list|,
name|retval
operator|.
name|start
argument_list|,
name|retval
operator|.
name|stop
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|re
parameter_list|)
block|{
name|reportError
argument_list|(
name|re
argument_list|)
expr_stmt|;
name|recover
argument_list|(
name|input
argument_list|,
name|re
argument_list|)
expr_stmt|;
name|retval
operator|.
name|tree
operator|=
operator|(
name|CommonTree
operator|)
name|adaptor
operator|.
name|errorNode
argument_list|(
name|input
argument_list|,
name|retval
operator|.
name|start
argument_list|,
name|input
operator|.
name|LT
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|,
name|re
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// do for sure before leaving
block|}
return|return
name|retval
return|;
block|}
comment|// $ANTLR end "equality"
DECL|class|relational_return
specifier|public
specifier|static
class|class
name|relational_return
extends|extends
name|ParserRuleReturnScope
block|{
DECL|field|tree
name|CommonTree
name|tree
decl_stmt|;
annotation|@
name|Override
DECL|method|getTree
specifier|public
name|CommonTree
name|getTree
parameter_list|()
block|{
return|return
name|tree
return|;
block|}
block|}
empty_stmt|;
comment|// $ANTLR start "relational"
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:282:1: relational : shift ( ( AT_COMP_LT | AT_COMP_GT | AT_COMP_LTE | AT_COMP_GTE ) ^ shift )* ;
DECL|method|relational
specifier|public
specifier|final
name|JavascriptParser
operator|.
name|relational_return
name|relational
parameter_list|()
throws|throws
name|RecognitionException
block|{
name|JavascriptParser
operator|.
name|relational_return
name|retval
init|=
operator|new
name|JavascriptParser
operator|.
name|relational_return
argument_list|()
decl_stmt|;
name|retval
operator|.
name|start
operator|=
name|input
operator|.
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|CommonTree
name|root_0
init|=
literal|null
decl_stmt|;
name|Token
name|set27
init|=
literal|null
decl_stmt|;
name|ParserRuleReturnScope
name|shift26
init|=
literal|null
decl_stmt|;
name|ParserRuleReturnScope
name|shift28
init|=
literal|null
decl_stmt|;
name|CommonTree
name|set27_tree
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:283:5: ( shift ( ( AT_COMP_LT | AT_COMP_GT | AT_COMP_LTE | AT_COMP_GTE ) ^ shift )* )
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:283:7: shift ( ( AT_COMP_LT | AT_COMP_GT | AT_COMP_LTE | AT_COMP_GTE ) ^ shift )*
block|{
name|root_0
operator|=
operator|(
name|CommonTree
operator|)
name|adaptor
operator|.
name|nil
argument_list|()
expr_stmt|;
name|pushFollow
argument_list|(
name|FOLLOW_shift_in_relational944
argument_list|)
expr_stmt|;
name|shift26
operator|=
name|shift
argument_list|()
expr_stmt|;
name|state
operator|.
name|_fsp
operator|--
expr_stmt|;
name|adaptor
operator|.
name|addChild
argument_list|(
name|root_0
argument_list|,
name|shift26
operator|.
name|getTree
argument_list|()
argument_list|)
expr_stmt|;
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:283:13: ( ( AT_COMP_LT | AT_COMP_GT | AT_COMP_LTE | AT_COMP_GTE ) ^ shift )*
name|loop8
label|:
while|while
condition|(
literal|true
condition|)
block|{
name|int
name|alt8
init|=
literal|2
decl_stmt|;
name|int
name|LA8_0
init|=
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|LA8_0
operator|>=
name|AT_COMP_GT
operator|&&
name|LA8_0
operator|<=
name|AT_COMP_LTE
operator|)
operator|)
condition|)
block|{
name|alt8
operator|=
literal|1
expr_stmt|;
block|}
switch|switch
condition|(
name|alt8
condition|)
block|{
case|case
literal|1
case|:
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:283:14: ( AT_COMP_LT | AT_COMP_GT | AT_COMP_LTE | AT_COMP_GTE ) ^ shift
block|{
name|set27
operator|=
name|input
operator|.
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|set27
operator|=
name|input
operator|.
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
operator|>=
name|AT_COMP_GT
operator|&&
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
operator|<=
name|AT_COMP_LTE
operator|)
condition|)
block|{
name|input
operator|.
name|consume
argument_list|()
expr_stmt|;
name|root_0
operator|=
operator|(
name|CommonTree
operator|)
name|adaptor
operator|.
name|becomeRoot
argument_list|(
operator|(
name|CommonTree
operator|)
name|adaptor
operator|.
name|create
argument_list|(
name|set27
argument_list|)
argument_list|,
name|root_0
argument_list|)
expr_stmt|;
name|state
operator|.
name|errorRecovery
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|MismatchedSetException
name|mse
init|=
operator|new
name|MismatchedSetException
argument_list|(
literal|null
argument_list|,
name|input
argument_list|)
decl_stmt|;
throw|throw
name|mse
throw|;
block|}
name|pushFollow
argument_list|(
name|FOLLOW_shift_in_relational964
argument_list|)
expr_stmt|;
name|shift28
operator|=
name|shift
argument_list|()
expr_stmt|;
name|state
operator|.
name|_fsp
operator|--
expr_stmt|;
name|adaptor
operator|.
name|addChild
argument_list|(
name|root_0
argument_list|,
name|shift28
operator|.
name|getTree
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
default|default :
break|break
name|loop8
break|;
block|}
block|}
block|}
name|retval
operator|.
name|stop
operator|=
name|input
operator|.
name|LT
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|retval
operator|.
name|tree
operator|=
operator|(
name|CommonTree
operator|)
name|adaptor
operator|.
name|rulePostProcessing
argument_list|(
name|root_0
argument_list|)
expr_stmt|;
name|adaptor
operator|.
name|setTokenBoundaries
argument_list|(
name|retval
operator|.
name|tree
argument_list|,
name|retval
operator|.
name|start
argument_list|,
name|retval
operator|.
name|stop
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|re
parameter_list|)
block|{
name|reportError
argument_list|(
name|re
argument_list|)
expr_stmt|;
name|recover
argument_list|(
name|input
argument_list|,
name|re
argument_list|)
expr_stmt|;
name|retval
operator|.
name|tree
operator|=
operator|(
name|CommonTree
operator|)
name|adaptor
operator|.
name|errorNode
argument_list|(
name|input
argument_list|,
name|retval
operator|.
name|start
argument_list|,
name|input
operator|.
name|LT
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|,
name|re
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// do for sure before leaving
block|}
return|return
name|retval
return|;
block|}
comment|// $ANTLR end "relational"
DECL|class|shift_return
specifier|public
specifier|static
class|class
name|shift_return
extends|extends
name|ParserRuleReturnScope
block|{
DECL|field|tree
name|CommonTree
name|tree
decl_stmt|;
annotation|@
name|Override
DECL|method|getTree
specifier|public
name|CommonTree
name|getTree
parameter_list|()
block|{
return|return
name|tree
return|;
block|}
block|}
empty_stmt|;
comment|// $ANTLR start "shift"
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:286:1: shift : additive ( ( AT_BIT_SHL | AT_BIT_SHR | AT_BIT_SHU ) ^ additive )* ;
DECL|method|shift
specifier|public
specifier|final
name|JavascriptParser
operator|.
name|shift_return
name|shift
parameter_list|()
throws|throws
name|RecognitionException
block|{
name|JavascriptParser
operator|.
name|shift_return
name|retval
init|=
operator|new
name|JavascriptParser
operator|.
name|shift_return
argument_list|()
decl_stmt|;
name|retval
operator|.
name|start
operator|=
name|input
operator|.
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|CommonTree
name|root_0
init|=
literal|null
decl_stmt|;
name|Token
name|set30
init|=
literal|null
decl_stmt|;
name|ParserRuleReturnScope
name|additive29
init|=
literal|null
decl_stmt|;
name|ParserRuleReturnScope
name|additive31
init|=
literal|null
decl_stmt|;
name|CommonTree
name|set30_tree
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:287:5: ( additive ( ( AT_BIT_SHL | AT_BIT_SHR | AT_BIT_SHU ) ^ additive )* )
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:287:7: additive ( ( AT_BIT_SHL | AT_BIT_SHR | AT_BIT_SHU ) ^ additive )*
block|{
name|root_0
operator|=
operator|(
name|CommonTree
operator|)
name|adaptor
operator|.
name|nil
argument_list|()
expr_stmt|;
name|pushFollow
argument_list|(
name|FOLLOW_additive_in_shift983
argument_list|)
expr_stmt|;
name|additive29
operator|=
name|additive
argument_list|()
expr_stmt|;
name|state
operator|.
name|_fsp
operator|--
expr_stmt|;
name|adaptor
operator|.
name|addChild
argument_list|(
name|root_0
argument_list|,
name|additive29
operator|.
name|getTree
argument_list|()
argument_list|)
expr_stmt|;
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:287:16: ( ( AT_BIT_SHL | AT_BIT_SHR | AT_BIT_SHU ) ^ additive )*
name|loop9
label|:
while|while
condition|(
literal|true
condition|)
block|{
name|int
name|alt9
init|=
literal|2
decl_stmt|;
name|int
name|LA9_0
init|=
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|LA9_0
operator|>=
name|AT_BIT_SHL
operator|&&
name|LA9_0
operator|<=
name|AT_BIT_SHU
operator|)
operator|)
condition|)
block|{
name|alt9
operator|=
literal|1
expr_stmt|;
block|}
switch|switch
condition|(
name|alt9
condition|)
block|{
case|case
literal|1
case|:
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:287:17: ( AT_BIT_SHL | AT_BIT_SHR | AT_BIT_SHU ) ^ additive
block|{
name|set30
operator|=
name|input
operator|.
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|set30
operator|=
name|input
operator|.
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
operator|>=
name|AT_BIT_SHL
operator|&&
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
operator|<=
name|AT_BIT_SHU
operator|)
condition|)
block|{
name|input
operator|.
name|consume
argument_list|()
expr_stmt|;
name|root_0
operator|=
operator|(
name|CommonTree
operator|)
name|adaptor
operator|.
name|becomeRoot
argument_list|(
operator|(
name|CommonTree
operator|)
name|adaptor
operator|.
name|create
argument_list|(
name|set30
argument_list|)
argument_list|,
name|root_0
argument_list|)
expr_stmt|;
name|state
operator|.
name|errorRecovery
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|MismatchedSetException
name|mse
init|=
operator|new
name|MismatchedSetException
argument_list|(
literal|null
argument_list|,
name|input
argument_list|)
decl_stmt|;
throw|throw
name|mse
throw|;
block|}
name|pushFollow
argument_list|(
name|FOLLOW_additive_in_shift999
argument_list|)
expr_stmt|;
name|additive31
operator|=
name|additive
argument_list|()
expr_stmt|;
name|state
operator|.
name|_fsp
operator|--
expr_stmt|;
name|adaptor
operator|.
name|addChild
argument_list|(
name|root_0
argument_list|,
name|additive31
operator|.
name|getTree
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
default|default :
break|break
name|loop9
break|;
block|}
block|}
block|}
name|retval
operator|.
name|stop
operator|=
name|input
operator|.
name|LT
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|retval
operator|.
name|tree
operator|=
operator|(
name|CommonTree
operator|)
name|adaptor
operator|.
name|rulePostProcessing
argument_list|(
name|root_0
argument_list|)
expr_stmt|;
name|adaptor
operator|.
name|setTokenBoundaries
argument_list|(
name|retval
operator|.
name|tree
argument_list|,
name|retval
operator|.
name|start
argument_list|,
name|retval
operator|.
name|stop
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|re
parameter_list|)
block|{
name|reportError
argument_list|(
name|re
argument_list|)
expr_stmt|;
name|recover
argument_list|(
name|input
argument_list|,
name|re
argument_list|)
expr_stmt|;
name|retval
operator|.
name|tree
operator|=
operator|(
name|CommonTree
operator|)
name|adaptor
operator|.
name|errorNode
argument_list|(
name|input
argument_list|,
name|retval
operator|.
name|start
argument_list|,
name|input
operator|.
name|LT
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|,
name|re
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// do for sure before leaving
block|}
return|return
name|retval
return|;
block|}
comment|// $ANTLR end "shift"
DECL|class|additive_return
specifier|public
specifier|static
class|class
name|additive_return
extends|extends
name|ParserRuleReturnScope
block|{
DECL|field|tree
name|CommonTree
name|tree
decl_stmt|;
annotation|@
name|Override
DECL|method|getTree
specifier|public
name|CommonTree
name|getTree
parameter_list|()
block|{
return|return
name|tree
return|;
block|}
block|}
empty_stmt|;
comment|// $ANTLR start "additive"
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:290:1: additive : multiplicative ( ( AT_ADD | AT_SUBTRACT ) ^ multiplicative )* ;
DECL|method|additive
specifier|public
specifier|final
name|JavascriptParser
operator|.
name|additive_return
name|additive
parameter_list|()
throws|throws
name|RecognitionException
block|{
name|JavascriptParser
operator|.
name|additive_return
name|retval
init|=
operator|new
name|JavascriptParser
operator|.
name|additive_return
argument_list|()
decl_stmt|;
name|retval
operator|.
name|start
operator|=
name|input
operator|.
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|CommonTree
name|root_0
init|=
literal|null
decl_stmt|;
name|Token
name|set33
init|=
literal|null
decl_stmt|;
name|ParserRuleReturnScope
name|multiplicative32
init|=
literal|null
decl_stmt|;
name|ParserRuleReturnScope
name|multiplicative34
init|=
literal|null
decl_stmt|;
name|CommonTree
name|set33_tree
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:291:5: ( multiplicative ( ( AT_ADD | AT_SUBTRACT ) ^ multiplicative )* )
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:291:7: multiplicative ( ( AT_ADD | AT_SUBTRACT ) ^ multiplicative )*
block|{
name|root_0
operator|=
operator|(
name|CommonTree
operator|)
name|adaptor
operator|.
name|nil
argument_list|()
expr_stmt|;
name|pushFollow
argument_list|(
name|FOLLOW_multiplicative_in_additive1018
argument_list|)
expr_stmt|;
name|multiplicative32
operator|=
name|multiplicative
argument_list|()
expr_stmt|;
name|state
operator|.
name|_fsp
operator|--
expr_stmt|;
name|adaptor
operator|.
name|addChild
argument_list|(
name|root_0
argument_list|,
name|multiplicative32
operator|.
name|getTree
argument_list|()
argument_list|)
expr_stmt|;
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:291:22: ( ( AT_ADD | AT_SUBTRACT ) ^ multiplicative )*
name|loop10
label|:
while|while
condition|(
literal|true
condition|)
block|{
name|int
name|alt10
init|=
literal|2
decl_stmt|;
name|int
name|LA10_0
init|=
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA10_0
operator|==
name|AT_ADD
operator|||
name|LA10_0
operator|==
name|AT_SUBTRACT
operator|)
condition|)
block|{
name|alt10
operator|=
literal|1
expr_stmt|;
block|}
switch|switch
condition|(
name|alt10
condition|)
block|{
case|case
literal|1
case|:
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:291:23: ( AT_ADD | AT_SUBTRACT ) ^ multiplicative
block|{
name|set33
operator|=
name|input
operator|.
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|set33
operator|=
name|input
operator|.
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|AT_ADD
operator|||
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|AT_SUBTRACT
condition|)
block|{
name|input
operator|.
name|consume
argument_list|()
expr_stmt|;
name|root_0
operator|=
operator|(
name|CommonTree
operator|)
name|adaptor
operator|.
name|becomeRoot
argument_list|(
operator|(
name|CommonTree
operator|)
name|adaptor
operator|.
name|create
argument_list|(
name|set33
argument_list|)
argument_list|,
name|root_0
argument_list|)
expr_stmt|;
name|state
operator|.
name|errorRecovery
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|MismatchedSetException
name|mse
init|=
operator|new
name|MismatchedSetException
argument_list|(
literal|null
argument_list|,
name|input
argument_list|)
decl_stmt|;
throw|throw
name|mse
throw|;
block|}
name|pushFollow
argument_list|(
name|FOLLOW_multiplicative_in_additive1030
argument_list|)
expr_stmt|;
name|multiplicative34
operator|=
name|multiplicative
argument_list|()
expr_stmt|;
name|state
operator|.
name|_fsp
operator|--
expr_stmt|;
name|adaptor
operator|.
name|addChild
argument_list|(
name|root_0
argument_list|,
name|multiplicative34
operator|.
name|getTree
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
default|default :
break|break
name|loop10
break|;
block|}
block|}
block|}
name|retval
operator|.
name|stop
operator|=
name|input
operator|.
name|LT
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|retval
operator|.
name|tree
operator|=
operator|(
name|CommonTree
operator|)
name|adaptor
operator|.
name|rulePostProcessing
argument_list|(
name|root_0
argument_list|)
expr_stmt|;
name|adaptor
operator|.
name|setTokenBoundaries
argument_list|(
name|retval
operator|.
name|tree
argument_list|,
name|retval
operator|.
name|start
argument_list|,
name|retval
operator|.
name|stop
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|re
parameter_list|)
block|{
name|reportError
argument_list|(
name|re
argument_list|)
expr_stmt|;
name|recover
argument_list|(
name|input
argument_list|,
name|re
argument_list|)
expr_stmt|;
name|retval
operator|.
name|tree
operator|=
operator|(
name|CommonTree
operator|)
name|adaptor
operator|.
name|errorNode
argument_list|(
name|input
argument_list|,
name|retval
operator|.
name|start
argument_list|,
name|input
operator|.
name|LT
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|,
name|re
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// do for sure before leaving
block|}
return|return
name|retval
return|;
block|}
comment|// $ANTLR end "additive"
DECL|class|multiplicative_return
specifier|public
specifier|static
class|class
name|multiplicative_return
extends|extends
name|ParserRuleReturnScope
block|{
DECL|field|tree
name|CommonTree
name|tree
decl_stmt|;
annotation|@
name|Override
DECL|method|getTree
specifier|public
name|CommonTree
name|getTree
parameter_list|()
block|{
return|return
name|tree
return|;
block|}
block|}
empty_stmt|;
comment|// $ANTLR start "multiplicative"
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:294:1: multiplicative : unary ( ( AT_MULTIPLY | AT_DIVIDE | AT_MODULO ) ^ unary )* ;
DECL|method|multiplicative
specifier|public
specifier|final
name|JavascriptParser
operator|.
name|multiplicative_return
name|multiplicative
parameter_list|()
throws|throws
name|RecognitionException
block|{
name|JavascriptParser
operator|.
name|multiplicative_return
name|retval
init|=
operator|new
name|JavascriptParser
operator|.
name|multiplicative_return
argument_list|()
decl_stmt|;
name|retval
operator|.
name|start
operator|=
name|input
operator|.
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|CommonTree
name|root_0
init|=
literal|null
decl_stmt|;
name|Token
name|set36
init|=
literal|null
decl_stmt|;
name|ParserRuleReturnScope
name|unary35
init|=
literal|null
decl_stmt|;
name|ParserRuleReturnScope
name|unary37
init|=
literal|null
decl_stmt|;
name|CommonTree
name|set36_tree
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:295:5: ( unary ( ( AT_MULTIPLY | AT_DIVIDE | AT_MODULO ) ^ unary )* )
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:295:7: unary ( ( AT_MULTIPLY | AT_DIVIDE | AT_MODULO ) ^ unary )*
block|{
name|root_0
operator|=
operator|(
name|CommonTree
operator|)
name|adaptor
operator|.
name|nil
argument_list|()
expr_stmt|;
name|pushFollow
argument_list|(
name|FOLLOW_unary_in_multiplicative1049
argument_list|)
expr_stmt|;
name|unary35
operator|=
name|unary
argument_list|()
expr_stmt|;
name|state
operator|.
name|_fsp
operator|--
expr_stmt|;
name|adaptor
operator|.
name|addChild
argument_list|(
name|root_0
argument_list|,
name|unary35
operator|.
name|getTree
argument_list|()
argument_list|)
expr_stmt|;
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:295:13: ( ( AT_MULTIPLY | AT_DIVIDE | AT_MODULO ) ^ unary )*
name|loop11
label|:
while|while
condition|(
literal|true
condition|)
block|{
name|int
name|alt11
init|=
literal|2
decl_stmt|;
name|int
name|LA11_0
init|=
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA11_0
operator|==
name|AT_DIVIDE
operator|||
operator|(
name|LA11_0
operator|>=
name|AT_MODULO
operator|&&
name|LA11_0
operator|<=
name|AT_MULTIPLY
operator|)
operator|)
condition|)
block|{
name|alt11
operator|=
literal|1
expr_stmt|;
block|}
switch|switch
condition|(
name|alt11
condition|)
block|{
case|case
literal|1
case|:
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:295:14: ( AT_MULTIPLY | AT_DIVIDE | AT_MODULO ) ^ unary
block|{
name|set36
operator|=
name|input
operator|.
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|set36
operator|=
name|input
operator|.
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|AT_DIVIDE
operator|||
operator|(
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
operator|>=
name|AT_MODULO
operator|&&
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
operator|<=
name|AT_MULTIPLY
operator|)
condition|)
block|{
name|input
operator|.
name|consume
argument_list|()
expr_stmt|;
name|root_0
operator|=
operator|(
name|CommonTree
operator|)
name|adaptor
operator|.
name|becomeRoot
argument_list|(
operator|(
name|CommonTree
operator|)
name|adaptor
operator|.
name|create
argument_list|(
name|set36
argument_list|)
argument_list|,
name|root_0
argument_list|)
expr_stmt|;
name|state
operator|.
name|errorRecovery
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|MismatchedSetException
name|mse
init|=
operator|new
name|MismatchedSetException
argument_list|(
literal|null
argument_list|,
name|input
argument_list|)
decl_stmt|;
throw|throw
name|mse
throw|;
block|}
name|pushFollow
argument_list|(
name|FOLLOW_unary_in_multiplicative1065
argument_list|)
expr_stmt|;
name|unary37
operator|=
name|unary
argument_list|()
expr_stmt|;
name|state
operator|.
name|_fsp
operator|--
expr_stmt|;
name|adaptor
operator|.
name|addChild
argument_list|(
name|root_0
argument_list|,
name|unary37
operator|.
name|getTree
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
default|default :
break|break
name|loop11
break|;
block|}
block|}
block|}
name|retval
operator|.
name|stop
operator|=
name|input
operator|.
name|LT
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|retval
operator|.
name|tree
operator|=
operator|(
name|CommonTree
operator|)
name|adaptor
operator|.
name|rulePostProcessing
argument_list|(
name|root_0
argument_list|)
expr_stmt|;
name|adaptor
operator|.
name|setTokenBoundaries
argument_list|(
name|retval
operator|.
name|tree
argument_list|,
name|retval
operator|.
name|start
argument_list|,
name|retval
operator|.
name|stop
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|re
parameter_list|)
block|{
name|reportError
argument_list|(
name|re
argument_list|)
expr_stmt|;
name|recover
argument_list|(
name|input
argument_list|,
name|re
argument_list|)
expr_stmt|;
name|retval
operator|.
name|tree
operator|=
operator|(
name|CommonTree
operator|)
name|adaptor
operator|.
name|errorNode
argument_list|(
name|input
argument_list|,
name|retval
operator|.
name|start
argument_list|,
name|input
operator|.
name|LT
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|,
name|re
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// do for sure before leaving
block|}
return|return
name|retval
return|;
block|}
comment|// $ANTLR end "multiplicative"
DECL|class|unary_return
specifier|public
specifier|static
class|class
name|unary_return
extends|extends
name|ParserRuleReturnScope
block|{
DECL|field|tree
name|CommonTree
name|tree
decl_stmt|;
annotation|@
name|Override
DECL|method|getTree
specifier|public
name|CommonTree
name|getTree
parameter_list|()
block|{
return|return
name|tree
return|;
block|}
block|}
empty_stmt|;
comment|// $ANTLR start "unary"
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:298:1: unary : ( postfix | AT_ADD ! unary | unary_operator ^ unary );
DECL|method|unary
specifier|public
specifier|final
name|JavascriptParser
operator|.
name|unary_return
name|unary
parameter_list|()
throws|throws
name|RecognitionException
block|{
name|JavascriptParser
operator|.
name|unary_return
name|retval
init|=
operator|new
name|JavascriptParser
operator|.
name|unary_return
argument_list|()
decl_stmt|;
name|retval
operator|.
name|start
operator|=
name|input
operator|.
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|CommonTree
name|root_0
init|=
literal|null
decl_stmt|;
name|Token
name|AT_ADD39
init|=
literal|null
decl_stmt|;
name|ParserRuleReturnScope
name|postfix38
init|=
literal|null
decl_stmt|;
name|ParserRuleReturnScope
name|unary40
init|=
literal|null
decl_stmt|;
name|ParserRuleReturnScope
name|unary_operator41
init|=
literal|null
decl_stmt|;
name|ParserRuleReturnScope
name|unary42
init|=
literal|null
decl_stmt|;
name|CommonTree
name|AT_ADD39_tree
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:299:5: ( postfix | AT_ADD ! unary | unary_operator ^ unary )
name|int
name|alt12
init|=
literal|3
decl_stmt|;
switch|switch
condition|(
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|AT_LPAREN
case|:
case|case
name|DECIMAL
case|:
case|case
name|HEX
case|:
case|case
name|NAMESPACE_ID
case|:
case|case
name|OCTAL
case|:
block|{
name|alt12
operator|=
literal|1
expr_stmt|;
block|}
break|break;
case|case
name|AT_ADD
case|:
block|{
name|alt12
operator|=
literal|2
expr_stmt|;
block|}
break|break;
case|case
name|AT_BIT_NOT
case|:
case|case
name|AT_BOOL_NOT
case|:
case|case
name|AT_SUBTRACT
case|:
block|{
name|alt12
operator|=
literal|3
expr_stmt|;
block|}
break|break;
default|default:
name|NoViableAltException
name|nvae
init|=
operator|new
name|NoViableAltException
argument_list|(
literal|""
argument_list|,
literal|12
argument_list|,
literal|0
argument_list|,
name|input
argument_list|)
decl_stmt|;
throw|throw
name|nvae
throw|;
block|}
switch|switch
condition|(
name|alt12
condition|)
block|{
case|case
literal|1
case|:
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:299:7: postfix
block|{
name|root_0
operator|=
operator|(
name|CommonTree
operator|)
name|adaptor
operator|.
name|nil
argument_list|()
expr_stmt|;
name|pushFollow
argument_list|(
name|FOLLOW_postfix_in_unary1084
argument_list|)
expr_stmt|;
name|postfix38
operator|=
name|postfix
argument_list|()
expr_stmt|;
name|state
operator|.
name|_fsp
operator|--
expr_stmt|;
name|adaptor
operator|.
name|addChild
argument_list|(
name|root_0
argument_list|,
name|postfix38
operator|.
name|getTree
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:300:7: AT_ADD ! unary
block|{
name|root_0
operator|=
operator|(
name|CommonTree
operator|)
name|adaptor
operator|.
name|nil
argument_list|()
expr_stmt|;
name|AT_ADD39
operator|=
operator|(
name|Token
operator|)
name|match
argument_list|(
name|input
argument_list|,
name|AT_ADD
argument_list|,
name|FOLLOW_AT_ADD_in_unary1092
argument_list|)
expr_stmt|;
name|pushFollow
argument_list|(
name|FOLLOW_unary_in_unary1095
argument_list|)
expr_stmt|;
name|unary40
operator|=
name|unary
argument_list|()
expr_stmt|;
name|state
operator|.
name|_fsp
operator|--
expr_stmt|;
name|adaptor
operator|.
name|addChild
argument_list|(
name|root_0
argument_list|,
name|unary40
operator|.
name|getTree
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|3
case|:
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:301:7: unary_operator ^ unary
block|{
name|root_0
operator|=
operator|(
name|CommonTree
operator|)
name|adaptor
operator|.
name|nil
argument_list|()
expr_stmt|;
name|pushFollow
argument_list|(
name|FOLLOW_unary_operator_in_unary1103
argument_list|)
expr_stmt|;
name|unary_operator41
operator|=
name|unary_operator
argument_list|()
expr_stmt|;
name|state
operator|.
name|_fsp
operator|--
expr_stmt|;
name|root_0
operator|=
operator|(
name|CommonTree
operator|)
name|adaptor
operator|.
name|becomeRoot
argument_list|(
name|unary_operator41
operator|.
name|getTree
argument_list|()
argument_list|,
name|root_0
argument_list|)
expr_stmt|;
name|pushFollow
argument_list|(
name|FOLLOW_unary_in_unary1106
argument_list|)
expr_stmt|;
name|unary42
operator|=
name|unary
argument_list|()
expr_stmt|;
name|state
operator|.
name|_fsp
operator|--
expr_stmt|;
name|adaptor
operator|.
name|addChild
argument_list|(
name|root_0
argument_list|,
name|unary42
operator|.
name|getTree
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
name|retval
operator|.
name|stop
operator|=
name|input
operator|.
name|LT
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|retval
operator|.
name|tree
operator|=
operator|(
name|CommonTree
operator|)
name|adaptor
operator|.
name|rulePostProcessing
argument_list|(
name|root_0
argument_list|)
expr_stmt|;
name|adaptor
operator|.
name|setTokenBoundaries
argument_list|(
name|retval
operator|.
name|tree
argument_list|,
name|retval
operator|.
name|start
argument_list|,
name|retval
operator|.
name|stop
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|re
parameter_list|)
block|{
name|reportError
argument_list|(
name|re
argument_list|)
expr_stmt|;
name|recover
argument_list|(
name|input
argument_list|,
name|re
argument_list|)
expr_stmt|;
name|retval
operator|.
name|tree
operator|=
operator|(
name|CommonTree
operator|)
name|adaptor
operator|.
name|errorNode
argument_list|(
name|input
argument_list|,
name|retval
operator|.
name|start
argument_list|,
name|input
operator|.
name|LT
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|,
name|re
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// do for sure before leaving
block|}
return|return
name|retval
return|;
block|}
comment|// $ANTLR end "unary"
DECL|class|unary_operator_return
specifier|public
specifier|static
class|class
name|unary_operator_return
extends|extends
name|ParserRuleReturnScope
block|{
DECL|field|tree
name|CommonTree
name|tree
decl_stmt|;
annotation|@
name|Override
DECL|method|getTree
specifier|public
name|CommonTree
name|getTree
parameter_list|()
block|{
return|return
name|tree
return|;
block|}
block|}
empty_stmt|;
comment|// $ANTLR start "unary_operator"
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:304:1: unary_operator : ( AT_SUBTRACT -> AT_NEGATE | AT_BIT_NOT | AT_BOOL_NOT );
DECL|method|unary_operator
specifier|public
specifier|final
name|JavascriptParser
operator|.
name|unary_operator_return
name|unary_operator
parameter_list|()
throws|throws
name|RecognitionException
block|{
name|JavascriptParser
operator|.
name|unary_operator_return
name|retval
init|=
operator|new
name|JavascriptParser
operator|.
name|unary_operator_return
argument_list|()
decl_stmt|;
name|retval
operator|.
name|start
operator|=
name|input
operator|.
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|CommonTree
name|root_0
init|=
literal|null
decl_stmt|;
name|Token
name|AT_SUBTRACT43
init|=
literal|null
decl_stmt|;
name|Token
name|AT_BIT_NOT44
init|=
literal|null
decl_stmt|;
name|Token
name|AT_BOOL_NOT45
init|=
literal|null
decl_stmt|;
name|CommonTree
name|AT_SUBTRACT43_tree
init|=
literal|null
decl_stmt|;
name|CommonTree
name|AT_BIT_NOT44_tree
init|=
literal|null
decl_stmt|;
name|CommonTree
name|AT_BOOL_NOT45_tree
init|=
literal|null
decl_stmt|;
name|RewriteRuleTokenStream
name|stream_AT_SUBTRACT
init|=
operator|new
name|RewriteRuleTokenStream
argument_list|(
name|adaptor
argument_list|,
literal|"token AT_SUBTRACT"
argument_list|)
decl_stmt|;
try|try
block|{
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:305:5: ( AT_SUBTRACT -> AT_NEGATE | AT_BIT_NOT | AT_BOOL_NOT )
name|int
name|alt13
init|=
literal|3
decl_stmt|;
switch|switch
condition|(
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|AT_SUBTRACT
case|:
block|{
name|alt13
operator|=
literal|1
expr_stmt|;
block|}
break|break;
case|case
name|AT_BIT_NOT
case|:
block|{
name|alt13
operator|=
literal|2
expr_stmt|;
block|}
break|break;
case|case
name|AT_BOOL_NOT
case|:
block|{
name|alt13
operator|=
literal|3
expr_stmt|;
block|}
break|break;
default|default:
name|NoViableAltException
name|nvae
init|=
operator|new
name|NoViableAltException
argument_list|(
literal|""
argument_list|,
literal|13
argument_list|,
literal|0
argument_list|,
name|input
argument_list|)
decl_stmt|;
throw|throw
name|nvae
throw|;
block|}
switch|switch
condition|(
name|alt13
condition|)
block|{
case|case
literal|1
case|:
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:305:7: AT_SUBTRACT
block|{
name|AT_SUBTRACT43
operator|=
operator|(
name|Token
operator|)
name|match
argument_list|(
name|input
argument_list|,
name|AT_SUBTRACT
argument_list|,
name|FOLLOW_AT_SUBTRACT_in_unary_operator1123
argument_list|)
expr_stmt|;
name|stream_AT_SUBTRACT
operator|.
name|add
argument_list|(
name|AT_SUBTRACT43
argument_list|)
expr_stmt|;
comment|// AST REWRITE
comment|// elements:
comment|// token labels:
comment|// rule labels: retval
comment|// token list labels:
comment|// rule list labels:
comment|// wildcard labels:
name|retval
operator|.
name|tree
operator|=
name|root_0
expr_stmt|;
name|RewriteRuleSubtreeStream
name|stream_retval
init|=
operator|new
name|RewriteRuleSubtreeStream
argument_list|(
name|adaptor
argument_list|,
literal|"rule retval"
argument_list|,
name|retval
operator|!=
literal|null
condition|?
name|retval
operator|.
name|getTree
argument_list|()
else|:
literal|null
argument_list|)
decl_stmt|;
name|root_0
operator|=
operator|(
name|CommonTree
operator|)
name|adaptor
operator|.
name|nil
argument_list|()
expr_stmt|;
comment|// 305:19: -> AT_NEGATE
block|{
name|adaptor
operator|.
name|addChild
argument_list|(
name|root_0
argument_list|,
operator|(
name|CommonTree
operator|)
name|adaptor
operator|.
name|create
argument_list|(
name|AT_NEGATE
argument_list|,
literal|"AT_NEGATE"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|retval
operator|.
name|tree
operator|=
name|root_0
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:306:7: AT_BIT_NOT
block|{
name|root_0
operator|=
operator|(
name|CommonTree
operator|)
name|adaptor
operator|.
name|nil
argument_list|()
expr_stmt|;
name|AT_BIT_NOT44
operator|=
operator|(
name|Token
operator|)
name|match
argument_list|(
name|input
argument_list|,
name|AT_BIT_NOT
argument_list|,
name|FOLLOW_AT_BIT_NOT_in_unary_operator1135
argument_list|)
expr_stmt|;
name|AT_BIT_NOT44_tree
operator|=
operator|(
name|CommonTree
operator|)
name|adaptor
operator|.
name|create
argument_list|(
name|AT_BIT_NOT44
argument_list|)
expr_stmt|;
name|adaptor
operator|.
name|addChild
argument_list|(
name|root_0
argument_list|,
name|AT_BIT_NOT44_tree
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|3
case|:
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:307:7: AT_BOOL_NOT
block|{
name|root_0
operator|=
operator|(
name|CommonTree
operator|)
name|adaptor
operator|.
name|nil
argument_list|()
expr_stmt|;
name|AT_BOOL_NOT45
operator|=
operator|(
name|Token
operator|)
name|match
argument_list|(
name|input
argument_list|,
name|AT_BOOL_NOT
argument_list|,
name|FOLLOW_AT_BOOL_NOT_in_unary_operator1143
argument_list|)
expr_stmt|;
name|AT_BOOL_NOT45_tree
operator|=
operator|(
name|CommonTree
operator|)
name|adaptor
operator|.
name|create
argument_list|(
name|AT_BOOL_NOT45
argument_list|)
expr_stmt|;
name|adaptor
operator|.
name|addChild
argument_list|(
name|root_0
argument_list|,
name|AT_BOOL_NOT45_tree
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
name|retval
operator|.
name|stop
operator|=
name|input
operator|.
name|LT
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|retval
operator|.
name|tree
operator|=
operator|(
name|CommonTree
operator|)
name|adaptor
operator|.
name|rulePostProcessing
argument_list|(
name|root_0
argument_list|)
expr_stmt|;
name|adaptor
operator|.
name|setTokenBoundaries
argument_list|(
name|retval
operator|.
name|tree
argument_list|,
name|retval
operator|.
name|start
argument_list|,
name|retval
operator|.
name|stop
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|re
parameter_list|)
block|{
name|reportError
argument_list|(
name|re
argument_list|)
expr_stmt|;
name|recover
argument_list|(
name|input
argument_list|,
name|re
argument_list|)
expr_stmt|;
name|retval
operator|.
name|tree
operator|=
operator|(
name|CommonTree
operator|)
name|adaptor
operator|.
name|errorNode
argument_list|(
name|input
argument_list|,
name|retval
operator|.
name|start
argument_list|,
name|input
operator|.
name|LT
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|,
name|re
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// do for sure before leaving
block|}
return|return
name|retval
return|;
block|}
comment|// $ANTLR end "unary_operator"
DECL|class|postfix_return
specifier|public
specifier|static
class|class
name|postfix_return
extends|extends
name|ParserRuleReturnScope
block|{
DECL|field|tree
name|CommonTree
name|tree
decl_stmt|;
annotation|@
name|Override
DECL|method|getTree
specifier|public
name|CommonTree
name|getTree
parameter_list|()
block|{
return|return
name|tree
return|;
block|}
block|}
empty_stmt|;
comment|// $ANTLR start "postfix"
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:310:1: postfix : ( primary | NAMESPACE_ID arguments -> ^( AT_CALL NAMESPACE_ID ( arguments )? ) );
DECL|method|postfix
specifier|public
specifier|final
name|JavascriptParser
operator|.
name|postfix_return
name|postfix
parameter_list|()
throws|throws
name|RecognitionException
block|{
name|JavascriptParser
operator|.
name|postfix_return
name|retval
init|=
operator|new
name|JavascriptParser
operator|.
name|postfix_return
argument_list|()
decl_stmt|;
name|retval
operator|.
name|start
operator|=
name|input
operator|.
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|CommonTree
name|root_0
init|=
literal|null
decl_stmt|;
name|Token
name|NAMESPACE_ID47
init|=
literal|null
decl_stmt|;
name|ParserRuleReturnScope
name|primary46
init|=
literal|null
decl_stmt|;
name|ParserRuleReturnScope
name|arguments48
init|=
literal|null
decl_stmt|;
name|CommonTree
name|NAMESPACE_ID47_tree
init|=
literal|null
decl_stmt|;
name|RewriteRuleTokenStream
name|stream_NAMESPACE_ID
init|=
operator|new
name|RewriteRuleTokenStream
argument_list|(
name|adaptor
argument_list|,
literal|"token NAMESPACE_ID"
argument_list|)
decl_stmt|;
name|RewriteRuleSubtreeStream
name|stream_arguments
init|=
operator|new
name|RewriteRuleSubtreeStream
argument_list|(
name|adaptor
argument_list|,
literal|"rule arguments"
argument_list|)
decl_stmt|;
try|try
block|{
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:311:5: ( primary | NAMESPACE_ID arguments -> ^( AT_CALL NAMESPACE_ID ( arguments )? ) )
name|int
name|alt14
init|=
literal|2
decl_stmt|;
name|int
name|LA14_0
init|=
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA14_0
operator|==
name|NAMESPACE_ID
operator|)
condition|)
block|{
name|int
name|LA14_1
init|=
name|input
operator|.
name|LA
argument_list|(
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA14_1
operator|==
name|EOF
operator|||
operator|(
name|LA14_1
operator|>=
name|AT_ADD
operator|&&
name|LA14_1
operator|<=
name|AT_BIT_AND
operator|)
operator|||
operator|(
name|LA14_1
operator|>=
name|AT_BIT_OR
operator|&&
name|LA14_1
operator|<=
name|AT_BOOL_AND
operator|)
operator|||
name|LA14_1
operator|==
name|AT_BOOL_OR
operator|||
operator|(
name|LA14_1
operator|>=
name|AT_COLON
operator|&&
name|LA14_1
operator|<=
name|AT_DIVIDE
operator|)
operator|||
operator|(
name|LA14_1
operator|>=
name|AT_MODULO
operator|&&
name|LA14_1
operator|<=
name|AT_MULTIPLY
operator|)
operator|||
operator|(
name|LA14_1
operator|>=
name|AT_RPAREN
operator|&&
name|LA14_1
operator|<=
name|AT_SUBTRACT
operator|)
operator|)
condition|)
block|{
name|alt14
operator|=
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|LA14_1
operator|==
name|AT_LPAREN
operator|)
condition|)
block|{
name|alt14
operator|=
literal|2
expr_stmt|;
block|}
else|else
block|{
name|int
name|nvaeMark
init|=
name|input
operator|.
name|mark
argument_list|()
decl_stmt|;
try|try
block|{
name|input
operator|.
name|consume
argument_list|()
expr_stmt|;
name|NoViableAltException
name|nvae
init|=
operator|new
name|NoViableAltException
argument_list|(
literal|""
argument_list|,
literal|14
argument_list|,
literal|1
argument_list|,
name|input
argument_list|)
decl_stmt|;
throw|throw
name|nvae
throw|;
block|}
finally|finally
block|{
name|input
operator|.
name|rewind
argument_list|(
name|nvaeMark
argument_list|)
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
operator|(
name|LA14_0
operator|==
name|AT_LPAREN
operator|||
name|LA14_0
operator|==
name|DECIMAL
operator|||
name|LA14_0
operator|==
name|HEX
operator|||
name|LA14_0
operator|==
name|OCTAL
operator|)
condition|)
block|{
name|alt14
operator|=
literal|1
expr_stmt|;
block|}
else|else
block|{
name|NoViableAltException
name|nvae
init|=
operator|new
name|NoViableAltException
argument_list|(
literal|""
argument_list|,
literal|14
argument_list|,
literal|0
argument_list|,
name|input
argument_list|)
decl_stmt|;
throw|throw
name|nvae
throw|;
block|}
switch|switch
condition|(
name|alt14
condition|)
block|{
case|case
literal|1
case|:
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:311:7: primary
block|{
name|root_0
operator|=
operator|(
name|CommonTree
operator|)
name|adaptor
operator|.
name|nil
argument_list|()
expr_stmt|;
name|pushFollow
argument_list|(
name|FOLLOW_primary_in_postfix1160
argument_list|)
expr_stmt|;
name|primary46
operator|=
name|primary
argument_list|()
expr_stmt|;
name|state
operator|.
name|_fsp
operator|--
expr_stmt|;
name|adaptor
operator|.
name|addChild
argument_list|(
name|root_0
argument_list|,
name|primary46
operator|.
name|getTree
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:312:7: NAMESPACE_ID arguments
block|{
name|NAMESPACE_ID47
operator|=
operator|(
name|Token
operator|)
name|match
argument_list|(
name|input
argument_list|,
name|NAMESPACE_ID
argument_list|,
name|FOLLOW_NAMESPACE_ID_in_postfix1168
argument_list|)
expr_stmt|;
name|stream_NAMESPACE_ID
operator|.
name|add
argument_list|(
name|NAMESPACE_ID47
argument_list|)
expr_stmt|;
name|pushFollow
argument_list|(
name|FOLLOW_arguments_in_postfix1170
argument_list|)
expr_stmt|;
name|arguments48
operator|=
name|arguments
argument_list|()
expr_stmt|;
name|state
operator|.
name|_fsp
operator|--
expr_stmt|;
name|stream_arguments
operator|.
name|add
argument_list|(
name|arguments48
operator|.
name|getTree
argument_list|()
argument_list|)
expr_stmt|;
comment|// AST REWRITE
comment|// elements: arguments, NAMESPACE_ID
comment|// token labels:
comment|// rule labels: retval
comment|// token list labels:
comment|// rule list labels:
comment|// wildcard labels:
name|retval
operator|.
name|tree
operator|=
name|root_0
expr_stmt|;
name|RewriteRuleSubtreeStream
name|stream_retval
init|=
operator|new
name|RewriteRuleSubtreeStream
argument_list|(
name|adaptor
argument_list|,
literal|"rule retval"
argument_list|,
name|retval
operator|!=
literal|null
condition|?
name|retval
operator|.
name|getTree
argument_list|()
else|:
literal|null
argument_list|)
decl_stmt|;
name|root_0
operator|=
operator|(
name|CommonTree
operator|)
name|adaptor
operator|.
name|nil
argument_list|()
expr_stmt|;
comment|// 312:30: -> ^( AT_CALL NAMESPACE_ID ( arguments )? )
block|{
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:312:33: ^( AT_CALL NAMESPACE_ID ( arguments )? )
block|{
name|CommonTree
name|root_1
init|=
operator|(
name|CommonTree
operator|)
name|adaptor
operator|.
name|nil
argument_list|()
decl_stmt|;
name|root_1
operator|=
operator|(
name|CommonTree
operator|)
name|adaptor
operator|.
name|becomeRoot
argument_list|(
operator|(
name|CommonTree
operator|)
name|adaptor
operator|.
name|create
argument_list|(
name|AT_CALL
argument_list|,
literal|"AT_CALL"
argument_list|)
argument_list|,
name|root_1
argument_list|)
expr_stmt|;
name|adaptor
operator|.
name|addChild
argument_list|(
name|root_1
argument_list|,
name|stream_NAMESPACE_ID
operator|.
name|nextNode
argument_list|()
argument_list|)
expr_stmt|;
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:312:56: ( arguments )?
if|if
condition|(
name|stream_arguments
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|adaptor
operator|.
name|addChild
argument_list|(
name|root_1
argument_list|,
name|stream_arguments
operator|.
name|nextTree
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|stream_arguments
operator|.
name|reset
argument_list|()
expr_stmt|;
name|adaptor
operator|.
name|addChild
argument_list|(
name|root_0
argument_list|,
name|root_1
argument_list|)
expr_stmt|;
block|}
block|}
name|retval
operator|.
name|tree
operator|=
name|root_0
expr_stmt|;
block|}
break|break;
block|}
name|retval
operator|.
name|stop
operator|=
name|input
operator|.
name|LT
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|retval
operator|.
name|tree
operator|=
operator|(
name|CommonTree
operator|)
name|adaptor
operator|.
name|rulePostProcessing
argument_list|(
name|root_0
argument_list|)
expr_stmt|;
name|adaptor
operator|.
name|setTokenBoundaries
argument_list|(
name|retval
operator|.
name|tree
argument_list|,
name|retval
operator|.
name|start
argument_list|,
name|retval
operator|.
name|stop
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|re
parameter_list|)
block|{
name|reportError
argument_list|(
name|re
argument_list|)
expr_stmt|;
name|recover
argument_list|(
name|input
argument_list|,
name|re
argument_list|)
expr_stmt|;
name|retval
operator|.
name|tree
operator|=
operator|(
name|CommonTree
operator|)
name|adaptor
operator|.
name|errorNode
argument_list|(
name|input
argument_list|,
name|retval
operator|.
name|start
argument_list|,
name|input
operator|.
name|LT
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|,
name|re
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// do for sure before leaving
block|}
return|return
name|retval
return|;
block|}
comment|// $ANTLR end "postfix"
DECL|class|primary_return
specifier|public
specifier|static
class|class
name|primary_return
extends|extends
name|ParserRuleReturnScope
block|{
DECL|field|tree
name|CommonTree
name|tree
decl_stmt|;
annotation|@
name|Override
DECL|method|getTree
specifier|public
name|CommonTree
name|getTree
parameter_list|()
block|{
return|return
name|tree
return|;
block|}
block|}
empty_stmt|;
comment|// $ANTLR start "primary"
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:315:1: primary : ( NAMESPACE_ID | numeric | AT_LPAREN ! conditional AT_RPAREN !);
DECL|method|primary
specifier|public
specifier|final
name|JavascriptParser
operator|.
name|primary_return
name|primary
parameter_list|()
throws|throws
name|RecognitionException
block|{
name|JavascriptParser
operator|.
name|primary_return
name|retval
init|=
operator|new
name|JavascriptParser
operator|.
name|primary_return
argument_list|()
decl_stmt|;
name|retval
operator|.
name|start
operator|=
name|input
operator|.
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|CommonTree
name|root_0
init|=
literal|null
decl_stmt|;
name|Token
name|NAMESPACE_ID49
init|=
literal|null
decl_stmt|;
name|Token
name|AT_LPAREN51
init|=
literal|null
decl_stmt|;
name|Token
name|AT_RPAREN53
init|=
literal|null
decl_stmt|;
name|ParserRuleReturnScope
name|numeric50
init|=
literal|null
decl_stmt|;
name|ParserRuleReturnScope
name|conditional52
init|=
literal|null
decl_stmt|;
name|CommonTree
name|NAMESPACE_ID49_tree
init|=
literal|null
decl_stmt|;
name|CommonTree
name|AT_LPAREN51_tree
init|=
literal|null
decl_stmt|;
name|CommonTree
name|AT_RPAREN53_tree
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:316:5: ( NAMESPACE_ID | numeric | AT_LPAREN ! conditional AT_RPAREN !)
name|int
name|alt15
init|=
literal|3
decl_stmt|;
switch|switch
condition|(
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|NAMESPACE_ID
case|:
block|{
name|alt15
operator|=
literal|1
expr_stmt|;
block|}
break|break;
case|case
name|DECIMAL
case|:
case|case
name|HEX
case|:
case|case
name|OCTAL
case|:
block|{
name|alt15
operator|=
literal|2
expr_stmt|;
block|}
break|break;
case|case
name|AT_LPAREN
case|:
block|{
name|alt15
operator|=
literal|3
expr_stmt|;
block|}
break|break;
default|default:
name|NoViableAltException
name|nvae
init|=
operator|new
name|NoViableAltException
argument_list|(
literal|""
argument_list|,
literal|15
argument_list|,
literal|0
argument_list|,
name|input
argument_list|)
decl_stmt|;
throw|throw
name|nvae
throw|;
block|}
switch|switch
condition|(
name|alt15
condition|)
block|{
case|case
literal|1
case|:
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:316:7: NAMESPACE_ID
block|{
name|root_0
operator|=
operator|(
name|CommonTree
operator|)
name|adaptor
operator|.
name|nil
argument_list|()
expr_stmt|;
name|NAMESPACE_ID49
operator|=
operator|(
name|Token
operator|)
name|match
argument_list|(
name|input
argument_list|,
name|NAMESPACE_ID
argument_list|,
name|FOLLOW_NAMESPACE_ID_in_primary1198
argument_list|)
expr_stmt|;
name|NAMESPACE_ID49_tree
operator|=
operator|(
name|CommonTree
operator|)
name|adaptor
operator|.
name|create
argument_list|(
name|NAMESPACE_ID49
argument_list|)
expr_stmt|;
name|adaptor
operator|.
name|addChild
argument_list|(
name|root_0
argument_list|,
name|NAMESPACE_ID49_tree
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:317:7: numeric
block|{
name|root_0
operator|=
operator|(
name|CommonTree
operator|)
name|adaptor
operator|.
name|nil
argument_list|()
expr_stmt|;
name|pushFollow
argument_list|(
name|FOLLOW_numeric_in_primary1206
argument_list|)
expr_stmt|;
name|numeric50
operator|=
name|numeric
argument_list|()
expr_stmt|;
name|state
operator|.
name|_fsp
operator|--
expr_stmt|;
name|adaptor
operator|.
name|addChild
argument_list|(
name|root_0
argument_list|,
name|numeric50
operator|.
name|getTree
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|3
case|:
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:318:7: AT_LPAREN ! conditional AT_RPAREN !
block|{
name|root_0
operator|=
operator|(
name|CommonTree
operator|)
name|adaptor
operator|.
name|nil
argument_list|()
expr_stmt|;
name|AT_LPAREN51
operator|=
operator|(
name|Token
operator|)
name|match
argument_list|(
name|input
argument_list|,
name|AT_LPAREN
argument_list|,
name|FOLLOW_AT_LPAREN_in_primary1214
argument_list|)
expr_stmt|;
name|pushFollow
argument_list|(
name|FOLLOW_conditional_in_primary1217
argument_list|)
expr_stmt|;
name|conditional52
operator|=
name|conditional
argument_list|()
expr_stmt|;
name|state
operator|.
name|_fsp
operator|--
expr_stmt|;
name|adaptor
operator|.
name|addChild
argument_list|(
name|root_0
argument_list|,
name|conditional52
operator|.
name|getTree
argument_list|()
argument_list|)
expr_stmt|;
name|AT_RPAREN53
operator|=
operator|(
name|Token
operator|)
name|match
argument_list|(
name|input
argument_list|,
name|AT_RPAREN
argument_list|,
name|FOLLOW_AT_RPAREN_in_primary1219
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
name|retval
operator|.
name|stop
operator|=
name|input
operator|.
name|LT
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|retval
operator|.
name|tree
operator|=
operator|(
name|CommonTree
operator|)
name|adaptor
operator|.
name|rulePostProcessing
argument_list|(
name|root_0
argument_list|)
expr_stmt|;
name|adaptor
operator|.
name|setTokenBoundaries
argument_list|(
name|retval
operator|.
name|tree
argument_list|,
name|retval
operator|.
name|start
argument_list|,
name|retval
operator|.
name|stop
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|re
parameter_list|)
block|{
name|reportError
argument_list|(
name|re
argument_list|)
expr_stmt|;
name|recover
argument_list|(
name|input
argument_list|,
name|re
argument_list|)
expr_stmt|;
name|retval
operator|.
name|tree
operator|=
operator|(
name|CommonTree
operator|)
name|adaptor
operator|.
name|errorNode
argument_list|(
name|input
argument_list|,
name|retval
operator|.
name|start
argument_list|,
name|input
operator|.
name|LT
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|,
name|re
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// do for sure before leaving
block|}
return|return
name|retval
return|;
block|}
comment|// $ANTLR end "primary"
DECL|class|arguments_return
specifier|public
specifier|static
class|class
name|arguments_return
extends|extends
name|ParserRuleReturnScope
block|{
DECL|field|tree
name|CommonTree
name|tree
decl_stmt|;
annotation|@
name|Override
DECL|method|getTree
specifier|public
name|CommonTree
name|getTree
parameter_list|()
block|{
return|return
name|tree
return|;
block|}
block|}
empty_stmt|;
comment|// $ANTLR start "arguments"
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:321:1: arguments : AT_LPAREN ! ( conditional ( AT_COMMA ! conditional )* )? AT_RPAREN !;
DECL|method|arguments
specifier|public
specifier|final
name|JavascriptParser
operator|.
name|arguments_return
name|arguments
parameter_list|()
throws|throws
name|RecognitionException
block|{
name|JavascriptParser
operator|.
name|arguments_return
name|retval
init|=
operator|new
name|JavascriptParser
operator|.
name|arguments_return
argument_list|()
decl_stmt|;
name|retval
operator|.
name|start
operator|=
name|input
operator|.
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|CommonTree
name|root_0
init|=
literal|null
decl_stmt|;
name|Token
name|AT_LPAREN54
init|=
literal|null
decl_stmt|;
name|Token
name|AT_COMMA56
init|=
literal|null
decl_stmt|;
name|Token
name|AT_RPAREN58
init|=
literal|null
decl_stmt|;
name|ParserRuleReturnScope
name|conditional55
init|=
literal|null
decl_stmt|;
name|ParserRuleReturnScope
name|conditional57
init|=
literal|null
decl_stmt|;
name|CommonTree
name|AT_LPAREN54_tree
init|=
literal|null
decl_stmt|;
name|CommonTree
name|AT_COMMA56_tree
init|=
literal|null
decl_stmt|;
name|CommonTree
name|AT_RPAREN58_tree
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:322:5: ( AT_LPAREN ! ( conditional ( AT_COMMA ! conditional )* )? AT_RPAREN !)
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:322:7: AT_LPAREN ! ( conditional ( AT_COMMA ! conditional )* )? AT_RPAREN !
block|{
name|root_0
operator|=
operator|(
name|CommonTree
operator|)
name|adaptor
operator|.
name|nil
argument_list|()
expr_stmt|;
name|AT_LPAREN54
operator|=
operator|(
name|Token
operator|)
name|match
argument_list|(
name|input
argument_list|,
name|AT_LPAREN
argument_list|,
name|FOLLOW_AT_LPAREN_in_arguments1237
argument_list|)
expr_stmt|;
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:322:18: ( conditional ( AT_COMMA ! conditional )* )?
name|int
name|alt17
init|=
literal|2
decl_stmt|;
name|int
name|LA17_0
init|=
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA17_0
operator|==
name|AT_ADD
operator|||
name|LA17_0
operator|==
name|AT_BIT_NOT
operator|||
name|LA17_0
operator|==
name|AT_BOOL_NOT
operator|||
name|LA17_0
operator|==
name|AT_LPAREN
operator|||
operator|(
name|LA17_0
operator|>=
name|AT_SUBTRACT
operator|&&
name|LA17_0
operator|<=
name|DECIMAL
operator|)
operator|||
name|LA17_0
operator|==
name|HEX
operator|||
operator|(
name|LA17_0
operator|>=
name|NAMESPACE_ID
operator|&&
name|LA17_0
operator|<=
name|OCTAL
operator|)
operator|)
condition|)
block|{
name|alt17
operator|=
literal|1
expr_stmt|;
block|}
switch|switch
condition|(
name|alt17
condition|)
block|{
case|case
literal|1
case|:
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:322:19: conditional ( AT_COMMA ! conditional )*
block|{
name|pushFollow
argument_list|(
name|FOLLOW_conditional_in_arguments1241
argument_list|)
expr_stmt|;
name|conditional55
operator|=
name|conditional
argument_list|()
expr_stmt|;
name|state
operator|.
name|_fsp
operator|--
expr_stmt|;
name|adaptor
operator|.
name|addChild
argument_list|(
name|root_0
argument_list|,
name|conditional55
operator|.
name|getTree
argument_list|()
argument_list|)
expr_stmt|;
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:322:31: ( AT_COMMA ! conditional )*
name|loop16
label|:
while|while
condition|(
literal|true
condition|)
block|{
name|int
name|alt16
init|=
literal|2
decl_stmt|;
name|int
name|LA16_0
init|=
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA16_0
operator|==
name|AT_COMMA
operator|)
condition|)
block|{
name|alt16
operator|=
literal|1
expr_stmt|;
block|}
switch|switch
condition|(
name|alt16
condition|)
block|{
case|case
literal|1
case|:
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:322:32: AT_COMMA ! conditional
block|{
name|AT_COMMA56
operator|=
operator|(
name|Token
operator|)
name|match
argument_list|(
name|input
argument_list|,
name|AT_COMMA
argument_list|,
name|FOLLOW_AT_COMMA_in_arguments1244
argument_list|)
expr_stmt|;
name|pushFollow
argument_list|(
name|FOLLOW_conditional_in_arguments1247
argument_list|)
expr_stmt|;
name|conditional57
operator|=
name|conditional
argument_list|()
expr_stmt|;
name|state
operator|.
name|_fsp
operator|--
expr_stmt|;
name|adaptor
operator|.
name|addChild
argument_list|(
name|root_0
argument_list|,
name|conditional57
operator|.
name|getTree
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
default|default :
break|break
name|loop16
break|;
block|}
block|}
block|}
break|break;
block|}
name|AT_RPAREN58
operator|=
operator|(
name|Token
operator|)
name|match
argument_list|(
name|input
argument_list|,
name|AT_RPAREN
argument_list|,
name|FOLLOW_AT_RPAREN_in_arguments1253
argument_list|)
expr_stmt|;
block|}
name|retval
operator|.
name|stop
operator|=
name|input
operator|.
name|LT
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|retval
operator|.
name|tree
operator|=
operator|(
name|CommonTree
operator|)
name|adaptor
operator|.
name|rulePostProcessing
argument_list|(
name|root_0
argument_list|)
expr_stmt|;
name|adaptor
operator|.
name|setTokenBoundaries
argument_list|(
name|retval
operator|.
name|tree
argument_list|,
name|retval
operator|.
name|start
argument_list|,
name|retval
operator|.
name|stop
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|re
parameter_list|)
block|{
name|reportError
argument_list|(
name|re
argument_list|)
expr_stmt|;
name|recover
argument_list|(
name|input
argument_list|,
name|re
argument_list|)
expr_stmt|;
name|retval
operator|.
name|tree
operator|=
operator|(
name|CommonTree
operator|)
name|adaptor
operator|.
name|errorNode
argument_list|(
name|input
argument_list|,
name|retval
operator|.
name|start
argument_list|,
name|input
operator|.
name|LT
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|,
name|re
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// do for sure before leaving
block|}
return|return
name|retval
return|;
block|}
comment|// $ANTLR end "arguments"
DECL|class|numeric_return
specifier|public
specifier|static
class|class
name|numeric_return
extends|extends
name|ParserRuleReturnScope
block|{
DECL|field|tree
name|CommonTree
name|tree
decl_stmt|;
annotation|@
name|Override
DECL|method|getTree
specifier|public
name|CommonTree
name|getTree
parameter_list|()
block|{
return|return
name|tree
return|;
block|}
block|}
empty_stmt|;
comment|// $ANTLR start "numeric"
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:325:1: numeric : ( HEX | OCTAL | DECIMAL );
DECL|method|numeric
specifier|public
specifier|final
name|JavascriptParser
operator|.
name|numeric_return
name|numeric
parameter_list|()
throws|throws
name|RecognitionException
block|{
name|JavascriptParser
operator|.
name|numeric_return
name|retval
init|=
operator|new
name|JavascriptParser
operator|.
name|numeric_return
argument_list|()
decl_stmt|;
name|retval
operator|.
name|start
operator|=
name|input
operator|.
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|CommonTree
name|root_0
init|=
literal|null
decl_stmt|;
name|Token
name|set59
init|=
literal|null
decl_stmt|;
name|CommonTree
name|set59_tree
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:326:5: ( HEX | OCTAL | DECIMAL )
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:
block|{
name|root_0
operator|=
operator|(
name|CommonTree
operator|)
name|adaptor
operator|.
name|nil
argument_list|()
expr_stmt|;
name|set59
operator|=
name|input
operator|.
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|DECIMAL
operator|||
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|HEX
operator|||
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|OCTAL
condition|)
block|{
name|input
operator|.
name|consume
argument_list|()
expr_stmt|;
name|adaptor
operator|.
name|addChild
argument_list|(
name|root_0
argument_list|,
operator|(
name|CommonTree
operator|)
name|adaptor
operator|.
name|create
argument_list|(
name|set59
argument_list|)
argument_list|)
expr_stmt|;
name|state
operator|.
name|errorRecovery
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|MismatchedSetException
name|mse
init|=
operator|new
name|MismatchedSetException
argument_list|(
literal|null
argument_list|,
name|input
argument_list|)
decl_stmt|;
throw|throw
name|mse
throw|;
block|}
block|}
name|retval
operator|.
name|stop
operator|=
name|input
operator|.
name|LT
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|retval
operator|.
name|tree
operator|=
operator|(
name|CommonTree
operator|)
name|adaptor
operator|.
name|rulePostProcessing
argument_list|(
name|root_0
argument_list|)
expr_stmt|;
name|adaptor
operator|.
name|setTokenBoundaries
argument_list|(
name|retval
operator|.
name|tree
argument_list|,
name|retval
operator|.
name|start
argument_list|,
name|retval
operator|.
name|stop
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|re
parameter_list|)
block|{
name|reportError
argument_list|(
name|re
argument_list|)
expr_stmt|;
name|recover
argument_list|(
name|input
argument_list|,
name|re
argument_list|)
expr_stmt|;
name|retval
operator|.
name|tree
operator|=
operator|(
name|CommonTree
operator|)
name|adaptor
operator|.
name|errorNode
argument_list|(
name|input
argument_list|,
name|retval
operator|.
name|start
argument_list|,
name|input
operator|.
name|LT
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|,
name|re
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// do for sure before leaving
block|}
return|return
name|retval
return|;
block|}
comment|// $ANTLR end "numeric"
comment|// Delegated rules
DECL|field|FOLLOW_conditional_in_expression737
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_conditional_in_expression737
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x0000000000000000L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_EOF_in_expression739
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_EOF_in_expression739
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x0000000000000002L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_logical_or_in_conditional757
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_logical_or_in_conditional757
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x0000000001000002L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_AT_COND_QUE_in_conditional760
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_AT_COND_QUE_in_conditional760
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x0000032308002050L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_conditional_in_conditional763
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_conditional_in_conditional763
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x0000000000010000L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_AT_COLON_in_conditional765
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_AT_COLON_in_conditional765
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x0000032308002050L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_conditional_in_conditional768
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_conditional_in_conditional768
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x0000000000000002L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_logical_and_in_logical_or787
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_logical_and_in_logical_or787
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x0000000000004002L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_AT_BOOL_OR_in_logical_or790
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_AT_BOOL_OR_in_logical_or790
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x0000032308002050L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_logical_and_in_logical_or793
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_logical_and_in_logical_or793
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x0000000000004002L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_bitwise_or_in_logical_and812
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_bitwise_or_in_logical_and812
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x0000000000001002L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_AT_BOOL_AND_in_logical_and815
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_AT_BOOL_AND_in_logical_and815
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x0000032308002050L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_bitwise_or_in_logical_and818
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_bitwise_or_in_logical_and818
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x0000000000001002L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_bitwise_xor_in_bitwise_or837
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_bitwise_xor_in_bitwise_or837
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x0000000000000082L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_AT_BIT_OR_in_bitwise_or840
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_AT_BIT_OR_in_bitwise_or840
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x0000032308002050L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_bitwise_xor_in_bitwise_or843
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_bitwise_xor_in_bitwise_or843
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x0000000000000082L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_bitwise_and_in_bitwise_xor862
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_bitwise_and_in_bitwise_xor862
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x0000000000000802L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_AT_BIT_XOR_in_bitwise_xor865
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_AT_BIT_XOR_in_bitwise_xor865
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x0000032308002050L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_bitwise_and_in_bitwise_xor868
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_bitwise_and_in_bitwise_xor868
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x0000000000000802L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_equality_in_bitwise_and888
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_equality_in_bitwise_and888
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x0000000000000022L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_AT_BIT_AND_in_bitwise_and891
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_AT_BIT_AND_in_bitwise_and891
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x0000032308002050L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_equality_in_bitwise_and894
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_equality_in_bitwise_and894
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x0000000000000022L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_relational_in_equality913
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_relational_in_equality913
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x0000000000840002L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_set_in_equality916
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_set_in_equality916
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x0000032308002050L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_relational_in_equality925
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_relational_in_equality925
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x0000000000840002L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_shift_in_relational944
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_shift_in_relational944
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x0000000000780002L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_set_in_relational947
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_set_in_relational947
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x0000032308002050L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_shift_in_relational964
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_shift_in_relational964
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x0000000000780002L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_additive_in_shift983
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_additive_in_shift983
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x0000000000000702L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_set_in_shift986
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_set_in_shift986
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x0000032308002050L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_additive_in_shift999
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_additive_in_shift999
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x0000000000000702L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_multiplicative_in_additive1018
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_multiplicative_in_additive1018
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x0000000100000012L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_set_in_additive1021
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_set_in_additive1021
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x0000032308002050L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_multiplicative_in_additive1030
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_multiplicative_in_additive1030
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x0000000100000012L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_unary_in_multiplicative1049
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_unary_in_multiplicative1049
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x0000000032000002L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_set_in_multiplicative1052
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_set_in_multiplicative1052
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x0000032308002050L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_unary_in_multiplicative1065
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_unary_in_multiplicative1065
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x0000000032000002L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_postfix_in_unary1084
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_postfix_in_unary1084
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x0000000000000002L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_AT_ADD_in_unary1092
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_AT_ADD_in_unary1092
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x0000032308002050L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_unary_in_unary1095
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_unary_in_unary1095
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x0000000000000002L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_unary_operator_in_unary1103
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_unary_operator_in_unary1103
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x0000032308002050L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_unary_in_unary1106
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_unary_in_unary1106
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x0000000000000002L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_AT_SUBTRACT_in_unary_operator1123
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_AT_SUBTRACT_in_unary_operator1123
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x0000000000000002L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_AT_BIT_NOT_in_unary_operator1135
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_AT_BIT_NOT_in_unary_operator1135
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x0000000000000002L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_AT_BOOL_NOT_in_unary_operator1143
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_AT_BOOL_NOT_in_unary_operator1143
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x0000000000000002L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_primary_in_postfix1160
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_primary_in_postfix1160
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x0000000000000002L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_NAMESPACE_ID_in_postfix1168
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_NAMESPACE_ID_in_postfix1168
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x0000000008000000L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_arguments_in_postfix1170
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_arguments_in_postfix1170
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x0000000000000002L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_NAMESPACE_ID_in_primary1198
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_NAMESPACE_ID_in_primary1198
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x0000000000000002L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_numeric_in_primary1206
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_numeric_in_primary1206
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x0000000000000002L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_AT_LPAREN_in_primary1214
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_AT_LPAREN_in_primary1214
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x0000032308002050L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_conditional_in_primary1217
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_conditional_in_primary1217
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x0000000080000000L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_AT_RPAREN_in_primary1219
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_AT_RPAREN_in_primary1219
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x0000000000000002L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_AT_LPAREN_in_arguments1237
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_AT_LPAREN_in_arguments1237
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x0000032388002050L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_conditional_in_arguments1241
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_conditional_in_arguments1241
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x0000000080020000L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_AT_COMMA_in_arguments1244
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_AT_COMMA_in_arguments1244
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x0000032308002050L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_conditional_in_arguments1247
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_conditional_in_arguments1247
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x0000000080020000L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_AT_RPAREN_in_arguments1253
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_AT_RPAREN_in_arguments1253
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x0000000000000002L
block|}
argument_list|)
decl_stmt|;
block|}
end_class
end_unit
