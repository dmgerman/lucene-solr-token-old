begin_unit
begin_package
DECL|package|org.apache.lucene.expressions
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|expressions
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|AtomicReaderContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queries
operator|.
name|function
operator|.
name|FunctionValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queries
operator|.
name|function
operator|.
name|ValueSource
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|SortField
import|;
end_import
begin_comment
comment|/**  * A {@link ValueSource} which evaluates a {@link Expression} given the context of an {@link Bindings}.  */
end_comment
begin_class
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"rawtypes"
block|,
literal|"unchecked"
block|}
argument_list|)
DECL|class|ExpressionValueSource
specifier|final
class|class
name|ExpressionValueSource
extends|extends
name|ValueSource
block|{
DECL|field|bindings
specifier|private
specifier|final
name|Bindings
name|bindings
decl_stmt|;
DECL|field|expression
specifier|final
name|Expression
name|expression
decl_stmt|;
DECL|method|ExpressionValueSource
specifier|public
name|ExpressionValueSource
parameter_list|(
name|Bindings
name|bindings
parameter_list|,
name|Expression
name|expression
parameter_list|)
block|{
if|if
condition|(
name|bindings
operator|==
literal|null
condition|)
throw|throw
operator|new
name|NullPointerException
argument_list|()
throw|;
if|if
condition|(
name|expression
operator|==
literal|null
condition|)
throw|throw
operator|new
name|NullPointerException
argument_list|()
throw|;
name|this
operator|.
name|bindings
operator|=
name|bindings
expr_stmt|;
name|this
operator|.
name|expression
operator|=
name|expression
expr_stmt|;
block|}
comment|/**<code>context</code> must contain a key<code>"valuesCache"</code> which is a<code>Map&lt;String,FunctionValues&gt;</code>. */
annotation|@
name|Override
DECL|method|getValues
specifier|public
name|FunctionValues
name|getValues
parameter_list|(
name|Map
name|context
parameter_list|,
name|AtomicReaderContext
name|readerContext
parameter_list|)
throws|throws
name|IOException
block|{
name|ValueSource
name|source
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|FunctionValues
argument_list|>
name|valuesCache
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|FunctionValues
argument_list|>
operator|)
name|context
operator|.
name|get
argument_list|(
literal|"valuesCache"
argument_list|)
decl_stmt|;
if|if
condition|(
name|valuesCache
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|()
throw|;
block|}
name|FunctionValues
index|[]
name|externalValues
init|=
operator|new
name|FunctionValues
index|[
name|expression
operator|.
name|externals
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expression
operator|.
name|externals
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|String
name|externalName
init|=
name|expression
operator|.
name|externals
index|[
name|i
index|]
decl_stmt|;
name|FunctionValues
name|values
init|=
name|valuesCache
operator|.
name|get
argument_list|(
name|externalName
argument_list|)
decl_stmt|;
if|if
condition|(
name|values
operator|==
literal|null
condition|)
block|{
name|source
operator|=
name|bindings
operator|.
name|getValueSource
argument_list|(
name|externalName
argument_list|)
expr_stmt|;
name|values
operator|=
name|source
operator|.
name|getValues
argument_list|(
name|context
argument_list|,
name|readerContext
argument_list|)
expr_stmt|;
if|if
condition|(
name|values
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Internal error. External ("
operator|+
name|externalName
operator|+
literal|") does not exist."
argument_list|)
throw|;
block|}
name|valuesCache
operator|.
name|put
argument_list|(
name|externalName
argument_list|,
name|values
argument_list|)
expr_stmt|;
block|}
name|externalValues
index|[
name|i
index|]
operator|=
name|values
expr_stmt|;
block|}
return|return
operator|new
name|ExpressionFunctionValues
argument_list|(
name|expression
argument_list|,
name|externalValues
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getSortField
specifier|public
name|SortField
name|getSortField
parameter_list|(
name|boolean
name|reverse
parameter_list|)
block|{
return|return
operator|new
name|ExpressionSortField
argument_list|(
name|expression
operator|.
name|expression
argument_list|,
name|this
argument_list|,
name|reverse
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|description
specifier|public
name|String
name|description
parameter_list|()
block|{
return|return
literal|"ExpressionValueSource("
operator|+
name|expression
operator|.
name|expression
operator|+
literal|")"
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|System
operator|.
name|identityHashCode
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
return|return
name|obj
operator|==
name|this
return|;
block|}
block|}
end_class
end_unit
