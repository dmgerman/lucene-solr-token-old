begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.expressions.js
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|expressions
operator|.
name|js
package|;
end_package
begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|antlr
operator|.
name|v4
operator|.
name|runtime
operator|.
name|DefaultErrorStrategy
import|;
end_import
begin_import
import|import
name|org
operator|.
name|antlr
operator|.
name|v4
operator|.
name|runtime
operator|.
name|InputMismatchException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|antlr
operator|.
name|v4
operator|.
name|runtime
operator|.
name|NoViableAltException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|antlr
operator|.
name|v4
operator|.
name|runtime
operator|.
name|Parser
import|;
end_import
begin_import
import|import
name|org
operator|.
name|antlr
operator|.
name|v4
operator|.
name|runtime
operator|.
name|RecognitionException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|antlr
operator|.
name|v4
operator|.
name|runtime
operator|.
name|Token
import|;
end_import
begin_comment
comment|/**  * Allows for proper error handling in the ANTLR 4 parser  */
end_comment
begin_class
DECL|class|JavascriptParserErrorStrategy
class|class
name|JavascriptParserErrorStrategy
extends|extends
name|DefaultErrorStrategy
block|{
comment|/**    * Ensures the ANTLR parser will throw an exception after the first error    *    * @param recognizer the parser being used    * @param re the original exception from the parser    */
annotation|@
name|Override
DECL|method|recover
specifier|public
name|void
name|recover
parameter_list|(
name|Parser
name|recognizer
parameter_list|,
name|RecognitionException
name|re
parameter_list|)
block|{
name|Token
name|token
init|=
name|re
operator|.
name|getOffendingToken
argument_list|()
decl_stmt|;
name|String
name|message
decl_stmt|;
if|if
condition|(
name|token
operator|==
literal|null
condition|)
block|{
name|message
operator|=
literal|"error "
operator|+
name|getTokenErrorDisplay
argument_list|(
name|token
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|re
operator|instanceof
name|InputMismatchException
condition|)
block|{
name|message
operator|=
literal|"unexpected token "
operator|+
name|getTokenErrorDisplay
argument_list|(
name|token
argument_list|)
operator|+
literal|" on line ("
operator|+
name|token
operator|.
name|getLine
argument_list|()
operator|+
literal|") position ("
operator|+
name|token
operator|.
name|getCharPositionInLine
argument_list|()
operator|+
literal|")"
operator|+
literal|" was expecting one of "
operator|+
name|re
operator|.
name|getExpectedTokens
argument_list|()
operator|.
name|toString
argument_list|(
name|recognizer
operator|.
name|getVocabulary
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|re
operator|instanceof
name|NoViableAltException
condition|)
block|{
if|if
condition|(
name|token
operator|.
name|getType
argument_list|()
operator|==
name|JavascriptParser
operator|.
name|EOF
condition|)
block|{
name|message
operator|=
literal|"unexpected end of expression"
expr_stmt|;
block|}
else|else
block|{
name|message
operator|=
literal|"invalid sequence of tokens near "
operator|+
name|getTokenErrorDisplay
argument_list|(
name|token
argument_list|)
operator|+
literal|" on line ("
operator|+
name|token
operator|.
name|getLine
argument_list|()
operator|+
literal|") position ("
operator|+
name|token
operator|.
name|getCharPositionInLine
argument_list|()
operator|+
literal|")"
expr_stmt|;
block|}
block|}
else|else
block|{
name|message
operator|=
literal|" unexpected token near "
operator|+
name|getTokenErrorDisplay
argument_list|(
name|token
argument_list|)
operator|+
literal|" on line ("
operator|+
name|token
operator|.
name|getLine
argument_list|()
operator|+
literal|") position ("
operator|+
name|token
operator|.
name|getCharPositionInLine
argument_list|()
operator|+
literal|")"
expr_stmt|;
block|}
name|ParseException
name|parseException
init|=
operator|new
name|ParseException
argument_list|(
name|message
argument_list|,
name|token
operator|.
name|getStartIndex
argument_list|()
argument_list|)
decl_stmt|;
name|parseException
operator|.
name|initCause
argument_list|(
name|re
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|parseException
argument_list|)
throw|;
block|}
comment|/**    * Ensures the ANTLR parser will throw an exception after the first error    *    * @param recognizer the parser being used    * @return no actual return value    * @throws RecognitionException not used as a ParseException wrapped in a RuntimeException is thrown instead    */
annotation|@
name|Override
DECL|method|recoverInline
specifier|public
name|Token
name|recoverInline
parameter_list|(
name|Parser
name|recognizer
parameter_list|)
throws|throws
name|RecognitionException
block|{
name|Token
name|token
init|=
name|recognizer
operator|.
name|getCurrentToken
argument_list|()
decl_stmt|;
name|String
name|message
init|=
literal|"unexpected token "
operator|+
name|getTokenErrorDisplay
argument_list|(
name|token
argument_list|)
operator|+
literal|" on line ("
operator|+
name|token
operator|.
name|getLine
argument_list|()
operator|+
literal|") position ("
operator|+
name|token
operator|.
name|getCharPositionInLine
argument_list|()
operator|+
literal|")"
operator|+
literal|" was expecting one of "
operator|+
name|recognizer
operator|.
name|getExpectedTokens
argument_list|()
operator|.
name|toString
argument_list|(
name|recognizer
operator|.
name|getVocabulary
argument_list|()
argument_list|)
decl_stmt|;
name|ParseException
name|parseException
init|=
operator|new
name|ParseException
argument_list|(
name|message
argument_list|,
name|token
operator|.
name|getStartIndex
argument_list|()
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|parseException
argument_list|)
throw|;
block|}
comment|/**    * Do not allow syncing after errors to ensure the ANTLR parser will throw an exception    *    * @param recognizer the parser being used    */
annotation|@
name|Override
DECL|method|sync
specifier|public
name|void
name|sync
parameter_list|(
name|Parser
name|recognizer
parameter_list|)
block|{   }
block|}
end_class
end_unit
