begin_unit
begin_package
DECL|package|org.apache.lucene.expressions.js
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|expressions
operator|.
name|js
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import
begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import
begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Modifier
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|MathUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|Type
import|;
end_import
begin_comment
comment|/**  * A wrapper to delegate function calls from a javascript expression.  */
end_comment
begin_class
DECL|class|JavascriptFunction
class|class
name|JavascriptFunction
block|{
DECL|field|methods
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|JavascriptFunction
argument_list|>
name|methods
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|JavascriptFunction
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
try|try
block|{
specifier|final
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
try|try
init|(
name|Reader
name|in
init|=
name|IOUtils
operator|.
name|getDecodingReader
argument_list|(
name|JavascriptFunction
operator|.
name|class
argument_list|,
name|JavascriptFunction
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|".properties"
argument_list|,
name|IOUtils
operator|.
name|CHARSET_UTF_8
argument_list|)
init|)
block|{
name|props
operator|.
name|load
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
for|for
control|(
specifier|final
name|String
name|call
range|:
name|props
operator|.
name|stringPropertyNames
argument_list|()
control|)
block|{
specifier|final
name|String
index|[]
name|vals
init|=
name|props
operator|.
name|getProperty
argument_list|(
name|call
argument_list|)
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
if|if
condition|(
name|vals
operator|.
name|length
operator|!=
literal|3
condition|)
block|{
throw|throw
operator|new
name|Error
argument_list|(
literal|"Syntax error while reading Javascript functions from resource"
argument_list|)
throw|;
block|}
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
init|=
name|Class
operator|.
name|forName
argument_list|(
name|vals
index|[
literal|0
index|]
operator|.
name|trim
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|String
name|methodName
init|=
name|vals
index|[
literal|1
index|]
operator|.
name|trim
argument_list|()
decl_stmt|;
specifier|final
name|int
name|arity
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|vals
index|[
literal|2
index|]
operator|.
name|trim
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"rawtypes"
block|,
literal|"unchecked"
block|}
argument_list|)
name|Class
index|[]
name|args
init|=
operator|new
name|Class
index|[
name|arity
index|]
decl_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|args
argument_list|,
name|double
operator|.
name|class
argument_list|)
expr_stmt|;
name|methods
operator|.
name|put
argument_list|(
name|call
argument_list|,
operator|new
name|JavascriptFunction
argument_list|(
name|call
argument_list|,
name|clazz
operator|.
name|getMethod
argument_list|(
name|methodName
argument_list|,
name|args
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
decl||
name|ClassNotFoundException
decl||
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|Error
argument_list|(
literal|"Cannot resolve function"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|getMethod
specifier|public
specifier|static
name|JavascriptFunction
name|getMethod
parameter_list|(
name|String
name|call
parameter_list|,
name|int
name|arity
parameter_list|)
block|{
name|JavascriptFunction
name|method
init|=
name|methods
operator|.
name|get
argument_list|(
name|call
argument_list|)
decl_stmt|;
if|if
condition|(
name|method
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unrecognized method call ("
operator|+
name|call
operator|+
literal|")."
argument_list|)
throw|;
block|}
if|if
condition|(
name|arity
operator|!=
name|method
operator|.
name|arity
operator|&&
name|method
operator|.
name|arity
operator|!=
operator|-
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Expected ("
operator|+
name|method
operator|.
name|arity
operator|+
literal|") arguments for method call ("
operator|+
name|call
operator|+
literal|"), but found ("
operator|+
name|arity
operator|+
literal|")."
argument_list|)
throw|;
block|}
return|return
name|method
return|;
block|}
DECL|field|call
specifier|public
specifier|final
name|String
name|call
decl_stmt|;
DECL|field|arity
specifier|public
specifier|final
name|int
name|arity
decl_stmt|;
DECL|field|klass
specifier|public
specifier|final
name|String
name|klass
decl_stmt|;
DECL|field|method
specifier|public
specifier|final
name|String
name|method
decl_stmt|;
DECL|field|descriptor
specifier|public
specifier|final
name|String
name|descriptor
decl_stmt|;
DECL|method|JavascriptFunction
specifier|private
name|JavascriptFunction
parameter_list|(
name|String
name|call
parameter_list|,
name|Method
name|method
parameter_list|)
block|{
comment|// do some checks if the signature is "compatible":
if|if
condition|(
operator|!
name|Modifier
operator|.
name|isStatic
argument_list|(
name|method
operator|.
name|getModifiers
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|Error
argument_list|(
name|method
operator|+
literal|" is not static."
argument_list|)
throw|;
block|}
if|if
condition|(
name|method
operator|.
name|getReturnType
argument_list|()
operator|!=
name|double
operator|.
name|class
condition|)
block|{
throw|throw
operator|new
name|Error
argument_list|(
name|method
operator|+
literal|" does not return a double."
argument_list|)
throw|;
block|}
name|this
operator|.
name|call
operator|=
name|call
expr_stmt|;
name|this
operator|.
name|arity
operator|=
name|method
operator|.
name|getParameterTypes
argument_list|()
operator|.
name|length
expr_stmt|;
name|this
operator|.
name|klass
operator|=
name|Type
operator|.
name|getInternalName
argument_list|(
name|method
operator|.
name|getDeclaringClass
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|method
operator|=
name|method
operator|.
name|getName
argument_list|()
expr_stmt|;
name|this
operator|.
name|descriptor
operator|=
name|Type
operator|.
name|getMethodDescriptor
argument_list|(
name|method
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
