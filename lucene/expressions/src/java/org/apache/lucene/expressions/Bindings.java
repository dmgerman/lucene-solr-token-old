begin_unit
begin_package
DECL|package|org.apache.lucene.expressions
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|expressions
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queries
operator|.
name|function
operator|.
name|ValueSource
import|;
end_import
begin_comment
comment|/**  * Binds variable names in expressions to actual data.  *<p>  * These are typically DocValues fields/FieldCache, the document's   * relevance score, or other ValueSources.  *   * @lucene.experimental  */
end_comment
begin_class
DECL|class|Bindings
specifier|public
specifier|abstract
class|class
name|Bindings
implements|implements
name|Iterable
argument_list|<
name|String
argument_list|>
block|{
comment|/** Sole constructor. (For invocation by subclass     *  constructors, typically implicit.) */
DECL|method|Bindings
specifier|protected
name|Bindings
parameter_list|()
block|{}
comment|/**    * Returns a ValueSource bound to the variable name.    */
DECL|method|getValueSource
specifier|public
specifier|abstract
name|ValueSource
name|getValueSource
parameter_list|(
name|String
name|name
parameter_list|)
function_decl|;
comment|/** Returns an<code>Iterator</code> over the variable names in this binding */
annotation|@
name|Override
DECL|method|iterator
specifier|public
specifier|abstract
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterator
parameter_list|()
function_decl|;
comment|/**     * Traverses the graph of bindings, checking there are no cycles or missing references     * @throws IllegalArgumentException if the bindings is inconsistent     */
DECL|method|validate
specifier|public
specifier|final
name|void
name|validate
parameter_list|()
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|marked
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|chain
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|this
control|)
block|{
if|if
condition|(
operator|!
name|marked
operator|.
name|contains
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|chain
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|validate
argument_list|(
name|name
argument_list|,
name|marked
argument_list|,
name|chain
argument_list|)
expr_stmt|;
name|chain
operator|.
name|remove
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|validate
specifier|private
name|void
name|validate
parameter_list|(
name|String
name|name
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|marked
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|chain
parameter_list|)
block|{
name|ValueSource
name|vs
init|=
name|getValueSource
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|vs
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid reference '"
operator|+
name|name
operator|+
literal|"'"
argument_list|)
throw|;
block|}
if|if
condition|(
name|vs
operator|instanceof
name|ExpressionValueSource
condition|)
block|{
name|Expression
name|expr
init|=
operator|(
operator|(
name|ExpressionValueSource
operator|)
name|vs
operator|)
operator|.
name|expression
decl_stmt|;
for|for
control|(
name|String
name|external
range|:
name|expr
operator|.
name|variables
control|)
block|{
if|if
condition|(
name|chain
operator|.
name|contains
argument_list|(
name|external
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Recursion Error: Cycle detected originating in ("
operator|+
name|external
operator|+
literal|")"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|marked
operator|.
name|contains
argument_list|(
name|external
argument_list|)
condition|)
block|{
name|chain
operator|.
name|add
argument_list|(
name|external
argument_list|)
expr_stmt|;
name|validate
argument_list|(
name|external
argument_list|,
name|marked
argument_list|,
name|chain
argument_list|)
expr_stmt|;
name|chain
operator|.
name|remove
argument_list|(
name|external
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|marked
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
