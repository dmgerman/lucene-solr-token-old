begin_unit
begin_package
DECL|package|org.apache.lucene.expressions
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|expressions
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReaderContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|ReaderUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queries
operator|.
name|function
operator|.
name|ValueSource
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Explanation
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Rescorer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Sort
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|SortRescorer
import|;
end_import
begin_comment
comment|/**  * A {@link Rescorer} that uses an expression to re-score  * first pass hits.  Functionally this is the same as {@link  * SortRescorer} (if you build the {@link Sort} using {@link  * Expression#getSortField}), except for the explain method  * which gives more detail by showing the value of each  * variable.  *   * @lucene.experimental  */
end_comment
begin_class
DECL|class|ExpressionRescorer
class|class
name|ExpressionRescorer
extends|extends
name|SortRescorer
block|{
DECL|field|expression
specifier|private
specifier|final
name|Expression
name|expression
decl_stmt|;
DECL|field|bindings
specifier|private
specifier|final
name|Bindings
name|bindings
decl_stmt|;
comment|/** Uses the provided {@link ValueSource} to assign second    *  pass scores. */
DECL|method|ExpressionRescorer
specifier|public
name|ExpressionRescorer
parameter_list|(
name|Expression
name|expression
parameter_list|,
name|Bindings
name|bindings
parameter_list|)
block|{
name|super
argument_list|(
operator|new
name|Sort
argument_list|(
name|expression
operator|.
name|getSortField
argument_list|(
name|bindings
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|expression
operator|=
name|expression
expr_stmt|;
name|this
operator|.
name|bindings
operator|=
name|bindings
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|explain
specifier|public
name|Explanation
name|explain
parameter_list|(
name|IndexSearcher
name|searcher
parameter_list|,
name|Explanation
name|firstPassExplanation
parameter_list|,
name|int
name|docID
parameter_list|)
throws|throws
name|IOException
block|{
name|Explanation
name|superExpl
init|=
name|super
operator|.
name|explain
argument_list|(
name|searcher
argument_list|,
name|firstPassExplanation
argument_list|,
name|docID
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|LeafReaderContext
argument_list|>
name|leaves
init|=
name|searcher
operator|.
name|getIndexReader
argument_list|()
operator|.
name|leaves
argument_list|()
decl_stmt|;
name|int
name|subReader
init|=
name|ReaderUtil
operator|.
name|subIndex
argument_list|(
name|docID
argument_list|,
name|leaves
argument_list|)
decl_stmt|;
name|LeafReaderContext
name|readerContext
init|=
name|leaves
operator|.
name|get
argument_list|(
name|subReader
argument_list|)
decl_stmt|;
name|int
name|docIDInSegment
init|=
name|docID
operator|-
name|readerContext
operator|.
name|docBase
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|context
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|FakeScorer
name|fakeScorer
init|=
operator|new
name|FakeScorer
argument_list|()
decl_stmt|;
name|fakeScorer
operator|.
name|score
operator|=
name|firstPassExplanation
operator|.
name|getValue
argument_list|()
expr_stmt|;
name|fakeScorer
operator|.
name|doc
operator|=
name|docIDInSegment
expr_stmt|;
name|context
operator|.
name|put
argument_list|(
literal|"scorer"
argument_list|,
name|fakeScorer
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Explanation
argument_list|>
name|subs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|superExpl
operator|.
name|getDetails
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|variable
range|:
name|expression
operator|.
name|variables
control|)
block|{
name|subs
operator|.
name|add
argument_list|(
name|Explanation
operator|.
name|match
argument_list|(
operator|(
name|float
operator|)
name|bindings
operator|.
name|getValueSource
argument_list|(
name|variable
argument_list|)
operator|.
name|getValues
argument_list|(
name|context
argument_list|,
name|readerContext
argument_list|)
operator|.
name|doubleVal
argument_list|(
name|docIDInSegment
argument_list|)
argument_list|,
literal|"variable \""
operator|+
name|variable
operator|+
literal|"\""
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|Explanation
operator|.
name|match
argument_list|(
name|superExpl
operator|.
name|getValue
argument_list|()
argument_list|,
name|superExpl
operator|.
name|getDescription
argument_list|()
argument_list|,
name|subs
argument_list|)
return|;
block|}
block|}
end_class
end_unit
