begin_unit
begin_comment
comment|// ANTLR GENERATED CODE: DO NOT EDIT
end_comment
begin_package
DECL|package|org.apache.lucene.expressions.js
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|expressions
operator|.
name|js
package|;
end_package
begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|antlr
operator|.
name|runtime
operator|.
name|*
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Stack
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_class
annotation|@
name|SuppressWarnings
argument_list|(
literal|"all"
argument_list|)
class|class
DECL|class|JavascriptLexer
name|JavascriptLexer
extends|extends
name|Lexer
block|{
DECL|field|EOF
specifier|public
specifier|static
specifier|final
name|int
name|EOF
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|ARRAY
specifier|public
specifier|static
specifier|final
name|int
name|ARRAY
init|=
literal|4
decl_stmt|;
DECL|field|AT_ADD
specifier|public
specifier|static
specifier|final
name|int
name|AT_ADD
init|=
literal|5
decl_stmt|;
DECL|field|AT_BIT_AND
specifier|public
specifier|static
specifier|final
name|int
name|AT_BIT_AND
init|=
literal|6
decl_stmt|;
DECL|field|AT_BIT_NOT
specifier|public
specifier|static
specifier|final
name|int
name|AT_BIT_NOT
init|=
literal|7
decl_stmt|;
DECL|field|AT_BIT_OR
specifier|public
specifier|static
specifier|final
name|int
name|AT_BIT_OR
init|=
literal|8
decl_stmt|;
DECL|field|AT_BIT_SHL
specifier|public
specifier|static
specifier|final
name|int
name|AT_BIT_SHL
init|=
literal|9
decl_stmt|;
DECL|field|AT_BIT_SHR
specifier|public
specifier|static
specifier|final
name|int
name|AT_BIT_SHR
init|=
literal|10
decl_stmt|;
DECL|field|AT_BIT_SHU
specifier|public
specifier|static
specifier|final
name|int
name|AT_BIT_SHU
init|=
literal|11
decl_stmt|;
DECL|field|AT_BIT_XOR
specifier|public
specifier|static
specifier|final
name|int
name|AT_BIT_XOR
init|=
literal|12
decl_stmt|;
DECL|field|AT_BOOL_AND
specifier|public
specifier|static
specifier|final
name|int
name|AT_BOOL_AND
init|=
literal|13
decl_stmt|;
DECL|field|AT_BOOL_NOT
specifier|public
specifier|static
specifier|final
name|int
name|AT_BOOL_NOT
init|=
literal|14
decl_stmt|;
DECL|field|AT_BOOL_OR
specifier|public
specifier|static
specifier|final
name|int
name|AT_BOOL_OR
init|=
literal|15
decl_stmt|;
DECL|field|AT_CALL
specifier|public
specifier|static
specifier|final
name|int
name|AT_CALL
init|=
literal|16
decl_stmt|;
DECL|field|AT_COLON
specifier|public
specifier|static
specifier|final
name|int
name|AT_COLON
init|=
literal|17
decl_stmt|;
DECL|field|AT_COMMA
specifier|public
specifier|static
specifier|final
name|int
name|AT_COMMA
init|=
literal|18
decl_stmt|;
DECL|field|AT_COMP_EQ
specifier|public
specifier|static
specifier|final
name|int
name|AT_COMP_EQ
init|=
literal|19
decl_stmt|;
DECL|field|AT_COMP_GT
specifier|public
specifier|static
specifier|final
name|int
name|AT_COMP_GT
init|=
literal|20
decl_stmt|;
DECL|field|AT_COMP_GTE
specifier|public
specifier|static
specifier|final
name|int
name|AT_COMP_GTE
init|=
literal|21
decl_stmt|;
DECL|field|AT_COMP_LT
specifier|public
specifier|static
specifier|final
name|int
name|AT_COMP_LT
init|=
literal|22
decl_stmt|;
DECL|field|AT_COMP_LTE
specifier|public
specifier|static
specifier|final
name|int
name|AT_COMP_LTE
init|=
literal|23
decl_stmt|;
DECL|field|AT_COMP_NEQ
specifier|public
specifier|static
specifier|final
name|int
name|AT_COMP_NEQ
init|=
literal|24
decl_stmt|;
DECL|field|AT_COND_QUE
specifier|public
specifier|static
specifier|final
name|int
name|AT_COND_QUE
init|=
literal|25
decl_stmt|;
DECL|field|AT_DIVIDE
specifier|public
specifier|static
specifier|final
name|int
name|AT_DIVIDE
init|=
literal|26
decl_stmt|;
DECL|field|AT_DOT
specifier|public
specifier|static
specifier|final
name|int
name|AT_DOT
init|=
literal|27
decl_stmt|;
DECL|field|AT_LPAREN
specifier|public
specifier|static
specifier|final
name|int
name|AT_LPAREN
init|=
literal|28
decl_stmt|;
DECL|field|AT_MODULO
specifier|public
specifier|static
specifier|final
name|int
name|AT_MODULO
init|=
literal|29
decl_stmt|;
DECL|field|AT_MULTIPLY
specifier|public
specifier|static
specifier|final
name|int
name|AT_MULTIPLY
init|=
literal|30
decl_stmt|;
DECL|field|AT_NEGATE
specifier|public
specifier|static
specifier|final
name|int
name|AT_NEGATE
init|=
literal|31
decl_stmt|;
DECL|field|AT_RPAREN
specifier|public
specifier|static
specifier|final
name|int
name|AT_RPAREN
init|=
literal|32
decl_stmt|;
DECL|field|AT_SUBTRACT
specifier|public
specifier|static
specifier|final
name|int
name|AT_SUBTRACT
init|=
literal|33
decl_stmt|;
DECL|field|DECIMAL
specifier|public
specifier|static
specifier|final
name|int
name|DECIMAL
init|=
literal|34
decl_stmt|;
DECL|field|DECIMALDIGIT
specifier|public
specifier|static
specifier|final
name|int
name|DECIMALDIGIT
init|=
literal|35
decl_stmt|;
DECL|field|DECIMALINTEGER
specifier|public
specifier|static
specifier|final
name|int
name|DECIMALINTEGER
init|=
literal|36
decl_stmt|;
DECL|field|DOUBLE_STRING_CHAR
specifier|public
specifier|static
specifier|final
name|int
name|DOUBLE_STRING_CHAR
init|=
literal|37
decl_stmt|;
DECL|field|EXPONENT
specifier|public
specifier|static
specifier|final
name|int
name|EXPONENT
init|=
literal|38
decl_stmt|;
DECL|field|HEX
specifier|public
specifier|static
specifier|final
name|int
name|HEX
init|=
literal|39
decl_stmt|;
DECL|field|HEXDIGIT
specifier|public
specifier|static
specifier|final
name|int
name|HEXDIGIT
init|=
literal|40
decl_stmt|;
DECL|field|ID
specifier|public
specifier|static
specifier|final
name|int
name|ID
init|=
literal|41
decl_stmt|;
DECL|field|OBJECT
specifier|public
specifier|static
specifier|final
name|int
name|OBJECT
init|=
literal|42
decl_stmt|;
DECL|field|OCTAL
specifier|public
specifier|static
specifier|final
name|int
name|OCTAL
init|=
literal|43
decl_stmt|;
DECL|field|OCTALDIGIT
specifier|public
specifier|static
specifier|final
name|int
name|OCTALDIGIT
init|=
literal|44
decl_stmt|;
DECL|field|SINGLE_STRING_CHAR
specifier|public
specifier|static
specifier|final
name|int
name|SINGLE_STRING_CHAR
init|=
literal|45
decl_stmt|;
DECL|field|STRING
specifier|public
specifier|static
specifier|final
name|int
name|STRING
init|=
literal|46
decl_stmt|;
DECL|field|VARIABLE
specifier|public
specifier|static
specifier|final
name|int
name|VARIABLE
init|=
literal|47
decl_stmt|;
DECL|field|WS
specifier|public
specifier|static
specifier|final
name|int
name|WS
init|=
literal|48
decl_stmt|;
annotation|@
name|Override
DECL|method|displayRecognitionError
specifier|public
name|void
name|displayRecognitionError
parameter_list|(
name|String
index|[]
name|tokenNames
parameter_list|,
name|RecognitionException
name|re
parameter_list|)
block|{
name|String
name|message
init|=
literal|" unexpected character '"
operator|+
operator|(
name|char
operator|)
name|re
operator|.
name|c
operator|+
literal|"' at position ("
operator|+
name|re
operator|.
name|charPositionInLine
operator|+
literal|")."
decl_stmt|;
name|ParseException
name|parseException
init|=
operator|new
name|ParseException
argument_list|(
name|message
argument_list|,
name|re
operator|.
name|charPositionInLine
argument_list|)
decl_stmt|;
name|parseException
operator|.
name|initCause
argument_list|(
name|re
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|parseException
argument_list|)
throw|;
block|}
comment|// delegates
comment|// delegators
DECL|method|getDelegates
specifier|public
name|Lexer
index|[]
name|getDelegates
parameter_list|()
block|{
return|return
operator|new
name|Lexer
index|[]
block|{}
return|;
block|}
DECL|method|JavascriptLexer
specifier|public
name|JavascriptLexer
parameter_list|()
block|{}
DECL|method|JavascriptLexer
specifier|public
name|JavascriptLexer
parameter_list|(
name|CharStream
name|input
parameter_list|)
block|{
name|this
argument_list|(
name|input
argument_list|,
operator|new
name|RecognizerSharedState
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|JavascriptLexer
specifier|public
name|JavascriptLexer
parameter_list|(
name|CharStream
name|input
parameter_list|,
name|RecognizerSharedState
name|state
parameter_list|)
block|{
name|super
argument_list|(
name|input
argument_list|,
name|state
argument_list|)
expr_stmt|;
block|}
DECL|method|getGrammarFileName
annotation|@
name|Override
specifier|public
name|String
name|getGrammarFileName
parameter_list|()
block|{
return|return
literal|"src/java/org/apache/lucene/expressions/js/Javascript.g"
return|;
block|}
comment|// $ANTLR start "AT_ADD"
DECL|method|mAT_ADD
specifier|public
specifier|final
name|void
name|mAT_ADD
parameter_list|()
throws|throws
name|RecognitionException
block|{
try|try
block|{
name|int
name|_type
init|=
name|AT_ADD
decl_stmt|;
name|int
name|_channel
init|=
name|DEFAULT_TOKEN_CHANNEL
decl_stmt|;
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:25:8: ( '+' )
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:25:10: '+'
block|{
name|match
argument_list|(
literal|'+'
argument_list|)
expr_stmt|;
block|}
name|state
operator|.
name|type
operator|=
name|_type
expr_stmt|;
name|state
operator|.
name|channel
operator|=
name|_channel
expr_stmt|;
block|}
finally|finally
block|{
comment|// do for sure before leaving
block|}
block|}
comment|// $ANTLR end "AT_ADD"
comment|// $ANTLR start "AT_BIT_AND"
DECL|method|mAT_BIT_AND
specifier|public
specifier|final
name|void
name|mAT_BIT_AND
parameter_list|()
throws|throws
name|RecognitionException
block|{
try|try
block|{
name|int
name|_type
init|=
name|AT_BIT_AND
decl_stmt|;
name|int
name|_channel
init|=
name|DEFAULT_TOKEN_CHANNEL
decl_stmt|;
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:26:12: ( '&' )
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:26:14: '&'
block|{
name|match
argument_list|(
literal|'&'
argument_list|)
expr_stmt|;
block|}
name|state
operator|.
name|type
operator|=
name|_type
expr_stmt|;
name|state
operator|.
name|channel
operator|=
name|_channel
expr_stmt|;
block|}
finally|finally
block|{
comment|// do for sure before leaving
block|}
block|}
comment|// $ANTLR end "AT_BIT_AND"
comment|// $ANTLR start "AT_BIT_NOT"
DECL|method|mAT_BIT_NOT
specifier|public
specifier|final
name|void
name|mAT_BIT_NOT
parameter_list|()
throws|throws
name|RecognitionException
block|{
try|try
block|{
name|int
name|_type
init|=
name|AT_BIT_NOT
decl_stmt|;
name|int
name|_channel
init|=
name|DEFAULT_TOKEN_CHANNEL
decl_stmt|;
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:27:12: ( '~' )
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:27:14: '~'
block|{
name|match
argument_list|(
literal|'~'
argument_list|)
expr_stmt|;
block|}
name|state
operator|.
name|type
operator|=
name|_type
expr_stmt|;
name|state
operator|.
name|channel
operator|=
name|_channel
expr_stmt|;
block|}
finally|finally
block|{
comment|// do for sure before leaving
block|}
block|}
comment|// $ANTLR end "AT_BIT_NOT"
comment|// $ANTLR start "AT_BIT_OR"
DECL|method|mAT_BIT_OR
specifier|public
specifier|final
name|void
name|mAT_BIT_OR
parameter_list|()
throws|throws
name|RecognitionException
block|{
try|try
block|{
name|int
name|_type
init|=
name|AT_BIT_OR
decl_stmt|;
name|int
name|_channel
init|=
name|DEFAULT_TOKEN_CHANNEL
decl_stmt|;
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:28:11: ( '|' )
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:28:13: '|'
block|{
name|match
argument_list|(
literal|'|'
argument_list|)
expr_stmt|;
block|}
name|state
operator|.
name|type
operator|=
name|_type
expr_stmt|;
name|state
operator|.
name|channel
operator|=
name|_channel
expr_stmt|;
block|}
finally|finally
block|{
comment|// do for sure before leaving
block|}
block|}
comment|// $ANTLR end "AT_BIT_OR"
comment|// $ANTLR start "AT_BIT_SHL"
DECL|method|mAT_BIT_SHL
specifier|public
specifier|final
name|void
name|mAT_BIT_SHL
parameter_list|()
throws|throws
name|RecognitionException
block|{
try|try
block|{
name|int
name|_type
init|=
name|AT_BIT_SHL
decl_stmt|;
name|int
name|_channel
init|=
name|DEFAULT_TOKEN_CHANNEL
decl_stmt|;
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:29:12: ( '<<' )
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:29:14: '<<'
block|{
name|match
argument_list|(
literal|"<<"
argument_list|)
expr_stmt|;
block|}
name|state
operator|.
name|type
operator|=
name|_type
expr_stmt|;
name|state
operator|.
name|channel
operator|=
name|_channel
expr_stmt|;
block|}
finally|finally
block|{
comment|// do for sure before leaving
block|}
block|}
comment|// $ANTLR end "AT_BIT_SHL"
comment|// $ANTLR start "AT_BIT_SHR"
DECL|method|mAT_BIT_SHR
specifier|public
specifier|final
name|void
name|mAT_BIT_SHR
parameter_list|()
throws|throws
name|RecognitionException
block|{
try|try
block|{
name|int
name|_type
init|=
name|AT_BIT_SHR
decl_stmt|;
name|int
name|_channel
init|=
name|DEFAULT_TOKEN_CHANNEL
decl_stmt|;
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:30:12: ( '>>' )
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:30:14: '>>'
block|{
name|match
argument_list|(
literal|">>"
argument_list|)
expr_stmt|;
block|}
name|state
operator|.
name|type
operator|=
name|_type
expr_stmt|;
name|state
operator|.
name|channel
operator|=
name|_channel
expr_stmt|;
block|}
finally|finally
block|{
comment|// do for sure before leaving
block|}
block|}
comment|// $ANTLR end "AT_BIT_SHR"
comment|// $ANTLR start "AT_BIT_SHU"
DECL|method|mAT_BIT_SHU
specifier|public
specifier|final
name|void
name|mAT_BIT_SHU
parameter_list|()
throws|throws
name|RecognitionException
block|{
try|try
block|{
name|int
name|_type
init|=
name|AT_BIT_SHU
decl_stmt|;
name|int
name|_channel
init|=
name|DEFAULT_TOKEN_CHANNEL
decl_stmt|;
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:31:12: ( '>>>' )
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:31:14: '>>>'
block|{
name|match
argument_list|(
literal|">>>"
argument_list|)
expr_stmt|;
block|}
name|state
operator|.
name|type
operator|=
name|_type
expr_stmt|;
name|state
operator|.
name|channel
operator|=
name|_channel
expr_stmt|;
block|}
finally|finally
block|{
comment|// do for sure before leaving
block|}
block|}
comment|// $ANTLR end "AT_BIT_SHU"
comment|// $ANTLR start "AT_BIT_XOR"
DECL|method|mAT_BIT_XOR
specifier|public
specifier|final
name|void
name|mAT_BIT_XOR
parameter_list|()
throws|throws
name|RecognitionException
block|{
try|try
block|{
name|int
name|_type
init|=
name|AT_BIT_XOR
decl_stmt|;
name|int
name|_channel
init|=
name|DEFAULT_TOKEN_CHANNEL
decl_stmt|;
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:32:12: ( '^' )
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:32:14: '^'
block|{
name|match
argument_list|(
literal|'^'
argument_list|)
expr_stmt|;
block|}
name|state
operator|.
name|type
operator|=
name|_type
expr_stmt|;
name|state
operator|.
name|channel
operator|=
name|_channel
expr_stmt|;
block|}
finally|finally
block|{
comment|// do for sure before leaving
block|}
block|}
comment|// $ANTLR end "AT_BIT_XOR"
comment|// $ANTLR start "AT_BOOL_AND"
DECL|method|mAT_BOOL_AND
specifier|public
specifier|final
name|void
name|mAT_BOOL_AND
parameter_list|()
throws|throws
name|RecognitionException
block|{
try|try
block|{
name|int
name|_type
init|=
name|AT_BOOL_AND
decl_stmt|;
name|int
name|_channel
init|=
name|DEFAULT_TOKEN_CHANNEL
decl_stmt|;
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:33:13: ( '&&' )
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:33:15: '&&'
block|{
name|match
argument_list|(
literal|"&&"
argument_list|)
expr_stmt|;
block|}
name|state
operator|.
name|type
operator|=
name|_type
expr_stmt|;
name|state
operator|.
name|channel
operator|=
name|_channel
expr_stmt|;
block|}
finally|finally
block|{
comment|// do for sure before leaving
block|}
block|}
comment|// $ANTLR end "AT_BOOL_AND"
comment|// $ANTLR start "AT_BOOL_NOT"
DECL|method|mAT_BOOL_NOT
specifier|public
specifier|final
name|void
name|mAT_BOOL_NOT
parameter_list|()
throws|throws
name|RecognitionException
block|{
try|try
block|{
name|int
name|_type
init|=
name|AT_BOOL_NOT
decl_stmt|;
name|int
name|_channel
init|=
name|DEFAULT_TOKEN_CHANNEL
decl_stmt|;
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:34:13: ( '!' )
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:34:15: '!'
block|{
name|match
argument_list|(
literal|'!'
argument_list|)
expr_stmt|;
block|}
name|state
operator|.
name|type
operator|=
name|_type
expr_stmt|;
name|state
operator|.
name|channel
operator|=
name|_channel
expr_stmt|;
block|}
finally|finally
block|{
comment|// do for sure before leaving
block|}
block|}
comment|// $ANTLR end "AT_BOOL_NOT"
comment|// $ANTLR start "AT_BOOL_OR"
DECL|method|mAT_BOOL_OR
specifier|public
specifier|final
name|void
name|mAT_BOOL_OR
parameter_list|()
throws|throws
name|RecognitionException
block|{
try|try
block|{
name|int
name|_type
init|=
name|AT_BOOL_OR
decl_stmt|;
name|int
name|_channel
init|=
name|DEFAULT_TOKEN_CHANNEL
decl_stmt|;
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:35:12: ( '||' )
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:35:14: '||'
block|{
name|match
argument_list|(
literal|"||"
argument_list|)
expr_stmt|;
block|}
name|state
operator|.
name|type
operator|=
name|_type
expr_stmt|;
name|state
operator|.
name|channel
operator|=
name|_channel
expr_stmt|;
block|}
finally|finally
block|{
comment|// do for sure before leaving
block|}
block|}
comment|// $ANTLR end "AT_BOOL_OR"
comment|// $ANTLR start "AT_COLON"
DECL|method|mAT_COLON
specifier|public
specifier|final
name|void
name|mAT_COLON
parameter_list|()
throws|throws
name|RecognitionException
block|{
try|try
block|{
name|int
name|_type
init|=
name|AT_COLON
decl_stmt|;
name|int
name|_channel
init|=
name|DEFAULT_TOKEN_CHANNEL
decl_stmt|;
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:36:10: ( ':' )
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:36:12: ':'
block|{
name|match
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
block|}
name|state
operator|.
name|type
operator|=
name|_type
expr_stmt|;
name|state
operator|.
name|channel
operator|=
name|_channel
expr_stmt|;
block|}
finally|finally
block|{
comment|// do for sure before leaving
block|}
block|}
comment|// $ANTLR end "AT_COLON"
comment|// $ANTLR start "AT_COMMA"
DECL|method|mAT_COMMA
specifier|public
specifier|final
name|void
name|mAT_COMMA
parameter_list|()
throws|throws
name|RecognitionException
block|{
try|try
block|{
name|int
name|_type
init|=
name|AT_COMMA
decl_stmt|;
name|int
name|_channel
init|=
name|DEFAULT_TOKEN_CHANNEL
decl_stmt|;
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:37:10: ( ',' )
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:37:12: ','
block|{
name|match
argument_list|(
literal|','
argument_list|)
expr_stmt|;
block|}
name|state
operator|.
name|type
operator|=
name|_type
expr_stmt|;
name|state
operator|.
name|channel
operator|=
name|_channel
expr_stmt|;
block|}
finally|finally
block|{
comment|// do for sure before leaving
block|}
block|}
comment|// $ANTLR end "AT_COMMA"
comment|// $ANTLR start "AT_COMP_EQ"
DECL|method|mAT_COMP_EQ
specifier|public
specifier|final
name|void
name|mAT_COMP_EQ
parameter_list|()
throws|throws
name|RecognitionException
block|{
try|try
block|{
name|int
name|_type
init|=
name|AT_COMP_EQ
decl_stmt|;
name|int
name|_channel
init|=
name|DEFAULT_TOKEN_CHANNEL
decl_stmt|;
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:38:12: ( '==' )
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:38:14: '=='
block|{
name|match
argument_list|(
literal|"=="
argument_list|)
expr_stmt|;
block|}
name|state
operator|.
name|type
operator|=
name|_type
expr_stmt|;
name|state
operator|.
name|channel
operator|=
name|_channel
expr_stmt|;
block|}
finally|finally
block|{
comment|// do for sure before leaving
block|}
block|}
comment|// $ANTLR end "AT_COMP_EQ"
comment|// $ANTLR start "AT_COMP_GT"
DECL|method|mAT_COMP_GT
specifier|public
specifier|final
name|void
name|mAT_COMP_GT
parameter_list|()
throws|throws
name|RecognitionException
block|{
try|try
block|{
name|int
name|_type
init|=
name|AT_COMP_GT
decl_stmt|;
name|int
name|_channel
init|=
name|DEFAULT_TOKEN_CHANNEL
decl_stmt|;
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:39:12: ( '>' )
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:39:14: '>'
block|{
name|match
argument_list|(
literal|'>'
argument_list|)
expr_stmt|;
block|}
name|state
operator|.
name|type
operator|=
name|_type
expr_stmt|;
name|state
operator|.
name|channel
operator|=
name|_channel
expr_stmt|;
block|}
finally|finally
block|{
comment|// do for sure before leaving
block|}
block|}
comment|// $ANTLR end "AT_COMP_GT"
comment|// $ANTLR start "AT_COMP_GTE"
DECL|method|mAT_COMP_GTE
specifier|public
specifier|final
name|void
name|mAT_COMP_GTE
parameter_list|()
throws|throws
name|RecognitionException
block|{
try|try
block|{
name|int
name|_type
init|=
name|AT_COMP_GTE
decl_stmt|;
name|int
name|_channel
init|=
name|DEFAULT_TOKEN_CHANNEL
decl_stmt|;
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:40:13: ( '>=' )
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:40:15: '>='
block|{
name|match
argument_list|(
literal|">="
argument_list|)
expr_stmt|;
block|}
name|state
operator|.
name|type
operator|=
name|_type
expr_stmt|;
name|state
operator|.
name|channel
operator|=
name|_channel
expr_stmt|;
block|}
finally|finally
block|{
comment|// do for sure before leaving
block|}
block|}
comment|// $ANTLR end "AT_COMP_GTE"
comment|// $ANTLR start "AT_COMP_LT"
DECL|method|mAT_COMP_LT
specifier|public
specifier|final
name|void
name|mAT_COMP_LT
parameter_list|()
throws|throws
name|RecognitionException
block|{
try|try
block|{
name|int
name|_type
init|=
name|AT_COMP_LT
decl_stmt|;
name|int
name|_channel
init|=
name|DEFAULT_TOKEN_CHANNEL
decl_stmt|;
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:41:12: ( '<' )
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:41:14: '<'
block|{
name|match
argument_list|(
literal|'<'
argument_list|)
expr_stmt|;
block|}
name|state
operator|.
name|type
operator|=
name|_type
expr_stmt|;
name|state
operator|.
name|channel
operator|=
name|_channel
expr_stmt|;
block|}
finally|finally
block|{
comment|// do for sure before leaving
block|}
block|}
comment|// $ANTLR end "AT_COMP_LT"
comment|// $ANTLR start "AT_COMP_LTE"
DECL|method|mAT_COMP_LTE
specifier|public
specifier|final
name|void
name|mAT_COMP_LTE
parameter_list|()
throws|throws
name|RecognitionException
block|{
try|try
block|{
name|int
name|_type
init|=
name|AT_COMP_LTE
decl_stmt|;
name|int
name|_channel
init|=
name|DEFAULT_TOKEN_CHANNEL
decl_stmt|;
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:42:13: ( '<=' )
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:42:15: '<='
block|{
name|match
argument_list|(
literal|"<="
argument_list|)
expr_stmt|;
block|}
name|state
operator|.
name|type
operator|=
name|_type
expr_stmt|;
name|state
operator|.
name|channel
operator|=
name|_channel
expr_stmt|;
block|}
finally|finally
block|{
comment|// do for sure before leaving
block|}
block|}
comment|// $ANTLR end "AT_COMP_LTE"
comment|// $ANTLR start "AT_COMP_NEQ"
DECL|method|mAT_COMP_NEQ
specifier|public
specifier|final
name|void
name|mAT_COMP_NEQ
parameter_list|()
throws|throws
name|RecognitionException
block|{
try|try
block|{
name|int
name|_type
init|=
name|AT_COMP_NEQ
decl_stmt|;
name|int
name|_channel
init|=
name|DEFAULT_TOKEN_CHANNEL
decl_stmt|;
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:43:13: ( '!=' )
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:43:15: '!='
block|{
name|match
argument_list|(
literal|"!="
argument_list|)
expr_stmt|;
block|}
name|state
operator|.
name|type
operator|=
name|_type
expr_stmt|;
name|state
operator|.
name|channel
operator|=
name|_channel
expr_stmt|;
block|}
finally|finally
block|{
comment|// do for sure before leaving
block|}
block|}
comment|// $ANTLR end "AT_COMP_NEQ"
comment|// $ANTLR start "AT_COND_QUE"
DECL|method|mAT_COND_QUE
specifier|public
specifier|final
name|void
name|mAT_COND_QUE
parameter_list|()
throws|throws
name|RecognitionException
block|{
try|try
block|{
name|int
name|_type
init|=
name|AT_COND_QUE
decl_stmt|;
name|int
name|_channel
init|=
name|DEFAULT_TOKEN_CHANNEL
decl_stmt|;
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:44:13: ( '?' )
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:44:15: '?'
block|{
name|match
argument_list|(
literal|'?'
argument_list|)
expr_stmt|;
block|}
name|state
operator|.
name|type
operator|=
name|_type
expr_stmt|;
name|state
operator|.
name|channel
operator|=
name|_channel
expr_stmt|;
block|}
finally|finally
block|{
comment|// do for sure before leaving
block|}
block|}
comment|// $ANTLR end "AT_COND_QUE"
comment|// $ANTLR start "AT_DIVIDE"
DECL|method|mAT_DIVIDE
specifier|public
specifier|final
name|void
name|mAT_DIVIDE
parameter_list|()
throws|throws
name|RecognitionException
block|{
try|try
block|{
name|int
name|_type
init|=
name|AT_DIVIDE
decl_stmt|;
name|int
name|_channel
init|=
name|DEFAULT_TOKEN_CHANNEL
decl_stmt|;
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:45:11: ( '/' )
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:45:13: '/'
block|{
name|match
argument_list|(
literal|'/'
argument_list|)
expr_stmt|;
block|}
name|state
operator|.
name|type
operator|=
name|_type
expr_stmt|;
name|state
operator|.
name|channel
operator|=
name|_channel
expr_stmt|;
block|}
finally|finally
block|{
comment|// do for sure before leaving
block|}
block|}
comment|// $ANTLR end "AT_DIVIDE"
comment|// $ANTLR start "AT_DOT"
DECL|method|mAT_DOT
specifier|public
specifier|final
name|void
name|mAT_DOT
parameter_list|()
throws|throws
name|RecognitionException
block|{
try|try
block|{
name|int
name|_type
init|=
name|AT_DOT
decl_stmt|;
name|int
name|_channel
init|=
name|DEFAULT_TOKEN_CHANNEL
decl_stmt|;
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:46:8: ( '.' )
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:46:10: '.'
block|{
name|match
argument_list|(
literal|'.'
argument_list|)
expr_stmt|;
block|}
name|state
operator|.
name|type
operator|=
name|_type
expr_stmt|;
name|state
operator|.
name|channel
operator|=
name|_channel
expr_stmt|;
block|}
finally|finally
block|{
comment|// do for sure before leaving
block|}
block|}
comment|// $ANTLR end "AT_DOT"
comment|// $ANTLR start "AT_LPAREN"
DECL|method|mAT_LPAREN
specifier|public
specifier|final
name|void
name|mAT_LPAREN
parameter_list|()
throws|throws
name|RecognitionException
block|{
try|try
block|{
name|int
name|_type
init|=
name|AT_LPAREN
decl_stmt|;
name|int
name|_channel
init|=
name|DEFAULT_TOKEN_CHANNEL
decl_stmt|;
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:47:11: ( '(' )
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:47:13: '('
block|{
name|match
argument_list|(
literal|'('
argument_list|)
expr_stmt|;
block|}
name|state
operator|.
name|type
operator|=
name|_type
expr_stmt|;
name|state
operator|.
name|channel
operator|=
name|_channel
expr_stmt|;
block|}
finally|finally
block|{
comment|// do for sure before leaving
block|}
block|}
comment|// $ANTLR end "AT_LPAREN"
comment|// $ANTLR start "AT_MODULO"
DECL|method|mAT_MODULO
specifier|public
specifier|final
name|void
name|mAT_MODULO
parameter_list|()
throws|throws
name|RecognitionException
block|{
try|try
block|{
name|int
name|_type
init|=
name|AT_MODULO
decl_stmt|;
name|int
name|_channel
init|=
name|DEFAULT_TOKEN_CHANNEL
decl_stmt|;
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:48:11: ( '%' )
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:48:13: '%'
block|{
name|match
argument_list|(
literal|'%'
argument_list|)
expr_stmt|;
block|}
name|state
operator|.
name|type
operator|=
name|_type
expr_stmt|;
name|state
operator|.
name|channel
operator|=
name|_channel
expr_stmt|;
block|}
finally|finally
block|{
comment|// do for sure before leaving
block|}
block|}
comment|// $ANTLR end "AT_MODULO"
comment|// $ANTLR start "AT_MULTIPLY"
DECL|method|mAT_MULTIPLY
specifier|public
specifier|final
name|void
name|mAT_MULTIPLY
parameter_list|()
throws|throws
name|RecognitionException
block|{
try|try
block|{
name|int
name|_type
init|=
name|AT_MULTIPLY
decl_stmt|;
name|int
name|_channel
init|=
name|DEFAULT_TOKEN_CHANNEL
decl_stmt|;
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:49:13: ( '*' )
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:49:15: '*'
block|{
name|match
argument_list|(
literal|'*'
argument_list|)
expr_stmt|;
block|}
name|state
operator|.
name|type
operator|=
name|_type
expr_stmt|;
name|state
operator|.
name|channel
operator|=
name|_channel
expr_stmt|;
block|}
finally|finally
block|{
comment|// do for sure before leaving
block|}
block|}
comment|// $ANTLR end "AT_MULTIPLY"
comment|// $ANTLR start "AT_RPAREN"
DECL|method|mAT_RPAREN
specifier|public
specifier|final
name|void
name|mAT_RPAREN
parameter_list|()
throws|throws
name|RecognitionException
block|{
try|try
block|{
name|int
name|_type
init|=
name|AT_RPAREN
decl_stmt|;
name|int
name|_channel
init|=
name|DEFAULT_TOKEN_CHANNEL
decl_stmt|;
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:50:11: ( ')' )
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:50:13: ')'
block|{
name|match
argument_list|(
literal|')'
argument_list|)
expr_stmt|;
block|}
name|state
operator|.
name|type
operator|=
name|_type
expr_stmt|;
name|state
operator|.
name|channel
operator|=
name|_channel
expr_stmt|;
block|}
finally|finally
block|{
comment|// do for sure before leaving
block|}
block|}
comment|// $ANTLR end "AT_RPAREN"
comment|// $ANTLR start "AT_SUBTRACT"
DECL|method|mAT_SUBTRACT
specifier|public
specifier|final
name|void
name|mAT_SUBTRACT
parameter_list|()
throws|throws
name|RecognitionException
block|{
try|try
block|{
name|int
name|_type
init|=
name|AT_SUBTRACT
decl_stmt|;
name|int
name|_channel
init|=
name|DEFAULT_TOKEN_CHANNEL
decl_stmt|;
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:51:13: ( '-' )
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:51:15: '-'
block|{
name|match
argument_list|(
literal|'-'
argument_list|)
expr_stmt|;
block|}
name|state
operator|.
name|type
operator|=
name|_type
expr_stmt|;
name|state
operator|.
name|channel
operator|=
name|_channel
expr_stmt|;
block|}
finally|finally
block|{
comment|// do for sure before leaving
block|}
block|}
comment|// $ANTLR end "AT_SUBTRACT"
comment|// $ANTLR start "VARIABLE"
DECL|method|mVARIABLE
specifier|public
specifier|final
name|void
name|mVARIABLE
parameter_list|()
throws|throws
name|RecognitionException
block|{
try|try
block|{
name|int
name|_type
init|=
name|VARIABLE
decl_stmt|;
name|int
name|_channel
init|=
name|DEFAULT_TOKEN_CHANNEL
decl_stmt|;
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:334:5: ( OBJECT ( AT_DOT OBJECT )* )
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:334:7: OBJECT ( AT_DOT OBJECT )*
block|{
name|mOBJECT
argument_list|()
expr_stmt|;
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:334:14: ( AT_DOT OBJECT )*
name|loop1
label|:
while|while
condition|(
literal|true
condition|)
block|{
name|int
name|alt1
init|=
literal|2
decl_stmt|;
name|int
name|LA1_0
init|=
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA1_0
operator|==
literal|'.'
operator|)
condition|)
block|{
name|alt1
operator|=
literal|1
expr_stmt|;
block|}
switch|switch
condition|(
name|alt1
condition|)
block|{
case|case
literal|1
case|:
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:334:15: AT_DOT OBJECT
block|{
name|mAT_DOT
argument_list|()
expr_stmt|;
name|mOBJECT
argument_list|()
expr_stmt|;
block|}
break|break;
default|default :
break|break
name|loop1
break|;
block|}
block|}
block|}
name|state
operator|.
name|type
operator|=
name|_type
expr_stmt|;
name|state
operator|.
name|channel
operator|=
name|_channel
expr_stmt|;
block|}
finally|finally
block|{
comment|// do for sure before leaving
block|}
block|}
comment|// $ANTLR end "VARIABLE"
comment|// $ANTLR start "OBJECT"
DECL|method|mOBJECT
specifier|public
specifier|final
name|void
name|mOBJECT
parameter_list|()
throws|throws
name|RecognitionException
block|{
try|try
block|{
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:340:5: ( ID ( ARRAY )* )
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:340:7: ID ( ARRAY )*
block|{
name|mID
argument_list|()
expr_stmt|;
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:340:10: ( ARRAY )*
name|loop2
label|:
while|while
condition|(
literal|true
condition|)
block|{
name|int
name|alt2
init|=
literal|2
decl_stmt|;
name|int
name|LA2_0
init|=
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA2_0
operator|==
literal|'['
operator|)
condition|)
block|{
name|alt2
operator|=
literal|1
expr_stmt|;
block|}
switch|switch
condition|(
name|alt2
condition|)
block|{
case|case
literal|1
case|:
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:340:10: ARRAY
block|{
name|mARRAY
argument_list|()
expr_stmt|;
block|}
break|break;
default|default :
break|break
name|loop2
break|;
block|}
block|}
block|}
block|}
finally|finally
block|{
comment|// do for sure before leaving
block|}
block|}
comment|// $ANTLR end "OBJECT"
comment|// $ANTLR start "ARRAY"
DECL|method|mARRAY
specifier|public
specifier|final
name|void
name|mARRAY
parameter_list|()
throws|throws
name|RecognitionException
block|{
try|try
block|{
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:345:5: ( '[' STRING ']' | '[' DECIMALINTEGER ']' )
name|int
name|alt3
init|=
literal|2
decl_stmt|;
name|int
name|LA3_0
init|=
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA3_0
operator|==
literal|'['
operator|)
condition|)
block|{
name|int
name|LA3_1
init|=
name|input
operator|.
name|LA
argument_list|(
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA3_1
operator|==
literal|'\"'
operator|||
name|LA3_1
operator|==
literal|'\''
operator|)
condition|)
block|{
name|alt3
operator|=
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
operator|(
name|LA3_1
operator|>=
literal|'0'
operator|&&
name|LA3_1
operator|<=
literal|'9'
operator|)
operator|)
condition|)
block|{
name|alt3
operator|=
literal|2
expr_stmt|;
block|}
else|else
block|{
name|int
name|nvaeMark
init|=
name|input
operator|.
name|mark
argument_list|()
decl_stmt|;
try|try
block|{
name|input
operator|.
name|consume
argument_list|()
expr_stmt|;
name|NoViableAltException
name|nvae
init|=
operator|new
name|NoViableAltException
argument_list|(
literal|""
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|,
name|input
argument_list|)
decl_stmt|;
throw|throw
name|nvae
throw|;
block|}
finally|finally
block|{
name|input
operator|.
name|rewind
argument_list|(
name|nvaeMark
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|NoViableAltException
name|nvae
init|=
operator|new
name|NoViableAltException
argument_list|(
literal|""
argument_list|,
literal|3
argument_list|,
literal|0
argument_list|,
name|input
argument_list|)
decl_stmt|;
throw|throw
name|nvae
throw|;
block|}
switch|switch
condition|(
name|alt3
condition|)
block|{
case|case
literal|1
case|:
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:345:7: '[' STRING ']'
block|{
name|match
argument_list|(
literal|'['
argument_list|)
expr_stmt|;
name|mSTRING
argument_list|()
expr_stmt|;
name|match
argument_list|(
literal|']'
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:346:7: '[' DECIMALINTEGER ']'
block|{
name|match
argument_list|(
literal|'['
argument_list|)
expr_stmt|;
name|mDECIMALINTEGER
argument_list|()
expr_stmt|;
name|match
argument_list|(
literal|']'
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
finally|finally
block|{
comment|// do for sure before leaving
block|}
block|}
comment|// $ANTLR end "ARRAY"
comment|// $ANTLR start "ID"
DECL|method|mID
specifier|public
specifier|final
name|void
name|mID
parameter_list|()
throws|throws
name|RecognitionException
block|{
try|try
block|{
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:351:5: ( ( 'a' .. 'z' | 'A' .. 'Z' | '_' | '$' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' | '$' )* )
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:351:7: ( 'a' .. 'z' | 'A' .. 'Z' | '_' | '$' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' | '$' )*
block|{
if|if
condition|(
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|'$'
operator|||
operator|(
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
operator|>=
literal|'A'
operator|&&
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
operator|<=
literal|'Z'
operator|)
operator|||
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|'_'
operator|||
operator|(
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
operator|>=
literal|'a'
operator|&&
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
operator|<=
literal|'z'
operator|)
condition|)
block|{
name|input
operator|.
name|consume
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|MismatchedSetException
name|mse
init|=
operator|new
name|MismatchedSetException
argument_list|(
literal|null
argument_list|,
name|input
argument_list|)
decl_stmt|;
name|recover
argument_list|(
name|mse
argument_list|)
expr_stmt|;
throw|throw
name|mse
throw|;
block|}
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:351:35: ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' | '$' )*
name|loop4
label|:
while|while
condition|(
literal|true
condition|)
block|{
name|int
name|alt4
init|=
literal|2
decl_stmt|;
name|int
name|LA4_0
init|=
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA4_0
operator|==
literal|'$'
operator|||
operator|(
name|LA4_0
operator|>=
literal|'0'
operator|&&
name|LA4_0
operator|<=
literal|'9'
operator|)
operator|||
operator|(
name|LA4_0
operator|>=
literal|'A'
operator|&&
name|LA4_0
operator|<=
literal|'Z'
operator|)
operator|||
name|LA4_0
operator|==
literal|'_'
operator|||
operator|(
name|LA4_0
operator|>=
literal|'a'
operator|&&
name|LA4_0
operator|<=
literal|'z'
operator|)
operator|)
condition|)
block|{
name|alt4
operator|=
literal|1
expr_stmt|;
block|}
switch|switch
condition|(
name|alt4
condition|)
block|{
case|case
literal|1
case|:
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:
block|{
if|if
condition|(
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|'$'
operator|||
operator|(
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
operator|>=
literal|'0'
operator|&&
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
operator|<=
literal|'9'
operator|)
operator|||
operator|(
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
operator|>=
literal|'A'
operator|&&
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
operator|<=
literal|'Z'
operator|)
operator|||
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|'_'
operator|||
operator|(
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
operator|>=
literal|'a'
operator|&&
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
operator|<=
literal|'z'
operator|)
condition|)
block|{
name|input
operator|.
name|consume
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|MismatchedSetException
name|mse
init|=
operator|new
name|MismatchedSetException
argument_list|(
literal|null
argument_list|,
name|input
argument_list|)
decl_stmt|;
name|recover
argument_list|(
name|mse
argument_list|)
expr_stmt|;
throw|throw
name|mse
throw|;
block|}
block|}
break|break;
default|default :
break|break
name|loop4
break|;
block|}
block|}
block|}
block|}
finally|finally
block|{
comment|// do for sure before leaving
block|}
block|}
comment|// $ANTLR end "ID"
comment|// $ANTLR start "STRING"
DECL|method|mSTRING
specifier|public
specifier|final
name|void
name|mSTRING
parameter_list|()
throws|throws
name|RecognitionException
block|{
try|try
block|{
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:356:5: ( '\\'' ( SINGLE_STRING_CHAR )* '\\'' | '\"' ( DOUBLE_STRING_CHAR )* '\"' )
name|int
name|alt7
init|=
literal|2
decl_stmt|;
name|int
name|LA7_0
init|=
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA7_0
operator|==
literal|'\''
operator|)
condition|)
block|{
name|alt7
operator|=
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|LA7_0
operator|==
literal|'\"'
operator|)
condition|)
block|{
name|alt7
operator|=
literal|2
expr_stmt|;
block|}
else|else
block|{
name|NoViableAltException
name|nvae
init|=
operator|new
name|NoViableAltException
argument_list|(
literal|""
argument_list|,
literal|7
argument_list|,
literal|0
argument_list|,
name|input
argument_list|)
decl_stmt|;
throw|throw
name|nvae
throw|;
block|}
switch|switch
condition|(
name|alt7
condition|)
block|{
case|case
literal|1
case|:
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:356:7: '\\'' ( SINGLE_STRING_CHAR )* '\\''
block|{
name|match
argument_list|(
literal|'\''
argument_list|)
expr_stmt|;
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:356:12: ( SINGLE_STRING_CHAR )*
name|loop5
label|:
while|while
condition|(
literal|true
condition|)
block|{
name|int
name|alt5
init|=
literal|2
decl_stmt|;
name|int
name|LA5_0
init|=
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|LA5_0
operator|>=
literal|'\u0000'
operator|&&
name|LA5_0
operator|<=
literal|'&'
operator|)
operator|||
operator|(
name|LA5_0
operator|>=
literal|'('
operator|&&
name|LA5_0
operator|<=
literal|'\uFFFF'
operator|)
operator|)
condition|)
block|{
name|alt5
operator|=
literal|1
expr_stmt|;
block|}
switch|switch
condition|(
name|alt5
condition|)
block|{
case|case
literal|1
case|:
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:356:12: SINGLE_STRING_CHAR
block|{
name|mSINGLE_STRING_CHAR
argument_list|()
expr_stmt|;
block|}
break|break;
default|default :
break|break
name|loop5
break|;
block|}
block|}
name|match
argument_list|(
literal|'\''
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:357:7: '\"' ( DOUBLE_STRING_CHAR )* '\"'
block|{
name|match
argument_list|(
literal|'\"'
argument_list|)
expr_stmt|;
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:357:11: ( DOUBLE_STRING_CHAR )*
name|loop6
label|:
while|while
condition|(
literal|true
condition|)
block|{
name|int
name|alt6
init|=
literal|2
decl_stmt|;
name|int
name|LA6_0
init|=
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|LA6_0
operator|>=
literal|'\u0000'
operator|&&
name|LA6_0
operator|<=
literal|'!'
operator|)
operator|||
operator|(
name|LA6_0
operator|>=
literal|'#'
operator|&&
name|LA6_0
operator|<=
literal|'\uFFFF'
operator|)
operator|)
condition|)
block|{
name|alt6
operator|=
literal|1
expr_stmt|;
block|}
switch|switch
condition|(
name|alt6
condition|)
block|{
case|case
literal|1
case|:
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:357:11: DOUBLE_STRING_CHAR
block|{
name|mDOUBLE_STRING_CHAR
argument_list|()
expr_stmt|;
block|}
break|break;
default|default :
break|break
name|loop6
break|;
block|}
block|}
name|match
argument_list|(
literal|'\"'
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
finally|finally
block|{
comment|// do for sure before leaving
block|}
block|}
comment|// $ANTLR end "STRING"
comment|// $ANTLR start "SINGLE_STRING_CHAR"
DECL|method|mSINGLE_STRING_CHAR
specifier|public
specifier|final
name|void
name|mSINGLE_STRING_CHAR
parameter_list|()
throws|throws
name|RecognitionException
block|{
try|try
block|{
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:362:5: ( '\\\\\\'' | '\\\\\\\\' |~ ( '\\\\' | '\\'' ) )
name|int
name|alt8
init|=
literal|3
decl_stmt|;
name|int
name|LA8_0
init|=
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_0
operator|==
literal|'\\'
operator|)
condition|)
block|{
name|int
name|LA8_1
init|=
name|input
operator|.
name|LA
argument_list|(
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_1
operator|==
literal|'\''
operator|)
condition|)
block|{
name|alt8
operator|=
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|LA8_1
operator|==
literal|'\\'
operator|)
condition|)
block|{
name|alt8
operator|=
literal|2
expr_stmt|;
block|}
else|else
block|{
name|int
name|nvaeMark
init|=
name|input
operator|.
name|mark
argument_list|()
decl_stmt|;
try|try
block|{
name|input
operator|.
name|consume
argument_list|()
expr_stmt|;
name|NoViableAltException
name|nvae
init|=
operator|new
name|NoViableAltException
argument_list|(
literal|""
argument_list|,
literal|8
argument_list|,
literal|1
argument_list|,
name|input
argument_list|)
decl_stmt|;
throw|throw
name|nvae
throw|;
block|}
finally|finally
block|{
name|input
operator|.
name|rewind
argument_list|(
name|nvaeMark
argument_list|)
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
operator|(
operator|(
name|LA8_0
operator|>=
literal|'\u0000'
operator|&&
name|LA8_0
operator|<=
literal|'&'
operator|)
operator|||
operator|(
name|LA8_0
operator|>=
literal|'('
operator|&&
name|LA8_0
operator|<=
literal|'['
operator|)
operator|||
operator|(
name|LA8_0
operator|>=
literal|']'
operator|&&
name|LA8_0
operator|<=
literal|'\uFFFF'
operator|)
operator|)
condition|)
block|{
name|alt8
operator|=
literal|3
expr_stmt|;
block|}
else|else
block|{
name|NoViableAltException
name|nvae
init|=
operator|new
name|NoViableAltException
argument_list|(
literal|""
argument_list|,
literal|8
argument_list|,
literal|0
argument_list|,
name|input
argument_list|)
decl_stmt|;
throw|throw
name|nvae
throw|;
block|}
switch|switch
condition|(
name|alt8
condition|)
block|{
case|case
literal|1
case|:
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:362:7: '\\\\\\''
block|{
name|match
argument_list|(
literal|"\\'"
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:363:7: '\\\\\\\\'
block|{
name|match
argument_list|(
literal|"\\\\"
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|3
case|:
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:364:7: ~ ( '\\\\' | '\\'' )
block|{
if|if
condition|(
operator|(
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
operator|>=
literal|'\u0000'
operator|&&
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
operator|<=
literal|'&'
operator|)
operator|||
operator|(
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
operator|>=
literal|'('
operator|&&
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
operator|<=
literal|'['
operator|)
operator|||
operator|(
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
operator|>=
literal|']'
operator|&&
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
operator|<=
literal|'\uFFFF'
operator|)
condition|)
block|{
name|input
operator|.
name|consume
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|MismatchedSetException
name|mse
init|=
operator|new
name|MismatchedSetException
argument_list|(
literal|null
argument_list|,
name|input
argument_list|)
decl_stmt|;
name|recover
argument_list|(
name|mse
argument_list|)
expr_stmt|;
throw|throw
name|mse
throw|;
block|}
block|}
break|break;
block|}
block|}
finally|finally
block|{
comment|// do for sure before leaving
block|}
block|}
comment|// $ANTLR end "SINGLE_STRING_CHAR"
comment|// $ANTLR start "DOUBLE_STRING_CHAR"
DECL|method|mDOUBLE_STRING_CHAR
specifier|public
specifier|final
name|void
name|mDOUBLE_STRING_CHAR
parameter_list|()
throws|throws
name|RecognitionException
block|{
try|try
block|{
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:369:5: ( '\\\\\"' | '\\\\\\\\' |~ ( '\\\\' | '\"' ) )
name|int
name|alt9
init|=
literal|3
decl_stmt|;
name|int
name|LA9_0
init|=
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA9_0
operator|==
literal|'\\'
operator|)
condition|)
block|{
name|int
name|LA9_1
init|=
name|input
operator|.
name|LA
argument_list|(
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA9_1
operator|==
literal|'\"'
operator|)
condition|)
block|{
name|alt9
operator|=
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|LA9_1
operator|==
literal|'\\'
operator|)
condition|)
block|{
name|alt9
operator|=
literal|2
expr_stmt|;
block|}
else|else
block|{
name|int
name|nvaeMark
init|=
name|input
operator|.
name|mark
argument_list|()
decl_stmt|;
try|try
block|{
name|input
operator|.
name|consume
argument_list|()
expr_stmt|;
name|NoViableAltException
name|nvae
init|=
operator|new
name|NoViableAltException
argument_list|(
literal|""
argument_list|,
literal|9
argument_list|,
literal|1
argument_list|,
name|input
argument_list|)
decl_stmt|;
throw|throw
name|nvae
throw|;
block|}
finally|finally
block|{
name|input
operator|.
name|rewind
argument_list|(
name|nvaeMark
argument_list|)
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
operator|(
operator|(
name|LA9_0
operator|>=
literal|'\u0000'
operator|&&
name|LA9_0
operator|<=
literal|'!'
operator|)
operator|||
operator|(
name|LA9_0
operator|>=
literal|'#'
operator|&&
name|LA9_0
operator|<=
literal|'['
operator|)
operator|||
operator|(
name|LA9_0
operator|>=
literal|']'
operator|&&
name|LA9_0
operator|<=
literal|'\uFFFF'
operator|)
operator|)
condition|)
block|{
name|alt9
operator|=
literal|3
expr_stmt|;
block|}
else|else
block|{
name|NoViableAltException
name|nvae
init|=
operator|new
name|NoViableAltException
argument_list|(
literal|""
argument_list|,
literal|9
argument_list|,
literal|0
argument_list|,
name|input
argument_list|)
decl_stmt|;
throw|throw
name|nvae
throw|;
block|}
switch|switch
condition|(
name|alt9
condition|)
block|{
case|case
literal|1
case|:
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:369:7: '\\\\\"'
block|{
name|match
argument_list|(
literal|"\\\""
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:370:7: '\\\\\\\\'
block|{
name|match
argument_list|(
literal|"\\\\"
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|3
case|:
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:371:7: ~ ( '\\\\' | '\"' )
block|{
if|if
condition|(
operator|(
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
operator|>=
literal|'\u0000'
operator|&&
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
operator|<=
literal|'!'
operator|)
operator|||
operator|(
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
operator|>=
literal|'#'
operator|&&
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
operator|<=
literal|'['
operator|)
operator|||
operator|(
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
operator|>=
literal|']'
operator|&&
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
operator|<=
literal|'\uFFFF'
operator|)
condition|)
block|{
name|input
operator|.
name|consume
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|MismatchedSetException
name|mse
init|=
operator|new
name|MismatchedSetException
argument_list|(
literal|null
argument_list|,
name|input
argument_list|)
decl_stmt|;
name|recover
argument_list|(
name|mse
argument_list|)
expr_stmt|;
throw|throw
name|mse
throw|;
block|}
block|}
break|break;
block|}
block|}
finally|finally
block|{
comment|// do for sure before leaving
block|}
block|}
comment|// $ANTLR end "DOUBLE_STRING_CHAR"
comment|// $ANTLR start "WS"
DECL|method|mWS
specifier|public
specifier|final
name|void
name|mWS
parameter_list|()
throws|throws
name|RecognitionException
block|{
try|try
block|{
name|int
name|_type
init|=
name|WS
decl_stmt|;
name|int
name|_channel
init|=
name|DEFAULT_TOKEN_CHANNEL
decl_stmt|;
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:374:5: ( ( ' ' | '\\t' | '\\n' | '\\r' )+ )
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:374:7: ( ' ' | '\\t' | '\\n' | '\\r' )+
block|{
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:374:7: ( ' ' | '\\t' | '\\n' | '\\r' )+
name|int
name|cnt10
init|=
literal|0
decl_stmt|;
name|loop10
label|:
while|while
condition|(
literal|true
condition|)
block|{
name|int
name|alt10
init|=
literal|2
decl_stmt|;
name|int
name|LA10_0
init|=
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|LA10_0
operator|>=
literal|'\t'
operator|&&
name|LA10_0
operator|<=
literal|'\n'
operator|)
operator|||
name|LA10_0
operator|==
literal|'\r'
operator|||
name|LA10_0
operator|==
literal|' '
operator|)
condition|)
block|{
name|alt10
operator|=
literal|1
expr_stmt|;
block|}
switch|switch
condition|(
name|alt10
condition|)
block|{
case|case
literal|1
case|:
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:
block|{
if|if
condition|(
operator|(
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
operator|>=
literal|'\t'
operator|&&
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
operator|<=
literal|'\n'
operator|)
operator|||
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|'\r'
operator|||
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|' '
condition|)
block|{
name|input
operator|.
name|consume
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|MismatchedSetException
name|mse
init|=
operator|new
name|MismatchedSetException
argument_list|(
literal|null
argument_list|,
name|input
argument_list|)
decl_stmt|;
name|recover
argument_list|(
name|mse
argument_list|)
expr_stmt|;
throw|throw
name|mse
throw|;
block|}
block|}
break|break;
default|default :
if|if
condition|(
name|cnt10
operator|>=
literal|1
condition|)
break|break
name|loop10
break|;
name|EarlyExitException
name|eee
init|=
operator|new
name|EarlyExitException
argument_list|(
literal|10
argument_list|,
name|input
argument_list|)
decl_stmt|;
throw|throw
name|eee
throw|;
block|}
name|cnt10
operator|++
expr_stmt|;
block|}
name|skip
argument_list|()
expr_stmt|;
block|}
name|state
operator|.
name|type
operator|=
name|_type
expr_stmt|;
name|state
operator|.
name|channel
operator|=
name|_channel
expr_stmt|;
block|}
finally|finally
block|{
comment|// do for sure before leaving
block|}
block|}
comment|// $ANTLR end "WS"
comment|// $ANTLR start "DECIMAL"
DECL|method|mDECIMAL
specifier|public
specifier|final
name|void
name|mDECIMAL
parameter_list|()
throws|throws
name|RecognitionException
block|{
try|try
block|{
name|int
name|_type
init|=
name|DECIMAL
decl_stmt|;
name|int
name|_channel
init|=
name|DEFAULT_TOKEN_CHANNEL
decl_stmt|;
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:378:5: ( DECIMALINTEGER AT_DOT ( DECIMALDIGIT )* ( EXPONENT )? | AT_DOT ( DECIMALDIGIT )+ ( EXPONENT )? | DECIMALINTEGER ( EXPONENT )? )
name|int
name|alt16
init|=
literal|3
decl_stmt|;
name|alt16
operator|=
name|dfa16
operator|.
name|predict
argument_list|(
name|input
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|alt16
condition|)
block|{
case|case
literal|1
case|:
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:378:7: DECIMALINTEGER AT_DOT ( DECIMALDIGIT )* ( EXPONENT )?
block|{
name|mDECIMALINTEGER
argument_list|()
expr_stmt|;
name|mAT_DOT
argument_list|()
expr_stmt|;
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:378:29: ( DECIMALDIGIT )*
name|loop11
label|:
while|while
condition|(
literal|true
condition|)
block|{
name|int
name|alt11
init|=
literal|2
decl_stmt|;
name|int
name|LA11_0
init|=
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|LA11_0
operator|>=
literal|'0'
operator|&&
name|LA11_0
operator|<=
literal|'9'
operator|)
operator|)
condition|)
block|{
name|alt11
operator|=
literal|1
expr_stmt|;
block|}
switch|switch
condition|(
name|alt11
condition|)
block|{
case|case
literal|1
case|:
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:
block|{
if|if
condition|(
operator|(
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
operator|>=
literal|'0'
operator|&&
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
operator|<=
literal|'9'
operator|)
condition|)
block|{
name|input
operator|.
name|consume
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|MismatchedSetException
name|mse
init|=
operator|new
name|MismatchedSetException
argument_list|(
literal|null
argument_list|,
name|input
argument_list|)
decl_stmt|;
name|recover
argument_list|(
name|mse
argument_list|)
expr_stmt|;
throw|throw
name|mse
throw|;
block|}
block|}
break|break;
default|default :
break|break
name|loop11
break|;
block|}
block|}
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:378:43: ( EXPONENT )?
name|int
name|alt12
init|=
literal|2
decl_stmt|;
name|int
name|LA12_0
init|=
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA12_0
operator|==
literal|'E'
operator|||
name|LA12_0
operator|==
literal|'e'
operator|)
condition|)
block|{
name|alt12
operator|=
literal|1
expr_stmt|;
block|}
switch|switch
condition|(
name|alt12
condition|)
block|{
case|case
literal|1
case|:
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:378:43: EXPONENT
block|{
name|mEXPONENT
argument_list|()
expr_stmt|;
block|}
break|break;
block|}
block|}
break|break;
case|case
literal|2
case|:
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:379:7: AT_DOT ( DECIMALDIGIT )+ ( EXPONENT )?
block|{
name|mAT_DOT
argument_list|()
expr_stmt|;
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:379:14: ( DECIMALDIGIT )+
name|int
name|cnt13
init|=
literal|0
decl_stmt|;
name|loop13
label|:
while|while
condition|(
literal|true
condition|)
block|{
name|int
name|alt13
init|=
literal|2
decl_stmt|;
name|int
name|LA13_0
init|=
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|LA13_0
operator|>=
literal|'0'
operator|&&
name|LA13_0
operator|<=
literal|'9'
operator|)
operator|)
condition|)
block|{
name|alt13
operator|=
literal|1
expr_stmt|;
block|}
switch|switch
condition|(
name|alt13
condition|)
block|{
case|case
literal|1
case|:
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:
block|{
if|if
condition|(
operator|(
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
operator|>=
literal|'0'
operator|&&
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
operator|<=
literal|'9'
operator|)
condition|)
block|{
name|input
operator|.
name|consume
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|MismatchedSetException
name|mse
init|=
operator|new
name|MismatchedSetException
argument_list|(
literal|null
argument_list|,
name|input
argument_list|)
decl_stmt|;
name|recover
argument_list|(
name|mse
argument_list|)
expr_stmt|;
throw|throw
name|mse
throw|;
block|}
block|}
break|break;
default|default :
if|if
condition|(
name|cnt13
operator|>=
literal|1
condition|)
break|break
name|loop13
break|;
name|EarlyExitException
name|eee
init|=
operator|new
name|EarlyExitException
argument_list|(
literal|13
argument_list|,
name|input
argument_list|)
decl_stmt|;
throw|throw
name|eee
throw|;
block|}
name|cnt13
operator|++
expr_stmt|;
block|}
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:379:28: ( EXPONENT )?
name|int
name|alt14
init|=
literal|2
decl_stmt|;
name|int
name|LA14_0
init|=
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA14_0
operator|==
literal|'E'
operator|||
name|LA14_0
operator|==
literal|'e'
operator|)
condition|)
block|{
name|alt14
operator|=
literal|1
expr_stmt|;
block|}
switch|switch
condition|(
name|alt14
condition|)
block|{
case|case
literal|1
case|:
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:379:28: EXPONENT
block|{
name|mEXPONENT
argument_list|()
expr_stmt|;
block|}
break|break;
block|}
block|}
break|break;
case|case
literal|3
case|:
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:380:7: DECIMALINTEGER ( EXPONENT )?
block|{
name|mDECIMALINTEGER
argument_list|()
expr_stmt|;
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:380:22: ( EXPONENT )?
name|int
name|alt15
init|=
literal|2
decl_stmt|;
name|int
name|LA15_0
init|=
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA15_0
operator|==
literal|'E'
operator|||
name|LA15_0
operator|==
literal|'e'
operator|)
condition|)
block|{
name|alt15
operator|=
literal|1
expr_stmt|;
block|}
switch|switch
condition|(
name|alt15
condition|)
block|{
case|case
literal|1
case|:
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:380:22: EXPONENT
block|{
name|mEXPONENT
argument_list|()
expr_stmt|;
block|}
break|break;
block|}
block|}
break|break;
block|}
name|state
operator|.
name|type
operator|=
name|_type
expr_stmt|;
name|state
operator|.
name|channel
operator|=
name|_channel
expr_stmt|;
block|}
finally|finally
block|{
comment|// do for sure before leaving
block|}
block|}
comment|// $ANTLR end "DECIMAL"
comment|// $ANTLR start "OCTAL"
DECL|method|mOCTAL
specifier|public
specifier|final
name|void
name|mOCTAL
parameter_list|()
throws|throws
name|RecognitionException
block|{
try|try
block|{
name|int
name|_type
init|=
name|OCTAL
decl_stmt|;
name|int
name|_channel
init|=
name|DEFAULT_TOKEN_CHANNEL
decl_stmt|;
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:384:5: ( '0' ( OCTALDIGIT )+ )
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:384:7: '0' ( OCTALDIGIT )+
block|{
name|match
argument_list|(
literal|'0'
argument_list|)
expr_stmt|;
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:384:11: ( OCTALDIGIT )+
name|int
name|cnt17
init|=
literal|0
decl_stmt|;
name|loop17
label|:
while|while
condition|(
literal|true
condition|)
block|{
name|int
name|alt17
init|=
literal|2
decl_stmt|;
name|int
name|LA17_0
init|=
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|LA17_0
operator|>=
literal|'0'
operator|&&
name|LA17_0
operator|<=
literal|'7'
operator|)
operator|)
condition|)
block|{
name|alt17
operator|=
literal|1
expr_stmt|;
block|}
switch|switch
condition|(
name|alt17
condition|)
block|{
case|case
literal|1
case|:
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:
block|{
if|if
condition|(
operator|(
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
operator|>=
literal|'0'
operator|&&
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
operator|<=
literal|'7'
operator|)
condition|)
block|{
name|input
operator|.
name|consume
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|MismatchedSetException
name|mse
init|=
operator|new
name|MismatchedSetException
argument_list|(
literal|null
argument_list|,
name|input
argument_list|)
decl_stmt|;
name|recover
argument_list|(
name|mse
argument_list|)
expr_stmt|;
throw|throw
name|mse
throw|;
block|}
block|}
break|break;
default|default :
if|if
condition|(
name|cnt17
operator|>=
literal|1
condition|)
break|break
name|loop17
break|;
name|EarlyExitException
name|eee
init|=
operator|new
name|EarlyExitException
argument_list|(
literal|17
argument_list|,
name|input
argument_list|)
decl_stmt|;
throw|throw
name|eee
throw|;
block|}
name|cnt17
operator|++
expr_stmt|;
block|}
block|}
name|state
operator|.
name|type
operator|=
name|_type
expr_stmt|;
name|state
operator|.
name|channel
operator|=
name|_channel
expr_stmt|;
block|}
finally|finally
block|{
comment|// do for sure before leaving
block|}
block|}
comment|// $ANTLR end "OCTAL"
comment|// $ANTLR start "HEX"
DECL|method|mHEX
specifier|public
specifier|final
name|void
name|mHEX
parameter_list|()
throws|throws
name|RecognitionException
block|{
try|try
block|{
name|int
name|_type
init|=
name|HEX
decl_stmt|;
name|int
name|_channel
init|=
name|DEFAULT_TOKEN_CHANNEL
decl_stmt|;
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:388:5: ( ( '0x' | '0X' ) ( HEXDIGIT )+ )
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:388:7: ( '0x' | '0X' ) ( HEXDIGIT )+
block|{
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:388:7: ( '0x' | '0X' )
name|int
name|alt18
init|=
literal|2
decl_stmt|;
name|int
name|LA18_0
init|=
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA18_0
operator|==
literal|'0'
operator|)
condition|)
block|{
name|int
name|LA18_1
init|=
name|input
operator|.
name|LA
argument_list|(
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA18_1
operator|==
literal|'x'
operator|)
condition|)
block|{
name|alt18
operator|=
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|LA18_1
operator|==
literal|'X'
operator|)
condition|)
block|{
name|alt18
operator|=
literal|2
expr_stmt|;
block|}
else|else
block|{
name|int
name|nvaeMark
init|=
name|input
operator|.
name|mark
argument_list|()
decl_stmt|;
try|try
block|{
name|input
operator|.
name|consume
argument_list|()
expr_stmt|;
name|NoViableAltException
name|nvae
init|=
operator|new
name|NoViableAltException
argument_list|(
literal|""
argument_list|,
literal|18
argument_list|,
literal|1
argument_list|,
name|input
argument_list|)
decl_stmt|;
throw|throw
name|nvae
throw|;
block|}
finally|finally
block|{
name|input
operator|.
name|rewind
argument_list|(
name|nvaeMark
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|NoViableAltException
name|nvae
init|=
operator|new
name|NoViableAltException
argument_list|(
literal|""
argument_list|,
literal|18
argument_list|,
literal|0
argument_list|,
name|input
argument_list|)
decl_stmt|;
throw|throw
name|nvae
throw|;
block|}
switch|switch
condition|(
name|alt18
condition|)
block|{
case|case
literal|1
case|:
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:388:8: '0x'
block|{
name|match
argument_list|(
literal|"0x"
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:388:13: '0X'
block|{
name|match
argument_list|(
literal|"0X"
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:388:19: ( HEXDIGIT )+
name|int
name|cnt19
init|=
literal|0
decl_stmt|;
name|loop19
label|:
while|while
condition|(
literal|true
condition|)
block|{
name|int
name|alt19
init|=
literal|2
decl_stmt|;
name|int
name|LA19_0
init|=
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|LA19_0
operator|>=
literal|'0'
operator|&&
name|LA19_0
operator|<=
literal|'9'
operator|)
operator|||
operator|(
name|LA19_0
operator|>=
literal|'A'
operator|&&
name|LA19_0
operator|<=
literal|'F'
operator|)
operator|||
operator|(
name|LA19_0
operator|>=
literal|'a'
operator|&&
name|LA19_0
operator|<=
literal|'f'
operator|)
operator|)
condition|)
block|{
name|alt19
operator|=
literal|1
expr_stmt|;
block|}
switch|switch
condition|(
name|alt19
condition|)
block|{
case|case
literal|1
case|:
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:
block|{
if|if
condition|(
operator|(
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
operator|>=
literal|'0'
operator|&&
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
operator|<=
literal|'9'
operator|)
operator|||
operator|(
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
operator|>=
literal|'A'
operator|&&
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
operator|<=
literal|'F'
operator|)
operator|||
operator|(
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
operator|>=
literal|'a'
operator|&&
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
operator|<=
literal|'f'
operator|)
condition|)
block|{
name|input
operator|.
name|consume
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|MismatchedSetException
name|mse
init|=
operator|new
name|MismatchedSetException
argument_list|(
literal|null
argument_list|,
name|input
argument_list|)
decl_stmt|;
name|recover
argument_list|(
name|mse
argument_list|)
expr_stmt|;
throw|throw
name|mse
throw|;
block|}
block|}
break|break;
default|default :
if|if
condition|(
name|cnt19
operator|>=
literal|1
condition|)
break|break
name|loop19
break|;
name|EarlyExitException
name|eee
init|=
operator|new
name|EarlyExitException
argument_list|(
literal|19
argument_list|,
name|input
argument_list|)
decl_stmt|;
throw|throw
name|eee
throw|;
block|}
name|cnt19
operator|++
expr_stmt|;
block|}
block|}
name|state
operator|.
name|type
operator|=
name|_type
expr_stmt|;
name|state
operator|.
name|channel
operator|=
name|_channel
expr_stmt|;
block|}
finally|finally
block|{
comment|// do for sure before leaving
block|}
block|}
comment|// $ANTLR end "HEX"
comment|// $ANTLR start "DECIMALINTEGER"
DECL|method|mDECIMALINTEGER
specifier|public
specifier|final
name|void
name|mDECIMALINTEGER
parameter_list|()
throws|throws
name|RecognitionException
block|{
try|try
block|{
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:394:5: ( '0' | '1' .. '9' ( DECIMALDIGIT )* )
name|int
name|alt21
init|=
literal|2
decl_stmt|;
name|int
name|LA21_0
init|=
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA21_0
operator|==
literal|'0'
operator|)
condition|)
block|{
name|alt21
operator|=
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
operator|(
name|LA21_0
operator|>=
literal|'1'
operator|&&
name|LA21_0
operator|<=
literal|'9'
operator|)
operator|)
condition|)
block|{
name|alt21
operator|=
literal|2
expr_stmt|;
block|}
else|else
block|{
name|NoViableAltException
name|nvae
init|=
operator|new
name|NoViableAltException
argument_list|(
literal|""
argument_list|,
literal|21
argument_list|,
literal|0
argument_list|,
name|input
argument_list|)
decl_stmt|;
throw|throw
name|nvae
throw|;
block|}
switch|switch
condition|(
name|alt21
condition|)
block|{
case|case
literal|1
case|:
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:394:7: '0'
block|{
name|match
argument_list|(
literal|'0'
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:395:7: '1' .. '9' ( DECIMALDIGIT )*
block|{
name|matchRange
argument_list|(
literal|'1'
argument_list|,
literal|'9'
argument_list|)
expr_stmt|;
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:395:16: ( DECIMALDIGIT )*
name|loop20
label|:
while|while
condition|(
literal|true
condition|)
block|{
name|int
name|alt20
init|=
literal|2
decl_stmt|;
name|int
name|LA20_0
init|=
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|LA20_0
operator|>=
literal|'0'
operator|&&
name|LA20_0
operator|<=
literal|'9'
operator|)
operator|)
condition|)
block|{
name|alt20
operator|=
literal|1
expr_stmt|;
block|}
switch|switch
condition|(
name|alt20
condition|)
block|{
case|case
literal|1
case|:
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:
block|{
if|if
condition|(
operator|(
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
operator|>=
literal|'0'
operator|&&
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
operator|<=
literal|'9'
operator|)
condition|)
block|{
name|input
operator|.
name|consume
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|MismatchedSetException
name|mse
init|=
operator|new
name|MismatchedSetException
argument_list|(
literal|null
argument_list|,
name|input
argument_list|)
decl_stmt|;
name|recover
argument_list|(
name|mse
argument_list|)
expr_stmt|;
throw|throw
name|mse
throw|;
block|}
block|}
break|break;
default|default :
break|break
name|loop20
break|;
block|}
block|}
block|}
break|break;
block|}
block|}
finally|finally
block|{
comment|// do for sure before leaving
block|}
block|}
comment|// $ANTLR end "DECIMALINTEGER"
comment|// $ANTLR start "EXPONENT"
DECL|method|mEXPONENT
specifier|public
specifier|final
name|void
name|mEXPONENT
parameter_list|()
throws|throws
name|RecognitionException
block|{
try|try
block|{
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:400:5: ( ( 'e' | 'E' ) ( '+' | '-' )? ( DECIMALDIGIT )+ )
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:400:7: ( 'e' | 'E' ) ( '+' | '-' )? ( DECIMALDIGIT )+
block|{
if|if
condition|(
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|'E'
operator|||
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|'e'
condition|)
block|{
name|input
operator|.
name|consume
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|MismatchedSetException
name|mse
init|=
operator|new
name|MismatchedSetException
argument_list|(
literal|null
argument_list|,
name|input
argument_list|)
decl_stmt|;
name|recover
argument_list|(
name|mse
argument_list|)
expr_stmt|;
throw|throw
name|mse
throw|;
block|}
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:400:17: ( '+' | '-' )?
name|int
name|alt22
init|=
literal|2
decl_stmt|;
name|int
name|LA22_0
init|=
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA22_0
operator|==
literal|'+'
operator|||
name|LA22_0
operator|==
literal|'-'
operator|)
condition|)
block|{
name|alt22
operator|=
literal|1
expr_stmt|;
block|}
switch|switch
condition|(
name|alt22
condition|)
block|{
case|case
literal|1
case|:
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:
block|{
if|if
condition|(
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|'+'
operator|||
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|'-'
condition|)
block|{
name|input
operator|.
name|consume
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|MismatchedSetException
name|mse
init|=
operator|new
name|MismatchedSetException
argument_list|(
literal|null
argument_list|,
name|input
argument_list|)
decl_stmt|;
name|recover
argument_list|(
name|mse
argument_list|)
expr_stmt|;
throw|throw
name|mse
throw|;
block|}
block|}
break|break;
block|}
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:400:28: ( DECIMALDIGIT )+
name|int
name|cnt23
init|=
literal|0
decl_stmt|;
name|loop23
label|:
while|while
condition|(
literal|true
condition|)
block|{
name|int
name|alt23
init|=
literal|2
decl_stmt|;
name|int
name|LA23_0
init|=
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|LA23_0
operator|>=
literal|'0'
operator|&&
name|LA23_0
operator|<=
literal|'9'
operator|)
operator|)
condition|)
block|{
name|alt23
operator|=
literal|1
expr_stmt|;
block|}
switch|switch
condition|(
name|alt23
condition|)
block|{
case|case
literal|1
case|:
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:
block|{
if|if
condition|(
operator|(
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
operator|>=
literal|'0'
operator|&&
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
operator|<=
literal|'9'
operator|)
condition|)
block|{
name|input
operator|.
name|consume
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|MismatchedSetException
name|mse
init|=
operator|new
name|MismatchedSetException
argument_list|(
literal|null
argument_list|,
name|input
argument_list|)
decl_stmt|;
name|recover
argument_list|(
name|mse
argument_list|)
expr_stmt|;
throw|throw
name|mse
throw|;
block|}
block|}
break|break;
default|default :
if|if
condition|(
name|cnt23
operator|>=
literal|1
condition|)
break|break
name|loop23
break|;
name|EarlyExitException
name|eee
init|=
operator|new
name|EarlyExitException
argument_list|(
literal|23
argument_list|,
name|input
argument_list|)
decl_stmt|;
throw|throw
name|eee
throw|;
block|}
name|cnt23
operator|++
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
comment|// do for sure before leaving
block|}
block|}
comment|// $ANTLR end "EXPONENT"
comment|// $ANTLR start "DECIMALDIGIT"
DECL|method|mDECIMALDIGIT
specifier|public
specifier|final
name|void
name|mDECIMALDIGIT
parameter_list|()
throws|throws
name|RecognitionException
block|{
try|try
block|{
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:405:5: ( '0' .. '9' )
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:
block|{
if|if
condition|(
operator|(
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
operator|>=
literal|'0'
operator|&&
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
operator|<=
literal|'9'
operator|)
condition|)
block|{
name|input
operator|.
name|consume
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|MismatchedSetException
name|mse
init|=
operator|new
name|MismatchedSetException
argument_list|(
literal|null
argument_list|,
name|input
argument_list|)
decl_stmt|;
name|recover
argument_list|(
name|mse
argument_list|)
expr_stmt|;
throw|throw
name|mse
throw|;
block|}
block|}
block|}
finally|finally
block|{
comment|// do for sure before leaving
block|}
block|}
comment|// $ANTLR end "DECIMALDIGIT"
comment|// $ANTLR start "HEXDIGIT"
DECL|method|mHEXDIGIT
specifier|public
specifier|final
name|void
name|mHEXDIGIT
parameter_list|()
throws|throws
name|RecognitionException
block|{
try|try
block|{
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:410:5: ( DECIMALDIGIT | 'a' .. 'f' | 'A' .. 'F' )
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:
block|{
if|if
condition|(
operator|(
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
operator|>=
literal|'0'
operator|&&
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
operator|<=
literal|'9'
operator|)
operator|||
operator|(
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
operator|>=
literal|'A'
operator|&&
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
operator|<=
literal|'F'
operator|)
operator|||
operator|(
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
operator|>=
literal|'a'
operator|&&
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
operator|<=
literal|'f'
operator|)
condition|)
block|{
name|input
operator|.
name|consume
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|MismatchedSetException
name|mse
init|=
operator|new
name|MismatchedSetException
argument_list|(
literal|null
argument_list|,
name|input
argument_list|)
decl_stmt|;
name|recover
argument_list|(
name|mse
argument_list|)
expr_stmt|;
throw|throw
name|mse
throw|;
block|}
block|}
block|}
finally|finally
block|{
comment|// do for sure before leaving
block|}
block|}
comment|// $ANTLR end "HEXDIGIT"
comment|// $ANTLR start "OCTALDIGIT"
DECL|method|mOCTALDIGIT
specifier|public
specifier|final
name|void
name|mOCTALDIGIT
parameter_list|()
throws|throws
name|RecognitionException
block|{
try|try
block|{
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:417:5: ( '0' .. '7' )
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:
block|{
if|if
condition|(
operator|(
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
operator|>=
literal|'0'
operator|&&
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
operator|<=
literal|'7'
operator|)
condition|)
block|{
name|input
operator|.
name|consume
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|MismatchedSetException
name|mse
init|=
operator|new
name|MismatchedSetException
argument_list|(
literal|null
argument_list|,
name|input
argument_list|)
decl_stmt|;
name|recover
argument_list|(
name|mse
argument_list|)
expr_stmt|;
throw|throw
name|mse
throw|;
block|}
block|}
block|}
finally|finally
block|{
comment|// do for sure before leaving
block|}
block|}
comment|// $ANTLR end "OCTALDIGIT"
annotation|@
name|Override
DECL|method|mTokens
specifier|public
name|void
name|mTokens
parameter_list|()
throws|throws
name|RecognitionException
block|{
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:1:8: ( AT_ADD | AT_BIT_AND | AT_BIT_NOT | AT_BIT_OR | AT_BIT_SHL | AT_BIT_SHR | AT_BIT_SHU | AT_BIT_XOR | AT_BOOL_AND | AT_BOOL_NOT | AT_BOOL_OR | AT_COLON | AT_COMMA | AT_COMP_EQ | AT_COMP_GT | AT_COMP_GTE | AT_COMP_LT | AT_COMP_LTE | AT_COMP_NEQ | AT_COND_QUE | AT_DIVIDE | AT_DOT | AT_LPAREN | AT_MODULO | AT_MULTIPLY | AT_RPAREN | AT_SUBTRACT | VARIABLE | WS | DECIMAL | OCTAL | HEX )
name|int
name|alt24
init|=
literal|32
decl_stmt|;
switch|switch
condition|(
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
literal|'+'
case|:
block|{
name|alt24
operator|=
literal|1
expr_stmt|;
block|}
break|break;
case|case
literal|'&'
case|:
block|{
name|int
name|LA24_2
init|=
name|input
operator|.
name|LA
argument_list|(
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA24_2
operator|==
literal|'&'
operator|)
condition|)
block|{
name|alt24
operator|=
literal|9
expr_stmt|;
block|}
else|else
block|{
name|alt24
operator|=
literal|2
expr_stmt|;
block|}
block|}
break|break;
case|case
literal|'~'
case|:
block|{
name|alt24
operator|=
literal|3
expr_stmt|;
block|}
break|break;
case|case
literal|'|'
case|:
block|{
name|int
name|LA24_4
init|=
name|input
operator|.
name|LA
argument_list|(
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA24_4
operator|==
literal|'|'
operator|)
condition|)
block|{
name|alt24
operator|=
literal|11
expr_stmt|;
block|}
else|else
block|{
name|alt24
operator|=
literal|4
expr_stmt|;
block|}
block|}
break|break;
case|case
literal|'<'
case|:
block|{
switch|switch
condition|(
name|input
operator|.
name|LA
argument_list|(
literal|2
argument_list|)
condition|)
block|{
case|case
literal|'<'
case|:
block|{
name|alt24
operator|=
literal|5
expr_stmt|;
block|}
break|break;
case|case
literal|'='
case|:
block|{
name|alt24
operator|=
literal|18
expr_stmt|;
block|}
break|break;
default|default:
name|alt24
operator|=
literal|17
expr_stmt|;
block|}
block|}
break|break;
case|case
literal|'>'
case|:
block|{
switch|switch
condition|(
name|input
operator|.
name|LA
argument_list|(
literal|2
argument_list|)
condition|)
block|{
case|case
literal|'>'
case|:
block|{
name|int
name|LA24_31
init|=
name|input
operator|.
name|LA
argument_list|(
literal|3
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA24_31
operator|==
literal|'>'
operator|)
condition|)
block|{
name|alt24
operator|=
literal|7
expr_stmt|;
block|}
else|else
block|{
name|alt24
operator|=
literal|6
expr_stmt|;
block|}
block|}
break|break;
case|case
literal|'='
case|:
block|{
name|alt24
operator|=
literal|16
expr_stmt|;
block|}
break|break;
default|default:
name|alt24
operator|=
literal|15
expr_stmt|;
block|}
block|}
break|break;
case|case
literal|'^'
case|:
block|{
name|alt24
operator|=
literal|8
expr_stmt|;
block|}
break|break;
case|case
literal|'!'
case|:
block|{
name|int
name|LA24_8
init|=
name|input
operator|.
name|LA
argument_list|(
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA24_8
operator|==
literal|'='
operator|)
condition|)
block|{
name|alt24
operator|=
literal|19
expr_stmt|;
block|}
else|else
block|{
name|alt24
operator|=
literal|10
expr_stmt|;
block|}
block|}
break|break;
case|case
literal|':'
case|:
block|{
name|alt24
operator|=
literal|12
expr_stmt|;
block|}
break|break;
case|case
literal|','
case|:
block|{
name|alt24
operator|=
literal|13
expr_stmt|;
block|}
break|break;
case|case
literal|'='
case|:
block|{
name|alt24
operator|=
literal|14
expr_stmt|;
block|}
break|break;
case|case
literal|'?'
case|:
block|{
name|alt24
operator|=
literal|20
expr_stmt|;
block|}
break|break;
case|case
literal|'/'
case|:
block|{
name|alt24
operator|=
literal|21
expr_stmt|;
block|}
break|break;
case|case
literal|'.'
case|:
block|{
name|int
name|LA24_14
init|=
name|input
operator|.
name|LA
argument_list|(
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|LA24_14
operator|>=
literal|'0'
operator|&&
name|LA24_14
operator|<=
literal|'9'
operator|)
operator|)
condition|)
block|{
name|alt24
operator|=
literal|30
expr_stmt|;
block|}
else|else
block|{
name|alt24
operator|=
literal|22
expr_stmt|;
block|}
block|}
break|break;
case|case
literal|'('
case|:
block|{
name|alt24
operator|=
literal|23
expr_stmt|;
block|}
break|break;
case|case
literal|'%'
case|:
block|{
name|alt24
operator|=
literal|24
expr_stmt|;
block|}
break|break;
case|case
literal|'*'
case|:
block|{
name|alt24
operator|=
literal|25
expr_stmt|;
block|}
break|break;
case|case
literal|')'
case|:
block|{
name|alt24
operator|=
literal|26
expr_stmt|;
block|}
break|break;
case|case
literal|'-'
case|:
block|{
name|alt24
operator|=
literal|27
expr_stmt|;
block|}
break|break;
case|case
literal|'$'
case|:
case|case
literal|'A'
case|:
case|case
literal|'B'
case|:
case|case
literal|'C'
case|:
case|case
literal|'D'
case|:
case|case
literal|'E'
case|:
case|case
literal|'F'
case|:
case|case
literal|'G'
case|:
case|case
literal|'H'
case|:
case|case
literal|'I'
case|:
case|case
literal|'J'
case|:
case|case
literal|'K'
case|:
case|case
literal|'L'
case|:
case|case
literal|'M'
case|:
case|case
literal|'N'
case|:
case|case
literal|'O'
case|:
case|case
literal|'P'
case|:
case|case
literal|'Q'
case|:
case|case
literal|'R'
case|:
case|case
literal|'S'
case|:
case|case
literal|'T'
case|:
case|case
literal|'U'
case|:
case|case
literal|'V'
case|:
case|case
literal|'W'
case|:
case|case
literal|'X'
case|:
case|case
literal|'Y'
case|:
case|case
literal|'Z'
case|:
case|case
literal|'_'
case|:
case|case
literal|'a'
case|:
case|case
literal|'b'
case|:
case|case
literal|'c'
case|:
case|case
literal|'d'
case|:
case|case
literal|'e'
case|:
case|case
literal|'f'
case|:
case|case
literal|'g'
case|:
case|case
literal|'h'
case|:
case|case
literal|'i'
case|:
case|case
literal|'j'
case|:
case|case
literal|'k'
case|:
case|case
literal|'l'
case|:
case|case
literal|'m'
case|:
case|case
literal|'n'
case|:
case|case
literal|'o'
case|:
case|case
literal|'p'
case|:
case|case
literal|'q'
case|:
case|case
literal|'r'
case|:
case|case
literal|'s'
case|:
case|case
literal|'t'
case|:
case|case
literal|'u'
case|:
case|case
literal|'v'
case|:
case|case
literal|'w'
case|:
case|case
literal|'x'
case|:
case|case
literal|'y'
case|:
case|case
literal|'z'
case|:
block|{
name|alt24
operator|=
literal|28
expr_stmt|;
block|}
break|break;
case|case
literal|'\t'
case|:
case|case
literal|'\n'
case|:
case|case
literal|'\r'
case|:
case|case
literal|' '
case|:
block|{
name|alt24
operator|=
literal|29
expr_stmt|;
block|}
break|break;
case|case
literal|'0'
case|:
block|{
switch|switch
condition|(
name|input
operator|.
name|LA
argument_list|(
literal|2
argument_list|)
condition|)
block|{
case|case
literal|'X'
case|:
case|case
literal|'x'
case|:
block|{
name|alt24
operator|=
literal|32
expr_stmt|;
block|}
break|break;
case|case
literal|'0'
case|:
case|case
literal|'1'
case|:
case|case
literal|'2'
case|:
case|case
literal|'3'
case|:
case|case
literal|'4'
case|:
case|case
literal|'5'
case|:
case|case
literal|'6'
case|:
case|case
literal|'7'
case|:
block|{
name|alt24
operator|=
literal|31
expr_stmt|;
block|}
break|break;
default|default:
name|alt24
operator|=
literal|30
expr_stmt|;
block|}
block|}
break|break;
case|case
literal|'1'
case|:
case|case
literal|'2'
case|:
case|case
literal|'3'
case|:
case|case
literal|'4'
case|:
case|case
literal|'5'
case|:
case|case
literal|'6'
case|:
case|case
literal|'7'
case|:
case|case
literal|'8'
case|:
case|case
literal|'9'
case|:
block|{
name|alt24
operator|=
literal|30
expr_stmt|;
block|}
break|break;
default|default:
name|NoViableAltException
name|nvae
init|=
operator|new
name|NoViableAltException
argument_list|(
literal|""
argument_list|,
literal|24
argument_list|,
literal|0
argument_list|,
name|input
argument_list|)
decl_stmt|;
throw|throw
name|nvae
throw|;
block|}
switch|switch
condition|(
name|alt24
condition|)
block|{
case|case
literal|1
case|:
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:1:10: AT_ADD
block|{
name|mAT_ADD
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:1:17: AT_BIT_AND
block|{
name|mAT_BIT_AND
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|3
case|:
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:1:28: AT_BIT_NOT
block|{
name|mAT_BIT_NOT
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|4
case|:
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:1:39: AT_BIT_OR
block|{
name|mAT_BIT_OR
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|5
case|:
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:1:49: AT_BIT_SHL
block|{
name|mAT_BIT_SHL
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|6
case|:
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:1:60: AT_BIT_SHR
block|{
name|mAT_BIT_SHR
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|7
case|:
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:1:71: AT_BIT_SHU
block|{
name|mAT_BIT_SHU
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|8
case|:
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:1:82: AT_BIT_XOR
block|{
name|mAT_BIT_XOR
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|9
case|:
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:1:93: AT_BOOL_AND
block|{
name|mAT_BOOL_AND
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|10
case|:
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:1:105: AT_BOOL_NOT
block|{
name|mAT_BOOL_NOT
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|11
case|:
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:1:117: AT_BOOL_OR
block|{
name|mAT_BOOL_OR
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|12
case|:
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:1:128: AT_COLON
block|{
name|mAT_COLON
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|13
case|:
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:1:137: AT_COMMA
block|{
name|mAT_COMMA
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|14
case|:
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:1:146: AT_COMP_EQ
block|{
name|mAT_COMP_EQ
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|15
case|:
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:1:157: AT_COMP_GT
block|{
name|mAT_COMP_GT
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|16
case|:
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:1:168: AT_COMP_GTE
block|{
name|mAT_COMP_GTE
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|17
case|:
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:1:180: AT_COMP_LT
block|{
name|mAT_COMP_LT
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|18
case|:
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:1:191: AT_COMP_LTE
block|{
name|mAT_COMP_LTE
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|19
case|:
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:1:203: AT_COMP_NEQ
block|{
name|mAT_COMP_NEQ
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|20
case|:
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:1:215: AT_COND_QUE
block|{
name|mAT_COND_QUE
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|21
case|:
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:1:227: AT_DIVIDE
block|{
name|mAT_DIVIDE
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|22
case|:
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:1:237: AT_DOT
block|{
name|mAT_DOT
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|23
case|:
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:1:244: AT_LPAREN
block|{
name|mAT_LPAREN
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|24
case|:
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:1:254: AT_MODULO
block|{
name|mAT_MODULO
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|25
case|:
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:1:264: AT_MULTIPLY
block|{
name|mAT_MULTIPLY
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|26
case|:
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:1:276: AT_RPAREN
block|{
name|mAT_RPAREN
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|27
case|:
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:1:286: AT_SUBTRACT
block|{
name|mAT_SUBTRACT
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|28
case|:
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:1:298: VARIABLE
block|{
name|mVARIABLE
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|29
case|:
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:1:307: WS
block|{
name|mWS
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|30
case|:
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:1:310: DECIMAL
block|{
name|mDECIMAL
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|31
case|:
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:1:318: OCTAL
block|{
name|mOCTAL
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|32
case|:
comment|// src/java/org/apache/lucene/expressions/js/Javascript.g:1:324: HEX
block|{
name|mHEX
argument_list|()
expr_stmt|;
block|}
break|break;
block|}
block|}
DECL|field|dfa16
specifier|protected
name|DFA16
name|dfa16
init|=
operator|new
name|DFA16
argument_list|(
name|this
argument_list|)
decl_stmt|;
DECL|field|DFA16_eotS
specifier|static
specifier|final
name|String
name|DFA16_eotS
init|=
literal|"\1\uffff\2\4\3\uffff\1\4"
decl_stmt|;
DECL|field|DFA16_eofS
specifier|static
specifier|final
name|String
name|DFA16_eofS
init|=
literal|"\7\uffff"
decl_stmt|;
DECL|field|DFA16_minS
specifier|static
specifier|final
name|String
name|DFA16_minS
init|=
literal|"\3\56\3\uffff\1\56"
decl_stmt|;
DECL|field|DFA16_maxS
specifier|static
specifier|final
name|String
name|DFA16_maxS
init|=
literal|"\1\71\1\56\1\71\3\uffff\1\71"
decl_stmt|;
DECL|field|DFA16_acceptS
specifier|static
specifier|final
name|String
name|DFA16_acceptS
init|=
literal|"\3\uffff\1\2\1\3\1\1\1\uffff"
decl_stmt|;
DECL|field|DFA16_specialS
specifier|static
specifier|final
name|String
name|DFA16_specialS
init|=
literal|"\7\uffff}>"
decl_stmt|;
DECL|field|DFA16_transitionS
specifier|static
specifier|final
name|String
index|[]
name|DFA16_transitionS
init|=
block|{
literal|"\1\3\1\uffff\1\1\11\2"
block|,
literal|"\1\5"
block|,
literal|"\1\5\1\uffff\12\6"
block|,
literal|""
block|,
literal|""
block|,
literal|""
block|,
literal|"\1\5\1\uffff\12\6"
block|}
decl_stmt|;
DECL|field|DFA16_eot
specifier|static
specifier|final
name|short
index|[]
name|DFA16_eot
init|=
name|DFA
operator|.
name|unpackEncodedString
argument_list|(
name|DFA16_eotS
argument_list|)
decl_stmt|;
DECL|field|DFA16_eof
specifier|static
specifier|final
name|short
index|[]
name|DFA16_eof
init|=
name|DFA
operator|.
name|unpackEncodedString
argument_list|(
name|DFA16_eofS
argument_list|)
decl_stmt|;
DECL|field|DFA16_min
specifier|static
specifier|final
name|char
index|[]
name|DFA16_min
init|=
name|DFA
operator|.
name|unpackEncodedStringToUnsignedChars
argument_list|(
name|DFA16_minS
argument_list|)
decl_stmt|;
DECL|field|DFA16_max
specifier|static
specifier|final
name|char
index|[]
name|DFA16_max
init|=
name|DFA
operator|.
name|unpackEncodedStringToUnsignedChars
argument_list|(
name|DFA16_maxS
argument_list|)
decl_stmt|;
DECL|field|DFA16_accept
specifier|static
specifier|final
name|short
index|[]
name|DFA16_accept
init|=
name|DFA
operator|.
name|unpackEncodedString
argument_list|(
name|DFA16_acceptS
argument_list|)
decl_stmt|;
DECL|field|DFA16_special
specifier|static
specifier|final
name|short
index|[]
name|DFA16_special
init|=
name|DFA
operator|.
name|unpackEncodedString
argument_list|(
name|DFA16_specialS
argument_list|)
decl_stmt|;
DECL|field|DFA16_transition
specifier|static
specifier|final
name|short
index|[]
index|[]
name|DFA16_transition
decl_stmt|;
static|static
block|{
name|int
name|numStates
init|=
name|DFA16_transitionS
operator|.
name|length
decl_stmt|;
name|DFA16_transition
operator|=
operator|new
name|short
index|[
name|numStates
index|]
index|[]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numStates
condition|;
name|i
operator|++
control|)
block|{
name|DFA16_transition
index|[
name|i
index|]
operator|=
name|DFA
operator|.
name|unpackEncodedString
argument_list|(
name|DFA16_transitionS
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|DFA16
specifier|protected
class|class
name|DFA16
extends|extends
name|DFA
block|{
DECL|method|DFA16
specifier|public
name|DFA16
parameter_list|(
name|BaseRecognizer
name|recognizer
parameter_list|)
block|{
name|this
operator|.
name|recognizer
operator|=
name|recognizer
expr_stmt|;
name|this
operator|.
name|decisionNumber
operator|=
literal|16
expr_stmt|;
name|this
operator|.
name|eot
operator|=
name|DFA16_eot
expr_stmt|;
name|this
operator|.
name|eof
operator|=
name|DFA16_eof
expr_stmt|;
name|this
operator|.
name|min
operator|=
name|DFA16_min
expr_stmt|;
name|this
operator|.
name|max
operator|=
name|DFA16_max
expr_stmt|;
name|this
operator|.
name|accept
operator|=
name|DFA16_accept
expr_stmt|;
name|this
operator|.
name|special
operator|=
name|DFA16_special
expr_stmt|;
name|this
operator|.
name|transition
operator|=
name|DFA16_transition
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getDescription
specifier|public
name|String
name|getDescription
parameter_list|()
block|{
return|return
literal|"377:1: DECIMAL : ( DECIMALINTEGER AT_DOT ( DECIMALDIGIT )* ( EXPONENT )? | AT_DOT ( DECIMALDIGIT )+ ( EXPONENT )? | DECIMALINTEGER ( EXPONENT )? );"
return|;
block|}
block|}
block|}
end_class
end_unit
