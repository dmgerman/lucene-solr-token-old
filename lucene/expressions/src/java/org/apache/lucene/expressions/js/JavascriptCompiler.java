begin_unit
begin_package
DECL|package|org.apache.lucene.expressions.js
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|expressions
operator|.
name|js
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import
begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import
begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import
begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Modifier
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import
begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayDeque
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Deque
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import
begin_import
import|import
name|org
operator|.
name|antlr
operator|.
name|v4
operator|.
name|runtime
operator|.
name|ANTLRInputStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|antlr
operator|.
name|v4
operator|.
name|runtime
operator|.
name|CommonTokenStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|antlr
operator|.
name|v4
operator|.
name|runtime
operator|.
name|tree
operator|.
name|ParseTree
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|expressions
operator|.
name|Expression
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|expressions
operator|.
name|js
operator|.
name|JavascriptParser
operator|.
name|ExpressionContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queries
operator|.
name|function
operator|.
name|FunctionValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|ClassWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|Label
import|;
end_import
begin_import
import|import
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|Opcodes
import|;
end_import
begin_import
import|import
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|Type
import|;
end_import
begin_import
import|import
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|commons
operator|.
name|GeneratorAdapter
import|;
end_import
begin_comment
comment|/**  * An expression compiler for javascript expressions.  *<p>  * Example:  *<pre class="prettyprint">  *   Expression foo = JavascriptCompiler.compile("((0.3*popularity)/10.0)+(0.7*score)");  *</pre>  *<p>  * See the {@link org.apache.lucene.expressions.js package documentation} for   * the supported syntax and default functions.  *<p>  * You can compile with an alternate set of functions via {@link #compile(String, Map, ClassLoader)}.  * For example:  *<pre class="prettyprint">  *   Map&lt;String,Method&gt; functions = new HashMap&lt;&gt;();  *   // add all the default functions  *   functions.putAll(JavascriptCompiler.DEFAULT_FUNCTIONS);  *   // add cbrt()  *   functions.put("cbrt", Math.class.getMethod("cbrt", double.class));  *   // call compile with customized function map  *   Expression foo = JavascriptCompiler.compile("cbrt(score)+ln(popularity)",   *                                               functions,   *                                               getClass().getClassLoader());  *</pre>  *   * @lucene.experimental  */
end_comment
begin_class
DECL|class|JavascriptCompiler
specifier|public
specifier|final
class|class
name|JavascriptCompiler
block|{
DECL|class|Loader
specifier|static
specifier|final
class|class
name|Loader
extends|extends
name|ClassLoader
block|{
DECL|method|Loader
name|Loader
parameter_list|(
name|ClassLoader
name|parent
parameter_list|)
block|{
name|super
argument_list|(
name|parent
argument_list|)
expr_stmt|;
block|}
DECL|method|define
specifier|public
name|Class
argument_list|<
name|?
extends|extends
name|Expression
argument_list|>
name|define
parameter_list|(
name|String
name|className
parameter_list|,
name|byte
index|[]
name|bytecode
parameter_list|)
block|{
return|return
name|defineClass
argument_list|(
name|className
argument_list|,
name|bytecode
argument_list|,
literal|0
argument_list|,
name|bytecode
operator|.
name|length
argument_list|)
operator|.
name|asSubclass
argument_list|(
name|Expression
operator|.
name|class
argument_list|)
return|;
block|}
block|}
DECL|field|CLASSFILE_VERSION
specifier|private
specifier|static
specifier|final
name|int
name|CLASSFILE_VERSION
init|=
name|Opcodes
operator|.
name|V1_8
decl_stmt|;
comment|// We use the same class name for all generated classes as they all have their own class loader.
comment|// The source code is displayed as "source file name" in stack trace.
DECL|field|COMPILED_EXPRESSION_CLASS
specifier|private
specifier|static
specifier|final
name|String
name|COMPILED_EXPRESSION_CLASS
init|=
name|JavascriptCompiler
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"$CompiledExpression"
decl_stmt|;
DECL|field|COMPILED_EXPRESSION_INTERNAL
specifier|private
specifier|static
specifier|final
name|String
name|COMPILED_EXPRESSION_INTERNAL
init|=
name|COMPILED_EXPRESSION_CLASS
operator|.
name|replace
argument_list|(
literal|'.'
argument_list|,
literal|'/'
argument_list|)
decl_stmt|;
DECL|field|EXPRESSION_TYPE
specifier|static
specifier|final
name|Type
name|EXPRESSION_TYPE
init|=
name|Type
operator|.
name|getType
argument_list|(
name|Expression
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|FUNCTION_VALUES_TYPE
specifier|static
specifier|final
name|Type
name|FUNCTION_VALUES_TYPE
init|=
name|Type
operator|.
name|getType
argument_list|(
name|FunctionValues
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|commons
operator|.
name|Method
DECL|field|EXPRESSION_CTOR
name|EXPRESSION_CTOR
init|=
name|getMethod
argument_list|(
literal|"void<init>(String, String[])"
argument_list|)
decl_stmt|,
DECL|field|EVALUATE_METHOD
name|EVALUATE_METHOD
init|=
name|getMethod
argument_list|(
literal|"double evaluate(int, "
operator|+
name|FunctionValues
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"[])"
argument_list|)
decl_stmt|;
DECL|field|DOUBLE_VAL_METHOD
specifier|static
specifier|final
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|commons
operator|.
name|Method
name|DOUBLE_VAL_METHOD
init|=
name|getMethod
argument_list|(
literal|"double doubleVal(int)"
argument_list|)
decl_stmt|;
comment|// to work around import clash:
DECL|method|getMethod
specifier|private
specifier|static
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|commons
operator|.
name|Method
name|getMethod
parameter_list|(
name|String
name|method
parameter_list|)
block|{
return|return
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|commons
operator|.
name|Method
operator|.
name|getMethod
argument_list|(
name|method
argument_list|)
return|;
block|}
comment|// This maximum length is theoretically 65535 bytes, but as it's CESU-8 encoded we dont know how large it is in bytes, so be safe
comment|// rcmuir: "If your ranking function is that large you need to check yourself into a mental institution!"
DECL|field|MAX_SOURCE_LENGTH
specifier|private
specifier|static
specifier|final
name|int
name|MAX_SOURCE_LENGTH
init|=
literal|16384
decl_stmt|;
DECL|field|sourceText
specifier|final
name|String
name|sourceText
decl_stmt|;
DECL|field|functions
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Method
argument_list|>
name|functions
decl_stmt|;
comment|/**    * Compiles the given expression.    *    * @param sourceText The expression to compile    * @return A new compiled expression    * @throws ParseException on failure to compile    */
DECL|method|compile
specifier|public
specifier|static
name|Expression
name|compile
parameter_list|(
name|String
name|sourceText
parameter_list|)
throws|throws
name|ParseException
block|{
return|return
operator|new
name|JavascriptCompiler
argument_list|(
name|sourceText
argument_list|)
operator|.
name|compileExpression
argument_list|(
name|JavascriptCompiler
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Compiles the given expression with the supplied custom functions.    *<p>    * Functions must be {@code public static}, return {@code double} and     * can take from zero to 256 {@code double} parameters.    *    * @param sourceText The expression to compile    * @param functions map of String names to functions    * @param parent a {@code ClassLoader} that should be used as the parent of the loaded class.    *   It must contain all classes referred to by the given {@code functions}.    * @return A new compiled expression    * @throws ParseException on failure to compile    */
DECL|method|compile
specifier|public
specifier|static
name|Expression
name|compile
parameter_list|(
name|String
name|sourceText
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Method
argument_list|>
name|functions
parameter_list|,
name|ClassLoader
name|parent
parameter_list|)
throws|throws
name|ParseException
block|{
if|if
condition|(
name|parent
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"A parent ClassLoader must be given."
argument_list|)
throw|;
block|}
for|for
control|(
name|Method
name|m
range|:
name|functions
operator|.
name|values
argument_list|()
control|)
block|{
name|checkFunction
argument_list|(
name|m
argument_list|,
name|parent
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|JavascriptCompiler
argument_list|(
name|sourceText
argument_list|,
name|functions
argument_list|)
operator|.
name|compileExpression
argument_list|(
name|parent
argument_list|)
return|;
block|}
comment|/**    * This method is unused, it is just here to make sure that the function signatures don't change.    * If this method fails to compile, you also have to change the byte code generator to correctly    * use the FunctionValues class.    */
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"unused"
block|,
literal|"null"
block|}
argument_list|)
DECL|method|unusedTestCompile
specifier|private
specifier|static
name|void
name|unusedTestCompile
parameter_list|()
block|{
name|FunctionValues
name|f
init|=
literal|null
decl_stmt|;
name|double
name|ret
init|=
name|f
operator|.
name|doubleVal
argument_list|(
literal|2
argument_list|)
decl_stmt|;
block|}
comment|/**    * Constructs a compiler for expressions.    * @param sourceText The expression to compile    */
DECL|method|JavascriptCompiler
specifier|private
name|JavascriptCompiler
parameter_list|(
name|String
name|sourceText
parameter_list|)
block|{
name|this
argument_list|(
name|sourceText
argument_list|,
name|DEFAULT_FUNCTIONS
argument_list|)
expr_stmt|;
block|}
comment|/**    * Constructs a compiler for expressions with specific set of functions    * @param sourceText The expression to compile    */
DECL|method|JavascriptCompiler
specifier|private
name|JavascriptCompiler
parameter_list|(
name|String
name|sourceText
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Method
argument_list|>
name|functions
parameter_list|)
block|{
if|if
condition|(
name|sourceText
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|()
throw|;
block|}
name|this
operator|.
name|sourceText
operator|=
name|sourceText
expr_stmt|;
name|this
operator|.
name|functions
operator|=
name|functions
expr_stmt|;
block|}
comment|/**    * Compiles the given expression with the specified parent classloader    *    * @return A new compiled expression    * @throws ParseException on failure to compile    */
DECL|method|compileExpression
specifier|private
name|Expression
name|compileExpression
parameter_list|(
name|ClassLoader
name|parent
parameter_list|)
throws|throws
name|ParseException
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|externalsMap
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|ClassWriter
name|classWriter
init|=
operator|new
name|ClassWriter
argument_list|(
name|ClassWriter
operator|.
name|COMPUTE_FRAMES
operator||
name|ClassWriter
operator|.
name|COMPUTE_MAXS
argument_list|)
decl_stmt|;
name|generateClass
argument_list|(
name|getAntlrParseTree
argument_list|()
argument_list|,
name|classWriter
argument_list|,
name|externalsMap
argument_list|)
expr_stmt|;
try|try
block|{
specifier|final
name|Class
argument_list|<
name|?
extends|extends
name|Expression
argument_list|>
name|evaluatorClass
init|=
operator|new
name|Loader
argument_list|(
name|parent
argument_list|)
operator|.
name|define
argument_list|(
name|COMPILED_EXPRESSION_CLASS
argument_list|,
name|classWriter
operator|.
name|toByteArray
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Constructor
argument_list|<
name|?
extends|extends
name|Expression
argument_list|>
name|constructor
init|=
name|evaluatorClass
operator|.
name|getConstructor
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|String
index|[]
operator|.
expr|class
argument_list|)
decl_stmt|;
return|return
name|constructor
operator|.
name|newInstance
argument_list|(
name|sourceText
argument_list|,
name|externalsMap
operator|.
name|keySet
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|externalsMap
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ReflectiveOperationException
name|exception
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"An internal error occurred attempting to compile the expression ("
operator|+
name|sourceText
operator|+
literal|")."
argument_list|,
name|exception
argument_list|)
throw|;
block|}
block|}
comment|/**    * Parses the sourceText into an ANTLR 4 parse tree    *    * @return The ANTLR parse tree    * @throws ParseException on failure to parse    */
DECL|method|getAntlrParseTree
specifier|private
name|ParseTree
name|getAntlrParseTree
parameter_list|()
throws|throws
name|ParseException
block|{
try|try
block|{
specifier|final
name|ANTLRInputStream
name|antlrInputStream
init|=
operator|new
name|ANTLRInputStream
argument_list|(
name|sourceText
argument_list|)
decl_stmt|;
specifier|final
name|JavascriptErrorHandlingLexer
name|javascriptLexer
init|=
operator|new
name|JavascriptErrorHandlingLexer
argument_list|(
name|antlrInputStream
argument_list|)
decl_stmt|;
name|javascriptLexer
operator|.
name|removeErrorListeners
argument_list|()
expr_stmt|;
specifier|final
name|JavascriptParser
name|javascriptParser
init|=
operator|new
name|JavascriptParser
argument_list|(
operator|new
name|CommonTokenStream
argument_list|(
name|javascriptLexer
argument_list|)
argument_list|)
decl_stmt|;
name|javascriptParser
operator|.
name|removeErrorListeners
argument_list|()
expr_stmt|;
name|javascriptParser
operator|.
name|setErrorHandler
argument_list|(
operator|new
name|JavascriptParserErrorStrategy
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|javascriptParser
operator|.
name|compile
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|re
parameter_list|)
block|{
if|if
condition|(
name|re
operator|.
name|getCause
argument_list|()
operator|instanceof
name|ParseException
condition|)
block|{
throw|throw
operator|(
name|ParseException
operator|)
name|re
operator|.
name|getCause
argument_list|()
throw|;
block|}
throw|throw
name|re
throw|;
block|}
block|}
comment|/**    * Sends the bytecode of class file to {@link ClassWriter}.    */
DECL|method|generateClass
specifier|private
name|void
name|generateClass
parameter_list|(
specifier|final
name|ParseTree
name|parseTree
parameter_list|,
specifier|final
name|ClassWriter
name|classWriter
parameter_list|,
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|externalsMap
parameter_list|)
block|{
name|classWriter
operator|.
name|visit
argument_list|(
name|CLASSFILE_VERSION
argument_list|,
name|Opcodes
operator|.
name|ACC_PUBLIC
operator||
name|Opcodes
operator|.
name|ACC_SUPER
operator||
name|Opcodes
operator|.
name|ACC_FINAL
operator||
name|Opcodes
operator|.
name|ACC_SYNTHETIC
argument_list|,
name|COMPILED_EXPRESSION_INTERNAL
argument_list|,
literal|null
argument_list|,
name|EXPRESSION_TYPE
operator|.
name|getInternalName
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
specifier|final
name|String
name|clippedSourceText
init|=
operator|(
name|sourceText
operator|.
name|length
argument_list|()
operator|<=
name|MAX_SOURCE_LENGTH
operator|)
condition|?
name|sourceText
else|:
operator|(
name|sourceText
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|MAX_SOURCE_LENGTH
operator|-
literal|3
argument_list|)
operator|+
literal|"..."
operator|)
decl_stmt|;
name|classWriter
operator|.
name|visitSource
argument_list|(
name|clippedSourceText
argument_list|,
literal|null
argument_list|)
expr_stmt|;
specifier|final
name|GeneratorAdapter
name|constructor
init|=
operator|new
name|GeneratorAdapter
argument_list|(
name|Opcodes
operator|.
name|ACC_PUBLIC
operator||
name|Opcodes
operator|.
name|ACC_SYNTHETIC
argument_list|,
name|EXPRESSION_CTOR
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|classWriter
argument_list|)
decl_stmt|;
name|constructor
operator|.
name|loadThis
argument_list|()
expr_stmt|;
name|constructor
operator|.
name|loadArgs
argument_list|()
expr_stmt|;
name|constructor
operator|.
name|invokeConstructor
argument_list|(
name|EXPRESSION_TYPE
argument_list|,
name|EXPRESSION_CTOR
argument_list|)
expr_stmt|;
name|constructor
operator|.
name|returnValue
argument_list|()
expr_stmt|;
name|constructor
operator|.
name|endMethod
argument_list|()
expr_stmt|;
specifier|final
name|GeneratorAdapter
name|gen
init|=
operator|new
name|GeneratorAdapter
argument_list|(
name|Opcodes
operator|.
name|ACC_PUBLIC
operator||
name|Opcodes
operator|.
name|ACC_SYNTHETIC
argument_list|,
name|EVALUATE_METHOD
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|classWriter
argument_list|)
decl_stmt|;
comment|// to completely hide the ANTLR visitor we use an anonymous impl:
operator|new
name|JavascriptBaseVisitor
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
specifier|private
specifier|final
name|Deque
argument_list|<
name|Type
argument_list|>
name|typeStack
init|=
operator|new
name|ArrayDeque
argument_list|<>
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Void
name|visitCompile
parameter_list|(
name|JavascriptParser
operator|.
name|CompileContext
name|ctx
parameter_list|)
block|{
name|typeStack
operator|.
name|push
argument_list|(
name|Type
operator|.
name|DOUBLE_TYPE
argument_list|)
expr_stmt|;
name|visit
argument_list|(
name|ctx
operator|.
name|expression
argument_list|()
argument_list|)
expr_stmt|;
name|typeStack
operator|.
name|pop
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Void
name|visitPrecedence
parameter_list|(
name|JavascriptParser
operator|.
name|PrecedenceContext
name|ctx
parameter_list|)
block|{
name|visit
argument_list|(
name|ctx
operator|.
name|expression
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Void
name|visitNumeric
parameter_list|(
name|JavascriptParser
operator|.
name|NumericContext
name|ctx
parameter_list|)
block|{
if|if
condition|(
name|ctx
operator|.
name|HEX
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|pushLong
argument_list|(
name|Long
operator|.
name|parseLong
argument_list|(
name|ctx
operator|.
name|HEX
argument_list|()
operator|.
name|getText
argument_list|()
operator|.
name|substring
argument_list|(
literal|2
argument_list|)
argument_list|,
literal|16
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|OCTAL
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|pushLong
argument_list|(
name|Long
operator|.
name|parseLong
argument_list|(
name|ctx
operator|.
name|OCTAL
argument_list|()
operator|.
name|getText
argument_list|()
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|8
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|DECIMAL
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|gen
operator|.
name|push
argument_list|(
name|Double
operator|.
name|parseDouble
argument_list|(
name|ctx
operator|.
name|DECIMAL
argument_list|()
operator|.
name|getText
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|gen
operator|.
name|cast
argument_list|(
name|Type
operator|.
name|DOUBLE_TYPE
argument_list|,
name|typeStack
operator|.
name|peek
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unknown operation specified: "
operator|+
name|ctx
operator|.
name|getText
argument_list|()
argument_list|)
throw|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Void
name|visitExternal
parameter_list|(
name|JavascriptParser
operator|.
name|ExternalContext
name|ctx
parameter_list|)
block|{
name|String
name|text
init|=
name|ctx
operator|.
name|VARIABLE
argument_list|()
operator|.
name|getText
argument_list|()
decl_stmt|;
name|int
name|arguments
init|=
name|ctx
operator|.
name|expression
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|boolean
name|parens
init|=
name|ctx
operator|.
name|LP
argument_list|()
operator|!=
literal|null
operator|&&
name|ctx
operator|.
name|RP
argument_list|()
operator|!=
literal|null
decl_stmt|;
name|Method
name|method
init|=
name|parens
condition|?
name|functions
operator|.
name|get
argument_list|(
name|text
argument_list|)
else|:
literal|null
decl_stmt|;
if|if
condition|(
name|method
operator|!=
literal|null
condition|)
block|{
name|int
name|arity
init|=
name|method
operator|.
name|getParameterTypes
argument_list|()
operator|.
name|length
decl_stmt|;
if|if
condition|(
name|arguments
operator|!=
name|arity
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Expected ("
operator|+
name|arity
operator|+
literal|") arguments for function call ("
operator|+
name|text
operator|+
literal|"), but found ("
operator|+
name|arguments
operator|+
literal|")."
argument_list|)
throw|;
block|}
name|typeStack
operator|.
name|push
argument_list|(
name|Type
operator|.
name|DOUBLE_TYPE
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|argument
init|=
literal|0
init|;
name|argument
operator|<
name|arguments
condition|;
operator|++
name|argument
control|)
block|{
name|visit
argument_list|(
name|ctx
operator|.
name|expression
argument_list|(
name|argument
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|typeStack
operator|.
name|pop
argument_list|()
expr_stmt|;
name|gen
operator|.
name|invokeStatic
argument_list|(
name|Type
operator|.
name|getType
argument_list|(
name|method
operator|.
name|getDeclaringClass
argument_list|()
argument_list|)
argument_list|,
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|commons
operator|.
name|Method
operator|.
name|getMethod
argument_list|(
name|method
argument_list|)
argument_list|)
expr_stmt|;
name|gen
operator|.
name|cast
argument_list|(
name|Type
operator|.
name|DOUBLE_TYPE
argument_list|,
name|typeStack
operator|.
name|peek
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|parens
operator|||
name|arguments
operator|==
literal|0
operator|&&
name|text
operator|.
name|contains
argument_list|(
literal|"."
argument_list|)
condition|)
block|{
name|int
name|index
decl_stmt|;
name|text
operator|=
name|normalizeQuotes
argument_list|(
name|ctx
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|externalsMap
operator|.
name|containsKey
argument_list|(
name|text
argument_list|)
condition|)
block|{
name|index
operator|=
name|externalsMap
operator|.
name|get
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|index
operator|=
name|externalsMap
operator|.
name|size
argument_list|()
expr_stmt|;
name|externalsMap
operator|.
name|put
argument_list|(
name|text
argument_list|,
name|index
argument_list|)
expr_stmt|;
block|}
name|gen
operator|.
name|loadArg
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|gen
operator|.
name|push
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|gen
operator|.
name|arrayLoad
argument_list|(
name|FUNCTION_VALUES_TYPE
argument_list|)
expr_stmt|;
name|gen
operator|.
name|loadArg
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|gen
operator|.
name|invokeVirtual
argument_list|(
name|FUNCTION_VALUES_TYPE
argument_list|,
name|DOUBLE_VAL_METHOD
argument_list|)
expr_stmt|;
name|gen
operator|.
name|cast
argument_list|(
name|Type
operator|.
name|DOUBLE_TYPE
argument_list|,
name|typeStack
operator|.
name|peek
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unrecognized function call ("
operator|+
name|text
operator|+
literal|")."
argument_list|)
throw|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Void
name|visitUnary
parameter_list|(
name|JavascriptParser
operator|.
name|UnaryContext
name|ctx
parameter_list|)
block|{
if|if
condition|(
name|ctx
operator|.
name|BOOLNOT
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Label
name|labelNotTrue
init|=
operator|new
name|Label
argument_list|()
decl_stmt|;
name|Label
name|labelNotReturn
init|=
operator|new
name|Label
argument_list|()
decl_stmt|;
name|typeStack
operator|.
name|push
argument_list|(
name|Type
operator|.
name|INT_TYPE
argument_list|)
expr_stmt|;
name|visit
argument_list|(
name|ctx
operator|.
name|expression
argument_list|()
argument_list|)
expr_stmt|;
name|typeStack
operator|.
name|pop
argument_list|()
expr_stmt|;
name|gen
operator|.
name|visitJumpInsn
argument_list|(
name|Opcodes
operator|.
name|IFEQ
argument_list|,
name|labelNotTrue
argument_list|)
expr_stmt|;
name|pushBoolean
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|gen
operator|.
name|goTo
argument_list|(
name|labelNotReturn
argument_list|)
expr_stmt|;
name|gen
operator|.
name|visitLabel
argument_list|(
name|labelNotTrue
argument_list|)
expr_stmt|;
name|pushBoolean
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|gen
operator|.
name|visitLabel
argument_list|(
name|labelNotReturn
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|BWNOT
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|typeStack
operator|.
name|push
argument_list|(
name|Type
operator|.
name|LONG_TYPE
argument_list|)
expr_stmt|;
name|visit
argument_list|(
name|ctx
operator|.
name|expression
argument_list|()
argument_list|)
expr_stmt|;
name|typeStack
operator|.
name|pop
argument_list|()
expr_stmt|;
name|gen
operator|.
name|push
argument_list|(
operator|-
literal|1L
argument_list|)
expr_stmt|;
name|gen
operator|.
name|visitInsn
argument_list|(
name|Opcodes
operator|.
name|LXOR
argument_list|)
expr_stmt|;
name|gen
operator|.
name|cast
argument_list|(
name|Type
operator|.
name|LONG_TYPE
argument_list|,
name|typeStack
operator|.
name|peek
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|ADD
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|visit
argument_list|(
name|ctx
operator|.
name|expression
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|SUB
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|typeStack
operator|.
name|push
argument_list|(
name|Type
operator|.
name|DOUBLE_TYPE
argument_list|)
expr_stmt|;
name|visit
argument_list|(
name|ctx
operator|.
name|expression
argument_list|()
argument_list|)
expr_stmt|;
name|typeStack
operator|.
name|pop
argument_list|()
expr_stmt|;
name|gen
operator|.
name|visitInsn
argument_list|(
name|Opcodes
operator|.
name|DNEG
argument_list|)
expr_stmt|;
name|gen
operator|.
name|cast
argument_list|(
name|Type
operator|.
name|DOUBLE_TYPE
argument_list|,
name|typeStack
operator|.
name|peek
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unknown operation specified: "
operator|+
name|ctx
operator|.
name|getText
argument_list|()
argument_list|)
throw|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Void
name|visitMuldiv
parameter_list|(
name|JavascriptParser
operator|.
name|MuldivContext
name|ctx
parameter_list|)
block|{
name|int
name|opcode
decl_stmt|;
if|if
condition|(
name|ctx
operator|.
name|MUL
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|opcode
operator|=
name|Opcodes
operator|.
name|DMUL
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|DIV
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|opcode
operator|=
name|Opcodes
operator|.
name|DDIV
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|REM
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|opcode
operator|=
name|Opcodes
operator|.
name|DREM
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unknown operation specified: "
operator|+
name|ctx
operator|.
name|getText
argument_list|()
argument_list|)
throw|;
block|}
name|pushArith
argument_list|(
name|opcode
argument_list|,
name|ctx
operator|.
name|expression
argument_list|(
literal|0
argument_list|)
argument_list|,
name|ctx
operator|.
name|expression
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Void
name|visitAddsub
parameter_list|(
name|JavascriptParser
operator|.
name|AddsubContext
name|ctx
parameter_list|)
block|{
name|int
name|opcode
decl_stmt|;
if|if
condition|(
name|ctx
operator|.
name|ADD
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|opcode
operator|=
name|Opcodes
operator|.
name|DADD
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|SUB
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|opcode
operator|=
name|Opcodes
operator|.
name|DSUB
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unknown operation specified: "
operator|+
name|ctx
operator|.
name|getText
argument_list|()
argument_list|)
throw|;
block|}
name|pushArith
argument_list|(
name|opcode
argument_list|,
name|ctx
operator|.
name|expression
argument_list|(
literal|0
argument_list|)
argument_list|,
name|ctx
operator|.
name|expression
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Void
name|visitBwshift
parameter_list|(
name|JavascriptParser
operator|.
name|BwshiftContext
name|ctx
parameter_list|)
block|{
name|int
name|opcode
decl_stmt|;
if|if
condition|(
name|ctx
operator|.
name|LSH
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|opcode
operator|=
name|Opcodes
operator|.
name|LSHL
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|RSH
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|opcode
operator|=
name|Opcodes
operator|.
name|LSHR
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|USH
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|opcode
operator|=
name|Opcodes
operator|.
name|LUSHR
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unknown operation specified: "
operator|+
name|ctx
operator|.
name|getText
argument_list|()
argument_list|)
throw|;
block|}
name|pushShift
argument_list|(
name|opcode
argument_list|,
name|ctx
operator|.
name|expression
argument_list|(
literal|0
argument_list|)
argument_list|,
name|ctx
operator|.
name|expression
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Void
name|visitBoolcomp
parameter_list|(
name|JavascriptParser
operator|.
name|BoolcompContext
name|ctx
parameter_list|)
block|{
name|int
name|opcode
decl_stmt|;
if|if
condition|(
name|ctx
operator|.
name|LT
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|opcode
operator|=
name|GeneratorAdapter
operator|.
name|LT
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|LTE
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|opcode
operator|=
name|GeneratorAdapter
operator|.
name|LE
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|GT
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|opcode
operator|=
name|GeneratorAdapter
operator|.
name|GT
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|GTE
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|opcode
operator|=
name|GeneratorAdapter
operator|.
name|GE
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unknown operation specified: "
operator|+
name|ctx
operator|.
name|getText
argument_list|()
argument_list|)
throw|;
block|}
name|pushCond
argument_list|(
name|opcode
argument_list|,
name|ctx
operator|.
name|expression
argument_list|(
literal|0
argument_list|)
argument_list|,
name|ctx
operator|.
name|expression
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Void
name|visitBooleqne
parameter_list|(
name|JavascriptParser
operator|.
name|BooleqneContext
name|ctx
parameter_list|)
block|{
name|int
name|opcode
decl_stmt|;
if|if
condition|(
name|ctx
operator|.
name|EQ
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|opcode
operator|=
name|GeneratorAdapter
operator|.
name|EQ
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|NE
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|opcode
operator|=
name|GeneratorAdapter
operator|.
name|NE
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unknown operation specified: "
operator|+
name|ctx
operator|.
name|getText
argument_list|()
argument_list|)
throw|;
block|}
name|pushCond
argument_list|(
name|opcode
argument_list|,
name|ctx
operator|.
name|expression
argument_list|(
literal|0
argument_list|)
argument_list|,
name|ctx
operator|.
name|expression
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Void
name|visitBwand
parameter_list|(
name|JavascriptParser
operator|.
name|BwandContext
name|ctx
parameter_list|)
block|{
name|pushBitwise
argument_list|(
name|Opcodes
operator|.
name|LAND
argument_list|,
name|ctx
operator|.
name|expression
argument_list|(
literal|0
argument_list|)
argument_list|,
name|ctx
operator|.
name|expression
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Void
name|visitBwxor
parameter_list|(
name|JavascriptParser
operator|.
name|BwxorContext
name|ctx
parameter_list|)
block|{
name|pushBitwise
argument_list|(
name|Opcodes
operator|.
name|LXOR
argument_list|,
name|ctx
operator|.
name|expression
argument_list|(
literal|0
argument_list|)
argument_list|,
name|ctx
operator|.
name|expression
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Void
name|visitBwor
parameter_list|(
name|JavascriptParser
operator|.
name|BworContext
name|ctx
parameter_list|)
block|{
name|pushBitwise
argument_list|(
name|Opcodes
operator|.
name|LOR
argument_list|,
name|ctx
operator|.
name|expression
argument_list|(
literal|0
argument_list|)
argument_list|,
name|ctx
operator|.
name|expression
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Void
name|visitBooland
parameter_list|(
name|JavascriptParser
operator|.
name|BoolandContext
name|ctx
parameter_list|)
block|{
name|Label
name|andFalse
init|=
operator|new
name|Label
argument_list|()
decl_stmt|;
name|Label
name|andEnd
init|=
operator|new
name|Label
argument_list|()
decl_stmt|;
name|typeStack
operator|.
name|push
argument_list|(
name|Type
operator|.
name|INT_TYPE
argument_list|)
expr_stmt|;
name|visit
argument_list|(
name|ctx
operator|.
name|expression
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|gen
operator|.
name|visitJumpInsn
argument_list|(
name|Opcodes
operator|.
name|IFEQ
argument_list|,
name|andFalse
argument_list|)
expr_stmt|;
name|visit
argument_list|(
name|ctx
operator|.
name|expression
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|gen
operator|.
name|visitJumpInsn
argument_list|(
name|Opcodes
operator|.
name|IFEQ
argument_list|,
name|andFalse
argument_list|)
expr_stmt|;
name|typeStack
operator|.
name|pop
argument_list|()
expr_stmt|;
name|pushBoolean
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|gen
operator|.
name|goTo
argument_list|(
name|andEnd
argument_list|)
expr_stmt|;
name|gen
operator|.
name|visitLabel
argument_list|(
name|andFalse
argument_list|)
expr_stmt|;
name|pushBoolean
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|gen
operator|.
name|visitLabel
argument_list|(
name|andEnd
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Void
name|visitBoolor
parameter_list|(
name|JavascriptParser
operator|.
name|BoolorContext
name|ctx
parameter_list|)
block|{
name|Label
name|orTrue
init|=
operator|new
name|Label
argument_list|()
decl_stmt|;
name|Label
name|orEnd
init|=
operator|new
name|Label
argument_list|()
decl_stmt|;
name|typeStack
operator|.
name|push
argument_list|(
name|Type
operator|.
name|INT_TYPE
argument_list|)
expr_stmt|;
name|visit
argument_list|(
name|ctx
operator|.
name|expression
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|gen
operator|.
name|visitJumpInsn
argument_list|(
name|Opcodes
operator|.
name|IFNE
argument_list|,
name|orTrue
argument_list|)
expr_stmt|;
name|visit
argument_list|(
name|ctx
operator|.
name|expression
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|gen
operator|.
name|visitJumpInsn
argument_list|(
name|Opcodes
operator|.
name|IFNE
argument_list|,
name|orTrue
argument_list|)
expr_stmt|;
name|typeStack
operator|.
name|pop
argument_list|()
expr_stmt|;
name|pushBoolean
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|gen
operator|.
name|goTo
argument_list|(
name|orEnd
argument_list|)
expr_stmt|;
name|gen
operator|.
name|visitLabel
argument_list|(
name|orTrue
argument_list|)
expr_stmt|;
name|pushBoolean
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|gen
operator|.
name|visitLabel
argument_list|(
name|orEnd
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Void
name|visitConditional
parameter_list|(
name|JavascriptParser
operator|.
name|ConditionalContext
name|ctx
parameter_list|)
block|{
name|Label
name|condFalse
init|=
operator|new
name|Label
argument_list|()
decl_stmt|;
name|Label
name|condEnd
init|=
operator|new
name|Label
argument_list|()
decl_stmt|;
name|typeStack
operator|.
name|push
argument_list|(
name|Type
operator|.
name|INT_TYPE
argument_list|)
expr_stmt|;
name|visit
argument_list|(
name|ctx
operator|.
name|expression
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|typeStack
operator|.
name|pop
argument_list|()
expr_stmt|;
name|gen
operator|.
name|visitJumpInsn
argument_list|(
name|Opcodes
operator|.
name|IFEQ
argument_list|,
name|condFalse
argument_list|)
expr_stmt|;
name|visit
argument_list|(
name|ctx
operator|.
name|expression
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|gen
operator|.
name|goTo
argument_list|(
name|condEnd
argument_list|)
expr_stmt|;
name|gen
operator|.
name|visitLabel
argument_list|(
name|condFalse
argument_list|)
expr_stmt|;
name|visit
argument_list|(
name|ctx
operator|.
name|expression
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|gen
operator|.
name|visitLabel
argument_list|(
name|condEnd
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
specifier|private
name|void
name|pushArith
parameter_list|(
name|int
name|operator
parameter_list|,
name|ExpressionContext
name|left
parameter_list|,
name|ExpressionContext
name|right
parameter_list|)
block|{
name|pushBinaryOp
argument_list|(
name|operator
argument_list|,
name|left
argument_list|,
name|right
argument_list|,
name|Type
operator|.
name|DOUBLE_TYPE
argument_list|,
name|Type
operator|.
name|DOUBLE_TYPE
argument_list|,
name|Type
operator|.
name|DOUBLE_TYPE
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|pushShift
parameter_list|(
name|int
name|operator
parameter_list|,
name|ExpressionContext
name|left
parameter_list|,
name|ExpressionContext
name|right
parameter_list|)
block|{
name|pushBinaryOp
argument_list|(
name|operator
argument_list|,
name|left
argument_list|,
name|right
argument_list|,
name|Type
operator|.
name|LONG_TYPE
argument_list|,
name|Type
operator|.
name|INT_TYPE
argument_list|,
name|Type
operator|.
name|LONG_TYPE
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|pushBitwise
parameter_list|(
name|int
name|operator
parameter_list|,
name|ExpressionContext
name|left
parameter_list|,
name|ExpressionContext
name|right
parameter_list|)
block|{
name|pushBinaryOp
argument_list|(
name|operator
argument_list|,
name|left
argument_list|,
name|right
argument_list|,
name|Type
operator|.
name|LONG_TYPE
argument_list|,
name|Type
operator|.
name|LONG_TYPE
argument_list|,
name|Type
operator|.
name|LONG_TYPE
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|pushBinaryOp
parameter_list|(
name|int
name|operator
parameter_list|,
name|ExpressionContext
name|left
parameter_list|,
name|ExpressionContext
name|right
parameter_list|,
name|Type
name|leftType
parameter_list|,
name|Type
name|rightType
parameter_list|,
name|Type
name|returnType
parameter_list|)
block|{
name|typeStack
operator|.
name|push
argument_list|(
name|leftType
argument_list|)
expr_stmt|;
name|visit
argument_list|(
name|left
argument_list|)
expr_stmt|;
name|typeStack
operator|.
name|pop
argument_list|()
expr_stmt|;
name|typeStack
operator|.
name|push
argument_list|(
name|rightType
argument_list|)
expr_stmt|;
name|visit
argument_list|(
name|right
argument_list|)
expr_stmt|;
name|typeStack
operator|.
name|pop
argument_list|()
expr_stmt|;
name|gen
operator|.
name|visitInsn
argument_list|(
name|operator
argument_list|)
expr_stmt|;
name|gen
operator|.
name|cast
argument_list|(
name|returnType
argument_list|,
name|typeStack
operator|.
name|peek
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|pushCond
parameter_list|(
name|int
name|operator
parameter_list|,
name|ExpressionContext
name|left
parameter_list|,
name|ExpressionContext
name|right
parameter_list|)
block|{
name|Label
name|labelTrue
init|=
operator|new
name|Label
argument_list|()
decl_stmt|;
name|Label
name|labelReturn
init|=
operator|new
name|Label
argument_list|()
decl_stmt|;
name|typeStack
operator|.
name|push
argument_list|(
name|Type
operator|.
name|DOUBLE_TYPE
argument_list|)
expr_stmt|;
name|visit
argument_list|(
name|left
argument_list|)
expr_stmt|;
name|visit
argument_list|(
name|right
argument_list|)
expr_stmt|;
name|typeStack
operator|.
name|pop
argument_list|()
expr_stmt|;
name|gen
operator|.
name|ifCmp
argument_list|(
name|Type
operator|.
name|DOUBLE_TYPE
argument_list|,
name|operator
argument_list|,
name|labelTrue
argument_list|)
expr_stmt|;
name|pushBoolean
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|gen
operator|.
name|goTo
argument_list|(
name|labelReturn
argument_list|)
expr_stmt|;
name|gen
operator|.
name|visitLabel
argument_list|(
name|labelTrue
argument_list|)
expr_stmt|;
name|pushBoolean
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|gen
operator|.
name|visitLabel
argument_list|(
name|labelReturn
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|pushBoolean
parameter_list|(
name|boolean
name|truth
parameter_list|)
block|{
switch|switch
condition|(
name|typeStack
operator|.
name|peek
argument_list|()
operator|.
name|getSort
argument_list|()
condition|)
block|{
case|case
name|Type
operator|.
name|INT
case|:
name|gen
operator|.
name|push
argument_list|(
name|truth
argument_list|)
expr_stmt|;
break|break;
case|case
name|Type
operator|.
name|LONG
case|:
name|gen
operator|.
name|push
argument_list|(
name|truth
condition|?
literal|1L
else|:
literal|0L
argument_list|)
expr_stmt|;
break|break;
case|case
name|Type
operator|.
name|DOUBLE
case|:
name|gen
operator|.
name|push
argument_list|(
name|truth
condition|?
literal|1.
else|:
literal|0.
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Invalid expected type: "
operator|+
name|typeStack
operator|.
name|peek
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|pushLong
parameter_list|(
name|long
name|i
parameter_list|)
block|{
switch|switch
condition|(
name|typeStack
operator|.
name|peek
argument_list|()
operator|.
name|getSort
argument_list|()
condition|)
block|{
case|case
name|Type
operator|.
name|INT
case|:
name|gen
operator|.
name|push
argument_list|(
operator|(
name|int
operator|)
name|i
argument_list|)
expr_stmt|;
break|break;
case|case
name|Type
operator|.
name|LONG
case|:
name|gen
operator|.
name|push
argument_list|(
name|i
argument_list|)
expr_stmt|;
break|break;
case|case
name|Type
operator|.
name|DOUBLE
case|:
name|gen
operator|.
name|push
argument_list|(
operator|(
name|double
operator|)
name|i
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Invalid expected type: "
operator|+
name|typeStack
operator|.
name|peek
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
operator|.
name|visit
argument_list|(
name|parseTree
argument_list|)
expr_stmt|;
name|gen
operator|.
name|returnValue
argument_list|()
expr_stmt|;
name|gen
operator|.
name|endMethod
argument_list|()
expr_stmt|;
name|classWriter
operator|.
name|visitEnd
argument_list|()
expr_stmt|;
block|}
DECL|method|normalizeQuotes
specifier|static
name|String
name|normalizeQuotes
parameter_list|(
name|String
name|text
parameter_list|)
block|{
name|StringBuilder
name|out
init|=
operator|new
name|StringBuilder
argument_list|(
name|text
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|inDoubleQuotes
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|text
operator|.
name|length
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|char
name|c
init|=
name|text
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|'\\'
condition|)
block|{
name|c
operator|=
name|text
operator|.
name|charAt
argument_list|(
operator|++
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|c
operator|==
literal|'\\'
condition|)
block|{
name|out
operator|.
name|append
argument_list|(
literal|'\\'
argument_list|)
expr_stmt|;
comment|// re-escape the backslash
block|}
comment|// no escape for double quote
block|}
elseif|else
if|if
condition|(
name|c
operator|==
literal|'\''
condition|)
block|{
if|if
condition|(
name|inDoubleQuotes
condition|)
block|{
comment|// escape in output
name|out
operator|.
name|append
argument_list|(
literal|'\\'
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|int
name|j
init|=
name|findSingleQuoteStringEnd
argument_list|(
name|text
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|out
operator|.
name|append
argument_list|(
name|text
argument_list|,
name|i
argument_list|,
name|j
argument_list|)
expr_stmt|;
comment|// copy up to end quote (leave end for append below)
name|i
operator|=
name|j
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|c
operator|==
literal|'"'
condition|)
block|{
name|c
operator|=
literal|'\''
expr_stmt|;
comment|// change beginning/ending doubles to singles
name|inDoubleQuotes
operator|=
operator|!
name|inDoubleQuotes
expr_stmt|;
block|}
name|out
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
return|return
name|out
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|findSingleQuoteStringEnd
specifier|static
name|int
name|findSingleQuoteStringEnd
parameter_list|(
name|String
name|text
parameter_list|,
name|int
name|start
parameter_list|)
block|{
operator|++
name|start
expr_stmt|;
comment|// skip beginning
while|while
condition|(
name|text
operator|.
name|charAt
argument_list|(
name|start
argument_list|)
operator|!=
literal|'\''
condition|)
block|{
if|if
condition|(
name|text
operator|.
name|charAt
argument_list|(
name|start
argument_list|)
operator|==
literal|'\\'
condition|)
block|{
operator|++
name|start
expr_stmt|;
comment|// blindly consume escape value
block|}
operator|++
name|start
expr_stmt|;
block|}
return|return
name|start
return|;
block|}
comment|/**     * The default set of functions available to expressions.    *<p>    * See the {@link org.apache.lucene.expressions.js package documentation}    * for a list.    */
DECL|field|DEFAULT_FUNCTIONS
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Method
argument_list|>
name|DEFAULT_FUNCTIONS
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Method
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
try|try
block|{
specifier|final
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
try|try
init|(
name|Reader
name|in
init|=
name|IOUtils
operator|.
name|getDecodingReader
argument_list|(
name|JavascriptCompiler
operator|.
name|class
argument_list|,
name|JavascriptCompiler
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|".properties"
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
init|)
block|{
name|props
operator|.
name|load
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
for|for
control|(
specifier|final
name|String
name|call
range|:
name|props
operator|.
name|stringPropertyNames
argument_list|()
control|)
block|{
specifier|final
name|String
index|[]
name|vals
init|=
name|props
operator|.
name|getProperty
argument_list|(
name|call
argument_list|)
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
if|if
condition|(
name|vals
operator|.
name|length
operator|!=
literal|3
condition|)
block|{
throw|throw
operator|new
name|Error
argument_list|(
literal|"Syntax error while reading Javascript functions from resource"
argument_list|)
throw|;
block|}
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
init|=
name|Class
operator|.
name|forName
argument_list|(
name|vals
index|[
literal|0
index|]
operator|.
name|trim
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|String
name|methodName
init|=
name|vals
index|[
literal|1
index|]
operator|.
name|trim
argument_list|()
decl_stmt|;
specifier|final
name|int
name|arity
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|vals
index|[
literal|2
index|]
operator|.
name|trim
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"rawtypes"
block|,
literal|"unchecked"
block|}
argument_list|)
name|Class
index|[]
name|args
init|=
operator|new
name|Class
index|[
name|arity
index|]
decl_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|args
argument_list|,
name|double
operator|.
name|class
argument_list|)
expr_stmt|;
name|Method
name|method
init|=
name|clazz
operator|.
name|getMethod
argument_list|(
name|methodName
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|checkFunction
argument_list|(
name|method
argument_list|,
name|JavascriptCompiler
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|call
argument_list|,
name|method
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|ReflectiveOperationException
decl||
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|Error
argument_list|(
literal|"Cannot resolve function"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|DEFAULT_FUNCTIONS
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|map
argument_list|)
expr_stmt|;
block|}
DECL|method|checkFunction
specifier|private
specifier|static
name|void
name|checkFunction
parameter_list|(
name|Method
name|method
parameter_list|,
name|ClassLoader
name|parent
parameter_list|)
block|{
comment|// We can only call the function if the given parent class loader of our compiled class has access to the method:
specifier|final
name|ClassLoader
name|functionClassloader
init|=
name|method
operator|.
name|getDeclaringClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
decl_stmt|;
if|if
condition|(
name|functionClassloader
operator|!=
literal|null
condition|)
block|{
comment|// it is a system class iff null!
name|boolean
name|found
init|=
literal|false
decl_stmt|;
while|while
condition|(
name|parent
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|parent
operator|==
name|functionClassloader
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
break|break;
block|}
name|parent
operator|=
name|parent
operator|.
name|getParent
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|found
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|method
operator|+
literal|" is not declared by a class which is accessible by the given parent ClassLoader."
argument_list|)
throw|;
block|}
block|}
comment|// do some checks if the signature is "compatible":
if|if
condition|(
operator|!
name|Modifier
operator|.
name|isStatic
argument_list|(
name|method
operator|.
name|getModifiers
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|method
operator|+
literal|" is not static."
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|Modifier
operator|.
name|isPublic
argument_list|(
name|method
operator|.
name|getModifiers
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|method
operator|+
literal|" is not public."
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|Modifier
operator|.
name|isPublic
argument_list|(
name|method
operator|.
name|getDeclaringClass
argument_list|()
operator|.
name|getModifiers
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|method
operator|.
name|getDeclaringClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" is not public."
argument_list|)
throw|;
block|}
for|for
control|(
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
range|:
name|method
operator|.
name|getParameterTypes
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|clazz
operator|.
name|equals
argument_list|(
name|double
operator|.
name|class
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|method
operator|+
literal|" must take only double parameters"
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|method
operator|.
name|getReturnType
argument_list|()
operator|!=
name|double
operator|.
name|class
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|method
operator|+
literal|" does not return a double."
argument_list|)
throw|;
block|}
block|}
block|}
end_class
end_unit
