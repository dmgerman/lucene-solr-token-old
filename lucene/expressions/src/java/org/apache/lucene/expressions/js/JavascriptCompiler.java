begin_unit
begin_package
DECL|package|org.apache.lucene.expressions.js
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|expressions
operator|.
name|js
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import
begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import
begin_import
import|import
name|org
operator|.
name|antlr
operator|.
name|runtime
operator|.
name|ANTLRStringStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|antlr
operator|.
name|runtime
operator|.
name|CharStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|antlr
operator|.
name|runtime
operator|.
name|CommonTokenStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|antlr
operator|.
name|runtime
operator|.
name|RecognitionException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|antlr
operator|.
name|runtime
operator|.
name|tree
operator|.
name|Tree
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|expressions
operator|.
name|Expression
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queries
operator|.
name|function
operator|.
name|FunctionValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|ClassWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|Label
import|;
end_import
begin_import
import|import
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|MethodVisitor
import|;
end_import
begin_import
import|import
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|Opcodes
import|;
end_import
begin_import
import|import
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|Type
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|Opcodes
operator|.
name|AALOAD
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|Opcodes
operator|.
name|ACC_FINAL
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|Opcodes
operator|.
name|ACC_PUBLIC
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|Opcodes
operator|.
name|ACC_SUPER
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|Opcodes
operator|.
name|ALOAD
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|Opcodes
operator|.
name|BIPUSH
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|Opcodes
operator|.
name|D2I
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|Opcodes
operator|.
name|D2L
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|Opcodes
operator|.
name|DADD
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|Opcodes
operator|.
name|DCMPG
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|Opcodes
operator|.
name|DCMPL
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|Opcodes
operator|.
name|DCONST_0
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|Opcodes
operator|.
name|DCONST_1
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|Opcodes
operator|.
name|DDIV
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|Opcodes
operator|.
name|DNEG
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|Opcodes
operator|.
name|DREM
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|Opcodes
operator|.
name|DRETURN
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|Opcodes
operator|.
name|DSUB
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|Opcodes
operator|.
name|GOTO
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|Opcodes
operator|.
name|I2D
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|Opcodes
operator|.
name|I2L
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|Opcodes
operator|.
name|ICONST_0
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|Opcodes
operator|.
name|ICONST_1
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|Opcodes
operator|.
name|ICONST_2
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|Opcodes
operator|.
name|ICONST_3
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|Opcodes
operator|.
name|ICONST_4
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|Opcodes
operator|.
name|ICONST_5
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|Opcodes
operator|.
name|IFEQ
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|Opcodes
operator|.
name|IFGE
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|Opcodes
operator|.
name|IFGT
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|Opcodes
operator|.
name|IFLE
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|Opcodes
operator|.
name|IFLT
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|Opcodes
operator|.
name|IFNE
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|Opcodes
operator|.
name|ILOAD
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|Opcodes
operator|.
name|INVOKESPECIAL
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|Opcodes
operator|.
name|INVOKESTATIC
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|Opcodes
operator|.
name|INVOKEVIRTUAL
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|Opcodes
operator|.
name|L2D
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|Opcodes
operator|.
name|L2I
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|Opcodes
operator|.
name|LAND
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|Opcodes
operator|.
name|LCONST_0
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|Opcodes
operator|.
name|LCONST_1
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|Opcodes
operator|.
name|LOR
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|Opcodes
operator|.
name|LSHL
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|Opcodes
operator|.
name|LSHR
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|Opcodes
operator|.
name|LUSHR
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|Opcodes
operator|.
name|LXOR
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|Opcodes
operator|.
name|RETURN
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|Opcodes
operator|.
name|SIPUSH
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|Opcodes
operator|.
name|V1_7
import|;
end_import
begin_comment
comment|/**  * An expression compiler for javascript expressions.  *  * @lucene.experimental  */
end_comment
begin_class
DECL|class|JavascriptCompiler
specifier|public
class|class
name|JavascriptCompiler
block|{
DECL|enum|ComputedType
specifier|private
specifier|static
enum|enum
name|ComputedType
block|{
DECL|enum constant|INT
DECL|enum constant|LONG
DECL|enum constant|DOUBLE
name|INT
block|,
name|LONG
block|,
name|DOUBLE
block|}
DECL|class|Loader
class|class
name|Loader
extends|extends
name|ClassLoader
block|{
DECL|method|Loader
name|Loader
parameter_list|(
name|ClassLoader
name|parent
parameter_list|)
block|{
name|super
argument_list|(
name|parent
argument_list|)
expr_stmt|;
block|}
DECL|method|define
specifier|public
name|Class
argument_list|<
name|?
extends|extends
name|Expression
argument_list|>
name|define
parameter_list|(
name|String
name|className
parameter_list|,
name|byte
index|[]
name|bytecode
parameter_list|)
block|{
return|return
name|super
operator|.
name|defineClass
argument_list|(
name|className
argument_list|,
name|bytecode
argument_list|,
literal|0
argument_list|,
name|bytecode
operator|.
name|length
argument_list|)
operator|.
name|asSubclass
argument_list|(
name|Expression
operator|.
name|class
argument_list|)
return|;
block|}
block|}
DECL|field|EXPRESSION_CLASS_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|EXPRESSION_CLASS_PREFIX
init|=
name|JavascriptCompiler
operator|.
name|class
operator|.
name|getPackage
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|".Computed_"
decl_stmt|;
DECL|field|EXPRESSION_INTERNAL_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|EXPRESSION_INTERNAL_PREFIX
init|=
name|JavascriptCompiler
operator|.
name|class
operator|.
name|getPackage
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|replace
argument_list|(
literal|"."
argument_list|,
literal|"/"
argument_list|)
operator|+
literal|"/Computed_"
decl_stmt|;
DECL|field|COMPILED_EXPRESSION_INTERNAL
specifier|private
specifier|static
specifier|final
name|String
name|COMPILED_EXPRESSION_INTERNAL
init|=
name|Type
operator|.
name|getInternalName
argument_list|(
name|Expression
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|FUNCTION_VALUES_INTERNAL
specifier|private
specifier|static
specifier|final
name|String
name|FUNCTION_VALUES_INTERNAL
init|=
name|Type
operator|.
name|getInternalName
argument_list|(
name|FunctionValues
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|loader
specifier|private
name|Loader
name|loader
decl_stmt|;
DECL|field|counter
specifier|private
name|AtomicLong
name|counter
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
DECL|field|className
specifier|private
name|String
name|className
decl_stmt|;
DECL|field|classWriter
specifier|private
name|ClassWriter
name|classWriter
decl_stmt|;
DECL|field|methodVisitor
specifier|private
name|MethodVisitor
name|methodVisitor
decl_stmt|;
DECL|field|externalsMap
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|externalsMap
decl_stmt|;
DECL|field|externalsList
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|externalsList
decl_stmt|;
comment|/**    * Constructs a compiler for expressions.    */
DECL|method|JavascriptCompiler
specifier|public
name|JavascriptCompiler
parameter_list|()
block|{
name|this
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**    * Constructs a compiler for expressions that will be loaded using the given class loader as the parent.    * @param parent Class loader to load the dynamically compiled expression    */
DECL|method|JavascriptCompiler
specifier|public
name|JavascriptCompiler
parameter_list|(
name|ClassLoader
name|parent
parameter_list|)
block|{
if|if
condition|(
name|parent
operator|==
literal|null
condition|)
block|{
name|parent
operator|=
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
expr_stmt|;
block|}
name|loader
operator|=
operator|new
name|Loader
argument_list|(
name|parent
argument_list|)
expr_stmt|;
block|}
comment|/**    * Compiles the given expression.    *    * @param expression The expression to compile    * @return A new compiled expression    * @throws ParseException on failure to compile    */
DECL|method|compile
specifier|public
specifier|static
name|Expression
name|compile
parameter_list|(
name|String
name|expression
parameter_list|)
throws|throws
name|ParseException
block|{
return|return
operator|new
name|JavascriptCompiler
argument_list|()
operator|.
name|compileExpression
argument_list|(
name|expression
argument_list|)
return|;
block|}
comment|/**    * Compiles the given expression.    *    * @param expression The expression to compile    * @return A new compiled expression    * @throws ParseException on failure to compile    */
DECL|method|compileExpression
specifier|public
name|Expression
name|compileExpression
parameter_list|(
name|String
name|expression
parameter_list|)
throws|throws
name|ParseException
block|{
try|try
block|{
name|this
operator|.
name|className
operator|=
literal|"Expr"
operator|+
name|Long
operator|.
name|toString
argument_list|(
name|counter
operator|.
name|incrementAndGet
argument_list|()
argument_list|)
expr_stmt|;
name|externalsMap
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
expr_stmt|;
name|externalsList
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|Tree
name|antlrTree
init|=
name|getAntlrComputedExpressionTree
argument_list|(
name|expression
argument_list|)
decl_stmt|;
name|beginCompile
argument_list|()
expr_stmt|;
name|recursiveCompile
argument_list|(
name|antlrTree
argument_list|,
name|ComputedType
operator|.
name|DOUBLE
argument_list|)
expr_stmt|;
name|endCompile
argument_list|()
expr_stmt|;
name|Class
argument_list|<
name|?
extends|extends
name|Expression
argument_list|>
name|evaluatorClass
init|=
name|loader
operator|.
name|define
argument_list|(
name|EXPRESSION_CLASS_PREFIX
operator|+
name|className
argument_list|,
name|classWriter
operator|.
name|toByteArray
argument_list|()
argument_list|)
decl_stmt|;
name|Constructor
argument_list|<
name|?
extends|extends
name|Expression
argument_list|>
name|constructor
init|=
name|evaluatorClass
operator|.
name|getConstructor
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|String
index|[]
operator|.
expr|class
argument_list|)
decl_stmt|;
return|return
name|constructor
operator|.
name|newInstance
argument_list|(
name|expression
argument_list|,
name|externalsList
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|externalsList
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|InstantiationException
name|exception
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"An internal error occurred attempting to compile the expression ("
operator|+
name|className
operator|+
literal|")."
argument_list|,
name|exception
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|exception
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"An internal error occurred attempting to compile the expression ("
operator|+
name|className
operator|+
literal|")."
argument_list|,
name|exception
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|exception
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"An internal error occurred attempting to compile the expression ("
operator|+
name|className
operator|+
literal|")."
argument_list|,
name|exception
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|exception
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"An internal error occurred attempting to compile the expression ("
operator|+
name|className
operator|+
literal|")."
argument_list|,
name|exception
argument_list|)
throw|;
block|}
block|}
DECL|method|beginCompile
specifier|private
name|void
name|beginCompile
parameter_list|()
block|{
name|classWriter
operator|=
operator|new
name|ClassWriter
argument_list|(
name|ClassWriter
operator|.
name|COMPUTE_FRAMES
argument_list|)
expr_stmt|;
name|classWriter
operator|.
name|visit
argument_list|(
name|V1_7
argument_list|,
name|ACC_PUBLIC
operator|+
name|ACC_SUPER
operator|+
name|ACC_FINAL
argument_list|,
name|EXPRESSION_INTERNAL_PREFIX
operator|+
name|className
argument_list|,
literal|null
argument_list|,
name|COMPILED_EXPRESSION_INTERNAL
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|MethodVisitor
name|constructor
init|=
name|classWriter
operator|.
name|visitMethod
argument_list|(
name|ACC_PUBLIC
argument_list|,
literal|"<init>"
argument_list|,
literal|"(Ljava/lang/String;[Ljava/lang/String;)V"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|constructor
operator|.
name|visitCode
argument_list|()
expr_stmt|;
name|constructor
operator|.
name|visitVarInsn
argument_list|(
name|ALOAD
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|constructor
operator|.
name|visitVarInsn
argument_list|(
name|ALOAD
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|constructor
operator|.
name|visitVarInsn
argument_list|(
name|ALOAD
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|constructor
operator|.
name|visitMethodInsn
argument_list|(
name|INVOKESPECIAL
argument_list|,
name|COMPILED_EXPRESSION_INTERNAL
argument_list|,
literal|"<init>"
argument_list|,
literal|"(Ljava/lang/String;[Ljava/lang/String;)V"
argument_list|)
expr_stmt|;
name|constructor
operator|.
name|visitInsn
argument_list|(
name|RETURN
argument_list|)
expr_stmt|;
name|constructor
operator|.
name|visitMaxs
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|constructor
operator|.
name|visitEnd
argument_list|()
expr_stmt|;
name|methodVisitor
operator|=
name|classWriter
operator|.
name|visitMethod
argument_list|(
name|ACC_PUBLIC
argument_list|,
literal|"evaluate"
argument_list|,
literal|"(I[L"
operator|+
name|FUNCTION_VALUES_INTERNAL
operator|+
literal|";)D"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|methodVisitor
operator|.
name|visitCode
argument_list|()
expr_stmt|;
block|}
DECL|method|recursiveCompile
specifier|private
name|void
name|recursiveCompile
parameter_list|(
name|Tree
name|current
parameter_list|,
name|ComputedType
name|expected
parameter_list|)
block|{
name|int
name|type
init|=
name|current
operator|.
name|getType
argument_list|()
decl_stmt|;
name|String
name|text
init|=
name|current
operator|.
name|getText
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|JavascriptParser
operator|.
name|AT_CALL
case|:
name|Tree
name|identifier
init|=
name|current
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|String
name|call
init|=
name|identifier
operator|.
name|getText
argument_list|()
decl_stmt|;
name|int
name|arguments
init|=
name|current
operator|.
name|getChildCount
argument_list|()
operator|-
literal|1
decl_stmt|;
name|JavascriptFunction
name|method
init|=
name|JavascriptFunction
operator|.
name|getMethod
argument_list|(
name|call
argument_list|,
name|arguments
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|argument
init|=
literal|1
init|;
name|argument
operator|<=
name|arguments
condition|;
operator|++
name|argument
control|)
block|{
name|recursiveCompile
argument_list|(
name|current
operator|.
name|getChild
argument_list|(
name|argument
argument_list|)
argument_list|,
name|ComputedType
operator|.
name|DOUBLE
argument_list|)
expr_stmt|;
block|}
name|methodVisitor
operator|.
name|visitMethodInsn
argument_list|(
name|INVOKESTATIC
argument_list|,
name|method
operator|.
name|klass
argument_list|,
name|method
operator|.
name|method
argument_list|,
name|method
operator|.
name|signature
argument_list|)
expr_stmt|;
name|typeCompile
argument_list|(
name|expected
argument_list|,
name|ComputedType
operator|.
name|DOUBLE
argument_list|)
expr_stmt|;
break|break;
case|case
name|JavascriptParser
operator|.
name|ID
case|:
name|int
name|index
decl_stmt|;
if|if
condition|(
name|externalsMap
operator|.
name|containsKey
argument_list|(
name|text
argument_list|)
condition|)
block|{
name|index
operator|=
name|externalsMap
operator|.
name|get
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|index
operator|=
name|externalsList
operator|.
name|size
argument_list|()
expr_stmt|;
name|externalsList
operator|.
name|add
argument_list|(
name|text
argument_list|)
expr_stmt|;
name|externalsMap
operator|.
name|put
argument_list|(
name|text
argument_list|,
name|index
argument_list|)
expr_stmt|;
block|}
name|methodVisitor
operator|.
name|visitVarInsn
argument_list|(
name|ALOAD
argument_list|,
literal|2
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|index
condition|)
block|{
case|case
literal|0
case|:
name|methodVisitor
operator|.
name|visitInsn
argument_list|(
name|ICONST_0
argument_list|)
expr_stmt|;
break|break;
case|case
literal|1
case|:
name|methodVisitor
operator|.
name|visitInsn
argument_list|(
name|ICONST_1
argument_list|)
expr_stmt|;
break|break;
case|case
literal|2
case|:
name|methodVisitor
operator|.
name|visitInsn
argument_list|(
name|ICONST_2
argument_list|)
expr_stmt|;
break|break;
case|case
literal|3
case|:
name|methodVisitor
operator|.
name|visitInsn
argument_list|(
name|ICONST_3
argument_list|)
expr_stmt|;
break|break;
case|case
literal|4
case|:
name|methodVisitor
operator|.
name|visitInsn
argument_list|(
name|ICONST_4
argument_list|)
expr_stmt|;
break|break;
case|case
literal|5
case|:
name|methodVisitor
operator|.
name|visitInsn
argument_list|(
name|ICONST_5
argument_list|)
expr_stmt|;
break|break;
default|default:
if|if
condition|(
name|index
operator|<
literal|128
condition|)
block|{
name|methodVisitor
operator|.
name|visitIntInsn
argument_list|(
name|BIPUSH
argument_list|,
name|index
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|index
operator|<
literal|16384
condition|)
block|{
name|methodVisitor
operator|.
name|visitIntInsn
argument_list|(
name|SIPUSH
argument_list|,
name|index
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|methodVisitor
operator|.
name|visitLdcInsn
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
name|methodVisitor
operator|.
name|visitInsn
argument_list|(
name|AALOAD
argument_list|)
expr_stmt|;
name|methodVisitor
operator|.
name|visitVarInsn
argument_list|(
name|ILOAD
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|methodVisitor
operator|.
name|visitMethodInsn
argument_list|(
name|INVOKEVIRTUAL
argument_list|,
name|FUNCTION_VALUES_INTERNAL
argument_list|,
literal|"doubleVal"
argument_list|,
literal|"(I)D"
argument_list|)
expr_stmt|;
name|typeCompile
argument_list|(
name|expected
argument_list|,
name|ComputedType
operator|.
name|DOUBLE
argument_list|)
expr_stmt|;
break|break;
case|case
name|JavascriptParser
operator|.
name|HEX
case|:
name|long
name|hex
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|text
operator|.
name|substring
argument_list|(
literal|2
argument_list|)
argument_list|,
literal|16
argument_list|)
decl_stmt|;
if|if
condition|(
name|expected
operator|==
name|ComputedType
operator|.
name|INT
condition|)
block|{
name|methodVisitor
operator|.
name|visitLdcInsn
argument_list|(
operator|(
name|int
operator|)
name|hex
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|expected
operator|==
name|ComputedType
operator|.
name|LONG
condition|)
block|{
name|methodVisitor
operator|.
name|visitLdcInsn
argument_list|(
name|hex
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|methodVisitor
operator|.
name|visitLdcInsn
argument_list|(
operator|(
name|double
operator|)
name|hex
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|JavascriptParser
operator|.
name|OCTAL
case|:
name|long
name|octal
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|text
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|8
argument_list|)
decl_stmt|;
if|if
condition|(
name|expected
operator|==
name|ComputedType
operator|.
name|INT
condition|)
block|{
name|methodVisitor
operator|.
name|visitLdcInsn
argument_list|(
operator|(
name|int
operator|)
name|octal
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|expected
operator|==
name|ComputedType
operator|.
name|LONG
condition|)
block|{
name|methodVisitor
operator|.
name|visitLdcInsn
argument_list|(
name|octal
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|methodVisitor
operator|.
name|visitLdcInsn
argument_list|(
operator|(
name|double
operator|)
name|octal
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|JavascriptParser
operator|.
name|DECIMAL
case|:
name|double
name|decimal
init|=
name|Double
operator|.
name|parseDouble
argument_list|(
name|text
argument_list|)
decl_stmt|;
name|methodVisitor
operator|.
name|visitLdcInsn
argument_list|(
name|decimal
argument_list|)
expr_stmt|;
name|typeCompile
argument_list|(
name|expected
argument_list|,
name|ComputedType
operator|.
name|DOUBLE
argument_list|)
expr_stmt|;
break|break;
case|case
name|JavascriptParser
operator|.
name|AT_NEGATE
case|:
name|recursiveCompile
argument_list|(
name|current
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
argument_list|,
name|ComputedType
operator|.
name|DOUBLE
argument_list|)
expr_stmt|;
name|methodVisitor
operator|.
name|visitInsn
argument_list|(
name|DNEG
argument_list|)
expr_stmt|;
name|typeCompile
argument_list|(
name|expected
argument_list|,
name|ComputedType
operator|.
name|DOUBLE
argument_list|)
expr_stmt|;
break|break;
case|case
name|JavascriptParser
operator|.
name|AT_ADD
case|:
name|recursiveCompile
argument_list|(
name|current
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
argument_list|,
name|ComputedType
operator|.
name|DOUBLE
argument_list|)
expr_stmt|;
name|recursiveCompile
argument_list|(
name|current
operator|.
name|getChild
argument_list|(
literal|1
argument_list|)
argument_list|,
name|ComputedType
operator|.
name|DOUBLE
argument_list|)
expr_stmt|;
name|methodVisitor
operator|.
name|visitInsn
argument_list|(
name|DADD
argument_list|)
expr_stmt|;
name|typeCompile
argument_list|(
name|expected
argument_list|,
name|ComputedType
operator|.
name|DOUBLE
argument_list|)
expr_stmt|;
break|break;
case|case
name|JavascriptParser
operator|.
name|AT_SUBTRACT
case|:
name|recursiveCompile
argument_list|(
name|current
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
argument_list|,
name|ComputedType
operator|.
name|DOUBLE
argument_list|)
expr_stmt|;
name|recursiveCompile
argument_list|(
name|current
operator|.
name|getChild
argument_list|(
literal|1
argument_list|)
argument_list|,
name|ComputedType
operator|.
name|DOUBLE
argument_list|)
expr_stmt|;
name|methodVisitor
operator|.
name|visitInsn
argument_list|(
name|DSUB
argument_list|)
expr_stmt|;
name|typeCompile
argument_list|(
name|expected
argument_list|,
name|ComputedType
operator|.
name|DOUBLE
argument_list|)
expr_stmt|;
break|break;
case|case
name|JavascriptParser
operator|.
name|AT_MULTIPLY
case|:
name|recursiveCompile
argument_list|(
name|current
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
argument_list|,
name|ComputedType
operator|.
name|DOUBLE
argument_list|)
expr_stmt|;
name|recursiveCompile
argument_list|(
name|current
operator|.
name|getChild
argument_list|(
literal|1
argument_list|)
argument_list|,
name|ComputedType
operator|.
name|DOUBLE
argument_list|)
expr_stmt|;
name|methodVisitor
operator|.
name|visitInsn
argument_list|(
name|Opcodes
operator|.
name|DMUL
argument_list|)
expr_stmt|;
name|typeCompile
argument_list|(
name|expected
argument_list|,
name|ComputedType
operator|.
name|DOUBLE
argument_list|)
expr_stmt|;
break|break;
case|case
name|JavascriptParser
operator|.
name|AT_DIVIDE
case|:
name|recursiveCompile
argument_list|(
name|current
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
argument_list|,
name|ComputedType
operator|.
name|DOUBLE
argument_list|)
expr_stmt|;
name|recursiveCompile
argument_list|(
name|current
operator|.
name|getChild
argument_list|(
literal|1
argument_list|)
argument_list|,
name|ComputedType
operator|.
name|DOUBLE
argument_list|)
expr_stmt|;
name|methodVisitor
operator|.
name|visitInsn
argument_list|(
name|DDIV
argument_list|)
expr_stmt|;
name|typeCompile
argument_list|(
name|expected
argument_list|,
name|ComputedType
operator|.
name|DOUBLE
argument_list|)
expr_stmt|;
break|break;
case|case
name|JavascriptParser
operator|.
name|AT_MODULO
case|:
name|recursiveCompile
argument_list|(
name|current
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
argument_list|,
name|ComputedType
operator|.
name|DOUBLE
argument_list|)
expr_stmt|;
name|recursiveCompile
argument_list|(
name|current
operator|.
name|getChild
argument_list|(
literal|1
argument_list|)
argument_list|,
name|ComputedType
operator|.
name|DOUBLE
argument_list|)
expr_stmt|;
name|methodVisitor
operator|.
name|visitInsn
argument_list|(
name|DREM
argument_list|)
expr_stmt|;
name|typeCompile
argument_list|(
name|expected
argument_list|,
name|ComputedType
operator|.
name|DOUBLE
argument_list|)
expr_stmt|;
break|break;
case|case
name|JavascriptParser
operator|.
name|AT_BIT_SHL
case|:
name|recursiveCompile
argument_list|(
name|current
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
argument_list|,
name|ComputedType
operator|.
name|LONG
argument_list|)
expr_stmt|;
name|recursiveCompile
argument_list|(
name|current
operator|.
name|getChild
argument_list|(
literal|1
argument_list|)
argument_list|,
name|ComputedType
operator|.
name|INT
argument_list|)
expr_stmt|;
name|methodVisitor
operator|.
name|visitInsn
argument_list|(
name|LSHL
argument_list|)
expr_stmt|;
name|typeCompile
argument_list|(
name|expected
argument_list|,
name|ComputedType
operator|.
name|LONG
argument_list|)
expr_stmt|;
break|break;
case|case
name|JavascriptParser
operator|.
name|AT_BIT_SHR
case|:
name|recursiveCompile
argument_list|(
name|current
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
argument_list|,
name|ComputedType
operator|.
name|LONG
argument_list|)
expr_stmt|;
name|recursiveCompile
argument_list|(
name|current
operator|.
name|getChild
argument_list|(
literal|1
argument_list|)
argument_list|,
name|ComputedType
operator|.
name|INT
argument_list|)
expr_stmt|;
name|methodVisitor
operator|.
name|visitInsn
argument_list|(
name|LSHR
argument_list|)
expr_stmt|;
name|typeCompile
argument_list|(
name|expected
argument_list|,
name|ComputedType
operator|.
name|LONG
argument_list|)
expr_stmt|;
break|break;
case|case
name|JavascriptParser
operator|.
name|AT_BIT_SHU
case|:
name|recursiveCompile
argument_list|(
name|current
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
argument_list|,
name|ComputedType
operator|.
name|LONG
argument_list|)
expr_stmt|;
name|recursiveCompile
argument_list|(
name|current
operator|.
name|getChild
argument_list|(
literal|1
argument_list|)
argument_list|,
name|ComputedType
operator|.
name|INT
argument_list|)
expr_stmt|;
name|methodVisitor
operator|.
name|visitInsn
argument_list|(
name|LUSHR
argument_list|)
expr_stmt|;
name|typeCompile
argument_list|(
name|expected
argument_list|,
name|ComputedType
operator|.
name|LONG
argument_list|)
expr_stmt|;
break|break;
case|case
name|JavascriptParser
operator|.
name|AT_BIT_AND
case|:
name|recursiveCompile
argument_list|(
name|current
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
argument_list|,
name|ComputedType
operator|.
name|LONG
argument_list|)
expr_stmt|;
name|recursiveCompile
argument_list|(
name|current
operator|.
name|getChild
argument_list|(
literal|1
argument_list|)
argument_list|,
name|ComputedType
operator|.
name|LONG
argument_list|)
expr_stmt|;
name|methodVisitor
operator|.
name|visitInsn
argument_list|(
name|LAND
argument_list|)
expr_stmt|;
name|typeCompile
argument_list|(
name|expected
argument_list|,
name|ComputedType
operator|.
name|LONG
argument_list|)
expr_stmt|;
break|break;
case|case
name|JavascriptParser
operator|.
name|AT_BIT_OR
case|:
name|recursiveCompile
argument_list|(
name|current
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
argument_list|,
name|ComputedType
operator|.
name|LONG
argument_list|)
expr_stmt|;
name|recursiveCompile
argument_list|(
name|current
operator|.
name|getChild
argument_list|(
literal|1
argument_list|)
argument_list|,
name|ComputedType
operator|.
name|LONG
argument_list|)
expr_stmt|;
name|methodVisitor
operator|.
name|visitInsn
argument_list|(
name|LOR
argument_list|)
expr_stmt|;
name|typeCompile
argument_list|(
name|expected
argument_list|,
name|ComputedType
operator|.
name|LONG
argument_list|)
expr_stmt|;
break|break;
case|case
name|JavascriptParser
operator|.
name|AT_BIT_XOR
case|:
name|recursiveCompile
argument_list|(
name|current
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
argument_list|,
name|ComputedType
operator|.
name|LONG
argument_list|)
expr_stmt|;
name|recursiveCompile
argument_list|(
name|current
operator|.
name|getChild
argument_list|(
literal|1
argument_list|)
argument_list|,
name|ComputedType
operator|.
name|LONG
argument_list|)
expr_stmt|;
name|methodVisitor
operator|.
name|visitInsn
argument_list|(
name|LXOR
argument_list|)
expr_stmt|;
name|typeCompile
argument_list|(
name|expected
argument_list|,
name|ComputedType
operator|.
name|LONG
argument_list|)
expr_stmt|;
break|break;
case|case
name|JavascriptParser
operator|.
name|AT_BIT_NOT
case|:
name|recursiveCompile
argument_list|(
name|current
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
argument_list|,
name|ComputedType
operator|.
name|LONG
argument_list|)
expr_stmt|;
name|methodVisitor
operator|.
name|visitLdcInsn
argument_list|(
operator|new
name|Long
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|methodVisitor
operator|.
name|visitInsn
argument_list|(
name|LXOR
argument_list|)
expr_stmt|;
name|typeCompile
argument_list|(
name|expected
argument_list|,
name|ComputedType
operator|.
name|LONG
argument_list|)
expr_stmt|;
break|break;
case|case
name|JavascriptParser
operator|.
name|AT_COMP_EQ
case|:
name|Label
name|labelEqTrue
init|=
operator|new
name|Label
argument_list|()
decl_stmt|;
name|Label
name|labelEqReturn
init|=
operator|new
name|Label
argument_list|()
decl_stmt|;
name|recursiveCompile
argument_list|(
name|current
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
argument_list|,
name|ComputedType
operator|.
name|DOUBLE
argument_list|)
expr_stmt|;
name|recursiveCompile
argument_list|(
name|current
operator|.
name|getChild
argument_list|(
literal|1
argument_list|)
argument_list|,
name|ComputedType
operator|.
name|DOUBLE
argument_list|)
expr_stmt|;
name|methodVisitor
operator|.
name|visitInsn
argument_list|(
name|DCMPL
argument_list|)
expr_stmt|;
name|methodVisitor
operator|.
name|visitJumpInsn
argument_list|(
name|IFEQ
argument_list|,
name|labelEqTrue
argument_list|)
expr_stmt|;
name|truthCompile
argument_list|(
name|expected
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|methodVisitor
operator|.
name|visitJumpInsn
argument_list|(
name|GOTO
argument_list|,
name|labelEqReturn
argument_list|)
expr_stmt|;
name|methodVisitor
operator|.
name|visitLabel
argument_list|(
name|labelEqTrue
argument_list|)
expr_stmt|;
name|truthCompile
argument_list|(
name|expected
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|methodVisitor
operator|.
name|visitLabel
argument_list|(
name|labelEqReturn
argument_list|)
expr_stmt|;
break|break;
case|case
name|JavascriptParser
operator|.
name|AT_COMP_NEQ
case|:
name|Label
name|labelNeqTrue
init|=
operator|new
name|Label
argument_list|()
decl_stmt|;
name|Label
name|labelNeqReturn
init|=
operator|new
name|Label
argument_list|()
decl_stmt|;
name|recursiveCompile
argument_list|(
name|current
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
argument_list|,
name|ComputedType
operator|.
name|DOUBLE
argument_list|)
expr_stmt|;
name|recursiveCompile
argument_list|(
name|current
operator|.
name|getChild
argument_list|(
literal|1
argument_list|)
argument_list|,
name|ComputedType
operator|.
name|DOUBLE
argument_list|)
expr_stmt|;
name|methodVisitor
operator|.
name|visitInsn
argument_list|(
name|DCMPL
argument_list|)
expr_stmt|;
name|methodVisitor
operator|.
name|visitJumpInsn
argument_list|(
name|IFNE
argument_list|,
name|labelNeqTrue
argument_list|)
expr_stmt|;
name|truthCompile
argument_list|(
name|expected
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|methodVisitor
operator|.
name|visitJumpInsn
argument_list|(
name|GOTO
argument_list|,
name|labelNeqReturn
argument_list|)
expr_stmt|;
name|methodVisitor
operator|.
name|visitLabel
argument_list|(
name|labelNeqTrue
argument_list|)
expr_stmt|;
name|truthCompile
argument_list|(
name|expected
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|methodVisitor
operator|.
name|visitLabel
argument_list|(
name|labelNeqReturn
argument_list|)
expr_stmt|;
break|break;
case|case
name|JavascriptParser
operator|.
name|AT_COMP_LT
case|:
name|Label
name|labelLtTrue
init|=
operator|new
name|Label
argument_list|()
decl_stmt|;
name|Label
name|labelLtReturn
init|=
operator|new
name|Label
argument_list|()
decl_stmt|;
name|recursiveCompile
argument_list|(
name|current
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
argument_list|,
name|ComputedType
operator|.
name|DOUBLE
argument_list|)
expr_stmt|;
name|recursiveCompile
argument_list|(
name|current
operator|.
name|getChild
argument_list|(
literal|1
argument_list|)
argument_list|,
name|ComputedType
operator|.
name|DOUBLE
argument_list|)
expr_stmt|;
name|methodVisitor
operator|.
name|visitInsn
argument_list|(
name|DCMPG
argument_list|)
expr_stmt|;
name|methodVisitor
operator|.
name|visitJumpInsn
argument_list|(
name|IFLT
argument_list|,
name|labelLtTrue
argument_list|)
expr_stmt|;
name|truthCompile
argument_list|(
name|expected
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|methodVisitor
operator|.
name|visitJumpInsn
argument_list|(
name|GOTO
argument_list|,
name|labelLtReturn
argument_list|)
expr_stmt|;
name|methodVisitor
operator|.
name|visitLabel
argument_list|(
name|labelLtTrue
argument_list|)
expr_stmt|;
name|truthCompile
argument_list|(
name|expected
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|methodVisitor
operator|.
name|visitLabel
argument_list|(
name|labelLtReturn
argument_list|)
expr_stmt|;
break|break;
case|case
name|JavascriptParser
operator|.
name|AT_COMP_GT
case|:
name|Label
name|labelGtTrue
init|=
operator|new
name|Label
argument_list|()
decl_stmt|;
name|Label
name|labelGtReturn
init|=
operator|new
name|Label
argument_list|()
decl_stmt|;
name|recursiveCompile
argument_list|(
name|current
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
argument_list|,
name|ComputedType
operator|.
name|DOUBLE
argument_list|)
expr_stmt|;
name|recursiveCompile
argument_list|(
name|current
operator|.
name|getChild
argument_list|(
literal|1
argument_list|)
argument_list|,
name|ComputedType
operator|.
name|DOUBLE
argument_list|)
expr_stmt|;
name|methodVisitor
operator|.
name|visitInsn
argument_list|(
name|DCMPL
argument_list|)
expr_stmt|;
name|methodVisitor
operator|.
name|visitJumpInsn
argument_list|(
name|IFGT
argument_list|,
name|labelGtTrue
argument_list|)
expr_stmt|;
name|truthCompile
argument_list|(
name|expected
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|methodVisitor
operator|.
name|visitJumpInsn
argument_list|(
name|GOTO
argument_list|,
name|labelGtReturn
argument_list|)
expr_stmt|;
name|methodVisitor
operator|.
name|visitLabel
argument_list|(
name|labelGtTrue
argument_list|)
expr_stmt|;
name|truthCompile
argument_list|(
name|expected
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|methodVisitor
operator|.
name|visitLabel
argument_list|(
name|labelGtReturn
argument_list|)
expr_stmt|;
break|break;
case|case
name|JavascriptParser
operator|.
name|AT_COMP_LTE
case|:
name|Label
name|labelLteTrue
init|=
operator|new
name|Label
argument_list|()
decl_stmt|;
name|Label
name|labelLteReturn
init|=
operator|new
name|Label
argument_list|()
decl_stmt|;
name|recursiveCompile
argument_list|(
name|current
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
argument_list|,
name|ComputedType
operator|.
name|DOUBLE
argument_list|)
expr_stmt|;
name|recursiveCompile
argument_list|(
name|current
operator|.
name|getChild
argument_list|(
literal|1
argument_list|)
argument_list|,
name|ComputedType
operator|.
name|DOUBLE
argument_list|)
expr_stmt|;
name|methodVisitor
operator|.
name|visitInsn
argument_list|(
name|DCMPG
argument_list|)
expr_stmt|;
name|methodVisitor
operator|.
name|visitJumpInsn
argument_list|(
name|IFLE
argument_list|,
name|labelLteTrue
argument_list|)
expr_stmt|;
name|truthCompile
argument_list|(
name|expected
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|methodVisitor
operator|.
name|visitJumpInsn
argument_list|(
name|GOTO
argument_list|,
name|labelLteReturn
argument_list|)
expr_stmt|;
name|methodVisitor
operator|.
name|visitLabel
argument_list|(
name|labelLteTrue
argument_list|)
expr_stmt|;
name|truthCompile
argument_list|(
name|expected
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|methodVisitor
operator|.
name|visitLabel
argument_list|(
name|labelLteReturn
argument_list|)
expr_stmt|;
break|break;
case|case
name|JavascriptParser
operator|.
name|AT_COMP_GTE
case|:
name|Label
name|labelGteTrue
init|=
operator|new
name|Label
argument_list|()
decl_stmt|;
name|Label
name|labelGteReturn
init|=
operator|new
name|Label
argument_list|()
decl_stmt|;
name|recursiveCompile
argument_list|(
name|current
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
argument_list|,
name|ComputedType
operator|.
name|DOUBLE
argument_list|)
expr_stmt|;
name|recursiveCompile
argument_list|(
name|current
operator|.
name|getChild
argument_list|(
literal|1
argument_list|)
argument_list|,
name|ComputedType
operator|.
name|DOUBLE
argument_list|)
expr_stmt|;
name|methodVisitor
operator|.
name|visitInsn
argument_list|(
name|DCMPL
argument_list|)
expr_stmt|;
name|methodVisitor
operator|.
name|visitJumpInsn
argument_list|(
name|IFGE
argument_list|,
name|labelGteTrue
argument_list|)
expr_stmt|;
name|truthCompile
argument_list|(
name|expected
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|methodVisitor
operator|.
name|visitJumpInsn
argument_list|(
name|GOTO
argument_list|,
name|labelGteReturn
argument_list|)
expr_stmt|;
name|methodVisitor
operator|.
name|visitLabel
argument_list|(
name|labelGteTrue
argument_list|)
expr_stmt|;
name|truthCompile
argument_list|(
name|expected
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|methodVisitor
operator|.
name|visitLabel
argument_list|(
name|labelGteReturn
argument_list|)
expr_stmt|;
break|break;
case|case
name|JavascriptParser
operator|.
name|AT_BOOL_NOT
case|:
name|Label
name|labelNotTrue
init|=
operator|new
name|Label
argument_list|()
decl_stmt|;
name|Label
name|labelNotReturn
init|=
operator|new
name|Label
argument_list|()
decl_stmt|;
name|recursiveCompile
argument_list|(
name|current
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
argument_list|,
name|ComputedType
operator|.
name|INT
argument_list|)
expr_stmt|;
name|methodVisitor
operator|.
name|visitJumpInsn
argument_list|(
name|IFEQ
argument_list|,
name|labelNotTrue
argument_list|)
expr_stmt|;
name|truthCompile
argument_list|(
name|expected
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|methodVisitor
operator|.
name|visitJumpInsn
argument_list|(
name|GOTO
argument_list|,
name|labelNotReturn
argument_list|)
expr_stmt|;
name|methodVisitor
operator|.
name|visitLabel
argument_list|(
name|labelNotTrue
argument_list|)
expr_stmt|;
name|truthCompile
argument_list|(
name|expected
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|methodVisitor
operator|.
name|visitLabel
argument_list|(
name|labelNotReturn
argument_list|)
expr_stmt|;
break|break;
case|case
name|JavascriptParser
operator|.
name|AT_BOOL_AND
case|:
name|Label
name|andFalse
init|=
operator|new
name|Label
argument_list|()
decl_stmt|;
name|Label
name|andEnd
init|=
operator|new
name|Label
argument_list|()
decl_stmt|;
name|recursiveCompile
argument_list|(
name|current
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
argument_list|,
name|ComputedType
operator|.
name|INT
argument_list|)
expr_stmt|;
name|methodVisitor
operator|.
name|visitJumpInsn
argument_list|(
name|IFEQ
argument_list|,
name|andFalse
argument_list|)
expr_stmt|;
name|recursiveCompile
argument_list|(
name|current
operator|.
name|getChild
argument_list|(
literal|1
argument_list|)
argument_list|,
name|ComputedType
operator|.
name|INT
argument_list|)
expr_stmt|;
name|methodVisitor
operator|.
name|visitJumpInsn
argument_list|(
name|IFEQ
argument_list|,
name|andFalse
argument_list|)
expr_stmt|;
name|truthCompile
argument_list|(
name|expected
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|methodVisitor
operator|.
name|visitJumpInsn
argument_list|(
name|GOTO
argument_list|,
name|andEnd
argument_list|)
expr_stmt|;
name|methodVisitor
operator|.
name|visitLabel
argument_list|(
name|andFalse
argument_list|)
expr_stmt|;
name|truthCompile
argument_list|(
name|expected
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|methodVisitor
operator|.
name|visitLabel
argument_list|(
name|andEnd
argument_list|)
expr_stmt|;
break|break;
case|case
name|JavascriptParser
operator|.
name|AT_BOOL_OR
case|:
name|Label
name|orTrue
init|=
operator|new
name|Label
argument_list|()
decl_stmt|;
name|Label
name|orEnd
init|=
operator|new
name|Label
argument_list|()
decl_stmt|;
name|recursiveCompile
argument_list|(
name|current
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
argument_list|,
name|ComputedType
operator|.
name|INT
argument_list|)
expr_stmt|;
name|methodVisitor
operator|.
name|visitJumpInsn
argument_list|(
name|IFNE
argument_list|,
name|orTrue
argument_list|)
expr_stmt|;
name|recursiveCompile
argument_list|(
name|current
operator|.
name|getChild
argument_list|(
literal|1
argument_list|)
argument_list|,
name|ComputedType
operator|.
name|INT
argument_list|)
expr_stmt|;
name|methodVisitor
operator|.
name|visitJumpInsn
argument_list|(
name|IFNE
argument_list|,
name|orTrue
argument_list|)
expr_stmt|;
name|truthCompile
argument_list|(
name|expected
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|methodVisitor
operator|.
name|visitJumpInsn
argument_list|(
name|GOTO
argument_list|,
name|orEnd
argument_list|)
expr_stmt|;
name|methodVisitor
operator|.
name|visitLabel
argument_list|(
name|orTrue
argument_list|)
expr_stmt|;
name|truthCompile
argument_list|(
name|expected
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|methodVisitor
operator|.
name|visitLabel
argument_list|(
name|orEnd
argument_list|)
expr_stmt|;
break|break;
case|case
name|JavascriptParser
operator|.
name|AT_COND_QUE
case|:
name|Label
name|condFalse
init|=
operator|new
name|Label
argument_list|()
decl_stmt|;
name|Label
name|condEnd
init|=
operator|new
name|Label
argument_list|()
decl_stmt|;
name|recursiveCompile
argument_list|(
name|current
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
argument_list|,
name|ComputedType
operator|.
name|INT
argument_list|)
expr_stmt|;
name|methodVisitor
operator|.
name|visitJumpInsn
argument_list|(
name|IFEQ
argument_list|,
name|condFalse
argument_list|)
expr_stmt|;
name|recursiveCompile
argument_list|(
name|current
operator|.
name|getChild
argument_list|(
literal|1
argument_list|)
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|methodVisitor
operator|.
name|visitJumpInsn
argument_list|(
name|GOTO
argument_list|,
name|condEnd
argument_list|)
expr_stmt|;
name|methodVisitor
operator|.
name|visitLabel
argument_list|(
name|condFalse
argument_list|)
expr_stmt|;
name|recursiveCompile
argument_list|(
name|current
operator|.
name|getChild
argument_list|(
literal|2
argument_list|)
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|methodVisitor
operator|.
name|visitLabel
argument_list|(
name|condEnd
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unknown operation specified: ("
operator|+
name|current
operator|.
name|getText
argument_list|()
operator|+
literal|")."
argument_list|)
throw|;
block|}
block|}
DECL|method|typeCompile
specifier|private
name|void
name|typeCompile
parameter_list|(
name|ComputedType
name|expected
parameter_list|,
name|ComputedType
name|actual
parameter_list|)
block|{
if|if
condition|(
name|expected
operator|==
name|actual
condition|)
block|{
return|return;
block|}
switch|switch
condition|(
name|expected
condition|)
block|{
case|case
name|INT
case|:
if|if
condition|(
name|actual
operator|==
name|ComputedType
operator|.
name|LONG
condition|)
block|{
name|methodVisitor
operator|.
name|visitInsn
argument_list|(
name|L2I
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|methodVisitor
operator|.
name|visitInsn
argument_list|(
name|D2I
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|LONG
case|:
if|if
condition|(
name|actual
operator|==
name|ComputedType
operator|.
name|INT
condition|)
block|{
name|methodVisitor
operator|.
name|visitInsn
argument_list|(
name|I2L
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|methodVisitor
operator|.
name|visitInsn
argument_list|(
name|D2L
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
if|if
condition|(
name|actual
operator|==
name|ComputedType
operator|.
name|INT
condition|)
block|{
name|methodVisitor
operator|.
name|visitInsn
argument_list|(
name|I2D
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|methodVisitor
operator|.
name|visitInsn
argument_list|(
name|L2D
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
DECL|method|truthCompile
specifier|private
name|void
name|truthCompile
parameter_list|(
name|ComputedType
name|expected
parameter_list|,
name|boolean
name|truth
parameter_list|)
block|{
switch|switch
condition|(
name|expected
condition|)
block|{
case|case
name|INT
case|:
name|methodVisitor
operator|.
name|visitInsn
argument_list|(
name|truth
condition|?
name|ICONST_1
else|:
name|ICONST_0
argument_list|)
expr_stmt|;
break|break;
case|case
name|LONG
case|:
name|methodVisitor
operator|.
name|visitInsn
argument_list|(
name|truth
condition|?
name|LCONST_1
else|:
name|LCONST_0
argument_list|)
expr_stmt|;
break|break;
default|default:
name|methodVisitor
operator|.
name|visitInsn
argument_list|(
name|truth
condition|?
name|DCONST_1
else|:
name|DCONST_0
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
DECL|method|endCompile
specifier|private
name|void
name|endCompile
parameter_list|()
block|{
name|methodVisitor
operator|.
name|visitInsn
argument_list|(
name|DRETURN
argument_list|)
expr_stmt|;
name|methodVisitor
operator|.
name|visitMaxs
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|methodVisitor
operator|.
name|visitEnd
argument_list|()
expr_stmt|;
name|classWriter
operator|.
name|visitEnd
argument_list|()
expr_stmt|;
block|}
DECL|method|getAntlrComputedExpressionTree
specifier|private
specifier|static
name|Tree
name|getAntlrComputedExpressionTree
parameter_list|(
name|String
name|expression
parameter_list|)
throws|throws
name|ParseException
block|{
name|CharStream
name|input
init|=
operator|new
name|ANTLRStringStream
argument_list|(
name|expression
argument_list|)
decl_stmt|;
name|JavascriptLexer
name|lexer
init|=
operator|new
name|JavascriptLexer
argument_list|(
name|input
argument_list|)
decl_stmt|;
name|CommonTokenStream
name|tokens
init|=
operator|new
name|CommonTokenStream
argument_list|(
name|lexer
argument_list|)
decl_stmt|;
name|JavascriptParser
name|parser
init|=
operator|new
name|JavascriptParser
argument_list|(
name|tokens
argument_list|)
decl_stmt|;
try|try
block|{
return|return
name|parser
operator|.
name|expression
argument_list|()
operator|.
name|tree
return|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|exception
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|exception
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|exception
parameter_list|)
block|{
if|if
condition|(
name|exception
operator|.
name|getCause
argument_list|()
operator|instanceof
name|ParseException
condition|)
block|{
throw|throw
operator|(
name|ParseException
operator|)
name|exception
operator|.
name|getCause
argument_list|()
throw|;
block|}
throw|throw
name|exception
throw|;
block|}
block|}
block|}
end_class
end_unit
