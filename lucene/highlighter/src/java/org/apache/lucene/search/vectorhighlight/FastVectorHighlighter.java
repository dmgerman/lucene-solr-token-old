begin_unit
begin_package
DECL|package|org.apache.lucene.search.vectorhighlight
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|vectorhighlight
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|highlight
operator|.
name|Encoder
import|;
end_import
begin_comment
comment|/**  * Another highlighter implementation.  *  */
end_comment
begin_class
DECL|class|FastVectorHighlighter
specifier|public
class|class
name|FastVectorHighlighter
block|{
DECL|field|DEFAULT_PHRASE_HIGHLIGHT
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_PHRASE_HIGHLIGHT
init|=
literal|true
decl_stmt|;
DECL|field|DEFAULT_FIELD_MATCH
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_FIELD_MATCH
init|=
literal|true
decl_stmt|;
DECL|field|phraseHighlight
specifier|private
specifier|final
name|boolean
name|phraseHighlight
decl_stmt|;
DECL|field|fieldMatch
specifier|private
specifier|final
name|boolean
name|fieldMatch
decl_stmt|;
DECL|field|fragListBuilder
specifier|private
specifier|final
name|FragListBuilder
name|fragListBuilder
decl_stmt|;
DECL|field|fragmentsBuilder
specifier|private
specifier|final
name|FragmentsBuilder
name|fragmentsBuilder
decl_stmt|;
DECL|field|phraseLimit
specifier|private
name|int
name|phraseLimit
init|=
name|Integer
operator|.
name|MAX_VALUE
decl_stmt|;
comment|/**    * the default constructor.    */
DECL|method|FastVectorHighlighter
specifier|public
name|FastVectorHighlighter
parameter_list|()
block|{
name|this
argument_list|(
name|DEFAULT_PHRASE_HIGHLIGHT
argument_list|,
name|DEFAULT_FIELD_MATCH
argument_list|)
expr_stmt|;
block|}
comment|/**    * a constructor. Using {@link SimpleFragListBuilder} and {@link ScoreOrderFragmentsBuilder}.    *     * @param phraseHighlight true or false for phrase highlighting    * @param fieldMatch true of false for field matching    */
DECL|method|FastVectorHighlighter
specifier|public
name|FastVectorHighlighter
parameter_list|(
name|boolean
name|phraseHighlight
parameter_list|,
name|boolean
name|fieldMatch
parameter_list|)
block|{
name|this
argument_list|(
name|phraseHighlight
argument_list|,
name|fieldMatch
argument_list|,
operator|new
name|SimpleFragListBuilder
argument_list|()
argument_list|,
operator|new
name|ScoreOrderFragmentsBuilder
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * a constructor. A {@link FragListBuilder} and a {@link FragmentsBuilder} can be specified (plugins).    *     * @param phraseHighlight true of false for phrase highlighting    * @param fieldMatch true of false for field matching    * @param fragListBuilder an instance of {@link FragListBuilder}    * @param fragmentsBuilder an instance of {@link FragmentsBuilder}    */
DECL|method|FastVectorHighlighter
specifier|public
name|FastVectorHighlighter
parameter_list|(
name|boolean
name|phraseHighlight
parameter_list|,
name|boolean
name|fieldMatch
parameter_list|,
name|FragListBuilder
name|fragListBuilder
parameter_list|,
name|FragmentsBuilder
name|fragmentsBuilder
parameter_list|)
block|{
name|this
operator|.
name|phraseHighlight
operator|=
name|phraseHighlight
expr_stmt|;
name|this
operator|.
name|fieldMatch
operator|=
name|fieldMatch
expr_stmt|;
name|this
operator|.
name|fragListBuilder
operator|=
name|fragListBuilder
expr_stmt|;
name|this
operator|.
name|fragmentsBuilder
operator|=
name|fragmentsBuilder
expr_stmt|;
block|}
comment|/**    * create a {@link FieldQuery} object.    *     * @param query a query    * @return the created {@link FieldQuery} object    */
DECL|method|getFieldQuery
specifier|public
name|FieldQuery
name|getFieldQuery
parameter_list|(
name|Query
name|query
parameter_list|)
block|{
comment|// TODO: should we deprecate this?
comment|// because if there is no reader, then we cannot rewrite MTQ.
try|try
block|{
return|return
operator|new
name|FieldQuery
argument_list|(
name|query
argument_list|,
literal|null
argument_list|,
name|phraseHighlight
argument_list|,
name|fieldMatch
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// should never be thrown when reader is null
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * create a {@link FieldQuery} object.    *     * @param query a query    * @return the created {@link FieldQuery} object    */
DECL|method|getFieldQuery
specifier|public
name|FieldQuery
name|getFieldQuery
parameter_list|(
name|Query
name|query
parameter_list|,
name|IndexReader
name|reader
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|FieldQuery
argument_list|(
name|query
argument_list|,
name|reader
argument_list|,
name|phraseHighlight
argument_list|,
name|fieldMatch
argument_list|)
return|;
block|}
comment|/**    * return the best fragment.    *     * @param fieldQuery {@link FieldQuery} object    * @param reader {@link IndexReader} of the index    * @param docId document id to be highlighted    * @param fieldName field of the document to be highlighted    * @param fragCharSize the length (number of chars) of a fragment    * @return the best fragment (snippet) string    * @throws IOException If there is a low-level I/O error    */
DECL|method|getBestFragment
specifier|public
specifier|final
name|String
name|getBestFragment
parameter_list|(
specifier|final
name|FieldQuery
name|fieldQuery
parameter_list|,
name|IndexReader
name|reader
parameter_list|,
name|int
name|docId
parameter_list|,
name|String
name|fieldName
parameter_list|,
name|int
name|fragCharSize
parameter_list|)
throws|throws
name|IOException
block|{
name|FieldFragList
name|fieldFragList
init|=
name|getFieldFragList
argument_list|(
name|fragListBuilder
argument_list|,
name|fieldQuery
argument_list|,
name|reader
argument_list|,
name|docId
argument_list|,
name|fieldName
argument_list|,
name|fragCharSize
argument_list|)
decl_stmt|;
return|return
name|fragmentsBuilder
operator|.
name|createFragment
argument_list|(
name|reader
argument_list|,
name|docId
argument_list|,
name|fieldName
argument_list|,
name|fieldFragList
argument_list|)
return|;
block|}
comment|/**    * return the best fragments.    *     * @param fieldQuery {@link FieldQuery} object    * @param reader {@link IndexReader} of the index    * @param docId document id to be highlighted    * @param fieldName field of the document to be highlighted    * @param fragCharSize the length (number of chars) of a fragment    * @param maxNumFragments maximum number of fragments    * @return created fragments or null when no fragments created.    *         size of the array can be less than maxNumFragments    * @throws IOException If there is a low-level I/O error    */
DECL|method|getBestFragments
specifier|public
specifier|final
name|String
index|[]
name|getBestFragments
parameter_list|(
specifier|final
name|FieldQuery
name|fieldQuery
parameter_list|,
name|IndexReader
name|reader
parameter_list|,
name|int
name|docId
parameter_list|,
name|String
name|fieldName
parameter_list|,
name|int
name|fragCharSize
parameter_list|,
name|int
name|maxNumFragments
parameter_list|)
throws|throws
name|IOException
block|{
name|FieldFragList
name|fieldFragList
init|=
name|getFieldFragList
argument_list|(
name|fragListBuilder
argument_list|,
name|fieldQuery
argument_list|,
name|reader
argument_list|,
name|docId
argument_list|,
name|fieldName
argument_list|,
name|fragCharSize
argument_list|)
decl_stmt|;
return|return
name|fragmentsBuilder
operator|.
name|createFragments
argument_list|(
name|reader
argument_list|,
name|docId
argument_list|,
name|fieldName
argument_list|,
name|fieldFragList
argument_list|,
name|maxNumFragments
argument_list|)
return|;
block|}
comment|/**    * return the best fragment.    *     * @param fieldQuery {@link FieldQuery} object    * @param reader {@link IndexReader} of the index    * @param docId document id to be highlighted    * @param fieldName field of the document to be highlighted    * @param fragCharSize the length (number of chars) of a fragment    * @param fragListBuilder {@link FragListBuilder} object    * @param fragmentsBuilder {@link FragmentsBuilder} object    * @param preTags pre-tags to be used to highlight terms    * @param postTags post-tags to be used to highlight terms    * @param encoder an encoder that generates encoded text    * @return the best fragment (snippet) string    * @throws IOException If there is a low-level I/O error    */
DECL|method|getBestFragment
specifier|public
specifier|final
name|String
name|getBestFragment
parameter_list|(
specifier|final
name|FieldQuery
name|fieldQuery
parameter_list|,
name|IndexReader
name|reader
parameter_list|,
name|int
name|docId
parameter_list|,
name|String
name|fieldName
parameter_list|,
name|int
name|fragCharSize
parameter_list|,
name|FragListBuilder
name|fragListBuilder
parameter_list|,
name|FragmentsBuilder
name|fragmentsBuilder
parameter_list|,
name|String
index|[]
name|preTags
parameter_list|,
name|String
index|[]
name|postTags
parameter_list|,
name|Encoder
name|encoder
parameter_list|)
throws|throws
name|IOException
block|{
name|FieldFragList
name|fieldFragList
init|=
name|getFieldFragList
argument_list|(
name|fragListBuilder
argument_list|,
name|fieldQuery
argument_list|,
name|reader
argument_list|,
name|docId
argument_list|,
name|fieldName
argument_list|,
name|fragCharSize
argument_list|)
decl_stmt|;
return|return
name|fragmentsBuilder
operator|.
name|createFragment
argument_list|(
name|reader
argument_list|,
name|docId
argument_list|,
name|fieldName
argument_list|,
name|fieldFragList
argument_list|,
name|preTags
argument_list|,
name|postTags
argument_list|,
name|encoder
argument_list|)
return|;
block|}
comment|/**    * return the best fragments.    *     * @param fieldQuery {@link FieldQuery} object    * @param reader {@link IndexReader} of the index    * @param docId document id to be highlighted    * @param fieldName field of the document to be highlighted    * @param fragCharSize the length (number of chars) of a fragment    * @param maxNumFragments maximum number of fragments    * @param fragListBuilder {@link FragListBuilder} object    * @param fragmentsBuilder {@link FragmentsBuilder} object    * @param preTags pre-tags to be used to highlight terms    * @param postTags post-tags to be used to highlight terms    * @param encoder an encoder that generates encoded text    * @return created fragments or null when no fragments created.    *         size of the array can be less than maxNumFragments    * @throws IOException If there is a low-level I/O error    */
DECL|method|getBestFragments
specifier|public
specifier|final
name|String
index|[]
name|getBestFragments
parameter_list|(
specifier|final
name|FieldQuery
name|fieldQuery
parameter_list|,
name|IndexReader
name|reader
parameter_list|,
name|int
name|docId
parameter_list|,
name|String
name|fieldName
parameter_list|,
name|int
name|fragCharSize
parameter_list|,
name|int
name|maxNumFragments
parameter_list|,
name|FragListBuilder
name|fragListBuilder
parameter_list|,
name|FragmentsBuilder
name|fragmentsBuilder
parameter_list|,
name|String
index|[]
name|preTags
parameter_list|,
name|String
index|[]
name|postTags
parameter_list|,
name|Encoder
name|encoder
parameter_list|)
throws|throws
name|IOException
block|{
name|FieldFragList
name|fieldFragList
init|=
name|getFieldFragList
argument_list|(
name|fragListBuilder
argument_list|,
name|fieldQuery
argument_list|,
name|reader
argument_list|,
name|docId
argument_list|,
name|fieldName
argument_list|,
name|fragCharSize
argument_list|)
decl_stmt|;
return|return
name|fragmentsBuilder
operator|.
name|createFragments
argument_list|(
name|reader
argument_list|,
name|docId
argument_list|,
name|fieldName
argument_list|,
name|fieldFragList
argument_list|,
name|maxNumFragments
argument_list|,
name|preTags
argument_list|,
name|postTags
argument_list|,
name|encoder
argument_list|)
return|;
block|}
comment|/**    * Return the best fragments.  Matches are scanned from matchedFields and turned into fragments against    * storedField.  The highlighting may not make sense if matchedFields has matches with offsets that don't    * correspond features in storedField.  It will outright throw a {@code StringIndexOutOfBoundsException}    * if matchedFields produces offsets outside of storedField.  As such it is advisable that all    * matchedFields share the same source as storedField or are at least a prefix of it.    *     * @param fieldQuery {@link FieldQuery} object    * @param reader {@link IndexReader} of the index    * @param docId document id to be highlighted    * @param storedField field of the document that stores the text    * @param matchedFields fields of the document to scan for matches    * @param fragCharSize the length (number of chars) of a fragment    * @param maxNumFragments maximum number of fragments    * @param fragListBuilder {@link FragListBuilder} object    * @param fragmentsBuilder {@link FragmentsBuilder} object    * @param preTags pre-tags to be used to highlight terms    * @param postTags post-tags to be used to highlight terms    * @param encoder an encoder that generates encoded text    * @return created fragments or null when no fragments created.    *         size of the array can be less than maxNumFragments    * @throws IOException If there is a low-level I/O error    */
DECL|method|getBestFragments
specifier|public
specifier|final
name|String
index|[]
name|getBestFragments
parameter_list|(
specifier|final
name|FieldQuery
name|fieldQuery
parameter_list|,
name|IndexReader
name|reader
parameter_list|,
name|int
name|docId
parameter_list|,
name|String
name|storedField
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|matchedFields
parameter_list|,
name|int
name|fragCharSize
parameter_list|,
name|int
name|maxNumFragments
parameter_list|,
name|FragListBuilder
name|fragListBuilder
parameter_list|,
name|FragmentsBuilder
name|fragmentsBuilder
parameter_list|,
name|String
index|[]
name|preTags
parameter_list|,
name|String
index|[]
name|postTags
parameter_list|,
name|Encoder
name|encoder
parameter_list|)
throws|throws
name|IOException
block|{
name|FieldFragList
name|fieldFragList
init|=
name|getFieldFragList
argument_list|(
name|fragListBuilder
argument_list|,
name|fieldQuery
argument_list|,
name|reader
argument_list|,
name|docId
argument_list|,
name|matchedFields
argument_list|,
name|fragCharSize
argument_list|)
decl_stmt|;
return|return
name|fragmentsBuilder
operator|.
name|createFragments
argument_list|(
name|reader
argument_list|,
name|docId
argument_list|,
name|storedField
argument_list|,
name|fieldFragList
argument_list|,
name|maxNumFragments
argument_list|,
name|preTags
argument_list|,
name|postTags
argument_list|,
name|encoder
argument_list|)
return|;
block|}
comment|/**    * Build a FieldFragList for one field.    */
DECL|method|getFieldFragList
specifier|private
name|FieldFragList
name|getFieldFragList
parameter_list|(
name|FragListBuilder
name|fragListBuilder
parameter_list|,
specifier|final
name|FieldQuery
name|fieldQuery
parameter_list|,
name|IndexReader
name|reader
parameter_list|,
name|int
name|docId
parameter_list|,
name|String
name|matchedField
parameter_list|,
name|int
name|fragCharSize
parameter_list|)
throws|throws
name|IOException
block|{
name|FieldTermStack
name|fieldTermStack
init|=
operator|new
name|FieldTermStack
argument_list|(
name|reader
argument_list|,
name|docId
argument_list|,
name|matchedField
argument_list|,
name|fieldQuery
argument_list|)
decl_stmt|;
name|FieldPhraseList
name|fieldPhraseList
init|=
operator|new
name|FieldPhraseList
argument_list|(
name|fieldTermStack
argument_list|,
name|fieldQuery
argument_list|,
name|phraseLimit
argument_list|)
decl_stmt|;
return|return
name|fragListBuilder
operator|.
name|createFieldFragList
argument_list|(
name|fieldPhraseList
argument_list|,
name|fragCharSize
argument_list|)
return|;
block|}
comment|/**    * Build a FieldFragList for more than one field.    */
DECL|method|getFieldFragList
specifier|private
name|FieldFragList
name|getFieldFragList
parameter_list|(
name|FragListBuilder
name|fragListBuilder
parameter_list|,
specifier|final
name|FieldQuery
name|fieldQuery
parameter_list|,
name|IndexReader
name|reader
parameter_list|,
name|int
name|docId
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|matchedFields
parameter_list|,
name|int
name|fragCharSize
parameter_list|)
throws|throws
name|IOException
block|{
name|Iterator
argument_list|<
name|String
argument_list|>
name|matchedFieldsItr
init|=
name|matchedFields
operator|.
name|iterator
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|matchedFieldsItr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"matchedFields must contain at least on field name."
argument_list|)
throw|;
block|}
name|FieldPhraseList
index|[]
name|toMerge
init|=
operator|new
name|FieldPhraseList
index|[
name|matchedFields
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|matchedFieldsItr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|FieldTermStack
name|stack
init|=
operator|new
name|FieldTermStack
argument_list|(
name|reader
argument_list|,
name|docId
argument_list|,
name|matchedFieldsItr
operator|.
name|next
argument_list|()
argument_list|,
name|fieldQuery
argument_list|)
decl_stmt|;
name|toMerge
index|[
name|i
operator|++
index|]
operator|=
operator|new
name|FieldPhraseList
argument_list|(
name|stack
argument_list|,
name|fieldQuery
argument_list|,
name|phraseLimit
argument_list|)
expr_stmt|;
block|}
return|return
name|fragListBuilder
operator|.
name|createFieldFragList
argument_list|(
operator|new
name|FieldPhraseList
argument_list|(
name|toMerge
argument_list|)
argument_list|,
name|fragCharSize
argument_list|)
return|;
block|}
comment|/**    * return whether phraseHighlight or not.    *     * @return whether phraseHighlight or not    */
DECL|method|isPhraseHighlight
specifier|public
name|boolean
name|isPhraseHighlight
parameter_list|()
block|{
return|return
name|phraseHighlight
return|;
block|}
comment|/**    * return whether fieldMatch or not.    *     * @return whether fieldMatch or not    */
DECL|method|isFieldMatch
specifier|public
name|boolean
name|isFieldMatch
parameter_list|()
block|{
return|return
name|fieldMatch
return|;
block|}
comment|/**    * @return the maximum number of phrases to analyze when searching for the highest-scoring phrase.    */
DECL|method|getPhraseLimit
specifier|public
name|int
name|getPhraseLimit
parameter_list|()
block|{
return|return
name|phraseLimit
return|;
block|}
comment|/**    * set the maximum number of phrases to analyze when searching for the highest-scoring phrase.    * The default is unlimited (Integer.MAX_VALUE).    */
DECL|method|setPhraseLimit
specifier|public
name|void
name|setPhraseLimit
parameter_list|(
name|int
name|phraseLimit
parameter_list|)
block|{
name|this
operator|.
name|phraseLimit
operator|=
name|phraseLimit
expr_stmt|;
block|}
block|}
end_class
end_unit
