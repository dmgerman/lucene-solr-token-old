begin_unit
begin_package
DECL|package|org.apache.lucene.search.vectorhighlight
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|vectorhighlight
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|highlight
operator|.
name|Encoder
import|;
end_import
begin_comment
comment|/**  * {@link org.apache.lucene.search.vectorhighlight.FragmentsBuilder} is an interface for fragments (snippets) builder classes.  * A {@link org.apache.lucene.search.vectorhighlight.FragmentsBuilder} class can be plugged in to  * {@link org.apache.lucene.search.vectorhighlight.FastVectorHighlighter}.  */
end_comment
begin_interface
DECL|interface|FragmentsBuilder
specifier|public
interface|interface
name|FragmentsBuilder
block|{
comment|/**    * create a fragment.    *     * @param reader IndexReader of the index    * @param docId document id to be highlighted    * @param fieldName field of the document to be highlighted    * @param fieldFragList FieldFragList object    * @return a created fragment or null when no fragment created    * @throws IOException    */
DECL|method|createFragment
specifier|public
name|String
name|createFragment
parameter_list|(
name|IndexReader
name|reader
parameter_list|,
name|int
name|docId
parameter_list|,
name|String
name|fieldName
parameter_list|,
name|FieldFragList
name|fieldFragList
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * create multiple fragments.    *     * @param reader IndexReader of the index    * @param docId document id to be highlighter    * @param fieldName field of the document to be highlighted    * @param fieldFragList FieldFragList object    * @param maxNumFragments maximum number of fragments    * @return created fragments or null when no fragments created.    *         size of the array can be less than maxNumFragments    * @throws IOException    */
DECL|method|createFragments
specifier|public
name|String
index|[]
name|createFragments
parameter_list|(
name|IndexReader
name|reader
parameter_list|,
name|int
name|docId
parameter_list|,
name|String
name|fieldName
parameter_list|,
name|FieldFragList
name|fieldFragList
parameter_list|,
name|int
name|maxNumFragments
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * create a fragment.    *     * @param reader IndexReader of the index    * @param docId document id to be highlighted    * @param fieldName field of the document to be highlighted    * @param fieldFragList FieldFragList object    * @param preTags pre-tags to be used to highlight terms    * @param postTags post-tags to be used to highlight terms    * @param encoder an encoder that generates encoded text    * @return a created fragment or null when no fragment created    * @throws IOException    */
DECL|method|createFragment
specifier|public
name|String
name|createFragment
parameter_list|(
name|IndexReader
name|reader
parameter_list|,
name|int
name|docId
parameter_list|,
name|String
name|fieldName
parameter_list|,
name|FieldFragList
name|fieldFragList
parameter_list|,
name|String
index|[]
name|preTags
parameter_list|,
name|String
index|[]
name|postTags
parameter_list|,
name|Encoder
name|encoder
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * create multiple fragments.    *     * @param reader IndexReader of the index    * @param docId document id to be highlighter    * @param fieldName field of the document to be highlighted    * @param fieldFragList FieldFragList object    * @param maxNumFragments maximum number of fragments    * @param preTags pre-tags to be used to highlight terms    * @param postTags post-tags to be used to highlight terms    * @param encoder an encoder that generates encoded text    * @return created fragments or null when no fragments created.    *         size of the array can be less than maxNumFragments    * @throws IOException    */
DECL|method|createFragments
specifier|public
name|String
index|[]
name|createFragments
parameter_list|(
name|IndexReader
name|reader
parameter_list|,
name|int
name|docId
parameter_list|,
name|String
name|fieldName
parameter_list|,
name|FieldFragList
name|fieldFragList
parameter_list|,
name|int
name|maxNumFragments
parameter_list|,
name|String
index|[]
name|preTags
parameter_list|,
name|String
index|[]
name|postTags
parameter_list|,
name|Encoder
name|encoder
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
end_interface
end_unit
