begin_unit
begin_package
DECL|package|org.apache.lucene.search.vectorhighlight
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|vectorhighlight
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanClause
operator|.
name|Occur
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|vectorhighlight
operator|.
name|FieldFragList
operator|.
name|WeightedFragInfo
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|vectorhighlight
operator|.
name|FieldFragList
operator|.
name|WeightedFragInfo
operator|.
name|SubInfo
import|;
end_import
begin_class
DECL|class|WeightedFragListBuilderTest
specifier|public
class|class
name|WeightedFragListBuilderTest
extends|extends
name|AbstractTestCase
block|{
DECL|method|test2WeightedFragList
specifier|public
name|void
name|test2WeightedFragList
parameter_list|()
throws|throws
name|Exception
block|{
name|testCase
argument_list|(
name|pqF
argument_list|(
literal|"the"
argument_list|,
literal|"both"
argument_list|)
argument_list|,
literal|100
argument_list|,
literal|"subInfos=(theboth((195,203)))/0.8679108(149,249)"
argument_list|,
literal|0.8679108
argument_list|)
expr_stmt|;
block|}
DECL|method|test2SubInfos
specifier|public
name|void
name|test2SubInfos
parameter_list|()
throws|throws
name|Exception
block|{
name|BooleanQuery
name|query
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
name|query
operator|.
name|add
argument_list|(
name|pqF
argument_list|(
literal|"the"
argument_list|,
literal|"both"
argument_list|)
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|query
operator|.
name|add
argument_list|(
name|tq
argument_list|(
literal|"examples"
argument_list|)
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|testCase
argument_list|(
name|query
argument_list|,
literal|1000
argument_list|,
literal|"subInfos=(examples((19,27))examples((66,74))theboth((195,203)))/1.8411169(0,1000)"
argument_list|,
literal|1.8411169
argument_list|)
expr_stmt|;
block|}
DECL|method|testCase
specifier|private
name|void
name|testCase
parameter_list|(
name|Query
name|query
parameter_list|,
name|int
name|fragCharSize
parameter_list|,
name|String
name|expectedFragInfo
parameter_list|,
name|double
name|expectedTotalSubInfoBoost
parameter_list|)
throws|throws
name|Exception
block|{
name|makeIndexLongMV
argument_list|()
expr_stmt|;
name|FieldQuery
name|fq
init|=
operator|new
name|FieldQuery
argument_list|(
name|query
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|FieldTermStack
name|stack
init|=
operator|new
name|FieldTermStack
argument_list|(
name|reader
argument_list|,
literal|0
argument_list|,
name|F
argument_list|,
name|fq
argument_list|)
decl_stmt|;
name|FieldPhraseList
name|fpl
init|=
operator|new
name|FieldPhraseList
argument_list|(
name|stack
argument_list|,
name|fq
argument_list|)
decl_stmt|;
name|WeightedFragListBuilder
name|wflb
init|=
operator|new
name|WeightedFragListBuilder
argument_list|()
decl_stmt|;
name|FieldFragList
name|ffl
init|=
name|wflb
operator|.
name|createFieldFragList
argument_list|(
name|fpl
argument_list|,
name|fragCharSize
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ffl
operator|.
name|getFragInfos
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedFragInfo
argument_list|,
name|ffl
operator|.
name|getFragInfos
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|float
name|totalSubInfoBoost
init|=
literal|0
decl_stmt|;
for|for
control|(
name|WeightedFragInfo
name|info
range|:
name|ffl
operator|.
name|getFragInfos
argument_list|()
control|)
block|{
for|for
control|(
name|SubInfo
name|subInfo
range|:
name|info
operator|.
name|getSubInfos
argument_list|()
control|)
block|{
name|totalSubInfoBoost
operator|+=
name|subInfo
operator|.
name|getBoost
argument_list|()
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
name|expectedTotalSubInfoBoost
argument_list|,
name|totalSubInfoBoost
argument_list|,
literal|.0000001
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
