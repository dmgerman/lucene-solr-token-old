begin_unit
begin_package
DECL|package|org.apache.lucene.search.postingshighlight
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|postingshighlight
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|generators
operator|.
name|RandomPicks
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_import
import|import
name|java
operator|.
name|text
operator|.
name|BreakIterator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|postingshighlight
operator|.
name|TestWholeBreakIterator
operator|.
name|assertSameBreaks
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|equalTo
import|;
end_import
begin_class
DECL|class|TestCustomSeparatorBreakIterator
specifier|public
class|class
name|TestCustomSeparatorBreakIterator
extends|extends
name|LuceneTestCase
block|{
DECL|field|SEPARATORS
specifier|private
specifier|static
specifier|final
name|Character
index|[]
name|SEPARATORS
init|=
operator|new
name|Character
index|[]
block|{
literal|' '
block|,
literal|'\u0000'
block|,
literal|8233
block|}
decl_stmt|;
DECL|method|testBreakOnCustomSeparator
specifier|public
name|void
name|testBreakOnCustomSeparator
parameter_list|()
throws|throws
name|Exception
block|{
name|Character
name|separator
init|=
name|randomSeparator
argument_list|()
decl_stmt|;
name|BreakIterator
name|bi
init|=
operator|new
name|CustomSeparatorBreakIterator
argument_list|(
name|separator
argument_list|)
decl_stmt|;
name|String
name|source
init|=
literal|"this"
operator|+
name|separator
operator|+
literal|"is"
operator|+
name|separator
operator|+
literal|"the"
operator|+
name|separator
operator|+
literal|"first"
operator|+
name|separator
operator|+
literal|"sentence"
decl_stmt|;
name|bi
operator|.
name|setText
argument_list|(
name|source
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|bi
operator|.
name|current
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|bi
operator|.
name|first
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|source
operator|.
name|substring
argument_list|(
name|bi
operator|.
name|current
argument_list|()
argument_list|,
name|bi
operator|.
name|next
argument_list|()
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"this"
operator|+
name|separator
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|source
operator|.
name|substring
argument_list|(
name|bi
operator|.
name|current
argument_list|()
argument_list|,
name|bi
operator|.
name|next
argument_list|()
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"is"
operator|+
name|separator
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|source
operator|.
name|substring
argument_list|(
name|bi
operator|.
name|current
argument_list|()
argument_list|,
name|bi
operator|.
name|next
argument_list|()
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"the"
operator|+
name|separator
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|source
operator|.
name|substring
argument_list|(
name|bi
operator|.
name|current
argument_list|()
argument_list|,
name|bi
operator|.
name|next
argument_list|()
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"first"
operator|+
name|separator
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|source
operator|.
name|substring
argument_list|(
name|bi
operator|.
name|current
argument_list|()
argument_list|,
name|bi
operator|.
name|next
argument_list|()
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"sentence"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|bi
operator|.
name|next
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|BreakIterator
operator|.
name|DONE
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|bi
operator|.
name|last
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|source
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|current
init|=
name|bi
operator|.
name|current
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|source
operator|.
name|substring
argument_list|(
name|bi
operator|.
name|previous
argument_list|()
argument_list|,
name|current
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"sentence"
argument_list|)
argument_list|)
expr_stmt|;
name|current
operator|=
name|bi
operator|.
name|current
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|source
operator|.
name|substring
argument_list|(
name|bi
operator|.
name|previous
argument_list|()
argument_list|,
name|current
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"first"
operator|+
name|separator
argument_list|)
argument_list|)
expr_stmt|;
name|current
operator|=
name|bi
operator|.
name|current
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|source
operator|.
name|substring
argument_list|(
name|bi
operator|.
name|previous
argument_list|()
argument_list|,
name|current
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"the"
operator|+
name|separator
argument_list|)
argument_list|)
expr_stmt|;
name|current
operator|=
name|bi
operator|.
name|current
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|source
operator|.
name|substring
argument_list|(
name|bi
operator|.
name|previous
argument_list|()
argument_list|,
name|current
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"is"
operator|+
name|separator
argument_list|)
argument_list|)
expr_stmt|;
name|current
operator|=
name|bi
operator|.
name|current
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|source
operator|.
name|substring
argument_list|(
name|bi
operator|.
name|previous
argument_list|()
argument_list|,
name|current
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"this"
operator|+
name|separator
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|bi
operator|.
name|previous
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|BreakIterator
operator|.
name|DONE
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|bi
operator|.
name|current
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|source
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|bi
operator|.
name|following
argument_list|(
literal|9
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"this"
operator|+
name|separator
operator|+
literal|"is"
operator|+
name|separator
operator|+
literal|"the"
operator|+
name|separator
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|source
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|bi
operator|.
name|preceding
argument_list|(
literal|9
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"this"
operator|+
name|separator
operator|+
literal|"is"
operator|+
name|separator
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|bi
operator|.
name|first
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|source
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|bi
operator|.
name|next
argument_list|(
literal|3
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"this"
operator|+
name|separator
operator|+
literal|"is"
operator|+
name|separator
operator|+
literal|"the"
operator|+
name|separator
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testSingleSentences
specifier|public
name|void
name|testSingleSentences
parameter_list|()
throws|throws
name|Exception
block|{
name|BreakIterator
name|expected
init|=
name|BreakIterator
operator|.
name|getSentenceInstance
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
decl_stmt|;
name|BreakIterator
name|actual
init|=
operator|new
name|CustomSeparatorBreakIterator
argument_list|(
name|randomSeparator
argument_list|()
argument_list|)
decl_stmt|;
name|assertSameBreaks
argument_list|(
literal|"a"
argument_list|,
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
name|assertSameBreaks
argument_list|(
literal|"ab"
argument_list|,
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
name|assertSameBreaks
argument_list|(
literal|"abc"
argument_list|,
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
name|assertSameBreaks
argument_list|(
literal|""
argument_list|,
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
DECL|method|testSliceEnd
specifier|public
name|void
name|testSliceEnd
parameter_list|()
throws|throws
name|Exception
block|{
name|BreakIterator
name|expected
init|=
name|BreakIterator
operator|.
name|getSentenceInstance
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
decl_stmt|;
name|BreakIterator
name|actual
init|=
operator|new
name|CustomSeparatorBreakIterator
argument_list|(
name|randomSeparator
argument_list|()
argument_list|)
decl_stmt|;
name|assertSameBreaks
argument_list|(
literal|"a000"
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
name|assertSameBreaks
argument_list|(
literal|"ab000"
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
name|assertSameBreaks
argument_list|(
literal|"abc000"
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
name|assertSameBreaks
argument_list|(
literal|"000"
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
DECL|method|testSliceStart
specifier|public
name|void
name|testSliceStart
parameter_list|()
throws|throws
name|Exception
block|{
name|BreakIterator
name|expected
init|=
name|BreakIterator
operator|.
name|getSentenceInstance
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
decl_stmt|;
name|BreakIterator
name|actual
init|=
operator|new
name|CustomSeparatorBreakIterator
argument_list|(
name|randomSeparator
argument_list|()
argument_list|)
decl_stmt|;
name|assertSameBreaks
argument_list|(
literal|"000a"
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|,
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
name|assertSameBreaks
argument_list|(
literal|"000ab"
argument_list|,
literal|3
argument_list|,
literal|2
argument_list|,
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
name|assertSameBreaks
argument_list|(
literal|"000abc"
argument_list|,
literal|3
argument_list|,
literal|3
argument_list|,
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
name|assertSameBreaks
argument_list|(
literal|"000"
argument_list|,
literal|3
argument_list|,
literal|0
argument_list|,
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
DECL|method|testSliceMiddle
specifier|public
name|void
name|testSliceMiddle
parameter_list|()
throws|throws
name|Exception
block|{
name|BreakIterator
name|expected
init|=
name|BreakIterator
operator|.
name|getSentenceInstance
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
decl_stmt|;
name|BreakIterator
name|actual
init|=
operator|new
name|CustomSeparatorBreakIterator
argument_list|(
name|randomSeparator
argument_list|()
argument_list|)
decl_stmt|;
name|assertSameBreaks
argument_list|(
literal|"000a000"
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|,
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
name|assertSameBreaks
argument_list|(
literal|"000ab000"
argument_list|,
literal|3
argument_list|,
literal|2
argument_list|,
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
name|assertSameBreaks
argument_list|(
literal|"000abc000"
argument_list|,
literal|3
argument_list|,
literal|3
argument_list|,
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
name|assertSameBreaks
argument_list|(
literal|"000000"
argument_list|,
literal|3
argument_list|,
literal|0
argument_list|,
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
comment|/** the current position must be ignored, initial position is always first() */
DECL|method|testFirstPosition
specifier|public
name|void
name|testFirstPosition
parameter_list|()
throws|throws
name|Exception
block|{
name|BreakIterator
name|expected
init|=
name|BreakIterator
operator|.
name|getSentenceInstance
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
decl_stmt|;
name|BreakIterator
name|actual
init|=
operator|new
name|CustomSeparatorBreakIterator
argument_list|(
name|randomSeparator
argument_list|()
argument_list|)
decl_stmt|;
name|assertSameBreaks
argument_list|(
literal|"000ab000"
argument_list|,
literal|3
argument_list|,
literal|2
argument_list|,
literal|4
argument_list|,
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
DECL|method|randomSeparator
specifier|private
specifier|static
name|char
name|randomSeparator
parameter_list|()
block|{
return|return
name|RandomPicks
operator|.
name|randomFrom
argument_list|(
name|random
argument_list|()
argument_list|,
name|SEPARATORS
argument_list|)
return|;
block|}
block|}
end_class
end_unit
