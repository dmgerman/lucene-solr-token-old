begin_unit
begin_package
DECL|package|org.apache.lucene.search.highlight
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|highlight
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilder
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilderFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Analyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|BaseTokenStreamTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|CachingTokenFilter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|MockAnalyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|MockPayloadAnalyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|MockTokenFilter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|MockTokenizer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Token
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Tokenizer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|CharTermAttribute
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|OffsetAttribute
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|PositionIncrementAttribute
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|FieldType
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|IntField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|StoredField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|TextField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DirectoryReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriterConfig
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriterConfig
operator|.
name|OpenMode
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReaderContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|StoredDocument
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queries
operator|.
name|CommonTermsQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queries
operator|.
name|CustomScoreProvider
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queries
operator|.
name|CustomScoreQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanClause
operator|.
name|Occur
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|ConstantScoreQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|FuzzyQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|MultiPhraseQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|MultiTermQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|NumericRangeQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|PhraseQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|PhraseQuery
operator|.
name|Builder
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|PrefixQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|QueryWrapperFilter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|RegexpQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TermQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TermRangeQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TopDocs
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|WildcardQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|highlight
operator|.
name|SynonymTokenizer
operator|.
name|TestHighlightRunner
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|join
operator|.
name|QueryBitSetProducer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|join
operator|.
name|BitSetProducer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|join
operator|.
name|ScoreMode
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|join
operator|.
name|ToChildBlockJoinQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|join
operator|.
name|ToParentBlockJoinQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|payloads
operator|.
name|SpanPayloadCheckQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|spans
operator|.
name|SpanMultiTermQueryWrapper
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|spans
operator|.
name|SpanNearQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|spans
operator|.
name|SpanNotQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|spans
operator|.
name|SpanOrQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|spans
operator|.
name|SpanQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|spans
operator|.
name|SpanTermQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|automaton
operator|.
name|Automata
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|automaton
operator|.
name|CharacterRunAutomaton
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|automaton
operator|.
name|RegExp
import|;
end_import
begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import
begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import
begin_comment
comment|/**  * JUnit Test for Highlighter class.  *  */
end_comment
begin_class
DECL|class|HighlighterTest
specifier|public
class|class
name|HighlighterTest
extends|extends
name|BaseTokenStreamTestCase
implements|implements
name|Formatter
block|{
DECL|field|reader
specifier|private
name|IndexReader
name|reader
decl_stmt|;
DECL|field|FIELD_NAME
specifier|static
specifier|final
name|String
name|FIELD_NAME
init|=
literal|"contents"
decl_stmt|;
DECL|field|NUMERIC_FIELD_NAME
specifier|private
specifier|static
specifier|final
name|String
name|NUMERIC_FIELD_NAME
init|=
literal|"nfield"
decl_stmt|;
DECL|field|query
specifier|private
name|Query
name|query
decl_stmt|;
DECL|field|ramDir
name|Directory
name|ramDir
decl_stmt|;
DECL|field|searcher
specifier|public
name|IndexSearcher
name|searcher
init|=
literal|null
decl_stmt|;
DECL|field|numHighlights
name|int
name|numHighlights
init|=
literal|0
decl_stmt|;
DECL|field|analyzer
name|MockAnalyzer
name|analyzer
decl_stmt|;
DECL|field|hits
name|TopDocs
name|hits
decl_stmt|;
DECL|field|fieldType
name|FieldType
name|fieldType
decl_stmt|;
comment|//see doc()
DECL|field|FIELD_TYPE_TV
specifier|final
name|FieldType
name|FIELD_TYPE_TV
decl_stmt|;
block|{
name|FieldType
name|fieldType
init|=
operator|new
name|FieldType
argument_list|(
name|TextField
operator|.
name|TYPE_STORED
argument_list|)
decl_stmt|;
name|fieldType
operator|.
name|setStoreTermVectors
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|fieldType
operator|.
name|setStoreTermVectorPositions
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|fieldType
operator|.
name|setStoreTermVectorPayloads
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|fieldType
operator|.
name|setStoreTermVectorOffsets
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|fieldType
operator|.
name|freeze
parameter_list|()
constructor_decl|;
name|FIELD_TYPE_TV
operator|=
name|fieldType
expr_stmt|;
block|}
DECL|field|texts
name|String
index|[]
name|texts
init|=
block|{
literal|"Hello this is a piece of text that is very long and contains too much preamble and the meat is really here which says kennedy has been shot"
block|,
literal|"This piece of text refers to Kennedy at the beginning then has a longer piece of text that is very long in the middle and finally ends with another reference to Kennedy"
block|,
literal|"JFK has been shot"
block|,
literal|"John Kennedy has been shot"
block|,
literal|"This text has a typo in referring to Keneddy"
block|,
literal|"wordx wordy wordz wordx wordy wordx worda wordb wordy wordc"
block|,
literal|"y z x y z a b"
block|,
literal|"lets is a the lets is a the lets is a the lets"
block|}
decl_stmt|;
comment|// Convenience method for succinct tests; doesn't represent "best practice"
DECL|method|getAnyTokenStream
specifier|private
name|TokenStream
name|getAnyTokenStream
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|int
name|docId
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|TokenSources
operator|.
name|getTokenStream
argument_list|(
name|fieldName
argument_list|,
name|searcher
operator|.
name|getIndexReader
argument_list|()
operator|.
name|getTermVectors
argument_list|(
name|docId
argument_list|)
argument_list|,
name|searcher
operator|.
name|doc
argument_list|(
name|docId
argument_list|)
operator|.
name|get
argument_list|(
name|fieldName
argument_list|)
argument_list|,
name|analyzer
argument_list|,
operator|-
literal|1
argument_list|)
return|;
block|}
DECL|method|testCustomScoreQueryHighlight
specifier|public
name|void
name|testCustomScoreQueryHighlight
parameter_list|()
throws|throws
name|Exception
block|{
name|TermQuery
name|termQuery
init|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|FIELD_NAME
argument_list|,
literal|"very"
argument_list|)
argument_list|)
decl_stmt|;
name|CustomScoreQuery
name|query
init|=
operator|new
name|CustomScoreQuery
argument_list|(
name|termQuery
argument_list|)
decl_stmt|;
name|searcher
operator|=
name|newSearcher
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|TopDocs
name|hits
init|=
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|hits
operator|.
name|totalHits
argument_list|)
expr_stmt|;
name|QueryScorer
name|scorer
init|=
operator|new
name|QueryScorer
argument_list|(
name|query
argument_list|,
name|FIELD_NAME
argument_list|)
decl_stmt|;
name|Highlighter
name|highlighter
init|=
operator|new
name|Highlighter
argument_list|(
name|scorer
argument_list|)
decl_stmt|;
specifier|final
name|int
name|docId0
init|=
name|hits
operator|.
name|scoreDocs
index|[
literal|0
index|]
operator|.
name|doc
decl_stmt|;
name|StoredDocument
name|doc
init|=
name|searcher
operator|.
name|doc
argument_list|(
name|docId0
argument_list|)
decl_stmt|;
name|String
name|storedField
init|=
name|doc
operator|.
name|get
argument_list|(
name|FIELD_NAME
argument_list|)
decl_stmt|;
name|TokenStream
name|stream
init|=
name|getAnyTokenStream
argument_list|(
name|FIELD_NAME
argument_list|,
name|docId0
argument_list|)
decl_stmt|;
name|Fragmenter
name|fragmenter
init|=
operator|new
name|SimpleSpanFragmenter
argument_list|(
name|scorer
argument_list|)
decl_stmt|;
name|highlighter
operator|.
name|setTextFragmenter
argument_list|(
name|fragmenter
argument_list|)
expr_stmt|;
name|String
name|fragment
init|=
name|highlighter
operator|.
name|getBestFragment
argument_list|(
name|stream
argument_list|,
name|storedField
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Hello this is a piece of text that is<B>very</B> long and contains too much preamble and the meat is really here which says kennedy has been shot"
argument_list|,
name|fragment
argument_list|)
expr_stmt|;
block|}
DECL|method|testQueryScorerHits
specifier|public
name|void
name|testQueryScorerHits
parameter_list|()
throws|throws
name|Exception
block|{
name|PhraseQuery
name|phraseQuery
init|=
operator|new
name|PhraseQuery
argument_list|(
name|FIELD_NAME
argument_list|,
literal|"very"
argument_list|,
literal|"long"
argument_list|)
decl_stmt|;
name|query
operator|=
name|phraseQuery
expr_stmt|;
name|searcher
operator|=
name|newSearcher
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|TopDocs
name|hits
init|=
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|QueryScorer
name|scorer
init|=
operator|new
name|QueryScorer
argument_list|(
name|query
argument_list|,
name|FIELD_NAME
argument_list|)
decl_stmt|;
name|Highlighter
name|highlighter
init|=
operator|new
name|Highlighter
argument_list|(
name|scorer
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|hits
operator|.
name|scoreDocs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|int
name|docId
init|=
name|hits
operator|.
name|scoreDocs
index|[
name|i
index|]
operator|.
name|doc
decl_stmt|;
name|StoredDocument
name|doc
init|=
name|searcher
operator|.
name|doc
argument_list|(
name|docId
argument_list|)
decl_stmt|;
name|String
name|storedField
init|=
name|doc
operator|.
name|get
argument_list|(
name|FIELD_NAME
argument_list|)
decl_stmt|;
name|TokenStream
name|stream
init|=
name|getAnyTokenStream
argument_list|(
name|FIELD_NAME
argument_list|,
name|docId
argument_list|)
decl_stmt|;
name|Fragmenter
name|fragmenter
init|=
operator|new
name|SimpleSpanFragmenter
argument_list|(
name|scorer
argument_list|)
decl_stmt|;
name|highlighter
operator|.
name|setTextFragmenter
argument_list|(
name|fragmenter
argument_list|)
expr_stmt|;
name|String
name|fragment
init|=
name|highlighter
operator|.
name|getBestFragment
argument_list|(
name|stream
argument_list|,
name|storedField
argument_list|)
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|fragment
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testHighlightingCommonTermsQuery
specifier|public
name|void
name|testHighlightingCommonTermsQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|CommonTermsQuery
name|query
init|=
operator|new
name|CommonTermsQuery
argument_list|(
name|Occur
operator|.
name|MUST
argument_list|,
name|Occur
operator|.
name|SHOULD
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|query
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
name|FIELD_NAME
argument_list|,
literal|"this"
argument_list|)
argument_list|)
expr_stmt|;
comment|//stop-word
name|query
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
name|FIELD_NAME
argument_list|,
literal|"long"
argument_list|)
argument_list|)
expr_stmt|;
name|query
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
name|FIELD_NAME
argument_list|,
literal|"very"
argument_list|)
argument_list|)
expr_stmt|;
name|searcher
operator|=
name|newSearcher
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|TopDocs
name|hits
init|=
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|hits
operator|.
name|totalHits
argument_list|)
expr_stmt|;
name|QueryScorer
name|scorer
init|=
operator|new
name|QueryScorer
argument_list|(
name|query
argument_list|,
name|FIELD_NAME
argument_list|)
decl_stmt|;
name|Highlighter
name|highlighter
init|=
operator|new
name|Highlighter
argument_list|(
name|scorer
argument_list|)
decl_stmt|;
specifier|final
name|int
name|docId0
init|=
name|hits
operator|.
name|scoreDocs
index|[
literal|0
index|]
operator|.
name|doc
decl_stmt|;
name|StoredDocument
name|doc
init|=
name|searcher
operator|.
name|doc
argument_list|(
name|docId0
argument_list|)
decl_stmt|;
name|String
name|storedField
init|=
name|doc
operator|.
name|get
argument_list|(
name|FIELD_NAME
argument_list|)
decl_stmt|;
name|TokenStream
name|stream
init|=
name|getAnyTokenStream
argument_list|(
name|FIELD_NAME
argument_list|,
name|docId0
argument_list|)
decl_stmt|;
name|Fragmenter
name|fragmenter
init|=
operator|new
name|SimpleSpanFragmenter
argument_list|(
name|scorer
argument_list|)
decl_stmt|;
name|highlighter
operator|.
name|setTextFragmenter
argument_list|(
name|fragmenter
argument_list|)
expr_stmt|;
name|String
name|fragment
init|=
name|highlighter
operator|.
name|getBestFragment
argument_list|(
name|stream
argument_list|,
name|storedField
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Hello this is a piece of text that is<B>very</B><B>long</B> and contains too much preamble and the meat is really here which says kennedy has been shot"
argument_list|,
name|fragment
argument_list|)
expr_stmt|;
specifier|final
name|int
name|docId1
init|=
name|hits
operator|.
name|scoreDocs
index|[
literal|1
index|]
operator|.
name|doc
decl_stmt|;
name|doc
operator|=
name|searcher
operator|.
name|doc
argument_list|(
name|docId1
argument_list|)
expr_stmt|;
name|storedField
operator|=
name|doc
operator|.
name|get
argument_list|(
name|FIELD_NAME
argument_list|)
expr_stmt|;
name|stream
operator|=
name|getAnyTokenStream
argument_list|(
name|FIELD_NAME
argument_list|,
name|docId1
argument_list|)
expr_stmt|;
name|highlighter
operator|.
name|setTextFragmenter
argument_list|(
operator|new
name|SimpleSpanFragmenter
argument_list|(
name|scorer
argument_list|)
argument_list|)
expr_stmt|;
name|fragment
operator|=
name|highlighter
operator|.
name|getBestFragment
argument_list|(
name|stream
argument_list|,
name|storedField
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"This piece of text refers to Kennedy at the beginning then has a longer piece of text that is<B>very</B>"
argument_list|,
name|fragment
argument_list|)
expr_stmt|;
block|}
DECL|method|testHighlightUnknowQueryAfterRewrite
specifier|public
name|void
name|testHighlightUnknowQueryAfterRewrite
parameter_list|()
throws|throws
name|IOException
throws|,
name|InvalidTokenOffsetsException
block|{
name|Query
name|query
init|=
operator|new
name|Query
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Query
name|rewrite
parameter_list|(
name|IndexReader
name|reader
parameter_list|)
throws|throws
name|IOException
block|{
name|CommonTermsQuery
name|query
init|=
operator|new
name|CommonTermsQuery
argument_list|(
name|Occur
operator|.
name|MUST
argument_list|,
name|Occur
operator|.
name|SHOULD
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|query
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
name|FIELD_NAME
argument_list|,
literal|"this"
argument_list|)
argument_list|)
expr_stmt|;
comment|//stop-word
name|query
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
name|FIELD_NAME
argument_list|,
literal|"long"
argument_list|)
argument_list|)
expr_stmt|;
name|query
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
name|FIELD_NAME
argument_list|,
literal|"very"
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|query
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|(
name|String
name|field
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|31
operator|*
name|super
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
return|return
name|super
operator|.
name|equals
argument_list|(
name|obj
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|searcher
operator|=
name|newSearcher
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|TopDocs
name|hits
init|=
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|hits
operator|.
name|totalHits
argument_list|)
expr_stmt|;
name|QueryScorer
name|scorer
init|=
operator|new
name|QueryScorer
argument_list|(
name|query
argument_list|,
name|FIELD_NAME
argument_list|)
decl_stmt|;
name|Highlighter
name|highlighter
init|=
operator|new
name|Highlighter
argument_list|(
name|scorer
argument_list|)
decl_stmt|;
specifier|final
name|int
name|docId0
init|=
name|hits
operator|.
name|scoreDocs
index|[
literal|0
index|]
operator|.
name|doc
decl_stmt|;
name|StoredDocument
name|doc
init|=
name|searcher
operator|.
name|doc
argument_list|(
name|docId0
argument_list|)
decl_stmt|;
name|String
name|storedField
init|=
name|doc
operator|.
name|get
argument_list|(
name|FIELD_NAME
argument_list|)
decl_stmt|;
name|TokenStream
name|stream
init|=
name|getAnyTokenStream
argument_list|(
name|FIELD_NAME
argument_list|,
name|docId0
argument_list|)
decl_stmt|;
name|Fragmenter
name|fragmenter
init|=
operator|new
name|SimpleSpanFragmenter
argument_list|(
name|scorer
argument_list|)
decl_stmt|;
name|highlighter
operator|.
name|setTextFragmenter
argument_list|(
name|fragmenter
argument_list|)
expr_stmt|;
name|String
name|fragment
init|=
name|highlighter
operator|.
name|getBestFragment
argument_list|(
name|stream
argument_list|,
name|storedField
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Hello this is a piece of text that is<B>very</B><B>long</B> and contains too much preamble and the meat is really here which says kennedy has been shot"
argument_list|,
name|fragment
argument_list|)
expr_stmt|;
specifier|final
name|int
name|docId1
init|=
name|hits
operator|.
name|scoreDocs
index|[
literal|1
index|]
operator|.
name|doc
decl_stmt|;
name|doc
operator|=
name|searcher
operator|.
name|doc
argument_list|(
name|docId1
argument_list|)
expr_stmt|;
name|storedField
operator|=
name|doc
operator|.
name|get
argument_list|(
name|FIELD_NAME
argument_list|)
expr_stmt|;
name|stream
operator|=
name|getAnyTokenStream
argument_list|(
name|FIELD_NAME
argument_list|,
name|docId1
argument_list|)
expr_stmt|;
name|highlighter
operator|.
name|setTextFragmenter
argument_list|(
operator|new
name|SimpleSpanFragmenter
argument_list|(
name|scorer
argument_list|)
argument_list|)
expr_stmt|;
name|fragment
operator|=
name|highlighter
operator|.
name|getBestFragment
argument_list|(
name|stream
argument_list|,
name|storedField
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"This piece of text refers to Kennedy at the beginning then has a longer piece of text that is<B>very</B>"
argument_list|,
name|fragment
argument_list|)
expr_stmt|;
block|}
DECL|method|testHighlightingWithDefaultField
specifier|public
name|void
name|testHighlightingWithDefaultField
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|s1
init|=
literal|"I call our world Flatland, not because we call it so,"
decl_stmt|;
comment|// Verify that a query against the default field results in text being
comment|// highlighted
comment|// regardless of the field name.
name|PhraseQuery
name|q
init|=
operator|new
name|PhraseQuery
argument_list|(
literal|3
argument_list|,
name|FIELD_NAME
argument_list|,
literal|"world"
argument_list|,
literal|"flatland"
argument_list|)
decl_stmt|;
name|String
name|expected
init|=
literal|"I call our<B>world</B><B>Flatland</B>, not because we call it so,"
decl_stmt|;
name|String
name|observed
init|=
name|highlightField
argument_list|(
name|q
argument_list|,
literal|"SOME_FIELD_NAME"
argument_list|,
name|s1
argument_list|)
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Expected: \""
operator|+
name|expected
operator|+
literal|"\n"
operator|+
literal|"Observed: \""
operator|+
name|observed
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Query in the default field results in text for *ANY* field being highlighted"
argument_list|,
name|expected
argument_list|,
name|observed
argument_list|)
expr_stmt|;
comment|// Verify that a query against a named field does not result in any
comment|// highlighting
comment|// when the query field name differs from the name of the field being
comment|// highlighted,
comment|// which in this example happens to be the default field name.
name|q
operator|=
operator|new
name|PhraseQuery
argument_list|(
literal|3
argument_list|,
literal|"text"
argument_list|,
literal|"world"
argument_list|,
literal|"flatland"
argument_list|)
expr_stmt|;
name|expected
operator|=
name|s1
expr_stmt|;
name|observed
operator|=
name|highlightField
argument_list|(
name|q
argument_list|,
name|FIELD_NAME
argument_list|,
name|s1
argument_list|)
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Expected: \""
operator|+
name|expected
operator|+
literal|"\n"
operator|+
literal|"Observed: \""
operator|+
name|observed
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Query in a named field does not result in highlighting when that field isn't in the query"
argument_list|,
name|s1
argument_list|,
name|highlightField
argument_list|(
name|q
argument_list|,
name|FIELD_NAME
argument_list|,
name|s1
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * This method intended for use with<tt>testHighlightingWithDefaultField()</tt>    */
DECL|method|highlightField
specifier|private
name|String
name|highlightField
parameter_list|(
name|Query
name|query
parameter_list|,
name|String
name|fieldName
parameter_list|,
name|String
name|text
parameter_list|)
throws|throws
name|IOException
throws|,
name|InvalidTokenOffsetsException
block|{
name|TokenStream
name|tokenStream
init|=
name|analyzer
operator|.
name|tokenStream
argument_list|(
name|fieldName
argument_list|,
name|text
argument_list|)
decl_stmt|;
comment|// Assuming "<B>", "</B>" used to highlight
name|SimpleHTMLFormatter
name|formatter
init|=
operator|new
name|SimpleHTMLFormatter
argument_list|()
decl_stmt|;
name|QueryScorer
name|scorer
init|=
operator|new
name|QueryScorer
argument_list|(
name|query
argument_list|,
name|fieldName
argument_list|,
name|FIELD_NAME
argument_list|)
decl_stmt|;
name|Highlighter
name|highlighter
init|=
operator|new
name|Highlighter
argument_list|(
name|formatter
argument_list|,
name|scorer
argument_list|)
decl_stmt|;
name|highlighter
operator|.
name|setTextFragmenter
argument_list|(
operator|new
name|SimpleFragmenter
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|rv
init|=
name|highlighter
operator|.
name|getBestFragments
argument_list|(
name|tokenStream
argument_list|,
name|text
argument_list|,
literal|1
argument_list|,
literal|"(FIELD TEXT TRUNCATED)"
argument_list|)
decl_stmt|;
return|return
name|rv
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|?
name|text
else|:
name|rv
return|;
block|}
DECL|method|testSimpleSpanHighlighter
specifier|public
name|void
name|testSimpleSpanHighlighter
parameter_list|()
throws|throws
name|Exception
block|{
name|doSearching
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|FIELD_NAME
argument_list|,
literal|"kennedy"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|maxNumFragmentsRequired
init|=
literal|2
decl_stmt|;
name|QueryScorer
name|scorer
init|=
operator|new
name|QueryScorer
argument_list|(
name|query
argument_list|,
name|FIELD_NAME
argument_list|)
decl_stmt|;
name|Highlighter
name|highlighter
init|=
operator|new
name|Highlighter
argument_list|(
name|scorer
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|hits
operator|.
name|totalHits
condition|;
name|i
operator|++
control|)
block|{
name|String
name|text
init|=
name|searcher
operator|.
name|doc
argument_list|(
name|hits
operator|.
name|scoreDocs
index|[
name|i
index|]
operator|.
name|doc
argument_list|)
operator|.
name|get
argument_list|(
name|FIELD_NAME
argument_list|)
decl_stmt|;
name|TokenStream
name|tokenStream
init|=
name|analyzer
operator|.
name|tokenStream
argument_list|(
name|FIELD_NAME
argument_list|,
name|text
argument_list|)
decl_stmt|;
name|highlighter
operator|.
name|setTextFragmenter
argument_list|(
operator|new
name|SimpleFragmenter
argument_list|(
literal|40
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|result
init|=
name|highlighter
operator|.
name|getBestFragments
argument_list|(
name|tokenStream
argument_list|,
name|text
argument_list|,
name|maxNumFragmentsRequired
argument_list|,
literal|"..."
argument_list|)
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\t"
operator|+
name|result
argument_list|)
expr_stmt|;
block|}
comment|// Not sure we can assert anything here - just running to check we dont
comment|// throw any exceptions
block|}
comment|// LUCENE-1752
DECL|method|testRepeatingTermsInMultBooleans
specifier|public
name|void
name|testRepeatingTermsInMultBooleans
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|content
init|=
literal|"x y z a b c d e f g b c g"
decl_stmt|;
name|String
name|f1
init|=
literal|"f1"
decl_stmt|;
name|String
name|f2
init|=
literal|"f2"
decl_stmt|;
name|PhraseQuery
name|f1ph1
init|=
operator|new
name|PhraseQuery
argument_list|(
name|f1
argument_list|,
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"d"
argument_list|)
decl_stmt|;
name|PhraseQuery
name|f2ph1
init|=
operator|new
name|PhraseQuery
argument_list|(
name|f2
argument_list|,
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"d"
argument_list|)
decl_stmt|;
name|PhraseQuery
name|f1ph2
init|=
operator|new
name|PhraseQuery
argument_list|(
name|f1
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"g"
argument_list|)
decl_stmt|;
name|PhraseQuery
name|f2ph2
init|=
operator|new
name|PhraseQuery
argument_list|(
name|f2
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"g"
argument_list|)
decl_stmt|;
name|BooleanQuery
operator|.
name|Builder
name|booleanQuery
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|BooleanQuery
operator|.
name|Builder
name|leftChild
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|leftChild
operator|.
name|add
argument_list|(
name|f1ph1
argument_list|,
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|leftChild
operator|.
name|add
argument_list|(
name|f2ph1
argument_list|,
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|booleanQuery
operator|.
name|add
argument_list|(
name|leftChild
operator|.
name|build
argument_list|()
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|BooleanQuery
operator|.
name|Builder
name|rightChild
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|rightChild
operator|.
name|add
argument_list|(
name|f1ph2
argument_list|,
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|rightChild
operator|.
name|add
argument_list|(
name|f2ph2
argument_list|,
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|booleanQuery
operator|.
name|add
argument_list|(
name|rightChild
operator|.
name|build
argument_list|()
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|QueryScorer
name|scorer
init|=
operator|new
name|QueryScorer
argument_list|(
name|booleanQuery
operator|.
name|build
argument_list|()
argument_list|,
name|f1
argument_list|)
decl_stmt|;
name|scorer
operator|.
name|setExpandMultiTermQuery
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|Highlighter
name|h
init|=
operator|new
name|Highlighter
argument_list|(
name|this
argument_list|,
name|scorer
argument_list|)
decl_stmt|;
name|Analyzer
name|analyzer
init|=
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|,
name|MockTokenizer
operator|.
name|WHITESPACE
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|h
operator|.
name|getBestFragment
argument_list|(
name|analyzer
argument_list|,
name|f1
argument_list|,
name|content
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Failed to find correct number of highlights "
operator|+
name|numHighlights
operator|+
literal|" found"
argument_list|,
name|numHighlights
operator|==
literal|7
argument_list|)
expr_stmt|;
block|}
DECL|method|testSimpleQueryScorerPhraseHighlighting
specifier|public
name|void
name|testSimpleQueryScorerPhraseHighlighting
parameter_list|()
throws|throws
name|Exception
block|{
name|PhraseQuery
operator|.
name|Builder
name|builder
init|=
operator|new
name|PhraseQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
name|FIELD_NAME
argument_list|,
literal|"very"
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
name|FIELD_NAME
argument_list|,
literal|"long"
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
name|FIELD_NAME
argument_list|,
literal|"contains"
argument_list|)
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|PhraseQuery
name|phraseQuery
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|doSearching
argument_list|(
name|phraseQuery
argument_list|)
expr_stmt|;
name|int
name|maxNumFragmentsRequired
init|=
literal|2
decl_stmt|;
name|QueryScorer
name|scorer
init|=
operator|new
name|QueryScorer
argument_list|(
name|query
argument_list|,
name|FIELD_NAME
argument_list|)
decl_stmt|;
name|Highlighter
name|highlighter
init|=
operator|new
name|Highlighter
argument_list|(
name|this
argument_list|,
name|scorer
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|hits
operator|.
name|totalHits
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|int
name|docId
init|=
name|hits
operator|.
name|scoreDocs
index|[
name|i
index|]
operator|.
name|doc
decl_stmt|;
specifier|final
name|StoredDocument
name|doc
init|=
name|searcher
operator|.
name|doc
argument_list|(
name|docId
argument_list|)
decl_stmt|;
name|String
name|text
init|=
name|doc
operator|.
name|get
argument_list|(
name|FIELD_NAME
argument_list|)
decl_stmt|;
name|TokenStream
name|tokenStream
init|=
name|getAnyTokenStream
argument_list|(
name|FIELD_NAME
argument_list|,
name|docId
argument_list|)
decl_stmt|;
name|highlighter
operator|.
name|setTextFragmenter
argument_list|(
operator|new
name|SimpleFragmenter
argument_list|(
literal|40
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|result
init|=
name|highlighter
operator|.
name|getBestFragments
argument_list|(
name|tokenStream
argument_list|,
name|text
argument_list|,
name|maxNumFragmentsRequired
argument_list|,
literal|"..."
argument_list|)
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\t"
operator|+
name|result
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"Failed to find correct number of highlights "
operator|+
name|numHighlights
operator|+
literal|" found"
argument_list|,
name|numHighlights
operator|==
literal|3
argument_list|)
expr_stmt|;
name|numHighlights
operator|=
literal|0
expr_stmt|;
name|builder
operator|=
operator|new
name|PhraseQuery
operator|.
name|Builder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
name|FIELD_NAME
argument_list|,
literal|"piece"
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
name|FIELD_NAME
argument_list|,
literal|"text"
argument_list|)
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
name|FIELD_NAME
argument_list|,
literal|"refers"
argument_list|)
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
name|FIELD_NAME
argument_list|,
literal|"kennedy"
argument_list|)
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|phraseQuery
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|doSearching
argument_list|(
name|phraseQuery
argument_list|)
expr_stmt|;
name|maxNumFragmentsRequired
operator|=
literal|2
expr_stmt|;
name|scorer
operator|=
operator|new
name|QueryScorer
argument_list|(
name|query
argument_list|,
name|FIELD_NAME
argument_list|)
expr_stmt|;
name|highlighter
operator|=
operator|new
name|Highlighter
argument_list|(
name|this
argument_list|,
name|scorer
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|hits
operator|.
name|totalHits
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|int
name|docId
init|=
name|hits
operator|.
name|scoreDocs
index|[
name|i
index|]
operator|.
name|doc
decl_stmt|;
specifier|final
name|StoredDocument
name|doc
init|=
name|searcher
operator|.
name|doc
argument_list|(
name|docId
argument_list|)
decl_stmt|;
name|String
name|text
init|=
name|doc
operator|.
name|get
argument_list|(
name|FIELD_NAME
argument_list|)
decl_stmt|;
name|TokenStream
name|tokenStream
init|=
name|getAnyTokenStream
argument_list|(
name|FIELD_NAME
argument_list|,
name|docId
argument_list|)
decl_stmt|;
name|highlighter
operator|.
name|setTextFragmenter
argument_list|(
operator|new
name|SimpleFragmenter
argument_list|(
literal|40
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|result
init|=
name|highlighter
operator|.
name|getBestFragments
argument_list|(
name|tokenStream
argument_list|,
name|text
argument_list|,
name|maxNumFragmentsRequired
argument_list|,
literal|"..."
argument_list|)
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\t"
operator|+
name|result
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"Failed to find correct number of highlights "
operator|+
name|numHighlights
operator|+
literal|" found"
argument_list|,
name|numHighlights
operator|==
literal|4
argument_list|)
expr_stmt|;
name|numHighlights
operator|=
literal|0
expr_stmt|;
name|builder
operator|=
operator|new
name|PhraseQuery
operator|.
name|Builder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
name|FIELD_NAME
argument_list|,
literal|"lets"
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
name|FIELD_NAME
argument_list|,
literal|"lets"
argument_list|)
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
name|FIELD_NAME
argument_list|,
literal|"lets"
argument_list|)
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
name|FIELD_NAME
argument_list|,
literal|"lets"
argument_list|)
argument_list|,
literal|12
argument_list|)
expr_stmt|;
name|phraseQuery
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|doSearching
argument_list|(
name|phraseQuery
argument_list|)
expr_stmt|;
name|maxNumFragmentsRequired
operator|=
literal|2
expr_stmt|;
name|scorer
operator|=
operator|new
name|QueryScorer
argument_list|(
name|query
argument_list|,
name|FIELD_NAME
argument_list|)
expr_stmt|;
name|highlighter
operator|=
operator|new
name|Highlighter
argument_list|(
name|this
argument_list|,
name|scorer
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|hits
operator|.
name|totalHits
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|int
name|docId
init|=
name|hits
operator|.
name|scoreDocs
index|[
name|i
index|]
operator|.
name|doc
decl_stmt|;
specifier|final
name|StoredDocument
name|doc
init|=
name|searcher
operator|.
name|doc
argument_list|(
name|docId
argument_list|)
decl_stmt|;
name|String
name|text
init|=
name|doc
operator|.
name|get
argument_list|(
name|FIELD_NAME
argument_list|)
decl_stmt|;
name|TokenStream
name|tokenStream
init|=
name|getAnyTokenStream
argument_list|(
name|FIELD_NAME
argument_list|,
name|docId
argument_list|)
decl_stmt|;
name|highlighter
operator|.
name|setTextFragmenter
argument_list|(
operator|new
name|SimpleFragmenter
argument_list|(
literal|40
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|result
init|=
name|highlighter
operator|.
name|getBestFragments
argument_list|(
name|tokenStream
argument_list|,
name|text
argument_list|,
name|maxNumFragmentsRequired
argument_list|,
literal|"..."
argument_list|)
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\t"
operator|+
name|result
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"Failed to find correct number of highlights "
operator|+
name|numHighlights
operator|+
literal|" found"
argument_list|,
name|numHighlights
operator|==
literal|4
argument_list|)
expr_stmt|;
block|}
DECL|method|testSpanRegexQuery
specifier|public
name|void
name|testSpanRegexQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|query
operator|=
operator|new
name|SpanOrQuery
argument_list|(
operator|new
name|SpanMultiTermQueryWrapper
argument_list|<>
argument_list|(
operator|new
name|RegexpQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|FIELD_NAME
argument_list|,
literal|"ken.*"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|searcher
operator|=
name|newSearcher
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|hits
operator|=
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|int
name|maxNumFragmentsRequired
init|=
literal|2
decl_stmt|;
name|QueryScorer
name|scorer
init|=
operator|new
name|QueryScorer
argument_list|(
name|query
argument_list|,
name|FIELD_NAME
argument_list|)
decl_stmt|;
name|Highlighter
name|highlighter
init|=
operator|new
name|Highlighter
argument_list|(
name|this
argument_list|,
name|scorer
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|hits
operator|.
name|totalHits
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|int
name|docId
init|=
name|hits
operator|.
name|scoreDocs
index|[
name|i
index|]
operator|.
name|doc
decl_stmt|;
specifier|final
name|StoredDocument
name|doc
init|=
name|searcher
operator|.
name|doc
argument_list|(
name|docId
argument_list|)
decl_stmt|;
name|String
name|text
init|=
name|doc
operator|.
name|get
argument_list|(
name|FIELD_NAME
argument_list|)
decl_stmt|;
name|TokenStream
name|tokenStream
init|=
name|getAnyTokenStream
argument_list|(
name|FIELD_NAME
argument_list|,
name|docId
argument_list|)
decl_stmt|;
name|highlighter
operator|.
name|setTextFragmenter
argument_list|(
operator|new
name|SimpleFragmenter
argument_list|(
literal|40
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|result
init|=
name|highlighter
operator|.
name|getBestFragments
argument_list|(
name|tokenStream
argument_list|,
name|text
argument_list|,
name|maxNumFragmentsRequired
argument_list|,
literal|"..."
argument_list|)
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\t"
operator|+
name|result
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"Failed to find correct number of highlights "
operator|+
name|numHighlights
operator|+
literal|" found"
argument_list|,
name|numHighlights
operator|==
literal|5
argument_list|)
expr_stmt|;
block|}
DECL|method|testRegexQuery
specifier|public
name|void
name|testRegexQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|query
operator|=
operator|new
name|RegexpQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|FIELD_NAME
argument_list|,
literal|"ken.*"
argument_list|)
argument_list|)
expr_stmt|;
name|searcher
operator|=
name|newSearcher
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|hits
operator|=
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|int
name|maxNumFragmentsRequired
init|=
literal|2
decl_stmt|;
name|QueryScorer
name|scorer
init|=
operator|new
name|QueryScorer
argument_list|(
name|query
argument_list|,
name|FIELD_NAME
argument_list|)
decl_stmt|;
name|Highlighter
name|highlighter
init|=
operator|new
name|Highlighter
argument_list|(
name|this
argument_list|,
name|scorer
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|hits
operator|.
name|totalHits
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|int
name|docId
init|=
name|hits
operator|.
name|scoreDocs
index|[
name|i
index|]
operator|.
name|doc
decl_stmt|;
specifier|final
name|StoredDocument
name|doc
init|=
name|searcher
operator|.
name|doc
argument_list|(
name|docId
argument_list|)
decl_stmt|;
name|String
name|text
init|=
name|doc
operator|.
name|get
argument_list|(
name|FIELD_NAME
argument_list|)
decl_stmt|;
name|TokenStream
name|tokenStream
init|=
name|getAnyTokenStream
argument_list|(
name|FIELD_NAME
argument_list|,
name|docId
argument_list|)
decl_stmt|;
name|highlighter
operator|.
name|setTextFragmenter
argument_list|(
operator|new
name|SimpleFragmenter
argument_list|(
literal|40
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|result
init|=
name|highlighter
operator|.
name|getBestFragments
argument_list|(
name|tokenStream
argument_list|,
name|text
argument_list|,
name|maxNumFragmentsRequired
argument_list|,
literal|"..."
argument_list|)
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\t"
operator|+
name|result
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"Failed to find correct number of highlights "
operator|+
name|numHighlights
operator|+
literal|" found"
argument_list|,
name|numHighlights
operator|==
literal|5
argument_list|)
expr_stmt|;
block|}
DECL|method|testExternalReader
specifier|public
name|void
name|testExternalReader
parameter_list|()
throws|throws
name|Exception
block|{
name|query
operator|=
operator|new
name|RegexpQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|FIELD_NAME
argument_list|,
literal|"ken.*"
argument_list|)
argument_list|)
expr_stmt|;
name|searcher
operator|=
name|newSearcher
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|hits
operator|=
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|int
name|maxNumFragmentsRequired
init|=
literal|2
decl_stmt|;
name|QueryScorer
name|scorer
init|=
operator|new
name|QueryScorer
argument_list|(
name|query
argument_list|,
name|reader
argument_list|,
name|FIELD_NAME
argument_list|)
decl_stmt|;
name|Highlighter
name|highlighter
init|=
operator|new
name|Highlighter
argument_list|(
name|this
argument_list|,
name|scorer
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|hits
operator|.
name|totalHits
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|int
name|docId
init|=
name|hits
operator|.
name|scoreDocs
index|[
name|i
index|]
operator|.
name|doc
decl_stmt|;
specifier|final
name|StoredDocument
name|doc
init|=
name|searcher
operator|.
name|doc
argument_list|(
name|docId
argument_list|)
decl_stmt|;
name|String
name|text
init|=
name|doc
operator|.
name|get
argument_list|(
name|FIELD_NAME
argument_list|)
decl_stmt|;
name|TokenStream
name|tokenStream
init|=
name|getAnyTokenStream
argument_list|(
name|FIELD_NAME
argument_list|,
name|docId
argument_list|)
decl_stmt|;
name|highlighter
operator|.
name|setTextFragmenter
argument_list|(
operator|new
name|SimpleFragmenter
argument_list|(
literal|40
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|result
init|=
name|highlighter
operator|.
name|getBestFragments
argument_list|(
name|tokenStream
argument_list|,
name|text
argument_list|,
name|maxNumFragmentsRequired
argument_list|,
literal|"..."
argument_list|)
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\t"
operator|+
name|result
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|reader
operator|.
name|docFreq
argument_list|(
operator|new
name|Term
argument_list|(
name|FIELD_NAME
argument_list|,
literal|"hello"
argument_list|)
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Failed to find correct number of highlights "
operator|+
name|numHighlights
operator|+
literal|" found"
argument_list|,
name|numHighlights
operator|==
literal|5
argument_list|)
expr_stmt|;
block|}
DECL|method|testNumericRangeQuery
specifier|public
name|void
name|testNumericRangeQuery
parameter_list|()
throws|throws
name|Exception
block|{
comment|// doesn't currently highlight, but make sure it doesn't cause exception either
name|query
operator|=
name|NumericRangeQuery
operator|.
name|newIntRange
argument_list|(
name|NUMERIC_FIELD_NAME
argument_list|,
literal|2
argument_list|,
literal|6
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|searcher
operator|=
name|newSearcher
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|hits
operator|=
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|int
name|maxNumFragmentsRequired
init|=
literal|2
decl_stmt|;
name|QueryScorer
name|scorer
init|=
operator|new
name|QueryScorer
argument_list|(
name|query
argument_list|,
name|FIELD_NAME
argument_list|)
decl_stmt|;
name|Highlighter
name|highlighter
init|=
operator|new
name|Highlighter
argument_list|(
name|this
argument_list|,
name|scorer
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|hits
operator|.
name|totalHits
condition|;
name|i
operator|++
control|)
block|{
name|String
name|text
init|=
name|searcher
operator|.
name|doc
argument_list|(
name|hits
operator|.
name|scoreDocs
index|[
name|i
index|]
operator|.
name|doc
argument_list|)
operator|.
name|getField
argument_list|(
name|NUMERIC_FIELD_NAME
argument_list|)
operator|.
name|numericValue
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|TokenStream
name|tokenStream
init|=
name|analyzer
operator|.
name|tokenStream
argument_list|(
name|FIELD_NAME
argument_list|,
name|text
argument_list|)
decl_stmt|;
name|highlighter
operator|.
name|setTextFragmenter
argument_list|(
operator|new
name|SimpleFragmenter
argument_list|(
literal|40
argument_list|)
argument_list|)
expr_stmt|;
comment|//      String result =
name|highlighter
operator|.
name|getBestFragments
argument_list|(
name|tokenStream
argument_list|,
name|text
argument_list|,
name|maxNumFragmentsRequired
argument_list|,
literal|"..."
argument_list|)
expr_stmt|;
comment|//if (VERBOSE) System.out.println("\t" + result);
block|}
block|}
DECL|method|testToParentBlockJoinQuery
specifier|public
name|void
name|testToParentBlockJoinQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|BitSetProducer
name|parentFilter
init|=
operator|new
name|QueryBitSetProducer
argument_list|(
operator|new
name|QueryWrapperFilter
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|FIELD_NAME
argument_list|,
literal|"parent"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|query
operator|=
operator|new
name|ToParentBlockJoinQuery
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|FIELD_NAME
argument_list|,
literal|"child"
argument_list|)
argument_list|)
argument_list|,
name|parentFilter
argument_list|,
name|ScoreMode
operator|.
name|None
argument_list|)
expr_stmt|;
name|searcher
operator|=
name|newSearcher
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|hits
operator|=
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|int
name|maxNumFragmentsRequired
init|=
literal|2
decl_stmt|;
name|QueryScorer
name|scorer
init|=
operator|new
name|QueryScorer
argument_list|(
name|query
argument_list|,
name|FIELD_NAME
argument_list|)
decl_stmt|;
name|Highlighter
name|highlighter
init|=
operator|new
name|Highlighter
argument_list|(
name|this
argument_list|,
name|scorer
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|hits
operator|.
name|totalHits
condition|;
name|i
operator|++
control|)
block|{
name|String
name|text
init|=
literal|"child document"
decl_stmt|;
name|TokenStream
name|tokenStream
init|=
name|analyzer
operator|.
name|tokenStream
argument_list|(
name|FIELD_NAME
argument_list|,
name|text
argument_list|)
decl_stmt|;
name|highlighter
operator|.
name|setTextFragmenter
argument_list|(
operator|new
name|SimpleFragmenter
argument_list|(
literal|40
argument_list|)
argument_list|)
expr_stmt|;
name|highlighter
operator|.
name|getBestFragments
argument_list|(
name|tokenStream
argument_list|,
name|text
argument_list|,
name|maxNumFragmentsRequired
argument_list|,
literal|"..."
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"Failed to find correct number of highlights "
operator|+
name|numHighlights
operator|+
literal|" found"
argument_list|,
name|numHighlights
operator|==
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|method|testToChildBlockJoinQuery
specifier|public
name|void
name|testToChildBlockJoinQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|BitSetProducer
name|parentFilter
init|=
operator|new
name|QueryBitSetProducer
argument_list|(
operator|new
name|QueryWrapperFilter
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|FIELD_NAME
argument_list|,
literal|"parent"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|BooleanQuery
operator|.
name|Builder
name|booleanQuery
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|booleanQuery
operator|.
name|add
argument_list|(
operator|new
name|ToChildBlockJoinQuery
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|FIELD_NAME
argument_list|,
literal|"parent"
argument_list|)
argument_list|)
argument_list|,
name|parentFilter
argument_list|)
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|booleanQuery
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|FIELD_NAME
argument_list|,
literal|"child"
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|query
operator|=
name|booleanQuery
operator|.
name|build
argument_list|()
expr_stmt|;
name|searcher
operator|=
name|newSearcher
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|hits
operator|=
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|int
name|maxNumFragmentsRequired
init|=
literal|2
decl_stmt|;
name|QueryScorer
name|scorer
init|=
operator|new
name|QueryScorer
argument_list|(
name|query
argument_list|,
name|FIELD_NAME
argument_list|)
decl_stmt|;
name|Highlighter
name|highlighter
init|=
operator|new
name|Highlighter
argument_list|(
name|this
argument_list|,
name|scorer
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|hits
operator|.
name|totalHits
condition|;
name|i
operator|++
control|)
block|{
name|String
name|text
init|=
literal|"parent document"
decl_stmt|;
specifier|final
name|int
name|docId
init|=
name|hits
operator|.
name|scoreDocs
index|[
name|i
index|]
operator|.
name|doc
decl_stmt|;
name|TokenStream
name|tokenStream
init|=
name|getAnyTokenStream
argument_list|(
name|FIELD_NAME
argument_list|,
name|docId
argument_list|)
decl_stmt|;
name|highlighter
operator|.
name|setTextFragmenter
argument_list|(
operator|new
name|SimpleFragmenter
argument_list|(
literal|40
argument_list|)
argument_list|)
expr_stmt|;
name|highlighter
operator|.
name|getBestFragments
argument_list|(
name|tokenStream
argument_list|,
name|text
argument_list|,
name|maxNumFragmentsRequired
argument_list|,
literal|"..."
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"Failed to find correct number of highlights "
operator|+
name|numHighlights
operator|+
literal|" found"
argument_list|,
name|numHighlights
operator|==
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|method|testSimpleQueryScorerPhraseHighlighting2
specifier|public
name|void
name|testSimpleQueryScorerPhraseHighlighting2
parameter_list|()
throws|throws
name|Exception
block|{
name|PhraseQuery
name|phraseQuery
init|=
operator|new
name|PhraseQuery
argument_list|(
literal|5
argument_list|,
name|FIELD_NAME
argument_list|,
literal|"text"
argument_list|,
literal|"piece"
argument_list|,
literal|"long"
argument_list|)
decl_stmt|;
name|doSearching
argument_list|(
name|phraseQuery
argument_list|)
expr_stmt|;
name|int
name|maxNumFragmentsRequired
init|=
literal|2
decl_stmt|;
name|QueryScorer
name|scorer
init|=
operator|new
name|QueryScorer
argument_list|(
name|query
argument_list|,
name|FIELD_NAME
argument_list|)
decl_stmt|;
name|Highlighter
name|highlighter
init|=
operator|new
name|Highlighter
argument_list|(
name|this
argument_list|,
name|scorer
argument_list|)
decl_stmt|;
name|highlighter
operator|.
name|setTextFragmenter
argument_list|(
operator|new
name|SimpleFragmenter
argument_list|(
literal|40
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|hits
operator|.
name|totalHits
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|int
name|docId
init|=
name|hits
operator|.
name|scoreDocs
index|[
name|i
index|]
operator|.
name|doc
decl_stmt|;
specifier|final
name|StoredDocument
name|doc
init|=
name|searcher
operator|.
name|doc
argument_list|(
name|docId
argument_list|)
decl_stmt|;
name|String
name|text
init|=
name|doc
operator|.
name|get
argument_list|(
name|FIELD_NAME
argument_list|)
decl_stmt|;
name|TokenStream
name|tokenStream
init|=
name|getAnyTokenStream
argument_list|(
name|FIELD_NAME
argument_list|,
name|docId
argument_list|)
decl_stmt|;
name|String
name|result
init|=
name|highlighter
operator|.
name|getBestFragments
argument_list|(
name|tokenStream
argument_list|,
name|text
argument_list|,
name|maxNumFragmentsRequired
argument_list|,
literal|"..."
argument_list|)
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\t"
operator|+
name|result
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"Failed to find correct number of highlights "
operator|+
name|numHighlights
operator|+
literal|" found"
argument_list|,
name|numHighlights
operator|==
literal|6
argument_list|)
expr_stmt|;
block|}
DECL|method|testSimpleQueryScorerPhraseHighlighting3
specifier|public
name|void
name|testSimpleQueryScorerPhraseHighlighting3
parameter_list|()
throws|throws
name|Exception
block|{
name|PhraseQuery
name|phraseQuery
init|=
operator|new
name|PhraseQuery
argument_list|(
name|FIELD_NAME
argument_list|,
literal|"x"
argument_list|,
literal|"y"
argument_list|,
literal|"z"
argument_list|)
decl_stmt|;
name|doSearching
argument_list|(
name|phraseQuery
argument_list|)
expr_stmt|;
name|int
name|maxNumFragmentsRequired
init|=
literal|2
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|hits
operator|.
name|totalHits
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|int
name|docId
init|=
name|hits
operator|.
name|scoreDocs
index|[
name|i
index|]
operator|.
name|doc
decl_stmt|;
specifier|final
name|StoredDocument
name|doc
init|=
name|searcher
operator|.
name|doc
argument_list|(
name|docId
argument_list|)
decl_stmt|;
name|String
name|text
init|=
name|doc
operator|.
name|get
argument_list|(
name|FIELD_NAME
argument_list|)
decl_stmt|;
name|TokenStream
name|tokenStream
init|=
name|getAnyTokenStream
argument_list|(
name|FIELD_NAME
argument_list|,
name|docId
argument_list|)
decl_stmt|;
name|QueryScorer
name|scorer
init|=
operator|new
name|QueryScorer
argument_list|(
name|query
argument_list|,
name|FIELD_NAME
argument_list|)
decl_stmt|;
name|Highlighter
name|highlighter
init|=
operator|new
name|Highlighter
argument_list|(
name|this
argument_list|,
name|scorer
argument_list|)
decl_stmt|;
name|highlighter
operator|.
name|setTextFragmenter
argument_list|(
operator|new
name|SimpleFragmenter
argument_list|(
literal|40
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|result
init|=
name|highlighter
operator|.
name|getBestFragments
argument_list|(
name|tokenStream
argument_list|,
name|text
argument_list|,
name|maxNumFragmentsRequired
argument_list|,
literal|"..."
argument_list|)
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\t"
operator|+
name|result
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Failed to find correct number of highlights "
operator|+
name|numHighlights
operator|+
literal|" found"
argument_list|,
name|numHighlights
operator|==
literal|3
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testSimpleSpanFragmenter
specifier|public
name|void
name|testSimpleSpanFragmenter
parameter_list|()
throws|throws
name|Exception
block|{
name|Builder
name|builder
init|=
operator|new
name|PhraseQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
name|FIELD_NAME
argument_list|,
literal|"piece"
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
name|FIELD_NAME
argument_list|,
literal|"text"
argument_list|)
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
name|FIELD_NAME
argument_list|,
literal|"very"
argument_list|)
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
name|FIELD_NAME
argument_list|,
literal|"long"
argument_list|)
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|PhraseQuery
name|phraseQuery
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|doSearching
argument_list|(
name|phraseQuery
argument_list|)
expr_stmt|;
name|int
name|maxNumFragmentsRequired
init|=
literal|2
decl_stmt|;
name|QueryScorer
name|scorer
init|=
operator|new
name|QueryScorer
argument_list|(
name|query
argument_list|,
name|FIELD_NAME
argument_list|)
decl_stmt|;
name|Highlighter
name|highlighter
init|=
operator|new
name|Highlighter
argument_list|(
name|this
argument_list|,
name|scorer
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|hits
operator|.
name|totalHits
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|int
name|docId
init|=
name|hits
operator|.
name|scoreDocs
index|[
name|i
index|]
operator|.
name|doc
decl_stmt|;
specifier|final
name|StoredDocument
name|doc
init|=
name|searcher
operator|.
name|doc
argument_list|(
name|docId
argument_list|)
decl_stmt|;
name|String
name|text
init|=
name|doc
operator|.
name|get
argument_list|(
name|FIELD_NAME
argument_list|)
decl_stmt|;
name|TokenStream
name|tokenStream
init|=
name|getAnyTokenStream
argument_list|(
name|FIELD_NAME
argument_list|,
name|docId
argument_list|)
decl_stmt|;
name|highlighter
operator|.
name|setTextFragmenter
argument_list|(
operator|new
name|SimpleSpanFragmenter
argument_list|(
name|scorer
argument_list|,
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|result
init|=
name|highlighter
operator|.
name|getBestFragments
argument_list|(
name|tokenStream
argument_list|,
name|text
argument_list|,
name|maxNumFragmentsRequired
argument_list|,
literal|"..."
argument_list|)
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\t"
operator|+
name|result
argument_list|)
expr_stmt|;
block|}
name|phraseQuery
operator|=
operator|new
name|PhraseQuery
argument_list|(
name|FIELD_NAME
argument_list|,
literal|"been"
argument_list|,
literal|"shot"
argument_list|)
expr_stmt|;
name|doSearching
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|maxNumFragmentsRequired
operator|=
literal|2
expr_stmt|;
name|scorer
operator|=
operator|new
name|QueryScorer
argument_list|(
name|query
argument_list|,
name|FIELD_NAME
argument_list|)
expr_stmt|;
name|highlighter
operator|=
operator|new
name|Highlighter
argument_list|(
name|this
argument_list|,
name|scorer
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|hits
operator|.
name|totalHits
condition|;
name|i
operator|++
control|)
block|{
name|String
name|text
init|=
name|searcher
operator|.
name|doc
argument_list|(
name|hits
operator|.
name|scoreDocs
index|[
name|i
index|]
operator|.
name|doc
argument_list|)
operator|.
name|get
argument_list|(
name|FIELD_NAME
argument_list|)
decl_stmt|;
name|TokenStream
name|tokenStream
init|=
name|analyzer
operator|.
name|tokenStream
argument_list|(
name|FIELD_NAME
argument_list|,
name|text
argument_list|)
decl_stmt|;
name|highlighter
operator|.
name|setTextFragmenter
argument_list|(
operator|new
name|SimpleSpanFragmenter
argument_list|(
name|scorer
argument_list|,
literal|20
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|result
init|=
name|highlighter
operator|.
name|getBestFragments
argument_list|(
name|tokenStream
argument_list|,
name|text
argument_list|,
name|maxNumFragmentsRequired
argument_list|,
literal|"..."
argument_list|)
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\t"
operator|+
name|result
argument_list|)
expr_stmt|;
block|}
block|}
comment|// position sensitive query added after position insensitive query
DECL|method|testPosTermStdTerm
specifier|public
name|void
name|testPosTermStdTerm
parameter_list|()
throws|throws
name|Exception
block|{
name|BooleanQuery
operator|.
name|Builder
name|booleanQuery
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|booleanQuery
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|FIELD_NAME
argument_list|,
literal|"y"
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|PhraseQuery
name|phraseQuery
init|=
operator|new
name|PhraseQuery
argument_list|(
name|FIELD_NAME
argument_list|,
literal|"x"
argument_list|,
literal|"y"
argument_list|,
literal|"z"
argument_list|)
decl_stmt|;
name|booleanQuery
operator|.
name|add
argument_list|(
name|phraseQuery
argument_list|,
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|doSearching
argument_list|(
name|booleanQuery
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|maxNumFragmentsRequired
init|=
literal|2
decl_stmt|;
name|QueryScorer
name|scorer
init|=
operator|new
name|QueryScorer
argument_list|(
name|query
argument_list|,
name|FIELD_NAME
argument_list|)
decl_stmt|;
name|Highlighter
name|highlighter
init|=
operator|new
name|Highlighter
argument_list|(
name|this
argument_list|,
name|scorer
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|hits
operator|.
name|totalHits
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|int
name|docId
init|=
name|hits
operator|.
name|scoreDocs
index|[
name|i
index|]
operator|.
name|doc
decl_stmt|;
specifier|final
name|StoredDocument
name|doc
init|=
name|searcher
operator|.
name|doc
argument_list|(
name|docId
argument_list|)
decl_stmt|;
name|String
name|text
init|=
name|doc
operator|.
name|get
argument_list|(
name|FIELD_NAME
argument_list|)
decl_stmt|;
name|TokenStream
name|tokenStream
init|=
name|getAnyTokenStream
argument_list|(
name|FIELD_NAME
argument_list|,
name|docId
argument_list|)
decl_stmt|;
name|highlighter
operator|.
name|setTextFragmenter
argument_list|(
operator|new
name|SimpleFragmenter
argument_list|(
literal|40
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|result
init|=
name|highlighter
operator|.
name|getBestFragments
argument_list|(
name|tokenStream
argument_list|,
name|text
argument_list|,
name|maxNumFragmentsRequired
argument_list|,
literal|"..."
argument_list|)
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\t"
operator|+
name|result
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Failed to find correct number of highlights "
operator|+
name|numHighlights
operator|+
literal|" found"
argument_list|,
name|numHighlights
operator|==
literal|4
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testQueryScorerMultiPhraseQueryHighlighting
specifier|public
name|void
name|testQueryScorerMultiPhraseQueryHighlighting
parameter_list|()
throws|throws
name|Exception
block|{
name|MultiPhraseQuery
name|mpq
init|=
operator|new
name|MultiPhraseQuery
argument_list|()
decl_stmt|;
name|mpq
operator|.
name|add
argument_list|(
operator|new
name|Term
index|[]
block|{
operator|new
name|Term
argument_list|(
name|FIELD_NAME
argument_list|,
literal|"wordx"
argument_list|)
block|,
operator|new
name|Term
argument_list|(
name|FIELD_NAME
argument_list|,
literal|"wordb"
argument_list|)
block|}
argument_list|)
expr_stmt|;
name|mpq
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
name|FIELD_NAME
argument_list|,
literal|"wordy"
argument_list|)
argument_list|)
expr_stmt|;
name|doSearching
argument_list|(
name|mpq
argument_list|)
expr_stmt|;
specifier|final
name|int
name|maxNumFragmentsRequired
init|=
literal|2
decl_stmt|;
name|assertExpectedHighlightCount
argument_list|(
name|maxNumFragmentsRequired
argument_list|,
literal|6
argument_list|)
expr_stmt|;
block|}
DECL|method|testQueryScorerMultiPhraseQueryHighlightingWithGap
specifier|public
name|void
name|testQueryScorerMultiPhraseQueryHighlightingWithGap
parameter_list|()
throws|throws
name|Exception
block|{
name|MultiPhraseQuery
name|mpq
init|=
operator|new
name|MultiPhraseQuery
argument_list|()
decl_stmt|;
comment|/*      * The toString of MultiPhraseQuery doesn't work so well with these      * out-of-order additions, but the Query itself seems to match accurately.      */
name|mpq
operator|.
name|add
argument_list|(
operator|new
name|Term
index|[]
block|{
operator|new
name|Term
argument_list|(
name|FIELD_NAME
argument_list|,
literal|"wordz"
argument_list|)
block|}
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|mpq
operator|.
name|add
argument_list|(
operator|new
name|Term
index|[]
block|{
operator|new
name|Term
argument_list|(
name|FIELD_NAME
argument_list|,
literal|"wordx"
argument_list|)
block|}
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|doSearching
argument_list|(
name|mpq
argument_list|)
expr_stmt|;
specifier|final
name|int
name|maxNumFragmentsRequired
init|=
literal|1
decl_stmt|;
specifier|final
name|int
name|expectedHighlights
init|=
literal|2
decl_stmt|;
name|assertExpectedHighlightCount
argument_list|(
name|maxNumFragmentsRequired
argument_list|,
name|expectedHighlights
argument_list|)
expr_stmt|;
block|}
DECL|method|testNearSpanSimpleQuery
specifier|public
name|void
name|testNearSpanSimpleQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|doSearching
argument_list|(
operator|new
name|SpanNearQuery
argument_list|(
operator|new
name|SpanQuery
index|[]
block|{
operator|new
name|SpanTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|FIELD_NAME
argument_list|,
literal|"beginning"
argument_list|)
argument_list|)
block|,
operator|new
name|SpanTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|FIELD_NAME
argument_list|,
literal|"kennedy"
argument_list|)
argument_list|)
block|}
argument_list|,
literal|3
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|TestHighlightRunner
name|helper
init|=
operator|new
name|TestHighlightRunner
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|mode
operator|=
name|QUERY
expr_stmt|;
name|doStandardHighlights
argument_list|(
name|analyzer
argument_list|,
name|searcher
argument_list|,
name|hits
argument_list|,
name|query
argument_list|,
name|HighlighterTest
operator|.
name|this
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|helper
operator|.
name|run
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Failed to find correct number of highlights "
operator|+
name|numHighlights
operator|+
literal|" found"
argument_list|,
name|numHighlights
operator|==
literal|2
argument_list|)
expr_stmt|;
block|}
DECL|method|testSimpleQueryTermScorerHighlighter
specifier|public
name|void
name|testSimpleQueryTermScorerHighlighter
parameter_list|()
throws|throws
name|Exception
block|{
name|doSearching
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|FIELD_NAME
argument_list|,
literal|"kennedy"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Highlighter
name|highlighter
init|=
operator|new
name|Highlighter
argument_list|(
operator|new
name|QueryTermScorer
argument_list|(
name|query
argument_list|)
argument_list|)
decl_stmt|;
name|highlighter
operator|.
name|setTextFragmenter
argument_list|(
operator|new
name|SimpleFragmenter
argument_list|(
literal|40
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|maxNumFragmentsRequired
init|=
literal|2
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|hits
operator|.
name|totalHits
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|int
name|docId
init|=
name|hits
operator|.
name|scoreDocs
index|[
name|i
index|]
operator|.
name|doc
decl_stmt|;
specifier|final
name|StoredDocument
name|doc
init|=
name|searcher
operator|.
name|doc
argument_list|(
name|docId
argument_list|)
decl_stmt|;
name|String
name|text
init|=
name|doc
operator|.
name|get
argument_list|(
name|FIELD_NAME
argument_list|)
decl_stmt|;
name|TokenStream
name|tokenStream
init|=
name|getAnyTokenStream
argument_list|(
name|FIELD_NAME
argument_list|,
name|docId
argument_list|)
decl_stmt|;
name|String
name|result
init|=
name|highlighter
operator|.
name|getBestFragments
argument_list|(
name|tokenStream
argument_list|,
name|text
argument_list|,
name|maxNumFragmentsRequired
argument_list|,
literal|"..."
argument_list|)
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\t"
operator|+
name|result
argument_list|)
expr_stmt|;
block|}
comment|// Not sure we can assert anything here - just running to check we dont
comment|// throw any exceptions
block|}
DECL|method|testSpanHighlighting
specifier|public
name|void
name|testSpanHighlighting
parameter_list|()
throws|throws
name|Exception
block|{
name|Query
name|query1
init|=
operator|new
name|SpanNearQuery
argument_list|(
operator|new
name|SpanQuery
index|[]
block|{
operator|new
name|SpanTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|FIELD_NAME
argument_list|,
literal|"wordx"
argument_list|)
argument_list|)
block|,
operator|new
name|SpanTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|FIELD_NAME
argument_list|,
literal|"wordy"
argument_list|)
argument_list|)
block|}
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Query
name|query2
init|=
operator|new
name|SpanNearQuery
argument_list|(
operator|new
name|SpanQuery
index|[]
block|{
operator|new
name|SpanTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|FIELD_NAME
argument_list|,
literal|"wordy"
argument_list|)
argument_list|)
block|,
operator|new
name|SpanTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|FIELD_NAME
argument_list|,
literal|"wordc"
argument_list|)
argument_list|)
block|}
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|BooleanQuery
operator|.
name|Builder
name|bquery
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|bquery
operator|.
name|add
argument_list|(
name|query1
argument_list|,
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|bquery
operator|.
name|add
argument_list|(
name|query2
argument_list|,
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|doSearching
argument_list|(
name|bquery
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|TestHighlightRunner
name|helper
init|=
operator|new
name|TestHighlightRunner
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|mode
operator|=
name|QUERY
expr_stmt|;
name|doStandardHighlights
argument_list|(
name|analyzer
argument_list|,
name|searcher
argument_list|,
name|hits
argument_list|,
name|query
argument_list|,
name|HighlighterTest
operator|.
name|this
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|helper
operator|.
name|run
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Failed to find correct number of highlights "
operator|+
name|numHighlights
operator|+
literal|" found"
argument_list|,
name|numHighlights
operator|==
literal|7
argument_list|)
expr_stmt|;
block|}
DECL|method|testNotSpanSimpleQuery
specifier|public
name|void
name|testNotSpanSimpleQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|doSearching
argument_list|(
operator|new
name|SpanNotQuery
argument_list|(
operator|new
name|SpanNearQuery
argument_list|(
operator|new
name|SpanQuery
index|[]
block|{
operator|new
name|SpanTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|FIELD_NAME
argument_list|,
literal|"shot"
argument_list|)
argument_list|)
block|,
operator|new
name|SpanTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|FIELD_NAME
argument_list|,
literal|"kennedy"
argument_list|)
argument_list|)
block|}
argument_list|,
literal|3
argument_list|,
literal|false
argument_list|)
argument_list|,
operator|new
name|SpanTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|FIELD_NAME
argument_list|,
literal|"john"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|TestHighlightRunner
name|helper
init|=
operator|new
name|TestHighlightRunner
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|mode
operator|=
name|QUERY
expr_stmt|;
name|doStandardHighlights
argument_list|(
name|analyzer
argument_list|,
name|searcher
argument_list|,
name|hits
argument_list|,
name|query
argument_list|,
name|HighlighterTest
operator|.
name|this
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|helper
operator|.
name|run
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Failed to find correct number of highlights "
operator|+
name|numHighlights
operator|+
literal|" found"
argument_list|,
name|numHighlights
operator|==
literal|4
argument_list|)
expr_stmt|;
block|}
DECL|method|testGetBestFragmentsSimpleQuery
specifier|public
name|void
name|testGetBestFragmentsSimpleQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|TestHighlightRunner
name|helper
init|=
operator|new
name|TestHighlightRunner
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|numHighlights
operator|=
literal|0
expr_stmt|;
name|doSearching
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|FIELD_NAME
argument_list|,
literal|"kennedy"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|doStandardHighlights
argument_list|(
name|analyzer
argument_list|,
name|searcher
argument_list|,
name|hits
argument_list|,
name|query
argument_list|,
name|HighlighterTest
operator|.
name|this
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Failed to find correct number of highlights "
operator|+
name|numHighlights
operator|+
literal|" found"
argument_list|,
name|numHighlights
operator|==
literal|4
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|helper
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
DECL|method|testGetBestFragmentsConstantScore
specifier|public
name|void
name|testGetBestFragmentsConstantScore
parameter_list|()
throws|throws
name|Exception
block|{
name|TestHighlightRunner
name|helper
init|=
operator|new
name|TestHighlightRunner
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|numHighlights
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|BooleanQuery
operator|.
name|Builder
name|bq
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|bq
operator|.
name|add
argument_list|(
operator|new
name|ConstantScoreQuery
argument_list|(
operator|new
name|QueryWrapperFilter
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|FIELD_NAME
argument_list|,
literal|"kennedy"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
operator|new
name|ConstantScoreQuery
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|FIELD_NAME
argument_list|,
literal|"kennedy"
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|doSearching
argument_list|(
name|bq
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|doSearching
argument_list|(
operator|new
name|ConstantScoreQuery
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|FIELD_NAME
argument_list|,
literal|"kennedy"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|doStandardHighlights
argument_list|(
name|analyzer
argument_list|,
name|searcher
argument_list|,
name|hits
argument_list|,
name|query
argument_list|,
name|HighlighterTest
operator|.
name|this
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Failed to find correct number of highlights "
operator|+
name|numHighlights
operator|+
literal|" found"
argument_list|,
name|numHighlights
operator|==
literal|4
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|helper
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
DECL|method|testGetFuzzyFragments
specifier|public
name|void
name|testGetFuzzyFragments
parameter_list|()
throws|throws
name|Exception
block|{
name|TestHighlightRunner
name|helper
init|=
operator|new
name|TestHighlightRunner
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|numHighlights
operator|=
literal|0
expr_stmt|;
name|FuzzyQuery
name|fuzzyQuery
init|=
operator|new
name|FuzzyQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|FIELD_NAME
argument_list|,
literal|"kinnedy"
argument_list|)
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|fuzzyQuery
operator|.
name|setRewriteMethod
argument_list|(
name|MultiTermQuery
operator|.
name|SCORING_BOOLEAN_REWRITE
argument_list|)
expr_stmt|;
name|doSearching
argument_list|(
name|fuzzyQuery
argument_list|)
expr_stmt|;
name|doStandardHighlights
argument_list|(
name|analyzer
argument_list|,
name|searcher
argument_list|,
name|hits
argument_list|,
name|query
argument_list|,
name|HighlighterTest
operator|.
name|this
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Failed to find correct number of highlights "
operator|+
name|numHighlights
operator|+
literal|" found"
argument_list|,
name|numHighlights
operator|==
literal|4
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|helper
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
DECL|method|testGetWildCardFragments
specifier|public
name|void
name|testGetWildCardFragments
parameter_list|()
throws|throws
name|Exception
block|{
name|TestHighlightRunner
name|helper
init|=
operator|new
name|TestHighlightRunner
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|numHighlights
operator|=
literal|0
expr_stmt|;
name|WildcardQuery
name|wildcardQuery
init|=
operator|new
name|WildcardQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|FIELD_NAME
argument_list|,
literal|"k?nnedy"
argument_list|)
argument_list|)
decl_stmt|;
name|wildcardQuery
operator|.
name|setRewriteMethod
argument_list|(
name|MultiTermQuery
operator|.
name|SCORING_BOOLEAN_REWRITE
argument_list|)
expr_stmt|;
name|doSearching
argument_list|(
name|wildcardQuery
argument_list|)
expr_stmt|;
name|doStandardHighlights
argument_list|(
name|analyzer
argument_list|,
name|searcher
argument_list|,
name|hits
argument_list|,
name|query
argument_list|,
name|HighlighterTest
operator|.
name|this
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Failed to find correct number of highlights "
operator|+
name|numHighlights
operator|+
literal|" found"
argument_list|,
name|numHighlights
operator|==
literal|4
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|helper
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
DECL|method|testGetMidWildCardFragments
specifier|public
name|void
name|testGetMidWildCardFragments
parameter_list|()
throws|throws
name|Exception
block|{
name|TestHighlightRunner
name|helper
init|=
operator|new
name|TestHighlightRunner
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|numHighlights
operator|=
literal|0
expr_stmt|;
name|WildcardQuery
name|wildcardQuery
init|=
operator|new
name|WildcardQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|FIELD_NAME
argument_list|,
literal|"k*dy"
argument_list|)
argument_list|)
decl_stmt|;
name|wildcardQuery
operator|.
name|setRewriteMethod
argument_list|(
name|MultiTermQuery
operator|.
name|SCORING_BOOLEAN_REWRITE
argument_list|)
expr_stmt|;
name|doSearching
argument_list|(
name|wildcardQuery
argument_list|)
expr_stmt|;
name|doStandardHighlights
argument_list|(
name|analyzer
argument_list|,
name|searcher
argument_list|,
name|hits
argument_list|,
name|query
argument_list|,
name|HighlighterTest
operator|.
name|this
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Failed to find correct number of highlights "
operator|+
name|numHighlights
operator|+
literal|" found"
argument_list|,
name|numHighlights
operator|==
literal|5
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|helper
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
DECL|method|testGetRangeFragments
specifier|public
name|void
name|testGetRangeFragments
parameter_list|()
throws|throws
name|Exception
block|{
name|TestHighlightRunner
name|helper
init|=
operator|new
name|TestHighlightRunner
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|numHighlights
operator|=
literal|0
expr_stmt|;
comment|// Need to explicitly set the QueryParser property to use TermRangeQuery
comment|// rather
comment|// than RangeFilters
name|TermRangeQuery
name|rangeQuery
init|=
operator|new
name|TermRangeQuery
argument_list|(
name|FIELD_NAME
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"kannedy"
argument_list|)
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"kznnedy"
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|rangeQuery
operator|.
name|setRewriteMethod
argument_list|(
name|MultiTermQuery
operator|.
name|SCORING_BOOLEAN_REWRITE
argument_list|)
expr_stmt|;
name|query
operator|=
name|rangeQuery
expr_stmt|;
name|doSearching
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|doStandardHighlights
argument_list|(
name|analyzer
argument_list|,
name|searcher
argument_list|,
name|hits
argument_list|,
name|query
argument_list|,
name|HighlighterTest
operator|.
name|this
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Failed to find correct number of highlights "
operator|+
name|numHighlights
operator|+
literal|" found"
argument_list|,
name|numHighlights
operator|==
literal|5
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|helper
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
DECL|method|testConstantScoreMultiTermQuery
specifier|public
name|void
name|testConstantScoreMultiTermQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|numHighlights
operator|=
literal|0
expr_stmt|;
name|query
operator|=
operator|new
name|WildcardQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|FIELD_NAME
argument_list|,
literal|"ken*"
argument_list|)
argument_list|)
expr_stmt|;
operator|(
operator|(
name|WildcardQuery
operator|)
name|query
operator|)
operator|.
name|setRewriteMethod
argument_list|(
name|MultiTermQuery
operator|.
name|CONSTANT_SCORE_REWRITE
argument_list|)
expr_stmt|;
name|searcher
operator|=
name|newSearcher
argument_list|(
name|reader
argument_list|)
expr_stmt|;
comment|// can't rewrite ConstantScore if you want to highlight it -
comment|// it rewrites to ConstantScoreQuery which cannot be highlighted
comment|// query = unReWrittenQuery.rewrite(reader);
if|if
condition|(
name|VERBOSE
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Searching for: "
operator|+
name|query
operator|.
name|toString
argument_list|(
name|FIELD_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|hits
operator|=
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|hits
operator|.
name|totalHits
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|int
name|docId
init|=
name|hits
operator|.
name|scoreDocs
index|[
name|i
index|]
operator|.
name|doc
decl_stmt|;
specifier|final
name|StoredDocument
name|doc
init|=
name|searcher
operator|.
name|doc
argument_list|(
name|docId
argument_list|)
decl_stmt|;
name|String
name|text
init|=
name|doc
operator|.
name|get
argument_list|(
name|FIELD_NAME
argument_list|)
decl_stmt|;
name|TokenStream
name|tokenStream
init|=
name|getAnyTokenStream
argument_list|(
name|FIELD_NAME
argument_list|,
name|docId
argument_list|)
decl_stmt|;
name|int
name|maxNumFragmentsRequired
init|=
literal|2
decl_stmt|;
name|String
name|fragmentSeparator
init|=
literal|"..."
decl_stmt|;
name|QueryScorer
name|scorer
init|=
operator|new
name|QueryScorer
argument_list|(
name|query
argument_list|,
name|HighlighterTest
operator|.
name|FIELD_NAME
argument_list|)
decl_stmt|;
name|Highlighter
name|highlighter
init|=
operator|new
name|Highlighter
argument_list|(
name|this
argument_list|,
name|scorer
argument_list|)
decl_stmt|;
name|highlighter
operator|.
name|setTextFragmenter
argument_list|(
operator|new
name|SimpleFragmenter
argument_list|(
literal|20
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|result
init|=
name|highlighter
operator|.
name|getBestFragments
argument_list|(
name|tokenStream
argument_list|,
name|text
argument_list|,
name|maxNumFragmentsRequired
argument_list|,
name|fragmentSeparator
argument_list|)
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\t"
operator|+
name|result
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"Failed to find correct number of highlights "
operator|+
name|numHighlights
operator|+
literal|" found"
argument_list|,
name|numHighlights
operator|==
literal|5
argument_list|)
expr_stmt|;
comment|// try null field
name|hits
operator|=
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|numHighlights
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|hits
operator|.
name|totalHits
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|int
name|docId
init|=
name|hits
operator|.
name|scoreDocs
index|[
name|i
index|]
operator|.
name|doc
decl_stmt|;
specifier|final
name|StoredDocument
name|doc
init|=
name|searcher
operator|.
name|doc
argument_list|(
name|docId
argument_list|)
decl_stmt|;
name|String
name|text
init|=
name|doc
operator|.
name|get
argument_list|(
name|FIELD_NAME
argument_list|)
decl_stmt|;
name|TokenStream
name|tokenStream
init|=
name|getAnyTokenStream
argument_list|(
name|FIELD_NAME
argument_list|,
name|docId
argument_list|)
decl_stmt|;
name|int
name|maxNumFragmentsRequired
init|=
literal|2
decl_stmt|;
name|String
name|fragmentSeparator
init|=
literal|"..."
decl_stmt|;
name|QueryScorer
name|scorer
init|=
operator|new
name|QueryScorer
argument_list|(
name|query
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Highlighter
name|highlighter
init|=
operator|new
name|Highlighter
argument_list|(
name|this
argument_list|,
name|scorer
argument_list|)
decl_stmt|;
name|highlighter
operator|.
name|setTextFragmenter
argument_list|(
operator|new
name|SimpleFragmenter
argument_list|(
literal|20
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|result
init|=
name|highlighter
operator|.
name|getBestFragments
argument_list|(
name|tokenStream
argument_list|,
name|text
argument_list|,
name|maxNumFragmentsRequired
argument_list|,
name|fragmentSeparator
argument_list|)
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\t"
operator|+
name|result
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"Failed to find correct number of highlights "
operator|+
name|numHighlights
operator|+
literal|" found"
argument_list|,
name|numHighlights
operator|==
literal|5
argument_list|)
expr_stmt|;
comment|// try default field
name|hits
operator|=
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|numHighlights
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|hits
operator|.
name|totalHits
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|int
name|docId
init|=
name|hits
operator|.
name|scoreDocs
index|[
name|i
index|]
operator|.
name|doc
decl_stmt|;
specifier|final
name|StoredDocument
name|doc
init|=
name|searcher
operator|.
name|doc
argument_list|(
name|docId
argument_list|)
decl_stmt|;
name|String
name|text
init|=
name|doc
operator|.
name|get
argument_list|(
name|FIELD_NAME
argument_list|)
decl_stmt|;
name|TokenStream
name|tokenStream
init|=
name|getAnyTokenStream
argument_list|(
name|FIELD_NAME
argument_list|,
name|docId
argument_list|)
decl_stmt|;
name|int
name|maxNumFragmentsRequired
init|=
literal|2
decl_stmt|;
name|String
name|fragmentSeparator
init|=
literal|"..."
decl_stmt|;
name|QueryScorer
name|scorer
init|=
operator|new
name|QueryScorer
argument_list|(
name|query
argument_list|,
literal|"random_field"
argument_list|,
name|HighlighterTest
operator|.
name|FIELD_NAME
argument_list|)
decl_stmt|;
name|Highlighter
name|highlighter
init|=
operator|new
name|Highlighter
argument_list|(
name|this
argument_list|,
name|scorer
argument_list|)
decl_stmt|;
name|highlighter
operator|.
name|setTextFragmenter
argument_list|(
operator|new
name|SimpleFragmenter
argument_list|(
literal|20
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|result
init|=
name|highlighter
operator|.
name|getBestFragments
argument_list|(
name|tokenStream
argument_list|,
name|text
argument_list|,
name|maxNumFragmentsRequired
argument_list|,
name|fragmentSeparator
argument_list|)
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\t"
operator|+
name|result
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"Failed to find correct number of highlights "
operator|+
name|numHighlights
operator|+
literal|" found"
argument_list|,
name|numHighlights
operator|==
literal|5
argument_list|)
expr_stmt|;
block|}
DECL|method|testGetBestFragmentsPhrase
specifier|public
name|void
name|testGetBestFragmentsPhrase
parameter_list|()
throws|throws
name|Exception
block|{
name|TestHighlightRunner
name|helper
init|=
operator|new
name|TestHighlightRunner
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|numHighlights
operator|=
literal|0
expr_stmt|;
name|PhraseQuery
name|phraseQuery
init|=
operator|new
name|PhraseQuery
argument_list|(
name|FIELD_NAME
argument_list|,
literal|"john"
argument_list|,
literal|"kennedy"
argument_list|)
decl_stmt|;
name|doSearching
argument_list|(
name|phraseQuery
argument_list|)
expr_stmt|;
name|doStandardHighlights
argument_list|(
name|analyzer
argument_list|,
name|searcher
argument_list|,
name|hits
argument_list|,
name|query
argument_list|,
name|HighlighterTest
operator|.
name|this
argument_list|)
expr_stmt|;
comment|// Currently highlights "John" and "Kennedy" separately
name|assertTrue
argument_list|(
literal|"Failed to find correct number of highlights "
operator|+
name|numHighlights
operator|+
literal|" found"
argument_list|,
name|numHighlights
operator|==
literal|2
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|helper
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
DECL|method|testGetBestFragmentsQueryScorer
specifier|public
name|void
name|testGetBestFragmentsQueryScorer
parameter_list|()
throws|throws
name|Exception
block|{
name|TestHighlightRunner
name|helper
init|=
operator|new
name|TestHighlightRunner
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|numHighlights
operator|=
literal|0
expr_stmt|;
name|SpanQuery
name|clauses
index|[]
init|=
block|{
operator|new
name|SpanTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"contents"
argument_list|,
literal|"john"
argument_list|)
argument_list|)
block|,
operator|new
name|SpanTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"contents"
argument_list|,
literal|"kennedy"
argument_list|)
argument_list|)
block|, }
decl_stmt|;
name|SpanNearQuery
name|snq
init|=
operator|new
name|SpanNearQuery
argument_list|(
name|clauses
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|doSearching
argument_list|(
name|snq
argument_list|)
expr_stmt|;
name|doStandardHighlights
argument_list|(
name|analyzer
argument_list|,
name|searcher
argument_list|,
name|hits
argument_list|,
name|query
argument_list|,
name|HighlighterTest
operator|.
name|this
argument_list|)
expr_stmt|;
comment|// Currently highlights "John" and "Kennedy" separately
name|assertTrue
argument_list|(
literal|"Failed to find correct number of highlights "
operator|+
name|numHighlights
operator|+
literal|" found"
argument_list|,
name|numHighlights
operator|==
literal|2
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|helper
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
DECL|method|testOffByOne
specifier|public
name|void
name|testOffByOne
parameter_list|()
throws|throws
name|Exception
block|{
name|TestHighlightRunner
name|helper
init|=
operator|new
name|TestHighlightRunner
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|TermQuery
name|query
init|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"data"
argument_list|,
literal|"help"
argument_list|)
argument_list|)
decl_stmt|;
name|Highlighter
name|hg
init|=
operator|new
name|Highlighter
argument_list|(
operator|new
name|SimpleHTMLFormatter
argument_list|()
argument_list|,
operator|new
name|QueryTermScorer
argument_list|(
name|query
argument_list|)
argument_list|)
decl_stmt|;
name|hg
operator|.
name|setTextFragmenter
argument_list|(
operator|new
name|NullFragmenter
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|match
init|=
name|hg
operator|.
name|getBestFragment
argument_list|(
name|analyzer
argument_list|,
literal|"data"
argument_list|,
literal|"help me [54-65]"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"<B>help</B> me [54-65]"
argument_list|,
name|match
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|helper
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
DECL|method|testGetBestFragmentsFilteredQuery
specifier|public
name|void
name|testGetBestFragmentsFilteredQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|TestHighlightRunner
name|helper
init|=
operator|new
name|TestHighlightRunner
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|numHighlights
operator|=
literal|0
expr_stmt|;
name|SpanQuery
name|clauses
index|[]
init|=
block|{
operator|new
name|SpanTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"contents"
argument_list|,
literal|"john"
argument_list|)
argument_list|)
block|,
operator|new
name|SpanTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"contents"
argument_list|,
literal|"kennedy"
argument_list|)
argument_list|)
block|, }
decl_stmt|;
name|SpanNearQuery
name|snq
init|=
operator|new
name|SpanNearQuery
argument_list|(
name|clauses
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|BooleanQuery
operator|.
name|Builder
name|bq
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|snq
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|TermRangeQuery
operator|.
name|newStringRange
argument_list|(
literal|"contents"
argument_list|,
literal|"john"
argument_list|,
literal|"john"
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|,
name|Occur
operator|.
name|FILTER
argument_list|)
expr_stmt|;
name|doSearching
argument_list|(
name|bq
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|doStandardHighlights
argument_list|(
name|analyzer
argument_list|,
name|searcher
argument_list|,
name|hits
argument_list|,
name|query
argument_list|,
name|HighlighterTest
operator|.
name|this
argument_list|)
expr_stmt|;
comment|// Currently highlights "John" and "Kennedy" separately
name|assertTrue
argument_list|(
literal|"Failed to find correct number of highlights "
operator|+
name|numHighlights
operator|+
literal|" found"
argument_list|,
name|numHighlights
operator|==
literal|2
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|helper
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
DECL|method|testGetBestFragmentsFilteredPhraseQuery
specifier|public
name|void
name|testGetBestFragmentsFilteredPhraseQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|TestHighlightRunner
name|helper
init|=
operator|new
name|TestHighlightRunner
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|numHighlights
operator|=
literal|0
expr_stmt|;
name|PhraseQuery
name|pq
init|=
operator|new
name|PhraseQuery
argument_list|(
literal|"contents"
argument_list|,
literal|"john"
argument_list|,
literal|"kennedy"
argument_list|)
decl_stmt|;
name|BooleanQuery
operator|.
name|Builder
name|bq
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|pq
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|TermRangeQuery
operator|.
name|newStringRange
argument_list|(
literal|"contents"
argument_list|,
literal|"john"
argument_list|,
literal|"john"
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|,
name|Occur
operator|.
name|FILTER
argument_list|)
expr_stmt|;
name|doSearching
argument_list|(
name|bq
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|doStandardHighlights
argument_list|(
name|analyzer
argument_list|,
name|searcher
argument_list|,
name|hits
argument_list|,
name|query
argument_list|,
name|HighlighterTest
operator|.
name|this
argument_list|)
expr_stmt|;
comment|// Currently highlights "John" and "Kennedy" separately
name|assertTrue
argument_list|(
literal|"Failed to find correct number of highlights "
operator|+
name|numHighlights
operator|+
literal|" found"
argument_list|,
name|numHighlights
operator|==
literal|2
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|helper
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
DECL|method|testGetBestFragmentsMultiTerm
specifier|public
name|void
name|testGetBestFragmentsMultiTerm
parameter_list|()
throws|throws
name|Exception
block|{
name|TestHighlightRunner
name|helper
init|=
operator|new
name|TestHighlightRunner
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|numHighlights
operator|=
literal|0
expr_stmt|;
name|BooleanQuery
operator|.
name|Builder
name|booleanQuery
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|booleanQuery
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|FIELD_NAME
argument_list|,
literal|"john"
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|PrefixQuery
name|prefixQuery
init|=
operator|new
name|PrefixQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|FIELD_NAME
argument_list|,
literal|"kenn"
argument_list|)
argument_list|)
decl_stmt|;
name|prefixQuery
operator|.
name|setRewriteMethod
argument_list|(
name|MultiTermQuery
operator|.
name|SCORING_BOOLEAN_REWRITE
argument_list|)
expr_stmt|;
name|booleanQuery
operator|.
name|add
argument_list|(
name|prefixQuery
argument_list|,
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|doSearching
argument_list|(
name|booleanQuery
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|doStandardHighlights
argument_list|(
name|analyzer
argument_list|,
name|searcher
argument_list|,
name|hits
argument_list|,
name|query
argument_list|,
name|HighlighterTest
operator|.
name|this
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Failed to find correct number of highlights "
operator|+
name|numHighlights
operator|+
literal|" found"
argument_list|,
name|numHighlights
operator|==
literal|5
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|helper
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
DECL|method|testGetBestFragmentsWithOr
specifier|public
name|void
name|testGetBestFragmentsWithOr
parameter_list|()
throws|throws
name|Exception
block|{
name|TestHighlightRunner
name|helper
init|=
operator|new
name|TestHighlightRunner
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|numHighlights
operator|=
literal|0
expr_stmt|;
name|BooleanQuery
operator|.
name|Builder
name|query
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|query
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|FIELD_NAME
argument_list|,
literal|"jfk"
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|query
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|FIELD_NAME
argument_list|,
literal|"kennedy"
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|doSearching
argument_list|(
name|query
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|doStandardHighlights
argument_list|(
name|analyzer
argument_list|,
name|searcher
argument_list|,
name|hits
argument_list|,
name|query
operator|.
name|build
argument_list|()
argument_list|,
name|HighlighterTest
operator|.
name|this
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Failed to find correct number of highlights "
operator|+
name|numHighlights
operator|+
literal|" found"
argument_list|,
name|numHighlights
operator|==
literal|5
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|helper
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
DECL|method|testGetBestSingleFragment
specifier|public
name|void
name|testGetBestSingleFragment
parameter_list|()
throws|throws
name|Exception
block|{
name|TestHighlightRunner
name|helper
init|=
operator|new
name|TestHighlightRunner
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|doSearching
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|FIELD_NAME
argument_list|,
literal|"kennedy"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|numHighlights
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|hits
operator|.
name|totalHits
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|int
name|docId
init|=
name|hits
operator|.
name|scoreDocs
index|[
name|i
index|]
operator|.
name|doc
decl_stmt|;
specifier|final
name|StoredDocument
name|doc
init|=
name|searcher
operator|.
name|doc
argument_list|(
name|docId
argument_list|)
decl_stmt|;
name|String
name|text
init|=
name|doc
operator|.
name|get
argument_list|(
name|FIELD_NAME
argument_list|)
decl_stmt|;
name|TokenStream
name|tokenStream
init|=
name|getAnyTokenStream
argument_list|(
name|FIELD_NAME
argument_list|,
name|docId
argument_list|)
decl_stmt|;
name|Highlighter
name|highlighter
init|=
name|getHighlighter
argument_list|(
name|query
argument_list|,
name|FIELD_NAME
argument_list|,
name|HighlighterTest
operator|.
name|this
argument_list|)
decl_stmt|;
name|highlighter
operator|.
name|setTextFragmenter
argument_list|(
operator|new
name|SimpleFragmenter
argument_list|(
literal|40
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|result
init|=
name|highlighter
operator|.
name|getBestFragment
argument_list|(
name|tokenStream
argument_list|,
name|text
argument_list|)
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\t"
operator|+
name|result
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"Failed to find correct number of highlights "
operator|+
name|numHighlights
operator|+
literal|" found"
argument_list|,
name|numHighlights
operator|==
literal|4
argument_list|)
expr_stmt|;
name|numHighlights
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|hits
operator|.
name|totalHits
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|int
name|docId
init|=
name|hits
operator|.
name|scoreDocs
index|[
name|i
index|]
operator|.
name|doc
decl_stmt|;
specifier|final
name|StoredDocument
name|doc
init|=
name|searcher
operator|.
name|doc
argument_list|(
name|docId
argument_list|)
decl_stmt|;
name|String
name|text
init|=
name|doc
operator|.
name|get
argument_list|(
name|FIELD_NAME
argument_list|)
decl_stmt|;
name|TokenStream
name|tokenStream
init|=
name|getAnyTokenStream
argument_list|(
name|FIELD_NAME
argument_list|,
name|docId
argument_list|)
decl_stmt|;
name|Highlighter
name|highlighter
init|=
name|getHighlighter
argument_list|(
name|query
argument_list|,
name|FIELD_NAME
argument_list|,
name|HighlighterTest
operator|.
name|this
argument_list|)
decl_stmt|;
name|highlighter
operator|.
name|getBestFragment
argument_list|(
name|tokenStream
argument_list|,
name|text
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"Failed to find correct number of highlights "
operator|+
name|numHighlights
operator|+
literal|" found"
argument_list|,
name|numHighlights
operator|==
literal|4
argument_list|)
expr_stmt|;
name|numHighlights
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|hits
operator|.
name|totalHits
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|int
name|docId
init|=
name|hits
operator|.
name|scoreDocs
index|[
name|i
index|]
operator|.
name|doc
decl_stmt|;
specifier|final
name|StoredDocument
name|doc
init|=
name|searcher
operator|.
name|doc
argument_list|(
name|docId
argument_list|)
decl_stmt|;
name|String
name|text
init|=
name|doc
operator|.
name|get
argument_list|(
name|FIELD_NAME
argument_list|)
decl_stmt|;
name|TokenStream
name|tokenStream
init|=
name|getAnyTokenStream
argument_list|(
name|FIELD_NAME
argument_list|,
name|docId
argument_list|)
decl_stmt|;
name|Highlighter
name|highlighter
init|=
name|getHighlighter
argument_list|(
name|query
argument_list|,
name|FIELD_NAME
argument_list|,
name|HighlighterTest
operator|.
name|this
argument_list|)
decl_stmt|;
name|highlighter
operator|.
name|getBestFragments
argument_list|(
name|tokenStream
argument_list|,
name|text
argument_list|,
literal|10
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"Failed to find correct number of highlights "
operator|+
name|numHighlights
operator|+
literal|" found"
argument_list|,
name|numHighlights
operator|==
literal|4
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|helper
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
DECL|method|testGetBestSingleFragmentWithWeights
specifier|public
name|void
name|testGetBestSingleFragmentWithWeights
parameter_list|()
throws|throws
name|Exception
block|{
name|TestHighlightRunner
name|helper
init|=
operator|new
name|TestHighlightRunner
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|WeightedSpanTerm
index|[]
name|wTerms
init|=
operator|new
name|WeightedSpanTerm
index|[
literal|2
index|]
decl_stmt|;
name|wTerms
index|[
literal|0
index|]
operator|=
operator|new
name|WeightedSpanTerm
argument_list|(
literal|10f
argument_list|,
literal|"hello"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|PositionSpan
argument_list|>
name|positionSpans
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|positionSpans
operator|.
name|add
argument_list|(
operator|new
name|PositionSpan
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|wTerms
index|[
literal|0
index|]
operator|.
name|addPositionSpans
argument_list|(
name|positionSpans
argument_list|)
expr_stmt|;
name|wTerms
index|[
literal|1
index|]
operator|=
operator|new
name|WeightedSpanTerm
argument_list|(
literal|1f
argument_list|,
literal|"kennedy"
argument_list|)
expr_stmt|;
name|positionSpans
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|positionSpans
operator|.
name|add
argument_list|(
operator|new
name|PositionSpan
argument_list|(
literal|14
argument_list|,
literal|14
argument_list|)
argument_list|)
expr_stmt|;
name|wTerms
index|[
literal|1
index|]
operator|.
name|addPositionSpans
argument_list|(
name|positionSpans
argument_list|)
expr_stmt|;
name|Highlighter
name|highlighter
init|=
name|getHighlighter
argument_list|(
name|wTerms
argument_list|,
name|HighlighterTest
operator|.
name|this
argument_list|)
decl_stmt|;
comment|// new
comment|// Highlighter(new
comment|// QueryTermScorer(wTerms));
name|TokenStream
name|tokenStream
init|=
name|analyzer
operator|.
name|tokenStream
argument_list|(
name|FIELD_NAME
argument_list|,
name|texts
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|highlighter
operator|.
name|setTextFragmenter
argument_list|(
operator|new
name|SimpleFragmenter
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|result
init|=
name|highlighter
operator|.
name|getBestFragment
argument_list|(
name|tokenStream
argument_list|,
name|texts
index|[
literal|0
index|]
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Failed to find best section using weighted terms. Found: ["
operator|+
name|result
operator|+
literal|"]"
argument_list|,
literal|"<B>Hello</B>"
operator|.
name|equals
argument_list|(
name|result
argument_list|)
argument_list|)
expr_stmt|;
comment|// readjust weights
name|wTerms
index|[
literal|1
index|]
operator|.
name|setWeight
argument_list|(
literal|50f
argument_list|)
expr_stmt|;
name|tokenStream
operator|=
name|analyzer
operator|.
name|tokenStream
argument_list|(
name|FIELD_NAME
argument_list|,
name|texts
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|highlighter
operator|=
name|getHighlighter
argument_list|(
name|wTerms
argument_list|,
name|HighlighterTest
operator|.
name|this
argument_list|)
expr_stmt|;
name|highlighter
operator|.
name|setTextFragmenter
argument_list|(
operator|new
name|SimpleFragmenter
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|=
name|highlighter
operator|.
name|getBestFragment
argument_list|(
name|tokenStream
argument_list|,
name|texts
index|[
literal|0
index|]
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Failed to find best section using weighted terms. Found: "
operator|+
name|result
argument_list|,
literal|"<B>kennedy</B>"
operator|.
name|equals
argument_list|(
name|result
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|helper
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
comment|// tests a "complex" analyzer that produces multiple
comment|// overlapping tokens
DECL|method|testOverlapAnalyzer
specifier|public
name|void
name|testOverlapAnalyzer
parameter_list|()
throws|throws
name|Exception
block|{
name|TestHighlightRunner
name|helper
init|=
operator|new
name|TestHighlightRunner
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|synonyms
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|synonyms
operator|.
name|put
argument_list|(
literal|"football"
argument_list|,
literal|"soccer,footie"
argument_list|)
expr_stmt|;
name|Analyzer
name|analyzer
init|=
operator|new
name|SynonymAnalyzer
argument_list|(
name|synonyms
argument_list|)
decl_stmt|;
name|String
name|s
init|=
literal|"football-soccer in the euro 2004 footie competition"
decl_stmt|;
name|BooleanQuery
operator|.
name|Builder
name|query
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|query
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"bookid"
argument_list|,
literal|"football"
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|query
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"bookid"
argument_list|,
literal|"soccer"
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|query
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"bookid"
argument_list|,
literal|"footie"
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|Highlighter
name|highlighter
init|=
name|getHighlighter
argument_list|(
name|query
operator|.
name|build
argument_list|()
argument_list|,
literal|null
argument_list|,
name|HighlighterTest
operator|.
name|this
argument_list|)
decl_stmt|;
comment|// Get 3 best fragments and separate with a "..."
name|TokenStream
name|tokenStream
init|=
name|analyzer
operator|.
name|tokenStream
argument_list|(
literal|null
argument_list|,
name|s
argument_list|)
decl_stmt|;
name|String
name|result
init|=
name|highlighter
operator|.
name|getBestFragments
argument_list|(
name|tokenStream
argument_list|,
name|s
argument_list|,
literal|3
argument_list|,
literal|"..."
argument_list|)
decl_stmt|;
name|String
name|expectedResult
init|=
literal|"<B>football</B>-<B>soccer</B> in the euro 2004<B>footie</B> competition"
decl_stmt|;
name|assertTrue
argument_list|(
literal|"overlapping analyzer should handle highlights OK, expected:"
operator|+
name|expectedResult
operator|+
literal|" actual:"
operator|+
name|result
argument_list|,
name|expectedResult
operator|.
name|equals
argument_list|(
name|result
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|helper
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
DECL|method|testGetSimpleHighlight
specifier|public
name|void
name|testGetSimpleHighlight
parameter_list|()
throws|throws
name|Exception
block|{
name|TestHighlightRunner
name|helper
init|=
operator|new
name|TestHighlightRunner
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|numHighlights
operator|=
literal|0
expr_stmt|;
name|doSearching
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|FIELD_NAME
argument_list|,
literal|"kennedy"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// new Highlighter(HighlighterTest.this, new QueryTermScorer(query));
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|hits
operator|.
name|totalHits
condition|;
name|i
operator|++
control|)
block|{
name|String
name|text
init|=
name|searcher
operator|.
name|doc
argument_list|(
name|hits
operator|.
name|scoreDocs
index|[
name|i
index|]
operator|.
name|doc
argument_list|)
operator|.
name|get
argument_list|(
name|FIELD_NAME
argument_list|)
decl_stmt|;
name|TokenStream
name|tokenStream
init|=
name|analyzer
operator|.
name|tokenStream
argument_list|(
name|FIELD_NAME
argument_list|,
name|text
argument_list|)
decl_stmt|;
name|Highlighter
name|highlighter
init|=
name|getHighlighter
argument_list|(
name|query
argument_list|,
name|FIELD_NAME
argument_list|,
name|HighlighterTest
operator|.
name|this
argument_list|)
decl_stmt|;
name|String
name|result
init|=
name|highlighter
operator|.
name|getBestFragment
argument_list|(
name|tokenStream
argument_list|,
name|text
argument_list|)
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\t"
operator|+
name|result
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"Failed to find correct number of highlights "
operator|+
name|numHighlights
operator|+
literal|" found"
argument_list|,
name|numHighlights
operator|==
literal|4
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|helper
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
DECL|method|testGetTextFragments
specifier|public
name|void
name|testGetTextFragments
parameter_list|()
throws|throws
name|Exception
block|{
name|TestHighlightRunner
name|helper
init|=
operator|new
name|TestHighlightRunner
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|doSearching
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|FIELD_NAME
argument_list|,
literal|"kennedy"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|hits
operator|.
name|totalHits
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|int
name|docId
init|=
name|hits
operator|.
name|scoreDocs
index|[
name|i
index|]
operator|.
name|doc
decl_stmt|;
specifier|final
name|StoredDocument
name|doc
init|=
name|searcher
operator|.
name|doc
argument_list|(
name|docId
argument_list|)
decl_stmt|;
name|String
name|text
init|=
name|doc
operator|.
name|get
argument_list|(
name|FIELD_NAME
argument_list|)
decl_stmt|;
name|TokenStream
name|tokenStream
init|=
name|getAnyTokenStream
argument_list|(
name|FIELD_NAME
argument_list|,
name|docId
argument_list|)
decl_stmt|;
name|Highlighter
name|highlighter
init|=
name|getHighlighter
argument_list|(
name|query
argument_list|,
name|FIELD_NAME
argument_list|,
name|HighlighterTest
operator|.
name|this
argument_list|)
decl_stmt|;
comment|// new Highlighter(this, new
comment|// QueryTermScorer(query));
name|highlighter
operator|.
name|setTextFragmenter
argument_list|(
operator|new
name|SimpleFragmenter
argument_list|(
literal|20
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|stringResults
index|[]
init|=
name|highlighter
operator|.
name|getBestFragments
argument_list|(
name|tokenStream
argument_list|,
name|text
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|tokenStream
operator|=
name|analyzer
operator|.
name|tokenStream
argument_list|(
name|FIELD_NAME
argument_list|,
name|text
argument_list|)
expr_stmt|;
name|TextFragment
name|fragmentResults
index|[]
init|=
name|highlighter
operator|.
name|getBestTextFragments
argument_list|(
name|tokenStream
argument_list|,
name|text
argument_list|,
literal|true
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Failed to find correct number of text Fragments: "
operator|+
name|fragmentResults
operator|.
name|length
operator|+
literal|" vs "
operator|+
name|stringResults
operator|.
name|length
argument_list|,
name|fragmentResults
operator|.
name|length
operator|==
name|stringResults
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|stringResults
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|VERBOSE
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|fragmentResults
index|[
name|j
index|]
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Failed to find same text Fragments: "
operator|+
name|fragmentResults
index|[
name|j
index|]
operator|+
literal|" found"
argument_list|,
name|fragmentResults
index|[
name|j
index|]
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|stringResults
index|[
name|j
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
decl_stmt|;
name|helper
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
DECL|method|testMaxSizeHighlight
specifier|public
name|void
name|testMaxSizeHighlight
parameter_list|()
throws|throws
name|Exception
block|{
comment|// we disable MockTokenizer checks because we will forcefully limit the
comment|// tokenstream and call end() before incrementToken() returns false.
comment|// But we first need to clear the re-used tokenstream components that have enableChecks.
name|analyzer
operator|.
name|getReuseStrategy
argument_list|()
operator|.
name|setReusableComponents
argument_list|(
name|analyzer
argument_list|,
name|FIELD_NAME
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|analyzer
operator|.
name|setEnableChecks
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|TestHighlightRunner
name|helper
init|=
operator|new
name|TestHighlightRunner
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|numHighlights
operator|=
literal|0
expr_stmt|;
name|doSearching
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|FIELD_NAME
argument_list|,
literal|"meat"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|TokenStream
name|tokenStream
init|=
name|analyzer
operator|.
name|tokenStream
argument_list|(
name|FIELD_NAME
argument_list|,
name|texts
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|Highlighter
name|highlighter
init|=
name|getHighlighter
argument_list|(
name|query
argument_list|,
name|FIELD_NAME
argument_list|,
name|HighlighterTest
operator|.
name|this
argument_list|)
decl_stmt|;
comment|// new Highlighter(this, new
comment|// QueryTermScorer(query));
name|highlighter
operator|.
name|setMaxDocCharsToAnalyze
argument_list|(
literal|30
argument_list|)
expr_stmt|;
name|highlighter
operator|.
name|getBestFragment
argument_list|(
name|tokenStream
argument_list|,
name|texts
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Setting MaxDocBytesToAnalyze should have prevented "
operator|+
literal|"us from finding matches for this record: "
operator|+
name|numHighlights
operator|+
literal|" found"
argument_list|,
name|numHighlights
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|helper
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
DECL|method|testMaxSizeHighlightTruncates
specifier|public
name|void
name|testMaxSizeHighlightTruncates
parameter_list|()
throws|throws
name|Exception
block|{
name|TestHighlightRunner
name|helper
init|=
operator|new
name|TestHighlightRunner
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|goodWord
init|=
literal|"goodtoken"
decl_stmt|;
name|CharacterRunAutomaton
name|stopWords
init|=
operator|new
name|CharacterRunAutomaton
argument_list|(
name|Automata
operator|.
name|makeString
argument_list|(
literal|"stoppedtoken"
argument_list|)
argument_list|)
decl_stmt|;
comment|// we disable MockTokenizer checks because we will forcefully limit the
comment|// tokenstream and call end() before incrementToken() returns false.
specifier|final
name|MockAnalyzer
name|analyzer
init|=
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|,
name|MockTokenizer
operator|.
name|SIMPLE
argument_list|,
literal|true
argument_list|,
name|stopWords
argument_list|)
decl_stmt|;
name|analyzer
operator|.
name|setEnableChecks
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|TermQuery
name|query
init|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"data"
argument_list|,
name|goodWord
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|match
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|goodWord
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10000
condition|;
name|i
operator|++
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
comment|// only one stopword
name|sb
operator|.
name|append
argument_list|(
literal|"stoppedtoken"
argument_list|)
expr_stmt|;
block|}
name|SimpleHTMLFormatter
name|fm
init|=
operator|new
name|SimpleHTMLFormatter
argument_list|()
decl_stmt|;
name|Highlighter
name|hg
init|=
name|getHighlighter
argument_list|(
name|query
argument_list|,
literal|"data"
argument_list|,
name|fm
argument_list|)
decl_stmt|;
comment|// new Highlighter(fm,
comment|// new
comment|// QueryTermScorer(query));
name|hg
operator|.
name|setTextFragmenter
argument_list|(
operator|new
name|NullFragmenter
argument_list|()
argument_list|)
expr_stmt|;
name|hg
operator|.
name|setMaxDocCharsToAnalyze
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|match
operator|=
name|hg
operator|.
name|getBestFragment
argument_list|(
name|analyzer
argument_list|,
literal|"data"
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Matched text should be no more than 100 chars in length "
argument_list|,
name|match
operator|.
name|length
argument_list|()
operator|<
name|hg
operator|.
name|getMaxDocCharsToAnalyze
argument_list|()
argument_list|)
expr_stmt|;
comment|// add another tokenized word to the overrall length - but set way
comment|// beyond
comment|// the length of text under consideration (after a large slug of stop
comment|// words
comment|// + whitespace)
name|sb
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|goodWord
argument_list|)
expr_stmt|;
name|match
operator|=
name|hg
operator|.
name|getBestFragment
argument_list|(
name|analyzer
argument_list|,
literal|"data"
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Matched text should be no more than 100 chars in length "
argument_list|,
name|match
operator|.
name|length
argument_list|()
operator|<
name|hg
operator|.
name|getMaxDocCharsToAnalyze
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|helper
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
DECL|method|testMaxSizeEndHighlight
specifier|public
name|void
name|testMaxSizeEndHighlight
parameter_list|()
throws|throws
name|Exception
block|{
name|TestHighlightRunner
name|helper
init|=
operator|new
name|TestHighlightRunner
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|CharacterRunAutomaton
name|stopWords
init|=
operator|new
name|CharacterRunAutomaton
argument_list|(
operator|new
name|RegExp
argument_list|(
literal|"i[nt]"
argument_list|)
operator|.
name|toAutomaton
argument_list|()
argument_list|)
decl_stmt|;
name|TermQuery
name|query
init|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"text"
argument_list|,
literal|"searchterm"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|text
init|=
literal|"this is a text with searchterm in it"
decl_stmt|;
name|SimpleHTMLFormatter
name|fm
init|=
operator|new
name|SimpleHTMLFormatter
argument_list|()
decl_stmt|;
name|Highlighter
name|hg
init|=
name|getHighlighter
argument_list|(
name|query
argument_list|,
literal|"text"
argument_list|,
name|fm
argument_list|)
decl_stmt|;
name|hg
operator|.
name|setTextFragmenter
argument_list|(
operator|new
name|NullFragmenter
argument_list|()
argument_list|)
expr_stmt|;
name|hg
operator|.
name|setMaxDocCharsToAnalyze
argument_list|(
literal|36
argument_list|)
expr_stmt|;
name|String
name|match
init|=
name|hg
operator|.
name|getBestFragment
argument_list|(
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|,
name|MockTokenizer
operator|.
name|SIMPLE
argument_list|,
literal|true
argument_list|,
name|stopWords
argument_list|)
argument_list|,
literal|"text"
argument_list|,
name|text
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Matched text should contain remainder of text after highlighted query "
argument_list|,
name|match
operator|.
name|endsWith
argument_list|(
literal|"in it"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|helper
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
DECL|method|testUnRewrittenQuery
specifier|public
name|void
name|testUnRewrittenQuery
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TestHighlightRunner
name|helper
init|=
operator|new
name|TestHighlightRunner
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|numHighlights
operator|=
literal|0
expr_stmt|;
comment|// test to show how rewritten query can still be used
name|searcher
operator|=
name|newSearcher
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|BooleanQuery
operator|.
name|Builder
name|query
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|query
operator|.
name|add
argument_list|(
operator|new
name|WildcardQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|FIELD_NAME
argument_list|,
literal|"jf?"
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|query
operator|.
name|add
argument_list|(
operator|new
name|WildcardQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|FIELD_NAME
argument_list|,
literal|"kenned*"
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Searching with primitive query"
argument_list|)
expr_stmt|;
comment|// forget to set this and...
comment|// query=query.rewrite(reader);
name|TopDocs
name|hits
init|=
name|searcher
operator|.
name|search
argument_list|(
name|query
operator|.
name|build
argument_list|()
argument_list|,
literal|1000
argument_list|)
decl_stmt|;
comment|// create an instance of the highlighter with the tags used to surround
comment|// highlighted text
comment|// QueryHighlightExtractor highlighter = new
comment|// QueryHighlightExtractor(this,
comment|// query, new StandardAnalyzer(TEST_VERSION));
name|int
name|maxNumFragmentsRequired
init|=
literal|3
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|hits
operator|.
name|totalHits
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|int
name|docId
init|=
name|hits
operator|.
name|scoreDocs
index|[
name|i
index|]
operator|.
name|doc
decl_stmt|;
specifier|final
name|StoredDocument
name|doc
init|=
name|searcher
operator|.
name|doc
argument_list|(
name|docId
argument_list|)
decl_stmt|;
name|String
name|text
init|=
name|doc
operator|.
name|get
argument_list|(
name|FIELD_NAME
argument_list|)
decl_stmt|;
name|TokenStream
name|tokenStream
init|=
name|getAnyTokenStream
argument_list|(
name|FIELD_NAME
argument_list|,
name|docId
argument_list|)
decl_stmt|;
name|Highlighter
name|highlighter
init|=
name|getHighlighter
argument_list|(
name|query
operator|.
name|build
argument_list|()
argument_list|,
name|FIELD_NAME
argument_list|,
name|HighlighterTest
operator|.
name|this
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|highlighter
operator|.
name|setTextFragmenter
argument_list|(
operator|new
name|SimpleFragmenter
argument_list|(
literal|40
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|highlightedText
init|=
name|highlighter
operator|.
name|getBestFragments
argument_list|(
name|tokenStream
argument_list|,
name|text
argument_list|,
name|maxNumFragmentsRequired
argument_list|,
literal|"..."
argument_list|)
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|highlightedText
argument_list|)
expr_stmt|;
block|}
comment|// We expect to have zero highlights if the query is multi-terms and is
comment|// not
comment|// rewritten!
name|assertTrue
argument_list|(
literal|"Failed to find correct number of highlights "
operator|+
name|numHighlights
operator|+
literal|" found"
argument_list|,
name|numHighlights
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|helper
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
DECL|method|testNoFragments
specifier|public
name|void
name|testNoFragments
parameter_list|()
throws|throws
name|Exception
block|{
name|TestHighlightRunner
name|helper
init|=
operator|new
name|TestHighlightRunner
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|doSearching
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|FIELD_NAME
argument_list|,
literal|"aninvalidquerywhichshouldyieldnoresults"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|text
range|:
name|texts
control|)
block|{
name|TokenStream
name|tokenStream
init|=
name|analyzer
operator|.
name|tokenStream
argument_list|(
name|FIELD_NAME
argument_list|,
name|text
argument_list|)
decl_stmt|;
name|Highlighter
name|highlighter
init|=
name|getHighlighter
argument_list|(
name|query
argument_list|,
name|FIELD_NAME
argument_list|,
name|HighlighterTest
operator|.
name|this
argument_list|)
decl_stmt|;
name|String
name|result
init|=
name|highlighter
operator|.
name|getBestFragment
argument_list|(
name|tokenStream
argument_list|,
name|text
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
literal|"The highlight result should be null for text with no query terms"
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|helper
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
comment|/**    * Demonstrates creation of an XHTML compliant doc using new encoding facilities.    */
DECL|method|testEncoding
specifier|public
name|void
name|testEncoding
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|rawDocContent
init|=
literal|"\"Smith& sons' prices< 3 and>4\" claims article"
decl_stmt|;
comment|// run the highlighter on the raw content (scorer does not score any tokens
comment|// for
comment|// highlighting but scores a single fragment for selection
name|Highlighter
name|highlighter
init|=
operator|new
name|Highlighter
argument_list|(
name|this
argument_list|,
operator|new
name|SimpleHTMLEncoder
argument_list|()
argument_list|,
operator|new
name|Scorer
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|startFragment
parameter_list|(
name|TextFragment
name|newFragment
parameter_list|)
block|{       }
annotation|@
name|Override
specifier|public
name|float
name|getTokenScore
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|float
name|getFragmentScore
parameter_list|()
block|{
return|return
literal|1
return|;
block|}
annotation|@
name|Override
specifier|public
name|TokenStream
name|init
parameter_list|(
name|TokenStream
name|tokenStream
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|highlighter
operator|.
name|setTextFragmenter
argument_list|(
operator|new
name|SimpleFragmenter
argument_list|(
literal|2000
argument_list|)
argument_list|)
expr_stmt|;
name|TokenStream
name|tokenStream
init|=
name|analyzer
operator|.
name|tokenStream
argument_list|(
name|FIELD_NAME
argument_list|,
name|rawDocContent
argument_list|)
decl_stmt|;
name|String
name|encodedSnippet
init|=
name|highlighter
operator|.
name|getBestFragments
argument_list|(
name|tokenStream
argument_list|,
name|rawDocContent
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|)
decl_stmt|;
comment|// An ugly bit of XML creation:
name|String
name|xhtml
init|=
literal|"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n"
operator|+
literal|"<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en\">\n"
operator|+
literal|"<head>\n"
operator|+
literal|"<title>My Test HTML Document</title>\n"
operator|+
literal|"</head>\n"
operator|+
literal|"<body>\n"
operator|+
literal|"<h2>"
operator|+
name|encodedSnippet
operator|+
literal|"</h2>\n"
operator|+
literal|"</body>\n"
operator|+
literal|"</html>"
decl_stmt|;
comment|// now an ugly built of XML parsing to test the snippet is encoded OK
name|DocumentBuilderFactory
name|dbf
init|=
name|DocumentBuilderFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|DocumentBuilder
name|db
init|=
name|dbf
operator|.
name|newDocumentBuilder
argument_list|()
decl_stmt|;
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
name|doc
init|=
name|db
operator|.
name|parse
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|xhtml
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|Element
name|root
init|=
name|doc
operator|.
name|getDocumentElement
argument_list|()
decl_stmt|;
name|NodeList
name|nodes
init|=
name|root
operator|.
name|getElementsByTagName
argument_list|(
literal|"body"
argument_list|)
decl_stmt|;
name|Element
name|body
init|=
operator|(
name|Element
operator|)
name|nodes
operator|.
name|item
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|nodes
operator|=
name|body
operator|.
name|getElementsByTagName
argument_list|(
literal|"h2"
argument_list|)
expr_stmt|;
name|Element
name|h2
init|=
operator|(
name|Element
operator|)
name|nodes
operator|.
name|item
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|String
name|decodedSnippet
init|=
name|h2
operator|.
name|getFirstChild
argument_list|()
operator|.
name|getNodeValue
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"XHTML Encoding should have worked:"
argument_list|,
name|rawDocContent
argument_list|,
name|decodedSnippet
argument_list|)
expr_stmt|;
block|}
DECL|method|testFieldSpecificHighlighting
specifier|public
name|void
name|testFieldSpecificHighlighting
parameter_list|()
throws|throws
name|Exception
block|{
name|TestHighlightRunner
name|helper
init|=
operator|new
name|TestHighlightRunner
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|docMainText
init|=
literal|"fred is one of the people"
decl_stmt|;
name|BooleanQuery
operator|.
name|Builder
name|query
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|query
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|FIELD_NAME
argument_list|,
literal|"fred"
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|query
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"category"
argument_list|,
literal|"people"
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
comment|// highlighting respects fieldnames used in query
name|Scorer
name|fieldSpecificScorer
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|mode
operator|==
name|TestHighlightRunner
operator|.
name|QUERY
condition|)
block|{
name|fieldSpecificScorer
operator|=
operator|new
name|QueryScorer
argument_list|(
name|query
operator|.
name|build
argument_list|()
argument_list|,
name|FIELD_NAME
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|mode
operator|==
name|TestHighlightRunner
operator|.
name|QUERY_TERM
condition|)
block|{
name|fieldSpecificScorer
operator|=
operator|new
name|QueryTermScorer
argument_list|(
name|query
operator|.
name|build
argument_list|()
argument_list|,
literal|"contents"
argument_list|)
expr_stmt|;
block|}
name|Highlighter
name|fieldSpecificHighlighter
init|=
operator|new
name|Highlighter
argument_list|(
operator|new
name|SimpleHTMLFormatter
argument_list|()
argument_list|,
name|fieldSpecificScorer
argument_list|)
decl_stmt|;
name|fieldSpecificHighlighter
operator|.
name|setTextFragmenter
argument_list|(
operator|new
name|NullFragmenter
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|result
init|=
name|fieldSpecificHighlighter
operator|.
name|getBestFragment
argument_list|(
name|analyzer
argument_list|,
name|FIELD_NAME
argument_list|,
name|docMainText
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Should match"
argument_list|,
name|result
argument_list|,
literal|"<B>fred</B> is one of the people"
argument_list|)
expr_stmt|;
comment|// highlighting does not respect fieldnames used in query
name|Scorer
name|fieldInSpecificScorer
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|mode
operator|==
name|TestHighlightRunner
operator|.
name|QUERY
condition|)
block|{
name|fieldInSpecificScorer
operator|=
operator|new
name|QueryScorer
argument_list|(
name|query
operator|.
name|build
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|mode
operator|==
name|TestHighlightRunner
operator|.
name|QUERY_TERM
condition|)
block|{
name|fieldInSpecificScorer
operator|=
operator|new
name|QueryTermScorer
argument_list|(
name|query
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Highlighter
name|fieldInSpecificHighlighter
init|=
operator|new
name|Highlighter
argument_list|(
operator|new
name|SimpleHTMLFormatter
argument_list|()
argument_list|,
name|fieldInSpecificScorer
argument_list|)
decl_stmt|;
name|fieldInSpecificHighlighter
operator|.
name|setTextFragmenter
argument_list|(
operator|new
name|NullFragmenter
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|fieldInSpecificHighlighter
operator|.
name|getBestFragment
argument_list|(
name|analyzer
argument_list|,
name|FIELD_NAME
argument_list|,
name|docMainText
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Should match"
argument_list|,
name|result
argument_list|,
literal|"<B>fred</B> is one of the<B>people</B>"
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
decl_stmt|;
name|helper
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
DECL|method|getTS2
specifier|protected
name|TokenStream
name|getTS2
parameter_list|()
block|{
comment|// String s = "Hi-Speed10 foo";
return|return
operator|new
name|TokenStream
argument_list|()
block|{
name|Iterator
argument_list|<
name|Token
argument_list|>
name|iter
decl_stmt|;
name|List
argument_list|<
name|Token
argument_list|>
name|lst
decl_stmt|;
specifier|private
specifier|final
name|CharTermAttribute
name|termAtt
init|=
name|addAttribute
argument_list|(
name|CharTermAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|PositionIncrementAttribute
name|posIncrAtt
init|=
name|addAttribute
argument_list|(
name|PositionIncrementAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|OffsetAttribute
name|offsetAtt
init|=
name|addAttribute
argument_list|(
name|OffsetAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
block|{
name|lst
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|Token
name|t
decl_stmt|;
name|t
operator|=
name|createToken
argument_list|(
literal|"hi"
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|t
operator|.
name|setPositionIncrement
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|lst
operator|.
name|add
parameter_list|(
name|t
parameter_list|)
constructor_decl|;
name|t
operator|=
name|createToken
argument_list|(
literal|"hispeed"
argument_list|,
literal|0
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|t
operator|.
name|setPositionIncrement
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|lst
operator|.
name|add
parameter_list|(
name|t
parameter_list|)
constructor_decl|;
name|t
operator|=
name|createToken
argument_list|(
literal|"speed"
argument_list|,
literal|3
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|t
operator|.
name|setPositionIncrement
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|lst
operator|.
name|add
parameter_list|(
name|t
parameter_list|)
constructor_decl|;
name|t
operator|=
name|createToken
argument_list|(
literal|"10"
argument_list|,
literal|8
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|t
operator|.
name|setPositionIncrement
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|lst
operator|.
name|add
parameter_list|(
name|t
parameter_list|)
constructor_decl|;
name|t
operator|=
name|createToken
argument_list|(
literal|"foo"
argument_list|,
literal|11
argument_list|,
literal|14
argument_list|)
expr_stmt|;
name|t
operator|.
name|setPositionIncrement
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|lst
operator|.
name|add
parameter_list|(
name|t
parameter_list|)
constructor_decl|;
name|iter
operator|=
name|lst
operator|.
name|iterator
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|incrementToken
parameter_list|()
block|{
if|if
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Token
name|token
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|clearAttributes
argument_list|()
expr_stmt|;
name|termAtt
operator|.
name|setEmpty
argument_list|()
operator|.
name|append
argument_list|(
name|token
argument_list|)
expr_stmt|;
name|posIncrAtt
operator|.
name|setPositionIncrement
argument_list|(
name|token
operator|.
name|getPositionIncrement
argument_list|()
argument_list|)
expr_stmt|;
name|offsetAtt
operator|.
name|setOffset
argument_list|(
name|token
operator|.
name|startOffset
argument_list|()
argument_list|,
name|token
operator|.
name|endOffset
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|reset
parameter_list|()
throws|throws
name|IOException
block|{
name|super
operator|.
name|reset
argument_list|()
expr_stmt|;
name|iter
operator|=
name|lst
operator|.
name|iterator
argument_list|()
expr_stmt|;
block|}
block|}
return|;
block|}
comment|// same token-stream as above, but the bigger token comes first this time
DECL|method|getTS2a
specifier|protected
name|TokenStream
name|getTS2a
parameter_list|()
block|{
comment|// String s = "Hi-Speed10 foo";
return|return
operator|new
name|TokenStream
argument_list|()
block|{
name|Iterator
argument_list|<
name|Token
argument_list|>
name|iter
decl_stmt|;
name|List
argument_list|<
name|Token
argument_list|>
name|lst
decl_stmt|;
specifier|private
specifier|final
name|CharTermAttribute
name|termAtt
init|=
name|addAttribute
argument_list|(
name|CharTermAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|PositionIncrementAttribute
name|posIncrAtt
init|=
name|addAttribute
argument_list|(
name|PositionIncrementAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|OffsetAttribute
name|offsetAtt
init|=
name|addAttribute
argument_list|(
name|OffsetAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
block|{
name|lst
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|Token
name|t
decl_stmt|;
name|t
operator|=
name|createToken
argument_list|(
literal|"hispeed"
argument_list|,
literal|0
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|t
operator|.
name|setPositionIncrement
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|lst
operator|.
name|add
parameter_list|(
name|t
parameter_list|)
constructor_decl|;
name|t
operator|=
name|createToken
argument_list|(
literal|"hi"
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|t
operator|.
name|setPositionIncrement
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|lst
operator|.
name|add
parameter_list|(
name|t
parameter_list|)
constructor_decl|;
name|t
operator|=
name|createToken
argument_list|(
literal|"speed"
argument_list|,
literal|3
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|t
operator|.
name|setPositionIncrement
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|lst
operator|.
name|add
parameter_list|(
name|t
parameter_list|)
constructor_decl|;
name|t
operator|=
name|createToken
argument_list|(
literal|"10"
argument_list|,
literal|8
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|t
operator|.
name|setPositionIncrement
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|lst
operator|.
name|add
parameter_list|(
name|t
parameter_list|)
constructor_decl|;
name|t
operator|=
name|createToken
argument_list|(
literal|"foo"
argument_list|,
literal|11
argument_list|,
literal|14
argument_list|)
expr_stmt|;
name|t
operator|.
name|setPositionIncrement
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|lst
operator|.
name|add
parameter_list|(
name|t
parameter_list|)
constructor_decl|;
name|iter
operator|=
name|lst
operator|.
name|iterator
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|incrementToken
parameter_list|()
block|{
if|if
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Token
name|token
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|clearAttributes
argument_list|()
expr_stmt|;
name|termAtt
operator|.
name|setEmpty
argument_list|()
operator|.
name|append
argument_list|(
name|token
argument_list|)
expr_stmt|;
name|posIncrAtt
operator|.
name|setPositionIncrement
argument_list|(
name|token
operator|.
name|getPositionIncrement
argument_list|()
argument_list|)
expr_stmt|;
name|offsetAtt
operator|.
name|setOffset
argument_list|(
name|token
operator|.
name|startOffset
argument_list|()
argument_list|,
name|token
operator|.
name|endOffset
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|reset
parameter_list|()
throws|throws
name|IOException
block|{
name|super
operator|.
name|reset
argument_list|()
expr_stmt|;
name|iter
operator|=
name|lst
operator|.
name|iterator
argument_list|()
expr_stmt|;
block|}
block|}
return|;
block|}
DECL|method|testOverlapAnalyzer2
specifier|public
name|void
name|testOverlapAnalyzer2
parameter_list|()
throws|throws
name|Exception
block|{
name|TestHighlightRunner
name|helper
init|=
operator|new
name|TestHighlightRunner
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|s
init|=
literal|"Hi-Speed10 foo"
decl_stmt|;
name|Query
name|query
decl_stmt|;
name|Highlighter
name|highlighter
decl_stmt|;
name|String
name|result
decl_stmt|;
name|query
operator|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"text"
argument_list|,
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|highlighter
operator|=
name|getHighlighter
argument_list|(
name|query
argument_list|,
literal|"text"
argument_list|,
name|HighlighterTest
operator|.
name|this
argument_list|)
expr_stmt|;
name|result
operator|=
name|highlighter
operator|.
name|getBestFragments
argument_list|(
name|getTS2
argument_list|()
argument_list|,
name|s
argument_list|,
literal|3
argument_list|,
literal|"..."
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Hi-Speed10<B>foo</B>"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|query
operator|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"text"
argument_list|,
literal|"10"
argument_list|)
argument_list|)
expr_stmt|;
name|highlighter
operator|=
name|getHighlighter
argument_list|(
name|query
argument_list|,
literal|"text"
argument_list|,
name|HighlighterTest
operator|.
name|this
argument_list|)
expr_stmt|;
name|result
operator|=
name|highlighter
operator|.
name|getBestFragments
argument_list|(
name|getTS2
argument_list|()
argument_list|,
name|s
argument_list|,
literal|3
argument_list|,
literal|"..."
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Hi-Speed<B>10</B> foo"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|query
operator|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"text"
argument_list|,
literal|"hi"
argument_list|)
argument_list|)
expr_stmt|;
name|highlighter
operator|=
name|getHighlighter
argument_list|(
name|query
argument_list|,
literal|"text"
argument_list|,
name|HighlighterTest
operator|.
name|this
argument_list|)
expr_stmt|;
name|result
operator|=
name|highlighter
operator|.
name|getBestFragments
argument_list|(
name|getTS2
argument_list|()
argument_list|,
name|s
argument_list|,
literal|3
argument_list|,
literal|"..."
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"<B>Hi</B>-Speed10 foo"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|query
operator|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"text"
argument_list|,
literal|"speed"
argument_list|)
argument_list|)
expr_stmt|;
name|highlighter
operator|=
name|getHighlighter
argument_list|(
name|query
argument_list|,
literal|"text"
argument_list|,
name|HighlighterTest
operator|.
name|this
argument_list|)
expr_stmt|;
name|result
operator|=
name|highlighter
operator|.
name|getBestFragments
argument_list|(
name|getTS2
argument_list|()
argument_list|,
name|s
argument_list|,
literal|3
argument_list|,
literal|"..."
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Hi-<B>Speed</B>10 foo"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|query
operator|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"text"
argument_list|,
literal|"hispeed"
argument_list|)
argument_list|)
expr_stmt|;
name|highlighter
operator|=
name|getHighlighter
argument_list|(
name|query
argument_list|,
literal|"text"
argument_list|,
name|HighlighterTest
operator|.
name|this
argument_list|)
expr_stmt|;
name|result
operator|=
name|highlighter
operator|.
name|getBestFragments
argument_list|(
name|getTS2
argument_list|()
argument_list|,
name|s
argument_list|,
literal|3
argument_list|,
literal|"..."
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"<B>Hi-Speed</B>10 foo"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|BooleanQuery
operator|.
name|Builder
name|booleanQuery
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|booleanQuery
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"text"
argument_list|,
literal|"hi"
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|booleanQuery
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"text"
argument_list|,
literal|"speed"
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|query
operator|=
name|booleanQuery
operator|.
name|build
argument_list|()
expr_stmt|;
name|highlighter
operator|=
name|getHighlighter
argument_list|(
name|query
argument_list|,
literal|"text"
argument_list|,
name|HighlighterTest
operator|.
name|this
argument_list|)
expr_stmt|;
name|result
operator|=
name|highlighter
operator|.
name|getBestFragments
argument_list|(
name|getTS2
argument_list|()
argument_list|,
name|s
argument_list|,
literal|3
argument_list|,
literal|"..."
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"<B>Hi-Speed</B>10 foo"
argument_list|,
name|result
argument_list|)
expr_stmt|;
comment|// ///////////////// same tests, just put the bigger overlapping token
comment|// first
name|query
operator|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"text"
argument_list|,
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|highlighter
operator|=
name|getHighlighter
argument_list|(
name|query
argument_list|,
literal|"text"
argument_list|,
name|HighlighterTest
operator|.
name|this
argument_list|)
expr_stmt|;
name|result
operator|=
name|highlighter
operator|.
name|getBestFragments
argument_list|(
name|getTS2a
argument_list|()
argument_list|,
name|s
argument_list|,
literal|3
argument_list|,
literal|"..."
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Hi-Speed10<B>foo</B>"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|query
operator|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"text"
argument_list|,
literal|"10"
argument_list|)
argument_list|)
expr_stmt|;
name|highlighter
operator|=
name|getHighlighter
argument_list|(
name|query
argument_list|,
literal|"text"
argument_list|,
name|HighlighterTest
operator|.
name|this
argument_list|)
expr_stmt|;
name|result
operator|=
name|highlighter
operator|.
name|getBestFragments
argument_list|(
name|getTS2a
argument_list|()
argument_list|,
name|s
argument_list|,
literal|3
argument_list|,
literal|"..."
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Hi-Speed<B>10</B> foo"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|query
operator|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"text"
argument_list|,
literal|"hi"
argument_list|)
argument_list|)
expr_stmt|;
name|highlighter
operator|=
name|getHighlighter
argument_list|(
name|query
argument_list|,
literal|"text"
argument_list|,
name|HighlighterTest
operator|.
name|this
argument_list|)
expr_stmt|;
name|result
operator|=
name|highlighter
operator|.
name|getBestFragments
argument_list|(
name|getTS2a
argument_list|()
argument_list|,
name|s
argument_list|,
literal|3
argument_list|,
literal|"..."
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"<B>Hi</B>-Speed10 foo"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|query
operator|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"text"
argument_list|,
literal|"speed"
argument_list|)
argument_list|)
expr_stmt|;
name|highlighter
operator|=
name|getHighlighter
argument_list|(
name|query
argument_list|,
literal|"text"
argument_list|,
name|HighlighterTest
operator|.
name|this
argument_list|)
expr_stmt|;
name|result
operator|=
name|highlighter
operator|.
name|getBestFragments
argument_list|(
name|getTS2a
argument_list|()
argument_list|,
name|s
argument_list|,
literal|3
argument_list|,
literal|"..."
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Hi-<B>Speed</B>10 foo"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|query
operator|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"text"
argument_list|,
literal|"hispeed"
argument_list|)
argument_list|)
expr_stmt|;
name|highlighter
operator|=
name|getHighlighter
argument_list|(
name|query
argument_list|,
literal|"text"
argument_list|,
name|HighlighterTest
operator|.
name|this
argument_list|)
expr_stmt|;
name|result
operator|=
name|highlighter
operator|.
name|getBestFragments
argument_list|(
name|getTS2a
argument_list|()
argument_list|,
name|s
argument_list|,
literal|3
argument_list|,
literal|"..."
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"<B>Hi-Speed</B>10 foo"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|query
operator|=
name|booleanQuery
operator|.
name|build
argument_list|()
expr_stmt|;
name|highlighter
operator|=
name|getHighlighter
argument_list|(
name|query
argument_list|,
literal|"text"
argument_list|,
name|HighlighterTest
operator|.
name|this
argument_list|)
expr_stmt|;
name|result
operator|=
name|highlighter
operator|.
name|getBestFragments
argument_list|(
name|getTS2a
argument_list|()
argument_list|,
name|s
argument_list|,
literal|3
argument_list|,
literal|"..."
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"<B>Hi-Speed</B>10 foo"
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|helper
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
DECL|field|dir
specifier|private
name|Directory
name|dir
decl_stmt|;
DECL|field|a
specifier|private
name|Analyzer
name|a
decl_stmt|;
DECL|method|testWeightedTermsWithDeletes
specifier|public
name|void
name|testWeightedTermsWithDeletes
parameter_list|()
throws|throws
name|IOException
throws|,
name|InvalidTokenOffsetsException
block|{
name|makeIndex
argument_list|()
expr_stmt|;
name|deleteDocument
argument_list|()
expr_stmt|;
name|searchIndex
argument_list|()
expr_stmt|;
block|}
DECL|method|makeIndex
specifier|private
name|void
name|makeIndex
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|,
name|MockTokenizer
operator|.
name|WHITESPACE
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|(
literal|"t_text1"
argument_list|,
literal|"random words for highlighting tests del"
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|(
literal|"t_text1"
argument_list|,
literal|"more random words for second field del"
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|(
literal|"t_text1"
argument_list|,
literal|"random words for highlighting tests del"
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|(
literal|"t_text1"
argument_list|,
literal|"more random words for second field"
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|forceMerge
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|deleteDocument
specifier|private
name|void
name|deleteDocument
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|,
name|MockTokenizer
operator|.
name|WHITESPACE
argument_list|,
literal|false
argument_list|)
argument_list|)
operator|.
name|setOpenMode
argument_list|(
name|OpenMode
operator|.
name|APPEND
argument_list|)
argument_list|)
decl_stmt|;
name|writer
operator|.
name|deleteDocuments
argument_list|(
operator|new
name|Term
argument_list|(
literal|"t_text1"
argument_list|,
literal|"del"
argument_list|)
argument_list|)
expr_stmt|;
comment|// To see negative idf, keep comment the following line
comment|//writer.forceMerge(1);
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|searchIndex
specifier|private
name|void
name|searchIndex
parameter_list|()
throws|throws
name|IOException
throws|,
name|InvalidTokenOffsetsException
block|{
name|Query
name|query
init|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"t_text1"
argument_list|,
literal|"random"
argument_list|)
argument_list|)
decl_stmt|;
name|IndexReader
name|reader
init|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|dir
argument_list|)
decl_stmt|;
name|IndexSearcher
name|searcher
init|=
name|newSearcher
argument_list|(
name|reader
argument_list|)
decl_stmt|;
comment|// This scorer can return negative idf -> null fragment
name|Scorer
name|scorer
init|=
operator|new
name|QueryTermScorer
argument_list|(
name|query
argument_list|,
name|searcher
operator|.
name|getIndexReader
argument_list|()
argument_list|,
literal|"t_text1"
argument_list|)
decl_stmt|;
comment|// This scorer doesn't use idf (patch version)
comment|//Scorer scorer = new QueryTermScorer( query, "t_text1" );
name|Highlighter
name|h
init|=
operator|new
name|Highlighter
argument_list|(
name|scorer
argument_list|)
decl_stmt|;
name|TopDocs
name|hits
init|=
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
literal|10
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|hits
operator|.
name|totalHits
condition|;
name|i
operator|++
control|)
block|{
name|StoredDocument
name|doc
init|=
name|searcher
operator|.
name|doc
argument_list|(
name|hits
operator|.
name|scoreDocs
index|[
name|i
index|]
operator|.
name|doc
argument_list|)
decl_stmt|;
name|String
name|result
init|=
name|h
operator|.
name|getBestFragment
argument_list|(
name|a
argument_list|,
literal|"t_text1"
argument_list|,
name|doc
operator|.
name|get
argument_list|(
literal|"t_text1"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"result:"
operator|+
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"more<B>random</B> words for second field"
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/** We can highlight based on payloads. It's supported both via term vectors and MemoryIndex since Lucene 5. */
DECL|method|testPayloadQuery
specifier|public
name|void
name|testPayloadQuery
parameter_list|()
throws|throws
name|IOException
throws|,
name|InvalidTokenOffsetsException
block|{
specifier|final
name|String
name|text
init|=
literal|"random words and words"
decl_stmt|;
comment|//"words" at positions 1& 4
name|Analyzer
name|analyzer
init|=
operator|new
name|MockPayloadAnalyzer
argument_list|()
decl_stmt|;
comment|//sets payload to "pos: X" (where X is position #)
try|try
init|(
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
name|analyzer
argument_list|)
argument_list|)
init|)
block|{
name|writer
operator|.
name|deleteAll
argument_list|()
expr_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
name|FIELD_NAME
argument_list|,
name|text
argument_list|,
name|fieldType
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|writer
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
try|try
init|(
name|IndexReader
name|reader
init|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|dir
argument_list|)
init|)
block|{
name|Query
name|query
init|=
operator|new
name|SpanPayloadCheckQuery
argument_list|(
operator|new
name|SpanTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|FIELD_NAME
argument_list|,
literal|"words"
argument_list|)
argument_list|)
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
literal|"pos: 1"
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
comment|//just match the first "word" occurrence
name|IndexSearcher
name|searcher
init|=
name|newSearcher
argument_list|(
name|reader
argument_list|)
decl_stmt|;
name|QueryScorer
name|scorer
init|=
operator|new
name|QueryScorer
argument_list|(
name|query
argument_list|,
name|searcher
operator|.
name|getIndexReader
argument_list|()
argument_list|,
name|FIELD_NAME
argument_list|)
decl_stmt|;
name|scorer
operator|.
name|setUsePayloads
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Highlighter
name|h
init|=
operator|new
name|Highlighter
argument_list|(
name|scorer
argument_list|)
decl_stmt|;
name|TopDocs
name|hits
init|=
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|hits
operator|.
name|scoreDocs
operator|.
name|length
argument_list|)
expr_stmt|;
name|TokenStream
name|stream
init|=
name|TokenSources
operator|.
name|getAnyTokenStream
argument_list|(
name|searcher
operator|.
name|getIndexReader
argument_list|()
argument_list|,
literal|0
argument_list|,
name|FIELD_NAME
argument_list|,
name|analyzer
argument_list|)
decl_stmt|;
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|stream
operator|=
operator|new
name|CachingTokenFilter
argument_list|(
name|stream
argument_list|)
expr_stmt|;
comment|//conceals detection of TokenStreamFromTermVector
block|}
name|String
name|result
init|=
name|h
operator|.
name|getBestFragment
argument_list|(
name|stream
argument_list|,
name|text
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"random<B>words</B> and words"
argument_list|,
name|result
argument_list|)
expr_stmt|;
comment|//only highlight first "word"
block|}
block|}
comment|/*    *     * public void testBigramAnalyzer() throws IOException, ParseException {    * //test to ensure analyzers with none-consecutive start/end offsets //dont    * double-highlight text //setup index 1 RAMDirectory ramDir = new    * RAMDirectory(); Analyzer bigramAnalyzer=new CJKAnalyzer(); IndexWriter    * writer = new IndexWriter(ramDir,bigramAnalyzer , true); Document d = new    * Document(); Field f = new Field(FIELD_NAME, "java abc def", true, true,    * true); d.add(f); writer.addDocument(d); writer.close(); IndexReader reader =    * DirectoryReader.open(ramDir);    *     * IndexSearcher searcher=new IndexSearcher(reader); query =    * QueryParser.parse("abc", FIELD_NAME, bigramAnalyzer);    * System.out.println("Searching for: " + query.toString(FIELD_NAME)); hits =    * searcher.search(query);    *     * Highlighter highlighter = new Highlighter(this,new    * QueryFragmentScorer(query));    *     * for (int i = 0; i< hits.totalHits; i++) { String text =    * searcher.doc2(hits.scoreDocs[i].doc).get(FIELD_NAME); TokenStream    * tokenStream=bigramAnalyzer.tokenStream(FIELD_NAME,text);    * String highlightedText = highlighter.getBestFragment(tokenStream,text);    * System.out.println(highlightedText); } }    */
annotation|@
name|Override
DECL|method|highlightTerm
specifier|public
name|String
name|highlightTerm
parameter_list|(
name|String
name|originalText
parameter_list|,
name|TokenGroup
name|group
parameter_list|)
block|{
if|if
condition|(
name|group
operator|.
name|getTotalScore
argument_list|()
operator|<=
literal|0
condition|)
block|{
return|return
name|originalText
return|;
block|}
name|numHighlights
operator|++
expr_stmt|;
comment|// update stats used in assertions
return|return
literal|"<B>"
operator|+
name|originalText
operator|+
literal|"</B>"
return|;
block|}
DECL|method|doSearching
specifier|public
name|void
name|doSearching
parameter_list|(
name|Query
name|unReWrittenQuery
parameter_list|)
throws|throws
name|Exception
block|{
name|searcher
operator|=
name|newSearcher
argument_list|(
name|reader
argument_list|)
expr_stmt|;
comment|// for any multi-term queries to work (prefix, wildcard, range,fuzzy etc)
comment|// you must use a rewritten query!
name|query
operator|=
name|unReWrittenQuery
operator|.
name|rewrite
argument_list|(
name|reader
argument_list|)
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Searching for: "
operator|+
name|query
operator|.
name|toString
argument_list|(
name|FIELD_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|hits
operator|=
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
block|}
DECL|method|assertExpectedHighlightCount
specifier|public
name|void
name|assertExpectedHighlightCount
parameter_list|(
specifier|final
name|int
name|maxNumFragmentsRequired
parameter_list|,
specifier|final
name|int
name|expectedHighlights
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|hits
operator|.
name|totalHits
condition|;
name|i
operator|++
control|)
block|{
name|String
name|text
init|=
name|searcher
operator|.
name|doc
argument_list|(
name|hits
operator|.
name|scoreDocs
index|[
name|i
index|]
operator|.
name|doc
argument_list|)
operator|.
name|get
argument_list|(
name|FIELD_NAME
argument_list|)
decl_stmt|;
name|TokenStream
name|tokenStream
init|=
name|analyzer
operator|.
name|tokenStream
argument_list|(
name|FIELD_NAME
argument_list|,
name|text
argument_list|)
decl_stmt|;
name|QueryScorer
name|scorer
init|=
operator|new
name|QueryScorer
argument_list|(
name|query
argument_list|,
name|FIELD_NAME
argument_list|)
decl_stmt|;
name|Highlighter
name|highlighter
init|=
operator|new
name|Highlighter
argument_list|(
name|this
argument_list|,
name|scorer
argument_list|)
decl_stmt|;
name|highlighter
operator|.
name|setTextFragmenter
argument_list|(
operator|new
name|SimpleFragmenter
argument_list|(
literal|40
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|result
init|=
name|highlighter
operator|.
name|getBestFragments
argument_list|(
name|tokenStream
argument_list|,
name|text
argument_list|,
name|maxNumFragmentsRequired
argument_list|,
literal|"..."
argument_list|)
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\t"
operator|+
name|result
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Failed to find correct number of highlights "
operator|+
name|numHighlights
operator|+
literal|" found"
argument_list|,
name|numHighlights
operator|==
name|expectedHighlights
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|setUp
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
comment|//Not many use this setup:
name|a
operator|=
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|,
name|MockTokenizer
operator|.
name|WHITESPACE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|dir
operator|=
name|newDirectory
argument_list|()
expr_stmt|;
comment|//Most tests use this setup:
name|analyzer
operator|=
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|,
name|MockTokenizer
operator|.
name|SIMPLE
argument_list|,
literal|true
argument_list|,
name|MockTokenFilter
operator|.
name|ENGLISH_STOPSET
argument_list|)
expr_stmt|;
name|ramDir
operator|=
name|newDirectory
argument_list|()
expr_stmt|;
name|fieldType
operator|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
name|FIELD_TYPE_TV
else|:
name|TextField
operator|.
name|TYPE_STORED
expr_stmt|;
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|ramDir
argument_list|,
name|newIndexWriterConfig
argument_list|(
name|analyzer
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|text
range|:
name|texts
control|)
block|{
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|(
name|FIELD_NAME
argument_list|,
name|text
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// a few tests need other docs...:
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|IntField
argument_list|(
name|NUMERIC_FIELD_NAME
argument_list|,
literal|1
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|StoredField
argument_list|(
name|NUMERIC_FIELD_NAME
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|IntField
argument_list|(
name|NUMERIC_FIELD_NAME
argument_list|,
literal|3
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|StoredField
argument_list|(
name|NUMERIC_FIELD_NAME
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|IntField
argument_list|(
name|NUMERIC_FIELD_NAME
argument_list|,
literal|5
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|StoredField
argument_list|(
name|NUMERIC_FIELD_NAME
argument_list|,
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|IntField
argument_list|(
name|NUMERIC_FIELD_NAME
argument_list|,
literal|7
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|StoredField
argument_list|(
name|NUMERIC_FIELD_NAME
argument_list|,
literal|7
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|Document
name|childDoc
init|=
name|doc
argument_list|(
name|FIELD_NAME
argument_list|,
literal|"child document"
argument_list|)
decl_stmt|;
name|Document
name|parentDoc
init|=
name|doc
argument_list|(
name|FIELD_NAME
argument_list|,
literal|"parent document"
argument_list|)
decl_stmt|;
name|writer
operator|.
name|addDocuments
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|childDoc
argument_list|,
name|parentDoc
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|forceMerge
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|reader
operator|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|ramDir
argument_list|)
expr_stmt|;
comment|//Misc:
name|numHighlights
operator|=
literal|0
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|tearDown
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
name|ramDir
operator|.
name|close
argument_list|()
expr_stmt|;
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
DECL|method|doc
specifier|private
name|Document
name|doc
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|Document
name|d
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|d
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
name|name
argument_list|,
name|value
argument_list|,
name|fieldType
argument_list|)
argument_list|)
expr_stmt|;
comment|//fieldType is randomly chosen for term vectors in setUp
return|return
name|d
return|;
block|}
DECL|method|createToken
specifier|private
specifier|static
name|Token
name|createToken
parameter_list|(
name|String
name|term
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|offset
parameter_list|)
block|{
return|return
operator|new
name|Token
argument_list|(
name|term
argument_list|,
name|start
argument_list|,
name|offset
argument_list|)
return|;
block|}
block|}
end_class
begin_comment
comment|// ===================================================================
end_comment
begin_comment
comment|// ========== BEGIN TEST SUPPORTING CLASSES
end_comment
begin_comment
comment|// ========== THESE LOOK LIKE, WITH SOME MORE EFFORT THESE COULD BE
end_comment
begin_comment
comment|// ========== MADE MORE GENERALLY USEFUL.
end_comment
begin_comment
comment|// TODO - make synonyms all interchangeable with each other and produce
end_comment
begin_comment
comment|// a version that does hyponyms - the "is a specialised type of ...."
end_comment
begin_comment
comment|// so that car = audi, bmw and volkswagen but bmw != audi so different
end_comment
begin_comment
comment|// behaviour to synonyms
end_comment
begin_comment
comment|// ===================================================================
end_comment
begin_class
DECL|class|SynonymAnalyzer
specifier|final
class|class
name|SynonymAnalyzer
extends|extends
name|Analyzer
block|{
DECL|field|synonyms
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|synonyms
decl_stmt|;
DECL|method|SynonymAnalyzer
specifier|public
name|SynonymAnalyzer
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|synonyms
parameter_list|)
block|{
name|this
operator|.
name|synonyms
operator|=
name|synonyms
expr_stmt|;
block|}
comment|/*    * (non-Javadoc)    *     * @see org.apache.lucene.analysis.Analyzer#tokenStream(java.lang.String,    *      java.io.Reader)    */
annotation|@
name|Override
DECL|method|createComponents
specifier|public
name|TokenStreamComponents
name|createComponents
parameter_list|(
name|String
name|arg0
parameter_list|)
block|{
name|Tokenizer
name|stream
init|=
operator|new
name|MockTokenizer
argument_list|(
name|MockTokenizer
operator|.
name|SIMPLE
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|stream
operator|.
name|addAttribute
argument_list|(
name|CharTermAttribute
operator|.
name|class
argument_list|)
expr_stmt|;
name|stream
operator|.
name|addAttribute
argument_list|(
name|PositionIncrementAttribute
operator|.
name|class
argument_list|)
expr_stmt|;
name|stream
operator|.
name|addAttribute
argument_list|(
name|OffsetAttribute
operator|.
name|class
argument_list|)
expr_stmt|;
return|return
operator|new
name|TokenStreamComponents
argument_list|(
name|stream
argument_list|,
operator|new
name|SynonymTokenizer
argument_list|(
name|stream
argument_list|,
name|synonyms
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class
begin_comment
comment|/**  * Expands a token stream with synonyms (TODO - make the synonyms analyzed by choice of analyzer)  *  */
end_comment
begin_class
DECL|class|SynonymTokenizer
specifier|final
class|class
name|SynonymTokenizer
extends|extends
name|TokenStream
block|{
DECL|field|realStream
specifier|private
specifier|final
name|TokenStream
name|realStream
decl_stmt|;
DECL|field|currentRealToken
specifier|private
name|Token
name|currentRealToken
init|=
literal|null
decl_stmt|;
DECL|field|synonyms
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|synonyms
decl_stmt|;
DECL|field|st
specifier|private
name|StringTokenizer
name|st
init|=
literal|null
decl_stmt|;
DECL|field|realTermAtt
specifier|private
specifier|final
name|CharTermAttribute
name|realTermAtt
decl_stmt|;
DECL|field|realPosIncrAtt
specifier|private
specifier|final
name|PositionIncrementAttribute
name|realPosIncrAtt
decl_stmt|;
DECL|field|realOffsetAtt
specifier|private
specifier|final
name|OffsetAttribute
name|realOffsetAtt
decl_stmt|;
DECL|field|termAtt
specifier|private
specifier|final
name|CharTermAttribute
name|termAtt
decl_stmt|;
DECL|field|posIncrAtt
specifier|private
specifier|final
name|PositionIncrementAttribute
name|posIncrAtt
decl_stmt|;
DECL|field|offsetAtt
specifier|private
specifier|final
name|OffsetAttribute
name|offsetAtt
decl_stmt|;
DECL|method|SynonymTokenizer
specifier|public
name|SynonymTokenizer
parameter_list|(
name|TokenStream
name|realStream
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|synonyms
parameter_list|)
block|{
name|this
operator|.
name|realStream
operator|=
name|realStream
expr_stmt|;
name|this
operator|.
name|synonyms
operator|=
name|synonyms
expr_stmt|;
name|realTermAtt
operator|=
name|realStream
operator|.
name|addAttribute
argument_list|(
name|CharTermAttribute
operator|.
name|class
argument_list|)
expr_stmt|;
name|realPosIncrAtt
operator|=
name|realStream
operator|.
name|addAttribute
argument_list|(
name|PositionIncrementAttribute
operator|.
name|class
argument_list|)
expr_stmt|;
name|realOffsetAtt
operator|=
name|realStream
operator|.
name|addAttribute
argument_list|(
name|OffsetAttribute
operator|.
name|class
argument_list|)
expr_stmt|;
name|termAtt
operator|=
name|addAttribute
argument_list|(
name|CharTermAttribute
operator|.
name|class
argument_list|)
expr_stmt|;
name|posIncrAtt
operator|=
name|addAttribute
argument_list|(
name|PositionIncrementAttribute
operator|.
name|class
argument_list|)
expr_stmt|;
name|offsetAtt
operator|=
name|addAttribute
argument_list|(
name|OffsetAttribute
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|incrementToken
specifier|public
name|boolean
name|incrementToken
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|currentRealToken
operator|==
literal|null
condition|)
block|{
name|boolean
name|next
init|=
name|realStream
operator|.
name|incrementToken
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|next
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|//Token nextRealToken = new Token(, offsetAtt.startOffset(), offsetAtt.endOffset());
name|clearAttributes
argument_list|()
expr_stmt|;
name|termAtt
operator|.
name|copyBuffer
argument_list|(
name|realTermAtt
operator|.
name|buffer
argument_list|()
argument_list|,
literal|0
argument_list|,
name|realTermAtt
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|offsetAtt
operator|.
name|setOffset
argument_list|(
name|realOffsetAtt
operator|.
name|startOffset
argument_list|()
argument_list|,
name|realOffsetAtt
operator|.
name|endOffset
argument_list|()
argument_list|)
expr_stmt|;
name|posIncrAtt
operator|.
name|setPositionIncrement
argument_list|(
name|realPosIncrAtt
operator|.
name|getPositionIncrement
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|expansions
init|=
name|synonyms
operator|.
name|get
argument_list|(
name|realTermAtt
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|expansions
operator|==
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
name|st
operator|=
operator|new
name|StringTokenizer
argument_list|(
name|expansions
argument_list|,
literal|","
argument_list|)
expr_stmt|;
if|if
condition|(
name|st
operator|.
name|hasMoreTokens
argument_list|()
condition|)
block|{
name|currentRealToken
operator|=
operator|new
name|Token
argument_list|()
expr_stmt|;
name|currentRealToken
operator|.
name|setOffset
argument_list|(
name|realOffsetAtt
operator|.
name|startOffset
argument_list|()
argument_list|,
name|realOffsetAtt
operator|.
name|endOffset
argument_list|()
argument_list|)
expr_stmt|;
name|currentRealToken
operator|.
name|copyBuffer
argument_list|(
name|realTermAtt
operator|.
name|buffer
argument_list|()
argument_list|,
literal|0
argument_list|,
name|realTermAtt
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
else|else
block|{
name|String
name|tok
init|=
name|st
operator|.
name|nextToken
argument_list|()
decl_stmt|;
name|clearAttributes
argument_list|()
expr_stmt|;
name|termAtt
operator|.
name|setEmpty
argument_list|()
operator|.
name|append
argument_list|(
name|tok
argument_list|)
expr_stmt|;
name|offsetAtt
operator|.
name|setOffset
argument_list|(
name|currentRealToken
operator|.
name|startOffset
argument_list|()
argument_list|,
name|currentRealToken
operator|.
name|endOffset
argument_list|()
argument_list|)
expr_stmt|;
name|posIncrAtt
operator|.
name|setPositionIncrement
argument_list|(
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|st
operator|.
name|hasMoreTokens
argument_list|()
condition|)
block|{
name|currentRealToken
operator|=
literal|null
expr_stmt|;
name|st
operator|=
literal|null
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|reset
specifier|public
name|void
name|reset
parameter_list|()
throws|throws
name|IOException
block|{
name|super
operator|.
name|reset
argument_list|()
expr_stmt|;
name|this
operator|.
name|realStream
operator|.
name|reset
argument_list|()
expr_stmt|;
name|this
operator|.
name|currentRealToken
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|st
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|end
specifier|public
name|void
name|end
parameter_list|()
throws|throws
name|IOException
block|{
name|super
operator|.
name|end
argument_list|()
expr_stmt|;
name|this
operator|.
name|realStream
operator|.
name|end
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|super
operator|.
name|close
argument_list|()
expr_stmt|;
name|this
operator|.
name|realStream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|class|TestHighlightRunner
specifier|static
specifier|abstract
class|class
name|TestHighlightRunner
block|{
DECL|field|QUERY
specifier|static
specifier|final
name|int
name|QUERY
init|=
literal|0
decl_stmt|;
DECL|field|QUERY_TERM
specifier|static
specifier|final
name|int
name|QUERY_TERM
init|=
literal|1
decl_stmt|;
DECL|field|mode
name|int
name|mode
init|=
name|QUERY
decl_stmt|;
DECL|field|frag
name|Fragmenter
name|frag
init|=
operator|new
name|SimpleFragmenter
argument_list|(
literal|20
argument_list|)
decl_stmt|;
DECL|method|getHighlighter
specifier|public
name|Highlighter
name|getHighlighter
parameter_list|(
name|Query
name|query
parameter_list|,
name|String
name|fieldName
parameter_list|,
name|Formatter
name|formatter
parameter_list|)
block|{
return|return
name|getHighlighter
argument_list|(
name|query
argument_list|,
name|fieldName
argument_list|,
name|formatter
argument_list|,
literal|true
argument_list|)
return|;
block|}
DECL|method|getHighlighter
specifier|public
name|Highlighter
name|getHighlighter
parameter_list|(
name|Query
name|query
parameter_list|,
name|String
name|fieldName
parameter_list|,
name|Formatter
name|formatter
parameter_list|,
name|boolean
name|expanMultiTerm
parameter_list|)
block|{
name|Scorer
name|scorer
decl_stmt|;
if|if
condition|(
name|mode
operator|==
name|QUERY
condition|)
block|{
name|scorer
operator|=
operator|new
name|QueryScorer
argument_list|(
name|query
argument_list|,
name|fieldName
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|expanMultiTerm
condition|)
block|{
operator|(
operator|(
name|QueryScorer
operator|)
name|scorer
operator|)
operator|.
name|setExpandMultiTermQuery
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|mode
operator|==
name|QUERY_TERM
condition|)
block|{
name|scorer
operator|=
operator|new
name|QueryTermScorer
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unknown highlight mode"
argument_list|)
throw|;
block|}
return|return
operator|new
name|Highlighter
argument_list|(
name|formatter
argument_list|,
name|scorer
argument_list|)
return|;
block|}
DECL|method|getHighlighter
name|Highlighter
name|getHighlighter
parameter_list|(
name|WeightedTerm
index|[]
name|weightedTerms
parameter_list|,
name|Formatter
name|formatter
parameter_list|)
block|{
if|if
condition|(
name|mode
operator|==
name|QUERY
condition|)
block|{
return|return
operator|new
name|Highlighter
argument_list|(
name|formatter
argument_list|,
operator|new
name|QueryScorer
argument_list|(
operator|(
name|WeightedSpanTerm
index|[]
operator|)
name|weightedTerms
argument_list|)
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|mode
operator|==
name|QUERY_TERM
condition|)
block|{
return|return
operator|new
name|Highlighter
argument_list|(
name|formatter
argument_list|,
operator|new
name|QueryTermScorer
argument_list|(
name|weightedTerms
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unknown highlight mode"
argument_list|)
throw|;
block|}
block|}
DECL|method|doStandardHighlights
name|void
name|doStandardHighlights
parameter_list|(
name|Analyzer
name|analyzer
parameter_list|,
name|IndexSearcher
name|searcher
parameter_list|,
name|TopDocs
name|hits
parameter_list|,
name|Query
name|query
parameter_list|,
name|Formatter
name|formatter
parameter_list|)
throws|throws
name|Exception
block|{
name|doStandardHighlights
argument_list|(
name|analyzer
argument_list|,
name|searcher
argument_list|,
name|hits
argument_list|,
name|query
argument_list|,
name|formatter
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|doStandardHighlights
name|void
name|doStandardHighlights
parameter_list|(
name|Analyzer
name|analyzer
parameter_list|,
name|IndexSearcher
name|searcher
parameter_list|,
name|TopDocs
name|hits
parameter_list|,
name|Query
name|query
parameter_list|,
name|Formatter
name|formatter
parameter_list|,
name|boolean
name|expandMT
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|hits
operator|.
name|totalHits
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|int
name|docId
init|=
name|hits
operator|.
name|scoreDocs
index|[
name|i
index|]
operator|.
name|doc
decl_stmt|;
specifier|final
name|StoredDocument
name|doc
init|=
name|searcher
operator|.
name|doc
argument_list|(
name|docId
argument_list|)
decl_stmt|;
name|String
name|text
init|=
name|doc
operator|.
name|get
argument_list|(
name|HighlighterTest
operator|.
name|FIELD_NAME
argument_list|)
decl_stmt|;
name|int
name|maxNumFragmentsRequired
init|=
literal|2
decl_stmt|;
name|String
name|fragmentSeparator
init|=
literal|"..."
decl_stmt|;
name|Scorer
name|scorer
init|=
literal|null
decl_stmt|;
name|TokenStream
name|tokenStream
init|=
name|TokenSources
operator|.
name|getTokenStream
argument_list|(
name|HighlighterTest
operator|.
name|FIELD_NAME
argument_list|,
name|searcher
operator|.
name|getIndexReader
argument_list|()
operator|.
name|getTermVectors
argument_list|(
name|docId
argument_list|)
argument_list|,
name|text
argument_list|,
name|analyzer
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|mode
operator|==
name|QUERY
condition|)
block|{
name|scorer
operator|=
operator|new
name|QueryScorer
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|mode
operator|==
name|QUERY_TERM
condition|)
block|{
name|scorer
operator|=
operator|new
name|QueryTermScorer
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|}
name|Highlighter
name|highlighter
init|=
operator|new
name|Highlighter
argument_list|(
name|formatter
argument_list|,
name|scorer
argument_list|)
decl_stmt|;
name|highlighter
operator|.
name|setTextFragmenter
argument_list|(
name|frag
argument_list|)
expr_stmt|;
name|String
name|result
init|=
name|highlighter
operator|.
name|getBestFragments
argument_list|(
name|tokenStream
argument_list|,
name|text
argument_list|,
name|maxNumFragmentsRequired
argument_list|,
name|fragmentSeparator
argument_list|)
decl_stmt|;
if|if
condition|(
name|LuceneTestCase
operator|.
name|VERBOSE
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\t"
operator|+
name|result
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|run
specifier|abstract
name|void
name|run
parameter_list|()
throws|throws
name|Exception
function_decl|;
DECL|method|start
name|void
name|start
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|LuceneTestCase
operator|.
name|VERBOSE
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Run QueryScorer"
argument_list|)
expr_stmt|;
name|run
argument_list|()
expr_stmt|;
if|if
condition|(
name|LuceneTestCase
operator|.
name|VERBOSE
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Run QueryTermScorer"
argument_list|)
expr_stmt|;
name|mode
operator|=
name|QUERY_TERM
expr_stmt|;
name|run
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class
end_unit
