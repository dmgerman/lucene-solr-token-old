begin_unit
begin_package
DECL|package|org.apache.lucene.search.postingshighlight
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|postingshighlight
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|text
operator|.
name|BreakIterator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_class
DECL|class|TestWholeBreakIterator
specifier|public
class|class
name|TestWholeBreakIterator
extends|extends
name|LuceneTestCase
block|{
comment|/** For single sentences, we know WholeBreakIterator should break the same as a sentence iterator */
DECL|method|testSingleSentences
specifier|public
name|void
name|testSingleSentences
parameter_list|()
throws|throws
name|Exception
block|{
name|BreakIterator
name|expected
init|=
name|BreakIterator
operator|.
name|getSentenceInstance
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
decl_stmt|;
name|BreakIterator
name|actual
init|=
operator|new
name|WholeBreakIterator
argument_list|()
decl_stmt|;
name|assertSameBreaks
argument_list|(
literal|"a"
argument_list|,
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
name|assertSameBreaks
argument_list|(
literal|"ab"
argument_list|,
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
name|assertSameBreaks
argument_list|(
literal|"abc"
argument_list|,
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
name|assertSameBreaks
argument_list|(
literal|""
argument_list|,
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
comment|/** Asserts that two breakiterators break the text the same way */
comment|// TODO: change this to use offsets with non-zero start/end
DECL|method|assertSameBreaks
specifier|public
name|void
name|assertSameBreaks
parameter_list|(
name|String
name|text
parameter_list|,
name|BreakIterator
name|expected
parameter_list|,
name|BreakIterator
name|actual
parameter_list|)
block|{
name|expected
operator|.
name|setText
argument_list|(
name|text
argument_list|)
expr_stmt|;
name|actual
operator|.
name|setText
argument_list|(
name|text
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|current
argument_list|()
argument_list|,
name|actual
operator|.
name|current
argument_list|()
argument_list|)
expr_stmt|;
comment|// next()
name|int
name|v
init|=
name|expected
operator|.
name|current
argument_list|()
decl_stmt|;
while|while
condition|(
name|v
operator|!=
name|BreakIterator
operator|.
name|DONE
condition|)
block|{
name|assertEquals
argument_list|(
name|v
operator|=
name|expected
operator|.
name|next
argument_list|()
argument_list|,
name|actual
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|current
argument_list|()
argument_list|,
name|actual
operator|.
name|current
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// first()
name|assertEquals
argument_list|(
name|expected
operator|.
name|first
argument_list|()
argument_list|,
name|actual
operator|.
name|first
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|current
argument_list|()
argument_list|,
name|actual
operator|.
name|current
argument_list|()
argument_list|)
expr_stmt|;
comment|// last()
name|assertEquals
argument_list|(
name|expected
operator|.
name|last
argument_list|()
argument_list|,
name|actual
operator|.
name|last
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|current
argument_list|()
argument_list|,
name|actual
operator|.
name|current
argument_list|()
argument_list|)
expr_stmt|;
comment|// previous()
name|v
operator|=
name|expected
operator|.
name|current
argument_list|()
expr_stmt|;
while|while
condition|(
name|v
operator|!=
name|BreakIterator
operator|.
name|DONE
condition|)
block|{
name|assertEquals
argument_list|(
name|v
operator|=
name|expected
operator|.
name|previous
argument_list|()
argument_list|,
name|actual
operator|.
name|previous
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|current
argument_list|()
argument_list|,
name|actual
operator|.
name|current
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// following()
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
name|text
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|expected
operator|.
name|first
argument_list|()
expr_stmt|;
name|actual
operator|.
name|first
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|following
argument_list|(
name|i
argument_list|)
argument_list|,
name|actual
operator|.
name|following
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|current
argument_list|()
argument_list|,
name|actual
operator|.
name|current
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// preceding()
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
name|text
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|expected
operator|.
name|last
argument_list|()
expr_stmt|;
name|actual
operator|.
name|last
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|preceding
argument_list|(
name|i
argument_list|)
argument_list|,
name|actual
operator|.
name|preceding
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|current
argument_list|()
argument_list|,
name|actual
operator|.
name|current
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class
end_unit
