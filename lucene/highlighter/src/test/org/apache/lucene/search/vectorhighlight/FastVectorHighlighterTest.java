begin_unit
begin_package
DECL|package|org.apache.lucene.search.vectorhighlight
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|vectorhighlight
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Analyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|CannedTokenStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|DelegatingAnalyzerWrapper
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|MockAnalyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|MockTokenFilter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|MockTokenizer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Token
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|FieldType
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|StoredField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|TextField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DirectoryReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queries
operator|.
name|CommonTermsQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanClause
operator|.
name|Occur
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanClause
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|PhraseQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TermQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TopDocs
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|highlight
operator|.
name|DefaultEncoder
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|highlight
operator|.
name|Encoder
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|automaton
operator|.
name|CharacterRunAutomaton
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|automaton
operator|.
name|RegExp
import|;
end_import
begin_class
DECL|class|FastVectorHighlighterTest
specifier|public
class|class
name|FastVectorHighlighterTest
extends|extends
name|LuceneTestCase
block|{
DECL|method|testSimpleHighlightTest
specifier|public
name|void
name|testSimpleHighlightTest
parameter_list|()
throws|throws
name|IOException
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|newIndexWriterConfig
argument_list|(
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|FieldType
name|type
init|=
operator|new
name|FieldType
argument_list|(
name|TextField
operator|.
name|TYPE_STORED
argument_list|)
decl_stmt|;
name|type
operator|.
name|setStoreTermVectorOffsets
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|type
operator|.
name|setStoreTermVectorPositions
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|type
operator|.
name|setStoreTermVectors
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|type
operator|.
name|freeze
argument_list|()
expr_stmt|;
name|Field
name|field
init|=
operator|new
name|Field
argument_list|(
literal|"field"
argument_list|,
literal|"This is a test where foo is highlighed and should be highlighted"
argument_list|,
name|type
argument_list|)
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|FastVectorHighlighter
name|highlighter
init|=
operator|new
name|FastVectorHighlighter
argument_list|()
decl_stmt|;
name|IndexReader
name|reader
init|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|writer
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|int
name|docId
init|=
literal|0
decl_stmt|;
name|FieldQuery
name|fieldQuery
init|=
name|highlighter
operator|.
name|getFieldQuery
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"foo"
argument_list|)
argument_list|)
argument_list|,
name|reader
argument_list|)
decl_stmt|;
name|String
index|[]
name|bestFragments
init|=
name|highlighter
operator|.
name|getBestFragments
argument_list|(
name|fieldQuery
argument_list|,
name|reader
argument_list|,
name|docId
argument_list|,
literal|"field"
argument_list|,
literal|54
argument_list|,
literal|1
argument_list|)
decl_stmt|;
comment|// highlighted results are centered
name|assertEquals
argument_list|(
literal|"This is a test where<b>foo</b> is highlighed and should be highlighted"
argument_list|,
name|bestFragments
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|bestFragments
operator|=
name|highlighter
operator|.
name|getBestFragments
argument_list|(
name|fieldQuery
argument_list|,
name|reader
argument_list|,
name|docId
argument_list|,
literal|"field"
argument_list|,
literal|52
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"This is a test where<b>foo</b> is highlighed and should be"
argument_list|,
name|bestFragments
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|bestFragments
operator|=
name|highlighter
operator|.
name|getBestFragments
argument_list|(
name|fieldQuery
argument_list|,
name|reader
argument_list|,
name|docId
argument_list|,
literal|"field"
argument_list|,
literal|30
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a test where<b>foo</b> is highlighed"
argument_list|,
name|bestFragments
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|writer
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testPhraseHighlightLongTextTest
specifier|public
name|void
name|testPhraseHighlightLongTextTest
parameter_list|()
throws|throws
name|IOException
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|newIndexWriterConfig
argument_list|(
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|FieldType
name|type
init|=
operator|new
name|FieldType
argument_list|(
name|TextField
operator|.
name|TYPE_STORED
argument_list|)
decl_stmt|;
name|type
operator|.
name|setStoreTermVectorOffsets
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|type
operator|.
name|setStoreTermVectorPositions
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|type
operator|.
name|setStoreTermVectors
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|type
operator|.
name|freeze
argument_list|()
expr_stmt|;
name|Field
name|text
init|=
operator|new
name|Field
argument_list|(
literal|"text"
argument_list|,
literal|"Netscape was the general name for a series of web browsers originally produced by Netscape Communications Corporation, now a subsidiary of AOL The original browser was once the dominant browser in terms of usage share, but as a result of the first browser war it lost virtually all of its share to Internet Explorer Netscape was discontinued and support for all Netscape browsers and client products was terminated on March 1, 2008 Netscape Navigator was the name of Netscape\u0027s web browser from versions 1.0 through 4.8 The first beta release versions of the browser were released in 1994 and known as Mosaic and then Mosaic Netscape until a legal challenge from the National Center for Supercomputing Applications (makers of NCSA Mosaic, which many of Netscape\u0027s founders used to develop), led to the name change to Netscape Navigator The company\u0027s name also changed from Mosaic Communications Corporation to Netscape Communications Corporation The browser was easily the most advanced..."
argument_list|,
name|type
argument_list|)
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|text
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|FastVectorHighlighter
name|highlighter
init|=
operator|new
name|FastVectorHighlighter
argument_list|()
decl_stmt|;
name|IndexReader
name|reader
init|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|writer
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|int
name|docId
init|=
literal|0
decl_stmt|;
name|String
name|field
init|=
literal|"text"
decl_stmt|;
block|{
name|BooleanQuery
name|query
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
name|query
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|field
argument_list|,
literal|"internet"
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|query
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|field
argument_list|,
literal|"explorer"
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|FieldQuery
name|fieldQuery
init|=
name|highlighter
operator|.
name|getFieldQuery
argument_list|(
name|query
argument_list|,
name|reader
argument_list|)
decl_stmt|;
name|String
index|[]
name|bestFragments
init|=
name|highlighter
operator|.
name|getBestFragments
argument_list|(
name|fieldQuery
argument_list|,
name|reader
argument_list|,
name|docId
argument_list|,
name|field
argument_list|,
literal|128
argument_list|,
literal|1
argument_list|)
decl_stmt|;
comment|// highlighted results are centered
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|bestFragments
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"first browser war it lost virtually all of its share to<b>Internet</b><b>Explorer</b> Netscape was discontinued and support for all Netscape browsers"
argument_list|,
name|bestFragments
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
block|{
name|PhraseQuery
name|query
init|=
operator|new
name|PhraseQuery
argument_list|()
decl_stmt|;
name|query
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
name|field
argument_list|,
literal|"internet"
argument_list|)
argument_list|)
expr_stmt|;
name|query
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
name|field
argument_list|,
literal|"explorer"
argument_list|)
argument_list|)
expr_stmt|;
name|FieldQuery
name|fieldQuery
init|=
name|highlighter
operator|.
name|getFieldQuery
argument_list|(
name|query
argument_list|,
name|reader
argument_list|)
decl_stmt|;
name|String
index|[]
name|bestFragments
init|=
name|highlighter
operator|.
name|getBestFragments
argument_list|(
name|fieldQuery
argument_list|,
name|reader
argument_list|,
name|docId
argument_list|,
name|field
argument_list|,
literal|128
argument_list|,
literal|1
argument_list|)
decl_stmt|;
comment|// highlighted results are centered
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|bestFragments
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"first browser war it lost virtually all of its share to<b>Internet Explorer</b> Netscape was discontinued and support for all Netscape browsers"
argument_list|,
name|bestFragments
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|writer
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// see LUCENE-4899
DECL|method|testPhraseHighlightTest
specifier|public
name|void
name|testPhraseHighlightTest
parameter_list|()
throws|throws
name|IOException
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|newIndexWriterConfig
argument_list|(
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|FieldType
name|type
init|=
operator|new
name|FieldType
argument_list|(
name|TextField
operator|.
name|TYPE_STORED
argument_list|)
decl_stmt|;
name|type
operator|.
name|setStoreTermVectorOffsets
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|type
operator|.
name|setStoreTermVectorPositions
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|type
operator|.
name|setStoreTermVectors
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|type
operator|.
name|freeze
argument_list|()
expr_stmt|;
name|Field
name|longTermField
init|=
operator|new
name|Field
argument_list|(
literal|"long_term"
argument_list|,
literal|"This is a test thisisaverylongwordandmakessurethisfails where foo is highlighed and should be highlighted"
argument_list|,
name|type
argument_list|)
decl_stmt|;
name|Field
name|noLongTermField
init|=
operator|new
name|Field
argument_list|(
literal|"no_long_term"
argument_list|,
literal|"This is a test where foo is highlighed and should be highlighted"
argument_list|,
name|type
argument_list|)
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|longTermField
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|noLongTermField
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|FastVectorHighlighter
name|highlighter
init|=
operator|new
name|FastVectorHighlighter
argument_list|()
decl_stmt|;
name|IndexReader
name|reader
init|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|writer
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|int
name|docId
init|=
literal|0
decl_stmt|;
name|String
name|field
init|=
literal|"no_long_term"
decl_stmt|;
block|{
name|BooleanQuery
name|query
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
name|query
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|field
argument_list|,
literal|"test"
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|query
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|field
argument_list|,
literal|"foo"
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|query
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|field
argument_list|,
literal|"highlighed"
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|FieldQuery
name|fieldQuery
init|=
name|highlighter
operator|.
name|getFieldQuery
argument_list|(
name|query
argument_list|,
name|reader
argument_list|)
decl_stmt|;
name|String
index|[]
name|bestFragments
init|=
name|highlighter
operator|.
name|getBestFragments
argument_list|(
name|fieldQuery
argument_list|,
name|reader
argument_list|,
name|docId
argument_list|,
name|field
argument_list|,
literal|18
argument_list|,
literal|1
argument_list|)
decl_stmt|;
comment|// highlighted results are centered
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|bestFragments
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"<b>foo</b> is<b>highlighed</b> and"
argument_list|,
name|bestFragments
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
block|{
name|BooleanQuery
name|query
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
name|PhraseQuery
name|pq
init|=
operator|new
name|PhraseQuery
argument_list|()
decl_stmt|;
name|pq
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
name|field
argument_list|,
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
name|pq
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
name|field
argument_list|,
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|pq
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
name|field
argument_list|,
literal|"highlighed"
argument_list|)
argument_list|)
expr_stmt|;
name|pq
operator|.
name|setSlop
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|query
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|field
argument_list|,
literal|"foo"
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|query
operator|.
name|add
argument_list|(
name|pq
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|query
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|field
argument_list|,
literal|"highlighed"
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|FieldQuery
name|fieldQuery
init|=
name|highlighter
operator|.
name|getFieldQuery
argument_list|(
name|query
argument_list|,
name|reader
argument_list|)
decl_stmt|;
name|String
index|[]
name|bestFragments
init|=
name|highlighter
operator|.
name|getBestFragments
argument_list|(
name|fieldQuery
argument_list|,
name|reader
argument_list|,
name|docId
argument_list|,
name|field
argument_list|,
literal|18
argument_list|,
literal|1
argument_list|)
decl_stmt|;
comment|// highlighted results are centered
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|bestFragments
operator|.
name|length
argument_list|)
expr_stmt|;
name|bestFragments
operator|=
name|highlighter
operator|.
name|getBestFragments
argument_list|(
name|fieldQuery
argument_list|,
name|reader
argument_list|,
name|docId
argument_list|,
name|field
argument_list|,
literal|30
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// highlighted results are centered
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|bestFragments
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a<b>test</b> where<b>foo</b> is<b>highlighed</b> and"
argument_list|,
name|bestFragments
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
block|{
name|PhraseQuery
name|query
init|=
operator|new
name|PhraseQuery
argument_list|()
decl_stmt|;
name|query
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
name|field
argument_list|,
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
name|query
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
name|field
argument_list|,
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|query
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
name|field
argument_list|,
literal|"highlighed"
argument_list|)
argument_list|)
expr_stmt|;
name|query
operator|.
name|setSlop
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|FieldQuery
name|fieldQuery
init|=
name|highlighter
operator|.
name|getFieldQuery
argument_list|(
name|query
argument_list|,
name|reader
argument_list|)
decl_stmt|;
name|String
index|[]
name|bestFragments
init|=
name|highlighter
operator|.
name|getBestFragments
argument_list|(
name|fieldQuery
argument_list|,
name|reader
argument_list|,
name|docId
argument_list|,
name|field
argument_list|,
literal|18
argument_list|,
literal|1
argument_list|)
decl_stmt|;
comment|// highlighted results are centered
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|bestFragments
operator|.
name|length
argument_list|)
expr_stmt|;
name|bestFragments
operator|=
name|highlighter
operator|.
name|getBestFragments
argument_list|(
name|fieldQuery
argument_list|,
name|reader
argument_list|,
name|docId
argument_list|,
name|field
argument_list|,
literal|30
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// highlighted results are centered
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|bestFragments
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a<b>test</b> where<b>foo</b> is<b>highlighed</b> and"
argument_list|,
name|bestFragments
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
block|{
name|PhraseQuery
name|query
init|=
operator|new
name|PhraseQuery
argument_list|()
decl_stmt|;
name|query
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
name|field
argument_list|,
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
name|query
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
name|field
argument_list|,
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|query
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
name|field
argument_list|,
literal|"highlighted"
argument_list|)
argument_list|)
expr_stmt|;
name|query
operator|.
name|setSlop
argument_list|(
literal|30
argument_list|)
expr_stmt|;
name|FieldQuery
name|fieldQuery
init|=
name|highlighter
operator|.
name|getFieldQuery
argument_list|(
name|query
argument_list|,
name|reader
argument_list|)
decl_stmt|;
name|String
index|[]
name|bestFragments
init|=
name|highlighter
operator|.
name|getBestFragments
argument_list|(
name|fieldQuery
argument_list|,
name|reader
argument_list|,
name|docId
argument_list|,
name|field
argument_list|,
literal|18
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|bestFragments
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
block|{
name|BooleanQuery
name|query
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
name|PhraseQuery
name|pq
init|=
operator|new
name|PhraseQuery
argument_list|()
decl_stmt|;
name|pq
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
name|field
argument_list|,
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
name|pq
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
name|field
argument_list|,
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|pq
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
name|field
argument_list|,
literal|"highlighed"
argument_list|)
argument_list|)
expr_stmt|;
name|pq
operator|.
name|setSlop
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|BooleanQuery
name|inner
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
name|inner
operator|.
name|add
argument_list|(
name|pq
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|inner
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|field
argument_list|,
literal|"foo"
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|query
operator|.
name|add
argument_list|(
name|inner
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|query
operator|.
name|add
argument_list|(
name|pq
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|query
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|field
argument_list|,
literal|"highlighed"
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|FieldQuery
name|fieldQuery
init|=
name|highlighter
operator|.
name|getFieldQuery
argument_list|(
name|query
argument_list|,
name|reader
argument_list|)
decl_stmt|;
name|String
index|[]
name|bestFragments
init|=
name|highlighter
operator|.
name|getBestFragments
argument_list|(
name|fieldQuery
argument_list|,
name|reader
argument_list|,
name|docId
argument_list|,
name|field
argument_list|,
literal|18
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|bestFragments
operator|.
name|length
argument_list|)
expr_stmt|;
name|bestFragments
operator|=
name|highlighter
operator|.
name|getBestFragments
argument_list|(
name|fieldQuery
argument_list|,
name|reader
argument_list|,
name|docId
argument_list|,
name|field
argument_list|,
literal|30
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// highlighted results are centered
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|bestFragments
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a<b>test</b> where<b>foo</b> is<b>highlighed</b> and"
argument_list|,
name|bestFragments
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
name|field
operator|=
literal|"long_term"
expr_stmt|;
block|{
name|BooleanQuery
name|query
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
name|query
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|field
argument_list|,
literal|"thisisaverylongwordandmakessurethisfails"
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|query
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|field
argument_list|,
literal|"foo"
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|query
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|field
argument_list|,
literal|"highlighed"
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|FieldQuery
name|fieldQuery
init|=
name|highlighter
operator|.
name|getFieldQuery
argument_list|(
name|query
argument_list|,
name|reader
argument_list|)
decl_stmt|;
name|String
index|[]
name|bestFragments
init|=
name|highlighter
operator|.
name|getBestFragments
argument_list|(
name|fieldQuery
argument_list|,
name|reader
argument_list|,
name|docId
argument_list|,
name|field
argument_list|,
literal|18
argument_list|,
literal|1
argument_list|)
decl_stmt|;
comment|// highlighted results are centered
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|bestFragments
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"<b>thisisaverylongwordandmakessurethisfails</b>"
argument_list|,
name|bestFragments
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|writer
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testBoostedPhraseHighlightTest
specifier|public
name|void
name|testBoostedPhraseHighlightTest
parameter_list|()
throws|throws
name|IOException
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|newIndexWriterConfig
argument_list|(
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|FieldType
name|type
init|=
operator|new
name|FieldType
argument_list|(
name|TextField
operator|.
name|TYPE_STORED
argument_list|)
decl_stmt|;
name|type
operator|.
name|setStoreTermVectorOffsets
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|type
operator|.
name|setStoreTermVectorPositions
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|type
operator|.
name|setStoreTermVectors
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|type
operator|.
name|freeze
argument_list|()
expr_stmt|;
name|StringBuilder
name|text
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|text
operator|.
name|append
argument_list|(
literal|"words words junk junk junk junk junk junk junk junk highlight junk junk junk junk together junk "
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|text
operator|.
name|append
argument_list|(
literal|"junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk "
argument_list|)
expr_stmt|;
block|}
name|text
operator|.
name|append
argument_list|(
literal|"highlight words together "
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|text
operator|.
name|append
argument_list|(
literal|"junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk "
argument_list|)
expr_stmt|;
block|}
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"text"
argument_list|,
name|text
operator|.
name|toString
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|,
name|type
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|FastVectorHighlighter
name|highlighter
init|=
operator|new
name|FastVectorHighlighter
argument_list|()
decl_stmt|;
name|IndexReader
name|reader
init|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|writer
argument_list|,
literal|true
argument_list|)
decl_stmt|;
comment|// This mimics what some query parsers do to<highlight words together>
name|BooleanQuery
name|terms
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
name|terms
operator|.
name|add
argument_list|(
name|clause
argument_list|(
literal|"text"
argument_list|,
literal|"highlight"
argument_list|)
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|terms
operator|.
name|add
argument_list|(
name|clause
argument_list|(
literal|"text"
argument_list|,
literal|"words"
argument_list|)
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|terms
operator|.
name|add
argument_list|(
name|clause
argument_list|(
literal|"text"
argument_list|,
literal|"together"
argument_list|)
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
comment|// This mimics what some query parsers do to<"highlight words together">
name|BooleanQuery
name|phrase
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
name|phrase
operator|.
name|add
argument_list|(
name|clause
argument_list|(
literal|"text"
argument_list|,
literal|"highlight"
argument_list|,
literal|"words"
argument_list|,
literal|"together"
argument_list|)
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|phrase
operator|.
name|setBoost
argument_list|(
literal|100
argument_list|)
expr_stmt|;
comment|// Now combine those results in a boolean query which should pull the phrases to the front of the list of fragments
name|BooleanQuery
name|query
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
name|query
operator|.
name|add
argument_list|(
name|phrase
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|query
operator|.
name|add
argument_list|(
name|phrase
argument_list|,
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|FieldQuery
name|fieldQuery
init|=
operator|new
name|FieldQuery
argument_list|(
name|query
argument_list|,
name|reader
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|String
name|fragment
init|=
name|highlighter
operator|.
name|getBestFragment
argument_list|(
name|fieldQuery
argument_list|,
name|reader
argument_list|,
literal|0
argument_list|,
literal|"text"
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"junk junk junk junk junk junk junk junk<b>highlight words together</b> junk junk junk junk junk junk junk junk"
argument_list|,
name|fragment
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|writer
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testCommonTermsQueryHighlight
specifier|public
name|void
name|testCommonTermsQueryHighlight
parameter_list|()
throws|throws
name|IOException
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|newIndexWriterConfig
argument_list|(
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|,
name|MockTokenizer
operator|.
name|SIMPLE
argument_list|,
literal|true
argument_list|,
name|MockTokenFilter
operator|.
name|ENGLISH_STOPSET
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|FieldType
name|type
init|=
operator|new
name|FieldType
argument_list|(
name|TextField
operator|.
name|TYPE_STORED
argument_list|)
decl_stmt|;
name|type
operator|.
name|setStoreTermVectorOffsets
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|type
operator|.
name|setStoreTermVectorPositions
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|type
operator|.
name|setStoreTermVectors
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|type
operator|.
name|freeze
argument_list|()
expr_stmt|;
name|String
index|[]
name|texts
init|=
block|{
literal|"Hello this is a piece of text that is very long and contains too much preamble and the meat is really here which says kennedy has been shot"
block|,
literal|"This piece of text refers to Kennedy at the beginning then has a longer piece of text that is very long in the middle and finally ends with another reference to Kennedy"
block|,
literal|"JFK has been shot"
block|,
literal|"John Kennedy has been shot"
block|,
literal|"This text has a typo in referring to Keneddy"
block|,
literal|"wordx wordy wordz wordx wordy wordx worda wordb wordy wordc"
block|,
literal|"y z x y z a b"
block|,
literal|"lets is a the lets is a the lets is a the lets"
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|texts
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|Field
name|field
init|=
operator|new
name|Field
argument_list|(
literal|"field"
argument_list|,
name|texts
index|[
name|i
index|]
argument_list|,
name|type
argument_list|)
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
name|CommonTermsQuery
name|query
init|=
operator|new
name|CommonTermsQuery
argument_list|(
name|Occur
operator|.
name|MUST
argument_list|,
name|Occur
operator|.
name|SHOULD
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|query
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"text"
argument_list|)
argument_list|)
expr_stmt|;
name|query
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"long"
argument_list|)
argument_list|)
expr_stmt|;
name|query
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"very"
argument_list|)
argument_list|)
expr_stmt|;
name|FastVectorHighlighter
name|highlighter
init|=
operator|new
name|FastVectorHighlighter
argument_list|()
decl_stmt|;
name|IndexReader
name|reader
init|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|writer
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|IndexSearcher
name|searcher
init|=
name|newSearcher
argument_list|(
name|reader
argument_list|)
decl_stmt|;
name|TopDocs
name|hits
init|=
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|hits
operator|.
name|totalHits
argument_list|)
expr_stmt|;
name|FieldQuery
name|fieldQuery
init|=
name|highlighter
operator|.
name|getFieldQuery
argument_list|(
name|query
argument_list|,
name|reader
argument_list|)
decl_stmt|;
name|String
index|[]
name|bestFragments
init|=
name|highlighter
operator|.
name|getBestFragments
argument_list|(
name|fieldQuery
argument_list|,
name|reader
argument_list|,
name|hits
operator|.
name|scoreDocs
index|[
literal|0
index|]
operator|.
name|doc
argument_list|,
literal|"field"
argument_list|,
literal|1000
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"This piece of<b>text</b> refers to Kennedy at the beginning then has a longer piece of<b>text</b> that is<b>very</b><b>long</b> in the middle and finally ends with another reference to Kennedy"
argument_list|,
name|bestFragments
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|fieldQuery
operator|=
name|highlighter
operator|.
name|getFieldQuery
argument_list|(
name|query
argument_list|,
name|reader
argument_list|)
expr_stmt|;
name|bestFragments
operator|=
name|highlighter
operator|.
name|getBestFragments
argument_list|(
name|fieldQuery
argument_list|,
name|reader
argument_list|,
name|hits
operator|.
name|scoreDocs
index|[
literal|1
index|]
operator|.
name|doc
argument_list|,
literal|"field"
argument_list|,
literal|1000
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Hello this is a piece of<b>text</b> that is<b>very</b><b>long</b> and contains too much preamble and the meat is really here which says kennedy has been shot"
argument_list|,
name|bestFragments
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|writer
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testMatchedFields
specifier|public
name|void
name|testMatchedFields
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Searching just on the stored field doesn't highlight a stopword
name|matchedFieldsTestCase
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
literal|"a match"
argument_list|,
literal|"a<b>match</b>"
argument_list|,
name|clause
argument_list|(
literal|"field"
argument_list|,
literal|"a"
argument_list|)
argument_list|,
name|clause
argument_list|(
literal|"field"
argument_list|,
literal|"match"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Even if you add an unqueried matched field that would match it
name|matchedFieldsTestCase
argument_list|(
literal|"a match"
argument_list|,
literal|"a<b>match</b>"
argument_list|,
name|clause
argument_list|(
literal|"field"
argument_list|,
literal|"a"
argument_list|)
argument_list|,
name|clause
argument_list|(
literal|"field"
argument_list|,
literal|"match"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Nor if you query the field but don't add it as a matched field to the highlighter
name|matchedFieldsTestCase
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
literal|"a match"
argument_list|,
literal|"a<b>match</b>"
argument_list|,
name|clause
argument_list|(
literal|"field_exact"
argument_list|,
literal|"a"
argument_list|)
argument_list|,
name|clause
argument_list|(
literal|"field"
argument_list|,
literal|"match"
argument_list|)
argument_list|)
expr_stmt|;
comment|// But if you query the field and add it as a matched field to the highlighter then it is highlighted
name|matchedFieldsTestCase
argument_list|(
literal|"a match"
argument_list|,
literal|"<b>a</b><b>match</b>"
argument_list|,
name|clause
argument_list|(
literal|"field_exact"
argument_list|,
literal|"a"
argument_list|)
argument_list|,
name|clause
argument_list|(
literal|"field"
argument_list|,
literal|"match"
argument_list|)
argument_list|)
expr_stmt|;
comment|// It is also ok to match just the matched field but get highlighting from the stored field
name|matchedFieldsTestCase
argument_list|(
literal|"a match"
argument_list|,
literal|"<b>a</b><b>match</b>"
argument_list|,
name|clause
argument_list|(
literal|"field_exact"
argument_list|,
literal|"a"
argument_list|)
argument_list|,
name|clause
argument_list|(
literal|"field_exact"
argument_list|,
literal|"match"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Boosted matched fields work too
name|matchedFieldsTestCase
argument_list|(
literal|"a match"
argument_list|,
literal|"<b>a</b><b>match</b>"
argument_list|,
name|clause
argument_list|(
literal|"field_exact"
argument_list|,
literal|5
argument_list|,
literal|"a"
argument_list|)
argument_list|,
name|clause
argument_list|(
literal|"field"
argument_list|,
literal|"match"
argument_list|)
argument_list|)
expr_stmt|;
comment|// It is also ok if both the stored and the matched field match the term
name|matchedFieldsTestCase
argument_list|(
literal|"a match"
argument_list|,
literal|"a<b>match</b>"
argument_list|,
name|clause
argument_list|(
literal|"field_exact"
argument_list|,
literal|"match"
argument_list|)
argument_list|,
name|clause
argument_list|(
literal|"field"
argument_list|,
literal|"match"
argument_list|)
argument_list|)
expr_stmt|;
comment|// And the highlighter respects the boosts on matched fields when sorting fragments
name|matchedFieldsTestCase
argument_list|(
literal|"cat cat junk junk junk junk junk junk junk a cat junk junk"
argument_list|,
literal|"junk junk<b>a cat</b> junk junk"
argument_list|,
name|clause
argument_list|(
literal|"field"
argument_list|,
literal|"cat"
argument_list|)
argument_list|,
name|clause
argument_list|(
literal|"field_exact"
argument_list|,
literal|5
argument_list|,
literal|"a"
argument_list|,
literal|"cat"
argument_list|)
argument_list|)
expr_stmt|;
name|matchedFieldsTestCase
argument_list|(
literal|"cat cat junk junk junk junk junk junk junk a cat junk junk"
argument_list|,
literal|"<b>cat</b><b>cat</b> junk junk junk junk"
argument_list|,
name|clause
argument_list|(
literal|"field"
argument_list|,
literal|"cat"
argument_list|)
argument_list|,
name|clause
argument_list|(
literal|"field_exact"
argument_list|,
literal|"a"
argument_list|,
literal|"cat"
argument_list|)
argument_list|)
expr_stmt|;
comment|// The same thing works across three fields as well
name|matchedFieldsTestCase
argument_list|(
literal|"cat cat CAT junk junk junk junk junk junk junk a cat junk junk"
argument_list|,
literal|"junk junk<b>a cat</b> junk junk"
argument_list|,
name|clause
argument_list|(
literal|"field"
argument_list|,
literal|"cat"
argument_list|)
argument_list|,
name|clause
argument_list|(
literal|"field_exact"
argument_list|,
literal|200
argument_list|,
literal|"a"
argument_list|,
literal|"cat"
argument_list|)
argument_list|,
name|clause
argument_list|(
literal|"field_super_exact"
argument_list|,
literal|5
argument_list|,
literal|"CAT"
argument_list|)
argument_list|)
expr_stmt|;
name|matchedFieldsTestCase
argument_list|(
literal|"a cat cat junk junk junk junk junk junk junk a CAT junk junk"
argument_list|,
literal|"junk junk<b>a CAT</b> junk junk"
argument_list|,
name|clause
argument_list|(
literal|"field"
argument_list|,
literal|"cat"
argument_list|)
argument_list|,
name|clause
argument_list|(
literal|"field_exact"
argument_list|,
literal|5
argument_list|,
literal|"a"
argument_list|,
literal|"cat"
argument_list|)
argument_list|,
name|clause
argument_list|(
literal|"field_super_exact"
argument_list|,
literal|200
argument_list|,
literal|"a"
argument_list|,
literal|"CAT"
argument_list|)
argument_list|)
expr_stmt|;
comment|// And across fields with different tokenizers!
name|matchedFieldsTestCase
argument_list|(
literal|"cat cat junk junk junk junk junk junk junk a cat junk junk"
argument_list|,
literal|"junk junk<b>a cat</b> junk junk"
argument_list|,
name|clause
argument_list|(
literal|"field_exact"
argument_list|,
literal|5
argument_list|,
literal|"a"
argument_list|,
literal|"cat"
argument_list|)
argument_list|,
name|clause
argument_list|(
literal|"field_characters"
argument_list|,
literal|"c"
argument_list|)
argument_list|)
expr_stmt|;
name|matchedFieldsTestCase
argument_list|(
literal|"cat cat junk junk junk junk junk junk junk a cat junk junk"
argument_list|,
literal|"<b>c</b>at<b>c</b>at junk junk junk junk"
argument_list|,
name|clause
argument_list|(
literal|"field_exact"
argument_list|,
literal|"a"
argument_list|,
literal|"cat"
argument_list|)
argument_list|,
name|clause
argument_list|(
literal|"field_characters"
argument_list|,
literal|"c"
argument_list|)
argument_list|)
expr_stmt|;
name|matchedFieldsTestCase
argument_list|(
literal|"cat cat junk junk junk junk junk junk junk a cat junk junk"
argument_list|,
literal|"ca<b>t</b> ca<b>t</b> junk junk junk junk"
argument_list|,
name|clause
argument_list|(
literal|"field_exact"
argument_list|,
literal|"a"
argument_list|,
literal|"cat"
argument_list|)
argument_list|,
name|clause
argument_list|(
literal|"field_characters"
argument_list|,
literal|"t"
argument_list|)
argument_list|)
expr_stmt|;
name|matchedFieldsTestCase
argument_list|(
literal|"cat cat junk junk junk junk junk junk junk a cat junk junk"
argument_list|,
literal|"<b>cat</b><b>cat</b> junk junk junk junk"
argument_list|,
comment|// See how the phrases are joined?
name|clause
argument_list|(
literal|"field"
argument_list|,
literal|"cat"
argument_list|)
argument_list|,
name|clause
argument_list|(
literal|"field_characters"
argument_list|,
literal|5
argument_list|,
literal|"c"
argument_list|)
argument_list|)
expr_stmt|;
name|matchedFieldsTestCase
argument_list|(
literal|"cat cat junk junk junk junk junk junk junk a cat junk junk"
argument_list|,
literal|"junk junk<b>a cat</b> junk junk"
argument_list|,
name|clause
argument_list|(
literal|"field"
argument_list|,
literal|"cat"
argument_list|)
argument_list|,
name|clause
argument_list|(
literal|"field_characters"
argument_list|,
literal|5
argument_list|,
literal|"a"
argument_list|,
literal|" "
argument_list|,
literal|"c"
argument_list|,
literal|"a"
argument_list|,
literal|"t"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Phrases and tokens inside one another are joined
name|matchedFieldsTestCase
argument_list|(
literal|"cats wow"
argument_list|,
literal|"<b>cats w</b>ow"
argument_list|,
name|clause
argument_list|(
literal|"field"
argument_list|,
literal|"cats"
argument_list|)
argument_list|,
name|clause
argument_list|(
literal|"field_tripples"
argument_list|,
literal|"s w"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Everything works pretty well even if you don't require a field match
name|matchedFieldsTestCase
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
literal|"cat cat junk junk junk junk junk junk junk a cat junk junk"
argument_list|,
literal|"junk junk<b>a cat</b> junk junk"
argument_list|,
name|clause
argument_list|(
literal|"field"
argument_list|,
literal|"cat"
argument_list|)
argument_list|,
name|clause
argument_list|(
literal|"field_characters"
argument_list|,
literal|10
argument_list|,
literal|"a"
argument_list|,
literal|" "
argument_list|,
literal|"c"
argument_list|,
literal|"a"
argument_list|,
literal|"t"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Even boosts keep themselves pretty much intact
name|matchedFieldsTestCase
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
literal|"a cat cat junk junk junk junk junk junk junk a CAT junk junk"
argument_list|,
literal|"junk junk<b>a CAT</b> junk junk"
argument_list|,
name|clause
argument_list|(
literal|"field"
argument_list|,
literal|"cat"
argument_list|)
argument_list|,
name|clause
argument_list|(
literal|"field_exact"
argument_list|,
literal|5
argument_list|,
literal|"a"
argument_list|,
literal|"cat"
argument_list|)
argument_list|,
name|clause
argument_list|(
literal|"field_super_exact"
argument_list|,
literal|200
argument_list|,
literal|"a"
argument_list|,
literal|"CAT"
argument_list|)
argument_list|)
expr_stmt|;
name|matchedFieldsTestCase
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
literal|"cat cat CAT junk junk junk junk junk junk junk a cat junk junk"
argument_list|,
literal|"junk junk<b>a cat</b> junk junk"
argument_list|,
name|clause
argument_list|(
literal|"field"
argument_list|,
literal|"cat"
argument_list|)
argument_list|,
name|clause
argument_list|(
literal|"field_exact"
argument_list|,
literal|200
argument_list|,
literal|"a"
argument_list|,
literal|"cat"
argument_list|)
argument_list|,
name|clause
argument_list|(
literal|"field_super_exact"
argument_list|,
literal|5
argument_list|,
literal|"CAT"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Except that all the matched field matches apply even if they aren't mentioned in the query
comment|// which can make for some confusing scoring.  This isn't too big a deal, just something you
comment|// need to think about when you don't force a field match.
name|matchedFieldsTestCase
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
literal|"cat cat junk junk junk junk junk junk junk a cat junk junk"
argument_list|,
literal|"<b>cat</b><b>cat</b> junk junk junk junk"
argument_list|,
name|clause
argument_list|(
literal|"field"
argument_list|,
literal|"cat"
argument_list|)
argument_list|,
name|clause
argument_list|(
literal|"field_characters"
argument_list|,
literal|4
argument_list|,
literal|"a"
argument_list|,
literal|" "
argument_list|,
literal|"c"
argument_list|,
literal|"a"
argument_list|,
literal|"t"
argument_list|)
argument_list|)
expr_stmt|;
comment|// It is also cool to match fields that don't have _exactly_ the same text so long as you are careful.
comment|// In this case field_sliced is a prefix of field.
name|matchedFieldsTestCase
argument_list|(
literal|"cat cat junk junk junk junk junk junk junk a cat junk junk"
argument_list|,
literal|"<b>cat</b><b>cat</b> junk junk junk junk"
argument_list|,
name|clause
argument_list|(
literal|"field_sliced"
argument_list|,
literal|"cat"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Multiple matches add to the score of the segment
name|matchedFieldsTestCase
argument_list|(
literal|"cat cat junk junk junk junk junk junk junk a cat junk junk"
argument_list|,
literal|"<b>cat</b><b>cat</b> junk junk junk junk"
argument_list|,
name|clause
argument_list|(
literal|"field"
argument_list|,
literal|"cat"
argument_list|)
argument_list|,
name|clause
argument_list|(
literal|"field_sliced"
argument_list|,
literal|"cat"
argument_list|)
argument_list|,
name|clause
argument_list|(
literal|"field_exact"
argument_list|,
literal|2
argument_list|,
literal|"a"
argument_list|,
literal|"cat"
argument_list|)
argument_list|)
expr_stmt|;
name|matchedFieldsTestCase
argument_list|(
literal|"cat cat junk junk junk junk junk junk junk a cat junk junk"
argument_list|,
literal|"junk junk<b>a cat</b> junk junk"
argument_list|,
name|clause
argument_list|(
literal|"field"
argument_list|,
literal|"cat"
argument_list|)
argument_list|,
name|clause
argument_list|(
literal|"field_sliced"
argument_list|,
literal|"cat"
argument_list|)
argument_list|,
name|clause
argument_list|(
literal|"field_exact"
argument_list|,
literal|4
argument_list|,
literal|"a"
argument_list|,
literal|"cat"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Even fields with tokens on top of one another are ok
name|matchedFieldsTestCase
argument_list|(
literal|"cat cat junk junk junk junk junk junk junk a cat junk junk"
argument_list|,
literal|"<b>cat</b> cat junk junk junk junk"
argument_list|,
name|clause
argument_list|(
literal|"field_der_red"
argument_list|,
literal|2
argument_list|,
literal|"der"
argument_list|)
argument_list|,
name|clause
argument_list|(
literal|"field_exact"
argument_list|,
literal|"a"
argument_list|,
literal|"cat"
argument_list|)
argument_list|)
expr_stmt|;
name|matchedFieldsTestCase
argument_list|(
literal|"cat cat junk junk junk junk junk junk junk a cat junk junk"
argument_list|,
literal|"<b>cat</b> cat junk junk junk junk"
argument_list|,
name|clause
argument_list|(
literal|"field_der_red"
argument_list|,
literal|2
argument_list|,
literal|"red"
argument_list|)
argument_list|,
name|clause
argument_list|(
literal|"field_exact"
argument_list|,
literal|"a"
argument_list|,
literal|"cat"
argument_list|)
argument_list|)
expr_stmt|;
name|matchedFieldsTestCase
argument_list|(
literal|"cat cat junk junk junk junk junk junk junk a cat junk junk"
argument_list|,
literal|"<b>cat</b> cat junk junk junk junk"
argument_list|,
name|clause
argument_list|(
literal|"field_der_red"
argument_list|,
literal|"red"
argument_list|)
argument_list|,
name|clause
argument_list|(
literal|"field_der_red"
argument_list|,
literal|"der"
argument_list|)
argument_list|,
name|clause
argument_list|(
literal|"field_exact"
argument_list|,
literal|"a"
argument_list|,
literal|"cat"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testMultiValuedSortByScore
specifier|public
name|void
name|testMultiValuedSortByScore
parameter_list|()
throws|throws
name|IOException
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|newIndexWriterConfig
argument_list|(
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|FieldType
name|type
init|=
operator|new
name|FieldType
argument_list|(
name|TextField
operator|.
name|TYPE_STORED
argument_list|)
decl_stmt|;
name|type
operator|.
name|setStoreTermVectorOffsets
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|type
operator|.
name|setStoreTermVectorPositions
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|type
operator|.
name|setStoreTermVectors
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|type
operator|.
name|freeze
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"field"
argument_list|,
literal|"zero if naught"
argument_list|,
name|type
argument_list|)
argument_list|)
expr_stmt|;
comment|// The first two fields contain the best match
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"field"
argument_list|,
literal|"hero of legend"
argument_list|,
name|type
argument_list|)
argument_list|)
expr_stmt|;
comment|// but total a lower score (3) than the bottom
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"field"
argument_list|,
literal|"naught of hero"
argument_list|,
name|type
argument_list|)
argument_list|)
expr_stmt|;
comment|// two fields (4)
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"field"
argument_list|,
literal|"naught of hero"
argument_list|,
name|type
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|FastVectorHighlighter
name|highlighter
init|=
operator|new
name|FastVectorHighlighter
argument_list|()
decl_stmt|;
name|ScoreOrderFragmentsBuilder
name|fragmentsBuilder
init|=
operator|new
name|ScoreOrderFragmentsBuilder
argument_list|()
decl_stmt|;
name|fragmentsBuilder
operator|.
name|setDiscreteMultiValueHighlighting
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|IndexReader
name|reader
init|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|writer
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|String
index|[]
name|preTags
init|=
operator|new
name|String
index|[]
block|{
literal|"<b>"
block|}
decl_stmt|;
name|String
index|[]
name|postTags
init|=
operator|new
name|String
index|[]
block|{
literal|"</b>"
block|}
decl_stmt|;
name|Encoder
name|encoder
init|=
operator|new
name|DefaultEncoder
argument_list|()
decl_stmt|;
name|int
name|docId
init|=
literal|0
decl_stmt|;
name|BooleanQuery
name|query
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
name|query
operator|.
name|add
argument_list|(
name|clause
argument_list|(
literal|"field"
argument_list|,
literal|"hero"
argument_list|)
argument_list|,
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|query
operator|.
name|add
argument_list|(
name|clause
argument_list|(
literal|"field"
argument_list|,
literal|"of"
argument_list|)
argument_list|,
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|query
operator|.
name|add
argument_list|(
name|clause
argument_list|(
literal|"field"
argument_list|,
literal|"legend"
argument_list|)
argument_list|,
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|FieldQuery
name|fieldQuery
init|=
name|highlighter
operator|.
name|getFieldQuery
argument_list|(
name|query
argument_list|,
name|reader
argument_list|)
decl_stmt|;
for|for
control|(
name|FragListBuilder
name|fragListBuilder
range|:
operator|new
name|FragListBuilder
index|[]
block|{
operator|new
name|SimpleFragListBuilder
argument_list|()
block|,
operator|new
name|WeightedFragListBuilder
argument_list|()
block|}
control|)
block|{
name|String
index|[]
name|bestFragments
init|=
name|highlighter
operator|.
name|getBestFragments
argument_list|(
name|fieldQuery
argument_list|,
name|reader
argument_list|,
name|docId
argument_list|,
literal|"field"
argument_list|,
literal|20
argument_list|,
literal|1
argument_list|,
name|fragListBuilder
argument_list|,
name|fragmentsBuilder
argument_list|,
name|preTags
argument_list|,
name|postTags
argument_list|,
name|encoder
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"<b>hero</b><b>of</b><b>legend</b>"
argument_list|,
name|bestFragments
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|bestFragments
operator|=
name|highlighter
operator|.
name|getBestFragments
argument_list|(
name|fieldQuery
argument_list|,
name|reader
argument_list|,
name|docId
argument_list|,
literal|"field"
argument_list|,
literal|28
argument_list|,
literal|1
argument_list|,
name|fragListBuilder
argument_list|,
name|fragmentsBuilder
argument_list|,
name|preTags
argument_list|,
name|postTags
argument_list|,
name|encoder
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"<b>hero</b><b>of</b><b>legend</b>"
argument_list|,
name|bestFragments
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|bestFragments
operator|=
name|highlighter
operator|.
name|getBestFragments
argument_list|(
name|fieldQuery
argument_list|,
name|reader
argument_list|,
name|docId
argument_list|,
literal|"field"
argument_list|,
literal|30000
argument_list|,
literal|1
argument_list|,
name|fragListBuilder
argument_list|,
name|fragmentsBuilder
argument_list|,
name|preTags
argument_list|,
name|postTags
argument_list|,
name|encoder
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"<b>hero</b><b>of</b><b>legend</b>"
argument_list|,
name|bestFragments
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|writer
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testBooleanPhraseWithSynonym
specifier|public
name|void
name|testBooleanPhraseWithSynonym
parameter_list|()
throws|throws
name|IOException
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|newIndexWriterConfig
argument_list|(
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|FieldType
name|type
init|=
operator|new
name|FieldType
argument_list|(
name|TextField
operator|.
name|TYPE_NOT_STORED
argument_list|)
decl_stmt|;
name|type
operator|.
name|setStoreTermVectorOffsets
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|type
operator|.
name|setStoreTermVectorPositions
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|type
operator|.
name|setStoreTermVectors
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|type
operator|.
name|freeze
argument_list|()
expr_stmt|;
name|Token
name|syn
init|=
operator|new
name|Token
argument_list|(
literal|"httpwwwfacebookcom"
argument_list|,
literal|6
argument_list|,
literal|29
argument_list|)
decl_stmt|;
name|syn
operator|.
name|setPositionIncrement
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|CannedTokenStream
name|ts
init|=
operator|new
name|CannedTokenStream
argument_list|(
operator|new
name|Token
argument_list|(
literal|"test"
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|)
argument_list|,
operator|new
name|Token
argument_list|(
literal|"http"
argument_list|,
literal|6
argument_list|,
literal|10
argument_list|)
argument_list|,
name|syn
argument_list|,
operator|new
name|Token
argument_list|(
literal|"www"
argument_list|,
literal|13
argument_list|,
literal|16
argument_list|)
argument_list|,
operator|new
name|Token
argument_list|(
literal|"facebook"
argument_list|,
literal|17
argument_list|,
literal|25
argument_list|)
argument_list|,
operator|new
name|Token
argument_list|(
literal|"com"
argument_list|,
literal|26
argument_list|,
literal|29
argument_list|)
argument_list|)
decl_stmt|;
name|Field
name|field
init|=
operator|new
name|Field
argument_list|(
literal|"field"
argument_list|,
name|ts
argument_list|,
name|type
argument_list|)
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|StoredField
argument_list|(
literal|"field"
argument_list|,
literal|"Test: http://www.facebook.com"
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|FastVectorHighlighter
name|highlighter
init|=
operator|new
name|FastVectorHighlighter
argument_list|()
decl_stmt|;
name|IndexReader
name|reader
init|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|writer
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|int
name|docId
init|=
literal|0
decl_stmt|;
comment|// query1: match
name|PhraseQuery
name|pq
init|=
operator|new
name|PhraseQuery
argument_list|()
decl_stmt|;
name|pq
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
name|pq
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"http"
argument_list|)
argument_list|)
expr_stmt|;
name|pq
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"www"
argument_list|)
argument_list|)
expr_stmt|;
name|pq
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"facebook"
argument_list|)
argument_list|)
expr_stmt|;
name|pq
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"com"
argument_list|)
argument_list|)
expr_stmt|;
name|FieldQuery
name|fieldQuery
init|=
name|highlighter
operator|.
name|getFieldQuery
argument_list|(
name|pq
argument_list|,
name|reader
argument_list|)
decl_stmt|;
name|String
index|[]
name|bestFragments
init|=
name|highlighter
operator|.
name|getBestFragments
argument_list|(
name|fieldQuery
argument_list|,
name|reader
argument_list|,
name|docId
argument_list|,
literal|"field"
argument_list|,
literal|54
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"<b>Test: http://www.facebook.com</b>"
argument_list|,
name|bestFragments
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// query2: match
name|PhraseQuery
name|pq2
init|=
operator|new
name|PhraseQuery
argument_list|()
decl_stmt|;
name|pq2
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
name|pq2
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"httpwwwfacebookcom"
argument_list|)
argument_list|)
expr_stmt|;
name|pq2
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"www"
argument_list|)
argument_list|)
expr_stmt|;
name|pq2
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"facebook"
argument_list|)
argument_list|)
expr_stmt|;
name|pq2
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"com"
argument_list|)
argument_list|)
expr_stmt|;
name|fieldQuery
operator|=
name|highlighter
operator|.
name|getFieldQuery
argument_list|(
name|pq2
argument_list|,
name|reader
argument_list|)
expr_stmt|;
name|bestFragments
operator|=
name|highlighter
operator|.
name|getBestFragments
argument_list|(
name|fieldQuery
argument_list|,
name|reader
argument_list|,
name|docId
argument_list|,
literal|"field"
argument_list|,
literal|54
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"<b>Test: http://www.facebook.com</b>"
argument_list|,
name|bestFragments
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// query3: OR query1 and query2 together
name|BooleanQuery
name|bq
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|pq
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|pq2
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|fieldQuery
operator|=
name|highlighter
operator|.
name|getFieldQuery
argument_list|(
name|bq
argument_list|,
name|reader
argument_list|)
expr_stmt|;
name|bestFragments
operator|=
name|highlighter
operator|.
name|getBestFragments
argument_list|(
name|fieldQuery
argument_list|,
name|reader
argument_list|,
name|docId
argument_list|,
literal|"field"
argument_list|,
literal|54
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"<b>Test: http://www.facebook.com</b>"
argument_list|,
name|bestFragments
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|writer
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|matchedFieldsTestCase
specifier|private
name|void
name|matchedFieldsTestCase
parameter_list|(
name|String
name|fieldValue
parameter_list|,
name|String
name|expected
parameter_list|,
name|Query
modifier|...
name|queryClauses
parameter_list|)
throws|throws
name|IOException
block|{
name|matchedFieldsTestCase
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|fieldValue
argument_list|,
name|expected
argument_list|,
name|queryClauses
argument_list|)
expr_stmt|;
block|}
DECL|method|matchedFieldsTestCase
specifier|private
name|void
name|matchedFieldsTestCase
parameter_list|(
name|boolean
name|useMatchedFields
parameter_list|,
name|boolean
name|fieldMatch
parameter_list|,
name|String
name|fieldValue
parameter_list|,
name|String
name|expected
parameter_list|,
name|Query
modifier|...
name|queryClauses
parameter_list|)
throws|throws
name|IOException
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|FieldType
name|stored
init|=
operator|new
name|FieldType
argument_list|(
name|TextField
operator|.
name|TYPE_STORED
argument_list|)
decl_stmt|;
name|stored
operator|.
name|setStoreTermVectorOffsets
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|stored
operator|.
name|setStoreTermVectorPositions
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|stored
operator|.
name|setStoreTermVectors
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|stored
operator|.
name|freeze
argument_list|()
expr_stmt|;
name|FieldType
name|matched
init|=
operator|new
name|FieldType
argument_list|(
name|TextField
operator|.
name|TYPE_NOT_STORED
argument_list|)
decl_stmt|;
name|matched
operator|.
name|setStoreTermVectorOffsets
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|matched
operator|.
name|setStoreTermVectorPositions
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|matched
operator|.
name|setStoreTermVectors
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|matched
operator|.
name|freeze
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"field"
argument_list|,
name|fieldValue
argument_list|,
name|stored
argument_list|)
argument_list|)
expr_stmt|;
comment|// Whitespace tokenized with English stop words
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"field_exact"
argument_list|,
name|fieldValue
argument_list|,
name|matched
argument_list|)
argument_list|)
expr_stmt|;
comment|// Whitespace tokenized without stop words
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"field_super_exact"
argument_list|,
name|fieldValue
argument_list|,
name|matched
argument_list|)
argument_list|)
expr_stmt|;
comment|// Whitespace tokenized without toLower
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"field_characters"
argument_list|,
name|fieldValue
argument_list|,
name|matched
argument_list|)
argument_list|)
expr_stmt|;
comment|// Each letter is a token
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"field_tripples"
argument_list|,
name|fieldValue
argument_list|,
name|matched
argument_list|)
argument_list|)
expr_stmt|;
comment|// Every three letters is a token
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"field_sliced"
argument_list|,
name|fieldValue
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
comment|// Sliced at 10 chars then analyzed just like field
name|Math
operator|.
name|min
argument_list|(
name|fieldValue
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|,
literal|10
argument_list|)
argument_list|)
argument_list|,
name|matched
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"field_der_red"
argument_list|,
operator|new
name|CannedTokenStream
argument_list|(
comment|// Hacky field containing "der" and "red" at pos = 0
name|token
argument_list|(
literal|"der"
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|)
argument_list|,
name|token
argument_list|(
literal|"red"
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|)
argument_list|)
argument_list|,
name|matched
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Analyzer
argument_list|>
name|fieldAnalyzers
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
decl_stmt|;
name|fieldAnalyzers
operator|.
name|put
argument_list|(
literal|"field"
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|,
name|MockTokenizer
operator|.
name|WHITESPACE
argument_list|,
literal|true
argument_list|,
name|MockTokenFilter
operator|.
name|ENGLISH_STOPSET
argument_list|)
argument_list|)
expr_stmt|;
name|fieldAnalyzers
operator|.
name|put
argument_list|(
literal|"field_exact"
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|fieldAnalyzers
operator|.
name|put
argument_list|(
literal|"field_super_exact"
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|,
name|MockTokenizer
operator|.
name|WHITESPACE
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|fieldAnalyzers
operator|.
name|put
argument_list|(
literal|"field_characters"
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|,
operator|new
name|CharacterRunAutomaton
argument_list|(
operator|new
name|RegExp
argument_list|(
literal|"."
argument_list|)
operator|.
name|toAutomaton
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|fieldAnalyzers
operator|.
name|put
argument_list|(
literal|"field_tripples"
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|,
operator|new
name|CharacterRunAutomaton
argument_list|(
operator|new
name|RegExp
argument_list|(
literal|"..."
argument_list|)
operator|.
name|toAutomaton
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|fieldAnalyzers
operator|.
name|put
argument_list|(
literal|"field_sliced"
argument_list|,
name|fieldAnalyzers
operator|.
name|get
argument_list|(
literal|"field"
argument_list|)
argument_list|)
expr_stmt|;
name|fieldAnalyzers
operator|.
name|put
argument_list|(
literal|"field_der_red"
argument_list|,
name|fieldAnalyzers
operator|.
name|get
argument_list|(
literal|"field"
argument_list|)
argument_list|)
expr_stmt|;
comment|// This is required even though we provide a token stream
name|Analyzer
name|analyzer
init|=
operator|new
name|DelegatingAnalyzerWrapper
argument_list|(
name|Analyzer
operator|.
name|PER_FIELD_REUSE_STRATEGY
argument_list|)
block|{
specifier|public
name|Analyzer
name|getWrappedAnalyzer
parameter_list|(
name|String
name|fieldName
parameter_list|)
block|{
return|return
name|fieldAnalyzers
operator|.
name|get
argument_list|(
name|fieldName
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|newIndexWriterConfig
argument_list|(
name|analyzer
argument_list|)
argument_list|)
decl_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|FastVectorHighlighter
name|highlighter
init|=
operator|new
name|FastVectorHighlighter
argument_list|()
decl_stmt|;
name|FragListBuilder
name|fragListBuilder
init|=
operator|new
name|SimpleFragListBuilder
argument_list|()
decl_stmt|;
name|FragmentsBuilder
name|fragmentsBuilder
init|=
operator|new
name|ScoreOrderFragmentsBuilder
argument_list|()
decl_stmt|;
name|IndexReader
name|reader
init|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|writer
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|String
index|[]
name|preTags
init|=
operator|new
name|String
index|[]
block|{
literal|"<b>"
block|}
decl_stmt|;
name|String
index|[]
name|postTags
init|=
operator|new
name|String
index|[]
block|{
literal|"</b>"
block|}
decl_stmt|;
name|Encoder
name|encoder
init|=
operator|new
name|DefaultEncoder
argument_list|()
decl_stmt|;
name|int
name|docId
init|=
literal|0
decl_stmt|;
name|BooleanQuery
name|query
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
for|for
control|(
name|Query
name|clause
range|:
name|queryClauses
control|)
block|{
name|query
operator|.
name|add
argument_list|(
name|clause
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
block|}
name|FieldQuery
name|fieldQuery
init|=
operator|new
name|FieldQuery
argument_list|(
name|query
argument_list|,
name|reader
argument_list|,
literal|true
argument_list|,
name|fieldMatch
argument_list|)
decl_stmt|;
name|String
index|[]
name|bestFragments
decl_stmt|;
if|if
condition|(
name|useMatchedFields
condition|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|matchedFields
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|matchedFields
operator|.
name|add
argument_list|(
literal|"field"
argument_list|)
expr_stmt|;
name|matchedFields
operator|.
name|add
argument_list|(
literal|"field_exact"
argument_list|)
expr_stmt|;
name|matchedFields
operator|.
name|add
argument_list|(
literal|"field_super_exact"
argument_list|)
expr_stmt|;
name|matchedFields
operator|.
name|add
argument_list|(
literal|"field_characters"
argument_list|)
expr_stmt|;
name|matchedFields
operator|.
name|add
argument_list|(
literal|"field_tripples"
argument_list|)
expr_stmt|;
name|matchedFields
operator|.
name|add
argument_list|(
literal|"field_sliced"
argument_list|)
expr_stmt|;
name|matchedFields
operator|.
name|add
argument_list|(
literal|"field_der_red"
argument_list|)
expr_stmt|;
name|bestFragments
operator|=
name|highlighter
operator|.
name|getBestFragments
argument_list|(
name|fieldQuery
argument_list|,
name|reader
argument_list|,
name|docId
argument_list|,
literal|"field"
argument_list|,
name|matchedFields
argument_list|,
literal|25
argument_list|,
literal|1
argument_list|,
name|fragListBuilder
argument_list|,
name|fragmentsBuilder
argument_list|,
name|preTags
argument_list|,
name|postTags
argument_list|,
name|encoder
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|bestFragments
operator|=
name|highlighter
operator|.
name|getBestFragments
argument_list|(
name|fieldQuery
argument_list|,
name|reader
argument_list|,
name|docId
argument_list|,
literal|"field"
argument_list|,
literal|25
argument_list|,
literal|1
argument_list|,
name|fragListBuilder
argument_list|,
name|fragmentsBuilder
argument_list|,
name|preTags
argument_list|,
name|postTags
argument_list|,
name|encoder
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|bestFragments
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|writer
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|clause
specifier|private
name|Query
name|clause
parameter_list|(
name|String
name|field
parameter_list|,
name|String
modifier|...
name|terms
parameter_list|)
block|{
return|return
name|clause
argument_list|(
name|field
argument_list|,
literal|1
argument_list|,
name|terms
argument_list|)
return|;
block|}
DECL|method|clause
specifier|private
name|Query
name|clause
parameter_list|(
name|String
name|field
parameter_list|,
name|float
name|boost
parameter_list|,
name|String
modifier|...
name|terms
parameter_list|)
block|{
name|Query
name|q
decl_stmt|;
if|if
condition|(
name|terms
operator|.
name|length
operator|==
literal|1
condition|)
block|{
name|q
operator|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|field
argument_list|,
name|terms
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|PhraseQuery
name|pq
init|=
operator|new
name|PhraseQuery
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|term
range|:
name|terms
control|)
block|{
name|pq
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
name|field
argument_list|,
name|term
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|q
operator|=
name|pq
expr_stmt|;
block|}
name|q
operator|.
name|setBoost
argument_list|(
name|boost
argument_list|)
expr_stmt|;
return|return
name|q
return|;
block|}
DECL|method|token
specifier|private
specifier|static
name|Token
name|token
parameter_list|(
name|String
name|term
parameter_list|,
name|int
name|posInc
parameter_list|,
name|int
name|startOffset
parameter_list|,
name|int
name|endOffset
parameter_list|)
block|{
name|Token
name|t
init|=
operator|new
name|Token
argument_list|(
name|term
argument_list|,
name|startOffset
argument_list|,
name|endOffset
argument_list|)
decl_stmt|;
name|t
operator|.
name|setPositionIncrement
argument_list|(
name|posInc
argument_list|)
expr_stmt|;
return|return
name|t
return|;
block|}
block|}
end_class
end_unit
