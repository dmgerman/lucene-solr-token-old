begin_unit
begin_package
DECL|package|org.apache.lucene.search.vectorhighlight
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|vectorhighlight
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|PhraseQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|PrefixQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanClause
operator|.
name|Occur
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|RegexpQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TermQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TermRangeQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|WildcardQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|vectorhighlight
operator|.
name|FieldQuery
operator|.
name|QueryPhraseMap
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|vectorhighlight
operator|.
name|FieldTermStack
operator|.
name|TermInfo
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_class
DECL|class|FieldQueryTest
specifier|public
class|class
name|FieldQueryTest
extends|extends
name|AbstractTestCase
block|{
DECL|method|testFlattenBoolean
specifier|public
name|void
name|testFlattenBoolean
parameter_list|()
throws|throws
name|Exception
block|{
name|BooleanQuery
name|booleanQuery
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
name|booleanQuery
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|F
argument_list|,
literal|"A"
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|booleanQuery
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|F
argument_list|,
literal|"B"
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|booleanQuery
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|F
argument_list|,
literal|"C"
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|BooleanQuery
name|innerQuery
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
name|innerQuery
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|F
argument_list|,
literal|"D"
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|innerQuery
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|F
argument_list|,
literal|"E"
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|booleanQuery
operator|.
name|add
argument_list|(
name|innerQuery
argument_list|,
name|Occur
operator|.
name|MUST_NOT
argument_list|)
expr_stmt|;
name|FieldQuery
name|fq
init|=
operator|new
name|FieldQuery
argument_list|(
name|booleanQuery
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Query
argument_list|>
name|flatQueries
init|=
operator|new
name|HashSet
argument_list|<
name|Query
argument_list|>
argument_list|()
decl_stmt|;
name|fq
operator|.
name|flatten
argument_list|(
name|booleanQuery
argument_list|,
name|reader
argument_list|,
name|flatQueries
argument_list|)
expr_stmt|;
name|assertCollectionQueries
argument_list|(
name|flatQueries
argument_list|,
name|tq
argument_list|(
literal|"A"
argument_list|)
argument_list|,
name|tq
argument_list|(
literal|"B"
argument_list|)
argument_list|,
name|tq
argument_list|(
literal|"C"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testFlattenDisjunctionMaxQuery
specifier|public
name|void
name|testFlattenDisjunctionMaxQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|Query
name|query
init|=
name|dmq
argument_list|(
name|tq
argument_list|(
literal|"A"
argument_list|)
argument_list|,
name|tq
argument_list|(
literal|"B"
argument_list|)
argument_list|,
name|pqF
argument_list|(
literal|"C"
argument_list|,
literal|"D"
argument_list|)
argument_list|)
decl_stmt|;
name|FieldQuery
name|fq
init|=
operator|new
name|FieldQuery
argument_list|(
name|query
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Query
argument_list|>
name|flatQueries
init|=
operator|new
name|HashSet
argument_list|<
name|Query
argument_list|>
argument_list|()
decl_stmt|;
name|fq
operator|.
name|flatten
argument_list|(
name|query
argument_list|,
name|reader
argument_list|,
name|flatQueries
argument_list|)
expr_stmt|;
name|assertCollectionQueries
argument_list|(
name|flatQueries
argument_list|,
name|tq
argument_list|(
literal|"A"
argument_list|)
argument_list|,
name|tq
argument_list|(
literal|"B"
argument_list|)
argument_list|,
name|pqF
argument_list|(
literal|"C"
argument_list|,
literal|"D"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testFlattenTermAndPhrase
specifier|public
name|void
name|testFlattenTermAndPhrase
parameter_list|()
throws|throws
name|Exception
block|{
name|BooleanQuery
name|booleanQuery
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
name|booleanQuery
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|F
argument_list|,
literal|"A"
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|PhraseQuery
name|phraseQuery
init|=
operator|new
name|PhraseQuery
argument_list|()
decl_stmt|;
name|phraseQuery
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
name|F
argument_list|,
literal|"B"
argument_list|)
argument_list|)
expr_stmt|;
name|phraseQuery
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
name|F
argument_list|,
literal|"C"
argument_list|)
argument_list|)
expr_stmt|;
name|booleanQuery
operator|.
name|add
argument_list|(
name|phraseQuery
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|FieldQuery
name|fq
init|=
operator|new
name|FieldQuery
argument_list|(
name|booleanQuery
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Query
argument_list|>
name|flatQueries
init|=
operator|new
name|HashSet
argument_list|<
name|Query
argument_list|>
argument_list|()
decl_stmt|;
name|fq
operator|.
name|flatten
argument_list|(
name|booleanQuery
argument_list|,
name|reader
argument_list|,
name|flatQueries
argument_list|)
expr_stmt|;
name|assertCollectionQueries
argument_list|(
name|flatQueries
argument_list|,
name|tq
argument_list|(
literal|"A"
argument_list|)
argument_list|,
name|pqF
argument_list|(
literal|"B"
argument_list|,
literal|"C"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testFlattenTermAndPhrase2gram
specifier|public
name|void
name|testFlattenTermAndPhrase2gram
parameter_list|()
throws|throws
name|Exception
block|{
name|BooleanQuery
name|query
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
name|query
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|F
argument_list|,
literal|"AA"
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|query
operator|.
name|add
argument_list|(
name|toPhraseQuery
argument_list|(
name|analyze
argument_list|(
literal|"BCD"
argument_list|,
name|F
argument_list|,
name|analyzerB
argument_list|)
argument_list|,
name|F
argument_list|)
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|query
operator|.
name|add
argument_list|(
name|toPhraseQuery
argument_list|(
name|analyze
argument_list|(
literal|"EFGH"
argument_list|,
name|F
argument_list|,
name|analyzerB
argument_list|)
argument_list|,
name|F
argument_list|)
argument_list|,
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|FieldQuery
name|fq
init|=
operator|new
name|FieldQuery
argument_list|(
name|query
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Query
argument_list|>
name|flatQueries
init|=
operator|new
name|HashSet
argument_list|<
name|Query
argument_list|>
argument_list|()
decl_stmt|;
name|fq
operator|.
name|flatten
argument_list|(
name|query
argument_list|,
name|reader
argument_list|,
name|flatQueries
argument_list|)
expr_stmt|;
name|assertCollectionQueries
argument_list|(
name|flatQueries
argument_list|,
name|tq
argument_list|(
literal|"AA"
argument_list|)
argument_list|,
name|pqF
argument_list|(
literal|"BC"
argument_list|,
literal|"CD"
argument_list|)
argument_list|,
name|pqF
argument_list|(
literal|"EF"
argument_list|,
literal|"FG"
argument_list|,
literal|"GH"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testFlatten1TermPhrase
specifier|public
name|void
name|testFlatten1TermPhrase
parameter_list|()
throws|throws
name|Exception
block|{
name|Query
name|query
init|=
name|pqF
argument_list|(
literal|"A"
argument_list|)
decl_stmt|;
name|FieldQuery
name|fq
init|=
operator|new
name|FieldQuery
argument_list|(
name|query
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Query
argument_list|>
name|flatQueries
init|=
operator|new
name|HashSet
argument_list|<
name|Query
argument_list|>
argument_list|()
decl_stmt|;
name|fq
operator|.
name|flatten
argument_list|(
name|query
argument_list|,
name|reader
argument_list|,
name|flatQueries
argument_list|)
expr_stmt|;
name|assertCollectionQueries
argument_list|(
name|flatQueries
argument_list|,
name|tq
argument_list|(
literal|"A"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testExpand
specifier|public
name|void
name|testExpand
parameter_list|()
throws|throws
name|Exception
block|{
name|Query
name|dummy
init|=
name|pqF
argument_list|(
literal|"DUMMY"
argument_list|)
decl_stmt|;
name|FieldQuery
name|fq
init|=
operator|new
name|FieldQuery
argument_list|(
name|dummy
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
comment|// "a b","b c" => "a b","b c","a b c"
name|Set
argument_list|<
name|Query
argument_list|>
name|flatQueries
init|=
operator|new
name|HashSet
argument_list|<
name|Query
argument_list|>
argument_list|()
decl_stmt|;
name|flatQueries
operator|.
name|add
argument_list|(
name|pqF
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|flatQueries
operator|.
name|add
argument_list|(
name|pqF
argument_list|(
literal|"b"
argument_list|,
literal|"c"
argument_list|)
argument_list|)
expr_stmt|;
name|assertCollectionQueries
argument_list|(
name|fq
operator|.
name|expand
argument_list|(
name|flatQueries
argument_list|)
argument_list|,
name|pqF
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
argument_list|,
name|pqF
argument_list|(
literal|"b"
argument_list|,
literal|"c"
argument_list|)
argument_list|,
name|pqF
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
argument_list|)
expr_stmt|;
comment|// "a b","b c d" => "a b","b c d","a b c d"
name|flatQueries
operator|=
operator|new
name|HashSet
argument_list|<
name|Query
argument_list|>
argument_list|()
expr_stmt|;
name|flatQueries
operator|.
name|add
argument_list|(
name|pqF
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|flatQueries
operator|.
name|add
argument_list|(
name|pqF
argument_list|(
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"d"
argument_list|)
argument_list|)
expr_stmt|;
name|assertCollectionQueries
argument_list|(
name|fq
operator|.
name|expand
argument_list|(
name|flatQueries
argument_list|)
argument_list|,
name|pqF
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
argument_list|,
name|pqF
argument_list|(
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"d"
argument_list|)
argument_list|,
name|pqF
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"d"
argument_list|)
argument_list|)
expr_stmt|;
comment|// "a b c","b c d" => "a b c","b c d","a b c d"
name|flatQueries
operator|=
operator|new
name|HashSet
argument_list|<
name|Query
argument_list|>
argument_list|()
expr_stmt|;
name|flatQueries
operator|.
name|add
argument_list|(
name|pqF
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
argument_list|)
expr_stmt|;
name|flatQueries
operator|.
name|add
argument_list|(
name|pqF
argument_list|(
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"d"
argument_list|)
argument_list|)
expr_stmt|;
name|assertCollectionQueries
argument_list|(
name|fq
operator|.
name|expand
argument_list|(
name|flatQueries
argument_list|)
argument_list|,
name|pqF
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
argument_list|,
name|pqF
argument_list|(
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"d"
argument_list|)
argument_list|,
name|pqF
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"d"
argument_list|)
argument_list|)
expr_stmt|;
comment|// "a b c","c d e" => "a b c","c d e","a b c d e"
name|flatQueries
operator|=
operator|new
name|HashSet
argument_list|<
name|Query
argument_list|>
argument_list|()
expr_stmt|;
name|flatQueries
operator|.
name|add
argument_list|(
name|pqF
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
argument_list|)
expr_stmt|;
name|flatQueries
operator|.
name|add
argument_list|(
name|pqF
argument_list|(
literal|"c"
argument_list|,
literal|"d"
argument_list|,
literal|"e"
argument_list|)
argument_list|)
expr_stmt|;
name|assertCollectionQueries
argument_list|(
name|fq
operator|.
name|expand
argument_list|(
name|flatQueries
argument_list|)
argument_list|,
name|pqF
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
argument_list|,
name|pqF
argument_list|(
literal|"c"
argument_list|,
literal|"d"
argument_list|,
literal|"e"
argument_list|)
argument_list|,
name|pqF
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"d"
argument_list|,
literal|"e"
argument_list|)
argument_list|)
expr_stmt|;
comment|// "a b c d","b c" => "a b c d","b c"
name|flatQueries
operator|=
operator|new
name|HashSet
argument_list|<
name|Query
argument_list|>
argument_list|()
expr_stmt|;
name|flatQueries
operator|.
name|add
argument_list|(
name|pqF
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"d"
argument_list|)
argument_list|)
expr_stmt|;
name|flatQueries
operator|.
name|add
argument_list|(
name|pqF
argument_list|(
literal|"b"
argument_list|,
literal|"c"
argument_list|)
argument_list|)
expr_stmt|;
name|assertCollectionQueries
argument_list|(
name|fq
operator|.
name|expand
argument_list|(
name|flatQueries
argument_list|)
argument_list|,
name|pqF
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"d"
argument_list|)
argument_list|,
name|pqF
argument_list|(
literal|"b"
argument_list|,
literal|"c"
argument_list|)
argument_list|)
expr_stmt|;
comment|// "a b b","b c" => "a b b","b c","a b b c"
name|flatQueries
operator|=
operator|new
name|HashSet
argument_list|<
name|Query
argument_list|>
argument_list|()
expr_stmt|;
name|flatQueries
operator|.
name|add
argument_list|(
name|pqF
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|flatQueries
operator|.
name|add
argument_list|(
name|pqF
argument_list|(
literal|"b"
argument_list|,
literal|"c"
argument_list|)
argument_list|)
expr_stmt|;
name|assertCollectionQueries
argument_list|(
name|fq
operator|.
name|expand
argument_list|(
name|flatQueries
argument_list|)
argument_list|,
name|pqF
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"b"
argument_list|)
argument_list|,
name|pqF
argument_list|(
literal|"b"
argument_list|,
literal|"c"
argument_list|)
argument_list|,
name|pqF
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
argument_list|)
expr_stmt|;
comment|// "a b","b a" => "a b","b a","a b a", "b a b"
name|flatQueries
operator|=
operator|new
name|HashSet
argument_list|<
name|Query
argument_list|>
argument_list|()
expr_stmt|;
name|flatQueries
operator|.
name|add
argument_list|(
name|pqF
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|flatQueries
operator|.
name|add
argument_list|(
name|pqF
argument_list|(
literal|"b"
argument_list|,
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertCollectionQueries
argument_list|(
name|fq
operator|.
name|expand
argument_list|(
name|flatQueries
argument_list|)
argument_list|,
name|pqF
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
argument_list|,
name|pqF
argument_list|(
literal|"b"
argument_list|,
literal|"a"
argument_list|)
argument_list|,
name|pqF
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"a"
argument_list|)
argument_list|,
name|pqF
argument_list|(
literal|"b"
argument_list|,
literal|"a"
argument_list|,
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
comment|// "a b","a b c" => "a b","a b c"
name|flatQueries
operator|=
operator|new
name|HashSet
argument_list|<
name|Query
argument_list|>
argument_list|()
expr_stmt|;
name|flatQueries
operator|.
name|add
argument_list|(
name|pqF
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|flatQueries
operator|.
name|add
argument_list|(
name|pqF
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
argument_list|)
expr_stmt|;
name|assertCollectionQueries
argument_list|(
name|fq
operator|.
name|expand
argument_list|(
name|flatQueries
argument_list|)
argument_list|,
name|pqF
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
argument_list|,
name|pqF
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testNoExpand
specifier|public
name|void
name|testNoExpand
parameter_list|()
throws|throws
name|Exception
block|{
name|Query
name|dummy
init|=
name|pqF
argument_list|(
literal|"DUMMY"
argument_list|)
decl_stmt|;
name|FieldQuery
name|fq
init|=
operator|new
name|FieldQuery
argument_list|(
name|dummy
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
comment|// "a b","c d" => "a b","c d"
name|Set
argument_list|<
name|Query
argument_list|>
name|flatQueries
init|=
operator|new
name|HashSet
argument_list|<
name|Query
argument_list|>
argument_list|()
decl_stmt|;
name|flatQueries
operator|.
name|add
argument_list|(
name|pqF
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|flatQueries
operator|.
name|add
argument_list|(
name|pqF
argument_list|(
literal|"c"
argument_list|,
literal|"d"
argument_list|)
argument_list|)
expr_stmt|;
name|assertCollectionQueries
argument_list|(
name|fq
operator|.
name|expand
argument_list|(
name|flatQueries
argument_list|)
argument_list|,
name|pqF
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
argument_list|,
name|pqF
argument_list|(
literal|"c"
argument_list|,
literal|"d"
argument_list|)
argument_list|)
expr_stmt|;
comment|// "a","a b" => "a", "a b"
name|flatQueries
operator|=
operator|new
name|HashSet
argument_list|<
name|Query
argument_list|>
argument_list|()
expr_stmt|;
name|flatQueries
operator|.
name|add
argument_list|(
name|tq
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|flatQueries
operator|.
name|add
argument_list|(
name|pqF
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|assertCollectionQueries
argument_list|(
name|fq
operator|.
name|expand
argument_list|(
name|flatQueries
argument_list|)
argument_list|,
name|tq
argument_list|(
literal|"a"
argument_list|)
argument_list|,
name|pqF
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
comment|// "a b","b" => "a b", "b"
name|flatQueries
operator|=
operator|new
name|HashSet
argument_list|<
name|Query
argument_list|>
argument_list|()
expr_stmt|;
name|flatQueries
operator|.
name|add
argument_list|(
name|pqF
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|flatQueries
operator|.
name|add
argument_list|(
name|tq
argument_list|(
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|assertCollectionQueries
argument_list|(
name|fq
operator|.
name|expand
argument_list|(
name|flatQueries
argument_list|)
argument_list|,
name|pqF
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
argument_list|,
name|tq
argument_list|(
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
comment|// "a b c","b c" => "a b c","b c"
name|flatQueries
operator|=
operator|new
name|HashSet
argument_list|<
name|Query
argument_list|>
argument_list|()
expr_stmt|;
name|flatQueries
operator|.
name|add
argument_list|(
name|pqF
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
argument_list|)
expr_stmt|;
name|flatQueries
operator|.
name|add
argument_list|(
name|pqF
argument_list|(
literal|"b"
argument_list|,
literal|"c"
argument_list|)
argument_list|)
expr_stmt|;
name|assertCollectionQueries
argument_list|(
name|fq
operator|.
name|expand
argument_list|(
name|flatQueries
argument_list|)
argument_list|,
name|pqF
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
argument_list|,
name|pqF
argument_list|(
literal|"b"
argument_list|,
literal|"c"
argument_list|)
argument_list|)
expr_stmt|;
comment|// "a b","a b c" => "a b","a b c"
name|flatQueries
operator|=
operator|new
name|HashSet
argument_list|<
name|Query
argument_list|>
argument_list|()
expr_stmt|;
name|flatQueries
operator|.
name|add
argument_list|(
name|pqF
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|flatQueries
operator|.
name|add
argument_list|(
name|pqF
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
argument_list|)
expr_stmt|;
name|assertCollectionQueries
argument_list|(
name|fq
operator|.
name|expand
argument_list|(
name|flatQueries
argument_list|)
argument_list|,
name|pqF
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
argument_list|,
name|pqF
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
argument_list|)
expr_stmt|;
comment|// "a b c","b d e" => "a b c","b d e"
name|flatQueries
operator|=
operator|new
name|HashSet
argument_list|<
name|Query
argument_list|>
argument_list|()
expr_stmt|;
name|flatQueries
operator|.
name|add
argument_list|(
name|pqF
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
argument_list|)
expr_stmt|;
name|flatQueries
operator|.
name|add
argument_list|(
name|pqF
argument_list|(
literal|"b"
argument_list|,
literal|"d"
argument_list|,
literal|"e"
argument_list|)
argument_list|)
expr_stmt|;
name|assertCollectionQueries
argument_list|(
name|fq
operator|.
name|expand
argument_list|(
name|flatQueries
argument_list|)
argument_list|,
name|pqF
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
argument_list|,
name|pqF
argument_list|(
literal|"b"
argument_list|,
literal|"d"
argument_list|,
literal|"e"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testExpandNotFieldMatch
specifier|public
name|void
name|testExpandNotFieldMatch
parameter_list|()
throws|throws
name|Exception
block|{
name|Query
name|dummy
init|=
name|pqF
argument_list|(
literal|"DUMMY"
argument_list|)
decl_stmt|;
name|FieldQuery
name|fq
init|=
operator|new
name|FieldQuery
argument_list|(
name|dummy
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// f1:"a b",f2:"b c" => f1:"a b",f2:"b c",f1:"a b c"
name|Set
argument_list|<
name|Query
argument_list|>
name|flatQueries
init|=
operator|new
name|HashSet
argument_list|<
name|Query
argument_list|>
argument_list|()
decl_stmt|;
name|flatQueries
operator|.
name|add
argument_list|(
name|pq
argument_list|(
name|F1
argument_list|,
literal|"a"
argument_list|,
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|flatQueries
operator|.
name|add
argument_list|(
name|pq
argument_list|(
name|F2
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
argument_list|)
expr_stmt|;
name|assertCollectionQueries
argument_list|(
name|fq
operator|.
name|expand
argument_list|(
name|flatQueries
argument_list|)
argument_list|,
name|pq
argument_list|(
name|F1
argument_list|,
literal|"a"
argument_list|,
literal|"b"
argument_list|)
argument_list|,
name|pq
argument_list|(
name|F2
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
argument_list|,
name|pq
argument_list|(
name|F1
argument_list|,
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testGetFieldTermMap
specifier|public
name|void
name|testGetFieldTermMap
parameter_list|()
throws|throws
name|Exception
block|{
name|Query
name|query
init|=
name|tq
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
name|FieldQuery
name|fq
init|=
operator|new
name|FieldQuery
argument_list|(
name|query
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|QueryPhraseMap
name|pqm
init|=
name|fq
operator|.
name|getFieldTermMap
argument_list|(
name|F
argument_list|,
literal|"a"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|pqm
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|pqm
operator|.
name|isTerminal
argument_list|()
argument_list|)
expr_stmt|;
name|pqm
operator|=
name|fq
operator|.
name|getFieldTermMap
argument_list|(
name|F
argument_list|,
literal|"b"
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|pqm
argument_list|)
expr_stmt|;
name|pqm
operator|=
name|fq
operator|.
name|getFieldTermMap
argument_list|(
name|F1
argument_list|,
literal|"a"
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|pqm
argument_list|)
expr_stmt|;
block|}
DECL|method|testGetRootMap
specifier|public
name|void
name|testGetRootMap
parameter_list|()
throws|throws
name|Exception
block|{
name|Query
name|dummy
init|=
name|pqF
argument_list|(
literal|"DUMMY"
argument_list|)
decl_stmt|;
name|FieldQuery
name|fq
init|=
operator|new
name|FieldQuery
argument_list|(
name|dummy
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|QueryPhraseMap
name|rootMap1
init|=
name|fq
operator|.
name|getRootMap
argument_list|(
name|tq
argument_list|(
literal|"a"
argument_list|)
argument_list|)
decl_stmt|;
name|QueryPhraseMap
name|rootMap2
init|=
name|fq
operator|.
name|getRootMap
argument_list|(
name|tq
argument_list|(
literal|"a"
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|rootMap1
operator|==
name|rootMap2
argument_list|)
expr_stmt|;
name|QueryPhraseMap
name|rootMap3
init|=
name|fq
operator|.
name|getRootMap
argument_list|(
name|tq
argument_list|(
literal|"b"
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|rootMap1
operator|==
name|rootMap3
argument_list|)
expr_stmt|;
name|QueryPhraseMap
name|rootMap4
init|=
name|fq
operator|.
name|getRootMap
argument_list|(
name|tq
argument_list|(
name|F1
argument_list|,
literal|"b"
argument_list|)
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|rootMap4
operator|==
name|rootMap3
argument_list|)
expr_stmt|;
block|}
DECL|method|testGetRootMapNotFieldMatch
specifier|public
name|void
name|testGetRootMapNotFieldMatch
parameter_list|()
throws|throws
name|Exception
block|{
name|Query
name|dummy
init|=
name|pqF
argument_list|(
literal|"DUMMY"
argument_list|)
decl_stmt|;
name|FieldQuery
name|fq
init|=
operator|new
name|FieldQuery
argument_list|(
name|dummy
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|QueryPhraseMap
name|rootMap1
init|=
name|fq
operator|.
name|getRootMap
argument_list|(
name|tq
argument_list|(
literal|"a"
argument_list|)
argument_list|)
decl_stmt|;
name|QueryPhraseMap
name|rootMap2
init|=
name|fq
operator|.
name|getRootMap
argument_list|(
name|tq
argument_list|(
literal|"a"
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|rootMap1
operator|==
name|rootMap2
argument_list|)
expr_stmt|;
name|QueryPhraseMap
name|rootMap3
init|=
name|fq
operator|.
name|getRootMap
argument_list|(
name|tq
argument_list|(
literal|"b"
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|rootMap1
operator|==
name|rootMap3
argument_list|)
expr_stmt|;
name|QueryPhraseMap
name|rootMap4
init|=
name|fq
operator|.
name|getRootMap
argument_list|(
name|tq
argument_list|(
name|F1
argument_list|,
literal|"b"
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|rootMap4
operator|==
name|rootMap3
argument_list|)
expr_stmt|;
block|}
DECL|method|testGetTermSet
specifier|public
name|void
name|testGetTermSet
parameter_list|()
throws|throws
name|Exception
block|{
name|BooleanQuery
name|query
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
name|query
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|F
argument_list|,
literal|"A"
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|query
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|F
argument_list|,
literal|"B"
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|query
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"x"
argument_list|,
literal|"C"
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|BooleanQuery
name|innerQuery
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
name|innerQuery
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|F
argument_list|,
literal|"D"
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|innerQuery
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|F
argument_list|,
literal|"E"
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|query
operator|.
name|add
argument_list|(
name|innerQuery
argument_list|,
name|Occur
operator|.
name|MUST_NOT
argument_list|)
expr_stmt|;
name|FieldQuery
name|fq
init|=
operator|new
name|FieldQuery
argument_list|(
name|query
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|fq
operator|.
name|termSetMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|termSet
init|=
name|fq
operator|.
name|getTermSet
argument_list|(
name|F
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|termSet
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|termSet
operator|.
name|contains
argument_list|(
literal|"A"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|termSet
operator|.
name|contains
argument_list|(
literal|"B"
argument_list|)
argument_list|)
expr_stmt|;
name|termSet
operator|=
name|fq
operator|.
name|getTermSet
argument_list|(
literal|"x"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|termSet
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|termSet
operator|.
name|contains
argument_list|(
literal|"C"
argument_list|)
argument_list|)
expr_stmt|;
name|termSet
operator|=
name|fq
operator|.
name|getTermSet
argument_list|(
literal|"y"
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|termSet
argument_list|)
expr_stmt|;
block|}
DECL|method|testQueryPhraseMap1Term
specifier|public
name|void
name|testQueryPhraseMap1Term
parameter_list|()
throws|throws
name|Exception
block|{
name|Query
name|query
init|=
name|tq
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
comment|// phraseHighlight = true, fieldMatch = true
name|FieldQuery
name|fq
init|=
operator|new
name|FieldQuery
argument_list|(
name|query
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|QueryPhraseMap
argument_list|>
name|map
init|=
name|fq
operator|.
name|rootMaps
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|map
operator|.
name|get
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|map
operator|.
name|get
argument_list|(
name|F
argument_list|)
argument_list|)
expr_stmt|;
name|QueryPhraseMap
name|qpm
init|=
name|map
operator|.
name|get
argument_list|(
name|F
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|qpm
operator|.
name|subMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|qpm
operator|.
name|subMap
operator|.
name|get
argument_list|(
literal|"a"
argument_list|)
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|qpm
operator|.
name|subMap
operator|.
name|get
argument_list|(
literal|"a"
argument_list|)
operator|.
name|terminal
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1F
argument_list|,
name|qpm
operator|.
name|subMap
operator|.
name|get
argument_list|(
literal|"a"
argument_list|)
operator|.
name|boost
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// phraseHighlight = true, fieldMatch = false
name|fq
operator|=
operator|new
name|FieldQuery
argument_list|(
name|query
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|map
operator|=
name|fq
operator|.
name|rootMaps
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|map
operator|.
name|get
argument_list|(
name|F
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|map
operator|.
name|get
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|qpm
operator|=
name|map
operator|.
name|get
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|qpm
operator|.
name|subMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|qpm
operator|.
name|subMap
operator|.
name|get
argument_list|(
literal|"a"
argument_list|)
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|qpm
operator|.
name|subMap
operator|.
name|get
argument_list|(
literal|"a"
argument_list|)
operator|.
name|terminal
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1F
argument_list|,
name|qpm
operator|.
name|subMap
operator|.
name|get
argument_list|(
literal|"a"
argument_list|)
operator|.
name|boost
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// phraseHighlight = false, fieldMatch = true
name|fq
operator|=
operator|new
name|FieldQuery
argument_list|(
name|query
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|map
operator|=
name|fq
operator|.
name|rootMaps
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|map
operator|.
name|get
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|map
operator|.
name|get
argument_list|(
name|F
argument_list|)
argument_list|)
expr_stmt|;
name|qpm
operator|=
name|map
operator|.
name|get
argument_list|(
name|F
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|qpm
operator|.
name|subMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|qpm
operator|.
name|subMap
operator|.
name|get
argument_list|(
literal|"a"
argument_list|)
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|qpm
operator|.
name|subMap
operator|.
name|get
argument_list|(
literal|"a"
argument_list|)
operator|.
name|terminal
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1F
argument_list|,
name|qpm
operator|.
name|subMap
operator|.
name|get
argument_list|(
literal|"a"
argument_list|)
operator|.
name|boost
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// phraseHighlight = false, fieldMatch = false
name|fq
operator|=
operator|new
name|FieldQuery
argument_list|(
name|query
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|map
operator|=
name|fq
operator|.
name|rootMaps
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|map
operator|.
name|get
argument_list|(
name|F
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|map
operator|.
name|get
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|qpm
operator|=
name|map
operator|.
name|get
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|qpm
operator|.
name|subMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|qpm
operator|.
name|subMap
operator|.
name|get
argument_list|(
literal|"a"
argument_list|)
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|qpm
operator|.
name|subMap
operator|.
name|get
argument_list|(
literal|"a"
argument_list|)
operator|.
name|terminal
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1F
argument_list|,
name|qpm
operator|.
name|subMap
operator|.
name|get
argument_list|(
literal|"a"
argument_list|)
operator|.
name|boost
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// boost != 1
name|query
operator|=
name|tq
argument_list|(
literal|2
argument_list|,
literal|"a"
argument_list|)
expr_stmt|;
name|fq
operator|=
operator|new
name|FieldQuery
argument_list|(
name|query
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|map
operator|=
name|fq
operator|.
name|rootMaps
expr_stmt|;
name|qpm
operator|=
name|map
operator|.
name|get
argument_list|(
name|F
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2F
argument_list|,
name|qpm
operator|.
name|subMap
operator|.
name|get
argument_list|(
literal|"a"
argument_list|)
operator|.
name|boost
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|testQueryPhraseMap1Phrase
specifier|public
name|void
name|testQueryPhraseMap1Phrase
parameter_list|()
throws|throws
name|Exception
block|{
name|Query
name|query
init|=
name|pqF
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
decl_stmt|;
comment|// phraseHighlight = true, fieldMatch = true
name|FieldQuery
name|fq
init|=
operator|new
name|FieldQuery
argument_list|(
name|query
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|QueryPhraseMap
argument_list|>
name|map
init|=
name|fq
operator|.
name|rootMaps
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|map
operator|.
name|get
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|map
operator|.
name|get
argument_list|(
name|F
argument_list|)
argument_list|)
expr_stmt|;
name|QueryPhraseMap
name|qpm
init|=
name|map
operator|.
name|get
argument_list|(
name|F
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|qpm
operator|.
name|subMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|qpm
operator|.
name|subMap
operator|.
name|get
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|QueryPhraseMap
name|qpm2
init|=
name|qpm
operator|.
name|subMap
operator|.
name|get
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|qpm2
operator|.
name|terminal
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|qpm2
operator|.
name|subMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|qpm2
operator|.
name|subMap
operator|.
name|get
argument_list|(
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|QueryPhraseMap
name|qpm3
init|=
name|qpm2
operator|.
name|subMap
operator|.
name|get
argument_list|(
literal|"b"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|qpm3
operator|.
name|terminal
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1F
argument_list|,
name|qpm3
operator|.
name|boost
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// phraseHighlight = true, fieldMatch = false
name|fq
operator|=
operator|new
name|FieldQuery
argument_list|(
name|query
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|map
operator|=
name|fq
operator|.
name|rootMaps
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|map
operator|.
name|get
argument_list|(
name|F
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|map
operator|.
name|get
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|qpm
operator|=
name|map
operator|.
name|get
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|qpm
operator|.
name|subMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|qpm
operator|.
name|subMap
operator|.
name|get
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|qpm2
operator|=
name|qpm
operator|.
name|subMap
operator|.
name|get
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|qpm2
operator|.
name|terminal
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|qpm2
operator|.
name|subMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|qpm2
operator|.
name|subMap
operator|.
name|get
argument_list|(
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|qpm3
operator|=
name|qpm2
operator|.
name|subMap
operator|.
name|get
argument_list|(
literal|"b"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|qpm3
operator|.
name|terminal
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1F
argument_list|,
name|qpm3
operator|.
name|boost
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// phraseHighlight = false, fieldMatch = true
name|fq
operator|=
operator|new
name|FieldQuery
argument_list|(
name|query
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|map
operator|=
name|fq
operator|.
name|rootMaps
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|map
operator|.
name|get
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|map
operator|.
name|get
argument_list|(
name|F
argument_list|)
argument_list|)
expr_stmt|;
name|qpm
operator|=
name|map
operator|.
name|get
argument_list|(
name|F
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|qpm
operator|.
name|subMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|qpm
operator|.
name|subMap
operator|.
name|get
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|qpm2
operator|=
name|qpm
operator|.
name|subMap
operator|.
name|get
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|qpm2
operator|.
name|terminal
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1F
argument_list|,
name|qpm2
operator|.
name|boost
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|qpm2
operator|.
name|subMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|qpm2
operator|.
name|subMap
operator|.
name|get
argument_list|(
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|qpm3
operator|=
name|qpm2
operator|.
name|subMap
operator|.
name|get
argument_list|(
literal|"b"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|qpm3
operator|.
name|terminal
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1F
argument_list|,
name|qpm3
operator|.
name|boost
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|qpm
operator|.
name|subMap
operator|.
name|get
argument_list|(
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|qpm2
operator|=
name|qpm
operator|.
name|subMap
operator|.
name|get
argument_list|(
literal|"b"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|qpm2
operator|.
name|terminal
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1F
argument_list|,
name|qpm2
operator|.
name|boost
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// phraseHighlight = false, fieldMatch = false
name|fq
operator|=
operator|new
name|FieldQuery
argument_list|(
name|query
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|map
operator|=
name|fq
operator|.
name|rootMaps
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|map
operator|.
name|get
argument_list|(
name|F
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|map
operator|.
name|get
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|qpm
operator|=
name|map
operator|.
name|get
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|qpm
operator|.
name|subMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|qpm
operator|.
name|subMap
operator|.
name|get
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|qpm2
operator|=
name|qpm
operator|.
name|subMap
operator|.
name|get
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|qpm2
operator|.
name|terminal
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1F
argument_list|,
name|qpm2
operator|.
name|boost
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|qpm2
operator|.
name|subMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|qpm2
operator|.
name|subMap
operator|.
name|get
argument_list|(
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|qpm3
operator|=
name|qpm2
operator|.
name|subMap
operator|.
name|get
argument_list|(
literal|"b"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|qpm3
operator|.
name|terminal
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1F
argument_list|,
name|qpm3
operator|.
name|boost
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|qpm
operator|.
name|subMap
operator|.
name|get
argument_list|(
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|qpm2
operator|=
name|qpm
operator|.
name|subMap
operator|.
name|get
argument_list|(
literal|"b"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|qpm2
operator|.
name|terminal
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1F
argument_list|,
name|qpm2
operator|.
name|boost
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// boost != 1
name|query
operator|=
name|pqF
argument_list|(
literal|2
argument_list|,
literal|"a"
argument_list|,
literal|"b"
argument_list|)
expr_stmt|;
comment|// phraseHighlight = false, fieldMatch = false
name|fq
operator|=
operator|new
name|FieldQuery
argument_list|(
name|query
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|map
operator|=
name|fq
operator|.
name|rootMaps
expr_stmt|;
name|qpm
operator|=
name|map
operator|.
name|get
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|qpm2
operator|=
name|qpm
operator|.
name|subMap
operator|.
name|get
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2F
argument_list|,
name|qpm2
operator|.
name|boost
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|qpm3
operator|=
name|qpm2
operator|.
name|subMap
operator|.
name|get
argument_list|(
literal|"b"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2F
argument_list|,
name|qpm3
operator|.
name|boost
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|qpm2
operator|=
name|qpm
operator|.
name|subMap
operator|.
name|get
argument_list|(
literal|"b"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2F
argument_list|,
name|qpm2
operator|.
name|boost
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|testQueryPhraseMap1PhraseAnother
specifier|public
name|void
name|testQueryPhraseMap1PhraseAnother
parameter_list|()
throws|throws
name|Exception
block|{
name|Query
name|query
init|=
name|pqF
argument_list|(
literal|"search"
argument_list|,
literal|"engines"
argument_list|)
decl_stmt|;
comment|// phraseHighlight = true, fieldMatch = true
name|FieldQuery
name|fq
init|=
operator|new
name|FieldQuery
argument_list|(
name|query
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|QueryPhraseMap
argument_list|>
name|map
init|=
name|fq
operator|.
name|rootMaps
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|map
operator|.
name|get
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|map
operator|.
name|get
argument_list|(
name|F
argument_list|)
argument_list|)
expr_stmt|;
name|QueryPhraseMap
name|qpm
init|=
name|map
operator|.
name|get
argument_list|(
name|F
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|qpm
operator|.
name|subMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|qpm
operator|.
name|subMap
operator|.
name|get
argument_list|(
literal|"search"
argument_list|)
argument_list|)
expr_stmt|;
name|QueryPhraseMap
name|qpm2
init|=
name|qpm
operator|.
name|subMap
operator|.
name|get
argument_list|(
literal|"search"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|qpm2
operator|.
name|terminal
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|qpm2
operator|.
name|subMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|qpm2
operator|.
name|subMap
operator|.
name|get
argument_list|(
literal|"engines"
argument_list|)
argument_list|)
expr_stmt|;
name|QueryPhraseMap
name|qpm3
init|=
name|qpm2
operator|.
name|subMap
operator|.
name|get
argument_list|(
literal|"engines"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|qpm3
operator|.
name|terminal
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1F
argument_list|,
name|qpm3
operator|.
name|boost
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|testQueryPhraseMap2Phrases
specifier|public
name|void
name|testQueryPhraseMap2Phrases
parameter_list|()
throws|throws
name|Exception
block|{
name|BooleanQuery
name|query
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
name|query
operator|.
name|add
argument_list|(
name|pqF
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
argument_list|,
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|query
operator|.
name|add
argument_list|(
name|pqF
argument_list|(
literal|2
argument_list|,
literal|"c"
argument_list|,
literal|"d"
argument_list|)
argument_list|,
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
comment|// phraseHighlight = true, fieldMatch = true
name|FieldQuery
name|fq
init|=
operator|new
name|FieldQuery
argument_list|(
name|query
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|QueryPhraseMap
argument_list|>
name|map
init|=
name|fq
operator|.
name|rootMaps
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|map
operator|.
name|get
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|map
operator|.
name|get
argument_list|(
name|F
argument_list|)
argument_list|)
expr_stmt|;
name|QueryPhraseMap
name|qpm
init|=
name|map
operator|.
name|get
argument_list|(
name|F
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|qpm
operator|.
name|subMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// "a b"
name|assertNotNull
argument_list|(
name|qpm
operator|.
name|subMap
operator|.
name|get
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|QueryPhraseMap
name|qpm2
init|=
name|qpm
operator|.
name|subMap
operator|.
name|get
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|qpm2
operator|.
name|terminal
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|qpm2
operator|.
name|subMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|qpm2
operator|.
name|subMap
operator|.
name|get
argument_list|(
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|QueryPhraseMap
name|qpm3
init|=
name|qpm2
operator|.
name|subMap
operator|.
name|get
argument_list|(
literal|"b"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|qpm3
operator|.
name|terminal
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1F
argument_list|,
name|qpm3
operator|.
name|boost
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// "c d"^2
name|assertNotNull
argument_list|(
name|qpm
operator|.
name|subMap
operator|.
name|get
argument_list|(
literal|"c"
argument_list|)
argument_list|)
expr_stmt|;
name|qpm2
operator|=
name|qpm
operator|.
name|subMap
operator|.
name|get
argument_list|(
literal|"c"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|qpm2
operator|.
name|terminal
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|qpm2
operator|.
name|subMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|qpm2
operator|.
name|subMap
operator|.
name|get
argument_list|(
literal|"d"
argument_list|)
argument_list|)
expr_stmt|;
name|qpm3
operator|=
name|qpm2
operator|.
name|subMap
operator|.
name|get
argument_list|(
literal|"d"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|qpm3
operator|.
name|terminal
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2F
argument_list|,
name|qpm3
operator|.
name|boost
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|testQueryPhraseMap2PhrasesFields
specifier|public
name|void
name|testQueryPhraseMap2PhrasesFields
parameter_list|()
throws|throws
name|Exception
block|{
name|BooleanQuery
name|query
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
name|query
operator|.
name|add
argument_list|(
name|pq
argument_list|(
name|F1
argument_list|,
literal|"a"
argument_list|,
literal|"b"
argument_list|)
argument_list|,
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|query
operator|.
name|add
argument_list|(
name|pq
argument_list|(
literal|2F
argument_list|,
name|F2
argument_list|,
literal|"c"
argument_list|,
literal|"d"
argument_list|)
argument_list|,
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
comment|// phraseHighlight = true, fieldMatch = true
name|FieldQuery
name|fq
init|=
operator|new
name|FieldQuery
argument_list|(
name|query
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|QueryPhraseMap
argument_list|>
name|map
init|=
name|fq
operator|.
name|rootMaps
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|map
operator|.
name|get
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
comment|// "a b"
name|assertNotNull
argument_list|(
name|map
operator|.
name|get
argument_list|(
name|F1
argument_list|)
argument_list|)
expr_stmt|;
name|QueryPhraseMap
name|qpm
init|=
name|map
operator|.
name|get
argument_list|(
name|F1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|qpm
operator|.
name|subMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|qpm
operator|.
name|subMap
operator|.
name|get
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|QueryPhraseMap
name|qpm2
init|=
name|qpm
operator|.
name|subMap
operator|.
name|get
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|qpm2
operator|.
name|terminal
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|qpm2
operator|.
name|subMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|qpm2
operator|.
name|subMap
operator|.
name|get
argument_list|(
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|QueryPhraseMap
name|qpm3
init|=
name|qpm2
operator|.
name|subMap
operator|.
name|get
argument_list|(
literal|"b"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|qpm3
operator|.
name|terminal
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1F
argument_list|,
name|qpm3
operator|.
name|boost
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// "c d"^2
name|assertNotNull
argument_list|(
name|map
operator|.
name|get
argument_list|(
name|F2
argument_list|)
argument_list|)
expr_stmt|;
name|qpm
operator|=
name|map
operator|.
name|get
argument_list|(
name|F2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|qpm
operator|.
name|subMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|qpm
operator|.
name|subMap
operator|.
name|get
argument_list|(
literal|"c"
argument_list|)
argument_list|)
expr_stmt|;
name|qpm2
operator|=
name|qpm
operator|.
name|subMap
operator|.
name|get
argument_list|(
literal|"c"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|qpm2
operator|.
name|terminal
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|qpm2
operator|.
name|subMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|qpm2
operator|.
name|subMap
operator|.
name|get
argument_list|(
literal|"d"
argument_list|)
argument_list|)
expr_stmt|;
name|qpm3
operator|=
name|qpm2
operator|.
name|subMap
operator|.
name|get
argument_list|(
literal|"d"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|qpm3
operator|.
name|terminal
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2F
argument_list|,
name|qpm3
operator|.
name|boost
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// phraseHighlight = true, fieldMatch = false
name|fq
operator|=
operator|new
name|FieldQuery
argument_list|(
name|query
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|map
operator|=
name|fq
operator|.
name|rootMaps
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|map
operator|.
name|get
argument_list|(
name|F1
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|map
operator|.
name|get
argument_list|(
name|F2
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|map
operator|.
name|get
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|qpm
operator|=
name|map
operator|.
name|get
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|qpm
operator|.
name|subMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// "a b"
name|assertNotNull
argument_list|(
name|qpm
operator|.
name|subMap
operator|.
name|get
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|qpm2
operator|=
name|qpm
operator|.
name|subMap
operator|.
name|get
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|qpm2
operator|.
name|terminal
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|qpm2
operator|.
name|subMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|qpm2
operator|.
name|subMap
operator|.
name|get
argument_list|(
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|qpm3
operator|=
name|qpm2
operator|.
name|subMap
operator|.
name|get
argument_list|(
literal|"b"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|qpm3
operator|.
name|terminal
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1F
argument_list|,
name|qpm3
operator|.
name|boost
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// "c d"^2
name|assertNotNull
argument_list|(
name|qpm
operator|.
name|subMap
operator|.
name|get
argument_list|(
literal|"c"
argument_list|)
argument_list|)
expr_stmt|;
name|qpm2
operator|=
name|qpm
operator|.
name|subMap
operator|.
name|get
argument_list|(
literal|"c"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|qpm2
operator|.
name|terminal
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|qpm2
operator|.
name|subMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|qpm2
operator|.
name|subMap
operator|.
name|get
argument_list|(
literal|"d"
argument_list|)
argument_list|)
expr_stmt|;
name|qpm3
operator|=
name|qpm2
operator|.
name|subMap
operator|.
name|get
argument_list|(
literal|"d"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|qpm3
operator|.
name|terminal
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2F
argument_list|,
name|qpm3
operator|.
name|boost
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/*    *<t>...terminal    *     * a-b-c-<t>    *     +-d-<t>    * b-c-d-<t>    * +-d-<t>    */
DECL|method|testQueryPhraseMapOverlapPhrases
specifier|public
name|void
name|testQueryPhraseMapOverlapPhrases
parameter_list|()
throws|throws
name|Exception
block|{
name|BooleanQuery
name|query
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
name|query
operator|.
name|add
argument_list|(
name|pqF
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
argument_list|,
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|query
operator|.
name|add
argument_list|(
name|pqF
argument_list|(
literal|2
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"d"
argument_list|)
argument_list|,
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|query
operator|.
name|add
argument_list|(
name|pqF
argument_list|(
literal|3
argument_list|,
literal|"b"
argument_list|,
literal|"d"
argument_list|)
argument_list|,
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
comment|// phraseHighlight = true, fieldMatch = true
name|FieldQuery
name|fq
init|=
operator|new
name|FieldQuery
argument_list|(
name|query
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|QueryPhraseMap
argument_list|>
name|map
init|=
name|fq
operator|.
name|rootMaps
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|map
operator|.
name|get
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|map
operator|.
name|get
argument_list|(
name|F
argument_list|)
argument_list|)
expr_stmt|;
name|QueryPhraseMap
name|qpm
init|=
name|map
operator|.
name|get
argument_list|(
name|F
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|qpm
operator|.
name|subMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// "a b c"
name|assertNotNull
argument_list|(
name|qpm
operator|.
name|subMap
operator|.
name|get
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|QueryPhraseMap
name|qpm2
init|=
name|qpm
operator|.
name|subMap
operator|.
name|get
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|qpm2
operator|.
name|terminal
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|qpm2
operator|.
name|subMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|qpm2
operator|.
name|subMap
operator|.
name|get
argument_list|(
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|QueryPhraseMap
name|qpm3
init|=
name|qpm2
operator|.
name|subMap
operator|.
name|get
argument_list|(
literal|"b"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|qpm3
operator|.
name|terminal
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|qpm3
operator|.
name|subMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|qpm3
operator|.
name|subMap
operator|.
name|get
argument_list|(
literal|"c"
argument_list|)
argument_list|)
expr_stmt|;
name|QueryPhraseMap
name|qpm4
init|=
name|qpm3
operator|.
name|subMap
operator|.
name|get
argument_list|(
literal|"c"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|qpm4
operator|.
name|terminal
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1F
argument_list|,
name|qpm4
operator|.
name|boost
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|qpm4
operator|.
name|subMap
operator|.
name|get
argument_list|(
literal|"d"
argument_list|)
argument_list|)
expr_stmt|;
name|QueryPhraseMap
name|qpm5
init|=
name|qpm4
operator|.
name|subMap
operator|.
name|get
argument_list|(
literal|"d"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|qpm5
operator|.
name|terminal
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1F
argument_list|,
name|qpm5
operator|.
name|boost
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// "b c d"^2, "b d"^3
name|assertNotNull
argument_list|(
name|qpm
operator|.
name|subMap
operator|.
name|get
argument_list|(
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|qpm2
operator|=
name|qpm
operator|.
name|subMap
operator|.
name|get
argument_list|(
literal|"b"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|qpm2
operator|.
name|terminal
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|qpm2
operator|.
name|subMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|qpm2
operator|.
name|subMap
operator|.
name|get
argument_list|(
literal|"c"
argument_list|)
argument_list|)
expr_stmt|;
name|qpm3
operator|=
name|qpm2
operator|.
name|subMap
operator|.
name|get
argument_list|(
literal|"c"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|qpm3
operator|.
name|terminal
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|qpm3
operator|.
name|subMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|qpm3
operator|.
name|subMap
operator|.
name|get
argument_list|(
literal|"d"
argument_list|)
argument_list|)
expr_stmt|;
name|qpm4
operator|=
name|qpm3
operator|.
name|subMap
operator|.
name|get
argument_list|(
literal|"d"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|qpm4
operator|.
name|terminal
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2F
argument_list|,
name|qpm4
operator|.
name|boost
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|qpm2
operator|.
name|subMap
operator|.
name|get
argument_list|(
literal|"d"
argument_list|)
argument_list|)
expr_stmt|;
name|qpm3
operator|=
name|qpm2
operator|.
name|subMap
operator|.
name|get
argument_list|(
literal|"d"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|qpm3
operator|.
name|terminal
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3F
argument_list|,
name|qpm3
operator|.
name|boost
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/*    *<t>...terminal    *     * a-b-<t>    *   +-c-<t>    */
DECL|method|testQueryPhraseMapOverlapPhrases2
specifier|public
name|void
name|testQueryPhraseMapOverlapPhrases2
parameter_list|()
throws|throws
name|Exception
block|{
name|BooleanQuery
name|query
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
name|query
operator|.
name|add
argument_list|(
name|pqF
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
argument_list|,
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|query
operator|.
name|add
argument_list|(
name|pqF
argument_list|(
literal|2
argument_list|,
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
argument_list|,
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
comment|// phraseHighlight = true, fieldMatch = true
name|FieldQuery
name|fq
init|=
operator|new
name|FieldQuery
argument_list|(
name|query
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|QueryPhraseMap
argument_list|>
name|map
init|=
name|fq
operator|.
name|rootMaps
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|map
operator|.
name|get
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|map
operator|.
name|get
argument_list|(
name|F
argument_list|)
argument_list|)
expr_stmt|;
name|QueryPhraseMap
name|qpm
init|=
name|map
operator|.
name|get
argument_list|(
name|F
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|qpm
operator|.
name|subMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// "a b"
name|assertNotNull
argument_list|(
name|qpm
operator|.
name|subMap
operator|.
name|get
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|QueryPhraseMap
name|qpm2
init|=
name|qpm
operator|.
name|subMap
operator|.
name|get
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|qpm2
operator|.
name|terminal
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|qpm2
operator|.
name|subMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|qpm2
operator|.
name|subMap
operator|.
name|get
argument_list|(
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|QueryPhraseMap
name|qpm3
init|=
name|qpm2
operator|.
name|subMap
operator|.
name|get
argument_list|(
literal|"b"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|qpm3
operator|.
name|terminal
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1F
argument_list|,
name|qpm3
operator|.
name|boost
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// "a b c"^2
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|qpm3
operator|.
name|subMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|qpm3
operator|.
name|subMap
operator|.
name|get
argument_list|(
literal|"c"
argument_list|)
argument_list|)
expr_stmt|;
name|QueryPhraseMap
name|qpm4
init|=
name|qpm3
operator|.
name|subMap
operator|.
name|get
argument_list|(
literal|"c"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|qpm4
operator|.
name|terminal
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2F
argument_list|,
name|qpm4
operator|.
name|boost
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/*    *<t>...terminal    *     * a-a-a-<t>    *     +-a-<t>    *       +-a-<t>    *         +-a-<t>    */
DECL|method|testQueryPhraseMapOverlapPhrases3
specifier|public
name|void
name|testQueryPhraseMapOverlapPhrases3
parameter_list|()
throws|throws
name|Exception
block|{
name|BooleanQuery
name|query
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
name|query
operator|.
name|add
argument_list|(
name|pqF
argument_list|(
literal|"a"
argument_list|,
literal|"a"
argument_list|,
literal|"a"
argument_list|,
literal|"a"
argument_list|)
argument_list|,
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|query
operator|.
name|add
argument_list|(
name|pqF
argument_list|(
literal|2
argument_list|,
literal|"a"
argument_list|,
literal|"a"
argument_list|,
literal|"a"
argument_list|)
argument_list|,
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
comment|// phraseHighlight = true, fieldMatch = true
name|FieldQuery
name|fq
init|=
operator|new
name|FieldQuery
argument_list|(
name|query
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|QueryPhraseMap
argument_list|>
name|map
init|=
name|fq
operator|.
name|rootMaps
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|map
operator|.
name|get
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|map
operator|.
name|get
argument_list|(
name|F
argument_list|)
argument_list|)
expr_stmt|;
name|QueryPhraseMap
name|qpm
init|=
name|map
operator|.
name|get
argument_list|(
name|F
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|qpm
operator|.
name|subMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// "a a a"
name|assertNotNull
argument_list|(
name|qpm
operator|.
name|subMap
operator|.
name|get
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|QueryPhraseMap
name|qpm2
init|=
name|qpm
operator|.
name|subMap
operator|.
name|get
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|qpm2
operator|.
name|terminal
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|qpm2
operator|.
name|subMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|qpm2
operator|.
name|subMap
operator|.
name|get
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|QueryPhraseMap
name|qpm3
init|=
name|qpm2
operator|.
name|subMap
operator|.
name|get
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|qpm3
operator|.
name|terminal
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|qpm3
operator|.
name|subMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|qpm3
operator|.
name|subMap
operator|.
name|get
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|QueryPhraseMap
name|qpm4
init|=
name|qpm3
operator|.
name|subMap
operator|.
name|get
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|qpm4
operator|.
name|terminal
argument_list|)
expr_stmt|;
comment|// "a a a a"
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|qpm4
operator|.
name|subMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|qpm4
operator|.
name|subMap
operator|.
name|get
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|QueryPhraseMap
name|qpm5
init|=
name|qpm4
operator|.
name|subMap
operator|.
name|get
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|qpm5
operator|.
name|terminal
argument_list|)
expr_stmt|;
comment|// "a a a a a"
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|qpm5
operator|.
name|subMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|qpm5
operator|.
name|subMap
operator|.
name|get
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|QueryPhraseMap
name|qpm6
init|=
name|qpm5
operator|.
name|subMap
operator|.
name|get
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|qpm6
operator|.
name|terminal
argument_list|)
expr_stmt|;
comment|// "a a a a a a"
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|qpm6
operator|.
name|subMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|qpm6
operator|.
name|subMap
operator|.
name|get
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|QueryPhraseMap
name|qpm7
init|=
name|qpm6
operator|.
name|subMap
operator|.
name|get
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|qpm7
operator|.
name|terminal
argument_list|)
expr_stmt|;
block|}
DECL|method|testQueryPhraseMapOverlap2gram
specifier|public
name|void
name|testQueryPhraseMapOverlap2gram
parameter_list|()
throws|throws
name|Exception
block|{
name|BooleanQuery
name|query
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
name|query
operator|.
name|add
argument_list|(
name|toPhraseQuery
argument_list|(
name|analyze
argument_list|(
literal|"abc"
argument_list|,
name|F
argument_list|,
name|analyzerB
argument_list|)
argument_list|,
name|F
argument_list|)
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|query
operator|.
name|add
argument_list|(
name|toPhraseQuery
argument_list|(
name|analyze
argument_list|(
literal|"bcd"
argument_list|,
name|F
argument_list|,
name|analyzerB
argument_list|)
argument_list|,
name|F
argument_list|)
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
comment|// phraseHighlight = true, fieldMatch = true
name|FieldQuery
name|fq
init|=
operator|new
name|FieldQuery
argument_list|(
name|query
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|QueryPhraseMap
argument_list|>
name|map
init|=
name|fq
operator|.
name|rootMaps
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|map
operator|.
name|get
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|map
operator|.
name|get
argument_list|(
name|F
argument_list|)
argument_list|)
expr_stmt|;
name|QueryPhraseMap
name|qpm
init|=
name|map
operator|.
name|get
argument_list|(
name|F
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|qpm
operator|.
name|subMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// "ab bc"
name|assertNotNull
argument_list|(
name|qpm
operator|.
name|subMap
operator|.
name|get
argument_list|(
literal|"ab"
argument_list|)
argument_list|)
expr_stmt|;
name|QueryPhraseMap
name|qpm2
init|=
name|qpm
operator|.
name|subMap
operator|.
name|get
argument_list|(
literal|"ab"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|qpm2
operator|.
name|terminal
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|qpm2
operator|.
name|subMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|qpm2
operator|.
name|subMap
operator|.
name|get
argument_list|(
literal|"bc"
argument_list|)
argument_list|)
expr_stmt|;
name|QueryPhraseMap
name|qpm3
init|=
name|qpm2
operator|.
name|subMap
operator|.
name|get
argument_list|(
literal|"bc"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|qpm3
operator|.
name|terminal
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1F
argument_list|,
name|qpm3
operator|.
name|boost
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// "ab bc cd"
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|qpm3
operator|.
name|subMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|qpm3
operator|.
name|subMap
operator|.
name|get
argument_list|(
literal|"cd"
argument_list|)
argument_list|)
expr_stmt|;
name|QueryPhraseMap
name|qpm4
init|=
name|qpm3
operator|.
name|subMap
operator|.
name|get
argument_list|(
literal|"cd"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|qpm4
operator|.
name|terminal
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1F
argument_list|,
name|qpm4
operator|.
name|boost
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// "bc cd"
name|assertNotNull
argument_list|(
name|qpm
operator|.
name|subMap
operator|.
name|get
argument_list|(
literal|"bc"
argument_list|)
argument_list|)
expr_stmt|;
name|qpm2
operator|=
name|qpm
operator|.
name|subMap
operator|.
name|get
argument_list|(
literal|"bc"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|qpm2
operator|.
name|terminal
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|qpm2
operator|.
name|subMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|qpm2
operator|.
name|subMap
operator|.
name|get
argument_list|(
literal|"cd"
argument_list|)
argument_list|)
expr_stmt|;
name|qpm3
operator|=
name|qpm2
operator|.
name|subMap
operator|.
name|get
argument_list|(
literal|"cd"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|qpm3
operator|.
name|terminal
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1F
argument_list|,
name|qpm3
operator|.
name|boost
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// phraseHighlight = false, fieldMatch = true
name|fq
operator|=
operator|new
name|FieldQuery
argument_list|(
name|query
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|map
operator|=
name|fq
operator|.
name|rootMaps
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|map
operator|.
name|get
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|map
operator|.
name|get
argument_list|(
name|F
argument_list|)
argument_list|)
expr_stmt|;
name|qpm
operator|=
name|map
operator|.
name|get
argument_list|(
name|F
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|qpm
operator|.
name|subMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// "ab bc"
name|assertNotNull
argument_list|(
name|qpm
operator|.
name|subMap
operator|.
name|get
argument_list|(
literal|"ab"
argument_list|)
argument_list|)
expr_stmt|;
name|qpm2
operator|=
name|qpm
operator|.
name|subMap
operator|.
name|get
argument_list|(
literal|"ab"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|qpm2
operator|.
name|terminal
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1F
argument_list|,
name|qpm2
operator|.
name|boost
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|qpm2
operator|.
name|subMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|qpm2
operator|.
name|subMap
operator|.
name|get
argument_list|(
literal|"bc"
argument_list|)
argument_list|)
expr_stmt|;
name|qpm3
operator|=
name|qpm2
operator|.
name|subMap
operator|.
name|get
argument_list|(
literal|"bc"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|qpm3
operator|.
name|terminal
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1F
argument_list|,
name|qpm3
operator|.
name|boost
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// "ab bc cd"
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|qpm3
operator|.
name|subMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|qpm3
operator|.
name|subMap
operator|.
name|get
argument_list|(
literal|"cd"
argument_list|)
argument_list|)
expr_stmt|;
name|qpm4
operator|=
name|qpm3
operator|.
name|subMap
operator|.
name|get
argument_list|(
literal|"cd"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|qpm4
operator|.
name|terminal
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1F
argument_list|,
name|qpm4
operator|.
name|boost
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// "bc cd"
name|assertNotNull
argument_list|(
name|qpm
operator|.
name|subMap
operator|.
name|get
argument_list|(
literal|"bc"
argument_list|)
argument_list|)
expr_stmt|;
name|qpm2
operator|=
name|qpm
operator|.
name|subMap
operator|.
name|get
argument_list|(
literal|"bc"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|qpm2
operator|.
name|terminal
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1F
argument_list|,
name|qpm2
operator|.
name|boost
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|qpm2
operator|.
name|subMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|qpm2
operator|.
name|subMap
operator|.
name|get
argument_list|(
literal|"cd"
argument_list|)
argument_list|)
expr_stmt|;
name|qpm3
operator|=
name|qpm2
operator|.
name|subMap
operator|.
name|get
argument_list|(
literal|"cd"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|qpm3
operator|.
name|terminal
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1F
argument_list|,
name|qpm3
operator|.
name|boost
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// "cd"
name|assertNotNull
argument_list|(
name|qpm
operator|.
name|subMap
operator|.
name|get
argument_list|(
literal|"cd"
argument_list|)
argument_list|)
expr_stmt|;
name|qpm2
operator|=
name|qpm
operator|.
name|subMap
operator|.
name|get
argument_list|(
literal|"cd"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|qpm2
operator|.
name|terminal
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1F
argument_list|,
name|qpm2
operator|.
name|boost
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|qpm2
operator|.
name|subMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testSearchPhrase
specifier|public
name|void
name|testSearchPhrase
parameter_list|()
throws|throws
name|Exception
block|{
name|Query
name|query
init|=
name|pqF
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
decl_stmt|;
comment|// phraseHighlight = true, fieldMatch = true
name|FieldQuery
name|fq
init|=
operator|new
name|FieldQuery
argument_list|(
name|query
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
comment|// "a"
name|List
argument_list|<
name|TermInfo
argument_list|>
name|phraseCandidate
init|=
operator|new
name|ArrayList
argument_list|<
name|TermInfo
argument_list|>
argument_list|()
decl_stmt|;
name|phraseCandidate
operator|.
name|add
argument_list|(
operator|new
name|TermInfo
argument_list|(
literal|"a"
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|fq
operator|.
name|searchPhrase
argument_list|(
name|F
argument_list|,
name|phraseCandidate
argument_list|)
argument_list|)
expr_stmt|;
comment|// "a b"
name|phraseCandidate
operator|.
name|add
argument_list|(
operator|new
name|TermInfo
argument_list|(
literal|"b"
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|fq
operator|.
name|searchPhrase
argument_list|(
name|F
argument_list|,
name|phraseCandidate
argument_list|)
argument_list|)
expr_stmt|;
comment|// "a b c"
name|phraseCandidate
operator|.
name|add
argument_list|(
operator|new
name|TermInfo
argument_list|(
literal|"c"
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|fq
operator|.
name|searchPhrase
argument_list|(
name|F
argument_list|,
name|phraseCandidate
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|fq
operator|.
name|searchPhrase
argument_list|(
literal|"x"
argument_list|,
name|phraseCandidate
argument_list|)
argument_list|)
expr_stmt|;
comment|// phraseHighlight = true, fieldMatch = false
name|fq
operator|=
operator|new
name|FieldQuery
argument_list|(
name|query
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// "a b c"
name|assertNotNull
argument_list|(
name|fq
operator|.
name|searchPhrase
argument_list|(
name|F
argument_list|,
name|phraseCandidate
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|fq
operator|.
name|searchPhrase
argument_list|(
literal|"x"
argument_list|,
name|phraseCandidate
argument_list|)
argument_list|)
expr_stmt|;
comment|// phraseHighlight = false, fieldMatch = true
name|fq
operator|=
operator|new
name|FieldQuery
argument_list|(
name|query
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// "a"
name|phraseCandidate
operator|.
name|clear
argument_list|()
expr_stmt|;
name|phraseCandidate
operator|.
name|add
argument_list|(
operator|new
name|TermInfo
argument_list|(
literal|"a"
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|fq
operator|.
name|searchPhrase
argument_list|(
name|F
argument_list|,
name|phraseCandidate
argument_list|)
argument_list|)
expr_stmt|;
comment|// "a b"
name|phraseCandidate
operator|.
name|add
argument_list|(
operator|new
name|TermInfo
argument_list|(
literal|"b"
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|fq
operator|.
name|searchPhrase
argument_list|(
name|F
argument_list|,
name|phraseCandidate
argument_list|)
argument_list|)
expr_stmt|;
comment|// "a b c"
name|phraseCandidate
operator|.
name|add
argument_list|(
operator|new
name|TermInfo
argument_list|(
literal|"c"
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|fq
operator|.
name|searchPhrase
argument_list|(
name|F
argument_list|,
name|phraseCandidate
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|fq
operator|.
name|searchPhrase
argument_list|(
literal|"x"
argument_list|,
name|phraseCandidate
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testSearchPhraseSlop
specifier|public
name|void
name|testSearchPhraseSlop
parameter_list|()
throws|throws
name|Exception
block|{
comment|// "a b c"~0
name|Query
name|query
init|=
name|pqF
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
decl_stmt|;
comment|// phraseHighlight = true, fieldMatch = true
name|FieldQuery
name|fq
init|=
operator|new
name|FieldQuery
argument_list|(
name|query
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
comment|// "a b c" w/ position-gap = 2
name|List
argument_list|<
name|TermInfo
argument_list|>
name|phraseCandidate
init|=
operator|new
name|ArrayList
argument_list|<
name|TermInfo
argument_list|>
argument_list|()
decl_stmt|;
name|phraseCandidate
operator|.
name|add
argument_list|(
operator|new
name|TermInfo
argument_list|(
literal|"a"
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|phraseCandidate
operator|.
name|add
argument_list|(
operator|new
name|TermInfo
argument_list|(
literal|"b"
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|phraseCandidate
operator|.
name|add
argument_list|(
operator|new
name|TermInfo
argument_list|(
literal|"c"
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|,
literal|4
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|fq
operator|.
name|searchPhrase
argument_list|(
name|F
argument_list|,
name|phraseCandidate
argument_list|)
argument_list|)
expr_stmt|;
comment|// "a b c"~1
name|query
operator|=
name|pqF
argument_list|(
literal|1F
argument_list|,
literal|1
argument_list|,
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
expr_stmt|;
comment|// phraseHighlight = true, fieldMatch = true
name|fq
operator|=
operator|new
name|FieldQuery
argument_list|(
name|query
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// "a b c" w/ position-gap = 2
name|assertNotNull
argument_list|(
name|fq
operator|.
name|searchPhrase
argument_list|(
name|F
argument_list|,
name|phraseCandidate
argument_list|)
argument_list|)
expr_stmt|;
comment|// "a b c" w/ position-gap = 3
name|phraseCandidate
operator|.
name|clear
argument_list|()
expr_stmt|;
name|phraseCandidate
operator|.
name|add
argument_list|(
operator|new
name|TermInfo
argument_list|(
literal|"a"
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|phraseCandidate
operator|.
name|add
argument_list|(
operator|new
name|TermInfo
argument_list|(
literal|"b"
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|phraseCandidate
operator|.
name|add
argument_list|(
operator|new
name|TermInfo
argument_list|(
literal|"c"
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|,
literal|6
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|fq
operator|.
name|searchPhrase
argument_list|(
name|F
argument_list|,
name|phraseCandidate
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testHighlightQuery
specifier|public
name|void
name|testHighlightQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|makeIndexStrMV
argument_list|()
expr_stmt|;
name|defgMultiTermQueryTest
argument_list|(
operator|new
name|WildcardQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|F
argument_list|,
literal|"d*g"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testPrefixQuery
specifier|public
name|void
name|testPrefixQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|makeIndexStrMV
argument_list|()
expr_stmt|;
name|defgMultiTermQueryTest
argument_list|(
operator|new
name|PrefixQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|F
argument_list|,
literal|"de"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testRegexpQuery
specifier|public
name|void
name|testRegexpQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|makeIndexStrMV
argument_list|()
expr_stmt|;
name|Term
name|term
init|=
operator|new
name|Term
argument_list|(
name|F
argument_list|,
literal|"d[a-z].g"
argument_list|)
decl_stmt|;
name|defgMultiTermQueryTest
argument_list|(
operator|new
name|RegexpQuery
argument_list|(
name|term
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testRangeQuery
specifier|public
name|void
name|testRangeQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|makeIndexStrMV
argument_list|()
expr_stmt|;
name|defgMultiTermQueryTest
argument_list|(
operator|new
name|TermRangeQuery
argument_list|(
name|F
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"d"
argument_list|)
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"e"
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|defgMultiTermQueryTest
specifier|private
name|void
name|defgMultiTermQueryTest
parameter_list|(
name|Query
name|query
parameter_list|)
throws|throws
name|IOException
block|{
name|FieldQuery
name|fq
init|=
operator|new
name|FieldQuery
argument_list|(
name|query
argument_list|,
name|reader
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|QueryPhraseMap
name|qpm
init|=
name|fq
operator|.
name|getFieldTermMap
argument_list|(
name|F
argument_list|,
literal|"defg"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|qpm
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|fq
operator|.
name|getFieldTermMap
argument_list|(
name|F
argument_list|,
literal|"dog"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|TermInfo
argument_list|>
name|phraseCandidate
init|=
operator|new
name|ArrayList
argument_list|<
name|TermInfo
argument_list|>
argument_list|()
decl_stmt|;
name|phraseCandidate
operator|.
name|add
argument_list|(
operator|new
name|TermInfo
argument_list|(
literal|"defg"
argument_list|,
literal|0
argument_list|,
literal|12
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|fq
operator|.
name|searchPhrase
argument_list|(
name|F
argument_list|,
name|phraseCandidate
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
