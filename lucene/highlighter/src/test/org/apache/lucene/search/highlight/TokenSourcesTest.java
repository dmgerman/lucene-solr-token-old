begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.search.highlight
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|highlight
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|annotations
operator|.
name|Repeat
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|BaseTokenStreamTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|CannedTokenStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|MockAnalyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Token
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|CharTermAttribute
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|OffsetAttribute
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|PayloadAttribute
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|PositionIncrementAttribute
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|FieldType
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|TextField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|BaseTermVectorsFormatTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DirectoryReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Fields
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|RandomIndexWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|DisjunctionMaxQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TopDocs
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|spans
operator|.
name|SpanNearQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|spans
operator|.
name|SpanQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|spans
operator|.
name|SpanTermQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|TestUtil
import|;
end_import
begin_comment
comment|// LUCENE-2874
end_comment
begin_comment
comment|/** Tests {@link org.apache.lucene.search.highlight.TokenSources} and  *  {@link org.apache.lucene.search.highlight.TokenStreamFromTermVector}  * indirectly from that.  */
end_comment
begin_class
DECL|class|TokenSourcesTest
specifier|public
class|class
name|TokenSourcesTest
extends|extends
name|BaseTokenStreamTestCase
block|{
DECL|field|FIELD
specifier|private
specifier|static
specifier|final
name|String
name|FIELD
init|=
literal|"text"
decl_stmt|;
DECL|class|OverlappingTokenStream
specifier|private
specifier|static
specifier|final
class|class
name|OverlappingTokenStream
extends|extends
name|TokenStream
block|{
DECL|field|tokens
specifier|private
name|Token
index|[]
name|tokens
decl_stmt|;
DECL|field|i
specifier|private
name|int
name|i
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|termAttribute
specifier|private
specifier|final
name|CharTermAttribute
name|termAttribute
init|=
name|addAttribute
argument_list|(
name|CharTermAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|offsetAttribute
specifier|private
specifier|final
name|OffsetAttribute
name|offsetAttribute
init|=
name|addAttribute
argument_list|(
name|OffsetAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|positionIncrementAttribute
specifier|private
specifier|final
name|PositionIncrementAttribute
name|positionIncrementAttribute
init|=
name|addAttribute
argument_list|(
name|PositionIncrementAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Override
DECL|method|incrementToken
specifier|public
name|boolean
name|incrementToken
parameter_list|()
block|{
name|this
operator|.
name|i
operator|++
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|i
operator|>=
name|this
operator|.
name|tokens
operator|.
name|length
condition|)
block|{
return|return
literal|false
return|;
block|}
name|clearAttributes
argument_list|()
expr_stmt|;
name|termAttribute
operator|.
name|setEmpty
argument_list|()
operator|.
name|append
argument_list|(
name|this
operator|.
name|tokens
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|offsetAttribute
operator|.
name|setOffset
argument_list|(
name|this
operator|.
name|tokens
index|[
name|i
index|]
operator|.
name|startOffset
argument_list|()
argument_list|,
name|this
operator|.
name|tokens
index|[
name|i
index|]
operator|.
name|endOffset
argument_list|()
argument_list|)
expr_stmt|;
name|positionIncrementAttribute
operator|.
name|setPositionIncrement
argument_list|(
name|this
operator|.
name|tokens
index|[
name|i
index|]
operator|.
name|getPositionIncrement
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|reset
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|this
operator|.
name|i
operator|=
operator|-
literal|1
expr_stmt|;
name|this
operator|.
name|tokens
operator|=
operator|new
name|Token
index|[]
block|{
operator|new
name|Token
argument_list|(
literal|"the"
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|)
block|,
operator|new
name|Token
argument_list|(
literal|"{fox}"
argument_list|,
literal|0
argument_list|,
literal|7
argument_list|)
block|,
operator|new
name|Token
argument_list|(
literal|"fox"
argument_list|,
literal|4
argument_list|,
literal|7
argument_list|)
block|,
operator|new
name|Token
argument_list|(
literal|"did"
argument_list|,
literal|8
argument_list|,
literal|11
argument_list|)
block|,
operator|new
name|Token
argument_list|(
literal|"not"
argument_list|,
literal|12
argument_list|,
literal|15
argument_list|)
block|,
operator|new
name|Token
argument_list|(
literal|"jump"
argument_list|,
literal|16
argument_list|,
literal|20
argument_list|)
block|}
expr_stmt|;
name|this
operator|.
name|tokens
index|[
literal|1
index|]
operator|.
name|setPositionIncrement
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testOverlapWithOffset
specifier|public
name|void
name|testOverlapWithOffset
parameter_list|()
throws|throws
name|IOException
throws|,
name|InvalidTokenOffsetsException
block|{
specifier|final
name|String
name|TEXT
init|=
literal|"the fox did not jump"
decl_stmt|;
specifier|final
name|Directory
name|directory
init|=
name|newDirectory
argument_list|()
decl_stmt|;
specifier|final
name|IndexWriter
name|indexWriter
init|=
operator|new
name|IndexWriter
argument_list|(
name|directory
argument_list|,
name|newIndexWriterConfig
argument_list|(
literal|null
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
specifier|final
name|Document
name|document
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|FieldType
name|customType
init|=
operator|new
name|FieldType
argument_list|(
name|TextField
operator|.
name|TYPE_NOT_STORED
argument_list|)
decl_stmt|;
name|customType
operator|.
name|setStoreTermVectors
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// no positions!
name|customType
operator|.
name|setStoreTermVectorOffsets
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|document
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
name|FIELD
argument_list|,
operator|new
name|OverlappingTokenStream
argument_list|()
argument_list|,
name|customType
argument_list|)
argument_list|)
expr_stmt|;
name|indexWriter
operator|.
name|addDocument
argument_list|(
name|document
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|indexWriter
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|final
name|IndexReader
name|indexReader
init|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|directory
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|indexReader
operator|.
name|numDocs
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|IndexSearcher
name|indexSearcher
init|=
name|newSearcher
argument_list|(
name|indexReader
argument_list|)
decl_stmt|;
try|try
block|{
specifier|final
name|DisjunctionMaxQuery
name|query
init|=
operator|new
name|DisjunctionMaxQuery
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|SpanTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|FIELD
argument_list|,
literal|"{fox}"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|SpanTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|FIELD
argument_list|,
literal|"fox"
argument_list|)
argument_list|)
argument_list|)
argument_list|,
literal|1
argument_list|)
decl_stmt|;
comment|// final Query phraseQuery = new SpanNearQuery(new SpanQuery[] {
comment|// new SpanTermQuery(new Term(FIELD, "{fox}")),
comment|// new SpanTermQuery(new Term(FIELD, "fox")) }, 0, true);
name|TopDocs
name|hits
init|=
name|indexSearcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|hits
operator|.
name|totalHits
argument_list|)
expr_stmt|;
specifier|final
name|Highlighter
name|highlighter
init|=
operator|new
name|Highlighter
argument_list|(
operator|new
name|SimpleHTMLFormatter
argument_list|()
argument_list|,
operator|new
name|SimpleHTMLEncoder
argument_list|()
argument_list|,
operator|new
name|QueryScorer
argument_list|(
name|query
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|TokenStream
name|tokenStream
init|=
name|TokenSources
operator|.
name|getTermVectorTokenStreamOrNull
argument_list|(
name|FIELD
argument_list|,
name|indexReader
operator|.
name|getTermVectors
argument_list|(
literal|0
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"<B>the fox</B> did not jump"
argument_list|,
name|highlighter
operator|.
name|getBestFragment
argument_list|(
name|tokenStream
argument_list|,
name|TEXT
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|indexReader
operator|.
name|close
argument_list|()
expr_stmt|;
name|directory
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|testOverlapWithPositionsAndOffset
specifier|public
name|void
name|testOverlapWithPositionsAndOffset
parameter_list|()
throws|throws
name|IOException
throws|,
name|InvalidTokenOffsetsException
block|{
specifier|final
name|String
name|TEXT
init|=
literal|"the fox did not jump"
decl_stmt|;
specifier|final
name|Directory
name|directory
init|=
name|newDirectory
argument_list|()
decl_stmt|;
specifier|final
name|IndexWriter
name|indexWriter
init|=
operator|new
name|IndexWriter
argument_list|(
name|directory
argument_list|,
name|newIndexWriterConfig
argument_list|(
literal|null
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
specifier|final
name|Document
name|document
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|FieldType
name|customType
init|=
operator|new
name|FieldType
argument_list|(
name|TextField
operator|.
name|TYPE_NOT_STORED
argument_list|)
decl_stmt|;
name|customType
operator|.
name|setStoreTermVectors
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|customType
operator|.
name|setStoreTermVectorOffsets
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|customType
operator|.
name|setStoreTermVectorPositions
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|document
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
name|FIELD
argument_list|,
operator|new
name|OverlappingTokenStream
argument_list|()
argument_list|,
name|customType
argument_list|)
argument_list|)
expr_stmt|;
name|indexWriter
operator|.
name|addDocument
argument_list|(
name|document
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|indexWriter
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|final
name|IndexReader
name|indexReader
init|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|directory
argument_list|)
decl_stmt|;
try|try
block|{
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|indexReader
operator|.
name|numDocs
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|IndexSearcher
name|indexSearcher
init|=
name|newSearcher
argument_list|(
name|indexReader
argument_list|)
decl_stmt|;
specifier|final
name|DisjunctionMaxQuery
name|query
init|=
operator|new
name|DisjunctionMaxQuery
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|SpanTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|FIELD
argument_list|,
literal|"{fox}"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|SpanTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|FIELD
argument_list|,
literal|"fox"
argument_list|)
argument_list|)
argument_list|)
argument_list|,
literal|1
argument_list|)
decl_stmt|;
comment|// final Query phraseQuery = new SpanNearQuery(new SpanQuery[] {
comment|// new SpanTermQuery(new Term(FIELD, "{fox}")),
comment|// new SpanTermQuery(new Term(FIELD, "fox")) }, 0, true);
name|TopDocs
name|hits
init|=
name|indexSearcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|hits
operator|.
name|totalHits
argument_list|)
expr_stmt|;
specifier|final
name|Highlighter
name|highlighter
init|=
operator|new
name|Highlighter
argument_list|(
operator|new
name|SimpleHTMLFormatter
argument_list|()
argument_list|,
operator|new
name|SimpleHTMLEncoder
argument_list|()
argument_list|,
operator|new
name|QueryScorer
argument_list|(
name|query
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|TokenStream
name|tokenStream
init|=
name|TokenSources
operator|.
name|getTermVectorTokenStreamOrNull
argument_list|(
name|FIELD
argument_list|,
name|indexReader
operator|.
name|getTermVectors
argument_list|(
literal|0
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"<B>the fox</B> did not jump"
argument_list|,
name|highlighter
operator|.
name|getBestFragment
argument_list|(
name|tokenStream
argument_list|,
name|TEXT
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|indexReader
operator|.
name|close
argument_list|()
expr_stmt|;
name|directory
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|testOverlapWithOffsetExactPhrase
specifier|public
name|void
name|testOverlapWithOffsetExactPhrase
parameter_list|()
throws|throws
name|IOException
throws|,
name|InvalidTokenOffsetsException
block|{
specifier|final
name|String
name|TEXT
init|=
literal|"the fox did not jump"
decl_stmt|;
specifier|final
name|Directory
name|directory
init|=
name|newDirectory
argument_list|()
decl_stmt|;
specifier|final
name|IndexWriter
name|indexWriter
init|=
operator|new
name|IndexWriter
argument_list|(
name|directory
argument_list|,
name|newIndexWriterConfig
argument_list|(
literal|null
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
specifier|final
name|Document
name|document
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|FieldType
name|customType
init|=
operator|new
name|FieldType
argument_list|(
name|TextField
operator|.
name|TYPE_NOT_STORED
argument_list|)
decl_stmt|;
name|customType
operator|.
name|setStoreTermVectors
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// no positions!
name|customType
operator|.
name|setStoreTermVectorOffsets
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|document
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
name|FIELD
argument_list|,
operator|new
name|OverlappingTokenStream
argument_list|()
argument_list|,
name|customType
argument_list|)
argument_list|)
expr_stmt|;
name|indexWriter
operator|.
name|addDocument
argument_list|(
name|document
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|indexWriter
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|final
name|IndexReader
name|indexReader
init|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|directory
argument_list|)
decl_stmt|;
try|try
block|{
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|indexReader
operator|.
name|numDocs
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|IndexSearcher
name|indexSearcher
init|=
name|newSearcher
argument_list|(
name|indexReader
argument_list|)
decl_stmt|;
comment|// final DisjunctionMaxQuery query = new DisjunctionMaxQuery(1);
comment|// query.add(new SpanTermQuery(new Term(FIELD, "{fox}")));
comment|// query.add(new SpanTermQuery(new Term(FIELD, "fox")));
specifier|final
name|Query
name|phraseQuery
init|=
operator|new
name|SpanNearQuery
argument_list|(
operator|new
name|SpanQuery
index|[]
block|{
operator|new
name|SpanTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|FIELD
argument_list|,
literal|"the"
argument_list|)
argument_list|)
block|,
operator|new
name|SpanTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|FIELD
argument_list|,
literal|"fox"
argument_list|)
argument_list|)
block|}
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|TopDocs
name|hits
init|=
name|indexSearcher
operator|.
name|search
argument_list|(
name|phraseQuery
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|hits
operator|.
name|totalHits
argument_list|)
expr_stmt|;
specifier|final
name|Highlighter
name|highlighter
init|=
operator|new
name|Highlighter
argument_list|(
operator|new
name|SimpleHTMLFormatter
argument_list|()
argument_list|,
operator|new
name|SimpleHTMLEncoder
argument_list|()
argument_list|,
operator|new
name|QueryScorer
argument_list|(
name|phraseQuery
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|TokenStream
name|tokenStream
init|=
name|TokenSources
operator|.
name|getTermVectorTokenStreamOrNull
argument_list|(
name|FIELD
argument_list|,
name|indexReader
operator|.
name|getTermVectors
argument_list|(
literal|0
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"<B>the fox</B> did not jump"
argument_list|,
name|highlighter
operator|.
name|getBestFragment
argument_list|(
name|tokenStream
argument_list|,
name|TEXT
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|indexReader
operator|.
name|close
argument_list|()
expr_stmt|;
name|directory
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|testOverlapWithPositionsAndOffsetExactPhrase
specifier|public
name|void
name|testOverlapWithPositionsAndOffsetExactPhrase
parameter_list|()
throws|throws
name|IOException
throws|,
name|InvalidTokenOffsetsException
block|{
specifier|final
name|String
name|TEXT
init|=
literal|"the fox did not jump"
decl_stmt|;
specifier|final
name|Directory
name|directory
init|=
name|newDirectory
argument_list|()
decl_stmt|;
specifier|final
name|IndexWriter
name|indexWriter
init|=
operator|new
name|IndexWriter
argument_list|(
name|directory
argument_list|,
name|newIndexWriterConfig
argument_list|(
literal|null
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
specifier|final
name|Document
name|document
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|FieldType
name|customType
init|=
operator|new
name|FieldType
argument_list|(
name|TextField
operator|.
name|TYPE_NOT_STORED
argument_list|)
decl_stmt|;
name|customType
operator|.
name|setStoreTermVectors
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|customType
operator|.
name|setStoreTermVectorPositions
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|customType
operator|.
name|setStoreTermVectorOffsets
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|document
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
name|FIELD
argument_list|,
operator|new
name|OverlappingTokenStream
argument_list|()
argument_list|,
name|customType
argument_list|)
argument_list|)
expr_stmt|;
name|indexWriter
operator|.
name|addDocument
argument_list|(
name|document
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|indexWriter
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|final
name|IndexReader
name|indexReader
init|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|directory
argument_list|)
decl_stmt|;
try|try
block|{
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|indexReader
operator|.
name|numDocs
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|IndexSearcher
name|indexSearcher
init|=
name|newSearcher
argument_list|(
name|indexReader
argument_list|)
decl_stmt|;
comment|// final DisjunctionMaxQuery query = new DisjunctionMaxQuery(1);
comment|// query.add(new SpanTermQuery(new Term(FIELD, "the")));
comment|// query.add(new SpanTermQuery(new Term(FIELD, "fox")));
specifier|final
name|Query
name|phraseQuery
init|=
operator|new
name|SpanNearQuery
argument_list|(
operator|new
name|SpanQuery
index|[]
block|{
operator|new
name|SpanTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|FIELD
argument_list|,
literal|"the"
argument_list|)
argument_list|)
block|,
operator|new
name|SpanTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|FIELD
argument_list|,
literal|"fox"
argument_list|)
argument_list|)
block|}
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|TopDocs
name|hits
init|=
name|indexSearcher
operator|.
name|search
argument_list|(
name|phraseQuery
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|hits
operator|.
name|totalHits
argument_list|)
expr_stmt|;
specifier|final
name|Highlighter
name|highlighter
init|=
operator|new
name|Highlighter
argument_list|(
operator|new
name|SimpleHTMLFormatter
argument_list|()
argument_list|,
operator|new
name|SimpleHTMLEncoder
argument_list|()
argument_list|,
operator|new
name|QueryScorer
argument_list|(
name|phraseQuery
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|TokenStream
name|tokenStream
init|=
name|TokenSources
operator|.
name|getTermVectorTokenStreamOrNull
argument_list|(
name|FIELD
argument_list|,
name|indexReader
operator|.
name|getTermVectors
argument_list|(
literal|0
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"<B>the fox</B> did not jump"
argument_list|,
name|highlighter
operator|.
name|getBestFragment
argument_list|(
name|tokenStream
argument_list|,
name|TEXT
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|indexReader
operator|.
name|close
argument_list|()
expr_stmt|;
name|directory
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|testTermVectorWithoutOffsetsDoesntWork
specifier|public
name|void
name|testTermVectorWithoutOffsetsDoesntWork
parameter_list|()
throws|throws
name|IOException
throws|,
name|InvalidTokenOffsetsException
block|{
specifier|final
name|Directory
name|directory
init|=
name|newDirectory
argument_list|()
decl_stmt|;
specifier|final
name|IndexWriter
name|indexWriter
init|=
operator|new
name|IndexWriter
argument_list|(
name|directory
argument_list|,
name|newIndexWriterConfig
argument_list|(
literal|null
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
specifier|final
name|Document
name|document
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|FieldType
name|customType
init|=
operator|new
name|FieldType
argument_list|(
name|TextField
operator|.
name|TYPE_NOT_STORED
argument_list|)
decl_stmt|;
name|customType
operator|.
name|setStoreTermVectors
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|customType
operator|.
name|setStoreTermVectorOffsets
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|customType
operator|.
name|setStoreTermVectorPositions
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|document
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
name|FIELD
argument_list|,
operator|new
name|OverlappingTokenStream
argument_list|()
argument_list|,
name|customType
argument_list|)
argument_list|)
expr_stmt|;
name|indexWriter
operator|.
name|addDocument
argument_list|(
name|document
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|indexWriter
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|final
name|IndexReader
name|indexReader
init|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|directory
argument_list|)
decl_stmt|;
try|try
block|{
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|indexReader
operator|.
name|numDocs
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|TokenStream
name|tokenStream
init|=
name|TokenSources
operator|.
name|getTermVectorTokenStreamOrNull
argument_list|(
name|FIELD
argument_list|,
name|indexReader
operator|.
name|getTermVectors
argument_list|(
literal|0
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|tokenStream
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|indexReader
operator|.
name|close
argument_list|()
expr_stmt|;
name|directory
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|field|curOffset
name|int
name|curOffset
decl_stmt|;
comment|/** Just make a token with the text, and set the payload    *  to the text as well.  Offets increment "naturally". */
DECL|method|getToken
specifier|private
name|Token
name|getToken
parameter_list|(
name|String
name|text
parameter_list|)
block|{
name|Token
name|t
init|=
operator|new
name|Token
argument_list|(
name|text
argument_list|,
name|curOffset
argument_list|,
name|curOffset
operator|+
name|text
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|t
operator|.
name|setPayload
argument_list|(
operator|new
name|BytesRef
argument_list|(
name|text
argument_list|)
argument_list|)
expr_stmt|;
name|curOffset
operator|++
expr_stmt|;
return|return
name|t
return|;
block|}
comment|// LUCENE-5294
DECL|method|testPayloads
specifier|public
name|void
name|testPayloads
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|RandomIndexWriter
name|writer
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|)
decl_stmt|;
name|FieldType
name|myFieldType
init|=
operator|new
name|FieldType
argument_list|(
name|TextField
operator|.
name|TYPE_NOT_STORED
argument_list|)
decl_stmt|;
name|myFieldType
operator|.
name|setStoreTermVectors
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|myFieldType
operator|.
name|setStoreTermVectorOffsets
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|myFieldType
operator|.
name|setStoreTermVectorPositions
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|myFieldType
operator|.
name|setStoreTermVectorPayloads
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|curOffset
operator|=
literal|0
expr_stmt|;
name|Token
index|[]
name|tokens
init|=
operator|new
name|Token
index|[]
block|{
name|getToken
argument_list|(
literal|"foxes"
argument_list|)
block|,
name|getToken
argument_list|(
literal|"can"
argument_list|)
block|,
name|getToken
argument_list|(
literal|"jump"
argument_list|)
block|,
name|getToken
argument_list|(
literal|"high"
argument_list|)
block|}
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"field"
argument_list|,
operator|new
name|CannedTokenStream
argument_list|(
name|tokens
argument_list|)
argument_list|,
name|myFieldType
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|IndexReader
name|reader
init|=
name|writer
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|reader
operator|.
name|numDocs
argument_list|()
argument_list|)
expr_stmt|;
name|TokenStream
name|ts
init|=
name|TokenSources
operator|.
name|getTermVectorTokenStreamOrNull
argument_list|(
literal|"field"
argument_list|,
name|reader
operator|.
name|getTermVectors
argument_list|(
literal|0
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|CharTermAttribute
name|termAtt
init|=
name|ts
operator|.
name|getAttribute
argument_list|(
name|CharTermAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
name|PositionIncrementAttribute
name|posIncAtt
init|=
name|ts
operator|.
name|getAttribute
argument_list|(
name|PositionIncrementAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
name|OffsetAttribute
name|offsetAtt
init|=
name|ts
operator|.
name|getAttribute
argument_list|(
name|OffsetAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
name|PayloadAttribute
name|payloadAtt
init|=
name|ts
operator|.
name|addAttribute
argument_list|(
name|PayloadAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
name|ts
operator|.
name|reset
argument_list|()
expr_stmt|;
for|for
control|(
name|Token
name|token
range|:
name|tokens
control|)
block|{
name|assertTrue
argument_list|(
name|ts
operator|.
name|incrementToken
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|token
operator|.
name|toString
argument_list|()
argument_list|,
name|termAtt
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|token
operator|.
name|getPositionIncrement
argument_list|()
argument_list|,
name|posIncAtt
operator|.
name|getPositionIncrement
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|token
operator|.
name|getPayload
argument_list|()
argument_list|,
name|payloadAtt
operator|.
name|getPayload
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|token
operator|.
name|startOffset
argument_list|()
argument_list|,
name|offsetAtt
operator|.
name|startOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|token
operator|.
name|endOffset
argument_list|()
argument_list|,
name|offsetAtt
operator|.
name|endOffset
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
name|ts
operator|.
name|incrementToken
argument_list|()
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Repeat
argument_list|(
name|iterations
operator|=
literal|10
argument_list|)
comment|//@Seed("947083AB20AB2D4F")
DECL|method|testRandomizedRoundTrip
specifier|public
name|void
name|testRandomizedRoundTrip
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|distinct
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|String
index|[]
name|terms
init|=
operator|new
name|String
index|[
name|distinct
index|]
decl_stmt|;
name|BytesRef
index|[]
name|termBytes
init|=
operator|new
name|BytesRef
index|[
name|distinct
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|distinct
condition|;
operator|++
name|i
control|)
block|{
name|terms
index|[
name|i
index|]
operator|=
name|TestUtil
operator|.
name|randomRealisticUnicodeString
argument_list|(
name|random
argument_list|()
argument_list|)
expr_stmt|;
name|termBytes
index|[
name|i
index|]
operator|=
operator|new
name|BytesRef
argument_list|(
name|terms
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
specifier|final
name|BaseTermVectorsFormatTestCase
operator|.
name|RandomTokenStream
name|rTokenStream
init|=
operator|new
name|BaseTermVectorsFormatTestCase
operator|.
name|RandomTokenStream
argument_list|(
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|10
argument_list|)
argument_list|,
name|terms
argument_list|,
name|termBytes
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|//check to see if the token streams might have non-deterministic testable result
specifier|final
name|boolean
name|storeTermVectorPositions
init|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
decl_stmt|;
specifier|final
name|int
index|[]
name|startOffsets
init|=
name|rTokenStream
operator|.
name|getStartOffsets
argument_list|()
decl_stmt|;
specifier|final
name|int
index|[]
name|positionsIncrements
init|=
name|rTokenStream
operator|.
name|getPositionsIncrements
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|positionsIncrements
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|storeTermVectorPositions
operator|&&
name|positionsIncrements
index|[
name|i
index|]
operator|!=
literal|0
condition|)
block|{
continue|continue;
block|}
comment|//TODO should RandomTokenStream ensure endOffsets for tokens at same position and same startOffset are greater
comment|// than previous token's endOffset?  That would increase the testable possibilities.
if|if
condition|(
name|startOffsets
index|[
name|i
index|]
operator|==
name|startOffsets
index|[
name|i
operator|-
literal|1
index|]
condition|)
block|{
if|if
condition|(
name|VERBOSE
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Skipping test because can't easily validate random token-stream is correct."
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
comment|//sanity check itself
name|assertTokenStreamContents
argument_list|(
name|rTokenStream
argument_list|,
name|rTokenStream
operator|.
name|getTerms
argument_list|()
argument_list|,
name|rTokenStream
operator|.
name|getStartOffsets
argument_list|()
argument_list|,
name|rTokenStream
operator|.
name|getEndOffsets
argument_list|()
argument_list|,
name|rTokenStream
operator|.
name|getPositionsIncrements
argument_list|()
argument_list|)
expr_stmt|;
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|RandomIndexWriter
name|writer
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|)
decl_stmt|;
name|FieldType
name|myFieldType
init|=
operator|new
name|FieldType
argument_list|(
name|TextField
operator|.
name|TYPE_NOT_STORED
argument_list|)
decl_stmt|;
name|myFieldType
operator|.
name|setStoreTermVectors
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|myFieldType
operator|.
name|setStoreTermVectorOffsets
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|myFieldType
operator|.
name|setStoreTermVectorPositions
argument_list|(
name|storeTermVectorPositions
argument_list|)
expr_stmt|;
comment|//payloads require positions; it will throw an error otherwise
name|myFieldType
operator|.
name|setStoreTermVectorPayloads
argument_list|(
name|storeTermVectorPositions
operator|&&
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
argument_list|)
expr_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"field"
argument_list|,
name|rTokenStream
argument_list|,
name|myFieldType
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|IndexReader
name|reader
init|=
name|writer
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|reader
operator|.
name|numDocs
argument_list|()
argument_list|)
expr_stmt|;
name|TokenStream
name|vectorTokenStream
init|=
name|TokenSources
operator|.
name|getTermVectorTokenStreamOrNull
argument_list|(
literal|"field"
argument_list|,
name|reader
operator|.
name|getTermVectors
argument_list|(
literal|0
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
comment|//sometimes check payloads
name|PayloadAttribute
name|payloadAttribute
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|myFieldType
operator|.
name|storeTermVectorPayloads
argument_list|()
operator|&&
name|usually
argument_list|()
condition|)
block|{
name|payloadAttribute
operator|=
name|vectorTokenStream
operator|.
name|addAttribute
argument_list|(
name|PayloadAttribute
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
name|assertTokenStreamContents
argument_list|(
name|vectorTokenStream
argument_list|,
name|rTokenStream
operator|.
name|getTerms
argument_list|()
argument_list|,
name|rTokenStream
operator|.
name|getStartOffsets
argument_list|()
argument_list|,
name|rTokenStream
operator|.
name|getEndOffsets
argument_list|()
argument_list|,
name|myFieldType
operator|.
name|storeTermVectorPositions
argument_list|()
condition|?
name|rTokenStream
operator|.
name|getPositionsIncrements
argument_list|()
else|:
literal|null
argument_list|)
expr_stmt|;
comment|//test payloads
if|if
condition|(
name|payloadAttribute
operator|!=
literal|null
condition|)
block|{
name|vectorTokenStream
operator|.
name|reset
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|vectorTokenStream
operator|.
name|incrementToken
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|rTokenStream
operator|.
name|getPayloads
argument_list|()
index|[
name|i
index|]
argument_list|,
name|payloadAttribute
operator|.
name|getPayload
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testMaxStartOffsetConsistency
specifier|public
name|void
name|testMaxStartOffsetConsistency
parameter_list|()
throws|throws
name|IOException
block|{
name|FieldType
name|tvFieldType
init|=
operator|new
name|FieldType
argument_list|(
name|TextField
operator|.
name|TYPE_NOT_STORED
argument_list|)
decl_stmt|;
name|tvFieldType
operator|.
name|setStoreTermVectors
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|tvFieldType
operator|.
name|setStoreTermVectorOffsets
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|tvFieldType
operator|.
name|setStoreTermVectorPositions
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|MockAnalyzer
name|analyzer
init|=
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
decl_stmt|;
name|analyzer
operator|.
name|setEnableChecks
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|//we don't necessarily consume the whole stream because of limiting by startOffset
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
specifier|final
name|String
name|TEXT
init|=
literal|" f gg h"
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"fld_tv"
argument_list|,
name|analyzer
operator|.
name|tokenStream
argument_list|(
literal|"fooFld"
argument_list|,
name|TEXT
argument_list|)
argument_list|,
name|tvFieldType
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
literal|"fld_notv"
argument_list|,
name|analyzer
operator|.
name|tokenStream
argument_list|(
literal|"barFld"
argument_list|,
name|TEXT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|IndexReader
name|reader
decl_stmt|;
try|try
init|(
name|RandomIndexWriter
name|writer
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|)
init|)
block|{
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|reader
operator|=
name|writer
operator|.
name|getReader
argument_list|()
expr_stmt|;
block|}
try|try
block|{
name|Fields
name|tvFields
init|=
name|reader
operator|.
name|getTermVectors
argument_list|(
literal|0
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|maxStartOffset
init|=
operator|-
literal|1
init|;
name|maxStartOffset
operator|<=
name|TEXT
operator|.
name|length
argument_list|()
condition|;
name|maxStartOffset
operator|++
control|)
block|{
name|TokenStream
name|tvStream
init|=
name|TokenSources
operator|.
name|getTokenStream
argument_list|(
literal|"fld_tv"
argument_list|,
name|tvFields
argument_list|,
name|TEXT
argument_list|,
name|analyzer
argument_list|,
name|maxStartOffset
argument_list|)
decl_stmt|;
name|TokenStream
name|anaStream
init|=
name|TokenSources
operator|.
name|getTokenStream
argument_list|(
literal|"fld_notv"
argument_list|,
name|tvFields
argument_list|,
name|TEXT
argument_list|,
name|analyzer
argument_list|,
name|maxStartOffset
argument_list|)
decl_stmt|;
comment|//assert have same tokens, none of which has a start offset> maxStartOffset
specifier|final
name|OffsetAttribute
name|tvOffAtt
init|=
name|tvStream
operator|.
name|addAttribute
argument_list|(
name|OffsetAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|OffsetAttribute
name|anaOffAtt
init|=
name|anaStream
operator|.
name|addAttribute
argument_list|(
name|OffsetAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
name|tvStream
operator|.
name|reset
argument_list|()
expr_stmt|;
name|anaStream
operator|.
name|reset
argument_list|()
expr_stmt|;
while|while
condition|(
name|tvStream
operator|.
name|incrementToken
argument_list|()
condition|)
block|{
name|assertTrue
argument_list|(
name|anaStream
operator|.
name|incrementToken
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|tvOffAtt
operator|.
name|startOffset
argument_list|()
argument_list|,
name|anaOffAtt
operator|.
name|startOffset
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|maxStartOffset
operator|>=
literal|0
condition|)
name|assertTrue
argument_list|(
name|tvOffAtt
operator|.
name|startOffset
argument_list|()
operator|<=
name|maxStartOffset
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|anaStream
operator|.
name|incrementToken
argument_list|()
operator|==
literal|false
argument_list|)
expr_stmt|;
name|tvStream
operator|.
name|end
argument_list|()
expr_stmt|;
name|anaStream
operator|.
name|end
argument_list|()
expr_stmt|;
name|tvStream
operator|.
name|close
argument_list|()
expr_stmt|;
name|anaStream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class
end_unit
