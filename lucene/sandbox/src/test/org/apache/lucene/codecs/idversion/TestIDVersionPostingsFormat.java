begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.codecs.idversion
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|idversion
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Analyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|MockAnalyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|MockTokenFilter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|MockTokenizer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|idversion
operator|.
name|StringAndPayloadField
operator|.
name|SingleTokenWithPayloadTokenStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|FieldType
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|ConcurrentMergeScheduler
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|PostingsEnum
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriterConfig
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|MergeScheduler
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|PerThreadPKLookup
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|RandomIndexWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|TieredMergePolicy
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|LiveFieldValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|SearcherFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|SearcherManager
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|AlreadyClosedException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|TestUtil
import|;
end_import
begin_comment
comment|/**  * Basic tests for IDVersionPostingsFormat  */
end_comment
begin_comment
comment|// Cannot extend BasePostingsFormatTestCase because this PF is not
end_comment
begin_comment
comment|// general (it requires payloads, only allows 1 doc per term, etc.)
end_comment
begin_class
DECL|class|TestIDVersionPostingsFormat
specifier|public
class|class
name|TestIDVersionPostingsFormat
extends|extends
name|LuceneTestCase
block|{
DECL|method|testBasic
specifier|public
name|void
name|testBasic
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriterConfig
name|iwc
init|=
name|newIndexWriterConfig
argument_list|(
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|iwc
operator|.
name|setCodec
argument_list|(
name|TestUtil
operator|.
name|alwaysPostingsFormat
argument_list|(
operator|new
name|IDVersionPostingsFormat
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|RandomIndexWriter
name|w
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|,
name|iwc
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|makeIDField
argument_list|(
literal|"id0"
argument_list|,
literal|100
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|makeIDField
argument_list|(
literal|"id1"
argument_list|,
literal|110
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|IndexReader
name|r
init|=
name|w
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|IDVersionSegmentTermsEnum
name|termsEnum
init|=
operator|(
name|IDVersionSegmentTermsEnum
operator|)
name|r
operator|.
name|leaves
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|reader
argument_list|()
operator|.
name|fields
argument_list|()
operator|.
name|terms
argument_list|(
literal|"id"
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|termsEnum
operator|.
name|seekExact
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"id0"
argument_list|)
argument_list|,
literal|50
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|termsEnum
operator|.
name|seekExact
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"id0"
argument_list|)
argument_list|,
literal|100
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|termsEnum
operator|.
name|seekExact
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"id0"
argument_list|)
argument_list|,
literal|101
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|termsEnum
operator|.
name|seekExact
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"id1"
argument_list|)
argument_list|,
literal|50
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|termsEnum
operator|.
name|seekExact
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"id1"
argument_list|)
argument_list|,
literal|110
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|termsEnum
operator|.
name|seekExact
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"id1"
argument_list|)
argument_list|,
literal|111
argument_list|)
argument_list|)
expr_stmt|;
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|interface|IDSource
specifier|private
interface|interface
name|IDSource
block|{
DECL|method|next
name|String
name|next
parameter_list|()
function_decl|;
block|}
DECL|method|getRandomIDs
specifier|private
name|IDSource
name|getRandomIDs
parameter_list|()
block|{
name|IDSource
name|ids
decl_stmt|;
switch|switch
condition|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|6
argument_list|)
condition|)
block|{
case|case
literal|0
case|:
comment|// random simple
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TEST: use random simple ids"
argument_list|)
expr_stmt|;
block|}
name|ids
operator|=
operator|new
name|IDSource
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|next
parameter_list|()
block|{
return|return
name|TestUtil
operator|.
name|randomSimpleString
argument_list|(
name|random
argument_list|()
argument_list|)
return|;
block|}
block|}
expr_stmt|;
break|break;
case|case
literal|1
case|:
comment|// random realistic unicode
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TEST: use random realistic unicode ids"
argument_list|)
expr_stmt|;
block|}
name|ids
operator|=
operator|new
name|IDSource
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|next
parameter_list|()
block|{
return|return
name|TestUtil
operator|.
name|randomRealisticUnicodeString
argument_list|(
name|random
argument_list|()
argument_list|)
return|;
block|}
block|}
expr_stmt|;
break|break;
case|case
literal|2
case|:
comment|// sequential
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TEST: use seuquential ids"
argument_list|)
expr_stmt|;
block|}
name|ids
operator|=
operator|new
name|IDSource
argument_list|()
block|{
name|int
name|upto
decl_stmt|;
annotation|@
name|Override
specifier|public
name|String
name|next
parameter_list|()
block|{
return|return
name|Integer
operator|.
name|toString
argument_list|(
name|upto
operator|++
argument_list|)
return|;
block|}
block|}
expr_stmt|;
break|break;
case|case
literal|3
case|:
comment|// zero-pad sequential
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TEST: use zero-pad seuquential ids"
argument_list|)
expr_stmt|;
block|}
name|ids
operator|=
operator|new
name|IDSource
argument_list|()
block|{
specifier|final
name|int
name|radix
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
name|Character
operator|.
name|MIN_RADIX
argument_list|,
name|Character
operator|.
name|MAX_RADIX
argument_list|)
decl_stmt|;
specifier|final
name|String
name|zeroPad
init|=
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"%0"
operator|+
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|5
argument_list|,
literal|20
argument_list|)
operator|+
literal|"d"
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|int
name|upto
decl_stmt|;
annotation|@
name|Override
specifier|public
name|String
name|next
parameter_list|()
block|{
name|String
name|s
init|=
name|Integer
operator|.
name|toString
argument_list|(
name|upto
operator|++
argument_list|)
decl_stmt|;
return|return
name|zeroPad
operator|.
name|substring
argument_list|(
name|zeroPad
operator|.
name|length
argument_list|()
operator|-
name|s
operator|.
name|length
argument_list|()
argument_list|)
operator|+
name|s
return|;
block|}
block|}
expr_stmt|;
break|break;
case|case
literal|4
case|:
comment|// random long
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TEST: use random long ids"
argument_list|)
expr_stmt|;
block|}
name|ids
operator|=
operator|new
name|IDSource
argument_list|()
block|{
specifier|final
name|int
name|radix
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
name|Character
operator|.
name|MIN_RADIX
argument_list|,
name|Character
operator|.
name|MAX_RADIX
argument_list|)
decl_stmt|;
name|int
name|upto
decl_stmt|;
annotation|@
name|Override
specifier|public
name|String
name|next
parameter_list|()
block|{
return|return
name|Long
operator|.
name|toString
argument_list|(
name|random
argument_list|()
operator|.
name|nextLong
argument_list|()
operator|&
literal|0x3ffffffffffffffL
argument_list|,
name|radix
argument_list|)
return|;
block|}
block|}
expr_stmt|;
break|break;
case|case
literal|5
case|:
comment|// zero-pad random long
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TEST: use zero-pad random long ids"
argument_list|)
expr_stmt|;
block|}
name|ids
operator|=
operator|new
name|IDSource
argument_list|()
block|{
specifier|final
name|int
name|radix
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
name|Character
operator|.
name|MIN_RADIX
argument_list|,
name|Character
operator|.
name|MAX_RADIX
argument_list|)
decl_stmt|;
specifier|final
name|String
name|zeroPad
init|=
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"%015d"
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|int
name|upto
decl_stmt|;
annotation|@
name|Override
specifier|public
name|String
name|next
parameter_list|()
block|{
return|return
name|Long
operator|.
name|toString
argument_list|(
name|random
argument_list|()
operator|.
name|nextLong
argument_list|()
operator|&
literal|0x3ffffffffffffffL
argument_list|,
name|radix
argument_list|)
return|;
block|}
block|}
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|()
throw|;
block|}
return|return
name|ids
return|;
block|}
comment|// TODO make a similar test for BT, w/ varied IDs:
DECL|method|testRandom
specifier|public
name|void
name|testRandom
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriterConfig
name|iwc
init|=
name|newIndexWriterConfig
argument_list|(
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|minItemsInBlock
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|2
argument_list|,
literal|50
argument_list|)
decl_stmt|;
name|int
name|maxItemsInBlock
init|=
literal|2
operator|*
operator|(
name|minItemsInBlock
operator|-
literal|1
operator|)
operator|+
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|50
argument_list|)
decl_stmt|;
name|iwc
operator|.
name|setCodec
argument_list|(
name|TestUtil
operator|.
name|alwaysPostingsFormat
argument_list|(
operator|new
name|IDVersionPostingsFormat
argument_list|(
name|minItemsInBlock
argument_list|,
name|maxItemsInBlock
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|RandomIndexWriter
name|w
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|,
name|iwc
argument_list|)
decl_stmt|;
comment|//IndexWriter w = new IndexWriter(dir, iwc);
name|int
name|numDocs
init|=
name|atLeast
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|idValues
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|docUpto
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TEST: numDocs="
operator|+
name|numDocs
argument_list|)
expr_stmt|;
block|}
name|IDSource
name|ids
init|=
name|getRandomIDs
argument_list|()
decl_stmt|;
name|String
name|idPrefix
decl_stmt|;
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|idPrefix
operator|=
literal|""
expr_stmt|;
block|}
else|else
block|{
name|idPrefix
operator|=
name|TestUtil
operator|.
name|randomSimpleString
argument_list|(
name|random
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TEST: use id prefix: "
operator|+
name|idPrefix
argument_list|)
expr_stmt|;
block|}
block|}
name|boolean
name|useMonotonicVersion
init|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TEST: useMonotonicVersion="
operator|+
name|useMonotonicVersion
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|idsList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|long
name|version
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|docUpto
operator|<
name|numDocs
condition|)
block|{
name|String
name|idValue
init|=
name|idPrefix
operator|+
name|ids
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|idValues
operator|.
name|containsKey
argument_list|(
name|idValue
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|useMonotonicVersion
condition|)
block|{
name|version
operator|+=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|10
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|version
operator|=
name|random
argument_list|()
operator|.
name|nextLong
argument_list|()
operator|&
literal|0x3fffffffffffffffL
expr_stmt|;
block|}
name|idValues
operator|.
name|put
argument_list|(
name|idValue
argument_list|,
name|version
argument_list|)
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  "
operator|+
name|idValue
operator|+
literal|" -> "
operator|+
name|version
argument_list|)
expr_stmt|;
block|}
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|makeIDField
argument_list|(
name|idValue
argument_list|,
name|version
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|idsList
operator|.
name|add
argument_list|(
name|idValue
argument_list|)
expr_stmt|;
if|if
condition|(
name|idsList
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|&&
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|7
argument_list|)
operator|==
literal|5
condition|)
block|{
comment|// Randomly delete or update a previous ID
name|idValue
operator|=
name|idsList
operator|.
name|get
argument_list|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|idsList
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
if|if
condition|(
name|useMonotonicVersion
condition|)
block|{
name|version
operator|+=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|10
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|version
operator|=
name|random
argument_list|()
operator|.
name|nextLong
argument_list|()
operator|&
literal|0x3fffffffffffffffL
expr_stmt|;
block|}
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|makeIDField
argument_list|(
name|idValue
argument_list|,
name|version
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  update "
operator|+
name|idValue
operator|+
literal|" -> "
operator|+
name|version
argument_list|)
expr_stmt|;
block|}
name|w
operator|.
name|updateDocument
argument_list|(
operator|new
name|Term
argument_list|(
literal|"id"
argument_list|,
name|idValue
argument_list|)
argument_list|,
name|doc
argument_list|)
expr_stmt|;
name|idValues
operator|.
name|put
argument_list|(
name|idValue
argument_list|,
name|version
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  delete "
operator|+
name|idValue
argument_list|)
expr_stmt|;
block|}
name|w
operator|.
name|deleteDocuments
argument_list|(
operator|new
name|Term
argument_list|(
literal|"id"
argument_list|,
name|idValue
argument_list|)
argument_list|)
expr_stmt|;
name|idValues
operator|.
name|remove
argument_list|(
name|idValue
argument_list|)
expr_stmt|;
block|}
block|}
name|docUpto
operator|++
expr_stmt|;
block|}
name|IndexReader
name|r
init|=
name|w
operator|.
name|getReader
argument_list|()
decl_stmt|;
comment|//IndexReader r = DirectoryReader.open(w);
name|PerThreadVersionPKLookup
name|lookup
init|=
operator|new
name|PerThreadVersionPKLookup
argument_list|(
name|r
argument_list|,
literal|"id"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|>
name|idValuesList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|idValues
operator|.
name|entrySet
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|iters
init|=
name|numDocs
operator|*
literal|5
decl_stmt|;
for|for
control|(
name|int
name|iter
init|=
literal|0
init|;
name|iter
operator|<
name|iters
condition|;
name|iter
operator|++
control|)
block|{
name|String
name|idValue
decl_stmt|;
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|idValue
operator|=
name|idValuesList
operator|.
name|get
argument_list|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|idValuesList
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
operator|.
name|getKey
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|idValue
operator|=
name|ids
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|idValue
operator|=
name|idPrefix
operator|+
name|TestUtil
operator|.
name|randomSimpleString
argument_list|(
name|random
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|BytesRef
name|idValueBytes
init|=
operator|new
name|BytesRef
argument_list|(
name|idValue
argument_list|)
decl_stmt|;
name|Long
name|expectedVersion
init|=
name|idValues
operator|.
name|get
argument_list|(
name|idValue
argument_list|)
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\nTEST: iter="
operator|+
name|iter
operator|+
literal|" id="
operator|+
name|idValue
operator|+
literal|" expectedVersion="
operator|+
name|expectedVersion
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|expectedVersion
operator|==
literal|null
condition|)
block|{
name|assertEquals
argument_list|(
literal|"term should not have been found (doesn't exist)"
argument_list|,
operator|-
literal|1
argument_list|,
name|lookup
operator|.
name|lookup
argument_list|(
name|idValueBytes
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  lookup exact version (should be found)"
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"term should have been found (version too old)"
argument_list|,
name|lookup
operator|.
name|lookup
argument_list|(
name|idValueBytes
argument_list|,
name|expectedVersion
operator|.
name|longValue
argument_list|()
argument_list|)
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedVersion
operator|.
name|longValue
argument_list|()
argument_list|,
name|lookup
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  lookup version+1 (should not be found)"
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"term should not have been found (version newer)"
argument_list|,
operator|-
literal|1
argument_list|,
name|lookup
operator|.
name|lookup
argument_list|(
name|idValueBytes
argument_list|,
name|expectedVersion
operator|.
name|longValue
argument_list|()
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|class|PerThreadVersionPKLookup
specifier|private
specifier|static
class|class
name|PerThreadVersionPKLookup
extends|extends
name|PerThreadPKLookup
block|{
DECL|method|PerThreadVersionPKLookup
specifier|public
name|PerThreadVersionPKLookup
parameter_list|(
name|IndexReader
name|r
parameter_list|,
name|String
name|field
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|r
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
DECL|field|lastVersion
name|long
name|lastVersion
decl_stmt|;
comment|/** Returns docID if found, else -1. */
DECL|method|lookup
specifier|public
name|int
name|lookup
parameter_list|(
name|BytesRef
name|id
parameter_list|,
name|long
name|version
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|seg
init|=
literal|0
init|;
name|seg
operator|<
name|numSegs
condition|;
name|seg
operator|++
control|)
block|{
if|if
condition|(
operator|(
operator|(
name|IDVersionSegmentTermsEnum
operator|)
name|termsEnums
index|[
name|seg
index|]
operator|)
operator|.
name|seekExact
argument_list|(
name|id
argument_list|,
name|version
argument_list|)
condition|)
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  found in seg="
operator|+
name|termsEnums
index|[
name|seg
index|]
argument_list|)
expr_stmt|;
block|}
name|postingsEnums
index|[
name|seg
index|]
operator|=
name|termsEnums
index|[
name|seg
index|]
operator|.
name|postings
argument_list|(
name|postingsEnums
index|[
name|seg
index|]
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|int
name|docID
init|=
name|postingsEnums
index|[
name|seg
index|]
operator|.
name|nextDoc
argument_list|()
decl_stmt|;
if|if
condition|(
name|docID
operator|!=
name|PostingsEnum
operator|.
name|NO_MORE_DOCS
operator|&&
operator|(
name|liveDocs
index|[
name|seg
index|]
operator|==
literal|null
operator|||
name|liveDocs
index|[
name|seg
index|]
operator|.
name|get
argument_list|(
name|docID
argument_list|)
operator|)
condition|)
block|{
name|lastVersion
operator|=
operator|(
operator|(
name|IDVersionSegmentTermsEnum
operator|)
name|termsEnums
index|[
name|seg
index|]
operator|)
operator|.
name|getVersion
argument_list|()
expr_stmt|;
return|return
name|docBases
index|[
name|seg
index|]
operator|+
name|docID
return|;
block|}
assert|assert
name|hasDeletions
assert|;
block|}
block|}
return|return
operator|-
literal|1
return|;
block|}
comment|/** Only valid if lookup returned a valid docID. */
DECL|method|getVersion
specifier|public
name|long
name|getVersion
parameter_list|()
block|{
return|return
name|lastVersion
return|;
block|}
block|}
DECL|method|makeIDField
specifier|private
specifier|static
name|Field
name|makeIDField
parameter_list|(
name|String
name|id
parameter_list|,
name|long
name|version
parameter_list|)
block|{
name|BytesRef
name|payload
init|=
operator|new
name|BytesRef
argument_list|(
literal|8
argument_list|)
decl_stmt|;
name|payload
operator|.
name|length
operator|=
literal|8
expr_stmt|;
name|IDVersionPostingsFormat
operator|.
name|longToBytes
argument_list|(
name|version
argument_list|,
name|payload
argument_list|)
expr_stmt|;
return|return
operator|new
name|StringAndPayloadField
argument_list|(
literal|"id"
argument_list|,
name|id
argument_list|,
name|payload
argument_list|)
return|;
block|}
DECL|method|testMoreThanOneDocPerIDOneSegment
specifier|public
name|void
name|testMoreThanOneDocPerIDOneSegment
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriterConfig
name|iwc
init|=
name|newIndexWriterConfig
argument_list|(
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|iwc
operator|.
name|setCodec
argument_list|(
name|TestUtil
operator|.
name|alwaysPostingsFormat
argument_list|(
operator|new
name|IDVersionPostingsFormat
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|RandomIndexWriter
name|w
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|,
name|iwc
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|makeIDField
argument_list|(
literal|"id"
argument_list|,
literal|17
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|makeIDField
argument_list|(
literal|"id"
argument_list|,
literal|17
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|w
operator|.
name|commit
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"didn't hit expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|iae
parameter_list|)
block|{
comment|// expected
block|}
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testMoreThanOneDocPerIDTwoSegments
specifier|public
name|void
name|testMoreThanOneDocPerIDTwoSegments
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriterConfig
name|iwc
init|=
name|newIndexWriterConfig
argument_list|(
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|iwc
operator|.
name|setCodec
argument_list|(
name|TestUtil
operator|.
name|alwaysPostingsFormat
argument_list|(
operator|new
name|IDVersionPostingsFormat
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|iwc
operator|.
name|setMergePolicy
argument_list|(
operator|new
name|TieredMergePolicy
argument_list|()
argument_list|)
expr_stmt|;
name|MergeScheduler
name|ms
init|=
name|iwc
operator|.
name|getMergeScheduler
argument_list|()
decl_stmt|;
if|if
condition|(
name|ms
operator|instanceof
name|ConcurrentMergeScheduler
condition|)
block|{
name|iwc
operator|.
name|setMergeScheduler
argument_list|(
operator|new
name|ConcurrentMergeScheduler
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|void
name|handleMergeException
parameter_list|(
name|Directory
name|dir
parameter_list|,
name|Throwable
name|exc
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|exc
operator|instanceof
name|IllegalArgumentException
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
name|IndexWriter
name|w
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|iwc
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|makeIDField
argument_list|(
literal|"id"
argument_list|,
literal|17
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|w
operator|.
name|commit
argument_list|()
expr_stmt|;
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|makeIDField
argument_list|(
literal|"id"
argument_list|,
literal|17
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|w
operator|.
name|commit
argument_list|()
expr_stmt|;
name|w
operator|.
name|forceMerge
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"didn't hit exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|iae
parameter_list|)
block|{
comment|// expected: SMS will hit this
block|}
catch|catch
parameter_list|(
name|IOException
decl||
name|IllegalStateException
name|exc
parameter_list|)
block|{
comment|// expected
name|assertTrue
argument_list|(
name|exc
operator|.
name|getCause
argument_list|()
operator|instanceof
name|IllegalArgumentException
argument_list|)
expr_stmt|;
block|}
name|w
operator|.
name|rollback
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testMoreThanOneDocPerIDWithUpdates
specifier|public
name|void
name|testMoreThanOneDocPerIDWithUpdates
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriterConfig
name|iwc
init|=
name|newIndexWriterConfig
argument_list|(
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|iwc
operator|.
name|setCodec
argument_list|(
name|TestUtil
operator|.
name|alwaysPostingsFormat
argument_list|(
operator|new
name|IDVersionPostingsFormat
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|RandomIndexWriter
name|w
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|,
name|iwc
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|makeIDField
argument_list|(
literal|"id"
argument_list|,
literal|17
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|makeIDField
argument_list|(
literal|"id"
argument_list|,
literal|17
argument_list|)
argument_list|)
expr_stmt|;
comment|// Replaces the doc we just indexed:
name|w
operator|.
name|updateDocument
argument_list|(
operator|new
name|Term
argument_list|(
literal|"id"
argument_list|,
literal|"id"
argument_list|)
argument_list|,
name|doc
argument_list|)
expr_stmt|;
name|w
operator|.
name|commit
argument_list|()
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testMoreThanOneDocPerIDWithDeletes
specifier|public
name|void
name|testMoreThanOneDocPerIDWithDeletes
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriterConfig
name|iwc
init|=
name|newIndexWriterConfig
argument_list|(
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|iwc
operator|.
name|setCodec
argument_list|(
name|TestUtil
operator|.
name|alwaysPostingsFormat
argument_list|(
operator|new
name|IDVersionPostingsFormat
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|RandomIndexWriter
name|w
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|,
name|iwc
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|makeIDField
argument_list|(
literal|"id"
argument_list|,
literal|17
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|w
operator|.
name|deleteDocuments
argument_list|(
operator|new
name|Term
argument_list|(
literal|"id"
argument_list|,
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|makeIDField
argument_list|(
literal|"id"
argument_list|,
literal|17
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|w
operator|.
name|commit
argument_list|()
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testMissingPayload
specifier|public
name|void
name|testMissingPayload
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
comment|// MockAnalyzer minus maybePayload else it sometimes stuffs in an 8-byte payload!
name|Analyzer
name|a
init|=
operator|new
name|Analyzer
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|TokenStreamComponents
name|createComponents
parameter_list|(
name|String
name|fieldName
parameter_list|)
block|{
name|MockTokenizer
name|tokenizer
init|=
operator|new
name|MockTokenizer
argument_list|(
name|MockTokenizer
operator|.
name|WHITESPACE
argument_list|,
literal|true
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|tokenizer
operator|.
name|setEnableChecks
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|MockTokenFilter
name|filt
init|=
operator|new
name|MockTokenFilter
argument_list|(
name|tokenizer
argument_list|,
name|MockTokenFilter
operator|.
name|EMPTY_STOPSET
argument_list|)
decl_stmt|;
return|return
operator|new
name|TokenStreamComponents
argument_list|(
name|tokenizer
argument_list|,
name|filt
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|IndexWriterConfig
name|iwc
init|=
name|newIndexWriterConfig
argument_list|(
name|a
argument_list|)
decl_stmt|;
name|iwc
operator|.
name|setCodec
argument_list|(
name|TestUtil
operator|.
name|alwaysPostingsFormat
argument_list|(
operator|new
name|IDVersionPostingsFormat
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|RandomIndexWriter
name|w
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|,
name|iwc
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newTextField
argument_list|(
literal|"id"
argument_list|,
literal|"id"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|w
operator|.
name|commit
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"didn't hit expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|iae
parameter_list|)
block|{
comment|// expected
block|}
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testMissingPositions
specifier|public
name|void
name|testMissingPositions
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriterConfig
name|iwc
init|=
name|newIndexWriterConfig
argument_list|(
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|iwc
operator|.
name|setCodec
argument_list|(
name|TestUtil
operator|.
name|alwaysPostingsFormat
argument_list|(
operator|new
name|IDVersionPostingsFormat
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|RandomIndexWriter
name|w
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|,
name|iwc
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newStringField
argument_list|(
literal|"id"
argument_list|,
literal|"id"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|w
operator|.
name|commit
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"didn't hit expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|iae
parameter_list|)
block|{
comment|// expected
block|}
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testInvalidPayload
specifier|public
name|void
name|testInvalidPayload
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriterConfig
name|iwc
init|=
name|newIndexWriterConfig
argument_list|(
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|iwc
operator|.
name|setCodec
argument_list|(
name|TestUtil
operator|.
name|alwaysPostingsFormat
argument_list|(
operator|new
name|IDVersionPostingsFormat
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|RandomIndexWriter
name|w
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|,
name|iwc
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|StringAndPayloadField
argument_list|(
literal|"id"
argument_list|,
literal|"id"
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|w
operator|.
name|commit
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"didn't hit expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|iae
parameter_list|)
block|{
comment|// expected
block|}
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testMoreThanOneDocPerIDWithDeletesAcrossSegments
specifier|public
name|void
name|testMoreThanOneDocPerIDWithDeletesAcrossSegments
parameter_list|()
throws|throws
name|IOException
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriterConfig
name|iwc
init|=
name|newIndexWriterConfig
argument_list|(
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|iwc
operator|.
name|setCodec
argument_list|(
name|TestUtil
operator|.
name|alwaysPostingsFormat
argument_list|(
operator|new
name|IDVersionPostingsFormat
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|RandomIndexWriter
name|w
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|,
name|iwc
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|makeIDField
argument_list|(
literal|"id"
argument_list|,
literal|17
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|w
operator|.
name|commit
argument_list|()
expr_stmt|;
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|makeIDField
argument_list|(
literal|"id"
argument_list|,
literal|17
argument_list|)
argument_list|)
expr_stmt|;
comment|// Replaces the doc we just indexed:
name|w
operator|.
name|updateDocument
argument_list|(
operator|new
name|Term
argument_list|(
literal|"id"
argument_list|,
literal|"id"
argument_list|)
argument_list|,
name|doc
argument_list|)
expr_stmt|;
name|w
operator|.
name|forceMerge
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// LUCENE-5693: because CheckIndex cross-checks term vectors with postings even for deleted docs, and because our PF only indexes the
comment|// non-deleted documents on flush, CheckIndex will see this as corruption:
DECL|method|testCannotIndexTermVectors
specifier|public
name|void
name|testCannotIndexTermVectors
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriterConfig
name|iwc
init|=
name|newIndexWriterConfig
argument_list|(
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|iwc
operator|.
name|setCodec
argument_list|(
name|TestUtil
operator|.
name|alwaysPostingsFormat
argument_list|(
operator|new
name|IDVersionPostingsFormat
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|RandomIndexWriter
name|w
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|,
name|iwc
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|FieldType
name|ft
init|=
operator|new
name|FieldType
argument_list|(
name|StringAndPayloadField
operator|.
name|TYPE
argument_list|)
decl_stmt|;
name|ft
operator|.
name|setStoreTermVectors
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|SingleTokenWithPayloadTokenStream
name|ts
init|=
operator|new
name|SingleTokenWithPayloadTokenStream
argument_list|()
decl_stmt|;
name|BytesRef
name|payload
init|=
operator|new
name|BytesRef
argument_list|(
literal|8
argument_list|)
decl_stmt|;
name|payload
operator|.
name|length
operator|=
literal|8
expr_stmt|;
name|IDVersionPostingsFormat
operator|.
name|longToBytes
argument_list|(
literal|17
argument_list|,
name|payload
argument_list|)
expr_stmt|;
name|ts
operator|.
name|setValue
argument_list|(
literal|"foo"
argument_list|,
name|payload
argument_list|)
expr_stmt|;
name|Field
name|field
init|=
operator|new
name|Field
argument_list|(
literal|"id"
argument_list|,
name|ts
argument_list|,
name|ft
argument_list|)
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"id"
argument_list|,
name|ts
argument_list|,
name|ft
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|w
operator|.
name|commit
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"didn't hit expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|iae
parameter_list|)
block|{
comment|// expected
comment|// iae.printStackTrace(System.out);
block|}
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testMoreThanOnceInSingleDoc
specifier|public
name|void
name|testMoreThanOnceInSingleDoc
parameter_list|()
throws|throws
name|IOException
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriterConfig
name|iwc
init|=
name|newIndexWriterConfig
argument_list|(
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|iwc
operator|.
name|setCodec
argument_list|(
name|TestUtil
operator|.
name|alwaysPostingsFormat
argument_list|(
operator|new
name|IDVersionPostingsFormat
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|RandomIndexWriter
name|w
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|,
name|iwc
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|makeIDField
argument_list|(
literal|"id"
argument_list|,
literal|17
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|makeIDField
argument_list|(
literal|"id"
argument_list|,
literal|17
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|w
operator|.
name|commit
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"didn't hit expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|iae
parameter_list|)
block|{
comment|// expected
block|}
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testInvalidVersions
specifier|public
name|void
name|testInvalidVersions
parameter_list|()
throws|throws
name|IOException
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriterConfig
name|iwc
init|=
name|newIndexWriterConfig
argument_list|(
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|iwc
operator|.
name|setCodec
argument_list|(
name|TestUtil
operator|.
name|alwaysPostingsFormat
argument_list|(
operator|new
name|IDVersionPostingsFormat
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|RandomIndexWriter
name|w
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|,
name|iwc
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
comment|// -1
name|doc
operator|.
name|add
argument_list|(
operator|new
name|StringAndPayloadField
argument_list|(
literal|"id"
argument_list|,
literal|"id"
argument_list|,
operator|new
name|BytesRef
argument_list|(
operator|new
name|byte
index|[]
block|{
operator|(
name|byte
operator|)
literal|0xff
block|,
operator|(
name|byte
operator|)
literal|0xff
block|,
operator|(
name|byte
operator|)
literal|0xff
block|,
operator|(
name|byte
operator|)
literal|0xff
block|,
operator|(
name|byte
operator|)
literal|0xff
block|,
operator|(
name|byte
operator|)
literal|0xff
block|,
operator|(
name|byte
operator|)
literal|0xff
block|,
operator|(
name|byte
operator|)
literal|0xff
block|}
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|w
operator|.
name|commit
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"didn't hit expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|iae
parameter_list|)
block|{
comment|// expected
block|}
try|try
block|{
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should have hit exc"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AlreadyClosedException
name|ace
parameter_list|)
block|{
comment|// expected
block|}
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testInvalidVersions2
specifier|public
name|void
name|testInvalidVersions2
parameter_list|()
throws|throws
name|IOException
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriterConfig
name|iwc
init|=
name|newIndexWriterConfig
argument_list|(
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|iwc
operator|.
name|setCodec
argument_list|(
name|TestUtil
operator|.
name|alwaysPostingsFormat
argument_list|(
operator|new
name|IDVersionPostingsFormat
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|RandomIndexWriter
name|w
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|,
name|iwc
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
comment|// Long.MAX_VALUE:
name|doc
operator|.
name|add
argument_list|(
operator|new
name|StringAndPayloadField
argument_list|(
literal|"id"
argument_list|,
literal|"id"
argument_list|,
operator|new
name|BytesRef
argument_list|(
operator|new
name|byte
index|[]
block|{
operator|(
name|byte
operator|)
literal|0x7f
block|,
operator|(
name|byte
operator|)
literal|0xff
block|,
operator|(
name|byte
operator|)
literal|0xff
block|,
operator|(
name|byte
operator|)
literal|0xff
block|,
operator|(
name|byte
operator|)
literal|0xff
block|,
operator|(
name|byte
operator|)
literal|0xff
block|,
operator|(
name|byte
operator|)
literal|0xff
block|,
operator|(
name|byte
operator|)
literal|0xff
block|}
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|w
operator|.
name|commit
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"didn't hit expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|iae
parameter_list|)
block|{
comment|// expected
block|}
try|try
block|{
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should have hit exc"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AlreadyClosedException
name|ace
parameter_list|)
block|{
comment|// expected
block|}
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// Simulates optimistic concurrency in a distributed indexing app and confirms the latest version always wins:
DECL|method|testGlobalVersions
specifier|public
name|void
name|testGlobalVersions
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriterConfig
name|iwc
init|=
name|newIndexWriterConfig
argument_list|(
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|iwc
operator|.
name|setCodec
argument_list|(
name|TestUtil
operator|.
name|alwaysPostingsFormat
argument_list|(
operator|new
name|IDVersionPostingsFormat
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|RandomIndexWriter
name|w
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|,
name|iwc
argument_list|)
decl_stmt|;
name|IDSource
name|idsSource
init|=
name|getRandomIDs
argument_list|()
decl_stmt|;
name|int
name|numIDs
init|=
name|atLeast
argument_list|(
literal|100
argument_list|)
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TEST: "
operator|+
name|numIDs
operator|+
literal|" ids"
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|idsSeen
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
name|idsSeen
operator|.
name|size
argument_list|()
operator|<
name|numIDs
condition|)
block|{
name|idsSeen
operator|.
name|add
argument_list|(
name|idsSource
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|final
name|String
index|[]
name|ids
init|=
name|idsSeen
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|numIDs
index|]
argument_list|)
decl_stmt|;
specifier|final
name|Object
index|[]
name|locks
init|=
operator|new
name|Object
index|[
name|ids
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|locks
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|locks
index|[
name|i
index|]
operator|=
operator|new
name|Object
argument_list|()
expr_stmt|;
block|}
specifier|final
name|AtomicLong
name|nextVersion
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
specifier|final
name|SearcherManager
name|mgr
init|=
operator|new
name|SearcherManager
argument_list|(
name|w
operator|.
name|w
argument_list|,
operator|new
name|SearcherFactory
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Long
name|missingValue
init|=
operator|-
literal|1L
decl_stmt|;
specifier|final
name|LiveFieldValues
argument_list|<
name|IndexSearcher
argument_list|,
name|Long
argument_list|>
name|versionValues
init|=
operator|new
name|LiveFieldValues
argument_list|<
name|IndexSearcher
argument_list|,
name|Long
argument_list|>
argument_list|(
name|mgr
argument_list|,
name|missingValue
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|Long
name|lookupFromSearcher
parameter_list|(
name|IndexSearcher
name|s
parameter_list|,
name|String
name|id
parameter_list|)
block|{
comment|// TODO: would be cleaner if we could do our PerThreadLookup here instead of "up above":
comment|// We always return missing: the caller then does a lookup against the current reader
return|return
name|missingValue
return|;
block|}
block|}
decl_stmt|;
comment|// Maps to the version the id was lasted indexed with:
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|truth
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|CountDownLatch
name|startingGun
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|Thread
index|[]
name|threads
init|=
operator|new
name|Thread
index|[
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|2
argument_list|,
literal|7
argument_list|)
index|]
decl_stmt|;
specifier|final
name|int
name|versionType
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|3
argument_list|)
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
if|if
condition|(
name|versionType
operator|==
literal|0
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TEST: use random versions"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|versionType
operator|==
literal|1
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TEST: use monotonic versions"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TEST: use nanotime versions"
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Run for 3 sec in normal tests, else 60 seconds for nightly:
specifier|final
name|long
name|stopTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
operator|(
name|TEST_NIGHTLY
condition|?
literal|60000
else|:
literal|3000
operator|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|threads
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|threads
index|[
name|i
index|]
operator|=
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|runForReal
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|runForReal
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|startingGun
operator|.
name|await
argument_list|()
expr_stmt|;
name|PerThreadVersionPKLookup
name|lookup
init|=
literal|null
decl_stmt|;
name|IndexReader
name|lookupReader
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|<
name|stopTime
condition|)
block|{
comment|// Intentionally pull version first, and then sleep/yield, to provoke version conflicts:
name|long
name|newVersion
decl_stmt|;
if|if
condition|(
name|versionType
operator|==
literal|0
condition|)
block|{
comment|// Random:
name|newVersion
operator|=
name|random
argument_list|()
operator|.
name|nextLong
argument_list|()
operator|&
literal|0x3fffffffffffffffL
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|versionType
operator|==
literal|1
condition|)
block|{
comment|// Monotonic
name|newVersion
operator|=
name|nextVersion
operator|.
name|getAndIncrement
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|newVersion
operator|=
name|System
operator|.
name|nanoTime
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|versionType
operator|!=
literal|0
condition|)
block|{
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|Thread
operator|.
name|yield
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|int
name|x
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|ids
operator|.
name|length
argument_list|)
decl_stmt|;
comment|// TODO: we could relax this, if e.g. we assign indexer thread based on ID.  This would ensure a given ID cannot be indexed at
comment|// the same time in multiple threads:
comment|// Only one thread can update an ID at once:
synchronized|synchronized
init|(
name|locks
index|[
name|x
index|]
init|)
block|{
name|String
name|id
init|=
name|ids
index|[
name|x
index|]
decl_stmt|;
comment|// We will attempt to index id with newVersion, but only do so if id wasn't yet indexed, or it was indexed with an older
comment|// version (< newVersion):
comment|// Must lookup the RT value before pulling from the index, in case a reopen happens just after we lookup:
name|Long
name|currentVersion
init|=
name|versionValues
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|IndexSearcher
name|s
init|=
name|mgr
operator|.
name|acquire
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|VERBOSE
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\n"
operator|+
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|": update id="
operator|+
name|id
operator|+
literal|" newVersion="
operator|+
name|newVersion
argument_list|)
expr_stmt|;
if|if
condition|(
name|lookup
operator|==
literal|null
operator|||
name|lookupReader
operator|!=
name|s
operator|.
name|getIndexReader
argument_list|()
condition|)
block|{
comment|// TODO: sort of messy; we could add reopen to PerThreadVersionPKLookup?
comment|// TODO: this is thin ice .... that we don't incRef/decRef this reader we are implicitly holding onto:
name|lookupReader
operator|=
name|s
operator|.
name|getIndexReader
argument_list|()
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|": open new PK lookup reader="
operator|+
name|lookupReader
argument_list|)
expr_stmt|;
name|lookup
operator|=
operator|new
name|PerThreadVersionPKLookup
argument_list|(
name|lookupReader
argument_list|,
literal|"id"
argument_list|)
expr_stmt|;
block|}
name|Long
name|truthVersion
init|=
name|truth
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|":   truthVersion="
operator|+
name|truthVersion
argument_list|)
expr_stmt|;
name|boolean
name|doIndex
decl_stmt|;
if|if
condition|(
name|currentVersion
operator|==
name|missingValue
condition|)
block|{
if|if
condition|(
name|VERBOSE
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|":   id not in RT cache"
argument_list|)
expr_stmt|;
name|int
name|otherDocID
init|=
name|lookup
operator|.
name|lookup
argument_list|(
operator|new
name|BytesRef
argument_list|(
name|id
argument_list|)
argument_list|,
name|newVersion
operator|+
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|otherDocID
operator|==
operator|-
literal|1
condition|)
block|{
if|if
condition|(
name|VERBOSE
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|":   id not in index, or version is<= newVersion; will index"
argument_list|)
expr_stmt|;
name|doIndex
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|VERBOSE
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|":   id is in index with version="
operator|+
name|lookup
operator|.
name|getVersion
argument_list|()
operator|+
literal|"; will not index"
argument_list|)
expr_stmt|;
name|doIndex
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|truthVersion
operator|.
name|longValue
argument_list|()
operator|!=
name|lookup
operator|.
name|getVersion
argument_list|()
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
operator|+
literal|": now fail0!"
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|truthVersion
operator|.
name|longValue
argument_list|()
argument_list|,
name|lookup
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|VERBOSE
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|":   id is in RT cache: currentVersion="
operator|+
name|currentVersion
argument_list|)
expr_stmt|;
name|doIndex
operator|=
name|newVersion
operator|>
name|currentVersion
expr_stmt|;
block|}
if|if
condition|(
name|doIndex
condition|)
block|{
if|if
condition|(
name|VERBOSE
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|":   now index"
argument_list|)
expr_stmt|;
name|boolean
name|passes
init|=
name|truthVersion
operator|==
literal|null
operator|||
name|truthVersion
operator|.
name|longValue
argument_list|()
operator|<=
name|newVersion
decl_stmt|;
if|if
condition|(
name|passes
operator|==
literal|false
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
operator|+
literal|": now fail!"
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|passes
argument_list|)
expr_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|makeIDField
argument_list|(
name|id
argument_list|,
name|newVersion
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|updateDocument
argument_list|(
operator|new
name|Term
argument_list|(
literal|"id"
argument_list|,
name|id
argument_list|)
argument_list|,
name|doc
argument_list|)
expr_stmt|;
name|truth
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|newVersion
argument_list|)
expr_stmt|;
name|versionValues
operator|.
name|add
argument_list|(
name|id
argument_list|,
name|newVersion
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|VERBOSE
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|":   skip index"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|truthVersion
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|truthVersion
operator|.
name|longValue
argument_list|()
operator|>=
name|newVersion
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|mgr
operator|.
name|release
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
expr_stmt|;
name|threads
index|[
name|i
index|]
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
name|startingGun
operator|.
name|countDown
argument_list|()
expr_stmt|;
comment|// Keep reopening the NRT reader until all indexing threads are done:
name|refreshLoop
label|:
while|while
condition|(
literal|true
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|maybeRefresh
argument_list|()
expr_stmt|;
for|for
control|(
name|Thread
name|thread
range|:
name|threads
control|)
block|{
if|if
condition|(
name|thread
operator|.
name|isAlive
argument_list|()
condition|)
block|{
continue|continue
name|refreshLoop
continue|;
block|}
block|}
break|break;
block|}
comment|// Verify final index against truth:
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|mgr
operator|.
name|maybeRefresh
argument_list|()
expr_stmt|;
name|IndexSearcher
name|s
init|=
name|mgr
operator|.
name|acquire
argument_list|()
decl_stmt|;
try|try
block|{
name|IndexReader
name|r
init|=
name|s
operator|.
name|getIndexReader
argument_list|()
decl_stmt|;
comment|// cannot assert this: maybe not all IDs were indexed
comment|/*         assertEquals(numIDs, r.numDocs());         if (i == 1) {           // After forceMerge no deleted docs:           assertEquals(numIDs, r.maxDoc());         }         */
name|PerThreadVersionPKLookup
name|lookup
init|=
operator|new
name|PerThreadVersionPKLookup
argument_list|(
name|r
argument_list|,
literal|"id"
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|ent
range|:
name|truth
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|assertTrue
argument_list|(
name|lookup
operator|.
name|lookup
argument_list|(
operator|new
name|BytesRef
argument_list|(
name|ent
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|,
operator|-
literal|1L
argument_list|)
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ent
operator|.
name|getValue
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|,
name|lookup
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|mgr
operator|.
name|release
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|i
operator|==
literal|1
condition|)
block|{
break|break;
block|}
comment|// forceMerge and verify again
name|w
operator|.
name|forceMerge
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|mgr
operator|.
name|close
argument_list|()
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class
end_unit
