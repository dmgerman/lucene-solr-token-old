begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.document
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|geo
operator|.
name|GeoTestUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|geo
operator|.
name|Polygon
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|geo
operator|.
name|Rectangle
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|PointValues
operator|.
name|Relation
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_comment
comment|/** Test LatLonTree against the slower implementation for now */
end_comment
begin_class
DECL|class|TestLatLonTree
specifier|public
class|class
name|TestLatLonTree
extends|extends
name|LuceneTestCase
block|{
comment|/** test that contains() works the same as brute force */
DECL|method|testContainsRandom
specifier|public
name|void
name|testContainsRandom
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1000
condition|;
name|i
operator|++
control|)
block|{
name|Polygon
name|polygon
init|=
name|GeoTestUtil
operator|.
name|nextPolygon
argument_list|()
decl_stmt|;
name|LatLonTree
name|tree
init|=
operator|new
name|LatLonTree
argument_list|(
name|polygon
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|1000
condition|;
name|j
operator|++
control|)
block|{
name|double
name|point
index|[]
init|=
name|GeoTestUtil
operator|.
name|nextPointNear
argument_list|(
name|polygon
argument_list|)
decl_stmt|;
name|boolean
name|expected
init|=
name|polygon
operator|.
name|contains
argument_list|(
name|point
index|[
literal|0
index|]
argument_list|,
name|point
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|tree
operator|.
name|contains
argument_list|(
name|point
index|[
literal|0
index|]
argument_list|,
name|point
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/** test that relate() works the same as brute force */
DECL|method|testRelateRandom
specifier|public
name|void
name|testRelateRandom
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1000
condition|;
name|i
operator|++
control|)
block|{
name|Polygon
name|polygon
init|=
name|GeoTestUtil
operator|.
name|nextPolygon
argument_list|()
decl_stmt|;
name|LatLonTree
name|tree
init|=
operator|new
name|LatLonTree
argument_list|(
name|polygon
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|1000
condition|;
name|j
operator|++
control|)
block|{
name|Rectangle
name|box
init|=
name|GeoTestUtil
operator|.
name|nextBoxNear
argument_list|(
name|polygon
argument_list|)
decl_stmt|;
name|Relation
name|expected
init|=
name|polygon
operator|.
name|relate
argument_list|(
name|box
operator|.
name|minLat
argument_list|,
name|box
operator|.
name|maxLat
argument_list|,
name|box
operator|.
name|minLon
argument_list|,
name|box
operator|.
name|maxLon
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|tree
operator|.
name|relate
argument_list|(
name|box
operator|.
name|minLat
argument_list|,
name|box
operator|.
name|maxLat
argument_list|,
name|box
operator|.
name|minLon
argument_list|,
name|box
operator|.
name|maxLon
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class
end_unit
