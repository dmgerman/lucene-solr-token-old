begin_unit
begin_package
DECL|package|org.apache.lucene.search
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Analyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|CannedTokenStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|MockTokenFilter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|MockTokenizer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Token
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenFilter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|CharTermAttribute
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|PositionIncrementAttribute
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|StoredField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReaderContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriterConfig
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|RandomIndexWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Bits
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BitDocIdSet
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|FixedBitSet
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|TestUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|automaton
operator|.
name|Automata
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|automaton
operator|.
name|Automaton
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|automaton
operator|.
name|Transition
import|;
end_import
begin_class
DECL|class|TestTermAutomatonQuery
specifier|public
class|class
name|TestTermAutomatonQuery
extends|extends
name|LuceneTestCase
block|{
comment|// "comes * sun"
DECL|method|testBasic1
specifier|public
name|void
name|testBasic1
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|RandomIndexWriter
name|w
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
comment|// matches
name|doc
operator|.
name|add
argument_list|(
name|newTextField
argument_list|(
literal|"field"
argument_list|,
literal|"here comes the sun"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
comment|// doesn't match
name|doc
operator|.
name|add
argument_list|(
name|newTextField
argument_list|(
literal|"field"
argument_list|,
literal|"here comes the other sun"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|IndexReader
name|r
init|=
name|w
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|IndexSearcher
name|s
init|=
name|newSearcher
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|TermAutomatonQuery
name|q
init|=
operator|new
name|TermAutomatonQuery
argument_list|(
literal|"field"
argument_list|)
decl_stmt|;
name|int
name|init
init|=
name|q
operator|.
name|createState
argument_list|()
decl_stmt|;
name|int
name|s1
init|=
name|q
operator|.
name|createState
argument_list|()
decl_stmt|;
name|q
operator|.
name|addTransition
argument_list|(
name|init
argument_list|,
name|s1
argument_list|,
literal|"comes"
argument_list|)
expr_stmt|;
name|int
name|s2
init|=
name|q
operator|.
name|createState
argument_list|()
decl_stmt|;
name|q
operator|.
name|addAnyTransition
argument_list|(
name|s1
argument_list|,
name|s2
argument_list|)
expr_stmt|;
name|int
name|s3
init|=
name|q
operator|.
name|createState
argument_list|()
decl_stmt|;
name|q
operator|.
name|setAccept
argument_list|(
name|s3
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|q
operator|.
name|addTransition
argument_list|(
name|s2
argument_list|,
name|s3
argument_list|,
literal|"sun"
argument_list|)
expr_stmt|;
name|q
operator|.
name|finish
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|s
operator|.
name|search
argument_list|(
name|q
argument_list|,
literal|1
argument_list|)
operator|.
name|totalHits
argument_list|)
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// "comes * (sun|moon)"
DECL|method|testBasicSynonym
specifier|public
name|void
name|testBasicSynonym
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|RandomIndexWriter
name|w
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newTextField
argument_list|(
literal|"field"
argument_list|,
literal|"here comes the sun"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newTextField
argument_list|(
literal|"field"
argument_list|,
literal|"here comes the moon"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|IndexReader
name|r
init|=
name|w
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|IndexSearcher
name|s
init|=
name|newSearcher
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|TermAutomatonQuery
name|q
init|=
operator|new
name|TermAutomatonQuery
argument_list|(
literal|"field"
argument_list|)
decl_stmt|;
name|int
name|init
init|=
name|q
operator|.
name|createState
argument_list|()
decl_stmt|;
name|int
name|s1
init|=
name|q
operator|.
name|createState
argument_list|()
decl_stmt|;
name|q
operator|.
name|addTransition
argument_list|(
name|init
argument_list|,
name|s1
argument_list|,
literal|"comes"
argument_list|)
expr_stmt|;
name|int
name|s2
init|=
name|q
operator|.
name|createState
argument_list|()
decl_stmt|;
name|q
operator|.
name|addAnyTransition
argument_list|(
name|s1
argument_list|,
name|s2
argument_list|)
expr_stmt|;
name|int
name|s3
init|=
name|q
operator|.
name|createState
argument_list|()
decl_stmt|;
name|q
operator|.
name|setAccept
argument_list|(
name|s3
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|q
operator|.
name|addTransition
argument_list|(
name|s2
argument_list|,
name|s3
argument_list|,
literal|"sun"
argument_list|)
expr_stmt|;
name|q
operator|.
name|addTransition
argument_list|(
name|s2
argument_list|,
name|s3
argument_list|,
literal|"moon"
argument_list|)
expr_stmt|;
name|q
operator|.
name|finish
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|s
operator|.
name|search
argument_list|(
name|q
argument_list|,
literal|1
argument_list|)
operator|.
name|totalHits
argument_list|)
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// "comes sun" or "comes * sun"
DECL|method|testBasicSlop
specifier|public
name|void
name|testBasicSlop
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|RandomIndexWriter
name|w
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newTextField
argument_list|(
literal|"field"
argument_list|,
literal|"here comes the sun"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newTextField
argument_list|(
literal|"field"
argument_list|,
literal|"here comes sun"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newTextField
argument_list|(
literal|"field"
argument_list|,
literal|"here comes the other sun"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|IndexReader
name|r
init|=
name|w
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|IndexSearcher
name|s
init|=
name|newSearcher
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|TermAutomatonQuery
name|q
init|=
operator|new
name|TermAutomatonQuery
argument_list|(
literal|"field"
argument_list|)
decl_stmt|;
name|int
name|init
init|=
name|q
operator|.
name|createState
argument_list|()
decl_stmt|;
name|int
name|s1
init|=
name|q
operator|.
name|createState
argument_list|()
decl_stmt|;
name|q
operator|.
name|addTransition
argument_list|(
name|init
argument_list|,
name|s1
argument_list|,
literal|"comes"
argument_list|)
expr_stmt|;
name|int
name|s2
init|=
name|q
operator|.
name|createState
argument_list|()
decl_stmt|;
name|q
operator|.
name|addAnyTransition
argument_list|(
name|s1
argument_list|,
name|s2
argument_list|)
expr_stmt|;
name|int
name|s3
init|=
name|q
operator|.
name|createState
argument_list|()
decl_stmt|;
name|q
operator|.
name|setAccept
argument_list|(
name|s3
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|q
operator|.
name|addTransition
argument_list|(
name|s1
argument_list|,
name|s3
argument_list|,
literal|"sun"
argument_list|)
expr_stmt|;
name|q
operator|.
name|addTransition
argument_list|(
name|s2
argument_list|,
name|s3
argument_list|,
literal|"sun"
argument_list|)
expr_stmt|;
name|q
operator|.
name|finish
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|s
operator|.
name|search
argument_list|(
name|q
argument_list|,
literal|1
argument_list|)
operator|.
name|totalHits
argument_list|)
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// Verify posLength is "respected" at query time: index "speedy wifi
comment|// network", search on "fast wi fi network" using (simulated!)
comment|// query-time syn filter to add "wifi" over "wi fi" with posLength=2.
comment|// To make this real we need a version of TS2A that operates on whole
comment|// terms, not characters.
DECL|method|testPosLengthAtQueryTimeMock
specifier|public
name|void
name|testPosLengthAtQueryTimeMock
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|RandomIndexWriter
name|w
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newTextField
argument_list|(
literal|"field"
argument_list|,
literal|"speedy wifi network"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newTextField
argument_list|(
literal|"field"
argument_list|,
literal|"speedy wi fi network"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newTextField
argument_list|(
literal|"field"
argument_list|,
literal|"fast wifi network"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newTextField
argument_list|(
literal|"field"
argument_list|,
literal|"fast wi fi network"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
comment|// doesn't match:
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newTextField
argument_list|(
literal|"field"
argument_list|,
literal|"slow wi fi network"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|IndexReader
name|r
init|=
name|w
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|IndexSearcher
name|s
init|=
name|newSearcher
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|TermAutomatonQuery
name|q
init|=
operator|new
name|TermAutomatonQuery
argument_list|(
literal|"field"
argument_list|)
decl_stmt|;
name|int
name|init
init|=
name|q
operator|.
name|createState
argument_list|()
decl_stmt|;
name|int
name|s1
init|=
name|q
operator|.
name|createState
argument_list|()
decl_stmt|;
name|q
operator|.
name|addTransition
argument_list|(
name|init
argument_list|,
name|s1
argument_list|,
literal|"fast"
argument_list|)
expr_stmt|;
name|q
operator|.
name|addTransition
argument_list|(
name|init
argument_list|,
name|s1
argument_list|,
literal|"speedy"
argument_list|)
expr_stmt|;
name|int
name|s2
init|=
name|q
operator|.
name|createState
argument_list|()
decl_stmt|;
name|int
name|s3
init|=
name|q
operator|.
name|createState
argument_list|()
decl_stmt|;
name|q
operator|.
name|addTransition
argument_list|(
name|s1
argument_list|,
name|s2
argument_list|,
literal|"wi"
argument_list|)
expr_stmt|;
name|q
operator|.
name|addTransition
argument_list|(
name|s1
argument_list|,
name|s3
argument_list|,
literal|"wifi"
argument_list|)
expr_stmt|;
name|q
operator|.
name|addTransition
argument_list|(
name|s2
argument_list|,
name|s3
argument_list|,
literal|"fi"
argument_list|)
expr_stmt|;
name|int
name|s4
init|=
name|q
operator|.
name|createState
argument_list|()
decl_stmt|;
name|q
operator|.
name|addTransition
argument_list|(
name|s3
argument_list|,
name|s4
argument_list|,
literal|"network"
argument_list|)
expr_stmt|;
name|q
operator|.
name|setAccept
argument_list|(
name|s4
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|q
operator|.
name|finish
argument_list|()
expr_stmt|;
comment|// System.out.println("DOT:\n" + q.toDot());
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|s
operator|.
name|search
argument_list|(
name|q
argument_list|,
literal|1
argument_list|)
operator|.
name|totalHits
argument_list|)
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testPosLengthAtQueryTimeTrueish
specifier|public
name|void
name|testPosLengthAtQueryTimeTrueish
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|RandomIndexWriter
name|w
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newTextField
argument_list|(
literal|"field"
argument_list|,
literal|"speedy wifi network"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newTextField
argument_list|(
literal|"field"
argument_list|,
literal|"speedy wi fi network"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newTextField
argument_list|(
literal|"field"
argument_list|,
literal|"fast wifi network"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newTextField
argument_list|(
literal|"field"
argument_list|,
literal|"fast wi fi network"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
comment|// doesn't match:
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newTextField
argument_list|(
literal|"field"
argument_list|,
literal|"slow wi fi network"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|IndexReader
name|r
init|=
name|w
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|IndexSearcher
name|s
init|=
name|newSearcher
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|TokenStream
name|ts
init|=
operator|new
name|CannedTokenStream
argument_list|(
operator|new
name|Token
index|[]
block|{
name|token
argument_list|(
literal|"fast"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
block|,
name|token
argument_list|(
literal|"speedy"
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
block|,
name|token
argument_list|(
literal|"wi"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
block|,
name|token
argument_list|(
literal|"wifi"
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
block|,
name|token
argument_list|(
literal|"fi"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
block|,
name|token
argument_list|(
literal|"network"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
block|}
argument_list|)
decl_stmt|;
name|TermAutomatonQuery
name|q
init|=
operator|new
name|TokenStreamToTermAutomatonQuery
argument_list|()
operator|.
name|toQuery
argument_list|(
literal|"field"
argument_list|,
name|ts
argument_list|)
decl_stmt|;
comment|// System.out.println("DOT: " + q.toDot());
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|s
operator|.
name|search
argument_list|(
name|q
argument_list|,
literal|1
argument_list|)
operator|.
name|totalHits
argument_list|)
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testFreq
specifier|public
name|void
name|testFreq
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|RandomIndexWriter
name|w
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
comment|// matches freq == 3
name|doc
operator|.
name|add
argument_list|(
name|newTextField
argument_list|(
literal|"field"
argument_list|,
literal|"here comes the sun foo bar here comes another sun here comes shiny sun"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
comment|// doesn't match
name|doc
operator|.
name|add
argument_list|(
name|newTextField
argument_list|(
literal|"field"
argument_list|,
literal|"here comes the other sun"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|IndexReader
name|r
init|=
name|w
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|IndexSearcher
name|s
init|=
name|newSearcher
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|TermAutomatonQuery
name|q
init|=
operator|new
name|TermAutomatonQuery
argument_list|(
literal|"field"
argument_list|)
decl_stmt|;
name|int
name|init
init|=
name|q
operator|.
name|createState
argument_list|()
decl_stmt|;
name|int
name|s1
init|=
name|q
operator|.
name|createState
argument_list|()
decl_stmt|;
name|q
operator|.
name|addTransition
argument_list|(
name|init
argument_list|,
name|s1
argument_list|,
literal|"comes"
argument_list|)
expr_stmt|;
name|int
name|s2
init|=
name|q
operator|.
name|createState
argument_list|()
decl_stmt|;
name|q
operator|.
name|addAnyTransition
argument_list|(
name|s1
argument_list|,
name|s2
argument_list|)
expr_stmt|;
name|int
name|s3
init|=
name|q
operator|.
name|createState
argument_list|()
decl_stmt|;
name|q
operator|.
name|setAccept
argument_list|(
name|s3
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|q
operator|.
name|addTransition
argument_list|(
name|s2
argument_list|,
name|s3
argument_list|,
literal|"sun"
argument_list|)
expr_stmt|;
name|q
operator|.
name|finish
argument_list|()
expr_stmt|;
name|s
operator|.
name|search
argument_list|(
name|q
argument_list|,
operator|new
name|SimpleCollector
argument_list|()
block|{
specifier|private
name|Scorer
name|scorer
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|setScorer
parameter_list|(
name|Scorer
name|scorer
parameter_list|)
block|{
name|this
operator|.
name|scorer
operator|=
name|scorer
expr_stmt|;
while|while
condition|(
name|scorer
operator|instanceof
name|AssertingScorer
condition|)
block|{
name|scorer
operator|=
operator|(
operator|(
name|AssertingScorer
operator|)
name|scorer
operator|)
operator|.
name|getIn
argument_list|()
expr_stmt|;
block|}
assert|assert
name|scorer
operator|instanceof
name|TermAutomatonScorer
assert|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|collect
parameter_list|(
name|int
name|docID
parameter_list|)
throws|throws
name|IOException
block|{
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|scorer
operator|.
name|freq
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|needsScores
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testSegsMissingTerms
specifier|public
name|void
name|testSegsMissingTerms
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|RandomIndexWriter
name|w
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newTextField
argument_list|(
literal|"field"
argument_list|,
literal|"here comes the sun"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|w
operator|.
name|commit
argument_list|()
expr_stmt|;
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newTextField
argument_list|(
literal|"field"
argument_list|,
literal|"here comes the moon"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|IndexReader
name|r
init|=
name|w
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|IndexSearcher
name|s
init|=
name|newSearcher
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|TermAutomatonQuery
name|q
init|=
operator|new
name|TermAutomatonQuery
argument_list|(
literal|"field"
argument_list|)
decl_stmt|;
name|int
name|init
init|=
name|q
operator|.
name|createState
argument_list|()
decl_stmt|;
name|int
name|s1
init|=
name|q
operator|.
name|createState
argument_list|()
decl_stmt|;
name|q
operator|.
name|addTransition
argument_list|(
name|init
argument_list|,
name|s1
argument_list|,
literal|"comes"
argument_list|)
expr_stmt|;
name|int
name|s2
init|=
name|q
operator|.
name|createState
argument_list|()
decl_stmt|;
name|q
operator|.
name|addAnyTransition
argument_list|(
name|s1
argument_list|,
name|s2
argument_list|)
expr_stmt|;
name|int
name|s3
init|=
name|q
operator|.
name|createState
argument_list|()
decl_stmt|;
name|q
operator|.
name|setAccept
argument_list|(
name|s3
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|q
operator|.
name|addTransition
argument_list|(
name|s2
argument_list|,
name|s3
argument_list|,
literal|"sun"
argument_list|)
expr_stmt|;
name|q
operator|.
name|addTransition
argument_list|(
name|s2
argument_list|,
name|s3
argument_list|,
literal|"moon"
argument_list|)
expr_stmt|;
name|q
operator|.
name|finish
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|s
operator|.
name|search
argument_list|(
name|q
argument_list|,
literal|1
argument_list|)
operator|.
name|totalHits
argument_list|)
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testInvalidLeadWithAny
specifier|public
name|void
name|testInvalidLeadWithAny
parameter_list|()
throws|throws
name|Exception
block|{
name|TermAutomatonQuery
name|q
init|=
operator|new
name|TermAutomatonQuery
argument_list|(
literal|"field"
argument_list|)
decl_stmt|;
name|int
name|s0
init|=
name|q
operator|.
name|createState
argument_list|()
decl_stmt|;
name|int
name|s1
init|=
name|q
operator|.
name|createState
argument_list|()
decl_stmt|;
name|int
name|s2
init|=
name|q
operator|.
name|createState
argument_list|()
decl_stmt|;
name|q
operator|.
name|setAccept
argument_list|(
name|s2
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|q
operator|.
name|addAnyTransition
argument_list|(
name|s0
argument_list|,
name|s1
argument_list|)
expr_stmt|;
name|q
operator|.
name|addTransition
argument_list|(
name|s1
argument_list|,
name|s2
argument_list|,
literal|"b"
argument_list|)
expr_stmt|;
try|try
block|{
name|q
operator|.
name|finish
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"did not hit expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|ise
parameter_list|)
block|{
comment|// expected
block|}
block|}
DECL|method|testInvalidTrailWithAny
specifier|public
name|void
name|testInvalidTrailWithAny
parameter_list|()
throws|throws
name|Exception
block|{
name|TermAutomatonQuery
name|q
init|=
operator|new
name|TermAutomatonQuery
argument_list|(
literal|"field"
argument_list|)
decl_stmt|;
name|int
name|s0
init|=
name|q
operator|.
name|createState
argument_list|()
decl_stmt|;
name|int
name|s1
init|=
name|q
operator|.
name|createState
argument_list|()
decl_stmt|;
name|int
name|s2
init|=
name|q
operator|.
name|createState
argument_list|()
decl_stmt|;
name|q
operator|.
name|setAccept
argument_list|(
name|s2
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|q
operator|.
name|addTransition
argument_list|(
name|s0
argument_list|,
name|s1
argument_list|,
literal|"b"
argument_list|)
expr_stmt|;
name|q
operator|.
name|addAnyTransition
argument_list|(
name|s1
argument_list|,
name|s2
argument_list|)
expr_stmt|;
try|try
block|{
name|q
operator|.
name|finish
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"did not hit expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|ise
parameter_list|)
block|{
comment|// expected
block|}
block|}
DECL|method|testAnyFromTokenStream
specifier|public
name|void
name|testAnyFromTokenStream
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|RandomIndexWriter
name|w
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newTextField
argument_list|(
literal|"field"
argument_list|,
literal|"here comes the sun"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newTextField
argument_list|(
literal|"field"
argument_list|,
literal|"here comes the moon"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newTextField
argument_list|(
literal|"field"
argument_list|,
literal|"here comes sun"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
comment|// Should not match:
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newTextField
argument_list|(
literal|"field"
argument_list|,
literal|"here comes the other sun"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|IndexReader
name|r
init|=
name|w
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|IndexSearcher
name|s
init|=
name|newSearcher
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|TokenStream
name|ts
init|=
operator|new
name|CannedTokenStream
argument_list|(
operator|new
name|Token
index|[]
block|{
name|token
argument_list|(
literal|"comes"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
block|,
name|token
argument_list|(
literal|"comes"
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
block|,
name|token
argument_list|(
literal|"*"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
block|,
name|token
argument_list|(
literal|"sun"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
block|,
name|token
argument_list|(
literal|"moon"
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
block|}
argument_list|)
decl_stmt|;
name|TermAutomatonQuery
name|q
init|=
operator|new
name|TokenStreamToTermAutomatonQuery
argument_list|()
operator|.
name|toQuery
argument_list|(
literal|"field"
argument_list|,
name|ts
argument_list|)
decl_stmt|;
comment|// System.out.println("DOT: " + q.toDot());
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|s
operator|.
name|search
argument_list|(
name|q
argument_list|,
literal|1
argument_list|)
operator|.
name|totalHits
argument_list|)
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|token
specifier|private
specifier|static
name|Token
name|token
parameter_list|(
name|String
name|term
parameter_list|,
name|int
name|posInc
parameter_list|,
name|int
name|posLength
parameter_list|)
block|{
specifier|final
name|Token
name|t
init|=
operator|new
name|Token
argument_list|(
name|term
argument_list|,
literal|0
argument_list|,
name|term
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|t
operator|.
name|setPositionIncrement
argument_list|(
name|posInc
argument_list|)
expr_stmt|;
name|t
operator|.
name|setPositionLength
argument_list|(
name|posLength
argument_list|)
expr_stmt|;
return|return
name|t
return|;
block|}
DECL|class|RandomSynonymFilter
specifier|private
specifier|static
class|class
name|RandomSynonymFilter
extends|extends
name|TokenFilter
block|{
DECL|field|synNext
specifier|private
name|boolean
name|synNext
decl_stmt|;
DECL|field|termAtt
specifier|private
specifier|final
name|CharTermAttribute
name|termAtt
init|=
name|addAttribute
argument_list|(
name|CharTermAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|posIncAtt
specifier|private
specifier|final
name|PositionIncrementAttribute
name|posIncAtt
init|=
name|addAttribute
argument_list|(
name|PositionIncrementAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|RandomSynonymFilter
specifier|public
name|RandomSynonymFilter
parameter_list|(
name|TokenFilter
name|in
parameter_list|)
block|{
name|super
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|incrementToken
specifier|public
name|boolean
name|incrementToken
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|synNext
condition|)
block|{
name|clearAttributes
argument_list|()
expr_stmt|;
name|posIncAtt
operator|.
name|setPositionIncrement
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|termAtt
operator|.
name|append
argument_list|(
literal|""
operator|+
operator|(
operator|(
name|char
operator|)
literal|97
operator|+
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|3
argument_list|)
operator|)
argument_list|)
expr_stmt|;
name|synNext
operator|=
literal|false
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|input
operator|.
name|incrementToken
argument_list|()
condition|)
block|{
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
operator|==
literal|8
condition|)
block|{
name|synNext
operator|=
literal|true
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|reset
specifier|public
name|void
name|reset
parameter_list|()
throws|throws
name|IOException
block|{
name|super
operator|.
name|reset
argument_list|()
expr_stmt|;
name|synNext
operator|=
literal|false
expr_stmt|;
block|}
block|}
DECL|method|testRandom
specifier|public
name|void
name|testRandom
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|numDocs
init|=
name|atLeast
argument_list|(
literal|100
argument_list|)
decl_stmt|;
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
comment|// Adds occassional random synonyms:
name|Analyzer
name|analyzer
init|=
operator|new
name|Analyzer
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|TokenStreamComponents
name|createComponents
parameter_list|(
name|String
name|fieldName
parameter_list|)
block|{
name|MockTokenizer
name|tokenizer
init|=
operator|new
name|MockTokenizer
argument_list|(
name|MockTokenizer
operator|.
name|WHITESPACE
argument_list|,
literal|true
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|tokenizer
operator|.
name|setEnableChecks
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|TokenFilter
name|filt
init|=
operator|new
name|MockTokenFilter
argument_list|(
name|tokenizer
argument_list|,
name|MockTokenFilter
operator|.
name|EMPTY_STOPSET
argument_list|)
decl_stmt|;
name|filt
operator|=
operator|new
name|RandomSynonymFilter
argument_list|(
name|filt
argument_list|)
expr_stmt|;
return|return
operator|new
name|TokenStreamComponents
argument_list|(
name|tokenizer
argument_list|,
name|filt
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|IndexWriterConfig
name|iwc
init|=
name|newIndexWriterConfig
argument_list|(
name|analyzer
argument_list|)
decl_stmt|;
name|RandomIndexWriter
name|w
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|,
name|iwc
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
name|i
operator|++
control|)
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|int
name|numTokens
init|=
name|atLeast
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|numTokens
condition|;
name|j
operator|++
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
call|(
name|char
call|)
argument_list|(
literal|97
operator|+
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|3
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|contents
init|=
name|sb
operator|.
name|toString
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newTextField
argument_list|(
literal|"field"
argument_list|,
name|contents
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|StoredField
argument_list|(
literal|"id"
argument_list|,
literal|""
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  doc "
operator|+
name|i
operator|+
literal|" -> "
operator|+
name|contents
argument_list|)
expr_stmt|;
block|}
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
name|IndexReader
name|r
init|=
name|w
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|IndexSearcher
name|s
init|=
name|newSearcher
argument_list|(
name|r
argument_list|)
decl_stmt|;
comment|// Used to match ANY using MultiPhraseQuery:
name|Term
index|[]
name|allTerms
init|=
operator|new
name|Term
index|[]
block|{
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"a"
argument_list|)
block|,
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"b"
argument_list|)
block|,
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"c"
argument_list|)
block|}
decl_stmt|;
name|int
name|numIters
init|=
name|atLeast
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|iter
init|=
literal|0
init|;
name|iter
operator|<
name|numIters
condition|;
name|iter
operator|++
control|)
block|{
comment|// Build the (finite, no any transitions) TermAutomatonQuery and
comment|// also the "equivalent" BooleanQuery and make sure they match the
comment|// same docs:
name|BooleanQuery
name|bq
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
name|int
name|count
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|BytesRef
argument_list|>
name|strings
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|int
name|numTokens
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|5
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|numTokens
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|j
operator|>
literal|0
operator|&&
name|j
operator|<
name|numTokens
operator|-
literal|1
operator|&&
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|5
argument_list|)
operator|==
literal|3
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|'*'
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
call|(
name|char
call|)
argument_list|(
literal|97
operator|+
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|3
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|string
init|=
name|sb
operator|.
name|toString
argument_list|()
decl_stmt|;
name|MultiPhraseQuery
name|mpq
init|=
operator|new
name|MultiPhraseQuery
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|string
operator|.
name|length
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|string
operator|.
name|charAt
argument_list|(
name|j
argument_list|)
operator|==
literal|'*'
condition|)
block|{
name|mpq
operator|.
name|add
argument_list|(
name|allTerms
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|mpq
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|""
operator|+
name|string
operator|.
name|charAt
argument_list|(
name|j
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|bq
operator|.
name|add
argument_list|(
name|mpq
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|strings
operator|.
name|add
argument_list|(
operator|new
name|BytesRef
argument_list|(
name|string
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|BytesRef
argument_list|>
name|stringsList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|strings
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|stringsList
argument_list|)
expr_stmt|;
name|Automaton
name|a
init|=
name|Automata
operator|.
name|makeStringUnion
argument_list|(
name|stringsList
argument_list|)
decl_stmt|;
comment|// Translate automaton to query:
name|TermAutomatonQuery
name|q
init|=
operator|new
name|TermAutomatonQuery
argument_list|(
literal|"field"
argument_list|)
decl_stmt|;
name|int
name|numStates
init|=
name|a
operator|.
name|getNumStates
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numStates
condition|;
name|i
operator|++
control|)
block|{
name|q
operator|.
name|createState
argument_list|()
expr_stmt|;
name|q
operator|.
name|setAccept
argument_list|(
name|i
argument_list|,
name|a
operator|.
name|isAccept
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Transition
name|t
init|=
operator|new
name|Transition
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numStates
condition|;
name|i
operator|++
control|)
block|{
name|int
name|transCount
init|=
name|a
operator|.
name|initTransition
argument_list|(
name|i
argument_list|,
name|t
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|transCount
condition|;
name|j
operator|++
control|)
block|{
name|a
operator|.
name|getNextTransition
argument_list|(
name|t
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|label
init|=
name|t
operator|.
name|min
init|;
name|label
operator|<=
name|t
operator|.
name|max
condition|;
name|label
operator|++
control|)
block|{
if|if
condition|(
operator|(
name|char
operator|)
name|label
operator|==
literal|'*'
condition|)
block|{
name|q
operator|.
name|addAnyTransition
argument_list|(
name|t
operator|.
name|source
argument_list|,
name|t
operator|.
name|dest
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|q
operator|.
name|addTransition
argument_list|(
name|t
operator|.
name|source
argument_list|,
name|t
operator|.
name|dest
argument_list|,
literal|""
operator|+
operator|(
name|char
operator|)
name|label
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|q
operator|.
name|finish
argument_list|()
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TEST: iter="
operator|+
name|iter
argument_list|)
expr_stmt|;
for|for
control|(
name|BytesRef
name|string
range|:
name|stringsList
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  string: "
operator|+
name|string
operator|.
name|utf8ToString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|q
operator|.
name|toDot
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Filter
name|filter
decl_stmt|;
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|5
argument_list|)
operator|==
literal|1
condition|)
block|{
name|filter
operator|=
operator|new
name|RandomFilter
argument_list|(
name|random
argument_list|()
operator|.
name|nextLong
argument_list|()
argument_list|,
name|random
argument_list|()
operator|.
name|nextFloat
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|filter
operator|=
literal|null
expr_stmt|;
block|}
name|TopDocs
name|hits1
init|=
name|s
operator|.
name|search
argument_list|(
name|q
argument_list|,
name|filter
argument_list|,
name|numDocs
argument_list|)
decl_stmt|;
name|TopDocs
name|hits2
init|=
name|s
operator|.
name|search
argument_list|(
name|bq
argument_list|,
name|filter
argument_list|,
name|numDocs
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|hits1Docs
init|=
name|toDocIDs
argument_list|(
name|s
argument_list|,
name|hits1
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|hits2Docs
init|=
name|toDocIDs
argument_list|(
name|s
argument_list|,
name|hits2
argument_list|)
decl_stmt|;
try|try
block|{
name|assertEquals
argument_list|(
name|hits2
operator|.
name|totalHits
argument_list|,
name|hits1
operator|.
name|totalHits
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|hits2Docs
argument_list|,
name|hits1Docs
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AssertionError
name|ae
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"FAILED:"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|id
range|:
name|hits1Docs
control|)
block|{
if|if
condition|(
name|hits2Docs
operator|.
name|contains
argument_list|(
name|id
argument_list|)
operator|==
literal|false
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"  id=%3s matched but should not have"
argument_list|,
name|id
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|String
name|id
range|:
name|hits2Docs
control|)
block|{
if|if
condition|(
name|hits1Docs
operator|.
name|contains
argument_list|(
name|id
argument_list|)
operator|==
literal|false
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"  id=%3s did not match but should have"
argument_list|,
name|id
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
throw|throw
name|ae
throw|;
block|}
block|}
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|toDocIDs
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|toDocIDs
parameter_list|(
name|IndexSearcher
name|s
parameter_list|,
name|TopDocs
name|hits
parameter_list|)
throws|throws
name|IOException
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|result
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|ScoreDoc
name|hit
range|:
name|hits
operator|.
name|scoreDocs
control|)
block|{
name|result
operator|.
name|add
argument_list|(
name|s
operator|.
name|doc
argument_list|(
name|hit
operator|.
name|doc
argument_list|)
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
DECL|class|RandomFilter
specifier|private
specifier|static
class|class
name|RandomFilter
extends|extends
name|Filter
block|{
DECL|field|seed
specifier|private
specifier|final
name|long
name|seed
decl_stmt|;
DECL|field|density
specifier|private
name|float
name|density
decl_stmt|;
comment|// density should be 0.0 ... 1.0
DECL|method|RandomFilter
specifier|public
name|RandomFilter
parameter_list|(
name|long
name|seed
parameter_list|,
name|float
name|density
parameter_list|)
block|{
name|this
operator|.
name|seed
operator|=
name|seed
expr_stmt|;
name|this
operator|.
name|density
operator|=
name|density
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getDocIdSet
specifier|public
name|DocIdSet
name|getDocIdSet
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|,
name|Bits
name|acceptDocs
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|maxDoc
init|=
name|context
operator|.
name|reader
argument_list|()
operator|.
name|maxDoc
argument_list|()
decl_stmt|;
name|FixedBitSet
name|bits
init|=
operator|new
name|FixedBitSet
argument_list|(
name|maxDoc
argument_list|)
decl_stmt|;
name|Random
name|random
init|=
operator|new
name|Random
argument_list|(
name|seed
operator|^
name|context
operator|.
name|docBase
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|docID
init|=
literal|0
init|;
name|docID
operator|<
name|maxDoc
condition|;
name|docID
operator|++
control|)
block|{
if|if
condition|(
name|random
operator|.
name|nextFloat
argument_list|()
operator|<=
name|density
operator|&&
operator|(
name|acceptDocs
operator|==
literal|null
operator|||
name|acceptDocs
operator|.
name|get
argument_list|(
name|docID
argument_list|)
operator|)
condition|)
block|{
name|bits
operator|.
name|set
argument_list|(
name|docID
argument_list|)
expr_stmt|;
comment|//System.out.println("  acc id=" + idSource.getInt(docID) + " docID=" + docID);
block|}
block|}
return|return
operator|new
name|BitDocIdSet
argument_list|(
name|bits
argument_list|)
return|;
block|}
block|}
block|}
end_class
end_unit
