begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.search
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|LatLonPoint
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|util
operator|.
name|BaseGeoPointTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|util
operator|.
name|GeoRect
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|util
operator|.
name|GeoRelationUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|util
operator|.
name|GeoUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|SloppyMath
import|;
end_import
begin_class
DECL|class|TestLatLonPointQueries
specifier|public
class|class
name|TestLatLonPointQueries
extends|extends
name|BaseGeoPointTestCase
block|{
annotation|@
name|Override
DECL|method|addPointToDoc
specifier|protected
name|void
name|addPointToDoc
parameter_list|(
name|String
name|field
parameter_list|,
name|Document
name|doc
parameter_list|,
name|double
name|lat
parameter_list|,
name|double
name|lon
parameter_list|)
block|{
name|doc
operator|.
name|add
argument_list|(
operator|new
name|LatLonPoint
argument_list|(
name|field
argument_list|,
name|lat
argument_list|,
name|lon
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|newRectQuery
specifier|protected
name|Query
name|newRectQuery
parameter_list|(
name|String
name|field
parameter_list|,
name|GeoRect
name|rect
parameter_list|)
block|{
return|return
name|LatLonPoint
operator|.
name|newBoxQuery
argument_list|(
name|field
argument_list|,
name|rect
operator|.
name|minLat
argument_list|,
name|rect
operator|.
name|maxLat
argument_list|,
name|rect
operator|.
name|minLon
argument_list|,
name|rect
operator|.
name|maxLon
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|newDistanceQuery
specifier|protected
name|Query
name|newDistanceQuery
parameter_list|(
name|String
name|field
parameter_list|,
name|double
name|centerLat
parameter_list|,
name|double
name|centerLon
parameter_list|,
name|double
name|radiusMeters
parameter_list|)
block|{
return|return
name|LatLonPoint
operator|.
name|newDistanceQuery
argument_list|(
name|field
argument_list|,
name|centerLat
argument_list|,
name|centerLon
argument_list|,
name|radiusMeters
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|newDistanceRangeQuery
specifier|protected
name|Query
name|newDistanceRangeQuery
parameter_list|(
name|String
name|field
parameter_list|,
name|double
name|centerLat
parameter_list|,
name|double
name|centerLon
parameter_list|,
name|double
name|minRadiusMeters
parameter_list|,
name|double
name|radiusMeters
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|newPolygonQuery
specifier|protected
name|Query
name|newPolygonQuery
parameter_list|(
name|String
name|field
parameter_list|,
name|double
index|[]
name|lats
parameter_list|,
name|double
index|[]
name|lons
parameter_list|)
block|{
return|return
name|LatLonPoint
operator|.
name|newPolygonQuery
argument_list|(
name|FIELD_NAME
argument_list|,
name|lats
argument_list|,
name|lons
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|rectContainsPoint
specifier|protected
name|Boolean
name|rectContainsPoint
parameter_list|(
name|GeoRect
name|rect
parameter_list|,
name|double
name|pointLat
parameter_list|,
name|double
name|pointLon
parameter_list|)
block|{
assert|assert
name|Double
operator|.
name|isNaN
argument_list|(
name|pointLat
argument_list|)
operator|==
literal|false
assert|;
name|int
name|rectLatMinEnc
init|=
name|LatLonPoint
operator|.
name|encodeLatitude
argument_list|(
name|rect
operator|.
name|minLat
argument_list|)
decl_stmt|;
name|int
name|rectLatMaxEnc
init|=
name|LatLonPoint
operator|.
name|encodeLatitude
argument_list|(
name|rect
operator|.
name|maxLat
argument_list|)
decl_stmt|;
name|int
name|rectLonMinEnc
init|=
name|LatLonPoint
operator|.
name|encodeLongitude
argument_list|(
name|rect
operator|.
name|minLon
argument_list|)
decl_stmt|;
name|int
name|rectLonMaxEnc
init|=
name|LatLonPoint
operator|.
name|encodeLongitude
argument_list|(
name|rect
operator|.
name|maxLon
argument_list|)
decl_stmt|;
name|int
name|pointLatEnc
init|=
name|LatLonPoint
operator|.
name|encodeLatitude
argument_list|(
name|pointLat
argument_list|)
decl_stmt|;
name|int
name|pointLonEnc
init|=
name|LatLonPoint
operator|.
name|encodeLongitude
argument_list|(
name|pointLon
argument_list|)
decl_stmt|;
if|if
condition|(
name|rect
operator|.
name|minLon
operator|<
name|rect
operator|.
name|maxLon
condition|)
block|{
return|return
name|pointLatEnc
operator|>=
name|rectLatMinEnc
operator|&&
name|pointLatEnc
operator|<=
name|rectLatMaxEnc
operator|&&
name|pointLonEnc
operator|>=
name|rectLonMinEnc
operator|&&
name|pointLonEnc
operator|<=
name|rectLonMaxEnc
return|;
block|}
else|else
block|{
comment|// Rect crosses dateline:
return|return
name|pointLatEnc
operator|>=
name|rectLatMinEnc
operator|&&
name|pointLatEnc
operator|<=
name|rectLatMaxEnc
operator|&&
operator|(
name|pointLonEnc
operator|>=
name|rectLonMinEnc
operator|||
name|pointLonEnc
operator|<=
name|rectLonMaxEnc
operator|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|quantizeLat
specifier|protected
name|double
name|quantizeLat
parameter_list|(
name|double
name|latRaw
parameter_list|)
block|{
return|return
name|LatLonPoint
operator|.
name|decodeLatitude
argument_list|(
name|LatLonPoint
operator|.
name|encodeLatitude
argument_list|(
name|latRaw
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|quantizeLon
specifier|protected
name|double
name|quantizeLon
parameter_list|(
name|double
name|lonRaw
parameter_list|)
block|{
return|return
name|LatLonPoint
operator|.
name|decodeLongitude
argument_list|(
name|LatLonPoint
operator|.
name|encodeLongitude
argument_list|(
name|lonRaw
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|polyRectContainsPoint
specifier|protected
name|Boolean
name|polyRectContainsPoint
parameter_list|(
name|GeoRect
name|rect
parameter_list|,
name|double
name|pointLat
parameter_list|,
name|double
name|pointLon
parameter_list|)
block|{
comment|// TODO write better random polygon tests
comment|// note: logic must be slightly different than rectContainsPoint, to satisfy
comment|// insideness for cases exactly on boundaries.
assert|assert
name|Double
operator|.
name|isNaN
argument_list|(
name|pointLat
argument_list|)
operator|==
literal|false
assert|;
assert|assert
name|rect
operator|.
name|crossesDateline
argument_list|()
operator|==
literal|false
assert|;
name|double
name|y
index|[]
init|=
operator|new
name|double
index|[]
block|{
name|rect
operator|.
name|minLat
block|,
name|rect
operator|.
name|maxLat
block|,
name|rect
operator|.
name|maxLat
block|,
name|rect
operator|.
name|minLat
block|,
name|rect
operator|.
name|minLat
block|}
decl_stmt|;
name|double
name|x
index|[]
init|=
operator|new
name|double
index|[]
block|{
name|rect
operator|.
name|minLon
block|,
name|rect
operator|.
name|minLon
block|,
name|rect
operator|.
name|maxLon
block|,
name|rect
operator|.
name|maxLon
block|,
name|rect
operator|.
name|minLon
block|}
decl_stmt|;
comment|// TODO: separately test this method is 100% correct, here treat it like a black box (like haversin)
return|return
name|GeoRelationUtils
operator|.
name|pointInPolygon
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|pointLat
argument_list|,
name|pointLon
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|circleContainsPoint
specifier|protected
name|Boolean
name|circleContainsPoint
parameter_list|(
name|double
name|centerLat
parameter_list|,
name|double
name|centerLon
parameter_list|,
name|double
name|radiusMeters
parameter_list|,
name|double
name|pointLat
parameter_list|,
name|double
name|pointLon
parameter_list|)
block|{
name|double
name|distanceMeters
init|=
name|SloppyMath
operator|.
name|haversinMeters
argument_list|(
name|centerLat
argument_list|,
name|centerLon
argument_list|,
name|pointLat
argument_list|,
name|pointLon
argument_list|)
decl_stmt|;
name|boolean
name|result
init|=
name|distanceMeters
operator|<=
name|radiusMeters
decl_stmt|;
comment|//System.out.println("  shouldMatch?  centerLon=" + centerLon + " centerLat=" + centerLat + " pointLon=" + pointLon + " pointLat=" + pointLat + " result=" + result + " distanceMeters=" + (distanceKM * 1000));
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|distanceRangeContainsPoint
specifier|protected
name|Boolean
name|distanceRangeContainsPoint
parameter_list|(
name|double
name|centerLat
parameter_list|,
name|double
name|centerLon
parameter_list|,
name|double
name|minRadiusMeters
parameter_list|,
name|double
name|radiusMeters
parameter_list|,
name|double
name|pointLat
parameter_list|,
name|double
name|pointLon
parameter_list|)
block|{
specifier|final
name|double
name|d
init|=
name|SloppyMath
operator|.
name|haversinMeters
argument_list|(
name|centerLat
argument_list|,
name|centerLon
argument_list|,
name|pointLat
argument_list|,
name|pointLon
argument_list|)
decl_stmt|;
return|return
name|d
operator|>=
name|minRadiusMeters
operator|&&
name|d
operator|<=
name|radiusMeters
return|;
block|}
comment|/** Returns random double min to max or up to 1% outside of that range */
DECL|method|randomRangeMaybeSlightlyOutside
specifier|private
name|double
name|randomRangeMaybeSlightlyOutside
parameter_list|(
name|double
name|min
parameter_list|,
name|double
name|max
parameter_list|)
block|{
return|return
name|min
operator|+
operator|(
name|random
argument_list|()
operator|.
name|nextDouble
argument_list|()
operator|+
operator|(
literal|0.5
operator|-
name|random
argument_list|()
operator|.
name|nextDouble
argument_list|()
operator|)
operator|*
literal|.02
operator|)
operator|*
operator|(
name|max
operator|-
name|min
operator|)
return|;
block|}
comment|// We rely heavily on GeoUtils.circleToBBox so we test it here:
DECL|method|testRandomCircleToBBox
specifier|public
name|void
name|testRandomCircleToBBox
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|iters
init|=
name|atLeast
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|iter
init|=
literal|0
init|;
name|iter
operator|<
name|iters
condition|;
name|iter
operator|++
control|)
block|{
name|boolean
name|useSmallRanges
init|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
decl_stmt|;
name|double
name|radiusMeters
decl_stmt|;
name|double
name|centerLat
init|=
name|randomLat
argument_list|(
name|useSmallRanges
argument_list|)
decl_stmt|;
name|double
name|centerLon
init|=
name|randomLon
argument_list|(
name|useSmallRanges
argument_list|)
decl_stmt|;
if|if
condition|(
name|useSmallRanges
condition|)
block|{
comment|// Approx 4 degrees lon at the equator:
name|radiusMeters
operator|=
name|random
argument_list|()
operator|.
name|nextDouble
argument_list|()
operator|*
literal|444000
expr_stmt|;
block|}
else|else
block|{
name|radiusMeters
operator|=
name|random
argument_list|()
operator|.
name|nextDouble
argument_list|()
operator|*
literal|50000000
expr_stmt|;
block|}
comment|// TODO: randomly quantize radius too, to provoke exact math errors?
name|GeoRect
name|bbox
init|=
name|GeoUtils
operator|.
name|circleToBBox
argument_list|(
name|centerLon
argument_list|,
name|centerLat
argument_list|,
name|radiusMeters
argument_list|)
decl_stmt|;
name|int
name|numPointsToTry
init|=
literal|1000
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numPointsToTry
condition|;
name|i
operator|++
control|)
block|{
name|double
name|lat
decl_stmt|;
name|double
name|lon
decl_stmt|;
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|lat
operator|=
name|randomLat
argument_list|(
name|useSmallRanges
argument_list|)
expr_stmt|;
name|lon
operator|=
name|randomLon
argument_list|(
name|useSmallRanges
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// pick a lat/lon within the bbox or "slightly" outside it to try to improve test efficiency
name|lat
operator|=
name|quantizeLat
argument_list|(
name|GeoUtils
operator|.
name|normalizeLat
argument_list|(
name|randomRangeMaybeSlightlyOutside
argument_list|(
name|bbox
operator|.
name|minLat
argument_list|,
name|bbox
operator|.
name|maxLat
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|bbox
operator|.
name|crossesDateline
argument_list|()
condition|)
block|{
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|lon
operator|=
name|quantizeLon
argument_list|(
name|GeoUtils
operator|.
name|normalizeLon
argument_list|(
name|randomRangeMaybeSlightlyOutside
argument_list|(
name|bbox
operator|.
name|maxLon
argument_list|,
operator|-
literal|180
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|lon
operator|=
name|quantizeLon
argument_list|(
name|GeoUtils
operator|.
name|normalizeLon
argument_list|(
name|randomRangeMaybeSlightlyOutside
argument_list|(
literal|0
argument_list|,
name|bbox
operator|.
name|minLon
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|lon
operator|=
name|quantizeLon
argument_list|(
name|GeoUtils
operator|.
name|normalizeLon
argument_list|(
name|randomRangeMaybeSlightlyOutside
argument_list|(
name|bbox
operator|.
name|minLon
argument_list|,
name|bbox
operator|.
name|maxLon
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|double
name|distanceMeters
init|=
name|SloppyMath
operator|.
name|haversinMeters
argument_list|(
name|centerLat
argument_list|,
name|centerLon
argument_list|,
name|lat
argument_list|,
name|lon
argument_list|)
decl_stmt|;
comment|// Haversin says it's within the circle:
name|boolean
name|haversinSays
init|=
name|distanceMeters
operator|<=
name|radiusMeters
decl_stmt|;
comment|// BBox says its within the box:
name|boolean
name|bboxSays
decl_stmt|;
if|if
condition|(
name|bbox
operator|.
name|crossesDateline
argument_list|()
condition|)
block|{
if|if
condition|(
name|lat
operator|>=
name|bbox
operator|.
name|minLat
operator|&&
name|lat
operator|<=
name|bbox
operator|.
name|maxLat
condition|)
block|{
name|bboxSays
operator|=
name|lon
operator|<=
name|bbox
operator|.
name|maxLon
operator|||
name|lon
operator|>=
name|bbox
operator|.
name|minLon
expr_stmt|;
block|}
else|else
block|{
name|bboxSays
operator|=
literal|false
expr_stmt|;
block|}
block|}
else|else
block|{
name|bboxSays
operator|=
name|lat
operator|>=
name|bbox
operator|.
name|minLat
operator|&&
name|lat
operator|<=
name|bbox
operator|.
name|maxLat
operator|&&
name|lon
operator|>=
name|bbox
operator|.
name|minLon
operator|&&
name|lon
operator|<=
name|bbox
operator|.
name|maxLon
expr_stmt|;
block|}
if|if
condition|(
name|haversinSays
condition|)
block|{
if|if
condition|(
name|bboxSays
operator|==
literal|false
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"small="
operator|+
name|useSmallRanges
operator|+
literal|" centerLat="
operator|+
name|centerLat
operator|+
literal|" cetnerLon="
operator|+
name|centerLon
operator|+
literal|" radiusMeters="
operator|+
name|radiusMeters
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  bbox: lat="
operator|+
name|bbox
operator|.
name|minLat
operator|+
literal|" to "
operator|+
name|bbox
operator|.
name|maxLat
operator|+
literal|" lon="
operator|+
name|bbox
operator|.
name|minLon
operator|+
literal|" to "
operator|+
name|bbox
operator|.
name|maxLon
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  point: lat="
operator|+
name|lat
operator|+
literal|" lon="
operator|+
name|lon
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  haversin: "
operator|+
name|distanceMeters
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"point was within the distance according to haversin, but the bbox doesn't contain it"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// it's fine if haversin said it was outside the radius and bbox said it was inside the box
block|}
block|}
block|}
block|}
block|}
end_class
end_unit
