begin_unit
begin_package
DECL|package|org.apache.lucene.search
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|MockAnalyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|FieldType
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|GeoPointField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|StringField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|RandomIndexWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BaseGeoPointTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|GeoRect
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|GeoUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|SloppyMath
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|TestUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import
begin_comment
comment|/**  * Unit testing for basic GeoPoint query logic  *  * @lucene.experimental  */
end_comment
begin_class
DECL|class|TestGeoPointQuery
specifier|public
class|class
name|TestGeoPointQuery
extends|extends
name|BaseGeoPointTestCase
block|{
DECL|field|directory
specifier|private
specifier|static
name|Directory
name|directory
init|=
literal|null
decl_stmt|;
DECL|field|reader
specifier|private
specifier|static
name|IndexReader
name|reader
init|=
literal|null
decl_stmt|;
DECL|field|searcher
specifier|private
specifier|static
name|IndexSearcher
name|searcher
init|=
literal|null
decl_stmt|;
comment|// error threshold for point-distance queries (in percent) NOTE: Guideline from USGS
DECL|field|DISTANCE_PCT_ERR
specifier|private
specifier|static
specifier|final
name|double
name|DISTANCE_PCT_ERR
init|=
literal|0.005
decl_stmt|;
annotation|@
name|Override
DECL|method|forceSmall
specifier|protected
name|boolean
name|forceSmall
parameter_list|()
block|{
comment|// TODO: GeoUtils are potentially slow if we use small=false with heavy testing
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|addPointToDoc
specifier|protected
name|void
name|addPointToDoc
parameter_list|(
name|String
name|field
parameter_list|,
name|Document
name|doc
parameter_list|,
name|double
name|lat
parameter_list|,
name|double
name|lon
parameter_list|)
block|{
name|doc
operator|.
name|add
argument_list|(
operator|new
name|GeoPointField
argument_list|(
name|field
argument_list|,
name|lon
argument_list|,
name|lat
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|newRectQuery
specifier|protected
name|Query
name|newRectQuery
parameter_list|(
name|String
name|field
parameter_list|,
name|GeoRect
name|rect
parameter_list|)
block|{
return|return
operator|new
name|GeoPointInBBoxQuery
argument_list|(
name|field
argument_list|,
name|rect
operator|.
name|minLon
argument_list|,
name|rect
operator|.
name|minLat
argument_list|,
name|rect
operator|.
name|maxLon
argument_list|,
name|rect
operator|.
name|maxLat
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|newDistanceQuery
specifier|protected
name|Query
name|newDistanceQuery
parameter_list|(
name|String
name|field
parameter_list|,
name|double
name|centerLat
parameter_list|,
name|double
name|centerLon
parameter_list|,
name|double
name|radiusMeters
parameter_list|)
block|{
return|return
operator|new
name|GeoPointDistanceQuery
argument_list|(
name|field
argument_list|,
name|centerLon
argument_list|,
name|centerLat
argument_list|,
name|radiusMeters
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|newDistanceRangeQuery
specifier|protected
name|Query
name|newDistanceRangeQuery
parameter_list|(
name|String
name|field
parameter_list|,
name|double
name|centerLat
parameter_list|,
name|double
name|centerLon
parameter_list|,
name|double
name|minRadiusMeters
parameter_list|,
name|double
name|radiusMeters
parameter_list|)
block|{
return|return
operator|new
name|GeoPointDistanceRangeQuery
argument_list|(
name|field
argument_list|,
name|centerLon
argument_list|,
name|centerLat
argument_list|,
name|minRadiusMeters
argument_list|,
name|radiusMeters
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|newPolygonQuery
specifier|protected
name|Query
name|newPolygonQuery
parameter_list|(
name|String
name|field
parameter_list|,
name|double
index|[]
name|lats
parameter_list|,
name|double
index|[]
name|lons
parameter_list|)
block|{
return|return
operator|new
name|GeoPointInPolygonQuery
argument_list|(
name|field
argument_list|,
name|lons
argument_list|,
name|lats
argument_list|)
return|;
block|}
annotation|@
name|BeforeClass
DECL|method|beforeClass
specifier|public
specifier|static
name|void
name|beforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|directory
operator|=
name|newDirectory
argument_list|()
expr_stmt|;
name|RandomIndexWriter
name|writer
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|directory
argument_list|,
name|newIndexWriterConfig
argument_list|(
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setMaxBufferedDocs
argument_list|(
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|100
argument_list|,
literal|1000
argument_list|)
argument_list|)
operator|.
name|setMergePolicy
argument_list|(
name|newLogMergePolicy
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
comment|// create some simple geo points
specifier|final
name|FieldType
name|storedPoint
init|=
operator|new
name|FieldType
argument_list|(
name|GeoPointField
operator|.
name|TYPE_STORED
argument_list|)
decl_stmt|;
comment|// this is a simple systematic test
name|GeoPointField
index|[]
name|pts
init|=
operator|new
name|GeoPointField
index|[]
block|{
operator|new
name|GeoPointField
argument_list|(
name|FIELD_NAME
argument_list|,
operator|-
literal|96.774
argument_list|,
literal|32.763420
argument_list|,
name|storedPoint
argument_list|)
block|,
operator|new
name|GeoPointField
argument_list|(
name|FIELD_NAME
argument_list|,
operator|-
literal|96.7759895324707
argument_list|,
literal|32.7559529921407
argument_list|,
name|storedPoint
argument_list|)
block|,
operator|new
name|GeoPointField
argument_list|(
name|FIELD_NAME
argument_list|,
operator|-
literal|96.77701950073242
argument_list|,
literal|32.77866942010977
argument_list|,
name|storedPoint
argument_list|)
block|,
operator|new
name|GeoPointField
argument_list|(
name|FIELD_NAME
argument_list|,
operator|-
literal|96.7706036567688
argument_list|,
literal|32.7756745755423
argument_list|,
name|storedPoint
argument_list|)
block|,
operator|new
name|GeoPointField
argument_list|(
name|FIELD_NAME
argument_list|,
operator|-
literal|139.73458170890808
argument_list|,
literal|27.703618681345585
argument_list|,
name|storedPoint
argument_list|)
block|,
operator|new
name|GeoPointField
argument_list|(
name|FIELD_NAME
argument_list|,
operator|-
literal|96.4538113027811
argument_list|,
literal|32.94823588839368
argument_list|,
name|storedPoint
argument_list|)
block|,
operator|new
name|GeoPointField
argument_list|(
name|FIELD_NAME
argument_list|,
operator|-
literal|96.65084838867188
argument_list|,
literal|33.06047141970814
argument_list|,
name|storedPoint
argument_list|)
block|,
operator|new
name|GeoPointField
argument_list|(
name|FIELD_NAME
argument_list|,
operator|-
literal|96.7772
argument_list|,
literal|32.778650
argument_list|,
name|storedPoint
argument_list|)
block|,
operator|new
name|GeoPointField
argument_list|(
name|FIELD_NAME
argument_list|,
operator|-
literal|177.23537676036358
argument_list|,
operator|-
literal|88.56029371730983
argument_list|,
name|storedPoint
argument_list|)
block|,
operator|new
name|GeoPointField
argument_list|(
name|FIELD_NAME
argument_list|,
operator|-
literal|26.779373834241003
argument_list|,
literal|33.541429799076354
argument_list|,
name|storedPoint
argument_list|)
block|,
operator|new
name|GeoPointField
argument_list|(
name|FIELD_NAME
argument_list|,
operator|-
literal|77.35379276106497
argument_list|,
literal|26.774024500421728
argument_list|,
name|storedPoint
argument_list|)
block|,
operator|new
name|GeoPointField
argument_list|(
name|FIELD_NAME
argument_list|,
operator|-
literal|14.796283808944777
argument_list|,
operator|-
literal|90.0
argument_list|,
name|storedPoint
argument_list|)
block|,
operator|new
name|GeoPointField
argument_list|(
name|FIELD_NAME
argument_list|,
operator|-
literal|178.8538113027811
argument_list|,
literal|32.94823588839368
argument_list|,
name|storedPoint
argument_list|)
block|,
operator|new
name|GeoPointField
argument_list|(
name|FIELD_NAME
argument_list|,
literal|178.8538113027811
argument_list|,
literal|32.94823588839368
argument_list|,
name|storedPoint
argument_list|)
block|,
operator|new
name|GeoPointField
argument_list|(
name|FIELD_NAME
argument_list|,
operator|-
literal|73.998776
argument_list|,
literal|40.720611
argument_list|,
name|storedPoint
argument_list|)
block|,
operator|new
name|GeoPointField
argument_list|(
name|FIELD_NAME
argument_list|,
operator|-
literal|179.5
argument_list|,
operator|-
literal|44.5
argument_list|,
name|storedPoint
argument_list|)
block|}
decl_stmt|;
for|for
control|(
name|GeoPointField
name|p
range|:
name|pts
control|)
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
comment|// add explicit multi-valued docs
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|pts
operator|.
name|length
condition|;
name|i
operator|+=
literal|2
control|)
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|pts
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|pts
index|[
name|i
operator|+
literal|1
index|]
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
comment|// index random string documents
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
condition|;
operator|++
name|i
control|)
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|StringField
argument_list|(
literal|"string"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
name|reader
operator|=
name|writer
operator|.
name|getReader
argument_list|()
expr_stmt|;
name|searcher
operator|=
name|newSearcher
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|afterClass
specifier|public
specifier|static
name|void
name|afterClass
parameter_list|()
throws|throws
name|Exception
block|{
name|searcher
operator|=
literal|null
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|reader
operator|=
literal|null
expr_stmt|;
name|directory
operator|.
name|close
argument_list|()
expr_stmt|;
name|directory
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|bboxQuery
specifier|private
name|TopDocs
name|bboxQuery
parameter_list|(
name|double
name|minLon
parameter_list|,
name|double
name|minLat
parameter_list|,
name|double
name|maxLon
parameter_list|,
name|double
name|maxLat
parameter_list|,
name|int
name|limit
parameter_list|)
throws|throws
name|Exception
block|{
name|GeoPointInBBoxQuery
name|q
init|=
operator|new
name|GeoPointInBBoxQuery
argument_list|(
name|FIELD_NAME
argument_list|,
name|minLon
argument_list|,
name|minLat
argument_list|,
name|maxLon
argument_list|,
name|maxLat
argument_list|)
decl_stmt|;
return|return
name|searcher
operator|.
name|search
argument_list|(
name|q
argument_list|,
name|limit
argument_list|)
return|;
block|}
DECL|method|polygonQuery
specifier|private
name|TopDocs
name|polygonQuery
parameter_list|(
name|double
index|[]
name|lon
parameter_list|,
name|double
index|[]
name|lat
parameter_list|,
name|int
name|limit
parameter_list|)
throws|throws
name|Exception
block|{
name|GeoPointInPolygonQuery
name|q
init|=
operator|new
name|GeoPointInPolygonQuery
argument_list|(
name|FIELD_NAME
argument_list|,
name|lon
argument_list|,
name|lat
argument_list|)
decl_stmt|;
return|return
name|searcher
operator|.
name|search
argument_list|(
name|q
argument_list|,
name|limit
argument_list|)
return|;
block|}
DECL|method|geoDistanceQuery
specifier|private
name|TopDocs
name|geoDistanceQuery
parameter_list|(
name|double
name|lon
parameter_list|,
name|double
name|lat
parameter_list|,
name|double
name|radius
parameter_list|,
name|int
name|limit
parameter_list|)
throws|throws
name|Exception
block|{
name|GeoPointDistanceQuery
name|q
init|=
operator|new
name|GeoPointDistanceQuery
argument_list|(
name|FIELD_NAME
argument_list|,
name|lon
argument_list|,
name|lat
argument_list|,
name|radius
argument_list|)
decl_stmt|;
return|return
name|searcher
operator|.
name|search
argument_list|(
name|q
argument_list|,
name|limit
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|rectContainsPoint
specifier|protected
name|Boolean
name|rectContainsPoint
parameter_list|(
name|GeoRect
name|rect
parameter_list|,
name|double
name|pointLat
parameter_list|,
name|double
name|pointLon
parameter_list|)
block|{
if|if
condition|(
name|GeoUtils
operator|.
name|compare
argument_list|(
name|pointLon
argument_list|,
name|rect
operator|.
name|minLon
argument_list|)
operator|==
literal|0.0
operator|||
name|GeoUtils
operator|.
name|compare
argument_list|(
name|pointLon
argument_list|,
name|rect
operator|.
name|maxLon
argument_list|)
operator|==
literal|0.0
operator|||
name|GeoUtils
operator|.
name|compare
argument_list|(
name|pointLat
argument_list|,
name|rect
operator|.
name|minLat
argument_list|)
operator|==
literal|0.0
operator|||
name|GeoUtils
operator|.
name|compare
argument_list|(
name|pointLat
argument_list|,
name|rect
operator|.
name|maxLat
argument_list|)
operator|==
literal|0.0
condition|)
block|{
comment|// Point is very close to rect boundary
return|return
literal|null
return|;
block|}
if|if
condition|(
name|rect
operator|.
name|minLon
operator|<
name|rect
operator|.
name|maxLon
condition|)
block|{
return|return
name|GeoUtils
operator|.
name|bboxContains
argument_list|(
name|pointLon
argument_list|,
name|pointLat
argument_list|,
name|rect
operator|.
name|minLon
argument_list|,
name|rect
operator|.
name|minLat
argument_list|,
name|rect
operator|.
name|maxLon
argument_list|,
name|rect
operator|.
name|maxLat
argument_list|)
return|;
block|}
else|else
block|{
comment|// Rect crosses dateline:
return|return
name|GeoUtils
operator|.
name|bboxContains
argument_list|(
name|pointLon
argument_list|,
name|pointLat
argument_list|,
operator|-
literal|180.0
argument_list|,
name|rect
operator|.
name|minLat
argument_list|,
name|rect
operator|.
name|maxLon
argument_list|,
name|rect
operator|.
name|maxLat
argument_list|)
operator|||
name|GeoUtils
operator|.
name|bboxContains
argument_list|(
name|pointLon
argument_list|,
name|pointLat
argument_list|,
name|rect
operator|.
name|minLon
argument_list|,
name|rect
operator|.
name|minLat
argument_list|,
literal|180.0
argument_list|,
name|rect
operator|.
name|maxLat
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|polyRectContainsPoint
specifier|protected
name|Boolean
name|polyRectContainsPoint
parameter_list|(
name|GeoRect
name|rect
parameter_list|,
name|double
name|pointLat
parameter_list|,
name|double
name|pointLon
parameter_list|)
block|{
return|return
name|rectContainsPoint
argument_list|(
name|rect
argument_list|,
name|pointLat
argument_list|,
name|pointLon
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|circleContainsPoint
specifier|protected
name|Boolean
name|circleContainsPoint
parameter_list|(
name|double
name|centerLat
parameter_list|,
name|double
name|centerLon
parameter_list|,
name|double
name|radiusMeters
parameter_list|,
name|double
name|pointLat
parameter_list|,
name|double
name|pointLon
parameter_list|)
block|{
if|if
condition|(
name|radiusQueryCanBeWrong
argument_list|(
name|centerLat
argument_list|,
name|centerLon
argument_list|,
name|pointLon
argument_list|,
name|pointLat
argument_list|,
name|radiusMeters
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
name|SloppyMath
operator|.
name|haversin
argument_list|(
name|centerLat
argument_list|,
name|centerLon
argument_list|,
name|pointLat
argument_list|,
name|pointLon
argument_list|)
operator|*
literal|1000.0
operator|<=
name|radiusMeters
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|distanceRangeContainsPoint
specifier|protected
name|Boolean
name|distanceRangeContainsPoint
parameter_list|(
name|double
name|centerLat
parameter_list|,
name|double
name|centerLon
parameter_list|,
name|double
name|minRadiusMeters
parameter_list|,
name|double
name|radiusMeters
parameter_list|,
name|double
name|pointLat
parameter_list|,
name|double
name|pointLon
parameter_list|)
block|{
if|if
condition|(
name|radiusQueryCanBeWrong
argument_list|(
name|centerLat
argument_list|,
name|centerLon
argument_list|,
name|pointLon
argument_list|,
name|pointLat
argument_list|,
name|minRadiusMeters
argument_list|)
operator|||
name|radiusQueryCanBeWrong
argument_list|(
name|centerLat
argument_list|,
name|centerLon
argument_list|,
name|pointLon
argument_list|,
name|pointLat
argument_list|,
name|radiusMeters
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
specifier|final
name|double
name|d
init|=
name|SloppyMath
operator|.
name|haversin
argument_list|(
name|centerLat
argument_list|,
name|centerLon
argument_list|,
name|pointLat
argument_list|,
name|pointLon
argument_list|)
operator|*
literal|1000.0
decl_stmt|;
return|return
name|d
operator|>=
name|minRadiusMeters
operator|&&
name|d
operator|<=
name|radiusMeters
return|;
block|}
block|}
DECL|method|radiusQueryCanBeWrong
specifier|private
specifier|static
name|boolean
name|radiusQueryCanBeWrong
parameter_list|(
name|double
name|centerLat
parameter_list|,
name|double
name|centerLon
parameter_list|,
name|double
name|ptLon
parameter_list|,
name|double
name|ptLat
parameter_list|,
specifier|final
name|double
name|radius
parameter_list|)
block|{
specifier|final
name|long
name|hashedCntr
init|=
name|GeoUtils
operator|.
name|mortonHash
argument_list|(
name|centerLon
argument_list|,
name|centerLat
argument_list|)
decl_stmt|;
name|centerLon
operator|=
name|GeoUtils
operator|.
name|mortonUnhashLon
argument_list|(
name|hashedCntr
argument_list|)
expr_stmt|;
name|centerLat
operator|=
name|GeoUtils
operator|.
name|mortonUnhashLat
argument_list|(
name|hashedCntr
argument_list|)
expr_stmt|;
specifier|final
name|long
name|hashedPt
init|=
name|GeoUtils
operator|.
name|mortonHash
argument_list|(
name|ptLon
argument_list|,
name|ptLat
argument_list|)
decl_stmt|;
name|ptLon
operator|=
name|GeoUtils
operator|.
name|mortonUnhashLon
argument_list|(
name|hashedPt
argument_list|)
expr_stmt|;
name|ptLat
operator|=
name|GeoUtils
operator|.
name|mortonUnhashLat
argument_list|(
name|hashedPt
argument_list|)
expr_stmt|;
name|double
name|ptDistance
init|=
name|SloppyMath
operator|.
name|haversin
argument_list|(
name|centerLat
argument_list|,
name|centerLon
argument_list|,
name|ptLat
argument_list|,
name|ptLon
argument_list|)
operator|*
literal|1000.0
decl_stmt|;
name|double
name|delta
init|=
name|StrictMath
operator|.
name|abs
argument_list|(
name|ptDistance
operator|-
name|radius
argument_list|)
decl_stmt|;
comment|// if its within the distance error then it can be wrong
return|return
name|delta
operator|<
operator|(
name|ptDistance
operator|*
name|DISTANCE_PCT_ERR
operator|)
return|;
block|}
DECL|method|testRectCrossesCircle
specifier|public
name|void
name|testRectCrossesCircle
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
name|GeoUtils
operator|.
name|rectCrossesCircle
argument_list|(
operator|-
literal|180
argument_list|,
operator|-
literal|90
argument_list|,
literal|180
argument_list|,
literal|0.0
argument_list|,
literal|0.667
argument_list|,
literal|0.0
argument_list|,
literal|88000.0
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|geoDistanceRangeQuery
specifier|private
name|TopDocs
name|geoDistanceRangeQuery
parameter_list|(
name|double
name|lon
parameter_list|,
name|double
name|lat
parameter_list|,
name|double
name|minRadius
parameter_list|,
name|double
name|maxRadius
parameter_list|,
name|int
name|limit
parameter_list|)
throws|throws
name|Exception
block|{
name|GeoPointDistanceRangeQuery
name|q
init|=
operator|new
name|GeoPointDistanceRangeQuery
argument_list|(
name|FIELD_NAME
argument_list|,
name|lon
argument_list|,
name|lat
argument_list|,
name|minRadius
argument_list|,
name|maxRadius
argument_list|)
decl_stmt|;
return|return
name|searcher
operator|.
name|search
argument_list|(
name|q
argument_list|,
name|limit
argument_list|)
return|;
block|}
DECL|method|testBBoxQuery
specifier|public
name|void
name|testBBoxQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|TopDocs
name|td
init|=
name|bboxQuery
argument_list|(
operator|-
literal|96.7772
argument_list|,
literal|32.778650
argument_list|,
operator|-
literal|96.77690000
argument_list|,
literal|32.778950
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"GeoBoundingBoxQuery failed"
argument_list|,
literal|4
argument_list|,
name|td
operator|.
name|totalHits
argument_list|)
expr_stmt|;
block|}
DECL|method|testPolyQuery
specifier|public
name|void
name|testPolyQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|TopDocs
name|td
init|=
name|polygonQuery
argument_list|(
operator|new
name|double
index|[]
block|{
operator|-
literal|96.7682647
block|,
operator|-
literal|96.8280029
block|,
operator|-
literal|96.6288757
block|,
operator|-
literal|96.4929199
block|,
operator|-
literal|96.6041564
block|,
operator|-
literal|96.7449188
block|,
operator|-
literal|96.76826477
block|,
operator|-
literal|96.7682647
block|}
argument_list|,
operator|new
name|double
index|[]
block|{
literal|33.073130
block|,
literal|32.9942669
block|,
literal|32.938386
block|,
literal|33.0374494
block|,
literal|33.1369762
block|,
literal|33.1162747
block|,
literal|33.073130
block|,
literal|33.073130
block|}
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"GeoPolygonQuery failed"
argument_list|,
literal|2
argument_list|,
name|td
operator|.
name|totalHits
argument_list|)
expr_stmt|;
block|}
DECL|method|testPacManPolyQuery
specifier|public
name|void
name|testPacManPolyQuery
parameter_list|()
throws|throws
name|Exception
block|{
comment|// pacman
name|double
index|[]
name|px
init|=
block|{
literal|0
block|,
literal|10
block|,
literal|10
block|,
literal|0
block|,
operator|-
literal|8
block|,
operator|-
literal|10
block|,
operator|-
literal|8
block|,
literal|0
block|,
literal|10
block|,
literal|10
block|,
literal|0
block|}
decl_stmt|;
name|double
index|[]
name|py
init|=
block|{
literal|0
block|,
literal|5
block|,
literal|9
block|,
literal|10
block|,
literal|9
block|,
literal|0
block|,
operator|-
literal|9
block|,
operator|-
literal|10
block|,
operator|-
literal|9
block|,
operator|-
literal|5
block|,
literal|0
block|}
decl_stmt|;
comment|// shape bbox
name|double
name|xMinA
init|=
operator|-
literal|10
decl_stmt|;
name|double
name|xMaxA
init|=
literal|10
decl_stmt|;
name|double
name|yMinA
init|=
operator|-
literal|10
decl_stmt|;
name|double
name|yMaxA
init|=
literal|10
decl_stmt|;
comment|// candidate crosses cell
name|double
name|xMin
init|=
literal|2
decl_stmt|;
comment|//-5;
name|double
name|xMax
init|=
literal|11
decl_stmt|;
comment|//0.000001;
name|double
name|yMin
init|=
operator|-
literal|1
decl_stmt|;
comment|//0;
name|double
name|yMax
init|=
literal|1
decl_stmt|;
comment|//5;
comment|// test cell crossing poly
name|assertTrue
argument_list|(
name|GeoUtils
operator|.
name|rectCrossesPoly
argument_list|(
name|xMin
argument_list|,
name|yMin
argument_list|,
name|xMax
argument_list|,
name|yMax
argument_list|,
name|px
argument_list|,
name|py
argument_list|,
name|xMinA
argument_list|,
name|yMinA
argument_list|,
name|xMaxA
argument_list|,
name|yMaxA
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|GeoUtils
operator|.
name|rectCrossesPoly
argument_list|(
operator|-
literal|5
argument_list|,
literal|0
argument_list|,
literal|0.000001
argument_list|,
literal|5
argument_list|,
name|px
argument_list|,
name|py
argument_list|,
name|xMin
argument_list|,
name|yMin
argument_list|,
name|xMax
argument_list|,
name|yMax
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|GeoUtils
operator|.
name|rectWithinPoly
argument_list|(
operator|-
literal|5
argument_list|,
literal|0
argument_list|,
operator|-
literal|2
argument_list|,
literal|5
argument_list|,
name|px
argument_list|,
name|py
argument_list|,
name|xMin
argument_list|,
name|yMin
argument_list|,
name|xMax
argument_list|,
name|yMax
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testBBoxCrossDateline
specifier|public
name|void
name|testBBoxCrossDateline
parameter_list|()
throws|throws
name|Exception
block|{
name|TopDocs
name|td
init|=
name|bboxQuery
argument_list|(
literal|179.0
argument_list|,
operator|-
literal|45.0
argument_list|,
operator|-
literal|179.0
argument_list|,
operator|-
literal|44.0
argument_list|,
literal|20
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"BBoxCrossDateline query failed"
argument_list|,
literal|2
argument_list|,
name|td
operator|.
name|totalHits
argument_list|)
expr_stmt|;
block|}
DECL|method|testWholeMap
specifier|public
name|void
name|testWholeMap
parameter_list|()
throws|throws
name|Exception
block|{
name|TopDocs
name|td
init|=
name|bboxQuery
argument_list|(
name|GeoUtils
operator|.
name|MIN_LON_INCL
argument_list|,
name|GeoUtils
operator|.
name|MIN_LAT_INCL
argument_list|,
name|GeoUtils
operator|.
name|MAX_LON_INCL
argument_list|,
name|GeoUtils
operator|.
name|MAX_LAT_INCL
argument_list|,
literal|20
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"testWholeMap failed"
argument_list|,
literal|24
argument_list|,
name|td
operator|.
name|totalHits
argument_list|)
expr_stmt|;
block|}
DECL|method|smallTest
specifier|public
name|void
name|smallTest
parameter_list|()
throws|throws
name|Exception
block|{
name|TopDocs
name|td
init|=
name|geoDistanceQuery
argument_list|(
operator|-
literal|73.998776
argument_list|,
literal|40.720611
argument_list|,
literal|1
argument_list|,
literal|20
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"smallTest failed"
argument_list|,
literal|2
argument_list|,
name|td
operator|.
name|totalHits
argument_list|)
expr_stmt|;
block|}
DECL|method|testInvalidBBox
specifier|public
name|void
name|testInvalidBBox
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|bboxQuery
argument_list|(
literal|179.0
argument_list|,
operator|-
literal|92.0
argument_list|,
literal|181.0
argument_list|,
operator|-
literal|91.0
argument_list|,
literal|20
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return;
block|}
throw|throw
operator|new
name|Exception
argument_list|(
literal|"GeoBoundingBox should not accept invalid lat/lon"
argument_list|)
throw|;
block|}
DECL|method|testGeoDistanceQuery
specifier|public
name|void
name|testGeoDistanceQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|TopDocs
name|td
init|=
name|geoDistanceQuery
argument_list|(
operator|-
literal|96.4538113027811
argument_list|,
literal|32.94823588839368
argument_list|,
literal|6000
argument_list|,
literal|20
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"GeoDistanceQuery failed"
argument_list|,
literal|2
argument_list|,
name|td
operator|.
name|totalHits
argument_list|)
expr_stmt|;
block|}
comment|/** see https://issues.apache.org/jira/browse/LUCENE-6905 */
DECL|method|testNonEmptyTermsEnum
specifier|public
name|void
name|testNonEmptyTermsEnum
parameter_list|()
throws|throws
name|Exception
block|{
name|TopDocs
name|td
init|=
name|geoDistanceQuery
argument_list|(
operator|-
literal|177.23537676036358
argument_list|,
operator|-
literal|88.56029371730983
argument_list|,
literal|7757.999232959935
argument_list|,
literal|20
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"GeoDistanceQuery failed"
argument_list|,
literal|2
argument_list|,
name|td
operator|.
name|totalHits
argument_list|)
expr_stmt|;
block|}
DECL|method|testMultiValuedQuery
specifier|public
name|void
name|testMultiValuedQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|TopDocs
name|td
init|=
name|bboxQuery
argument_list|(
operator|-
literal|96.4538113027811
argument_list|,
literal|32.7559529921407
argument_list|,
operator|-
literal|96.7706036567688
argument_list|,
literal|32.7756745755423
argument_list|,
literal|20
argument_list|)
decl_stmt|;
comment|// 3 single valued docs + 2 multi-valued docs
name|assertEquals
argument_list|(
literal|"testMultiValuedQuery failed"
argument_list|,
literal|5
argument_list|,
name|td
operator|.
name|totalHits
argument_list|)
expr_stmt|;
block|}
DECL|method|testTooBigRadius
specifier|public
name|void
name|testTooBigRadius
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|geoDistanceQuery
argument_list|(
literal|0.0
argument_list|,
literal|85.0
argument_list|,
literal|4000000
argument_list|,
literal|20
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"exceeds maxRadius"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Explicitly large    */
DECL|method|testGeoDistanceQueryHuge
specifier|public
name|void
name|testGeoDistanceQueryHuge
parameter_list|()
throws|throws
name|Exception
block|{
name|TopDocs
name|td
init|=
name|geoDistanceQuery
argument_list|(
operator|-
literal|96.4538113027811
argument_list|,
literal|32.94823588839368
argument_list|,
literal|6000000
argument_list|,
literal|20
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"GeoDistanceQuery failed"
argument_list|,
literal|16
argument_list|,
name|td
operator|.
name|totalHits
argument_list|)
expr_stmt|;
block|}
DECL|method|testGeoDistanceQueryCrossDateline
specifier|public
name|void
name|testGeoDistanceQueryCrossDateline
parameter_list|()
throws|throws
name|Exception
block|{
name|TopDocs
name|td
init|=
name|geoDistanceQuery
argument_list|(
operator|-
literal|179.9538113027811
argument_list|,
literal|32.94823588839368
argument_list|,
literal|120000
argument_list|,
literal|20
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"GeoDistanceQuery failed"
argument_list|,
literal|3
argument_list|,
name|td
operator|.
name|totalHits
argument_list|)
expr_stmt|;
block|}
DECL|method|testInvalidGeoDistanceQuery
specifier|public
name|void
name|testInvalidGeoDistanceQuery
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|geoDistanceQuery
argument_list|(
literal|181.0
argument_list|,
literal|92.0
argument_list|,
literal|120000
argument_list|,
literal|20
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return;
block|}
throw|throw
operator|new
name|Exception
argument_list|(
literal|"GeoDistanceQuery should not accept invalid lat/lon as origin"
argument_list|)
throw|;
block|}
DECL|method|testMaxDistanceRangeQuery
specifier|public
name|void
name|testMaxDistanceRangeQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|TopDocs
name|td
init|=
name|geoDistanceRangeQuery
argument_list|(
literal|0.0
argument_list|,
literal|0.0
argument_list|,
literal|10
argument_list|,
literal|20000000
argument_list|,
literal|20
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"GeoDistanceRangeQuery failed"
argument_list|,
literal|24
argument_list|,
name|td
operator|.
name|totalHits
argument_list|)
expr_stmt|;
block|}
DECL|method|testMortonEncoding
specifier|public
name|void
name|testMortonEncoding
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|hash
init|=
name|GeoUtils
operator|.
name|mortonHash
argument_list|(
literal|180
argument_list|,
literal|90
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|180.0
argument_list|,
name|GeoUtils
operator|.
name|mortonUnhashLon
argument_list|(
name|hash
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|90.0
argument_list|,
name|GeoUtils
operator|.
name|mortonUnhashLat
argument_list|(
name|hash
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
