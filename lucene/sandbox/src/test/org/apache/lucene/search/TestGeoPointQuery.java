begin_unit
begin_package
DECL|package|org.apache.lucene.search
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|MockAnalyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|FieldType
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|GeoPointField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|NumericDocValuesField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DirectoryReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriterConfig
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReaderContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|MultiDocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|NumericDocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|RandomIndexWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|FixedBitSet
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|GeoUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|SloppyMath
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|TestUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_comment
comment|/**  * Unit testing for basic GeoPoint query logic  *  * @lucene.experimental  */
end_comment
begin_class
DECL|class|TestGeoPointQuery
specifier|public
class|class
name|TestGeoPointQuery
extends|extends
name|LuceneTestCase
block|{
DECL|field|directory
specifier|private
specifier|static
name|Directory
name|directory
init|=
literal|null
decl_stmt|;
DECL|field|reader
specifier|private
specifier|static
name|IndexReader
name|reader
init|=
literal|null
decl_stmt|;
DECL|field|searcher
specifier|private
specifier|static
name|IndexSearcher
name|searcher
init|=
literal|null
decl_stmt|;
DECL|field|FIELD_NAME
specifier|private
specifier|static
specifier|final
name|String
name|FIELD_NAME
init|=
literal|"geoField"
decl_stmt|;
comment|// error threshold for point-distance queries (in meters)
DECL|field|DISTANCE_ERR
specifier|private
specifier|static
specifier|final
name|int
name|DISTANCE_ERR
init|=
literal|700
decl_stmt|;
comment|// Global bounding box we will "cover" in the random test; we have to make this "smallish" else the queries take very long:
DECL|field|originLat
specifier|private
specifier|static
name|double
name|originLat
decl_stmt|;
DECL|field|originLon
specifier|private
specifier|static
name|double
name|originLon
decl_stmt|;
comment|//  private static double range;
DECL|field|lonRange
specifier|private
specifier|static
name|double
name|lonRange
decl_stmt|;
DECL|field|latRange
specifier|private
specifier|static
name|double
name|latRange
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|beforeClass
specifier|public
specifier|static
name|void
name|beforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|directory
operator|=
name|newDirectory
argument_list|()
expr_stmt|;
comment|// when we randomly test the full lat/lon space it can result in very very slow query times, this is due to the
comment|// number of ranges that can be created in degenerate cases.
comment|// Between 1.0 and 3.0:
comment|//    range = 2*(random().nextDouble() + 0.5);
comment|// Between 1.0 and 90.0
comment|//lonRange = 1.0 + (90.0 - 1.0) * random().nextDouble();
comment|//latRange = 1.0 + (45.0 - 1.0) * random().nextDouble();
comment|// Between 1.0 and 3.0:
name|lonRange
operator|=
literal|2
operator|*
operator|(
name|random
argument_list|()
operator|.
name|nextDouble
argument_list|()
operator|+
literal|0.5
operator|)
expr_stmt|;
name|latRange
operator|=
literal|2
operator|*
operator|(
name|random
argument_list|()
operator|.
name|nextDouble
argument_list|()
operator|+
literal|0.5
operator|)
expr_stmt|;
name|originLon
operator|=
name|GeoUtils
operator|.
name|MIN_LON_INCL
operator|+
name|lonRange
operator|+
operator|(
name|GeoUtils
operator|.
name|MAX_LON_INCL
operator|-
name|GeoUtils
operator|.
name|MIN_LON_INCL
operator|-
literal|2
operator|*
name|lonRange
operator|)
operator|*
name|random
argument_list|()
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
name|originLon
operator|=
name|GeoUtils
operator|.
name|normalizeLon
argument_list|(
name|originLon
argument_list|)
expr_stmt|;
name|originLat
operator|=
name|GeoUtils
operator|.
name|MIN_LAT_INCL
operator|+
name|latRange
operator|+
operator|(
name|GeoUtils
operator|.
name|MAX_LAT_INCL
operator|-
name|GeoUtils
operator|.
name|MIN_LAT_INCL
operator|-
literal|2
operator|*
name|latRange
operator|)
operator|*
name|random
argument_list|()
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
name|originLat
operator|=
name|GeoUtils
operator|.
name|normalizeLat
argument_list|(
name|originLat
argument_list|)
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TEST: originLon="
operator|+
name|originLon
operator|+
literal|" lonRange= "
operator|+
name|lonRange
operator|+
literal|" originLat="
operator|+
name|originLat
operator|+
literal|" latRange="
operator|+
name|latRange
argument_list|)
expr_stmt|;
block|}
name|RandomIndexWriter
name|writer
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|directory
argument_list|,
name|newIndexWriterConfig
argument_list|(
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setMaxBufferedDocs
argument_list|(
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|100
argument_list|,
literal|1000
argument_list|)
argument_list|)
operator|.
name|setMergePolicy
argument_list|(
name|newLogMergePolicy
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
comment|// create some simple geo points
specifier|final
name|FieldType
name|storedPoint
init|=
operator|new
name|FieldType
argument_list|(
name|GeoPointField
operator|.
name|TYPE_STORED
argument_list|)
decl_stmt|;
comment|// this is a simple systematic test
name|GeoPointField
index|[]
name|pts
init|=
operator|new
name|GeoPointField
index|[]
block|{
operator|new
name|GeoPointField
argument_list|(
name|FIELD_NAME
argument_list|,
operator|-
literal|96.4538113027811
argument_list|,
literal|32.94823588839368
argument_list|,
name|storedPoint
argument_list|)
block|,
operator|new
name|GeoPointField
argument_list|(
name|FIELD_NAME
argument_list|,
operator|-
literal|96.7759895324707
argument_list|,
literal|32.7559529921407
argument_list|,
name|storedPoint
argument_list|)
block|,
operator|new
name|GeoPointField
argument_list|(
name|FIELD_NAME
argument_list|,
operator|-
literal|96.77701950073242
argument_list|,
literal|32.77866942010977
argument_list|,
name|storedPoint
argument_list|)
block|,
operator|new
name|GeoPointField
argument_list|(
name|FIELD_NAME
argument_list|,
operator|-
literal|96.7706036567688
argument_list|,
literal|32.7756745755423
argument_list|,
name|storedPoint
argument_list|)
block|,
operator|new
name|GeoPointField
argument_list|(
name|FIELD_NAME
argument_list|,
operator|-
literal|139.73458170890808
argument_list|,
literal|27.703618681345585
argument_list|,
name|storedPoint
argument_list|)
block|,
operator|new
name|GeoPointField
argument_list|(
name|FIELD_NAME
argument_list|,
operator|-
literal|96.65084838867188
argument_list|,
literal|33.06047141970814
argument_list|,
name|storedPoint
argument_list|)
block|,
operator|new
name|GeoPointField
argument_list|(
name|FIELD_NAME
argument_list|,
operator|-
literal|96.7772
argument_list|,
literal|32.778650
argument_list|,
name|storedPoint
argument_list|)
block|,
operator|new
name|GeoPointField
argument_list|(
name|FIELD_NAME
argument_list|,
operator|-
literal|83.99724648980559
argument_list|,
literal|58.29438379542874
argument_list|,
name|storedPoint
argument_list|)
block|,
operator|new
name|GeoPointField
argument_list|(
name|FIELD_NAME
argument_list|,
operator|-
literal|26.779373834241003
argument_list|,
literal|33.541429799076354
argument_list|,
name|storedPoint
argument_list|)
block|,
operator|new
name|GeoPointField
argument_list|(
name|FIELD_NAME
argument_list|,
operator|-
literal|77.35379276106497
argument_list|,
literal|26.774024500421728
argument_list|,
name|storedPoint
argument_list|)
block|,
operator|new
name|GeoPointField
argument_list|(
name|FIELD_NAME
argument_list|,
operator|-
literal|14.796283808944777
argument_list|,
operator|-
literal|62.455081198245665
argument_list|,
name|storedPoint
argument_list|)
block|,
operator|new
name|GeoPointField
argument_list|(
name|FIELD_NAME
argument_list|,
operator|-
literal|178.8538113027811
argument_list|,
literal|32.94823588839368
argument_list|,
name|storedPoint
argument_list|)
block|,
operator|new
name|GeoPointField
argument_list|(
name|FIELD_NAME
argument_list|,
literal|178.8538113027811
argument_list|,
literal|32.94823588839368
argument_list|,
name|storedPoint
argument_list|)
block|,
operator|new
name|GeoPointField
argument_list|(
name|FIELD_NAME
argument_list|,
operator|-
literal|179.5
argument_list|,
operator|-
literal|44.5
argument_list|,
name|storedPoint
argument_list|)
block|}
decl_stmt|;
for|for
control|(
name|GeoPointField
name|p
range|:
name|pts
control|)
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
name|reader
operator|=
name|writer
operator|.
name|getReader
argument_list|()
expr_stmt|;
name|searcher
operator|=
name|newSearcher
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|afterClass
specifier|public
specifier|static
name|void
name|afterClass
parameter_list|()
throws|throws
name|Exception
block|{
name|searcher
operator|=
literal|null
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|reader
operator|=
literal|null
expr_stmt|;
name|directory
operator|.
name|close
argument_list|()
expr_stmt|;
name|directory
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|bboxQuery
specifier|private
name|TopDocs
name|bboxQuery
parameter_list|(
name|double
name|minLon
parameter_list|,
name|double
name|minLat
parameter_list|,
name|double
name|maxLon
parameter_list|,
name|double
name|maxLat
parameter_list|,
name|int
name|limit
parameter_list|)
throws|throws
name|Exception
block|{
name|GeoPointInBBoxQuery
name|q
init|=
operator|new
name|GeoPointInBBoxQuery
argument_list|(
name|FIELD_NAME
argument_list|,
name|minLon
argument_list|,
name|minLat
argument_list|,
name|maxLon
argument_list|,
name|maxLat
argument_list|)
decl_stmt|;
return|return
name|searcher
operator|.
name|search
argument_list|(
name|q
argument_list|,
name|limit
argument_list|)
return|;
block|}
DECL|method|polygonQuery
specifier|private
name|TopDocs
name|polygonQuery
parameter_list|(
name|double
index|[]
name|lon
parameter_list|,
name|double
index|[]
name|lat
parameter_list|,
name|int
name|limit
parameter_list|)
throws|throws
name|Exception
block|{
name|GeoPointInPolygonQuery
name|q
init|=
operator|new
name|GeoPointInPolygonQuery
argument_list|(
name|FIELD_NAME
argument_list|,
name|lon
argument_list|,
name|lat
argument_list|)
decl_stmt|;
return|return
name|searcher
operator|.
name|search
argument_list|(
name|q
argument_list|,
name|limit
argument_list|)
return|;
block|}
DECL|method|geoDistanceQuery
specifier|private
name|TopDocs
name|geoDistanceQuery
parameter_list|(
name|double
name|lon
parameter_list|,
name|double
name|lat
parameter_list|,
name|double
name|radius
parameter_list|,
name|int
name|limit
parameter_list|)
throws|throws
name|Exception
block|{
name|GeoPointDistanceQuery
name|q
init|=
operator|new
name|GeoPointDistanceQuery
argument_list|(
name|FIELD_NAME
argument_list|,
name|lon
argument_list|,
name|lat
argument_list|,
name|radius
argument_list|)
decl_stmt|;
return|return
name|searcher
operator|.
name|search
argument_list|(
name|q
argument_list|,
name|limit
argument_list|)
return|;
block|}
annotation|@
name|Test
DECL|method|testBBoxQuery
specifier|public
name|void
name|testBBoxQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|TopDocs
name|td
init|=
name|bboxQuery
argument_list|(
operator|-
literal|96.7772
argument_list|,
literal|32.778650
argument_list|,
operator|-
literal|96.77690000
argument_list|,
literal|32.778950
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"GeoBoundingBoxQuery failed"
argument_list|,
literal|2
argument_list|,
name|td
operator|.
name|totalHits
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPolyQuery
specifier|public
name|void
name|testPolyQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|TopDocs
name|td
init|=
name|polygonQuery
argument_list|(
operator|new
name|double
index|[]
block|{
operator|-
literal|96.7682647
block|,
operator|-
literal|96.8280029
block|,
operator|-
literal|96.6288757
block|,
operator|-
literal|96.4929199
block|,
operator|-
literal|96.6041564
block|,
operator|-
literal|96.7449188
block|,
operator|-
literal|96.76826477
block|,
operator|-
literal|96.7682647
block|}
argument_list|,
operator|new
name|double
index|[]
block|{
literal|33.073130
block|,
literal|32.9942669
block|,
literal|32.938386
block|,
literal|33.0374494
block|,
literal|33.1369762
block|,
literal|33.1162747
block|,
literal|33.073130
block|,
literal|33.073130
block|}
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"GeoPolygonQuery failed"
argument_list|,
literal|1
argument_list|,
name|td
operator|.
name|totalHits
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPacManPolyQuery
specifier|public
name|void
name|testPacManPolyQuery
parameter_list|()
throws|throws
name|Exception
block|{
comment|// pacman
name|double
index|[]
name|px
init|=
block|{
literal|0
block|,
literal|10
block|,
literal|10
block|,
literal|0
block|,
operator|-
literal|8
block|,
operator|-
literal|10
block|,
operator|-
literal|8
block|,
literal|0
block|,
literal|10
block|,
literal|10
block|,
literal|0
block|}
decl_stmt|;
name|double
index|[]
name|py
init|=
block|{
literal|0
block|,
literal|5
block|,
literal|9
block|,
literal|10
block|,
literal|9
block|,
literal|0
block|,
operator|-
literal|9
block|,
operator|-
literal|10
block|,
operator|-
literal|9
block|,
operator|-
literal|5
block|,
literal|0
block|}
decl_stmt|;
comment|// shape bbox
name|double
name|xMinA
init|=
operator|-
literal|10
decl_stmt|;
name|double
name|xMaxA
init|=
literal|10
decl_stmt|;
name|double
name|yMinA
init|=
operator|-
literal|10
decl_stmt|;
name|double
name|yMaxA
init|=
literal|10
decl_stmt|;
comment|// candidate crosses cell
name|double
name|xMin
init|=
literal|2
decl_stmt|;
comment|//-5;
name|double
name|xMax
init|=
literal|11
decl_stmt|;
comment|//0.000001;
name|double
name|yMin
init|=
operator|-
literal|1
decl_stmt|;
comment|//0;
name|double
name|yMax
init|=
literal|1
decl_stmt|;
comment|//5;
comment|// test cell crossing poly
name|assertTrue
argument_list|(
name|GeoUtils
operator|.
name|rectCrossesPoly
argument_list|(
name|xMin
argument_list|,
name|yMin
argument_list|,
name|xMax
argument_list|,
name|yMax
argument_list|,
name|px
argument_list|,
name|py
argument_list|,
name|xMinA
argument_list|,
name|yMinA
argument_list|,
name|xMaxA
argument_list|,
name|yMaxA
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|GeoUtils
operator|.
name|rectCrossesPoly
argument_list|(
operator|-
literal|5
argument_list|,
literal|0
argument_list|,
literal|0.000001
argument_list|,
literal|5
argument_list|,
name|px
argument_list|,
name|py
argument_list|,
name|xMin
argument_list|,
name|yMin
argument_list|,
name|xMax
argument_list|,
name|yMax
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|GeoUtils
operator|.
name|rectWithinPoly
argument_list|(
operator|-
literal|5
argument_list|,
literal|0
argument_list|,
operator|-
literal|2
argument_list|,
literal|5
argument_list|,
name|px
argument_list|,
name|py
argument_list|,
name|xMin
argument_list|,
name|yMin
argument_list|,
name|xMax
argument_list|,
name|yMax
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBBoxCrossDateline
specifier|public
name|void
name|testBBoxCrossDateline
parameter_list|()
throws|throws
name|Exception
block|{
name|TopDocs
name|td
init|=
name|bboxQuery
argument_list|(
literal|179.0
argument_list|,
operator|-
literal|45.0
argument_list|,
operator|-
literal|179.0
argument_list|,
operator|-
literal|44.0
argument_list|,
literal|20
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"BBoxCrossDateline query failed"
argument_list|,
literal|1
argument_list|,
name|td
operator|.
name|totalHits
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testWholeMap
specifier|public
name|void
name|testWholeMap
parameter_list|()
throws|throws
name|Exception
block|{
name|TopDocs
name|td
init|=
name|bboxQuery
argument_list|(
operator|-
literal|179.9
argument_list|,
operator|-
literal|89.9
argument_list|,
literal|179.9
argument_list|,
literal|89.9
argument_list|,
literal|20
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"testWholeMap failed"
argument_list|,
literal|14
argument_list|,
name|td
operator|.
name|totalHits
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInvalidBBox
specifier|public
name|void
name|testInvalidBBox
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|bboxQuery
argument_list|(
literal|179.0
argument_list|,
operator|-
literal|92.0
argument_list|,
literal|181.0
argument_list|,
operator|-
literal|91.0
argument_list|,
literal|20
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return;
block|}
throw|throw
operator|new
name|Exception
argument_list|(
literal|"GeoBoundingBox should not accept invalid lat/lon"
argument_list|)
throw|;
block|}
annotation|@
name|Test
DECL|method|testGeoDistanceQuery
specifier|public
name|void
name|testGeoDistanceQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|TopDocs
name|td
init|=
name|geoDistanceQuery
argument_list|(
operator|-
literal|96.4538113027811
argument_list|,
literal|32.94823588839368
argument_list|,
literal|600000
argument_list|,
literal|20
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"GeoDistanceQuery failed"
argument_list|,
literal|6
argument_list|,
name|td
operator|.
name|totalHits
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGeoDistanceQueryCrossDateline
specifier|public
name|void
name|testGeoDistanceQueryCrossDateline
parameter_list|()
throws|throws
name|Exception
block|{
name|TopDocs
name|td
init|=
name|geoDistanceQuery
argument_list|(
operator|-
literal|179.9538113027811
argument_list|,
literal|32.94823588839368
argument_list|,
literal|120000
argument_list|,
literal|20
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"GeoDistanceQuery failed"
argument_list|,
literal|2
argument_list|,
name|td
operator|.
name|totalHits
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInvalidGeoDistanceQuery
specifier|public
name|void
name|testInvalidGeoDistanceQuery
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|geoDistanceQuery
argument_list|(
literal|181.0
argument_list|,
literal|92.0
argument_list|,
literal|120000
argument_list|,
literal|20
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return;
block|}
throw|throw
operator|new
name|Exception
argument_list|(
literal|"GeoDistanceQuery should not accept invalid lat/lon as origin"
argument_list|)
throw|;
block|}
DECL|method|testRandomTiny
specifier|public
name|void
name|testRandomTiny
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Make sure single-leaf-node case is OK:
name|doTestRandom
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
DECL|method|testRandom
specifier|public
name|void
name|testRandom
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestRandom
argument_list|(
literal|10000
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Nightly
DECL|method|testRandomBig
specifier|public
name|void
name|testRandomBig
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestRandom
argument_list|(
literal|200000
argument_list|)
expr_stmt|;
block|}
DECL|method|doTestRandom
specifier|private
name|void
name|doTestRandom
parameter_list|(
name|int
name|count
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|numPoints
init|=
name|atLeast
argument_list|(
name|count
argument_list|)
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TEST: numPoints="
operator|+
name|numPoints
argument_list|)
expr_stmt|;
block|}
name|double
index|[]
name|lats
init|=
operator|new
name|double
index|[
name|numPoints
index|]
decl_stmt|;
name|double
index|[]
name|lons
init|=
operator|new
name|double
index|[
name|numPoints
index|]
decl_stmt|;
name|boolean
name|haveRealDoc
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|docID
init|=
literal|0
init|;
name|docID
operator|<
name|numPoints
condition|;
name|docID
operator|++
control|)
block|{
name|int
name|x
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|20
argument_list|)
decl_stmt|;
if|if
condition|(
name|x
operator|==
literal|17
condition|)
block|{
comment|// Some docs don't have a point:
name|lats
index|[
name|docID
index|]
operator|=
name|Double
operator|.
name|NaN
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
comment|//System.out.println("  doc=" + docID + " is missing");
block|}
continue|continue;
block|}
if|if
condition|(
name|docID
operator|>
literal|0
operator|&&
name|x
operator|<
literal|3
operator|&&
name|haveRealDoc
condition|)
block|{
name|int
name|oldDocID
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|oldDocID
operator|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|docID
argument_list|)
expr_stmt|;
if|if
condition|(
name|Double
operator|.
name|isNaN
argument_list|(
name|lats
index|[
name|oldDocID
index|]
argument_list|)
operator|==
literal|false
condition|)
block|{
break|break;
block|}
block|}
if|if
condition|(
name|x
operator|==
literal|0
condition|)
block|{
comment|// Identical lat to old point
name|lats
index|[
name|docID
index|]
operator|=
name|lats
index|[
name|oldDocID
index|]
expr_stmt|;
name|lons
index|[
name|docID
index|]
operator|=
name|randomLon
argument_list|()
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
comment|//System.out.println("  doc=" + docID + " lat=" + lats[docID] + " lon=" + lons[docID] + " (same lat as doc=" + oldDocID + ")");
block|}
block|}
elseif|else
if|if
condition|(
name|x
operator|==
literal|1
condition|)
block|{
comment|// Identical lon to old point
name|lats
index|[
name|docID
index|]
operator|=
name|randomLat
argument_list|()
expr_stmt|;
name|lons
index|[
name|docID
index|]
operator|=
name|lons
index|[
name|oldDocID
index|]
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
comment|//System.out.println("  doc=" + docID + " lat=" + lats[docID] + " lon=" + lons[docID] + " (same lon as doc=" + oldDocID + ")");
block|}
block|}
else|else
block|{
assert|assert
name|x
operator|==
literal|2
assert|;
comment|// Fully identical point:
name|lats
index|[
name|docID
index|]
operator|=
name|lats
index|[
name|oldDocID
index|]
expr_stmt|;
name|lons
index|[
name|docID
index|]
operator|=
name|lons
index|[
name|oldDocID
index|]
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
comment|//System.out.println("  doc=" + docID + " lat=" + lats[docID] + " lon=" + lons[docID] + " (same lat/lon as doc=" + oldDocID + ")");
block|}
block|}
block|}
else|else
block|{
name|lats
index|[
name|docID
index|]
operator|=
name|randomLat
argument_list|()
expr_stmt|;
name|lons
index|[
name|docID
index|]
operator|=
name|randomLon
argument_list|()
expr_stmt|;
name|haveRealDoc
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
comment|//System.out.println("  doc=" + docID + " lat=" + lats[docID] + " lon=" + lons[docID]);
block|}
block|}
block|}
name|verify
argument_list|(
name|lats
argument_list|,
name|lons
argument_list|)
expr_stmt|;
block|}
DECL|method|verify
specifier|private
specifier|static
name|void
name|verify
parameter_list|(
name|double
index|[]
name|lats
parameter_list|,
name|double
index|[]
name|lons
parameter_list|)
throws|throws
name|Exception
block|{
name|IndexWriterConfig
name|iwc
init|=
name|newIndexWriterConfig
argument_list|()
decl_stmt|;
name|Directory
name|dir
decl_stmt|;
if|if
condition|(
name|lats
operator|.
name|length
operator|>
literal|100000
condition|)
block|{
name|dir
operator|=
name|newFSDirectory
argument_list|(
name|createTempDir
argument_list|(
literal|"TestGeoPointQuery"
argument_list|)
argument_list|)
expr_stmt|;
name|iwc
operator|.
name|setCodec
argument_list|(
name|TestUtil
operator|.
name|getDefaultCodec
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|dir
operator|=
name|newDirectory
argument_list|()
expr_stmt|;
block|}
name|Set
argument_list|<
name|Integer
argument_list|>
name|deleted
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
comment|// RandomIndexWriter is too slow here:
name|IndexWriter
name|w
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|iwc
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|id
init|=
literal|0
init|;
name|id
operator|<
name|lats
operator|.
name|length
condition|;
name|id
operator|++
control|)
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newStringField
argument_list|(
literal|"id"
argument_list|,
literal|""
operator|+
name|id
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|NumericDocValuesField
argument_list|(
literal|"id"
argument_list|,
name|id
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|Double
operator|.
name|isNaN
argument_list|(
name|lats
index|[
name|id
index|]
argument_list|)
operator|==
literal|false
condition|)
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  id="
operator|+
name|id
operator|+
literal|" lat="
operator|+
name|lats
index|[
name|id
index|]
operator|+
literal|" lon="
operator|+
name|lons
index|[
name|id
index|]
argument_list|)
expr_stmt|;
block|}
name|doc
operator|.
name|add
argument_list|(
operator|new
name|GeoPointField
argument_list|(
name|FIELD_NAME
argument_list|,
name|lons
index|[
name|id
index|]
argument_list|,
name|lats
index|[
name|id
index|]
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  id="
operator|+
name|id
operator|+
literal|" skipped"
argument_list|)
expr_stmt|;
block|}
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
if|if
condition|(
name|id
operator|>
literal|0
operator|&&
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
operator|==
literal|42
condition|)
block|{
name|int
name|idToDelete
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|w
operator|.
name|deleteDocuments
argument_list|(
operator|new
name|Term
argument_list|(
literal|"id"
argument_list|,
literal|""
operator|+
name|idToDelete
argument_list|)
argument_list|)
expr_stmt|;
name|deleted
operator|.
name|add
argument_list|(
name|idToDelete
argument_list|)
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  delete id="
operator|+
name|idToDelete
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|w
operator|.
name|forceMerge
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|IndexReader
name|r
init|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|w
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|IndexSearcher
name|s
init|=
name|newSearcher
argument_list|(
name|r
argument_list|)
decl_stmt|;
comment|// Make sure queries are thread safe:
name|int
name|numThreads
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|2
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Thread
argument_list|>
name|threads
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|int
name|iters
init|=
name|atLeast
argument_list|(
literal|10
argument_list|)
decl_stmt|;
specifier|final
name|CountDownLatch
name|startingGun
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numThreads
condition|;
name|i
operator|++
control|)
block|{
name|Thread
name|thread
init|=
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|_run
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|_run
parameter_list|()
throws|throws
name|Exception
block|{
name|startingGun
operator|.
name|await
argument_list|()
expr_stmt|;
name|NumericDocValues
name|docIDToID
init|=
name|MultiDocValues
operator|.
name|getNumericValues
argument_list|(
name|r
argument_list|,
literal|"id"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|iter
init|=
literal|0
init|;
name|iter
operator|<
name|iters
condition|;
name|iter
operator|++
control|)
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\nTEST: iter="
operator|+
name|iter
argument_list|)
expr_stmt|;
block|}
name|Query
name|query
decl_stmt|;
name|VerifyHits
name|verifyHits
decl_stmt|;
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|GeoBoundingBox
name|bbox
init|=
name|randomBBox
argument_list|()
decl_stmt|;
name|query
operator|=
operator|new
name|GeoPointInBBoxQuery
argument_list|(
name|FIELD_NAME
argument_list|,
name|bbox
operator|.
name|minLon
argument_list|,
name|bbox
operator|.
name|minLat
argument_list|,
name|bbox
operator|.
name|maxLon
argument_list|,
name|bbox
operator|.
name|maxLat
argument_list|)
expr_stmt|;
name|verifyHits
operator|=
operator|new
name|VerifyHits
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Boolean
name|shouldMatch
parameter_list|(
name|double
name|pointLat
parameter_list|,
name|double
name|pointLon
parameter_list|)
block|{
comment|// morton encode& decode to compare apples to apples (that is, compare with same hash precision error
comment|// present in the index)
name|long
name|pointHash
init|=
name|GeoUtils
operator|.
name|mortonHash
argument_list|(
name|pointLon
argument_list|,
name|pointLat
argument_list|)
decl_stmt|;
name|pointLon
operator|=
name|GeoUtils
operator|.
name|mortonUnhashLon
argument_list|(
name|pointHash
argument_list|)
expr_stmt|;
name|pointLat
operator|=
name|GeoUtils
operator|.
name|mortonUnhashLat
argument_list|(
name|pointHash
argument_list|)
expr_stmt|;
if|if
condition|(
name|bboxQueryCanBeWrong
argument_list|(
name|bbox
argument_list|,
name|pointLat
argument_list|,
name|pointLon
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
name|rectContainsPointEnc
argument_list|(
name|bbox
argument_list|,
name|pointLat
argument_list|,
name|pointLon
argument_list|)
return|;
block|}
block|}
block|}
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
comment|// generate a random bounding box
name|GeoBoundingBox
name|bbox
init|=
name|randomBBox
argument_list|()
decl_stmt|;
name|double
name|centerLat
init|=
name|bbox
operator|.
name|minLat
operator|+
operator|(
operator|(
name|bbox
operator|.
name|maxLat
operator|-
name|bbox
operator|.
name|minLat
operator|)
operator|/
literal|2.0
operator|)
decl_stmt|;
name|double
name|centerLon
init|=
name|bbox
operator|.
name|minLon
operator|+
operator|(
operator|(
name|bbox
operator|.
name|maxLon
operator|-
name|bbox
operator|.
name|minLon
operator|)
operator|/
literal|2.0
operator|)
decl_stmt|;
comment|// radius (in meters) as a function of the random generated bbox
comment|// TODO: change 100 back to 1000
specifier|final
name|double
name|radius
init|=
name|SloppyMath
operator|.
name|haversin
argument_list|(
name|centerLat
argument_list|,
name|centerLon
argument_list|,
name|bbox
operator|.
name|minLat
argument_list|,
name|centerLon
argument_list|)
operator|*
literal|100
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\t radius = "
operator|+
name|radius
argument_list|)
expr_stmt|;
block|}
comment|// query using the centroid of the bounding box
name|query
operator|=
operator|new
name|GeoPointDistanceQuery
argument_list|(
name|FIELD_NAME
argument_list|,
name|centerLon
argument_list|,
name|centerLat
argument_list|,
name|radius
argument_list|)
expr_stmt|;
name|verifyHits
operator|=
operator|new
name|VerifyHits
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Boolean
name|shouldMatch
parameter_list|(
name|double
name|pointLat
parameter_list|,
name|double
name|pointLon
parameter_list|)
block|{
if|if
condition|(
name|Double
operator|.
name|isNaN
argument_list|(
name|pointLat
argument_list|)
operator|||
name|Double
operator|.
name|isNaN
argument_list|(
name|pointLon
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|radiusQueryCanBeWrong
argument_list|(
name|centerLat
argument_list|,
name|centerLon
argument_list|,
name|pointLon
argument_list|,
name|pointLat
argument_list|,
name|radius
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
name|distanceContainsPt
argument_list|(
name|centerLon
argument_list|,
name|centerLat
argument_list|,
name|pointLon
argument_list|,
name|pointLat
argument_list|,
name|radius
argument_list|)
return|;
block|}
block|}
block|}
expr_stmt|;
block|}
else|else
block|{
name|GeoBoundingBox
name|bbox
init|=
name|randomBBox
argument_list|()
decl_stmt|;
name|double
index|[]
name|pLats
init|=
operator|new
name|double
index|[
literal|5
index|]
decl_stmt|;
name|double
index|[]
name|pLons
init|=
operator|new
name|double
index|[
literal|5
index|]
decl_stmt|;
name|pLats
index|[
literal|0
index|]
operator|=
name|bbox
operator|.
name|minLat
expr_stmt|;
name|pLons
index|[
literal|0
index|]
operator|=
name|bbox
operator|.
name|minLon
expr_stmt|;
name|pLats
index|[
literal|1
index|]
operator|=
name|bbox
operator|.
name|maxLat
expr_stmt|;
name|pLons
index|[
literal|1
index|]
operator|=
name|bbox
operator|.
name|minLon
expr_stmt|;
name|pLats
index|[
literal|2
index|]
operator|=
name|bbox
operator|.
name|maxLat
expr_stmt|;
name|pLons
index|[
literal|2
index|]
operator|=
name|bbox
operator|.
name|maxLon
expr_stmt|;
name|pLats
index|[
literal|3
index|]
operator|=
name|bbox
operator|.
name|minLat
expr_stmt|;
name|pLons
index|[
literal|3
index|]
operator|=
name|bbox
operator|.
name|maxLon
expr_stmt|;
name|pLats
index|[
literal|4
index|]
operator|=
name|bbox
operator|.
name|minLat
expr_stmt|;
name|pLons
index|[
literal|4
index|]
operator|=
name|bbox
operator|.
name|minLon
expr_stmt|;
name|query
operator|=
operator|new
name|GeoPointInPolygonQuery
argument_list|(
name|FIELD_NAME
argument_list|,
name|pLons
argument_list|,
name|pLats
argument_list|)
expr_stmt|;
name|verifyHits
operator|=
operator|new
name|VerifyHits
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Boolean
name|shouldMatch
parameter_list|(
name|double
name|pointLat
parameter_list|,
name|double
name|pointLon
parameter_list|)
block|{
comment|// morton encode& decode to compare apples to apples (that is, compare with same hash precision error
comment|// present in the index)
name|long
name|pointHash
init|=
name|GeoUtils
operator|.
name|mortonHash
argument_list|(
name|pointLon
argument_list|,
name|pointLat
argument_list|)
decl_stmt|;
name|pointLon
operator|=
name|GeoUtils
operator|.
name|mortonUnhashLon
argument_list|(
name|pointHash
argument_list|)
expr_stmt|;
name|pointLat
operator|=
name|GeoUtils
operator|.
name|mortonUnhashLat
argument_list|(
name|pointHash
argument_list|)
expr_stmt|;
if|if
condition|(
name|bboxQueryCanBeWrong
argument_list|(
name|bbox
argument_list|,
name|pointLat
argument_list|,
name|pointLon
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
name|rectContainsPointEnc
argument_list|(
name|bbox
argument_list|,
name|pointLat
argument_list|,
name|pointLon
argument_list|)
return|;
block|}
block|}
block|}
expr_stmt|;
block|}
name|verifyHits
operator|.
name|test
argument_list|(
name|s
argument_list|,
name|docIDToID
argument_list|,
name|deleted
argument_list|,
name|query
argument_list|,
name|lats
argument_list|,
name|lons
argument_list|)
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|thread
operator|.
name|setName
argument_list|(
literal|"T"
operator|+
name|i
argument_list|)
expr_stmt|;
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
name|threads
operator|.
name|add
argument_list|(
name|thread
argument_list|)
expr_stmt|;
block|}
name|startingGun
operator|.
name|countDown
argument_list|()
expr_stmt|;
for|for
control|(
name|Thread
name|thread
range|:
name|threads
control|)
block|{
name|thread
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
name|IOUtils
operator|.
name|close
argument_list|(
name|r
argument_list|,
name|dir
argument_list|)
expr_stmt|;
block|}
DECL|class|VerifyHits
specifier|private
specifier|static
specifier|abstract
class|class
name|VerifyHits
block|{
DECL|method|test
specifier|public
name|void
name|test
parameter_list|(
name|IndexSearcher
name|s
parameter_list|,
name|NumericDocValues
name|docIDToID
parameter_list|,
name|Set
argument_list|<
name|Integer
argument_list|>
name|deleted
parameter_list|,
name|Query
name|query
parameter_list|,
name|double
index|[]
name|lats
parameter_list|,
name|double
index|[]
name|lons
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|maxDoc
init|=
name|s
operator|.
name|getIndexReader
argument_list|()
operator|.
name|maxDoc
argument_list|()
decl_stmt|;
specifier|final
name|FixedBitSet
name|hits
init|=
operator|new
name|FixedBitSet
argument_list|(
name|maxDoc
argument_list|)
decl_stmt|;
name|s
operator|.
name|search
argument_list|(
name|query
argument_list|,
operator|new
name|SimpleCollector
argument_list|()
block|{
specifier|private
name|int
name|docBase
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|needsScores
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|doSetNextReader
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|docBase
operator|=
name|context
operator|.
name|docBase
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|collect
parameter_list|(
name|int
name|doc
parameter_list|)
block|{
name|hits
operator|.
name|set
argument_list|(
name|docBase
operator|+
name|doc
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|docID
init|=
literal|0
init|;
name|docID
operator|<
name|maxDoc
condition|;
name|docID
operator|++
control|)
block|{
name|int
name|id
init|=
operator|(
name|int
operator|)
name|docIDToID
operator|.
name|get
argument_list|(
name|docID
argument_list|)
decl_stmt|;
name|Boolean
name|expected
decl_stmt|;
if|if
condition|(
name|deleted
operator|.
name|contains
argument_list|(
name|id
argument_list|)
condition|)
block|{
name|expected
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|expected
operator|=
name|shouldMatch
argument_list|(
name|lats
index|[
name|id
index|]
argument_list|,
name|lons
index|[
name|id
index|]
argument_list|)
expr_stmt|;
block|}
comment|// null means it's a borderline case which is allowed to be wrong:
if|if
condition|(
name|expected
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|hits
operator|.
name|get
argument_list|(
name|docID
argument_list|)
operator|!=
name|expected
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|": id="
operator|+
name|id
operator|+
literal|" docID="
operator|+
name|docID
operator|+
literal|" lat="
operator|+
name|lats
index|[
name|id
index|]
operator|+
literal|" lon="
operator|+
name|lons
index|[
name|id
index|]
operator|+
literal|" deleted?="
operator|+
name|deleted
operator|.
name|contains
argument_list|(
name|id
argument_list|)
operator|+
literal|" expected="
operator|+
name|expected
operator|+
literal|" but got "
operator|+
name|hits
operator|.
name|get
argument_list|(
name|docID
argument_list|)
operator|+
literal|" query="
operator|+
name|query
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"wrong hit"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/** Return true if we definitely should match, false if we definitely      *  should not match, and null if it's a borderline case which might      *  go either way. */
DECL|method|shouldMatch
specifier|protected
specifier|abstract
name|Boolean
name|shouldMatch
parameter_list|(
name|double
name|lat
parameter_list|,
name|double
name|lon
parameter_list|)
function_decl|;
block|}
DECL|method|distanceContainsPt
specifier|private
specifier|static
name|boolean
name|distanceContainsPt
parameter_list|(
name|double
name|lonA
parameter_list|,
name|double
name|latA
parameter_list|,
name|double
name|lonB
parameter_list|,
name|double
name|latB
parameter_list|,
specifier|final
name|double
name|radius
parameter_list|)
block|{
specifier|final
name|long
name|hashedPtA
init|=
name|GeoUtils
operator|.
name|mortonHash
argument_list|(
name|lonA
argument_list|,
name|latA
argument_list|)
decl_stmt|;
name|lonA
operator|=
name|GeoUtils
operator|.
name|mortonUnhashLon
argument_list|(
name|hashedPtA
argument_list|)
expr_stmt|;
name|latA
operator|=
name|GeoUtils
operator|.
name|mortonUnhashLat
argument_list|(
name|hashedPtA
argument_list|)
expr_stmt|;
specifier|final
name|long
name|hashedPtB
init|=
name|GeoUtils
operator|.
name|mortonHash
argument_list|(
name|lonB
argument_list|,
name|latB
argument_list|)
decl_stmt|;
name|lonB
operator|=
name|GeoUtils
operator|.
name|mortonUnhashLon
argument_list|(
name|hashedPtB
argument_list|)
expr_stmt|;
name|latB
operator|=
name|GeoUtils
operator|.
name|mortonUnhashLat
argument_list|(
name|hashedPtB
argument_list|)
expr_stmt|;
return|return
operator|(
name|SloppyMath
operator|.
name|haversin
argument_list|(
name|latA
argument_list|,
name|lonA
argument_list|,
name|latB
argument_list|,
name|lonB
argument_list|)
operator|*
literal|1000.0
operator|<=
name|radius
operator|)
return|;
block|}
DECL|method|rectContainsPointEnc
specifier|private
specifier|static
name|boolean
name|rectContainsPointEnc
parameter_list|(
name|GeoBoundingBox
name|bbox
parameter_list|,
name|double
name|pointLat
parameter_list|,
name|double
name|pointLon
parameter_list|)
block|{
comment|// We should never see a deleted doc here?
assert|assert
name|Double
operator|.
name|isNaN
argument_list|(
name|pointLat
argument_list|)
operator|==
literal|false
assert|;
return|return
name|GeoUtils
operator|.
name|bboxContains
argument_list|(
name|pointLon
argument_list|,
name|pointLat
argument_list|,
name|bbox
operator|.
name|minLon
argument_list|,
name|bbox
operator|.
name|minLat
argument_list|,
name|bbox
operator|.
name|maxLon
argument_list|,
name|bbox
operator|.
name|maxLat
argument_list|)
return|;
block|}
DECL|method|radiusQueryCanBeWrong
specifier|private
specifier|static
name|boolean
name|radiusQueryCanBeWrong
parameter_list|(
name|double
name|centerLat
parameter_list|,
name|double
name|centerLon
parameter_list|,
name|double
name|ptLon
parameter_list|,
name|double
name|ptLat
parameter_list|,
specifier|final
name|double
name|radius
parameter_list|)
block|{
specifier|final
name|long
name|hashedCntr
init|=
name|GeoUtils
operator|.
name|mortonHash
argument_list|(
name|centerLon
argument_list|,
name|centerLat
argument_list|)
decl_stmt|;
name|centerLon
operator|=
name|GeoUtils
operator|.
name|mortonUnhashLon
argument_list|(
name|hashedCntr
argument_list|)
expr_stmt|;
name|centerLat
operator|=
name|GeoUtils
operator|.
name|mortonUnhashLat
argument_list|(
name|hashedCntr
argument_list|)
expr_stmt|;
specifier|final
name|long
name|hashedPt
init|=
name|GeoUtils
operator|.
name|mortonHash
argument_list|(
name|ptLon
argument_list|,
name|ptLat
argument_list|)
decl_stmt|;
name|ptLon
operator|=
name|GeoUtils
operator|.
name|mortonUnhashLon
argument_list|(
name|hashedPt
argument_list|)
expr_stmt|;
name|ptLat
operator|=
name|GeoUtils
operator|.
name|mortonUnhashLat
argument_list|(
name|hashedPt
argument_list|)
expr_stmt|;
name|double
name|ptDistance
init|=
name|SloppyMath
operator|.
name|haversin
argument_list|(
name|centerLat
argument_list|,
name|centerLon
argument_list|,
name|ptLat
argument_list|,
name|ptLon
argument_list|)
operator|*
literal|1000.0
decl_stmt|;
name|double
name|delta
init|=
name|StrictMath
operator|.
name|abs
argument_list|(
name|ptDistance
operator|-
name|radius
argument_list|)
decl_stmt|;
comment|// if its within the distance error then it can be wrong
return|return
name|delta
operator|<
name|DISTANCE_ERR
return|;
block|}
DECL|method|bboxQueryCanBeWrong
specifier|private
specifier|static
name|boolean
name|bboxQueryCanBeWrong
parameter_list|(
name|GeoBoundingBox
name|bbox
parameter_list|,
name|double
name|lat
parameter_list|,
name|double
name|lon
parameter_list|)
block|{
comment|// we can tolerate variance at the GeoUtils.TOLERANCE decimal place
specifier|final
name|int
name|tLon
init|=
call|(
name|int
call|)
argument_list|(
name|lon
operator|/
operator|(
name|GeoUtils
operator|.
name|TOLERANCE
operator|-
literal|1
operator|)
argument_list|)
decl_stmt|;
specifier|final
name|int
name|tLat
init|=
call|(
name|int
call|)
argument_list|(
name|lat
operator|/
operator|(
name|GeoUtils
operator|.
name|TOLERANCE
operator|-
literal|1
operator|)
argument_list|)
decl_stmt|;
specifier|final
name|int
name|tMinLon
init|=
call|(
name|int
call|)
argument_list|(
name|bbox
operator|.
name|minLon
operator|/
operator|(
name|GeoUtils
operator|.
name|TOLERANCE
operator|-
literal|1
operator|)
argument_list|)
decl_stmt|;
specifier|final
name|int
name|tMinLat
init|=
call|(
name|int
call|)
argument_list|(
name|bbox
operator|.
name|minLat
operator|/
operator|(
name|GeoUtils
operator|.
name|TOLERANCE
operator|-
literal|1
operator|)
argument_list|)
decl_stmt|;
specifier|final
name|int
name|tMaxLon
init|=
call|(
name|int
call|)
argument_list|(
name|bbox
operator|.
name|maxLon
operator|/
operator|(
name|GeoUtils
operator|.
name|TOLERANCE
operator|-
literal|1
operator|)
argument_list|)
decl_stmt|;
specifier|final
name|int
name|tMaxLat
init|=
call|(
name|int
call|)
argument_list|(
name|bbox
operator|.
name|maxLat
operator|/
operator|(
name|GeoUtils
operator|.
name|TOLERANCE
operator|-
literal|1
operator|)
argument_list|)
decl_stmt|;
return|return
operator|(
operator|(
name|tMinLon
operator|-
name|tLon
operator|)
operator|==
literal|0
operator|||
operator|(
name|tMinLat
operator|-
name|tLat
operator|)
operator|==
literal|0
operator|||
operator|(
name|tMaxLon
operator|-
name|tLon
operator|)
operator|==
literal|0
operator|||
operator|(
name|tMaxLat
operator|-
name|tLat
operator|)
operator|==
literal|0
operator|)
return|;
block|}
DECL|method|randomLat
specifier|private
specifier|static
name|double
name|randomLat
parameter_list|()
block|{
return|return
name|GeoUtils
operator|.
name|normalizeLat
argument_list|(
name|originLat
operator|+
name|latRange
operator|*
operator|(
name|random
argument_list|()
operator|.
name|nextDouble
argument_list|()
operator|-
literal|0.5
operator|)
argument_list|)
return|;
block|}
DECL|method|randomLon
specifier|private
specifier|static
name|double
name|randomLon
parameter_list|()
block|{
return|return
name|GeoUtils
operator|.
name|normalizeLon
argument_list|(
name|originLon
operator|+
name|lonRange
operator|*
operator|(
name|random
argument_list|()
operator|.
name|nextDouble
argument_list|()
operator|-
literal|0.5
operator|)
argument_list|)
return|;
block|}
DECL|method|randomBBox
specifier|private
specifier|static
name|GeoBoundingBox
name|randomBBox
parameter_list|()
block|{
name|double
name|lat0
init|=
name|randomLat
argument_list|()
decl_stmt|;
name|double
name|lat1
init|=
name|randomLat
argument_list|()
decl_stmt|;
name|double
name|lon0
init|=
name|randomLon
argument_list|()
decl_stmt|;
name|double
name|lon1
init|=
name|randomLon
argument_list|()
decl_stmt|;
if|if
condition|(
name|lat1
operator|<
name|lat0
condition|)
block|{
name|double
name|x
init|=
name|lat0
decl_stmt|;
name|lat0
operator|=
name|lat1
expr_stmt|;
name|lat1
operator|=
name|x
expr_stmt|;
block|}
if|if
condition|(
name|lon1
operator|<
name|lon0
condition|)
block|{
name|double
name|x
init|=
name|lon0
decl_stmt|;
name|lon0
operator|=
name|lon1
expr_stmt|;
name|lon1
operator|=
name|x
expr_stmt|;
block|}
return|return
operator|new
name|GeoBoundingBox
argument_list|(
name|lon0
argument_list|,
name|lon1
argument_list|,
name|lat0
argument_list|,
name|lat1
argument_list|)
return|;
block|}
block|}
end_class
end_unit
