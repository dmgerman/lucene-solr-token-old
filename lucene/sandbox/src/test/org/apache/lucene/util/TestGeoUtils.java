begin_unit
begin_package
DECL|package|org.apache.lucene.util
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import
begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|generators
operator|.
name|RandomInts
import|;
end_import
begin_comment
comment|/**  * Tests class for methods in GeoUtils  *  * @lucene.experimental  */
end_comment
begin_class
DECL|class|TestGeoUtils
specifier|public
class|class
name|TestGeoUtils
extends|extends
name|LuceneTestCase
block|{
DECL|field|LON_SCALE
specifier|private
specifier|static
specifier|final
name|double
name|LON_SCALE
init|=
operator|(
literal|0x1L
operator|<<
name|GeoUtils
operator|.
name|BITS
operator|)
operator|/
literal|360.0D
decl_stmt|;
DECL|field|LAT_SCALE
specifier|private
specifier|static
specifier|final
name|double
name|LAT_SCALE
init|=
operator|(
literal|0x1L
operator|<<
name|GeoUtils
operator|.
name|BITS
operator|)
operator|/
literal|180.0D
decl_stmt|;
comment|// Global bounding box we will "cover" in the random test; we have to make this "smallish" else the queries take very long:
DECL|field|originLat
specifier|private
specifier|static
name|double
name|originLat
decl_stmt|;
DECL|field|originLon
specifier|private
specifier|static
name|double
name|originLon
decl_stmt|;
comment|//  private static double range;
DECL|field|lonRange
specifier|private
specifier|static
name|double
name|lonRange
decl_stmt|;
DECL|field|latRange
specifier|private
specifier|static
name|double
name|latRange
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|beforeClass
specifier|public
specifier|static
name|void
name|beforeClass
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Between 1.0 and 3.0:
name|lonRange
operator|=
literal|2
operator|*
operator|(
name|random
argument_list|()
operator|.
name|nextDouble
argument_list|()
operator|+
literal|0.5
operator|)
expr_stmt|;
name|latRange
operator|=
literal|2
operator|*
operator|(
name|random
argument_list|()
operator|.
name|nextDouble
argument_list|()
operator|+
literal|0.5
operator|)
expr_stmt|;
name|originLon
operator|=
name|GeoUtils
operator|.
name|MIN_LON_INCL
operator|+
name|lonRange
operator|+
operator|(
name|GeoUtils
operator|.
name|MAX_LON_INCL
operator|-
name|GeoUtils
operator|.
name|MIN_LON_INCL
operator|-
literal|2
operator|*
name|lonRange
operator|)
operator|*
name|random
argument_list|()
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
name|originLon
operator|=
name|GeoUtils
operator|.
name|normalizeLon
argument_list|(
name|originLon
argument_list|)
expr_stmt|;
name|originLat
operator|=
name|GeoUtils
operator|.
name|MIN_LAT_INCL
operator|+
name|latRange
operator|+
operator|(
name|GeoUtils
operator|.
name|MAX_LAT_INCL
operator|-
name|GeoUtils
operator|.
name|MIN_LAT_INCL
operator|-
literal|2
operator|*
name|latRange
operator|)
operator|*
name|random
argument_list|()
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
name|originLat
operator|=
name|GeoUtils
operator|.
name|normalizeLat
argument_list|(
name|originLat
argument_list|)
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TEST: originLon="
operator|+
name|originLon
operator|+
literal|" lonRange= "
operator|+
name|lonRange
operator|+
literal|" originLat="
operator|+
name|originLat
operator|+
literal|" latRange="
operator|+
name|latRange
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testGeoHash
specifier|public
name|void
name|testGeoHash
parameter_list|()
block|{
name|int
name|numPoints
init|=
name|atLeast
argument_list|(
literal|100
argument_list|)
decl_stmt|;
name|String
name|randomGeoHashString
decl_stmt|;
name|String
name|mortonGeoHash
decl_stmt|;
name|long
name|mortonLongFromGHLong
decl_stmt|,
name|geoHashLong
decl_stmt|,
name|mortonLongFromGHString
decl_stmt|;
name|int
name|randomLevel
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numPoints
condition|;
operator|++
name|i
control|)
block|{
comment|// random point
name|double
name|lat
init|=
name|randomLat
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|double
name|lon
init|=
name|randomLon
argument_list|(
literal|false
argument_list|)
decl_stmt|;
comment|// compute geohash straight from lat/lon and from morton encoded value to ensure they're the same
name|randomGeoHashString
operator|=
name|GeoHashUtils
operator|.
name|stringEncode
argument_list|(
name|lon
argument_list|,
name|lat
argument_list|,
name|randomLevel
operator|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|12
operator|-
literal|1
argument_list|)
operator|+
literal|1
argument_list|)
expr_stmt|;
name|mortonGeoHash
operator|=
name|GeoHashUtils
operator|.
name|stringEncodeFromMortonLong
argument_list|(
name|GeoUtils
operator|.
name|mortonHash
argument_list|(
name|lon
argument_list|,
name|lat
argument_list|)
argument_list|,
name|randomLevel
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|randomGeoHashString
argument_list|,
name|mortonGeoHash
argument_list|)
expr_stmt|;
comment|// v&v conversion from lat/lon or geohashstring to geohash long and back to geohash string
name|geoHashLong
operator|=
operator|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
operator|)
condition|?
name|GeoHashUtils
operator|.
name|longEncode
argument_list|(
name|lon
argument_list|,
name|lat
argument_list|,
name|randomLevel
argument_list|)
else|:
name|GeoHashUtils
operator|.
name|longEncode
argument_list|(
name|randomGeoHashString
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|randomGeoHashString
argument_list|,
name|GeoHashUtils
operator|.
name|stringEncode
argument_list|(
name|geoHashLong
argument_list|)
argument_list|)
expr_stmt|;
comment|// v&v conversion from geohash long to morton long
name|mortonLongFromGHString
operator|=
name|GeoHashUtils
operator|.
name|mortonEncode
argument_list|(
name|randomGeoHashString
argument_list|)
expr_stmt|;
name|mortonLongFromGHLong
operator|=
name|GeoHashUtils
operator|.
name|mortonEncode
argument_list|(
name|geoHashLong
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|mortonLongFromGHLong
argument_list|,
name|mortonLongFromGHString
argument_list|)
expr_stmt|;
comment|// v&v lat/lon from geohash string and geohash long
name|assertEquals
argument_list|(
name|GeoUtils
operator|.
name|mortonUnhashLat
argument_list|(
name|mortonLongFromGHString
argument_list|)
argument_list|,
name|GeoUtils
operator|.
name|mortonUnhashLat
argument_list|(
name|mortonLongFromGHLong
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|GeoUtils
operator|.
name|mortonUnhashLon
argument_list|(
name|mortonLongFromGHString
argument_list|)
argument_list|,
name|GeoUtils
operator|.
name|mortonUnhashLon
argument_list|(
name|mortonLongFromGHLong
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Pass condition: lat=42.6, lng=-5.6 should be encoded as "ezs42e44yx96",    * lat=57.64911 lng=10.40744 should be encoded as "u4pruydqqvj8"    */
DECL|method|testEncode
specifier|public
name|void
name|testEncode
parameter_list|()
block|{
name|String
name|hash
init|=
name|GeoHashUtils
operator|.
name|stringEncode
argument_list|(
operator|-
literal|5.6
argument_list|,
literal|42.6
argument_list|,
literal|12
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"ezs42e44yx96"
argument_list|,
name|hash
argument_list|)
expr_stmt|;
name|hash
operator|=
name|GeoHashUtils
operator|.
name|stringEncode
argument_list|(
literal|10.40744
argument_list|,
literal|57.64911
argument_list|,
literal|12
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"u4pruydqqvj8"
argument_list|,
name|hash
argument_list|)
expr_stmt|;
block|}
comment|/**    * Pass condition: lat=52.3738007, lng=4.8909347 should be encoded and then    * decoded within 0.00001 of the original value    */
DECL|method|testDecodePreciseLongitudeLatitude
specifier|public
name|void
name|testDecodePreciseLongitudeLatitude
parameter_list|()
block|{
specifier|final
name|String
name|geohash
init|=
name|GeoHashUtils
operator|.
name|stringEncode
argument_list|(
literal|4.8909347
argument_list|,
literal|52.3738007
argument_list|)
decl_stmt|;
specifier|final
name|long
name|hash
init|=
name|GeoHashUtils
operator|.
name|mortonEncode
argument_list|(
name|geohash
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|52.3738007
argument_list|,
name|GeoUtils
operator|.
name|mortonUnhashLat
argument_list|(
name|hash
argument_list|)
argument_list|,
literal|0.00001D
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4.8909347
argument_list|,
name|GeoUtils
operator|.
name|mortonUnhashLon
argument_list|(
name|hash
argument_list|)
argument_list|,
literal|0.00001D
argument_list|)
expr_stmt|;
block|}
comment|/**    * Pass condition: lat=84.6, lng=10.5 should be encoded and then decoded    * within 0.00001 of the original value    */
DECL|method|testDecodeImpreciseLongitudeLatitude
specifier|public
name|void
name|testDecodeImpreciseLongitudeLatitude
parameter_list|()
block|{
specifier|final
name|String
name|geohash
init|=
name|GeoHashUtils
operator|.
name|stringEncode
argument_list|(
literal|10.5
argument_list|,
literal|84.6
argument_list|)
decl_stmt|;
specifier|final
name|long
name|hash
init|=
name|GeoHashUtils
operator|.
name|mortonEncode
argument_list|(
name|geohash
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|84.6
argument_list|,
name|GeoUtils
operator|.
name|mortonUnhashLat
argument_list|(
name|hash
argument_list|)
argument_list|,
literal|0.00001D
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10.5
argument_list|,
name|GeoUtils
operator|.
name|mortonUnhashLon
argument_list|(
name|hash
argument_list|)
argument_list|,
literal|0.00001D
argument_list|)
expr_stmt|;
block|}
DECL|method|testDecodeEncode
specifier|public
name|void
name|testDecodeEncode
parameter_list|()
block|{
specifier|final
name|String
name|geoHash
init|=
literal|"u173zq37x014"
decl_stmt|;
name|assertEquals
argument_list|(
name|geoHash
argument_list|,
name|GeoHashUtils
operator|.
name|stringEncode
argument_list|(
literal|4.8909347
argument_list|,
literal|52.3738007
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|long
name|mortonHash
init|=
name|GeoHashUtils
operator|.
name|mortonEncode
argument_list|(
name|geoHash
argument_list|)
decl_stmt|;
specifier|final
name|double
name|lon
init|=
name|GeoUtils
operator|.
name|mortonUnhashLon
argument_list|(
name|mortonHash
argument_list|)
decl_stmt|;
specifier|final
name|double
name|lat
init|=
name|GeoUtils
operator|.
name|mortonUnhashLat
argument_list|(
name|mortonHash
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|52.37380061d
argument_list|,
name|GeoUtils
operator|.
name|mortonUnhashLat
argument_list|(
name|mortonHash
argument_list|)
argument_list|,
literal|0.000001d
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4.8909343d
argument_list|,
name|GeoUtils
operator|.
name|mortonUnhashLon
argument_list|(
name|mortonHash
argument_list|)
argument_list|,
literal|0.000001d
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|geoHash
argument_list|,
name|GeoHashUtils
operator|.
name|stringEncode
argument_list|(
name|lon
argument_list|,
name|lat
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testNeighbors
specifier|public
name|void
name|testNeighbors
parameter_list|()
block|{
name|String
name|geohash
init|=
literal|"gcpv"
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|expectedNeighbors
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|expectedNeighbors
operator|.
name|add
argument_list|(
literal|"gcpw"
argument_list|)
expr_stmt|;
name|expectedNeighbors
operator|.
name|add
argument_list|(
literal|"gcpy"
argument_list|)
expr_stmt|;
name|expectedNeighbors
operator|.
name|add
argument_list|(
literal|"u10n"
argument_list|)
expr_stmt|;
name|expectedNeighbors
operator|.
name|add
argument_list|(
literal|"gcpt"
argument_list|)
expr_stmt|;
name|expectedNeighbors
operator|.
name|add
argument_list|(
literal|"u10j"
argument_list|)
expr_stmt|;
name|expectedNeighbors
operator|.
name|add
argument_list|(
literal|"gcps"
argument_list|)
expr_stmt|;
name|expectedNeighbors
operator|.
name|add
argument_list|(
literal|"gcpu"
argument_list|)
expr_stmt|;
name|expectedNeighbors
operator|.
name|add
argument_list|(
literal|"u10h"
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|?
super|super
name|String
argument_list|>
name|neighbors
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|GeoHashUtils
operator|.
name|addNeighbors
argument_list|(
name|geohash
argument_list|,
name|neighbors
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedNeighbors
argument_list|,
name|neighbors
argument_list|)
expr_stmt|;
comment|// Border odd geohash
name|geohash
operator|=
literal|"u09x"
expr_stmt|;
name|expectedNeighbors
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|expectedNeighbors
operator|.
name|add
argument_list|(
literal|"u0c2"
argument_list|)
expr_stmt|;
name|expectedNeighbors
operator|.
name|add
argument_list|(
literal|"u0c8"
argument_list|)
expr_stmt|;
name|expectedNeighbors
operator|.
name|add
argument_list|(
literal|"u0cb"
argument_list|)
expr_stmt|;
name|expectedNeighbors
operator|.
name|add
argument_list|(
literal|"u09r"
argument_list|)
expr_stmt|;
name|expectedNeighbors
operator|.
name|add
argument_list|(
literal|"u09z"
argument_list|)
expr_stmt|;
name|expectedNeighbors
operator|.
name|add
argument_list|(
literal|"u09q"
argument_list|)
expr_stmt|;
name|expectedNeighbors
operator|.
name|add
argument_list|(
literal|"u09w"
argument_list|)
expr_stmt|;
name|expectedNeighbors
operator|.
name|add
argument_list|(
literal|"u09y"
argument_list|)
expr_stmt|;
name|neighbors
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|GeoHashUtils
operator|.
name|addNeighbors
argument_list|(
name|geohash
argument_list|,
name|neighbors
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedNeighbors
argument_list|,
name|neighbors
argument_list|)
expr_stmt|;
comment|// Border even geohash
name|geohash
operator|=
literal|"u09tv"
expr_stmt|;
name|expectedNeighbors
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|expectedNeighbors
operator|.
name|add
argument_list|(
literal|"u09wh"
argument_list|)
expr_stmt|;
name|expectedNeighbors
operator|.
name|add
argument_list|(
literal|"u09wj"
argument_list|)
expr_stmt|;
name|expectedNeighbors
operator|.
name|add
argument_list|(
literal|"u09wn"
argument_list|)
expr_stmt|;
name|expectedNeighbors
operator|.
name|add
argument_list|(
literal|"u09tu"
argument_list|)
expr_stmt|;
name|expectedNeighbors
operator|.
name|add
argument_list|(
literal|"u09ty"
argument_list|)
expr_stmt|;
name|expectedNeighbors
operator|.
name|add
argument_list|(
literal|"u09ts"
argument_list|)
expr_stmt|;
name|expectedNeighbors
operator|.
name|add
argument_list|(
literal|"u09tt"
argument_list|)
expr_stmt|;
name|expectedNeighbors
operator|.
name|add
argument_list|(
literal|"u09tw"
argument_list|)
expr_stmt|;
name|neighbors
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|GeoHashUtils
operator|.
name|addNeighbors
argument_list|(
name|geohash
argument_list|,
name|neighbors
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedNeighbors
argument_list|,
name|neighbors
argument_list|)
expr_stmt|;
comment|// Border even and odd geohash
name|geohash
operator|=
literal|"ezzzz"
expr_stmt|;
name|expectedNeighbors
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|expectedNeighbors
operator|.
name|add
argument_list|(
literal|"gbpbn"
argument_list|)
expr_stmt|;
name|expectedNeighbors
operator|.
name|add
argument_list|(
literal|"gbpbp"
argument_list|)
expr_stmt|;
name|expectedNeighbors
operator|.
name|add
argument_list|(
literal|"u0000"
argument_list|)
expr_stmt|;
name|expectedNeighbors
operator|.
name|add
argument_list|(
literal|"ezzzy"
argument_list|)
expr_stmt|;
name|expectedNeighbors
operator|.
name|add
argument_list|(
literal|"spbpb"
argument_list|)
expr_stmt|;
name|expectedNeighbors
operator|.
name|add
argument_list|(
literal|"ezzzw"
argument_list|)
expr_stmt|;
name|expectedNeighbors
operator|.
name|add
argument_list|(
literal|"ezzzx"
argument_list|)
expr_stmt|;
name|expectedNeighbors
operator|.
name|add
argument_list|(
literal|"spbp8"
argument_list|)
expr_stmt|;
name|neighbors
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|GeoHashUtils
operator|.
name|addNeighbors
argument_list|(
name|geohash
argument_list|,
name|neighbors
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedNeighbors
argument_list|,
name|neighbors
argument_list|)
expr_stmt|;
block|}
DECL|method|testClosestPointOnBBox
specifier|public
name|void
name|testClosestPointOnBBox
parameter_list|()
block|{
name|double
index|[]
name|result
init|=
operator|new
name|double
index|[
literal|2
index|]
decl_stmt|;
name|GeoDistanceUtils
operator|.
name|closestPointOnBBox
argument_list|(
literal|20
argument_list|,
literal|30
argument_list|,
literal|40
argument_list|,
literal|50
argument_list|,
literal|70
argument_list|,
literal|70
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|40.0
argument_list|,
name|result
index|[
literal|0
index|]
argument_list|,
literal|0.0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|50.0
argument_list|,
name|result
index|[
literal|1
index|]
argument_list|,
literal|0.0
argument_list|)
expr_stmt|;
name|GeoDistanceUtils
operator|.
name|closestPointOnBBox
argument_list|(
operator|-
literal|20
argument_list|,
operator|-
literal|20
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|70
argument_list|,
literal|70
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.0
argument_list|,
name|result
index|[
literal|0
index|]
argument_list|,
literal|0.0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.0
argument_list|,
name|result
index|[
literal|1
index|]
argument_list|,
literal|0.0
argument_list|)
expr_stmt|;
block|}
DECL|class|Cell
specifier|private
specifier|static
class|class
name|Cell
block|{
DECL|field|nextCellID
specifier|static
name|int
name|nextCellID
decl_stmt|;
DECL|field|parent
specifier|final
name|Cell
name|parent
decl_stmt|;
DECL|field|cellID
specifier|final
name|int
name|cellID
decl_stmt|;
DECL|field|minLon
DECL|field|maxLon
specifier|final
name|double
name|minLon
decl_stmt|,
name|maxLon
decl_stmt|;
DECL|field|minLat
DECL|field|maxLat
specifier|final
name|double
name|minLat
decl_stmt|,
name|maxLat
decl_stmt|;
DECL|field|splitCount
specifier|final
name|int
name|splitCount
decl_stmt|;
DECL|method|Cell
specifier|public
name|Cell
parameter_list|(
name|Cell
name|parent
parameter_list|,
name|double
name|minLon
parameter_list|,
name|double
name|minLat
parameter_list|,
name|double
name|maxLon
parameter_list|,
name|double
name|maxLat
parameter_list|,
name|int
name|splitCount
parameter_list|)
block|{
assert|assert
name|maxLon
operator|>=
name|minLon
assert|;
assert|assert
name|maxLat
operator|>=
name|minLat
assert|;
name|this
operator|.
name|parent
operator|=
name|parent
expr_stmt|;
name|this
operator|.
name|minLon
operator|=
name|minLon
expr_stmt|;
name|this
operator|.
name|minLat
operator|=
name|minLat
expr_stmt|;
name|this
operator|.
name|maxLon
operator|=
name|maxLon
expr_stmt|;
name|this
operator|.
name|maxLat
operator|=
name|maxLat
expr_stmt|;
name|this
operator|.
name|cellID
operator|=
name|nextCellID
operator|++
expr_stmt|;
name|this
operator|.
name|splitCount
operator|=
name|splitCount
expr_stmt|;
block|}
comment|/** Returns true if the quantized point lies within this cell, inclusive on all bounds. */
DECL|method|contains
specifier|public
name|boolean
name|contains
parameter_list|(
name|double
name|lon
parameter_list|,
name|double
name|lat
parameter_list|)
block|{
return|return
name|lon
operator|>=
name|minLon
operator|&&
name|lon
operator|<=
name|maxLon
operator|&&
name|lat
operator|>=
name|minLat
operator|&&
name|lat
operator|<=
name|maxLat
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"cell="
operator|+
name|cellID
operator|+
operator|(
name|parent
operator|==
literal|null
condition|?
literal|""
else|:
literal|" parentCellID="
operator|+
name|parent
operator|.
name|cellID
operator|)
operator|+
literal|" lon: "
operator|+
name|minLon
operator|+
literal|" TO "
operator|+
name|maxLon
operator|+
literal|", lat: "
operator|+
name|minLat
operator|+
literal|" TO "
operator|+
name|maxLat
operator|+
literal|", splits: "
operator|+
name|splitCount
return|;
block|}
block|}
DECL|method|scaleLon
specifier|public
name|long
name|scaleLon
parameter_list|(
specifier|final
name|double
name|val
parameter_list|)
block|{
return|return
call|(
name|long
call|)
argument_list|(
operator|(
name|val
operator|-
name|GeoUtils
operator|.
name|MIN_LON_INCL
operator|)
operator|*
name|LON_SCALE
argument_list|)
return|;
block|}
DECL|method|scaleLat
specifier|public
name|long
name|scaleLat
parameter_list|(
specifier|final
name|double
name|val
parameter_list|)
block|{
return|return
call|(
name|long
call|)
argument_list|(
operator|(
name|val
operator|-
name|GeoUtils
operator|.
name|MIN_LAT_INCL
operator|)
operator|*
name|LAT_SCALE
argument_list|)
return|;
block|}
DECL|method|unscaleLon
specifier|public
name|double
name|unscaleLon
parameter_list|(
specifier|final
name|long
name|val
parameter_list|)
block|{
return|return
operator|(
name|val
operator|/
name|LON_SCALE
operator|)
operator|+
name|GeoUtils
operator|.
name|MIN_LON_INCL
return|;
block|}
DECL|method|unscaleLat
specifier|public
name|double
name|unscaleLat
parameter_list|(
specifier|final
name|long
name|val
parameter_list|)
block|{
return|return
operator|(
name|val
operator|/
name|LAT_SCALE
operator|)
operator|+
name|GeoUtils
operator|.
name|MIN_LAT_INCL
return|;
block|}
DECL|method|randomLat
specifier|public
name|double
name|randomLat
parameter_list|(
name|boolean
name|small
parameter_list|)
block|{
name|double
name|result
decl_stmt|;
if|if
condition|(
name|small
condition|)
block|{
name|result
operator|=
name|GeoUtils
operator|.
name|normalizeLat
argument_list|(
name|originLat
operator|+
name|latRange
operator|*
operator|(
name|random
argument_list|()
operator|.
name|nextDouble
argument_list|()
operator|-
literal|0.5
operator|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
operator|-
literal|90
operator|+
literal|180.0
operator|*
name|random
argument_list|()
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
return|return
name|unscaleLat
argument_list|(
name|scaleLat
argument_list|(
name|result
argument_list|)
argument_list|)
return|;
block|}
DECL|method|randomLon
specifier|public
name|double
name|randomLon
parameter_list|(
name|boolean
name|small
parameter_list|)
block|{
name|double
name|result
decl_stmt|;
if|if
condition|(
name|small
condition|)
block|{
name|result
operator|=
name|GeoUtils
operator|.
name|normalizeLon
argument_list|(
name|originLon
operator|+
name|lonRange
operator|*
operator|(
name|random
argument_list|()
operator|.
name|nextDouble
argument_list|()
operator|-
literal|0.5
operator|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
operator|-
literal|180
operator|+
literal|360.0
operator|*
name|random
argument_list|()
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
return|return
name|unscaleLon
argument_list|(
name|scaleLon
argument_list|(
name|result
argument_list|)
argument_list|)
return|;
block|}
DECL|method|findMatches
specifier|private
name|void
name|findMatches
parameter_list|(
name|Set
argument_list|<
name|Integer
argument_list|>
name|hits
parameter_list|,
name|PrintWriter
name|log
parameter_list|,
name|Cell
name|root
parameter_list|,
name|double
name|centerLon
parameter_list|,
name|double
name|centerLat
parameter_list|,
name|double
name|radiusMeters
parameter_list|,
name|double
index|[]
name|docLons
parameter_list|,
name|double
index|[]
name|docLats
parameter_list|)
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|log
operator|.
name|println
argument_list|(
literal|"  root cell: "
operator|+
name|root
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|Cell
argument_list|>
name|queue
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|queue
operator|.
name|add
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|int
name|recurseDepth
init|=
name|RandomInts
operator|.
name|randomIntBetween
argument_list|(
name|random
argument_list|()
argument_list|,
literal|5
argument_list|,
literal|15
argument_list|)
decl_stmt|;
while|while
condition|(
name|queue
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Cell
name|cell
init|=
name|queue
operator|.
name|get
argument_list|(
name|queue
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|queue
operator|.
name|remove
argument_list|(
name|queue
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|log
operator|.
name|println
argument_list|(
literal|"  cycle: "
operator|+
name|cell
operator|+
literal|" queue.size()="
operator|+
name|queue
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
operator|==
literal|7
operator|||
name|cell
operator|.
name|splitCount
operator|>
name|recurseDepth
condition|)
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|log
operator|.
name|println
argument_list|(
literal|"    leaf"
argument_list|)
expr_stmt|;
block|}
comment|// Leaf cell: brute force check all docs that fall within this cell:
for|for
control|(
name|int
name|docID
init|=
literal|0
init|;
name|docID
operator|<
name|docLons
operator|.
name|length
condition|;
name|docID
operator|++
control|)
block|{
if|if
condition|(
name|cell
operator|.
name|contains
argument_list|(
name|docLons
index|[
name|docID
index|]
argument_list|,
name|docLats
index|[
name|docID
index|]
argument_list|)
condition|)
block|{
name|double
name|distanceMeters
init|=
name|SloppyMath
operator|.
name|haversin
argument_list|(
name|centerLat
argument_list|,
name|centerLon
argument_list|,
name|docLats
index|[
name|docID
index|]
argument_list|,
name|docLons
index|[
name|docID
index|]
argument_list|)
operator|*
literal|1000.0
decl_stmt|;
if|if
condition|(
name|distanceMeters
operator|<=
name|radiusMeters
condition|)
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|log
operator|.
name|println
argument_list|(
literal|"    check doc="
operator|+
name|docID
operator|+
literal|": match!"
argument_list|)
expr_stmt|;
block|}
name|hits
operator|.
name|add
argument_list|(
name|docID
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|log
operator|.
name|println
argument_list|(
literal|"    check doc="
operator|+
name|docID
operator|+
literal|": no match"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
else|else
block|{
if|if
condition|(
name|GeoUtils
operator|.
name|rectWithinCircle
argument_list|(
name|cell
operator|.
name|minLon
argument_list|,
name|cell
operator|.
name|minLat
argument_list|,
name|cell
operator|.
name|maxLon
argument_list|,
name|cell
operator|.
name|maxLat
argument_list|,
name|centerLon
argument_list|,
name|centerLat
argument_list|,
name|radiusMeters
argument_list|)
condition|)
block|{
comment|// Query circle fully contains this cell, just addAll:
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|log
operator|.
name|println
argument_list|(
literal|"    circle fully contains cell: now addAll"
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|docID
init|=
literal|0
init|;
name|docID
operator|<
name|docLons
operator|.
name|length
condition|;
name|docID
operator|++
control|)
block|{
if|if
condition|(
name|cell
operator|.
name|contains
argument_list|(
name|docLons
index|[
name|docID
index|]
argument_list|,
name|docLats
index|[
name|docID
index|]
argument_list|)
condition|)
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|log
operator|.
name|println
argument_list|(
literal|"    addAll doc="
operator|+
name|docID
argument_list|)
expr_stmt|;
block|}
name|hits
operator|.
name|add
argument_list|(
name|docID
argument_list|)
expr_stmt|;
block|}
block|}
continue|continue;
block|}
elseif|else
if|if
condition|(
name|GeoUtils
operator|.
name|rectWithin
argument_list|(
name|root
operator|.
name|minLon
argument_list|,
name|root
operator|.
name|minLat
argument_list|,
name|root
operator|.
name|maxLon
argument_list|,
name|root
operator|.
name|maxLat
argument_list|,
name|cell
operator|.
name|minLon
argument_list|,
name|cell
operator|.
name|minLat
argument_list|,
name|cell
operator|.
name|maxLon
argument_list|,
name|cell
operator|.
name|maxLat
argument_list|)
condition|)
block|{
comment|// Fall through below to "recurse"
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|log
operator|.
name|println
argument_list|(
literal|"    cell fully contains circle: keep splitting"
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|GeoUtils
operator|.
name|rectCrossesCircle
argument_list|(
name|cell
operator|.
name|minLon
argument_list|,
name|cell
operator|.
name|minLat
argument_list|,
name|cell
operator|.
name|maxLon
argument_list|,
name|cell
operator|.
name|maxLat
argument_list|,
name|centerLon
argument_list|,
name|centerLat
argument_list|,
name|radiusMeters
argument_list|)
condition|)
block|{
comment|// Fall through below to "recurse"
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|log
operator|.
name|println
argument_list|(
literal|"    cell overlaps circle: keep splitting"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|log
operator|.
name|println
argument_list|(
literal|"    no overlap: drop this cell"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|docID
init|=
literal|0
init|;
name|docID
operator|<
name|docLons
operator|.
name|length
condition|;
name|docID
operator|++
control|)
block|{
if|if
condition|(
name|cell
operator|.
name|contains
argument_list|(
name|docLons
index|[
name|docID
index|]
argument_list|,
name|docLats
index|[
name|docID
index|]
argument_list|)
condition|)
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|log
operator|.
name|println
argument_list|(
literal|"    skip doc="
operator|+
name|docID
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
continue|continue;
block|}
comment|// Randomly split:
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
comment|// Split on lon:
name|double
name|splitValue
init|=
name|cell
operator|.
name|minLon
operator|+
operator|(
name|cell
operator|.
name|maxLon
operator|-
name|cell
operator|.
name|minLon
operator|)
operator|*
name|random
argument_list|()
operator|.
name|nextDouble
argument_list|()
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|log
operator|.
name|println
argument_list|(
literal|"    now split on lon="
operator|+
name|splitValue
argument_list|)
expr_stmt|;
block|}
name|Cell
name|cell1
init|=
operator|new
name|Cell
argument_list|(
name|cell
argument_list|,
name|cell
operator|.
name|minLon
argument_list|,
name|cell
operator|.
name|minLat
argument_list|,
name|splitValue
argument_list|,
name|cell
operator|.
name|maxLat
argument_list|,
name|cell
operator|.
name|splitCount
operator|+
literal|1
argument_list|)
decl_stmt|;
name|Cell
name|cell2
init|=
operator|new
name|Cell
argument_list|(
name|cell
argument_list|,
name|splitValue
argument_list|,
name|cell
operator|.
name|minLat
argument_list|,
name|cell
operator|.
name|maxLon
argument_list|,
name|cell
operator|.
name|maxLat
argument_list|,
name|cell
operator|.
name|splitCount
operator|+
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|log
operator|.
name|println
argument_list|(
literal|"    split cell1: "
operator|+
name|cell1
argument_list|)
expr_stmt|;
name|log
operator|.
name|println
argument_list|(
literal|"    split cell2: "
operator|+
name|cell2
argument_list|)
expr_stmt|;
block|}
name|queue
operator|.
name|add
argument_list|(
name|cell1
argument_list|)
expr_stmt|;
name|queue
operator|.
name|add
argument_list|(
name|cell2
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Split on lat:
name|double
name|splitValue
init|=
name|cell
operator|.
name|minLat
operator|+
operator|(
name|cell
operator|.
name|maxLat
operator|-
name|cell
operator|.
name|minLat
operator|)
operator|*
name|random
argument_list|()
operator|.
name|nextDouble
argument_list|()
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|log
operator|.
name|println
argument_list|(
literal|"    now split on lat="
operator|+
name|splitValue
argument_list|)
expr_stmt|;
block|}
name|Cell
name|cell1
init|=
operator|new
name|Cell
argument_list|(
name|cell
argument_list|,
name|cell
operator|.
name|minLon
argument_list|,
name|cell
operator|.
name|minLat
argument_list|,
name|cell
operator|.
name|maxLon
argument_list|,
name|splitValue
argument_list|,
name|cell
operator|.
name|splitCount
operator|+
literal|1
argument_list|)
decl_stmt|;
name|Cell
name|cell2
init|=
operator|new
name|Cell
argument_list|(
name|cell
argument_list|,
name|cell
operator|.
name|minLon
argument_list|,
name|splitValue
argument_list|,
name|cell
operator|.
name|maxLon
argument_list|,
name|cell
operator|.
name|maxLat
argument_list|,
name|cell
operator|.
name|splitCount
operator|+
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|log
operator|.
name|println
argument_list|(
literal|"    split cells:\n      "
operator|+
name|cell1
operator|+
literal|"\n      "
operator|+
name|cell2
argument_list|)
expr_stmt|;
block|}
name|queue
operator|.
name|add
argument_list|(
name|cell1
argument_list|)
expr_stmt|;
name|queue
operator|.
name|add
argument_list|(
name|cell2
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/** Tests consistency of GeoUtils.rectWithinCircle, .rectCrossesCircle, .rectWithin and SloppyMath.haversine distance check */
annotation|@
name|AwaitsFix
argument_list|(
name|bugUrl
operator|=
literal|"https://issues.apache.org/jira/browse/LUCENE-6846"
argument_list|)
DECL|method|testGeoRelations
specifier|public
name|void
name|testGeoRelations
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|numDocs
init|=
name|atLeast
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
comment|// boolean useSmallRanges = random().nextBoolean();
comment|// TODO: the GeoUtils APIs have bugs if you use large distances:
name|boolean
name|useSmallRanges
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TEST: "
operator|+
name|numDocs
operator|+
literal|" docs useSmallRanges="
operator|+
name|useSmallRanges
argument_list|)
expr_stmt|;
block|}
name|double
index|[]
name|docLons
init|=
operator|new
name|double
index|[
name|numDocs
index|]
decl_stmt|;
name|double
index|[]
name|docLats
init|=
operator|new
name|double
index|[
name|numDocs
index|]
decl_stmt|;
for|for
control|(
name|int
name|docID
init|=
literal|0
init|;
name|docID
operator|<
name|numDocs
condition|;
name|docID
operator|++
control|)
block|{
name|docLons
index|[
name|docID
index|]
operator|=
name|randomLon
argument_list|(
name|useSmallRanges
argument_list|)
expr_stmt|;
name|docLats
index|[
name|docID
index|]
operator|=
name|randomLat
argument_list|(
name|useSmallRanges
argument_list|)
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  doc="
operator|+
name|docID
operator|+
literal|": lon="
operator|+
name|docLons
index|[
name|docID
index|]
operator|+
literal|" lat="
operator|+
name|docLats
index|[
name|docID
index|]
argument_list|)
expr_stmt|;
block|}
block|}
name|int
name|iters
init|=
name|atLeast
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|iters
operator|=
name|atLeast
argument_list|(
literal|50
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|iter
init|=
literal|0
init|;
name|iter
operator|<
name|iters
condition|;
name|iter
operator|++
control|)
block|{
name|Cell
operator|.
name|nextCellID
operator|=
literal|0
expr_stmt|;
name|double
name|centerLon
init|=
name|randomLon
argument_list|(
name|useSmallRanges
argument_list|)
decl_stmt|;
name|double
name|centerLat
init|=
name|randomLat
argument_list|(
name|useSmallRanges
argument_list|)
decl_stmt|;
comment|// So the circle covers at most 50% of the earth's surface:
name|double
name|radiusMeters
decl_stmt|;
comment|// TODO: GeoUtils APIs are still buggy for large distances:
if|if
condition|(
literal|true
operator|||
name|useSmallRanges
condition|)
block|{
comment|// Approx 3 degrees lon at the equator:
name|radiusMeters
operator|=
name|random
argument_list|()
operator|.
name|nextDouble
argument_list|()
operator|*
literal|333000
expr_stmt|;
block|}
else|else
block|{
name|radiusMeters
operator|=
name|random
argument_list|()
operator|.
name|nextDouble
argument_list|()
operator|*
name|GeoProjectionUtils
operator|.
name|SEMIMAJOR_AXIS
operator|*
name|Math
operator|.
name|PI
operator|/
literal|2.0
expr_stmt|;
block|}
name|StringWriter
name|sw
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|PrintWriter
name|log
init|=
operator|new
name|PrintWriter
argument_list|(
name|sw
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|log
operator|.
name|println
argument_list|(
literal|"\nTEST: iter="
operator|+
name|iter
operator|+
literal|" radiusMeters="
operator|+
name|radiusMeters
operator|+
literal|" centerLon="
operator|+
name|centerLon
operator|+
literal|" centerLat="
operator|+
name|centerLat
argument_list|)
expr_stmt|;
block|}
name|GeoRect
name|bbox
init|=
name|GeoUtils
operator|.
name|circleToBBox
argument_list|(
name|centerLon
argument_list|,
name|centerLat
argument_list|,
name|radiusMeters
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Integer
argument_list|>
name|hits
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|bbox
operator|.
name|maxLon
operator|<
name|bbox
operator|.
name|minLon
condition|)
block|{
comment|// Crosses dateline
name|log
operator|.
name|println
argument_list|(
literal|"  circle crosses dateline; first right query"
argument_list|)
expr_stmt|;
name|findMatches
argument_list|(
name|hits
argument_list|,
name|log
argument_list|,
operator|new
name|Cell
argument_list|(
literal|null
argument_list|,
operator|-
literal|180
argument_list|,
name|bbox
operator|.
name|minLat
argument_list|,
name|bbox
operator|.
name|maxLon
argument_list|,
name|bbox
operator|.
name|maxLat
argument_list|,
literal|0
argument_list|)
argument_list|,
name|centerLon
argument_list|,
name|centerLat
argument_list|,
name|radiusMeters
argument_list|,
name|docLons
argument_list|,
name|docLats
argument_list|)
expr_stmt|;
name|log
operator|.
name|println
argument_list|(
literal|"  circle crosses dateline; now left query"
argument_list|)
expr_stmt|;
name|findMatches
argument_list|(
name|hits
argument_list|,
name|log
argument_list|,
operator|new
name|Cell
argument_list|(
literal|null
argument_list|,
name|bbox
operator|.
name|minLon
argument_list|,
name|bbox
operator|.
name|minLat
argument_list|,
literal|180
argument_list|,
name|bbox
operator|.
name|maxLat
argument_list|,
literal|0
argument_list|)
argument_list|,
name|centerLon
argument_list|,
name|centerLat
argument_list|,
name|radiusMeters
argument_list|,
name|docLons
argument_list|,
name|docLats
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Start with the root cell that fully contains the shape:
name|findMatches
argument_list|(
name|hits
argument_list|,
name|log
argument_list|,
operator|new
name|Cell
argument_list|(
literal|null
argument_list|,
name|bbox
operator|.
name|minLon
argument_list|,
name|bbox
operator|.
name|minLat
argument_list|,
name|bbox
operator|.
name|maxLon
argument_list|,
name|bbox
operator|.
name|maxLat
argument_list|,
literal|0
argument_list|)
argument_list|,
name|centerLon
argument_list|,
name|centerLat
argument_list|,
name|radiusMeters
argument_list|,
name|docLons
argument_list|,
name|docLats
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|log
operator|.
name|println
argument_list|(
literal|"  "
operator|+
name|hits
operator|.
name|size
argument_list|()
operator|+
literal|" hits"
argument_list|)
expr_stmt|;
block|}
name|int
name|failCount
init|=
literal|0
decl_stmt|;
comment|// Done matching, now verify:
for|for
control|(
name|int
name|docID
init|=
literal|0
init|;
name|docID
operator|<
name|numDocs
condition|;
name|docID
operator|++
control|)
block|{
name|double
name|distanceMeters
init|=
name|SloppyMath
operator|.
name|haversin
argument_list|(
name|centerLat
argument_list|,
name|centerLon
argument_list|,
name|docLats
index|[
name|docID
index|]
argument_list|,
name|docLons
index|[
name|docID
index|]
argument_list|)
operator|*
literal|1000.0
decl_stmt|;
name|boolean
name|expected
init|=
name|distanceMeters
operator|<=
name|radiusMeters
decl_stmt|;
name|boolean
name|actual
init|=
name|hits
operator|.
name|contains
argument_list|(
name|docID
argument_list|)
decl_stmt|;
if|if
condition|(
name|actual
operator|!=
name|expected
condition|)
block|{
if|if
condition|(
name|actual
condition|)
block|{
name|log
operator|.
name|println
argument_list|(
literal|"doc="
operator|+
name|docID
operator|+
literal|" matched but should not"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|println
argument_list|(
literal|"doc="
operator|+
name|docID
operator|+
literal|" did not match but should"
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|println
argument_list|(
literal|"  lon="
operator|+
name|docLons
index|[
name|docID
index|]
operator|+
literal|" lat="
operator|+
name|docLats
index|[
name|docID
index|]
operator|+
literal|" distanceMeters="
operator|+
name|distanceMeters
operator|+
literal|" vs radiusMeters="
operator|+
name|radiusMeters
argument_list|)
expr_stmt|;
name|failCount
operator|++
expr_stmt|;
block|}
block|}
if|if
condition|(
name|failCount
operator|!=
literal|0
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
name|sw
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|failCount
operator|+
literal|" incorrect hits (see above)"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class
end_unit
