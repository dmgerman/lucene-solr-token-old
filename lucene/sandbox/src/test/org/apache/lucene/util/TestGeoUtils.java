begin_unit
begin_package
DECL|package|org.apache.lucene.util
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_comment
comment|/**  * Tests class for methods in GeoUtils  *  * @lucene.experimental  */
end_comment
begin_class
DECL|class|TestGeoUtils
specifier|public
class|class
name|TestGeoUtils
extends|extends
name|LuceneTestCase
block|{
comment|// Global bounding box we will "cover" in the random test; we have to make this "smallish" else the queries take very long:
DECL|field|originLat
specifier|private
specifier|static
name|double
name|originLat
decl_stmt|;
DECL|field|originLon
specifier|private
specifier|static
name|double
name|originLon
decl_stmt|;
comment|//  private static double range;
DECL|field|lonRange
specifier|private
specifier|static
name|double
name|lonRange
decl_stmt|;
DECL|field|latRange
specifier|private
specifier|static
name|double
name|latRange
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|beforeClass
specifier|public
specifier|static
name|void
name|beforeClass
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Between 1.0 and 3.0:
name|lonRange
operator|=
literal|2
operator|*
operator|(
name|random
argument_list|()
operator|.
name|nextDouble
argument_list|()
operator|+
literal|0.5
operator|)
expr_stmt|;
name|latRange
operator|=
literal|2
operator|*
operator|(
name|random
argument_list|()
operator|.
name|nextDouble
argument_list|()
operator|+
literal|0.5
operator|)
expr_stmt|;
name|originLon
operator|=
name|GeoUtils
operator|.
name|MIN_LON_INCL
operator|+
name|lonRange
operator|+
operator|(
name|GeoUtils
operator|.
name|MAX_LON_INCL
operator|-
name|GeoUtils
operator|.
name|MIN_LON_INCL
operator|-
literal|2
operator|*
name|lonRange
operator|)
operator|*
name|random
argument_list|()
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
name|originLon
operator|=
name|GeoUtils
operator|.
name|normalizeLon
argument_list|(
name|originLon
argument_list|)
expr_stmt|;
name|originLat
operator|=
name|GeoUtils
operator|.
name|MIN_LAT_INCL
operator|+
name|latRange
operator|+
operator|(
name|GeoUtils
operator|.
name|MAX_LAT_INCL
operator|-
name|GeoUtils
operator|.
name|MIN_LAT_INCL
operator|-
literal|2
operator|*
name|latRange
operator|)
operator|*
name|random
argument_list|()
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
name|originLat
operator|=
name|GeoUtils
operator|.
name|normalizeLat
argument_list|(
name|originLat
argument_list|)
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TEST: originLon="
operator|+
name|originLon
operator|+
literal|" lonRange= "
operator|+
name|lonRange
operator|+
literal|" originLat="
operator|+
name|originLat
operator|+
literal|" latRange="
operator|+
name|latRange
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testGeoHash
specifier|public
name|void
name|testGeoHash
parameter_list|()
block|{
name|int
name|numPoints
init|=
name|atLeast
argument_list|(
literal|100
argument_list|)
decl_stmt|;
name|String
name|randomGeoHashString
decl_stmt|;
name|String
name|mortonGeoHash
decl_stmt|;
name|long
name|mortonLongFromGHLong
decl_stmt|,
name|geoHashLong
decl_stmt|,
name|mortonLongFromGHString
decl_stmt|;
name|int
name|randomLevel
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numPoints
condition|;
operator|++
name|i
control|)
block|{
comment|// random point
name|double
name|lat
init|=
name|randomLatFullRange
argument_list|()
decl_stmt|;
name|double
name|lon
init|=
name|randomLonFullRange
argument_list|()
decl_stmt|;
comment|// compute geohash straight from lat/lon and from morton encoded value to ensure they're the same
name|randomGeoHashString
operator|=
name|GeoHashUtils
operator|.
name|stringEncode
argument_list|(
name|lon
argument_list|,
name|lat
argument_list|,
name|randomLevel
operator|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|12
operator|-
literal|1
argument_list|)
operator|+
literal|1
argument_list|)
expr_stmt|;
name|mortonGeoHash
operator|=
name|GeoHashUtils
operator|.
name|stringEncodeFromMortonLong
argument_list|(
name|GeoUtils
operator|.
name|mortonHash
argument_list|(
name|lon
argument_list|,
name|lat
argument_list|)
argument_list|,
name|randomLevel
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|randomGeoHashString
argument_list|,
name|mortonGeoHash
argument_list|)
expr_stmt|;
comment|// v&v conversion from lat/lon or geohashstring to geohash long and back to geohash string
name|geoHashLong
operator|=
operator|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
operator|)
condition|?
name|GeoHashUtils
operator|.
name|longEncode
argument_list|(
name|lon
argument_list|,
name|lat
argument_list|,
name|randomLevel
argument_list|)
else|:
name|GeoHashUtils
operator|.
name|longEncode
argument_list|(
name|randomGeoHashString
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|randomGeoHashString
argument_list|,
name|GeoHashUtils
operator|.
name|stringEncode
argument_list|(
name|geoHashLong
argument_list|)
argument_list|)
expr_stmt|;
comment|// v&v conversion from geohash long to morton long
name|mortonLongFromGHString
operator|=
name|GeoHashUtils
operator|.
name|mortonEncode
argument_list|(
name|randomGeoHashString
argument_list|)
expr_stmt|;
name|mortonLongFromGHLong
operator|=
name|GeoHashUtils
operator|.
name|mortonEncode
argument_list|(
name|geoHashLong
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|mortonLongFromGHLong
argument_list|,
name|mortonLongFromGHString
argument_list|)
expr_stmt|;
comment|// v&v lat/lon from geohash string and geohash long
name|assertEquals
argument_list|(
name|GeoUtils
operator|.
name|mortonUnhashLat
argument_list|(
name|mortonLongFromGHString
argument_list|)
argument_list|,
name|GeoUtils
operator|.
name|mortonUnhashLat
argument_list|(
name|mortonLongFromGHLong
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|GeoUtils
operator|.
name|mortonUnhashLon
argument_list|(
name|mortonLongFromGHString
argument_list|)
argument_list|,
name|GeoUtils
operator|.
name|mortonUnhashLon
argument_list|(
name|mortonLongFromGHLong
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|randomLatFullRange
specifier|public
specifier|static
name|double
name|randomLatFullRange
parameter_list|()
block|{
return|return
operator|(
literal|180d
operator|*
name|random
argument_list|()
operator|.
name|nextDouble
argument_list|()
operator|)
operator|-
literal|90d
return|;
block|}
DECL|method|randomLonFullRange
specifier|public
specifier|static
name|double
name|randomLonFullRange
parameter_list|()
block|{
return|return
operator|(
literal|360d
operator|*
name|random
argument_list|()
operator|.
name|nextDouble
argument_list|()
operator|)
operator|-
literal|180d
return|;
block|}
DECL|method|randomLat
specifier|public
specifier|static
name|double
name|randomLat
parameter_list|()
block|{
return|return
name|GeoUtils
operator|.
name|normalizeLat
argument_list|(
name|originLat
operator|+
name|latRange
operator|*
operator|(
name|random
argument_list|()
operator|.
name|nextDouble
argument_list|()
operator|-
literal|0.5
operator|)
argument_list|)
return|;
block|}
DECL|method|randomLon
specifier|public
specifier|static
name|double
name|randomLon
parameter_list|()
block|{
return|return
name|GeoUtils
operator|.
name|normalizeLon
argument_list|(
name|originLon
operator|+
name|lonRange
operator|*
operator|(
name|random
argument_list|()
operator|.
name|nextDouble
argument_list|()
operator|-
literal|0.5
operator|)
argument_list|)
return|;
block|}
block|}
end_class
end_unit
