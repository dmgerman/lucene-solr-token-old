begin_unit
begin_package
DECL|package|org.apache.lucene.bkdtree
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|bkdtree
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|Codec
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|DocValuesFormat
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|lucene53
operator|.
name|Lucene53Codec
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|NumericDocValuesField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DirectoryReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriterConfig
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReaderContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|MultiDocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|NumericDocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|RandomIndexWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|SimpleCollector
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TopDocs
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|MockDirectoryWrapper
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Accountable
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Accountables
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|FixedBitSet
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
operator|.
name|Nightly
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|TestUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import
begin_class
DECL|class|TestBKDTree
specifier|public
class|class
name|TestBKDTree
extends|extends
name|LuceneTestCase
block|{
DECL|field|smallBBox
specifier|private
specifier|static
name|boolean
name|smallBBox
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|beforeClass
specifier|public
specifier|static
name|void
name|beforeClass
parameter_list|()
block|{
name|smallBBox
operator|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
expr_stmt|;
block|}
DECL|method|testAllLatEqual
specifier|public
name|void
name|testAllLatEqual
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|numPoints
init|=
name|atLeast
argument_list|(
literal|10000
argument_list|)
decl_stmt|;
name|double
name|lat
init|=
name|randomLat
argument_list|()
decl_stmt|;
name|double
index|[]
name|lats
init|=
operator|new
name|double
index|[
name|numPoints
index|]
decl_stmt|;
name|double
index|[]
name|lons
init|=
operator|new
name|double
index|[
name|numPoints
index|]
decl_stmt|;
name|boolean
name|haveRealDoc
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|docID
init|=
literal|0
init|;
name|docID
operator|<
name|numPoints
condition|;
name|docID
operator|++
control|)
block|{
name|int
name|x
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|20
argument_list|)
decl_stmt|;
if|if
condition|(
name|x
operator|==
literal|17
condition|)
block|{
comment|// Some docs don't have a point:
name|lats
index|[
name|docID
index|]
operator|=
name|Double
operator|.
name|NaN
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  doc="
operator|+
name|docID
operator|+
literal|" is missing"
argument_list|)
expr_stmt|;
block|}
continue|continue;
block|}
if|if
condition|(
name|docID
operator|>
literal|0
operator|&&
name|x
operator|==
literal|14
operator|&&
name|haveRealDoc
condition|)
block|{
name|int
name|oldDocID
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|oldDocID
operator|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|docID
argument_list|)
expr_stmt|;
if|if
condition|(
name|Double
operator|.
name|isNaN
argument_list|(
name|lats
index|[
name|oldDocID
index|]
argument_list|)
operator|==
literal|false
condition|)
block|{
break|break;
block|}
block|}
comment|// Fully identical point:
name|lons
index|[
name|docID
index|]
operator|=
name|lons
index|[
name|oldDocID
index|]
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  doc="
operator|+
name|docID
operator|+
literal|" lat="
operator|+
name|lat
operator|+
literal|" lon="
operator|+
name|lons
index|[
name|docID
index|]
operator|+
literal|" (same lat/lon as doc="
operator|+
name|oldDocID
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|lons
index|[
name|docID
index|]
operator|=
name|randomLon
argument_list|()
expr_stmt|;
name|haveRealDoc
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  doc="
operator|+
name|docID
operator|+
literal|" lat="
operator|+
name|lat
operator|+
literal|" lon="
operator|+
name|lons
index|[
name|docID
index|]
argument_list|)
expr_stmt|;
block|}
block|}
name|lats
index|[
name|docID
index|]
operator|=
name|lat
expr_stmt|;
block|}
name|verify
argument_list|(
name|lats
argument_list|,
name|lons
argument_list|)
expr_stmt|;
block|}
DECL|method|testAllLonEqual
specifier|public
name|void
name|testAllLonEqual
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|numPoints
init|=
name|atLeast
argument_list|(
literal|10000
argument_list|)
decl_stmt|;
name|double
name|theLon
init|=
name|randomLon
argument_list|()
decl_stmt|;
name|double
index|[]
name|lats
init|=
operator|new
name|double
index|[
name|numPoints
index|]
decl_stmt|;
name|double
index|[]
name|lons
init|=
operator|new
name|double
index|[
name|numPoints
index|]
decl_stmt|;
name|boolean
name|haveRealDoc
init|=
literal|false
decl_stmt|;
comment|//System.out.println("theLon=" + theLon);
for|for
control|(
name|int
name|docID
init|=
literal|0
init|;
name|docID
operator|<
name|numPoints
condition|;
name|docID
operator|++
control|)
block|{
name|int
name|x
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|20
argument_list|)
decl_stmt|;
if|if
condition|(
name|x
operator|==
literal|17
condition|)
block|{
comment|// Some docs don't have a point:
name|lats
index|[
name|docID
index|]
operator|=
name|Double
operator|.
name|NaN
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  doc="
operator|+
name|docID
operator|+
literal|" is missing"
argument_list|)
expr_stmt|;
block|}
continue|continue;
block|}
if|if
condition|(
name|docID
operator|>
literal|0
operator|&&
name|x
operator|==
literal|14
operator|&&
name|haveRealDoc
condition|)
block|{
name|int
name|oldDocID
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|oldDocID
operator|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|docID
argument_list|)
expr_stmt|;
if|if
condition|(
name|Double
operator|.
name|isNaN
argument_list|(
name|lats
index|[
name|oldDocID
index|]
argument_list|)
operator|==
literal|false
condition|)
block|{
break|break;
block|}
block|}
comment|// Fully identical point:
name|lats
index|[
name|docID
index|]
operator|=
name|lats
index|[
name|oldDocID
index|]
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  doc="
operator|+
name|docID
operator|+
literal|" lat="
operator|+
name|lats
index|[
name|docID
index|]
operator|+
literal|" lon="
operator|+
name|theLon
operator|+
literal|" (same lat/lon as doc="
operator|+
name|oldDocID
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|lats
index|[
name|docID
index|]
operator|=
name|randomLat
argument_list|()
expr_stmt|;
name|haveRealDoc
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  doc="
operator|+
name|docID
operator|+
literal|" lat="
operator|+
name|lats
index|[
name|docID
index|]
operator|+
literal|" lon="
operator|+
name|theLon
argument_list|)
expr_stmt|;
block|}
block|}
name|lons
index|[
name|docID
index|]
operator|=
name|theLon
expr_stmt|;
block|}
name|verify
argument_list|(
name|lats
argument_list|,
name|lons
argument_list|)
expr_stmt|;
block|}
DECL|method|testMultiValued
specifier|public
name|void
name|testMultiValued
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|numPoints
init|=
name|atLeast
argument_list|(
literal|10000
argument_list|)
decl_stmt|;
comment|// Every doc has 2 points:
name|double
index|[]
name|lats
init|=
operator|new
name|double
index|[
literal|2
operator|*
name|numPoints
index|]
decl_stmt|;
name|double
index|[]
name|lons
init|=
operator|new
name|double
index|[
literal|2
operator|*
name|numPoints
index|]
decl_stmt|;
name|Directory
name|dir
init|=
name|getDirectory
argument_list|()
decl_stmt|;
name|IndexWriterConfig
name|iwc
init|=
name|newIndexWriterConfig
argument_list|()
decl_stmt|;
comment|// We rely on docID order:
name|iwc
operator|.
name|setMergePolicy
argument_list|(
name|newLogMergePolicy
argument_list|()
argument_list|)
expr_stmt|;
name|Codec
name|codec
init|=
name|TestUtil
operator|.
name|alwaysDocValuesFormat
argument_list|(
name|getDocValuesFormat
argument_list|()
argument_list|)
decl_stmt|;
name|iwc
operator|.
name|setCodec
argument_list|(
name|codec
argument_list|)
expr_stmt|;
name|RandomIndexWriter
name|w
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|,
name|iwc
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|docID
init|=
literal|0
init|;
name|docID
operator|<
name|numPoints
condition|;
name|docID
operator|++
control|)
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|lats
index|[
literal|2
operator|*
name|docID
index|]
operator|=
name|randomLat
argument_list|()
expr_stmt|;
name|lons
index|[
literal|2
operator|*
name|docID
index|]
operator|=
name|randomLon
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|BKDPointField
argument_list|(
literal|"point"
argument_list|,
name|lats
index|[
literal|2
operator|*
name|docID
index|]
argument_list|,
name|lons
index|[
literal|2
operator|*
name|docID
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|lats
index|[
literal|2
operator|*
name|docID
operator|+
literal|1
index|]
operator|=
name|randomLat
argument_list|()
expr_stmt|;
name|lons
index|[
literal|2
operator|*
name|docID
operator|+
literal|1
index|]
operator|=
name|randomLon
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|BKDPointField
argument_list|(
literal|"point"
argument_list|,
name|lats
index|[
literal|2
operator|*
name|docID
operator|+
literal|1
index|]
argument_list|,
name|lons
index|[
literal|2
operator|*
name|docID
operator|+
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|w
operator|.
name|forceMerge
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|IndexReader
name|r
init|=
name|w
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// We can't wrap with "exotic" readers because the BKD query must see the BKDDVFormat:
name|IndexSearcher
name|s
init|=
name|newSearcher
argument_list|(
name|r
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|int
name|iters
init|=
name|atLeast
argument_list|(
literal|100
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|iter
init|=
literal|0
init|;
name|iter
operator|<
name|iters
condition|;
name|iter
operator|++
control|)
block|{
name|double
name|lat0
init|=
name|randomLat
argument_list|()
decl_stmt|;
name|double
name|lat1
init|=
name|randomLat
argument_list|()
decl_stmt|;
name|double
name|lon0
init|=
name|randomLon
argument_list|()
decl_stmt|;
name|double
name|lon1
init|=
name|randomLon
argument_list|()
decl_stmt|;
if|if
condition|(
name|lat1
operator|<
name|lat0
condition|)
block|{
name|double
name|x
init|=
name|lat0
decl_stmt|;
name|lat0
operator|=
name|lat1
expr_stmt|;
name|lat1
operator|=
name|x
expr_stmt|;
block|}
if|if
condition|(
name|lon1
operator|<
name|lon0
condition|)
block|{
name|double
name|x
init|=
name|lon0
decl_stmt|;
name|lon0
operator|=
name|lon1
expr_stmt|;
name|lon1
operator|=
name|x
expr_stmt|;
block|}
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\nTEST: iter="
operator|+
name|iter
operator|+
literal|" lat="
operator|+
name|lat0
operator|+
literal|" TO "
operator|+
name|lat1
operator|+
literal|" lon="
operator|+
name|lon0
operator|+
literal|" TO "
operator|+
name|lon1
argument_list|)
expr_stmt|;
block|}
name|Query
name|query
init|=
operator|new
name|BKDPointInBBoxQuery
argument_list|(
literal|"point"
argument_list|,
name|lat0
argument_list|,
name|lat1
argument_list|,
name|lon0
argument_list|,
name|lon1
argument_list|)
decl_stmt|;
specifier|final
name|FixedBitSet
name|hits
init|=
operator|new
name|FixedBitSet
argument_list|(
name|r
operator|.
name|maxDoc
argument_list|()
argument_list|)
decl_stmt|;
name|s
operator|.
name|search
argument_list|(
name|query
argument_list|,
operator|new
name|SimpleCollector
argument_list|()
block|{
specifier|private
name|int
name|docBase
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|needsScores
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|doSetNextReader
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|docBase
operator|=
name|context
operator|.
name|docBase
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|collect
parameter_list|(
name|int
name|doc
parameter_list|)
block|{
name|hits
operator|.
name|set
argument_list|(
name|docBase
operator|+
name|doc
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|docID
init|=
literal|0
init|;
name|docID
operator|<
name|lats
operator|.
name|length
operator|/
literal|2
condition|;
name|docID
operator|++
control|)
block|{
name|double
name|latDoc1
init|=
name|lats
index|[
literal|2
operator|*
name|docID
index|]
decl_stmt|;
name|double
name|lonDoc1
init|=
name|lons
index|[
literal|2
operator|*
name|docID
index|]
decl_stmt|;
name|double
name|latDoc2
init|=
name|lats
index|[
literal|2
operator|*
name|docID
operator|+
literal|1
index|]
decl_stmt|;
name|double
name|lonDoc2
init|=
name|lons
index|[
literal|2
operator|*
name|docID
operator|+
literal|1
index|]
decl_stmt|;
name|boolean
name|expected
init|=
name|rectContainsPointEnc
argument_list|(
name|lat0
argument_list|,
name|lat1
argument_list|,
name|lon0
argument_list|,
name|lon1
argument_list|,
name|latDoc1
argument_list|,
name|lonDoc1
argument_list|)
operator|||
name|rectContainsPointEnc
argument_list|(
name|lat0
argument_list|,
name|lat1
argument_list|,
name|lon0
argument_list|,
name|lon1
argument_list|,
name|latDoc2
argument_list|,
name|lonDoc2
argument_list|)
decl_stmt|;
if|if
condition|(
name|hits
operator|.
name|get
argument_list|(
name|docID
argument_list|)
operator|!=
name|expected
condition|)
block|{
name|fail
argument_list|(
literal|"docID="
operator|+
name|docID
operator|+
literal|" latDoc1="
operator|+
name|latDoc1
operator|+
literal|" lonDoc1="
operator|+
name|lonDoc1
operator|+
literal|" latDoc2="
operator|+
name|latDoc2
operator|+
literal|" lonDoc2="
operator|+
name|lonDoc2
operator|+
literal|" expected "
operator|+
name|expected
operator|+
literal|" but got: "
operator|+
name|hits
operator|.
name|get
argument_list|(
name|docID
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// A particularly tricky adversary:
DECL|method|testSamePointManyTimes
specifier|public
name|void
name|testSamePointManyTimes
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|numPoints
init|=
name|atLeast
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
comment|// Every doc has 2 points:
name|double
name|theLat
init|=
name|randomLat
argument_list|()
decl_stmt|;
name|double
name|theLon
init|=
name|randomLon
argument_list|()
decl_stmt|;
name|double
index|[]
name|lats
init|=
operator|new
name|double
index|[
name|numPoints
index|]
decl_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|lats
argument_list|,
name|theLat
argument_list|)
expr_stmt|;
name|double
index|[]
name|lons
init|=
operator|new
name|double
index|[
name|numPoints
index|]
decl_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|lons
argument_list|,
name|theLon
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|lats
argument_list|,
name|lons
argument_list|)
expr_stmt|;
block|}
DECL|method|testRandomTiny
specifier|public
name|void
name|testRandomTiny
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Make sure single-leaf-node case is OK:
name|doTestRandom
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
DECL|method|testRandomMedium
specifier|public
name|void
name|testRandomMedium
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestRandom
argument_list|(
literal|10000
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Nightly
DECL|method|testRandomBig
specifier|public
name|void
name|testRandomBig
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestRandom
argument_list|(
literal|200000
argument_list|)
expr_stmt|;
block|}
DECL|method|doTestRandom
specifier|private
name|void
name|doTestRandom
parameter_list|(
name|int
name|count
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|numPoints
init|=
name|atLeast
argument_list|(
name|count
argument_list|)
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TEST: numPoints="
operator|+
name|numPoints
argument_list|)
expr_stmt|;
block|}
name|double
index|[]
name|lats
init|=
operator|new
name|double
index|[
name|numPoints
index|]
decl_stmt|;
name|double
index|[]
name|lons
init|=
operator|new
name|double
index|[
name|numPoints
index|]
decl_stmt|;
name|boolean
name|haveRealDoc
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|docID
init|=
literal|0
init|;
name|docID
operator|<
name|numPoints
condition|;
name|docID
operator|++
control|)
block|{
name|int
name|x
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|20
argument_list|)
decl_stmt|;
if|if
condition|(
name|x
operator|==
literal|17
condition|)
block|{
comment|// Some docs don't have a point:
name|lats
index|[
name|docID
index|]
operator|=
name|Double
operator|.
name|NaN
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  doc="
operator|+
name|docID
operator|+
literal|" is missing"
argument_list|)
expr_stmt|;
block|}
continue|continue;
block|}
if|if
condition|(
name|docID
operator|>
literal|0
operator|&&
name|x
operator|<
literal|3
operator|&&
name|haveRealDoc
condition|)
block|{
name|int
name|oldDocID
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|oldDocID
operator|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|docID
argument_list|)
expr_stmt|;
if|if
condition|(
name|Double
operator|.
name|isNaN
argument_list|(
name|lats
index|[
name|oldDocID
index|]
argument_list|)
operator|==
literal|false
condition|)
block|{
break|break;
block|}
block|}
if|if
condition|(
name|x
operator|==
literal|0
condition|)
block|{
comment|// Identical lat to old point
name|lats
index|[
name|docID
index|]
operator|=
name|lats
index|[
name|oldDocID
index|]
expr_stmt|;
name|lons
index|[
name|docID
index|]
operator|=
name|randomLon
argument_list|()
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  doc="
operator|+
name|docID
operator|+
literal|" lat="
operator|+
name|lats
index|[
name|docID
index|]
operator|+
literal|" lon="
operator|+
name|lons
index|[
name|docID
index|]
operator|+
literal|" (same lat as doc="
operator|+
name|oldDocID
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|x
operator|==
literal|1
condition|)
block|{
comment|// Identical lon to old point
name|lats
index|[
name|docID
index|]
operator|=
name|randomLat
argument_list|()
expr_stmt|;
name|lons
index|[
name|docID
index|]
operator|=
name|lons
index|[
name|oldDocID
index|]
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  doc="
operator|+
name|docID
operator|+
literal|" lat="
operator|+
name|lats
index|[
name|docID
index|]
operator|+
literal|" lon="
operator|+
name|lons
index|[
name|docID
index|]
operator|+
literal|" (same lon as doc="
operator|+
name|oldDocID
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
assert|assert
name|x
operator|==
literal|2
assert|;
comment|// Fully identical point:
name|lats
index|[
name|docID
index|]
operator|=
name|lats
index|[
name|oldDocID
index|]
expr_stmt|;
name|lons
index|[
name|docID
index|]
operator|=
name|lons
index|[
name|oldDocID
index|]
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  doc="
operator|+
name|docID
operator|+
literal|" lat="
operator|+
name|lats
index|[
name|docID
index|]
operator|+
literal|" lon="
operator|+
name|lons
index|[
name|docID
index|]
operator|+
literal|" (same lat/lon as doc="
operator|+
name|oldDocID
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|lats
index|[
name|docID
index|]
operator|=
name|randomLat
argument_list|()
expr_stmt|;
name|lons
index|[
name|docID
index|]
operator|=
name|randomLon
argument_list|()
expr_stmt|;
name|haveRealDoc
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  doc="
operator|+
name|docID
operator|+
literal|" lat="
operator|+
name|lats
index|[
name|docID
index|]
operator|+
literal|" lon="
operator|+
name|lons
index|[
name|docID
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|verify
argument_list|(
name|lats
argument_list|,
name|lons
argument_list|)
expr_stmt|;
block|}
DECL|field|TOLERANCE
specifier|private
specifier|static
specifier|final
name|double
name|TOLERANCE
init|=
literal|1e-7
decl_stmt|;
DECL|method|verify
specifier|private
specifier|static
name|void
name|verify
parameter_list|(
name|double
index|[]
name|lats
parameter_list|,
name|double
index|[]
name|lons
parameter_list|)
throws|throws
name|Exception
block|{
name|IndexWriterConfig
name|iwc
init|=
name|newIndexWriterConfig
argument_list|()
decl_stmt|;
comment|// Else we can get O(N^2) merging:
name|int
name|mbd
init|=
name|iwc
operator|.
name|getMaxBufferedDocs
argument_list|()
decl_stmt|;
if|if
condition|(
name|mbd
operator|!=
operator|-
literal|1
operator|&&
name|mbd
operator|<
name|lats
operator|.
name|length
operator|/
literal|100
condition|)
block|{
name|iwc
operator|.
name|setMaxBufferedDocs
argument_list|(
name|lats
operator|.
name|length
operator|/
literal|100
argument_list|)
expr_stmt|;
block|}
specifier|final
name|DocValuesFormat
name|dvFormat
init|=
name|getDocValuesFormat
argument_list|()
decl_stmt|;
name|Codec
name|codec
init|=
operator|new
name|Lucene53Codec
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|DocValuesFormat
name|getDocValuesFormatForField
parameter_list|(
name|String
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|.
name|equals
argument_list|(
literal|"point"
argument_list|)
condition|)
block|{
return|return
name|dvFormat
return|;
block|}
else|else
block|{
return|return
name|super
operator|.
name|getDocValuesFormatForField
argument_list|(
name|field
argument_list|)
return|;
block|}
block|}
block|}
decl_stmt|;
name|iwc
operator|.
name|setCodec
argument_list|(
name|codec
argument_list|)
expr_stmt|;
name|Directory
name|dir
decl_stmt|;
if|if
condition|(
name|lats
operator|.
name|length
operator|>
literal|100000
condition|)
block|{
name|dir
operator|=
name|newFSDirectory
argument_list|(
name|createTempDir
argument_list|(
literal|"TestBKDTree"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|dir
operator|=
name|getDirectory
argument_list|()
expr_stmt|;
block|}
name|Set
argument_list|<
name|Integer
argument_list|>
name|deleted
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
comment|// RandomIndexWriter is too slow here:
name|IndexWriter
name|w
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|iwc
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|id
init|=
literal|0
init|;
name|id
operator|<
name|lats
operator|.
name|length
condition|;
name|id
operator|++
control|)
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newStringField
argument_list|(
literal|"id"
argument_list|,
literal|""
operator|+
name|id
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|NumericDocValuesField
argument_list|(
literal|"id"
argument_list|,
name|id
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|Double
operator|.
name|isNaN
argument_list|(
name|lats
index|[
name|id
index|]
argument_list|)
operator|==
literal|false
condition|)
block|{
name|doc
operator|.
name|add
argument_list|(
operator|new
name|BKDPointField
argument_list|(
literal|"point"
argument_list|,
name|lats
index|[
name|id
index|]
argument_list|,
name|lons
index|[
name|id
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
if|if
condition|(
name|id
operator|>
literal|0
operator|&&
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
operator|==
literal|42
condition|)
block|{
name|int
name|idToDelete
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|w
operator|.
name|deleteDocuments
argument_list|(
operator|new
name|Term
argument_list|(
literal|"id"
argument_list|,
literal|""
operator|+
name|idToDelete
argument_list|)
argument_list|)
expr_stmt|;
name|deleted
operator|.
name|add
argument_list|(
name|idToDelete
argument_list|)
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  delete id="
operator|+
name|idToDelete
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|w
operator|.
name|forceMerge
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
specifier|final
name|IndexReader
name|r
init|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|w
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// We can't wrap with "exotic" readers because the BKD query must see the BKDDVFormat:
name|IndexSearcher
name|s
init|=
name|newSearcher
argument_list|(
name|r
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|int
name|numThreads
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|2
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Thread
argument_list|>
name|threads
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|int
name|iters
init|=
name|atLeast
argument_list|(
literal|100
argument_list|)
decl_stmt|;
specifier|final
name|CountDownLatch
name|startingGun
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|AtomicBoolean
name|failed
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numThreads
condition|;
name|i
operator|++
control|)
block|{
name|Thread
name|thread
init|=
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|_run
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|failed
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|_run
parameter_list|()
throws|throws
name|Exception
block|{
name|startingGun
operator|.
name|await
argument_list|()
expr_stmt|;
name|NumericDocValues
name|docIDToID
init|=
name|MultiDocValues
operator|.
name|getNumericValues
argument_list|(
name|r
argument_list|,
literal|"id"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|iter
init|=
literal|0
init|;
name|iter
operator|<
name|iters
operator|&&
name|failed
operator|.
name|get
argument_list|()
operator|==
literal|false
condition|;
name|iter
operator|++
control|)
block|{
name|double
name|lat0
init|=
name|randomLat
argument_list|()
decl_stmt|;
name|double
name|lat1
init|=
name|randomLat
argument_list|()
decl_stmt|;
name|double
name|lon0
init|=
name|randomLon
argument_list|()
decl_stmt|;
name|double
name|lon1
init|=
name|randomLon
argument_list|()
decl_stmt|;
if|if
condition|(
name|lat1
operator|<
name|lat0
condition|)
block|{
name|double
name|x
init|=
name|lat0
decl_stmt|;
name|lat0
operator|=
name|lat1
expr_stmt|;
name|lat1
operator|=
name|x
expr_stmt|;
block|}
name|boolean
name|crossesDateLine
decl_stmt|;
if|if
condition|(
name|lon1
operator|<
name|lon0
condition|)
block|{
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|double
name|x
init|=
name|lon0
decl_stmt|;
name|lon0
operator|=
name|lon1
expr_stmt|;
name|lon1
operator|=
name|x
expr_stmt|;
name|crossesDateLine
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|crossesDateLine
operator|=
literal|true
expr_stmt|;
block|}
block|}
else|else
block|{
name|crossesDateLine
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\nTEST: iter="
operator|+
name|iter
operator|+
literal|" lat="
operator|+
name|lat0
operator|+
literal|" TO "
operator|+
name|lat1
operator|+
literal|" lon="
operator|+
name|lon0
operator|+
literal|" TO "
operator|+
name|lon1
operator|+
literal|" crossesDateLine="
operator|+
name|crossesDateLine
argument_list|)
expr_stmt|;
block|}
name|Query
name|query
decl_stmt|;
comment|// TODO: get poly query working with dateline crossing too (how?)!
if|if
condition|(
name|crossesDateLine
operator|||
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|query
operator|=
operator|new
name|BKDPointInBBoxQuery
argument_list|(
literal|"point"
argument_list|,
name|lat0
argument_list|,
name|lat1
argument_list|,
name|lon0
argument_list|,
name|lon1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|double
index|[]
name|lats
init|=
operator|new
name|double
index|[
literal|5
index|]
decl_stmt|;
name|double
index|[]
name|lons
init|=
operator|new
name|double
index|[
literal|5
index|]
decl_stmt|;
name|lats
index|[
literal|0
index|]
operator|=
name|lat0
expr_stmt|;
name|lons
index|[
literal|0
index|]
operator|=
name|lon0
expr_stmt|;
name|lats
index|[
literal|1
index|]
operator|=
name|lat1
expr_stmt|;
name|lons
index|[
literal|1
index|]
operator|=
name|lon0
expr_stmt|;
name|lats
index|[
literal|2
index|]
operator|=
name|lat1
expr_stmt|;
name|lons
index|[
literal|2
index|]
operator|=
name|lon1
expr_stmt|;
name|lats
index|[
literal|3
index|]
operator|=
name|lat0
expr_stmt|;
name|lons
index|[
literal|3
index|]
operator|=
name|lon1
expr_stmt|;
name|lats
index|[
literal|4
index|]
operator|=
name|lat0
expr_stmt|;
name|lons
index|[
literal|4
index|]
operator|=
name|lon0
expr_stmt|;
name|query
operator|=
operator|new
name|BKDPointInPolygonQuery
argument_list|(
literal|"point"
argument_list|,
name|lats
argument_list|,
name|lons
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  using query: "
operator|+
name|query
argument_list|)
expr_stmt|;
block|}
specifier|final
name|FixedBitSet
name|hits
init|=
operator|new
name|FixedBitSet
argument_list|(
name|r
operator|.
name|maxDoc
argument_list|()
argument_list|)
decl_stmt|;
name|s
operator|.
name|search
argument_list|(
name|query
argument_list|,
operator|new
name|SimpleCollector
argument_list|()
block|{
specifier|private
name|int
name|docBase
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|needsScores
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|doSetNextReader
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|docBase
operator|=
name|context
operator|.
name|docBase
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|collect
parameter_list|(
name|int
name|doc
parameter_list|)
block|{
name|hits
operator|.
name|set
argument_list|(
name|docBase
operator|+
name|doc
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  hitCount: "
operator|+
name|hits
operator|.
name|cardinality
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|docID
init|=
literal|0
init|;
name|docID
operator|<
name|r
operator|.
name|maxDoc
argument_list|()
condition|;
name|docID
operator|++
control|)
block|{
name|int
name|id
init|=
operator|(
name|int
operator|)
name|docIDToID
operator|.
name|get
argument_list|(
name|docID
argument_list|)
decl_stmt|;
name|boolean
name|expected
init|=
name|deleted
operator|.
name|contains
argument_list|(
name|id
argument_list|)
operator|==
literal|false
operator|&&
name|rectContainsPointEnc
argument_list|(
name|lat0
argument_list|,
name|lat1
argument_list|,
name|lon0
argument_list|,
name|lon1
argument_list|,
name|lats
index|[
name|id
index|]
argument_list|,
name|lons
index|[
name|id
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|hits
operator|.
name|get
argument_list|(
name|docID
argument_list|)
operator|!=
name|expected
condition|)
block|{
if|if
condition|(
name|query
operator|instanceof
name|BKDPointInPolygonQuery
operator|&&
operator|(
name|Math
operator|.
name|abs
argument_list|(
name|lat0
operator|-
name|lats
index|[
name|id
index|]
argument_list|)
operator|<
name|TOLERANCE
operator|||
name|Math
operator|.
name|abs
argument_list|(
name|lat1
operator|-
name|lats
index|[
name|id
index|]
argument_list|)
operator|<
name|TOLERANCE
operator|||
name|Math
operator|.
name|abs
argument_list|(
name|lon0
operator|-
name|lons
index|[
name|id
index|]
argument_list|)
operator|<
name|TOLERANCE
operator|||
name|Math
operator|.
name|abs
argument_list|(
name|lon1
operator|-
name|lons
index|[
name|id
index|]
argument_list|)
operator|<
name|TOLERANCE
operator|)
condition|)
block|{
comment|// The poly check quantizes slightly differently, so we allow for boundary cases to disagree
block|}
else|else
block|{
comment|// We do exact quantized comparison so the bbox query should never disagree:
name|fail
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|": iter="
operator|+
name|iter
operator|+
literal|" id="
operator|+
name|id
operator|+
literal|" docID="
operator|+
name|docID
operator|+
literal|" lat="
operator|+
name|lats
index|[
name|id
index|]
operator|+
literal|" lon="
operator|+
name|lons
index|[
name|id
index|]
operator|+
literal|" (bbox: lat="
operator|+
name|lat0
operator|+
literal|" TO "
operator|+
name|lat1
operator|+
literal|" lon="
operator|+
name|lon0
operator|+
literal|" TO "
operator|+
name|lon1
operator|+
literal|") expected "
operator|+
name|expected
operator|+
literal|" but got: "
operator|+
name|hits
operator|.
name|get
argument_list|(
name|docID
argument_list|)
operator|+
literal|" deleted?="
operator|+
name|deleted
operator|.
name|contains
argument_list|(
name|id
argument_list|)
operator|+
literal|" query="
operator|+
name|query
operator|+
literal|" crossesDateLine="
operator|+
name|crossesDateLine
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
decl_stmt|;
name|thread
operator|.
name|setName
argument_list|(
literal|"T"
operator|+
name|i
argument_list|)
expr_stmt|;
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
name|threads
operator|.
name|add
argument_list|(
name|thread
argument_list|)
expr_stmt|;
block|}
name|startingGun
operator|.
name|countDown
argument_list|()
expr_stmt|;
for|for
control|(
name|Thread
name|thread
range|:
name|threads
control|)
block|{
name|thread
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
name|IOUtils
operator|.
name|close
argument_list|(
name|r
argument_list|,
name|dir
argument_list|)
expr_stmt|;
block|}
DECL|method|rectContainsPointEnc
specifier|private
specifier|static
name|boolean
name|rectContainsPointEnc
parameter_list|(
name|double
name|rectLatMin
parameter_list|,
name|double
name|rectLatMax
parameter_list|,
name|double
name|rectLonMin
parameter_list|,
name|double
name|rectLonMax
parameter_list|,
name|double
name|pointLat
parameter_list|,
name|double
name|pointLon
parameter_list|)
block|{
if|if
condition|(
name|Double
operator|.
name|isNaN
argument_list|(
name|pointLat
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|int
name|rectLatMinEnc
init|=
name|BKDTreeWriter
operator|.
name|encodeLat
argument_list|(
name|rectLatMin
argument_list|)
decl_stmt|;
name|int
name|rectLatMaxEnc
init|=
name|BKDTreeWriter
operator|.
name|encodeLat
argument_list|(
name|rectLatMax
argument_list|)
decl_stmt|;
name|int
name|rectLonMinEnc
init|=
name|BKDTreeWriter
operator|.
name|encodeLon
argument_list|(
name|rectLonMin
argument_list|)
decl_stmt|;
name|int
name|rectLonMaxEnc
init|=
name|BKDTreeWriter
operator|.
name|encodeLon
argument_list|(
name|rectLonMax
argument_list|)
decl_stmt|;
name|int
name|pointLatEnc
init|=
name|BKDTreeWriter
operator|.
name|encodeLat
argument_list|(
name|pointLat
argument_list|)
decl_stmt|;
name|int
name|pointLonEnc
init|=
name|BKDTreeWriter
operator|.
name|encodeLon
argument_list|(
name|pointLon
argument_list|)
decl_stmt|;
if|if
condition|(
name|rectLonMin
operator|<
name|rectLonMax
condition|)
block|{
return|return
name|pointLatEnc
operator|>=
name|rectLatMinEnc
operator|&&
name|pointLatEnc
operator|<
name|rectLatMaxEnc
operator|&&
name|pointLonEnc
operator|>=
name|rectLonMinEnc
operator|&&
name|pointLonEnc
operator|<
name|rectLonMaxEnc
return|;
block|}
else|else
block|{
comment|// Rect crosses dateline:
return|return
name|pointLatEnc
operator|>=
name|rectLatMinEnc
operator|&&
name|pointLatEnc
operator|<
name|rectLatMaxEnc
operator|&&
operator|(
name|pointLonEnc
operator|>=
name|rectLonMinEnc
operator|||
name|pointLonEnc
operator|<
name|rectLonMaxEnc
operator|)
return|;
block|}
block|}
DECL|method|randomLat
specifier|private
specifier|static
name|double
name|randomLat
parameter_list|()
block|{
if|if
condition|(
name|smallBBox
condition|)
block|{
return|return
literal|2.0
operator|*
operator|(
name|random
argument_list|()
operator|.
name|nextDouble
argument_list|()
operator|-
literal|0.5
operator|)
return|;
block|}
else|else
block|{
return|return
operator|-
literal|90
operator|+
literal|180.0
operator|*
name|random
argument_list|()
operator|.
name|nextDouble
argument_list|()
return|;
block|}
block|}
DECL|method|randomLon
specifier|private
specifier|static
name|double
name|randomLon
parameter_list|()
block|{
if|if
condition|(
name|smallBBox
condition|)
block|{
return|return
literal|2.0
operator|*
operator|(
name|random
argument_list|()
operator|.
name|nextDouble
argument_list|()
operator|-
literal|0.5
operator|)
return|;
block|}
else|else
block|{
return|return
operator|-
literal|180
operator|+
literal|360.0
operator|*
name|random
argument_list|()
operator|.
name|nextDouble
argument_list|()
return|;
block|}
block|}
DECL|method|testEncodeDecode
specifier|public
name|void
name|testEncodeDecode
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|iters
init|=
name|atLeast
argument_list|(
literal|10000
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|iter
init|=
literal|0
init|;
name|iter
operator|<
name|iters
condition|;
name|iter
operator|++
control|)
block|{
name|double
name|lat
init|=
name|randomLat
argument_list|()
decl_stmt|;
name|double
name|latQuantized
init|=
name|BKDTreeWriter
operator|.
name|decodeLat
argument_list|(
name|BKDTreeWriter
operator|.
name|encodeLat
argument_list|(
name|lat
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|lat
argument_list|,
name|latQuantized
argument_list|,
name|BKDTreeWriter
operator|.
name|TOLERANCE
argument_list|)
expr_stmt|;
name|double
name|lon
init|=
name|randomLon
argument_list|()
decl_stmt|;
name|double
name|lonQuantized
init|=
name|BKDTreeWriter
operator|.
name|decodeLon
argument_list|(
name|BKDTreeWriter
operator|.
name|encodeLon
argument_list|(
name|lon
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|lon
argument_list|,
name|lonQuantized
argument_list|,
name|BKDTreeWriter
operator|.
name|TOLERANCE
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testEncodeDecodeMax
specifier|public
name|void
name|testEncodeDecodeMax
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|x
init|=
name|BKDTreeWriter
operator|.
name|encodeLat
argument_list|(
name|Math
operator|.
name|nextAfter
argument_list|(
literal|90.0
argument_list|,
name|Double
operator|.
name|POSITIVE_INFINITY
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|x
operator|<
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|int
name|y
init|=
name|BKDTreeWriter
operator|.
name|encodeLon
argument_list|(
name|Math
operator|.
name|nextAfter
argument_list|(
literal|180.0
argument_list|,
name|Double
operator|.
name|POSITIVE_INFINITY
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|y
operator|<
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
block|}
DECL|method|testAccountableHasDelegate
specifier|public
name|void
name|testAccountableHasDelegate
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|dir
init|=
name|getDirectory
argument_list|()
decl_stmt|;
name|IndexWriterConfig
name|iwc
init|=
name|newIndexWriterConfig
argument_list|()
decl_stmt|;
name|Codec
name|codec
init|=
name|TestUtil
operator|.
name|alwaysDocValuesFormat
argument_list|(
name|getDocValuesFormat
argument_list|()
argument_list|)
decl_stmt|;
name|iwc
operator|.
name|setCodec
argument_list|(
name|codec
argument_list|)
expr_stmt|;
name|RandomIndexWriter
name|w
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|,
name|iwc
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|BKDPointField
argument_list|(
literal|"field"
argument_list|,
operator|-
literal|18.2861
argument_list|,
literal|147.7
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|IndexReader
name|r
init|=
name|w
operator|.
name|getReader
argument_list|()
decl_stmt|;
comment|// We can't wrap with "exotic" readers because the BKD query must see the BKDDVFormat:
name|IndexSearcher
name|s
init|=
name|newSearcher
argument_list|(
name|r
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// Need to run a query so the DV field is really loaded:
name|TopDocs
name|hits
init|=
name|s
operator|.
name|search
argument_list|(
operator|new
name|BKDPointInBBoxQuery
argument_list|(
literal|"field"
argument_list|,
operator|-
literal|30
argument_list|,
literal|0
argument_list|,
literal|140
argument_list|,
literal|150
argument_list|)
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|hits
operator|.
name|totalHits
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Accountables
operator|.
name|toString
argument_list|(
operator|(
name|Accountable
operator|)
name|r
operator|.
name|leaves
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|reader
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
literal|"delegate"
argument_list|)
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|close
argument_list|(
name|r
argument_list|,
name|w
argument_list|,
name|dir
argument_list|)
expr_stmt|;
block|}
DECL|method|getDocValuesFormat
specifier|private
specifier|static
name|DocValuesFormat
name|getDocValuesFormat
parameter_list|()
block|{
name|int
name|maxPointsInLeaf
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|16
argument_list|,
literal|2048
argument_list|)
decl_stmt|;
name|int
name|maxPointsSortInHeap
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
name|maxPointsInLeaf
argument_list|,
literal|1024
operator|*
literal|1024
argument_list|)
decl_stmt|;
return|return
operator|new
name|BKDTreeDocValuesFormat
argument_list|(
name|maxPointsInLeaf
argument_list|,
name|maxPointsSortInHeap
argument_list|)
return|;
block|}
DECL|method|getDirectory
specifier|private
specifier|static
name|Directory
name|getDirectory
parameter_list|()
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
if|if
condition|(
name|dir
operator|instanceof
name|MockDirectoryWrapper
condition|)
block|{
operator|(
operator|(
name|MockDirectoryWrapper
operator|)
name|dir
operator|)
operator|.
name|setEnableVirusScanner
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
return|return
name|dir
return|;
block|}
block|}
end_class
end_unit
