begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.document
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
package|;
end_package
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|geo
operator|.
name|Polygon
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|PointValues
operator|.
name|Relation
import|;
end_import
begin_comment
comment|/**  * 2D polygon implementation represented as a randomized interval tree of edges.  *<p>  * contains() and crosses() are still O(n), but for most practical polygons   * are much faster than brute force.  *<p>  * Loosely based on the algorithm described in<a href="http://www-ma2.upc.es/geoc/Schirra-pointPolygon.pdf">  * http://www-ma2.upc.es/geoc/Schirra-pointPolygon.pdf</a>.  */
end_comment
begin_comment
comment|// Both Polygon.contains() and Polygon.crossesSlowly() loop all edges, and first check that the edge is within a range.
end_comment
begin_comment
comment|// we just organize the edges to do the same computations on the same subset of edges more efficiently.
end_comment
begin_comment
comment|// TODO: clean this up, call it Polygon2D, and remove all the 2D methods from Polygon?
end_comment
begin_class
DECL|class|LatLonTree
specifier|final
class|class
name|LatLonTree
block|{
DECL|field|holes
specifier|private
specifier|final
name|LatLonTree
index|[]
name|holes
decl_stmt|;
comment|/** minimum latitude of this polygon's bounding box area */
DECL|field|minLat
specifier|final
name|double
name|minLat
decl_stmt|;
comment|/** maximum latitude of this polygon's bounding box area */
DECL|field|maxLat
specifier|final
name|double
name|maxLat
decl_stmt|;
comment|/** minimum longitude of this polygon's bounding box area */
DECL|field|minLon
specifier|final
name|double
name|minLon
decl_stmt|;
comment|/** maximum longitude of this polygon's bounding box area */
DECL|field|maxLon
specifier|final
name|double
name|maxLon
decl_stmt|;
comment|/** root node of our tree */
DECL|field|tree
specifier|final
name|Edge
name|tree
decl_stmt|;
comment|// TODO: "pack" all the gons and holes into one tree with separator.
comment|// the algorithms support this, but we have to be careful.
DECL|method|LatLonTree
name|LatLonTree
parameter_list|(
name|Polygon
name|polygon
parameter_list|,
name|LatLonTree
modifier|...
name|holes
parameter_list|)
block|{
name|this
operator|.
name|holes
operator|=
name|holes
operator|.
name|clone
argument_list|()
expr_stmt|;
name|this
operator|.
name|minLat
operator|=
name|polygon
operator|.
name|minLat
expr_stmt|;
name|this
operator|.
name|maxLat
operator|=
name|polygon
operator|.
name|maxLat
expr_stmt|;
name|this
operator|.
name|minLon
operator|=
name|polygon
operator|.
name|minLon
expr_stmt|;
name|this
operator|.
name|maxLon
operator|=
name|polygon
operator|.
name|maxLon
expr_stmt|;
comment|// create interval tree of edges
name|this
operator|.
name|tree
operator|=
name|createTree
argument_list|(
name|polygon
operator|.
name|getPolyLats
argument_list|()
argument_list|,
name|polygon
operator|.
name|getPolyLons
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**     * Returns true if the point is contained within this polygon.    *<p>    * See<a href="https://www.ecse.rpi.edu/~wrf/Research/Short_Notes/pnpoly.html">    * https://www.ecse.rpi.edu/~wrf/Research/Short_Notes/pnpoly.html</a> for more information.    */
DECL|method|contains
name|boolean
name|contains
parameter_list|(
name|double
name|latitude
parameter_list|,
name|double
name|longitude
parameter_list|)
block|{
comment|// check bounding box
if|if
condition|(
name|latitude
argument_list|<
name|minLat
operator|||
name|latitude
argument_list|>
name|maxLat
operator|||
name|longitude
argument_list|<
name|minLon
operator|||
name|longitude
argument_list|>
name|maxLon
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|tree
operator|.
name|contains
argument_list|(
name|latitude
argument_list|,
name|longitude
argument_list|)
condition|)
block|{
for|for
control|(
name|LatLonTree
name|hole
range|:
name|holes
control|)
block|{
if|if
condition|(
name|hole
operator|.
name|contains
argument_list|(
name|latitude
argument_list|,
name|longitude
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/** Returns relation to the provided rectangle */
DECL|method|relate
name|Relation
name|relate
parameter_list|(
name|double
name|minLat
parameter_list|,
name|double
name|maxLat
parameter_list|,
name|double
name|minLon
parameter_list|,
name|double
name|maxLon
parameter_list|)
block|{
comment|// if the bounding boxes are disjoint then the shape does not cross
if|if
condition|(
name|maxLon
argument_list|<
name|this
operator|.
name|minLon
operator|||
name|minLon
argument_list|>
name|this
operator|.
name|maxLon
operator|||
name|maxLat
argument_list|<
name|this
operator|.
name|minLat
operator|||
name|minLat
argument_list|>
name|this
operator|.
name|maxLat
condition|)
block|{
return|return
name|Relation
operator|.
name|CELL_OUTSIDE_QUERY
return|;
block|}
comment|// if the rectangle fully encloses us, we cross.
if|if
condition|(
name|minLat
operator|<=
name|this
operator|.
name|minLat
operator|&&
name|maxLat
operator|>=
name|this
operator|.
name|maxLat
operator|&&
name|minLon
operator|<=
name|this
operator|.
name|minLon
operator|&&
name|maxLon
operator|>=
name|this
operator|.
name|maxLon
condition|)
block|{
return|return
name|Relation
operator|.
name|CELL_CROSSES_QUERY
return|;
block|}
comment|// check any holes
for|for
control|(
name|LatLonTree
name|hole
range|:
name|holes
control|)
block|{
name|Relation
name|holeRelation
init|=
name|hole
operator|.
name|relate
argument_list|(
name|minLat
argument_list|,
name|maxLat
argument_list|,
name|minLon
argument_list|,
name|maxLon
argument_list|)
decl_stmt|;
if|if
condition|(
name|holeRelation
operator|==
name|Relation
operator|.
name|CELL_CROSSES_QUERY
condition|)
block|{
return|return
name|Relation
operator|.
name|CELL_CROSSES_QUERY
return|;
block|}
elseif|else
if|if
condition|(
name|holeRelation
operator|==
name|Relation
operator|.
name|CELL_INSIDE_QUERY
condition|)
block|{
return|return
name|Relation
operator|.
name|CELL_OUTSIDE_QUERY
return|;
block|}
block|}
comment|// check each corner: if< 4 are present, its cheaper than crossesSlowly
name|int
name|numCorners
init|=
name|numberOfCorners
argument_list|(
name|minLat
argument_list|,
name|maxLat
argument_list|,
name|minLon
argument_list|,
name|maxLon
argument_list|)
decl_stmt|;
if|if
condition|(
name|numCorners
operator|==
literal|4
condition|)
block|{
if|if
condition|(
name|tree
operator|.
name|crosses
argument_list|(
name|minLat
argument_list|,
name|maxLat
argument_list|,
name|minLon
argument_list|,
name|maxLon
argument_list|)
condition|)
block|{
return|return
name|Relation
operator|.
name|CELL_CROSSES_QUERY
return|;
block|}
return|return
name|Relation
operator|.
name|CELL_INSIDE_QUERY
return|;
block|}
elseif|else
if|if
condition|(
name|numCorners
operator|>
literal|0
condition|)
block|{
return|return
name|Relation
operator|.
name|CELL_CROSSES_QUERY
return|;
block|}
comment|// we cross
if|if
condition|(
name|tree
operator|.
name|crosses
argument_list|(
name|minLat
argument_list|,
name|maxLat
argument_list|,
name|minLon
argument_list|,
name|maxLon
argument_list|)
condition|)
block|{
return|return
name|Relation
operator|.
name|CELL_CROSSES_QUERY
return|;
block|}
return|return
name|Relation
operator|.
name|CELL_OUTSIDE_QUERY
return|;
block|}
comment|// returns 0, 4, or something in between
DECL|method|numberOfCorners
specifier|private
name|int
name|numberOfCorners
parameter_list|(
name|double
name|minLat
parameter_list|,
name|double
name|maxLat
parameter_list|,
name|double
name|minLon
parameter_list|,
name|double
name|maxLon
parameter_list|)
block|{
name|int
name|containsCount
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|contains
argument_list|(
name|minLat
argument_list|,
name|minLon
argument_list|)
condition|)
block|{
name|containsCount
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|contains
argument_list|(
name|minLat
argument_list|,
name|maxLon
argument_list|)
condition|)
block|{
name|containsCount
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|containsCount
operator|==
literal|1
condition|)
block|{
return|return
name|containsCount
return|;
block|}
if|if
condition|(
name|contains
argument_list|(
name|maxLat
argument_list|,
name|maxLon
argument_list|)
condition|)
block|{
name|containsCount
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|containsCount
operator|==
literal|2
condition|)
block|{
return|return
name|containsCount
return|;
block|}
if|if
condition|(
name|contains
argument_list|(
name|maxLat
argument_list|,
name|minLon
argument_list|)
condition|)
block|{
name|containsCount
operator|++
expr_stmt|;
block|}
return|return
name|containsCount
return|;
block|}
comment|/** Helper for multipolygon logic: returns true if any of the supplied polygons contain the point */
DECL|method|contains
specifier|static
name|boolean
name|contains
parameter_list|(
name|LatLonTree
index|[]
name|polygons
parameter_list|,
name|double
name|latitude
parameter_list|,
name|double
name|longitude
parameter_list|)
block|{
for|for
control|(
name|LatLonTree
name|polygon
range|:
name|polygons
control|)
block|{
if|if
condition|(
name|polygon
operator|.
name|contains
argument_list|(
name|latitude
argument_list|,
name|longitude
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/** Returns the multipolygon relation for the rectangle */
DECL|method|relate
specifier|static
name|Relation
name|relate
parameter_list|(
name|LatLonTree
index|[]
name|polygons
parameter_list|,
name|double
name|minLat
parameter_list|,
name|double
name|maxLat
parameter_list|,
name|double
name|minLon
parameter_list|,
name|double
name|maxLon
parameter_list|)
block|{
for|for
control|(
name|LatLonTree
name|polygon
range|:
name|polygons
control|)
block|{
name|Relation
name|relation
init|=
name|polygon
operator|.
name|relate
argument_list|(
name|minLat
argument_list|,
name|maxLat
argument_list|,
name|minLon
argument_list|,
name|maxLon
argument_list|)
decl_stmt|;
if|if
condition|(
name|relation
operator|!=
name|Relation
operator|.
name|CELL_OUTSIDE_QUERY
condition|)
block|{
comment|// note: we optimize for non-overlapping multipolygons. so if we cross one,
comment|// we won't keep iterating to try to find a contains.
return|return
name|relation
return|;
block|}
block|}
return|return
name|Relation
operator|.
name|CELL_OUTSIDE_QUERY
return|;
block|}
comment|/** Builds a tree from multipolygon */
DECL|method|build
specifier|static
name|LatLonTree
index|[]
name|build
parameter_list|(
name|Polygon
modifier|...
name|polygons
parameter_list|)
block|{
comment|// TODO: use one tree with separators (carefully!)
name|LatLonTree
name|trees
index|[]
init|=
operator|new
name|LatLonTree
index|[
name|polygons
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|trees
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Polygon
name|gon
init|=
name|polygons
index|[
name|i
index|]
decl_stmt|;
name|Polygon
name|gonHoles
index|[]
init|=
name|gon
operator|.
name|getHoles
argument_list|()
decl_stmt|;
name|LatLonTree
name|holes
index|[]
init|=
operator|new
name|LatLonTree
index|[
name|gonHoles
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|holes
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|holes
index|[
name|j
index|]
operator|=
operator|new
name|LatLonTree
argument_list|(
name|gonHoles
index|[
name|j
index|]
argument_list|)
expr_stmt|;
block|}
name|trees
index|[
name|i
index|]
operator|=
operator|new
name|LatLonTree
argument_list|(
name|gon
argument_list|,
name|holes
argument_list|)
expr_stmt|;
block|}
return|return
name|trees
return|;
block|}
comment|/**     * Internal tree node: represents polygon edge from lat1,lon1 to lat2,lon2.    * The sort value is {@code low}, which is the minimum latitude of the edge.    * {@code max} stores the maximum latitude of this edge or any children.    */
DECL|class|Edge
specifier|static
specifier|final
class|class
name|Edge
block|{
comment|// lat-lon pair (in original order) of the two vertices
DECL|field|lat1
DECL|field|lat2
specifier|final
name|double
name|lat1
decl_stmt|,
name|lat2
decl_stmt|;
DECL|field|lon1
DECL|field|lon2
specifier|final
name|double
name|lon1
decl_stmt|,
name|lon2
decl_stmt|;
comment|/** min of this edge */
DECL|field|low
specifier|final
name|double
name|low
decl_stmt|;
comment|/** max latitude of this edge or any children */
DECL|field|max
name|double
name|max
decl_stmt|;
comment|/** left child edge, or null */
DECL|field|left
name|Edge
name|left
decl_stmt|;
comment|/** right child edge, or null */
DECL|field|right
name|Edge
name|right
decl_stmt|;
DECL|method|Edge
name|Edge
parameter_list|(
name|double
name|lat1
parameter_list|,
name|double
name|lon1
parameter_list|,
name|double
name|lat2
parameter_list|,
name|double
name|lon2
parameter_list|,
name|double
name|low
parameter_list|,
name|double
name|max
parameter_list|)
block|{
name|this
operator|.
name|lat1
operator|=
name|lat1
expr_stmt|;
name|this
operator|.
name|lon1
operator|=
name|lon1
expr_stmt|;
name|this
operator|.
name|lat2
operator|=
name|lat2
expr_stmt|;
name|this
operator|.
name|lon2
operator|=
name|lon2
expr_stmt|;
name|this
operator|.
name|low
operator|=
name|low
expr_stmt|;
name|this
operator|.
name|max
operator|=
name|max
expr_stmt|;
block|}
comment|/**       * Returns true if the point crosses this edge subtree an odd number of times      *<p>      * See<a href="https://www.ecse.rpi.edu/~wrf/Research/Short_Notes/pnpoly.html">      * https://www.ecse.rpi.edu/~wrf/Research/Short_Notes/pnpoly.html</a> for more information.      */
comment|// ported to java from https://www.ecse.rpi.edu/~wrf/Research/Short_Notes/pnpoly.html
comment|// original code under the BSD license (https://www.ecse.rpi.edu/~wrf/Research/Short_Notes/pnpoly.html#License%20to%20Use)
comment|//
comment|// Copyright (c) 1970-2003, Wm. Randolph Franklin
comment|//
comment|// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
comment|// documentation files (the "Software"), to deal in the Software without restriction, including without limitation
comment|// the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and
comment|// to permit persons to whom the Software is furnished to do so, subject to the following conditions:
comment|//
comment|// 1. Redistributions of source code must retain the above copyright
comment|//    notice, this list of conditions and the following disclaimers.
comment|// 2. Redistributions in binary form must reproduce the above copyright
comment|//    notice in the documentation and/or other materials provided with
comment|//    the distribution.
comment|// 3. The name of W. Randolph Franklin may not be used to endorse or
comment|//    promote products derived from this Software without specific
comment|//    prior written permission.
comment|//
comment|// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED
comment|// TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
comment|// THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
comment|// CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
comment|// IN THE SOFTWARE.
DECL|method|contains
name|boolean
name|contains
parameter_list|(
name|double
name|latitude
parameter_list|,
name|double
name|longitude
parameter_list|)
block|{
comment|// crossings algorithm is an odd-even algorithm, so we descend the tree xor'ing results along our path
name|boolean
name|res
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|latitude
operator|<=
name|max
condition|)
block|{
if|if
condition|(
name|lat1
operator|>
name|latitude
operator|!=
name|lat2
operator|>
name|latitude
condition|)
block|{
if|if
condition|(
name|longitude
operator|<
operator|(
name|lon1
operator|-
name|lon2
operator|)
operator|*
operator|(
name|latitude
operator|-
name|lat2
operator|)
operator|/
operator|(
name|lat1
operator|-
name|lat2
operator|)
operator|+
name|lon2
condition|)
block|{
name|res
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|left
operator|!=
literal|null
condition|)
block|{
name|res
operator|^=
name|left
operator|.
name|contains
argument_list|(
name|latitude
argument_list|,
name|longitude
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|right
operator|!=
literal|null
operator|&&
name|latitude
operator|>=
name|low
condition|)
block|{
name|res
operator|^=
name|right
operator|.
name|contains
argument_list|(
name|latitude
argument_list|,
name|longitude
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|res
return|;
block|}
comment|/** Returns true if the box crosses any edge in this edge subtree */
DECL|method|crosses
name|boolean
name|crosses
parameter_list|(
name|double
name|minLat
parameter_list|,
name|double
name|maxLat
parameter_list|,
name|double
name|minLon
parameter_list|,
name|double
name|maxLon
parameter_list|)
block|{
comment|// we just have to cross one edge to answer the question, so we descend the tree and return when we do.
if|if
condition|(
name|minLat
operator|<=
name|max
condition|)
block|{
comment|// we compute line intersections of every polygon edge with every box line.
comment|// if we find one, return true.
comment|// for each box line (AB):
comment|//   for each poly line (CD):
comment|//     intersects = orient(C,D,A) * orient(C,D,B)<= 0&& orient(A,B,C) * orient(A,B,D)<= 0
name|double
name|cy
init|=
name|lat1
decl_stmt|;
name|double
name|dy
init|=
name|lat2
decl_stmt|;
name|double
name|cx
init|=
name|lon1
decl_stmt|;
name|double
name|dx
init|=
name|lon2
decl_stmt|;
comment|// optimization: see if the rectangle is outside of the "bounding box" of the polyline at all
comment|// if not, don't waste our time trying more complicated stuff
name|boolean
name|outside
init|=
operator|(
name|cy
operator|<
name|minLat
operator|&&
name|dy
operator|<
name|minLat
operator|)
operator|||
operator|(
name|cy
operator|>
name|maxLat
operator|&&
name|dy
operator|>
name|maxLat
operator|)
operator|||
operator|(
name|cx
operator|<
name|minLon
operator|&&
name|dx
operator|<
name|minLon
operator|)
operator|||
operator|(
name|cx
operator|>
name|maxLon
operator|&&
name|dx
operator|>
name|maxLon
operator|)
decl_stmt|;
if|if
condition|(
name|outside
operator|==
literal|false
condition|)
block|{
comment|// does box's top edge intersect polyline?
comment|// ax = minLon, bx = maxLon, ay = maxLat, by = maxLat
if|if
condition|(
name|orient
argument_list|(
name|cx
argument_list|,
name|cy
argument_list|,
name|dx
argument_list|,
name|dy
argument_list|,
name|minLon
argument_list|,
name|maxLat
argument_list|)
operator|*
name|orient
argument_list|(
name|cx
argument_list|,
name|cy
argument_list|,
name|dx
argument_list|,
name|dy
argument_list|,
name|maxLon
argument_list|,
name|maxLat
argument_list|)
operator|<=
literal|0
operator|&&
name|orient
argument_list|(
name|minLon
argument_list|,
name|maxLat
argument_list|,
name|maxLon
argument_list|,
name|maxLat
argument_list|,
name|cx
argument_list|,
name|cy
argument_list|)
operator|*
name|orient
argument_list|(
name|minLon
argument_list|,
name|maxLat
argument_list|,
name|maxLon
argument_list|,
name|maxLat
argument_list|,
name|dx
argument_list|,
name|dy
argument_list|)
operator|<=
literal|0
condition|)
block|{
return|return
literal|true
return|;
block|}
comment|// does box's right edge intersect polyline?
comment|// ax = maxLon, bx = maxLon, ay = maxLat, by = minLat
if|if
condition|(
name|orient
argument_list|(
name|cx
argument_list|,
name|cy
argument_list|,
name|dx
argument_list|,
name|dy
argument_list|,
name|maxLon
argument_list|,
name|maxLat
argument_list|)
operator|*
name|orient
argument_list|(
name|cx
argument_list|,
name|cy
argument_list|,
name|dx
argument_list|,
name|dy
argument_list|,
name|maxLon
argument_list|,
name|minLat
argument_list|)
operator|<=
literal|0
operator|&&
name|orient
argument_list|(
name|maxLon
argument_list|,
name|maxLat
argument_list|,
name|maxLon
argument_list|,
name|minLat
argument_list|,
name|cx
argument_list|,
name|cy
argument_list|)
operator|*
name|orient
argument_list|(
name|maxLon
argument_list|,
name|maxLat
argument_list|,
name|maxLon
argument_list|,
name|minLat
argument_list|,
name|dx
argument_list|,
name|dy
argument_list|)
operator|<=
literal|0
condition|)
block|{
return|return
literal|true
return|;
block|}
comment|// does box's bottom edge intersect polyline?
comment|// ax = maxLon, bx = minLon, ay = minLat, by = minLat
if|if
condition|(
name|orient
argument_list|(
name|cx
argument_list|,
name|cy
argument_list|,
name|dx
argument_list|,
name|dy
argument_list|,
name|maxLon
argument_list|,
name|minLat
argument_list|)
operator|*
name|orient
argument_list|(
name|cx
argument_list|,
name|cy
argument_list|,
name|dx
argument_list|,
name|dy
argument_list|,
name|minLon
argument_list|,
name|minLat
argument_list|)
operator|<=
literal|0
operator|&&
name|orient
argument_list|(
name|maxLon
argument_list|,
name|minLat
argument_list|,
name|minLon
argument_list|,
name|minLat
argument_list|,
name|cx
argument_list|,
name|cy
argument_list|)
operator|*
name|orient
argument_list|(
name|maxLon
argument_list|,
name|minLat
argument_list|,
name|minLon
argument_list|,
name|minLat
argument_list|,
name|dx
argument_list|,
name|dy
argument_list|)
operator|<=
literal|0
condition|)
block|{
return|return
literal|true
return|;
block|}
comment|// does box's left edge intersect polyline?
comment|// ax = minLon, bx = minLon, ay = minLat, by = maxLat
if|if
condition|(
name|orient
argument_list|(
name|cx
argument_list|,
name|cy
argument_list|,
name|dx
argument_list|,
name|dy
argument_list|,
name|minLon
argument_list|,
name|minLat
argument_list|)
operator|*
name|orient
argument_list|(
name|cx
argument_list|,
name|cy
argument_list|,
name|dx
argument_list|,
name|dy
argument_list|,
name|minLon
argument_list|,
name|maxLat
argument_list|)
operator|<=
literal|0
operator|&&
name|orient
argument_list|(
name|minLon
argument_list|,
name|minLat
argument_list|,
name|minLon
argument_list|,
name|maxLat
argument_list|,
name|cx
argument_list|,
name|cy
argument_list|)
operator|*
name|orient
argument_list|(
name|minLon
argument_list|,
name|minLat
argument_list|,
name|minLon
argument_list|,
name|maxLat
argument_list|,
name|dx
argument_list|,
name|dy
argument_list|)
operator|<=
literal|0
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
if|if
condition|(
name|left
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|left
operator|.
name|crosses
argument_list|(
name|minLat
argument_list|,
name|maxLat
argument_list|,
name|minLon
argument_list|,
name|maxLon
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
if|if
condition|(
name|right
operator|!=
literal|null
operator|&&
name|maxLat
operator|>=
name|low
condition|)
block|{
if|if
condition|(
name|right
operator|.
name|crosses
argument_list|(
name|minLat
argument_list|,
name|maxLat
argument_list|,
name|minLon
argument_list|,
name|maxLon
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
block|}
comment|/**     * Creates an edge interval tree from a set of polygon vertices.    * @return root node of the tree.    */
DECL|method|createTree
specifier|private
specifier|static
name|Edge
name|createTree
parameter_list|(
name|double
name|polyLats
index|[]
parameter_list|,
name|double
name|polyLons
index|[]
parameter_list|)
block|{
comment|// edge order is deterministic and reproducible based on the double values.
comment|// TODO: make a real balanced tree instead :)
name|List
argument_list|<
name|Integer
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|(
name|polyLats
operator|.
name|length
operator|-
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|polyLats
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
name|Collections
operator|.
name|shuffle
argument_list|(
name|list
argument_list|,
operator|new
name|Random
argument_list|(
name|Arrays
operator|.
name|hashCode
argument_list|(
name|polyLats
argument_list|)
operator|^
name|Arrays
operator|.
name|hashCode
argument_list|(
name|polyLons
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Edge
name|root
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
range|:
name|list
control|)
block|{
name|double
name|lat1
init|=
name|polyLats
index|[
name|i
operator|-
literal|1
index|]
decl_stmt|;
name|double
name|lon1
init|=
name|polyLons
index|[
name|i
operator|-
literal|1
index|]
decl_stmt|;
name|double
name|lat2
init|=
name|polyLats
index|[
name|i
index|]
decl_stmt|;
name|double
name|lon2
init|=
name|polyLons
index|[
name|i
index|]
decl_stmt|;
name|Edge
name|newNode
init|=
operator|new
name|Edge
argument_list|(
name|lat1
argument_list|,
name|lon1
argument_list|,
name|lat2
argument_list|,
name|lon2
argument_list|,
name|Math
operator|.
name|min
argument_list|(
name|lat1
argument_list|,
name|lat2
argument_list|)
argument_list|,
name|Math
operator|.
name|max
argument_list|(
name|lat1
argument_list|,
name|lat2
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|root
operator|==
literal|null
condition|)
block|{
comment|// add first node
name|root
operator|=
name|newNode
expr_stmt|;
block|}
else|else
block|{
comment|// traverse tree to find home for new node, along the path updating all parent's max value along the way.
name|Edge
name|node
init|=
name|root
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|node
operator|.
name|max
operator|=
name|Math
operator|.
name|max
argument_list|(
name|node
operator|.
name|max
argument_list|,
name|newNode
operator|.
name|max
argument_list|)
expr_stmt|;
if|if
condition|(
name|newNode
operator|.
name|low
operator|<
name|node
operator|.
name|low
condition|)
block|{
if|if
condition|(
name|node
operator|.
name|left
operator|==
literal|null
condition|)
block|{
name|node
operator|.
name|left
operator|=
name|newNode
expr_stmt|;
break|break;
block|}
name|node
operator|=
name|node
operator|.
name|left
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|node
operator|.
name|right
operator|==
literal|null
condition|)
block|{
name|node
operator|.
name|right
operator|=
name|newNode
expr_stmt|;
break|break;
block|}
name|node
operator|=
name|node
operator|.
name|right
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|root
return|;
block|}
comment|/**    * Returns a positive value if points a, b, and c are arranged in counter-clockwise order,    * negative value if clockwise, zero if collinear.    */
comment|// see the "Orient2D" method described here:
comment|// http://www.cs.berkeley.edu/~jrs/meshpapers/robnotes.pdf
comment|// https://www.cs.cmu.edu/~quake/robust.html
comment|// Note that this one does not yet have the floating point tricks to be exact!
DECL|method|orient
specifier|private
specifier|static
name|int
name|orient
parameter_list|(
name|double
name|ax
parameter_list|,
name|double
name|ay
parameter_list|,
name|double
name|bx
parameter_list|,
name|double
name|by
parameter_list|,
name|double
name|cx
parameter_list|,
name|double
name|cy
parameter_list|)
block|{
name|double
name|v1
init|=
operator|(
name|bx
operator|-
name|ax
operator|)
operator|*
operator|(
name|cy
operator|-
name|ay
operator|)
decl_stmt|;
name|double
name|v2
init|=
operator|(
name|cx
operator|-
name|ax
operator|)
operator|*
operator|(
name|by
operator|-
name|ay
operator|)
decl_stmt|;
if|if
condition|(
name|v1
operator|>
name|v2
condition|)
block|{
return|return
literal|1
return|;
block|}
elseif|else
if|if
condition|(
name|v1
operator|<
name|v2
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
else|else
block|{
return|return
literal|0
return|;
block|}
block|}
block|}
end_class
end_unit
