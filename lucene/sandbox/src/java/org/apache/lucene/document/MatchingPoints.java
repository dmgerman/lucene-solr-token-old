begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.document
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|PointValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|DocIdSetIterator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BitSet
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BitSetIterator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|FixedBitSet
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|SparseFixedBitSet
import|;
end_import
begin_comment
comment|/**  * Accumulates matching hits for points.  *<p>  * Add matches with ({@link #add(int)}) and call {@link #iterator()} for  * an iterator over the results.   *<p>  * This implementation currently optimizes bitset structure (sparse vs dense)  * and {@link DocIdSetIterator#cost()} (cardinality) based on index statistics.  * This API may change as point values evolves.  *   * @lucene.experimental  */
end_comment
begin_class
DECL|class|MatchingPoints
specifier|final
class|class
name|MatchingPoints
block|{
comment|/** bitset we collect into */
DECL|field|bits
specifier|private
specifier|final
name|BitSet
name|bits
decl_stmt|;
comment|/** number of documents containing a value for the points field */
DECL|field|docCount
specifier|private
specifier|final
name|int
name|docCount
decl_stmt|;
comment|/** number of values indexed for the points field */
DECL|field|numPoints
specifier|private
specifier|final
name|long
name|numPoints
decl_stmt|;
comment|/** number of documents in the index segment */
DECL|field|maxDoc
specifier|private
specifier|final
name|int
name|maxDoc
decl_stmt|;
comment|/** counter of hits seen */
DECL|field|counter
specifier|private
name|long
name|counter
decl_stmt|;
comment|/**    * Creates a new accumulator.    * @param reader reader to collect point matches from    * @param field field name.    */
DECL|method|MatchingPoints
specifier|public
name|MatchingPoints
parameter_list|(
name|LeafReader
name|reader
parameter_list|,
name|String
name|field
parameter_list|)
block|{
name|maxDoc
operator|=
name|reader
operator|.
name|maxDoc
argument_list|()
expr_stmt|;
name|PointValues
name|values
init|=
name|reader
operator|.
name|getPointValues
argument_list|()
decl_stmt|;
if|if
condition|(
name|values
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"the query is missing null checks"
argument_list|)
throw|;
block|}
name|docCount
operator|=
name|values
operator|.
name|getDocCount
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|numPoints
operator|=
name|values
operator|.
name|size
argument_list|(
name|field
argument_list|)
expr_stmt|;
comment|// heuristic: if the field is really sparse, use a sparse impl
if|if
condition|(
name|docCount
operator|>=
literal|0
operator|&&
name|docCount
operator|*
literal|100L
operator|<
name|maxDoc
condition|)
block|{
name|bits
operator|=
operator|new
name|SparseFixedBitSet
argument_list|(
name|maxDoc
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|bits
operator|=
operator|new
name|FixedBitSet
argument_list|(
name|maxDoc
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Record a matching docid.    *<p>    * NOTE: doc IDs do not need to be provided in any order.    */
DECL|method|add
specifier|public
name|void
name|add
parameter_list|(
name|int
name|doc
parameter_list|)
block|{
name|bits
operator|.
name|set
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|counter
operator|++
expr_stmt|;
block|}
comment|/**    * Returns an iterator over the recorded matches.    */
DECL|method|iterator
specifier|public
name|DocIdSetIterator
name|iterator
parameter_list|()
block|{
comment|// if single-valued (docCount == numPoints), then this is exact
comment|// otherwise its approximate based on field stats
return|return
operator|new
name|BitSetIterator
argument_list|(
name|bits
argument_list|,
call|(
name|long
call|)
argument_list|(
name|counter
operator|*
operator|(
name|docCount
operator|/
operator|(
name|double
operator|)
name|numPoints
operator|)
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class
end_unit
