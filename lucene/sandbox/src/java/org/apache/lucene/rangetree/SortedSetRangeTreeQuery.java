begin_unit
begin_package
DECL|package|org.apache.lucene.rangetree
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|rangetree
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|SortedSetDocValuesField
import|;
end_import
begin_comment
comment|// javadocs
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReaderContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SortedNumericDocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SortedSetDocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|ConstantScoreScorer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|ConstantScoreWeight
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|DocIdSet
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|DocIdSetIterator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Scorer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Weight
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|ArrayUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|ToStringUtils
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_comment
comment|/** Finds all previously indexed values that fall within the specified {@link BytesRef} range.  *  *<p>The field must be indexed with {@link RangeTreeDocValuesFormat}, and {@link SortedSetDocValuesField} added per document.  *  * @lucene.experimental */
end_comment
begin_class
DECL|class|SortedSetRangeTreeQuery
specifier|public
class|class
name|SortedSetRangeTreeQuery
extends|extends
name|Query
block|{
DECL|field|field
specifier|final
name|String
name|field
decl_stmt|;
DECL|field|minValue
specifier|final
name|BytesRef
name|minValue
decl_stmt|;
DECL|field|maxValue
specifier|final
name|BytesRef
name|maxValue
decl_stmt|;
DECL|field|minInclusive
specifier|final
name|boolean
name|minInclusive
decl_stmt|;
DECL|field|maxInclusive
specifier|final
name|boolean
name|maxInclusive
decl_stmt|;
comment|/** Matches all values in the specified {@link BytesRef} range. */
DECL|method|SortedSetRangeTreeQuery
specifier|public
name|SortedSetRangeTreeQuery
parameter_list|(
name|String
name|field
parameter_list|,
name|BytesRef
name|minValue
parameter_list|,
name|boolean
name|minInclusive
parameter_list|,
name|BytesRef
name|maxValue
parameter_list|,
name|boolean
name|maxInclusive
parameter_list|)
block|{
name|this
operator|.
name|field
operator|=
name|field
expr_stmt|;
name|this
operator|.
name|minInclusive
operator|=
name|minInclusive
expr_stmt|;
name|this
operator|.
name|minValue
operator|=
name|minValue
expr_stmt|;
name|this
operator|.
name|maxInclusive
operator|=
name|maxInclusive
expr_stmt|;
name|this
operator|.
name|maxValue
operator|=
name|maxValue
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createWeight
specifier|public
name|Weight
name|createWeight
parameter_list|(
name|IndexSearcher
name|searcher
parameter_list|,
name|boolean
name|needsScores
parameter_list|)
throws|throws
name|IOException
block|{
comment|// I don't use RandomAccessWeight here: it's no good to approximate with "match all docs"; this is an inverted structure and should be
comment|// used in the first pass:
return|return
operator|new
name|ConstantScoreWeight
argument_list|(
name|this
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Scorer
name|scorer
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|LeafReader
name|reader
init|=
name|context
operator|.
name|reader
argument_list|()
decl_stmt|;
specifier|final
name|SortedSetDocValues
name|ssdv
init|=
name|reader
operator|.
name|getSortedSetDocValues
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|ssdv
operator|==
literal|null
condition|)
block|{
comment|// No docs in this segment had this field
return|return
literal|null
return|;
block|}
if|if
condition|(
name|ssdv
operator|instanceof
name|RangeTreeSortedSetDocValues
operator|==
literal|false
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"field \""
operator|+
name|field
operator|+
literal|"\" was not indexed with RangeTreeDocValuesFormat: got: "
operator|+
name|ssdv
argument_list|)
throw|;
block|}
name|RangeTreeSortedSetDocValues
name|treeDV
init|=
operator|(
name|RangeTreeSortedSetDocValues
operator|)
name|ssdv
decl_stmt|;
name|RangeTreeReader
name|tree
init|=
name|treeDV
operator|.
name|getRangeTreeReader
argument_list|()
decl_stmt|;
comment|/*         for(int i=0;i<treeDV.getValueCount();i++) {           System.out.println("  ord " + i + " -> " + treeDV.lookupOrd(i));         }         */
comment|// lower
specifier|final
name|long
name|minOrdIncl
decl_stmt|;
if|if
condition|(
name|minValue
operator|==
literal|null
condition|)
block|{
name|minOrdIncl
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
name|long
name|ord
init|=
name|ssdv
operator|.
name|lookupTerm
argument_list|(
name|minValue
argument_list|)
decl_stmt|;
if|if
condition|(
name|ord
operator|>=
literal|0
condition|)
block|{
comment|// Exact match
if|if
condition|(
name|minInclusive
condition|)
block|{
name|minOrdIncl
operator|=
name|ord
expr_stmt|;
block|}
else|else
block|{
name|minOrdIncl
operator|=
name|ord
operator|+
literal|1
expr_stmt|;
block|}
block|}
else|else
block|{
name|minOrdIncl
operator|=
operator|-
name|ord
operator|-
literal|1
expr_stmt|;
block|}
block|}
comment|// upper
specifier|final
name|long
name|maxOrdIncl
decl_stmt|;
if|if
condition|(
name|maxValue
operator|==
literal|null
condition|)
block|{
name|maxOrdIncl
operator|=
name|Long
operator|.
name|MAX_VALUE
expr_stmt|;
block|}
else|else
block|{
name|long
name|ord
init|=
name|ssdv
operator|.
name|lookupTerm
argument_list|(
name|maxValue
argument_list|)
decl_stmt|;
if|if
condition|(
name|ord
operator|>=
literal|0
condition|)
block|{
comment|// Exact match
if|if
condition|(
name|maxInclusive
condition|)
block|{
name|maxOrdIncl
operator|=
name|ord
expr_stmt|;
block|}
else|else
block|{
name|maxOrdIncl
operator|=
name|ord
operator|-
literal|1
expr_stmt|;
block|}
block|}
else|else
block|{
name|maxOrdIncl
operator|=
operator|-
name|ord
operator|-
literal|2
expr_stmt|;
block|}
block|}
if|if
condition|(
name|maxOrdIncl
operator|<
name|minOrdIncl
condition|)
block|{
comment|// This can happen when the requested range lies entirely between 2 adjacent ords:
return|return
literal|null
return|;
block|}
comment|//System.out.println(reader + ": ORD: " + minOrdIncl + "-" + maxOrdIncl + "; " + minValue + " - " + maxValue);
comment|// Just a "view" of only the ords from the SSDV, as an SNDV.  Maybe we
comment|// have this view implemented somewhere else already?  It's not so bad that
comment|// we are inefficient here (making 2 passes over the ords): this is only
comment|// used in at most 2 leaf cells (the boundary cells).
name|SortedNumericDocValues
name|ords
init|=
operator|new
name|SortedNumericDocValues
argument_list|()
block|{
specifier|private
name|long
index|[]
name|ords
init|=
operator|new
name|long
index|[
literal|2
index|]
decl_stmt|;
specifier|private
name|int
name|count
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|setDocument
parameter_list|(
name|int
name|doc
parameter_list|)
block|{
name|ssdv
operator|.
name|setDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|long
name|ord
decl_stmt|;
name|count
operator|=
literal|0
expr_stmt|;
while|while
condition|(
operator|(
name|ord
operator|=
name|ssdv
operator|.
name|nextOrd
argument_list|()
operator|)
operator|!=
name|SortedSetDocValues
operator|.
name|NO_MORE_ORDS
condition|)
block|{
if|if
condition|(
name|count
operator|==
name|ords
operator|.
name|length
condition|)
block|{
name|ords
operator|=
name|ArrayUtil
operator|.
name|grow
argument_list|(
name|ords
argument_list|,
name|count
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
name|ords
index|[
name|count
operator|++
index|]
operator|=
name|ord
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|count
parameter_list|()
block|{
return|return
name|count
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|valueAt
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|ords
index|[
name|index
index|]
return|;
block|}
block|}
decl_stmt|;
name|DocIdSet
name|result
init|=
name|tree
operator|.
name|intersect
argument_list|(
name|minOrdIncl
argument_list|,
name|maxOrdIncl
argument_list|,
name|ords
argument_list|,
name|context
operator|.
name|reader
argument_list|()
operator|.
name|maxDoc
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|DocIdSetIterator
name|disi
init|=
name|result
operator|.
name|iterator
argument_list|()
decl_stmt|;
return|return
operator|new
name|ConstantScoreScorer
argument_list|(
name|this
argument_list|,
name|score
argument_list|()
argument_list|,
name|disi
argument_list|)
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|hash
init|=
name|super
operator|.
name|hashCode
argument_list|()
decl_stmt|;
if|if
condition|(
name|minValue
operator|!=
literal|null
condition|)
name|hash
operator|+=
name|minValue
operator|.
name|hashCode
argument_list|()
operator|^
literal|0x14fa55fb
expr_stmt|;
if|if
condition|(
name|maxValue
operator|!=
literal|null
condition|)
name|hash
operator|+=
name|maxValue
operator|.
name|hashCode
argument_list|()
operator|^
literal|0x733fa5fe
expr_stmt|;
return|return
name|hash
operator|+
operator|(
name|Boolean
operator|.
name|valueOf
argument_list|(
name|minInclusive
argument_list|)
operator|.
name|hashCode
argument_list|()
operator|^
literal|0x14fa55fb
operator|)
operator|+
operator|(
name|Boolean
operator|.
name|valueOf
argument_list|(
name|maxInclusive
argument_list|)
operator|.
name|hashCode
argument_list|()
operator|^
literal|0x733fa5fe
operator|)
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|other
parameter_list|)
block|{
if|if
condition|(
name|super
operator|.
name|equals
argument_list|(
name|other
argument_list|)
condition|)
block|{
specifier|final
name|SortedSetRangeTreeQuery
name|q
init|=
operator|(
name|SortedSetRangeTreeQuery
operator|)
name|other
decl_stmt|;
return|return
operator|(
operator|(
name|q
operator|.
name|minValue
operator|==
literal|null
condition|?
name|minValue
operator|==
literal|null
else|:
name|q
operator|.
name|minValue
operator|.
name|equals
argument_list|(
name|minValue
argument_list|)
operator|)
operator|&&
operator|(
name|q
operator|.
name|maxValue
operator|==
literal|null
condition|?
name|maxValue
operator|==
literal|null
else|:
name|q
operator|.
name|maxValue
operator|.
name|equals
argument_list|(
name|maxValue
argument_list|)
operator|)
operator|&&
name|minInclusive
operator|==
name|q
operator|.
name|minInclusive
operator|&&
name|maxInclusive
operator|==
name|q
operator|.
name|maxInclusive
operator|)
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|(
name|String
name|field
parameter_list|)
block|{
specifier|final
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|field
operator|.
name|equals
argument_list|(
name|field
argument_list|)
operator|==
literal|false
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"field="
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|field
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|append
argument_list|(
name|minInclusive
condition|?
literal|'['
else|:
literal|'{'
argument_list|)
operator|.
name|append
argument_list|(
operator|(
name|minValue
operator|==
literal|null
operator|)
condition|?
literal|"*"
else|:
name|minValue
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" TO "
argument_list|)
operator|.
name|append
argument_list|(
operator|(
name|maxValue
operator|==
literal|null
operator|)
condition|?
literal|"*"
else|:
name|maxValue
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
name|maxInclusive
condition|?
literal|']'
else|:
literal|'}'
argument_list|)
operator|.
name|append
argument_list|(
name|ToStringUtils
operator|.
name|boost
argument_list|(
name|getBoost
argument_list|()
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class
end_unit
