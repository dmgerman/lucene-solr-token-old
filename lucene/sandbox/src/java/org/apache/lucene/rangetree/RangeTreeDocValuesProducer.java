begin_unit
begin_package
DECL|package|org.apache.lucene.rangetree
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|rangetree
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|CodecUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|DocValuesProducer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|BinaryDocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|FieldInfo
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexFileNames
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|NumericDocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SegmentReadState
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SortedDocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SortedNumericDocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SortedSetDocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|ChecksumIndexInput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexInput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Accountable
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Accountables
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Bits
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|RamUsageEstimator
import|;
end_import
begin_class
DECL|class|RangeTreeDocValuesProducer
class|class
name|RangeTreeDocValuesProducer
extends|extends
name|DocValuesProducer
block|{
DECL|field|treeReaders
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|RangeTreeReader
argument_list|>
name|treeReaders
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|fieldToIndexFPs
specifier|private
specifier|final
name|Map
argument_list|<
name|Integer
argument_list|,
name|Long
argument_list|>
name|fieldToIndexFPs
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|datIn
specifier|private
specifier|final
name|IndexInput
name|datIn
decl_stmt|;
DECL|field|ramBytesUsed
specifier|private
specifier|final
name|AtomicLong
name|ramBytesUsed
decl_stmt|;
DECL|field|maxDoc
specifier|private
specifier|final
name|int
name|maxDoc
decl_stmt|;
DECL|field|delegate
specifier|private
specifier|final
name|DocValuesProducer
name|delegate
decl_stmt|;
DECL|field|merging
specifier|private
specifier|final
name|boolean
name|merging
decl_stmt|;
DECL|method|RangeTreeDocValuesProducer
specifier|public
name|RangeTreeDocValuesProducer
parameter_list|(
name|DocValuesProducer
name|delegate
parameter_list|,
name|SegmentReadState
name|state
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|metaFileName
init|=
name|IndexFileNames
operator|.
name|segmentFileName
argument_list|(
name|state
operator|.
name|segmentInfo
operator|.
name|name
argument_list|,
name|state
operator|.
name|segmentSuffix
argument_list|,
name|RangeTreeDocValuesFormat
operator|.
name|META_EXTENSION
argument_list|)
decl_stmt|;
name|ChecksumIndexInput
name|metaIn
init|=
name|state
operator|.
name|directory
operator|.
name|openChecksumInput
argument_list|(
name|metaFileName
argument_list|,
name|state
operator|.
name|context
argument_list|)
decl_stmt|;
name|CodecUtil
operator|.
name|checkIndexHeader
argument_list|(
name|metaIn
argument_list|,
name|RangeTreeDocValuesFormat
operator|.
name|META_CODEC_NAME
argument_list|,
name|RangeTreeDocValuesFormat
operator|.
name|META_VERSION_START
argument_list|,
name|RangeTreeDocValuesFormat
operator|.
name|META_VERSION_CURRENT
argument_list|,
name|state
operator|.
name|segmentInfo
operator|.
name|getId
argument_list|()
argument_list|,
name|state
operator|.
name|segmentSuffix
argument_list|)
expr_stmt|;
name|int
name|fieldCount
init|=
name|metaIn
operator|.
name|readVInt
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fieldCount
condition|;
name|i
operator|++
control|)
block|{
name|int
name|fieldNumber
init|=
name|metaIn
operator|.
name|readVInt
argument_list|()
decl_stmt|;
name|long
name|indexFP
init|=
name|metaIn
operator|.
name|readVLong
argument_list|()
decl_stmt|;
name|fieldToIndexFPs
operator|.
name|put
argument_list|(
name|fieldNumber
argument_list|,
name|indexFP
argument_list|)
expr_stmt|;
block|}
name|CodecUtil
operator|.
name|checkFooter
argument_list|(
name|metaIn
argument_list|)
expr_stmt|;
name|metaIn
operator|.
name|close
argument_list|()
expr_stmt|;
name|String
name|datFileName
init|=
name|IndexFileNames
operator|.
name|segmentFileName
argument_list|(
name|state
operator|.
name|segmentInfo
operator|.
name|name
argument_list|,
name|state
operator|.
name|segmentSuffix
argument_list|,
name|RangeTreeDocValuesFormat
operator|.
name|DATA_EXTENSION
argument_list|)
decl_stmt|;
name|datIn
operator|=
name|state
operator|.
name|directory
operator|.
name|openInput
argument_list|(
name|datFileName
argument_list|,
name|state
operator|.
name|context
argument_list|)
expr_stmt|;
name|CodecUtil
operator|.
name|checkIndexHeader
argument_list|(
name|datIn
argument_list|,
name|RangeTreeDocValuesFormat
operator|.
name|DATA_CODEC_NAME
argument_list|,
name|RangeTreeDocValuesFormat
operator|.
name|DATA_VERSION_START
argument_list|,
name|RangeTreeDocValuesFormat
operator|.
name|DATA_VERSION_CURRENT
argument_list|,
name|state
operator|.
name|segmentInfo
operator|.
name|getId
argument_list|()
argument_list|,
name|state
operator|.
name|segmentSuffix
argument_list|)
expr_stmt|;
name|ramBytesUsed
operator|=
operator|new
name|AtomicLong
argument_list|(
name|RamUsageEstimator
operator|.
name|shallowSizeOfInstance
argument_list|(
name|getClass
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|maxDoc
operator|=
name|state
operator|.
name|segmentInfo
operator|.
name|maxDoc
argument_list|()
expr_stmt|;
name|this
operator|.
name|delegate
operator|=
name|delegate
expr_stmt|;
name|merging
operator|=
literal|false
expr_stmt|;
block|}
comment|// clone for merge: we don't hang onto the RangeTrees we load
DECL|method|RangeTreeDocValuesProducer
name|RangeTreeDocValuesProducer
parameter_list|(
name|RangeTreeDocValuesProducer
name|orig
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|Thread
operator|.
name|holdsLock
argument_list|(
name|orig
argument_list|)
assert|;
name|datIn
operator|=
name|orig
operator|.
name|datIn
operator|.
name|clone
argument_list|()
expr_stmt|;
name|ramBytesUsed
operator|=
operator|new
name|AtomicLong
argument_list|(
name|orig
operator|.
name|ramBytesUsed
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|delegate
operator|=
name|orig
operator|.
name|delegate
operator|.
name|getMergeInstance
argument_list|()
expr_stmt|;
name|fieldToIndexFPs
operator|.
name|putAll
argument_list|(
name|orig
operator|.
name|fieldToIndexFPs
argument_list|)
expr_stmt|;
name|treeReaders
operator|.
name|putAll
argument_list|(
name|orig
operator|.
name|treeReaders
argument_list|)
expr_stmt|;
name|merging
operator|=
literal|true
expr_stmt|;
name|maxDoc
operator|=
name|orig
operator|.
name|maxDoc
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getSortedNumeric
specifier|public
specifier|synchronized
name|SortedNumericDocValues
name|getSortedNumeric
parameter_list|(
name|FieldInfo
name|field
parameter_list|)
throws|throws
name|IOException
block|{
name|RangeTreeReader
name|treeReader
init|=
name|treeReaders
operator|.
name|get
argument_list|(
name|field
operator|.
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|treeReader
operator|==
literal|null
condition|)
block|{
comment|// Lazy load
name|Long
name|fp
init|=
name|fieldToIndexFPs
operator|.
name|get
argument_list|(
name|field
operator|.
name|number
argument_list|)
decl_stmt|;
comment|// FieldInfos checks has already ensured we are a DV field of this type, and Codec ensures
comment|// this DVFormat was used at write time:
assert|assert
name|fp
operator|!=
literal|null
assert|;
comment|// LUCENE-6697: never do real IOPs with the original IndexInput because search
comment|// threads can be concurrently cloning it:
name|IndexInput
name|clone
init|=
name|datIn
operator|.
name|clone
argument_list|()
decl_stmt|;
name|clone
operator|.
name|seek
argument_list|(
name|fp
argument_list|)
expr_stmt|;
name|treeReader
operator|=
operator|new
name|RangeTreeReader
argument_list|(
name|clone
argument_list|)
expr_stmt|;
comment|// Only hang onto the reader when we are not merging:
if|if
condition|(
name|merging
operator|==
literal|false
condition|)
block|{
name|treeReaders
operator|.
name|put
argument_list|(
name|field
operator|.
name|name
argument_list|,
name|treeReader
argument_list|)
expr_stmt|;
name|ramBytesUsed
operator|.
name|addAndGet
argument_list|(
name|treeReader
operator|.
name|ramBytesUsed
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|RangeTreeSortedNumericDocValues
argument_list|(
name|treeReader
argument_list|,
name|delegate
operator|.
name|getSortedNumeric
argument_list|(
name|field
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|IOUtils
operator|.
name|close
argument_list|(
name|datIn
argument_list|,
name|delegate
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|checkIntegrity
specifier|public
name|void
name|checkIntegrity
parameter_list|()
throws|throws
name|IOException
block|{
name|CodecUtil
operator|.
name|checksumEntireFile
argument_list|(
name|datIn
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getNumeric
specifier|public
name|NumericDocValues
name|getNumeric
parameter_list|(
name|FieldInfo
name|field
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|getBinary
specifier|public
name|BinaryDocValues
name|getBinary
parameter_list|(
name|FieldInfo
name|field
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|getSorted
specifier|public
name|SortedDocValues
name|getSorted
parameter_list|(
name|FieldInfo
name|field
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|getSortedSet
specifier|public
specifier|synchronized
name|SortedSetDocValues
name|getSortedSet
parameter_list|(
name|FieldInfo
name|field
parameter_list|)
throws|throws
name|IOException
block|{
name|RangeTreeReader
name|treeReader
init|=
name|treeReaders
operator|.
name|get
argument_list|(
name|field
operator|.
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|treeReader
operator|==
literal|null
condition|)
block|{
comment|// Lazy load
name|Long
name|fp
init|=
name|fieldToIndexFPs
operator|.
name|get
argument_list|(
name|field
operator|.
name|number
argument_list|)
decl_stmt|;
comment|// FieldInfos checks has already ensured we are a DV field of this type, and Codec ensures
comment|// this DVFormat was used at write time:
assert|assert
name|fp
operator|!=
literal|null
assert|;
comment|// LUCENE-6697: never do real IOPs with the original IndexInput because search
comment|// threads can be concurrently cloning it:
name|IndexInput
name|clone
init|=
name|datIn
operator|.
name|clone
argument_list|()
decl_stmt|;
name|clone
operator|.
name|seek
argument_list|(
name|fp
argument_list|)
expr_stmt|;
name|treeReader
operator|=
operator|new
name|RangeTreeReader
argument_list|(
name|clone
argument_list|)
expr_stmt|;
comment|// Only hang onto the reader when we are not merging:
if|if
condition|(
name|merging
operator|==
literal|false
condition|)
block|{
name|treeReaders
operator|.
name|put
argument_list|(
name|field
operator|.
name|name
argument_list|,
name|treeReader
argument_list|)
expr_stmt|;
name|ramBytesUsed
operator|.
name|addAndGet
argument_list|(
name|treeReader
operator|.
name|ramBytesUsed
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|RangeTreeSortedSetDocValues
argument_list|(
name|treeReader
argument_list|,
name|delegate
operator|.
name|getSortedSet
argument_list|(
name|field
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getDocsWithField
specifier|public
name|Bits
name|getDocsWithField
parameter_list|(
name|FieldInfo
name|field
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|delegate
operator|.
name|getDocsWithField
argument_list|(
name|field
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getChildResources
specifier|public
specifier|synchronized
name|Collection
argument_list|<
name|Accountable
argument_list|>
name|getChildResources
parameter_list|()
block|{
name|List
argument_list|<
name|Accountable
argument_list|>
name|resources
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|RangeTreeReader
argument_list|>
name|ent
range|:
name|treeReaders
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|resources
operator|.
name|add
argument_list|(
name|Accountables
operator|.
name|namedAccountable
argument_list|(
literal|"field "
operator|+
name|ent
operator|.
name|getKey
argument_list|()
argument_list|,
name|ent
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|resources
operator|.
name|add
argument_list|(
name|Accountables
operator|.
name|namedAccountable
argument_list|(
literal|"delegate"
argument_list|,
name|delegate
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|resources
return|;
block|}
annotation|@
name|Override
DECL|method|getMergeInstance
specifier|public
specifier|synchronized
name|DocValuesProducer
name|getMergeInstance
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|RangeTreeDocValuesProducer
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|ramBytesUsed
specifier|public
name|long
name|ramBytesUsed
parameter_list|()
block|{
return|return
name|ramBytesUsed
operator|.
name|get
argument_list|()
operator|+
name|delegate
operator|.
name|ramBytesUsed
argument_list|()
return|;
block|}
block|}
end_class
end_unit
