begin_unit
begin_package
DECL|package|org.apache.lucene.codecs.idversion
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|idversion
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|PostingsEnum
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_class
DECL|class|SinglePostingsEnum
class|class
name|SinglePostingsEnum
extends|extends
name|PostingsEnum
block|{
DECL|field|doc
specifier|private
name|int
name|doc
decl_stmt|;
DECL|field|pos
specifier|private
name|int
name|pos
decl_stmt|;
DECL|field|singleDocID
specifier|private
name|int
name|singleDocID
decl_stmt|;
DECL|field|version
specifier|private
name|long
name|version
decl_stmt|;
DECL|field|payload
specifier|private
specifier|final
name|BytesRef
name|payload
decl_stmt|;
DECL|method|SinglePostingsEnum
specifier|public
name|SinglePostingsEnum
parameter_list|()
block|{
name|payload
operator|=
operator|new
name|BytesRef
argument_list|(
literal|8
argument_list|)
expr_stmt|;
name|payload
operator|.
name|length
operator|=
literal|8
expr_stmt|;
block|}
comment|/** For reuse */
DECL|method|reset
specifier|public
name|void
name|reset
parameter_list|(
name|int
name|singleDocID
parameter_list|,
name|long
name|version
parameter_list|)
block|{
name|doc
operator|=
operator|-
literal|1
expr_stmt|;
name|this
operator|.
name|singleDocID
operator|=
name|singleDocID
expr_stmt|;
name|this
operator|.
name|version
operator|=
name|version
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|nextDoc
specifier|public
name|int
name|nextDoc
parameter_list|()
block|{
if|if
condition|(
name|doc
operator|==
operator|-
literal|1
condition|)
block|{
name|doc
operator|=
name|singleDocID
expr_stmt|;
block|}
else|else
block|{
name|doc
operator|=
name|NO_MORE_DOCS
expr_stmt|;
block|}
name|pos
operator|=
operator|-
literal|1
expr_stmt|;
return|return
name|doc
return|;
block|}
annotation|@
name|Override
DECL|method|docID
specifier|public
name|int
name|docID
parameter_list|()
block|{
return|return
name|doc
return|;
block|}
annotation|@
name|Override
DECL|method|advance
specifier|public
name|int
name|advance
parameter_list|(
name|int
name|target
parameter_list|)
block|{
if|if
condition|(
name|doc
operator|==
operator|-
literal|1
operator|&&
name|target
operator|<=
name|singleDocID
condition|)
block|{
name|doc
operator|=
name|singleDocID
expr_stmt|;
name|pos
operator|=
operator|-
literal|1
expr_stmt|;
block|}
else|else
block|{
name|doc
operator|=
name|NO_MORE_DOCS
expr_stmt|;
block|}
return|return
name|doc
return|;
block|}
annotation|@
name|Override
DECL|method|cost
specifier|public
name|long
name|cost
parameter_list|()
block|{
return|return
literal|1
return|;
block|}
annotation|@
name|Override
DECL|method|freq
specifier|public
name|int
name|freq
parameter_list|()
block|{
return|return
literal|1
return|;
block|}
annotation|@
name|Override
DECL|method|nextPosition
specifier|public
name|int
name|nextPosition
parameter_list|()
block|{
assert|assert
name|pos
operator|==
operator|-
literal|1
assert|;
name|pos
operator|=
literal|0
expr_stmt|;
name|IDVersionPostingsFormat
operator|.
name|longToBytes
argument_list|(
name|version
argument_list|,
name|payload
argument_list|)
expr_stmt|;
return|return
name|pos
return|;
block|}
annotation|@
name|Override
DECL|method|getPayload
specifier|public
name|BytesRef
name|getPayload
parameter_list|()
block|{
return|return
name|payload
return|;
block|}
annotation|@
name|Override
DECL|method|startOffset
specifier|public
name|int
name|startOffset
parameter_list|()
block|{
return|return
operator|-
literal|1
return|;
block|}
annotation|@
name|Override
DECL|method|endOffset
specifier|public
name|int
name|endOffset
parameter_list|()
block|{
return|return
operator|-
literal|1
return|;
block|}
block|}
end_class
end_unit
