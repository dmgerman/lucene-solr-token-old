begin_unit
begin_package
DECL|package|org.apache.lucene.bkdtree
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|bkdtree
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SortedNumericDocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|DocIdSet
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|ByteArrayDataInput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexInput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Accountable
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|DocIdSetBuilder
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|RamUsageEstimator
import|;
end_import
begin_comment
comment|/** Handles intersection of a shape with a BKD tree previously written with {@link BKDTreeWriter}.  *  * @lucene.experimental */
end_comment
begin_class
DECL|class|BKDTreeReader
specifier|final
class|class
name|BKDTreeReader
implements|implements
name|Accountable
block|{
DECL|field|splitValues
specifier|final
specifier|private
name|int
index|[]
name|splitValues
decl_stmt|;
DECL|field|leafNodeOffset
specifier|final
specifier|private
name|int
name|leafNodeOffset
decl_stmt|;
DECL|field|leafBlockFPs
specifier|final
specifier|private
name|long
index|[]
name|leafBlockFPs
decl_stmt|;
DECL|field|maxDoc
specifier|final
name|int
name|maxDoc
decl_stmt|;
DECL|field|in
specifier|final
name|IndexInput
name|in
decl_stmt|;
DECL|enum|Relation
DECL|enum constant|CELL_INSIDE_SHAPE
DECL|enum constant|SHAPE_CROSSES_CELL
DECL|enum constant|SHAPE_OUTSIDE_CELL
enum|enum
name|Relation
block|{
name|CELL_INSIDE_SHAPE
block|,
name|SHAPE_CROSSES_CELL
block|,
name|SHAPE_OUTSIDE_CELL
block|}
empty_stmt|;
DECL|interface|LatLonFilter
interface|interface
name|LatLonFilter
block|{
comment|// TODO: move DVs/encoding out on top: this method should just take a docID
DECL|method|accept
name|boolean
name|accept
parameter_list|(
name|double
name|lat
parameter_list|,
name|double
name|lon
parameter_list|)
function_decl|;
comment|// TODO: move DVs/encoding out on top: this method should take ints and do its own decode
DECL|method|compare
name|Relation
name|compare
parameter_list|(
name|double
name|latMin
parameter_list|,
name|double
name|latMax
parameter_list|,
name|double
name|lonMin
parameter_list|,
name|double
name|lonMax
parameter_list|)
function_decl|;
block|}
DECL|method|BKDTreeReader
specifier|public
name|BKDTreeReader
parameter_list|(
name|IndexInput
name|in
parameter_list|,
name|int
name|maxDoc
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Read index:
name|int
name|numLeaves
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
name|leafNodeOffset
operator|=
name|numLeaves
expr_stmt|;
comment|// Tree is fully balanced binary tree, so number of nodes = numLeaves-1, except our nodeIDs are 1-based (splitValues[0] is unused):
name|splitValues
operator|=
operator|new
name|int
index|[
name|numLeaves
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numLeaves
condition|;
name|i
operator|++
control|)
block|{
name|splitValues
index|[
name|i
index|]
operator|=
name|in
operator|.
name|readInt
argument_list|()
expr_stmt|;
block|}
name|leafBlockFPs
operator|=
operator|new
name|long
index|[
name|numLeaves
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numLeaves
condition|;
name|i
operator|++
control|)
block|{
name|leafBlockFPs
index|[
name|i
index|]
operator|=
name|in
operator|.
name|readVLong
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|maxDoc
operator|=
name|maxDoc
expr_stmt|;
name|this
operator|.
name|in
operator|=
name|in
expr_stmt|;
block|}
DECL|class|QueryState
specifier|private
specifier|static
specifier|final
class|class
name|QueryState
block|{
DECL|field|in
specifier|final
name|IndexInput
name|in
decl_stmt|;
DECL|field|scratch
name|byte
index|[]
name|scratch
init|=
operator|new
name|byte
index|[
literal|16
index|]
decl_stmt|;
DECL|field|scratchReader
specifier|final
name|ByteArrayDataInput
name|scratchReader
init|=
operator|new
name|ByteArrayDataInput
argument_list|(
name|scratch
argument_list|)
decl_stmt|;
DECL|field|docs
specifier|final
name|DocIdSetBuilder
name|docs
decl_stmt|;
DECL|field|latMinEnc
specifier|final
name|int
name|latMinEnc
decl_stmt|;
DECL|field|latMaxEnc
specifier|final
name|int
name|latMaxEnc
decl_stmt|;
DECL|field|lonMinEnc
specifier|final
name|int
name|lonMinEnc
decl_stmt|;
DECL|field|lonMaxEnc
specifier|final
name|int
name|lonMaxEnc
decl_stmt|;
DECL|field|latLonFilter
specifier|final
name|LatLonFilter
name|latLonFilter
decl_stmt|;
DECL|field|sndv
specifier|final
name|SortedNumericDocValues
name|sndv
decl_stmt|;
DECL|method|QueryState
specifier|public
name|QueryState
parameter_list|(
name|IndexInput
name|in
parameter_list|,
name|int
name|maxDoc
parameter_list|,
name|int
name|latMinEnc
parameter_list|,
name|int
name|latMaxEnc
parameter_list|,
name|int
name|lonMinEnc
parameter_list|,
name|int
name|lonMaxEnc
parameter_list|,
name|LatLonFilter
name|latLonFilter
parameter_list|,
name|SortedNumericDocValues
name|sndv
parameter_list|)
block|{
name|this
operator|.
name|in
operator|=
name|in
expr_stmt|;
name|this
operator|.
name|docs
operator|=
operator|new
name|DocIdSetBuilder
argument_list|(
name|maxDoc
argument_list|)
expr_stmt|;
name|this
operator|.
name|latMinEnc
operator|=
name|latMinEnc
expr_stmt|;
name|this
operator|.
name|latMaxEnc
operator|=
name|latMaxEnc
expr_stmt|;
name|this
operator|.
name|lonMinEnc
operator|=
name|lonMinEnc
expr_stmt|;
name|this
operator|.
name|lonMaxEnc
operator|=
name|lonMaxEnc
expr_stmt|;
name|this
operator|.
name|latLonFilter
operator|=
name|latLonFilter
expr_stmt|;
name|this
operator|.
name|sndv
operator|=
name|sndv
expr_stmt|;
block|}
block|}
comment|// TODO: move DVs/encoding out on top: this method should take ints, and encode should be done up above
DECL|method|intersect
specifier|public
name|DocIdSet
name|intersect
parameter_list|(
name|double
name|latMin
parameter_list|,
name|double
name|latMax
parameter_list|,
name|double
name|lonMin
parameter_list|,
name|double
name|lonMax
parameter_list|,
name|LatLonFilter
name|filter
parameter_list|,
name|SortedNumericDocValues
name|sndv
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|BKDTreeWriter
operator|.
name|validLat
argument_list|(
name|latMin
argument_list|)
operator|==
literal|false
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"invalid latMin: "
operator|+
name|latMin
argument_list|)
throw|;
block|}
if|if
condition|(
name|BKDTreeWriter
operator|.
name|validLat
argument_list|(
name|latMax
argument_list|)
operator|==
literal|false
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"invalid latMax: "
operator|+
name|latMax
argument_list|)
throw|;
block|}
if|if
condition|(
name|BKDTreeWriter
operator|.
name|validLon
argument_list|(
name|lonMin
argument_list|)
operator|==
literal|false
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"invalid lonMin: "
operator|+
name|lonMin
argument_list|)
throw|;
block|}
if|if
condition|(
name|BKDTreeWriter
operator|.
name|validLon
argument_list|(
name|lonMax
argument_list|)
operator|==
literal|false
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"invalid lonMax: "
operator|+
name|lonMax
argument_list|)
throw|;
block|}
name|int
name|latMinEnc
init|=
name|BKDTreeWriter
operator|.
name|encodeLat
argument_list|(
name|latMin
argument_list|)
decl_stmt|;
name|int
name|latMaxEnc
init|=
name|BKDTreeWriter
operator|.
name|encodeLat
argument_list|(
name|latMax
argument_list|)
decl_stmt|;
name|int
name|lonMinEnc
init|=
name|BKDTreeWriter
operator|.
name|encodeLon
argument_list|(
name|lonMin
argument_list|)
decl_stmt|;
name|int
name|lonMaxEnc
init|=
name|BKDTreeWriter
operator|.
name|encodeLon
argument_list|(
name|lonMax
argument_list|)
decl_stmt|;
name|QueryState
name|state
init|=
operator|new
name|QueryState
argument_list|(
name|in
operator|.
name|clone
argument_list|()
argument_list|,
name|maxDoc
argument_list|,
name|latMinEnc
argument_list|,
name|latMaxEnc
argument_list|,
name|lonMinEnc
argument_list|,
name|lonMaxEnc
argument_list|,
name|filter
argument_list|,
name|sndv
argument_list|)
decl_stmt|;
name|int
name|hitCount
init|=
name|intersect
argument_list|(
name|state
argument_list|,
literal|1
argument_list|,
name|BKDTreeWriter
operator|.
name|encodeLat
argument_list|(
operator|-
literal|90.0
argument_list|)
argument_list|,
name|BKDTreeWriter
operator|.
name|encodeLat
argument_list|(
name|Math
operator|.
name|nextAfter
argument_list|(
literal|90.0
argument_list|,
name|Double
operator|.
name|POSITIVE_INFINITY
argument_list|)
argument_list|)
argument_list|,
name|BKDTreeWriter
operator|.
name|encodeLon
argument_list|(
operator|-
literal|180.0
argument_list|)
argument_list|,
name|BKDTreeWriter
operator|.
name|encodeLon
argument_list|(
name|Math
operator|.
name|nextAfter
argument_list|(
literal|180.0
argument_list|,
name|Double
operator|.
name|POSITIVE_INFINITY
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
comment|// NOTE: hitCount is an over-estimate in the multi-valued case:
return|return
name|state
operator|.
name|docs
operator|.
name|build
argument_list|(
name|hitCount
argument_list|)
return|;
block|}
comment|/** Fast path: this is called when the query rect fully encompasses all cells under this node. */
DECL|method|addAll
specifier|private
name|int
name|addAll
parameter_list|(
name|QueryState
name|state
parameter_list|,
name|int
name|nodeID
parameter_list|)
throws|throws
name|IOException
block|{
comment|//long latRange = (long) cellLatMaxEnc - (long) cellLatMinEnc;
comment|//long lonRange = (long) cellLonMaxEnc - (long) cellLonMinEnc;
if|if
condition|(
name|nodeID
operator|>=
name|leafNodeOffset
condition|)
block|{
comment|/*       System.out.println("A: " + BKDTreeWriter.decodeLat(cellLatMinEnc)                          + " " + BKDTreeWriter.decodeLat(cellLatMaxEnc)                          + " " + BKDTreeWriter.decodeLon(cellLonMinEnc)                          + " " + BKDTreeWriter.decodeLon(cellLonMaxEnc));       */
comment|// Leaf node
name|long
name|fp
init|=
name|leafBlockFPs
index|[
name|nodeID
operator|-
name|leafNodeOffset
index|]
decl_stmt|;
comment|//System.out.println("    leaf nodeID=" + nodeID + " vs leafNodeOffset=" + leafNodeOffset + " fp=" + fp);
if|if
condition|(
name|fp
operator|==
literal|0
condition|)
block|{
comment|// Dead end node (adversary case):
return|return
literal|0
return|;
block|}
name|state
operator|.
name|in
operator|.
name|seek
argument_list|(
name|fp
argument_list|)
expr_stmt|;
comment|//System.out.println("    seek to leafFP=" + fp);
comment|// How many points are stored in this leaf cell:
name|int
name|count
init|=
name|state
operator|.
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
name|state
operator|.
name|docs
operator|.
name|grow
argument_list|(
name|count
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|int
name|docID
init|=
name|state
operator|.
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|state
operator|.
name|docs
operator|.
name|add
argument_list|(
name|docID
argument_list|)
expr_stmt|;
block|}
return|return
name|count
return|;
block|}
else|else
block|{
name|int
name|splitValue
init|=
name|splitValues
index|[
name|nodeID
index|]
decl_stmt|;
if|if
condition|(
name|splitValue
operator|==
name|Integer
operator|.
name|MAX_VALUE
condition|)
block|{
comment|// Dead end node (adversary case):
return|return
literal|0
return|;
block|}
comment|//System.out.println("  splitValue=" + splitValue);
comment|//System.out.println("  addAll: inner");
name|int
name|count
init|=
name|addAll
argument_list|(
name|state
argument_list|,
literal|2
operator|*
name|nodeID
argument_list|)
decl_stmt|;
name|count
operator|+=
name|addAll
argument_list|(
name|state
argument_list|,
literal|2
operator|*
name|nodeID
operator|+
literal|1
argument_list|)
expr_stmt|;
comment|//System.out.println("  addAll: return count=" + count);
return|return
name|count
return|;
block|}
block|}
DECL|method|intersect
specifier|private
name|int
name|intersect
parameter_list|(
name|QueryState
name|state
parameter_list|,
name|int
name|nodeID
parameter_list|,
name|int
name|cellLatMinEnc
parameter_list|,
name|int
name|cellLatMaxEnc
parameter_list|,
name|int
name|cellLonMinEnc
parameter_list|,
name|int
name|cellLonMaxEnc
parameter_list|)
throws|throws
name|IOException
block|{
comment|// 2.06 sec -> 1.52 sec for 225 OSM London queries:
if|if
condition|(
name|state
operator|.
name|latLonFilter
operator|!=
literal|null
condition|)
block|{
comment|// Only call the filter when the current cell does not fully contain the bbox:
if|if
condition|(
name|cellLatMinEnc
operator|>
name|state
operator|.
name|latMinEnc
operator|||
name|cellLatMaxEnc
argument_list|<
name|state
operator|.
name|latMaxEnc
operator|||
name|cellLonMinEnc
argument_list|>
name|state
operator|.
name|lonMinEnc
operator|||
name|cellLonMaxEnc
operator|<
name|state
operator|.
name|lonMaxEnc
condition|)
block|{
name|Relation
name|r
init|=
name|state
operator|.
name|latLonFilter
operator|.
name|compare
argument_list|(
name|BKDTreeWriter
operator|.
name|decodeLat
argument_list|(
name|cellLatMinEnc
argument_list|)
argument_list|,
name|BKDTreeWriter
operator|.
name|decodeLat
argument_list|(
name|cellLatMaxEnc
argument_list|)
argument_list|,
name|BKDTreeWriter
operator|.
name|decodeLon
argument_list|(
name|cellLonMinEnc
argument_list|)
argument_list|,
name|BKDTreeWriter
operator|.
name|decodeLon
argument_list|(
name|cellLonMaxEnc
argument_list|)
argument_list|)
decl_stmt|;
comment|// System.out.println("BKD.intersect cellLat=" + BKDTreeWriter.decodeLat(cellLatMinEnc) + " TO " + BKDTreeWriter.decodeLat(cellLatMaxEnc) + ", cellLon=" + BKDTreeWriter.decodeLon(cellLonMinEnc) + " TO " + BKDTreeWriter.decodeLon(cellLonMaxEnc) + " compare=" + r);
if|if
condition|(
name|r
operator|==
name|Relation
operator|.
name|SHAPE_OUTSIDE_CELL
condition|)
block|{
comment|// This cell is fully outside of the query shape: stop recursing
return|return
literal|0
return|;
block|}
elseif|else
if|if
condition|(
name|r
operator|==
name|Relation
operator|.
name|CELL_INSIDE_SHAPE
condition|)
block|{
comment|// This cell is fully inside of the query shape: recursively add all points in this cell without filtering
return|return
name|addAll
argument_list|(
name|state
argument_list|,
name|nodeID
argument_list|)
return|;
block|}
else|else
block|{
comment|// The cell crosses the shape boundary, so we fall through and do full filtering
block|}
block|}
comment|// TODO: clean this up: the bbox case should also just be a filter, and we should assert filter != null at the start
block|}
elseif|else
if|if
condition|(
name|state
operator|.
name|latMinEnc
operator|<=
name|cellLatMinEnc
operator|&&
name|state
operator|.
name|latMaxEnc
operator|>=
name|cellLatMaxEnc
operator|&&
name|state
operator|.
name|lonMinEnc
operator|<=
name|cellLonMinEnc
operator|&&
name|state
operator|.
name|lonMaxEnc
operator|>=
name|cellLonMaxEnc
condition|)
block|{
comment|// Bbox query: optimize the case when the query fully contains this cell: we can
comment|// recursively add all points without checking if they match the query:
return|return
name|addAll
argument_list|(
name|state
argument_list|,
name|nodeID
argument_list|)
return|;
block|}
name|long
name|latRange
init|=
operator|(
name|long
operator|)
name|cellLatMaxEnc
operator|-
operator|(
name|long
operator|)
name|cellLatMinEnc
decl_stmt|;
name|long
name|lonRange
init|=
operator|(
name|long
operator|)
name|cellLonMaxEnc
operator|-
operator|(
name|long
operator|)
name|cellLonMinEnc
decl_stmt|;
name|int
name|dim
decl_stmt|;
if|if
condition|(
name|latRange
operator|>=
name|lonRange
condition|)
block|{
name|dim
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
name|dim
operator|=
literal|1
expr_stmt|;
block|}
comment|//System.out.println("\nintersect node=" + nodeID + " vs " + leafNodeOffset);
if|if
condition|(
name|nodeID
operator|>=
name|leafNodeOffset
condition|)
block|{
comment|// Leaf node; scan and filter all points in this block:
comment|//System.out.println("    intersect leaf nodeID=" + nodeID + " vs leafNodeOffset=" + leafNodeOffset + " fp=" + leafBlockFPs[nodeID-leafNodeOffset]);
name|int
name|hitCount
init|=
literal|0
decl_stmt|;
name|long
name|fp
init|=
name|leafBlockFPs
index|[
name|nodeID
operator|-
name|leafNodeOffset
index|]
decl_stmt|;
if|if
condition|(
name|fp
operator|==
literal|0
condition|)
block|{
comment|// Dead end node (adversary case):
comment|//System.out.println("    dead-end leaf");
return|return
literal|0
return|;
block|}
comment|/*       System.out.println("I: " + BKDTreeWriter.decodeLat(cellLatMinEnc)                          + " " + BKDTreeWriter.decodeLat(cellLatMaxEnc)                          + " " + BKDTreeWriter.decodeLon(cellLonMinEnc)                          + " " + BKDTreeWriter.decodeLon(cellLonMaxEnc));       */
name|state
operator|.
name|in
operator|.
name|seek
argument_list|(
name|fp
argument_list|)
expr_stmt|;
comment|// How many points are stored in this leaf cell:
name|int
name|count
init|=
name|state
operator|.
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
name|state
operator|.
name|docs
operator|.
name|grow
argument_list|(
name|count
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|int
name|docID
init|=
name|state
operator|.
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|state
operator|.
name|sndv
operator|.
name|setDocument
argument_list|(
name|docID
argument_list|)
expr_stmt|;
comment|// How many values this doc has:
name|int
name|docValueCount
init|=
name|state
operator|.
name|sndv
operator|.
name|count
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|docValueCount
condition|;
name|j
operator|++
control|)
block|{
name|long
name|enc
init|=
name|state
operator|.
name|sndv
operator|.
name|valueAt
argument_list|(
name|j
argument_list|)
decl_stmt|;
name|int
name|latEnc
init|=
call|(
name|int
call|)
argument_list|(
operator|(
name|enc
operator|>>
literal|32
operator|)
operator|&
literal|0xffffffffL
argument_list|)
decl_stmt|;
name|int
name|lonEnc
init|=
call|(
name|int
call|)
argument_list|(
name|enc
operator|&
literal|0xffffffffL
argument_list|)
decl_stmt|;
if|if
condition|(
name|latEnc
operator|>=
name|state
operator|.
name|latMinEnc
operator|&&
name|latEnc
operator|<
name|state
operator|.
name|latMaxEnc
operator|&&
name|lonEnc
operator|>=
name|state
operator|.
name|lonMinEnc
operator|&&
name|lonEnc
operator|<
name|state
operator|.
name|lonMaxEnc
operator|&&
operator|(
name|state
operator|.
name|latLonFilter
operator|==
literal|null
operator|||
name|state
operator|.
name|latLonFilter
operator|.
name|accept
argument_list|(
name|BKDTreeWriter
operator|.
name|decodeLat
argument_list|(
name|latEnc
argument_list|)
argument_list|,
name|BKDTreeWriter
operator|.
name|decodeLon
argument_list|(
name|lonEnc
argument_list|)
argument_list|)
operator|)
condition|)
block|{
name|state
operator|.
name|docs
operator|.
name|add
argument_list|(
name|docID
argument_list|)
expr_stmt|;
name|hitCount
operator|++
expr_stmt|;
comment|// Stop processing values for this doc:
break|break;
block|}
block|}
block|}
return|return
name|hitCount
return|;
block|}
else|else
block|{
name|int
name|splitValue
init|=
name|splitValues
index|[
name|nodeID
index|]
decl_stmt|;
if|if
condition|(
name|splitValue
operator|==
name|Integer
operator|.
name|MAX_VALUE
condition|)
block|{
comment|// Dead end node (adversary case):
comment|//System.out.println("    dead-end sub-tree");
return|return
literal|0
return|;
block|}
comment|//System.out.println("  splitValue=" + splitValue);
name|int
name|count
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|dim
operator|==
literal|0
condition|)
block|{
comment|//System.out.println("  split on lat=" + splitValue);
comment|// Inner node split on lat:
comment|// Left node:
if|if
condition|(
name|state
operator|.
name|latMinEnc
operator|<
name|splitValue
condition|)
block|{
comment|//System.out.println("  recurse left");
name|count
operator|+=
name|intersect
argument_list|(
name|state
argument_list|,
literal|2
operator|*
name|nodeID
argument_list|,
name|cellLatMinEnc
argument_list|,
name|splitValue
argument_list|,
name|cellLonMinEnc
argument_list|,
name|cellLonMaxEnc
argument_list|)
expr_stmt|;
block|}
comment|// Right node:
if|if
condition|(
name|state
operator|.
name|latMaxEnc
operator|>=
name|splitValue
condition|)
block|{
comment|//System.out.println("  recurse right");
name|count
operator|+=
name|intersect
argument_list|(
name|state
argument_list|,
literal|2
operator|*
name|nodeID
operator|+
literal|1
argument_list|,
name|splitValue
argument_list|,
name|cellLatMaxEnc
argument_list|,
name|cellLonMinEnc
argument_list|,
name|cellLonMaxEnc
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// Inner node split on lon:
assert|assert
name|dim
operator|==
literal|1
assert|;
comment|// System.out.println("  split on lon=" + splitValue);
comment|// Left node:
if|if
condition|(
name|state
operator|.
name|lonMinEnc
operator|<
name|splitValue
condition|)
block|{
comment|// System.out.println("  recurse left");
name|count
operator|+=
name|intersect
argument_list|(
name|state
argument_list|,
literal|2
operator|*
name|nodeID
argument_list|,
name|cellLatMinEnc
argument_list|,
name|cellLatMaxEnc
argument_list|,
name|cellLonMinEnc
argument_list|,
name|splitValue
argument_list|)
expr_stmt|;
block|}
comment|// Right node:
if|if
condition|(
name|state
operator|.
name|lonMaxEnc
operator|>=
name|splitValue
condition|)
block|{
comment|// System.out.println("  recurse right");
name|count
operator|+=
name|intersect
argument_list|(
name|state
argument_list|,
literal|2
operator|*
name|nodeID
operator|+
literal|1
argument_list|,
name|cellLatMinEnc
argument_list|,
name|cellLatMaxEnc
argument_list|,
name|splitValue
argument_list|,
name|cellLonMaxEnc
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|count
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|ramBytesUsed
specifier|public
name|long
name|ramBytesUsed
parameter_list|()
block|{
return|return
name|splitValues
operator|.
name|length
operator|*
name|RamUsageEstimator
operator|.
name|NUM_BYTES_INT
operator|+
name|leafBlockFPs
operator|.
name|length
operator|*
name|RamUsageEstimator
operator|.
name|NUM_BYTES_LONG
return|;
block|}
block|}
end_class
end_unit
