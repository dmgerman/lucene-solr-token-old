begin_unit
begin_package
DECL|package|org.apache.lucene.sandbox.queries.regex
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|sandbox
operator|.
name|queries
operator|.
name|regex
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|FilteredTermsEnum
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|TermsEnum
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|StringHelper
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_comment
comment|/**  * Subclass of FilteredTermEnum for enumerating all terms that match the  * specified regular expression term using the specified regular expression  * implementation.  *<p>  * Term enumerations are always ordered by Term.compareTo().  Each term in  * the enumeration is greater than all that precede it.  */
end_comment
begin_class
DECL|class|RegexTermsEnum
specifier|public
class|class
name|RegexTermsEnum
extends|extends
name|FilteredTermsEnum
block|{
DECL|field|regexImpl
specifier|private
name|RegexCapabilities
operator|.
name|RegexMatcher
name|regexImpl
decl_stmt|;
DECL|field|prefixRef
specifier|private
specifier|final
name|BytesRef
name|prefixRef
decl_stmt|;
DECL|method|RegexTermsEnum
specifier|public
name|RegexTermsEnum
parameter_list|(
name|TermsEnum
name|tenum
parameter_list|,
name|Term
name|term
parameter_list|,
name|RegexCapabilities
name|regexCap
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|tenum
argument_list|)
expr_stmt|;
name|String
name|text
init|=
name|term
operator|.
name|text
argument_list|()
decl_stmt|;
name|this
operator|.
name|regexImpl
operator|=
name|regexCap
operator|.
name|compile
argument_list|(
name|text
argument_list|)
expr_stmt|;
name|String
name|pre
init|=
name|regexImpl
operator|.
name|prefix
argument_list|()
decl_stmt|;
if|if
condition|(
name|pre
operator|==
literal|null
condition|)
block|{
name|pre
operator|=
literal|""
expr_stmt|;
block|}
name|setInitialSeekTerm
argument_list|(
name|prefixRef
operator|=
operator|new
name|BytesRef
argument_list|(
name|pre
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|protected
name|AcceptStatus
name|accept
parameter_list|(
name|BytesRef
name|term
parameter_list|)
block|{
if|if
condition|(
name|StringHelper
operator|.
name|startsWith
argument_list|(
name|term
argument_list|,
name|prefixRef
argument_list|)
condition|)
block|{
comment|// TODO: set BoostAttr based on distance of
comment|// searchTerm.text() and term().text()
return|return
name|regexImpl
operator|.
name|match
argument_list|(
name|term
argument_list|)
condition|?
name|AcceptStatus
operator|.
name|YES
else|:
name|AcceptStatus
operator|.
name|NO
return|;
block|}
else|else
block|{
return|return
name|AcceptStatus
operator|.
name|NO
return|;
block|}
block|}
block|}
end_class
end_unit
