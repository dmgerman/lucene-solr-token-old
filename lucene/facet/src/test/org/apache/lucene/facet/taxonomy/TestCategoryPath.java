begin_unit
begin_package
DECL|package|org.apache.lucene.facet.taxonomy
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|taxonomy
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|taxonomy
operator|.
name|CategoryPath
import|;
end_import
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_class
DECL|class|TestCategoryPath
specifier|public
class|class
name|TestCategoryPath
extends|extends
name|LuceneTestCase
block|{
annotation|@
name|Test
DECL|method|testBasic
specifier|public
name|void
name|testBasic
parameter_list|()
block|{
name|CategoryPath
name|p
init|=
operator|new
name|CategoryPath
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|p
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1000
condition|;
name|i
operator|++
control|)
block|{
name|p
operator|.
name|add
argument_list|(
literal|"hello"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|i
operator|+
literal|1
argument_list|,
name|p
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testConstructorCapacity
specifier|public
name|void
name|testConstructorCapacity
parameter_list|()
block|{
name|CategoryPath
name|p
init|=
operator|new
name|CategoryPath
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|p
operator|.
name|capacityChars
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|p
operator|.
name|capacityComponents
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|p
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|=
operator|new
name|CategoryPath
argument_list|(
literal|5
argument_list|,
literal|18
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|p
operator|.
name|capacityChars
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|18
argument_list|,
name|p
operator|.
name|capacityComponents
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|p
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|=
operator|new
name|CategoryPath
argument_list|(
literal|27
argument_list|,
literal|13
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|27
argument_list|,
name|p
operator|.
name|capacityChars
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|13
argument_list|,
name|p
operator|.
name|capacityComponents
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|p
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testClear
specifier|public
name|void
name|testClear
parameter_list|()
block|{
name|CategoryPath
name|p
init|=
operator|new
name|CategoryPath
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|p
operator|.
name|add
argument_list|(
literal|"hi"
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
literal|"there"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|p
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|p
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
literal|"yo!"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|p
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTrim
specifier|public
name|void
name|testTrim
parameter_list|()
block|{
name|CategoryPath
name|p
init|=
operator|new
name|CategoryPath
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|p
operator|.
name|add
argument_list|(
literal|"this"
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
literal|"message"
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
literal|"will"
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
literal|"self"
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
literal|"destruct"
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
literal|"in"
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
literal|"five"
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
literal|"seconds"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|8
argument_list|,
name|p
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|.
name|trim
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|p
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|.
name|trim
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// no-op
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|p
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|.
name|trim
argument_list|(
operator|-
literal|3
argument_list|)
expr_stmt|;
comment|// no-op
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|p
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|.
name|trim
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|p
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|.
name|trim
argument_list|(
literal|8
argument_list|)
expr_stmt|;
comment|// clear
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|p
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
literal|"yo!"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|p
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|.
name|trim
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// clear
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|p
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testComponentsLimit
specifier|public
name|void
name|testComponentsLimit
parameter_list|()
block|{
comment|// Test that we can add up to 2^15-1 components
name|CategoryPath
name|p
init|=
operator|new
name|CategoryPath
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|32767
condition|;
name|i
operator|++
control|)
block|{
name|p
operator|.
name|add
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|i
operator|+
literal|1
argument_list|,
name|p
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Also see that in the current implementation, this is actually
comment|// the limit: if we add one more component, things break (because
comment|// we used a short to hold ncomponents). See that it breaks in the
comment|// way we expect it to:
name|p
operator|.
name|add
argument_list|(
literal|""
argument_list|)
expr_stmt|;
comment|// this still works, but...
name|assertEquals
argument_list|(
operator|-
literal|32768
argument_list|,
name|p
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
comment|// now the length is wrong and negative
block|}
annotation|@
name|Test
DECL|method|testCharsLimit
specifier|public
name|void
name|testCharsLimit
parameter_list|()
block|{
comment|// Test that we can add up to 2^15-1 characters
name|CategoryPath
name|p
init|=
operator|new
name|CategoryPath
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|8192
condition|;
name|i
operator|++
control|)
block|{
name|p
operator|.
name|add
argument_list|(
literal|"aaaa"
argument_list|)
expr_stmt|;
block|}
comment|// Also see that in the current implementation, this is actually the
comment|// limit: If we add one more character, things break (because ends[]
comment|// is an array of shorts), and we actually get an exception.
try|try
block|{
name|p
operator|.
name|add
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown an exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArrayIndexOutOfBoundsException
name|e
parameter_list|)
block|{
comment|// good.
block|}
block|}
annotation|@
name|Test
DECL|method|testToString
specifier|public
name|void
name|testToString
parameter_list|()
block|{
name|CategoryPath
name|p
init|=
operator|new
name|CategoryPath
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
comment|// When the category is empty, we expect an empty string
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|p
operator|.
name|toString
argument_list|(
literal|'/'
argument_list|)
argument_list|)
expr_stmt|;
comment|// This is (deliberately, in our implementation) indistinguishable
comment|// from the case of a single empty component:
name|p
operator|.
name|add
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|p
operator|.
name|toString
argument_list|(
literal|'/'
argument_list|)
argument_list|)
expr_stmt|;
comment|// Check just one category (so no delimiter needed):
name|p
operator|.
name|clear
argument_list|()
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
literal|"hello"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"hello"
argument_list|,
name|p
operator|.
name|toString
argument_list|(
literal|'/'
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now for two categories:
name|p
operator|.
name|clear
argument_list|()
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
literal|"hello"
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
literal|"world"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"hello/world"
argument_list|,
name|p
operator|.
name|toString
argument_list|(
literal|'/'
argument_list|)
argument_list|)
expr_stmt|;
comment|// And for a thousand...
name|p
operator|.
name|clear
argument_list|()
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
literal|"0"
argument_list|)
expr_stmt|;
name|StringBuilder
name|expected
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"0"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
literal|1000
condition|;
name|i
operator|++
control|)
block|{
name|String
name|num
init|=
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|p
operator|.
name|add
argument_list|(
name|num
argument_list|)
expr_stmt|;
name|expected
operator|.
name|append
argument_list|(
literal|'/'
argument_list|)
expr_stmt|;
name|expected
operator|.
name|append
argument_list|(
name|num
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|expected
operator|.
name|toString
argument_list|()
argument_list|,
name|p
operator|.
name|toString
argument_list|(
literal|'/'
argument_list|)
argument_list|)
expr_stmt|;
comment|// Check that toString() without a parameter just defaults to '/':
name|assertEquals
argument_list|(
name|expected
operator|.
name|toString
argument_list|()
argument_list|,
name|p
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// testing toString() and its variants already test most of the appendTo()
comment|// code, but not all of it (the "eclemma" code-coverage tool discovered
comment|// this for us). Here we complete the coverage of the appendTo() methods:
annotation|@
name|Test
DECL|method|testAppendTo
specifier|public
name|void
name|testAppendTo
parameter_list|()
throws|throws
name|IOException
block|{
name|CategoryPath
name|p
init|=
operator|new
name|CategoryPath
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|p
operator|.
name|appendTo
argument_list|(
name|sb
argument_list|,
literal|'/'
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|sb
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|.
name|appendTo
argument_list|(
name|sb
argument_list|,
literal|'/'
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|sb
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|.
name|appendTo
argument_list|(
name|sb
argument_list|,
literal|'/'
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|sb
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|.
name|appendTo
argument_list|(
name|sb
argument_list|,
literal|'/'
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|sb
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLastComponent
specifier|public
name|void
name|testLastComponent
parameter_list|()
block|{
name|CategoryPath
name|p
init|=
operator|new
name|CategoryPath
argument_list|(
literal|1000
argument_list|,
literal|1000
argument_list|)
decl_stmt|;
comment|// When the category is empty, we expect a null
name|assertNull
argument_list|(
name|p
operator|.
name|lastComponent
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|String
name|num
init|=
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|p
operator|.
name|add
argument_list|(
name|num
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|num
argument_list|,
name|p
operator|.
name|lastComponent
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testGetComponent
specifier|public
name|void
name|testGetComponent
parameter_list|()
block|{
name|CategoryPath
name|p
init|=
operator|new
name|CategoryPath
argument_list|(
literal|1000
argument_list|,
literal|1000
argument_list|)
decl_stmt|;
comment|// When the category is empty, we expect a null
name|assertNull
argument_list|(
name|p
operator|.
name|getComponent
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|p
operator|.
name|getComponent
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|p
operator|.
name|getComponent
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|p
operator|.
name|add
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<=
name|i
condition|;
name|j
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|j
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|p
operator|.
name|getComponent
argument_list|(
name|j
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertNull
argument_list|(
name|p
operator|.
name|getComponent
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|p
operator|.
name|getComponent
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testToStringPrefix
specifier|public
name|void
name|testToStringPrefix
parameter_list|()
block|{
name|CategoryPath
name|p
init|=
operator|new
name|CategoryPath
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|p
operator|.
name|add
argument_list|(
literal|"hi"
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
literal|"there"
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
literal|"man"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"hi/there/man"
argument_list|,
name|p
operator|.
name|toString
argument_list|(
literal|'/'
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|p
operator|.
name|toString
argument_list|(
literal|'/'
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"hi"
argument_list|,
name|p
operator|.
name|toString
argument_list|(
literal|'/'
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"hi/there"
argument_list|,
name|p
operator|.
name|toString
argument_list|(
literal|'/'
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"hi/there/man"
argument_list|,
name|p
operator|.
name|toString
argument_list|(
literal|'/'
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"hi/there/man"
argument_list|,
name|p
operator|.
name|toString
argument_list|(
literal|'/'
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"hi/there/man"
argument_list|,
name|p
operator|.
name|toString
argument_list|(
literal|'/'
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testToStringSubpath
specifier|public
name|void
name|testToStringSubpath
parameter_list|()
block|{
name|CategoryPath
name|p
init|=
operator|new
name|CategoryPath
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|p
operator|.
name|toString
argument_list|(
literal|'/'
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
literal|"hi"
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
literal|"there"
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
literal|"man"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|p
operator|.
name|toString
argument_list|(
literal|'/'
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"hi"
argument_list|,
name|p
operator|.
name|toString
argument_list|(
literal|'/'
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"hi/there"
argument_list|,
name|p
operator|.
name|toString
argument_list|(
literal|'/'
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"hi/there/man"
argument_list|,
name|p
operator|.
name|toString
argument_list|(
literal|'/'
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"hi/there/man"
argument_list|,
name|p
operator|.
name|toString
argument_list|(
literal|'/'
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"hi/there/man"
argument_list|,
name|p
operator|.
name|toString
argument_list|(
literal|'/'
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"hi/there/man"
argument_list|,
name|p
operator|.
name|toString
argument_list|(
literal|'/'
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"there/man"
argument_list|,
name|p
operator|.
name|toString
argument_list|(
literal|'/'
argument_list|,
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"man"
argument_list|,
name|p
operator|.
name|toString
argument_list|(
literal|'/'
argument_list|,
literal|2
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|p
operator|.
name|toString
argument_list|(
literal|'/'
argument_list|,
literal|3
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"there/man"
argument_list|,
name|p
operator|.
name|toString
argument_list|(
literal|'/'
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"there"
argument_list|,
name|p
operator|.
name|toString
argument_list|(
literal|'/'
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|p
operator|.
name|toString
argument_list|(
literal|'/'
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDelimiterConstructor
specifier|public
name|void
name|testDelimiterConstructor
parameter_list|()
block|{
comment|// Test that the constructor that takes a string and a delimiter
comment|// works correctly. Also check that it allocates exactly the needed
comment|// needed size for the array - not more.
name|CategoryPath
name|p
init|=
operator|new
name|CategoryPath
argument_list|(
literal|""
argument_list|,
literal|'/'
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|p
operator|.
name|length
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|p
operator|.
name|capacityChars
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|p
operator|.
name|capacityComponents
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|p
operator|=
operator|new
name|CategoryPath
argument_list|(
literal|"hello"
argument_list|,
literal|'/'
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|p
operator|.
name|length
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|p
operator|.
name|capacityChars
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|p
operator|.
name|capacityComponents
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|p
operator|.
name|toString
argument_list|(
literal|'@'
argument_list|)
argument_list|,
literal|"hello"
argument_list|)
expr_stmt|;
name|p
operator|=
operator|new
name|CategoryPath
argument_list|(
literal|"hi/there"
argument_list|,
literal|'/'
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|p
operator|.
name|length
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|p
operator|.
name|capacityChars
argument_list|()
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|p
operator|.
name|capacityComponents
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|p
operator|.
name|toString
argument_list|(
literal|'@'
argument_list|)
argument_list|,
literal|"hi@there"
argument_list|)
expr_stmt|;
name|p
operator|=
operator|new
name|CategoryPath
argument_list|(
literal|"how/are/you/doing?"
argument_list|,
literal|'/'
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|p
operator|.
name|length
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|p
operator|.
name|capacityChars
argument_list|()
argument_list|,
literal|15
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|p
operator|.
name|capacityComponents
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|p
operator|.
name|toString
argument_list|(
literal|'@'
argument_list|)
argument_list|,
literal|"how@are@you@doing?"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDefaultConstructor
specifier|public
name|void
name|testDefaultConstructor
parameter_list|()
block|{
comment|// test that the default constructor (no parameters) currently
comment|// defaults to creating an object with a 0 initial capacity.
comment|// If we change this default later, we also need to change this
comment|// test.
name|CategoryPath
name|p
init|=
operator|new
name|CategoryPath
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|p
operator|.
name|capacityChars
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|p
operator|.
name|capacityComponents
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|p
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|p
operator|.
name|toString
argument_list|(
literal|'/'
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAddEmpty
specifier|public
name|void
name|testAddEmpty
parameter_list|()
block|{
comment|// In the current implementation, p.add("") should add en empty
comment|// component (which is, admitingly, not a useful case. On the other
comment|// hand, p.add("", delimiter) should add no components at all.
comment|// Verify this:
name|CategoryPath
name|p
init|=
operator|new
name|CategoryPath
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|p
operator|.
name|add
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|p
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|p
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
literal|""
argument_list|,
literal|'/'
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|p
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|.
name|clear
argument_list|()
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
literal|""
argument_list|,
literal|'/'
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|p
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDelimiterAdd
specifier|public
name|void
name|testDelimiterAdd
parameter_list|()
block|{
comment|// Test that the add() that takes a string and a delimiter
comment|// works correctly. Note that unlike the constructor test above,
comment|// we can't expect the capacity to grow to exactly the length of
comment|// the given category, so we do not test this.
name|CategoryPath
name|p
init|=
operator|new
name|CategoryPath
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|p
operator|.
name|add
argument_list|(
literal|""
argument_list|,
literal|'/'
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|p
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|p
operator|.
name|toString
argument_list|(
literal|'@'
argument_list|)
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|p
operator|.
name|clear
argument_list|()
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
literal|"hello"
argument_list|,
literal|'/'
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|p
operator|.
name|length
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|p
operator|.
name|toString
argument_list|(
literal|'@'
argument_list|)
argument_list|,
literal|"hello"
argument_list|)
expr_stmt|;
name|p
operator|.
name|clear
argument_list|()
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
literal|"hi/there"
argument_list|,
literal|'/'
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|p
operator|.
name|length
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|p
operator|.
name|toString
argument_list|(
literal|'@'
argument_list|)
argument_list|,
literal|"hi@there"
argument_list|)
expr_stmt|;
name|p
operator|.
name|clear
argument_list|()
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
literal|"how/are/you/doing?"
argument_list|,
literal|'/'
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|p
operator|.
name|length
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|p
operator|.
name|toString
argument_list|(
literal|'@'
argument_list|)
argument_list|,
literal|"how@are@you@doing?"
argument_list|)
expr_stmt|;
comment|// See that this is really an add, not replace:
name|p
operator|.
name|clear
argument_list|()
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
literal|"hi/there"
argument_list|,
literal|'/'
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|p
operator|.
name|length
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|p
operator|.
name|toString
argument_list|(
literal|'@'
argument_list|)
argument_list|,
literal|"hi@there"
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
literal|"how/are/you/doing"
argument_list|,
literal|'/'
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|p
operator|.
name|length
argument_list|()
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|p
operator|.
name|toString
argument_list|(
literal|'@'
argument_list|)
argument_list|,
literal|"hi@there@how@are@you@doing"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCopyConstructor
specifier|public
name|void
name|testCopyConstructor
parameter_list|()
block|{
name|CategoryPath
name|p
init|=
operator|new
name|CategoryPath
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|int
name|expectedchars
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1000
condition|;
name|i
operator|++
control|)
block|{
name|CategoryPath
name|clone
init|=
operator|new
name|CategoryPath
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|p
operator|.
name|length
argument_list|()
argument_list|,
name|clone
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|p
operator|.
name|toString
argument_list|(
literal|'/'
argument_list|)
argument_list|,
name|clone
operator|.
name|toString
argument_list|(
literal|'/'
argument_list|)
argument_list|)
expr_stmt|;
comment|// verify that the newly created clone has exactly the right
comment|// capacity, with no spare (while the original path p probably
comment|// does have spare)
name|assertEquals
argument_list|(
name|i
argument_list|,
name|clone
operator|.
name|capacityComponents
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedchars
argument_list|,
name|clone
operator|.
name|capacityChars
argument_list|()
argument_list|)
expr_stmt|;
comment|// Finally, add another component to the path, for the next
comment|// round of this loop
name|String
name|num
init|=
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|p
operator|.
name|add
argument_list|(
name|num
argument_list|)
expr_stmt|;
name|expectedchars
operator|+=
name|num
operator|.
name|length
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testPrefixCopyConstructor
specifier|public
name|void
name|testPrefixCopyConstructor
parameter_list|()
block|{
name|CategoryPath
name|p
init|=
operator|new
name|CategoryPath
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|p
operator|.
name|add
argument_list|(
literal|"hi"
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
literal|"there"
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
literal|"man"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|p
operator|.
name|length
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|CategoryPath
name|p1
init|=
operator|new
name|CategoryPath
argument_list|(
name|p
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|p1
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"hi/there"
argument_list|,
name|p1
operator|.
name|toString
argument_list|(
literal|'/'
argument_list|)
argument_list|)
expr_stmt|;
comment|// the new prefix object should only take the space it needs:
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|p1
operator|.
name|capacityComponents
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|7
argument_list|,
name|p1
operator|.
name|capacityChars
argument_list|()
argument_list|)
expr_stmt|;
name|p1
operator|=
operator|new
name|CategoryPath
argument_list|(
name|p
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|p1
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"hi"
argument_list|,
name|p1
operator|.
name|toString
argument_list|(
literal|'/'
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|p1
operator|.
name|capacityComponents
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|p1
operator|.
name|capacityChars
argument_list|()
argument_list|)
expr_stmt|;
name|p1
operator|=
operator|new
name|CategoryPath
argument_list|(
name|p
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|p1
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|p1
operator|.
name|toString
argument_list|(
literal|'/'
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|p1
operator|.
name|capacityComponents
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|p1
operator|.
name|capacityChars
argument_list|()
argument_list|)
expr_stmt|;
comment|// with all the following lengths, the prefix should be the whole path:
name|int
index|[]
name|lengths
init|=
block|{
literal|3
block|,
operator|-
literal|1
block|,
literal|4
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|lengths
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|p1
operator|=
operator|new
name|CategoryPath
argument_list|(
name|p
argument_list|,
name|lengths
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|p1
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"hi/there/man"
argument_list|,
name|p1
operator|.
name|toString
argument_list|(
literal|'/'
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|p
argument_list|,
name|p1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|p1
operator|.
name|capacityComponents
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|p1
operator|.
name|capacityChars
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testEquals
specifier|public
name|void
name|testEquals
parameter_list|()
block|{
comment|// check that two empty paths are equal, even if they have different
comment|// capacities:
name|CategoryPath
name|p1
init|=
operator|new
name|CategoryPath
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|CategoryPath
name|p2
init|=
operator|new
name|CategoryPath
argument_list|(
literal|1000
argument_list|,
literal|300
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|p1
operator|.
name|equals
argument_list|(
name|p2
argument_list|)
argument_list|)
expr_stmt|;
comment|// If we make p2 different, it is no longer equals:
name|p2
operator|.
name|add
argument_list|(
literal|"hi"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|p1
operator|.
name|equals
argument_list|(
name|p2
argument_list|)
argument_list|)
expr_stmt|;
comment|// A categoryPath is definitely not equals to an object of some other
comment|// type:
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|p1
operator|.
name|equals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|3
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Build two paths separately, and compare them
name|p1
operator|.
name|clear
argument_list|()
expr_stmt|;
name|p1
operator|.
name|add
argument_list|(
literal|"hello"
argument_list|)
expr_stmt|;
name|p1
operator|.
name|add
argument_list|(
literal|"world"
argument_list|)
expr_stmt|;
name|p2
operator|.
name|clear
argument_list|()
expr_stmt|;
name|p2
operator|.
name|add
argument_list|(
literal|"hello"
argument_list|)
expr_stmt|;
name|p2
operator|.
name|add
argument_list|(
literal|"world"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|p1
operator|.
name|equals
argument_list|(
name|p2
argument_list|)
argument_list|)
expr_stmt|;
comment|// Check that comparison really don't look at old data which might
comment|// be stored in the array
name|p1
operator|.
name|clear
argument_list|()
expr_stmt|;
name|p1
operator|.
name|add
argument_list|(
literal|"averylongcategoryname"
argument_list|)
expr_stmt|;
name|p1
operator|.
name|clear
argument_list|()
expr_stmt|;
name|p1
operator|.
name|add
argument_list|(
literal|"hi"
argument_list|)
expr_stmt|;
name|p2
operator|.
name|clear
argument_list|()
expr_stmt|;
name|p2
operator|.
name|add
argument_list|(
literal|"hi"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|p1
operator|.
name|equals
argument_list|(
name|p2
argument_list|)
argument_list|)
expr_stmt|;
comment|// Being of the same length is obviously not enough to be equal
name|p1
operator|.
name|clear
argument_list|()
expr_stmt|;
name|p1
operator|.
name|add
argument_list|(
literal|"hi"
argument_list|)
expr_stmt|;
name|p2
operator|.
name|clear
argument_list|()
expr_stmt|;
name|p2
operator|.
name|add
argument_list|(
literal|"hello"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|p1
operator|.
name|equals
argument_list|(
name|p2
argument_list|)
argument_list|)
expr_stmt|;
name|p1
operator|.
name|clear
argument_list|()
expr_stmt|;
name|p1
operator|.
name|add
argument_list|(
literal|"hi"
argument_list|)
expr_stmt|;
name|p2
operator|.
name|clear
argument_list|()
expr_stmt|;
name|p2
operator|.
name|add
argument_list|(
literal|"ho"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|p1
operator|.
name|equals
argument_list|(
name|p2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testHashCode
specifier|public
name|void
name|testHashCode
parameter_list|()
block|{
comment|// Note: in this test, we assume that if two paths are not equal,
comment|// their hash codes should come out differently. This is *not*
comment|// always the case, but in the examples we use below, it comes out
comment|// fine, and unless we have some really bad luck in changing our
comment|// hash function, this should also remain true in the future.
comment|// check that two empty paths are equal, even if they have different
comment|// capacities:
name|CategoryPath
name|p1
init|=
operator|new
name|CategoryPath
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|CategoryPath
name|p2
init|=
operator|new
name|CategoryPath
argument_list|(
literal|1000
argument_list|,
literal|300
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|p1
operator|.
name|hashCode
argument_list|()
argument_list|,
name|p2
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
comment|// If we make p2 different, it is no longer equals:
name|p2
operator|.
name|add
argument_list|(
literal|"hi"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|p1
operator|.
name|hashCode
argument_list|()
operator|==
name|p2
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
comment|// Build two paths separately, and compare them
name|p1
operator|.
name|clear
argument_list|()
expr_stmt|;
name|p1
operator|.
name|add
argument_list|(
literal|"hello"
argument_list|)
expr_stmt|;
name|p1
operator|.
name|add
argument_list|(
literal|"world"
argument_list|)
expr_stmt|;
name|p2
operator|.
name|clear
argument_list|()
expr_stmt|;
name|p2
operator|.
name|add
argument_list|(
literal|"hello"
argument_list|)
expr_stmt|;
name|p2
operator|.
name|add
argument_list|(
literal|"world"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|p1
operator|.
name|hashCode
argument_list|()
argument_list|,
name|p2
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
comment|// Check that comparison really don't look at old data which might
comment|// be stored in the array
name|p1
operator|.
name|clear
argument_list|()
expr_stmt|;
name|p1
operator|.
name|add
argument_list|(
literal|"averylongcategoryname"
argument_list|)
expr_stmt|;
name|p1
operator|.
name|clear
argument_list|()
expr_stmt|;
name|p1
operator|.
name|add
argument_list|(
literal|"hi"
argument_list|)
expr_stmt|;
name|p2
operator|.
name|clear
argument_list|()
expr_stmt|;
name|p2
operator|.
name|add
argument_list|(
literal|"hi"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|p1
operator|.
name|hashCode
argument_list|()
argument_list|,
name|p2
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
comment|// Being of the same length is obviously not enough to be equal
name|p1
operator|.
name|clear
argument_list|()
expr_stmt|;
name|p1
operator|.
name|add
argument_list|(
literal|"hi"
argument_list|)
expr_stmt|;
name|p2
operator|.
name|clear
argument_list|()
expr_stmt|;
name|p2
operator|.
name|add
argument_list|(
literal|"hello"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|p1
operator|.
name|hashCode
argument_list|()
operator|==
name|p2
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|p1
operator|.
name|clear
argument_list|()
expr_stmt|;
name|p1
operator|.
name|add
argument_list|(
literal|"hi"
argument_list|)
expr_stmt|;
name|p2
operator|.
name|clear
argument_list|()
expr_stmt|;
name|p2
operator|.
name|add
argument_list|(
literal|"ho"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|p1
operator|.
name|hashCode
argument_list|()
operator|==
name|p2
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testHashCodePrefix
specifier|public
name|void
name|testHashCodePrefix
parameter_list|()
block|{
comment|// First, repeat the tests of testHashCode() using hashCode(-1)
comment|// just to make sure nothing was broken in this variant:
name|CategoryPath
name|p1
init|=
operator|new
name|CategoryPath
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|CategoryPath
name|p2
init|=
operator|new
name|CategoryPath
argument_list|(
literal|1000
argument_list|,
literal|300
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|p1
operator|.
name|hashCode
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|,
name|p2
operator|.
name|hashCode
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|p2
operator|.
name|add
argument_list|(
literal|"hi"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|p1
operator|.
name|hashCode
argument_list|(
operator|-
literal|1
argument_list|)
operator|==
name|p2
operator|.
name|hashCode
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|p1
operator|.
name|clear
argument_list|()
expr_stmt|;
name|p1
operator|.
name|add
argument_list|(
literal|"hello"
argument_list|)
expr_stmt|;
name|p1
operator|.
name|add
argument_list|(
literal|"world"
argument_list|)
expr_stmt|;
name|p2
operator|.
name|clear
argument_list|()
expr_stmt|;
name|p2
operator|.
name|add
argument_list|(
literal|"hello"
argument_list|)
expr_stmt|;
name|p2
operator|.
name|add
argument_list|(
literal|"world"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|p1
operator|.
name|hashCode
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|,
name|p2
operator|.
name|hashCode
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|p1
operator|.
name|clear
argument_list|()
expr_stmt|;
name|p1
operator|.
name|add
argument_list|(
literal|"averylongcategoryname"
argument_list|)
expr_stmt|;
name|p1
operator|.
name|clear
argument_list|()
expr_stmt|;
name|p1
operator|.
name|add
argument_list|(
literal|"hi"
argument_list|)
expr_stmt|;
name|p2
operator|.
name|clear
argument_list|()
expr_stmt|;
name|p2
operator|.
name|add
argument_list|(
literal|"hi"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|p1
operator|.
name|hashCode
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|,
name|p2
operator|.
name|hashCode
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|p1
operator|.
name|clear
argument_list|()
expr_stmt|;
name|p1
operator|.
name|add
argument_list|(
literal|"hi"
argument_list|)
expr_stmt|;
name|p2
operator|.
name|clear
argument_list|()
expr_stmt|;
name|p2
operator|.
name|add
argument_list|(
literal|"hello"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|p1
operator|.
name|hashCode
argument_list|(
operator|-
literal|1
argument_list|)
operator|==
name|p2
operator|.
name|hashCode
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|p1
operator|.
name|clear
argument_list|()
expr_stmt|;
name|p1
operator|.
name|add
argument_list|(
literal|"hi"
argument_list|)
expr_stmt|;
name|p2
operator|.
name|clear
argument_list|()
expr_stmt|;
name|p2
operator|.
name|add
argument_list|(
literal|"ho"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|p1
operator|.
name|hashCode
argument_list|(
operator|-
literal|1
argument_list|)
operator|==
name|p2
operator|.
name|hashCode
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now move to testing prefixes:
name|CategoryPath
name|p
init|=
operator|new
name|CategoryPath
argument_list|()
decl_stmt|;
name|p
operator|.
name|add
argument_list|(
literal|"this"
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
literal|"is"
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|p
operator|.
name|hashCode
argument_list|()
argument_list|,
name|p
operator|.
name|hashCode
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|CategoryPath
argument_list|()
operator|.
name|hashCode
argument_list|()
argument_list|,
name|p
operator|.
name|hashCode
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|CategoryPath
argument_list|(
name|p
argument_list|,
literal|1
argument_list|)
operator|.
name|hashCode
argument_list|()
argument_list|,
name|p
operator|.
name|hashCode
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|CategoryPath
argument_list|(
name|p
argument_list|,
literal|2
argument_list|)
operator|.
name|hashCode
argument_list|()
argument_list|,
name|p
operator|.
name|hashCode
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|CategoryPath
argument_list|(
name|p
argument_list|,
literal|3
argument_list|)
operator|.
name|hashCode
argument_list|()
argument_list|,
name|p
operator|.
name|hashCode
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLongHashCode
specifier|public
name|void
name|testLongHashCode
parameter_list|()
block|{
comment|// Note: in this test, we assume that if two paths are not equal,
comment|// their hash codes should come out differently. This is *not*
comment|// always the case, but in the examples we use below, it comes out
comment|// fine, and unless we have some really bad luck in changing our
comment|// hash function, this should also remain true in the future.
comment|// check that two empty paths are equal, even if they have different
comment|// capacities:
name|CategoryPath
name|p1
init|=
operator|new
name|CategoryPath
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|CategoryPath
name|p2
init|=
operator|new
name|CategoryPath
argument_list|(
literal|1000
argument_list|,
literal|300
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|p1
operator|.
name|longHashCode
argument_list|()
argument_list|,
name|p2
operator|.
name|longHashCode
argument_list|()
argument_list|)
expr_stmt|;
comment|// If we make p2 different, it is no longer equals:
name|p2
operator|.
name|add
argument_list|(
literal|"hi"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|p1
operator|.
name|longHashCode
argument_list|()
operator|==
name|p2
operator|.
name|longHashCode
argument_list|()
argument_list|)
expr_stmt|;
comment|// Build two paths separately, and compare them
name|p1
operator|.
name|clear
argument_list|()
expr_stmt|;
name|p1
operator|.
name|add
argument_list|(
literal|"hello"
argument_list|)
expr_stmt|;
name|p1
operator|.
name|add
argument_list|(
literal|"world"
argument_list|)
expr_stmt|;
name|p2
operator|.
name|clear
argument_list|()
expr_stmt|;
name|p2
operator|.
name|add
argument_list|(
literal|"hello"
argument_list|)
expr_stmt|;
name|p2
operator|.
name|add
argument_list|(
literal|"world"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|p1
operator|.
name|longHashCode
argument_list|()
argument_list|,
name|p2
operator|.
name|longHashCode
argument_list|()
argument_list|)
expr_stmt|;
comment|// Check that comparison really don't look at old data which might
comment|// be stored in the array
name|p1
operator|.
name|clear
argument_list|()
expr_stmt|;
name|p1
operator|.
name|add
argument_list|(
literal|"averylongcategoryname"
argument_list|)
expr_stmt|;
name|p1
operator|.
name|clear
argument_list|()
expr_stmt|;
name|p1
operator|.
name|add
argument_list|(
literal|"hi"
argument_list|)
expr_stmt|;
name|p2
operator|.
name|clear
argument_list|()
expr_stmt|;
name|p2
operator|.
name|add
argument_list|(
literal|"hi"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|p1
operator|.
name|longHashCode
argument_list|()
argument_list|,
name|p2
operator|.
name|longHashCode
argument_list|()
argument_list|)
expr_stmt|;
comment|// Being of the same length is obviously not enough to be equal
name|p1
operator|.
name|clear
argument_list|()
expr_stmt|;
name|p1
operator|.
name|add
argument_list|(
literal|"hi"
argument_list|)
expr_stmt|;
name|p2
operator|.
name|clear
argument_list|()
expr_stmt|;
name|p2
operator|.
name|add
argument_list|(
literal|"hello"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|p1
operator|.
name|longHashCode
argument_list|()
operator|==
name|p2
operator|.
name|longHashCode
argument_list|()
argument_list|)
expr_stmt|;
name|p1
operator|.
name|clear
argument_list|()
expr_stmt|;
name|p1
operator|.
name|add
argument_list|(
literal|"hi"
argument_list|)
expr_stmt|;
name|p2
operator|.
name|clear
argument_list|()
expr_stmt|;
name|p2
operator|.
name|add
argument_list|(
literal|"ho"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|p1
operator|.
name|longHashCode
argument_list|()
operator|==
name|p2
operator|.
name|longHashCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLongHashCodePrefix
specifier|public
name|void
name|testLongHashCodePrefix
parameter_list|()
block|{
comment|// First, repeat the tests of testLongHashCode() using longHashCode(-1)
comment|// just to make sure nothing was broken in this variant:
comment|// check that two empty paths are equal, even if they have different
comment|// capacities:
name|CategoryPath
name|p1
init|=
operator|new
name|CategoryPath
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|CategoryPath
name|p2
init|=
operator|new
name|CategoryPath
argument_list|(
literal|1000
argument_list|,
literal|300
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|p1
operator|.
name|longHashCode
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|,
name|p2
operator|.
name|longHashCode
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// If we make p2 different, it is no longer equals:
name|p2
operator|.
name|add
argument_list|(
literal|"hi"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|p1
operator|.
name|longHashCode
argument_list|(
operator|-
literal|1
argument_list|)
operator|==
name|p2
operator|.
name|longHashCode
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// Build two paths separately, and compare them
name|p1
operator|.
name|clear
argument_list|()
expr_stmt|;
name|p1
operator|.
name|add
argument_list|(
literal|"hello"
argument_list|)
expr_stmt|;
name|p1
operator|.
name|add
argument_list|(
literal|"world"
argument_list|)
expr_stmt|;
name|p2
operator|.
name|clear
argument_list|()
expr_stmt|;
name|p2
operator|.
name|add
argument_list|(
literal|"hello"
argument_list|)
expr_stmt|;
name|p2
operator|.
name|add
argument_list|(
literal|"world"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|p1
operator|.
name|longHashCode
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|,
name|p2
operator|.
name|longHashCode
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// Check that comparison really don't look at old data which might
comment|// be stored in the array
name|p1
operator|.
name|clear
argument_list|()
expr_stmt|;
name|p1
operator|.
name|add
argument_list|(
literal|"averylongcategoryname"
argument_list|)
expr_stmt|;
name|p1
operator|.
name|clear
argument_list|()
expr_stmt|;
name|p1
operator|.
name|add
argument_list|(
literal|"hi"
argument_list|)
expr_stmt|;
name|p2
operator|.
name|clear
argument_list|()
expr_stmt|;
name|p2
operator|.
name|add
argument_list|(
literal|"hi"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|p1
operator|.
name|longHashCode
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|,
name|p2
operator|.
name|longHashCode
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// Being of the same length is obviously not enough to be equal
name|p1
operator|.
name|clear
argument_list|()
expr_stmt|;
name|p1
operator|.
name|add
argument_list|(
literal|"hi"
argument_list|)
expr_stmt|;
name|p2
operator|.
name|clear
argument_list|()
expr_stmt|;
name|p2
operator|.
name|add
argument_list|(
literal|"hello"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|p1
operator|.
name|longHashCode
argument_list|(
operator|-
literal|1
argument_list|)
operator|==
name|p2
operator|.
name|longHashCode
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|p1
operator|.
name|clear
argument_list|()
expr_stmt|;
name|p1
operator|.
name|add
argument_list|(
literal|"hi"
argument_list|)
expr_stmt|;
name|p2
operator|.
name|clear
argument_list|()
expr_stmt|;
name|p2
operator|.
name|add
argument_list|(
literal|"ho"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|p1
operator|.
name|longHashCode
argument_list|(
operator|-
literal|1
argument_list|)
operator|==
name|p2
operator|.
name|longHashCode
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now move to testing prefixes:
name|CategoryPath
name|p
init|=
operator|new
name|CategoryPath
argument_list|()
decl_stmt|;
name|p
operator|.
name|add
argument_list|(
literal|"this"
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
literal|"is"
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|p
operator|.
name|longHashCode
argument_list|()
argument_list|,
name|p
operator|.
name|longHashCode
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|CategoryPath
argument_list|()
operator|.
name|longHashCode
argument_list|()
argument_list|,
name|p
operator|.
name|longHashCode
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|CategoryPath
argument_list|(
name|p
argument_list|,
literal|1
argument_list|)
operator|.
name|longHashCode
argument_list|()
argument_list|,
name|p
operator|.
name|longHashCode
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|CategoryPath
argument_list|(
name|p
argument_list|,
literal|2
argument_list|)
operator|.
name|longHashCode
argument_list|()
argument_list|,
name|p
operator|.
name|longHashCode
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|CategoryPath
argument_list|(
name|p
argument_list|,
literal|3
argument_list|)
operator|.
name|longHashCode
argument_list|()
argument_list|,
name|p
operator|.
name|longHashCode
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testArrayConstructor
specifier|public
name|void
name|testArrayConstructor
parameter_list|()
block|{
name|CategoryPath
name|p
init|=
operator|new
name|CategoryPath
argument_list|(
literal|"hello"
argument_list|,
literal|"world"
argument_list|,
literal|"yo"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|p
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|12
argument_list|,
name|p
operator|.
name|capacityChars
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|p
operator|.
name|capacityComponents
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"hello/world/yo"
argument_list|,
name|p
operator|.
name|toString
argument_list|(
literal|'/'
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|=
operator|new
name|CategoryPath
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|p
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|p
operator|.
name|capacityChars
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|p
operator|.
name|capacityComponents
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCharsNeededForFullPath
specifier|public
name|void
name|testCharsNeededForFullPath
parameter_list|()
block|{
name|String
index|[]
name|components
init|=
block|{
literal|"hello"
block|,
literal|"world"
block|,
literal|"yo"
block|}
decl_stmt|;
name|CategoryPath
name|p
init|=
operator|new
name|CategoryPath
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|p
operator|.
name|charsNeededForFullPath
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|expectedCharsNeeded
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|components
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|p
operator|.
name|add
argument_list|(
name|components
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|expectedCharsNeeded
operator|+=
name|components
index|[
name|i
index|]
operator|.
name|length
argument_list|()
expr_stmt|;
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|expectedCharsNeeded
operator|++
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|expectedCharsNeeded
argument_list|,
name|p
operator|.
name|charsNeededForFullPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testCopyToCharArray
specifier|public
name|void
name|testCopyToCharArray
parameter_list|()
block|{
name|String
index|[]
name|components
init|=
block|{
literal|"hello"
block|,
literal|"world"
block|,
literal|"yo"
block|}
decl_stmt|;
name|CategoryPath
name|p
init|=
operator|new
name|CategoryPath
argument_list|(
name|components
argument_list|)
decl_stmt|;
name|char
index|[]
name|charArray
init|=
operator|new
name|char
index|[
name|p
operator|.
name|charsNeededForFullPath
argument_list|()
index|]
decl_stmt|;
name|int
name|numCharsCopied
init|=
literal|0
decl_stmt|;
name|numCharsCopied
operator|=
name|p
operator|.
name|copyToCharArray
argument_list|(
name|charArray
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|'.'
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|numCharsCopied
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
operator|new
name|String
argument_list|(
name|charArray
argument_list|,
literal|0
argument_list|,
name|numCharsCopied
argument_list|)
argument_list|)
expr_stmt|;
name|numCharsCopied
operator|=
name|p
operator|.
name|copyToCharArray
argument_list|(
name|charArray
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|'.'
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|numCharsCopied
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"hello"
argument_list|,
operator|new
name|String
argument_list|(
name|charArray
argument_list|,
literal|0
argument_list|,
name|numCharsCopied
argument_list|)
argument_list|)
expr_stmt|;
name|numCharsCopied
operator|=
name|p
operator|.
name|copyToCharArray
argument_list|(
name|charArray
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|,
literal|'.'
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|14
argument_list|,
name|numCharsCopied
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"hello.world.yo"
argument_list|,
operator|new
name|String
argument_list|(
name|charArray
argument_list|,
literal|0
argument_list|,
name|numCharsCopied
argument_list|)
argument_list|)
expr_stmt|;
name|numCharsCopied
operator|=
name|p
operator|.
name|copyToCharArray
argument_list|(
name|charArray
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
literal|'.'
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|14
argument_list|,
name|numCharsCopied
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"hello.world.yo"
argument_list|,
operator|new
name|String
argument_list|(
name|charArray
argument_list|,
literal|0
argument_list|,
name|numCharsCopied
argument_list|)
argument_list|)
expr_stmt|;
name|numCharsCopied
operator|=
name|p
operator|.
name|copyToCharArray
argument_list|(
name|charArray
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|,
literal|'.'
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|14
argument_list|,
name|numCharsCopied
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"hello.world.yo"
argument_list|,
operator|new
name|String
argument_list|(
name|charArray
argument_list|,
literal|0
argument_list|,
name|numCharsCopied
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCharSerialization
specifier|public
name|void
name|testCharSerialization
parameter_list|()
throws|throws
name|Exception
block|{
name|CategoryPath
index|[]
name|testCategories
init|=
block|{
operator|new
name|CategoryPath
argument_list|(
literal|"hi"
argument_list|,
literal|"there"
argument_list|,
literal|"man"
argument_list|)
block|,
operator|new
name|CategoryPath
argument_list|(
literal|"hello"
argument_list|)
block|,
operator|new
name|CategoryPath
argument_list|(
literal|"what's"
argument_list|,
literal|"up"
argument_list|)
block|,
comment|// See that an empty category, which generates a (char)0,
comment|// doesn't cause any problems in the middle of the serialization:
operator|new
name|CategoryPath
argument_list|()
block|,
operator|new
name|CategoryPath
argument_list|(
literal|"another"
argument_list|,
literal|"example"
argument_list|)
block|,
operator|new
name|CategoryPath
argument_list|()
block|,
operator|new
name|CategoryPath
argument_list|()
block|}
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|testCategories
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|testCategories
index|[
name|i
index|]
operator|.
name|serializeAppendTo
argument_list|(
name|sb
argument_list|)
expr_stmt|;
block|}
name|CategoryPath
name|tmp
init|=
operator|new
name|CategoryPath
argument_list|()
decl_stmt|;
name|int
name|offset
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|testCategories
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
comment|// check equalsToSerialized, in a equal and non-equal case:
name|assertTrue
argument_list|(
name|testCategories
index|[
name|i
index|]
operator|.
name|equalsToSerialized
argument_list|(
name|sb
argument_list|,
name|offset
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
operator|new
name|CategoryPath
argument_list|(
literal|"Hello"
argument_list|,
literal|"world"
argument_list|)
operator|.
name|equalsToSerialized
argument_list|(
name|sb
argument_list|,
name|offset
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
operator|new
name|CategoryPath
argument_list|(
literal|"world"
argument_list|)
operator|.
name|equalsToSerialized
argument_list|(
name|sb
argument_list|,
name|offset
argument_list|)
argument_list|)
expr_stmt|;
comment|// and check hashCodeFromSerialized:
name|assertEquals
argument_list|(
name|testCategories
index|[
name|i
index|]
operator|.
name|hashCode
argument_list|()
argument_list|,
name|CategoryPath
operator|.
name|hashCodeOfSerialized
argument_list|(
name|sb
argument_list|,
name|offset
argument_list|)
argument_list|)
expr_stmt|;
comment|// and check setFromSerialized:
name|offset
operator|=
name|tmp
operator|.
name|setFromSerialized
argument_list|(
name|sb
argument_list|,
name|offset
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testCategories
index|[
name|i
index|]
argument_list|,
name|tmp
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|offset
argument_list|,
name|sb
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
comment|// A similar test, for a much longer path (though not larger than the
comment|// 2^15-1 character limit that CategoryPath allows:
name|sb
operator|=
operator|new
name|StringBuilder
argument_list|()
expr_stmt|;
name|CategoryPath
name|p
init|=
operator|new
name|CategoryPath
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1000
condition|;
name|i
operator|++
control|)
block|{
name|p
operator|.
name|add
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|p
operator|.
name|serializeAppendTo
argument_list|(
name|sb
argument_list|)
expr_stmt|;
name|p
operator|.
name|serializeAppendTo
argument_list|(
name|sb
argument_list|)
expr_stmt|;
name|p
operator|.
name|serializeAppendTo
argument_list|(
name|sb
argument_list|)
expr_stmt|;
name|offset
operator|=
literal|0
expr_stmt|;
name|assertTrue
argument_list|(
name|p
operator|.
name|equalsToSerialized
argument_list|(
name|sb
argument_list|,
name|offset
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|p
operator|.
name|hashCode
argument_list|()
argument_list|,
name|CategoryPath
operator|.
name|hashCodeOfSerialized
argument_list|(
name|sb
argument_list|,
name|offset
argument_list|)
argument_list|)
expr_stmt|;
name|offset
operator|=
name|tmp
operator|.
name|setFromSerialized
argument_list|(
name|sb
argument_list|,
name|offset
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|p
argument_list|,
name|tmp
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|p
operator|.
name|equalsToSerialized
argument_list|(
name|sb
argument_list|,
name|offset
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|p
operator|.
name|hashCode
argument_list|()
argument_list|,
name|CategoryPath
operator|.
name|hashCodeOfSerialized
argument_list|(
name|sb
argument_list|,
name|offset
argument_list|)
argument_list|)
expr_stmt|;
name|offset
operator|=
name|tmp
operator|.
name|setFromSerialized
argument_list|(
name|sb
argument_list|,
name|offset
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|p
argument_list|,
name|tmp
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|p
operator|.
name|equalsToSerialized
argument_list|(
name|sb
argument_list|,
name|offset
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|p
operator|.
name|hashCode
argument_list|()
argument_list|,
name|CategoryPath
operator|.
name|hashCodeOfSerialized
argument_list|(
name|sb
argument_list|,
name|offset
argument_list|)
argument_list|)
expr_stmt|;
name|offset
operator|=
name|tmp
operator|.
name|setFromSerialized
argument_list|(
name|sb
argument_list|,
name|offset
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|p
argument_list|,
name|tmp
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|offset
argument_list|,
name|sb
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test the serializeAppendTo variant with a prefixLen
name|p
operator|=
operator|new
name|CategoryPath
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|783
condition|;
name|i
operator|++
control|)
block|{
name|p
operator|.
name|add
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|int
index|[]
name|prefixLengths
init|=
block|{
literal|0
block|,
literal|574
block|,
literal|782
block|,
literal|783
block|,
literal|784
block|,
operator|-
literal|1
block|}
decl_stmt|;
for|for
control|(
name|int
name|prefixLen
range|:
name|prefixLengths
control|)
block|{
name|sb
operator|=
operator|new
name|StringBuilder
argument_list|()
expr_stmt|;
name|p
operator|.
name|serializeAppendTo
argument_list|(
name|prefixLen
argument_list|,
name|sb
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|CategoryPath
argument_list|(
name|p
argument_list|,
name|prefixLen
argument_list|)
operator|.
name|equalsToSerialized
argument_list|(
name|sb
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Test the equalsToSerialized variant with a prefixLen
comment|// We use p and prefixLengths set above.
for|for
control|(
name|int
name|prefixLen
range|:
name|prefixLengths
control|)
block|{
name|sb
operator|=
operator|new
name|StringBuilder
argument_list|()
expr_stmt|;
operator|new
name|CategoryPath
argument_list|(
name|p
argument_list|,
name|prefixLen
argument_list|)
operator|.
name|serializeAppendTo
argument_list|(
name|sb
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|p
operator|.
name|equalsToSerialized
argument_list|(
name|prefixLen
argument_list|,
name|sb
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Check also the false case of equalsToSerialized with prefixLen:
name|sb
operator|=
operator|new
name|StringBuilder
argument_list|()
expr_stmt|;
operator|new
name|CategoryPath
argument_list|()
operator|.
name|serializeAppendTo
argument_list|(
name|sb
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|CategoryPath
argument_list|()
operator|.
name|equalsToSerialized
argument_list|(
literal|0
argument_list|,
name|sb
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|CategoryPath
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
operator|.
name|equalsToSerialized
argument_list|(
literal|0
argument_list|,
name|sb
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
operator|new
name|CategoryPath
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
operator|.
name|equalsToSerialized
argument_list|(
literal|1
argument_list|,
name|sb
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|=
operator|new
name|StringBuilder
argument_list|()
expr_stmt|;
operator|new
name|CategoryPath
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
operator|.
name|serializeAppendTo
argument_list|(
name|sb
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
operator|new
name|CategoryPath
argument_list|()
operator|.
name|equalsToSerialized
argument_list|(
literal|0
argument_list|,
name|sb
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
operator|new
name|CategoryPath
argument_list|(
literal|"a"
argument_list|)
operator|.
name|equalsToSerialized
argument_list|(
literal|0
argument_list|,
name|sb
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
operator|new
name|CategoryPath
argument_list|(
literal|"a"
argument_list|)
operator|.
name|equalsToSerialized
argument_list|(
literal|1
argument_list|,
name|sb
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
operator|new
name|CategoryPath
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
operator|.
name|equalsToSerialized
argument_list|(
literal|0
argument_list|,
name|sb
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
operator|new
name|CategoryPath
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
operator|.
name|equalsToSerialized
argument_list|(
literal|1
argument_list|,
name|sb
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|CategoryPath
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
operator|.
name|equalsToSerialized
argument_list|(
literal|2
argument_list|,
name|sb
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|CategoryPath
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
operator|.
name|equalsToSerialized
argument_list|(
literal|2
argument_list|,
name|sb
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
operator|new
name|CategoryPath
argument_list|(
literal|"z"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
operator|.
name|equalsToSerialized
argument_list|(
literal|2
argument_list|,
name|sb
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
operator|new
name|CategoryPath
argument_list|(
literal|"aa"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
operator|.
name|equalsToSerialized
argument_list|(
literal|2
argument_list|,
name|sb
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testStreamWriterSerialization
specifier|public
name|void
name|testStreamWriterSerialization
parameter_list|()
throws|throws
name|Exception
block|{
name|CategoryPath
index|[]
name|testPaths
init|=
block|{
operator|new
name|CategoryPath
argument_list|(
literal|"hi"
argument_list|,
literal|"there"
argument_list|,
literal|"man"
argument_list|)
block|,
operator|new
name|CategoryPath
argument_list|(
literal|"hello"
argument_list|)
block|,
operator|new
name|CategoryPath
argument_list|(
literal|"date"
argument_list|,
literal|"2009"
argument_list|,
literal|"May"
argument_list|,
literal|"13"
argument_list|,
literal|"14"
argument_list|,
literal|"59"
argument_list|,
literal|"00"
argument_list|)
block|,
comment|// See that an empty category, which generates a (char)0,
comment|// doesn't cause any problems in the middle of the serialization:
operator|new
name|CategoryPath
argument_list|()
block|,
operator|new
name|CategoryPath
argument_list|(
literal|"another"
argument_list|,
literal|"example"
argument_list|)
block|}
decl_stmt|;
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|OutputStreamWriter
name|osw
init|=
operator|new
name|OutputStreamWriter
argument_list|(
name|baos
argument_list|,
literal|"UTF-8"
argument_list|)
decl_stmt|;
comment|// UTF-8 is always supported.
for|for
control|(
name|CategoryPath
name|cp
range|:
name|testPaths
control|)
block|{
name|cp
operator|.
name|serializeToStreamWriter
argument_list|(
name|osw
argument_list|)
expr_stmt|;
block|}
name|osw
operator|.
name|flush
argument_list|()
expr_stmt|;
name|ByteArrayInputStream
name|bais
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|baos
operator|.
name|toByteArray
argument_list|()
argument_list|)
decl_stmt|;
name|InputStreamReader
name|isr
init|=
operator|new
name|InputStreamReader
argument_list|(
name|bais
argument_list|,
literal|"UTF-8"
argument_list|)
decl_stmt|;
name|CategoryPath
index|[]
name|checkPaths
init|=
block|{
operator|new
name|CategoryPath
argument_list|()
block|,
operator|new
name|CategoryPath
argument_list|()
block|,
operator|new
name|CategoryPath
argument_list|()
block|,
operator|new
name|CategoryPath
argument_list|()
block|,
operator|new
name|CategoryPath
argument_list|()
block|}
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|checkPaths
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|checkPaths
index|[
name|j
index|]
operator|.
name|deserializeFromStreamReader
argument_list|(
name|isr
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Paths not equal"
argument_list|,
name|testPaths
index|[
name|j
index|]
argument_list|,
name|checkPaths
index|[
name|j
index|]
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testCharSequenceCtor
specifier|public
name|void
name|testCharSequenceCtor
parameter_list|()
throws|throws
name|Exception
block|{
name|CategoryPath
index|[]
name|testPaths
init|=
block|{
operator|new
name|CategoryPath
argument_list|(
operator|new
name|CS
argument_list|(
literal|"hi"
argument_list|)
argument_list|,
operator|new
name|CS
argument_list|(
literal|"there"
argument_list|)
argument_list|,
operator|new
name|CS
argument_list|(
literal|"man"
argument_list|)
argument_list|)
block|,
operator|new
name|CategoryPath
argument_list|(
operator|new
name|CS
argument_list|(
literal|"hello"
argument_list|)
argument_list|)
block|,
operator|new
name|CategoryPath
argument_list|(
operator|new
name|CS
argument_list|(
literal|"date"
argument_list|)
argument_list|,
operator|new
name|CS
argument_list|(
literal|"2009"
argument_list|)
argument_list|,
operator|new
name|CS
argument_list|(
literal|"May"
argument_list|)
argument_list|,
operator|new
name|CS
argument_list|(
literal|"13"
argument_list|)
argument_list|,
operator|new
name|CS
argument_list|(
literal|"14"
argument_list|)
argument_list|,
operator|new
name|CS
argument_list|(
literal|"59"
argument_list|)
argument_list|,
operator|new
name|CS
argument_list|(
literal|"00"
argument_list|)
argument_list|)
block|,
operator|new
name|CategoryPath
argument_list|()
block|,
operator|new
name|CategoryPath
argument_list|(
operator|new
name|CS
argument_list|(
literal|"another"
argument_list|)
argument_list|,
operator|new
name|CS
argument_list|(
literal|"example"
argument_list|)
argument_list|)
block|}
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong capacity"
argument_list|,
literal|10
argument_list|,
name|testPaths
index|[
literal|0
index|]
operator|.
name|capacityChars
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong capacity"
argument_list|,
literal|5
argument_list|,
name|testPaths
index|[
literal|1
index|]
operator|.
name|capacityChars
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong capacity"
argument_list|,
literal|19
argument_list|,
name|testPaths
index|[
literal|2
index|]
operator|.
name|capacityChars
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong capacity"
argument_list|,
literal|0
argument_list|,
name|testPaths
index|[
literal|3
index|]
operator|.
name|capacityChars
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong capacity"
argument_list|,
literal|14
argument_list|,
name|testPaths
index|[
literal|4
index|]
operator|.
name|capacityChars
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong component"
argument_list|,
literal|"hi"
argument_list|,
name|testPaths
index|[
literal|0
index|]
operator|.
name|getComponent
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong component"
argument_list|,
literal|"there"
argument_list|,
name|testPaths
index|[
literal|0
index|]
operator|.
name|getComponent
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong component"
argument_list|,
literal|"man"
argument_list|,
name|testPaths
index|[
literal|0
index|]
operator|.
name|getComponent
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong component"
argument_list|,
literal|"hello"
argument_list|,
name|testPaths
index|[
literal|1
index|]
operator|.
name|getComponent
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong component"
argument_list|,
literal|"date"
argument_list|,
name|testPaths
index|[
literal|2
index|]
operator|.
name|getComponent
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong component"
argument_list|,
literal|"2009"
argument_list|,
name|testPaths
index|[
literal|2
index|]
operator|.
name|getComponent
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong component"
argument_list|,
literal|"May"
argument_list|,
name|testPaths
index|[
literal|2
index|]
operator|.
name|getComponent
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong component"
argument_list|,
literal|"13"
argument_list|,
name|testPaths
index|[
literal|2
index|]
operator|.
name|getComponent
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong component"
argument_list|,
literal|"14"
argument_list|,
name|testPaths
index|[
literal|2
index|]
operator|.
name|getComponent
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong component"
argument_list|,
literal|"59"
argument_list|,
name|testPaths
index|[
literal|2
index|]
operator|.
name|getComponent
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong component"
argument_list|,
literal|"00"
argument_list|,
name|testPaths
index|[
literal|2
index|]
operator|.
name|getComponent
argument_list|(
literal|6
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"Not null component"
argument_list|,
name|testPaths
index|[
literal|3
index|]
operator|.
name|getComponent
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong component"
argument_list|,
literal|"another"
argument_list|,
name|testPaths
index|[
literal|4
index|]
operator|.
name|getComponent
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong component"
argument_list|,
literal|"example"
argument_list|,
name|testPaths
index|[
literal|4
index|]
operator|.
name|getComponent
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testIsDescendantOf
specifier|public
name|void
name|testIsDescendantOf
parameter_list|()
throws|throws
name|Exception
block|{
name|CategoryPath
index|[]
name|testPaths
init|=
block|{
operator|new
name|CategoryPath
argument_list|(
operator|new
name|CS
argument_list|(
literal|"hi"
argument_list|)
argument_list|,
operator|new
name|CS
argument_list|(
literal|"there"
argument_list|)
argument_list|)
block|,
operator|new
name|CategoryPath
argument_list|(
operator|new
name|CS
argument_list|(
literal|"hi"
argument_list|)
argument_list|,
operator|new
name|CS
argument_list|(
literal|"there"
argument_list|)
argument_list|,
operator|new
name|CS
argument_list|(
literal|"man"
argument_list|)
argument_list|)
block|,
operator|new
name|CategoryPath
argument_list|(
operator|new
name|CS
argument_list|(
literal|"hithere"
argument_list|)
argument_list|,
operator|new
name|CS
argument_list|(
literal|"man"
argument_list|)
argument_list|)
block|,
operator|new
name|CategoryPath
argument_list|(
operator|new
name|CS
argument_list|(
literal|"hi"
argument_list|)
argument_list|,
operator|new
name|CS
argument_list|(
literal|"there"
argument_list|)
argument_list|,
operator|new
name|CS
argument_list|(
literal|"mano"
argument_list|)
argument_list|)
block|,
operator|new
name|CategoryPath
argument_list|()
block|,     }
decl_stmt|;
name|assertTrue
argument_list|(
name|testPaths
index|[
literal|0
index|]
operator|.
name|isDescendantOf
argument_list|(
name|testPaths
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|testPaths
index|[
literal|0
index|]
operator|.
name|isDescendantOf
argument_list|(
name|testPaths
index|[
literal|4
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|testPaths
index|[
literal|4
index|]
operator|.
name|isDescendantOf
argument_list|(
name|testPaths
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|testPaths
index|[
literal|1
index|]
operator|.
name|isDescendantOf
argument_list|(
name|testPaths
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|testPaths
index|[
literal|1
index|]
operator|.
name|isDescendantOf
argument_list|(
name|testPaths
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|testPaths
index|[
literal|3
index|]
operator|.
name|isDescendantOf
argument_list|(
name|testPaths
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|testPaths
index|[
literal|2
index|]
operator|.
name|isDescendantOf
argument_list|(
name|testPaths
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|testPaths
index|[
literal|2
index|]
operator|.
name|isDescendantOf
argument_list|(
name|testPaths
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|testPaths
index|[
literal|3
index|]
operator|.
name|isDescendantOf
argument_list|(
name|testPaths
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCompareTo
specifier|public
name|void
name|testCompareTo
parameter_list|()
block|{
name|CategoryPath
name|p
init|=
operator|new
name|CategoryPath
argument_list|(
literal|"a/b/c/d"
argument_list|,
literal|'/'
argument_list|)
decl_stmt|;
name|CategoryPath
name|pother
init|=
operator|new
name|CategoryPath
argument_list|(
literal|"a/b/c/d"
argument_list|,
literal|'/'
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|pother
operator|.
name|compareTo
argument_list|(
name|p
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|pother
operator|=
operator|new
name|CategoryPath
argument_list|(
literal|""
argument_list|,
literal|'/'
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|pother
operator|.
name|compareTo
argument_list|(
name|p
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|pother
operator|=
operator|new
name|CategoryPath
argument_list|(
literal|"a/b_/c/d"
argument_list|,
literal|'/'
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|pother
operator|.
name|compareTo
argument_list|(
name|p
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
name|pother
operator|=
operator|new
name|CategoryPath
argument_list|(
literal|"a/b/c"
argument_list|,
literal|'/'
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|pother
operator|.
name|compareTo
argument_list|(
name|p
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|pother
operator|=
operator|new
name|CategoryPath
argument_list|(
literal|"a/b/c/e"
argument_list|,
literal|'/'
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|pother
operator|.
name|compareTo
argument_list|(
name|p
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
name|pother
operator|=
operator|new
name|CategoryPath
argument_list|(
literal|"a/b/c//e"
argument_list|,
literal|'/'
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|pother
operator|.
name|compareTo
argument_list|(
name|p
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|class|CS
specifier|private
specifier|static
class|class
name|CS
implements|implements
name|CharSequence
block|{
DECL|method|CS
specifier|public
name|CS
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|this
operator|.
name|ca
operator|=
operator|new
name|char
index|[
name|s
operator|.
name|length
argument_list|()
index|]
expr_stmt|;
name|s
operator|.
name|getChars
argument_list|(
literal|0
argument_list|,
name|s
operator|.
name|length
argument_list|()
argument_list|,
name|this
operator|.
name|ca
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|charAt
specifier|public
name|char
name|charAt
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|this
operator|.
name|ca
index|[
name|index
index|]
return|;
block|}
annotation|@
name|Override
DECL|method|length
specifier|public
name|int
name|length
parameter_list|()
block|{
return|return
name|this
operator|.
name|ca
operator|.
name|length
return|;
block|}
annotation|@
name|Override
DECL|method|subSequence
specifier|public
name|CharSequence
name|subSequence
parameter_list|(
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
block|{
return|return
literal|null
return|;
comment|// not used.
block|}
DECL|field|ca
specifier|private
name|char
index|[]
name|ca
decl_stmt|;
block|}
block|}
end_class
end_unit
