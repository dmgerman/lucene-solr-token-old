begin_unit
begin_package
DECL|package|org.apache.lucene.facet.search
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|search
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|MockAnalyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
operator|.
name|Store
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|StringField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|index
operator|.
name|FacetFields
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|index
operator|.
name|params
operator|.
name|CategoryListParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|index
operator|.
name|params
operator|.
name|FacetIndexingParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|search
operator|.
name|params
operator|.
name|CountFacetRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|search
operator|.
name|params
operator|.
name|FacetRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|search
operator|.
name|params
operator|.
name|FacetRequest
operator|.
name|SortBy
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|search
operator|.
name|params
operator|.
name|FacetRequest
operator|.
name|SortOrder
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|search
operator|.
name|params
operator|.
name|FacetSearchParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|search
operator|.
name|params
operator|.
name|ScoreFacetRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|search
operator|.
name|results
operator|.
name|FacetResult
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|search
operator|.
name|results
operator|.
name|FacetResultNode
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|taxonomy
operator|.
name|CategoryPath
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|taxonomy
operator|.
name|TaxonomyReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|taxonomy
operator|.
name|TaxonomyWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|taxonomy
operator|.
name|directory
operator|.
name|DirectoryTaxonomyReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|taxonomy
operator|.
name|directory
operator|.
name|DirectoryTaxonomyWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DirectoryReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriterConfig
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|NoMergePolicy
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|MatchAllDocsQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TermQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|collections
operator|.
name|ObjectToIntMap
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|encoding
operator|.
name|IntEncoder
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|encoding
operator|.
name|VInt8IntEncoder
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_class
DECL|class|CountingFacetsCollectorTest
specifier|public
class|class
name|CountingFacetsCollectorTest
extends|extends
name|LuceneTestCase
block|{
DECL|field|A
specifier|private
specifier|static
specifier|final
name|Term
name|A
init|=
operator|new
name|Term
argument_list|(
literal|"f"
argument_list|,
literal|"a"
argument_list|)
decl_stmt|;
DECL|field|CP_A
DECL|field|CP_B
specifier|private
specifier|static
specifier|final
name|CategoryPath
name|CP_A
init|=
operator|new
name|CategoryPath
argument_list|(
literal|"A"
argument_list|)
decl_stmt|,
name|CP_B
init|=
operator|new
name|CategoryPath
argument_list|(
literal|"B"
argument_list|)
decl_stmt|;
DECL|field|NUM_CHILDREN_CP_A
DECL|field|NUM_CHILDREN_CP_B
specifier|private
specifier|static
specifier|final
name|int
name|NUM_CHILDREN_CP_A
init|=
literal|5
decl_stmt|,
name|NUM_CHILDREN_CP_B
init|=
literal|3
decl_stmt|;
DECL|field|CATEGORIES_A
DECL|field|CATEGORIES_B
specifier|private
specifier|static
specifier|final
name|CategoryPath
index|[]
name|CATEGORIES_A
decl_stmt|,
name|CATEGORIES_B
decl_stmt|;
static|static
block|{
name|CATEGORIES_A
operator|=
operator|new
name|CategoryPath
index|[
name|NUM_CHILDREN_CP_A
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_CHILDREN_CP_A
condition|;
name|i
operator|++
control|)
block|{
name|CATEGORIES_A
index|[
name|i
index|]
operator|=
operator|new
name|CategoryPath
argument_list|(
name|CP_A
operator|.
name|components
index|[
literal|0
index|]
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|CATEGORIES_B
operator|=
operator|new
name|CategoryPath
index|[
name|NUM_CHILDREN_CP_B
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_CHILDREN_CP_B
condition|;
name|i
operator|++
control|)
block|{
name|CATEGORIES_B
index|[
name|i
index|]
operator|=
operator|new
name|CategoryPath
argument_list|(
name|CP_B
operator|.
name|components
index|[
literal|0
index|]
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|field|indexDir
DECL|field|taxoDir
specifier|protected
specifier|static
name|Directory
name|indexDir
decl_stmt|,
name|taxoDir
decl_stmt|;
DECL|field|allExpectedCounts
DECL|field|termExpectedCounts
specifier|protected
specifier|static
name|ObjectToIntMap
argument_list|<
name|CategoryPath
argument_list|>
name|allExpectedCounts
decl_stmt|,
name|termExpectedCounts
decl_stmt|;
DECL|field|numChildrenIndexedA
DECL|field|numChildrenIndexedB
specifier|protected
specifier|static
name|int
name|numChildrenIndexedA
decl_stmt|,
name|numChildrenIndexedB
decl_stmt|;
annotation|@
name|AfterClass
DECL|method|afterClassCountingFacetsCollectorTest
specifier|public
specifier|static
name|void
name|afterClassCountingFacetsCollectorTest
parameter_list|()
throws|throws
name|Exception
block|{
name|IOUtils
operator|.
name|close
argument_list|(
name|indexDir
argument_list|,
name|taxoDir
argument_list|)
expr_stmt|;
block|}
DECL|method|randomCategories
specifier|private
specifier|static
name|List
argument_list|<
name|CategoryPath
argument_list|>
name|randomCategories
parameter_list|(
name|Random
name|random
parameter_list|)
block|{
comment|// add random categories from the two dimensions, ensuring that the same
comment|// category is not added twice.
name|int
name|numFacetsA
init|=
name|random
operator|.
name|nextInt
argument_list|(
literal|3
argument_list|)
operator|+
literal|1
decl_stmt|;
comment|// 1-3
name|int
name|numFacetsB
init|=
name|random
operator|.
name|nextInt
argument_list|(
literal|2
argument_list|)
operator|+
literal|1
decl_stmt|;
comment|// 1-2
name|ArrayList
argument_list|<
name|CategoryPath
argument_list|>
name|categories_a
init|=
operator|new
name|ArrayList
argument_list|<
name|CategoryPath
argument_list|>
argument_list|()
decl_stmt|;
name|categories_a
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|CATEGORIES_A
argument_list|)
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|CategoryPath
argument_list|>
name|categories_b
init|=
operator|new
name|ArrayList
argument_list|<
name|CategoryPath
argument_list|>
argument_list|()
decl_stmt|;
name|categories_b
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|CATEGORIES_B
argument_list|)
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|shuffle
argument_list|(
name|categories_a
argument_list|,
name|random
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|shuffle
argument_list|(
name|categories_b
argument_list|,
name|random
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|CategoryPath
argument_list|>
name|categories
init|=
operator|new
name|ArrayList
argument_list|<
name|CategoryPath
argument_list|>
argument_list|()
decl_stmt|;
name|categories
operator|.
name|addAll
argument_list|(
name|categories_a
operator|.
name|subList
argument_list|(
literal|0
argument_list|,
name|numFacetsA
argument_list|)
argument_list|)
expr_stmt|;
name|categories
operator|.
name|addAll
argument_list|(
name|categories_b
operator|.
name|subList
argument_list|(
literal|0
argument_list|,
name|numFacetsB
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|categories
return|;
block|}
DECL|method|addField
specifier|private
specifier|static
name|void
name|addField
parameter_list|(
name|Document
name|doc
parameter_list|)
block|{
name|doc
operator|.
name|add
argument_list|(
operator|new
name|StringField
argument_list|(
name|A
operator|.
name|field
argument_list|()
argument_list|,
name|A
operator|.
name|text
argument_list|()
argument_list|,
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|addFacets
specifier|private
specifier|static
name|void
name|addFacets
parameter_list|(
name|Document
name|doc
parameter_list|,
name|FacetFields
name|facetFields
parameter_list|,
name|boolean
name|updateTermExpectedCounts
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|CategoryPath
argument_list|>
name|docCategories
init|=
name|randomCategories
argument_list|(
name|random
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|CategoryPath
name|cp
range|:
name|docCategories
control|)
block|{
name|allExpectedCounts
operator|.
name|put
argument_list|(
name|cp
argument_list|,
name|allExpectedCounts
operator|.
name|get
argument_list|(
name|cp
argument_list|)
operator|+
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|updateTermExpectedCounts
condition|)
block|{
name|termExpectedCounts
operator|.
name|put
argument_list|(
name|cp
argument_list|,
name|termExpectedCounts
operator|.
name|get
argument_list|(
name|cp
argument_list|)
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
comment|// add 1 to each dimension
name|allExpectedCounts
operator|.
name|put
argument_list|(
name|CP_A
argument_list|,
name|allExpectedCounts
operator|.
name|get
argument_list|(
name|CP_A
argument_list|)
operator|+
literal|1
argument_list|)
expr_stmt|;
name|allExpectedCounts
operator|.
name|put
argument_list|(
name|CP_B
argument_list|,
name|allExpectedCounts
operator|.
name|get
argument_list|(
name|CP_B
argument_list|)
operator|+
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|updateTermExpectedCounts
condition|)
block|{
name|termExpectedCounts
operator|.
name|put
argument_list|(
name|CP_A
argument_list|,
name|termExpectedCounts
operator|.
name|get
argument_list|(
name|CP_A
argument_list|)
operator|+
literal|1
argument_list|)
expr_stmt|;
name|termExpectedCounts
operator|.
name|put
argument_list|(
name|CP_B
argument_list|,
name|termExpectedCounts
operator|.
name|get
argument_list|(
name|CP_B
argument_list|)
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
name|facetFields
operator|.
name|addFields
argument_list|(
name|doc
argument_list|,
name|docCategories
argument_list|)
expr_stmt|;
block|}
DECL|method|indexDocsNoFacets
specifier|private
specifier|static
name|void
name|indexDocsNoFacets
parameter_list|(
name|IndexWriter
name|indexWriter
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|numDocs
init|=
name|atLeast
argument_list|(
literal|2
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
name|i
operator|++
control|)
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|addField
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|indexWriter
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
name|indexWriter
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|// flush a segment
block|}
DECL|method|indexDocsWithFacetsNoTerms
specifier|private
specifier|static
name|void
name|indexDocsWithFacetsNoTerms
parameter_list|(
name|IndexWriter
name|indexWriter
parameter_list|,
name|TaxonomyWriter
name|taxoWriter
parameter_list|,
name|ObjectToIntMap
argument_list|<
name|CategoryPath
argument_list|>
name|expectedCounts
parameter_list|)
throws|throws
name|IOException
block|{
name|Random
name|random
init|=
name|random
argument_list|()
decl_stmt|;
name|int
name|numDocs
init|=
name|atLeast
argument_list|(
name|random
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|FacetFields
name|facetFields
init|=
operator|new
name|FacetFields
argument_list|(
name|taxoWriter
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
name|i
operator|++
control|)
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|addFacets
argument_list|(
name|doc
argument_list|,
name|facetFields
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|indexWriter
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
name|indexWriter
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|// flush a segment
block|}
DECL|method|indexDocsWithFacetsAndTerms
specifier|private
specifier|static
name|void
name|indexDocsWithFacetsAndTerms
parameter_list|(
name|IndexWriter
name|indexWriter
parameter_list|,
name|TaxonomyWriter
name|taxoWriter
parameter_list|,
name|ObjectToIntMap
argument_list|<
name|CategoryPath
argument_list|>
name|expectedCounts
parameter_list|)
throws|throws
name|IOException
block|{
name|Random
name|random
init|=
name|random
argument_list|()
decl_stmt|;
name|int
name|numDocs
init|=
name|atLeast
argument_list|(
name|random
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|FacetFields
name|facetFields
init|=
operator|new
name|FacetFields
argument_list|(
name|taxoWriter
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
name|i
operator|++
control|)
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|addFacets
argument_list|(
name|doc
argument_list|,
name|facetFields
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addField
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|indexWriter
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
name|indexWriter
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|// flush a segment
block|}
DECL|method|indexDocsWithFacetsAndSomeTerms
specifier|private
specifier|static
name|void
name|indexDocsWithFacetsAndSomeTerms
parameter_list|(
name|IndexWriter
name|indexWriter
parameter_list|,
name|TaxonomyWriter
name|taxoWriter
parameter_list|,
name|ObjectToIntMap
argument_list|<
name|CategoryPath
argument_list|>
name|expectedCounts
parameter_list|)
throws|throws
name|IOException
block|{
name|Random
name|random
init|=
name|random
argument_list|()
decl_stmt|;
name|int
name|numDocs
init|=
name|atLeast
argument_list|(
name|random
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|FacetFields
name|facetFields
init|=
operator|new
name|FacetFields
argument_list|(
name|taxoWriter
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
name|i
operator|++
control|)
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|boolean
name|hasContent
init|=
name|random
operator|.
name|nextBoolean
argument_list|()
decl_stmt|;
if|if
condition|(
name|hasContent
condition|)
block|{
name|addField
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
name|addFacets
argument_list|(
name|doc
argument_list|,
name|facetFields
argument_list|,
name|hasContent
argument_list|)
expr_stmt|;
name|indexWriter
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
name|indexWriter
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|// flush a segment
block|}
comment|// initialize expectedCounts w/ 0 for all categories
DECL|method|newCounts
specifier|private
specifier|static
name|ObjectToIntMap
argument_list|<
name|CategoryPath
argument_list|>
name|newCounts
parameter_list|()
block|{
name|ObjectToIntMap
argument_list|<
name|CategoryPath
argument_list|>
name|counts
init|=
operator|new
name|ObjectToIntMap
argument_list|<
name|CategoryPath
argument_list|>
argument_list|()
decl_stmt|;
name|counts
operator|.
name|put
argument_list|(
name|CP_A
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|counts
operator|.
name|put
argument_list|(
name|CP_B
argument_list|,
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|CategoryPath
name|cp
range|:
name|CATEGORIES_A
control|)
block|{
name|counts
operator|.
name|put
argument_list|(
name|cp
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|CategoryPath
name|cp
range|:
name|CATEGORIES_B
control|)
block|{
name|counts
operator|.
name|put
argument_list|(
name|cp
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
return|return
name|counts
return|;
block|}
annotation|@
name|BeforeClass
DECL|method|beforeClassCountingFacetsCollectorTest
specifier|public
specifier|static
name|void
name|beforeClassCountingFacetsCollectorTest
parameter_list|()
throws|throws
name|Exception
block|{
name|indexDir
operator|=
name|newDirectory
argument_list|()
expr_stmt|;
name|taxoDir
operator|=
name|newDirectory
argument_list|()
expr_stmt|;
comment|// create an index which has:
comment|// 1. Segment with no categories, but matching results
comment|// 2. Segment w/ categories, but no results
comment|// 3. Segment w/ categories and results
comment|// 4. Segment w/ categories, but only some results
name|IndexWriterConfig
name|conf
init|=
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|conf
operator|.
name|setMergePolicy
argument_list|(
name|NoMergePolicy
operator|.
name|COMPOUND_FILES
argument_list|)
expr_stmt|;
comment|// prevent merges, so we can control the index segments
name|IndexWriter
name|indexWriter
init|=
operator|new
name|IndexWriter
argument_list|(
name|indexDir
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|TaxonomyWriter
name|taxoWriter
init|=
operator|new
name|DirectoryTaxonomyWriter
argument_list|(
name|taxoDir
argument_list|)
decl_stmt|;
name|allExpectedCounts
operator|=
name|newCounts
argument_list|()
expr_stmt|;
name|termExpectedCounts
operator|=
name|newCounts
argument_list|()
expr_stmt|;
comment|// segment w/ no categories
name|indexDocsNoFacets
argument_list|(
name|indexWriter
argument_list|)
expr_stmt|;
comment|// segment w/ categories, no content
name|indexDocsWithFacetsNoTerms
argument_list|(
name|indexWriter
argument_list|,
name|taxoWriter
argument_list|,
name|allExpectedCounts
argument_list|)
expr_stmt|;
comment|// segment w/ categories and content
name|indexDocsWithFacetsAndTerms
argument_list|(
name|indexWriter
argument_list|,
name|taxoWriter
argument_list|,
name|allExpectedCounts
argument_list|)
expr_stmt|;
comment|// segment w/ categories and some content
name|indexDocsWithFacetsAndSomeTerms
argument_list|(
name|indexWriter
argument_list|,
name|taxoWriter
argument_list|,
name|allExpectedCounts
argument_list|)
expr_stmt|;
comment|// set num children indexed from each dimension
for|for
control|(
name|CategoryPath
name|cp
range|:
name|CATEGORIES_A
control|)
block|{
if|if
condition|(
name|termExpectedCounts
operator|.
name|get
argument_list|(
name|cp
argument_list|)
operator|>
literal|0
condition|)
block|{
operator|++
name|numChildrenIndexedA
expr_stmt|;
block|}
block|}
for|for
control|(
name|CategoryPath
name|cp
range|:
name|CATEGORIES_B
control|)
block|{
if|if
condition|(
name|termExpectedCounts
operator|.
name|get
argument_list|(
name|cp
argument_list|)
operator|>
literal|0
condition|)
block|{
operator|++
name|numChildrenIndexedB
expr_stmt|;
block|}
block|}
name|IOUtils
operator|.
name|close
argument_list|(
name|indexWriter
argument_list|,
name|taxoWriter
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInvalidValidParams
specifier|public
name|void
name|testInvalidValidParams
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|CategoryPath
name|dummyCP
init|=
operator|new
name|CategoryPath
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
specifier|final
name|FacetRequest
name|dummyFR
init|=
operator|new
name|CountFacetRequest
argument_list|(
name|dummyCP
argument_list|,
literal|10
argument_list|)
decl_stmt|;
comment|// only CountFacetRequests are allowed
name|assertNotNull
argument_list|(
literal|"only CountFacetRequests should be allowed"
argument_list|,
name|CountingFacetsCollector
operator|.
name|assertParams
argument_list|(
operator|new
name|FacetSearchParams
argument_list|(
operator|new
name|ScoreFacetRequest
argument_list|(
name|dummyCP
argument_list|,
literal|10
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// only depth=1
name|FacetRequest
name|cfr
init|=
operator|new
name|CountFacetRequest
argument_list|(
name|dummyCP
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|cfr
operator|.
name|setDepth
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"only depth 1 should be allowed"
argument_list|,
name|CountingFacetsCollector
operator|.
name|assertParams
argument_list|(
operator|new
name|FacetSearchParams
argument_list|(
name|cfr
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// only SortOrder.DESCENDING
name|cfr
operator|=
operator|new
name|CountFacetRequest
argument_list|(
name|dummyCP
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|cfr
operator|.
name|setSortOrder
argument_list|(
name|SortOrder
operator|.
name|ASCENDING
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"only SortOrder.DESCENDING should be allowed"
argument_list|,
name|CountingFacetsCollector
operator|.
name|assertParams
argument_list|(
operator|new
name|FacetSearchParams
argument_list|(
name|cfr
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// only SortBy.VALUE
name|cfr
operator|=
operator|new
name|CountFacetRequest
argument_list|(
name|dummyCP
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|cfr
operator|.
name|setSortBy
argument_list|(
name|SortBy
operator|.
name|ORDINAL
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"only SortBy.VALUE should be allowed"
argument_list|,
name|CountingFacetsCollector
operator|.
name|assertParams
argument_list|(
operator|new
name|FacetSearchParams
argument_list|(
name|cfr
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// no numToLabel
name|cfr
operator|=
operator|new
name|CountFacetRequest
argument_list|(
name|dummyCP
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|cfr
operator|.
name|setNumLabel
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"numToLabel should not be allowed"
argument_list|,
name|CountingFacetsCollector
operator|.
name|assertParams
argument_list|(
operator|new
name|FacetSearchParams
argument_list|(
name|cfr
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|FacetIndexingParams
name|fip
init|=
operator|new
name|FacetIndexingParams
argument_list|(
operator|new
name|CategoryListParams
argument_list|(
literal|"moo"
argument_list|)
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|CategoryListParams
argument_list|>
name|getAllCategoryListParams
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|CategoryListParams
index|[]
block|{
name|clParams
block|,
name|clParams
block|}
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"only one CLP should be allowed"
argument_list|,
name|CountingFacetsCollector
operator|.
name|assertParams
argument_list|(
operator|new
name|FacetSearchParams
argument_list|(
name|fip
argument_list|,
name|dummyFR
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|fip
operator|=
operator|new
name|FacetIndexingParams
argument_list|(
operator|new
name|CategoryListParams
argument_list|(
literal|"moo"
argument_list|)
argument_list|)
block|{
specifier|final
name|CategoryListParams
name|clp
init|=
operator|new
name|CategoryListParams
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|IntEncoder
name|createEncoder
parameter_list|()
block|{
return|return
operator|new
name|VInt8IntEncoder
argument_list|()
return|;
block|}
block|}
decl_stmt|;
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|CategoryListParams
argument_list|>
name|getAllCategoryListParams
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|singletonList
argument_list|(
name|clp
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|CategoryListParams
name|getCategoryListParams
parameter_list|(
name|CategoryPath
name|category
parameter_list|)
block|{
return|return
name|clp
return|;
block|}
block|}
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"only DGapVIntEncoder should be allowed"
argument_list|,
name|CountingFacetsCollector
operator|.
name|assertParams
argument_list|(
operator|new
name|FacetSearchParams
argument_list|(
name|fip
argument_list|,
name|dummyFR
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|fip
operator|=
operator|new
name|FacetIndexingParams
argument_list|(
operator|new
name|CategoryListParams
argument_list|(
literal|"moo"
argument_list|)
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|int
name|getPartitionSize
parameter_list|()
block|{
return|return
literal|2
return|;
block|}
block|}
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"partitions should be allowed"
argument_list|,
name|CountingFacetsCollector
operator|.
name|assertParams
argument_list|(
operator|new
name|FacetSearchParams
argument_list|(
name|fip
argument_list|,
name|dummyFR
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDifferentNumResults
specifier|public
name|void
name|testDifferentNumResults
parameter_list|()
throws|throws
name|Exception
block|{
comment|// test the collector w/ FacetRequests and different numResults
name|DirectoryReader
name|indexReader
init|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|indexDir
argument_list|)
decl_stmt|;
name|TaxonomyReader
name|taxoReader
init|=
operator|new
name|DirectoryTaxonomyReader
argument_list|(
name|taxoDir
argument_list|)
decl_stmt|;
name|IndexSearcher
name|searcher
init|=
operator|new
name|IndexSearcher
argument_list|(
name|indexReader
argument_list|)
decl_stmt|;
name|FacetSearchParams
name|fsp
init|=
operator|new
name|FacetSearchParams
argument_list|(
operator|new
name|CountFacetRequest
argument_list|(
name|CP_A
argument_list|,
name|NUM_CHILDREN_CP_A
argument_list|)
argument_list|,
operator|new
name|CountFacetRequest
argument_list|(
name|CP_B
argument_list|,
name|NUM_CHILDREN_CP_B
argument_list|)
argument_list|)
decl_stmt|;
name|FacetsCollector
name|fc
init|=
operator|new
name|CountingFacetsCollector
argument_list|(
name|fsp
argument_list|,
name|taxoReader
argument_list|)
decl_stmt|;
name|TermQuery
name|q
init|=
operator|new
name|TermQuery
argument_list|(
name|A
argument_list|)
decl_stmt|;
name|searcher
operator|.
name|search
argument_list|(
name|q
argument_list|,
name|fc
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|FacetResult
argument_list|>
name|facetResults
init|=
name|fc
operator|.
name|getFacetResults
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"invalid number of facet results"
argument_list|,
literal|2
argument_list|,
name|facetResults
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|FacetResult
name|res
range|:
name|facetResults
control|)
block|{
name|FacetResultNode
name|root
init|=
name|res
operator|.
name|getFacetResultNode
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"wrong count for "
operator|+
name|root
operator|.
name|label
argument_list|,
name|termExpectedCounts
operator|.
name|get
argument_list|(
name|root
operator|.
name|label
argument_list|)
argument_list|,
operator|(
name|int
operator|)
name|root
operator|.
name|value
argument_list|)
expr_stmt|;
for|for
control|(
name|FacetResultNode
name|child
range|:
name|root
operator|.
name|subResults
control|)
block|{
name|assertEquals
argument_list|(
literal|"wrong count for "
operator|+
name|child
operator|.
name|label
argument_list|,
name|termExpectedCounts
operator|.
name|get
argument_list|(
name|child
operator|.
name|label
argument_list|)
argument_list|,
operator|(
name|int
operator|)
name|child
operator|.
name|value
argument_list|)
expr_stmt|;
block|}
block|}
name|IOUtils
operator|.
name|close
argument_list|(
name|indexReader
argument_list|,
name|taxoReader
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAllCounts
specifier|public
name|void
name|testAllCounts
parameter_list|()
throws|throws
name|Exception
block|{
name|DirectoryReader
name|indexReader
init|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|indexDir
argument_list|)
decl_stmt|;
name|TaxonomyReader
name|taxoReader
init|=
operator|new
name|DirectoryTaxonomyReader
argument_list|(
name|taxoDir
argument_list|)
decl_stmt|;
name|IndexSearcher
name|searcher
init|=
operator|new
name|IndexSearcher
argument_list|(
name|indexReader
argument_list|)
decl_stmt|;
name|FacetSearchParams
name|fsp
init|=
operator|new
name|FacetSearchParams
argument_list|(
operator|new
name|CountFacetRequest
argument_list|(
name|CP_A
argument_list|,
name|NUM_CHILDREN_CP_A
argument_list|)
argument_list|,
operator|new
name|CountFacetRequest
argument_list|(
name|CP_B
argument_list|,
name|NUM_CHILDREN_CP_B
argument_list|)
argument_list|)
decl_stmt|;
name|FacetsCollector
name|fc
init|=
operator|new
name|CountingFacetsCollector
argument_list|(
name|fsp
argument_list|,
name|taxoReader
argument_list|)
decl_stmt|;
name|searcher
operator|.
name|search
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
name|fc
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|FacetResult
argument_list|>
name|facetResults
init|=
name|fc
operator|.
name|getFacetResults
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"invalid number of facet results"
argument_list|,
literal|2
argument_list|,
name|facetResults
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|FacetResult
name|res
range|:
name|facetResults
control|)
block|{
name|FacetResultNode
name|root
init|=
name|res
operator|.
name|getFacetResultNode
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"wrong count for "
operator|+
name|root
operator|.
name|label
argument_list|,
name|allExpectedCounts
operator|.
name|get
argument_list|(
name|root
operator|.
name|label
argument_list|)
argument_list|,
operator|(
name|int
operator|)
name|root
operator|.
name|value
argument_list|)
expr_stmt|;
for|for
control|(
name|FacetResultNode
name|child
range|:
name|root
operator|.
name|subResults
control|)
block|{
name|assertEquals
argument_list|(
literal|"wrong count for "
operator|+
name|child
operator|.
name|label
argument_list|,
name|allExpectedCounts
operator|.
name|get
argument_list|(
name|child
operator|.
name|label
argument_list|)
argument_list|,
operator|(
name|int
operator|)
name|child
operator|.
name|value
argument_list|)
expr_stmt|;
block|}
block|}
name|IOUtils
operator|.
name|close
argument_list|(
name|indexReader
argument_list|,
name|taxoReader
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBigNumResults
specifier|public
name|void
name|testBigNumResults
parameter_list|()
throws|throws
name|Exception
block|{
name|DirectoryReader
name|indexReader
init|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|indexDir
argument_list|)
decl_stmt|;
name|TaxonomyReader
name|taxoReader
init|=
operator|new
name|DirectoryTaxonomyReader
argument_list|(
name|taxoDir
argument_list|)
decl_stmt|;
name|IndexSearcher
name|searcher
init|=
operator|new
name|IndexSearcher
argument_list|(
name|indexReader
argument_list|)
decl_stmt|;
name|FacetSearchParams
name|fsp
init|=
operator|new
name|FacetSearchParams
argument_list|(
operator|new
name|CountFacetRequest
argument_list|(
name|CP_A
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
argument_list|,
operator|new
name|CountFacetRequest
argument_list|(
name|CP_B
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
decl_stmt|;
name|FacetsCollector
name|fc
init|=
operator|new
name|CountingFacetsCollector
argument_list|(
name|fsp
argument_list|,
name|taxoReader
argument_list|)
decl_stmt|;
name|searcher
operator|.
name|search
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
name|fc
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|FacetResult
argument_list|>
name|facetResults
init|=
name|fc
operator|.
name|getFacetResults
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"invalid number of facet results"
argument_list|,
literal|2
argument_list|,
name|facetResults
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|FacetResult
name|res
range|:
name|facetResults
control|)
block|{
name|FacetResultNode
name|root
init|=
name|res
operator|.
name|getFacetResultNode
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"wrong count for "
operator|+
name|root
operator|.
name|label
argument_list|,
name|allExpectedCounts
operator|.
name|get
argument_list|(
name|root
operator|.
name|label
argument_list|)
argument_list|,
operator|(
name|int
operator|)
name|root
operator|.
name|value
argument_list|)
expr_stmt|;
for|for
control|(
name|FacetResultNode
name|child
range|:
name|root
operator|.
name|subResults
control|)
block|{
name|assertEquals
argument_list|(
literal|"wrong count for "
operator|+
name|child
operator|.
name|label
argument_list|,
name|allExpectedCounts
operator|.
name|get
argument_list|(
name|child
operator|.
name|label
argument_list|)
argument_list|,
operator|(
name|int
operator|)
name|child
operator|.
name|value
argument_list|)
expr_stmt|;
block|}
block|}
name|IOUtils
operator|.
name|close
argument_list|(
name|indexReader
argument_list|,
name|taxoReader
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDirectSource
specifier|public
name|void
name|testDirectSource
parameter_list|()
throws|throws
name|Exception
block|{
name|DirectoryReader
name|indexReader
init|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|indexDir
argument_list|)
decl_stmt|;
name|TaxonomyReader
name|taxoReader
init|=
operator|new
name|DirectoryTaxonomyReader
argument_list|(
name|taxoDir
argument_list|)
decl_stmt|;
name|IndexSearcher
name|searcher
init|=
operator|new
name|IndexSearcher
argument_list|(
name|indexReader
argument_list|)
decl_stmt|;
name|FacetSearchParams
name|fsp
init|=
operator|new
name|FacetSearchParams
argument_list|(
operator|new
name|CountFacetRequest
argument_list|(
name|CP_A
argument_list|,
name|NUM_CHILDREN_CP_A
argument_list|)
argument_list|,
operator|new
name|CountFacetRequest
argument_list|(
name|CP_B
argument_list|,
name|NUM_CHILDREN_CP_B
argument_list|)
argument_list|)
decl_stmt|;
name|FacetsCollector
name|fc
init|=
operator|new
name|CountingFacetsCollector
argument_list|(
name|fsp
argument_list|,
name|taxoReader
argument_list|,
operator|new
name|FacetArrays
argument_list|(
name|taxoReader
operator|.
name|getSize
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|searcher
operator|.
name|search
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
name|fc
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|FacetResult
argument_list|>
name|facetResults
init|=
name|fc
operator|.
name|getFacetResults
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"invalid number of facet results"
argument_list|,
literal|2
argument_list|,
name|facetResults
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|FacetResult
name|res
range|:
name|facetResults
control|)
block|{
name|FacetResultNode
name|root
init|=
name|res
operator|.
name|getFacetResultNode
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"wrong count for "
operator|+
name|root
operator|.
name|label
argument_list|,
name|allExpectedCounts
operator|.
name|get
argument_list|(
name|root
operator|.
name|label
argument_list|)
argument_list|,
operator|(
name|int
operator|)
name|root
operator|.
name|value
argument_list|)
expr_stmt|;
for|for
control|(
name|FacetResultNode
name|child
range|:
name|root
operator|.
name|subResults
control|)
block|{
name|assertEquals
argument_list|(
literal|"wrong count for "
operator|+
name|child
operator|.
name|label
argument_list|,
name|allExpectedCounts
operator|.
name|get
argument_list|(
name|child
operator|.
name|label
argument_list|)
argument_list|,
operator|(
name|int
operator|)
name|child
operator|.
name|value
argument_list|)
expr_stmt|;
block|}
block|}
name|IOUtils
operator|.
name|close
argument_list|(
name|indexReader
argument_list|,
name|taxoReader
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNoParents
specifier|public
name|void
name|testNoParents
parameter_list|()
throws|throws
name|Exception
block|{
comment|// TODO: when OrdinalPolicy is on CLP, index the NO_PARENTS categories into
comment|// their own dimension, and avoid this index creation
name|Directory
name|indexDir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|Directory
name|taxoDir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriterConfig
name|conf
init|=
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|conf
operator|.
name|setMaxBufferedDocs
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setMergePolicy
argument_list|(
name|NoMergePolicy
operator|.
name|COMPOUND_FILES
argument_list|)
expr_stmt|;
name|IndexWriter
name|indexWriter
init|=
operator|new
name|IndexWriter
argument_list|(
name|indexDir
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|TaxonomyWriter
name|taxoWriter
init|=
operator|new
name|DirectoryTaxonomyWriter
argument_list|(
name|taxoDir
argument_list|)
decl_stmt|;
name|FacetIndexingParams
name|fip
init|=
operator|new
name|FacetIndexingParams
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|CategoryListParams
name|getCategoryListParams
parameter_list|(
name|CategoryPath
name|category
parameter_list|)
block|{
return|return
operator|new
name|CategoryListParams
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|OrdinalPolicy
name|getOrdinalPolicy
parameter_list|()
block|{
return|return
name|OrdinalPolicy
operator|.
name|NO_PARENTS
return|;
block|}
block|}
return|;
block|}
block|}
decl_stmt|;
name|FacetFields
name|facetFields
init|=
operator|new
name|FacetFields
argument_list|(
name|taxoWriter
argument_list|,
name|fip
argument_list|)
decl_stmt|;
name|ObjectToIntMap
argument_list|<
name|CategoryPath
argument_list|>
name|expCounts
init|=
name|newCounts
argument_list|()
decl_stmt|;
comment|// index few docs with categories, not sharing parents.
name|int
name|numDocs
init|=
name|atLeast
argument_list|(
literal|10
argument_list|)
decl_stmt|;
specifier|final
name|CategoryPath
name|cpc
init|=
operator|new
name|CategoryPath
argument_list|(
literal|"L1"
argument_list|,
literal|"L2"
argument_list|,
literal|"L3"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
name|i
operator|++
control|)
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|CategoryPath
argument_list|>
name|categories
init|=
operator|new
name|ArrayList
argument_list|<
name|CategoryPath
argument_list|>
argument_list|()
decl_stmt|;
name|CategoryPath
name|cpa
init|=
name|CATEGORIES_A
index|[
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|NUM_CHILDREN_CP_A
argument_list|)
index|]
decl_stmt|;
name|CategoryPath
name|cpb
init|=
name|CATEGORIES_B
index|[
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|NUM_CHILDREN_CP_B
argument_list|)
index|]
decl_stmt|;
name|categories
operator|.
name|add
argument_list|(
name|cpa
argument_list|)
expr_stmt|;
name|categories
operator|.
name|add
argument_list|(
name|cpb
argument_list|)
expr_stmt|;
name|categories
operator|.
name|add
argument_list|(
name|cpc
argument_list|)
expr_stmt|;
name|expCounts
operator|.
name|put
argument_list|(
name|cpa
argument_list|,
name|expCounts
operator|.
name|get
argument_list|(
name|cpa
argument_list|)
operator|+
literal|1
argument_list|)
expr_stmt|;
name|expCounts
operator|.
name|put
argument_list|(
name|cpb
argument_list|,
name|expCounts
operator|.
name|get
argument_list|(
name|cpb
argument_list|)
operator|+
literal|1
argument_list|)
expr_stmt|;
name|facetFields
operator|.
name|addFields
argument_list|(
name|doc
argument_list|,
name|categories
argument_list|)
expr_stmt|;
name|indexWriter
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
name|expCounts
operator|.
name|put
argument_list|(
name|CP_A
argument_list|,
name|numDocs
argument_list|)
expr_stmt|;
name|expCounts
operator|.
name|put
argument_list|(
name|CP_B
argument_list|,
name|numDocs
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cpc
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|expCounts
operator|.
name|put
argument_list|(
name|cpc
operator|.
name|subpath
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|,
name|numDocs
argument_list|)
expr_stmt|;
block|}
name|IOUtils
operator|.
name|close
argument_list|(
name|indexWriter
argument_list|,
name|taxoWriter
argument_list|)
expr_stmt|;
name|DirectoryReader
name|indexReader
init|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|indexDir
argument_list|)
decl_stmt|;
name|TaxonomyReader
name|taxoReader
init|=
operator|new
name|DirectoryTaxonomyReader
argument_list|(
name|taxoDir
argument_list|)
decl_stmt|;
name|IndexSearcher
name|searcher
init|=
operator|new
name|IndexSearcher
argument_list|(
name|indexReader
argument_list|)
decl_stmt|;
name|FacetSearchParams
name|fsp
init|=
operator|new
name|FacetSearchParams
argument_list|(
name|fip
argument_list|,
operator|new
name|CountFacetRequest
argument_list|(
name|CP_A
argument_list|,
name|NUM_CHILDREN_CP_A
argument_list|)
argument_list|,
operator|new
name|CountFacetRequest
argument_list|(
name|CP_B
argument_list|,
name|NUM_CHILDREN_CP_B
argument_list|)
argument_list|,
operator|new
name|CountFacetRequest
argument_list|(
name|cpc
operator|.
name|subpath
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|10
argument_list|)
argument_list|)
decl_stmt|;
name|FacetsCollector
name|fc
init|=
operator|new
name|CountingFacetsCollector
argument_list|(
name|fsp
argument_list|,
name|taxoReader
argument_list|)
decl_stmt|;
name|searcher
operator|.
name|search
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
name|fc
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|FacetResult
argument_list|>
name|facetResults
init|=
name|fc
operator|.
name|getFacetResults
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"invalid number of facet results"
argument_list|,
literal|3
argument_list|,
name|facetResults
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|FacetResult
name|res
range|:
name|facetResults
control|)
block|{
name|FacetResultNode
name|root
init|=
name|res
operator|.
name|getFacetResultNode
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"wrong count for "
operator|+
name|root
operator|.
name|label
argument_list|,
name|expCounts
operator|.
name|get
argument_list|(
name|root
operator|.
name|label
argument_list|)
argument_list|,
operator|(
name|int
operator|)
name|root
operator|.
name|value
argument_list|)
expr_stmt|;
for|for
control|(
name|FacetResultNode
name|child
range|:
name|root
operator|.
name|subResults
control|)
block|{
name|assertEquals
argument_list|(
literal|"wrong count for "
operator|+
name|child
operator|.
name|label
argument_list|,
name|expCounts
operator|.
name|get
argument_list|(
name|child
operator|.
name|label
argument_list|)
argument_list|,
operator|(
name|int
operator|)
name|child
operator|.
name|value
argument_list|)
expr_stmt|;
block|}
block|}
name|IOUtils
operator|.
name|close
argument_list|(
name|indexReader
argument_list|,
name|taxoReader
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|close
argument_list|(
name|indexDir
argument_list|,
name|taxoDir
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
