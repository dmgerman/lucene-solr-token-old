begin_unit
begin_package
DECL|package|org.apache.lucene.facet.range
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|range
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|DoubleDocValuesField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|DoubleField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|FloatDocValuesField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|FloatField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|LongField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|NumericDocValuesField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|FacetTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|FacetTestUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|index
operator|.
name|FacetFields
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|params
operator|.
name|FacetIndexingParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|params
operator|.
name|FacetSearchParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|search
operator|.
name|CountFacetRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|search
operator|.
name|DrillDownQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|search
operator|.
name|DrillSideways
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|search
operator|.
name|DrillSideways
operator|.
name|DrillSidewaysResult
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|search
operator|.
name|FacetRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|search
operator|.
name|FacetResult
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|search
operator|.
name|FacetResultNode
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|search
operator|.
name|FacetsAccumulator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|search
operator|.
name|FacetsCollector
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|sortedset
operator|.
name|SortedSetDocValuesFacetFields
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|sortedset
operator|.
name|SortedSetDocValuesReaderState
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|taxonomy
operator|.
name|FacetLabel
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|taxonomy
operator|.
name|TaxonomyReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|taxonomy
operator|.
name|directory
operator|.
name|DirectoryTaxonomyReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|taxonomy
operator|.
name|directory
operator|.
name|DirectoryTaxonomyWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriterConfig
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|RandomIndexWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|MatchAllDocsQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|NumericRangeQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|_TestUtil
import|;
end_import
begin_class
DECL|class|TestRangeAccumulator
specifier|public
class|class
name|TestRangeAccumulator
extends|extends
name|FacetTestCase
block|{
DECL|method|testBasicLong
specifier|public
name|void
name|testBasicLong
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|d
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|RandomIndexWriter
name|w
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|d
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|NumericDocValuesField
name|field
init|=
operator|new
name|NumericDocValuesField
argument_list|(
literal|"field"
argument_list|,
literal|0L
argument_list|)
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|field
argument_list|)
expr_stmt|;
for|for
control|(
name|long
name|l
init|=
literal|0
init|;
name|l
operator|<
literal|100
condition|;
name|l
operator|++
control|)
block|{
name|field
operator|.
name|setLongValue
argument_list|(
name|l
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
name|field
operator|.
name|setLongValue
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|IndexReader
name|r
init|=
name|w
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|RangeAccumulator
name|a
init|=
operator|new
name|RangeAccumulator
argument_list|(
operator|new
name|RangeFacetRequest
argument_list|<
name|LongRange
argument_list|>
argument_list|(
literal|"field"
argument_list|,
operator|new
name|LongRange
argument_list|(
literal|"less than 10"
argument_list|,
literal|0L
argument_list|,
literal|true
argument_list|,
literal|10L
argument_list|,
literal|false
argument_list|)
argument_list|,
operator|new
name|LongRange
argument_list|(
literal|"less than or equal to 10"
argument_list|,
literal|0L
argument_list|,
literal|true
argument_list|,
literal|10L
argument_list|,
literal|true
argument_list|)
argument_list|,
operator|new
name|LongRange
argument_list|(
literal|"over 90"
argument_list|,
literal|90L
argument_list|,
literal|false
argument_list|,
literal|100L
argument_list|,
literal|false
argument_list|)
argument_list|,
operator|new
name|LongRange
argument_list|(
literal|"90 or above"
argument_list|,
literal|90L
argument_list|,
literal|true
argument_list|,
literal|100L
argument_list|,
literal|false
argument_list|)
argument_list|,
operator|new
name|LongRange
argument_list|(
literal|"over 1000"
argument_list|,
literal|1000L
argument_list|,
literal|false
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|FacetsCollector
name|fc
init|=
name|FacetsCollector
operator|.
name|create
argument_list|(
name|a
argument_list|)
decl_stmt|;
name|IndexSearcher
name|s
init|=
name|newSearcher
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|s
operator|.
name|search
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
name|fc
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|FacetResult
argument_list|>
name|result
init|=
name|fc
operator|.
name|getFacetResults
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"field (0)\n  less than 10 (10)\n  less than or equal to 10 (11)\n  over 90 (9)\n  90 or above (10)\n  over 1000 (1)\n"
argument_list|,
name|FacetTestUtils
operator|.
name|toSimpleString
argument_list|(
name|result
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
name|d
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/** Tests single request that mixes Range and non-Range    *  faceting, with DrillSideways and taxonomy. */
DECL|method|testMixedRangeAndNonRangeTaxonomy
specifier|public
name|void
name|testMixedRangeAndNonRangeTaxonomy
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|d
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|RandomIndexWriter
name|w
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|d
argument_list|)
decl_stmt|;
name|Directory
name|td
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|DirectoryTaxonomyWriter
name|tw
init|=
operator|new
name|DirectoryTaxonomyWriter
argument_list|(
name|td
argument_list|,
name|IndexWriterConfig
operator|.
name|OpenMode
operator|.
name|CREATE
argument_list|)
decl_stmt|;
name|FacetFields
name|ff
init|=
operator|new
name|FacetFields
argument_list|(
name|tw
argument_list|)
decl_stmt|;
for|for
control|(
name|long
name|l
init|=
literal|0
init|;
name|l
operator|<
literal|100
condition|;
name|l
operator|++
control|)
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
comment|// For computing range facet counts:
name|doc
operator|.
name|add
argument_list|(
operator|new
name|NumericDocValuesField
argument_list|(
literal|"field"
argument_list|,
name|l
argument_list|)
argument_list|)
expr_stmt|;
comment|// For drill down by numeric range:
name|doc
operator|.
name|add
argument_list|(
operator|new
name|LongField
argument_list|(
literal|"field"
argument_list|,
name|l
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|FacetLabel
name|cp
decl_stmt|;
if|if
condition|(
operator|(
name|l
operator|&
literal|3
operator|)
operator|==
literal|0
condition|)
block|{
name|cp
operator|=
operator|new
name|FacetLabel
argument_list|(
literal|"dim"
argument_list|,
literal|"a"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|cp
operator|=
operator|new
name|FacetLabel
argument_list|(
literal|"dim"
argument_list|,
literal|"b"
argument_list|)
expr_stmt|;
block|}
name|ff
operator|.
name|addFields
argument_list|(
name|doc
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|cp
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
specifier|final
name|IndexReader
name|r
init|=
name|w
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
specifier|final
name|TaxonomyReader
name|tr
init|=
operator|new
name|DirectoryTaxonomyReader
argument_list|(
name|tw
argument_list|)
decl_stmt|;
name|tw
operator|.
name|close
argument_list|()
expr_stmt|;
name|IndexSearcher
name|s
init|=
name|newSearcher
argument_list|(
name|r
argument_list|)
decl_stmt|;
specifier|final
name|CountFacetRequest
name|countRequest
init|=
operator|new
name|CountFacetRequest
argument_list|(
operator|new
name|FacetLabel
argument_list|(
literal|"dim"
argument_list|)
argument_list|,
literal|2
argument_list|)
decl_stmt|;
specifier|final
name|RangeFacetRequest
argument_list|<
name|LongRange
argument_list|>
name|rangeRequest
init|=
operator|new
name|RangeFacetRequest
argument_list|<
name|LongRange
argument_list|>
argument_list|(
literal|"field"
argument_list|,
operator|new
name|LongRange
argument_list|(
literal|"less than 10"
argument_list|,
literal|0L
argument_list|,
literal|true
argument_list|,
literal|10L
argument_list|,
literal|false
argument_list|)
argument_list|,
operator|new
name|LongRange
argument_list|(
literal|"less than or equal to 10"
argument_list|,
literal|0L
argument_list|,
literal|true
argument_list|,
literal|10L
argument_list|,
literal|true
argument_list|)
argument_list|,
operator|new
name|LongRange
argument_list|(
literal|"over 90"
argument_list|,
literal|90L
argument_list|,
literal|false
argument_list|,
literal|100L
argument_list|,
literal|false
argument_list|)
argument_list|,
operator|new
name|LongRange
argument_list|(
literal|"90 or above"
argument_list|,
literal|90L
argument_list|,
literal|true
argument_list|,
literal|100L
argument_list|,
literal|false
argument_list|)
argument_list|,
operator|new
name|LongRange
argument_list|(
literal|"over 1000"
argument_list|,
literal|1000L
argument_list|,
literal|false
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|,
literal|false
argument_list|)
argument_list|)
decl_stmt|;
name|FacetSearchParams
name|fsp
init|=
operator|new
name|FacetSearchParams
argument_list|(
name|countRequest
argument_list|,
name|rangeRequest
argument_list|)
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|dimSeen
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|DrillSideways
name|ds
init|=
operator|new
name|DrillSideways
argument_list|(
name|s
argument_list|,
name|tr
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|FacetsAccumulator
name|getDrillDownAccumulator
parameter_list|(
name|FacetSearchParams
name|fsp
parameter_list|)
block|{
name|checkSeen
argument_list|(
name|fsp
argument_list|)
expr_stmt|;
return|return
name|FacetsAccumulator
operator|.
name|create
argument_list|(
name|fsp
argument_list|,
name|r
argument_list|,
name|tr
argument_list|,
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|FacetsAccumulator
name|getDrillSidewaysAccumulator
parameter_list|(
name|String
name|dim
parameter_list|,
name|FacetSearchParams
name|fsp
parameter_list|)
block|{
name|checkSeen
argument_list|(
name|fsp
argument_list|)
expr_stmt|;
return|return
name|FacetsAccumulator
operator|.
name|create
argument_list|(
name|fsp
argument_list|,
name|r
argument_list|,
name|tr
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|private
name|void
name|checkSeen
parameter_list|(
name|FacetSearchParams
name|fsp
parameter_list|)
block|{
comment|// Each dim should up only once, across
comment|// both drillDown and drillSideways requests:
for|for
control|(
name|FacetRequest
name|fr
range|:
name|fsp
operator|.
name|facetRequests
control|)
block|{
name|String
name|dim
init|=
name|fr
operator|.
name|categoryPath
operator|.
name|components
index|[
literal|0
index|]
decl_stmt|;
name|assertFalse
argument_list|(
literal|"dim "
operator|+
name|dim
operator|+
literal|" already seen"
argument_list|,
name|dimSeen
operator|.
name|contains
argument_list|(
name|dim
argument_list|)
argument_list|)
expr_stmt|;
name|dimSeen
operator|.
name|add
argument_list|(
name|dim
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|scoreSubDocsAtOnce
parameter_list|()
block|{
return|return
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
return|;
block|}
block|}
decl_stmt|;
comment|// First search, no drill downs:
name|DrillDownQuery
name|ddq
init|=
operator|new
name|DrillDownQuery
argument_list|(
name|FacetIndexingParams
operator|.
name|DEFAULT
argument_list|,
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|)
decl_stmt|;
name|DrillSidewaysResult
name|dsr
init|=
name|ds
operator|.
name|search
argument_list|(
literal|null
argument_list|,
name|ddq
argument_list|,
literal|10
argument_list|,
name|fsp
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|100
argument_list|,
name|dsr
operator|.
name|hits
operator|.
name|totalHits
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|dsr
operator|.
name|facetResults
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"dim (0)\n  b (75)\n  a (25)\n"
argument_list|,
name|FacetTestUtils
operator|.
name|toSimpleString
argument_list|(
name|dsr
operator|.
name|facetResults
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"field (0)\n  less than 10 (10)\n  less than or equal to 10 (11)\n  over 90 (9)\n  90 or above (10)\n  over 1000 (0)\n"
argument_list|,
name|FacetTestUtils
operator|.
name|toSimpleString
argument_list|(
name|dsr
operator|.
name|facetResults
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Second search, drill down on dim=b:
name|ddq
operator|=
operator|new
name|DrillDownQuery
argument_list|(
name|FacetIndexingParams
operator|.
name|DEFAULT
argument_list|,
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|)
expr_stmt|;
name|ddq
operator|.
name|add
argument_list|(
operator|new
name|FacetLabel
argument_list|(
literal|"dim"
argument_list|,
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|dimSeen
operator|.
name|clear
argument_list|()
expr_stmt|;
name|dsr
operator|=
name|ds
operator|.
name|search
argument_list|(
literal|null
argument_list|,
name|ddq
argument_list|,
literal|10
argument_list|,
name|fsp
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|75
argument_list|,
name|dsr
operator|.
name|hits
operator|.
name|totalHits
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|dsr
operator|.
name|facetResults
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"dim (0)\n  b (75)\n  a (25)\n"
argument_list|,
name|FacetTestUtils
operator|.
name|toSimpleString
argument_list|(
name|dsr
operator|.
name|facetResults
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"field (0)\n  less than 10 (7)\n  less than or equal to 10 (8)\n  over 90 (7)\n  90 or above (8)\n  over 1000 (0)\n"
argument_list|,
name|FacetTestUtils
operator|.
name|toSimpleString
argument_list|(
name|dsr
operator|.
name|facetResults
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Third search, drill down on "less than or equal to 10":
name|ddq
operator|=
operator|new
name|DrillDownQuery
argument_list|(
name|FacetIndexingParams
operator|.
name|DEFAULT
argument_list|,
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|)
expr_stmt|;
name|ddq
operator|.
name|add
argument_list|(
literal|"field"
argument_list|,
name|NumericRangeQuery
operator|.
name|newLongRange
argument_list|(
literal|"field"
argument_list|,
literal|0L
argument_list|,
literal|10L
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|dimSeen
operator|.
name|clear
argument_list|()
expr_stmt|;
name|dsr
operator|=
name|ds
operator|.
name|search
argument_list|(
literal|null
argument_list|,
name|ddq
argument_list|,
literal|10
argument_list|,
name|fsp
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|11
argument_list|,
name|dsr
operator|.
name|hits
operator|.
name|totalHits
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|dsr
operator|.
name|facetResults
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"dim (0)\n  b (8)\n  a (3)\n"
argument_list|,
name|FacetTestUtils
operator|.
name|toSimpleString
argument_list|(
name|dsr
operator|.
name|facetResults
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"field (0)\n  less than 10 (10)\n  less than or equal to 10 (11)\n  over 90 (9)\n  90 or above (10)\n  over 1000 (0)\n"
argument_list|,
name|FacetTestUtils
operator|.
name|toSimpleString
argument_list|(
name|dsr
operator|.
name|facetResults
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|close
argument_list|(
name|tr
argument_list|,
name|td
argument_list|,
name|r
argument_list|,
name|d
argument_list|)
expr_stmt|;
block|}
comment|/** Tests single request that mixes Range and non-Range    *  faceting, with DrillSideways and SortedSet. */
DECL|method|testMixedRangeAndNonRangeSortedSet
specifier|public
name|void
name|testMixedRangeAndNonRangeSortedSet
parameter_list|()
throws|throws
name|Exception
block|{
name|assumeTrue
argument_list|(
literal|"Test requires SortedSetDV support"
argument_list|,
name|defaultCodecSupportsSortedSet
argument_list|()
argument_list|)
expr_stmt|;
name|Directory
name|d
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|RandomIndexWriter
name|w
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|d
argument_list|)
decl_stmt|;
name|SortedSetDocValuesFacetFields
name|ff
init|=
operator|new
name|SortedSetDocValuesFacetFields
argument_list|()
decl_stmt|;
for|for
control|(
name|long
name|l
init|=
literal|0
init|;
name|l
operator|<
literal|100
condition|;
name|l
operator|++
control|)
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
comment|// For computing range facet counts:
name|doc
operator|.
name|add
argument_list|(
operator|new
name|NumericDocValuesField
argument_list|(
literal|"field"
argument_list|,
name|l
argument_list|)
argument_list|)
expr_stmt|;
comment|// For drill down by numeric range:
name|doc
operator|.
name|add
argument_list|(
operator|new
name|LongField
argument_list|(
literal|"field"
argument_list|,
name|l
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|FacetLabel
name|cp
decl_stmt|;
if|if
condition|(
operator|(
name|l
operator|&
literal|3
operator|)
operator|==
literal|0
condition|)
block|{
name|cp
operator|=
operator|new
name|FacetLabel
argument_list|(
literal|"dim"
argument_list|,
literal|"a"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|cp
operator|=
operator|new
name|FacetLabel
argument_list|(
literal|"dim"
argument_list|,
literal|"b"
argument_list|)
expr_stmt|;
block|}
name|ff
operator|.
name|addFields
argument_list|(
name|doc
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|cp
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
specifier|final
name|IndexReader
name|r
init|=
name|w
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|IndexSearcher
name|s
init|=
name|newSearcher
argument_list|(
name|r
argument_list|)
decl_stmt|;
specifier|final
name|SortedSetDocValuesReaderState
name|state
init|=
operator|new
name|SortedSetDocValuesReaderState
argument_list|(
name|s
operator|.
name|getIndexReader
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|CountFacetRequest
name|countRequest
init|=
operator|new
name|CountFacetRequest
argument_list|(
operator|new
name|FacetLabel
argument_list|(
literal|"dim"
argument_list|)
argument_list|,
literal|2
argument_list|)
decl_stmt|;
specifier|final
name|RangeFacetRequest
argument_list|<
name|LongRange
argument_list|>
name|rangeRequest
init|=
operator|new
name|RangeFacetRequest
argument_list|<
name|LongRange
argument_list|>
argument_list|(
literal|"field"
argument_list|,
operator|new
name|LongRange
argument_list|(
literal|"less than 10"
argument_list|,
literal|0L
argument_list|,
literal|true
argument_list|,
literal|10L
argument_list|,
literal|false
argument_list|)
argument_list|,
operator|new
name|LongRange
argument_list|(
literal|"less than or equal to 10"
argument_list|,
literal|0L
argument_list|,
literal|true
argument_list|,
literal|10L
argument_list|,
literal|true
argument_list|)
argument_list|,
operator|new
name|LongRange
argument_list|(
literal|"over 90"
argument_list|,
literal|90L
argument_list|,
literal|false
argument_list|,
literal|100L
argument_list|,
literal|false
argument_list|)
argument_list|,
operator|new
name|LongRange
argument_list|(
literal|"90 or above"
argument_list|,
literal|90L
argument_list|,
literal|true
argument_list|,
literal|100L
argument_list|,
literal|false
argument_list|)
argument_list|,
operator|new
name|LongRange
argument_list|(
literal|"over 1000"
argument_list|,
literal|1000L
argument_list|,
literal|false
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|,
literal|false
argument_list|)
argument_list|)
decl_stmt|;
name|FacetSearchParams
name|fsp
init|=
operator|new
name|FacetSearchParams
argument_list|(
name|countRequest
argument_list|,
name|rangeRequest
argument_list|)
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|dimSeen
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|DrillSideways
name|ds
init|=
operator|new
name|DrillSideways
argument_list|(
name|s
argument_list|,
name|state
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|FacetsAccumulator
name|getDrillDownAccumulator
parameter_list|(
name|FacetSearchParams
name|fsp
parameter_list|)
throws|throws
name|IOException
block|{
name|checkSeen
argument_list|(
name|fsp
argument_list|)
expr_stmt|;
return|return
name|FacetsAccumulator
operator|.
name|create
argument_list|(
name|fsp
argument_list|,
name|state
argument_list|,
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|FacetsAccumulator
name|getDrillSidewaysAccumulator
parameter_list|(
name|String
name|dim
parameter_list|,
name|FacetSearchParams
name|fsp
parameter_list|)
throws|throws
name|IOException
block|{
name|checkSeen
argument_list|(
name|fsp
argument_list|)
expr_stmt|;
return|return
name|FacetsAccumulator
operator|.
name|create
argument_list|(
name|fsp
argument_list|,
name|state
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|private
name|void
name|checkSeen
parameter_list|(
name|FacetSearchParams
name|fsp
parameter_list|)
block|{
comment|// Each dim should up only once, across
comment|// both drillDown and drillSideways requests:
for|for
control|(
name|FacetRequest
name|fr
range|:
name|fsp
operator|.
name|facetRequests
control|)
block|{
name|String
name|dim
init|=
name|fr
operator|.
name|categoryPath
operator|.
name|components
index|[
literal|0
index|]
decl_stmt|;
name|assertFalse
argument_list|(
literal|"dim "
operator|+
name|dim
operator|+
literal|" already seen"
argument_list|,
name|dimSeen
operator|.
name|contains
argument_list|(
name|dim
argument_list|)
argument_list|)
expr_stmt|;
name|dimSeen
operator|.
name|add
argument_list|(
name|dim
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|scoreSubDocsAtOnce
parameter_list|()
block|{
return|return
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
return|;
block|}
block|}
decl_stmt|;
comment|// First search, no drill downs:
name|DrillDownQuery
name|ddq
init|=
operator|new
name|DrillDownQuery
argument_list|(
name|FacetIndexingParams
operator|.
name|DEFAULT
argument_list|,
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|)
decl_stmt|;
name|DrillSidewaysResult
name|dsr
init|=
name|ds
operator|.
name|search
argument_list|(
literal|null
argument_list|,
name|ddq
argument_list|,
literal|10
argument_list|,
name|fsp
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|100
argument_list|,
name|dsr
operator|.
name|hits
operator|.
name|totalHits
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|dsr
operator|.
name|facetResults
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"dim (0)\n  b (75)\n  a (25)\n"
argument_list|,
name|FacetTestUtils
operator|.
name|toSimpleString
argument_list|(
name|dsr
operator|.
name|facetResults
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"field (0)\n  less than 10 (10)\n  less than or equal to 10 (11)\n  over 90 (9)\n  90 or above (10)\n  over 1000 (0)\n"
argument_list|,
name|FacetTestUtils
operator|.
name|toSimpleString
argument_list|(
name|dsr
operator|.
name|facetResults
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Second search, drill down on dim=b:
name|ddq
operator|=
operator|new
name|DrillDownQuery
argument_list|(
name|FacetIndexingParams
operator|.
name|DEFAULT
argument_list|,
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|)
expr_stmt|;
name|ddq
operator|.
name|add
argument_list|(
operator|new
name|FacetLabel
argument_list|(
literal|"dim"
argument_list|,
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|dimSeen
operator|.
name|clear
argument_list|()
expr_stmt|;
name|dsr
operator|=
name|ds
operator|.
name|search
argument_list|(
literal|null
argument_list|,
name|ddq
argument_list|,
literal|10
argument_list|,
name|fsp
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|75
argument_list|,
name|dsr
operator|.
name|hits
operator|.
name|totalHits
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|dsr
operator|.
name|facetResults
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"dim (0)\n  b (75)\n  a (25)\n"
argument_list|,
name|FacetTestUtils
operator|.
name|toSimpleString
argument_list|(
name|dsr
operator|.
name|facetResults
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"field (0)\n  less than 10 (7)\n  less than or equal to 10 (8)\n  over 90 (7)\n  90 or above (8)\n  over 1000 (0)\n"
argument_list|,
name|FacetTestUtils
operator|.
name|toSimpleString
argument_list|(
name|dsr
operator|.
name|facetResults
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Third search, drill down on "less than or equal to 10":
name|ddq
operator|=
operator|new
name|DrillDownQuery
argument_list|(
name|FacetIndexingParams
operator|.
name|DEFAULT
argument_list|,
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|)
expr_stmt|;
name|ddq
operator|.
name|add
argument_list|(
literal|"field"
argument_list|,
name|NumericRangeQuery
operator|.
name|newLongRange
argument_list|(
literal|"field"
argument_list|,
literal|0L
argument_list|,
literal|10L
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|dimSeen
operator|.
name|clear
argument_list|()
expr_stmt|;
name|dsr
operator|=
name|ds
operator|.
name|search
argument_list|(
literal|null
argument_list|,
name|ddq
argument_list|,
literal|10
argument_list|,
name|fsp
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|11
argument_list|,
name|dsr
operator|.
name|hits
operator|.
name|totalHits
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|dsr
operator|.
name|facetResults
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"dim (0)\n  b (8)\n  a (3)\n"
argument_list|,
name|FacetTestUtils
operator|.
name|toSimpleString
argument_list|(
name|dsr
operator|.
name|facetResults
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"field (0)\n  less than 10 (10)\n  less than or equal to 10 (11)\n  over 90 (9)\n  90 or above (10)\n  over 1000 (0)\n"
argument_list|,
name|FacetTestUtils
operator|.
name|toSimpleString
argument_list|(
name|dsr
operator|.
name|facetResults
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|close
argument_list|(
name|r
argument_list|,
name|d
argument_list|)
expr_stmt|;
block|}
DECL|method|testBasicDouble
specifier|public
name|void
name|testBasicDouble
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|d
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|RandomIndexWriter
name|w
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|d
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|DoubleDocValuesField
name|field
init|=
operator|new
name|DoubleDocValuesField
argument_list|(
literal|"field"
argument_list|,
literal|0.0
argument_list|)
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|field
argument_list|)
expr_stmt|;
for|for
control|(
name|long
name|l
init|=
literal|0
init|;
name|l
operator|<
literal|100
condition|;
name|l
operator|++
control|)
block|{
name|field
operator|.
name|setDoubleValue
argument_list|(
name|l
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
name|IndexReader
name|r
init|=
name|w
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|RangeAccumulator
name|a
init|=
operator|new
name|RangeAccumulator
argument_list|(
operator|new
name|RangeFacetRequest
argument_list|<
name|DoubleRange
argument_list|>
argument_list|(
literal|"field"
argument_list|,
operator|new
name|DoubleRange
argument_list|(
literal|"less than 10"
argument_list|,
literal|0.0
argument_list|,
literal|true
argument_list|,
literal|10.0
argument_list|,
literal|false
argument_list|)
argument_list|,
operator|new
name|DoubleRange
argument_list|(
literal|"less than or equal to 10"
argument_list|,
literal|0.0
argument_list|,
literal|true
argument_list|,
literal|10.0
argument_list|,
literal|true
argument_list|)
argument_list|,
operator|new
name|DoubleRange
argument_list|(
literal|"over 90"
argument_list|,
literal|90.0
argument_list|,
literal|false
argument_list|,
literal|100.0
argument_list|,
literal|false
argument_list|)
argument_list|,
operator|new
name|DoubleRange
argument_list|(
literal|"90 or above"
argument_list|,
literal|90.0
argument_list|,
literal|true
argument_list|,
literal|100.0
argument_list|,
literal|false
argument_list|)
argument_list|,
operator|new
name|DoubleRange
argument_list|(
literal|"over 1000"
argument_list|,
literal|1000.0
argument_list|,
literal|false
argument_list|,
name|Double
operator|.
name|POSITIVE_INFINITY
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|FacetsCollector
name|fc
init|=
name|FacetsCollector
operator|.
name|create
argument_list|(
name|a
argument_list|)
decl_stmt|;
name|IndexSearcher
name|s
init|=
name|newSearcher
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|s
operator|.
name|search
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
name|fc
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|FacetResult
argument_list|>
name|result
init|=
name|fc
operator|.
name|getFacetResults
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"field (0)\n  less than 10 (10)\n  less than or equal to 10 (11)\n  over 90 (9)\n  90 or above (10)\n  over 1000 (0)\n"
argument_list|,
name|FacetTestUtils
operator|.
name|toSimpleString
argument_list|(
name|result
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
name|d
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testBasicFloat
specifier|public
name|void
name|testBasicFloat
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|d
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|RandomIndexWriter
name|w
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|d
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|FloatDocValuesField
name|field
init|=
operator|new
name|FloatDocValuesField
argument_list|(
literal|"field"
argument_list|,
literal|0.0f
argument_list|)
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|field
argument_list|)
expr_stmt|;
for|for
control|(
name|long
name|l
init|=
literal|0
init|;
name|l
operator|<
literal|100
condition|;
name|l
operator|++
control|)
block|{
name|field
operator|.
name|setFloatValue
argument_list|(
name|l
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
name|IndexReader
name|r
init|=
name|w
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|RangeAccumulator
name|a
init|=
operator|new
name|RangeAccumulator
argument_list|(
operator|new
name|RangeFacetRequest
argument_list|<
name|FloatRange
argument_list|>
argument_list|(
literal|"field"
argument_list|,
operator|new
name|FloatRange
argument_list|(
literal|"less than 10"
argument_list|,
literal|0.0f
argument_list|,
literal|true
argument_list|,
literal|10.0f
argument_list|,
literal|false
argument_list|)
argument_list|,
operator|new
name|FloatRange
argument_list|(
literal|"less than or equal to 10"
argument_list|,
literal|0.0f
argument_list|,
literal|true
argument_list|,
literal|10.0f
argument_list|,
literal|true
argument_list|)
argument_list|,
operator|new
name|FloatRange
argument_list|(
literal|"over 90"
argument_list|,
literal|90.0f
argument_list|,
literal|false
argument_list|,
literal|100.0f
argument_list|,
literal|false
argument_list|)
argument_list|,
operator|new
name|FloatRange
argument_list|(
literal|"90 or above"
argument_list|,
literal|90.0f
argument_list|,
literal|true
argument_list|,
literal|100.0f
argument_list|,
literal|false
argument_list|)
argument_list|,
operator|new
name|FloatRange
argument_list|(
literal|"over 1000"
argument_list|,
literal|1000.0f
argument_list|,
literal|false
argument_list|,
name|Float
operator|.
name|POSITIVE_INFINITY
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|FacetsCollector
name|fc
init|=
name|FacetsCollector
operator|.
name|create
argument_list|(
name|a
argument_list|)
decl_stmt|;
name|IndexSearcher
name|s
init|=
name|newSearcher
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|s
operator|.
name|search
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
name|fc
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|FacetResult
argument_list|>
name|result
init|=
name|fc
operator|.
name|getFacetResults
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"field (0)\n  less than 10 (10)\n  less than or equal to 10 (11)\n  over 90 (9)\n  90 or above (10)\n  over 1000 (0)\n"
argument_list|,
name|FacetTestUtils
operator|.
name|toSimpleString
argument_list|(
name|result
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
name|d
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testRandomLongs
specifier|public
name|void
name|testRandomLongs
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|RandomIndexWriter
name|w
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|)
decl_stmt|;
name|int
name|numDocs
init|=
name|atLeast
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
name|long
index|[]
name|values
init|=
operator|new
name|long
index|[
name|numDocs
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
name|i
operator|++
control|)
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|long
name|v
init|=
name|random
argument_list|()
operator|.
name|nextLong
argument_list|()
decl_stmt|;
name|values
index|[
name|i
index|]
operator|=
name|v
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|NumericDocValuesField
argument_list|(
literal|"field"
argument_list|,
name|v
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|LongField
argument_list|(
literal|"field"
argument_list|,
name|v
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
name|IndexReader
name|r
init|=
name|w
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|IndexSearcher
name|s
init|=
name|newSearcher
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|int
name|numIters
init|=
name|atLeast
argument_list|(
literal|10
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|iter
init|=
literal|0
init|;
name|iter
operator|<
name|numIters
condition|;
name|iter
operator|++
control|)
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TEST: iter="
operator|+
name|iter
argument_list|)
expr_stmt|;
block|}
name|int
name|numRange
init|=
name|_TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|LongRange
index|[]
name|ranges
init|=
operator|new
name|LongRange
index|[
name|numRange
index|]
decl_stmt|;
name|int
index|[]
name|expectedCounts
init|=
operator|new
name|int
index|[
name|numRange
index|]
decl_stmt|;
for|for
control|(
name|int
name|rangeID
init|=
literal|0
init|;
name|rangeID
operator|<
name|numRange
condition|;
name|rangeID
operator|++
control|)
block|{
name|long
name|min
init|=
name|random
argument_list|()
operator|.
name|nextLong
argument_list|()
decl_stmt|;
name|long
name|max
init|=
name|random
argument_list|()
operator|.
name|nextLong
argument_list|()
decl_stmt|;
if|if
condition|(
name|min
operator|>
name|max
condition|)
block|{
name|long
name|x
init|=
name|min
decl_stmt|;
name|min
operator|=
name|max
expr_stmt|;
name|max
operator|=
name|x
expr_stmt|;
block|}
name|boolean
name|minIncl
init|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
decl_stmt|;
name|boolean
name|maxIncl
init|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
decl_stmt|;
name|ranges
index|[
name|rangeID
index|]
operator|=
operator|new
name|LongRange
argument_list|(
literal|"r"
operator|+
name|rangeID
argument_list|,
name|min
argument_list|,
name|minIncl
argument_list|,
name|max
argument_list|,
name|maxIncl
argument_list|)
expr_stmt|;
comment|// Do "slow but hopefully correct" computation of
comment|// expected count:
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
name|i
operator|++
control|)
block|{
name|boolean
name|accept
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|minIncl
condition|)
block|{
name|accept
operator|&=
name|values
index|[
name|i
index|]
operator|>=
name|min
expr_stmt|;
block|}
else|else
block|{
name|accept
operator|&=
name|values
index|[
name|i
index|]
operator|>
name|min
expr_stmt|;
block|}
if|if
condition|(
name|maxIncl
condition|)
block|{
name|accept
operator|&=
name|values
index|[
name|i
index|]
operator|<=
name|max
expr_stmt|;
block|}
else|else
block|{
name|accept
operator|&=
name|values
index|[
name|i
index|]
operator|<
name|max
expr_stmt|;
block|}
if|if
condition|(
name|accept
condition|)
block|{
name|expectedCounts
index|[
name|rangeID
index|]
operator|++
expr_stmt|;
block|}
block|}
block|}
name|FacetsCollector
name|fc
init|=
name|FacetsCollector
operator|.
name|create
argument_list|(
operator|new
name|RangeAccumulator
argument_list|(
operator|new
name|RangeFacetRequest
argument_list|<
name|LongRange
argument_list|>
argument_list|(
literal|"field"
argument_list|,
name|ranges
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|s
operator|.
name|search
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
name|fc
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|FacetResult
argument_list|>
name|results
init|=
name|fc
operator|.
name|getFacetResults
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|FacetResultNode
argument_list|>
name|nodes
init|=
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getFacetResultNode
argument_list|()
operator|.
name|subResults
decl_stmt|;
name|assertEquals
argument_list|(
name|numRange
argument_list|,
name|nodes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|rangeID
init|=
literal|0
init|;
name|rangeID
operator|<
name|numRange
condition|;
name|rangeID
operator|++
control|)
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  range "
operator|+
name|rangeID
operator|+
literal|" expectedCount="
operator|+
name|expectedCounts
index|[
name|rangeID
index|]
argument_list|)
expr_stmt|;
block|}
name|FacetResultNode
name|subNode
init|=
name|nodes
operator|.
name|get
argument_list|(
name|rangeID
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"field/r"
operator|+
name|rangeID
argument_list|,
name|subNode
operator|.
name|label
operator|.
name|toString
argument_list|(
literal|'/'
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedCounts
index|[
name|rangeID
index|]
argument_list|,
operator|(
name|int
operator|)
name|subNode
operator|.
name|value
argument_list|)
expr_stmt|;
name|LongRange
name|range
init|=
call|(
name|LongRange
call|)
argument_list|(
operator|(
name|RangeFacetRequest
argument_list|<
name|?
argument_list|>
operator|)
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getFacetRequest
argument_list|()
argument_list|)
operator|.
name|ranges
index|[
name|rangeID
index|]
decl_stmt|;
comment|// Test drill-down:
name|DrillDownQuery
name|ddq
init|=
operator|new
name|DrillDownQuery
argument_list|(
name|FacetIndexingParams
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
name|ddq
operator|.
name|add
argument_list|(
literal|"field"
argument_list|,
name|NumericRangeQuery
operator|.
name|newLongRange
argument_list|(
literal|"field"
argument_list|,
name|range
operator|.
name|min
argument_list|,
name|range
operator|.
name|max
argument_list|,
name|range
operator|.
name|minInclusive
argument_list|,
name|range
operator|.
name|maxInclusive
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedCounts
index|[
name|rangeID
index|]
argument_list|,
name|s
operator|.
name|search
argument_list|(
name|ddq
argument_list|,
literal|10
argument_list|)
operator|.
name|totalHits
argument_list|)
expr_stmt|;
block|}
block|}
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testRandomFloats
specifier|public
name|void
name|testRandomFloats
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|RandomIndexWriter
name|w
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|)
decl_stmt|;
name|int
name|numDocs
init|=
name|atLeast
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
name|float
index|[]
name|values
init|=
operator|new
name|float
index|[
name|numDocs
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
name|i
operator|++
control|)
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|float
name|v
init|=
name|random
argument_list|()
operator|.
name|nextFloat
argument_list|()
decl_stmt|;
name|values
index|[
name|i
index|]
operator|=
name|v
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|FloatDocValuesField
argument_list|(
literal|"field"
argument_list|,
name|v
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|FloatField
argument_list|(
literal|"field"
argument_list|,
name|v
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
name|IndexReader
name|r
init|=
name|w
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|IndexSearcher
name|s
init|=
name|newSearcher
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|int
name|numIters
init|=
name|atLeast
argument_list|(
literal|10
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|iter
init|=
literal|0
init|;
name|iter
operator|<
name|numIters
condition|;
name|iter
operator|++
control|)
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TEST: iter="
operator|+
name|iter
argument_list|)
expr_stmt|;
block|}
name|int
name|numRange
init|=
name|_TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|FloatRange
index|[]
name|ranges
init|=
operator|new
name|FloatRange
index|[
name|numRange
index|]
decl_stmt|;
name|int
index|[]
name|expectedCounts
init|=
operator|new
name|int
index|[
name|numRange
index|]
decl_stmt|;
for|for
control|(
name|int
name|rangeID
init|=
literal|0
init|;
name|rangeID
operator|<
name|numRange
condition|;
name|rangeID
operator|++
control|)
block|{
name|float
name|min
init|=
name|random
argument_list|()
operator|.
name|nextFloat
argument_list|()
decl_stmt|;
name|float
name|max
init|=
name|random
argument_list|()
operator|.
name|nextFloat
argument_list|()
decl_stmt|;
if|if
condition|(
name|min
operator|>
name|max
condition|)
block|{
name|float
name|x
init|=
name|min
decl_stmt|;
name|min
operator|=
name|max
expr_stmt|;
name|max
operator|=
name|x
expr_stmt|;
block|}
name|boolean
name|minIncl
init|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
decl_stmt|;
name|boolean
name|maxIncl
init|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
decl_stmt|;
name|ranges
index|[
name|rangeID
index|]
operator|=
operator|new
name|FloatRange
argument_list|(
literal|"r"
operator|+
name|rangeID
argument_list|,
name|min
argument_list|,
name|minIncl
argument_list|,
name|max
argument_list|,
name|maxIncl
argument_list|)
expr_stmt|;
comment|// Do "slow but hopefully correct" computation of
comment|// expected count:
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
name|i
operator|++
control|)
block|{
name|boolean
name|accept
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|minIncl
condition|)
block|{
name|accept
operator|&=
name|values
index|[
name|i
index|]
operator|>=
name|min
expr_stmt|;
block|}
else|else
block|{
name|accept
operator|&=
name|values
index|[
name|i
index|]
operator|>
name|min
expr_stmt|;
block|}
if|if
condition|(
name|maxIncl
condition|)
block|{
name|accept
operator|&=
name|values
index|[
name|i
index|]
operator|<=
name|max
expr_stmt|;
block|}
else|else
block|{
name|accept
operator|&=
name|values
index|[
name|i
index|]
operator|<
name|max
expr_stmt|;
block|}
if|if
condition|(
name|accept
condition|)
block|{
name|expectedCounts
index|[
name|rangeID
index|]
operator|++
expr_stmt|;
block|}
block|}
block|}
name|FacetsCollector
name|fc
init|=
name|FacetsCollector
operator|.
name|create
argument_list|(
operator|new
name|RangeAccumulator
argument_list|(
operator|new
name|RangeFacetRequest
argument_list|<
name|FloatRange
argument_list|>
argument_list|(
literal|"field"
argument_list|,
name|ranges
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|s
operator|.
name|search
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
name|fc
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|FacetResult
argument_list|>
name|results
init|=
name|fc
operator|.
name|getFacetResults
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|FacetResultNode
argument_list|>
name|nodes
init|=
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getFacetResultNode
argument_list|()
operator|.
name|subResults
decl_stmt|;
name|assertEquals
argument_list|(
name|numRange
argument_list|,
name|nodes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|rangeID
init|=
literal|0
init|;
name|rangeID
operator|<
name|numRange
condition|;
name|rangeID
operator|++
control|)
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  range "
operator|+
name|rangeID
operator|+
literal|" expectedCount="
operator|+
name|expectedCounts
index|[
name|rangeID
index|]
argument_list|)
expr_stmt|;
block|}
name|FacetResultNode
name|subNode
init|=
name|nodes
operator|.
name|get
argument_list|(
name|rangeID
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"field/r"
operator|+
name|rangeID
argument_list|,
name|subNode
operator|.
name|label
operator|.
name|toString
argument_list|(
literal|'/'
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedCounts
index|[
name|rangeID
index|]
argument_list|,
operator|(
name|int
operator|)
name|subNode
operator|.
name|value
argument_list|)
expr_stmt|;
name|FloatRange
name|range
init|=
call|(
name|FloatRange
call|)
argument_list|(
operator|(
name|RangeFacetRequest
argument_list|<
name|?
argument_list|>
operator|)
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getFacetRequest
argument_list|()
argument_list|)
operator|.
name|ranges
index|[
name|rangeID
index|]
decl_stmt|;
comment|// Test drill-down:
name|DrillDownQuery
name|ddq
init|=
operator|new
name|DrillDownQuery
argument_list|(
name|FacetIndexingParams
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
name|ddq
operator|.
name|add
argument_list|(
literal|"field"
argument_list|,
name|NumericRangeQuery
operator|.
name|newFloatRange
argument_list|(
literal|"field"
argument_list|,
name|range
operator|.
name|min
argument_list|,
name|range
operator|.
name|max
argument_list|,
name|range
operator|.
name|minInclusive
argument_list|,
name|range
operator|.
name|maxInclusive
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedCounts
index|[
name|rangeID
index|]
argument_list|,
name|s
operator|.
name|search
argument_list|(
name|ddq
argument_list|,
literal|10
argument_list|)
operator|.
name|totalHits
argument_list|)
expr_stmt|;
block|}
block|}
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testRandomDoubles
specifier|public
name|void
name|testRandomDoubles
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|RandomIndexWriter
name|w
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|)
decl_stmt|;
name|int
name|numDocs
init|=
name|atLeast
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
name|double
index|[]
name|values
init|=
operator|new
name|double
index|[
name|numDocs
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
name|i
operator|++
control|)
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|double
name|v
init|=
name|random
argument_list|()
operator|.
name|nextDouble
argument_list|()
decl_stmt|;
name|values
index|[
name|i
index|]
operator|=
name|v
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|DoubleDocValuesField
argument_list|(
literal|"field"
argument_list|,
name|v
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|DoubleField
argument_list|(
literal|"field"
argument_list|,
name|v
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
name|IndexReader
name|r
init|=
name|w
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|IndexSearcher
name|s
init|=
name|newSearcher
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|int
name|numIters
init|=
name|atLeast
argument_list|(
literal|10
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|iter
init|=
literal|0
init|;
name|iter
operator|<
name|numIters
condition|;
name|iter
operator|++
control|)
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TEST: iter="
operator|+
name|iter
argument_list|)
expr_stmt|;
block|}
name|int
name|numRange
init|=
name|_TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|DoubleRange
index|[]
name|ranges
init|=
operator|new
name|DoubleRange
index|[
name|numRange
index|]
decl_stmt|;
name|int
index|[]
name|expectedCounts
init|=
operator|new
name|int
index|[
name|numRange
index|]
decl_stmt|;
for|for
control|(
name|int
name|rangeID
init|=
literal|0
init|;
name|rangeID
operator|<
name|numRange
condition|;
name|rangeID
operator|++
control|)
block|{
name|double
name|min
init|=
name|random
argument_list|()
operator|.
name|nextDouble
argument_list|()
decl_stmt|;
name|double
name|max
init|=
name|random
argument_list|()
operator|.
name|nextDouble
argument_list|()
decl_stmt|;
if|if
condition|(
name|min
operator|>
name|max
condition|)
block|{
name|double
name|x
init|=
name|min
decl_stmt|;
name|min
operator|=
name|max
expr_stmt|;
name|max
operator|=
name|x
expr_stmt|;
block|}
name|boolean
name|minIncl
init|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
decl_stmt|;
name|boolean
name|maxIncl
init|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
decl_stmt|;
name|ranges
index|[
name|rangeID
index|]
operator|=
operator|new
name|DoubleRange
argument_list|(
literal|"r"
operator|+
name|rangeID
argument_list|,
name|min
argument_list|,
name|minIncl
argument_list|,
name|max
argument_list|,
name|maxIncl
argument_list|)
expr_stmt|;
comment|// Do "slow but hopefully correct" computation of
comment|// expected count:
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
name|i
operator|++
control|)
block|{
name|boolean
name|accept
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|minIncl
condition|)
block|{
name|accept
operator|&=
name|values
index|[
name|i
index|]
operator|>=
name|min
expr_stmt|;
block|}
else|else
block|{
name|accept
operator|&=
name|values
index|[
name|i
index|]
operator|>
name|min
expr_stmt|;
block|}
if|if
condition|(
name|maxIncl
condition|)
block|{
name|accept
operator|&=
name|values
index|[
name|i
index|]
operator|<=
name|max
expr_stmt|;
block|}
else|else
block|{
name|accept
operator|&=
name|values
index|[
name|i
index|]
operator|<
name|max
expr_stmt|;
block|}
if|if
condition|(
name|accept
condition|)
block|{
name|expectedCounts
index|[
name|rangeID
index|]
operator|++
expr_stmt|;
block|}
block|}
block|}
name|FacetsCollector
name|fc
init|=
name|FacetsCollector
operator|.
name|create
argument_list|(
operator|new
name|RangeAccumulator
argument_list|(
operator|new
name|RangeFacetRequest
argument_list|<
name|DoubleRange
argument_list|>
argument_list|(
literal|"field"
argument_list|,
name|ranges
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|s
operator|.
name|search
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
name|fc
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|FacetResult
argument_list|>
name|results
init|=
name|fc
operator|.
name|getFacetResults
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|FacetResultNode
argument_list|>
name|nodes
init|=
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getFacetResultNode
argument_list|()
operator|.
name|subResults
decl_stmt|;
name|assertEquals
argument_list|(
name|numRange
argument_list|,
name|nodes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|rangeID
init|=
literal|0
init|;
name|rangeID
operator|<
name|numRange
condition|;
name|rangeID
operator|++
control|)
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  range "
operator|+
name|rangeID
operator|+
literal|" expectedCount="
operator|+
name|expectedCounts
index|[
name|rangeID
index|]
argument_list|)
expr_stmt|;
block|}
name|FacetResultNode
name|subNode
init|=
name|nodes
operator|.
name|get
argument_list|(
name|rangeID
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"field/r"
operator|+
name|rangeID
argument_list|,
name|subNode
operator|.
name|label
operator|.
name|toString
argument_list|(
literal|'/'
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedCounts
index|[
name|rangeID
index|]
argument_list|,
operator|(
name|int
operator|)
name|subNode
operator|.
name|value
argument_list|)
expr_stmt|;
name|DoubleRange
name|range
init|=
call|(
name|DoubleRange
call|)
argument_list|(
operator|(
name|RangeFacetRequest
argument_list|<
name|?
argument_list|>
operator|)
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getFacetRequest
argument_list|()
argument_list|)
operator|.
name|ranges
index|[
name|rangeID
index|]
decl_stmt|;
comment|// Test drill-down:
name|DrillDownQuery
name|ddq
init|=
operator|new
name|DrillDownQuery
argument_list|(
name|FacetIndexingParams
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
name|ddq
operator|.
name|add
argument_list|(
literal|"field"
argument_list|,
name|NumericRangeQuery
operator|.
name|newDoubleRange
argument_list|(
literal|"field"
argument_list|,
name|range
operator|.
name|min
argument_list|,
name|range
operator|.
name|max
argument_list|,
name|range
operator|.
name|minInclusive
argument_list|,
name|range
operator|.
name|maxInclusive
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedCounts
index|[
name|rangeID
index|]
argument_list|,
name|s
operator|.
name|search
argument_list|(
name|ddq
argument_list|,
literal|10
argument_list|)
operator|.
name|totalHits
argument_list|)
expr_stmt|;
block|}
block|}
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// LUCENE-5178
DECL|method|testMissingValues
specifier|public
name|void
name|testMissingValues
parameter_list|()
throws|throws
name|Exception
block|{
name|assumeTrue
argument_list|(
literal|"codec does not support docsWithField"
argument_list|,
name|defaultCodecSupportsDocsWithField
argument_list|()
argument_list|)
expr_stmt|;
name|Directory
name|d
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|RandomIndexWriter
name|w
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|d
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|NumericDocValuesField
name|field
init|=
operator|new
name|NumericDocValuesField
argument_list|(
literal|"field"
argument_list|,
literal|0L
argument_list|)
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|field
argument_list|)
expr_stmt|;
for|for
control|(
name|long
name|l
init|=
literal|0
init|;
name|l
operator|<
literal|100
condition|;
name|l
operator|++
control|)
block|{
if|if
condition|(
name|l
operator|%
literal|5
operator|==
literal|0
condition|)
block|{
comment|// Every 5th doc is missing the value:
name|w
operator|.
name|addDocument
argument_list|(
operator|new
name|Document
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|field
operator|.
name|setLongValue
argument_list|(
name|l
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
name|IndexReader
name|r
init|=
name|w
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|RangeAccumulator
name|a
init|=
operator|new
name|RangeAccumulator
argument_list|(
operator|new
name|RangeFacetRequest
argument_list|<
name|LongRange
argument_list|>
argument_list|(
literal|"field"
argument_list|,
operator|new
name|LongRange
argument_list|(
literal|"less than 10"
argument_list|,
literal|0L
argument_list|,
literal|true
argument_list|,
literal|10L
argument_list|,
literal|false
argument_list|)
argument_list|,
operator|new
name|LongRange
argument_list|(
literal|"less than or equal to 10"
argument_list|,
literal|0L
argument_list|,
literal|true
argument_list|,
literal|10L
argument_list|,
literal|true
argument_list|)
argument_list|,
operator|new
name|LongRange
argument_list|(
literal|"over 90"
argument_list|,
literal|90L
argument_list|,
literal|false
argument_list|,
literal|100L
argument_list|,
literal|false
argument_list|)
argument_list|,
operator|new
name|LongRange
argument_list|(
literal|"90 or above"
argument_list|,
literal|90L
argument_list|,
literal|true
argument_list|,
literal|100L
argument_list|,
literal|false
argument_list|)
argument_list|,
operator|new
name|LongRange
argument_list|(
literal|"over 1000"
argument_list|,
literal|1000L
argument_list|,
literal|false
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|FacetsCollector
name|fc
init|=
name|FacetsCollector
operator|.
name|create
argument_list|(
name|a
argument_list|)
decl_stmt|;
name|IndexSearcher
name|s
init|=
name|newSearcher
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|s
operator|.
name|search
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
name|fc
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|FacetResult
argument_list|>
name|result
init|=
name|fc
operator|.
name|getFacetResults
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"field (0)\n  less than 10 (8)\n  less than or equal to 10 (8)\n  over 90 (8)\n  90 or above (8)\n  over 1000 (0)\n"
argument_list|,
name|FacetTestUtils
operator|.
name|toSimpleString
argument_list|(
name|result
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
name|d
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class
end_unit
