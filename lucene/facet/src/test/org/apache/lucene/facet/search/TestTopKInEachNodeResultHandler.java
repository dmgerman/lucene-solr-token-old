begin_unit
begin_package
DECL|package|org.apache.lucene.facet.search
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|search
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|MockAnalyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|TextField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriterConfig
operator|.
name|OpenMode
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|RandomIndexWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TermQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|index
operator|.
name|CategoryDocumentBuilder
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|index
operator|.
name|params
operator|.
name|DefaultFacetIndexingParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|search
operator|.
name|params
operator|.
name|CountFacetRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|search
operator|.
name|params
operator|.
name|FacetSearchParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|search
operator|.
name|params
operator|.
name|FacetRequest
operator|.
name|ResultMode
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|search
operator|.
name|results
operator|.
name|FacetResult
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|search
operator|.
name|results
operator|.
name|FacetResultNode
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|taxonomy
operator|.
name|CategoryPath
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|taxonomy
operator|.
name|TaxonomyWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|taxonomy
operator|.
name|directory
operator|.
name|DirectoryTaxonomyReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|taxonomy
operator|.
name|directory
operator|.
name|DirectoryTaxonomyWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|util
operator|.
name|PartitionsUtils
import|;
end_import
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_class
DECL|class|TestTopKInEachNodeResultHandler
specifier|public
class|class
name|TestTopKInEachNodeResultHandler
extends|extends
name|LuceneTestCase
block|{
comment|//TODO (Facet): Move to extend BaseTestTopK and separate to several smaller test cases (methods) - see TestTopKResultsHandler
annotation|@
name|Test
DECL|method|testSimple
specifier|public
name|void
name|testSimple
parameter_list|()
throws|throws
name|Exception
block|{
name|int
index|[]
name|partitionSizes
init|=
operator|new
name|int
index|[]
block|{
literal|2
block|,
literal|3
block|,
literal|4
block|,
literal|5
block|,
literal|6
block|,
literal|7
block|,
literal|10
block|,
literal|1000
block|,
name|Integer
operator|.
name|MAX_VALUE
block|}
decl_stmt|;
for|for
control|(
name|int
name|partitionSize
range|:
name|partitionSizes
control|)
block|{
name|Directory
name|iDir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|Directory
name|tDir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Partition Size: "
operator|+
name|partitionSize
argument_list|)
expr_stmt|;
block|}
specifier|final
name|int
name|pSize
init|=
name|partitionSize
decl_stmt|;
name|DefaultFacetIndexingParams
name|iParams
init|=
operator|new
name|DefaultFacetIndexingParams
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|int
name|fixedPartitionSize
parameter_list|()
block|{
return|return
name|pSize
return|;
block|}
block|}
decl_stmt|;
name|RandomIndexWriter
name|iw
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|iDir
argument_list|,
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setOpenMode
argument_list|(
name|OpenMode
operator|.
name|CREATE
argument_list|)
argument_list|)
decl_stmt|;
name|TaxonomyWriter
name|tw
init|=
operator|new
name|DirectoryTaxonomyWriter
argument_list|(
name|tDir
argument_list|)
decl_stmt|;
name|prvt_add
argument_list|(
name|iParams
argument_list|,
name|iw
argument_list|,
name|tw
argument_list|,
literal|"a"
argument_list|,
literal|"b"
argument_list|)
expr_stmt|;
name|prvt_add
argument_list|(
name|iParams
argument_list|,
name|iw
argument_list|,
name|tw
argument_list|,
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|prvt_add
argument_list|(
name|iParams
argument_list|,
name|iw
argument_list|,
name|tw
argument_list|,
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|prvt_add
argument_list|(
name|iParams
argument_list|,
name|iw
argument_list|,
name|tw
argument_list|,
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|prvt_add
argument_list|(
name|iParams
argument_list|,
name|iw
argument_list|,
name|tw
argument_list|,
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|prvt_add
argument_list|(
name|iParams
argument_list|,
name|iw
argument_list|,
name|tw
argument_list|,
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|prvt_add
argument_list|(
name|iParams
argument_list|,
name|iw
argument_list|,
name|tw
argument_list|,
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|prvt_add
argument_list|(
name|iParams
argument_list|,
name|iw
argument_list|,
name|tw
argument_list|,
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"4"
argument_list|)
expr_stmt|;
name|prvt_add
argument_list|(
name|iParams
argument_list|,
name|iw
argument_list|,
name|tw
argument_list|,
literal|"a"
argument_list|,
literal|"c"
argument_list|)
expr_stmt|;
name|prvt_add
argument_list|(
name|iParams
argument_list|,
name|iw
argument_list|,
name|tw
argument_list|,
literal|"a"
argument_list|,
literal|"c"
argument_list|)
expr_stmt|;
name|prvt_add
argument_list|(
name|iParams
argument_list|,
name|iw
argument_list|,
name|tw
argument_list|,
literal|"a"
argument_list|,
literal|"c"
argument_list|)
expr_stmt|;
name|prvt_add
argument_list|(
name|iParams
argument_list|,
name|iw
argument_list|,
name|tw
argument_list|,
literal|"a"
argument_list|,
literal|"c"
argument_list|)
expr_stmt|;
name|prvt_add
argument_list|(
name|iParams
argument_list|,
name|iw
argument_list|,
name|tw
argument_list|,
literal|"a"
argument_list|,
literal|"c"
argument_list|)
expr_stmt|;
name|prvt_add
argument_list|(
name|iParams
argument_list|,
name|iw
argument_list|,
name|tw
argument_list|,
literal|"a"
argument_list|,
literal|"c"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|prvt_add
argument_list|(
name|iParams
argument_list|,
name|iw
argument_list|,
name|tw
argument_list|,
literal|"a"
argument_list|,
literal|"d"
argument_list|)
expr_stmt|;
name|prvt_add
argument_list|(
name|iParams
argument_list|,
name|iw
argument_list|,
name|tw
argument_list|,
literal|"a"
argument_list|,
literal|"e"
argument_list|)
expr_stmt|;
name|IndexReader
name|ir
init|=
name|iw
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|iw
operator|.
name|close
argument_list|()
expr_stmt|;
name|tw
operator|.
name|commit
argument_list|()
expr_stmt|;
name|tw
operator|.
name|close
argument_list|()
expr_stmt|;
name|IndexSearcher
name|is
init|=
name|newSearcher
argument_list|(
name|ir
argument_list|)
decl_stmt|;
name|DirectoryTaxonomyReader
name|tr
init|=
operator|new
name|DirectoryTaxonomyReader
argument_list|(
name|tDir
argument_list|)
decl_stmt|;
comment|// Get all of the documents and run the query, then do different
comment|// facet counts and compare to control
name|Query
name|q
init|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"content"
argument_list|,
literal|"alpha"
argument_list|)
argument_list|)
decl_stmt|;
name|ScoredDocIdCollector
name|scoredDoc
init|=
name|ScoredDocIdCollector
operator|.
name|create
argument_list|(
name|ir
operator|.
name|maxDoc
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
comment|// Collector collector = new MultiCollector(scoredDoc);
name|is
operator|.
name|search
argument_list|(
name|q
argument_list|,
name|scoredDoc
argument_list|)
expr_stmt|;
name|CountFacetRequest
name|cfra23
init|=
operator|new
name|CountFacetRequest
argument_list|(
operator|new
name|CategoryPath
argument_list|(
literal|"a"
argument_list|)
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|cfra23
operator|.
name|setDepth
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|cfra23
operator|.
name|setResultMode
argument_list|(
name|ResultMode
operator|.
name|PER_NODE_IN_TREE
argument_list|)
expr_stmt|;
name|CountFacetRequest
name|cfra22
init|=
operator|new
name|CountFacetRequest
argument_list|(
operator|new
name|CategoryPath
argument_list|(
literal|"a"
argument_list|)
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|cfra22
operator|.
name|setDepth
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|cfra22
operator|.
name|setResultMode
argument_list|(
name|ResultMode
operator|.
name|PER_NODE_IN_TREE
argument_list|)
expr_stmt|;
name|CountFacetRequest
name|cfra21
init|=
operator|new
name|CountFacetRequest
argument_list|(
operator|new
name|CategoryPath
argument_list|(
literal|"a"
argument_list|)
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|cfra21
operator|.
name|setDepth
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|cfra21
operator|.
name|setResultMode
argument_list|(
name|ResultMode
operator|.
name|PER_NODE_IN_TREE
argument_list|)
expr_stmt|;
name|CountFacetRequest
name|cfrb22
init|=
operator|new
name|CountFacetRequest
argument_list|(
operator|new
name|CategoryPath
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|cfrb22
operator|.
name|setDepth
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|cfrb22
operator|.
name|setResultMode
argument_list|(
name|ResultMode
operator|.
name|PER_NODE_IN_TREE
argument_list|)
expr_stmt|;
name|CountFacetRequest
name|cfrb23
init|=
operator|new
name|CountFacetRequest
argument_list|(
operator|new
name|CategoryPath
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|cfrb23
operator|.
name|setDepth
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|cfrb23
operator|.
name|setResultMode
argument_list|(
name|ResultMode
operator|.
name|PER_NODE_IN_TREE
argument_list|)
expr_stmt|;
name|CountFacetRequest
name|cfrb21
init|=
operator|new
name|CountFacetRequest
argument_list|(
operator|new
name|CategoryPath
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|cfrb21
operator|.
name|setDepth
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|cfrb21
operator|.
name|setResultMode
argument_list|(
name|ResultMode
operator|.
name|PER_NODE_IN_TREE
argument_list|)
expr_stmt|;
name|CountFacetRequest
name|doctor
init|=
operator|new
name|CountFacetRequest
argument_list|(
operator|new
name|CategoryPath
argument_list|(
literal|"Doctor"
argument_list|)
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|doctor
operator|.
name|setDepth
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|doctor
operator|.
name|setResultMode
argument_list|(
name|ResultMode
operator|.
name|PER_NODE_IN_TREE
argument_list|)
expr_stmt|;
name|CountFacetRequest
name|cfrb20
init|=
operator|new
name|CountFacetRequest
argument_list|(
operator|new
name|CategoryPath
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|cfrb20
operator|.
name|setDepth
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|cfrb20
operator|.
name|setResultMode
argument_list|(
name|ResultMode
operator|.
name|PER_NODE_IN_TREE
argument_list|)
expr_stmt|;
name|FacetSearchParams
name|facetSearchParams
init|=
operator|new
name|FacetSearchParams
argument_list|(
name|iParams
argument_list|)
decl_stmt|;
name|facetSearchParams
operator|.
name|addFacetRequest
argument_list|(
name|cfra23
argument_list|)
expr_stmt|;
name|facetSearchParams
operator|.
name|addFacetRequest
argument_list|(
name|cfra22
argument_list|)
expr_stmt|;
name|facetSearchParams
operator|.
name|addFacetRequest
argument_list|(
name|cfra21
argument_list|)
expr_stmt|;
name|facetSearchParams
operator|.
name|addFacetRequest
argument_list|(
name|cfrb23
argument_list|)
expr_stmt|;
name|facetSearchParams
operator|.
name|addFacetRequest
argument_list|(
name|cfrb22
argument_list|)
expr_stmt|;
name|facetSearchParams
operator|.
name|addFacetRequest
argument_list|(
name|cfrb21
argument_list|)
expr_stmt|;
name|facetSearchParams
operator|.
name|addFacetRequest
argument_list|(
name|doctor
argument_list|)
expr_stmt|;
name|facetSearchParams
operator|.
name|addFacetRequest
argument_list|(
name|cfrb20
argument_list|)
expr_stmt|;
name|IntArrayAllocator
name|iaa
init|=
operator|new
name|IntArrayAllocator
argument_list|(
name|PartitionsUtils
operator|.
name|partitionSize
argument_list|(
name|facetSearchParams
argument_list|,
name|tr
argument_list|)
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|FloatArrayAllocator
name|faa
init|=
operator|new
name|FloatArrayAllocator
argument_list|(
name|PartitionsUtils
operator|.
name|partitionSize
argument_list|(
name|facetSearchParams
argument_list|,
name|tr
argument_list|)
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|FacetsAccumulator
name|fctExtrctr
init|=
operator|new
name|StandardFacetsAccumulator
argument_list|(
name|facetSearchParams
argument_list|,
name|is
operator|.
name|getIndexReader
argument_list|()
argument_list|,
name|tr
argument_list|,
name|iaa
argument_list|,
name|faa
argument_list|)
decl_stmt|;
name|fctExtrctr
operator|.
name|setComplementThreshold
argument_list|(
name|FacetsAccumulator
operator|.
name|DISABLE_COMPLEMENT
argument_list|)
expr_stmt|;
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|FacetResult
argument_list|>
name|facetResults
init|=
name|fctExtrctr
operator|.
name|accumulate
argument_list|(
name|scoredDoc
operator|.
name|getScoredDocIDs
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|end
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Time: "
operator|+
operator|(
name|end
operator|-
name|start
operator|)
argument_list|)
expr_stmt|;
block|}
name|FacetResult
name|fr
init|=
name|facetResults
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// a, depth=3, K=2
name|boolean
name|hasDoctor
init|=
literal|"Doctor"
operator|.
name|equals
argument_list|(
name|fr
operator|.
name|getFacetRequest
argument_list|()
operator|.
name|getCategoryPath
argument_list|()
operator|.
name|getComponent
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|9
argument_list|,
name|fr
operator|.
name|getNumValidDescendants
argument_list|()
argument_list|)
expr_stmt|;
name|FacetResultNode
name|parentRes
init|=
name|fr
operator|.
name|getFacetResultNode
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|16.0
argument_list|,
name|parentRes
operator|.
name|getValue
argument_list|()
argument_list|,
name|Double
operator|.
name|MIN_VALUE
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2.0
argument_list|,
name|parentRes
operator|.
name|getResidue
argument_list|()
argument_list|,
name|Double
operator|.
name|MIN_VALUE
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|parentRes
operator|.
name|getNumSubResults
argument_list|()
argument_list|)
expr_stmt|;
comment|// two nodes sorted by descending values: a/b with 8  and a/c with 6
comment|// a/b has residue 2 and two children a/b/2 with value 3, and a/b/1 with value 2.
comment|// a/c has residue 0, and one child a/c/1 with value 1.
name|double
index|[]
name|expectedValues0
init|=
block|{
literal|8.0
block|,
literal|2.0
block|,
literal|3.0
block|,
literal|0.0
block|,
literal|2.0
block|,
literal|0.0
block|,
literal|6.0
block|,
literal|0.0
block|,
literal|1.0
block|,
literal|0.0
block|}
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|FacetResultNode
name|node
range|:
name|parentRes
operator|.
name|getSubResults
argument_list|()
control|)
block|{
name|assertEquals
argument_list|(
name|expectedValues0
index|[
name|i
operator|++
index|]
argument_list|,
name|node
operator|.
name|getValue
argument_list|()
argument_list|,
name|Double
operator|.
name|MIN_VALUE
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedValues0
index|[
name|i
operator|++
index|]
argument_list|,
name|node
operator|.
name|getResidue
argument_list|()
argument_list|,
name|Double
operator|.
name|MIN_VALUE
argument_list|)
expr_stmt|;
for|for
control|(
name|FacetResultNode
name|node2
range|:
name|node
operator|.
name|getSubResults
argument_list|()
control|)
block|{
name|assertEquals
argument_list|(
name|expectedValues0
index|[
name|i
operator|++
index|]
argument_list|,
name|node2
operator|.
name|getValue
argument_list|()
argument_list|,
name|Double
operator|.
name|MIN_VALUE
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedValues0
index|[
name|i
operator|++
index|]
argument_list|,
name|node2
operator|.
name|getResidue
argument_list|()
argument_list|,
name|Double
operator|.
name|MIN_VALUE
argument_list|)
expr_stmt|;
block|}
block|}
comment|// now just change the value of the first child of the root to 5, and then rearrange
comment|// expected are: first a/c of value 6 and residue 0, and one child a/c/1 with value 1
comment|// then a/b with value 5 and residue 2, and both children: a/b/2 with value 3, and a/b/1 with value 2.
for|for
control|(
name|FacetResultNode
name|node
range|:
name|parentRes
operator|.
name|getSubResults
argument_list|()
control|)
block|{
name|node
operator|.
name|setValue
argument_list|(
literal|5.0
argument_list|)
expr_stmt|;
break|break;
block|}
comment|// now rearrange
name|double
index|[]
name|expectedValues00
init|=
block|{
literal|6.0
block|,
literal|0.0
block|,
literal|1.0
block|,
literal|0.0
block|,
literal|5.0
block|,
literal|2.0
block|,
literal|3.0
block|,
literal|0.0
block|,
literal|2.0
block|,
literal|0.0
block|}
decl_stmt|;
name|fr
operator|=
name|cfra23
operator|.
name|createFacetResultsHandler
argument_list|(
name|tr
argument_list|)
operator|.
name|rearrangeFacetResult
argument_list|(
name|fr
argument_list|)
expr_stmt|;
name|i
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|FacetResultNode
name|node
range|:
name|parentRes
operator|.
name|getSubResults
argument_list|()
control|)
block|{
name|assertEquals
argument_list|(
name|expectedValues00
index|[
name|i
operator|++
index|]
argument_list|,
name|node
operator|.
name|getValue
argument_list|()
argument_list|,
name|Double
operator|.
name|MIN_VALUE
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedValues00
index|[
name|i
operator|++
index|]
argument_list|,
name|node
operator|.
name|getResidue
argument_list|()
argument_list|,
name|Double
operator|.
name|MIN_VALUE
argument_list|)
expr_stmt|;
for|for
control|(
name|FacetResultNode
name|node2
range|:
name|node
operator|.
name|getSubResults
argument_list|()
control|)
block|{
name|assertEquals
argument_list|(
name|expectedValues00
index|[
name|i
operator|++
index|]
argument_list|,
name|node2
operator|.
name|getValue
argument_list|()
argument_list|,
name|Double
operator|.
name|MIN_VALUE
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedValues00
index|[
name|i
operator|++
index|]
argument_list|,
name|node2
operator|.
name|getResidue
argument_list|()
argument_list|,
name|Double
operator|.
name|MIN_VALUE
argument_list|)
expr_stmt|;
block|}
block|}
name|fr
operator|=
name|facetResults
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// a, depth=2, K=2. same result as before
name|hasDoctor
operator||=
literal|"Doctor"
operator|.
name|equals
argument_list|(
name|fr
operator|.
name|getFacetRequest
argument_list|()
operator|.
name|getCategoryPath
argument_list|()
operator|.
name|getComponent
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|9
argument_list|,
name|fr
operator|.
name|getNumValidDescendants
argument_list|()
argument_list|)
expr_stmt|;
name|parentRes
operator|=
name|fr
operator|.
name|getFacetResultNode
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|16.0
argument_list|,
name|parentRes
operator|.
name|getValue
argument_list|()
argument_list|,
name|Double
operator|.
name|MIN_VALUE
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2.0
argument_list|,
name|parentRes
operator|.
name|getResidue
argument_list|()
argument_list|,
name|Double
operator|.
name|MIN_VALUE
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|parentRes
operator|.
name|getNumSubResults
argument_list|()
argument_list|)
expr_stmt|;
comment|// two nodes sorted by descending values: a/b with 8  and a/c with 6
comment|// a/b has residue 2 and two children a/b/2 with value 3, and a/b/1 with value 2.
comment|// a/c has residue 0, and one child a/c/1 with value 1.
name|i
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|FacetResultNode
name|node
range|:
name|parentRes
operator|.
name|getSubResults
argument_list|()
control|)
block|{
name|assertEquals
argument_list|(
name|expectedValues0
index|[
name|i
operator|++
index|]
argument_list|,
name|node
operator|.
name|getValue
argument_list|()
argument_list|,
name|Double
operator|.
name|MIN_VALUE
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedValues0
index|[
name|i
operator|++
index|]
argument_list|,
name|node
operator|.
name|getResidue
argument_list|()
argument_list|,
name|Double
operator|.
name|MIN_VALUE
argument_list|)
expr_stmt|;
for|for
control|(
name|FacetResultNode
name|node2
range|:
name|node
operator|.
name|getSubResults
argument_list|()
control|)
block|{
name|assertEquals
argument_list|(
name|expectedValues0
index|[
name|i
operator|++
index|]
argument_list|,
name|node2
operator|.
name|getValue
argument_list|()
argument_list|,
name|Double
operator|.
name|MIN_VALUE
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedValues0
index|[
name|i
operator|++
index|]
argument_list|,
name|node2
operator|.
name|getResidue
argument_list|()
argument_list|,
name|Double
operator|.
name|MIN_VALUE
argument_list|)
expr_stmt|;
block|}
block|}
name|fr
operator|=
name|facetResults
operator|.
name|get
argument_list|(
literal|2
argument_list|)
expr_stmt|;
comment|// a, depth=1, K=2
name|hasDoctor
operator||=
literal|"Doctor"
operator|.
name|equals
argument_list|(
name|fr
operator|.
name|getFacetRequest
argument_list|()
operator|.
name|getCategoryPath
argument_list|()
operator|.
name|getComponent
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|fr
operator|.
name|getNumValidDescendants
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|parentRes
operator|=
name|fr
operator|.
name|getFacetResultNode
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|16.0
argument_list|,
name|parentRes
operator|.
name|getValue
argument_list|()
argument_list|,
name|Double
operator|.
name|MIN_VALUE
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2.0
argument_list|,
name|parentRes
operator|.
name|getResidue
argument_list|()
argument_list|,
name|Double
operator|.
name|MIN_VALUE
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|parentRes
operator|.
name|getNumSubResults
argument_list|()
argument_list|)
expr_stmt|;
comment|// two nodes sorted by descending values:
comment|// a/b with value 8 and residue 0 (because no children considered),
comment|//  and a/c with value 6 and residue 0 (because no children considered)
name|double
index|[]
name|expectedValues2
init|=
block|{
literal|8.0
block|,
literal|0.0
block|,
literal|6.0
block|,
literal|0.0
block|}
decl_stmt|;
name|i
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|FacetResultNode
name|node
range|:
name|parentRes
operator|.
name|getSubResults
argument_list|()
control|)
block|{
name|assertEquals
argument_list|(
name|expectedValues2
index|[
name|i
operator|++
index|]
argument_list|,
name|node
operator|.
name|getValue
argument_list|()
argument_list|,
name|Double
operator|.
name|MIN_VALUE
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedValues2
index|[
name|i
operator|++
index|]
argument_list|,
name|node
operator|.
name|getResidue
argument_list|()
argument_list|,
name|Double
operator|.
name|MIN_VALUE
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|node
operator|.
name|getNumSubResults
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
name|fr
operator|=
name|facetResults
operator|.
name|get
argument_list|(
literal|3
argument_list|)
expr_stmt|;
comment|// a/b, depth=3, K=2
name|hasDoctor
operator||=
literal|"Doctor"
operator|.
name|equals
argument_list|(
name|fr
operator|.
name|getFacetRequest
argument_list|()
operator|.
name|getCategoryPath
argument_list|()
operator|.
name|getComponent
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|fr
operator|.
name|getNumValidDescendants
argument_list|()
argument_list|)
expr_stmt|;
name|parentRes
operator|=
name|fr
operator|.
name|getFacetResultNode
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|8.0
argument_list|,
name|parentRes
operator|.
name|getValue
argument_list|()
argument_list|,
name|Double
operator|.
name|MIN_VALUE
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2.0
argument_list|,
name|parentRes
operator|.
name|getResidue
argument_list|()
argument_list|,
name|Double
operator|.
name|MIN_VALUE
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|parentRes
operator|.
name|getNumSubResults
argument_list|()
argument_list|)
expr_stmt|;
name|double
index|[]
name|expectedValues3
init|=
block|{
literal|3.0
block|,
literal|2.0
block|}
decl_stmt|;
name|i
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|FacetResultNode
name|node
range|:
name|parentRes
operator|.
name|getSubResults
argument_list|()
control|)
block|{
name|assertEquals
argument_list|(
name|expectedValues3
index|[
name|i
operator|++
index|]
argument_list|,
name|node
operator|.
name|getValue
argument_list|()
argument_list|,
name|Double
operator|.
name|MIN_VALUE
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.0
argument_list|,
name|node
operator|.
name|getResidue
argument_list|()
argument_list|,
name|Double
operator|.
name|MIN_VALUE
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|node
operator|.
name|getNumSubResults
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|fr
operator|=
name|facetResults
operator|.
name|get
argument_list|(
literal|4
argument_list|)
expr_stmt|;
comment|// a/b, depth=2, K=2
name|hasDoctor
operator||=
literal|"Doctor"
operator|.
name|equals
argument_list|(
name|fr
operator|.
name|getFacetRequest
argument_list|()
operator|.
name|getCategoryPath
argument_list|()
operator|.
name|getComponent
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|fr
operator|.
name|getNumValidDescendants
argument_list|()
argument_list|)
expr_stmt|;
name|parentRes
operator|=
name|fr
operator|.
name|getFacetResultNode
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|8.0
argument_list|,
name|parentRes
operator|.
name|getValue
argument_list|()
argument_list|,
name|Double
operator|.
name|MIN_VALUE
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2.0
argument_list|,
name|parentRes
operator|.
name|getResidue
argument_list|()
argument_list|,
name|Double
operator|.
name|MIN_VALUE
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|parentRes
operator|.
name|getNumSubResults
argument_list|()
argument_list|)
expr_stmt|;
name|i
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|FacetResultNode
name|node
range|:
name|parentRes
operator|.
name|getSubResults
argument_list|()
control|)
block|{
name|assertEquals
argument_list|(
name|expectedValues3
index|[
name|i
operator|++
index|]
argument_list|,
name|node
operator|.
name|getValue
argument_list|()
argument_list|,
name|Double
operator|.
name|MIN_VALUE
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.0
argument_list|,
name|node
operator|.
name|getResidue
argument_list|()
argument_list|,
name|Double
operator|.
name|MIN_VALUE
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|node
operator|.
name|getNumSubResults
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|fr
operator|=
name|facetResults
operator|.
name|get
argument_list|(
literal|5
argument_list|)
expr_stmt|;
comment|// a/b, depth=1, K=2
name|hasDoctor
operator||=
literal|"Doctor"
operator|.
name|equals
argument_list|(
name|fr
operator|.
name|getFacetRequest
argument_list|()
operator|.
name|getCategoryPath
argument_list|()
operator|.
name|getComponent
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|fr
operator|.
name|getNumValidDescendants
argument_list|()
argument_list|)
expr_stmt|;
name|parentRes
operator|=
name|fr
operator|.
name|getFacetResultNode
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|8.0
argument_list|,
name|parentRes
operator|.
name|getValue
argument_list|()
argument_list|,
name|Double
operator|.
name|MIN_VALUE
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2.0
argument_list|,
name|parentRes
operator|.
name|getResidue
argument_list|()
argument_list|,
name|Double
operator|.
name|MIN_VALUE
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|parentRes
operator|.
name|getNumSubResults
argument_list|()
argument_list|)
expr_stmt|;
name|i
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|FacetResultNode
name|node
range|:
name|parentRes
operator|.
name|getSubResults
argument_list|()
control|)
block|{
name|assertEquals
argument_list|(
name|expectedValues3
index|[
name|i
operator|++
index|]
argument_list|,
name|node
operator|.
name|getValue
argument_list|()
argument_list|,
name|Double
operator|.
name|MIN_VALUE
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.0
argument_list|,
name|node
operator|.
name|getResidue
argument_list|()
argument_list|,
name|Double
operator|.
name|MIN_VALUE
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|node
operator|.
name|getNumSubResults
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|fr
operator|=
name|facetResults
operator|.
name|get
argument_list|(
literal|6
argument_list|)
expr_stmt|;
comment|// a/b, depth=0, K=2
name|hasDoctor
operator||=
literal|"Doctor"
operator|.
name|equals
argument_list|(
name|fr
operator|.
name|getFacetRequest
argument_list|()
operator|.
name|getCategoryPath
argument_list|()
operator|.
name|getComponent
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|fr
operator|.
name|getNumValidDescendants
argument_list|()
argument_list|)
expr_stmt|;
comment|// 0 descendants but rootnode
name|parentRes
operator|=
name|fr
operator|.
name|getFacetResultNode
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|8.0
argument_list|,
name|parentRes
operator|.
name|getValue
argument_list|()
argument_list|,
name|Double
operator|.
name|MIN_VALUE
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.0
argument_list|,
name|parentRes
operator|.
name|getResidue
argument_list|()
argument_list|,
name|Double
operator|.
name|MIN_VALUE
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|parentRes
operator|.
name|getNumSubResults
argument_list|()
argument_list|)
expr_stmt|;
name|hasDoctor
operator||=
literal|"Doctor"
operator|.
name|equals
argument_list|(
name|fr
operator|.
name|getFacetRequest
argument_list|()
operator|.
name|getCategoryPath
argument_list|()
operator|.
name|getComponent
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// doctor, depth=1, K=2
name|assertFalse
argument_list|(
literal|"Shouldn't have found anything for a FacetRequest "
operator|+
literal|"of a facet that doesn't exist in the index."
argument_list|,
name|hasDoctor
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Shouldn't have found more than seven request."
argument_list|,
literal|7
argument_list|,
name|facetResults
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|ir
operator|.
name|close
argument_list|()
expr_stmt|;
name|tr
operator|.
name|close
argument_list|()
expr_stmt|;
name|iDir
operator|.
name|close
argument_list|()
expr_stmt|;
name|tDir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|prvt_add
specifier|private
name|void
name|prvt_add
parameter_list|(
name|DefaultFacetIndexingParams
name|iParams
parameter_list|,
name|RandomIndexWriter
name|iw
parameter_list|,
name|TaxonomyWriter
name|tw
parameter_list|,
name|String
modifier|...
name|strings
parameter_list|)
throws|throws
name|IOException
block|{
name|ArrayList
argument_list|<
name|CategoryPath
argument_list|>
name|cps
init|=
operator|new
name|ArrayList
argument_list|<
name|CategoryPath
argument_list|>
argument_list|()
decl_stmt|;
name|CategoryPath
name|cp
init|=
operator|new
name|CategoryPath
argument_list|(
name|strings
argument_list|)
decl_stmt|;
name|cps
operator|.
name|add
argument_list|(
name|cp
argument_list|)
expr_stmt|;
name|Document
name|d
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
operator|new
name|CategoryDocumentBuilder
argument_list|(
name|tw
argument_list|,
name|iParams
argument_list|)
operator|.
name|setCategoryPaths
argument_list|(
name|cps
argument_list|)
operator|.
name|build
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|d
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
literal|"content"
argument_list|,
literal|"alpha"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|)
argument_list|)
expr_stmt|;
name|iw
operator|.
name|addDocument
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
