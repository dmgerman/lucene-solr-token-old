begin_unit
begin_package
DECL|package|org.apache.lucene.facet.search
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|search
package|;
end_package
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|params
operator|.
name|FacetIndexingParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|params
operator|.
name|FacetSearchParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|params
operator|.
name|CategoryListParams
operator|.
name|OrdinalPolicy
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|search
operator|.
name|FacetRequest
operator|.
name|ResultMode
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|taxonomy
operator|.
name|CategoryPath
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|MatchAllDocsQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_class
DECL|class|TestTopKResultsHandler
specifier|public
class|class
name|TestTopKResultsHandler
extends|extends
name|BaseTestTopK
block|{
DECL|field|CATEGORIES
specifier|private
specifier|static
specifier|final
name|CategoryPath
index|[]
name|CATEGORIES
init|=
block|{
operator|new
name|CategoryPath
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
block|,
operator|new
name|CategoryPath
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"1"
argument_list|)
block|,
operator|new
name|CategoryPath
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"1"
argument_list|)
block|,
operator|new
name|CategoryPath
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"2"
argument_list|)
block|,
operator|new
name|CategoryPath
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"2"
argument_list|)
block|,
operator|new
name|CategoryPath
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"3"
argument_list|)
block|,
operator|new
name|CategoryPath
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"4"
argument_list|)
block|,
operator|new
name|CategoryPath
argument_list|(
literal|"a"
argument_list|,
literal|"c"
argument_list|)
block|,
operator|new
name|CategoryPath
argument_list|(
literal|"a"
argument_list|,
literal|"c"
argument_list|)
block|,
operator|new
name|CategoryPath
argument_list|(
literal|"a"
argument_list|,
literal|"c"
argument_list|)
block|,
operator|new
name|CategoryPath
argument_list|(
literal|"a"
argument_list|,
literal|"c"
argument_list|)
block|,
operator|new
name|CategoryPath
argument_list|(
literal|"a"
argument_list|,
literal|"c"
argument_list|)
block|,
operator|new
name|CategoryPath
argument_list|(
literal|"a"
argument_list|,
literal|"c"
argument_list|,
literal|"1"
argument_list|)
block|,   }
decl_stmt|;
annotation|@
name|Override
DECL|method|getContent
specifier|protected
name|String
name|getContent
parameter_list|(
name|int
name|doc
parameter_list|)
block|{
return|return
name|ALPHA
return|;
block|}
annotation|@
name|Override
DECL|method|numDocsToIndex
specifier|protected
name|int
name|numDocsToIndex
parameter_list|()
block|{
return|return
name|CATEGORIES
operator|.
name|length
return|;
block|}
annotation|@
name|Override
DECL|method|getCategories
specifier|protected
name|List
argument_list|<
name|CategoryPath
argument_list|>
name|getCategories
parameter_list|(
name|int
name|doc
parameter_list|)
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|CATEGORIES
index|[
name|doc
index|]
argument_list|)
return|;
block|}
comment|/**    * Straightforward test: Adding specific documents with specific facets and    * counting them in the most basic form.    */
annotation|@
name|Test
DECL|method|testSimple
specifier|public
name|void
name|testSimple
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|partitionSize
range|:
name|partitionSizes
control|)
block|{
name|FacetIndexingParams
name|fip
init|=
name|getFacetIndexingParams
argument_list|(
name|partitionSize
argument_list|)
decl_stmt|;
name|OrdinalPolicy
name|op
init|=
name|fip
operator|.
name|getCategoryListParams
argument_list|(
literal|null
argument_list|)
operator|.
name|getOrdinalPolicy
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|initIndex
argument_list|(
name|fip
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|FacetRequest
argument_list|>
name|facetRequests
init|=
operator|new
name|ArrayList
argument_list|<
name|FacetRequest
argument_list|>
argument_list|()
decl_stmt|;
name|facetRequests
operator|.
name|add
argument_list|(
operator|new
name|CountFacetRequest
argument_list|(
operator|new
name|CategoryPath
argument_list|(
literal|"a"
argument_list|)
argument_list|,
literal|100
argument_list|)
argument_list|)
expr_stmt|;
name|CountFacetRequest
name|cfra
init|=
operator|new
name|CountFacetRequest
argument_list|(
operator|new
name|CategoryPath
argument_list|(
literal|"a"
argument_list|)
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|cfra
operator|.
name|setDepth
argument_list|(
literal|3
argument_list|)
expr_stmt|;
comment|// makes it easier to check the results in the test.
name|cfra
operator|.
name|setResultMode
argument_list|(
name|ResultMode
operator|.
name|GLOBAL_FLAT
argument_list|)
expr_stmt|;
name|facetRequests
operator|.
name|add
argument_list|(
name|cfra
argument_list|)
expr_stmt|;
name|facetRequests
operator|.
name|add
argument_list|(
operator|new
name|CountFacetRequest
argument_list|(
operator|new
name|CategoryPath
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
argument_list|,
literal|100
argument_list|)
argument_list|)
expr_stmt|;
name|facetRequests
operator|.
name|add
argument_list|(
operator|new
name|CountFacetRequest
argument_list|(
operator|new
name|CategoryPath
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"1"
argument_list|)
argument_list|,
literal|100
argument_list|)
argument_list|)
expr_stmt|;
name|facetRequests
operator|.
name|add
argument_list|(
operator|new
name|CountFacetRequest
argument_list|(
operator|new
name|CategoryPath
argument_list|(
literal|"a"
argument_list|,
literal|"c"
argument_list|)
argument_list|,
literal|100
argument_list|)
argument_list|)
expr_stmt|;
comment|// do different facet counts and compare to control
name|FacetSearchParams
name|sParams
init|=
name|getFacetSearchParams
argument_list|(
name|facetRequests
argument_list|,
name|fip
argument_list|)
decl_stmt|;
name|FacetsCollector
name|fc
init|=
name|FacetsCollector
operator|.
name|create
argument_list|(
name|sParams
argument_list|,
name|indexReader
argument_list|,
name|taxoReader
argument_list|)
decl_stmt|;
name|searcher
operator|.
name|search
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
name|fc
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|FacetResult
argument_list|>
name|facetResults
init|=
name|fc
operator|.
name|getFacetResults
argument_list|()
decl_stmt|;
name|FacetResult
name|fr
init|=
name|facetResults
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|FacetResultNode
name|parentRes
init|=
name|fr
operator|.
name|getFacetResultNode
argument_list|()
decl_stmt|;
if|if
condition|(
name|op
operator|==
name|OrdinalPolicy
operator|.
name|ALL_PARENTS
condition|)
block|{
name|assertEquals
argument_list|(
literal|13.0
argument_list|,
name|parentRes
operator|.
name|value
argument_list|,
name|Double
operator|.
name|MIN_VALUE
argument_list|)
expr_stmt|;
block|}
name|FacetResultNode
index|[]
name|frn
init|=
name|resultNodesAsArray
argument_list|(
name|parentRes
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|7.0
argument_list|,
name|frn
index|[
literal|0
index|]
operator|.
name|value
argument_list|,
name|Double
operator|.
name|MIN_VALUE
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6.0
argument_list|,
name|frn
index|[
literal|1
index|]
operator|.
name|value
argument_list|,
name|Double
operator|.
name|MIN_VALUE
argument_list|)
expr_stmt|;
name|fr
operator|=
name|facetResults
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|parentRes
operator|=
name|fr
operator|.
name|getFacetResultNode
argument_list|()
expr_stmt|;
if|if
condition|(
name|op
operator|==
name|OrdinalPolicy
operator|.
name|ALL_PARENTS
condition|)
block|{
name|assertEquals
argument_list|(
literal|13.0
argument_list|,
name|parentRes
operator|.
name|value
argument_list|,
name|Double
operator|.
name|MIN_VALUE
argument_list|)
expr_stmt|;
block|}
name|frn
operator|=
name|resultNodesAsArray
argument_list|(
name|parentRes
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|7.0
argument_list|,
name|frn
index|[
literal|0
index|]
operator|.
name|value
argument_list|,
name|Double
operator|.
name|MIN_VALUE
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6.0
argument_list|,
name|frn
index|[
literal|1
index|]
operator|.
name|value
argument_list|,
name|Double
operator|.
name|MIN_VALUE
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2.0
argument_list|,
name|frn
index|[
literal|2
index|]
operator|.
name|value
argument_list|,
name|Double
operator|.
name|MIN_VALUE
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2.0
argument_list|,
name|frn
index|[
literal|3
index|]
operator|.
name|value
argument_list|,
name|Double
operator|.
name|MIN_VALUE
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1.0
argument_list|,
name|frn
index|[
literal|4
index|]
operator|.
name|value
argument_list|,
name|Double
operator|.
name|MIN_VALUE
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1.0
argument_list|,
name|frn
index|[
literal|5
index|]
operator|.
name|value
argument_list|,
name|Double
operator|.
name|MIN_VALUE
argument_list|)
expr_stmt|;
name|fr
operator|=
name|facetResults
operator|.
name|get
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|parentRes
operator|=
name|fr
operator|.
name|getFacetResultNode
argument_list|()
expr_stmt|;
if|if
condition|(
name|op
operator|==
name|OrdinalPolicy
operator|.
name|ALL_PARENTS
condition|)
block|{
name|assertEquals
argument_list|(
literal|7.0
argument_list|,
name|parentRes
operator|.
name|value
argument_list|,
name|Double
operator|.
name|MIN_VALUE
argument_list|)
expr_stmt|;
block|}
name|frn
operator|=
name|resultNodesAsArray
argument_list|(
name|parentRes
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2.0
argument_list|,
name|frn
index|[
literal|0
index|]
operator|.
name|value
argument_list|,
name|Double
operator|.
name|MIN_VALUE
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2.0
argument_list|,
name|frn
index|[
literal|1
index|]
operator|.
name|value
argument_list|,
name|Double
operator|.
name|MIN_VALUE
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1.0
argument_list|,
name|frn
index|[
literal|2
index|]
operator|.
name|value
argument_list|,
name|Double
operator|.
name|MIN_VALUE
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1.0
argument_list|,
name|frn
index|[
literal|3
index|]
operator|.
name|value
argument_list|,
name|Double
operator|.
name|MIN_VALUE
argument_list|)
expr_stmt|;
name|fr
operator|=
name|facetResults
operator|.
name|get
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|parentRes
operator|=
name|fr
operator|.
name|getFacetResultNode
argument_list|()
expr_stmt|;
if|if
condition|(
name|op
operator|==
name|OrdinalPolicy
operator|.
name|ALL_PARENTS
condition|)
block|{
name|assertEquals
argument_list|(
literal|2.0
argument_list|,
name|parentRes
operator|.
name|value
argument_list|,
name|Double
operator|.
name|MIN_VALUE
argument_list|)
expr_stmt|;
block|}
name|frn
operator|=
name|resultNodesAsArray
argument_list|(
name|parentRes
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|frn
operator|.
name|length
argument_list|)
expr_stmt|;
name|fr
operator|=
name|facetResults
operator|.
name|get
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|parentRes
operator|=
name|fr
operator|.
name|getFacetResultNode
argument_list|()
expr_stmt|;
if|if
condition|(
name|op
operator|==
name|OrdinalPolicy
operator|.
name|ALL_PARENTS
condition|)
block|{
name|assertEquals
argument_list|(
literal|6.0
argument_list|,
name|parentRes
operator|.
name|value
argument_list|,
name|Double
operator|.
name|MIN_VALUE
argument_list|)
expr_stmt|;
block|}
name|frn
operator|=
name|resultNodesAsArray
argument_list|(
name|parentRes
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1.0
argument_list|,
name|frn
index|[
literal|0
index|]
operator|.
name|value
argument_list|,
name|Double
operator|.
name|MIN_VALUE
argument_list|)
expr_stmt|;
name|closeAll
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Creating an index, matching the results of an top K = Integer.MAX_VALUE and top-1000 requests    */
annotation|@
name|Test
DECL|method|testGetMaxIntFacets
specifier|public
name|void
name|testGetMaxIntFacets
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|partitionSize
range|:
name|partitionSizes
control|)
block|{
name|FacetIndexingParams
name|fip
init|=
name|getFacetIndexingParams
argument_list|(
name|partitionSize
argument_list|)
decl_stmt|;
name|initIndex
argument_list|(
name|fip
argument_list|)
expr_stmt|;
comment|// do different facet counts and compare to control
name|CategoryPath
name|path
init|=
operator|new
name|CategoryPath
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
decl_stmt|;
name|FacetSearchParams
name|sParams
init|=
name|getFacetSearchParams
argument_list|(
name|fip
argument_list|,
operator|new
name|CountFacetRequest
argument_list|(
name|path
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
decl_stmt|;
name|FacetsCollector
name|fc
init|=
name|FacetsCollector
operator|.
name|create
argument_list|(
name|sParams
argument_list|,
name|indexReader
argument_list|,
name|taxoReader
argument_list|)
decl_stmt|;
name|searcher
operator|.
name|search
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
name|fc
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|FacetResult
argument_list|>
name|results
init|=
name|fc
operator|.
name|getFacetResults
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Should only be one result as there's only one request"
argument_list|,
literal|1
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|FacetResult
name|res
init|=
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|path
operator|+
literal|" should only have 4 desendants"
argument_list|,
literal|4
argument_list|,
name|res
operator|.
name|getNumValidDescendants
argument_list|()
argument_list|)
expr_stmt|;
comment|// As a control base results, ask for top-1000 results
name|FacetSearchParams
name|sParams2
init|=
name|getFacetSearchParams
argument_list|(
name|fip
argument_list|,
operator|new
name|CountFacetRequest
argument_list|(
name|path
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
decl_stmt|;
name|FacetsCollector
name|fc2
init|=
name|FacetsCollector
operator|.
name|create
argument_list|(
name|sParams2
argument_list|,
name|indexReader
argument_list|,
name|taxoReader
argument_list|)
decl_stmt|;
name|searcher
operator|.
name|search
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
name|fc2
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|FacetResult
argument_list|>
name|baseResults
init|=
name|fc2
operator|.
name|getFacetResults
argument_list|()
decl_stmt|;
name|FacetResult
name|baseRes
init|=
name|baseResults
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// Removing the first line which holds the REQUEST and this is surly different between the two
name|String
name|baseResultString
init|=
name|baseRes
operator|.
name|toString
argument_list|()
decl_stmt|;
name|baseResultString
operator|=
name|baseResultString
operator|.
name|substring
argument_list|(
name|baseResultString
operator|.
name|indexOf
argument_list|(
literal|'\n'
argument_list|)
argument_list|)
expr_stmt|;
comment|// Removing the first line
name|String
name|resultString
init|=
name|res
operator|.
name|toString
argument_list|()
decl_stmt|;
name|resultString
operator|=
name|resultString
operator|.
name|substring
argument_list|(
name|resultString
operator|.
name|indexOf
argument_list|(
literal|'\n'
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Results for k=MAX_VALUE do not match the regular results for k=1000!!"
argument_list|,
name|baseResultString
operator|.
name|equals
argument_list|(
name|resultString
argument_list|)
argument_list|)
expr_stmt|;
name|closeAll
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testSimpleSearchForNonexistentFacet
specifier|public
name|void
name|testSimpleSearchForNonexistentFacet
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|partitionSize
range|:
name|partitionSizes
control|)
block|{
name|FacetIndexingParams
name|fip
init|=
name|getFacetIndexingParams
argument_list|(
name|partitionSize
argument_list|)
decl_stmt|;
name|initIndex
argument_list|(
name|fip
argument_list|)
expr_stmt|;
name|CategoryPath
name|path
init|=
operator|new
name|CategoryPath
argument_list|(
literal|"Miau Hattulla"
argument_list|)
decl_stmt|;
name|FacetSearchParams
name|sParams
init|=
name|getFacetSearchParams
argument_list|(
name|fip
argument_list|,
operator|new
name|CountFacetRequest
argument_list|(
name|path
argument_list|,
literal|10
argument_list|)
argument_list|)
decl_stmt|;
name|FacetsCollector
name|fc
init|=
name|FacetsCollector
operator|.
name|create
argument_list|(
name|sParams
argument_list|,
name|indexReader
argument_list|,
name|taxoReader
argument_list|)
decl_stmt|;
name|searcher
operator|.
name|search
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
name|fc
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|FacetResult
argument_list|>
name|facetResults
init|=
name|fc
operator|.
name|getFacetResults
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Shouldn't have found anything for a FacetRequest "
operator|+
literal|"of a facet that doesn't exist in the index."
argument_list|,
literal|1
argument_list|,
name|facetResults
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Miau Hattulla"
argument_list|,
name|facetResults
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getFacetResultNode
argument_list|()
operator|.
name|label
operator|.
name|components
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|closeAll
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class
end_unit
