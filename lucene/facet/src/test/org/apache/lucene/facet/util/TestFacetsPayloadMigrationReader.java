begin_unit
begin_package
DECL|package|org.apache.lucene.facet.util
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|util
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|MockAnalyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|CharTermAttribute
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|PayloadAttribute
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
operator|.
name|Store
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|FieldType
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|StringField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|TextField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|FacetTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|index
operator|.
name|FacetFields
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|params
operator|.
name|CategoryListParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|params
operator|.
name|FacetIndexingParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|params
operator|.
name|FacetSearchParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|params
operator|.
name|PerDimensionIndexingParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|params
operator|.
name|PerDimensionOrdinalPolicy
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|params
operator|.
name|CategoryListParams
operator|.
name|OrdinalPolicy
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|search
operator|.
name|CategoryListIterator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|search
operator|.
name|CountFacetRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|search
operator|.
name|DrillDown
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|search
operator|.
name|FacetRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|search
operator|.
name|FacetResult
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|search
operator|.
name|FacetResultNode
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|search
operator|.
name|FacetsCollector
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|taxonomy
operator|.
name|CategoryPath
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|taxonomy
operator|.
name|TaxonomyReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|taxonomy
operator|.
name|TaxonomyWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|taxonomy
operator|.
name|directory
operator|.
name|DirectoryTaxonomyReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|taxonomy
operator|.
name|directory
operator|.
name|DirectoryTaxonomyWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|util
operator|.
name|FacetsPayloadMigrationReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|util
operator|.
name|PartitionsUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|AtomicReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|AtomicReaderContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DirectoryReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|FieldInfo
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|FieldInfo
operator|.
name|IndexOptions
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|FieldInfos
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriterConfig
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|MultiReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|NoMergePolicy
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Terms
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|TermsEnum
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|MatchAllDocsQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|MultiCollector
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|PrefixQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TotalHitCountCollector
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanClause
operator|.
name|Occur
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IntsRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_comment
comment|/** Tests facets index migration from payload to DocValues.*/
end_comment
begin_class
DECL|class|TestFacetsPayloadMigrationReader
specifier|public
class|class
name|TestFacetsPayloadMigrationReader
extends|extends
name|FacetTestCase
block|{
DECL|class|PayloadFacetFields
specifier|private
specifier|static
class|class
name|PayloadFacetFields
extends|extends
name|FacetFields
block|{
DECL|class|CountingListStream
specifier|private
specifier|static
specifier|final
class|class
name|CountingListStream
extends|extends
name|TokenStream
block|{
DECL|field|payloadAtt
specifier|private
specifier|final
name|PayloadAttribute
name|payloadAtt
init|=
name|addAttribute
argument_list|(
name|PayloadAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|termAtt
specifier|private
specifier|final
name|CharTermAttribute
name|termAtt
init|=
name|addAttribute
argument_list|(
name|CharTermAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|categoriesData
specifier|private
specifier|final
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|BytesRef
argument_list|>
argument_list|>
name|categoriesData
decl_stmt|;
DECL|method|CountingListStream
name|CountingListStream
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|BytesRef
argument_list|>
name|categoriesData
parameter_list|)
block|{
name|this
operator|.
name|categoriesData
operator|=
name|categoriesData
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|incrementToken
specifier|public
name|boolean
name|incrementToken
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|categoriesData
operator|.
name|hasNext
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|Entry
argument_list|<
name|String
argument_list|,
name|BytesRef
argument_list|>
name|entry
init|=
name|categoriesData
operator|.
name|next
argument_list|()
decl_stmt|;
name|termAtt
operator|.
name|setEmpty
argument_list|()
operator|.
name|append
argument_list|(
name|FacetsPayloadMigrationReader
operator|.
name|PAYLOAD_TERM_TEXT
operator|+
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|payloadAtt
operator|.
name|setPayload
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
DECL|field|COUNTING_LIST_PAYLOAD_TYPE
specifier|private
specifier|static
specifier|final
name|FieldType
name|COUNTING_LIST_PAYLOAD_TYPE
init|=
operator|new
name|FieldType
argument_list|()
decl_stmt|;
static|static
block|{
name|COUNTING_LIST_PAYLOAD_TYPE
operator|.
name|setIndexed
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|COUNTING_LIST_PAYLOAD_TYPE
operator|.
name|setTokenized
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|COUNTING_LIST_PAYLOAD_TYPE
operator|.
name|setIndexOptions
argument_list|(
name|IndexOptions
operator|.
name|DOCS_AND_FREQS_AND_POSITIONS
argument_list|)
expr_stmt|;
name|COUNTING_LIST_PAYLOAD_TYPE
operator|.
name|setStored
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|COUNTING_LIST_PAYLOAD_TYPE
operator|.
name|setOmitNorms
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|COUNTING_LIST_PAYLOAD_TYPE
operator|.
name|freeze
argument_list|()
expr_stmt|;
block|}
DECL|method|PayloadFacetFields
specifier|public
name|PayloadFacetFields
parameter_list|(
name|TaxonomyWriter
name|taxonomyWriter
parameter_list|,
name|FacetIndexingParams
name|params
parameter_list|)
block|{
name|super
argument_list|(
name|taxonomyWriter
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|drillDownFieldType
specifier|protected
name|FieldType
name|drillDownFieldType
parameter_list|()
block|{
comment|// Since the payload is indexed in the same field as the drill-down terms,
comment|// we must set IndexOptions to DOCS_AND_FREQS_AND_POSITIONS
specifier|final
name|FieldType
name|type
init|=
operator|new
name|FieldType
argument_list|(
name|TextField
operator|.
name|TYPE_NOT_STORED
argument_list|)
decl_stmt|;
name|type
operator|.
name|setIndexOptions
argument_list|(
name|IndexOptions
operator|.
name|DOCS_AND_FREQS_AND_POSITIONS
argument_list|)
expr_stmt|;
name|type
operator|.
name|freeze
argument_list|()
expr_stmt|;
return|return
name|type
return|;
block|}
annotation|@
name|Override
DECL|method|addCountingListData
specifier|protected
name|void
name|addCountingListData
parameter_list|(
name|Document
name|doc
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|BytesRef
argument_list|>
name|categoriesData
parameter_list|,
name|String
name|field
parameter_list|)
block|{
name|CountingListStream
name|ts
init|=
operator|new
name|CountingListStream
argument_list|(
name|categoriesData
argument_list|)
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
name|field
argument_list|,
name|ts
argument_list|,
name|COUNTING_LIST_PAYLOAD_TYPE
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|field|DIMENSIONS
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|DIMENSIONS
init|=
operator|new
name|String
index|[]
block|{
literal|"dim1"
block|,
literal|"dim2"
block|,
literal|"dim3.1"
block|,
literal|"dim3.2"
block|}
decl_stmt|;
DECL|method|createIndex
specifier|private
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|createIndex
parameter_list|(
name|Directory
name|indexDir
parameter_list|,
name|Directory
name|taxoDir
parameter_list|,
name|FacetIndexingParams
name|fip
parameter_list|)
throws|throws
name|Exception
block|{
name|Random
name|random
init|=
name|random
argument_list|()
decl_stmt|;
name|IndexWriterConfig
name|conf
init|=
operator|new
name|IndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|)
argument_list|)
decl_stmt|;
name|conf
operator|.
name|setMaxBufferedDocs
argument_list|(
literal|2
argument_list|)
expr_stmt|;
comment|// force few segments
name|conf
operator|.
name|setMergePolicy
argument_list|(
name|NoMergePolicy
operator|.
name|COMPOUND_FILES
argument_list|)
expr_stmt|;
comment|// avoid merges so that we're left with few segments
name|IndexWriter
name|indexWriter
init|=
operator|new
name|IndexWriter
argument_list|(
name|indexDir
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|TaxonomyWriter
name|taxoWriter
init|=
operator|new
name|DirectoryTaxonomyWriter
argument_list|(
name|taxoDir
argument_list|)
decl_stmt|;
name|FacetFields
name|facetFields
init|=
operator|new
name|PayloadFacetFields
argument_list|(
name|taxoWriter
argument_list|,
name|fip
argument_list|)
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|expectedCounts
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|(
name|DIMENSIONS
operator|.
name|length
argument_list|)
decl_stmt|;
name|int
name|numDocs
init|=
name|atLeast
argument_list|(
literal|10
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
name|i
operator|++
control|)
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|int
name|numCategories
init|=
name|random
operator|.
name|nextInt
argument_list|(
literal|3
argument_list|)
operator|+
literal|1
decl_stmt|;
name|ArrayList
argument_list|<
name|CategoryPath
argument_list|>
name|categories
init|=
operator|new
name|ArrayList
argument_list|<
name|CategoryPath
argument_list|>
argument_list|(
name|numCategories
argument_list|)
decl_stmt|;
name|HashSet
argument_list|<
name|String
argument_list|>
name|docDimensions
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
name|numCategories
operator|--
operator|>
literal|0
condition|)
block|{
name|String
name|dim
init|=
name|DIMENSIONS
index|[
name|random
operator|.
name|nextInt
argument_list|(
name|DIMENSIONS
operator|.
name|length
argument_list|)
index|]
decl_stmt|;
comment|// we should only increment the expected count by 1 per document
name|docDimensions
operator|.
name|add
argument_list|(
name|dim
argument_list|)
expr_stmt|;
name|categories
operator|.
name|add
argument_list|(
operator|new
name|CategoryPath
argument_list|(
name|dim
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|numCategories
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|facetFields
operator|.
name|addFields
argument_list|(
name|doc
argument_list|,
name|categories
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|StringField
argument_list|(
literal|"docid"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|,
name|Store
operator|.
name|YES
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
literal|"foo"
argument_list|,
literal|"content"
operator|+
name|i
argument_list|,
name|Store
operator|.
name|YES
argument_list|)
argument_list|)
expr_stmt|;
name|indexWriter
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
comment|// update expected count per dimension
for|for
control|(
name|String
name|dim
range|:
name|docDimensions
control|)
block|{
name|Integer
name|val
init|=
name|expectedCounts
operator|.
name|get
argument_list|(
name|dim
argument_list|)
decl_stmt|;
if|if
condition|(
name|val
operator|==
literal|null
condition|)
block|{
name|expectedCounts
operator|.
name|put
argument_list|(
name|dim
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|expectedCounts
operator|.
name|put
argument_list|(
name|dim
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|val
operator|.
name|intValue
argument_list|()
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|random
operator|.
name|nextDouble
argument_list|()
operator|<
literal|0.2
condition|)
block|{
comment|// add some documents that will be deleted
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|StringField
argument_list|(
literal|"del"
argument_list|,
literal|"key"
argument_list|,
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|facetFields
operator|.
name|addFields
argument_list|(
name|doc
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
operator|new
name|CategoryPath
argument_list|(
literal|"dummy"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|indexWriter
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
block|}
name|indexWriter
operator|.
name|commit
argument_list|()
expr_stmt|;
name|taxoWriter
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|// delete the docs that were marked for deletion. note that the 'dummy'
comment|// category is not removed from the taxonomy, so must account for it when we
comment|// verify the migrated index.
name|indexWriter
operator|.
name|deleteDocuments
argument_list|(
operator|new
name|Term
argument_list|(
literal|"del"
argument_list|,
literal|"key"
argument_list|)
argument_list|)
expr_stmt|;
name|indexWriter
operator|.
name|commit
argument_list|()
expr_stmt|;
name|IOUtils
operator|.
name|close
argument_list|(
name|indexWriter
argument_list|,
name|taxoWriter
argument_list|)
expr_stmt|;
return|return
name|expectedCounts
return|;
block|}
DECL|method|migrateIndex
specifier|private
name|void
name|migrateIndex
parameter_list|(
name|Directory
name|indexDir
parameter_list|,
name|FacetIndexingParams
name|fip
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Term
argument_list|>
name|fieldTerms
init|=
name|FacetsPayloadMigrationReader
operator|.
name|buildFieldTermsMap
argument_list|(
name|indexDir
argument_list|,
name|fip
argument_list|)
decl_stmt|;
name|DirectoryReader
name|reader
init|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|indexDir
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|AtomicReaderContext
argument_list|>
name|leaves
init|=
name|reader
operator|.
name|leaves
argument_list|()
decl_stmt|;
name|int
name|numReaders
init|=
name|leaves
operator|.
name|size
argument_list|()
decl_stmt|;
name|AtomicReader
name|wrappedLeaves
index|[]
init|=
operator|new
name|AtomicReader
index|[
name|numReaders
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numReaders
condition|;
name|i
operator|++
control|)
block|{
name|wrappedLeaves
index|[
name|i
index|]
operator|=
operator|new
name|FacetsPayloadMigrationReader
argument_list|(
name|leaves
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|reader
argument_list|()
argument_list|,
name|fieldTerms
argument_list|)
expr_stmt|;
block|}
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|indexDir
argument_list|,
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|writer
operator|.
name|deleteAll
argument_list|()
expr_stmt|;
try|try
block|{
name|writer
operator|.
name|addIndexes
argument_list|(
operator|new
name|MultiReader
argument_list|(
name|wrappedLeaves
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|verifyMigratedIndex
specifier|private
name|void
name|verifyMigratedIndex
parameter_list|(
name|Directory
name|indexDir
parameter_list|,
name|Directory
name|taxoDir
parameter_list|,
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|expectedCounts
parameter_list|,
name|FacetIndexingParams
name|fip
parameter_list|)
throws|throws
name|Exception
block|{
name|DirectoryReader
name|indexReader
init|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|indexDir
argument_list|)
decl_stmt|;
name|TaxonomyReader
name|taxoReader
init|=
operator|new
name|DirectoryTaxonomyReader
argument_list|(
name|taxoDir
argument_list|)
decl_stmt|;
name|IndexSearcher
name|searcher
init|=
operator|new
name|IndexSearcher
argument_list|(
name|indexReader
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"index should not have deletions"
argument_list|,
name|indexReader
operator|.
name|hasDeletions
argument_list|()
argument_list|)
expr_stmt|;
name|verifyNotFacetsData
argument_list|(
name|indexReader
argument_list|,
name|searcher
argument_list|)
expr_stmt|;
name|verifyFacetedSearch
argument_list|(
name|expectedCounts
argument_list|,
name|fip
argument_list|,
name|indexReader
argument_list|,
name|taxoReader
argument_list|,
name|searcher
argument_list|)
expr_stmt|;
name|verifyDrillDown
argument_list|(
name|expectedCounts
argument_list|,
name|fip
argument_list|,
name|indexReader
argument_list|,
name|taxoReader
argument_list|,
name|searcher
argument_list|)
expr_stmt|;
name|verifyIndexOrdinals
argument_list|(
name|indexReader
argument_list|,
name|taxoReader
argument_list|,
name|fip
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|close
argument_list|(
name|indexReader
argument_list|,
name|taxoReader
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyNotFacetsData
specifier|private
name|void
name|verifyNotFacetsData
parameter_list|(
name|DirectoryReader
name|indexReader
parameter_list|,
name|IndexSearcher
name|searcher
parameter_list|)
throws|throws
name|IOException
block|{
comment|// verify that non facets data was not damaged
name|TotalHitCountCollector
name|total
init|=
operator|new
name|TotalHitCountCollector
argument_list|()
decl_stmt|;
name|searcher
operator|.
name|search
argument_list|(
operator|new
name|PrefixQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"foo"
argument_list|,
literal|"content"
argument_list|)
argument_list|)
argument_list|,
name|total
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"invalid number of results for content query"
argument_list|,
name|total
operator|.
name|getTotalHits
argument_list|()
argument_list|,
name|indexReader
operator|.
name|maxDoc
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|numDocIDs
init|=
literal|0
decl_stmt|;
for|for
control|(
name|AtomicReaderContext
name|context
range|:
name|indexReader
operator|.
name|leaves
argument_list|()
control|)
block|{
name|Terms
name|docIDs
init|=
name|context
operator|.
name|reader
argument_list|()
operator|.
name|terms
argument_list|(
literal|"docid"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|docIDs
argument_list|)
expr_stmt|;
name|TermsEnum
name|te
init|=
name|docIDs
operator|.
name|iterator
argument_list|(
literal|null
argument_list|)
decl_stmt|;
while|while
condition|(
name|te
operator|.
name|next
argument_list|()
operator|!=
literal|null
condition|)
block|{
operator|++
name|numDocIDs
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
literal|"invalid number of docid terms"
argument_list|,
name|indexReader
operator|.
name|maxDoc
argument_list|()
argument_list|,
name|numDocIDs
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyFacetedSearch
specifier|private
name|void
name|verifyFacetedSearch
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|expectedCounts
parameter_list|,
name|FacetIndexingParams
name|fip
parameter_list|,
name|DirectoryReader
name|indexReader
parameter_list|,
name|TaxonomyReader
name|taxoReader
parameter_list|,
name|IndexSearcher
name|searcher
parameter_list|)
throws|throws
name|IOException
block|{
comment|// run faceted search and assert expected counts
name|ArrayList
argument_list|<
name|FacetRequest
argument_list|>
name|requests
init|=
operator|new
name|ArrayList
argument_list|<
name|FacetRequest
argument_list|>
argument_list|(
name|expectedCounts
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|dim
range|:
name|expectedCounts
operator|.
name|keySet
argument_list|()
control|)
block|{
name|requests
operator|.
name|add
argument_list|(
operator|new
name|CountFacetRequest
argument_list|(
operator|new
name|CategoryPath
argument_list|(
name|dim
argument_list|)
argument_list|,
literal|5
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|FacetSearchParams
name|fsp
init|=
operator|new
name|FacetSearchParams
argument_list|(
name|fip
argument_list|,
name|requests
argument_list|)
decl_stmt|;
name|FacetsCollector
name|fc
init|=
name|FacetsCollector
operator|.
name|create
argument_list|(
name|fsp
argument_list|,
name|indexReader
argument_list|,
name|taxoReader
argument_list|)
decl_stmt|;
name|MatchAllDocsQuery
name|base
init|=
operator|new
name|MatchAllDocsQuery
argument_list|()
decl_stmt|;
name|searcher
operator|.
name|search
argument_list|(
name|base
argument_list|,
name|fc
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|FacetResult
argument_list|>
name|facetResults
init|=
name|fc
operator|.
name|getFacetResults
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|requests
operator|.
name|size
argument_list|()
argument_list|,
name|facetResults
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|FacetResult
name|res
range|:
name|facetResults
control|)
block|{
name|FacetResultNode
name|node
init|=
name|res
operator|.
name|getFacetResultNode
argument_list|()
decl_stmt|;
name|String
name|dim
init|=
name|node
operator|.
name|label
operator|.
name|components
index|[
literal|0
index|]
decl_stmt|;
name|assertEquals
argument_list|(
literal|"wrong count for "
operator|+
name|dim
argument_list|,
name|expectedCounts
operator|.
name|get
argument_list|(
name|dim
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|,
operator|(
name|int
operator|)
name|node
operator|.
name|value
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|verifyDrillDown
specifier|private
name|void
name|verifyDrillDown
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|expectedCounts
parameter_list|,
name|FacetIndexingParams
name|fip
parameter_list|,
name|DirectoryReader
name|indexReader
parameter_list|,
name|TaxonomyReader
name|taxoReader
parameter_list|,
name|IndexSearcher
name|searcher
parameter_list|)
throws|throws
name|IOException
block|{
comment|// verify drill-down
for|for
control|(
name|String
name|dim
range|:
name|expectedCounts
operator|.
name|keySet
argument_list|()
control|)
block|{
name|CategoryPath
name|drillDownCP
init|=
operator|new
name|CategoryPath
argument_list|(
name|dim
argument_list|)
decl_stmt|;
name|FacetSearchParams
name|fsp
init|=
operator|new
name|FacetSearchParams
argument_list|(
name|fip
argument_list|,
operator|new
name|CountFacetRequest
argument_list|(
name|drillDownCP
argument_list|,
literal|10
argument_list|)
argument_list|)
decl_stmt|;
name|Query
name|drillDown
init|=
name|DrillDown
operator|.
name|query
argument_list|(
name|fsp
argument_list|,
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|,
name|drillDownCP
argument_list|)
decl_stmt|;
name|TotalHitCountCollector
name|total
init|=
operator|new
name|TotalHitCountCollector
argument_list|()
decl_stmt|;
name|FacetsCollector
name|fc
init|=
name|FacetsCollector
operator|.
name|create
argument_list|(
name|fsp
argument_list|,
name|indexReader
argument_list|,
name|taxoReader
argument_list|)
decl_stmt|;
name|searcher
operator|.
name|search
argument_list|(
name|drillDown
argument_list|,
name|MultiCollector
operator|.
name|wrap
argument_list|(
name|fc
argument_list|,
name|total
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"no results for drill-down query "
operator|+
name|drillDown
argument_list|,
name|total
operator|.
name|getTotalHits
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|FacetResult
argument_list|>
name|facetResults
init|=
name|fc
operator|.
name|getFacetResults
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|facetResults
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|FacetResultNode
name|rootNode
init|=
name|facetResults
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getFacetResultNode
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"wrong count for "
operator|+
name|dim
argument_list|,
name|expectedCounts
operator|.
name|get
argument_list|(
name|dim
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|,
operator|(
name|int
operator|)
name|rootNode
operator|.
name|value
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|verifyIndexOrdinals
specifier|private
name|void
name|verifyIndexOrdinals
parameter_list|(
name|DirectoryReader
name|indexReader
parameter_list|,
name|TaxonomyReader
name|taxoReader
parameter_list|,
name|FacetIndexingParams
name|fip
parameter_list|)
throws|throws
name|IOException
block|{
comment|// verify that the ordinals in the index match the ones in the taxonomy, and vice versa
comment|// collect all fields which have DocValues, to assert later that all were
comment|// visited i.e. that during migration we didn't add FieldInfos with no
comment|// DocValues
name|HashSet
argument_list|<
name|String
argument_list|>
name|docValuesFields
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|AtomicReaderContext
name|context
range|:
name|indexReader
operator|.
name|leaves
argument_list|()
control|)
block|{
name|FieldInfos
name|infos
init|=
name|context
operator|.
name|reader
argument_list|()
operator|.
name|getFieldInfos
argument_list|()
decl_stmt|;
for|for
control|(
name|FieldInfo
name|info
range|:
name|infos
control|)
block|{
if|if
condition|(
name|info
operator|.
name|hasDocValues
argument_list|()
condition|)
block|{
name|docValuesFields
operator|.
name|add
argument_list|(
name|info
operator|.
name|name
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// check that all visited ordinals are found in the taxonomy and vice versa
name|boolean
index|[]
name|foundOrdinals
init|=
operator|new
name|boolean
index|[
name|taxoReader
operator|.
name|getSize
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|foundOrdinals
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|foundOrdinals
index|[
name|i
index|]
operator|=
literal|false
expr_stmt|;
comment|// init to be on the safe side
block|}
name|foundOrdinals
index|[
literal|0
index|]
operator|=
literal|true
expr_stmt|;
comment|// ROOT ordinals isn't indexed
comment|// mark 'dummy' category ordinal as seen
name|int
name|dummyOrdinal
init|=
name|taxoReader
operator|.
name|getOrdinal
argument_list|(
operator|new
name|CategoryPath
argument_list|(
literal|"dummy"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|dummyOrdinal
operator|>
literal|0
condition|)
block|{
name|foundOrdinals
index|[
name|dummyOrdinal
index|]
operator|=
literal|true
expr_stmt|;
block|}
name|int
name|partitionSize
init|=
name|fip
operator|.
name|getPartitionSize
argument_list|()
decl_stmt|;
name|int
name|numPartitions
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|ceil
argument_list|(
name|taxoReader
operator|.
name|getSize
argument_list|()
operator|/
operator|(
name|double
operator|)
name|partitionSize
argument_list|)
decl_stmt|;
specifier|final
name|IntsRef
name|ordinals
init|=
operator|new
name|IntsRef
argument_list|(
literal|32
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|dim
range|:
name|DIMENSIONS
control|)
block|{
name|CategoryListParams
name|clp
init|=
name|fip
operator|.
name|getCategoryListParams
argument_list|(
operator|new
name|CategoryPath
argument_list|(
name|dim
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|partitionOffset
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|partition
init|=
literal|0
init|;
name|partition
operator|<
name|numPartitions
condition|;
name|partition
operator|++
operator|,
name|partitionOffset
operator|+=
name|partitionSize
control|)
block|{
specifier|final
name|CategoryListIterator
name|cli
init|=
name|clp
operator|.
name|createCategoryListIterator
argument_list|(
name|partition
argument_list|)
decl_stmt|;
for|for
control|(
name|AtomicReaderContext
name|context
range|:
name|indexReader
operator|.
name|leaves
argument_list|()
control|)
block|{
if|if
condition|(
name|cli
operator|.
name|setNextReader
argument_list|(
name|context
argument_list|)
condition|)
block|{
comment|// not all fields may exist in all segments
comment|// remove that field from the list of DocValues fields
name|docValuesFields
operator|.
name|remove
argument_list|(
name|clp
operator|.
name|field
operator|+
name|PartitionsUtils
operator|.
name|partitionName
argument_list|(
name|partition
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|maxDoc
init|=
name|context
operator|.
name|reader
argument_list|()
operator|.
name|maxDoc
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|doc
init|=
literal|0
init|;
name|doc
operator|<
name|maxDoc
condition|;
name|doc
operator|++
control|)
block|{
name|cli
operator|.
name|getOrdinals
argument_list|(
name|doc
argument_list|,
name|ordinals
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|ordinals
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
comment|// verify that the ordinal is recognized by the taxonomy
name|int
name|ordinal
init|=
name|ordinals
operator|.
name|ints
index|[
name|j
index|]
operator|+
name|partitionOffset
decl_stmt|;
name|assertTrue
argument_list|(
literal|"should not have received dummy ordinal ("
operator|+
name|dummyOrdinal
operator|+
literal|")"
argument_list|,
name|dummyOrdinal
operator|!=
name|ordinal
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"missing category for ordinal "
operator|+
name|ordinal
argument_list|,
name|taxoReader
operator|.
name|getPath
argument_list|(
name|ordinal
argument_list|)
argument_list|)
expr_stmt|;
name|foundOrdinals
index|[
name|ordinal
index|]
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
name|assertTrue
argument_list|(
literal|"some fields which have docValues were not visited: "
operator|+
name|docValuesFields
argument_list|,
name|docValuesFields
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|foundOrdinals
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertTrue
argument_list|(
literal|"ordinal "
operator|+
name|i
operator|+
literal|" not visited"
argument_list|,
name|foundOrdinals
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|doTestMigration
specifier|private
name|void
name|doTestMigration
parameter_list|(
specifier|final
name|int
name|partitionSize
parameter_list|)
throws|throws
name|Exception
block|{
comment|// create a facets index with PayloadFacetFields and check it after migration
name|Directory
name|indexDir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|Directory
name|taxoDir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
comment|// set custom CLP fields for two dimensions and use the default ($facets) for the other two
name|HashMap
argument_list|<
name|CategoryPath
argument_list|,
name|CategoryListParams
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<
name|CategoryPath
argument_list|,
name|CategoryListParams
argument_list|>
argument_list|()
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
operator|new
name|CategoryPath
argument_list|(
name|DIMENSIONS
index|[
literal|0
index|]
argument_list|)
argument_list|,
operator|new
name|CategoryListParams
argument_list|(
name|DIMENSIONS
index|[
literal|0
index|]
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|OrdinalPolicy
name|getOrdinalPolicy
parameter_list|(
name|String
name|dimension
parameter_list|)
block|{
return|return
name|OrdinalPolicy
operator|.
name|ALL_PARENTS
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
operator|new
name|CategoryPath
argument_list|(
name|DIMENSIONS
index|[
literal|1
index|]
argument_list|)
argument_list|,
operator|new
name|CategoryListParams
argument_list|(
name|DIMENSIONS
index|[
literal|1
index|]
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|OrdinalPolicy
name|getOrdinalPolicy
parameter_list|(
name|String
name|dimension
parameter_list|)
block|{
return|return
name|OrdinalPolicy
operator|.
name|ALL_PARENTS
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|OrdinalPolicy
argument_list|>
name|policies
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|CategoryListParams
operator|.
name|OrdinalPolicy
argument_list|>
argument_list|()
decl_stmt|;
name|policies
operator|.
name|put
argument_list|(
name|DIMENSIONS
index|[
literal|2
index|]
argument_list|,
name|OrdinalPolicy
operator|.
name|ALL_PARENTS
argument_list|)
expr_stmt|;
name|policies
operator|.
name|put
argument_list|(
name|DIMENSIONS
index|[
literal|3
index|]
argument_list|,
name|OrdinalPolicy
operator|.
name|ALL_PARENTS
argument_list|)
expr_stmt|;
name|FacetIndexingParams
name|fip
init|=
operator|new
name|PerDimensionIndexingParams
argument_list|(
name|params
argument_list|,
operator|new
name|PerDimensionOrdinalPolicy
argument_list|(
name|policies
argument_list|)
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|int
name|getPartitionSize
parameter_list|()
block|{
return|return
name|partitionSize
return|;
block|}
block|}
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|expectedCounts
init|=
name|createIndex
argument_list|(
name|indexDir
argument_list|,
name|taxoDir
argument_list|,
name|fip
argument_list|)
decl_stmt|;
name|migrateIndex
argument_list|(
name|indexDir
argument_list|,
name|fip
argument_list|)
expr_stmt|;
name|verifyMigratedIndex
argument_list|(
name|indexDir
argument_list|,
name|taxoDir
argument_list|,
name|expectedCounts
argument_list|,
name|fip
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|close
argument_list|(
name|indexDir
argument_list|,
name|taxoDir
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMigration
specifier|public
name|void
name|testMigration
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestMigration
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMigrationWithPartitions
specifier|public
name|void
name|testMigrationWithPartitions
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestMigration
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
