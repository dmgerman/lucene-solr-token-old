begin_unit
begin_package
DECL|package|org.apache.lucene.facet.index.attributes
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|index
operator|.
name|attributes
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|index
operator|.
name|CategoryContainerTestBase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|index
operator|.
name|attributes
operator|.
name|CategoryAttribute
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|index
operator|.
name|attributes
operator|.
name|CategoryAttributesIterable
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|taxonomy
operator|.
name|CategoryPath
import|;
end_import
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_class
DECL|class|CategoryAttributesIterableTest
specifier|public
class|class
name|CategoryAttributesIterableTest
extends|extends
name|CategoryContainerTestBase
block|{
annotation|@
name|Test
DECL|method|testIterator
specifier|public
name|void
name|testIterator
parameter_list|()
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|CategoryPath
argument_list|>
name|categoryList
init|=
operator|new
name|ArrayList
argument_list|<
name|CategoryPath
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|initialCatgeories
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|categoryList
operator|.
name|add
argument_list|(
name|initialCatgeories
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|CategoryAttributesIterable
name|iterable
init|=
operator|new
name|CategoryAttributesIterable
argument_list|(
name|categoryList
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|CategoryAttribute
argument_list|>
name|iterator
init|=
name|iterable
operator|.
name|iterator
argument_list|()
decl_stmt|;
comment|// count the number of tokens
name|int
name|nCategories
decl_stmt|;
for|for
control|(
name|nCategories
operator|=
literal|0
init|;
name|iterator
operator|.
name|hasNext
argument_list|()
condition|;
name|nCategories
operator|++
control|)
block|{
name|iterator
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"Wrong number of tokens"
argument_list|,
literal|3
argument_list|,
name|nCategories
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
