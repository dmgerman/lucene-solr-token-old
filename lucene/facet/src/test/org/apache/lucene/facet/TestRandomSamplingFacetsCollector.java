begin_unit
begin_package
DECL|package|org.apache.lucene.facet
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
package|;
end_package
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
operator|.
name|Store
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|StringField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|FacetsCollector
operator|.
name|MatchingDocs
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|taxonomy
operator|.
name|FastTaxonomyFacetCounts
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|taxonomy
operator|.
name|TaxonomyReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|taxonomy
operator|.
name|directory
operator|.
name|DirectoryTaxonomyReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|taxonomy
operator|.
name|directory
operator|.
name|DirectoryTaxonomyWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|RandomIndexWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|DocIdSetIterator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|MultiCollector
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TermQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_class
DECL|class|TestRandomSamplingFacetsCollector
specifier|public
class|class
name|TestRandomSamplingFacetsCollector
extends|extends
name|FacetTestCase
block|{
comment|// The first 50 chi-square value for p-value=0.05, taken from:
comment|// http://en.wikibooks.org/wiki/Engineering_Tables/Chi-Squared_Distibution
DECL|field|CHI_SQUARE_VALUES
specifier|private
specifier|static
specifier|final
name|float
index|[]
name|CHI_SQUARE_VALUES
init|=
operator|new
name|float
index|[]
block|{
literal|0.0f
block|,
literal|3.841f
block|,
literal|5.991f
block|,
literal|7.815f
block|,
literal|9.488f
block|,
literal|11.07f
block|,
literal|12.592f
block|,
literal|14.067f
block|,
literal|15.507f
block|,
literal|16.919f
block|,
literal|18.307f
block|,
literal|19.675f
block|,
literal|21.026f
block|,
literal|22.362f
block|,
literal|23.685f
block|,
literal|24.996f
block|,
literal|26.296f
block|,
literal|27.587f
block|,
literal|28.869f
block|,
literal|30.144f
block|,
literal|31.41f
block|,
literal|32.671f
block|,
literal|33.924f
block|,
literal|35.172f
block|,
literal|36.415f
block|,
literal|37.652f
block|,
literal|38.885f
block|,
literal|40.113f
block|,
literal|41.337f
block|,
literal|42.557f
block|,
literal|43.773f
block|,
literal|44.985f
block|,
literal|46.194f
block|,
literal|47.4f
block|,
literal|48.602f
block|,
literal|49.802f
block|,
literal|50.998f
block|,
literal|52.192f
block|,
literal|53.384f
block|,
literal|54.572f
block|,
literal|55.758f
block|,
literal|56.942f
block|,
literal|58.124f
block|,
literal|59.304f
block|,
literal|60.481f
block|,
literal|61.656f
block|,
literal|62.83f
block|,
literal|64.001f
block|,
literal|65.171f
block|,
literal|66.339f
block|,
literal|67.505f
block|}
decl_stmt|;
DECL|method|testRandomSampling
specifier|public
name|void
name|testRandomSampling
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|Directory
name|taxoDir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|Random
name|random
init|=
name|random
argument_list|()
decl_stmt|;
name|DirectoryTaxonomyWriter
name|taxoWriter
init|=
operator|new
name|DirectoryTaxonomyWriter
argument_list|(
name|taxoDir
argument_list|)
decl_stmt|;
name|RandomIndexWriter
name|writer
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|,
name|dir
argument_list|)
decl_stmt|;
name|FacetsConfig
name|config
init|=
operator|new
name|FacetsConfig
argument_list|()
decl_stmt|;
specifier|final
name|int
name|numCategories
init|=
literal|10
decl_stmt|;
name|int
name|numDocs
init|=
name|atLeast
argument_list|(
literal|10000
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
name|i
operator|++
control|)
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|StringField
argument_list|(
literal|"EvenOdd"
argument_list|,
operator|(
name|i
operator|%
literal|2
operator|==
literal|0
operator|)
condition|?
literal|"even"
else|:
literal|"odd"
argument_list|,
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|FacetField
argument_list|(
literal|"iMod10"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
operator|%
name|numCategories
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|config
operator|.
name|build
argument_list|(
name|taxoWriter
argument_list|,
name|doc
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// NRT open
name|IndexSearcher
name|searcher
init|=
name|newSearcher
argument_list|(
name|writer
operator|.
name|getReader
argument_list|()
argument_list|)
decl_stmt|;
name|TaxonomyReader
name|taxoReader
init|=
operator|new
name|DirectoryTaxonomyReader
argument_list|(
name|taxoWriter
argument_list|)
decl_stmt|;
name|IOUtils
operator|.
name|close
argument_list|(
name|writer
argument_list|,
name|taxoWriter
argument_list|)
expr_stmt|;
comment|// Test empty results
name|RandomSamplingFacetsCollector
name|collectRandomZeroResults
init|=
operator|new
name|RandomSamplingFacetsCollector
argument_list|(
name|numDocs
operator|/
literal|10
argument_list|,
name|random
operator|.
name|nextLong
argument_list|()
argument_list|)
decl_stmt|;
comment|// There should be no divisions by zero
name|searcher
operator|.
name|search
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"EvenOdd"
argument_list|,
literal|"NeverMatches"
argument_list|)
argument_list|)
argument_list|,
name|collectRandomZeroResults
argument_list|)
expr_stmt|;
comment|// There should be no divisions by zero and no null result
name|assertNotNull
argument_list|(
name|collectRandomZeroResults
operator|.
name|getMatchingDocs
argument_list|()
argument_list|)
expr_stmt|;
comment|// There should be no results at all
for|for
control|(
name|MatchingDocs
name|doc
range|:
name|collectRandomZeroResults
operator|.
name|getMatchingDocs
argument_list|()
control|)
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|doc
operator|.
name|totalHits
argument_list|)
expr_stmt|;
block|}
comment|// Now start searching and retrieve results.
comment|// Use a query to select half of the documents.
name|TermQuery
name|query
init|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"EvenOdd"
argument_list|,
literal|"even"
argument_list|)
argument_list|)
decl_stmt|;
name|RandomSamplingFacetsCollector
name|random10Percent
init|=
operator|new
name|RandomSamplingFacetsCollector
argument_list|(
name|numDocs
operator|/
literal|10
argument_list|,
name|random
operator|.
name|nextLong
argument_list|()
argument_list|)
decl_stmt|;
comment|// 10% of total docs, 20% of the hits
name|FacetsCollector
name|fc
init|=
operator|new
name|FacetsCollector
argument_list|()
decl_stmt|;
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
name|MultiCollector
operator|.
name|wrap
argument_list|(
name|fc
argument_list|,
name|random10Percent
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|MatchingDocs
argument_list|>
name|matchingDocs
init|=
name|random10Percent
operator|.
name|getMatchingDocs
argument_list|()
decl_stmt|;
comment|// count the total hits and sampled docs, also store the number of sampled
comment|// docs per segment
name|int
name|totalSampledDocs
init|=
literal|0
decl_stmt|,
name|totalHits
init|=
literal|0
decl_stmt|;
name|int
index|[]
name|numSampledDocs
init|=
operator|new
name|int
index|[
name|matchingDocs
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
comment|//    System.out.println("numSegments=" + numSampledDocs.length);
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numSampledDocs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|MatchingDocs
name|md
init|=
name|matchingDocs
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
specifier|final
name|DocIdSetIterator
name|iter
init|=
name|md
operator|.
name|bits
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|nextDoc
argument_list|()
operator|!=
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
condition|)
operator|++
name|numSampledDocs
index|[
name|i
index|]
expr_stmt|;
name|totalSampledDocs
operator|+=
name|numSampledDocs
index|[
name|i
index|]
expr_stmt|;
name|totalHits
operator|+=
name|md
operator|.
name|totalHits
expr_stmt|;
block|}
comment|// compute the chi-square value for the sampled documents' distribution
name|float
name|chi_square
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numSampledDocs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|MatchingDocs
name|md
init|=
name|matchingDocs
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|float
name|ei
init|=
operator|(
name|float
operator|)
name|md
operator|.
name|totalHits
operator|/
name|totalHits
decl_stmt|;
if|if
condition|(
name|ei
operator|>
literal|0.0f
condition|)
block|{
name|float
name|oi
init|=
operator|(
name|float
operator|)
name|numSampledDocs
index|[
name|i
index|]
operator|/
name|totalSampledDocs
decl_stmt|;
name|chi_square
operator|+=
operator|(
name|Math
operator|.
name|pow
argument_list|(
name|ei
operator|-
name|oi
argument_list|,
literal|2
argument_list|)
operator|/
name|ei
operator|)
expr_stmt|;
block|}
block|}
comment|// Verify that the chi-square value isn't too big. According to
comment|// http://en.wikipedia.org/wiki/Chi-squared_distribution#Table_of_.CF.872_value_vs_p-value,
comment|// we basically verify that there is a really small chance of hitting a very
comment|// bad sample (p-value< 0.05), for n-degrees of freedom. The number 'n' depends
comment|// on the number of segments.
name|assertTrue
argument_list|(
literal|"chisquare not statistically significant enough: "
operator|+
name|chi_square
argument_list|,
name|chi_square
operator|<
name|CHI_SQUARE_VALUES
index|[
name|numSampledDocs
operator|.
name|length
index|]
argument_list|)
expr_stmt|;
comment|// Test amortized counts - should be 5X the sampled count, but maximum numDocs/10
specifier|final
name|FastTaxonomyFacetCounts
name|random10FacetCounts
init|=
operator|new
name|FastTaxonomyFacetCounts
argument_list|(
name|taxoReader
argument_list|,
name|config
argument_list|,
name|random10Percent
argument_list|)
decl_stmt|;
specifier|final
name|FacetResult
name|random10Result
init|=
name|random10FacetCounts
operator|.
name|getTopChildren
argument_list|(
literal|10
argument_list|,
literal|"iMod10"
argument_list|)
decl_stmt|;
specifier|final
name|FacetResult
name|amortized10Result
init|=
name|random10Percent
operator|.
name|amortizeFacetCounts
argument_list|(
name|random10Result
argument_list|,
name|config
argument_list|,
name|searcher
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|amortized10Result
operator|.
name|labelValues
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|LabelAndValue
name|amortized
init|=
name|amortized10Result
operator|.
name|labelValues
index|[
name|i
index|]
decl_stmt|;
name|LabelAndValue
name|sampled
init|=
name|random10Result
operator|.
name|labelValues
index|[
name|i
index|]
decl_stmt|;
comment|// since numDocs may not divide by 10 exactly, allow for some slack in the amortized count
name|assertEquals
argument_list|(
name|amortized
operator|.
name|value
operator|.
name|floatValue
argument_list|()
argument_list|,
name|Math
operator|.
name|min
argument_list|(
literal|5
operator|*
name|sampled
operator|.
name|value
operator|.
name|floatValue
argument_list|()
argument_list|,
name|numDocs
operator|/
literal|10.f
argument_list|)
argument_list|,
literal|1.0
argument_list|)
expr_stmt|;
block|}
name|IOUtils
operator|.
name|close
argument_list|(
name|searcher
operator|.
name|getIndexReader
argument_list|()
argument_list|,
name|taxoReader
argument_list|,
name|dir
argument_list|,
name|taxoDir
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
