begin_unit
begin_package
DECL|package|org.apache.lucene.facet.search.sampling
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|search
operator|.
name|sampling
package|;
end_package
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TermQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|MultiCollector
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|search
operator|.
name|BaseTestTopK
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|search
operator|.
name|FacetsAccumulator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|search
operator|.
name|FacetsCollector
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|search
operator|.
name|ScoredDocIDs
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|search
operator|.
name|ScoredDocIdCollector
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|search
operator|.
name|params
operator|.
name|FacetRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|search
operator|.
name|params
operator|.
name|FacetRequest
operator|.
name|ResultMode
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|search
operator|.
name|params
operator|.
name|FacetSearchParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|search
operator|.
name|results
operator|.
name|FacetResult
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|taxonomy
operator|.
name|TaxonomyReader
import|;
end_import
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_class
DECL|class|BaseSampleTestTopK
specifier|public
specifier|abstract
class|class
name|BaseSampleTestTopK
extends|extends
name|BaseTestTopK
block|{
comment|/** Number of top results */
DECL|field|K
specifier|protected
specifier|static
specifier|final
name|int
name|K
init|=
literal|2
decl_stmt|;
comment|/** since there is a chance that this test would fail even if the code is correct, retry the sampling */
DECL|field|RETRIES
specifier|protected
specifier|static
specifier|final
name|int
name|RETRIES
init|=
literal|10
decl_stmt|;
annotation|@
name|Override
DECL|method|searchParamsWithRequests
specifier|protected
name|FacetSearchParams
name|searchParamsWithRequests
parameter_list|(
name|int
name|numResults
parameter_list|,
name|int
name|partitionSize
parameter_list|)
block|{
name|FacetSearchParams
name|res
init|=
name|super
operator|.
name|searchParamsWithRequests
argument_list|(
name|numResults
argument_list|,
name|partitionSize
argument_list|)
decl_stmt|;
for|for
control|(
name|FacetRequest
name|req
range|:
name|res
operator|.
name|getFacetRequests
argument_list|()
control|)
block|{
comment|// randomize the way we aggregate results
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|req
operator|.
name|setResultMode
argument_list|(
name|ResultMode
operator|.
name|GLOBAL_FLAT
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|req
operator|.
name|setResultMode
argument_list|(
name|ResultMode
operator|.
name|PER_NODE_IN_TREE
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|res
return|;
block|}
DECL|method|getSamplingAccumulator
specifier|protected
specifier|abstract
name|FacetsAccumulator
name|getSamplingAccumulator
parameter_list|(
name|Sampler
name|sampler
parameter_list|,
name|TaxonomyReader
name|taxoReader
parameter_list|,
name|IndexReader
name|indexReader
parameter_list|,
name|FacetSearchParams
name|searchParams
parameter_list|)
function_decl|;
comment|/**    * Try out faceted search with sampling enabled and complements either disabled or enforced    * Lots of randomly generated data is being indexed, and later on a "90% docs" faceted search    * is performed. The results are compared to non-sampled ones.    */
DECL|method|testCountUsingSampling
specifier|public
name|void
name|testCountUsingSampling
parameter_list|()
throws|throws
name|Exception
block|{
name|boolean
name|useRandomSampler
init|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|partitionSize
range|:
name|partitionSizes
control|)
block|{
try|try
block|{
name|initIndex
argument_list|(
name|partitionSize
argument_list|)
expr_stmt|;
comment|// Get all of the documents and run the query, then do different
comment|// facet counts and compare to control
name|Query
name|q
init|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|CONTENT_FIELD
argument_list|,
name|BETA
argument_list|)
argument_list|)
decl_stmt|;
comment|// 90% of the docs
name|ScoredDocIdCollector
name|docCollector
init|=
name|ScoredDocIdCollector
operator|.
name|create
argument_list|(
name|indexReader
operator|.
name|maxDoc
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|FacetSearchParams
name|expectedSearchParams
init|=
name|searchParamsWithRequests
argument_list|(
name|K
argument_list|,
name|partitionSize
argument_list|)
decl_stmt|;
name|FacetsCollector
name|fc
init|=
operator|new
name|FacetsCollector
argument_list|(
name|expectedSearchParams
argument_list|,
name|indexReader
argument_list|,
name|taxoReader
argument_list|)
decl_stmt|;
name|searcher
operator|.
name|search
argument_list|(
name|q
argument_list|,
name|MultiCollector
operator|.
name|wrap
argument_list|(
name|docCollector
argument_list|,
name|fc
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|FacetResult
argument_list|>
name|expectedResults
init|=
name|fc
operator|.
name|getFacetResults
argument_list|()
decl_stmt|;
name|FacetSearchParams
name|samplingSearchParams
init|=
name|searchParamsWithRequests
argument_list|(
name|K
argument_list|,
name|partitionSize
argument_list|)
decl_stmt|;
comment|// try several times in case of failure, because the test has a chance to fail
comment|// if the top K facets are not sufficiently common with the sample set
for|for
control|(
name|int
name|nTrial
init|=
literal|0
init|;
name|nTrial
operator|<
name|RETRIES
condition|;
name|nTrial
operator|++
control|)
block|{
try|try
block|{
comment|// complement with sampling!
specifier|final
name|Sampler
name|sampler
init|=
name|createSampler
argument_list|(
name|nTrial
argument_list|,
name|docCollector
operator|.
name|getScoredDocIDs
argument_list|()
argument_list|,
name|useRandomSampler
argument_list|)
decl_stmt|;
name|assertSampling
argument_list|(
name|expectedResults
argument_list|,
name|q
argument_list|,
name|sampler
argument_list|,
name|samplingSearchParams
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertSampling
argument_list|(
name|expectedResults
argument_list|,
name|q
argument_list|,
name|sampler
argument_list|,
name|samplingSearchParams
argument_list|,
literal|true
argument_list|)
expr_stmt|;
break|break;
comment|// succeeded
block|}
catch|catch
parameter_list|(
name|NotSameResultError
name|e
parameter_list|)
block|{
if|if
condition|(
name|nTrial
operator|>=
name|RETRIES
operator|-
literal|1
condition|)
block|{
throw|throw
name|e
throw|;
comment|// no more retries allowed, must fail
block|}
block|}
block|}
block|}
finally|finally
block|{
name|closeAll
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|assertSampling
specifier|private
name|void
name|assertSampling
parameter_list|(
name|List
argument_list|<
name|FacetResult
argument_list|>
name|expected
parameter_list|,
name|Query
name|q
parameter_list|,
name|Sampler
name|sampler
parameter_list|,
name|FacetSearchParams
name|params
parameter_list|,
name|boolean
name|complement
parameter_list|)
throws|throws
name|Exception
block|{
name|FacetsCollector
name|samplingFC
init|=
name|samplingCollector
argument_list|(
name|complement
argument_list|,
name|sampler
argument_list|,
name|params
argument_list|)
decl_stmt|;
name|searcher
operator|.
name|search
argument_list|(
name|q
argument_list|,
name|samplingFC
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|FacetResult
argument_list|>
name|sampledResults
init|=
name|samplingFC
operator|.
name|getFacetResults
argument_list|()
decl_stmt|;
name|assertSameResults
argument_list|(
name|expected
argument_list|,
name|sampledResults
argument_list|)
expr_stmt|;
block|}
DECL|method|samplingCollector
specifier|private
name|FacetsCollector
name|samplingCollector
parameter_list|(
specifier|final
name|boolean
name|complement
parameter_list|,
specifier|final
name|Sampler
name|sampler
parameter_list|,
name|FacetSearchParams
name|samplingSearchParams
parameter_list|)
block|{
name|FacetsCollector
name|samplingFC
init|=
operator|new
name|FacetsCollector
argument_list|(
name|samplingSearchParams
argument_list|,
name|indexReader
argument_list|,
name|taxoReader
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|FacetsAccumulator
name|initFacetsAccumulator
parameter_list|(
name|FacetSearchParams
name|facetSearchParams
parameter_list|,
name|IndexReader
name|indexReader
parameter_list|,
name|TaxonomyReader
name|taxonomyReader
parameter_list|)
block|{
name|FacetsAccumulator
name|acc
init|=
name|getSamplingAccumulator
argument_list|(
name|sampler
argument_list|,
name|taxonomyReader
argument_list|,
name|indexReader
argument_list|,
name|facetSearchParams
argument_list|)
decl_stmt|;
name|acc
operator|.
name|setComplementThreshold
argument_list|(
name|complement
condition|?
name|FacetsAccumulator
operator|.
name|FORCE_COMPLEMENT
else|:
name|FacetsAccumulator
operator|.
name|DISABLE_COMPLEMENT
argument_list|)
expr_stmt|;
return|return
name|acc
return|;
block|}
block|}
decl_stmt|;
return|return
name|samplingFC
return|;
block|}
DECL|method|createSampler
specifier|private
name|Sampler
name|createSampler
parameter_list|(
name|int
name|nTrial
parameter_list|,
name|ScoredDocIDs
name|scoredDocIDs
parameter_list|,
name|boolean
name|useRandomSampler
parameter_list|)
block|{
name|SamplingParams
name|samplingParams
init|=
operator|new
name|SamplingParams
argument_list|()
decl_stmt|;
specifier|final
name|double
name|retryFactor
init|=
name|Math
operator|.
name|pow
argument_list|(
literal|1.01
argument_list|,
name|nTrial
argument_list|)
decl_stmt|;
name|samplingParams
operator|.
name|setSampleRatio
argument_list|(
literal|0.8
operator|*
name|retryFactor
argument_list|)
expr_stmt|;
name|samplingParams
operator|.
name|setMinSampleSize
argument_list|(
call|(
name|int
call|)
argument_list|(
literal|100
operator|*
name|retryFactor
argument_list|)
argument_list|)
expr_stmt|;
name|samplingParams
operator|.
name|setMaxSampleSize
argument_list|(
call|(
name|int
call|)
argument_list|(
literal|10000
operator|*
name|retryFactor
argument_list|)
argument_list|)
expr_stmt|;
name|samplingParams
operator|.
name|setOversampleFactor
argument_list|(
literal|5.0
operator|*
name|retryFactor
argument_list|)
expr_stmt|;
name|samplingParams
operator|.
name|setSampingThreshold
argument_list|(
literal|11000
argument_list|)
expr_stmt|;
comment|//force sampling
name|Sampler
name|sampler
init|=
name|useRandomSampler
condition|?
operator|new
name|RandomSampler
argument_list|(
name|samplingParams
argument_list|,
operator|new
name|Random
argument_list|(
name|random
argument_list|()
operator|.
name|nextLong
argument_list|()
argument_list|)
argument_list|)
else|:
operator|new
name|RepeatableSampler
argument_list|(
name|samplingParams
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"must enable sampling for this test!"
argument_list|,
name|sampler
operator|.
name|shouldSample
argument_list|(
name|scoredDocIDs
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|sampler
return|;
block|}
block|}
end_class
end_unit
