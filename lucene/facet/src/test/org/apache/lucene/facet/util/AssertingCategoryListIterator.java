begin_unit
begin_package
DECL|package|org.apache.lucene.facet.util
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|util
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|search
operator|.
name|CategoryListIterator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|AtomicReaderContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IntsRef
import|;
end_import
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_comment
comment|/**  * A {@link CategoryListIterator} which asserts that  * {@link #getOrdinals(int, IntsRef)} is not called before  * {@link #setNextReader(AtomicReaderContext)} and that if  * {@link #setNextReader(AtomicReaderContext)} returns false,  * {@link #getOrdinals(int, IntsRef)} isn't called.  */
end_comment
begin_class
DECL|class|AssertingCategoryListIterator
specifier|public
class|class
name|AssertingCategoryListIterator
implements|implements
name|CategoryListIterator
block|{
DECL|field|delegate
specifier|private
specifier|final
name|CategoryListIterator
name|delegate
decl_stmt|;
DECL|field|setNextReaderCalled
specifier|private
name|boolean
name|setNextReaderCalled
init|=
literal|false
decl_stmt|;
DECL|field|validSegment
specifier|private
name|boolean
name|validSegment
init|=
literal|false
decl_stmt|;
DECL|field|maxDoc
specifier|private
name|int
name|maxDoc
decl_stmt|;
DECL|method|AssertingCategoryListIterator
specifier|public
name|AssertingCategoryListIterator
parameter_list|(
name|CategoryListIterator
name|delegate
parameter_list|)
block|{
name|this
operator|.
name|delegate
operator|=
name|delegate
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setNextReader
specifier|public
name|boolean
name|setNextReader
parameter_list|(
name|AtomicReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|setNextReaderCalled
operator|=
literal|true
expr_stmt|;
name|maxDoc
operator|=
name|context
operator|.
name|reader
argument_list|()
operator|.
name|maxDoc
argument_list|()
expr_stmt|;
return|return
name|validSegment
operator|=
name|delegate
operator|.
name|setNextReader
argument_list|(
name|context
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getOrdinals
specifier|public
name|void
name|getOrdinals
parameter_list|(
name|int
name|docID
parameter_list|,
name|IntsRef
name|ints
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|setNextReaderCalled
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"should not call getOrdinals without setNextReader first"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|validSegment
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"should not call getOrdinals if setNextReader returned false"
argument_list|)
throw|;
block|}
if|if
condition|(
name|docID
operator|>=
name|maxDoc
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"docID is larger than current maxDoc; forgot to call setNextReader?"
argument_list|)
throw|;
block|}
name|delegate
operator|.
name|getOrdinals
argument_list|(
name|docID
argument_list|,
name|ints
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
