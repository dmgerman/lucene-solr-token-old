begin_unit
begin_package
DECL|package|org.apache.lucene.facet
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|MockAnalyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|StringField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|DrillSideways
operator|.
name|DrillSidewaysResult
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|sortedset
operator|.
name|DefaultSortedSetDocValuesReaderState
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|sortedset
operator|.
name|SortedSetDocValuesFacetField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|sortedset
operator|.
name|SortedSetDocValuesReaderState
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|taxonomy
operator|.
name|TaxonomyReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|taxonomy
operator|.
name|directory
operator|.
name|DirectoryTaxonomyReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|taxonomy
operator|.
name|directory
operator|.
name|DirectoryTaxonomyWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|AtomicReaderContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriterConfig
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|RandomIndexWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|LeafCollector
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Collector
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|DocIdSet
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Filter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|MatchAllDocsQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|ScoreDoc
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Scorer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|SimpleCollector
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Sort
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|SortField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TermQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TopDocs
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Bits
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|FixedBitSet
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|InPlaceMergeSorter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|InfoStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|TestUtil
import|;
end_import
begin_class
DECL|class|TestDrillSideways
specifier|public
class|class
name|TestDrillSideways
extends|extends
name|FacetTestCase
block|{
DECL|method|testBasic
specifier|public
name|void
name|testBasic
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|Directory
name|taxoDir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
comment|// Writes facet ords to a separate directory from the
comment|// main index:
name|DirectoryTaxonomyWriter
name|taxoWriter
init|=
operator|new
name|DirectoryTaxonomyWriter
argument_list|(
name|taxoDir
argument_list|,
name|IndexWriterConfig
operator|.
name|OpenMode
operator|.
name|CREATE
argument_list|)
decl_stmt|;
name|FacetsConfig
name|config
init|=
operator|new
name|FacetsConfig
argument_list|()
decl_stmt|;
name|config
operator|.
name|setHierarchical
argument_list|(
literal|"Publish Date"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|RandomIndexWriter
name|writer
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|FacetField
argument_list|(
literal|"Author"
argument_list|,
literal|"Bob"
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|FacetField
argument_list|(
literal|"Publish Date"
argument_list|,
literal|"2010"
argument_list|,
literal|"10"
argument_list|,
literal|"15"
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|config
operator|.
name|build
argument_list|(
name|taxoWriter
argument_list|,
name|doc
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|FacetField
argument_list|(
literal|"Author"
argument_list|,
literal|"Lisa"
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|FacetField
argument_list|(
literal|"Publish Date"
argument_list|,
literal|"2010"
argument_list|,
literal|"10"
argument_list|,
literal|"20"
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|config
operator|.
name|build
argument_list|(
name|taxoWriter
argument_list|,
name|doc
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|FacetField
argument_list|(
literal|"Author"
argument_list|,
literal|"Lisa"
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|FacetField
argument_list|(
literal|"Publish Date"
argument_list|,
literal|"2012"
argument_list|,
literal|"1"
argument_list|,
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|config
operator|.
name|build
argument_list|(
name|taxoWriter
argument_list|,
name|doc
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|FacetField
argument_list|(
literal|"Author"
argument_list|,
literal|"Susan"
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|FacetField
argument_list|(
literal|"Publish Date"
argument_list|,
literal|"2012"
argument_list|,
literal|"1"
argument_list|,
literal|"7"
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|config
operator|.
name|build
argument_list|(
name|taxoWriter
argument_list|,
name|doc
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|FacetField
argument_list|(
literal|"Author"
argument_list|,
literal|"Frank"
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|FacetField
argument_list|(
literal|"Publish Date"
argument_list|,
literal|"1999"
argument_list|,
literal|"5"
argument_list|,
literal|"5"
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|config
operator|.
name|build
argument_list|(
name|taxoWriter
argument_list|,
name|doc
argument_list|)
argument_list|)
expr_stmt|;
comment|// NRT open
name|IndexSearcher
name|searcher
init|=
name|newSearcher
argument_list|(
name|writer
operator|.
name|getReader
argument_list|()
argument_list|)
decl_stmt|;
comment|//System.out.println("searcher=" + searcher);
comment|// NRT open
name|TaxonomyReader
name|taxoReader
init|=
operator|new
name|DirectoryTaxonomyReader
argument_list|(
name|taxoWriter
argument_list|)
decl_stmt|;
name|DrillSideways
name|ds
init|=
operator|new
name|DrillSideways
argument_list|(
name|searcher
argument_list|,
name|config
argument_list|,
name|taxoReader
argument_list|)
decl_stmt|;
comment|//  case: drill-down on a single field; in this
comment|// case the drill-sideways + drill-down counts ==
comment|// drill-down of just the query:
name|DrillDownQuery
name|ddq
init|=
operator|new
name|DrillDownQuery
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|ddq
operator|.
name|add
argument_list|(
literal|"Author"
argument_list|,
literal|"Lisa"
argument_list|)
expr_stmt|;
name|DrillSidewaysResult
name|r
init|=
name|ds
operator|.
name|search
argument_list|(
literal|null
argument_list|,
name|ddq
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|r
operator|.
name|hits
operator|.
name|totalHits
argument_list|)
expr_stmt|;
comment|// Publish Date is only drill-down, and Lisa published
comment|// one in 2012 and one in 2010:
name|assertEquals
argument_list|(
literal|"dim=Publish Date path=[] value=2 childCount=2\n  2010 (1)\n  2012 (1)\n"
argument_list|,
name|r
operator|.
name|facets
operator|.
name|getTopChildren
argument_list|(
literal|10
argument_list|,
literal|"Publish Date"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Author is drill-sideways + drill-down: Lisa
comment|// (drill-down) published twice, and Frank/Susan/Bob
comment|// published once:
name|assertEquals
argument_list|(
literal|"dim=Author path=[] value=5 childCount=4\n  Lisa (2)\n  Bob (1)\n  Susan (1)\n  Frank (1)\n"
argument_list|,
name|r
operator|.
name|facets
operator|.
name|getTopChildren
argument_list|(
literal|10
argument_list|,
literal|"Author"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Same simple case, but no baseQuery (pure browse):
comment|// drill-down on a single field; in this case the
comment|// drill-sideways + drill-down counts == drill-down of
comment|// just the query:
name|ddq
operator|=
operator|new
name|DrillDownQuery
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|ddq
operator|.
name|add
argument_list|(
literal|"Author"
argument_list|,
literal|"Lisa"
argument_list|)
expr_stmt|;
name|r
operator|=
name|ds
operator|.
name|search
argument_list|(
literal|null
argument_list|,
name|ddq
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|r
operator|.
name|hits
operator|.
name|totalHits
argument_list|)
expr_stmt|;
comment|// Publish Date is only drill-down, and Lisa published
comment|// one in 2012 and one in 2010:
name|assertEquals
argument_list|(
literal|"dim=Publish Date path=[] value=2 childCount=2\n  2010 (1)\n  2012 (1)\n"
argument_list|,
name|r
operator|.
name|facets
operator|.
name|getTopChildren
argument_list|(
literal|10
argument_list|,
literal|"Publish Date"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Author is drill-sideways + drill-down: Lisa
comment|// (drill-down) published twice, and Frank/Susan/Bob
comment|// published once:
name|assertEquals
argument_list|(
literal|"dim=Author path=[] value=5 childCount=4\n  Lisa (2)\n  Bob (1)\n  Susan (1)\n  Frank (1)\n"
argument_list|,
name|r
operator|.
name|facets
operator|.
name|getTopChildren
argument_list|(
literal|10
argument_list|,
literal|"Author"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Another simple case: drill-down on single fields
comment|// but OR of two values
name|ddq
operator|=
operator|new
name|DrillDownQuery
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|ddq
operator|.
name|add
argument_list|(
literal|"Author"
argument_list|,
literal|"Lisa"
argument_list|)
expr_stmt|;
name|ddq
operator|.
name|add
argument_list|(
literal|"Author"
argument_list|,
literal|"Bob"
argument_list|)
expr_stmt|;
name|r
operator|=
name|ds
operator|.
name|search
argument_list|(
literal|null
argument_list|,
name|ddq
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|r
operator|.
name|hits
operator|.
name|totalHits
argument_list|)
expr_stmt|;
comment|// Publish Date is only drill-down: Lisa and Bob
comment|// (drill-down) published twice in 2010 and once in 2012:
name|assertEquals
argument_list|(
literal|"dim=Publish Date path=[] value=3 childCount=2\n  2010 (2)\n  2012 (1)\n"
argument_list|,
name|r
operator|.
name|facets
operator|.
name|getTopChildren
argument_list|(
literal|10
argument_list|,
literal|"Publish Date"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Author is drill-sideways + drill-down: Lisa
comment|// (drill-down) published twice, and Frank/Susan/Bob
comment|// published once:
name|assertEquals
argument_list|(
literal|"dim=Author path=[] value=5 childCount=4\n  Lisa (2)\n  Bob (1)\n  Susan (1)\n  Frank (1)\n"
argument_list|,
name|r
operator|.
name|facets
operator|.
name|getTopChildren
argument_list|(
literal|10
argument_list|,
literal|"Author"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|r
operator|.
name|facets
operator|instanceof
name|MultiFacets
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|FacetResult
argument_list|>
name|allResults
init|=
name|r
operator|.
name|facets
operator|.
name|getAllDims
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|allResults
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"dim=Author path=[] value=5 childCount=4\n  Lisa (2)\n  Bob (1)\n  Susan (1)\n  Frank (1)\n"
argument_list|,
name|allResults
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"dim=Publish Date path=[] value=3 childCount=2\n  2010 (2)\n  2012 (1)\n"
argument_list|,
name|allResults
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// More interesting case: drill-down on two fields
name|ddq
operator|=
operator|new
name|DrillDownQuery
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|ddq
operator|.
name|add
argument_list|(
literal|"Author"
argument_list|,
literal|"Lisa"
argument_list|)
expr_stmt|;
name|ddq
operator|.
name|add
argument_list|(
literal|"Publish Date"
argument_list|,
literal|"2010"
argument_list|)
expr_stmt|;
name|r
operator|=
name|ds
operator|.
name|search
argument_list|(
literal|null
argument_list|,
name|ddq
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|r
operator|.
name|hits
operator|.
name|totalHits
argument_list|)
expr_stmt|;
comment|// Publish Date is drill-sideways + drill-down: Lisa
comment|// (drill-down) published once in 2010 and once in 2012:
name|assertEquals
argument_list|(
literal|"dim=Publish Date path=[] value=2 childCount=2\n  2010 (1)\n  2012 (1)\n"
argument_list|,
name|r
operator|.
name|facets
operator|.
name|getTopChildren
argument_list|(
literal|10
argument_list|,
literal|"Publish Date"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Author is drill-sideways + drill-down:
comment|// only Lisa& Bob published (once each) in 2010:
name|assertEquals
argument_list|(
literal|"dim=Author path=[] value=2 childCount=2\n  Bob (1)\n  Lisa (1)\n"
argument_list|,
name|r
operator|.
name|facets
operator|.
name|getTopChildren
argument_list|(
literal|10
argument_list|,
literal|"Author"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Even more interesting case: drill down on two fields,
comment|// but one of them is OR
name|ddq
operator|=
operator|new
name|DrillDownQuery
argument_list|(
name|config
argument_list|)
expr_stmt|;
comment|// Drill down on Lisa or Bob:
name|ddq
operator|.
name|add
argument_list|(
literal|"Author"
argument_list|,
literal|"Lisa"
argument_list|)
expr_stmt|;
name|ddq
operator|.
name|add
argument_list|(
literal|"Publish Date"
argument_list|,
literal|"2010"
argument_list|)
expr_stmt|;
name|ddq
operator|.
name|add
argument_list|(
literal|"Author"
argument_list|,
literal|"Bob"
argument_list|)
expr_stmt|;
name|r
operator|=
name|ds
operator|.
name|search
argument_list|(
literal|null
argument_list|,
name|ddq
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|r
operator|.
name|hits
operator|.
name|totalHits
argument_list|)
expr_stmt|;
comment|// Publish Date is both drill-sideways + drill-down:
comment|// Lisa or Bob published twice in 2010 and once in 2012:
name|assertEquals
argument_list|(
literal|"dim=Publish Date path=[] value=3 childCount=2\n  2010 (2)\n  2012 (1)\n"
argument_list|,
name|r
operator|.
name|facets
operator|.
name|getTopChildren
argument_list|(
literal|10
argument_list|,
literal|"Publish Date"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Author is drill-sideways + drill-down:
comment|// only Lisa& Bob published (once each) in 2010:
name|assertEquals
argument_list|(
literal|"dim=Author path=[] value=2 childCount=2\n  Bob (1)\n  Lisa (1)\n"
argument_list|,
name|r
operator|.
name|facets
operator|.
name|getTopChildren
argument_list|(
literal|10
argument_list|,
literal|"Author"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test drilling down on invalid field:
name|ddq
operator|=
operator|new
name|DrillDownQuery
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|ddq
operator|.
name|add
argument_list|(
literal|"Foobar"
argument_list|,
literal|"Baz"
argument_list|)
expr_stmt|;
name|r
operator|=
name|ds
operator|.
name|search
argument_list|(
literal|null
argument_list|,
name|ddq
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|r
operator|.
name|hits
operator|.
name|totalHits
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|r
operator|.
name|facets
operator|.
name|getTopChildren
argument_list|(
literal|10
argument_list|,
literal|"Publish Date"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|r
operator|.
name|facets
operator|.
name|getTopChildren
argument_list|(
literal|10
argument_list|,
literal|"Foobar"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test drilling down on valid term or'd with invalid term:
name|ddq
operator|=
operator|new
name|DrillDownQuery
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|ddq
operator|.
name|add
argument_list|(
literal|"Author"
argument_list|,
literal|"Lisa"
argument_list|)
expr_stmt|;
name|ddq
operator|.
name|add
argument_list|(
literal|"Author"
argument_list|,
literal|"Tom"
argument_list|)
expr_stmt|;
name|r
operator|=
name|ds
operator|.
name|search
argument_list|(
literal|null
argument_list|,
name|ddq
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|r
operator|.
name|hits
operator|.
name|totalHits
argument_list|)
expr_stmt|;
comment|// Publish Date is only drill-down, and Lisa published
comment|// one in 2012 and one in 2010:
name|assertEquals
argument_list|(
literal|"dim=Publish Date path=[] value=2 childCount=2\n  2010 (1)\n  2012 (1)\n"
argument_list|,
name|r
operator|.
name|facets
operator|.
name|getTopChildren
argument_list|(
literal|10
argument_list|,
literal|"Publish Date"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Author is drill-sideways + drill-down: Lisa
comment|// (drill-down) published twice, and Frank/Susan/Bob
comment|// published once:
name|assertEquals
argument_list|(
literal|"dim=Author path=[] value=5 childCount=4\n  Lisa (2)\n  Bob (1)\n  Susan (1)\n  Frank (1)\n"
argument_list|,
name|r
operator|.
name|facets
operator|.
name|getTopChildren
argument_list|(
literal|10
argument_list|,
literal|"Author"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// LUCENE-4915: test drilling down on a dimension but
comment|// NOT facet counting it:
name|ddq
operator|=
operator|new
name|DrillDownQuery
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|ddq
operator|.
name|add
argument_list|(
literal|"Author"
argument_list|,
literal|"Lisa"
argument_list|)
expr_stmt|;
name|ddq
operator|.
name|add
argument_list|(
literal|"Author"
argument_list|,
literal|"Tom"
argument_list|)
expr_stmt|;
name|r
operator|=
name|ds
operator|.
name|search
argument_list|(
literal|null
argument_list|,
name|ddq
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|r
operator|.
name|hits
operator|.
name|totalHits
argument_list|)
expr_stmt|;
comment|// Publish Date is only drill-down, and Lisa published
comment|// one in 2012 and one in 2010:
name|assertEquals
argument_list|(
literal|"dim=Publish Date path=[] value=2 childCount=2\n  2010 (1)\n  2012 (1)\n"
argument_list|,
name|r
operator|.
name|facets
operator|.
name|getTopChildren
argument_list|(
literal|10
argument_list|,
literal|"Publish Date"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test main query gets null scorer:
name|ddq
operator|=
operator|new
name|DrillDownQuery
argument_list|(
name|config
argument_list|,
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"foobar"
argument_list|,
literal|"baz"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|ddq
operator|.
name|add
argument_list|(
literal|"Author"
argument_list|,
literal|"Lisa"
argument_list|)
expr_stmt|;
name|r
operator|=
name|ds
operator|.
name|search
argument_list|(
literal|null
argument_list|,
name|ddq
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|r
operator|.
name|hits
operator|.
name|totalHits
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|r
operator|.
name|facets
operator|.
name|getTopChildren
argument_list|(
literal|10
argument_list|,
literal|"Publish Date"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|r
operator|.
name|facets
operator|.
name|getTopChildren
argument_list|(
literal|10
argument_list|,
literal|"Author"
argument_list|)
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|close
argument_list|(
name|searcher
operator|.
name|getIndexReader
argument_list|()
argument_list|,
name|taxoReader
argument_list|,
name|writer
argument_list|,
name|taxoWriter
argument_list|,
name|dir
argument_list|,
name|taxoDir
argument_list|)
expr_stmt|;
block|}
DECL|method|testSometimesInvalidDrillDown
specifier|public
name|void
name|testSometimesInvalidDrillDown
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|Directory
name|taxoDir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|RandomIndexWriter
name|writer
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|)
decl_stmt|;
comment|// Writes facet ords to a separate directory from the
comment|// main index:
name|DirectoryTaxonomyWriter
name|taxoWriter
init|=
operator|new
name|DirectoryTaxonomyWriter
argument_list|(
name|taxoDir
argument_list|,
name|IndexWriterConfig
operator|.
name|OpenMode
operator|.
name|CREATE
argument_list|)
decl_stmt|;
name|FacetsConfig
name|config
init|=
operator|new
name|FacetsConfig
argument_list|()
decl_stmt|;
name|config
operator|.
name|setHierarchical
argument_list|(
literal|"Publish Date"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|FacetField
argument_list|(
literal|"Author"
argument_list|,
literal|"Bob"
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|FacetField
argument_list|(
literal|"Publish Date"
argument_list|,
literal|"2010"
argument_list|,
literal|"10"
argument_list|,
literal|"15"
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|config
operator|.
name|build
argument_list|(
name|taxoWriter
argument_list|,
name|doc
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|FacetField
argument_list|(
literal|"Author"
argument_list|,
literal|"Lisa"
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|FacetField
argument_list|(
literal|"Publish Date"
argument_list|,
literal|"2010"
argument_list|,
literal|"10"
argument_list|,
literal|"20"
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|config
operator|.
name|build
argument_list|(
name|taxoWriter
argument_list|,
name|doc
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|// 2nd segment has no Author:
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|FacetField
argument_list|(
literal|"Foobar"
argument_list|,
literal|"Lisa"
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|FacetField
argument_list|(
literal|"Publish Date"
argument_list|,
literal|"2012"
argument_list|,
literal|"1"
argument_list|,
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|config
operator|.
name|build
argument_list|(
name|taxoWriter
argument_list|,
name|doc
argument_list|)
argument_list|)
expr_stmt|;
comment|// NRT open
name|IndexSearcher
name|searcher
init|=
name|newSearcher
argument_list|(
name|writer
operator|.
name|getReader
argument_list|()
argument_list|)
decl_stmt|;
comment|//System.out.println("searcher=" + searcher);
comment|// NRT open
name|TaxonomyReader
name|taxoReader
init|=
operator|new
name|DirectoryTaxonomyReader
argument_list|(
name|taxoWriter
argument_list|)
decl_stmt|;
name|DrillDownQuery
name|ddq
init|=
operator|new
name|DrillDownQuery
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|ddq
operator|.
name|add
argument_list|(
literal|"Author"
argument_list|,
literal|"Lisa"
argument_list|)
expr_stmt|;
name|DrillSidewaysResult
name|r
init|=
operator|new
name|DrillSideways
argument_list|(
name|searcher
argument_list|,
name|config
argument_list|,
name|taxoReader
argument_list|)
operator|.
name|search
argument_list|(
literal|null
argument_list|,
name|ddq
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|r
operator|.
name|hits
operator|.
name|totalHits
argument_list|)
expr_stmt|;
comment|// Publish Date is only drill-down, and Lisa published
comment|// one in 2012 and one in 2010:
name|assertEquals
argument_list|(
literal|"dim=Publish Date path=[] value=1 childCount=1\n  2010 (1)\n"
argument_list|,
name|r
operator|.
name|facets
operator|.
name|getTopChildren
argument_list|(
literal|10
argument_list|,
literal|"Publish Date"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Author is drill-sideways + drill-down: Lisa
comment|// (drill-down) published once, and Bob
comment|// published once:
name|assertEquals
argument_list|(
literal|"dim=Author path=[] value=2 childCount=2\n  Bob (1)\n  Lisa (1)\n"
argument_list|,
name|r
operator|.
name|facets
operator|.
name|getTopChildren
argument_list|(
literal|10
argument_list|,
literal|"Author"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|close
argument_list|(
name|searcher
operator|.
name|getIndexReader
argument_list|()
argument_list|,
name|taxoReader
argument_list|,
name|writer
argument_list|,
name|taxoWriter
argument_list|,
name|dir
argument_list|,
name|taxoDir
argument_list|)
expr_stmt|;
block|}
DECL|method|testMultipleRequestsPerDim
specifier|public
name|void
name|testMultipleRequestsPerDim
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|Directory
name|taxoDir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|RandomIndexWriter
name|writer
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|)
decl_stmt|;
comment|// Writes facet ords to a separate directory from the
comment|// main index:
name|DirectoryTaxonomyWriter
name|taxoWriter
init|=
operator|new
name|DirectoryTaxonomyWriter
argument_list|(
name|taxoDir
argument_list|,
name|IndexWriterConfig
operator|.
name|OpenMode
operator|.
name|CREATE
argument_list|)
decl_stmt|;
name|FacetsConfig
name|config
init|=
operator|new
name|FacetsConfig
argument_list|()
decl_stmt|;
name|config
operator|.
name|setHierarchical
argument_list|(
literal|"dim"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|FacetField
argument_list|(
literal|"dim"
argument_list|,
literal|"a"
argument_list|,
literal|"x"
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|config
operator|.
name|build
argument_list|(
name|taxoWriter
argument_list|,
name|doc
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|FacetField
argument_list|(
literal|"dim"
argument_list|,
literal|"a"
argument_list|,
literal|"y"
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|config
operator|.
name|build
argument_list|(
name|taxoWriter
argument_list|,
name|doc
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|FacetField
argument_list|(
literal|"dim"
argument_list|,
literal|"a"
argument_list|,
literal|"z"
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|config
operator|.
name|build
argument_list|(
name|taxoWriter
argument_list|,
name|doc
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|FacetField
argument_list|(
literal|"dim"
argument_list|,
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|config
operator|.
name|build
argument_list|(
name|taxoWriter
argument_list|,
name|doc
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|FacetField
argument_list|(
literal|"dim"
argument_list|,
literal|"c"
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|config
operator|.
name|build
argument_list|(
name|taxoWriter
argument_list|,
name|doc
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|FacetField
argument_list|(
literal|"dim"
argument_list|,
literal|"d"
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|config
operator|.
name|build
argument_list|(
name|taxoWriter
argument_list|,
name|doc
argument_list|)
argument_list|)
expr_stmt|;
comment|// NRT open
name|IndexSearcher
name|searcher
init|=
name|newSearcher
argument_list|(
name|writer
operator|.
name|getReader
argument_list|()
argument_list|)
decl_stmt|;
comment|//System.out.println("searcher=" + searcher);
comment|// NRT open
name|TaxonomyReader
name|taxoReader
init|=
operator|new
name|DirectoryTaxonomyReader
argument_list|(
name|taxoWriter
argument_list|)
decl_stmt|;
name|DrillDownQuery
name|ddq
init|=
operator|new
name|DrillDownQuery
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|ddq
operator|.
name|add
argument_list|(
literal|"dim"
argument_list|,
literal|"a"
argument_list|)
expr_stmt|;
name|DrillSidewaysResult
name|r
init|=
operator|new
name|DrillSideways
argument_list|(
name|searcher
argument_list|,
name|config
argument_list|,
name|taxoReader
argument_list|)
operator|.
name|search
argument_list|(
literal|null
argument_list|,
name|ddq
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|r
operator|.
name|hits
operator|.
name|totalHits
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"dim=dim path=[] value=6 childCount=4\n  a (3)\n  b (1)\n  c (1)\n  d (1)\n"
argument_list|,
name|r
operator|.
name|facets
operator|.
name|getTopChildren
argument_list|(
literal|10
argument_list|,
literal|"dim"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"dim=dim path=[a] value=3 childCount=3\n  x (1)\n  y (1)\n  z (1)\n"
argument_list|,
name|r
operator|.
name|facets
operator|.
name|getTopChildren
argument_list|(
literal|10
argument_list|,
literal|"dim"
argument_list|,
literal|"a"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|close
argument_list|(
name|searcher
operator|.
name|getIndexReader
argument_list|()
argument_list|,
name|taxoReader
argument_list|,
name|writer
argument_list|,
name|taxoWriter
argument_list|,
name|dir
argument_list|,
name|taxoDir
argument_list|)
expr_stmt|;
block|}
DECL|class|Doc
specifier|private
specifier|static
class|class
name|Doc
implements|implements
name|Comparable
argument_list|<
name|Doc
argument_list|>
block|{
DECL|field|id
name|String
name|id
decl_stmt|;
DECL|field|contentToken
name|String
name|contentToken
decl_stmt|;
DECL|method|Doc
specifier|public
name|Doc
parameter_list|()
block|{}
comment|// -1 if the doc is missing this dim, else the index
comment|// -into the values for this dim:
DECL|field|dims
name|int
index|[]
name|dims
decl_stmt|;
comment|// 2nd value per dim for the doc (so we test
comment|// multi-valued fields):
DECL|field|dims2
name|int
index|[]
name|dims2
decl_stmt|;
DECL|field|deleted
name|boolean
name|deleted
decl_stmt|;
annotation|@
name|Override
DECL|method|compareTo
specifier|public
name|int
name|compareTo
parameter_list|(
name|Doc
name|other
parameter_list|)
block|{
return|return
name|id
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|id
argument_list|)
return|;
block|}
block|}
DECL|field|aChance
DECL|field|bChance
DECL|field|cChance
specifier|private
name|double
name|aChance
decl_stmt|,
name|bChance
decl_stmt|,
name|cChance
decl_stmt|;
DECL|method|randomContentToken
specifier|private
name|String
name|randomContentToken
parameter_list|(
name|boolean
name|isQuery
parameter_list|)
block|{
name|double
name|d
init|=
name|random
argument_list|()
operator|.
name|nextDouble
argument_list|()
decl_stmt|;
if|if
condition|(
name|isQuery
condition|)
block|{
if|if
condition|(
name|d
operator|<
literal|0.33
condition|)
block|{
return|return
literal|"a"
return|;
block|}
elseif|else
if|if
condition|(
name|d
operator|<
literal|0.66
condition|)
block|{
return|return
literal|"b"
return|;
block|}
else|else
block|{
return|return
literal|"c"
return|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|d
operator|<=
name|aChance
condition|)
block|{
return|return
literal|"a"
return|;
block|}
elseif|else
if|if
condition|(
name|d
operator|<
name|aChance
operator|+
name|bChance
condition|)
block|{
return|return
literal|"b"
return|;
block|}
else|else
block|{
return|return
literal|"c"
return|;
block|}
block|}
block|}
DECL|method|testRandom
specifier|public
name|void
name|testRandom
parameter_list|()
throws|throws
name|Exception
block|{
name|boolean
name|canUseDV
init|=
name|defaultCodecSupportsSortedSet
argument_list|()
decl_stmt|;
while|while
condition|(
name|aChance
operator|==
literal|0.0
condition|)
block|{
name|aChance
operator|=
name|random
argument_list|()
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
while|while
condition|(
name|bChance
operator|==
literal|0.0
condition|)
block|{
name|bChance
operator|=
name|random
argument_list|()
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
while|while
condition|(
name|cChance
operator|==
literal|0.0
condition|)
block|{
name|cChance
operator|=
name|random
argument_list|()
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
comment|//aChance = .01;
comment|//bChance = 0.5;
comment|//cChance = 1.0;
name|double
name|sum
init|=
name|aChance
operator|+
name|bChance
operator|+
name|cChance
decl_stmt|;
name|aChance
operator|/=
name|sum
expr_stmt|;
name|bChance
operator|/=
name|sum
expr_stmt|;
name|cChance
operator|/=
name|sum
expr_stmt|;
name|int
name|numDims
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|2
argument_list|,
literal|5
argument_list|)
decl_stmt|;
comment|//int numDims = 3;
name|int
name|numDocs
init|=
name|atLeast
argument_list|(
literal|3000
argument_list|)
decl_stmt|;
comment|//int numDocs = 20;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"numDims="
operator|+
name|numDims
operator|+
literal|" numDocs="
operator|+
name|numDocs
operator|+
literal|" aChance="
operator|+
name|aChance
operator|+
literal|" bChance="
operator|+
name|bChance
operator|+
literal|" cChance="
operator|+
name|cChance
argument_list|)
expr_stmt|;
block|}
name|String
index|[]
index|[]
name|dimValues
init|=
operator|new
name|String
index|[
name|numDims
index|]
index|[]
decl_stmt|;
name|int
name|valueCount
init|=
literal|2
decl_stmt|;
for|for
control|(
name|int
name|dim
init|=
literal|0
init|;
name|dim
operator|<
name|numDims
condition|;
name|dim
operator|++
control|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|values
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
while|while
condition|(
name|values
operator|.
name|size
argument_list|()
operator|<
name|valueCount
condition|)
block|{
name|String
name|s
init|=
name|TestUtil
operator|.
name|randomRealisticUnicodeString
argument_list|(
name|random
argument_list|()
argument_list|)
decl_stmt|;
comment|//String s = _TestUtil.randomString(random());
if|if
condition|(
name|s
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|values
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
name|dimValues
index|[
name|dim
index|]
operator|=
name|values
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|values
operator|.
name|size
argument_list|()
index|]
argument_list|)
expr_stmt|;
name|valueCount
operator|*=
literal|2
expr_stmt|;
block|}
name|List
argument_list|<
name|Doc
argument_list|>
name|docs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
name|i
operator|++
control|)
block|{
name|Doc
name|doc
init|=
operator|new
name|Doc
argument_list|()
decl_stmt|;
name|doc
operator|.
name|id
operator|=
literal|""
operator|+
name|i
expr_stmt|;
name|doc
operator|.
name|contentToken
operator|=
name|randomContentToken
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|doc
operator|.
name|dims
operator|=
operator|new
name|int
index|[
name|numDims
index|]
expr_stmt|;
name|doc
operator|.
name|dims2
operator|=
operator|new
name|int
index|[
name|numDims
index|]
expr_stmt|;
for|for
control|(
name|int
name|dim
init|=
literal|0
init|;
name|dim
operator|<
name|numDims
condition|;
name|dim
operator|++
control|)
block|{
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|5
argument_list|)
operator|==
literal|3
condition|)
block|{
comment|// This doc is missing this dim:
name|doc
operator|.
name|dims
index|[
name|dim
index|]
operator|=
operator|-
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|dimValues
index|[
name|dim
index|]
operator|.
name|length
operator|<=
literal|4
condition|)
block|{
name|int
name|dimUpto
init|=
literal|0
decl_stmt|;
name|doc
operator|.
name|dims
index|[
name|dim
index|]
operator|=
name|dimValues
index|[
name|dim
index|]
operator|.
name|length
operator|-
literal|1
expr_stmt|;
while|while
condition|(
name|dimUpto
operator|<
name|dimValues
index|[
name|dim
index|]
operator|.
name|length
condition|)
block|{
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|doc
operator|.
name|dims
index|[
name|dim
index|]
operator|=
name|dimUpto
expr_stmt|;
break|break;
block|}
name|dimUpto
operator|++
expr_stmt|;
block|}
block|}
else|else
block|{
name|doc
operator|.
name|dims
index|[
name|dim
index|]
operator|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|dimValues
index|[
name|dim
index|]
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|5
argument_list|)
operator|==
literal|3
condition|)
block|{
comment|// 2nd value:
name|doc
operator|.
name|dims2
index|[
name|dim
index|]
operator|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|dimValues
index|[
name|dim
index|]
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|doc
operator|.
name|dims2
index|[
name|dim
index|]
operator|=
operator|-
literal|1
expr_stmt|;
block|}
block|}
name|docs
operator|.
name|add
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
name|Directory
name|d
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|Directory
name|td
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriterConfig
name|iwc
init|=
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|iwc
operator|.
name|setInfoStream
argument_list|(
name|InfoStream
operator|.
name|NO_OUTPUT
argument_list|)
expr_stmt|;
name|RandomIndexWriter
name|w
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|d
argument_list|,
name|iwc
argument_list|)
decl_stmt|;
name|DirectoryTaxonomyWriter
name|tw
init|=
operator|new
name|DirectoryTaxonomyWriter
argument_list|(
name|td
argument_list|,
name|IndexWriterConfig
operator|.
name|OpenMode
operator|.
name|CREATE
argument_list|)
decl_stmt|;
name|FacetsConfig
name|config
init|=
operator|new
name|FacetsConfig
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDims
condition|;
name|i
operator|++
control|)
block|{
name|config
operator|.
name|setMultiValued
argument_list|(
literal|"dim"
operator|+
name|i
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|boolean
name|doUseDV
init|=
name|canUseDV
operator|&&
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
decl_stmt|;
for|for
control|(
name|Doc
name|rawDoc
range|:
name|docs
control|)
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newStringField
argument_list|(
literal|"id"
argument_list|,
name|rawDoc
operator|.
name|id
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newStringField
argument_list|(
literal|"content"
argument_list|,
name|rawDoc
operator|.
name|contentToken
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  doc id="
operator|+
name|rawDoc
operator|.
name|id
operator|+
literal|" token="
operator|+
name|rawDoc
operator|.
name|contentToken
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|dim
init|=
literal|0
init|;
name|dim
operator|<
name|numDims
condition|;
name|dim
operator|++
control|)
block|{
name|int
name|dimValue
init|=
name|rawDoc
operator|.
name|dims
index|[
name|dim
index|]
decl_stmt|;
if|if
condition|(
name|dimValue
operator|!=
operator|-
literal|1
condition|)
block|{
if|if
condition|(
name|doUseDV
condition|)
block|{
name|doc
operator|.
name|add
argument_list|(
operator|new
name|SortedSetDocValuesFacetField
argument_list|(
literal|"dim"
operator|+
name|dim
argument_list|,
name|dimValues
index|[
name|dim
index|]
index|[
name|dimValue
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|doc
operator|.
name|add
argument_list|(
operator|new
name|FacetField
argument_list|(
literal|"dim"
operator|+
name|dim
argument_list|,
name|dimValues
index|[
name|dim
index|]
index|[
name|dimValue
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|doc
operator|.
name|add
argument_list|(
operator|new
name|StringField
argument_list|(
literal|"dim"
operator|+
name|dim
argument_list|,
name|dimValues
index|[
name|dim
index|]
index|[
name|dimValue
index|]
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"    dim"
operator|+
name|dim
operator|+
literal|"="
operator|+
operator|new
name|BytesRef
argument_list|(
name|dimValues
index|[
name|dim
index|]
index|[
name|dimValue
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|int
name|dimValue2
init|=
name|rawDoc
operator|.
name|dims2
index|[
name|dim
index|]
decl_stmt|;
if|if
condition|(
name|dimValue2
operator|!=
operator|-
literal|1
condition|)
block|{
if|if
condition|(
name|doUseDV
condition|)
block|{
name|doc
operator|.
name|add
argument_list|(
operator|new
name|SortedSetDocValuesFacetField
argument_list|(
literal|"dim"
operator|+
name|dim
argument_list|,
name|dimValues
index|[
name|dim
index|]
index|[
name|dimValue2
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|doc
operator|.
name|add
argument_list|(
operator|new
name|FacetField
argument_list|(
literal|"dim"
operator|+
name|dim
argument_list|,
name|dimValues
index|[
name|dim
index|]
index|[
name|dimValue2
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|doc
operator|.
name|add
argument_list|(
operator|new
name|StringField
argument_list|(
literal|"dim"
operator|+
name|dim
argument_list|,
name|dimValues
index|[
name|dim
index|]
index|[
name|dimValue2
index|]
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"      dim"
operator|+
name|dim
operator|+
literal|"="
operator|+
operator|new
name|BytesRef
argument_list|(
name|dimValues
index|[
name|dim
index|]
index|[
name|dimValue2
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|w
operator|.
name|addDocument
argument_list|(
name|config
operator|.
name|build
argument_list|(
name|tw
argument_list|,
name|doc
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
comment|// Randomly delete a few docs:
name|int
name|numDel
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
call|(
name|int
call|)
argument_list|(
name|numDocs
operator|*
literal|0.05
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"delete "
operator|+
name|numDel
argument_list|)
expr_stmt|;
block|}
name|int
name|delCount
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|delCount
operator|<
name|numDel
condition|)
block|{
name|Doc
name|doc
init|=
name|docs
operator|.
name|get
argument_list|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|docs
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|doc
operator|.
name|deleted
condition|)
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  delete id="
operator|+
name|doc
operator|.
name|id
argument_list|)
expr_stmt|;
block|}
name|doc
operator|.
name|deleted
operator|=
literal|true
expr_stmt|;
name|w
operator|.
name|deleteDocuments
argument_list|(
operator|new
name|Term
argument_list|(
literal|"id"
argument_list|,
name|doc
operator|.
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|delCount
operator|++
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TEST: forceMerge(1)..."
argument_list|)
expr_stmt|;
block|}
name|w
operator|.
name|forceMerge
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|IndexReader
name|r
init|=
name|w
operator|.
name|getReader
argument_list|()
decl_stmt|;
specifier|final
name|SortedSetDocValuesReaderState
name|sortedSetDVState
decl_stmt|;
name|IndexSearcher
name|s
init|=
name|newSearcher
argument_list|(
name|r
argument_list|)
decl_stmt|;
if|if
condition|(
name|doUseDV
condition|)
block|{
name|sortedSetDVState
operator|=
operator|new
name|DefaultSortedSetDocValuesReaderState
argument_list|(
name|s
operator|.
name|getIndexReader
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sortedSetDVState
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"r.numDocs() = "
operator|+
name|r
operator|.
name|numDocs
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// NRT open
name|TaxonomyReader
name|tr
init|=
operator|new
name|DirectoryTaxonomyReader
argument_list|(
name|tw
argument_list|)
decl_stmt|;
name|int
name|numIters
init|=
name|atLeast
argument_list|(
literal|10
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|iter
init|=
literal|0
init|;
name|iter
operator|<
name|numIters
condition|;
name|iter
operator|++
control|)
block|{
name|String
name|contentToken
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|30
argument_list|)
operator|==
literal|17
condition|?
literal|null
else|:
name|randomContentToken
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|int
name|numDrillDown
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
name|Math
operator|.
name|min
argument_list|(
literal|4
argument_list|,
name|numDims
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\nTEST: iter="
operator|+
name|iter
operator|+
literal|" baseQuery="
operator|+
name|contentToken
operator|+
literal|" numDrillDown="
operator|+
name|numDrillDown
operator|+
literal|" useSortedSetDV="
operator|+
name|doUseDV
argument_list|)
expr_stmt|;
block|}
name|String
index|[]
index|[]
name|drillDowns
init|=
operator|new
name|String
index|[
name|numDims
index|]
index|[]
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
name|boolean
name|anyMultiValuedDrillDowns
init|=
literal|false
decl_stmt|;
while|while
condition|(
name|count
operator|<
name|numDrillDown
condition|)
block|{
name|int
name|dim
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|numDims
argument_list|)
decl_stmt|;
if|if
condition|(
name|drillDowns
index|[
name|dim
index|]
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
comment|// Drill down on one value:
name|drillDowns
index|[
name|dim
index|]
operator|=
operator|new
name|String
index|[]
block|{
name|dimValues
index|[
name|dim
index|]
index|[
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|dimValues
index|[
name|dim
index|]
operator|.
name|length
argument_list|)
index|]
block|}
expr_stmt|;
block|}
else|else
block|{
name|int
name|orCount
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
name|Math
operator|.
name|min
argument_list|(
literal|5
argument_list|,
name|dimValues
index|[
name|dim
index|]
operator|.
name|length
argument_list|)
argument_list|)
decl_stmt|;
name|drillDowns
index|[
name|dim
index|]
operator|=
operator|new
name|String
index|[
name|orCount
index|]
expr_stmt|;
name|anyMultiValuedDrillDowns
operator||=
name|orCount
operator|>
literal|1
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|orCount
condition|;
name|i
operator|++
control|)
block|{
while|while
condition|(
literal|true
condition|)
block|{
name|String
name|value
init|=
name|dimValues
index|[
name|dim
index|]
index|[
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|dimValues
index|[
name|dim
index|]
operator|.
name|length
argument_list|)
index|]
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|i
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|value
operator|.
name|equals
argument_list|(
name|drillDowns
index|[
name|dim
index|]
index|[
name|j
index|]
argument_list|)
condition|)
block|{
name|value
operator|=
literal|null
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|drillDowns
index|[
name|dim
index|]
index|[
name|i
index|]
operator|=
name|value
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|BytesRef
index|[]
name|values
init|=
operator|new
name|BytesRef
index|[
name|drillDowns
index|[
name|dim
index|]
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|values
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|values
index|[
name|i
index|]
operator|=
operator|new
name|BytesRef
argument_list|(
name|drillDowns
index|[
name|dim
index|]
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  dim"
operator|+
name|dim
operator|+
literal|"="
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|values
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|count
operator|++
expr_stmt|;
block|}
block|}
name|Query
name|baseQuery
decl_stmt|;
if|if
condition|(
name|contentToken
operator|==
literal|null
condition|)
block|{
name|baseQuery
operator|=
operator|new
name|MatchAllDocsQuery
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|baseQuery
operator|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"content"
argument_list|,
name|contentToken
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|DrillDownQuery
name|ddq
init|=
operator|new
name|DrillDownQuery
argument_list|(
name|config
argument_list|,
name|baseQuery
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|dim
init|=
literal|0
init|;
name|dim
operator|<
name|numDims
condition|;
name|dim
operator|++
control|)
block|{
if|if
condition|(
name|drillDowns
index|[
name|dim
index|]
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|value
range|:
name|drillDowns
index|[
name|dim
index|]
control|)
block|{
name|ddq
operator|.
name|add
argument_list|(
literal|"dim"
operator|+
name|dim
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|Filter
name|filter
decl_stmt|;
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|7
argument_list|)
operator|==
literal|6
condition|)
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  only-even filter"
argument_list|)
expr_stmt|;
block|}
name|filter
operator|=
operator|new
name|Filter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|DocIdSet
name|getDocIdSet
parameter_list|(
name|AtomicReaderContext
name|context
parameter_list|,
name|Bits
name|acceptDocs
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|maxDoc
init|=
name|context
operator|.
name|reader
argument_list|()
operator|.
name|maxDoc
argument_list|()
decl_stmt|;
specifier|final
name|FixedBitSet
name|bits
init|=
operator|new
name|FixedBitSet
argument_list|(
name|maxDoc
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|docID
init|=
literal|0
init|;
name|docID
operator|<
name|maxDoc
condition|;
name|docID
operator|++
control|)
block|{
comment|// Keeps only the even ids:
if|if
condition|(
operator|(
name|acceptDocs
operator|==
literal|null
operator|||
name|acceptDocs
operator|.
name|get
argument_list|(
name|docID
argument_list|)
operator|)
operator|&&
operator|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|context
operator|.
name|reader
argument_list|()
operator|.
name|document
argument_list|(
name|docID
argument_list|)
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
argument_list|)
operator|&
literal|1
operator|)
operator|==
literal|0
condition|)
block|{
name|bits
operator|.
name|set
argument_list|(
name|docID
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|bits
return|;
block|}
block|}
expr_stmt|;
block|}
else|else
block|{
name|filter
operator|=
literal|null
expr_stmt|;
block|}
comment|// Verify docs are always collected in order.  If we
comment|// had an AssertingScorer it could catch it when
comment|// Weight.scoresDocsOutOfOrder lies!:
operator|new
name|DrillSideways
argument_list|(
name|s
argument_list|,
name|config
argument_list|,
name|tr
argument_list|)
operator|.
name|search
argument_list|(
name|ddq
argument_list|,
operator|new
name|SimpleCollector
argument_list|()
block|{
name|int
name|lastDocID
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|collect
parameter_list|(
name|int
name|doc
parameter_list|)
block|{
assert|assert
name|doc
operator|>
name|lastDocID
assert|;
name|lastDocID
operator|=
name|doc
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|doSetNextReader
parameter_list|(
name|AtomicReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|lastDocID
operator|=
operator|-
literal|1
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|acceptsDocsOutOfOrder
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// Also separately verify that DS respects the
comment|// scoreSubDocsAtOnce method, to ensure that all
comment|// subScorers are on the same docID:
if|if
condition|(
operator|!
name|anyMultiValuedDrillDowns
condition|)
block|{
comment|// Can only do this test when there are no OR'd
comment|// drill-down values, because in that case it's
comment|// easily possible for one of the DD terms to be on
comment|// a future docID:
operator|new
name|DrillSideways
argument_list|(
name|s
argument_list|,
name|config
argument_list|,
name|tr
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|boolean
name|scoreSubDocsAtOnce
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
block|}
operator|.
name|search
argument_list|(
name|ddq
argument_list|,
operator|new
name|AssertingSubDocsAtOnceCollector
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|TestFacetResult
name|expected
init|=
name|slowDrillSidewaysSearch
argument_list|(
name|s
argument_list|,
name|docs
argument_list|,
name|contentToken
argument_list|,
name|drillDowns
argument_list|,
name|dimValues
argument_list|,
name|filter
argument_list|)
decl_stmt|;
name|Sort
name|sort
init|=
operator|new
name|Sort
argument_list|(
operator|new
name|SortField
argument_list|(
literal|"id"
argument_list|,
name|SortField
operator|.
name|Type
operator|.
name|STRING
argument_list|)
argument_list|)
decl_stmt|;
name|DrillSideways
name|ds
decl_stmt|;
if|if
condition|(
name|doUseDV
condition|)
block|{
name|ds
operator|=
operator|new
name|DrillSideways
argument_list|(
name|s
argument_list|,
name|config
argument_list|,
name|sortedSetDVState
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ds
operator|=
operator|new
name|DrillSideways
argument_list|(
name|s
argument_list|,
name|config
argument_list|,
name|tr
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|Facets
name|buildFacetsResult
parameter_list|(
name|FacetsCollector
name|drillDowns
parameter_list|,
name|FacetsCollector
index|[]
name|drillSideways
parameter_list|,
name|String
index|[]
name|drillSidewaysDims
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Facets
argument_list|>
name|drillSidewaysFacets
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Facets
name|drillDownFacets
init|=
name|getTaxonomyFacetCounts
argument_list|(
name|taxoReader
argument_list|,
name|config
argument_list|,
name|drillDowns
argument_list|)
decl_stmt|;
if|if
condition|(
name|drillSideways
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|drillSideways
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|drillSidewaysFacets
operator|.
name|put
argument_list|(
name|drillSidewaysDims
index|[
name|i
index|]
argument_list|,
name|getTaxonomyFacetCounts
argument_list|(
name|taxoReader
argument_list|,
name|config
argument_list|,
name|drillSideways
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|drillSidewaysFacets
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|drillDownFacets
return|;
block|}
else|else
block|{
return|return
operator|new
name|MultiFacets
argument_list|(
name|drillSidewaysFacets
argument_list|,
name|drillDownFacets
argument_list|)
return|;
block|}
block|}
block|}
expr_stmt|;
block|}
comment|// Retrieve all facets:
name|DrillSidewaysResult
name|actual
init|=
name|ds
operator|.
name|search
argument_list|(
name|ddq
argument_list|,
name|filter
argument_list|,
literal|null
argument_list|,
name|numDocs
argument_list|,
name|sort
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|TopDocs
name|hits
init|=
name|s
operator|.
name|search
argument_list|(
name|baseQuery
argument_list|,
name|numDocs
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Float
argument_list|>
name|scores
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|ScoreDoc
name|sd
range|:
name|hits
operator|.
name|scoreDocs
control|)
block|{
name|scores
operator|.
name|put
argument_list|(
name|s
operator|.
name|doc
argument_list|(
name|sd
operator|.
name|doc
argument_list|)
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
argument_list|,
name|sd
operator|.
name|score
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  verify all facets"
argument_list|)
expr_stmt|;
block|}
name|verifyEquals
argument_list|(
name|dimValues
argument_list|,
name|s
argument_list|,
name|expected
argument_list|,
name|actual
argument_list|,
name|scores
argument_list|,
name|doUseDV
argument_list|)
expr_stmt|;
comment|// Make sure drill down doesn't change score:
name|TopDocs
name|ddqHits
init|=
name|s
operator|.
name|search
argument_list|(
name|ddq
argument_list|,
name|filter
argument_list|,
name|numDocs
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|hits
operator|.
name|size
argument_list|()
argument_list|,
name|ddqHits
operator|.
name|totalHits
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expected
operator|.
name|hits
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
comment|// Score should be IDENTICAL:
name|assertEquals
argument_list|(
name|scores
operator|.
name|get
argument_list|(
name|expected
operator|.
name|hits
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|id
argument_list|)
argument_list|,
name|ddqHits
operator|.
name|scoreDocs
index|[
name|i
index|]
operator|.
name|score
argument_list|,
literal|0.0f
argument_list|)
expr_stmt|;
block|}
block|}
name|IOUtils
operator|.
name|close
argument_list|(
name|r
argument_list|,
name|tr
argument_list|,
name|w
argument_list|,
name|tw
argument_list|,
name|d
argument_list|,
name|td
argument_list|)
expr_stmt|;
block|}
DECL|class|Counters
specifier|private
specifier|static
class|class
name|Counters
block|{
DECL|field|counts
name|int
index|[]
index|[]
name|counts
decl_stmt|;
DECL|method|Counters
specifier|public
name|Counters
parameter_list|(
name|String
index|[]
index|[]
name|dimValues
parameter_list|)
block|{
name|counts
operator|=
operator|new
name|int
index|[
name|dimValues
operator|.
name|length
index|]
index|[]
expr_stmt|;
for|for
control|(
name|int
name|dim
init|=
literal|0
init|;
name|dim
operator|<
name|dimValues
operator|.
name|length
condition|;
name|dim
operator|++
control|)
block|{
name|counts
index|[
name|dim
index|]
operator|=
operator|new
name|int
index|[
name|dimValues
index|[
name|dim
index|]
operator|.
name|length
index|]
expr_stmt|;
block|}
block|}
DECL|method|inc
specifier|public
name|void
name|inc
parameter_list|(
name|int
index|[]
name|dims
parameter_list|,
name|int
index|[]
name|dims2
parameter_list|)
block|{
name|inc
argument_list|(
name|dims
argument_list|,
name|dims2
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|method|inc
specifier|public
name|void
name|inc
parameter_list|(
name|int
index|[]
name|dims
parameter_list|,
name|int
index|[]
name|dims2
parameter_list|,
name|int
name|onlyDim
parameter_list|)
block|{
assert|assert
name|dims
operator|.
name|length
operator|==
name|counts
operator|.
name|length
assert|;
assert|assert
name|dims2
operator|.
name|length
operator|==
name|counts
operator|.
name|length
assert|;
for|for
control|(
name|int
name|dim
init|=
literal|0
init|;
name|dim
operator|<
name|dims
operator|.
name|length
condition|;
name|dim
operator|++
control|)
block|{
if|if
condition|(
name|onlyDim
operator|==
operator|-
literal|1
operator|||
name|dim
operator|==
name|onlyDim
condition|)
block|{
if|if
condition|(
name|dims
index|[
name|dim
index|]
operator|!=
operator|-
literal|1
condition|)
block|{
name|counts
index|[
name|dim
index|]
index|[
name|dims
index|[
name|dim
index|]
index|]
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|dims2
index|[
name|dim
index|]
operator|!=
operator|-
literal|1
operator|&&
name|dims2
index|[
name|dim
index|]
operator|!=
name|dims
index|[
name|dim
index|]
condition|)
block|{
name|counts
index|[
name|dim
index|]
index|[
name|dims2
index|[
name|dim
index|]
index|]
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
DECL|class|TestFacetResult
specifier|private
specifier|static
class|class
name|TestFacetResult
block|{
DECL|field|hits
name|List
argument_list|<
name|Doc
argument_list|>
name|hits
decl_stmt|;
DECL|field|counts
name|int
index|[]
index|[]
name|counts
decl_stmt|;
DECL|field|uniqueCounts
name|int
index|[]
name|uniqueCounts
decl_stmt|;
DECL|method|TestFacetResult
specifier|public
name|TestFacetResult
parameter_list|()
block|{}
block|}
DECL|method|getTopNOrds
specifier|private
name|int
index|[]
name|getTopNOrds
parameter_list|(
specifier|final
name|int
index|[]
name|counts
parameter_list|,
specifier|final
name|String
index|[]
name|values
parameter_list|,
name|int
name|topN
parameter_list|)
block|{
specifier|final
name|int
index|[]
name|ids
init|=
operator|new
name|int
index|[
name|counts
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ids
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|ids
index|[
name|i
index|]
operator|=
name|i
expr_stmt|;
block|}
comment|// Naive (on purpose, to reduce bug in tester/gold):
comment|// sort all ids, then return top N slice:
operator|new
name|InPlaceMergeSorter
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|void
name|swap
parameter_list|(
name|int
name|i
parameter_list|,
name|int
name|j
parameter_list|)
block|{
name|int
name|id
init|=
name|ids
index|[
name|i
index|]
decl_stmt|;
name|ids
index|[
name|i
index|]
operator|=
name|ids
index|[
name|j
index|]
expr_stmt|;
name|ids
index|[
name|j
index|]
operator|=
name|id
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|int
name|compare
parameter_list|(
name|int
name|i
parameter_list|,
name|int
name|j
parameter_list|)
block|{
name|int
name|counti
init|=
name|counts
index|[
name|ids
index|[
name|i
index|]
index|]
decl_stmt|;
name|int
name|countj
init|=
name|counts
index|[
name|ids
index|[
name|j
index|]
index|]
decl_stmt|;
comment|// Sort by count descending...
if|if
condition|(
name|counti
operator|>
name|countj
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
elseif|else
if|if
condition|(
name|counti
operator|<
name|countj
condition|)
block|{
return|return
literal|1
return|;
block|}
else|else
block|{
comment|// ... then by label ascending:
return|return
operator|new
name|BytesRef
argument_list|(
name|values
index|[
name|ids
index|[
name|i
index|]
index|]
argument_list|)
operator|.
name|compareTo
argument_list|(
operator|new
name|BytesRef
argument_list|(
name|values
index|[
name|ids
index|[
name|j
index|]
index|]
argument_list|)
argument_list|)
return|;
block|}
block|}
block|}
operator|.
name|sort
argument_list|(
literal|0
argument_list|,
name|ids
operator|.
name|length
argument_list|)
expr_stmt|;
if|if
condition|(
name|topN
operator|>
name|ids
operator|.
name|length
condition|)
block|{
name|topN
operator|=
name|ids
operator|.
name|length
expr_stmt|;
block|}
name|int
name|numSet
init|=
name|topN
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|topN
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|counts
index|[
name|ids
index|[
name|i
index|]
index|]
operator|==
literal|0
condition|)
block|{
name|numSet
operator|=
name|i
expr_stmt|;
break|break;
block|}
block|}
name|int
index|[]
name|topNIDs
init|=
operator|new
name|int
index|[
name|numSet
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|ids
argument_list|,
literal|0
argument_list|,
name|topNIDs
argument_list|,
literal|0
argument_list|,
name|topNIDs
operator|.
name|length
argument_list|)
expr_stmt|;
return|return
name|topNIDs
return|;
block|}
DECL|method|slowDrillSidewaysSearch
specifier|private
name|TestFacetResult
name|slowDrillSidewaysSearch
parameter_list|(
name|IndexSearcher
name|s
parameter_list|,
name|List
argument_list|<
name|Doc
argument_list|>
name|docs
parameter_list|,
name|String
name|contentToken
parameter_list|,
name|String
index|[]
index|[]
name|drillDowns
parameter_list|,
name|String
index|[]
index|[]
name|dimValues
parameter_list|,
name|Filter
name|onlyEven
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|numDims
init|=
name|dimValues
operator|.
name|length
decl_stmt|;
name|List
argument_list|<
name|Doc
argument_list|>
name|hits
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Counters
name|drillDownCounts
init|=
operator|new
name|Counters
argument_list|(
name|dimValues
argument_list|)
decl_stmt|;
name|Counters
index|[]
name|drillSidewaysCounts
init|=
operator|new
name|Counters
index|[
name|dimValues
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|dim
init|=
literal|0
init|;
name|dim
operator|<
name|numDims
condition|;
name|dim
operator|++
control|)
block|{
name|drillSidewaysCounts
index|[
name|dim
index|]
operator|=
operator|new
name|Counters
argument_list|(
name|dimValues
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  compute expected"
argument_list|)
expr_stmt|;
block|}
name|nextDoc
label|:
for|for
control|(
name|Doc
name|doc
range|:
name|docs
control|)
block|{
if|if
condition|(
name|doc
operator|.
name|deleted
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|onlyEven
operator|!=
literal|null
operator|&
operator|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|doc
operator|.
name|id
argument_list|)
operator|&
literal|1
operator|)
operator|!=
literal|0
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|contentToken
operator|==
literal|null
operator|||
name|doc
operator|.
name|contentToken
operator|.
name|equals
argument_list|(
name|contentToken
argument_list|)
condition|)
block|{
name|int
name|failDim
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|int
name|dim
init|=
literal|0
init|;
name|dim
operator|<
name|numDims
condition|;
name|dim
operator|++
control|)
block|{
if|if
condition|(
name|drillDowns
index|[
name|dim
index|]
operator|!=
literal|null
condition|)
block|{
name|String
name|docValue
init|=
name|doc
operator|.
name|dims
index|[
name|dim
index|]
operator|==
operator|-
literal|1
condition|?
literal|null
else|:
name|dimValues
index|[
name|dim
index|]
index|[
name|doc
operator|.
name|dims
index|[
name|dim
index|]
index|]
decl_stmt|;
name|String
name|docValue2
init|=
name|doc
operator|.
name|dims2
index|[
name|dim
index|]
operator|==
operator|-
literal|1
condition|?
literal|null
else|:
name|dimValues
index|[
name|dim
index|]
index|[
name|doc
operator|.
name|dims2
index|[
name|dim
index|]
index|]
decl_stmt|;
name|boolean
name|matches
init|=
literal|false
decl_stmt|;
for|for
control|(
name|String
name|value
range|:
name|drillDowns
index|[
name|dim
index|]
control|)
block|{
if|if
condition|(
name|value
operator|.
name|equals
argument_list|(
name|docValue
argument_list|)
operator|||
name|value
operator|.
name|equals
argument_list|(
name|docValue2
argument_list|)
condition|)
block|{
name|matches
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|matches
condition|)
block|{
if|if
condition|(
name|failDim
operator|==
operator|-
literal|1
condition|)
block|{
comment|// Doc could be a near-miss, if no other dim fails
name|failDim
operator|=
name|dim
expr_stmt|;
block|}
else|else
block|{
comment|// Doc isn't a hit nor a near-miss
continue|continue
name|nextDoc
continue|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|failDim
operator|==
operator|-
literal|1
condition|)
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"    exp: id="
operator|+
name|doc
operator|.
name|id
operator|+
literal|" is a hit"
argument_list|)
expr_stmt|;
block|}
comment|// Hit:
name|hits
operator|.
name|add
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|drillDownCounts
operator|.
name|inc
argument_list|(
name|doc
operator|.
name|dims
argument_list|,
name|doc
operator|.
name|dims2
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|dim
init|=
literal|0
init|;
name|dim
operator|<
name|dimValues
operator|.
name|length
condition|;
name|dim
operator|++
control|)
block|{
name|drillSidewaysCounts
index|[
name|dim
index|]
operator|.
name|inc
argument_list|(
name|doc
operator|.
name|dims
argument_list|,
name|doc
operator|.
name|dims2
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"    exp: id="
operator|+
name|doc
operator|.
name|id
operator|+
literal|" is a near-miss on dim="
operator|+
name|failDim
argument_list|)
expr_stmt|;
block|}
name|drillSidewaysCounts
index|[
name|failDim
index|]
operator|.
name|inc
argument_list|(
name|doc
operator|.
name|dims
argument_list|,
name|doc
operator|.
name|dims2
argument_list|,
name|failDim
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|idToDocID
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|s
operator|.
name|getIndexReader
argument_list|()
operator|.
name|maxDoc
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|idToDocID
operator|.
name|put
argument_list|(
name|s
operator|.
name|doc
argument_list|(
name|i
argument_list|)
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|hits
argument_list|)
expr_stmt|;
name|TestFacetResult
name|res
init|=
operator|new
name|TestFacetResult
argument_list|()
decl_stmt|;
name|res
operator|.
name|hits
operator|=
name|hits
expr_stmt|;
name|res
operator|.
name|counts
operator|=
operator|new
name|int
index|[
name|numDims
index|]
index|[]
expr_stmt|;
name|res
operator|.
name|uniqueCounts
operator|=
operator|new
name|int
index|[
name|numDims
index|]
expr_stmt|;
for|for
control|(
name|int
name|dim
init|=
literal|0
init|;
name|dim
operator|<
name|numDims
condition|;
name|dim
operator|++
control|)
block|{
if|if
condition|(
name|drillDowns
index|[
name|dim
index|]
operator|!=
literal|null
condition|)
block|{
name|res
operator|.
name|counts
index|[
name|dim
index|]
operator|=
name|drillSidewaysCounts
index|[
name|dim
index|]
operator|.
name|counts
index|[
name|dim
index|]
expr_stmt|;
block|}
else|else
block|{
name|res
operator|.
name|counts
index|[
name|dim
index|]
operator|=
name|drillDownCounts
operator|.
name|counts
index|[
name|dim
index|]
expr_stmt|;
block|}
name|int
name|uniqueCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|res
operator|.
name|counts
index|[
name|dim
index|]
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|res
operator|.
name|counts
index|[
name|dim
index|]
index|[
name|j
index|]
operator|!=
literal|0
condition|)
block|{
name|uniqueCount
operator|++
expr_stmt|;
block|}
block|}
name|res
operator|.
name|uniqueCounts
index|[
name|dim
index|]
operator|=
name|uniqueCount
expr_stmt|;
block|}
return|return
name|res
return|;
block|}
DECL|method|verifyEquals
name|void
name|verifyEquals
parameter_list|(
name|String
index|[]
index|[]
name|dimValues
parameter_list|,
name|IndexSearcher
name|s
parameter_list|,
name|TestFacetResult
name|expected
parameter_list|,
name|DrillSidewaysResult
name|actual
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Float
argument_list|>
name|scores
parameter_list|,
name|boolean
name|isSortedSetDV
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  verify totHits="
operator|+
name|expected
operator|.
name|hits
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|expected
operator|.
name|hits
operator|.
name|size
argument_list|()
argument_list|,
name|actual
operator|.
name|hits
operator|.
name|totalHits
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|hits
operator|.
name|size
argument_list|()
argument_list|,
name|actual
operator|.
name|hits
operator|.
name|scoreDocs
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expected
operator|.
name|hits
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"    hit "
operator|+
name|i
operator|+
literal|" expected="
operator|+
name|expected
operator|.
name|hits
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|id
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|expected
operator|.
name|hits
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|id
argument_list|,
name|s
operator|.
name|doc
argument_list|(
name|actual
operator|.
name|hits
operator|.
name|scoreDocs
index|[
name|i
index|]
operator|.
name|doc
argument_list|)
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Score should be IDENTICAL:
name|assertEquals
argument_list|(
name|scores
operator|.
name|get
argument_list|(
name|expected
operator|.
name|hits
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|id
argument_list|)
argument_list|,
name|actual
operator|.
name|hits
operator|.
name|scoreDocs
index|[
name|i
index|]
operator|.
name|score
argument_list|,
literal|0.0f
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|dim
init|=
literal|0
init|;
name|dim
operator|<
name|expected
operator|.
name|counts
operator|.
name|length
condition|;
name|dim
operator|++
control|)
block|{
name|int
name|topN
init|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
name|dimValues
index|[
name|dim
index|]
operator|.
name|length
else|:
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
name|dimValues
index|[
name|dim
index|]
operator|.
name|length
argument_list|)
decl_stmt|;
name|FacetResult
name|fr
init|=
name|actual
operator|.
name|facets
operator|.
name|getTopChildren
argument_list|(
name|topN
argument_list|,
literal|"dim"
operator|+
name|dim
argument_list|)
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"    dim"
operator|+
name|dim
operator|+
literal|" topN="
operator|+
name|topN
operator|+
literal|" (vs "
operator|+
name|dimValues
index|[
name|dim
index|]
operator|.
name|length
operator|+
literal|" unique values)"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"      actual"
argument_list|)
expr_stmt|;
block|}
name|int
name|idx
init|=
literal|0
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|actualValues
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|fr
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|LabelAndValue
name|labelValue
range|:
name|fr
operator|.
name|labelValues
control|)
block|{
name|actualValues
operator|.
name|put
argument_list|(
name|labelValue
operator|.
name|label
argument_list|,
name|labelValue
operator|.
name|value
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"        "
operator|+
name|idx
operator|+
literal|": "
operator|+
operator|new
name|BytesRef
argument_list|(
name|labelValue
operator|.
name|label
argument_list|)
operator|+
literal|": "
operator|+
name|labelValue
operator|.
name|value
argument_list|)
expr_stmt|;
name|idx
operator|++
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
literal|"dim="
operator|+
name|dim
argument_list|,
name|expected
operator|.
name|uniqueCounts
index|[
name|dim
index|]
argument_list|,
name|fr
operator|.
name|childCount
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|topN
operator|<
name|dimValues
index|[
name|dim
index|]
operator|.
name|length
condition|)
block|{
name|int
index|[]
name|topNIDs
init|=
name|getTopNOrds
argument_list|(
name|expected
operator|.
name|counts
index|[
name|dim
index|]
argument_list|,
name|dimValues
index|[
name|dim
index|]
argument_list|,
name|topN
argument_list|)
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|idx
operator|=
literal|0
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"      expected (sorted)"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|topNIDs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|int
name|expectedOrd
init|=
name|topNIDs
index|[
name|i
index|]
decl_stmt|;
name|String
name|value
init|=
name|dimValues
index|[
name|dim
index|]
index|[
name|expectedOrd
index|]
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"        "
operator|+
name|idx
operator|+
literal|": "
operator|+
operator|new
name|BytesRef
argument_list|(
name|value
argument_list|)
operator|+
literal|": "
operator|+
name|expected
operator|.
name|counts
index|[
name|dim
index|]
index|[
name|expectedOrd
index|]
argument_list|)
expr_stmt|;
name|idx
operator|++
expr_stmt|;
block|}
block|}
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"      topN="
operator|+
name|topN
operator|+
literal|" expectedTopN="
operator|+
name|topNIDs
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fr
operator|!=
literal|null
condition|)
block|{
name|assertEquals
argument_list|(
name|topNIDs
operator|.
name|length
argument_list|,
name|fr
operator|.
name|labelValues
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|topNIDs
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|topNIDs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|int
name|expectedOrd
init|=
name|topNIDs
index|[
name|i
index|]
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|counts
index|[
name|dim
index|]
index|[
name|expectedOrd
index|]
argument_list|,
name|fr
operator|.
name|labelValues
index|[
name|i
index|]
operator|.
name|value
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|isSortedSetDV
condition|)
block|{
comment|// Tie-break facet labels are only in unicode
comment|// order with SortedSetDVFacets:
name|assertEquals
argument_list|(
literal|"value @ idx="
operator|+
name|i
argument_list|,
name|dimValues
index|[
name|dim
index|]
index|[
name|expectedOrd
index|]
argument_list|,
name|fr
operator|.
name|labelValues
index|[
name|i
index|]
operator|.
name|label
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|idx
operator|=
literal|0
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"      expected (unsorted)"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dimValues
index|[
name|dim
index|]
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|value
init|=
name|dimValues
index|[
name|dim
index|]
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|expected
operator|.
name|counts
index|[
name|dim
index|]
index|[
name|i
index|]
operator|!=
literal|0
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"        "
operator|+
name|idx
operator|+
literal|": "
operator|+
operator|new
name|BytesRef
argument_list|(
name|value
argument_list|)
operator|+
literal|": "
operator|+
name|expected
operator|.
name|counts
index|[
name|dim
index|]
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|idx
operator|++
expr_stmt|;
block|}
block|}
block|}
name|int
name|setCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dimValues
index|[
name|dim
index|]
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|value
init|=
name|dimValues
index|[
name|dim
index|]
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|expected
operator|.
name|counts
index|[
name|dim
index|]
index|[
name|i
index|]
operator|!=
literal|0
condition|)
block|{
name|assertTrue
argument_list|(
name|actualValues
operator|.
name|containsKey
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|counts
index|[
name|dim
index|]
index|[
name|i
index|]
argument_list|,
name|actualValues
operator|.
name|get
argument_list|(
name|value
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|setCount
operator|++
expr_stmt|;
block|}
else|else
block|{
name|assertFalse
argument_list|(
name|actualValues
operator|.
name|containsKey
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
name|setCount
argument_list|,
name|actualValues
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testEmptyIndex
specifier|public
name|void
name|testEmptyIndex
parameter_list|()
throws|throws
name|Exception
block|{
comment|// LUCENE-5045: make sure DrillSideways works with an empty index
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|Directory
name|taxoDir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|RandomIndexWriter
name|writer
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|)
decl_stmt|;
name|DirectoryTaxonomyWriter
name|taxoWriter
init|=
operator|new
name|DirectoryTaxonomyWriter
argument_list|(
name|taxoDir
argument_list|,
name|IndexWriterConfig
operator|.
name|OpenMode
operator|.
name|CREATE
argument_list|)
decl_stmt|;
name|IndexSearcher
name|searcher
init|=
name|newSearcher
argument_list|(
name|writer
operator|.
name|getReader
argument_list|()
argument_list|)
decl_stmt|;
name|TaxonomyReader
name|taxoReader
init|=
operator|new
name|DirectoryTaxonomyReader
argument_list|(
name|taxoWriter
argument_list|)
decl_stmt|;
comment|// Count "Author"
name|FacetsConfig
name|config
init|=
operator|new
name|FacetsConfig
argument_list|()
decl_stmt|;
name|DrillSideways
name|ds
init|=
operator|new
name|DrillSideways
argument_list|(
name|searcher
argument_list|,
name|config
argument_list|,
name|taxoReader
argument_list|)
decl_stmt|;
name|DrillDownQuery
name|ddq
init|=
operator|new
name|DrillDownQuery
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|ddq
operator|.
name|add
argument_list|(
literal|"Author"
argument_list|,
literal|"Lisa"
argument_list|)
expr_stmt|;
name|DrillSidewaysResult
name|r
init|=
name|ds
operator|.
name|search
argument_list|(
name|ddq
argument_list|,
literal|10
argument_list|)
decl_stmt|;
comment|// this used to fail on IllegalArgEx
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|r
operator|.
name|hits
operator|.
name|totalHits
argument_list|)
expr_stmt|;
name|r
operator|=
name|ds
operator|.
name|search
argument_list|(
name|ddq
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|10
argument_list|,
operator|new
name|Sort
argument_list|(
operator|new
name|SortField
argument_list|(
literal|"foo"
argument_list|,
name|SortField
operator|.
name|Type
operator|.
name|INT
argument_list|)
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// this used to fail on IllegalArgEx
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|r
operator|.
name|hits
operator|.
name|totalHits
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|close
argument_list|(
name|writer
argument_list|,
name|taxoWriter
argument_list|,
name|searcher
operator|.
name|getIndexReader
argument_list|()
argument_list|,
name|taxoReader
argument_list|,
name|dir
argument_list|,
name|taxoDir
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
