begin_unit
begin_package
DECL|package|org.apache.lucene.facet.index.params
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|index
operator|.
name|params
package|;
end_package
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|search
operator|.
name|DrillDown
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|taxonomy
operator|.
name|CategoryPath
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|util
operator|.
name|PartitionsUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_class
DECL|class|PerDimensionIndexingParamsTest
specifier|public
class|class
name|PerDimensionIndexingParamsTest
extends|extends
name|LuceneTestCase
block|{
annotation|@
name|Test
DECL|method|testTopLevelSettings
specifier|public
name|void
name|testTopLevelSettings
parameter_list|()
block|{
name|FacetIndexingParams
name|ifip
init|=
operator|new
name|PerDimensionIndexingParams
argument_list|(
name|Collections
operator|.
expr|<
name|CategoryPath
argument_list|,
name|CategoryListParams
operator|>
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Missing default category list"
argument_list|,
name|ifip
operator|.
name|getAllCategoryListParams
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Expected default category list term is $facets:$fulltree$"
argument_list|,
operator|new
name|Term
argument_list|(
literal|"$facets"
argument_list|,
literal|"$fulltree$"
argument_list|)
argument_list|,
name|ifip
operator|.
name|getCategoryListParams
argument_list|(
literal|null
argument_list|)
operator|.
name|getTerm
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|expectedDDText
init|=
literal|"a"
operator|+
name|ifip
operator|.
name|getFacetDelimChar
argument_list|()
operator|+
literal|"b"
decl_stmt|;
name|CategoryPath
name|cp
init|=
operator|new
name|CategoryPath
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"wrong drill-down term"
argument_list|,
operator|new
name|Term
argument_list|(
literal|"$facets"
argument_list|,
name|expectedDDText
argument_list|)
argument_list|,
name|DrillDown
operator|.
name|term
argument_list|(
name|ifip
argument_list|,
name|cp
argument_list|)
argument_list|)
expr_stmt|;
name|char
index|[]
name|buf
init|=
operator|new
name|char
index|[
literal|20
index|]
decl_stmt|;
name|int
name|numchars
init|=
name|ifip
operator|.
name|drillDownTermText
argument_list|(
name|cp
argument_list|,
name|buf
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"3 characters should be written"
argument_list|,
literal|3
argument_list|,
name|numchars
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"wrong drill-down term text"
argument_list|,
name|expectedDDText
argument_list|,
operator|new
name|String
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|numchars
argument_list|)
argument_list|)
expr_stmt|;
name|CategoryListParams
name|clParams
init|=
name|ifip
operator|.
name|getCategoryListParams
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"partition for all ordinals is the first"
argument_list|,
literal|"$fulltree$"
argument_list|,
name|PartitionsUtils
operator|.
name|partitionNameByOrdinal
argument_list|(
name|ifip
argument_list|,
name|clParams
argument_list|,
literal|250
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"for partition 0, the same name should be returned"
argument_list|,
literal|"$fulltree$"
argument_list|,
name|PartitionsUtils
operator|.
name|partitionName
argument_list|(
name|clParams
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"for any other, it's the concatenation of name + partition"
argument_list|,
literal|"$fulltree$1"
argument_list|,
name|PartitionsUtils
operator|.
name|partitionName
argument_list|(
name|clParams
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"default partition number is always 0"
argument_list|,
literal|0
argument_list|,
name|PartitionsUtils
operator|.
name|partitionNumber
argument_list|(
name|ifip
argument_list|,
literal|100
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"default partition size is unbounded"
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|ifip
operator|.
name|getPartitionSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCategoryListParamsAddition
specifier|public
name|void
name|testCategoryListParamsAddition
parameter_list|()
block|{
name|CategoryListParams
name|clp
init|=
operator|new
name|CategoryListParams
argument_list|(
operator|new
name|Term
argument_list|(
literal|"clp"
argument_list|,
literal|"value"
argument_list|)
argument_list|)
decl_stmt|;
name|PerDimensionIndexingParams
name|tlfip
init|=
operator|new
name|PerDimensionIndexingParams
argument_list|(
name|Collections
operator|.
expr|<
name|CategoryPath
argument_list|,
name|CategoryListParams
operator|>
name|singletonMap
argument_list|(
operator|new
name|CategoryPath
argument_list|(
literal|"a"
argument_list|)
argument_list|,
name|clp
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Expected category list term is "
operator|+
name|clp
operator|.
name|getTerm
argument_list|()
argument_list|,
name|clp
operator|.
name|getTerm
argument_list|()
argument_list|,
name|tlfip
operator|.
name|getCategoryListParams
argument_list|(
operator|new
name|CategoryPath
argument_list|(
literal|"a"
argument_list|)
argument_list|)
operator|.
name|getTerm
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
literal|"Unexpected default category list "
operator|+
name|clp
operator|.
name|getTerm
argument_list|()
argument_list|,
name|clp
argument_list|,
name|tlfip
operator|.
name|getCategoryListParams
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
