begin_unit
begin_package
DECL|package|org.apache.lucene.facet.index
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|index
package|;
end_package
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|index
operator|.
name|CategoryContainer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|taxonomy
operator|.
name|CategoryPath
import|;
end_import
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_class
DECL|class|CategoryContainerTestBase
specifier|public
specifier|abstract
class|class
name|CategoryContainerTestBase
extends|extends
name|LuceneTestCase
block|{
DECL|field|categoryContainer
specifier|protected
name|CategoryContainer
name|categoryContainer
decl_stmt|;
DECL|field|initialCatgeories
specifier|protected
name|CategoryPath
index|[]
name|initialCatgeories
decl_stmt|;
annotation|@
name|Before
DECL|method|setCategoryContainer
specifier|public
name|void
name|setCategoryContainer
parameter_list|()
block|{
name|initialCatgeories
operator|=
operator|new
name|CategoryPath
index|[
literal|3
index|]
expr_stmt|;
name|initialCatgeories
index|[
literal|0
index|]
operator|=
operator|new
name|CategoryPath
argument_list|(
literal|"one"
argument_list|,
literal|"two"
argument_list|,
literal|"three"
argument_list|)
expr_stmt|;
name|initialCatgeories
index|[
literal|1
index|]
operator|=
operator|new
name|CategoryPath
argument_list|(
literal|"four"
argument_list|)
expr_stmt|;
name|initialCatgeories
index|[
literal|2
index|]
operator|=
operator|new
name|CategoryPath
argument_list|(
literal|"five"
argument_list|,
literal|"six"
argument_list|)
expr_stmt|;
name|categoryContainer
operator|=
operator|new
name|CategoryContainer
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|initialCatgeories
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|categoryContainer
operator|.
name|addCategory
argument_list|(
name|initialCatgeories
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class
end_unit
