begin_unit
begin_package
DECL|package|org.apache.lucene.facet.enhancements.association
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|enhancements
operator|.
name|association
package|;
end_package
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|FacetException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|enhancements
operator|.
name|association
operator|.
name|AssociationFloatProperty
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|enhancements
operator|.
name|association
operator|.
name|AssociationIntProperty
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|enhancements
operator|.
name|association
operator|.
name|AssociationProperty
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_comment
comment|/** Test {@link AssociationProperty}-ies. */
end_comment
begin_class
DECL|class|AssociationPropertyTest
specifier|public
class|class
name|AssociationPropertyTest
extends|extends
name|LuceneTestCase
block|{
annotation|@
name|Test
DECL|method|testAssociationCountProperty
specifier|public
name|void
name|testAssociationCountProperty
parameter_list|()
throws|throws
name|FacetException
block|{
name|AssociationProperty
name|aa1
init|=
operator|new
name|AssociationIntProperty
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|AssociationProperty
name|aa2
init|=
operator|new
name|AssociationIntProperty
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong association for property"
argument_list|,
literal|5
argument_list|,
name|aa1
operator|.
name|getAssociation
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong association for property"
argument_list|,
literal|3
argument_list|,
name|aa2
operator|.
name|getAssociation
argument_list|()
argument_list|)
expr_stmt|;
name|aa1
operator|.
name|merge
argument_list|(
name|aa2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong association for property"
argument_list|,
literal|8
argument_list|,
name|aa1
operator|.
name|getAssociation
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAssociationFloatProperty
specifier|public
name|void
name|testAssociationFloatProperty
parameter_list|()
throws|throws
name|FacetException
block|{
name|AssociationFloatProperty
name|aa1
init|=
operator|new
name|AssociationFloatProperty
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|AssociationFloatProperty
name|aa2
init|=
operator|new
name|AssociationFloatProperty
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong association for property"
argument_list|,
literal|5.0
argument_list|,
name|aa1
operator|.
name|getFloatAssociation
argument_list|()
argument_list|,
literal|0.00001
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong association for property"
argument_list|,
literal|3.0
argument_list|,
name|aa2
operator|.
name|getFloatAssociation
argument_list|()
argument_list|,
literal|0.00001
argument_list|)
expr_stmt|;
name|aa1
operator|.
name|merge
argument_list|(
name|aa2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong association for property"
argument_list|,
literal|8.0
argument_list|,
name|aa1
operator|.
name|getFloatAssociation
argument_list|()
argument_list|,
literal|0.00001
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testEquals
specifier|public
name|void
name|testEquals
parameter_list|()
block|{
name|AssociationProperty
name|aa1
init|=
operator|new
name|AssociationIntProperty
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|AssociationProperty
name|aa2
init|=
operator|new
name|AssociationIntProperty
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|AssociationProperty
name|aa3
init|=
operator|new
name|AssociationFloatProperty
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|AssociationProperty
name|aa4
init|=
operator|new
name|AssociationFloatProperty
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Should be equal"
argument_list|,
name|aa1
operator|.
name|equals
argument_list|(
name|aa1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should be equal"
argument_list|,
name|aa1
operator|.
name|equals
argument_list|(
name|aa2
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Should not be equal"
argument_list|,
name|aa1
operator|.
name|equals
argument_list|(
name|aa3
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should be equal"
argument_list|,
name|aa3
operator|.
name|equals
argument_list|(
name|aa3
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should be equal"
argument_list|,
name|aa3
operator|.
name|equals
argument_list|(
name|aa4
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
