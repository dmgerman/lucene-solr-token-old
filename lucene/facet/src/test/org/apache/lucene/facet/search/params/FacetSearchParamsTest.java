begin_unit
begin_package
DECL|package|org.apache.lucene.facet.search.params
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|search
operator|.
name|params
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|index
operator|.
name|params
operator|.
name|DefaultFacetIndexingParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|taxonomy
operator|.
name|CategoryPath
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|taxonomy
operator|.
name|TaxonomyReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|taxonomy
operator|.
name|TaxonomyWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|taxonomy
operator|.
name|directory
operator|.
name|DirectoryTaxonomyReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|taxonomy
operator|.
name|directory
operator|.
name|DirectoryTaxonomyWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|util
operator|.
name|PartitionsUtils
import|;
end_import
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_class
DECL|class|FacetSearchParamsTest
specifier|public
class|class
name|FacetSearchParamsTest
extends|extends
name|LuceneTestCase
block|{
annotation|@
name|Test
DECL|method|testDefaultSettings
specifier|public
name|void
name|testDefaultSettings
parameter_list|()
throws|throws
name|Exception
block|{
name|FacetSearchParams
name|fsp
init|=
operator|new
name|FacetSearchParams
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"unexpected default facet indexing params class"
argument_list|,
name|DefaultFacetIndexingParams
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|fsp
operator|.
name|getFacetIndexingParams
argument_list|()
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"no facet requests should be added by default"
argument_list|,
literal|0
argument_list|,
name|fsp
operator|.
name|getFacetRequests
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
operator|new
name|DirectoryTaxonomyWriter
argument_list|(
name|dir
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|TaxonomyReader
name|tr
init|=
operator|new
name|DirectoryTaxonomyReader
argument_list|(
name|dir
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"unexpected partition offset for 0 categories"
argument_list|,
literal|1
argument_list|,
name|PartitionsUtils
operator|.
name|partitionOffset
argument_list|(
name|fsp
argument_list|,
literal|1
argument_list|,
name|tr
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"unexpected partition size for 0 categories"
argument_list|,
literal|1
argument_list|,
name|PartitionsUtils
operator|.
name|partitionSize
argument_list|(
name|fsp
argument_list|,
name|tr
argument_list|)
argument_list|)
expr_stmt|;
name|tr
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAddFacetRequest
specifier|public
name|void
name|testAddFacetRequest
parameter_list|()
throws|throws
name|Exception
block|{
name|FacetSearchParams
name|fsp
init|=
operator|new
name|FacetSearchParams
argument_list|()
decl_stmt|;
name|fsp
operator|.
name|addFacetRequest
argument_list|(
operator|new
name|CountFacetRequest
argument_list|(
operator|new
name|CategoryPath
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"expected 1 facet request"
argument_list|,
literal|1
argument_list|,
name|fsp
operator|.
name|getFacetRequests
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPartitionSizeWithCategories
specifier|public
name|void
name|testPartitionSizeWithCategories
parameter_list|()
throws|throws
name|Exception
block|{
name|FacetSearchParams
name|fsp
init|=
operator|new
name|FacetSearchParams
argument_list|()
decl_stmt|;
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|TaxonomyWriter
name|tw
init|=
operator|new
name|DirectoryTaxonomyWriter
argument_list|(
name|dir
argument_list|)
decl_stmt|;
name|tw
operator|.
name|addCategory
argument_list|(
operator|new
name|CategoryPath
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|tw
operator|.
name|commit
argument_list|()
expr_stmt|;
name|tw
operator|.
name|close
argument_list|()
expr_stmt|;
name|TaxonomyReader
name|tr
init|=
operator|new
name|DirectoryTaxonomyReader
argument_list|(
name|dir
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"unexpected partition offset for 1 categories"
argument_list|,
literal|2
argument_list|,
name|PartitionsUtils
operator|.
name|partitionOffset
argument_list|(
name|fsp
argument_list|,
literal|1
argument_list|,
name|tr
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"unexpected partition size for 1 categories"
argument_list|,
literal|2
argument_list|,
name|PartitionsUtils
operator|.
name|partitionSize
argument_list|(
name|fsp
argument_list|,
name|tr
argument_list|)
argument_list|)
expr_stmt|;
name|tr
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSearchParamsWithNullRequest
specifier|public
name|void
name|testSearchParamsWithNullRequest
parameter_list|()
throws|throws
name|Exception
block|{
name|FacetSearchParams
name|fsp
init|=
operator|new
name|FacetSearchParams
argument_list|()
decl_stmt|;
try|try
block|{
name|fsp
operator|.
name|addFacetRequest
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"FacetSearchParams should throw IllegalArgumentException when trying to add a null FacetRequest"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{     }
block|}
block|}
end_class
end_unit
