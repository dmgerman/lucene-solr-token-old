begin_unit
begin_package
DECL|package|org.apache.lucene.facet.search
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|search
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|FacetTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|search
operator|.
name|CountFacetRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|taxonomy
operator|.
name|CategoryPath
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_class
DECL|class|FacetRequestTest
specifier|public
class|class
name|FacetRequestTest
extends|extends
name|FacetTestCase
block|{
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
DECL|method|testIllegalNumResults
specifier|public
name|void
name|testIllegalNumResults
parameter_list|()
throws|throws
name|Exception
block|{
name|assertNotNull
argument_list|(
operator|new
name|CountFacetRequest
argument_list|(
operator|new
name|CategoryPath
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
DECL|method|testIllegalCategoryPath
specifier|public
name|void
name|testIllegalCategoryPath
parameter_list|()
throws|throws
name|Exception
block|{
name|assertNotNull
argument_list|(
operator|new
name|CountFacetRequest
argument_list|(
literal|null
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testHashAndEquals
specifier|public
name|void
name|testHashAndEquals
parameter_list|()
block|{
name|CountFacetRequest
name|fr1
init|=
operator|new
name|CountFacetRequest
argument_list|(
operator|new
name|CategoryPath
argument_list|(
literal|"a"
argument_list|)
argument_list|,
literal|8
argument_list|)
decl_stmt|;
name|CountFacetRequest
name|fr2
init|=
operator|new
name|CountFacetRequest
argument_list|(
operator|new
name|CategoryPath
argument_list|(
literal|"a"
argument_list|)
argument_list|,
literal|8
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"hashCode() should agree on both objects"
argument_list|,
name|fr1
operator|.
name|hashCode
argument_list|()
argument_list|,
name|fr2
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"equals() should return true"
argument_list|,
name|fr1
operator|.
name|equals
argument_list|(
name|fr2
argument_list|)
argument_list|)
expr_stmt|;
name|fr1
operator|.
name|setDepth
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"equals() should return false as fr1.depth != fr2.depth"
argument_list|,
name|fr1
operator|.
name|equals
argument_list|(
name|fr2
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
