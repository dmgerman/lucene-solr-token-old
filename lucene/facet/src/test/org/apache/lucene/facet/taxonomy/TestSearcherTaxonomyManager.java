begin_unit
begin_package
DECL|package|org.apache.lucene.facet.taxonomy
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|taxonomy
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|MockAnalyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|FacetField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|FacetResult
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|FacetTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|Facets
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|FacetsCollector
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|FacetsConfig
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|taxonomy
operator|.
name|SearcherTaxonomyManager
operator|.
name|SearcherAndTaxonomy
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|taxonomy
operator|.
name|directory
operator|.
name|DirectoryTaxonomyWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriterConfig
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|TieredMergePolicy
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|MatchAllDocsQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|ReferenceManager
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|TestUtil
import|;
end_import
begin_class
DECL|class|TestSearcherTaxonomyManager
specifier|public
class|class
name|TestSearcherTaxonomyManager
extends|extends
name|FacetTestCase
block|{
DECL|class|IndexerThread
specifier|private
specifier|static
class|class
name|IndexerThread
extends|extends
name|Thread
block|{
DECL|field|w
specifier|private
name|IndexWriter
name|w
decl_stmt|;
DECL|field|config
specifier|private
name|FacetsConfig
name|config
decl_stmt|;
DECL|field|tw
specifier|private
name|TaxonomyWriter
name|tw
decl_stmt|;
DECL|field|mgr
specifier|private
name|ReferenceManager
argument_list|<
name|SearcherAndTaxonomy
argument_list|>
name|mgr
decl_stmt|;
DECL|field|ordLimit
specifier|private
name|int
name|ordLimit
decl_stmt|;
DECL|field|stop
specifier|private
name|AtomicBoolean
name|stop
decl_stmt|;
DECL|method|IndexerThread
specifier|public
name|IndexerThread
parameter_list|(
name|IndexWriter
name|w
parameter_list|,
name|FacetsConfig
name|config
parameter_list|,
name|TaxonomyWriter
name|tw
parameter_list|,
name|ReferenceManager
argument_list|<
name|SearcherAndTaxonomy
argument_list|>
name|mgr
parameter_list|,
name|int
name|ordLimit
parameter_list|,
name|AtomicBoolean
name|stop
parameter_list|)
block|{
name|this
operator|.
name|w
operator|=
name|w
expr_stmt|;
name|this
operator|.
name|config
operator|=
name|config
expr_stmt|;
name|this
operator|.
name|tw
operator|=
name|tw
expr_stmt|;
name|this
operator|.
name|mgr
operator|=
name|mgr
expr_stmt|;
name|this
operator|.
name|ordLimit
operator|=
name|ordLimit
expr_stmt|;
name|this
operator|.
name|stop
operator|=
name|stop
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|seen
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|paths
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|int
name|numPaths
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|5
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numPaths
condition|;
name|i
operator|++
control|)
block|{
name|String
name|path
decl_stmt|;
if|if
condition|(
operator|!
name|paths
operator|.
name|isEmpty
argument_list|()
operator|&&
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|5
argument_list|)
operator|!=
literal|4
condition|)
block|{
comment|// Use previous path
name|path
operator|=
name|paths
operator|.
name|get
argument_list|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|paths
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Create new path
name|path
operator|=
literal|null
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|path
operator|=
name|TestUtil
operator|.
name|randomRealisticUnicodeString
argument_list|(
name|random
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|path
operator|.
name|length
argument_list|()
operator|!=
literal|0
operator|&&
operator|!
name|seen
operator|.
name|contains
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|seen
operator|.
name|add
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|paths
operator|.
name|add
argument_list|(
name|path
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
name|doc
operator|.
name|add
argument_list|(
operator|new
name|FacetField
argument_list|(
literal|"field"
argument_list|,
name|path
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|w
operator|.
name|addDocument
argument_list|(
name|config
operator|.
name|build
argument_list|(
name|tw
argument_list|,
name|doc
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|mgr
operator|!=
literal|null
operator|&&
name|random
argument_list|()
operator|.
name|nextDouble
argument_list|()
operator|<
literal|0.02
condition|)
block|{
name|w
operator|.
name|commit
argument_list|()
expr_stmt|;
name|tw
operator|.
name|commit
argument_list|()
expr_stmt|;
name|mgr
operator|.
name|maybeRefresh
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TW size="
operator|+
name|tw
operator|.
name|getSize
argument_list|()
operator|+
literal|" vs "
operator|+
name|ordLimit
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tw
operator|.
name|getSize
argument_list|()
operator|>=
name|ordLimit
condition|)
block|{
break|break;
block|}
block|}
block|}
finally|finally
block|{
name|stop
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testNRT
specifier|public
name|void
name|testNRT
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|Directory
name|taxoDir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriterConfig
name|iwc
init|=
name|newIndexWriterConfig
argument_list|(
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
comment|// Don't allow tiny maxBufferedDocs; it can make this
comment|// test too slow:
name|iwc
operator|.
name|setMaxBufferedDocs
argument_list|(
name|Math
operator|.
name|max
argument_list|(
literal|500
argument_list|,
name|iwc
operator|.
name|getMaxBufferedDocs
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// MockRandom/AlcololicMergePolicy are too slow:
name|TieredMergePolicy
name|tmp
init|=
operator|new
name|TieredMergePolicy
argument_list|()
decl_stmt|;
name|tmp
operator|.
name|setFloorSegmentMB
argument_list|(
literal|.001
argument_list|)
expr_stmt|;
name|iwc
operator|.
name|setMergePolicy
argument_list|(
name|tmp
argument_list|)
expr_stmt|;
specifier|final
name|IndexWriter
name|w
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|iwc
argument_list|)
decl_stmt|;
specifier|final
name|DirectoryTaxonomyWriter
name|tw
init|=
operator|new
name|DirectoryTaxonomyWriter
argument_list|(
name|taxoDir
argument_list|)
decl_stmt|;
specifier|final
name|FacetsConfig
name|config
init|=
operator|new
name|FacetsConfig
argument_list|()
decl_stmt|;
name|config
operator|.
name|setMultiValued
argument_list|(
literal|"field"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
specifier|final
name|AtomicBoolean
name|stop
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
comment|// How many unique facets to index before stopping:
specifier|final
name|int
name|ordLimit
init|=
name|TEST_NIGHTLY
condition|?
literal|100000
else|:
literal|6000
decl_stmt|;
name|Thread
name|indexer
init|=
operator|new
name|IndexerThread
argument_list|(
name|w
argument_list|,
name|config
argument_list|,
name|tw
argument_list|,
literal|null
argument_list|,
name|ordLimit
argument_list|,
name|stop
argument_list|)
decl_stmt|;
specifier|final
name|SearcherTaxonomyManager
name|mgr
init|=
operator|new
name|SearcherTaxonomyManager
argument_list|(
name|w
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
name|tw
argument_list|)
decl_stmt|;
name|Thread
name|reopener
init|=
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
while|while
condition|(
operator|!
name|stop
operator|.
name|get
argument_list|()
condition|)
block|{
try|try
block|{
comment|// Sleep for up to 20 msec:
name|Thread
operator|.
name|sleep
argument_list|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|20
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TEST: reopen"
argument_list|)
expr_stmt|;
block|}
name|mgr
operator|.
name|maybeRefresh
argument_list|()
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TEST: reopen done"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
block|}
block|}
block|}
decl_stmt|;
name|reopener
operator|.
name|setName
argument_list|(
literal|"reopener"
argument_list|)
expr_stmt|;
name|reopener
operator|.
name|start
argument_list|()
expr_stmt|;
name|indexer
operator|.
name|setName
argument_list|(
literal|"indexer"
argument_list|)
expr_stmt|;
name|indexer
operator|.
name|start
argument_list|()
expr_stmt|;
try|try
block|{
while|while
condition|(
operator|!
name|stop
operator|.
name|get
argument_list|()
condition|)
block|{
name|SearcherAndTaxonomy
name|pair
init|=
name|mgr
operator|.
name|acquire
argument_list|()
decl_stmt|;
try|try
block|{
comment|//System.out.println("search maxOrd=" + pair.taxonomyReader.getSize());
name|FacetsCollector
name|sfc
init|=
operator|new
name|FacetsCollector
argument_list|()
decl_stmt|;
name|pair
operator|.
name|searcher
operator|.
name|search
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
name|sfc
argument_list|)
expr_stmt|;
name|Facets
name|facets
init|=
name|getTaxonomyFacetCounts
argument_list|(
name|pair
operator|.
name|taxonomyReader
argument_list|,
name|config
argument_list|,
name|sfc
argument_list|)
decl_stmt|;
name|FacetResult
name|result
init|=
name|facets
operator|.
name|getTopChildren
argument_list|(
literal|10
argument_list|,
literal|"field"
argument_list|)
decl_stmt|;
if|if
condition|(
name|pair
operator|.
name|searcher
operator|.
name|getIndexReader
argument_list|()
operator|.
name|numDocs
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|//System.out.println(pair.taxonomyReader.getSize());
name|assertTrue
argument_list|(
name|result
operator|.
name|childCount
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|labelValues
operator|.
name|length
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
comment|//if (VERBOSE) {
comment|//System.out.println("TEST: facets=" + FacetTestUtils.toString(results.get(0)));
comment|//}
block|}
finally|finally
block|{
name|mgr
operator|.
name|release
argument_list|(
name|pair
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|indexer
operator|.
name|join
argument_list|()
expr_stmt|;
name|reopener
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TEST: now stop"
argument_list|)
expr_stmt|;
block|}
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|IOUtils
operator|.
name|close
argument_list|(
name|mgr
argument_list|,
name|tw
argument_list|,
name|taxoDir
argument_list|,
name|dir
argument_list|)
expr_stmt|;
block|}
DECL|method|testDirectory
specifier|public
name|void
name|testDirectory
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|indexDir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|Directory
name|taxoDir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
specifier|final
name|IndexWriter
name|w
init|=
operator|new
name|IndexWriter
argument_list|(
name|indexDir
argument_list|,
name|newIndexWriterConfig
argument_list|(
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|DirectoryTaxonomyWriter
name|tw
init|=
operator|new
name|DirectoryTaxonomyWriter
argument_list|(
name|taxoDir
argument_list|)
decl_stmt|;
comment|// first empty commit
name|w
operator|.
name|commit
argument_list|()
expr_stmt|;
name|tw
operator|.
name|commit
argument_list|()
expr_stmt|;
specifier|final
name|SearcherTaxonomyManager
name|mgr
init|=
operator|new
name|SearcherTaxonomyManager
argument_list|(
name|indexDir
argument_list|,
name|taxoDir
argument_list|,
literal|null
argument_list|)
decl_stmt|;
specifier|final
name|FacetsConfig
name|config
init|=
operator|new
name|FacetsConfig
argument_list|()
decl_stmt|;
name|config
operator|.
name|setMultiValued
argument_list|(
literal|"field"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
specifier|final
name|AtomicBoolean
name|stop
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
comment|// How many unique facets to index before stopping:
specifier|final
name|int
name|ordLimit
init|=
name|TEST_NIGHTLY
condition|?
literal|100000
else|:
literal|6000
decl_stmt|;
name|Thread
name|indexer
init|=
operator|new
name|IndexerThread
argument_list|(
name|w
argument_list|,
name|config
argument_list|,
name|tw
argument_list|,
name|mgr
argument_list|,
name|ordLimit
argument_list|,
name|stop
argument_list|)
decl_stmt|;
name|indexer
operator|.
name|start
argument_list|()
expr_stmt|;
try|try
block|{
while|while
condition|(
operator|!
name|stop
operator|.
name|get
argument_list|()
condition|)
block|{
name|SearcherAndTaxonomy
name|pair
init|=
name|mgr
operator|.
name|acquire
argument_list|()
decl_stmt|;
try|try
block|{
comment|//System.out.println("search maxOrd=" + pair.taxonomyReader.getSize());
name|FacetsCollector
name|sfc
init|=
operator|new
name|FacetsCollector
argument_list|()
decl_stmt|;
name|pair
operator|.
name|searcher
operator|.
name|search
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
name|sfc
argument_list|)
expr_stmt|;
name|Facets
name|facets
init|=
name|getTaxonomyFacetCounts
argument_list|(
name|pair
operator|.
name|taxonomyReader
argument_list|,
name|config
argument_list|,
name|sfc
argument_list|)
decl_stmt|;
name|FacetResult
name|result
init|=
name|facets
operator|.
name|getTopChildren
argument_list|(
literal|10
argument_list|,
literal|"field"
argument_list|)
decl_stmt|;
if|if
condition|(
name|pair
operator|.
name|searcher
operator|.
name|getIndexReader
argument_list|()
operator|.
name|numDocs
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|//System.out.println(pair.taxonomyReader.getSize());
name|assertTrue
argument_list|(
name|result
operator|.
name|childCount
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|labelValues
operator|.
name|length
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
comment|//if (VERBOSE) {
comment|//System.out.println("TEST: facets=" + FacetTestUtils.toString(results.get(0)));
comment|//}
block|}
finally|finally
block|{
name|mgr
operator|.
name|release
argument_list|(
name|pair
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|indexer
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TEST: now stop"
argument_list|)
expr_stmt|;
block|}
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|IOUtils
operator|.
name|close
argument_list|(
name|mgr
argument_list|,
name|tw
argument_list|,
name|taxoDir
argument_list|,
name|indexDir
argument_list|)
expr_stmt|;
block|}
DECL|method|testReplaceTaxonomyNRT
specifier|public
name|void
name|testReplaceTaxonomyNRT
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|Directory
name|taxoDir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|w
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|newIndexWriterConfig
argument_list|(
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|DirectoryTaxonomyWriter
name|tw
init|=
operator|new
name|DirectoryTaxonomyWriter
argument_list|(
name|taxoDir
argument_list|)
decl_stmt|;
name|Directory
name|taxoDir2
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|DirectoryTaxonomyWriter
name|tw2
init|=
operator|new
name|DirectoryTaxonomyWriter
argument_list|(
name|taxoDir2
argument_list|)
decl_stmt|;
name|tw2
operator|.
name|close
argument_list|()
expr_stmt|;
name|SearcherTaxonomyManager
name|mgr
init|=
operator|new
name|SearcherTaxonomyManager
argument_list|(
name|w
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
name|tw
argument_list|)
decl_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
operator|new
name|Document
argument_list|()
argument_list|)
expr_stmt|;
name|tw
operator|.
name|replaceTaxonomy
argument_list|(
name|taxoDir2
argument_list|)
expr_stmt|;
name|taxoDir2
operator|.
name|close
argument_list|()
expr_stmt|;
try|try
block|{
name|mgr
operator|.
name|maybeRefresh
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"should have hit exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|ise
parameter_list|)
block|{
comment|// expected
block|}
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|IOUtils
operator|.
name|close
argument_list|(
name|mgr
argument_list|,
name|tw
argument_list|,
name|taxoDir
argument_list|,
name|dir
argument_list|)
expr_stmt|;
block|}
DECL|method|testReplaceTaxonomyDirectory
specifier|public
name|void
name|testReplaceTaxonomyDirectory
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|indexDir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|Directory
name|taxoDir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|w
init|=
operator|new
name|IndexWriter
argument_list|(
name|indexDir
argument_list|,
name|newIndexWriterConfig
argument_list|(
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|DirectoryTaxonomyWriter
name|tw
init|=
operator|new
name|DirectoryTaxonomyWriter
argument_list|(
name|taxoDir
argument_list|)
decl_stmt|;
name|w
operator|.
name|commit
argument_list|()
expr_stmt|;
name|tw
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Directory
name|taxoDir2
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|DirectoryTaxonomyWriter
name|tw2
init|=
operator|new
name|DirectoryTaxonomyWriter
argument_list|(
name|taxoDir2
argument_list|)
decl_stmt|;
name|tw2
operator|.
name|addCategory
argument_list|(
operator|new
name|FacetLabel
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|tw2
operator|.
name|close
argument_list|()
expr_stmt|;
name|SearcherTaxonomyManager
name|mgr
init|=
operator|new
name|SearcherTaxonomyManager
argument_list|(
name|indexDir
argument_list|,
name|taxoDir
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SearcherAndTaxonomy
name|pair
init|=
name|mgr
operator|.
name|acquire
argument_list|()
decl_stmt|;
try|try
block|{
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|pair
operator|.
name|taxonomyReader
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|mgr
operator|.
name|release
argument_list|(
name|pair
argument_list|)
expr_stmt|;
block|}
name|w
operator|.
name|addDocument
argument_list|(
operator|new
name|Document
argument_list|()
argument_list|)
expr_stmt|;
name|tw
operator|.
name|replaceTaxonomy
argument_list|(
name|taxoDir2
argument_list|)
expr_stmt|;
name|taxoDir2
operator|.
name|close
argument_list|()
expr_stmt|;
name|w
operator|.
name|commit
argument_list|()
expr_stmt|;
name|tw
operator|.
name|commit
argument_list|()
expr_stmt|;
name|mgr
operator|.
name|maybeRefresh
argument_list|()
expr_stmt|;
name|pair
operator|=
name|mgr
operator|.
name|acquire
argument_list|()
expr_stmt|;
try|try
block|{
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|pair
operator|.
name|taxonomyReader
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|mgr
operator|.
name|release
argument_list|(
name|pair
argument_list|)
expr_stmt|;
block|}
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|IOUtils
operator|.
name|close
argument_list|(
name|mgr
argument_list|,
name|tw
argument_list|,
name|taxoDir
argument_list|,
name|indexDir
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
