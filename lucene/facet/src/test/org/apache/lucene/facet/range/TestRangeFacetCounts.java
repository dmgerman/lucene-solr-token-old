begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.facet.range
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|range
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|DoublePoint
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|FloatPoint
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|LongPoint
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|DoubleDocValuesField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|FloatDocValuesField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|NumericDocValuesField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|DrillDownQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|DrillSideways
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|DrillSideways
operator|.
name|DrillSidewaysResult
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|FacetField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|FacetResult
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|FacetTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|Facets
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|FacetsCollector
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|FacetsConfig
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|LabelAndValue
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|MultiFacets
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|taxonomy
operator|.
name|TaxonomyReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|taxonomy
operator|.
name|directory
operator|.
name|DirectoryTaxonomyReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|taxonomy
operator|.
name|directory
operator|.
name|DirectoryTaxonomyWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriterConfig
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReaderContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|RandomIndexWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queries
operator|.
name|function
operator|.
name|FunctionValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queries
operator|.
name|function
operator|.
name|ValueSource
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queries
operator|.
name|function
operator|.
name|docvalues
operator|.
name|DoubleDocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queries
operator|.
name|function
operator|.
name|valuesource
operator|.
name|DoubleFieldSource
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queries
operator|.
name|function
operator|.
name|valuesource
operator|.
name|FloatFieldSource
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queries
operator|.
name|function
operator|.
name|valuesource
operator|.
name|LongFieldSource
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|PointRangeQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Explanation
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|MatchAllDocsQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Scorer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Weight
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|TestUtil
import|;
end_import
begin_class
DECL|class|TestRangeFacetCounts
specifier|public
class|class
name|TestRangeFacetCounts
extends|extends
name|FacetTestCase
block|{
DECL|method|testBasicLong
specifier|public
name|void
name|testBasicLong
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|d
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|RandomIndexWriter
name|w
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|d
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|NumericDocValuesField
name|field
init|=
operator|new
name|NumericDocValuesField
argument_list|(
literal|"field"
argument_list|,
literal|0L
argument_list|)
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|field
argument_list|)
expr_stmt|;
for|for
control|(
name|long
name|l
init|=
literal|0
init|;
name|l
operator|<
literal|100
condition|;
name|l
operator|++
control|)
block|{
name|field
operator|.
name|setLongValue
argument_list|(
name|l
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
comment|// Also add Long.MAX_VALUE
name|field
operator|.
name|setLongValue
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|IndexReader
name|r
init|=
name|w
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|FacetsCollector
name|fc
init|=
operator|new
name|FacetsCollector
argument_list|()
decl_stmt|;
name|IndexSearcher
name|s
init|=
name|newSearcher
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|s
operator|.
name|search
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
name|fc
argument_list|)
expr_stmt|;
name|Facets
name|facets
init|=
operator|new
name|LongRangeFacetCounts
argument_list|(
literal|"field"
argument_list|,
name|fc
argument_list|,
operator|new
name|LongRange
argument_list|(
literal|"less than 10"
argument_list|,
literal|0L
argument_list|,
literal|true
argument_list|,
literal|10L
argument_list|,
literal|false
argument_list|)
argument_list|,
operator|new
name|LongRange
argument_list|(
literal|"less than or equal to 10"
argument_list|,
literal|0L
argument_list|,
literal|true
argument_list|,
literal|10L
argument_list|,
literal|true
argument_list|)
argument_list|,
operator|new
name|LongRange
argument_list|(
literal|"over 90"
argument_list|,
literal|90L
argument_list|,
literal|false
argument_list|,
literal|100L
argument_list|,
literal|false
argument_list|)
argument_list|,
operator|new
name|LongRange
argument_list|(
literal|"90 or above"
argument_list|,
literal|90L
argument_list|,
literal|true
argument_list|,
literal|100L
argument_list|,
literal|false
argument_list|)
argument_list|,
operator|new
name|LongRange
argument_list|(
literal|"over 1000"
argument_list|,
literal|1000L
argument_list|,
literal|false
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|,
literal|true
argument_list|)
argument_list|)
decl_stmt|;
name|FacetResult
name|result
init|=
name|facets
operator|.
name|getTopChildren
argument_list|(
literal|10
argument_list|,
literal|"field"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"dim=field path=[] value=22 childCount=5\n  less than 10 (10)\n  less than or equal to 10 (11)\n  over 90 (9)\n  90 or above (10)\n  over 1000 (1)\n"
argument_list|,
name|result
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
name|d
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testUselessRange
specifier|public
name|void
name|testUselessRange
parameter_list|()
block|{
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
operator|new
name|LongRange
argument_list|(
literal|"useless"
argument_list|,
literal|7
argument_list|,
literal|true
argument_list|,
literal|6
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
operator|new
name|LongRange
argument_list|(
literal|"useless"
argument_list|,
literal|7
argument_list|,
literal|true
argument_list|,
literal|7
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
operator|new
name|DoubleRange
argument_list|(
literal|"useless"
argument_list|,
literal|7.0
argument_list|,
literal|true
argument_list|,
literal|6.0
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
operator|new
name|DoubleRange
argument_list|(
literal|"useless"
argument_list|,
literal|7.0
argument_list|,
literal|true
argument_list|,
literal|7.0
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|testLongMinMax
specifier|public
name|void
name|testLongMinMax
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|d
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|RandomIndexWriter
name|w
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|d
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|NumericDocValuesField
name|field
init|=
operator|new
name|NumericDocValuesField
argument_list|(
literal|"field"
argument_list|,
literal|0L
argument_list|)
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|field
operator|.
name|setLongValue
argument_list|(
name|Long
operator|.
name|MIN_VALUE
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|field
operator|.
name|setLongValue
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|field
operator|.
name|setLongValue
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|IndexReader
name|r
init|=
name|w
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|FacetsCollector
name|fc
init|=
operator|new
name|FacetsCollector
argument_list|()
decl_stmt|;
name|IndexSearcher
name|s
init|=
name|newSearcher
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|s
operator|.
name|search
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
name|fc
argument_list|)
expr_stmt|;
name|Facets
name|facets
init|=
operator|new
name|LongRangeFacetCounts
argument_list|(
literal|"field"
argument_list|,
name|fc
argument_list|,
operator|new
name|LongRange
argument_list|(
literal|"min"
argument_list|,
name|Long
operator|.
name|MIN_VALUE
argument_list|,
literal|true
argument_list|,
name|Long
operator|.
name|MIN_VALUE
argument_list|,
literal|true
argument_list|)
argument_list|,
operator|new
name|LongRange
argument_list|(
literal|"max"
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|,
literal|true
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|,
literal|true
argument_list|)
argument_list|,
operator|new
name|LongRange
argument_list|(
literal|"all0"
argument_list|,
name|Long
operator|.
name|MIN_VALUE
argument_list|,
literal|true
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|,
literal|true
argument_list|)
argument_list|,
operator|new
name|LongRange
argument_list|(
literal|"all1"
argument_list|,
name|Long
operator|.
name|MIN_VALUE
argument_list|,
literal|false
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|,
literal|true
argument_list|)
argument_list|,
operator|new
name|LongRange
argument_list|(
literal|"all2"
argument_list|,
name|Long
operator|.
name|MIN_VALUE
argument_list|,
literal|true
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|,
literal|false
argument_list|)
argument_list|,
operator|new
name|LongRange
argument_list|(
literal|"all3"
argument_list|,
name|Long
operator|.
name|MIN_VALUE
argument_list|,
literal|false
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|,
literal|false
argument_list|)
argument_list|)
decl_stmt|;
name|FacetResult
name|result
init|=
name|facets
operator|.
name|getTopChildren
argument_list|(
literal|10
argument_list|,
literal|"field"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"dim=field path=[] value=3 childCount=6\n  min (1)\n  max (1)\n  all0 (3)\n  all1 (2)\n  all2 (2)\n  all3 (1)\n"
argument_list|,
name|result
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
name|d
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testOverlappedEndStart
specifier|public
name|void
name|testOverlappedEndStart
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|d
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|RandomIndexWriter
name|w
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|d
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|NumericDocValuesField
name|field
init|=
operator|new
name|NumericDocValuesField
argument_list|(
literal|"field"
argument_list|,
literal|0L
argument_list|)
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|field
argument_list|)
expr_stmt|;
for|for
control|(
name|long
name|l
init|=
literal|0
init|;
name|l
operator|<
literal|100
condition|;
name|l
operator|++
control|)
block|{
name|field
operator|.
name|setLongValue
argument_list|(
name|l
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
name|field
operator|.
name|setLongValue
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|IndexReader
name|r
init|=
name|w
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|FacetsCollector
name|fc
init|=
operator|new
name|FacetsCollector
argument_list|()
decl_stmt|;
name|IndexSearcher
name|s
init|=
name|newSearcher
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|s
operator|.
name|search
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
name|fc
argument_list|)
expr_stmt|;
name|Facets
name|facets
init|=
operator|new
name|LongRangeFacetCounts
argument_list|(
literal|"field"
argument_list|,
name|fc
argument_list|,
operator|new
name|LongRange
argument_list|(
literal|"0-10"
argument_list|,
literal|0L
argument_list|,
literal|true
argument_list|,
literal|10L
argument_list|,
literal|true
argument_list|)
argument_list|,
operator|new
name|LongRange
argument_list|(
literal|"10-20"
argument_list|,
literal|10L
argument_list|,
literal|true
argument_list|,
literal|20L
argument_list|,
literal|true
argument_list|)
argument_list|,
operator|new
name|LongRange
argument_list|(
literal|"20-30"
argument_list|,
literal|20L
argument_list|,
literal|true
argument_list|,
literal|30L
argument_list|,
literal|true
argument_list|)
argument_list|,
operator|new
name|LongRange
argument_list|(
literal|"30-40"
argument_list|,
literal|30L
argument_list|,
literal|true
argument_list|,
literal|40L
argument_list|,
literal|true
argument_list|)
argument_list|)
decl_stmt|;
name|FacetResult
name|result
init|=
name|facets
operator|.
name|getTopChildren
argument_list|(
literal|10
argument_list|,
literal|"field"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"dim=field path=[] value=41 childCount=4\n  0-10 (11)\n  10-20 (11)\n  20-30 (11)\n  30-40 (11)\n"
argument_list|,
name|result
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
name|d
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/** Tests single request that mixes Range and non-Range    *  faceting, with DrillSideways and taxonomy. */
DECL|method|testMixedRangeAndNonRangeTaxonomy
specifier|public
name|void
name|testMixedRangeAndNonRangeTaxonomy
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|d
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|RandomIndexWriter
name|w
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|d
argument_list|)
decl_stmt|;
name|Directory
name|td
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|DirectoryTaxonomyWriter
name|tw
init|=
operator|new
name|DirectoryTaxonomyWriter
argument_list|(
name|td
argument_list|,
name|IndexWriterConfig
operator|.
name|OpenMode
operator|.
name|CREATE
argument_list|)
decl_stmt|;
name|FacetsConfig
name|config
init|=
operator|new
name|FacetsConfig
argument_list|()
decl_stmt|;
for|for
control|(
name|long
name|l
init|=
literal|0
init|;
name|l
operator|<
literal|100
condition|;
name|l
operator|++
control|)
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
comment|// For computing range facet counts:
name|doc
operator|.
name|add
argument_list|(
operator|new
name|NumericDocValuesField
argument_list|(
literal|"field"
argument_list|,
name|l
argument_list|)
argument_list|)
expr_stmt|;
comment|// For drill down by numeric range:
name|doc
operator|.
name|add
argument_list|(
operator|new
name|LongPoint
argument_list|(
literal|"field"
argument_list|,
name|l
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|l
operator|&
literal|3
operator|)
operator|==
literal|0
condition|)
block|{
name|doc
operator|.
name|add
argument_list|(
operator|new
name|FacetField
argument_list|(
literal|"dim"
argument_list|,
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|doc
operator|.
name|add
argument_list|(
operator|new
name|FacetField
argument_list|(
literal|"dim"
argument_list|,
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|w
operator|.
name|addDocument
argument_list|(
name|config
operator|.
name|build
argument_list|(
name|tw
argument_list|,
name|doc
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|IndexReader
name|r
init|=
name|w
operator|.
name|getReader
argument_list|()
decl_stmt|;
specifier|final
name|TaxonomyReader
name|tr
init|=
operator|new
name|DirectoryTaxonomyReader
argument_list|(
name|tw
argument_list|)
decl_stmt|;
name|IndexSearcher
name|s
init|=
name|newSearcher
argument_list|(
name|r
argument_list|)
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TEST: searcher="
operator|+
name|s
argument_list|)
expr_stmt|;
block|}
name|DrillSideways
name|ds
init|=
operator|new
name|DrillSideways
argument_list|(
name|s
argument_list|,
name|config
argument_list|,
name|tr
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|Facets
name|buildFacetsResult
parameter_list|(
name|FacetsCollector
name|drillDowns
parameter_list|,
name|FacetsCollector
index|[]
name|drillSideways
parameter_list|,
name|String
index|[]
name|drillSidewaysDims
parameter_list|)
throws|throws
name|IOException
block|{
name|FacetsCollector
name|dimFC
init|=
name|drillDowns
decl_stmt|;
name|FacetsCollector
name|fieldFC
init|=
name|drillDowns
decl_stmt|;
if|if
condition|(
name|drillSideways
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|drillSideways
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|dim
init|=
name|drillSidewaysDims
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|dim
operator|.
name|equals
argument_list|(
literal|"field"
argument_list|)
condition|)
block|{
name|fieldFC
operator|=
name|drillSideways
index|[
name|i
index|]
expr_stmt|;
block|}
else|else
block|{
name|dimFC
operator|=
name|drillSideways
index|[
name|i
index|]
expr_stmt|;
block|}
block|}
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Facets
argument_list|>
name|byDim
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|byDim
operator|.
name|put
argument_list|(
literal|"field"
argument_list|,
operator|new
name|LongRangeFacetCounts
argument_list|(
literal|"field"
argument_list|,
name|fieldFC
argument_list|,
operator|new
name|LongRange
argument_list|(
literal|"less than 10"
argument_list|,
literal|0L
argument_list|,
literal|true
argument_list|,
literal|10L
argument_list|,
literal|false
argument_list|)
argument_list|,
operator|new
name|LongRange
argument_list|(
literal|"less than or equal to 10"
argument_list|,
literal|0L
argument_list|,
literal|true
argument_list|,
literal|10L
argument_list|,
literal|true
argument_list|)
argument_list|,
operator|new
name|LongRange
argument_list|(
literal|"over 90"
argument_list|,
literal|90L
argument_list|,
literal|false
argument_list|,
literal|100L
argument_list|,
literal|false
argument_list|)
argument_list|,
operator|new
name|LongRange
argument_list|(
literal|"90 or above"
argument_list|,
literal|90L
argument_list|,
literal|true
argument_list|,
literal|100L
argument_list|,
literal|false
argument_list|)
argument_list|,
operator|new
name|LongRange
argument_list|(
literal|"over 1000"
argument_list|,
literal|1000L
argument_list|,
literal|false
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|byDim
operator|.
name|put
argument_list|(
literal|"dim"
argument_list|,
name|getTaxonomyFacetCounts
argument_list|(
name|taxoReader
argument_list|,
name|config
argument_list|,
name|dimFC
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|new
name|MultiFacets
argument_list|(
name|byDim
argument_list|,
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|scoreSubDocsAtOnce
parameter_list|()
block|{
return|return
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
return|;
block|}
block|}
decl_stmt|;
comment|// First search, no drill downs:
name|DrillDownQuery
name|ddq
init|=
operator|new
name|DrillDownQuery
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|DrillSidewaysResult
name|dsr
init|=
name|ds
operator|.
name|search
argument_list|(
literal|null
argument_list|,
name|ddq
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|100
argument_list|,
name|dsr
operator|.
name|hits
operator|.
name|totalHits
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"dim=dim path=[] value=100 childCount=2\n  b (75)\n  a (25)\n"
argument_list|,
name|dsr
operator|.
name|facets
operator|.
name|getTopChildren
argument_list|(
literal|10
argument_list|,
literal|"dim"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"dim=field path=[] value=21 childCount=5\n  less than 10 (10)\n  less than or equal to 10 (11)\n  over 90 (9)\n  90 or above (10)\n  over 1000 (0)\n"
argument_list|,
name|dsr
operator|.
name|facets
operator|.
name|getTopChildren
argument_list|(
literal|10
argument_list|,
literal|"field"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Second search, drill down on dim=b:
name|ddq
operator|=
operator|new
name|DrillDownQuery
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|ddq
operator|.
name|add
argument_list|(
literal|"dim"
argument_list|,
literal|"b"
argument_list|)
expr_stmt|;
name|dsr
operator|=
name|ds
operator|.
name|search
argument_list|(
literal|null
argument_list|,
name|ddq
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|75
argument_list|,
name|dsr
operator|.
name|hits
operator|.
name|totalHits
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"dim=dim path=[] value=100 childCount=2\n  b (75)\n  a (25)\n"
argument_list|,
name|dsr
operator|.
name|facets
operator|.
name|getTopChildren
argument_list|(
literal|10
argument_list|,
literal|"dim"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"dim=field path=[] value=16 childCount=5\n  less than 10 (7)\n  less than or equal to 10 (8)\n  over 90 (7)\n  90 or above (8)\n  over 1000 (0)\n"
argument_list|,
name|dsr
operator|.
name|facets
operator|.
name|getTopChildren
argument_list|(
literal|10
argument_list|,
literal|"field"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Third search, drill down on "less than or equal to 10":
name|ddq
operator|=
operator|new
name|DrillDownQuery
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|ddq
operator|.
name|add
argument_list|(
literal|"field"
argument_list|,
name|PointRangeQuery
operator|.
name|newLongRange
argument_list|(
literal|"field"
argument_list|,
literal|0L
argument_list|,
literal|true
argument_list|,
literal|10L
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|dsr
operator|=
name|ds
operator|.
name|search
argument_list|(
literal|null
argument_list|,
name|ddq
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|11
argument_list|,
name|dsr
operator|.
name|hits
operator|.
name|totalHits
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"dim=dim path=[] value=11 childCount=2\n  b (8)\n  a (3)\n"
argument_list|,
name|dsr
operator|.
name|facets
operator|.
name|getTopChildren
argument_list|(
literal|10
argument_list|,
literal|"dim"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"dim=field path=[] value=21 childCount=5\n  less than 10 (10)\n  less than or equal to 10 (11)\n  over 90 (9)\n  90 or above (10)\n  over 1000 (0)\n"
argument_list|,
name|dsr
operator|.
name|facets
operator|.
name|getTopChildren
argument_list|(
literal|10
argument_list|,
literal|"field"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|IOUtils
operator|.
name|close
argument_list|(
name|tw
argument_list|,
name|tr
argument_list|,
name|td
argument_list|,
name|r
argument_list|,
name|d
argument_list|)
expr_stmt|;
block|}
DECL|method|testBasicDouble
specifier|public
name|void
name|testBasicDouble
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|d
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|RandomIndexWriter
name|w
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|d
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|DoubleDocValuesField
name|field
init|=
operator|new
name|DoubleDocValuesField
argument_list|(
literal|"field"
argument_list|,
literal|0.0
argument_list|)
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|field
argument_list|)
expr_stmt|;
for|for
control|(
name|long
name|l
init|=
literal|0
init|;
name|l
operator|<
literal|100
condition|;
name|l
operator|++
control|)
block|{
name|field
operator|.
name|setDoubleValue
argument_list|(
name|l
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
name|IndexReader
name|r
init|=
name|w
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|FacetsCollector
name|fc
init|=
operator|new
name|FacetsCollector
argument_list|()
decl_stmt|;
name|IndexSearcher
name|s
init|=
name|newSearcher
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|s
operator|.
name|search
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
name|fc
argument_list|)
expr_stmt|;
name|Facets
name|facets
init|=
operator|new
name|DoubleRangeFacetCounts
argument_list|(
literal|"field"
argument_list|,
name|fc
argument_list|,
operator|new
name|DoubleRange
argument_list|(
literal|"less than 10"
argument_list|,
literal|0.0
argument_list|,
literal|true
argument_list|,
literal|10.0
argument_list|,
literal|false
argument_list|)
argument_list|,
operator|new
name|DoubleRange
argument_list|(
literal|"less than or equal to 10"
argument_list|,
literal|0.0
argument_list|,
literal|true
argument_list|,
literal|10.0
argument_list|,
literal|true
argument_list|)
argument_list|,
operator|new
name|DoubleRange
argument_list|(
literal|"over 90"
argument_list|,
literal|90.0
argument_list|,
literal|false
argument_list|,
literal|100.0
argument_list|,
literal|false
argument_list|)
argument_list|,
operator|new
name|DoubleRange
argument_list|(
literal|"90 or above"
argument_list|,
literal|90.0
argument_list|,
literal|true
argument_list|,
literal|100.0
argument_list|,
literal|false
argument_list|)
argument_list|,
operator|new
name|DoubleRange
argument_list|(
literal|"over 1000"
argument_list|,
literal|1000.0
argument_list|,
literal|false
argument_list|,
name|Double
operator|.
name|POSITIVE_INFINITY
argument_list|,
literal|false
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"dim=field path=[] value=21 childCount=5\n  less than 10 (10)\n  less than or equal to 10 (11)\n  over 90 (9)\n  90 or above (10)\n  over 1000 (0)\n"
argument_list|,
name|facets
operator|.
name|getTopChildren
argument_list|(
literal|10
argument_list|,
literal|"field"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|IOUtils
operator|.
name|close
argument_list|(
name|r
argument_list|,
name|d
argument_list|)
expr_stmt|;
block|}
DECL|method|testBasicFloat
specifier|public
name|void
name|testBasicFloat
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|d
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|RandomIndexWriter
name|w
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|d
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|FloatDocValuesField
name|field
init|=
operator|new
name|FloatDocValuesField
argument_list|(
literal|"field"
argument_list|,
literal|0.0f
argument_list|)
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|field
argument_list|)
expr_stmt|;
for|for
control|(
name|long
name|l
init|=
literal|0
init|;
name|l
operator|<
literal|100
condition|;
name|l
operator|++
control|)
block|{
name|field
operator|.
name|setFloatValue
argument_list|(
name|l
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
name|IndexReader
name|r
init|=
name|w
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|FacetsCollector
name|fc
init|=
operator|new
name|FacetsCollector
argument_list|()
decl_stmt|;
name|IndexSearcher
name|s
init|=
name|newSearcher
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|s
operator|.
name|search
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
name|fc
argument_list|)
expr_stmt|;
name|Facets
name|facets
init|=
operator|new
name|DoubleRangeFacetCounts
argument_list|(
literal|"field"
argument_list|,
operator|new
name|FloatFieldSource
argument_list|(
literal|"field"
argument_list|)
argument_list|,
name|fc
argument_list|,
operator|new
name|DoubleRange
argument_list|(
literal|"less than 10"
argument_list|,
literal|0.0f
argument_list|,
literal|true
argument_list|,
literal|10.0f
argument_list|,
literal|false
argument_list|)
argument_list|,
operator|new
name|DoubleRange
argument_list|(
literal|"less than or equal to 10"
argument_list|,
literal|0.0f
argument_list|,
literal|true
argument_list|,
literal|10.0f
argument_list|,
literal|true
argument_list|)
argument_list|,
operator|new
name|DoubleRange
argument_list|(
literal|"over 90"
argument_list|,
literal|90.0f
argument_list|,
literal|false
argument_list|,
literal|100.0f
argument_list|,
literal|false
argument_list|)
argument_list|,
operator|new
name|DoubleRange
argument_list|(
literal|"90 or above"
argument_list|,
literal|90.0f
argument_list|,
literal|true
argument_list|,
literal|100.0f
argument_list|,
literal|false
argument_list|)
argument_list|,
operator|new
name|DoubleRange
argument_list|(
literal|"over 1000"
argument_list|,
literal|1000.0f
argument_list|,
literal|false
argument_list|,
name|Double
operator|.
name|POSITIVE_INFINITY
argument_list|,
literal|false
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"dim=field path=[] value=21 childCount=5\n  less than 10 (10)\n  less than or equal to 10 (11)\n  over 90 (9)\n  90 or above (10)\n  over 1000 (0)\n"
argument_list|,
name|facets
operator|.
name|getTopChildren
argument_list|(
literal|10
argument_list|,
literal|"field"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|IOUtils
operator|.
name|close
argument_list|(
name|r
argument_list|,
name|d
argument_list|)
expr_stmt|;
block|}
DECL|method|testRandomLongs
specifier|public
name|void
name|testRandomLongs
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|RandomIndexWriter
name|w
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|)
decl_stmt|;
name|int
name|numDocs
init|=
name|atLeast
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TEST: numDocs="
operator|+
name|numDocs
argument_list|)
expr_stmt|;
block|}
name|long
index|[]
name|values
init|=
operator|new
name|long
index|[
name|numDocs
index|]
decl_stmt|;
name|long
name|minValue
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
name|long
name|maxValue
init|=
name|Long
operator|.
name|MIN_VALUE
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
name|i
operator|++
control|)
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|long
name|v
init|=
name|random
argument_list|()
operator|.
name|nextLong
argument_list|()
decl_stmt|;
name|values
index|[
name|i
index|]
operator|=
name|v
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|NumericDocValuesField
argument_list|(
literal|"field"
argument_list|,
name|v
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|LongPoint
argument_list|(
literal|"field"
argument_list|,
name|v
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|minValue
operator|=
name|Math
operator|.
name|min
argument_list|(
name|minValue
argument_list|,
name|v
argument_list|)
expr_stmt|;
name|maxValue
operator|=
name|Math
operator|.
name|max
argument_list|(
name|maxValue
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
name|IndexReader
name|r
init|=
name|w
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|IndexSearcher
name|s
init|=
name|newSearcher
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|FacetsConfig
name|config
init|=
operator|new
name|FacetsConfig
argument_list|()
decl_stmt|;
name|int
name|numIters
init|=
name|atLeast
argument_list|(
literal|10
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|iter
init|=
literal|0
init|;
name|iter
operator|<
name|numIters
condition|;
name|iter
operator|++
control|)
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TEST: iter="
operator|+
name|iter
argument_list|)
expr_stmt|;
block|}
name|int
name|numRange
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|LongRange
index|[]
name|ranges
init|=
operator|new
name|LongRange
index|[
name|numRange
index|]
decl_stmt|;
name|int
index|[]
name|expectedCounts
init|=
operator|new
name|int
index|[
name|numRange
index|]
decl_stmt|;
name|long
name|minAcceptedValue
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
name|long
name|maxAcceptedValue
init|=
name|Long
operator|.
name|MIN_VALUE
decl_stmt|;
for|for
control|(
name|int
name|rangeID
init|=
literal|0
init|;
name|rangeID
operator|<
name|numRange
condition|;
name|rangeID
operator|++
control|)
block|{
name|long
name|min
decl_stmt|;
if|if
condition|(
name|rangeID
operator|>
literal|0
operator|&&
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
operator|==
literal|7
condition|)
block|{
comment|// Use an existing boundary:
name|LongRange
name|prevRange
init|=
name|ranges
index|[
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|rangeID
argument_list|)
index|]
decl_stmt|;
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|min
operator|=
name|prevRange
operator|.
name|min
expr_stmt|;
block|}
else|else
block|{
name|min
operator|=
name|prevRange
operator|.
name|max
expr_stmt|;
block|}
block|}
else|else
block|{
name|min
operator|=
name|random
argument_list|()
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
name|long
name|max
decl_stmt|;
if|if
condition|(
name|rangeID
operator|>
literal|0
operator|&&
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
operator|==
literal|7
condition|)
block|{
comment|// Use an existing boundary:
name|LongRange
name|prevRange
init|=
name|ranges
index|[
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|rangeID
argument_list|)
index|]
decl_stmt|;
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|max
operator|=
name|prevRange
operator|.
name|min
expr_stmt|;
block|}
else|else
block|{
name|max
operator|=
name|prevRange
operator|.
name|max
expr_stmt|;
block|}
block|}
else|else
block|{
name|max
operator|=
name|random
argument_list|()
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|min
operator|>
name|max
condition|)
block|{
name|long
name|x
init|=
name|min
decl_stmt|;
name|min
operator|=
name|max
expr_stmt|;
name|max
operator|=
name|x
expr_stmt|;
block|}
name|boolean
name|minIncl
decl_stmt|;
name|boolean
name|maxIncl
decl_stmt|;
if|if
condition|(
name|min
operator|==
name|max
condition|)
block|{
name|minIncl
operator|=
literal|true
expr_stmt|;
name|maxIncl
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|minIncl
operator|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
expr_stmt|;
name|maxIncl
operator|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
expr_stmt|;
block|}
name|ranges
index|[
name|rangeID
index|]
operator|=
operator|new
name|LongRange
argument_list|(
literal|"r"
operator|+
name|rangeID
argument_list|,
name|min
argument_list|,
name|minIncl
argument_list|,
name|max
argument_list|,
name|maxIncl
argument_list|)
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  range "
operator|+
name|rangeID
operator|+
literal|": "
operator|+
name|ranges
index|[
name|rangeID
index|]
argument_list|)
expr_stmt|;
block|}
comment|// Do "slow but hopefully correct" computation of
comment|// expected count:
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
name|i
operator|++
control|)
block|{
name|boolean
name|accept
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|minIncl
condition|)
block|{
name|accept
operator|&=
name|values
index|[
name|i
index|]
operator|>=
name|min
expr_stmt|;
block|}
else|else
block|{
name|accept
operator|&=
name|values
index|[
name|i
index|]
operator|>
name|min
expr_stmt|;
block|}
if|if
condition|(
name|maxIncl
condition|)
block|{
name|accept
operator|&=
name|values
index|[
name|i
index|]
operator|<=
name|max
expr_stmt|;
block|}
else|else
block|{
name|accept
operator|&=
name|values
index|[
name|i
index|]
operator|<
name|max
expr_stmt|;
block|}
if|if
condition|(
name|accept
condition|)
block|{
name|expectedCounts
index|[
name|rangeID
index|]
operator|++
expr_stmt|;
name|minAcceptedValue
operator|=
name|Math
operator|.
name|min
argument_list|(
name|minAcceptedValue
argument_list|,
name|values
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|maxAcceptedValue
operator|=
name|Math
operator|.
name|max
argument_list|(
name|maxAcceptedValue
argument_list|,
name|values
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|FacetsCollector
name|sfc
init|=
operator|new
name|FacetsCollector
argument_list|()
decl_stmt|;
name|s
operator|.
name|search
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
name|sfc
argument_list|)
expr_stmt|;
name|Query
name|fastMatchQuery
decl_stmt|;
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|fastMatchQuery
operator|=
name|PointRangeQuery
operator|.
name|newLongRange
argument_list|(
literal|"field"
argument_list|,
name|minValue
argument_list|,
literal|true
argument_list|,
name|maxValue
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fastMatchQuery
operator|=
name|PointRangeQuery
operator|.
name|newLongRange
argument_list|(
literal|"field"
argument_list|,
name|minAcceptedValue
argument_list|,
literal|true
argument_list|,
name|maxAcceptedValue
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|fastMatchQuery
operator|=
literal|null
expr_stmt|;
block|}
name|ValueSource
name|vs
init|=
operator|new
name|LongFieldSource
argument_list|(
literal|"field"
argument_list|)
decl_stmt|;
name|Facets
name|facets
init|=
operator|new
name|LongRangeFacetCounts
argument_list|(
literal|"field"
argument_list|,
name|vs
argument_list|,
name|sfc
argument_list|,
name|fastMatchQuery
argument_list|,
name|ranges
argument_list|)
decl_stmt|;
name|FacetResult
name|result
init|=
name|facets
operator|.
name|getTopChildren
argument_list|(
literal|10
argument_list|,
literal|"field"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|numRange
argument_list|,
name|result
operator|.
name|labelValues
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|rangeID
init|=
literal|0
init|;
name|rangeID
operator|<
name|numRange
condition|;
name|rangeID
operator|++
control|)
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  range "
operator|+
name|rangeID
operator|+
literal|" expectedCount="
operator|+
name|expectedCounts
index|[
name|rangeID
index|]
argument_list|)
expr_stmt|;
block|}
name|LabelAndValue
name|subNode
init|=
name|result
operator|.
name|labelValues
index|[
name|rangeID
index|]
decl_stmt|;
name|assertEquals
argument_list|(
literal|"r"
operator|+
name|rangeID
argument_list|,
name|subNode
operator|.
name|label
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedCounts
index|[
name|rangeID
index|]
argument_list|,
name|subNode
operator|.
name|value
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|LongRange
name|range
init|=
name|ranges
index|[
name|rangeID
index|]
decl_stmt|;
comment|// Test drill-down:
name|DrillDownQuery
name|ddq
init|=
operator|new
name|DrillDownQuery
argument_list|(
name|config
argument_list|)
decl_stmt|;
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|ddq
operator|.
name|add
argument_list|(
literal|"field"
argument_list|,
name|PointRangeQuery
operator|.
name|newLongRange
argument_list|(
literal|"field"
argument_list|,
name|range
operator|.
name|min
argument_list|,
name|range
operator|.
name|minInclusive
argument_list|,
name|range
operator|.
name|max
argument_list|,
name|range
operator|.
name|maxInclusive
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ddq
operator|.
name|add
argument_list|(
literal|"field"
argument_list|,
name|range
operator|.
name|getQuery
argument_list|(
name|fastMatchQuery
argument_list|,
name|vs
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|expectedCounts
index|[
name|rangeID
index|]
argument_list|,
name|s
operator|.
name|search
argument_list|(
name|ddq
argument_list|,
literal|10
argument_list|)
operator|.
name|totalHits
argument_list|)
expr_stmt|;
block|}
block|}
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|IOUtils
operator|.
name|close
argument_list|(
name|r
argument_list|,
name|dir
argument_list|)
expr_stmt|;
block|}
DECL|method|testRandomFloats
specifier|public
name|void
name|testRandomFloats
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|RandomIndexWriter
name|w
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|)
decl_stmt|;
name|int
name|numDocs
init|=
name|atLeast
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
name|float
index|[]
name|values
init|=
operator|new
name|float
index|[
name|numDocs
index|]
decl_stmt|;
name|float
name|minValue
init|=
name|Float
operator|.
name|POSITIVE_INFINITY
decl_stmt|;
name|float
name|maxValue
init|=
name|Float
operator|.
name|NEGATIVE_INFINITY
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
name|i
operator|++
control|)
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|float
name|v
init|=
name|random
argument_list|()
operator|.
name|nextFloat
argument_list|()
decl_stmt|;
name|values
index|[
name|i
index|]
operator|=
name|v
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|FloatDocValuesField
argument_list|(
literal|"field"
argument_list|,
name|v
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|FloatPoint
argument_list|(
literal|"field"
argument_list|,
name|v
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|minValue
operator|=
name|Math
operator|.
name|min
argument_list|(
name|minValue
argument_list|,
name|v
argument_list|)
expr_stmt|;
name|maxValue
operator|=
name|Math
operator|.
name|max
argument_list|(
name|maxValue
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
name|IndexReader
name|r
init|=
name|w
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|IndexSearcher
name|s
init|=
name|newSearcher
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|FacetsConfig
name|config
init|=
operator|new
name|FacetsConfig
argument_list|()
decl_stmt|;
name|int
name|numIters
init|=
name|atLeast
argument_list|(
literal|10
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|iter
init|=
literal|0
init|;
name|iter
operator|<
name|numIters
condition|;
name|iter
operator|++
control|)
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TEST: iter="
operator|+
name|iter
argument_list|)
expr_stmt|;
block|}
name|int
name|numRange
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|DoubleRange
index|[]
name|ranges
init|=
operator|new
name|DoubleRange
index|[
name|numRange
index|]
decl_stmt|;
name|int
index|[]
name|expectedCounts
init|=
operator|new
name|int
index|[
name|numRange
index|]
decl_stmt|;
name|float
name|minAcceptedValue
init|=
name|Float
operator|.
name|POSITIVE_INFINITY
decl_stmt|;
name|float
name|maxAcceptedValue
init|=
name|Float
operator|.
name|NEGATIVE_INFINITY
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TEST: "
operator|+
name|numRange
operator|+
literal|" ranges"
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|rangeID
init|=
literal|0
init|;
name|rangeID
operator|<
name|numRange
condition|;
name|rangeID
operator|++
control|)
block|{
name|double
name|min
decl_stmt|;
if|if
condition|(
name|rangeID
operator|>
literal|0
operator|&&
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
operator|==
literal|7
condition|)
block|{
comment|// Use an existing boundary:
name|DoubleRange
name|prevRange
init|=
name|ranges
index|[
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|rangeID
argument_list|)
index|]
decl_stmt|;
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|min
operator|=
name|prevRange
operator|.
name|min
expr_stmt|;
block|}
else|else
block|{
name|min
operator|=
name|prevRange
operator|.
name|max
expr_stmt|;
block|}
block|}
else|else
block|{
name|min
operator|=
name|random
argument_list|()
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
name|double
name|max
decl_stmt|;
if|if
condition|(
name|rangeID
operator|>
literal|0
operator|&&
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
operator|==
literal|7
condition|)
block|{
comment|// Use an existing boundary:
name|DoubleRange
name|prevRange
init|=
name|ranges
index|[
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|rangeID
argument_list|)
index|]
decl_stmt|;
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|max
operator|=
name|prevRange
operator|.
name|min
expr_stmt|;
block|}
else|else
block|{
name|max
operator|=
name|prevRange
operator|.
name|max
expr_stmt|;
block|}
block|}
else|else
block|{
name|max
operator|=
name|random
argument_list|()
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|min
operator|>
name|max
condition|)
block|{
name|double
name|x
init|=
name|min
decl_stmt|;
name|min
operator|=
name|max
expr_stmt|;
name|max
operator|=
name|x
expr_stmt|;
block|}
comment|// Must truncate to float precision so that the
comment|// drill-down counts (which use NRQ.newFloatRange)
comment|// are correct:
name|min
operator|=
operator|(
name|float
operator|)
name|min
expr_stmt|;
name|max
operator|=
operator|(
name|float
operator|)
name|max
expr_stmt|;
name|boolean
name|minIncl
decl_stmt|;
name|boolean
name|maxIncl
decl_stmt|;
if|if
condition|(
name|min
operator|==
name|max
condition|)
block|{
name|minIncl
operator|=
literal|true
expr_stmt|;
name|maxIncl
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|minIncl
operator|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
expr_stmt|;
name|maxIncl
operator|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
expr_stmt|;
block|}
name|ranges
index|[
name|rangeID
index|]
operator|=
operator|new
name|DoubleRange
argument_list|(
literal|"r"
operator|+
name|rangeID
argument_list|,
name|min
argument_list|,
name|minIncl
argument_list|,
name|max
argument_list|,
name|maxIncl
argument_list|)
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TEST:   range "
operator|+
name|rangeID
operator|+
literal|": "
operator|+
name|ranges
index|[
name|rangeID
index|]
argument_list|)
expr_stmt|;
block|}
comment|// Do "slow but hopefully correct" computation of
comment|// expected count:
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
name|i
operator|++
control|)
block|{
name|boolean
name|accept
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|minIncl
condition|)
block|{
name|accept
operator|&=
name|values
index|[
name|i
index|]
operator|>=
name|min
expr_stmt|;
block|}
else|else
block|{
name|accept
operator|&=
name|values
index|[
name|i
index|]
operator|>
name|min
expr_stmt|;
block|}
if|if
condition|(
name|maxIncl
condition|)
block|{
name|accept
operator|&=
name|values
index|[
name|i
index|]
operator|<=
name|max
expr_stmt|;
block|}
else|else
block|{
name|accept
operator|&=
name|values
index|[
name|i
index|]
operator|<
name|max
expr_stmt|;
block|}
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TEST:   check doc="
operator|+
name|i
operator|+
literal|" val="
operator|+
name|values
index|[
name|i
index|]
operator|+
literal|" accept="
operator|+
name|accept
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|accept
condition|)
block|{
name|expectedCounts
index|[
name|rangeID
index|]
operator|++
expr_stmt|;
name|minAcceptedValue
operator|=
name|Math
operator|.
name|min
argument_list|(
name|minAcceptedValue
argument_list|,
name|values
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|maxAcceptedValue
operator|=
name|Math
operator|.
name|max
argument_list|(
name|maxAcceptedValue
argument_list|,
name|values
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|FacetsCollector
name|sfc
init|=
operator|new
name|FacetsCollector
argument_list|()
decl_stmt|;
name|s
operator|.
name|search
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
name|sfc
argument_list|)
expr_stmt|;
name|Query
name|fastMatchQuery
decl_stmt|;
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|fastMatchQuery
operator|=
name|PointRangeQuery
operator|.
name|newFloatRange
argument_list|(
literal|"field"
argument_list|,
name|minValue
argument_list|,
literal|true
argument_list|,
name|maxValue
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fastMatchQuery
operator|=
name|PointRangeQuery
operator|.
name|newFloatRange
argument_list|(
literal|"field"
argument_list|,
name|minAcceptedValue
argument_list|,
literal|true
argument_list|,
name|maxAcceptedValue
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|fastMatchQuery
operator|=
literal|null
expr_stmt|;
block|}
name|ValueSource
name|vs
init|=
operator|new
name|FloatFieldSource
argument_list|(
literal|"field"
argument_list|)
decl_stmt|;
name|Facets
name|facets
init|=
operator|new
name|DoubleRangeFacetCounts
argument_list|(
literal|"field"
argument_list|,
name|vs
argument_list|,
name|sfc
argument_list|,
name|fastMatchQuery
argument_list|,
name|ranges
argument_list|)
decl_stmt|;
name|FacetResult
name|result
init|=
name|facets
operator|.
name|getTopChildren
argument_list|(
literal|10
argument_list|,
literal|"field"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|numRange
argument_list|,
name|result
operator|.
name|labelValues
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|rangeID
init|=
literal|0
init|;
name|rangeID
operator|<
name|numRange
condition|;
name|rangeID
operator|++
control|)
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TEST: verify range "
operator|+
name|rangeID
operator|+
literal|" expectedCount="
operator|+
name|expectedCounts
index|[
name|rangeID
index|]
argument_list|)
expr_stmt|;
block|}
name|LabelAndValue
name|subNode
init|=
name|result
operator|.
name|labelValues
index|[
name|rangeID
index|]
decl_stmt|;
name|assertEquals
argument_list|(
literal|"r"
operator|+
name|rangeID
argument_list|,
name|subNode
operator|.
name|label
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedCounts
index|[
name|rangeID
index|]
argument_list|,
name|subNode
operator|.
name|value
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|DoubleRange
name|range
init|=
name|ranges
index|[
name|rangeID
index|]
decl_stmt|;
comment|// Test drill-down:
name|DrillDownQuery
name|ddq
init|=
operator|new
name|DrillDownQuery
argument_list|(
name|config
argument_list|)
decl_stmt|;
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|ddq
operator|.
name|add
argument_list|(
literal|"field"
argument_list|,
name|PointRangeQuery
operator|.
name|newFloatRange
argument_list|(
literal|"field"
argument_list|,
operator|(
name|float
operator|)
name|range
operator|.
name|min
argument_list|,
name|range
operator|.
name|minInclusive
argument_list|,
operator|(
name|float
operator|)
name|range
operator|.
name|max
argument_list|,
name|range
operator|.
name|maxInclusive
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ddq
operator|.
name|add
argument_list|(
literal|"field"
argument_list|,
name|range
operator|.
name|getQuery
argument_list|(
name|fastMatchQuery
argument_list|,
name|vs
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|expectedCounts
index|[
name|rangeID
index|]
argument_list|,
name|s
operator|.
name|search
argument_list|(
name|ddq
argument_list|,
literal|10
argument_list|)
operator|.
name|totalHits
argument_list|)
expr_stmt|;
block|}
block|}
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|IOUtils
operator|.
name|close
argument_list|(
name|r
argument_list|,
name|dir
argument_list|)
expr_stmt|;
block|}
DECL|method|testRandomDoubles
specifier|public
name|void
name|testRandomDoubles
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|RandomIndexWriter
name|w
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|)
decl_stmt|;
name|int
name|numDocs
init|=
name|atLeast
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
name|double
index|[]
name|values
init|=
operator|new
name|double
index|[
name|numDocs
index|]
decl_stmt|;
name|double
name|minValue
init|=
name|Double
operator|.
name|POSITIVE_INFINITY
decl_stmt|;
name|double
name|maxValue
init|=
name|Double
operator|.
name|NEGATIVE_INFINITY
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
name|i
operator|++
control|)
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|double
name|v
init|=
name|random
argument_list|()
operator|.
name|nextDouble
argument_list|()
decl_stmt|;
name|values
index|[
name|i
index|]
operator|=
name|v
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|DoubleDocValuesField
argument_list|(
literal|"field"
argument_list|,
name|v
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|DoublePoint
argument_list|(
literal|"field"
argument_list|,
name|v
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|minValue
operator|=
name|Math
operator|.
name|min
argument_list|(
name|minValue
argument_list|,
name|v
argument_list|)
expr_stmt|;
name|maxValue
operator|=
name|Math
operator|.
name|max
argument_list|(
name|maxValue
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
name|IndexReader
name|r
init|=
name|w
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|IndexSearcher
name|s
init|=
name|newSearcher
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|FacetsConfig
name|config
init|=
operator|new
name|FacetsConfig
argument_list|()
decl_stmt|;
name|int
name|numIters
init|=
name|atLeast
argument_list|(
literal|10
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|iter
init|=
literal|0
init|;
name|iter
operator|<
name|numIters
condition|;
name|iter
operator|++
control|)
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TEST: iter="
operator|+
name|iter
argument_list|)
expr_stmt|;
block|}
name|int
name|numRange
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|DoubleRange
index|[]
name|ranges
init|=
operator|new
name|DoubleRange
index|[
name|numRange
index|]
decl_stmt|;
name|int
index|[]
name|expectedCounts
init|=
operator|new
name|int
index|[
name|numRange
index|]
decl_stmt|;
name|double
name|minAcceptedValue
init|=
name|Double
operator|.
name|POSITIVE_INFINITY
decl_stmt|;
name|double
name|maxAcceptedValue
init|=
name|Double
operator|.
name|NEGATIVE_INFINITY
decl_stmt|;
for|for
control|(
name|int
name|rangeID
init|=
literal|0
init|;
name|rangeID
operator|<
name|numRange
condition|;
name|rangeID
operator|++
control|)
block|{
name|double
name|min
decl_stmt|;
if|if
condition|(
name|rangeID
operator|>
literal|0
operator|&&
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
operator|==
literal|7
condition|)
block|{
comment|// Use an existing boundary:
name|DoubleRange
name|prevRange
init|=
name|ranges
index|[
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|rangeID
argument_list|)
index|]
decl_stmt|;
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|min
operator|=
name|prevRange
operator|.
name|min
expr_stmt|;
block|}
else|else
block|{
name|min
operator|=
name|prevRange
operator|.
name|max
expr_stmt|;
block|}
block|}
else|else
block|{
name|min
operator|=
name|random
argument_list|()
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
name|double
name|max
decl_stmt|;
if|if
condition|(
name|rangeID
operator|>
literal|0
operator|&&
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
operator|==
literal|7
condition|)
block|{
comment|// Use an existing boundary:
name|DoubleRange
name|prevRange
init|=
name|ranges
index|[
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|rangeID
argument_list|)
index|]
decl_stmt|;
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|max
operator|=
name|prevRange
operator|.
name|min
expr_stmt|;
block|}
else|else
block|{
name|max
operator|=
name|prevRange
operator|.
name|max
expr_stmt|;
block|}
block|}
else|else
block|{
name|max
operator|=
name|random
argument_list|()
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|min
operator|>
name|max
condition|)
block|{
name|double
name|x
init|=
name|min
decl_stmt|;
name|min
operator|=
name|max
expr_stmt|;
name|max
operator|=
name|x
expr_stmt|;
block|}
name|boolean
name|minIncl
decl_stmt|;
name|boolean
name|maxIncl
decl_stmt|;
if|if
condition|(
name|min
operator|==
name|max
condition|)
block|{
name|minIncl
operator|=
literal|true
expr_stmt|;
name|maxIncl
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|minIncl
operator|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
expr_stmt|;
name|maxIncl
operator|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
expr_stmt|;
block|}
name|ranges
index|[
name|rangeID
index|]
operator|=
operator|new
name|DoubleRange
argument_list|(
literal|"r"
operator|+
name|rangeID
argument_list|,
name|min
argument_list|,
name|minIncl
argument_list|,
name|max
argument_list|,
name|maxIncl
argument_list|)
expr_stmt|;
comment|// Do "slow but hopefully correct" computation of
comment|// expected count:
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
name|i
operator|++
control|)
block|{
name|boolean
name|accept
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|minIncl
condition|)
block|{
name|accept
operator|&=
name|values
index|[
name|i
index|]
operator|>=
name|min
expr_stmt|;
block|}
else|else
block|{
name|accept
operator|&=
name|values
index|[
name|i
index|]
operator|>
name|min
expr_stmt|;
block|}
if|if
condition|(
name|maxIncl
condition|)
block|{
name|accept
operator|&=
name|values
index|[
name|i
index|]
operator|<=
name|max
expr_stmt|;
block|}
else|else
block|{
name|accept
operator|&=
name|values
index|[
name|i
index|]
operator|<
name|max
expr_stmt|;
block|}
if|if
condition|(
name|accept
condition|)
block|{
name|expectedCounts
index|[
name|rangeID
index|]
operator|++
expr_stmt|;
name|minAcceptedValue
operator|=
name|Math
operator|.
name|min
argument_list|(
name|minAcceptedValue
argument_list|,
name|values
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|maxAcceptedValue
operator|=
name|Math
operator|.
name|max
argument_list|(
name|maxAcceptedValue
argument_list|,
name|values
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|FacetsCollector
name|sfc
init|=
operator|new
name|FacetsCollector
argument_list|()
decl_stmt|;
name|s
operator|.
name|search
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
name|sfc
argument_list|)
expr_stmt|;
name|Query
name|fastMatchFilter
decl_stmt|;
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|fastMatchFilter
operator|=
name|PointRangeQuery
operator|.
name|newDoubleRange
argument_list|(
literal|"field"
argument_list|,
name|minValue
argument_list|,
literal|true
argument_list|,
name|maxValue
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fastMatchFilter
operator|=
name|PointRangeQuery
operator|.
name|newDoubleRange
argument_list|(
literal|"field"
argument_list|,
name|minAcceptedValue
argument_list|,
literal|true
argument_list|,
name|maxAcceptedValue
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|fastMatchFilter
operator|=
literal|null
expr_stmt|;
block|}
name|ValueSource
name|vs
init|=
operator|new
name|DoubleFieldSource
argument_list|(
literal|"field"
argument_list|)
decl_stmt|;
name|Facets
name|facets
init|=
operator|new
name|DoubleRangeFacetCounts
argument_list|(
literal|"field"
argument_list|,
name|vs
argument_list|,
name|sfc
argument_list|,
name|fastMatchFilter
argument_list|,
name|ranges
argument_list|)
decl_stmt|;
name|FacetResult
name|result
init|=
name|facets
operator|.
name|getTopChildren
argument_list|(
literal|10
argument_list|,
literal|"field"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|numRange
argument_list|,
name|result
operator|.
name|labelValues
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|rangeID
init|=
literal|0
init|;
name|rangeID
operator|<
name|numRange
condition|;
name|rangeID
operator|++
control|)
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  range "
operator|+
name|rangeID
operator|+
literal|" expectedCount="
operator|+
name|expectedCounts
index|[
name|rangeID
index|]
argument_list|)
expr_stmt|;
block|}
name|LabelAndValue
name|subNode
init|=
name|result
operator|.
name|labelValues
index|[
name|rangeID
index|]
decl_stmt|;
name|assertEquals
argument_list|(
literal|"r"
operator|+
name|rangeID
argument_list|,
name|subNode
operator|.
name|label
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedCounts
index|[
name|rangeID
index|]
argument_list|,
name|subNode
operator|.
name|value
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|DoubleRange
name|range
init|=
name|ranges
index|[
name|rangeID
index|]
decl_stmt|;
comment|// Test drill-down:
name|DrillDownQuery
name|ddq
init|=
operator|new
name|DrillDownQuery
argument_list|(
name|config
argument_list|)
decl_stmt|;
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|ddq
operator|.
name|add
argument_list|(
literal|"field"
argument_list|,
name|PointRangeQuery
operator|.
name|newDoubleRange
argument_list|(
literal|"field"
argument_list|,
name|range
operator|.
name|min
argument_list|,
name|range
operator|.
name|minInclusive
argument_list|,
name|range
operator|.
name|max
argument_list|,
name|range
operator|.
name|maxInclusive
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ddq
operator|.
name|add
argument_list|(
literal|"field"
argument_list|,
name|range
operator|.
name|getQuery
argument_list|(
name|fastMatchFilter
argument_list|,
name|vs
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|expectedCounts
index|[
name|rangeID
index|]
argument_list|,
name|s
operator|.
name|search
argument_list|(
name|ddq
argument_list|,
literal|10
argument_list|)
operator|.
name|totalHits
argument_list|)
expr_stmt|;
block|}
block|}
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|IOUtils
operator|.
name|close
argument_list|(
name|r
argument_list|,
name|dir
argument_list|)
expr_stmt|;
block|}
comment|// LUCENE-5178
DECL|method|testMissingValues
specifier|public
name|void
name|testMissingValues
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|d
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|RandomIndexWriter
name|w
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|d
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|NumericDocValuesField
name|field
init|=
operator|new
name|NumericDocValuesField
argument_list|(
literal|"field"
argument_list|,
literal|0L
argument_list|)
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|field
argument_list|)
expr_stmt|;
for|for
control|(
name|long
name|l
init|=
literal|0
init|;
name|l
operator|<
literal|100
condition|;
name|l
operator|++
control|)
block|{
if|if
condition|(
name|l
operator|%
literal|5
operator|==
literal|0
condition|)
block|{
comment|// Every 5th doc is missing the value:
name|w
operator|.
name|addDocument
argument_list|(
operator|new
name|Document
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|field
operator|.
name|setLongValue
argument_list|(
name|l
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
name|IndexReader
name|r
init|=
name|w
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|FacetsCollector
name|fc
init|=
operator|new
name|FacetsCollector
argument_list|()
decl_stmt|;
name|IndexSearcher
name|s
init|=
name|newSearcher
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|s
operator|.
name|search
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
name|fc
argument_list|)
expr_stmt|;
name|Facets
name|facets
init|=
operator|new
name|LongRangeFacetCounts
argument_list|(
literal|"field"
argument_list|,
name|fc
argument_list|,
operator|new
name|LongRange
argument_list|(
literal|"less than 10"
argument_list|,
literal|0L
argument_list|,
literal|true
argument_list|,
literal|10L
argument_list|,
literal|false
argument_list|)
argument_list|,
operator|new
name|LongRange
argument_list|(
literal|"less than or equal to 10"
argument_list|,
literal|0L
argument_list|,
literal|true
argument_list|,
literal|10L
argument_list|,
literal|true
argument_list|)
argument_list|,
operator|new
name|LongRange
argument_list|(
literal|"over 90"
argument_list|,
literal|90L
argument_list|,
literal|false
argument_list|,
literal|100L
argument_list|,
literal|false
argument_list|)
argument_list|,
operator|new
name|LongRange
argument_list|(
literal|"90 or above"
argument_list|,
literal|90L
argument_list|,
literal|true
argument_list|,
literal|100L
argument_list|,
literal|false
argument_list|)
argument_list|,
operator|new
name|LongRange
argument_list|(
literal|"over 1000"
argument_list|,
literal|1000L
argument_list|,
literal|false
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|,
literal|false
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"dim=field path=[] value=16 childCount=5\n  less than 10 (8)\n  less than or equal to 10 (8)\n  over 90 (8)\n  90 or above (8)\n  over 1000 (0)\n"
argument_list|,
name|facets
operator|.
name|getTopChildren
argument_list|(
literal|10
argument_list|,
literal|"field"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|IOUtils
operator|.
name|close
argument_list|(
name|r
argument_list|,
name|d
argument_list|)
expr_stmt|;
block|}
DECL|class|UsedQuery
specifier|private
specifier|static
class|class
name|UsedQuery
extends|extends
name|Query
block|{
DECL|field|used
specifier|private
specifier|final
name|AtomicBoolean
name|used
decl_stmt|;
DECL|field|in
specifier|private
specifier|final
name|Query
name|in
decl_stmt|;
DECL|method|UsedQuery
name|UsedQuery
parameter_list|(
name|Query
name|in
parameter_list|,
name|AtomicBoolean
name|used
parameter_list|)
block|{
name|this
operator|.
name|in
operator|=
name|in
expr_stmt|;
name|this
operator|.
name|used
operator|=
name|used
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|super
operator|.
name|equals
argument_list|(
name|obj
argument_list|)
operator|==
literal|false
condition|)
block|{
return|return
literal|false
return|;
block|}
name|UsedQuery
name|that
init|=
operator|(
name|UsedQuery
operator|)
name|obj
decl_stmt|;
return|return
name|in
operator|.
name|equals
argument_list|(
name|that
operator|.
name|in
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|31
operator|*
name|super
operator|.
name|hashCode
argument_list|()
operator|+
name|in
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|rewrite
specifier|public
name|Query
name|rewrite
parameter_list|(
name|IndexReader
name|reader
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Query
name|inRewritten
init|=
name|in
operator|.
name|rewrite
argument_list|(
name|reader
argument_list|)
decl_stmt|;
if|if
condition|(
name|in
operator|!=
name|inRewritten
condition|)
block|{
return|return
operator|new
name|UsedQuery
argument_list|(
name|inRewritten
argument_list|,
name|used
argument_list|)
return|;
block|}
return|return
name|super
operator|.
name|rewrite
argument_list|(
name|reader
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|createWeight
specifier|public
name|Weight
name|createWeight
parameter_list|(
name|IndexSearcher
name|searcher
parameter_list|,
name|boolean
name|needsScores
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Weight
name|in
init|=
name|this
operator|.
name|in
operator|.
name|createWeight
argument_list|(
name|searcher
argument_list|,
name|needsScores
argument_list|)
decl_stmt|;
return|return
operator|new
name|Weight
argument_list|(
name|in
operator|.
name|getQuery
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|extractTerms
parameter_list|(
name|Set
argument_list|<
name|Term
argument_list|>
name|terms
parameter_list|)
block|{
name|in
operator|.
name|extractTerms
argument_list|(
name|terms
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Explanation
name|explain
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|,
name|int
name|doc
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|in
operator|.
name|explain
argument_list|(
name|context
argument_list|,
name|doc
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|float
name|getValueForNormalization
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|in
operator|.
name|getValueForNormalization
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|normalize
parameter_list|(
name|float
name|norm
parameter_list|,
name|float
name|topLevelBoost
parameter_list|)
block|{
name|in
operator|.
name|normalize
argument_list|(
name|norm
argument_list|,
name|topLevelBoost
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Scorer
name|scorer
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|used
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|in
operator|.
name|scorer
argument_list|(
name|context
argument_list|)
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|(
name|String
name|field
parameter_list|)
block|{
return|return
literal|"UsedQuery("
operator|+
name|in
operator|+
literal|")"
return|;
block|}
block|}
DECL|method|testCustomDoublesValueSource
specifier|public
name|void
name|testCustomDoublesValueSource
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|RandomIndexWriter
name|writer
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
comment|// Test wants 3 docs in one segment:
name|writer
operator|.
name|forceMerge
argument_list|(
literal|1
argument_list|)
expr_stmt|;
specifier|final
name|ValueSource
name|vs
init|=
operator|new
name|ValueSource
argument_list|()
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
annotation|@
name|Override
specifier|public
name|FunctionValues
name|getValues
parameter_list|(
name|Map
name|ignored
parameter_list|,
name|LeafReaderContext
name|ignored2
parameter_list|)
block|{
return|return
operator|new
name|DoubleDocValues
argument_list|(
literal|null
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|double
name|doubleVal
parameter_list|(
name|int
name|doc
parameter_list|)
block|{
return|return
name|doc
operator|+
literal|1
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
name|o
operator|!=
literal|null
operator|&&
name|getClass
argument_list|()
operator|==
name|o
operator|.
name|getClass
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|getClass
argument_list|()
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|description
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
decl_stmt|;
name|FacetsConfig
name|config
init|=
operator|new
name|FacetsConfig
argument_list|()
decl_stmt|;
name|FacetsCollector
name|fc
init|=
operator|new
name|FacetsCollector
argument_list|()
decl_stmt|;
name|IndexReader
name|r
init|=
name|writer
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|IndexSearcher
name|s
init|=
name|newSearcher
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|s
operator|.
name|search
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
name|fc
argument_list|)
expr_stmt|;
specifier|final
name|DoubleRange
index|[]
name|ranges
init|=
operator|new
name|DoubleRange
index|[]
block|{
operator|new
name|DoubleRange
argument_list|(
literal|"< 1"
argument_list|,
literal|0.0
argument_list|,
literal|true
argument_list|,
literal|1.0
argument_list|,
literal|false
argument_list|)
block|,
operator|new
name|DoubleRange
argument_list|(
literal|"< 2"
argument_list|,
literal|0.0
argument_list|,
literal|true
argument_list|,
literal|2.0
argument_list|,
literal|false
argument_list|)
block|,
operator|new
name|DoubleRange
argument_list|(
literal|"< 5"
argument_list|,
literal|0.0
argument_list|,
literal|true
argument_list|,
literal|5.0
argument_list|,
literal|false
argument_list|)
block|,
operator|new
name|DoubleRange
argument_list|(
literal|"< 10"
argument_list|,
literal|0.0
argument_list|,
literal|true
argument_list|,
literal|10.0
argument_list|,
literal|false
argument_list|)
block|,
operator|new
name|DoubleRange
argument_list|(
literal|"< 20"
argument_list|,
literal|0.0
argument_list|,
literal|true
argument_list|,
literal|20.0
argument_list|,
literal|false
argument_list|)
block|,
operator|new
name|DoubleRange
argument_list|(
literal|"< 50"
argument_list|,
literal|0.0
argument_list|,
literal|true
argument_list|,
literal|50.0
argument_list|,
literal|false
argument_list|)
block|}
decl_stmt|;
specifier|final
name|Query
name|fastMatchFilter
decl_stmt|;
specifier|final
name|AtomicBoolean
name|filterWasUsed
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
comment|// Sort of silly:
specifier|final
name|Query
name|in
init|=
operator|new
name|MatchAllDocsQuery
argument_list|()
decl_stmt|;
name|fastMatchFilter
operator|=
operator|new
name|UsedQuery
argument_list|(
name|in
argument_list|,
name|filterWasUsed
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fastMatchFilter
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TEST: fastMatchFilter="
operator|+
name|fastMatchFilter
argument_list|)
expr_stmt|;
block|}
name|Facets
name|facets
init|=
operator|new
name|DoubleRangeFacetCounts
argument_list|(
literal|"field"
argument_list|,
name|vs
argument_list|,
name|fc
argument_list|,
name|fastMatchFilter
argument_list|,
name|ranges
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"dim=field path=[] value=3 childCount=6\n< 1 (0)\n< 2 (1)\n< 5 (3)\n< 10 (3)\n< 20 (3)\n< 50 (3)\n"
argument_list|,
name|facets
operator|.
name|getTopChildren
argument_list|(
literal|10
argument_list|,
literal|"field"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fastMatchFilter
operator|==
literal|null
operator|||
name|filterWasUsed
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|DrillDownQuery
name|ddq
init|=
operator|new
name|DrillDownQuery
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|ddq
operator|.
name|add
argument_list|(
literal|"field"
argument_list|,
name|ranges
index|[
literal|1
index|]
operator|.
name|getQuery
argument_list|(
name|fastMatchFilter
argument_list|,
name|vs
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test simple drill-down:
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|s
operator|.
name|search
argument_list|(
name|ddq
argument_list|,
literal|10
argument_list|)
operator|.
name|totalHits
argument_list|)
expr_stmt|;
comment|// Test drill-sideways after drill-down
name|DrillSideways
name|ds
init|=
operator|new
name|DrillSideways
argument_list|(
name|s
argument_list|,
name|config
argument_list|,
operator|(
name|TaxonomyReader
operator|)
literal|null
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|Facets
name|buildFacetsResult
parameter_list|(
name|FacetsCollector
name|drillDowns
parameter_list|,
name|FacetsCollector
index|[]
name|drillSideways
parameter_list|,
name|String
index|[]
name|drillSidewaysDims
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|drillSideways
operator|.
name|length
operator|==
literal|1
assert|;
return|return
operator|new
name|DoubleRangeFacetCounts
argument_list|(
literal|"field"
argument_list|,
name|vs
argument_list|,
name|drillSideways
index|[
literal|0
index|]
argument_list|,
name|fastMatchFilter
argument_list|,
name|ranges
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|scoreSubDocsAtOnce
parameter_list|()
block|{
return|return
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
return|;
block|}
block|}
decl_stmt|;
name|DrillSidewaysResult
name|dsr
init|=
name|ds
operator|.
name|search
argument_list|(
name|ddq
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|dsr
operator|.
name|hits
operator|.
name|totalHits
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"dim=field path=[] value=3 childCount=6\n< 1 (0)\n< 2 (1)\n< 5 (3)\n< 10 (3)\n< 20 (3)\n< 50 (3)\n"
argument_list|,
name|dsr
operator|.
name|facets
operator|.
name|getTopChildren
argument_list|(
literal|10
argument_list|,
literal|"field"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|IOUtils
operator|.
name|close
argument_list|(
name|r
argument_list|,
name|dir
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
