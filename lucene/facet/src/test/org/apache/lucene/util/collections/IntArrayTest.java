begin_unit
begin_package
DECL|package|org.apache.lucene.util.collections
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|collections
package|;
end_package
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|collections
operator|.
name|IntArray
import|;
end_import
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_class
DECL|class|IntArrayTest
specifier|public
class|class
name|IntArrayTest
extends|extends
name|LuceneTestCase
block|{
annotation|@
name|Test
DECL|method|test0
specifier|public
name|void
name|test0
parameter_list|()
block|{
name|IntArray
name|array
init|=
operator|new
name|IntArray
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|array
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
operator|++
name|i
control|)
block|{
name|array
operator|.
name|addToArray
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|100
argument_list|,
name|array
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
operator|++
name|i
control|)
block|{
name|assertEquals
argument_list|(
name|i
argument_list|,
name|array
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|array
operator|.
name|equals
argument_list|(
name|array
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|test1
specifier|public
name|void
name|test1
parameter_list|()
block|{
name|IntArray
name|array
init|=
operator|new
name|IntArray
argument_list|()
decl_stmt|;
name|IntArray
name|array2
init|=
operator|new
name|IntArray
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|array
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
operator|++
name|i
control|)
block|{
name|array
operator|.
name|addToArray
argument_list|(
literal|99
operator|-
name|i
argument_list|)
expr_stmt|;
name|array2
operator|.
name|addToArray
argument_list|(
literal|99
operator|-
name|i
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|100
argument_list|,
name|array
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
operator|++
name|i
control|)
block|{
name|assertEquals
argument_list|(
name|i
argument_list|,
name|array
operator|.
name|get
argument_list|(
literal|99
operator|-
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|array
operator|.
name|sort
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
operator|++
name|i
control|)
block|{
name|assertEquals
argument_list|(
name|i
argument_list|,
name|array
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|array
operator|.
name|equals
argument_list|(
name|array2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|test2
specifier|public
name|void
name|test2
parameter_list|()
block|{
name|IntArray
name|array
init|=
operator|new
name|IntArray
argument_list|()
decl_stmt|;
name|IntArray
name|array2
init|=
operator|new
name|IntArray
argument_list|()
decl_stmt|;
name|IntArray
name|array3
init|=
operator|new
name|IntArray
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
operator|++
name|i
control|)
block|{
name|array
operator|.
name|addToArray
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
operator|++
name|i
control|)
block|{
name|array2
operator|.
name|addToArray
argument_list|(
name|i
operator|*
literal|2
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|50
condition|;
operator|++
name|i
control|)
block|{
name|array3
operator|.
name|addToArray
argument_list|(
name|i
operator|*
literal|2
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
name|array
operator|.
name|equals
argument_list|(
name|array2
argument_list|)
argument_list|)
expr_stmt|;
name|array
operator|.
name|intersect
argument_list|(
name|array2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|array
operator|.
name|equals
argument_list|(
name|array3
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|array
operator|.
name|equals
argument_list|(
name|array2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSet
specifier|public
name|void
name|testSet
parameter_list|()
block|{
name|int
index|[]
name|original
init|=
operator|new
name|int
index|[]
block|{
literal|2
block|,
literal|4
block|,
literal|6
block|,
literal|8
block|,
literal|10
block|,
literal|12
block|,
literal|14
block|}
decl_stmt|;
name|int
index|[]
name|toSet
init|=
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|3
block|,
literal|5
block|,
literal|7
block|,
literal|9
block|,
literal|11
block|}
decl_stmt|;
name|IntArray
name|arr
init|=
operator|new
name|IntArray
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|val
range|:
name|original
control|)
block|{
name|arr
operator|.
name|addToArray
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|toSet
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|int
name|val
init|=
name|toSet
index|[
name|i
index|]
decl_stmt|;
name|arr
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
comment|// Test to see if the set worked correctly
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|toSet
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|toSet
index|[
name|i
index|]
argument_list|,
name|arr
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Now attempt to set something outside of the array
try|try
block|{
name|arr
operator|.
name|set
argument_list|(
literal|100
argument_list|,
literal|99
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"IntArray.set should have thrown an exception for attempting to set outside the array"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArrayIndexOutOfBoundsException
name|e
parameter_list|)
block|{
comment|// We expected this to happen so let it fall through
comment|// silently
block|}
block|}
block|}
end_class
end_unit
