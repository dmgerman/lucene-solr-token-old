begin_unit
begin_package
DECL|package|org.apache.lucene.util
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|UnsafeByteArrayOutputStream
import|;
end_import
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_class
DECL|class|UnsafeByteArrayOutputStreamTest
specifier|public
class|class
name|UnsafeByteArrayOutputStreamTest
extends|extends
name|LuceneTestCase
block|{
annotation|@
name|Test
DECL|method|testSimpleWrite
specifier|public
name|void
name|testSimpleWrite
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|length
init|=
literal|100
decl_stmt|;
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
name|length
index|]
decl_stmt|;
name|UnsafeByteArrayOutputStream
name|ubaos
init|=
operator|new
name|UnsafeByteArrayOutputStream
argument_list|(
name|buffer
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|ubaos
operator|.
name|write
argument_list|(
operator|(
name|byte
operator|)
name|i
argument_list|)
expr_stmt|;
block|}
name|byte
index|[]
name|result
init|=
name|ubaos
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|length
argument_list|,
name|ubaos
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|length
condition|;
operator|++
name|j
control|)
block|{
name|assertEquals
argument_list|(
name|result
index|[
name|j
index|]
argument_list|,
name|j
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testArrayWrite
specifier|public
name|void
name|testArrayWrite
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|length
init|=
literal|100
decl_stmt|;
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
name|length
index|]
decl_stmt|;
name|UnsafeByteArrayOutputStream
name|ubaos
init|=
operator|new
name|UnsafeByteArrayOutputStream
argument_list|(
name|buffer
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|ubaos
operator|.
name|write
argument_list|(
operator|(
name|byte
operator|)
name|i
argument_list|)
expr_stmt|;
block|}
name|int
name|length2
init|=
literal|10
decl_stmt|;
name|byte
index|[]
name|buffer2
init|=
operator|new
name|byte
index|[
name|length2
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length2
condition|;
name|i
operator|++
control|)
block|{
name|buffer2
index|[
name|i
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
literal|8
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
name|ubaos
operator|.
name|write
argument_list|(
name|buffer2
argument_list|)
expr_stmt|;
name|byte
index|[]
name|result
init|=
name|ubaos
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|length
operator|+
name|length2
argument_list|,
name|ubaos
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|length
condition|;
operator|++
name|j
control|)
block|{
name|assertEquals
argument_list|(
name|result
index|[
name|j
index|]
argument_list|,
name|j
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|length2
condition|;
operator|++
name|j
control|)
block|{
name|assertEquals
argument_list|(
name|result
index|[
name|j
operator|+
name|length
index|]
argument_list|,
name|buffer2
index|[
name|j
index|]
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testArrayWriteStartNotZero
specifier|public
name|void
name|testArrayWriteStartNotZero
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|length
init|=
literal|100
decl_stmt|;
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
name|length
index|]
decl_stmt|;
name|UnsafeByteArrayOutputStream
name|ubaos
init|=
operator|new
name|UnsafeByteArrayOutputStream
argument_list|(
name|buffer
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|ubaos
operator|.
name|write
argument_list|(
operator|(
name|byte
operator|)
name|i
argument_list|)
expr_stmt|;
block|}
name|int
name|length2
init|=
literal|1000
decl_stmt|;
name|byte
index|[]
name|buffer2
init|=
operator|new
name|byte
index|[
name|length2
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length2
condition|;
name|i
operator|++
control|)
block|{
name|buffer2
index|[
name|i
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
literal|8
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
name|int
name|length3
init|=
literal|5
decl_stmt|;
name|int
name|start
init|=
literal|2
decl_stmt|;
name|ubaos
operator|.
name|write
argument_list|(
name|buffer2
argument_list|,
name|start
argument_list|,
name|length3
argument_list|)
expr_stmt|;
name|byte
index|[]
name|result
init|=
name|ubaos
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|length
operator|+
name|length3
argument_list|,
name|ubaos
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|length
condition|;
operator|++
name|j
control|)
block|{
name|assertEquals
argument_list|(
name|result
index|[
name|j
index|]
argument_list|,
name|j
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|length3
condition|;
operator|++
name|j
control|)
block|{
name|assertEquals
argument_list|(
name|result
index|[
name|j
operator|+
name|length
index|]
argument_list|,
name|buffer2
index|[
name|j
operator|+
name|start
index|]
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testBufferGrow
specifier|public
name|void
name|testBufferGrow
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|length
init|=
literal|100
decl_stmt|;
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
name|length
operator|/
literal|10
index|]
decl_stmt|;
name|UnsafeByteArrayOutputStream
name|ubaos
init|=
operator|new
name|UnsafeByteArrayOutputStream
argument_list|(
name|buffer
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
name|ubaos
operator|.
name|write
argument_list|(
operator|(
name|byte
operator|)
name|i
argument_list|)
expr_stmt|;
block|}
name|byte
index|[]
name|result
init|=
name|ubaos
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|length
argument_list|,
name|ubaos
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|length
condition|;
operator|++
name|j
control|)
block|{
name|assertEquals
argument_list|(
name|result
index|[
name|j
index|]
argument_list|,
name|j
argument_list|)
expr_stmt|;
block|}
name|buffer
operator|=
name|ubaos
operator|.
name|toByteArray
argument_list|()
expr_stmt|;
name|int
name|length2
init|=
literal|10
decl_stmt|;
name|byte
index|[]
name|buffer2
init|=
operator|new
name|byte
index|[
name|length2
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length2
condition|;
name|i
operator|++
control|)
block|{
name|buffer2
index|[
name|i
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
literal|8
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
name|ubaos
operator|.
name|reInit
argument_list|(
name|buffer2
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length2
condition|;
name|i
operator|++
control|)
block|{
name|ubaos
operator|.
name|write
argument_list|(
literal|7
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
name|byte
index|[]
name|result2
init|=
name|ubaos
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|length2
argument_list|,
name|ubaos
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|length2
condition|;
operator|++
name|j
control|)
block|{
name|assertEquals
argument_list|(
name|result2
index|[
name|j
index|]
argument_list|,
name|j
operator|+
literal|7
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|buffer
index|[
name|i
index|]
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testStartPos
specifier|public
name|void
name|testStartPos
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
literal|10
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|buf
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|buf
index|[
name|i
index|]
operator|=
operator|(
name|byte
operator|)
name|i
expr_stmt|;
block|}
name|int
name|startPos
init|=
literal|3
decl_stmt|;
name|UnsafeByteArrayOutputStream
name|ubaos
init|=
operator|new
name|UnsafeByteArrayOutputStream
argument_list|(
name|buf
argument_list|,
name|startPos
argument_list|)
decl_stmt|;
name|int
name|numValues
init|=
literal|5
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numValues
condition|;
name|i
operator|++
control|)
block|{
name|ubaos
operator|.
name|write
argument_list|(
operator|(
name|i
operator|+
literal|1
operator|)
operator|*
literal|2
argument_list|)
expr_stmt|;
block|}
comment|// the length of the buffer should be whatever was written after startPos
comment|// and before that.
name|assertEquals
argument_list|(
literal|"invalid buffer length"
argument_list|,
name|startPos
operator|+
name|numValues
argument_list|,
name|ubaos
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"invalid startPos"
argument_list|,
name|startPos
argument_list|,
name|ubaos
operator|.
name|getStartPos
argument_list|()
argument_list|)
expr_stmt|;
name|byte
index|[]
name|bytes
init|=
name|ubaos
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|startPos
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|i
argument_list|,
name|bytes
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
name|startPos
init|,
name|j
init|=
literal|0
init|;
name|j
operator|<
name|numValues
condition|;
name|i
operator|++
operator|,
name|j
operator|++
control|)
block|{
name|assertEquals
argument_list|(
operator|(
name|j
operator|+
literal|1
operator|)
operator|*
literal|2
argument_list|,
name|bytes
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
name|startPos
operator|+
name|numValues
init|;
name|i
operator|<
name|buf
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|i
argument_list|,
name|bytes
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testDefaultCtor
specifier|public
name|void
name|testDefaultCtor
parameter_list|()
throws|throws
name|Exception
block|{
name|UnsafeByteArrayOutputStream
name|ubaos
init|=
operator|new
name|UnsafeByteArrayOutputStream
argument_list|()
decl_stmt|;
name|int
name|numValues
init|=
literal|5
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numValues
condition|;
name|i
operator|++
control|)
block|{
name|ubaos
operator|.
name|write
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"invalid buffer length"
argument_list|,
name|numValues
argument_list|,
name|ubaos
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|byte
index|[]
name|bytes
init|=
name|ubaos
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numValues
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|i
argument_list|,
name|bytes
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
DECL|method|testIllegalBufferSize
specifier|public
name|void
name|testIllegalBufferSize
parameter_list|()
throws|throws
name|Exception
block|{
name|UnsafeByteArrayOutputStream
name|ubaos
init|=
operator|new
name|UnsafeByteArrayOutputStream
argument_list|()
decl_stmt|;
name|ubaos
operator|.
name|reInit
argument_list|(
operator|new
name|byte
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
