begin_unit
begin_package
DECL|package|org.apache.lucene.util
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|FacetTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_class
DECL|class|UnsafeByteArrayInputStreamTest
specifier|public
class|class
name|UnsafeByteArrayInputStreamTest
extends|extends
name|FacetTestCase
block|{
annotation|@
name|Test
DECL|method|testSimple
specifier|public
name|void
name|testSimple
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|length
init|=
literal|256
decl_stmt|;
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|buffer
index|[
name|i
index|]
operator|=
operator|(
name|byte
operator|)
name|i
expr_stmt|;
block|}
name|byte
index|[]
name|result
init|=
operator|new
name|byte
index|[
name|buffer
operator|.
name|length
index|]
decl_stmt|;
name|UnsafeByteArrayInputStream
name|ubais
init|=
operator|new
name|UnsafeByteArrayInputStream
argument_list|(
name|buffer
argument_list|)
decl_stmt|;
name|int
name|index
init|=
literal|0
decl_stmt|;
name|int
name|by
init|=
name|ubais
operator|.
name|read
argument_list|()
decl_stmt|;
while|while
condition|(
name|by
operator|>=
literal|0
condition|)
block|{
name|result
index|[
name|index
operator|++
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|by
argument_list|)
expr_stmt|;
name|by
operator|=
name|ubais
operator|.
name|read
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|length
argument_list|,
name|index
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|buffer
argument_list|,
name|result
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testStartPos
specifier|public
name|void
name|testStartPos
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|length
init|=
literal|100
decl_stmt|;
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|buffer
index|[
name|i
index|]
operator|=
operator|(
name|byte
operator|)
name|i
expr_stmt|;
block|}
name|int
name|startPos
init|=
literal|5
decl_stmt|;
name|byte
index|[]
name|result
init|=
operator|new
name|byte
index|[
name|buffer
operator|.
name|length
index|]
decl_stmt|;
name|UnsafeByteArrayInputStream
name|ubais
init|=
operator|new
name|UnsafeByteArrayInputStream
argument_list|(
name|buffer
argument_list|,
name|startPos
argument_list|,
name|length
argument_list|)
decl_stmt|;
name|int
name|index
init|=
literal|0
decl_stmt|;
name|int
name|by
init|=
name|ubais
operator|.
name|read
argument_list|()
decl_stmt|;
while|while
condition|(
name|by
operator|>=
literal|0
condition|)
block|{
name|result
index|[
name|index
operator|++
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|by
argument_list|)
expr_stmt|;
name|by
operator|=
name|ubais
operator|.
name|read
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|length
operator|-
name|startPos
argument_list|,
name|index
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|startPos
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|buffer
index|[
name|i
index|]
argument_list|,
name|result
index|[
name|i
operator|-
name|startPos
index|]
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testReinit
specifier|public
name|void
name|testReinit
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|length
init|=
literal|100
decl_stmt|;
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|buffer
index|[
name|i
index|]
operator|=
operator|(
name|byte
operator|)
name|i
expr_stmt|;
block|}
name|byte
index|[]
name|result
init|=
operator|new
name|byte
index|[
name|buffer
operator|.
name|length
index|]
decl_stmt|;
name|UnsafeByteArrayInputStream
name|ubais
init|=
operator|new
name|UnsafeByteArrayInputStream
argument_list|(
name|buffer
argument_list|)
decl_stmt|;
name|int
name|index
init|=
literal|0
decl_stmt|;
name|int
name|by
init|=
name|ubais
operator|.
name|read
argument_list|()
decl_stmt|;
while|while
condition|(
name|by
operator|>=
literal|0
condition|)
block|{
name|result
index|[
name|index
operator|++
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|by
argument_list|)
expr_stmt|;
name|by
operator|=
name|ubais
operator|.
name|read
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|length
argument_list|,
name|index
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|buffer
argument_list|,
name|result
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|length2
init|=
literal|50
decl_stmt|;
name|byte
index|[]
name|buffer2
init|=
operator|new
name|byte
index|[
name|length2
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length2
condition|;
operator|++
name|i
control|)
block|{
name|buffer2
index|[
name|i
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
literal|90
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
name|byte
index|[]
name|result2
init|=
operator|new
name|byte
index|[
name|buffer2
operator|.
name|length
index|]
decl_stmt|;
name|ubais
operator|.
name|reInit
argument_list|(
name|buffer2
argument_list|)
expr_stmt|;
name|int
name|index2
init|=
literal|0
decl_stmt|;
name|int
name|by2
init|=
name|ubais
operator|.
name|read
argument_list|()
decl_stmt|;
while|while
condition|(
name|by2
operator|>=
literal|0
condition|)
block|{
name|result2
index|[
name|index2
operator|++
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|by2
argument_list|)
expr_stmt|;
name|by2
operator|=
name|ubais
operator|.
name|read
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|length2
argument_list|,
name|index2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|buffer2
argument_list|,
name|result2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDefaultCtor
specifier|public
name|void
name|testDefaultCtor
parameter_list|()
throws|throws
name|Exception
block|{
name|UnsafeByteArrayInputStream
name|ubais
init|=
operator|new
name|UnsafeByteArrayInputStream
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ubais
operator|.
name|available
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|ubais
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMark
specifier|public
name|void
name|testMark
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|bytes
init|=
operator|new
name|byte
index|[]
block|{
literal|0
block|,
literal|1
block|,
literal|2
block|,
literal|3
block|,
literal|4
block|,
literal|5
block|,
literal|6
block|,
literal|7
block|,
literal|8
block|,
literal|9
block|}
decl_stmt|;
name|UnsafeByteArrayInputStream
name|ubais
init|=
operator|new
name|UnsafeByteArrayInputStream
argument_list|(
name|bytes
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|ubais
operator|.
name|markSupported
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|markIndex
init|=
literal|3
decl_stmt|;
comment|// Advance the index
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|markIndex
condition|;
name|i
operator|++
control|)
block|{
name|ubais
operator|.
name|read
argument_list|()
expr_stmt|;
block|}
name|ubais
operator|.
name|mark
argument_list|(
name|markIndex
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|markIndex
init|;
name|i
operator|<
name|bytes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|ubais
operator|.
name|read
argument_list|()
expr_stmt|;
block|}
name|ubais
operator|.
name|reset
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|bytes
operator|.
name|length
operator|-
name|markIndex
argument_list|,
name|ubais
operator|.
name|available
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
