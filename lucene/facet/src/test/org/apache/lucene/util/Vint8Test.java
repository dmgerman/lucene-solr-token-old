begin_unit
begin_package
DECL|package|org.apache.lucene.util
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Vint8
import|;
end_import
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_comment
comment|/**  * Tests the {@link Vint8} class.  */
end_comment
begin_class
DECL|class|Vint8Test
specifier|public
class|class
name|Vint8Test
extends|extends
name|LuceneTestCase
block|{
comment|/**    * Tests the position wrapper.    * @throws Exception For any reason.    */
annotation|@
name|Test
DECL|method|testPosition
specifier|public
name|void
name|testPosition
parameter_list|()
throws|throws
name|Exception
block|{
name|Vint8
operator|.
name|Position
name|pos
init|=
operator|new
name|Vint8
operator|.
name|Position
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|pos
operator|.
name|pos
argument_list|)
expr_stmt|;
name|pos
operator|=
operator|new
name|Vint8
operator|.
name|Position
argument_list|(
literal|12345
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|12345
argument_list|,
name|pos
operator|.
name|pos
argument_list|)
expr_stmt|;
block|}
DECL|field|testValues
specifier|private
specifier|static
name|int
index|[]
name|testValues
init|=
block|{
operator|-
literal|1000000000
block|,
operator|-
literal|1
block|,
literal|0
block|,
operator|(
literal|1
operator|<<
literal|7
operator|)
operator|-
literal|1
block|,
literal|1
operator|<<
literal|7
block|,
operator|(
literal|1
operator|<<
literal|14
operator|)
operator|-
literal|1
block|,
literal|1
operator|<<
literal|14
block|,
operator|(
literal|1
operator|<<
literal|21
operator|)
operator|-
literal|1
block|,
literal|1
operator|<<
literal|21
block|,
operator|(
literal|1
operator|<<
literal|28
operator|)
operator|-
literal|1
block|,
literal|1
operator|<<
literal|28
block|}
decl_stmt|;
DECL|field|bytesNeededTestValues
specifier|private
specifier|static
name|int
index|[]
name|bytesNeededTestValues
init|=
block|{
literal|5
block|,
literal|5
block|,
literal|1
block|,
literal|1
block|,
literal|2
block|,
literal|2
block|,
literal|3
block|,
literal|3
block|,
literal|4
block|,
literal|4
block|,
literal|5
block|}
decl_stmt|;
comment|/**    * Tests the {@code bytesNeeded} method.    */
annotation|@
name|Test
DECL|method|testBytesNeeded
specifier|public
name|void
name|testBytesNeeded
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|Vint8
operator|.
name|MAXIMUM_BYTES_NEEDED
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|testValues
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|bytesNeededTestValues
index|[
name|j
index|]
argument_list|,
name|Vint8
operator|.
name|bytesNeeded
argument_list|(
name|testValues
index|[
name|j
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Tests encoding and decoding to and from a stream.    */
annotation|@
name|Test
DECL|method|testStreamEncodingAndDecoding
specifier|public
name|void
name|testStreamEncodingAndDecoding
parameter_list|()
throws|throws
name|IOException
block|{
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|(
literal|256
argument_list|)
decl_stmt|;
name|int
name|expectedSize
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|testValues
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|Vint8
operator|.
name|encode
argument_list|(
name|testValues
index|[
name|j
index|]
argument_list|,
name|baos
argument_list|)
expr_stmt|;
name|expectedSize
operator|+=
name|bytesNeededTestValues
index|[
name|j
index|]
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|expectedSize
argument_list|,
name|baos
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|ByteArrayInputStream
name|bais
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|baos
operator|.
name|toByteArray
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|testValues
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|testValues
index|[
name|j
index|]
argument_list|,
name|Vint8
operator|.
name|decode
argument_list|(
name|bais
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|bais
operator|.
name|available
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests encoding and decoding to and from an array.    */
annotation|@
name|Test
DECL|method|testArrayEncodingAndDecoding
specifier|public
name|void
name|testArrayEncodingAndDecoding
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
name|byteArray
init|=
operator|new
name|byte
index|[
literal|256
index|]
decl_stmt|;
name|int
name|position
init|=
literal|0
decl_stmt|,
name|expectedSize
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|testValues
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|position
operator|+=
name|Vint8
operator|.
name|encode
argument_list|(
name|testValues
index|[
name|j
index|]
argument_list|,
name|byteArray
argument_list|,
name|position
argument_list|)
expr_stmt|;
name|expectedSize
operator|+=
name|bytesNeededTestValues
index|[
name|j
index|]
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|expectedSize
argument_list|,
name|position
argument_list|)
expr_stmt|;
name|Vint8
operator|.
name|Position
name|pos
init|=
operator|new
name|Vint8
operator|.
name|Position
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|testValues
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|testValues
index|[
name|j
index|]
argument_list|,
name|Vint8
operator|.
name|decode
argument_list|(
name|byteArray
argument_list|,
name|pos
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|expectedSize
argument_list|,
name|pos
operator|.
name|pos
argument_list|)
expr_stmt|;
block|}
comment|/**    * The result of encoding the test values with the current algorithm. If these    * values are changed to match an algorithm change, compatibility with legacy    * data will be broken.    */
DECL|field|encodedTestValues
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|encodedTestValues
init|=
block|{
operator|-
literal|4
block|,
operator|-
literal|93
block|,
operator|-
literal|108
block|,
operator|-
literal|20
block|,
literal|0
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
literal|127
block|,
literal|0
block|,
literal|127
block|,
operator|-
literal|127
block|,
literal|0
block|,
operator|-
literal|1
block|,
literal|127
block|,
operator|-
literal|127
block|,
operator|-
literal|128
block|,
literal|0
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
literal|127
block|,
operator|-
literal|127
block|,
operator|-
literal|128
block|,
operator|-
literal|128
block|,
literal|0
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
literal|127
block|,
operator|-
literal|127
block|,
operator|-
literal|128
block|,
operator|-
literal|128
block|,
operator|-
literal|128
block|,
literal|0
block|}
decl_stmt|;
comment|/**    * Tests algorithm.    */
annotation|@
name|Test
DECL|method|testLegacyCompatibility
specifier|public
name|void
name|testLegacyCompatibility
parameter_list|()
throws|throws
name|IOException
block|{
comment|/* To generate the encoded test values:     byte[] byteArray = new byte[256];     int position = 0, expectedSize = 0;     for (int j = 0; j< testValues.length; j++) {       position += Vint8.encode(testValues[j], byteArray, position);       expectedSize += bytesNeededTestValues[j];     }     assertEquals(expectedSize, position);     Vint8.Position pos = new Vint8.Position();     for (int j = 0; j< expectedSize; j++) {       System.out.print(byteArray[j] + ", ");     }     System.out.flush();     pos.pos = 0;     */
name|Vint8
operator|.
name|Position
name|pos
init|=
operator|new
name|Vint8
operator|.
name|Position
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|testValues
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|testValues
index|[
name|j
index|]
argument_list|,
name|Vint8
operator|.
name|decode
argument_list|(
name|encodedTestValues
argument_list|,
name|pos
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class
begin_comment
comment|// end class Vint8Test
end_comment
end_unit
