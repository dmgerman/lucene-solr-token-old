begin_unit
begin_package
DECL|package|org.apache.lucene.util.encoding
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|encoding
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_comment
comment|/**  * An {@link IntEncoderFilter} which sorts the values to encode in ascending  * order before encoding them. Encoding therefore happens upon calling  * {@link #close()}. Since this encoder is usually chained with another encoder  * that relies on sorted values, it does not offer a default constructor.  *   * @lucene.experimental  */
end_comment
begin_class
DECL|class|SortingIntEncoder
specifier|public
class|class
name|SortingIntEncoder
extends|extends
name|IntEncoderFilter
block|{
DECL|field|grow
specifier|private
name|float
name|grow
init|=
literal|2.0f
decl_stmt|;
DECL|field|index
specifier|private
name|int
name|index
init|=
literal|0
decl_stmt|;
DECL|field|set
specifier|private
name|int
index|[]
name|set
init|=
operator|new
name|int
index|[
literal|1024
index|]
decl_stmt|;
comment|/** Initializes with the given encoder. */
DECL|method|SortingIntEncoder
specifier|public
name|SortingIntEncoder
parameter_list|(
name|IntEncoder
name|encoder
parameter_list|)
block|{
name|super
argument_list|(
name|encoder
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|index
operator|==
literal|0
condition|)
block|{
return|return;
block|}
name|Arrays
operator|.
name|sort
argument_list|(
name|set
argument_list|,
literal|0
argument_list|,
name|index
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|index
condition|;
name|i
operator|++
control|)
block|{
name|encoder
operator|.
name|encode
argument_list|(
name|set
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|encoder
operator|.
name|close
argument_list|()
expr_stmt|;
name|index
operator|=
literal|0
expr_stmt|;
name|super
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|encode
specifier|public
name|void
name|encode
parameter_list|(
name|int
name|value
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|index
operator|==
name|set
operator|.
name|length
condition|)
block|{
name|int
index|[]
name|newSet
init|=
operator|new
name|int
index|[
call|(
name|int
call|)
argument_list|(
name|set
operator|.
name|length
operator|*
name|grow
argument_list|)
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|set
argument_list|,
literal|0
argument_list|,
name|newSet
argument_list|,
literal|0
argument_list|,
name|set
operator|.
name|length
argument_list|)
expr_stmt|;
name|set
operator|=
name|newSet
expr_stmt|;
block|}
name|set
index|[
name|index
operator|++
index|]
operator|=
name|value
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createMatchingDecoder
specifier|public
name|IntDecoder
name|createMatchingDecoder
parameter_list|()
block|{
return|return
name|encoder
operator|.
name|createMatchingDecoder
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|reInit
specifier|public
name|void
name|reInit
parameter_list|(
name|OutputStream
name|out
parameter_list|)
block|{
name|super
operator|.
name|reInit
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|index
operator|=
literal|0
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"Sorting ("
operator|+
name|encoder
operator|.
name|toString
argument_list|()
operator|+
literal|")"
return|;
block|}
block|}
end_class
end_unit
