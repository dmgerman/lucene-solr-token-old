begin_unit
begin_package
DECL|package|org.apache.lucene.util.encoding
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|encoding
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IntsRef
import|;
end_import
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_comment
comment|/**  * A simple {@link IntEncoder}, writing an integer as 4 raw bytes. *  *   * @lucene.experimental  */
end_comment
begin_class
DECL|class|SimpleIntEncoder
specifier|public
class|class
name|SimpleIntEncoder
extends|extends
name|IntEncoder
block|{
annotation|@
name|Override
DECL|method|doEncode
specifier|protected
name|void
name|doEncode
parameter_list|(
name|IntsRef
name|values
parameter_list|,
name|BytesRef
name|buf
parameter_list|,
name|int
name|upto
parameter_list|)
block|{
comment|// ensure there's enough room in the buffer
name|int
name|bytesNeeded
init|=
name|values
operator|.
name|length
operator|*
literal|4
decl_stmt|;
if|if
condition|(
name|buf
operator|.
name|bytes
operator|.
name|length
operator|<
name|bytesNeeded
condition|)
block|{
name|buf
operator|.
name|grow
argument_list|(
name|bytesNeeded
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
name|values
operator|.
name|offset
init|;
name|i
operator|<
name|upto
condition|;
name|i
operator|++
control|)
block|{
name|int
name|value
init|=
name|values
operator|.
name|ints
index|[
name|i
index|]
decl_stmt|;
name|buf
operator|.
name|bytes
index|[
name|buf
operator|.
name|length
operator|++
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|value
operator|>>>
literal|24
argument_list|)
expr_stmt|;
name|buf
operator|.
name|bytes
index|[
name|buf
operator|.
name|length
operator|++
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
operator|(
name|value
operator|>>
literal|16
operator|)
operator|&
literal|0xFF
argument_list|)
expr_stmt|;
name|buf
operator|.
name|bytes
index|[
name|buf
operator|.
name|length
operator|++
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
operator|(
name|value
operator|>>
literal|8
operator|)
operator|&
literal|0xFF
argument_list|)
expr_stmt|;
name|buf
operator|.
name|bytes
index|[
name|buf
operator|.
name|length
operator|++
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|value
operator|&
literal|0xFF
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|createMatchingDecoder
specifier|public
name|IntDecoder
name|createMatchingDecoder
parameter_list|()
block|{
return|return
operator|new
name|SimpleIntDecoder
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"Simple"
return|;
block|}
block|}
end_class
end_unit
