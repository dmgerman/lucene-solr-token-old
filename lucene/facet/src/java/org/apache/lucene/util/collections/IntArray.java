begin_unit
begin_package
DECL|package|org.apache.lucene.util.collections
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|collections
package|;
end_package
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_comment
comment|/**  * A Class wrapper for a grow-able int[] which can be sorted and intersect with  * other IntArrays.  *   * @lucene.experimental  */
end_comment
begin_class
DECL|class|IntArray
specifier|public
class|class
name|IntArray
block|{
comment|/**    * The int[] which holds the data    */
DECL|field|data
specifier|private
name|int
index|[]
name|data
decl_stmt|;
comment|/**    * Holds the number of items in the array.    */
DECL|field|size
specifier|private
name|int
name|size
decl_stmt|;
comment|/**    * A flag which indicates whether a sort should occur of the array is    * already sorted.    */
DECL|field|shouldSort
specifier|private
name|boolean
name|shouldSort
decl_stmt|;
comment|/**    * Construct a default IntArray, size 0 and surly a sort should not occur.    */
DECL|method|IntArray
specifier|public
name|IntArray
parameter_list|()
block|{
name|init
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|init
specifier|private
name|void
name|init
parameter_list|(
name|boolean
name|realloc
parameter_list|)
block|{
name|size
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|realloc
condition|)
block|{
name|data
operator|=
operator|new
name|int
index|[
literal|0
index|]
expr_stmt|;
block|}
name|shouldSort
operator|=
literal|false
expr_stmt|;
block|}
comment|/**    * Intersects the data with a given {@link IntHashSet}.    *     * @param set    *            A given ArrayHashSetInt which holds the data to be intersected    *            against    */
DECL|method|intersect
specifier|public
name|void
name|intersect
parameter_list|(
name|IntHashSet
name|set
parameter_list|)
block|{
name|int
name|newSize
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|set
operator|.
name|contains
argument_list|(
name|data
index|[
name|i
index|]
argument_list|)
condition|)
block|{
name|data
index|[
name|newSize
index|]
operator|=
name|data
index|[
name|i
index|]
expr_stmt|;
operator|++
name|newSize
expr_stmt|;
block|}
block|}
name|this
operator|.
name|size
operator|=
name|newSize
expr_stmt|;
block|}
comment|/**    * Intersects the data with a given IntArray    *     * @param other    *            A given IntArray which holds the data to be intersected agains    */
DECL|method|intersect
specifier|public
name|void
name|intersect
parameter_list|(
name|IntArray
name|other
parameter_list|)
block|{
name|sort
argument_list|()
expr_stmt|;
name|other
operator|.
name|sort
argument_list|()
expr_stmt|;
name|int
name|myIndex
init|=
literal|0
decl_stmt|;
name|int
name|otherIndex
init|=
literal|0
decl_stmt|;
name|int
name|newSize
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|size
operator|>
name|other
operator|.
name|size
condition|)
block|{
while|while
condition|(
name|otherIndex
operator|<
name|other
operator|.
name|size
operator|&&
name|myIndex
operator|<
name|size
condition|)
block|{
while|while
condition|(
name|otherIndex
operator|<
name|other
operator|.
name|size
operator|&&
name|other
operator|.
name|data
index|[
name|otherIndex
index|]
operator|<
name|data
index|[
name|myIndex
index|]
condition|)
block|{
operator|++
name|otherIndex
expr_stmt|;
block|}
if|if
condition|(
name|otherIndex
operator|==
name|other
operator|.
name|size
condition|)
block|{
break|break;
block|}
while|while
condition|(
name|myIndex
argument_list|<
name|size
operator|&&
name|other
operator|.
name|data
index|[
name|otherIndex
index|]
argument_list|>
name|data
index|[
name|myIndex
index|]
condition|)
block|{
operator|++
name|myIndex
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|data
index|[
name|otherIndex
index|]
operator|==
name|data
index|[
name|myIndex
index|]
condition|)
block|{
name|data
index|[
name|newSize
operator|++
index|]
operator|=
name|data
index|[
name|myIndex
index|]
expr_stmt|;
operator|++
name|otherIndex
expr_stmt|;
operator|++
name|myIndex
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
while|while
condition|(
name|otherIndex
operator|<
name|other
operator|.
name|size
operator|&&
name|myIndex
operator|<
name|size
condition|)
block|{
while|while
condition|(
name|myIndex
argument_list|<
name|size
operator|&&
name|other
operator|.
name|data
index|[
name|otherIndex
index|]
argument_list|>
name|data
index|[
name|myIndex
index|]
condition|)
block|{
operator|++
name|myIndex
expr_stmt|;
block|}
if|if
condition|(
name|myIndex
operator|==
name|size
condition|)
block|{
break|break;
block|}
while|while
condition|(
name|otherIndex
operator|<
name|other
operator|.
name|size
operator|&&
name|other
operator|.
name|data
index|[
name|otherIndex
index|]
operator|<
name|data
index|[
name|myIndex
index|]
condition|)
block|{
operator|++
name|otherIndex
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|data
index|[
name|otherIndex
index|]
operator|==
name|data
index|[
name|myIndex
index|]
condition|)
block|{
name|data
index|[
name|newSize
operator|++
index|]
operator|=
name|data
index|[
name|myIndex
index|]
expr_stmt|;
operator|++
name|otherIndex
expr_stmt|;
operator|++
name|myIndex
expr_stmt|;
block|}
block|}
block|}
name|this
operator|.
name|size
operator|=
name|newSize
expr_stmt|;
block|}
comment|/**    * Return the size of the Array. Not the allocated size, but the number of    * values actually set.    *     * @return the (filled) size of the array    */
DECL|method|size
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|size
return|;
block|}
comment|/**    * Adds a value to the array.    *     * @param value    *            value to be added    */
DECL|method|addToArray
specifier|public
name|void
name|addToArray
parameter_list|(
name|int
name|value
parameter_list|)
block|{
if|if
condition|(
name|size
operator|==
name|data
operator|.
name|length
condition|)
block|{
name|int
index|[]
name|newArray
init|=
operator|new
name|int
index|[
literal|2
operator|*
name|size
operator|+
literal|1
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|data
argument_list|,
literal|0
argument_list|,
name|newArray
argument_list|,
literal|0
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|data
operator|=
name|newArray
expr_stmt|;
block|}
name|data
index|[
name|size
index|]
operator|=
name|value
expr_stmt|;
operator|++
name|size
expr_stmt|;
name|shouldSort
operator|=
literal|true
expr_stmt|;
block|}
comment|/**    * Equals method. Checking the sizes, than the values from the last index to    * the first (Statistically for random should be the same but for our    * specific use would find differences faster).    */
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|o
operator|instanceof
name|IntArray
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|IntArray
name|array
init|=
operator|(
name|IntArray
operator|)
name|o
decl_stmt|;
if|if
condition|(
name|array
operator|.
name|size
operator|!=
name|size
condition|)
block|{
return|return
literal|false
return|;
block|}
name|sort
argument_list|()
expr_stmt|;
name|array
operator|.
name|sort
argument_list|()
expr_stmt|;
name|boolean
name|equal
init|=
literal|true
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|size
init|;
name|i
operator|>
literal|0
operator|&&
name|equal
condition|;
control|)
block|{
operator|--
name|i
expr_stmt|;
name|equal
operator|=
operator|(
name|array
operator|.
name|data
index|[
name|i
index|]
operator|==
name|this
operator|.
name|data
index|[
name|i
index|]
operator|)
expr_stmt|;
block|}
return|return
name|equal
return|;
block|}
comment|/**    * Sorts the data. If it is needed.    */
DECL|method|sort
specifier|public
name|void
name|sort
parameter_list|()
block|{
if|if
condition|(
name|shouldSort
condition|)
block|{
name|shouldSort
operator|=
literal|false
expr_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|data
argument_list|,
literal|0
argument_list|,
name|size
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Calculates a hash-code for HashTables    */
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|hash
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
operator|++
name|i
control|)
block|{
name|hash
operator|=
name|data
index|[
name|i
index|]
operator|^
operator|(
name|hash
operator|*
literal|31
operator|)
expr_stmt|;
block|}
return|return
name|hash
return|;
block|}
comment|/**    * Get an element from a specific index.    *     * @param i    *            index of which element should be retrieved.    */
DECL|method|get
specifier|public
name|int
name|get
parameter_list|(
name|int
name|i
parameter_list|)
block|{
if|if
condition|(
name|i
operator|>=
name|size
condition|)
block|{
throw|throw
operator|new
name|ArrayIndexOutOfBoundsException
argument_list|(
name|i
argument_list|)
throw|;
block|}
return|return
name|this
operator|.
name|data
index|[
name|i
index|]
return|;
block|}
DECL|method|set
specifier|public
name|void
name|set
parameter_list|(
name|int
name|idx
parameter_list|,
name|int
name|value
parameter_list|)
block|{
if|if
condition|(
name|idx
operator|>=
name|size
condition|)
block|{
throw|throw
operator|new
name|ArrayIndexOutOfBoundsException
argument_list|(
name|idx
argument_list|)
throw|;
block|}
name|this
operator|.
name|data
index|[
name|idx
index|]
operator|=
name|value
expr_stmt|;
block|}
comment|/**    * toString or not toString. That is the question!    */
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|String
name|s
init|=
literal|"("
operator|+
name|size
operator|+
literal|") "
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
operator|++
name|i
control|)
block|{
name|s
operator|+=
literal|""
operator|+
name|data
index|[
name|i
index|]
operator|+
literal|", "
expr_stmt|;
block|}
return|return
name|s
return|;
block|}
comment|/**    * Clear the IntArray (set all elements to zero).    * @param resize - if resize is true, then clear actually allocates    * a new array of size 0, essentially 'clearing' the array and freeing    * memory.    */
DECL|method|clear
specifier|public
name|void
name|clear
parameter_list|(
name|boolean
name|resize
parameter_list|)
block|{
name|init
argument_list|(
name|resize
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
