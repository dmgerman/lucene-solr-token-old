begin_unit
begin_package
DECL|package|org.apache.lucene.util.encoding
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|encoding
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_comment
comment|/**  * Decodes data which was encoded by {@link EightFlagsIntEncoder}. Scans  * the<code>indicator</code>, one flag (1-bits) at a time, and decodes extra  * data using {@link VInt8IntDecoder}.  *   * @see EightFlagsIntEncoder  * @lucene.experimental  */
end_comment
begin_class
DECL|class|EightFlagsIntDecoder
specifier|public
class|class
name|EightFlagsIntDecoder
extends|extends
name|IntDecoder
block|{
comment|/**    * Holds all combinations of<i>indicator</i> for fast decoding (saves time    * on real-time bit manipulation)    */
DECL|field|decodeTable
specifier|private
specifier|static
specifier|final
name|byte
index|[]
index|[]
name|decodeTable
init|=
operator|new
name|byte
index|[
literal|256
index|]
index|[
literal|8
index|]
decl_stmt|;
comment|/** Generating all combinations of<i>indicator</i> into separate flags. */
static|static
block|{
for|for
control|(
name|int
name|i
init|=
literal|256
init|;
name|i
operator|!=
literal|0
condition|;
control|)
block|{
operator|--
name|i
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|8
init|;
name|j
operator|!=
literal|0
condition|;
control|)
block|{
operator|--
name|j
expr_stmt|;
name|decodeTable
index|[
name|i
index|]
index|[
name|j
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
operator|(
name|i
operator|>>>
name|j
operator|)
operator|&
literal|0x1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|field|decoder
specifier|private
specifier|final
name|IntDecoder
name|decoder
init|=
operator|new
name|VInt8IntDecoder
argument_list|()
decl_stmt|;
comment|/** The indicator for decoding a chunk of 8 integers. */
DECL|field|indicator
specifier|private
name|int
name|indicator
decl_stmt|;
comment|/** Used as an ordinal of 0 - 7, as the decoder decodes chunks of 8 integers. */
DECL|field|ordinal
specifier|private
name|int
name|ordinal
init|=
literal|0
decl_stmt|;
annotation|@
name|Override
DECL|method|decode
specifier|public
name|long
name|decode
parameter_list|()
throws|throws
name|IOException
block|{
comment|// If we've decoded 8 integers, read the next indicator.
if|if
condition|(
operator|(
name|ordinal
operator|&
literal|0x7
operator|)
operator|==
literal|0
condition|)
block|{
name|indicator
operator|=
name|in
operator|.
name|read
argument_list|()
expr_stmt|;
if|if
condition|(
name|indicator
operator|<
literal|0
condition|)
block|{
return|return
name|EOS
return|;
block|}
name|ordinal
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|decodeTable
index|[
name|indicator
index|]
index|[
name|ordinal
operator|++
index|]
operator|==
literal|0
condition|)
block|{
comment|// decode the value from the stream.
name|long
name|decode
init|=
name|decoder
operator|.
name|decode
argument_list|()
decl_stmt|;
return|return
name|decode
operator|==
name|EOS
condition|?
name|EOS
else|:
name|decode
operator|+
literal|2
return|;
block|}
return|return
literal|1
return|;
block|}
annotation|@
name|Override
DECL|method|reInit
specifier|public
name|void
name|reInit
parameter_list|(
name|InputStream
name|in
parameter_list|)
block|{
name|super
operator|.
name|reInit
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|decoder
operator|.
name|reInit
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|ordinal
operator|=
literal|0
expr_stmt|;
name|indicator
operator|=
literal|0
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"EightFlags (VInt8)"
return|;
block|}
block|}
end_class
end_unit
