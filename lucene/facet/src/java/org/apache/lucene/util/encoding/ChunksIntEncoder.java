begin_unit
begin_package
DECL|package|org.apache.lucene.util.encoding
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|encoding
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_comment
comment|/**  * An {@link IntEncoder} which encodes values in chunks. Implementations of this  * class assume the data which needs encoding consists of small, consecutive  * values, and therefore the encoder is able to compress them better. You can  * read more on the two implementations {@link FourFlagsIntEncoder} and  * {@link EightFlagsIntEncoder}.  *<p>  * Extensions of this class need to implement {@link #encode(int)} in order to  * build the proper indicator (flags). When enough values were accumulated  * (typically the batch size), extensions can call {@link #encodeChunk()} to  * flush the indicator and the rest of the values.  *<p>  *<b>NOTE:</b> flags encoders do not accept values&le; 0 (zero) in their  * {@link #encode(int)}. For performance reasons they do not check that  * condition, however if such value is passed the result stream may be corrupt  * or an exception will be thrown. Also, these encoders perform the best when  * there are many consecutive small values (depends on the encoder  * implementation). If that is not the case, the encoder will occupy 1 more byte  * for every<i>batch</i> number of integers, over whatever  * {@link VInt8IntEncoder} would have occupied. Therefore make sure to check  * whether your data fits into the conditions of the specific encoder.  *<p>  * For the reasons mentioned above, these encoders are usually chained with  * {@link UniqueValuesIntEncoder} and {@link DGapIntEncoder} in the following  * manner:<code><pre class="prettyprint">  * IntEncoder fourFlags =   *         new SortingEncoderFilter(new UniqueValuesIntEncoder(new DGapIntEncoder(new FlagsIntEncoderImpl())));  *</pre></code>  *   * @lucene.experimental  */
end_comment
begin_class
DECL|class|ChunksIntEncoder
specifier|public
specifier|abstract
class|class
name|ChunksIntEncoder
extends|extends
name|IntEncoder
block|{
comment|/** Holds the values which must be encoded, outside the indicator. */
DECL|field|encodeQueue
specifier|protected
specifier|final
name|int
index|[]
name|encodeQueue
decl_stmt|;
DECL|field|encodeQueueSize
specifier|protected
name|int
name|encodeQueueSize
init|=
literal|0
decl_stmt|;
comment|/** Encoder used to encode values outside the indicator. */
DECL|field|encoder
specifier|protected
specifier|final
name|IntEncoder
name|encoder
init|=
operator|new
name|VInt8IntEncoder
argument_list|()
decl_stmt|;
comment|/** Represents bits flag byte. */
DECL|field|indicator
specifier|protected
name|int
name|indicator
init|=
literal|0
decl_stmt|;
comment|/** Counts the current ordinal of the encoded value. */
DECL|field|ordinal
specifier|protected
name|byte
name|ordinal
init|=
literal|0
decl_stmt|;
DECL|method|ChunksIntEncoder
specifier|protected
name|ChunksIntEncoder
parameter_list|(
name|int
name|chunkSize
parameter_list|)
block|{
name|encodeQueue
operator|=
operator|new
name|int
index|[
name|chunkSize
index|]
expr_stmt|;
block|}
comment|/**    * Encodes the values of the current chunk. First it writes the indicator, and    * then it encodes the values outside the indicator.    */
DECL|method|encodeChunk
specifier|protected
name|void
name|encodeChunk
parameter_list|()
throws|throws
name|IOException
block|{
name|out
operator|.
name|write
argument_list|(
name|indicator
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|encodeQueueSize
condition|;
operator|++
name|i
control|)
block|{
name|encoder
operator|.
name|encode
argument_list|(
name|encodeQueue
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|encodeQueueSize
operator|=
literal|0
expr_stmt|;
name|ordinal
operator|=
literal|0
expr_stmt|;
name|indicator
operator|=
literal|0
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|ordinal
operator|!=
literal|0
condition|)
block|{
name|encodeChunk
argument_list|()
expr_stmt|;
block|}
name|encoder
operator|.
name|close
argument_list|()
expr_stmt|;
name|super
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|reInit
specifier|public
name|void
name|reInit
parameter_list|(
name|OutputStream
name|out
parameter_list|)
block|{
name|encoder
operator|.
name|reInit
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|super
operator|.
name|reInit
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|ordinal
operator|=
literal|0
expr_stmt|;
name|indicator
operator|=
literal|0
expr_stmt|;
name|encodeQueueSize
operator|=
literal|0
expr_stmt|;
block|}
block|}
end_class
end_unit
