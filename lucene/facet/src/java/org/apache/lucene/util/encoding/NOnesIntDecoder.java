begin_unit
begin_package
DECL|package|org.apache.lucene.util.encoding
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|encoding
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_comment
comment|/**  * Decodes data which was encoded by {@link NOnesIntEncoder}. Uses a  * {@link FourFlagsIntDecoder} to perform the actual encoding and translates the  * values back as described in {@link NOnesIntEncoder}.  *   * @see NOnesIntEncoder  * @lucene.experimental  */
end_comment
begin_class
DECL|class|NOnesIntDecoder
specifier|public
class|class
name|NOnesIntDecoder
extends|extends
name|FourFlagsIntDecoder
block|{
comment|/** Number of consecutive '1's to generate upon decoding a '2'. */
DECL|field|n
specifier|private
name|int
name|n
decl_stmt|;
DECL|field|onesCounter
specifier|private
name|int
name|onesCounter
decl_stmt|;
comment|/**    * Constructs a decoder with a given N (Number of consecutive '1's which are    * translated into a single target value '2'.    */
DECL|method|NOnesIntDecoder
specifier|public
name|NOnesIntDecoder
parameter_list|(
name|int
name|n
parameter_list|)
block|{
name|this
operator|.
name|n
operator|=
name|n
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|decode
specifier|public
name|long
name|decode
parameter_list|()
throws|throws
name|IOException
block|{
comment|// If we read '2', we should return n '1's.
if|if
condition|(
name|onesCounter
operator|>
literal|0
condition|)
block|{
operator|--
name|onesCounter
expr_stmt|;
return|return
literal|1
return|;
block|}
name|long
name|decode
init|=
name|super
operator|.
name|decode
argument_list|()
decl_stmt|;
if|if
condition|(
name|decode
operator|==
literal|1
condition|)
block|{
return|return
literal|1
return|;
block|}
if|if
condition|(
name|decode
operator|==
literal|2
condition|)
block|{
name|onesCounter
operator|=
name|n
operator|-
literal|1
expr_stmt|;
return|return
literal|1
return|;
block|}
if|if
condition|(
name|decode
operator|==
literal|3
condition|)
block|{
return|return
literal|2
return|;
block|}
return|return
name|decode
operator|==
name|EOS
condition|?
name|EOS
else|:
name|decode
operator|-
literal|1
return|;
block|}
annotation|@
name|Override
DECL|method|reInit
specifier|public
name|void
name|reInit
parameter_list|(
name|InputStream
name|in
parameter_list|)
block|{
name|super
operator|.
name|reInit
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|onesCounter
operator|=
literal|0
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"NOnes ("
operator|+
name|n
operator|+
literal|") ("
operator|+
name|super
operator|.
name|toString
argument_list|()
operator|+
literal|")"
return|;
block|}
block|}
end_class
end_unit
