begin_unit
begin_package
DECL|package|org.apache.lucene.facet.sampling
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|sampling
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|old
operator|.
name|OldFacetsAccumulator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|old
operator|.
name|ScoredDocIDs
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|params
operator|.
name|FacetSearchParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|partitions
operator|.
name|PartitionsFacetResultsHandler
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|sampling
operator|.
name|Sampler
operator|.
name|SampleResult
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|search
operator|.
name|FacetRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|search
operator|.
name|FacetResult
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|taxonomy
operator|.
name|TaxonomyReader
import|;
end_import
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_comment
comment|/**  * Wrap any Facets Accumulator with sampling.  *<p>  * Note: Sampling accumulation (Accumulation over a sampled-set of the results),  * does not guarantee accurate values for  * {@link FacetResult#getNumValidDescendants()}.  *   * @lucene.experimental  */
end_comment
begin_class
DECL|class|SamplingWrapper
specifier|public
class|class
name|SamplingWrapper
extends|extends
name|OldFacetsAccumulator
block|{
DECL|field|delegee
specifier|private
name|OldFacetsAccumulator
name|delegee
decl_stmt|;
DECL|field|sampler
specifier|private
name|Sampler
name|sampler
decl_stmt|;
DECL|method|SamplingWrapper
specifier|public
name|SamplingWrapper
parameter_list|(
name|OldFacetsAccumulator
name|delegee
parameter_list|,
name|Sampler
name|sampler
parameter_list|)
block|{
name|super
argument_list|(
name|delegee
operator|.
name|searchParams
argument_list|,
name|delegee
operator|.
name|indexReader
argument_list|,
name|delegee
operator|.
name|taxonomyReader
argument_list|)
expr_stmt|;
name|this
operator|.
name|delegee
operator|=
name|delegee
expr_stmt|;
name|this
operator|.
name|sampler
operator|=
name|sampler
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|accumulate
specifier|public
name|List
argument_list|<
name|FacetResult
argument_list|>
name|accumulate
parameter_list|(
name|ScoredDocIDs
name|docids
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Replacing the original searchParams with the over-sampled (and without statistics-compute)
name|FacetSearchParams
name|original
init|=
name|delegee
operator|.
name|searchParams
decl_stmt|;
name|boolean
name|shouldOversample
init|=
name|sampler
operator|.
name|samplingParams
operator|.
name|shouldOverSample
argument_list|()
decl_stmt|;
if|if
condition|(
name|shouldOversample
condition|)
block|{
name|delegee
operator|.
name|searchParams
operator|=
name|sampler
operator|.
name|overSampledSearchParams
argument_list|(
name|original
argument_list|)
expr_stmt|;
block|}
name|SampleResult
name|sampleSet
init|=
name|sampler
operator|.
name|getSampleSet
argument_list|(
name|docids
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|FacetResult
argument_list|>
name|sampleRes
init|=
name|delegee
operator|.
name|accumulate
argument_list|(
name|sampleSet
operator|.
name|docids
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|FacetResult
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<
name|FacetResult
argument_list|>
argument_list|()
decl_stmt|;
name|SampleFixer
name|sampleFixer
init|=
name|sampler
operator|.
name|samplingParams
operator|.
name|getSampleFixer
argument_list|()
decl_stmt|;
for|for
control|(
name|FacetResult
name|fres
range|:
name|sampleRes
control|)
block|{
comment|// for sure fres is not null because this is guaranteed by the delegee.
name|FacetRequest
name|fr
init|=
name|fres
operator|.
name|getFacetRequest
argument_list|()
decl_stmt|;
name|PartitionsFacetResultsHandler
name|frh
init|=
name|createFacetResultsHandler
argument_list|(
name|fr
argument_list|,
name|createOrdinalValueResolver
argument_list|(
name|fr
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|sampleFixer
operator|!=
literal|null
condition|)
block|{
comment|// fix the result of current request
name|sampleFixer
operator|.
name|fixResult
argument_list|(
name|docids
argument_list|,
name|fres
argument_list|,
name|sampleSet
operator|.
name|actualSampleRatio
argument_list|)
expr_stmt|;
name|fres
operator|=
name|frh
operator|.
name|rearrangeFacetResult
argument_list|(
name|fres
argument_list|)
expr_stmt|;
comment|// let delegee's handler do any
block|}
if|if
condition|(
name|shouldOversample
condition|)
block|{
comment|// Using the sampler to trim the extra (over-sampled) results
name|fres
operator|=
name|sampler
operator|.
name|trimResult
argument_list|(
name|fres
argument_list|)
expr_stmt|;
block|}
comment|// final labeling if allowed (because labeling is a costly operation)
if|if
condition|(
name|fres
operator|.
name|getFacetResultNode
argument_list|()
operator|.
name|ordinal
operator|==
name|TaxonomyReader
operator|.
name|INVALID_ORDINAL
condition|)
block|{
comment|// category does not exist, add an empty result
name|results
operator|.
name|add
argument_list|(
name|emptyResult
argument_list|(
name|fres
operator|.
name|getFacetResultNode
argument_list|()
operator|.
name|ordinal
argument_list|,
name|fr
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|frh
operator|.
name|labelResult
argument_list|(
name|fres
argument_list|)
expr_stmt|;
name|results
operator|.
name|add
argument_list|(
name|fres
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|shouldOversample
condition|)
block|{
name|delegee
operator|.
name|searchParams
operator|=
name|original
expr_stmt|;
comment|// Back to original params
block|}
return|return
name|results
return|;
block|}
annotation|@
name|Override
DECL|method|getComplementThreshold
specifier|public
name|double
name|getComplementThreshold
parameter_list|()
block|{
return|return
name|delegee
operator|.
name|getComplementThreshold
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|setComplementThreshold
specifier|public
name|void
name|setComplementThreshold
parameter_list|(
name|double
name|complementThreshold
parameter_list|)
block|{
name|delegee
operator|.
name|setComplementThreshold
argument_list|(
name|complementThreshold
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
