begin_unit
begin_package
DECL|package|org.apache.lucene.facet.search
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|search
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|index
operator|.
name|params
operator|.
name|CategoryListParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|search
operator|.
name|FacetsCollector
operator|.
name|MatchingDocs
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|taxonomy
operator|.
name|TaxonomyReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IntsRef
import|;
end_import
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_comment
comment|/**  * A {@link FacetsAggregator} which counts the number of times each category  * appears in the given set of documents. This aggregator uses the  * {@link CategoryListIterator} to read the encoded categories. If you used the  * default settings while idnexing, you can use  * {@link FastCountingFacetsAggregator} for better performance.  *   * @lucene.experimental  */
end_comment
begin_class
DECL|class|CountingFacetsAggregator
specifier|public
class|class
name|CountingFacetsAggregator
implements|implements
name|FacetsAggregator
block|{
DECL|field|ordinals
specifier|private
specifier|final
name|IntsRef
name|ordinals
init|=
operator|new
name|IntsRef
argument_list|(
literal|32
argument_list|)
decl_stmt|;
annotation|@
name|Override
DECL|method|aggregate
specifier|public
name|void
name|aggregate
parameter_list|(
name|MatchingDocs
name|matchingDocs
parameter_list|,
name|CategoryListParams
name|clp
parameter_list|,
name|FacetArrays
name|facetArrays
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|CategoryListIterator
name|cli
init|=
name|clp
operator|.
name|createCategoryListIterator
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|cli
operator|.
name|setNextReader
argument_list|(
name|matchingDocs
operator|.
name|context
argument_list|)
condition|)
block|{
return|return;
block|}
specifier|final
name|int
name|length
init|=
name|matchingDocs
operator|.
name|bits
operator|.
name|length
argument_list|()
decl_stmt|;
specifier|final
name|int
index|[]
name|counts
init|=
name|facetArrays
operator|.
name|getIntArray
argument_list|()
decl_stmt|;
name|int
name|doc
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|doc
operator|<
name|length
operator|&&
operator|(
name|doc
operator|=
name|matchingDocs
operator|.
name|bits
operator|.
name|nextSetBit
argument_list|(
name|doc
argument_list|)
operator|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|cli
operator|.
name|getOrdinals
argument_list|(
name|doc
argument_list|,
name|ordinals
argument_list|)
expr_stmt|;
specifier|final
name|int
name|upto
init|=
name|ordinals
operator|.
name|offset
operator|+
name|ordinals
operator|.
name|length
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|ordinals
operator|.
name|offset
init|;
name|i
operator|<
name|upto
condition|;
name|i
operator|++
control|)
block|{
operator|++
name|counts
index|[
name|ordinals
operator|.
name|ints
index|[
name|i
index|]
index|]
expr_stmt|;
block|}
operator|++
name|doc
expr_stmt|;
block|}
block|}
DECL|method|rollupCounts
specifier|private
name|int
name|rollupCounts
parameter_list|(
name|int
name|ordinal
parameter_list|,
name|int
index|[]
name|children
parameter_list|,
name|int
index|[]
name|siblings
parameter_list|,
name|int
index|[]
name|counts
parameter_list|)
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|ordinal
operator|!=
name|TaxonomyReader
operator|.
name|INVALID_ORDINAL
condition|)
block|{
name|int
name|childCount
init|=
name|counts
index|[
name|ordinal
index|]
decl_stmt|;
name|childCount
operator|+=
name|rollupCounts
argument_list|(
name|children
index|[
name|ordinal
index|]
argument_list|,
name|children
argument_list|,
name|siblings
argument_list|,
name|counts
argument_list|)
expr_stmt|;
name|counts
index|[
name|ordinal
index|]
operator|=
name|childCount
expr_stmt|;
name|count
operator|+=
name|childCount
expr_stmt|;
name|ordinal
operator|=
name|siblings
index|[
name|ordinal
index|]
expr_stmt|;
block|}
return|return
name|count
return|;
block|}
annotation|@
name|Override
DECL|method|rollupValues
specifier|public
name|void
name|rollupValues
parameter_list|(
name|int
name|ordinal
parameter_list|,
name|int
index|[]
name|children
parameter_list|,
name|int
index|[]
name|siblings
parameter_list|,
name|FacetArrays
name|facetArrays
parameter_list|)
block|{
specifier|final
name|int
index|[]
name|counts
init|=
name|facetArrays
operator|.
name|getIntArray
argument_list|()
decl_stmt|;
name|counts
index|[
name|ordinal
index|]
operator|+=
name|rollupCounts
argument_list|(
name|children
index|[
name|ordinal
index|]
argument_list|,
name|children
argument_list|,
name|siblings
argument_list|,
name|counts
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|requiresDocScores
specifier|public
specifier|final
name|boolean
name|requiresDocScores
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
block|}
end_class
end_unit
