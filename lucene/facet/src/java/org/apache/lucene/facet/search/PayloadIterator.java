begin_unit
begin_package
DECL|package|org.apache.lucene.facet.search
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|search
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|AtomicReaderContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DocsAndPositionsEnum
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Fields
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Terms
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|TermsEnum
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|DocIdSetIterator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_comment
comment|/**  * A utility class for iterating through a posting list of a given term and  * retrieving the payload of the first position in every document. For  * efficiency, this class does not check if documents passed to  * {@link #getPayload(int)} are deleted, since it is usually used to iterate on  * payloads of documents that matched a query. If you need to skip over deleted  * documents, you should do so before calling {@link #getPayload(int)}.  *   * @lucene.experimental  */
end_comment
begin_class
DECL|class|PayloadIterator
specifier|public
class|class
name|PayloadIterator
block|{
DECL|field|reuseTE
specifier|private
name|TermsEnum
name|reuseTE
decl_stmt|;
DECL|field|dpe
specifier|private
name|DocsAndPositionsEnum
name|dpe
decl_stmt|;
DECL|field|hasMore
specifier|private
name|boolean
name|hasMore
decl_stmt|;
DECL|field|curDocID
specifier|private
name|int
name|curDocID
decl_stmt|;
DECL|field|term
specifier|private
specifier|final
name|Term
name|term
decl_stmt|;
DECL|method|PayloadIterator
specifier|public
name|PayloadIterator
parameter_list|(
name|Term
name|term
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|term
operator|=
name|term
expr_stmt|;
block|}
comment|/**    * Sets the {@link AtomicReaderContext} for which {@link #getPayload(int)}    * calls will be made. Returns true iff this reader has payload for any of the    * documents belonging to the {@link Term} given to the constructor.    */
DECL|method|setNextReader
specifier|public
name|boolean
name|setNextReader
parameter_list|(
name|AtomicReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|hasMore
operator|=
literal|false
expr_stmt|;
name|Fields
name|fields
init|=
name|context
operator|.
name|reader
argument_list|()
operator|.
name|fields
argument_list|()
decl_stmt|;
if|if
condition|(
name|fields
operator|!=
literal|null
condition|)
block|{
name|Terms
name|terms
init|=
name|fields
operator|.
name|terms
argument_list|(
name|term
operator|.
name|field
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|terms
operator|!=
literal|null
condition|)
block|{
name|reuseTE
operator|=
name|terms
operator|.
name|iterator
argument_list|(
name|reuseTE
argument_list|)
expr_stmt|;
if|if
condition|(
name|reuseTE
operator|.
name|seekExact
argument_list|(
name|term
operator|.
name|bytes
argument_list|()
argument_list|,
literal|true
argument_list|)
condition|)
block|{
comment|// this class is usually used to iterate on whatever a Query matched
comment|// if it didn't match deleted documents, we won't receive them. if it
comment|// did, we should iterate on them too, therefore we pass liveDocs=null
name|dpe
operator|=
name|reuseTE
operator|.
name|docsAndPositions
argument_list|(
literal|null
argument_list|,
name|dpe
argument_list|,
name|DocsAndPositionsEnum
operator|.
name|FLAG_PAYLOADS
argument_list|)
expr_stmt|;
if|if
condition|(
name|dpe
operator|!=
literal|null
operator|&&
operator|(
name|curDocID
operator|=
name|dpe
operator|.
name|nextDoc
argument_list|()
operator|)
operator|!=
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
condition|)
block|{
name|hasMore
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|hasMore
return|;
block|}
comment|/**    * Returns the {@link BytesRef payload} of the given document, or {@code null}    * if the document does not exist, there are no more documents in the posting    * list, or the document exists but has not payload. The given document IDs    * are treated as local to the reader given to    * {@link #setNextReader(AtomicReaderContext)}.    */
DECL|method|getPayload
specifier|public
name|BytesRef
name|getPayload
parameter_list|(
name|int
name|docID
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|hasMore
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|curDocID
operator|>
name|docID
condition|)
block|{
comment|// document does not exist
return|return
literal|null
return|;
block|}
if|if
condition|(
name|curDocID
operator|<
name|docID
condition|)
block|{
name|curDocID
operator|=
name|dpe
operator|.
name|advance
argument_list|(
name|docID
argument_list|)
expr_stmt|;
if|if
condition|(
name|curDocID
operator|!=
name|docID
condition|)
block|{
comment|// requested document does not have a payload
if|if
condition|(
name|curDocID
operator|==
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
condition|)
block|{
comment|// no more docs in this reader
name|hasMore
operator|=
literal|false
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
comment|// we're on the document
assert|assert
name|dpe
operator|.
name|freq
argument_list|()
operator|==
literal|1
operator|:
literal|"expecting freq=1 (got "
operator|+
name|dpe
operator|.
name|freq
argument_list|()
operator|+
literal|") term="
operator|+
name|term
operator|+
literal|" doc="
operator|+
name|curDocID
assert|;
name|int
name|pos
init|=
name|dpe
operator|.
name|nextPosition
argument_list|()
decl_stmt|;
assert|assert
name|pos
operator|!=
operator|-
literal|1
operator|:
literal|"no positions for term="
operator|+
name|term
operator|+
literal|" doc="
operator|+
name|curDocID
assert|;
return|return
name|dpe
operator|.
name|getPayload
argument_list|()
return|;
block|}
block|}
end_class
end_unit
