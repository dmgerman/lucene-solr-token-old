begin_unit
begin_package
DECL|package|org.apache.lucene.facet.search
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|search
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|params
operator|.
name|CategoryListParams
operator|.
name|OrdinalPolicy
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|params
operator|.
name|FacetIndexingParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|taxonomy
operator|.
name|FacetLabel
import|;
end_import
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_comment
comment|/**  * Defines an aggregation request for a category. Allows specifying the  * {@link #numResults number of child categories} to return as well as  * {@link #getSortOrder() which} categories to consider the "top" (highest or  * lowest ranking ones).  *<p>  * If the category being aggregated is hierarchical, you can also specify the  * {@link #setDepth(int) depth} up which to aggregate child categories as well  * as how the result should be {@link #setResultMode(ResultMode) constructed}.  *   * @lucene.experimental  */
end_comment
begin_class
DECL|class|FacetRequest
specifier|public
specifier|abstract
class|class
name|FacetRequest
block|{
comment|/**    * When {@link FacetRequest#getDepth()} is greater than 1, defines the    * structure of the result as well as how constraints such as    * {@link FacetRequest#numResults} and {@link FacetRequest#getNumLabel()} are    * applied.    */
DECL|enum|ResultMode
specifier|public
enum|enum
name|ResultMode
block|{
comment|/**      * Constraints are applied per node, and the result has a full tree      * structure. Default result mode.      */
DECL|enum constant|PER_NODE_IN_TREE
name|PER_NODE_IN_TREE
block|,
comment|/**      * Constraints are applied globally, on total number of results, and the      * result has a flat structure.      */
DECL|enum constant|GLOBAL_FLAT
name|GLOBAL_FLAT
block|}
comment|/**    * Defines which categories to return. If {@link #DESCENDING} (the default),    * the highest {@link FacetRequest#numResults} weighted categories will be    * returned, otherwise the lowest ones.    */
DECL|enum|SortOrder
DECL|enum constant|ASCENDING
DECL|enum constant|DESCENDING
specifier|public
enum|enum
name|SortOrder
block|{
name|ASCENDING
block|,
name|DESCENDING
block|}
comment|/** The category being aggregated in this facet request. */
DECL|field|categoryPath
specifier|public
specifier|final
name|FacetLabel
name|categoryPath
decl_stmt|;
comment|/** The number of child categories to return for {@link #categoryPath}. */
DECL|field|numResults
specifier|public
specifier|final
name|int
name|numResults
decl_stmt|;
DECL|field|numLabel
specifier|private
name|int
name|numLabel
decl_stmt|;
DECL|field|depth
specifier|private
name|int
name|depth
init|=
literal|1
decl_stmt|;
DECL|field|sortOrder
specifier|private
name|SortOrder
name|sortOrder
init|=
name|SortOrder
operator|.
name|DESCENDING
decl_stmt|;
DECL|field|resultMode
specifier|private
name|ResultMode
name|resultMode
init|=
name|ResultMode
operator|.
name|PER_NODE_IN_TREE
decl_stmt|;
comment|// Computed at construction; based on categoryPath and numResults.
DECL|field|hashCode
specifier|private
specifier|final
name|int
name|hashCode
decl_stmt|;
comment|/**    * Constructor with the given category to aggregate and the number of child    * categories to return.    *     * @param path    *          the category to aggregate. Cannot be {@code null}.    * @param numResults    *          the number of child categories to return. If set to    *          {@code Integer.MAX_VALUE}, all immediate child categories will be    *          returned. Must be greater than 0.    */
DECL|method|FacetRequest
specifier|public
name|FacetRequest
parameter_list|(
name|FacetLabel
name|path
parameter_list|,
name|int
name|numResults
parameter_list|)
block|{
if|if
condition|(
name|numResults
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"num results must be a positive (>0) number: "
operator|+
name|numResults
argument_list|)
throw|;
block|}
if|if
condition|(
name|path
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"category path cannot be null!"
argument_list|)
throw|;
block|}
name|categoryPath
operator|=
name|path
expr_stmt|;
name|this
operator|.
name|numResults
operator|=
name|numResults
expr_stmt|;
name|numLabel
operator|=
name|numResults
expr_stmt|;
name|hashCode
operator|=
name|categoryPath
operator|.
name|hashCode
argument_list|()
operator|^
name|this
operator|.
name|numResults
expr_stmt|;
block|}
comment|/**    * Returns the {@link FacetsAggregator} which can aggregate the categories of    * this facet request. The aggregator is expected to aggregate category values    * into {@link FacetArrays}. If the facet request does not support that, e.g.    * {@link RangeFacetRequest}, it can return {@code null}. Note though that    * such requests require a dedicated {@link FacetsAccumulator}.    */
DECL|method|createFacetsAggregator
specifier|public
specifier|abstract
name|FacetsAggregator
name|createFacetsAggregator
parameter_list|(
name|FacetIndexingParams
name|fip
parameter_list|)
function_decl|;
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|instanceof
name|FacetRequest
condition|)
block|{
name|FacetRequest
name|that
init|=
operator|(
name|FacetRequest
operator|)
name|o
decl_stmt|;
return|return
name|that
operator|.
name|hashCode
operator|==
name|this
operator|.
name|hashCode
operator|&&
name|that
operator|.
name|categoryPath
operator|.
name|equals
argument_list|(
name|this
operator|.
name|categoryPath
argument_list|)
operator|&&
name|that
operator|.
name|numResults
operator|==
name|this
operator|.
name|numResults
operator|&&
name|that
operator|.
name|depth
operator|==
name|this
operator|.
name|depth
operator|&&
name|that
operator|.
name|resultMode
operator|==
name|this
operator|.
name|resultMode
operator|&&
name|that
operator|.
name|numLabel
operator|==
name|this
operator|.
name|numLabel
operator|&&
name|that
operator|.
name|sortOrder
operator|==
name|this
operator|.
name|sortOrder
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/**    * How deeply to look under {@link #categoryPath}. By default, only its    * immediate children are aggregated (depth=1). If set to    * {@code Integer.MAX_VALUE}, the entire sub-tree of the category will be    * aggregated.    *<p>    *<b>NOTE:</b> setting depth to 0 means that only the category itself should    * be aggregated. In that case, make sure to index the category with    * {@link OrdinalPolicy#ALL_PARENTS}, unless it is not the root category (the    * dimension), in which case {@link OrdinalPolicy#ALL_BUT_DIMENSION} is fine    * too.    */
DECL|method|getDepth
specifier|public
specifier|final
name|int
name|getDepth
parameter_list|()
block|{
comment|// TODO an AUTO_EXPAND option could be useful
return|return
name|depth
return|;
block|}
comment|/**    * Allows to specify the number of categories to label. By default all    * returned categories are labeled.    *<p>    * This allows an app to request a large number of results to return, while    * labeling them on-demand (e.g. when the UI requests to show more    * categories).    */
DECL|method|getNumLabel
specifier|public
specifier|final
name|int
name|getNumLabel
parameter_list|()
block|{
return|return
name|numLabel
return|;
block|}
comment|/** Return the requested result mode (defaults to {@link ResultMode#PER_NODE_IN_TREE}. */
DECL|method|getResultMode
specifier|public
specifier|final
name|ResultMode
name|getResultMode
parameter_list|()
block|{
return|return
name|resultMode
return|;
block|}
comment|/** Return the requested order of results (defaults to {@link SortOrder#DESCENDING}. */
DECL|method|getSortOrder
specifier|public
specifier|final
name|SortOrder
name|getSortOrder
parameter_list|()
block|{
return|return
name|sortOrder
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|hashCode
return|;
block|}
comment|/**    * Sets the depth up to which to aggregate facets.    *     * @see #getDepth()    */
DECL|method|setDepth
specifier|public
name|void
name|setDepth
parameter_list|(
name|int
name|depth
parameter_list|)
block|{
name|this
operator|.
name|depth
operator|=
name|depth
expr_stmt|;
block|}
comment|/**    * Sets the number of categories to label.    *     * @see #getNumLabel()    */
DECL|method|setNumLabel
specifier|public
name|void
name|setNumLabel
parameter_list|(
name|int
name|numLabel
parameter_list|)
block|{
name|this
operator|.
name|numLabel
operator|=
name|numLabel
expr_stmt|;
block|}
comment|/**    * Sets the {@link ResultMode} for this request.    *     * @see #getResultMode()    */
DECL|method|setResultMode
specifier|public
name|void
name|setResultMode
parameter_list|(
name|ResultMode
name|resultMode
parameter_list|)
block|{
name|this
operator|.
name|resultMode
operator|=
name|resultMode
expr_stmt|;
block|}
comment|/**    * Sets the {@link SortOrder} for this request.    *     * @see #getSortOrder()    */
DECL|method|setSortOrder
specifier|public
name|void
name|setSortOrder
parameter_list|(
name|SortOrder
name|sortOrder
parameter_list|)
block|{
name|this
operator|.
name|sortOrder
operator|=
name|sortOrder
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|categoryPath
operator|.
name|toString
argument_list|()
operator|+
literal|" nRes="
operator|+
name|numResults
operator|+
literal|" nLbl="
operator|+
name|numLabel
return|;
block|}
block|}
end_class
end_unit
