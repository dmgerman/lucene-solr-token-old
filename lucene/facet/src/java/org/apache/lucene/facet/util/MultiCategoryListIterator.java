begin_unit
begin_package
DECL|package|org.apache.lucene.facet.util
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|util
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|search
operator|.
name|CategoryListIterator
import|;
end_import
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_comment
comment|/**  * Iterates over multiple {@link CategoryListIterator}s, consuming the provided  * iterators in order.  *   * @lucene.experimental  */
end_comment
begin_class
DECL|class|MultiCategoryListIterator
specifier|public
class|class
name|MultiCategoryListIterator
implements|implements
name|CategoryListIterator
block|{
DECL|field|iterators
specifier|private
specifier|final
name|CategoryListIterator
index|[]
name|iterators
decl_stmt|;
DECL|field|validIterators
specifier|private
specifier|final
name|List
argument_list|<
name|CategoryListIterator
argument_list|>
name|validIterators
decl_stmt|;
DECL|field|perDocValidIterators
specifier|private
specifier|final
name|List
argument_list|<
name|CategoryListIterator
argument_list|>
name|perDocValidIterators
decl_stmt|;
comment|/** Receives the iterators to iterate on */
DECL|method|MultiCategoryListIterator
specifier|public
name|MultiCategoryListIterator
parameter_list|(
name|CategoryListIterator
modifier|...
name|iterators
parameter_list|)
block|{
name|this
operator|.
name|iterators
operator|=
name|iterators
expr_stmt|;
name|this
operator|.
name|validIterators
operator|=
operator|new
name|ArrayList
argument_list|<
name|CategoryListIterator
argument_list|>
argument_list|()
expr_stmt|;
name|this
operator|.
name|perDocValidIterators
operator|=
operator|new
name|ArrayList
argument_list|<
name|CategoryListIterator
argument_list|>
argument_list|()
expr_stmt|;
block|}
comment|/** Fails if all given iterators fail to init */
DECL|method|init
specifier|public
name|boolean
name|init
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|CategoryListIterator
name|cli
range|:
name|iterators
control|)
block|{
if|if
condition|(
name|cli
operator|.
name|init
argument_list|()
condition|)
block|{
name|validIterators
operator|.
name|add
argument_list|(
name|cli
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|!
name|validIterators
operator|.
name|isEmpty
argument_list|()
return|;
block|}
comment|/**    * Return a value larger than {@link Integer#MAX_VALUE} only if all    * iterators are exhausted    */
DECL|method|nextCategory
specifier|public
name|long
name|nextCategory
parameter_list|()
throws|throws
name|IOException
block|{
while|while
condition|(
operator|!
name|perDocValidIterators
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|long
name|value
init|=
name|perDocValidIterators
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|nextCategory
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|<=
name|Integer
operator|.
name|MAX_VALUE
condition|)
block|{
return|return
name|value
return|;
block|}
name|perDocValidIterators
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
return|return
literal|0x100000000L
return|;
block|}
comment|/**    * Fails only if skipTo on all the provided iterators returned {@code false}    */
DECL|method|skipTo
specifier|public
name|boolean
name|skipTo
parameter_list|(
name|int
name|docId
parameter_list|)
throws|throws
name|IOException
block|{
name|perDocValidIterators
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|CategoryListIterator
name|cli
range|:
name|validIterators
control|)
block|{
if|if
condition|(
name|cli
operator|.
name|skipTo
argument_list|(
name|docId
argument_list|)
condition|)
block|{
name|perDocValidIterators
operator|.
name|add
argument_list|(
name|cli
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|!
name|perDocValidIterators
operator|.
name|isEmpty
argument_list|()
return|;
block|}
block|}
end_class
end_unit
