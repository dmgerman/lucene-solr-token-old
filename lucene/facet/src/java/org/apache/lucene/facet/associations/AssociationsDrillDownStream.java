begin_unit
begin_package
DECL|package|org.apache.lucene.facet.associations
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|associations
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|PayloadAttribute
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|index
operator|.
name|DrillDownStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|index
operator|.
name|params
operator|.
name|FacetIndexingParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|taxonomy
operator|.
name|CategoryPath
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|ByteArrayDataOutput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_comment
comment|/**  * A {@link DrillDownStream} which adds to each drill-down token a  * payload according to the {@link CategoryAssociation} defined in the  * {@link CategoryAssociationsContainer}.  *   * @lucene.experimental  */
end_comment
begin_class
DECL|class|AssociationsDrillDownStream
specifier|public
class|class
name|AssociationsDrillDownStream
extends|extends
name|DrillDownStream
block|{
DECL|field|payloadAttribute
specifier|private
specifier|final
name|PayloadAttribute
name|payloadAttribute
decl_stmt|;
DECL|field|payload
specifier|private
specifier|final
name|BytesRef
name|payload
decl_stmt|;
DECL|field|output
specifier|private
specifier|final
name|ByteArrayDataOutput
name|output
init|=
operator|new
name|ByteArrayDataOutput
argument_list|()
decl_stmt|;
DECL|field|associations
specifier|private
specifier|final
name|CategoryAssociationsContainer
name|associations
decl_stmt|;
DECL|method|AssociationsDrillDownStream
specifier|public
name|AssociationsDrillDownStream
parameter_list|(
name|CategoryAssociationsContainer
name|associations
parameter_list|,
name|FacetIndexingParams
name|indexingParams
parameter_list|)
block|{
name|super
argument_list|(
name|associations
argument_list|,
name|indexingParams
argument_list|)
expr_stmt|;
name|this
operator|.
name|associations
operator|=
name|associations
expr_stmt|;
name|payloadAttribute
operator|=
name|addAttribute
argument_list|(
name|PayloadAttribute
operator|.
name|class
argument_list|)
expr_stmt|;
name|BytesRef
name|bytes
init|=
name|payloadAttribute
operator|.
name|getPayload
argument_list|()
decl_stmt|;
if|if
condition|(
name|bytes
operator|==
literal|null
condition|)
block|{
name|bytes
operator|=
operator|new
name|BytesRef
argument_list|(
operator|new
name|byte
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|payloadAttribute
operator|.
name|setPayload
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
block|}
name|bytes
operator|.
name|offset
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|payload
operator|=
name|bytes
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|addAdditionalAttributes
specifier|protected
name|void
name|addAdditionalAttributes
parameter_list|(
name|CategoryPath
name|cp
parameter_list|,
name|boolean
name|isParent
parameter_list|)
block|{
if|if
condition|(
name|isParent
condition|)
block|{
return|return;
comment|// associations are not added to parent categories
block|}
name|CategoryAssociation
name|association
init|=
name|associations
operator|.
name|getAssociation
argument_list|(
name|cp
argument_list|)
decl_stmt|;
if|if
condition|(
name|association
operator|==
literal|null
condition|)
block|{
comment|// it is ok to set a null association for a category - it's treated as a
comment|// regular category in that case.
return|return;
block|}
if|if
condition|(
name|payload
operator|.
name|bytes
operator|.
name|length
operator|<
name|association
operator|.
name|maxBytesNeeded
argument_list|()
condition|)
block|{
name|payload
operator|.
name|grow
argument_list|(
name|association
operator|.
name|maxBytesNeeded
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|output
operator|.
name|reset
argument_list|(
name|payload
operator|.
name|bytes
argument_list|)
expr_stmt|;
name|association
operator|.
name|serialize
argument_list|(
name|output
argument_list|)
expr_stmt|;
name|payload
operator|.
name|length
operator|=
name|output
operator|.
name|getPosition
argument_list|()
expr_stmt|;
block|}
block|}
end_class
end_unit
