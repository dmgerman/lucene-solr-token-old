begin_unit
begin_package
DECL|package|org.apache.lucene.facet.taxonomy
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|taxonomy
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|taxonomy
operator|.
name|directory
operator|.
name|DirectoryTaxonomyReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|taxonomy
operator|.
name|directory
operator|.
name|DirectoryTaxonomyWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DirectoryReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|ReferenceManager
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|SearcherFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|SearcherManager
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import
begin_comment
comment|/**  * Manages near-real-time reopen of both an IndexSearcher  * and a TaxonomyReader.  *  *<p><b>NOTE</b>: If you call {@link  * DirectoryTaxonomyWriter#replaceTaxonomy} then you must  * open a new {@code SearcherTaxonomyManager} afterwards.  */
end_comment
begin_class
DECL|class|SearcherTaxonomyManager
specifier|public
class|class
name|SearcherTaxonomyManager
extends|extends
name|ReferenceManager
argument_list|<
name|SearcherTaxonomyManager
operator|.
name|SearcherAndTaxonomy
argument_list|>
block|{
comment|/** Holds a matched pair of {@link IndexSearcher} and    *  {@link TaxonomyReader} */
DECL|class|SearcherAndTaxonomy
specifier|public
specifier|static
class|class
name|SearcherAndTaxonomy
block|{
comment|/** Point-in-time {@link IndexSearcher}. */
DECL|field|searcher
specifier|public
specifier|final
name|IndexSearcher
name|searcher
decl_stmt|;
comment|/** Matching point-in-time {@link DirectoryTaxonomyReader}. */
DECL|field|taxonomyReader
specifier|public
specifier|final
name|DirectoryTaxonomyReader
name|taxonomyReader
decl_stmt|;
comment|/** Create a SearcherAndTaxonomy */
DECL|method|SearcherAndTaxonomy
specifier|public
name|SearcherAndTaxonomy
parameter_list|(
name|IndexSearcher
name|searcher
parameter_list|,
name|DirectoryTaxonomyReader
name|taxonomyReader
parameter_list|)
block|{
name|this
operator|.
name|searcher
operator|=
name|searcher
expr_stmt|;
name|this
operator|.
name|taxonomyReader
operator|=
name|taxonomyReader
expr_stmt|;
block|}
block|}
DECL|field|searcherFactory
specifier|private
specifier|final
name|SearcherFactory
name|searcherFactory
decl_stmt|;
DECL|field|taxoEpoch
specifier|private
specifier|final
name|long
name|taxoEpoch
decl_stmt|;
DECL|field|taxoWriter
specifier|private
specifier|final
name|DirectoryTaxonomyWriter
name|taxoWriter
decl_stmt|;
comment|/** Creates near-real-time searcher and taxonomy reader    *  from the corresponding writers. */
DECL|method|SearcherTaxonomyManager
specifier|public
name|SearcherTaxonomyManager
parameter_list|(
name|IndexWriter
name|writer
parameter_list|,
name|boolean
name|applyAllDeletes
parameter_list|,
name|SearcherFactory
name|searcherFactory
parameter_list|,
name|DirectoryTaxonomyWriter
name|taxoWriter
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|searcherFactory
operator|==
literal|null
condition|)
block|{
name|searcherFactory
operator|=
operator|new
name|SearcherFactory
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|searcherFactory
operator|=
name|searcherFactory
expr_stmt|;
name|this
operator|.
name|taxoWriter
operator|=
name|taxoWriter
expr_stmt|;
name|DirectoryTaxonomyReader
name|taxoReader
init|=
operator|new
name|DirectoryTaxonomyReader
argument_list|(
name|taxoWriter
argument_list|)
decl_stmt|;
name|current
operator|=
operator|new
name|SearcherAndTaxonomy
argument_list|(
name|SearcherManager
operator|.
name|getSearcher
argument_list|(
name|searcherFactory
argument_list|,
name|DirectoryReader
operator|.
name|open
argument_list|(
name|writer
argument_list|,
name|applyAllDeletes
argument_list|)
argument_list|,
literal|null
argument_list|)
argument_list|,
name|taxoReader
argument_list|)
expr_stmt|;
name|this
operator|.
name|taxoEpoch
operator|=
name|taxoWriter
operator|.
name|getTaxonomyEpoch
argument_list|()
expr_stmt|;
block|}
comment|/**    * Creates search and taxonomy readers over the corresponding directories.    *     *<p>    *<b>NOTE:</b> you should only use this constructor if you commit and call    * {@link #maybeRefresh()} in the same thread. Otherwise it could lead to an    * unsync'd {@link IndexSearcher} and {@link TaxonomyReader} pair.    */
DECL|method|SearcherTaxonomyManager
specifier|public
name|SearcherTaxonomyManager
parameter_list|(
name|Directory
name|indexDir
parameter_list|,
name|Directory
name|taxoDir
parameter_list|,
name|SearcherFactory
name|searcherFactory
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|searcherFactory
operator|==
literal|null
condition|)
block|{
name|searcherFactory
operator|=
operator|new
name|SearcherFactory
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|searcherFactory
operator|=
name|searcherFactory
expr_stmt|;
name|DirectoryTaxonomyReader
name|taxoReader
init|=
operator|new
name|DirectoryTaxonomyReader
argument_list|(
name|taxoDir
argument_list|)
decl_stmt|;
name|current
operator|=
operator|new
name|SearcherAndTaxonomy
argument_list|(
name|SearcherManager
operator|.
name|getSearcher
argument_list|(
name|searcherFactory
argument_list|,
name|DirectoryReader
operator|.
name|open
argument_list|(
name|indexDir
argument_list|)
argument_list|,
literal|null
argument_list|)
argument_list|,
name|taxoReader
argument_list|)
expr_stmt|;
name|this
operator|.
name|taxoWriter
operator|=
literal|null
expr_stmt|;
name|taxoEpoch
operator|=
operator|-
literal|1
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|decRef
specifier|protected
name|void
name|decRef
parameter_list|(
name|SearcherAndTaxonomy
name|ref
parameter_list|)
throws|throws
name|IOException
block|{
name|ref
operator|.
name|searcher
operator|.
name|getIndexReader
argument_list|()
operator|.
name|decRef
argument_list|()
expr_stmt|;
comment|// This decRef can fail, and then in theory we should
comment|// tryIncRef the searcher to put back the ref count
comment|// ... but 1) the below decRef should only fail because
comment|// it decRef'd to 0 and closed and hit some IOException
comment|// during close, in which case 2) very likely the
comment|// searcher was also just closed by the above decRef and
comment|// a tryIncRef would fail:
name|ref
operator|.
name|taxonomyReader
operator|.
name|decRef
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|tryIncRef
specifier|protected
name|boolean
name|tryIncRef
parameter_list|(
name|SearcherAndTaxonomy
name|ref
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|ref
operator|.
name|searcher
operator|.
name|getIndexReader
argument_list|()
operator|.
name|tryIncRef
argument_list|()
condition|)
block|{
if|if
condition|(
name|ref
operator|.
name|taxonomyReader
operator|.
name|tryIncRef
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
name|ref
operator|.
name|searcher
operator|.
name|getIndexReader
argument_list|()
operator|.
name|decRef
argument_list|()
expr_stmt|;
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|refreshIfNeeded
specifier|protected
name|SearcherAndTaxonomy
name|refreshIfNeeded
parameter_list|(
name|SearcherAndTaxonomy
name|ref
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Must re-open searcher first, otherwise we may get a
comment|// new reader that references ords not yet known to the
comment|// taxonomy reader:
specifier|final
name|IndexReader
name|r
init|=
name|ref
operator|.
name|searcher
operator|.
name|getIndexReader
argument_list|()
decl_stmt|;
specifier|final
name|IndexReader
name|newReader
init|=
name|DirectoryReader
operator|.
name|openIfChanged
argument_list|(
operator|(
name|DirectoryReader
operator|)
name|r
argument_list|)
decl_stmt|;
if|if
condition|(
name|newReader
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
name|DirectoryTaxonomyReader
name|tr
init|=
name|TaxonomyReader
operator|.
name|openIfChanged
argument_list|(
name|ref
operator|.
name|taxonomyReader
argument_list|)
decl_stmt|;
if|if
condition|(
name|tr
operator|==
literal|null
condition|)
block|{
name|ref
operator|.
name|taxonomyReader
operator|.
name|incRef
argument_list|()
expr_stmt|;
name|tr
operator|=
name|ref
operator|.
name|taxonomyReader
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|taxoWriter
operator|!=
literal|null
operator|&&
name|taxoWriter
operator|.
name|getTaxonomyEpoch
argument_list|()
operator|!=
name|taxoEpoch
condition|)
block|{
name|IOUtils
operator|.
name|close
argument_list|(
name|newReader
argument_list|,
name|tr
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"DirectoryTaxonomyWriter.replaceTaxonomy was called, which is not allowed when using SearcherTaxonomyManager"
argument_list|)
throw|;
block|}
return|return
operator|new
name|SearcherAndTaxonomy
argument_list|(
name|SearcherManager
operator|.
name|getSearcher
argument_list|(
name|searcherFactory
argument_list|,
name|newReader
argument_list|,
name|r
argument_list|)
argument_list|,
name|tr
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|getRefCount
specifier|protected
name|int
name|getRefCount
parameter_list|(
name|SearcherAndTaxonomy
name|reference
parameter_list|)
block|{
return|return
name|reference
operator|.
name|searcher
operator|.
name|getIndexReader
argument_list|()
operator|.
name|getRefCount
argument_list|()
return|;
block|}
block|}
end_class
end_unit
