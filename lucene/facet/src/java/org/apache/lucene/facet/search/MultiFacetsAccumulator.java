begin_unit
begin_package
DECL|package|org.apache.lucene.facet.search
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|search
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|params
operator|.
name|FacetSearchParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|search
operator|.
name|FacetResult
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|search
operator|.
name|FacetsAccumulator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|search
operator|.
name|FacetsCollector
operator|.
name|MatchingDocs
import|;
end_import
begin_comment
comment|/**  * Wraps multiple {@link FacetsAccumulator} and returns a merged list of  * {@link FacetResult}, in the order the accumulators were given.  */
end_comment
begin_class
DECL|class|MultiFacetsAccumulator
specifier|public
class|class
name|MultiFacetsAccumulator
extends|extends
name|FacetsAccumulator
block|{
DECL|field|accumulators
specifier|private
specifier|final
name|FacetsAccumulator
index|[]
name|accumulators
decl_stmt|;
comment|/** Wraps the given {@link FacetsAccumulator accumulators}. */
DECL|method|wrap
specifier|public
specifier|static
name|FacetsAccumulator
name|wrap
parameter_list|(
name|FacetsAccumulator
modifier|...
name|accumulators
parameter_list|)
block|{
if|if
condition|(
name|accumulators
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
name|accumulators
index|[
literal|0
index|]
return|;
block|}
else|else
block|{
return|return
operator|new
name|MultiFacetsAccumulator
argument_list|(
name|accumulators
argument_list|)
return|;
block|}
block|}
DECL|method|MultiFacetsAccumulator
specifier|private
name|MultiFacetsAccumulator
parameter_list|(
name|FacetsAccumulator
modifier|...
name|accumulators
parameter_list|)
block|{
name|super
argument_list|(
operator|(
name|FacetSearchParams
operator|)
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|accumulators
operator|=
name|accumulators
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|requiresDocScores
specifier|public
name|boolean
name|requiresDocScores
parameter_list|()
block|{
for|for
control|(
name|FacetsAccumulator
name|fa
range|:
name|accumulators
control|)
block|{
if|if
condition|(
name|fa
operator|.
name|requiresDocScores
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|accumulate
specifier|public
name|List
argument_list|<
name|FacetResult
argument_list|>
name|accumulate
parameter_list|(
name|List
argument_list|<
name|MatchingDocs
argument_list|>
name|matchingDocs
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|FacetResult
argument_list|>
name|merged
init|=
operator|new
name|ArrayList
argument_list|<
name|FacetResult
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|FacetsAccumulator
name|fa
range|:
name|accumulators
control|)
block|{
name|merged
operator|.
name|addAll
argument_list|(
name|fa
operator|.
name|accumulate
argument_list|(
name|matchingDocs
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|merged
return|;
block|}
block|}
end_class
end_unit
