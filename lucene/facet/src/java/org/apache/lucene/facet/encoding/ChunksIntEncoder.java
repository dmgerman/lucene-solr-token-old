begin_unit
begin_package
DECL|package|org.apache.lucene.facet.encoding
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|encoding
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IntsRef
import|;
end_import
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_comment
comment|/**  * An {@link IntEncoder} which encodes values in chunks. Implementations of this  * class assume the data which needs encoding consists of small, consecutive  * values, and therefore the encoder is able to compress them better. You can  * read more on the two implementations {@link FourFlagsIntEncoder} and  * {@link EightFlagsIntEncoder}.  *<p>  * Extensions of this class need to implement {@link #encode(IntsRef, BytesRef)}  * in order to build the proper indicator (flags). When enough values were  * accumulated (typically the batch size), extensions can call  * {@link #encodeChunk(BytesRef)} to flush the indicator and the rest of the  * values.  *<p>  *<b>NOTE:</b> flags encoders do not accept values&le; 0 (zero) in their  * {@link #encode(IntsRef, BytesRef)}. For performance reasons they do not check  * that condition, however if such value is passed the result stream may be  * corrupt or an exception will be thrown. Also, these encoders perform the best  * when there are many consecutive small values (depends on the encoder  * implementation). If that is not the case, the encoder will occupy 1 more byte  * for every<i>batch</i> number of integers, over whatever  * {@link VInt8IntEncoder} would have occupied. Therefore make sure to check  * whether your data fits into the conditions of the specific encoder.  *<p>  * For the reasons mentioned above, these encoders are usually chained with  * {@link UniqueValuesIntEncoder} and {@link DGapIntEncoder}.  *   * @lucene.experimental  */
end_comment
begin_class
DECL|class|ChunksIntEncoder
specifier|public
specifier|abstract
class|class
name|ChunksIntEncoder
extends|extends
name|IntEncoder
block|{
comment|/** Holds the values which must be encoded, outside the indicator. */
DECL|field|encodeQueue
specifier|protected
specifier|final
name|IntsRef
name|encodeQueue
decl_stmt|;
comment|/** Represents bits flag byte. */
DECL|field|indicator
specifier|protected
name|int
name|indicator
init|=
literal|0
decl_stmt|;
comment|/** Counts the current ordinal of the encoded value. */
DECL|field|ordinal
specifier|protected
name|byte
name|ordinal
init|=
literal|0
decl_stmt|;
DECL|method|ChunksIntEncoder
specifier|protected
name|ChunksIntEncoder
parameter_list|(
name|int
name|chunkSize
parameter_list|)
block|{
name|encodeQueue
operator|=
operator|new
name|IntsRef
argument_list|(
name|chunkSize
argument_list|)
expr_stmt|;
block|}
comment|/**    * Encodes the values of the current chunk. First it writes the indicator, and    * then it encodes the values outside the indicator.    */
DECL|method|encodeChunk
specifier|protected
name|void
name|encodeChunk
parameter_list|(
name|BytesRef
name|buf
parameter_list|)
block|{
comment|// ensure there's enough room in the buffer
name|int
name|maxBytesRequired
init|=
name|buf
operator|.
name|length
operator|+
literal|1
operator|+
name|encodeQueue
operator|.
name|length
operator|*
literal|4
decl_stmt|;
comment|/* indicator + at most 4 bytes per positive VInt */
if|if
condition|(
name|buf
operator|.
name|bytes
operator|.
name|length
operator|<
name|maxBytesRequired
condition|)
block|{
name|buf
operator|.
name|grow
argument_list|(
name|maxBytesRequired
argument_list|)
expr_stmt|;
block|}
name|buf
operator|.
name|bytes
index|[
name|buf
operator|.
name|length
operator|++
index|]
operator|=
operator|(
operator|(
name|byte
operator|)
name|indicator
operator|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|encodeQueue
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
comment|// it is better if the encoding is inlined like so, and not e.g.
comment|// in a utility method
name|int
name|value
init|=
name|encodeQueue
operator|.
name|ints
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
operator|(
name|value
operator|&
operator|~
literal|0x7F
operator|)
operator|==
literal|0
condition|)
block|{
name|buf
operator|.
name|bytes
index|[
name|buf
operator|.
name|length
index|]
operator|=
operator|(
name|byte
operator|)
name|value
expr_stmt|;
name|buf
operator|.
name|length
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|value
operator|&
operator|~
literal|0x3FFF
operator|)
operator|==
literal|0
condition|)
block|{
name|buf
operator|.
name|bytes
index|[
name|buf
operator|.
name|length
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
literal|0x80
operator||
operator|(
operator|(
name|value
operator|&
literal|0x3F80
operator|)
operator|>>
literal|7
operator|)
argument_list|)
expr_stmt|;
name|buf
operator|.
name|bytes
index|[
name|buf
operator|.
name|length
operator|+
literal|1
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|value
operator|&
literal|0x7F
argument_list|)
expr_stmt|;
name|buf
operator|.
name|length
operator|+=
literal|2
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|value
operator|&
operator|~
literal|0x1FFFFF
operator|)
operator|==
literal|0
condition|)
block|{
name|buf
operator|.
name|bytes
index|[
name|buf
operator|.
name|length
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
literal|0x80
operator||
operator|(
operator|(
name|value
operator|&
literal|0x1FC000
operator|)
operator|>>
literal|14
operator|)
argument_list|)
expr_stmt|;
name|buf
operator|.
name|bytes
index|[
name|buf
operator|.
name|length
operator|+
literal|1
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
literal|0x80
operator||
operator|(
operator|(
name|value
operator|&
literal|0x3F80
operator|)
operator|>>
literal|7
operator|)
argument_list|)
expr_stmt|;
name|buf
operator|.
name|bytes
index|[
name|buf
operator|.
name|length
operator|+
literal|2
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|value
operator|&
literal|0x7F
argument_list|)
expr_stmt|;
name|buf
operator|.
name|length
operator|+=
literal|3
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|value
operator|&
operator|~
literal|0xFFFFFFF
operator|)
operator|==
literal|0
condition|)
block|{
name|buf
operator|.
name|bytes
index|[
name|buf
operator|.
name|length
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
literal|0x80
operator||
operator|(
operator|(
name|value
operator|&
literal|0xFE00000
operator|)
operator|>>
literal|21
operator|)
argument_list|)
expr_stmt|;
name|buf
operator|.
name|bytes
index|[
name|buf
operator|.
name|length
operator|+
literal|1
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
literal|0x80
operator||
operator|(
operator|(
name|value
operator|&
literal|0x1FC000
operator|)
operator|>>
literal|14
operator|)
argument_list|)
expr_stmt|;
name|buf
operator|.
name|bytes
index|[
name|buf
operator|.
name|length
operator|+
literal|2
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
literal|0x80
operator||
operator|(
operator|(
name|value
operator|&
literal|0x3F80
operator|)
operator|>>
literal|7
operator|)
argument_list|)
expr_stmt|;
name|buf
operator|.
name|bytes
index|[
name|buf
operator|.
name|length
operator|+
literal|3
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|value
operator|&
literal|0x7F
argument_list|)
expr_stmt|;
name|buf
operator|.
name|length
operator|+=
literal|4
expr_stmt|;
block|}
else|else
block|{
name|buf
operator|.
name|bytes
index|[
name|buf
operator|.
name|length
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
literal|0x80
operator||
operator|(
operator|(
name|value
operator|&
literal|0xF0000000
operator|)
operator|>>
literal|28
operator|)
argument_list|)
expr_stmt|;
name|buf
operator|.
name|bytes
index|[
name|buf
operator|.
name|length
operator|+
literal|1
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
literal|0x80
operator||
operator|(
operator|(
name|value
operator|&
literal|0xFE00000
operator|)
operator|>>
literal|21
operator|)
argument_list|)
expr_stmt|;
name|buf
operator|.
name|bytes
index|[
name|buf
operator|.
name|length
operator|+
literal|2
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
literal|0x80
operator||
operator|(
operator|(
name|value
operator|&
literal|0x1FC000
operator|)
operator|>>
literal|14
operator|)
argument_list|)
expr_stmt|;
name|buf
operator|.
name|bytes
index|[
name|buf
operator|.
name|length
operator|+
literal|3
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
literal|0x80
operator||
operator|(
operator|(
name|value
operator|&
literal|0x3F80
operator|)
operator|>>
literal|7
operator|)
argument_list|)
expr_stmt|;
name|buf
operator|.
name|bytes
index|[
name|buf
operator|.
name|length
operator|+
literal|4
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|value
operator|&
literal|0x7F
argument_list|)
expr_stmt|;
name|buf
operator|.
name|length
operator|+=
literal|5
expr_stmt|;
block|}
block|}
name|ordinal
operator|=
literal|0
expr_stmt|;
name|indicator
operator|=
literal|0
expr_stmt|;
name|encodeQueue
operator|.
name|length
operator|=
literal|0
expr_stmt|;
block|}
block|}
end_class
end_unit
