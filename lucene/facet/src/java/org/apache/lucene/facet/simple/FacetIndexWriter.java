begin_unit
begin_package
DECL|package|org.apache.lucene.facet.simple
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|simple
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|BinaryDocValuesField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|FieldType
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|SortedSetDocValuesField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|StringField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|taxonomy
operator|.
name|CategoryPath
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|taxonomy
operator|.
name|TaxonomyWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexDocument
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriterConfig
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexableField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexableFieldType
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|StorableField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IntsRef
import|;
end_import
begin_class
DECL|class|FacetIndexWriter
specifier|public
class|class
name|FacetIndexWriter
extends|extends
name|IndexWriter
block|{
DECL|field|taxoWriter
specifier|private
specifier|final
name|TaxonomyWriter
name|taxoWriter
decl_stmt|;
DECL|field|facetDelimChar
specifier|private
specifier|final
name|char
name|facetDelimChar
decl_stmt|;
DECL|field|facetsConfig
specifier|private
specifier|final
name|FacetsConfig
name|facetsConfig
decl_stmt|;
comment|/** Use this if you will only use SSDV facets */
DECL|method|FacetIndexWriter
specifier|public
name|FacetIndexWriter
parameter_list|(
name|Directory
name|d
parameter_list|,
name|IndexWriterConfig
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|d
argument_list|,
name|conf
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|Constants
operator|.
name|DEFAULT_DELIM_CHAR
argument_list|)
expr_stmt|;
block|}
DECL|method|FacetIndexWriter
specifier|public
name|FacetIndexWriter
parameter_list|(
name|Directory
name|d
parameter_list|,
name|IndexWriterConfig
name|conf
parameter_list|,
name|TaxonomyWriter
name|taxoWriter
parameter_list|,
name|FacetsConfig
name|facetsConfig
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|d
argument_list|,
name|conf
argument_list|,
name|taxoWriter
argument_list|,
name|facetsConfig
argument_list|,
name|Constants
operator|.
name|DEFAULT_DELIM_CHAR
argument_list|)
expr_stmt|;
block|}
DECL|method|FacetIndexWriter
specifier|public
name|FacetIndexWriter
parameter_list|(
name|Directory
name|d
parameter_list|,
name|IndexWriterConfig
name|conf
parameter_list|,
name|TaxonomyWriter
name|taxoWriter
parameter_list|,
name|FacetsConfig
name|facetsConfig
parameter_list|,
name|char
name|facetDelimChar
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|d
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|taxoWriter
operator|=
name|taxoWriter
expr_stmt|;
name|this
operator|.
name|facetDelimChar
operator|=
name|facetDelimChar
expr_stmt|;
name|this
operator|.
name|facetsConfig
operator|=
name|facetsConfig
expr_stmt|;
block|}
comment|// nocommit maybe we could somehow "own" TaxonomyWriter
comment|// too?  commit it in commit, close it in close, etc?
comment|// nocommit also updateDocument, addDocument, addDocuments
annotation|@
name|Override
DECL|method|addDocument
specifier|public
name|void
name|addDocument
parameter_list|(
specifier|final
name|IndexDocument
name|doc
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Find all FacetFields, collated by the actual field:
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|FacetField
argument_list|>
argument_list|>
name|byField
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|FacetField
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
comment|// ... and also all SortedSetDocValuesFacetFields:
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|SortedSetDocValuesFacetField
argument_list|>
argument_list|>
name|dvByField
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|SortedSetDocValuesFacetField
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|IndexableField
name|field
range|:
name|doc
operator|.
name|indexableFields
argument_list|()
control|)
block|{
if|if
condition|(
name|field
operator|.
name|fieldType
argument_list|()
operator|==
name|FacetField
operator|.
name|TYPE
condition|)
block|{
name|FacetField
name|facetField
init|=
operator|(
name|FacetField
operator|)
name|field
decl_stmt|;
name|FacetsConfig
operator|.
name|DimConfig
name|dimConfig
init|=
name|facetsConfig
operator|.
name|getDimConfig
argument_list|(
name|field
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|indexedFieldName
init|=
name|dimConfig
operator|.
name|indexedFieldName
decl_stmt|;
name|List
argument_list|<
name|FacetField
argument_list|>
name|fields
init|=
name|byField
operator|.
name|get
argument_list|(
name|indexedFieldName
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
block|{
name|fields
operator|=
operator|new
name|ArrayList
argument_list|<
name|FacetField
argument_list|>
argument_list|()
expr_stmt|;
name|byField
operator|.
name|put
argument_list|(
name|indexedFieldName
argument_list|,
name|fields
argument_list|)
expr_stmt|;
block|}
name|fields
operator|.
name|add
argument_list|(
name|facetField
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|field
operator|.
name|fieldType
argument_list|()
operator|==
name|SortedSetDocValuesFacetField
operator|.
name|TYPE
condition|)
block|{
name|SortedSetDocValuesFacetField
name|facetField
init|=
operator|(
name|SortedSetDocValuesFacetField
operator|)
name|field
decl_stmt|;
name|FacetsConfig
operator|.
name|DimConfig
name|dimConfig
init|=
name|facetsConfig
operator|.
name|getDimConfig
argument_list|(
name|field
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|indexedFieldName
init|=
name|dimConfig
operator|.
name|indexedFieldName
decl_stmt|;
name|List
argument_list|<
name|SortedSetDocValuesFacetField
argument_list|>
name|fields
init|=
name|dvByField
operator|.
name|get
argument_list|(
name|indexedFieldName
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
block|{
name|fields
operator|=
operator|new
name|ArrayList
argument_list|<
name|SortedSetDocValuesFacetField
argument_list|>
argument_list|()
expr_stmt|;
name|dvByField
operator|.
name|put
argument_list|(
name|indexedFieldName
argument_list|,
name|fields
argument_list|)
expr_stmt|;
block|}
name|fields
operator|.
name|add
argument_list|(
name|facetField
argument_list|)
expr_stmt|;
block|}
block|}
name|List
argument_list|<
name|Field
argument_list|>
name|addedIndexedFields
init|=
operator|new
name|ArrayList
argument_list|<
name|Field
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Field
argument_list|>
name|addedStoredFields
init|=
operator|new
name|ArrayList
argument_list|<
name|Field
argument_list|>
argument_list|()
decl_stmt|;
name|processFacetFields
argument_list|(
name|byField
argument_list|,
name|addedIndexedFields
argument_list|,
name|addedStoredFields
argument_list|)
expr_stmt|;
name|processSSDVFacetFields
argument_list|(
name|dvByField
argument_list|,
name|addedIndexedFields
argument_list|,
name|addedStoredFields
argument_list|)
expr_stmt|;
comment|//System.out.println("add stored: " + addedStoredFields);
specifier|final
name|List
argument_list|<
name|IndexableField
argument_list|>
name|allIndexedFields
init|=
operator|new
name|ArrayList
argument_list|<
name|IndexableField
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|IndexableField
name|field
range|:
name|doc
operator|.
name|indexableFields
argument_list|()
control|)
block|{
name|IndexableFieldType
name|ft
init|=
name|field
operator|.
name|fieldType
argument_list|()
decl_stmt|;
if|if
condition|(
name|ft
operator|!=
name|FacetField
operator|.
name|TYPE
operator|&&
name|ft
operator|!=
name|SortedSetDocValuesFacetField
operator|.
name|TYPE
condition|)
block|{
name|allIndexedFields
operator|.
name|add
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|}
block|}
name|allIndexedFields
operator|.
name|addAll
argument_list|(
name|addedIndexedFields
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|StorableField
argument_list|>
name|allStoredFields
init|=
operator|new
name|ArrayList
argument_list|<
name|StorableField
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|StorableField
name|field
range|:
name|doc
operator|.
name|storableFields
argument_list|()
control|)
block|{
name|allStoredFields
operator|.
name|add
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|}
name|allStoredFields
operator|.
name|addAll
argument_list|(
name|addedStoredFields
argument_list|)
expr_stmt|;
comment|//System.out.println("all indexed: " + allIndexedFields);
comment|//System.out.println("all stored: " + allStoredFields);
name|super
operator|.
name|addDocument
argument_list|(
operator|new
name|IndexDocument
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Iterable
argument_list|<
name|IndexableField
argument_list|>
name|indexableFields
parameter_list|()
block|{
return|return
name|allIndexedFields
return|;
block|}
annotation|@
name|Override
specifier|public
name|Iterable
argument_list|<
name|StorableField
argument_list|>
name|storableFields
parameter_list|()
block|{
return|return
name|allStoredFields
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|processFacetFields
specifier|private
name|void
name|processFacetFields
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|FacetField
argument_list|>
argument_list|>
name|byField
parameter_list|,
name|List
argument_list|<
name|Field
argument_list|>
name|addedIndexedFields
parameter_list|,
name|List
argument_list|<
name|Field
argument_list|>
name|addedStoredFields
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|FacetField
argument_list|>
argument_list|>
name|ent
range|:
name|byField
operator|.
name|entrySet
argument_list|()
control|)
block|{
comment|// nocommit maybe we can somehow catch singleValued
comment|// dim appearing more than once?
name|String
name|indexedFieldName
init|=
name|ent
operator|.
name|getKey
argument_list|()
decl_stmt|;
comment|//System.out.println("  fields=" + ent.getValue());
name|IntsRef
name|ordinals
init|=
operator|new
name|IntsRef
argument_list|(
literal|32
argument_list|)
decl_stmt|;
for|for
control|(
name|FacetField
name|facetField
range|:
name|ent
operator|.
name|getValue
argument_list|()
control|)
block|{
name|FacetsConfig
operator|.
name|DimConfig
name|ft
init|=
name|facetsConfig
operator|.
name|getDimConfig
argument_list|(
name|facetField
operator|.
name|dim
argument_list|)
decl_stmt|;
if|if
condition|(
name|facetField
operator|.
name|path
operator|.
name|length
operator|>
literal|1
operator|&&
name|ft
operator|.
name|hierarchical
operator|==
literal|false
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"dimension \""
operator|+
name|facetField
operator|.
name|dim
operator|+
literal|"\" is not hierarchical yet has "
operator|+
name|facetField
operator|.
name|path
operator|.
name|length
operator|+
literal|" components"
argument_list|)
throw|;
block|}
comment|// Append dim and path:
name|String
index|[]
name|fullPath
init|=
operator|new
name|String
index|[
name|facetField
operator|.
name|path
operator|.
name|length
operator|+
literal|1
index|]
decl_stmt|;
name|fullPath
index|[
literal|0
index|]
operator|=
name|facetField
operator|.
name|dim
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|facetField
operator|.
name|path
argument_list|,
literal|0
argument_list|,
name|fullPath
argument_list|,
literal|1
argument_list|,
name|facetField
operator|.
name|path
operator|.
name|length
argument_list|)
expr_stmt|;
name|CategoryPath
name|cp
init|=
operator|new
name|CategoryPath
argument_list|(
name|fullPath
argument_list|)
decl_stmt|;
name|int
name|ordinal
init|=
name|taxoWriter
operator|.
name|addCategory
argument_list|(
name|cp
argument_list|)
decl_stmt|;
name|ordinals
operator|.
name|ints
index|[
name|ordinals
operator|.
name|length
operator|++
index|]
operator|=
name|ordinal
expr_stmt|;
comment|//System.out.println("  add cp=" + cp);
if|if
condition|(
name|ft
operator|.
name|hierarchical
operator|&&
name|ft
operator|.
name|multiValued
condition|)
block|{
comment|// Add all parents too:
name|int
name|parent
init|=
name|taxoWriter
operator|.
name|getParent
argument_list|(
name|ordinal
argument_list|)
decl_stmt|;
while|while
condition|(
name|parent
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|ordinals
operator|.
name|ints
operator|.
name|length
operator|==
name|ordinals
operator|.
name|length
condition|)
block|{
name|ordinals
operator|.
name|grow
argument_list|(
name|ordinals
operator|.
name|length
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
name|ordinals
operator|.
name|ints
index|[
name|ordinals
operator|.
name|length
operator|++
index|]
operator|=
name|parent
expr_stmt|;
name|parent
operator|=
name|taxoWriter
operator|.
name|getParent
argument_list|(
name|parent
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Drill down:
for|for
control|(
name|int
name|i
init|=
literal|2
init|;
name|i
operator|<=
name|cp
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|addedIndexedFields
operator|.
name|add
argument_list|(
operator|new
name|StringField
argument_list|(
name|indexedFieldName
argument_list|,
name|cp
operator|.
name|subpath
argument_list|(
name|i
argument_list|)
operator|.
name|toString
argument_list|(
name|facetDelimChar
argument_list|)
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Facet counts:
comment|// DocValues are considered stored fields:
name|addedStoredFields
operator|.
name|add
argument_list|(
operator|new
name|BinaryDocValuesField
argument_list|(
name|indexedFieldName
argument_list|,
name|dedupAndEncode
argument_list|(
name|ordinals
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|processSSDVFacetFields
specifier|private
name|void
name|processSSDVFacetFields
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|SortedSetDocValuesFacetField
argument_list|>
argument_list|>
name|byField
parameter_list|,
name|List
argument_list|<
name|Field
argument_list|>
name|addedIndexedFields
parameter_list|,
name|List
argument_list|<
name|Field
argument_list|>
name|addedStoredFields
parameter_list|)
throws|throws
name|IOException
block|{
comment|//System.out.println("process SSDV: " + byField);
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|SortedSetDocValuesFacetField
argument_list|>
argument_list|>
name|ent
range|:
name|byField
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|indexedFieldName
init|=
name|ent
operator|.
name|getKey
argument_list|()
decl_stmt|;
comment|//System.out.println("  field=" + indexedFieldName);
for|for
control|(
name|SortedSetDocValuesFacetField
name|facetField
range|:
name|ent
operator|.
name|getValue
argument_list|()
control|)
block|{
name|CategoryPath
name|cp
init|=
operator|new
name|CategoryPath
argument_list|(
name|facetField
operator|.
name|dim
argument_list|,
name|facetField
operator|.
name|label
argument_list|)
decl_stmt|;
name|String
name|fullPath
init|=
name|cp
operator|.
name|toString
argument_list|(
name|facetDelimChar
argument_list|)
decl_stmt|;
comment|//System.out.println("add " + fullPath);
comment|// For facet counts:
name|addedStoredFields
operator|.
name|add
argument_list|(
operator|new
name|SortedSetDocValuesField
argument_list|(
name|indexedFieldName
argument_list|,
operator|new
name|BytesRef
argument_list|(
name|fullPath
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// For drill-down:
name|addedIndexedFields
operator|.
name|add
argument_list|(
operator|new
name|StringField
argument_list|(
name|indexedFieldName
argument_list|,
name|fullPath
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/** We can open this up if/when we really need    *  pluggability on the encoding. */
DECL|method|dedupAndEncode
specifier|private
specifier|final
name|BytesRef
name|dedupAndEncode
parameter_list|(
name|IntsRef
name|ordinals
parameter_list|)
block|{
name|Arrays
operator|.
name|sort
argument_list|(
name|ordinals
operator|.
name|ints
argument_list|,
name|ordinals
operator|.
name|offset
argument_list|,
name|ordinals
operator|.
name|length
argument_list|)
expr_stmt|;
name|byte
index|[]
name|bytes
init|=
operator|new
name|byte
index|[
literal|5
operator|*
name|ordinals
operator|.
name|length
index|]
decl_stmt|;
name|int
name|lastOrd
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|upto
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ordinals
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|int
name|ord
init|=
name|ordinals
operator|.
name|ints
index|[
name|ordinals
operator|.
name|offset
operator|+
name|i
index|]
decl_stmt|;
comment|// ord could be == lastOrd, so we must dedup:
if|if
condition|(
name|ord
operator|>
name|lastOrd
condition|)
block|{
name|int
name|delta
decl_stmt|;
if|if
condition|(
name|lastOrd
operator|==
operator|-
literal|1
condition|)
block|{
name|delta
operator|=
name|ord
expr_stmt|;
block|}
else|else
block|{
name|delta
operator|=
name|ord
operator|-
name|lastOrd
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|delta
operator|&
operator|~
literal|0x7F
operator|)
operator|==
literal|0
condition|)
block|{
name|bytes
index|[
name|upto
index|]
operator|=
operator|(
name|byte
operator|)
name|delta
expr_stmt|;
name|upto
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|delta
operator|&
operator|~
literal|0x3FFF
operator|)
operator|==
literal|0
condition|)
block|{
name|bytes
index|[
name|upto
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
literal|0x80
operator||
operator|(
operator|(
name|delta
operator|&
literal|0x3F80
operator|)
operator|>>
literal|7
operator|)
argument_list|)
expr_stmt|;
name|bytes
index|[
name|upto
operator|+
literal|1
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|delta
operator|&
literal|0x7F
argument_list|)
expr_stmt|;
name|upto
operator|+=
literal|2
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|delta
operator|&
operator|~
literal|0x1FFFFF
operator|)
operator|==
literal|0
condition|)
block|{
name|bytes
index|[
name|upto
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
literal|0x80
operator||
operator|(
operator|(
name|delta
operator|&
literal|0x1FC000
operator|)
operator|>>
literal|14
operator|)
argument_list|)
expr_stmt|;
name|bytes
index|[
name|upto
operator|+
literal|1
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
literal|0x80
operator||
operator|(
operator|(
name|delta
operator|&
literal|0x3F80
operator|)
operator|>>
literal|7
operator|)
argument_list|)
expr_stmt|;
name|bytes
index|[
name|upto
operator|+
literal|2
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|delta
operator|&
literal|0x7F
argument_list|)
expr_stmt|;
name|upto
operator|+=
literal|3
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|delta
operator|&
operator|~
literal|0xFFFFFFF
operator|)
operator|==
literal|0
condition|)
block|{
name|bytes
index|[
name|upto
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
literal|0x80
operator||
operator|(
operator|(
name|delta
operator|&
literal|0xFE00000
operator|)
operator|>>
literal|21
operator|)
argument_list|)
expr_stmt|;
name|bytes
index|[
name|upto
operator|+
literal|1
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
literal|0x80
operator||
operator|(
operator|(
name|delta
operator|&
literal|0x1FC000
operator|)
operator|>>
literal|14
operator|)
argument_list|)
expr_stmt|;
name|bytes
index|[
name|upto
operator|+
literal|2
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
literal|0x80
operator||
operator|(
operator|(
name|delta
operator|&
literal|0x3F80
operator|)
operator|>>
literal|7
operator|)
argument_list|)
expr_stmt|;
name|bytes
index|[
name|upto
operator|+
literal|3
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|delta
operator|&
literal|0x7F
argument_list|)
expr_stmt|;
name|upto
operator|+=
literal|4
expr_stmt|;
block|}
else|else
block|{
name|bytes
index|[
name|upto
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
literal|0x80
operator||
operator|(
operator|(
name|delta
operator|&
literal|0xF0000000
operator|)
operator|>>
literal|28
operator|)
argument_list|)
expr_stmt|;
name|bytes
index|[
name|upto
operator|+
literal|1
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
literal|0x80
operator||
operator|(
operator|(
name|delta
operator|&
literal|0xFE00000
operator|)
operator|>>
literal|21
operator|)
argument_list|)
expr_stmt|;
name|bytes
index|[
name|upto
operator|+
literal|2
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
literal|0x80
operator||
operator|(
operator|(
name|delta
operator|&
literal|0x1FC000
operator|)
operator|>>
literal|14
operator|)
argument_list|)
expr_stmt|;
name|bytes
index|[
name|upto
operator|+
literal|3
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
literal|0x80
operator||
operator|(
operator|(
name|delta
operator|&
literal|0x3F80
operator|)
operator|>>
literal|7
operator|)
argument_list|)
expr_stmt|;
name|bytes
index|[
name|upto
operator|+
literal|4
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|delta
operator|&
literal|0x7F
argument_list|)
expr_stmt|;
name|upto
operator|+=
literal|5
expr_stmt|;
block|}
name|lastOrd
operator|=
name|ord
expr_stmt|;
block|}
block|}
return|return
operator|new
name|BytesRef
argument_list|(
name|bytes
argument_list|,
literal|0
argument_list|,
name|upto
argument_list|)
return|;
block|}
block|}
end_class
end_unit
