begin_unit
begin_package
DECL|package|org.apache.lucene.facet.search
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|search
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|old
operator|.
name|OldFacetsAccumulator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|params
operator|.
name|FacetIndexingParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|params
operator|.
name|FacetSearchParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|search
operator|.
name|FacetsCollector
operator|.
name|MatchingDocs
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|taxonomy
operator|.
name|TaxonomyReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_comment
comment|/**  * Accumulates the facets defined in the {@link FacetSearchParams}.  *   * @lucene.experimental  */
end_comment
begin_class
DECL|class|FacetsAccumulator
specifier|public
specifier|abstract
class|class
name|FacetsAccumulator
block|{
comment|// TODO this should be final, but currently SamplingAccumulator modifies the params.
comment|// need to review the class and if it's resolved, make it final
DECL|field|searchParams
specifier|public
comment|/*final*/
name|FacetSearchParams
name|searchParams
decl_stmt|;
comment|/** Constructor with the given search params. */
DECL|method|FacetsAccumulator
specifier|protected
name|FacetsAccumulator
parameter_list|(
name|FacetSearchParams
name|fsp
parameter_list|)
block|{
name|this
operator|.
name|searchParams
operator|=
name|fsp
expr_stmt|;
block|}
comment|/**    * Creates a {@link FacetsAccumulator} for the given facet requests. This    * method supports {@link RangeAccumulator} and    * {@link TaxonomyFacetsAccumulator} by dividing the facet requests into    * {@link RangeFacetRequest} and the rest.    *<p>    * If both types of facet requests are used, it returns a    * {@link MultiFacetsAccumulator} and the facet results returned from    * {@link #accumulate(List)} may not be in the same order as the given facet    * requests.    *     * @param fsp    *          the search params define the facet requests and the    *          {@link FacetIndexingParams}    * @param indexReader    *          the {@link IndexReader} used for search    * @param taxoReader    *          the {@link TaxonomyReader} used for search    * @param arrays    *          the {@link FacetArrays} which the accumulator should use to store    *          the categories weights in. Can be {@code null}.    */
DECL|method|create
specifier|public
specifier|static
name|FacetsAccumulator
name|create
parameter_list|(
name|FacetSearchParams
name|fsp
parameter_list|,
name|IndexReader
name|indexReader
parameter_list|,
name|TaxonomyReader
name|taxoReader
parameter_list|,
name|FacetArrays
name|arrays
parameter_list|)
block|{
if|if
condition|(
name|fsp
operator|.
name|indexingParams
operator|.
name|getPartitionSize
argument_list|()
operator|!=
name|Integer
operator|.
name|MAX_VALUE
condition|)
block|{
return|return
operator|new
name|OldFacetsAccumulator
argument_list|(
name|fsp
argument_list|,
name|indexReader
argument_list|,
name|taxoReader
argument_list|,
name|arrays
argument_list|)
return|;
block|}
return|return
operator|new
name|TaxonomyFacetsAccumulator
argument_list|(
name|fsp
argument_list|,
name|indexReader
argument_list|,
name|taxoReader
argument_list|,
name|arrays
argument_list|)
return|;
block|}
comment|/** Returns an empty {@link FacetResult}. */
DECL|method|emptyResult
specifier|protected
specifier|static
name|FacetResult
name|emptyResult
parameter_list|(
name|int
name|ordinal
parameter_list|,
name|FacetRequest
name|fr
parameter_list|)
block|{
name|FacetResultNode
name|root
init|=
operator|new
name|FacetResultNode
argument_list|(
name|ordinal
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|root
operator|.
name|label
operator|=
name|fr
operator|.
name|categoryPath
expr_stmt|;
return|return
operator|new
name|FacetResult
argument_list|(
name|fr
argument_list|,
name|root
argument_list|,
literal|0
argument_list|)
return|;
block|}
comment|/**    * Used by {@link FacetsCollector} to build the list of {@link FacetResult    * facet results} that match the {@link FacetRequest facet requests} that were    * given in the constructor.    *     * @param matchingDocs    *          the documents that matched the query, per-segment.    */
DECL|method|accumulate
specifier|public
specifier|abstract
name|List
argument_list|<
name|FacetResult
argument_list|>
name|accumulate
parameter_list|(
name|List
argument_list|<
name|MatchingDocs
argument_list|>
name|matchingDocs
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Used by {@link FacetsCollector} to determine if document scores need to be    * collected in addition to matching documents.    */
DECL|method|requiresDocScores
specifier|public
specifier|abstract
name|boolean
name|requiresDocScores
parameter_list|()
function_decl|;
block|}
end_class
end_unit
