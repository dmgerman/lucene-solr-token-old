begin_unit
begin_package
DECL|package|org.apache.lucene.facet.associations
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|associations
package|;
end_package
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|taxonomy
operator|.
name|CategoryPath
import|;
end_import
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_comment
comment|/** Holds {@link CategoryAssociation} per {@link CategoryPath}. */
end_comment
begin_class
DECL|class|CategoryAssociationsContainer
specifier|public
class|class
name|CategoryAssociationsContainer
implements|implements
name|Iterable
argument_list|<
name|CategoryPath
argument_list|>
block|{
DECL|field|categoryAssociations
specifier|private
specifier|final
name|HashMap
argument_list|<
name|CategoryPath
argument_list|,
name|CategoryAssociation
argument_list|>
name|categoryAssociations
init|=
operator|new
name|HashMap
argument_list|<
name|CategoryPath
argument_list|,
name|CategoryAssociation
argument_list|>
argument_list|()
decl_stmt|;
comment|/**    * Adds the {@link CategoryAssociation} for the given {@link CategoryPath    * category}. Overrides any assocation that was previously set.    */
DECL|method|setAssociation
specifier|public
name|void
name|setAssociation
parameter_list|(
name|CategoryPath
name|category
parameter_list|,
name|CategoryAssociation
name|association
parameter_list|)
block|{
if|if
condition|(
name|association
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"cannot set a null association to a category"
argument_list|)
throw|;
block|}
name|categoryAssociations
operator|.
name|put
argument_list|(
name|category
argument_list|,
name|association
argument_list|)
expr_stmt|;
block|}
comment|/**    * Returns the {@link CategoryAssociation} that was set for the    * {@link CategoryPath category}, or {@code null} if none was defined.    */
DECL|method|getAssociation
specifier|public
name|CategoryAssociation
name|getAssociation
parameter_list|(
name|CategoryPath
name|category
parameter_list|)
block|{
return|return
name|categoryAssociations
operator|.
name|get
argument_list|(
name|category
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|iterator
specifier|public
name|Iterator
argument_list|<
name|CategoryPath
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|categoryAssociations
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
return|;
block|}
comment|/** Clears all category associations. */
DECL|method|clear
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|categoryAssociations
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|categoryAssociations
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class
end_unit
