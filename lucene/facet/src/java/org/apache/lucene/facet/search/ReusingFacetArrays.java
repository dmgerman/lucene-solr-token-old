begin_unit
begin_package
DECL|package|org.apache.lucene.facet.search
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|search
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_comment
comment|/**  * A {@link FacetArrays} which uses the {@link ArraysPool} to allocate new  * arrays and pool them on {@link #free()}.  *   * @lucene.experimental  */
end_comment
begin_class
DECL|class|ReusingFacetArrays
specifier|public
class|class
name|ReusingFacetArrays
extends|extends
name|FacetArrays
block|{
DECL|field|arraysPool
specifier|private
specifier|final
name|ArraysPool
name|arraysPool
decl_stmt|;
DECL|method|ReusingFacetArrays
specifier|public
name|ReusingFacetArrays
parameter_list|(
name|ArraysPool
name|arraysPool
parameter_list|)
block|{
name|super
argument_list|(
name|arraysPool
operator|.
name|arrayLength
argument_list|)
expr_stmt|;
name|this
operator|.
name|arraysPool
operator|=
name|arraysPool
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|newIntArray
specifier|protected
name|int
index|[]
name|newIntArray
parameter_list|()
block|{
return|return
name|arraysPool
operator|.
name|allocateIntArray
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|newFloatArray
specifier|protected
name|float
index|[]
name|newFloatArray
parameter_list|()
block|{
return|return
name|arraysPool
operator|.
name|allocateFloatArray
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|doFree
specifier|protected
name|void
name|doFree
parameter_list|(
name|float
index|[]
name|floats
parameter_list|,
name|int
index|[]
name|ints
parameter_list|)
block|{
name|arraysPool
operator|.
name|free
argument_list|(
name|floats
argument_list|)
expr_stmt|;
name|arraysPool
operator|.
name|free
argument_list|(
name|ints
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
