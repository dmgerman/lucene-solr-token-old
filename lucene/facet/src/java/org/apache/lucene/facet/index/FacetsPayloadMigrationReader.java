begin_unit
begin_package
DECL|package|org.apache.lucene.facet.index
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|index
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|index
operator|.
name|params
operator|.
name|CategoryListParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|index
operator|.
name|params
operator|.
name|FacetIndexingParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|AtomicReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|AtomicReaderContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|BinaryDocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DirectoryReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DocsAndPositionsEnum
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|FieldInfo
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|FieldInfos
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Fields
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|FilterAtomicReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Terms
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|TermsEnum
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|DocIdSetIterator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_comment
comment|/**  * A {@link FilterAtomicReader} for migrating a facets index which encodes  * category ordinals in a payload to {@link BinaryDocValues}. To migrate the index,  * you should build a mapping from a field (String) to term ({@link Term}),  * which denotes under which BinaryDocValues field to put the data encoded in the  * matching term's payload. You can follow the code example below to migrate an  * existing index:  *   *<pre class="prettyprint">  * // Add the index and migrate payload to DocValues on the go  * DirectoryReader reader = DirectoryReader.open(oldDir);  * IndexWriterConfig conf = new IndexWriterConfig(VER, ANALYZER);  * IndexWriter writer = new IndexWriter(newDir, conf);  * List&lt;AtomicReaderContext&gt; leaves = reader.leaves();  * AtomicReader wrappedLeaves[] = new AtomicReader[leaves.size()];  * for (int i = 0; i&lt; leaves.size(); i++) {  *   wrappedLeaves[i] = new FacetPayloadMigrationReader(leaves.get(i).reader(),  *       fieldTerms);  * }  * writer.addIndexes(new MultiReader(wrappedLeaves));  * writer.commit();  *</pre>  *   *<p>  *<b>NOTE:</b> to build the field-to-term map you can use  * {@link #buildFieldTermsMap(Directory, FacetIndexingParams)}, as long as the  * index to migrate contains the ordinals payload under  * {@link #PAYLOAD_TERM_TEXT}.  *   * @lucene.experimental  */
end_comment
begin_class
DECL|class|FacetsPayloadMigrationReader
specifier|public
class|class
name|FacetsPayloadMigrationReader
extends|extends
name|FilterAtomicReader
block|{
DECL|class|PayloadMigratingDocValues
specifier|private
class|class
name|PayloadMigratingDocValues
extends|extends
name|DocValues
block|{
DECL|field|dpe
specifier|private
specifier|final
name|DocsAndPositionsEnum
name|dpe
decl_stmt|;
DECL|method|PayloadMigratingDocValues
specifier|public
name|PayloadMigratingDocValues
parameter_list|(
name|DocsAndPositionsEnum
name|dpe
parameter_list|)
block|{
name|this
operator|.
name|dpe
operator|=
name|dpe
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|loadDirectSource
specifier|protected
name|Source
name|loadDirectSource
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|PayloadMigratingSource
argument_list|(
name|getType
argument_list|()
argument_list|,
name|dpe
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|loadSource
specifier|protected
name|Source
name|loadSource
parameter_list|()
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"in-memory Source is not supported by this reader"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|getType
specifier|public
name|Type
name|getType
parameter_list|()
block|{
return|return
name|Type
operator|.
name|BYTES_VAR_STRAIGHT
return|;
block|}
block|}
DECL|class|PayloadMigratingSource
specifier|private
class|class
name|PayloadMigratingSource
extends|extends
name|Source
block|{
DECL|field|dpe
specifier|private
specifier|final
name|DocsAndPositionsEnum
name|dpe
decl_stmt|;
DECL|field|curDocID
specifier|private
name|int
name|curDocID
decl_stmt|;
DECL|method|PayloadMigratingSource
specifier|protected
name|PayloadMigratingSource
parameter_list|(
name|Type
name|type
parameter_list|,
name|DocsAndPositionsEnum
name|dpe
parameter_list|)
block|{
name|super
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|this
operator|.
name|dpe
operator|=
name|dpe
expr_stmt|;
if|if
condition|(
name|dpe
operator|==
literal|null
condition|)
block|{
name|curDocID
operator|=
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|curDocID
operator|=
name|dpe
operator|.
name|nextDoc
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|getBytes
specifier|public
name|BytesRef
name|getBytes
parameter_list|(
name|int
name|docID
parameter_list|,
name|BytesRef
name|ref
parameter_list|)
block|{
if|if
condition|(
name|curDocID
operator|>
name|docID
condition|)
block|{
comment|// document does not exist
name|ref
operator|.
name|length
operator|=
literal|0
expr_stmt|;
return|return
name|ref
return|;
block|}
try|try
block|{
if|if
condition|(
name|curDocID
operator|<
name|docID
condition|)
block|{
name|curDocID
operator|=
name|dpe
operator|.
name|advance
argument_list|(
name|docID
argument_list|)
expr_stmt|;
if|if
condition|(
name|curDocID
operator|!=
name|docID
condition|)
block|{
comment|// requested document does not have a payload
name|ref
operator|.
name|length
operator|=
literal|0
expr_stmt|;
return|return
name|ref
return|;
block|}
block|}
comment|// we're on the document
name|dpe
operator|.
name|nextPosition
argument_list|()
expr_stmt|;
name|ref
operator|.
name|copyBytes
argument_list|(
name|dpe
operator|.
name|getPayload
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|ref
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
comment|/** The {@link Term} text of the ordinals payload. */
DECL|field|PAYLOAD_TERM_TEXT
specifier|public
specifier|static
specifier|final
name|String
name|PAYLOAD_TERM_TEXT
init|=
literal|"$fulltree$"
decl_stmt|;
comment|/**    * A utility method for building the field-to-Term map, given the    * {@link FacetIndexingParams} and the directory of the index to migrate. The    * map that will be built will correspond to partitions as well as multiple    * {@link CategoryListParams}.    *<p>    *<b>NOTE:</b> since {@link CategoryListParams} no longer define a    * {@link Term}, this method assumes that the term used by the different    * {@link CategoryListParams} is {@link #PAYLOAD_TERM_TEXT}. If this is not    * the case, then you should build the map yourself, using the terms in your    * index.    */
DECL|method|buildFieldTermsMap
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Term
argument_list|>
name|buildFieldTermsMap
parameter_list|(
name|Directory
name|dir
parameter_list|,
name|FacetIndexingParams
name|fip
parameter_list|)
throws|throws
name|IOException
block|{
comment|// only add field-Term mapping that will actually have DocValues in the end.
comment|// therefore traverse the index terms and add what exists. this pertains to
comment|// multiple CLPs, as well as partitions
name|DirectoryReader
name|reader
init|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|dir
argument_list|)
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Term
argument_list|>
name|fieldTerms
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Term
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|AtomicReaderContext
name|context
range|:
name|reader
operator|.
name|leaves
argument_list|()
control|)
block|{
for|for
control|(
name|CategoryListParams
name|clp
range|:
name|fip
operator|.
name|getAllCategoryListParams
argument_list|()
control|)
block|{
name|Terms
name|terms
init|=
name|context
operator|.
name|reader
argument_list|()
operator|.
name|terms
argument_list|(
name|clp
operator|.
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|terms
operator|!=
literal|null
condition|)
block|{
name|TermsEnum
name|te
init|=
name|terms
operator|.
name|iterator
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|BytesRef
name|termBytes
init|=
literal|null
decl_stmt|;
while|while
condition|(
operator|(
name|termBytes
operator|=
name|te
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|String
name|term
init|=
name|termBytes
operator|.
name|utf8ToString
argument_list|()
decl_stmt|;
if|if
condition|(
name|term
operator|.
name|startsWith
argument_list|(
name|PAYLOAD_TERM_TEXT
argument_list|)
condition|)
block|{
if|if
condition|(
name|term
operator|.
name|equals
argument_list|(
name|PAYLOAD_TERM_TEXT
argument_list|)
condition|)
block|{
name|fieldTerms
operator|.
name|put
argument_list|(
name|clp
operator|.
name|field
argument_list|,
operator|new
name|Term
argument_list|(
name|clp
operator|.
name|field
argument_list|,
name|term
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fieldTerms
operator|.
name|put
argument_list|(
name|clp
operator|.
name|field
operator|+
name|term
operator|.
name|substring
argument_list|(
name|PAYLOAD_TERM_TEXT
operator|.
name|length
argument_list|()
argument_list|)
argument_list|,
operator|new
name|Term
argument_list|(
name|clp
operator|.
name|field
argument_list|,
name|term
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|fieldTerms
return|;
block|}
DECL|field|fieldTerms
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Term
argument_list|>
name|fieldTerms
decl_stmt|;
comment|/**    * Wraps an {@link AtomicReader} and migrates the payload to {@link DocValues}    * fields by using the given mapping.    */
DECL|method|FacetsPayloadMigrationReader
specifier|public
name|FacetsPayloadMigrationReader
parameter_list|(
name|AtomicReader
name|in
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Term
argument_list|>
name|fieldTerms
parameter_list|)
block|{
name|super
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|this
operator|.
name|fieldTerms
operator|=
name|fieldTerms
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|docValues
specifier|public
name|DocValues
name|docValues
parameter_list|(
name|String
name|field
parameter_list|)
throws|throws
name|IOException
block|{
name|Term
name|term
init|=
name|fieldTerms
operator|.
name|get
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|term
operator|==
literal|null
condition|)
block|{
return|return
name|super
operator|.
name|docValues
argument_list|(
name|field
argument_list|)
return|;
block|}
else|else
block|{
name|DocsAndPositionsEnum
name|dpe
init|=
literal|null
decl_stmt|;
name|Fields
name|fields
init|=
name|fields
argument_list|()
decl_stmt|;
if|if
condition|(
name|fields
operator|!=
literal|null
condition|)
block|{
name|Terms
name|terms
init|=
name|fields
operator|.
name|terms
argument_list|(
name|term
operator|.
name|field
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|terms
operator|!=
literal|null
condition|)
block|{
name|TermsEnum
name|te
init|=
name|terms
operator|.
name|iterator
argument_list|(
literal|null
argument_list|)
decl_stmt|;
comment|// no use for reusing
if|if
condition|(
name|te
operator|.
name|seekExact
argument_list|(
name|term
operator|.
name|bytes
argument_list|()
argument_list|,
literal|true
argument_list|)
condition|)
block|{
comment|// we're not expected to be called for deleted documents
name|dpe
operator|=
name|te
operator|.
name|docsAndPositions
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|DocsAndPositionsEnum
operator|.
name|FLAG_PAYLOADS
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// we shouldn't return null, even if the term does not exist or has no
comment|// payloads, since we already marked the field as having DocValues.
return|return
operator|new
name|PayloadMigratingDocValues
argument_list|(
name|dpe
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|getFieldInfos
specifier|public
name|FieldInfos
name|getFieldInfos
parameter_list|()
block|{
name|FieldInfos
name|innerInfos
init|=
name|super
operator|.
name|getFieldInfos
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|FieldInfo
argument_list|>
name|infos
init|=
operator|new
name|ArrayList
argument_list|<
name|FieldInfo
argument_list|>
argument_list|(
name|innerInfos
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
comment|// if there are partitions, then the source index contains one field for all their terms
comment|// while with DocValues, we simulate that by multiple fields.
name|HashSet
argument_list|<
name|String
argument_list|>
name|leftoverFields
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|fieldTerms
operator|.
name|keySet
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|number
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|FieldInfo
name|info
range|:
name|innerInfos
control|)
block|{
if|if
condition|(
name|fieldTerms
operator|.
name|containsKey
argument_list|(
name|info
operator|.
name|name
argument_list|)
condition|)
block|{
comment|// mark this field as having a DocValues
name|infos
operator|.
name|add
argument_list|(
operator|new
name|FieldInfo
argument_list|(
name|info
operator|.
name|name
argument_list|,
literal|true
argument_list|,
name|info
operator|.
name|number
argument_list|,
name|info
operator|.
name|hasVectors
argument_list|()
argument_list|,
name|info
operator|.
name|omitsNorms
argument_list|()
argument_list|,
name|info
operator|.
name|hasPayloads
argument_list|()
argument_list|,
name|info
operator|.
name|getIndexOptions
argument_list|()
argument_list|,
name|Type
operator|.
name|BYTES_VAR_STRAIGHT
argument_list|,
name|info
operator|.
name|getNormType
argument_list|()
argument_list|,
name|info
operator|.
name|attributes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|leftoverFields
operator|.
name|remove
argument_list|(
name|info
operator|.
name|name
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|infos
operator|.
name|add
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
name|number
operator|=
name|Math
operator|.
name|max
argument_list|(
name|number
argument_list|,
name|info
operator|.
name|number
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|field
range|:
name|leftoverFields
control|)
block|{
name|infos
operator|.
name|add
argument_list|(
operator|new
name|FieldInfo
argument_list|(
name|field
argument_list|,
literal|false
argument_list|,
operator|++
name|number
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
name|Type
operator|.
name|BYTES_VAR_STRAIGHT
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|FieldInfos
argument_list|(
name|infos
operator|.
name|toArray
argument_list|(
operator|new
name|FieldInfo
index|[
name|infos
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class
end_unit
