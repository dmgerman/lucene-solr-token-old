begin_unit
begin_package
DECL|package|org.apache.lucene.facet.encoding
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|encoding
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IntsRef
import|;
end_import
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_comment
comment|/**  * An {@link IntEncoder} which implements variable length encoding for the gap  * between values. It's a specialized form of the combination of  * {@link DGapIntEncoder} and {@link VInt8IntEncoder}.  *   * @see VInt8IntEncoder  * @see DGapIntEncoder  *   * @lucene.experimental  */
end_comment
begin_class
DECL|class|DGapVInt8IntEncoder
specifier|public
specifier|final
class|class
name|DGapVInt8IntEncoder
extends|extends
name|IntEncoder
block|{
annotation|@
name|Override
DECL|method|encode
specifier|public
name|void
name|encode
parameter_list|(
name|IntsRef
name|values
parameter_list|,
name|BytesRef
name|buf
parameter_list|)
block|{
name|buf
operator|.
name|offset
operator|=
name|buf
operator|.
name|length
operator|=
literal|0
expr_stmt|;
name|int
name|maxBytesNeeded
init|=
literal|5
operator|*
name|values
operator|.
name|length
decl_stmt|;
comment|// at most 5 bytes per VInt
if|if
condition|(
name|buf
operator|.
name|bytes
operator|.
name|length
operator|<
name|maxBytesNeeded
condition|)
block|{
name|buf
operator|.
name|grow
argument_list|(
name|maxBytesNeeded
argument_list|)
expr_stmt|;
block|}
name|int
name|upto
init|=
name|values
operator|.
name|offset
operator|+
name|values
operator|.
name|length
decl_stmt|;
name|int
name|prev
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|values
operator|.
name|offset
init|;
name|i
operator|<
name|upto
condition|;
name|i
operator|++
control|)
block|{
comment|// it is better if the encoding is inlined like so, and not e.g.
comment|// in a utility method
name|int
name|value
init|=
name|values
operator|.
name|ints
index|[
name|i
index|]
operator|-
name|prev
decl_stmt|;
if|if
condition|(
operator|(
name|value
operator|&
operator|~
literal|0x7F
operator|)
operator|==
literal|0
condition|)
block|{
name|buf
operator|.
name|bytes
index|[
name|buf
operator|.
name|length
index|]
operator|=
operator|(
name|byte
operator|)
name|value
expr_stmt|;
name|buf
operator|.
name|length
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|value
operator|&
operator|~
literal|0x3FFF
operator|)
operator|==
literal|0
condition|)
block|{
name|buf
operator|.
name|bytes
index|[
name|buf
operator|.
name|length
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
literal|0x80
operator||
operator|(
operator|(
name|value
operator|&
literal|0x3F80
operator|)
operator|>>
literal|7
operator|)
argument_list|)
expr_stmt|;
name|buf
operator|.
name|bytes
index|[
name|buf
operator|.
name|length
operator|+
literal|1
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|value
operator|&
literal|0x7F
argument_list|)
expr_stmt|;
name|buf
operator|.
name|length
operator|+=
literal|2
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|value
operator|&
operator|~
literal|0x1FFFFF
operator|)
operator|==
literal|0
condition|)
block|{
name|buf
operator|.
name|bytes
index|[
name|buf
operator|.
name|length
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
literal|0x80
operator||
operator|(
operator|(
name|value
operator|&
literal|0x1FC000
operator|)
operator|>>
literal|14
operator|)
argument_list|)
expr_stmt|;
name|buf
operator|.
name|bytes
index|[
name|buf
operator|.
name|length
operator|+
literal|1
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
literal|0x80
operator||
operator|(
operator|(
name|value
operator|&
literal|0x3F80
operator|)
operator|>>
literal|7
operator|)
argument_list|)
expr_stmt|;
name|buf
operator|.
name|bytes
index|[
name|buf
operator|.
name|length
operator|+
literal|2
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|value
operator|&
literal|0x7F
argument_list|)
expr_stmt|;
name|buf
operator|.
name|length
operator|+=
literal|3
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|value
operator|&
operator|~
literal|0xFFFFFFF
operator|)
operator|==
literal|0
condition|)
block|{
name|buf
operator|.
name|bytes
index|[
name|buf
operator|.
name|length
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
literal|0x80
operator||
operator|(
operator|(
name|value
operator|&
literal|0xFE00000
operator|)
operator|>>
literal|21
operator|)
argument_list|)
expr_stmt|;
name|buf
operator|.
name|bytes
index|[
name|buf
operator|.
name|length
operator|+
literal|1
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
literal|0x80
operator||
operator|(
operator|(
name|value
operator|&
literal|0x1FC000
operator|)
operator|>>
literal|14
operator|)
argument_list|)
expr_stmt|;
name|buf
operator|.
name|bytes
index|[
name|buf
operator|.
name|length
operator|+
literal|2
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
literal|0x80
operator||
operator|(
operator|(
name|value
operator|&
literal|0x3F80
operator|)
operator|>>
literal|7
operator|)
argument_list|)
expr_stmt|;
name|buf
operator|.
name|bytes
index|[
name|buf
operator|.
name|length
operator|+
literal|3
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|value
operator|&
literal|0x7F
argument_list|)
expr_stmt|;
name|buf
operator|.
name|length
operator|+=
literal|4
expr_stmt|;
block|}
else|else
block|{
name|buf
operator|.
name|bytes
index|[
name|buf
operator|.
name|length
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
literal|0x80
operator||
operator|(
operator|(
name|value
operator|&
literal|0xF0000000
operator|)
operator|>>
literal|28
operator|)
argument_list|)
expr_stmt|;
name|buf
operator|.
name|bytes
index|[
name|buf
operator|.
name|length
operator|+
literal|1
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
literal|0x80
operator||
operator|(
operator|(
name|value
operator|&
literal|0xFE00000
operator|)
operator|>>
literal|21
operator|)
argument_list|)
expr_stmt|;
name|buf
operator|.
name|bytes
index|[
name|buf
operator|.
name|length
operator|+
literal|2
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
literal|0x80
operator||
operator|(
operator|(
name|value
operator|&
literal|0x1FC000
operator|)
operator|>>
literal|14
operator|)
argument_list|)
expr_stmt|;
name|buf
operator|.
name|bytes
index|[
name|buf
operator|.
name|length
operator|+
literal|3
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
literal|0x80
operator||
operator|(
operator|(
name|value
operator|&
literal|0x3F80
operator|)
operator|>>
literal|7
operator|)
argument_list|)
expr_stmt|;
name|buf
operator|.
name|bytes
index|[
name|buf
operator|.
name|length
operator|+
literal|4
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|value
operator|&
literal|0x7F
argument_list|)
expr_stmt|;
name|buf
operator|.
name|length
operator|+=
literal|5
expr_stmt|;
block|}
name|prev
operator|=
name|values
operator|.
name|ints
index|[
name|i
index|]
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|createMatchingDecoder
specifier|public
name|IntDecoder
name|createMatchingDecoder
parameter_list|()
block|{
return|return
operator|new
name|DGapVInt8IntDecoder
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"DGapVInt8"
return|;
block|}
block|}
end_class
end_unit
