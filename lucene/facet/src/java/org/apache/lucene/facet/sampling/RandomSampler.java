begin_unit
begin_package
DECL|package|org.apache.lucene.facet.sampling
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|sampling
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|search
operator|.
name|ScoredDocIDs
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|search
operator|.
name|ScoredDocIDsIterator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|util
operator|.
name|ScoredDocIdsUtils
import|;
end_import
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_comment
comment|/**  * Simple random sampler  */
end_comment
begin_class
DECL|class|RandomSampler
specifier|public
class|class
name|RandomSampler
extends|extends
name|Sampler
block|{
DECL|field|random
specifier|private
specifier|final
name|Random
name|random
decl_stmt|;
DECL|method|RandomSampler
specifier|public
name|RandomSampler
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|random
operator|=
operator|new
name|Random
argument_list|()
expr_stmt|;
block|}
DECL|method|RandomSampler
specifier|public
name|RandomSampler
parameter_list|(
name|SamplingParams
name|params
parameter_list|,
name|Random
name|random
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
name|super
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|this
operator|.
name|random
operator|=
name|random
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createSample
specifier|protected
name|SampleResult
name|createSample
parameter_list|(
name|ScoredDocIDs
name|docids
parameter_list|,
name|int
name|actualSize
parameter_list|,
name|int
name|sampleSetSize
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|int
index|[]
name|sample
init|=
operator|new
name|int
index|[
name|sampleSetSize
index|]
decl_stmt|;
specifier|final
name|int
name|maxStep
init|=
operator|(
name|actualSize
operator|*
literal|2
operator|)
operator|/
name|sampleSetSize
decl_stmt|;
comment|//floor
name|int
name|remaining
init|=
name|actualSize
decl_stmt|;
name|ScoredDocIDsIterator
name|it
init|=
name|docids
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|// select sample docs with random skipStep, make sure to leave sufficient #docs for selection after last skip
while|while
condition|(
name|i
argument_list|<
name|sample
operator|.
name|length
operator|&&
name|remaining
argument_list|>
argument_list|(
name|sampleSetSize
operator|-
name|maxStep
operator|-
name|i
argument_list|)
condition|)
block|{
name|int
name|skipStep
init|=
literal|1
operator|+
name|random
operator|.
name|nextInt
argument_list|(
name|maxStep
argument_list|)
decl_stmt|;
comment|// Skip over 'skipStep' documents
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|skipStep
condition|;
name|j
operator|++
control|)
block|{
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
operator|--
name|remaining
expr_stmt|;
block|}
name|sample
index|[
name|i
operator|++
index|]
operator|=
name|it
operator|.
name|getDocID
argument_list|()
expr_stmt|;
block|}
comment|// Add leftover documents to the sample set
while|while
condition|(
name|i
operator|<
name|sample
operator|.
name|length
condition|)
block|{
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|sample
index|[
name|i
operator|++
index|]
operator|=
name|it
operator|.
name|getDocID
argument_list|()
expr_stmt|;
block|}
name|ScoredDocIDs
name|sampleRes
init|=
name|ScoredDocIdsUtils
operator|.
name|createScoredDocIDsSubset
argument_list|(
name|docids
argument_list|,
name|sample
argument_list|)
decl_stmt|;
name|SampleResult
name|res
init|=
operator|new
name|SampleResult
argument_list|(
name|sampleRes
argument_list|,
name|sampleSetSize
operator|/
operator|(
name|double
operator|)
name|actualSize
argument_list|)
decl_stmt|;
return|return
name|res
return|;
block|}
block|}
end_class
end_unit
