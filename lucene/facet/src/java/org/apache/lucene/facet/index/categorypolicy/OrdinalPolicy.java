begin_unit
begin_package
DECL|package|org.apache.lucene.facet.index.categorypolicy
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|index
operator|.
name|categorypolicy
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|search
operator|.
name|FacetsAccumulator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|taxonomy
operator|.
name|TaxonomyReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|taxonomy
operator|.
name|TaxonomyWriter
import|;
end_import
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_comment
comment|/**  * A policy for adding category parent ordinals to the list of ordinals that are  * encoded for a given document. The default {@link #ALL_PARENTS} policy always  * adds all parents, where {@link #NO_PARENTS} never adds any parents.  *   * @lucene.experimental  */
end_comment
begin_interface
DECL|interface|OrdinalPolicy
specifier|public
interface|interface
name|OrdinalPolicy
extends|extends
name|Serializable
block|{
comment|/**    * An {@link OrdinalPolicy} which never stores parent ordinals. Useful if you    * only want to store the exact categories that were added to the document.    * Note that this is a rather expert policy, which requires a matching    * {@link FacetsAccumulator} that computes the weight of the parent categories    * on-the-fly.    */
DECL|field|NO_PARENTS
specifier|public
specifier|static
specifier|final
name|OrdinalPolicy
name|NO_PARENTS
init|=
operator|new
name|OrdinalPolicy
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|shouldAdd
parameter_list|(
name|int
name|ordinal
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|init
parameter_list|(
name|TaxonomyWriter
name|taxonomyWriter
parameter_list|)
block|{}
block|}
decl_stmt|;
comment|/**    * An {@link OrdinalPolicy} which stores all parent ordinals, except    * {@link TaxonomyReader#ROOT_ORDINAL}. This is the default    * {@link OrdinalPolicy} and works with the default {@link FacetsAccumulator}.    */
DECL|field|ALL_PARENTS
specifier|public
specifier|static
specifier|final
name|OrdinalPolicy
name|ALL_PARENTS
init|=
operator|new
name|OrdinalPolicy
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|shouldAdd
parameter_list|(
name|int
name|ordinal
parameter_list|)
block|{
return|return
name|ordinal
operator|>
name|TaxonomyReader
operator|.
name|ROOT_ORDINAL
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|init
parameter_list|(
name|TaxonomyWriter
name|taxonomyWriter
parameter_list|)
block|{}
block|}
decl_stmt|;
comment|/**    * Check whether a given category ordinal should be added to the stream.    *     * @param ordinal    *            A given category ordinal which is to be tested for stream    *            addition.    * @return<code>true</code> if the category should be added.    *<code>false</code> otherwise.    */
DECL|method|shouldAdd
specifier|public
specifier|abstract
name|boolean
name|shouldAdd
parameter_list|(
name|int
name|ordinal
parameter_list|)
function_decl|;
comment|/**    * Initialize the policy with a TaxonomyWriter. This method can be    * implemented as noop if the ordinal policy is not taxonomy dependent    *     * @param taxonomyWriter    *            A relevant taxonomyWriter object, with which ordinals sent to    *            {@link #shouldAdd(int)} are examined.    */
DECL|method|init
specifier|public
specifier|abstract
name|void
name|init
parameter_list|(
name|TaxonomyWriter
name|taxonomyWriter
parameter_list|)
function_decl|;
block|}
end_interface
end_unit
