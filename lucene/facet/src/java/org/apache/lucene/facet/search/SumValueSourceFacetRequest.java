begin_unit
begin_package
DECL|package|org.apache.lucene.facet.search
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|search
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|NumericDocValuesField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|params
operator|.
name|CategoryListParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|params
operator|.
name|FacetIndexingParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|search
operator|.
name|FacetsCollector
operator|.
name|MatchingDocs
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|search
operator|.
name|OrdinalValueResolver
operator|.
name|FloatValueResolver
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|taxonomy
operator|.
name|FacetLabel
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|taxonomy
operator|.
name|TaxonomyReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queries
operator|.
name|function
operator|.
name|FunctionValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queries
operator|.
name|function
operator|.
name|ValueSource
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Scorer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IntsRef
import|;
end_import
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_comment
comment|/**  * A {@link FacetRequest} which aggregates categories by the sum of the values,  * returned by a {@link ValueSource}, in the documents they are associated with.  * This allows aggregating the value of a category by e.g. summing the value of  * a {@link NumericDocValuesField} indexed for the document, or a more complex  * expression (from multiple fields) using the expressions module.  *   * @lucene.experimental  */
end_comment
begin_class
DECL|class|SumValueSourceFacetRequest
specifier|public
class|class
name|SumValueSourceFacetRequest
extends|extends
name|FacetRequest
block|{
DECL|class|SumValueSourceFacetsAggregator
specifier|private
specifier|static
specifier|abstract
class|class
name|SumValueSourceFacetsAggregator
implements|implements
name|FacetsAggregator
block|{
DECL|field|valueSource
specifier|protected
specifier|final
name|ValueSource
name|valueSource
decl_stmt|;
DECL|field|ordinals
specifier|protected
specifier|final
name|IntsRef
name|ordinals
init|=
operator|new
name|IntsRef
argument_list|(
literal|32
argument_list|)
decl_stmt|;
DECL|method|SumValueSourceFacetsAggregator
specifier|protected
name|SumValueSourceFacetsAggregator
parameter_list|(
name|ValueSource
name|valueSource
parameter_list|)
block|{
name|this
operator|.
name|valueSource
operator|=
name|valueSource
expr_stmt|;
block|}
DECL|method|doRollup
specifier|private
name|float
name|doRollup
parameter_list|(
name|int
name|ordinal
parameter_list|,
name|int
index|[]
name|children
parameter_list|,
name|int
index|[]
name|siblings
parameter_list|,
name|float
index|[]
name|values
parameter_list|)
block|{
name|float
name|value
init|=
literal|0f
decl_stmt|;
while|while
condition|(
name|ordinal
operator|!=
name|TaxonomyReader
operator|.
name|INVALID_ORDINAL
condition|)
block|{
name|float
name|childValue
init|=
name|values
index|[
name|ordinal
index|]
decl_stmt|;
name|childValue
operator|+=
name|doRollup
argument_list|(
name|children
index|[
name|ordinal
index|]
argument_list|,
name|children
argument_list|,
name|siblings
argument_list|,
name|values
argument_list|)
expr_stmt|;
name|values
index|[
name|ordinal
index|]
operator|=
name|childValue
expr_stmt|;
name|value
operator|+=
name|childValue
expr_stmt|;
name|ordinal
operator|=
name|siblings
index|[
name|ordinal
index|]
expr_stmt|;
block|}
return|return
name|value
return|;
block|}
annotation|@
name|Override
DECL|method|rollupValues
specifier|public
name|void
name|rollupValues
parameter_list|(
name|FacetRequest
name|fr
parameter_list|,
name|int
name|ordinal
parameter_list|,
name|int
index|[]
name|children
parameter_list|,
name|int
index|[]
name|siblings
parameter_list|,
name|FacetArrays
name|facetArrays
parameter_list|)
block|{
name|float
index|[]
name|values
init|=
name|facetArrays
operator|.
name|getFloatArray
argument_list|()
decl_stmt|;
name|values
index|[
name|ordinal
index|]
operator|+=
name|doRollup
argument_list|(
name|children
index|[
name|ordinal
index|]
argument_list|,
name|children
argument_list|,
name|siblings
argument_list|,
name|values
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createOrdinalValueResolver
specifier|public
name|OrdinalValueResolver
name|createOrdinalValueResolver
parameter_list|(
name|FacetRequest
name|facetRequest
parameter_list|,
name|FacetArrays
name|arrays
parameter_list|)
block|{
return|return
operator|new
name|FloatValueResolver
argument_list|(
name|arrays
argument_list|)
return|;
block|}
block|}
DECL|class|ScoreValueSourceFacetsAggregator
specifier|private
specifier|static
class|class
name|ScoreValueSourceFacetsAggregator
extends|extends
name|SumValueSourceFacetsAggregator
block|{
DECL|class|FakeScorer
specifier|private
specifier|static
specifier|final
class|class
name|FakeScorer
extends|extends
name|Scorer
block|{
DECL|field|score
name|float
name|score
decl_stmt|;
DECL|field|docID
name|int
name|docID
decl_stmt|;
DECL|method|FakeScorer
name|FakeScorer
parameter_list|()
block|{
name|super
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|score
annotation|@
name|Override
specifier|public
name|float
name|score
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|score
return|;
block|}
DECL|method|freq
annotation|@
name|Override
specifier|public
name|int
name|freq
parameter_list|()
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
DECL|method|docID
annotation|@
name|Override
specifier|public
name|int
name|docID
parameter_list|()
block|{
return|return
name|docID
return|;
block|}
DECL|method|nextDoc
annotation|@
name|Override
specifier|public
name|int
name|nextDoc
parameter_list|()
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
DECL|method|advance
annotation|@
name|Override
specifier|public
name|int
name|advance
parameter_list|(
name|int
name|target
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
DECL|method|cost
annotation|@
name|Override
specifier|public
name|long
name|cost
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
block|}
DECL|method|ScoreValueSourceFacetsAggregator
name|ScoreValueSourceFacetsAggregator
parameter_list|(
name|ValueSource
name|valueSource
parameter_list|)
block|{
name|super
argument_list|(
name|valueSource
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|aggregate
specifier|public
name|void
name|aggregate
parameter_list|(
name|MatchingDocs
name|matchingDocs
parameter_list|,
name|CategoryListParams
name|clp
parameter_list|,
name|FacetArrays
name|facetArrays
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|CategoryListIterator
name|cli
init|=
name|clp
operator|.
name|createCategoryListIterator
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|cli
operator|.
name|setNextReader
argument_list|(
name|matchingDocs
operator|.
name|context
argument_list|)
condition|)
block|{
return|return;
block|}
assert|assert
name|matchingDocs
operator|.
name|scores
operator|!=
literal|null
assert|;
specifier|final
name|FakeScorer
name|scorer
init|=
operator|new
name|FakeScorer
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Scorer
argument_list|>
name|context
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Scorer
argument_list|>
argument_list|()
decl_stmt|;
name|context
operator|.
name|put
argument_list|(
literal|"scorer"
argument_list|,
name|scorer
argument_list|)
expr_stmt|;
specifier|final
name|FunctionValues
name|fvalues
init|=
name|valueSource
operator|.
name|getValues
argument_list|(
name|context
argument_list|,
name|matchingDocs
operator|.
name|context
argument_list|)
decl_stmt|;
specifier|final
name|int
name|length
init|=
name|matchingDocs
operator|.
name|bits
operator|.
name|length
argument_list|()
decl_stmt|;
specifier|final
name|float
index|[]
name|aggValues
init|=
name|facetArrays
operator|.
name|getFloatArray
argument_list|()
decl_stmt|;
name|int
name|doc
init|=
literal|0
decl_stmt|;
name|int
name|scoresIdx
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|doc
operator|<
name|length
operator|&&
operator|(
name|doc
operator|=
name|matchingDocs
operator|.
name|bits
operator|.
name|nextSetBit
argument_list|(
name|doc
argument_list|)
operator|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|scorer
operator|.
name|docID
operator|=
name|doc
expr_stmt|;
name|scorer
operator|.
name|score
operator|=
name|matchingDocs
operator|.
name|scores
index|[
name|scoresIdx
operator|++
index|]
expr_stmt|;
name|cli
operator|.
name|getOrdinals
argument_list|(
name|doc
argument_list|,
name|ordinals
argument_list|)
expr_stmt|;
specifier|final
name|int
name|upto
init|=
name|ordinals
operator|.
name|offset
operator|+
name|ordinals
operator|.
name|length
decl_stmt|;
name|float
name|val
init|=
operator|(
name|float
operator|)
name|fvalues
operator|.
name|doubleVal
argument_list|(
name|doc
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|ordinals
operator|.
name|offset
init|;
name|i
operator|<
name|upto
condition|;
name|i
operator|++
control|)
block|{
name|aggValues
index|[
name|ordinals
operator|.
name|ints
index|[
name|i
index|]
index|]
operator|+=
name|val
expr_stmt|;
block|}
operator|++
name|doc
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|requiresDocScores
specifier|public
name|boolean
name|requiresDocScores
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
block|}
DECL|class|NoScoreValueSourceFacetsAggregator
specifier|private
specifier|static
class|class
name|NoScoreValueSourceFacetsAggregator
extends|extends
name|SumValueSourceFacetsAggregator
block|{
DECL|method|NoScoreValueSourceFacetsAggregator
name|NoScoreValueSourceFacetsAggregator
parameter_list|(
name|ValueSource
name|valueSource
parameter_list|)
block|{
name|super
argument_list|(
name|valueSource
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|aggregate
specifier|public
name|void
name|aggregate
parameter_list|(
name|MatchingDocs
name|matchingDocs
parameter_list|,
name|CategoryListParams
name|clp
parameter_list|,
name|FacetArrays
name|facetArrays
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|CategoryListIterator
name|cli
init|=
name|clp
operator|.
name|createCategoryListIterator
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|cli
operator|.
name|setNextReader
argument_list|(
name|matchingDocs
operator|.
name|context
argument_list|)
condition|)
block|{
return|return;
block|}
specifier|final
name|FunctionValues
name|fvalues
init|=
name|valueSource
operator|.
name|getValues
argument_list|(
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|,
name|matchingDocs
operator|.
name|context
argument_list|)
decl_stmt|;
specifier|final
name|int
name|length
init|=
name|matchingDocs
operator|.
name|bits
operator|.
name|length
argument_list|()
decl_stmt|;
specifier|final
name|float
index|[]
name|aggValues
init|=
name|facetArrays
operator|.
name|getFloatArray
argument_list|()
decl_stmt|;
name|int
name|doc
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|doc
operator|<
name|length
operator|&&
operator|(
name|doc
operator|=
name|matchingDocs
operator|.
name|bits
operator|.
name|nextSetBit
argument_list|(
name|doc
argument_list|)
operator|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|cli
operator|.
name|getOrdinals
argument_list|(
name|doc
argument_list|,
name|ordinals
argument_list|)
expr_stmt|;
specifier|final
name|int
name|upto
init|=
name|ordinals
operator|.
name|offset
operator|+
name|ordinals
operator|.
name|length
decl_stmt|;
name|float
name|val
init|=
operator|(
name|float
operator|)
name|fvalues
operator|.
name|doubleVal
argument_list|(
name|doc
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|ordinals
operator|.
name|offset
init|;
name|i
operator|<
name|upto
condition|;
name|i
operator|++
control|)
block|{
name|aggValues
index|[
name|ordinals
operator|.
name|ints
index|[
name|i
index|]
index|]
operator|+=
name|val
expr_stmt|;
block|}
operator|++
name|doc
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|requiresDocScores
specifier|public
name|boolean
name|requiresDocScores
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
block|}
DECL|field|valueSource
specifier|private
specifier|final
name|ValueSource
name|valueSource
decl_stmt|;
DECL|field|requiresDocScores
specifier|private
specifier|final
name|boolean
name|requiresDocScores
decl_stmt|;
comment|/**    * Constructor which takes the {@link ValueSource} from which to read the    * documents' values. You can also specify if the value source requires    * document scores or not.    */
DECL|method|SumValueSourceFacetRequest
specifier|public
name|SumValueSourceFacetRequest
parameter_list|(
name|FacetLabel
name|path
parameter_list|,
name|int
name|num
parameter_list|,
name|ValueSource
name|valueSource
parameter_list|,
name|boolean
name|requiresDocScores
parameter_list|)
block|{
name|super
argument_list|(
name|path
argument_list|,
name|num
argument_list|)
expr_stmt|;
name|this
operator|.
name|valueSource
operator|=
name|valueSource
expr_stmt|;
name|this
operator|.
name|requiresDocScores
operator|=
name|requiresDocScores
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createFacetsAggregator
specifier|public
name|FacetsAggregator
name|createFacetsAggregator
parameter_list|(
name|FacetIndexingParams
name|fip
parameter_list|)
block|{
if|if
condition|(
name|requiresDocScores
condition|)
block|{
return|return
operator|new
name|ScoreValueSourceFacetsAggregator
argument_list|(
name|valueSource
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|NoScoreValueSourceFacetsAggregator
argument_list|(
name|valueSource
argument_list|)
return|;
block|}
block|}
block|}
end_class
end_unit
