begin_unit
begin_package
DECL|package|org.apache.lucene.facet.enhancements
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|enhancements
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|enhancements
operator|.
name|params
operator|.
name|EnhancementsIndexingParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|index
operator|.
name|CategoryDocumentBuilder
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|index
operator|.
name|attributes
operator|.
name|CategoryProperty
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|index
operator|.
name|streaming
operator|.
name|CategoryAttributesStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|index
operator|.
name|streaming
operator|.
name|CategoryListTokenizer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|index
operator|.
name|streaming
operator|.
name|CategoryParentsStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|index
operator|.
name|streaming
operator|.
name|CategoryTokenizer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|taxonomy
operator|.
name|TaxonomyWriter
import|;
end_import
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_comment
comment|/**  * An {@link EnhancementsDocumentBuilder} is a {@link CategoryDocumentBuilder}  * which adds categories to documents according to the list of  * {@link CategoryEnhancement}s from {@link EnhancementsIndexingParams}. The  * additions over {@link CategoryDocumentBuilder} could be in both category  * tokens, and additional category lists.  *   * @lucene.experimental  */
end_comment
begin_class
DECL|class|EnhancementsDocumentBuilder
specifier|public
class|class
name|EnhancementsDocumentBuilder
extends|extends
name|CategoryDocumentBuilder
block|{
comment|/**    * @param params    *            Indexing params which include {@link CategoryEnhancement}s.    */
DECL|method|EnhancementsDocumentBuilder
specifier|public
name|EnhancementsDocumentBuilder
parameter_list|(
name|TaxonomyWriter
name|taxonomyWriter
parameter_list|,
name|EnhancementsIndexingParams
name|params
parameter_list|)
block|{
name|super
argument_list|(
name|taxonomyWriter
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getParentsStream
specifier|protected
name|TokenStream
name|getParentsStream
parameter_list|(
name|CategoryAttributesStream
name|categoryAttributesStream
parameter_list|)
block|{
name|List
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|CategoryProperty
argument_list|>
argument_list|>
name|toRetainList
init|=
operator|(
operator|(
name|EnhancementsIndexingParams
operator|)
name|indexingParams
operator|)
operator|.
name|getRetainableProperties
argument_list|()
decl_stmt|;
if|if
condition|(
name|toRetainList
operator|!=
literal|null
condition|)
block|{
name|CategoryParentsStream
name|categoryParentsStream
init|=
operator|new
name|CategoryParentsStream
argument_list|(
name|categoryAttributesStream
argument_list|,
name|taxonomyWriter
argument_list|,
name|indexingParams
argument_list|)
decl_stmt|;
for|for
control|(
name|Class
argument_list|<
name|?
extends|extends
name|CategoryProperty
argument_list|>
name|toRetain
range|:
name|toRetainList
control|)
block|{
name|categoryParentsStream
operator|.
name|addRetainableProperty
argument_list|(
name|toRetain
argument_list|)
expr_stmt|;
block|}
return|return
name|categoryParentsStream
return|;
block|}
return|return
name|super
operator|.
name|getParentsStream
argument_list|(
name|categoryAttributesStream
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getCategoryListTokenizer
specifier|protected
name|CategoryListTokenizer
name|getCategoryListTokenizer
parameter_list|(
name|TokenStream
name|categoryStream
parameter_list|)
block|{
name|CategoryListTokenizer
name|tokenizer
init|=
name|super
operator|.
name|getCategoryListTokenizer
argument_list|(
name|categoryStream
argument_list|)
decl_stmt|;
comment|// Add tokenizer for each enhancement that produces category list
for|for
control|(
name|CategoryEnhancement
name|enhancement
range|:
operator|(
operator|(
name|EnhancementsIndexingParams
operator|)
name|indexingParams
operator|)
operator|.
name|getCategoryEnhancements
argument_list|()
control|)
block|{
if|if
condition|(
name|enhancement
operator|.
name|generatesCategoryList
argument_list|()
condition|)
block|{
name|tokenizer
operator|=
name|enhancement
operator|.
name|getCategoryListTokenizer
argument_list|(
name|tokenizer
argument_list|,
operator|(
name|EnhancementsIndexingParams
operator|)
name|indexingParams
argument_list|,
name|taxonomyWriter
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|tokenizer
return|;
block|}
annotation|@
name|Override
DECL|method|getCategoryTokenizer
specifier|protected
name|CategoryTokenizer
name|getCategoryTokenizer
parameter_list|(
name|TokenStream
name|categoryStream
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|EnhancementsCategoryTokenizer
argument_list|(
name|categoryStream
argument_list|,
operator|(
name|EnhancementsIndexingParams
operator|)
name|indexingParams
argument_list|)
return|;
block|}
block|}
end_class
end_unit
