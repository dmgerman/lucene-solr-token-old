begin_unit
begin_package
DECL|package|org.apache.lucene.facet.search
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|search
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|params
operator|.
name|FacetSearchParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|taxonomy
operator|.
name|TaxonomyReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanClause
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Collector
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|ConstantScoreQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|FieldDoc
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Filter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|MatchAllDocsQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|MultiCollector
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|ScoreDoc
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Sort
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TermQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TopDocs
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TopFieldCollector
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TopScoreDocCollector
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Weight
import|;
end_import
begin_comment
comment|/**       * Computes drill down and sideways counts for the provided  * {@link DrillDownQuery}.  Drill sideways counts include  * alternative values/aggregates for the drill-down  * dimensions so that a dimension does not disappear after  * the user drills down into it.  *  *<p> Use one of the static search  * methods to do the search, and then get the hits and facet  * results from the returned {@link DrillSidewaysResult}.  *  *<p><b>NOTE</b>: this allocates one {@link  * FacetsCollector} for each drill-down, plus one.  If your  * index has high number of facet labels then this will  * multiply your memory usage.  *  * @lucene.experimental  */
end_comment
begin_class
DECL|class|DrillSideways
specifier|public
class|class
name|DrillSideways
block|{
DECL|field|searcher
specifier|protected
specifier|final
name|IndexSearcher
name|searcher
decl_stmt|;
DECL|field|taxoReader
specifier|protected
specifier|final
name|TaxonomyReader
name|taxoReader
decl_stmt|;
comment|/** Create a new {@code DrillSideways} instance. */
DECL|method|DrillSideways
specifier|public
name|DrillSideways
parameter_list|(
name|IndexSearcher
name|searcher
parameter_list|,
name|TaxonomyReader
name|taxoReader
parameter_list|)
block|{
name|this
operator|.
name|searcher
operator|=
name|searcher
expr_stmt|;
name|this
operator|.
name|taxoReader
operator|=
name|taxoReader
expr_stmt|;
block|}
comment|/** Moves any drill-downs that don't have a corresponding    *  facet request into the baseQuery.  This is unusual,    *  yet allowed, because typically the added drill-downs are because    *  the user has clicked on previously presented facets,    *  and those same facets would be computed this time    *  around. */
DECL|method|moveDrillDownOnlyClauses
specifier|private
specifier|static
name|DrillDownQuery
name|moveDrillDownOnlyClauses
parameter_list|(
name|DrillDownQuery
name|in
parameter_list|,
name|FacetSearchParams
name|fsp
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|facetDims
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|FacetRequest
name|fr
range|:
name|fsp
operator|.
name|facetRequests
control|)
block|{
if|if
condition|(
name|fr
operator|.
name|categoryPath
operator|.
name|length
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"all FacetRequests must have CategoryPath with length> 0"
argument_list|)
throw|;
block|}
name|facetDims
operator|.
name|add
argument_list|(
name|fr
operator|.
name|categoryPath
operator|.
name|components
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
name|BooleanClause
index|[]
name|clauses
init|=
name|in
operator|.
name|getBooleanQuery
argument_list|()
operator|.
name|getClauses
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|drillDownDims
init|=
name|in
operator|.
name|getDims
argument_list|()
decl_stmt|;
name|String
index|[]
name|dimsByIndex
init|=
operator|new
name|String
index|[
name|drillDownDims
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|ent
range|:
name|drillDownDims
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|dimsByIndex
index|[
name|ent
operator|.
name|getValue
argument_list|()
index|]
operator|=
name|ent
operator|.
name|getKey
argument_list|()
expr_stmt|;
block|}
name|int
name|startClause
decl_stmt|;
if|if
condition|(
name|clauses
operator|.
name|length
operator|==
name|drillDownDims
operator|.
name|size
argument_list|()
condition|)
block|{
name|startClause
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
assert|assert
name|clauses
operator|.
name|length
operator|==
literal|1
operator|+
name|drillDownDims
operator|.
name|size
argument_list|()
assert|;
name|startClause
operator|=
literal|1
expr_stmt|;
block|}
comment|// Break out drill-down clauses that have no
comment|// corresponding facet request and move them inside the
comment|// baseQuery:
name|List
argument_list|<
name|Query
argument_list|>
name|nonFacetClauses
init|=
operator|new
name|ArrayList
argument_list|<
name|Query
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Query
argument_list|>
name|facetClauses
init|=
operator|new
name|ArrayList
argument_list|<
name|Query
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|dimToIndex
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|startClause
init|;
name|i
operator|<
name|clauses
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Query
name|q
init|=
name|clauses
index|[
name|i
index|]
operator|.
name|getQuery
argument_list|()
decl_stmt|;
name|String
name|dim
init|=
name|dimsByIndex
index|[
name|i
operator|-
name|startClause
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|facetDims
operator|.
name|contains
argument_list|(
name|dim
argument_list|)
condition|)
block|{
name|nonFacetClauses
operator|.
name|add
argument_list|(
name|q
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|facetClauses
operator|.
name|add
argument_list|(
name|q
argument_list|)
expr_stmt|;
name|dimToIndex
operator|.
name|put
argument_list|(
name|dim
argument_list|,
name|dimToIndex
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|nonFacetClauses
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|BooleanQuery
name|newBaseQuery
init|=
operator|new
name|BooleanQuery
argument_list|(
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|startClause
operator|==
literal|1
condition|)
block|{
comment|// Add original basaeQuery:
name|newBaseQuery
operator|.
name|add
argument_list|(
name|clauses
index|[
literal|0
index|]
operator|.
name|getQuery
argument_list|()
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Query
name|q
range|:
name|nonFacetClauses
control|)
block|{
name|newBaseQuery
operator|.
name|add
argument_list|(
name|q
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|DrillDownQuery
argument_list|(
name|fsp
operator|.
name|indexingParams
argument_list|,
name|newBaseQuery
argument_list|,
name|facetClauses
argument_list|,
name|dimToIndex
argument_list|)
return|;
block|}
else|else
block|{
comment|// No change:
return|return
name|in
return|;
block|}
block|}
comment|/**    * Search, collecting hits with a {@link Collector}, and    * computing drill down and sideways counts.    */
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"rawtypes"
block|,
literal|"unchecked"
block|}
argument_list|)
DECL|method|search
specifier|public
name|DrillSidewaysResult
name|search
parameter_list|(
name|DrillDownQuery
name|query
parameter_list|,
name|Collector
name|hitCollector
parameter_list|,
name|FacetSearchParams
name|fsp
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|query
operator|.
name|fip
operator|!=
name|fsp
operator|.
name|indexingParams
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"DrillDownQuery's FacetIndexingParams should match FacetSearchParams'"
argument_list|)
throw|;
block|}
name|query
operator|=
name|moveDrillDownOnlyClauses
argument_list|(
name|query
argument_list|,
name|fsp
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|drillDownDims
init|=
name|query
operator|.
name|getDims
argument_list|()
decl_stmt|;
if|if
condition|(
name|drillDownDims
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// Just do ordinary search when there are no drill-downs:
name|FacetsCollector
name|c
init|=
name|FacetsCollector
operator|.
name|create
argument_list|(
name|getDrillDownAccumulator
argument_list|(
name|fsp
argument_list|)
argument_list|)
decl_stmt|;
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
name|MultiCollector
operator|.
name|wrap
argument_list|(
name|hitCollector
argument_list|,
name|c
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|new
name|DrillSidewaysResult
argument_list|(
name|c
operator|.
name|getFacetResults
argument_list|()
argument_list|,
literal|null
argument_list|)
return|;
block|}
name|List
argument_list|<
name|FacetRequest
argument_list|>
name|ddRequests
init|=
operator|new
name|ArrayList
argument_list|<
name|FacetRequest
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|FacetRequest
name|fr
range|:
name|fsp
operator|.
name|facetRequests
control|)
block|{
assert|assert
name|fr
operator|.
name|categoryPath
operator|.
name|length
operator|>
literal|0
assert|;
if|if
condition|(
operator|!
name|drillDownDims
operator|.
name|containsKey
argument_list|(
name|fr
operator|.
name|categoryPath
operator|.
name|components
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
name|ddRequests
operator|.
name|add
argument_list|(
name|fr
argument_list|)
expr_stmt|;
block|}
block|}
name|FacetSearchParams
name|fsp2
decl_stmt|;
if|if
condition|(
operator|!
name|ddRequests
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|fsp2
operator|=
operator|new
name|FacetSearchParams
argument_list|(
name|fsp
operator|.
name|indexingParams
argument_list|,
name|ddRequests
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fsp2
operator|=
literal|null
expr_stmt|;
block|}
name|BooleanQuery
name|ddq
init|=
name|query
operator|.
name|getBooleanQuery
argument_list|()
decl_stmt|;
name|BooleanClause
index|[]
name|clauses
init|=
name|ddq
operator|.
name|getClauses
argument_list|()
decl_stmt|;
name|Query
name|baseQuery
decl_stmt|;
name|int
name|startClause
decl_stmt|;
if|if
condition|(
name|clauses
operator|.
name|length
operator|==
name|drillDownDims
operator|.
name|size
argument_list|()
condition|)
block|{
comment|// TODO: we could optimize this pure-browse case by
comment|// making a custom scorer instead:
name|baseQuery
operator|=
operator|new
name|MatchAllDocsQuery
argument_list|()
expr_stmt|;
name|startClause
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
assert|assert
name|clauses
operator|.
name|length
operator|==
literal|1
operator|+
name|drillDownDims
operator|.
name|size
argument_list|()
assert|;
name|baseQuery
operator|=
name|clauses
index|[
literal|0
index|]
operator|.
name|getQuery
argument_list|()
expr_stmt|;
name|startClause
operator|=
literal|1
expr_stmt|;
block|}
name|FacetsCollector
name|drillDownCollector
init|=
name|fsp2
operator|==
literal|null
condition|?
literal|null
else|:
name|FacetsCollector
operator|.
name|create
argument_list|(
name|getDrillDownAccumulator
argument_list|(
name|fsp2
argument_list|)
argument_list|)
decl_stmt|;
name|FacetsCollector
index|[]
name|drillSidewaysCollectors
init|=
operator|new
name|FacetsCollector
index|[
name|drillDownDims
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|idx
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|dim
range|:
name|drillDownDims
operator|.
name|keySet
argument_list|()
control|)
block|{
name|List
argument_list|<
name|FacetRequest
argument_list|>
name|requests
init|=
operator|new
name|ArrayList
argument_list|<
name|FacetRequest
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|FacetRequest
name|fr
range|:
name|fsp
operator|.
name|facetRequests
control|)
block|{
assert|assert
name|fr
operator|.
name|categoryPath
operator|.
name|length
operator|>
literal|0
assert|;
if|if
condition|(
name|fr
operator|.
name|categoryPath
operator|.
name|components
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
name|dim
argument_list|)
condition|)
block|{
name|requests
operator|.
name|add
argument_list|(
name|fr
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|requests
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"could not find FacetRequest for drill-sideways dimension \""
operator|+
name|dim
operator|+
literal|"\""
argument_list|)
throw|;
block|}
name|drillSidewaysCollectors
index|[
name|idx
operator|++
index|]
operator|=
name|FacetsCollector
operator|.
name|create
argument_list|(
name|getDrillSidewaysAccumulator
argument_list|(
name|dim
argument_list|,
operator|new
name|FacetSearchParams
argument_list|(
name|fsp
operator|.
name|indexingParams
argument_list|,
name|requests
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|boolean
name|useCollectorMethod
init|=
name|scoreSubDocsAtOnce
argument_list|()
decl_stmt|;
name|Term
index|[]
index|[]
name|drillDownTerms
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|useCollectorMethod
condition|)
block|{
comment|// Optimistic: assume subQueries of the DDQ are either
comment|// TermQuery or BQ OR of TermQuery; if this is wrong
comment|// then we detect it and fallback to the mome general
comment|// but slower DrillSidewaysCollector:
name|drillDownTerms
operator|=
operator|new
name|Term
index|[
name|clauses
operator|.
name|length
operator|-
name|startClause
index|]
index|[]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|startClause
init|;
name|i
operator|<
name|clauses
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Query
name|q
init|=
name|clauses
index|[
name|i
index|]
operator|.
name|getQuery
argument_list|()
decl_stmt|;
comment|// DrillDownQuery always wraps each subQuery in
comment|// ConstantScoreQuery:
assert|assert
name|q
operator|instanceof
name|ConstantScoreQuery
assert|;
name|q
operator|=
operator|(
operator|(
name|ConstantScoreQuery
operator|)
name|q
operator|)
operator|.
name|getQuery
argument_list|()
expr_stmt|;
if|if
condition|(
name|q
operator|instanceof
name|TermQuery
condition|)
block|{
name|drillDownTerms
index|[
name|i
operator|-
name|startClause
index|]
operator|=
operator|new
name|Term
index|[]
block|{
operator|(
operator|(
name|TermQuery
operator|)
name|q
operator|)
operator|.
name|getTerm
argument_list|()
block|}
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|q
operator|instanceof
name|BooleanQuery
condition|)
block|{
name|BooleanQuery
name|q2
init|=
operator|(
name|BooleanQuery
operator|)
name|q
decl_stmt|;
name|BooleanClause
index|[]
name|clauses2
init|=
name|q2
operator|.
name|getClauses
argument_list|()
decl_stmt|;
name|drillDownTerms
index|[
name|i
operator|-
name|startClause
index|]
operator|=
operator|new
name|Term
index|[
name|clauses2
operator|.
name|length
index|]
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|clauses2
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|clauses2
index|[
name|j
index|]
operator|.
name|getQuery
argument_list|()
operator|instanceof
name|TermQuery
condition|)
block|{
name|drillDownTerms
index|[
name|i
operator|-
name|startClause
index|]
index|[
name|j
index|]
operator|=
operator|(
operator|(
name|TermQuery
operator|)
name|clauses2
index|[
name|j
index|]
operator|.
name|getQuery
argument_list|()
operator|)
operator|.
name|getTerm
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|useCollectorMethod
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
block|}
else|else
block|{
name|useCollectorMethod
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|useCollectorMethod
condition|)
block|{
comment|// TODO: maybe we could push the "collector method"
comment|// down into the optimized scorer to have a tighter
comment|// integration ... and so TermQuery clauses could
comment|// continue to run "optimized"
name|collectorMethod
argument_list|(
name|query
argument_list|,
name|baseQuery
argument_list|,
name|startClause
argument_list|,
name|hitCollector
argument_list|,
name|drillDownCollector
argument_list|,
name|drillSidewaysCollectors
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|DrillSidewaysQuery
name|dsq
init|=
operator|new
name|DrillSidewaysQuery
argument_list|(
name|baseQuery
argument_list|,
name|drillDownCollector
argument_list|,
name|drillSidewaysCollectors
argument_list|,
name|drillDownTerms
argument_list|)
decl_stmt|;
name|searcher
operator|.
name|search
argument_list|(
name|dsq
argument_list|,
name|hitCollector
argument_list|)
expr_stmt|;
block|}
name|int
name|numDims
init|=
name|drillDownDims
operator|.
name|size
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|FacetResult
argument_list|>
index|[]
name|drillSidewaysResults
init|=
operator|new
name|List
index|[
name|numDims
index|]
decl_stmt|;
name|List
argument_list|<
name|FacetResult
argument_list|>
name|drillDownResults
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|FacetResult
argument_list|>
name|mergedResults
init|=
operator|new
name|ArrayList
argument_list|<
name|FacetResult
argument_list|>
argument_list|()
decl_stmt|;
name|int
index|[]
name|requestUpto
init|=
operator|new
name|int
index|[
name|drillDownDims
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|ddUpto
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fsp
operator|.
name|facetRequests
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|FacetRequest
name|fr
init|=
name|fsp
operator|.
name|facetRequests
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
assert|assert
name|fr
operator|.
name|categoryPath
operator|.
name|length
operator|>
literal|0
assert|;
name|Integer
name|dimIndex
init|=
name|drillDownDims
operator|.
name|get
argument_list|(
name|fr
operator|.
name|categoryPath
operator|.
name|components
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|dimIndex
operator|==
literal|null
condition|)
block|{
comment|// Pure drill down dim (the current query didn't
comment|// drill down on this dim):
if|if
condition|(
name|drillDownResults
operator|==
literal|null
condition|)
block|{
comment|// Lazy init, in case all requests were against
comment|// drill-sideways dims:
name|drillDownResults
operator|=
name|drillDownCollector
operator|.
name|getFacetResults
argument_list|()
expr_stmt|;
comment|//System.out.println("get DD results");
block|}
comment|//System.out.println("add dd results " + i);
name|mergedResults
operator|.
name|add
argument_list|(
name|drillDownResults
operator|.
name|get
argument_list|(
name|ddUpto
operator|++
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Drill sideways dim:
name|int
name|dim
init|=
name|dimIndex
operator|.
name|intValue
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|FacetResult
argument_list|>
name|sidewaysResult
init|=
name|drillSidewaysResults
index|[
name|dim
index|]
decl_stmt|;
if|if
condition|(
name|sidewaysResult
operator|==
literal|null
condition|)
block|{
comment|// Lazy init, in case no facet request is against
comment|// a given drill down dim:
name|sidewaysResult
operator|=
name|drillSidewaysCollectors
index|[
name|dim
index|]
operator|.
name|getFacetResults
argument_list|()
expr_stmt|;
name|drillSidewaysResults
index|[
name|dim
index|]
operator|=
name|sidewaysResult
expr_stmt|;
block|}
name|mergedResults
operator|.
name|add
argument_list|(
name|sidewaysResult
operator|.
name|get
argument_list|(
name|requestUpto
index|[
name|dim
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|requestUpto
index|[
name|dim
index|]
operator|++
expr_stmt|;
block|}
block|}
return|return
operator|new
name|DrillSidewaysResult
argument_list|(
name|mergedResults
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/** Uses the more general but slower method of sideways    *  counting. This method allows an arbitrary subQuery to    *  implement the drill down for a given dimension. */
DECL|method|collectorMethod
specifier|private
name|void
name|collectorMethod
parameter_list|(
name|DrillDownQuery
name|ddq
parameter_list|,
name|Query
name|baseQuery
parameter_list|,
name|int
name|startClause
parameter_list|,
name|Collector
name|hitCollector
parameter_list|,
name|Collector
name|drillDownCollector
parameter_list|,
name|Collector
index|[]
name|drillSidewaysCollectors
parameter_list|)
throws|throws
name|IOException
block|{
name|BooleanClause
index|[]
name|clauses
init|=
name|ddq
operator|.
name|getBooleanQuery
argument_list|()
operator|.
name|getClauses
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|drillDownDims
init|=
name|ddq
operator|.
name|getDims
argument_list|()
decl_stmt|;
name|BooleanQuery
name|topQuery
init|=
operator|new
name|BooleanQuery
argument_list|(
literal|true
argument_list|)
decl_stmt|;
specifier|final
name|DrillSidewaysCollector
name|collector
init|=
operator|new
name|DrillSidewaysCollector
argument_list|(
name|hitCollector
argument_list|,
name|drillDownCollector
argument_list|,
name|drillSidewaysCollectors
argument_list|,
name|drillDownDims
argument_list|)
decl_stmt|;
comment|// TODO: if query is already a BQ we could copy that and
comment|// add clauses to it, instead of doing BQ inside BQ
comment|// (should be more efficient)?  Problem is this can
comment|// affect scoring (coord) ... too bad we can't disable
comment|// coord on a clause by clause basis:
name|topQuery
operator|.
name|add
argument_list|(
name|baseQuery
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
comment|// NOTE: in theory we could just make a single BQ, with
comment|// +query a b c minShouldMatch=2, but in this case,
comment|// annoyingly, BS2 wraps a sub-scorer that always
comment|// returns 2 as the .freq(), not how many of the
comment|// SHOULD clauses matched:
name|BooleanQuery
name|subQuery
init|=
operator|new
name|BooleanQuery
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|Query
name|wrappedSubQuery
init|=
operator|new
name|QueryWrapper
argument_list|(
name|subQuery
argument_list|,
operator|new
name|SetWeight
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|set
parameter_list|(
name|Weight
name|w
parameter_list|)
block|{
name|collector
operator|.
name|setWeight
argument_list|(
name|w
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|Query
name|constantScoreSubQuery
init|=
operator|new
name|ConstantScoreQuery
argument_list|(
name|wrappedSubQuery
argument_list|)
decl_stmt|;
comment|// Don't impact score of original query:
name|constantScoreSubQuery
operator|.
name|setBoost
argument_list|(
literal|0.0f
argument_list|)
expr_stmt|;
name|topQuery
operator|.
name|add
argument_list|(
name|constantScoreSubQuery
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
comment|// Unfortunately this sub-BooleanQuery
comment|// will never get BS1 because today BS1 only works
comment|// if topScorer=true... and actually we cannot use BS1
comment|// anyways because we need subDocsScoredAtOnce:
name|int
name|dimIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|startClause
init|;
name|i
operator|<
name|clauses
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Query
name|q
init|=
name|clauses
index|[
name|i
index|]
operator|.
name|getQuery
argument_list|()
decl_stmt|;
comment|// DrillDownQuery always wraps each subQuery in
comment|// ConstantScoreQuery:
assert|assert
name|q
operator|instanceof
name|ConstantScoreQuery
assert|;
name|q
operator|=
operator|(
operator|(
name|ConstantScoreQuery
operator|)
name|q
operator|)
operator|.
name|getQuery
argument_list|()
expr_stmt|;
specifier|final
name|int
name|finalDimIndex
init|=
name|dimIndex
decl_stmt|;
name|subQuery
operator|.
name|add
argument_list|(
operator|new
name|QueryWrapper
argument_list|(
name|q
argument_list|,
operator|new
name|SetWeight
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|set
parameter_list|(
name|Weight
name|w
parameter_list|)
block|{
name|collector
operator|.
name|setWeight
argument_list|(
name|w
argument_list|,
name|finalDimIndex
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|dimIndex
operator|++
expr_stmt|;
block|}
comment|// TODO: we could better optimize the "just one drill
comment|// down" case w/ a separate [specialized]
comment|// collector...
name|int
name|minShouldMatch
init|=
name|drillDownDims
operator|.
name|size
argument_list|()
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|minShouldMatch
operator|==
literal|0
condition|)
block|{
comment|// Must add another "fake" clause so BQ doesn't erase
comment|// itself by rewriting to the single clause:
name|Query
name|end
init|=
operator|new
name|MatchAllDocsQuery
argument_list|()
decl_stmt|;
name|end
operator|.
name|setBoost
argument_list|(
literal|0.0f
argument_list|)
expr_stmt|;
name|subQuery
operator|.
name|add
argument_list|(
name|end
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|minShouldMatch
operator|++
expr_stmt|;
block|}
name|subQuery
operator|.
name|setMinimumNumberShouldMatch
argument_list|(
name|minShouldMatch
argument_list|)
expr_stmt|;
comment|// System.out.println("EXE " + topQuery);
comment|// Collects against the passed-in
comment|// drillDown/SidewaysCollectors as a side effect:
name|searcher
operator|.
name|search
argument_list|(
name|topQuery
argument_list|,
name|collector
argument_list|)
expr_stmt|;
block|}
comment|/**    * Search, sorting by {@link Sort}, and computing    * drill down and sideways counts.    */
DECL|method|search
specifier|public
name|DrillSidewaysResult
name|search
parameter_list|(
name|DrillDownQuery
name|query
parameter_list|,
name|Filter
name|filter
parameter_list|,
name|FieldDoc
name|after
parameter_list|,
name|int
name|topN
parameter_list|,
name|Sort
name|sort
parameter_list|,
name|boolean
name|doDocScores
parameter_list|,
name|boolean
name|doMaxScore
parameter_list|,
name|FacetSearchParams
name|fsp
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|filter
operator|!=
literal|null
condition|)
block|{
name|query
operator|=
operator|new
name|DrillDownQuery
argument_list|(
name|filter
argument_list|,
name|query
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sort
operator|!=
literal|null
condition|)
block|{
specifier|final
name|TopFieldCollector
name|hitCollector
init|=
name|TopFieldCollector
operator|.
name|create
argument_list|(
name|sort
argument_list|,
name|Math
operator|.
name|min
argument_list|(
name|topN
argument_list|,
name|searcher
operator|.
name|getIndexReader
argument_list|()
operator|.
name|maxDoc
argument_list|()
argument_list|)
argument_list|,
name|after
argument_list|,
literal|true
argument_list|,
name|doDocScores
argument_list|,
name|doMaxScore
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|DrillSidewaysResult
name|r
init|=
name|search
argument_list|(
name|query
argument_list|,
name|hitCollector
argument_list|,
name|fsp
argument_list|)
decl_stmt|;
return|return
operator|new
name|DrillSidewaysResult
argument_list|(
name|r
operator|.
name|facetResults
argument_list|,
name|hitCollector
operator|.
name|topDocs
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|search
argument_list|(
name|after
argument_list|,
name|query
argument_list|,
name|topN
argument_list|,
name|fsp
argument_list|)
return|;
block|}
block|}
comment|/**    * Search, sorting by score, and computing    * drill down and sideways counts.    */
DECL|method|search
specifier|public
name|DrillSidewaysResult
name|search
parameter_list|(
name|ScoreDoc
name|after
parameter_list|,
name|DrillDownQuery
name|query
parameter_list|,
name|int
name|topN
parameter_list|,
name|FacetSearchParams
name|fsp
parameter_list|)
throws|throws
name|IOException
block|{
name|TopScoreDocCollector
name|hitCollector
init|=
name|TopScoreDocCollector
operator|.
name|create
argument_list|(
name|Math
operator|.
name|min
argument_list|(
name|topN
argument_list|,
name|searcher
operator|.
name|getIndexReader
argument_list|()
operator|.
name|maxDoc
argument_list|()
argument_list|)
argument_list|,
name|after
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|DrillSidewaysResult
name|r
init|=
name|search
argument_list|(
name|query
argument_list|,
name|hitCollector
argument_list|,
name|fsp
argument_list|)
decl_stmt|;
return|return
operator|new
name|DrillSidewaysResult
argument_list|(
name|r
operator|.
name|facetResults
argument_list|,
name|hitCollector
operator|.
name|topDocs
argument_list|()
argument_list|)
return|;
block|}
comment|/** Override this to use a custom drill-down {@link    *  FacetsAccumulator}. */
DECL|method|getDrillDownAccumulator
specifier|protected
name|FacetsAccumulator
name|getDrillDownAccumulator
parameter_list|(
name|FacetSearchParams
name|fsp
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|FacetsAccumulator
operator|.
name|create
argument_list|(
name|fsp
argument_list|,
name|searcher
operator|.
name|getIndexReader
argument_list|()
argument_list|,
name|taxoReader
argument_list|)
return|;
block|}
comment|/** Override this to use a custom drill-sideways {@link    *  FacetsAccumulator}. */
DECL|method|getDrillSidewaysAccumulator
specifier|protected
name|FacetsAccumulator
name|getDrillSidewaysAccumulator
parameter_list|(
name|String
name|dim
parameter_list|,
name|FacetSearchParams
name|fsp
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|FacetsAccumulator
operator|.
name|create
argument_list|(
name|fsp
argument_list|,
name|searcher
operator|.
name|getIndexReader
argument_list|()
argument_list|,
name|taxoReader
argument_list|)
return|;
block|}
comment|/** Override this and return true if your collector    *  (e.g., ToParentBlockJoinCollector) expects all    *  sub-scorers to be positioned on the document being    *  collected.  This will cause some performance loss;    *  default is false.  Note that if you return true from    *  this method (in a subclass) be sure your collector    *  also returns false from {@link    *  Collector#acceptsDocsOutOfOrder}: this will trick    *  BooleanQuery into also scoring all subDocs at once. */
DECL|method|scoreSubDocsAtOnce
specifier|protected
name|boolean
name|scoreSubDocsAtOnce
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
comment|/**    * Represents the returned result from a drill sideways search. Note that if    * you called    * {@link DrillSideways#search(DrillDownQuery, Collector, FacetSearchParams)},    * then {@link #hits} will be {@code null}.    */
DECL|class|DrillSidewaysResult
specifier|public
specifier|static
class|class
name|DrillSidewaysResult
block|{
comment|/** Combined drill down& sideways results. */
DECL|field|facetResults
specifier|public
specifier|final
name|List
argument_list|<
name|FacetResult
argument_list|>
name|facetResults
decl_stmt|;
comment|/** Hits. */
DECL|field|hits
specifier|public
specifier|final
name|TopDocs
name|hits
decl_stmt|;
DECL|method|DrillSidewaysResult
specifier|public
name|DrillSidewaysResult
parameter_list|(
name|List
argument_list|<
name|FacetResult
argument_list|>
name|facetResults
parameter_list|,
name|TopDocs
name|hits
parameter_list|)
block|{
name|this
operator|.
name|facetResults
operator|=
name|facetResults
expr_stmt|;
name|this
operator|.
name|hits
operator|=
name|hits
expr_stmt|;
block|}
block|}
DECL|interface|SetWeight
specifier|private
interface|interface
name|SetWeight
block|{
DECL|method|set
specifier|public
name|void
name|set
parameter_list|(
name|Weight
name|w
parameter_list|)
function_decl|;
block|}
comment|/** Just records which Weight was given out for the    *  (possibly rewritten) Query. */
DECL|class|QueryWrapper
specifier|private
specifier|static
class|class
name|QueryWrapper
extends|extends
name|Query
block|{
DECL|field|originalQuery
specifier|private
specifier|final
name|Query
name|originalQuery
decl_stmt|;
DECL|field|setter
specifier|private
specifier|final
name|SetWeight
name|setter
decl_stmt|;
DECL|method|QueryWrapper
specifier|public
name|QueryWrapper
parameter_list|(
name|Query
name|originalQuery
parameter_list|,
name|SetWeight
name|setter
parameter_list|)
block|{
name|this
operator|.
name|originalQuery
operator|=
name|originalQuery
expr_stmt|;
name|this
operator|.
name|setter
operator|=
name|setter
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createWeight
specifier|public
name|Weight
name|createWeight
parameter_list|(
specifier|final
name|IndexSearcher
name|searcher
parameter_list|)
throws|throws
name|IOException
block|{
name|Weight
name|w
init|=
name|originalQuery
operator|.
name|createWeight
argument_list|(
name|searcher
argument_list|)
decl_stmt|;
name|setter
operator|.
name|set
argument_list|(
name|w
argument_list|)
expr_stmt|;
return|return
name|w
return|;
block|}
annotation|@
name|Override
DECL|method|rewrite
specifier|public
name|Query
name|rewrite
parameter_list|(
name|IndexReader
name|reader
parameter_list|)
throws|throws
name|IOException
block|{
name|Query
name|rewritten
init|=
name|originalQuery
operator|.
name|rewrite
argument_list|(
name|reader
argument_list|)
decl_stmt|;
if|if
condition|(
name|rewritten
operator|!=
name|originalQuery
condition|)
block|{
return|return
operator|new
name|QueryWrapper
argument_list|(
name|rewritten
argument_list|,
name|setter
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|this
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
name|originalQuery
operator|.
name|toString
argument_list|(
name|s
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|o
operator|instanceof
name|QueryWrapper
operator|)
condition|)
return|return
literal|false
return|;
specifier|final
name|QueryWrapper
name|other
init|=
operator|(
name|QueryWrapper
operator|)
name|o
decl_stmt|;
return|return
name|super
operator|.
name|equals
argument_list|(
name|o
argument_list|)
operator|&&
name|originalQuery
operator|.
name|equals
argument_list|(
name|other
operator|.
name|originalQuery
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|super
operator|.
name|hashCode
argument_list|()
operator|*
literal|31
operator|+
name|originalQuery
operator|.
name|hashCode
argument_list|()
return|;
block|}
block|}
block|}
end_class
end_unit
