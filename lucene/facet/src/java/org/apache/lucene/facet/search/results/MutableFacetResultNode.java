begin_unit
begin_package
DECL|package|org.apache.lucene.facet.search.results
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|search
operator|.
name|results
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|taxonomy
operator|.
name|CategoryPath
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|taxonomy
operator|.
name|TaxonomyReader
import|;
end_import
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_comment
comment|/**  * Mutable implementation for Result of faceted search for a certain taxonomy node.  *   * @lucene.experimental  */
end_comment
begin_class
DECL|class|MutableFacetResultNode
specifier|public
class|class
name|MutableFacetResultNode
implements|implements
name|FacetResultNode
block|{
comment|/**    * Empty sub results to be returned when there are no results.    * We never return null, so that code using this can remain simpler.     */
DECL|field|EMPTY_SUB_RESULTS
specifier|private
specifier|static
specifier|final
name|ArrayList
argument_list|<
name|FacetResultNode
argument_list|>
name|EMPTY_SUB_RESULTS
init|=
operator|new
name|ArrayList
argument_list|<
name|FacetResultNode
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|ordinal
specifier|private
name|int
name|ordinal
decl_stmt|;
DECL|field|label
specifier|private
name|CategoryPath
name|label
init|=
literal|null
decl_stmt|;
DECL|field|value
specifier|private
name|double
name|value
decl_stmt|;
DECL|field|residue
specifier|private
name|double
name|residue
decl_stmt|;
DECL|field|subResults
specifier|private
name|List
argument_list|<
name|FacetResultNode
argument_list|>
name|subResults
decl_stmt|;
comment|/**    * Create a Facet Result Node.    *     * @param ordinal    *          ordinal in the taxonomy of the category of this result.    * @param value    *          value this result.    */
DECL|method|MutableFacetResultNode
specifier|public
name|MutableFacetResultNode
parameter_list|(
name|int
name|ordinal
parameter_list|,
name|double
name|value
parameter_list|)
block|{
name|this
argument_list|(
name|ordinal
argument_list|,
name|value
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**    * Reset a facet Result Node.    *<p>    * Used at the population of facet results, not intended for regular use by    * applications.    *     * @param ordinal    *          ordinal in the taxonomy of the category of this result.    * @param value    *          value of this result.    */
DECL|method|reset
specifier|public
name|void
name|reset
parameter_list|(
name|int
name|ordinal
parameter_list|,
name|double
name|value
parameter_list|)
block|{
name|this
operator|.
name|ordinal
operator|=
name|ordinal
expr_stmt|;
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
if|if
condition|(
name|subResults
operator|!=
literal|null
condition|)
block|{
name|subResults
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|label
operator|=
literal|null
expr_stmt|;
name|residue
operator|=
literal|0
expr_stmt|;
block|}
comment|/**    * Create a Facet Result Node.    *     * @param ordinal    *          ordinal in the taxonomy of the category of this result.    * @param value    *          value of this result.    * @param residue    *          Value of screened out sub results.    * @param label    *          label of the category path of this result.    * @param subResults    *          - sub results, usually descendants, sometimes child results, of    *          this result - depending on the request.    */
DECL|method|MutableFacetResultNode
specifier|public
name|MutableFacetResultNode
parameter_list|(
name|int
name|ordinal
parameter_list|,
name|double
name|value
parameter_list|,
name|double
name|residue
parameter_list|,
name|CategoryPath
name|label
parameter_list|,
name|List
argument_list|<
name|FacetResultNode
argument_list|>
name|subResults
parameter_list|)
block|{
name|this
operator|.
name|ordinal
operator|=
name|ordinal
expr_stmt|;
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
name|this
operator|.
name|residue
operator|=
name|residue
expr_stmt|;
name|this
operator|.
name|label
operator|=
name|label
expr_stmt|;
name|this
operator|.
name|subResults
operator|=
name|subResults
expr_stmt|;
block|}
comment|/**    * Create a mutable facet result node from another result node    * @param other other result node to copy from    * @param takeSubResults set to true to take also sub results of other node    */
DECL|method|MutableFacetResultNode
specifier|public
name|MutableFacetResultNode
parameter_list|(
name|FacetResultNode
name|other
parameter_list|,
name|boolean
name|takeSubResults
parameter_list|)
block|{
name|this
argument_list|(
name|other
operator|.
name|getOrdinal
argument_list|()
argument_list|,
name|other
operator|.
name|getValue
argument_list|()
argument_list|,
name|other
operator|.
name|getResidue
argument_list|()
argument_list|,
name|other
operator|.
name|getLabel
argument_list|()
argument_list|,
name|takeSubResults
condition|?
name|resultsToList
argument_list|(
name|other
operator|.
name|getSubResults
argument_list|()
argument_list|)
else|:
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|resultsToList
specifier|private
specifier|static
name|List
argument_list|<
name|FacetResultNode
argument_list|>
name|resultsToList
parameter_list|(
name|Iterable
argument_list|<
name|?
extends|extends
name|FacetResultNode
argument_list|>
name|subResults
parameter_list|)
block|{
if|if
condition|(
name|subResults
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|ArrayList
argument_list|<
name|FacetResultNode
argument_list|>
name|res
init|=
operator|new
name|ArrayList
argument_list|<
name|FacetResultNode
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|FacetResultNode
name|r
range|:
name|subResults
control|)
block|{
name|res
operator|.
name|add
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
return|return
name|res
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|toString
argument_list|(
literal|""
argument_list|)
return|;
block|}
comment|/**    * Number of sub results.    */
DECL|method|numSubResults
specifier|private
name|int
name|numSubResults
parameter_list|()
block|{
if|if
condition|(
name|subResults
operator|==
literal|null
condition|)
block|{
return|return
literal|0
return|;
block|}
return|return
name|subResults
operator|.
name|size
argument_list|()
return|;
block|}
comment|/*    * (non-Javadoc)    *     * @see    * org.apache.lucene.facet.search.results2.FacetResultNode#toString(java.lang.    * String)    */
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|(
name|String
name|prefix
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
name|prefix
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"Facet Result Node with "
argument_list|)
operator|.
name|append
argument_list|(
name|numSubResults
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" sub result nodes.\n"
argument_list|)
expr_stmt|;
comment|// label
name|sb
operator|.
name|append
argument_list|(
name|prefix
argument_list|)
operator|.
name|append
argument_list|(
literal|"Name: "
argument_list|)
operator|.
name|append
argument_list|(
name|getLabel
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
comment|// value
name|sb
operator|.
name|append
argument_list|(
name|prefix
argument_list|)
operator|.
name|append
argument_list|(
literal|"Value: "
argument_list|)
operator|.
name|append
argument_list|(
name|value
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
comment|// residue
name|sb
operator|.
name|append
argument_list|(
name|prefix
argument_list|)
operator|.
name|append
argument_list|(
literal|"Residue: "
argument_list|)
operator|.
name|append
argument_list|(
name|residue
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
if|if
condition|(
name|subResults
operator|!=
literal|null
condition|)
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|FacetResultNode
name|subRes
range|:
name|subResults
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
operator|.
name|append
argument_list|(
name|prefix
argument_list|)
operator|.
name|append
argument_list|(
literal|"Subresult #"
argument_list|)
operator|.
name|append
argument_list|(
name|i
operator|++
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
operator|.
name|append
argument_list|(
name|subRes
operator|.
name|toString
argument_list|(
name|prefix
operator|+
literal|"\t"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|getOrdinal
specifier|public
specifier|final
name|int
name|getOrdinal
parameter_list|()
block|{
return|return
name|ordinal
return|;
block|}
DECL|method|getLabel
specifier|public
specifier|final
name|CategoryPath
name|getLabel
parameter_list|()
block|{
return|return
name|label
return|;
block|}
comment|/**    * Set the label of the category of this result.    * @param label the label to set.    * @see #getLabel()    */
DECL|method|setLabel
specifier|public
name|void
name|setLabel
parameter_list|(
name|CategoryPath
name|label
parameter_list|)
block|{
name|this
operator|.
name|label
operator|=
name|label
expr_stmt|;
block|}
DECL|method|getValue
specifier|public
specifier|final
name|double
name|getValue
parameter_list|()
block|{
return|return
name|value
return|;
block|}
comment|/**    * Set the value of this result.    *     * @param value    *          the value to set    * @see #getValue()    */
DECL|method|setValue
specifier|public
name|void
name|setValue
parameter_list|(
name|double
name|value
parameter_list|)
block|{
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
comment|/**    * increase the value for this result.    * @param addedValue the value to add    * @see #getValue()    */
DECL|method|increaseValue
specifier|public
name|void
name|increaseValue
parameter_list|(
name|double
name|addedValue
parameter_list|)
block|{
name|this
operator|.
name|value
operator|+=
name|addedValue
expr_stmt|;
block|}
DECL|method|getResidue
specifier|public
specifier|final
name|double
name|getResidue
parameter_list|()
block|{
return|return
name|residue
return|;
block|}
comment|/**    * Set the residue.    * @param residue the residue to set    * @see #getResidue()    */
DECL|method|setResidue
specifier|public
name|void
name|setResidue
parameter_list|(
name|double
name|residue
parameter_list|)
block|{
name|this
operator|.
name|residue
operator|=
name|residue
expr_stmt|;
block|}
comment|/**    * increase the residue for this result.    * @param addedResidue the residue to add    * @see #getResidue()    */
DECL|method|increaseResidue
specifier|public
name|void
name|increaseResidue
parameter_list|(
name|double
name|addedResidue
parameter_list|)
block|{
name|this
operator|.
name|residue
operator|+=
name|addedResidue
expr_stmt|;
block|}
DECL|method|getSubResults
specifier|public
specifier|final
name|Iterable
argument_list|<
name|?
extends|extends
name|FacetResultNode
argument_list|>
name|getSubResults
parameter_list|()
block|{
return|return
name|subResults
operator|!=
literal|null
condition|?
name|subResults
else|:
name|EMPTY_SUB_RESULTS
return|;
block|}
comment|/**    * Trim sub results to a given size.    *<p>    * Note: Although the {@link #getResidue()} is not guaranteed to be    * accurate, it is worth fixing it, as possible, by taking under account the    * trimmed sub-nodes.    */
DECL|method|trimSubResults
specifier|public
name|void
name|trimSubResults
parameter_list|(
name|int
name|size
parameter_list|)
block|{
if|if
condition|(
name|subResults
operator|==
literal|null
operator|||
name|subResults
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return;
block|}
name|ArrayList
argument_list|<
name|FacetResultNode
argument_list|>
name|trimmed
init|=
operator|new
name|ArrayList
argument_list|<
name|FacetResultNode
argument_list|>
argument_list|(
name|size
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|subResults
operator|.
name|size
argument_list|()
operator|&&
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|MutableFacetResultNode
name|trimmedNode
init|=
name|toImpl
argument_list|(
name|subResults
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|trimmedNode
operator|.
name|trimSubResults
argument_list|(
name|size
argument_list|)
expr_stmt|;
name|trimmed
operator|.
name|add
argument_list|(
name|trimmedNode
argument_list|)
expr_stmt|;
block|}
comment|/*      * If we are trimming, it means Sampling is in effect and the extra      * (over-sampled) results are being trimmed. Although the residue is not      * guaranteed to be accurate for Sampling, we try our best to fix it.      * The node's residue now will take under account the sub-nodes we're      * trimming.      */
for|for
control|(
name|int
name|i
init|=
name|size
init|;
name|i
operator|<
name|subResults
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|increaseResidue
argument_list|(
name|subResults
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|subResults
operator|=
name|trimmed
expr_stmt|;
block|}
comment|/**    * Set the sub results.    * @param subResults the sub-results to set    */
DECL|method|setSubResults
specifier|public
name|void
name|setSubResults
parameter_list|(
name|List
argument_list|<
name|FacetResultNode
argument_list|>
name|subResults
parameter_list|)
block|{
name|this
operator|.
name|subResults
operator|=
name|subResults
expr_stmt|;
block|}
comment|/**    * Append a sub result (as last).    * @param subRes sub-result to be appended    */
DECL|method|appendSubResult
specifier|public
name|void
name|appendSubResult
parameter_list|(
name|FacetResultNode
name|subRes
parameter_list|)
block|{
if|if
condition|(
name|subResults
operator|==
literal|null
condition|)
block|{
name|subResults
operator|=
operator|new
name|ArrayList
argument_list|<
name|FacetResultNode
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|subResults
operator|.
name|add
argument_list|(
name|subRes
argument_list|)
expr_stmt|;
block|}
comment|/**    * Insert sub result (as first).    * @param subRes sub-result to be inserted    */
DECL|method|insertSubResult
specifier|public
name|void
name|insertSubResult
parameter_list|(
name|FacetResultNode
name|subRes
parameter_list|)
block|{
if|if
condition|(
name|subResults
operator|==
literal|null
condition|)
block|{
name|subResults
operator|=
operator|new
name|ArrayList
argument_list|<
name|FacetResultNode
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|subResults
operator|.
name|add
argument_list|(
literal|0
argument_list|,
name|subRes
argument_list|)
expr_stmt|;
block|}
comment|/*    * (non-Javadoc)    *     * @see    * org.apache.lucene.facet.search.results.FacetResultNode#getLabel(org.apache.lucene    * .facet.taxonomy.TaxonomyReader)    */
DECL|method|getLabel
specifier|public
specifier|final
name|CategoryPath
name|getLabel
parameter_list|(
name|TaxonomyReader
name|taxonomyReader
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|label
operator|==
literal|null
condition|)
block|{
name|label
operator|=
name|taxonomyReader
operator|.
name|getPath
argument_list|(
name|ordinal
argument_list|)
expr_stmt|;
block|}
return|return
name|label
return|;
block|}
comment|/*    * (non-Javadoc)    *     * @see org.apache.lucene.facet.search.results.FacetResultNode#getNumSubResults()    */
DECL|method|getNumSubResults
specifier|public
specifier|final
name|int
name|getNumSubResults
parameter_list|()
block|{
return|return
name|subResults
operator|==
literal|null
condition|?
literal|0
else|:
name|subResults
operator|.
name|size
argument_list|()
return|;
block|}
comment|/**    * Internal utility: turn a result node into an implementation class    * with richer API that allows modifying it.    *<p>    * In case that input result node is already of an implementation     * class only casting is done, but in any case we pay the price    * of checking "instance of".    * @param frn facet result node to be turned into an implementation class object     */
DECL|method|toImpl
specifier|public
specifier|static
name|MutableFacetResultNode
name|toImpl
parameter_list|(
name|FacetResultNode
name|frn
parameter_list|)
block|{
if|if
condition|(
name|frn
operator|instanceof
name|MutableFacetResultNode
condition|)
block|{
return|return
operator|(
name|MutableFacetResultNode
operator|)
name|frn
return|;
block|}
return|return
operator|new
name|MutableFacetResultNode
argument_list|(
name|frn
argument_list|,
literal|true
argument_list|)
return|;
block|}
block|}
end_class
end_unit
