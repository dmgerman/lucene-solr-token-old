begin_unit
begin_package
DECL|package|org.apache.lucene.facet.taxonomy.writercache.cl2o
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|taxonomy
operator|.
name|writercache
operator|.
name|cl2o
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|taxonomy
operator|.
name|CategoryPath
import|;
end_import
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_comment
comment|/** Utilities for use of {@link CategoryPath} by {@link CompactLabelToOrdinal}. */
end_comment
begin_class
DECL|class|CategoryPathUtils
class|class
name|CategoryPathUtils
block|{
comment|/** Serializes the given {@link CategoryPath} to the {@link CharBlockArray}. */
DECL|method|serialize
specifier|public
specifier|static
name|void
name|serialize
parameter_list|(
name|CategoryPath
name|cp
parameter_list|,
name|CharBlockArray
name|charBlockArray
parameter_list|)
block|{
name|charBlockArray
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
name|cp
operator|.
name|length
argument_list|)
expr_stmt|;
if|if
condition|(
name|cp
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cp
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|charBlockArray
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
name|cp
operator|.
name|components
index|[
name|i
index|]
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|charBlockArray
operator|.
name|append
argument_list|(
name|cp
operator|.
name|components
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Calculates a hash function of a path that was serialized with    * {@link #serialize(CategoryPath, CharBlockArray)}.    */
DECL|method|hashCodeOfSerialized
specifier|public
specifier|static
name|int
name|hashCodeOfSerialized
parameter_list|(
name|CharBlockArray
name|charBlockArray
parameter_list|,
name|int
name|offset
parameter_list|)
block|{
name|int
name|length
init|=
operator|(
name|short
operator|)
name|charBlockArray
operator|.
name|charAt
argument_list|(
name|offset
operator|++
argument_list|)
decl_stmt|;
if|if
condition|(
name|length
operator|==
literal|0
condition|)
block|{
return|return
literal|0
return|;
block|}
name|int
name|hash
init|=
name|length
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
name|int
name|len
init|=
operator|(
name|short
operator|)
name|charBlockArray
operator|.
name|charAt
argument_list|(
name|offset
operator|++
argument_list|)
decl_stmt|;
name|hash
operator|=
name|hash
operator|*
literal|31
operator|+
name|charBlockArray
operator|.
name|subSequence
argument_list|(
name|offset
argument_list|,
name|offset
operator|+
name|len
argument_list|)
operator|.
name|hashCode
argument_list|()
expr_stmt|;
name|offset
operator|+=
name|len
expr_stmt|;
block|}
return|return
name|hash
return|;
block|}
comment|/**    * Check whether the {@link CategoryPath} is equal to the one serialized in    * {@link CharBlockArray}.    */
DECL|method|equalsToSerialized
specifier|public
specifier|static
name|boolean
name|equalsToSerialized
parameter_list|(
name|CategoryPath
name|cp
parameter_list|,
name|CharBlockArray
name|charBlockArray
parameter_list|,
name|int
name|offset
parameter_list|)
block|{
name|int
name|n
init|=
name|charBlockArray
operator|.
name|charAt
argument_list|(
name|offset
operator|++
argument_list|)
decl_stmt|;
if|if
condition|(
name|cp
operator|.
name|length
operator|!=
name|n
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|cp
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
literal|true
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cp
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|int
name|len
init|=
operator|(
name|short
operator|)
name|charBlockArray
operator|.
name|charAt
argument_list|(
name|offset
operator|++
argument_list|)
decl_stmt|;
if|if
condition|(
name|len
operator|!=
name|cp
operator|.
name|components
index|[
name|i
index|]
operator|.
name|length
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|cp
operator|.
name|components
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
name|charBlockArray
operator|.
name|subSequence
argument_list|(
name|offset
argument_list|,
name|offset
operator|+
name|len
argument_list|)
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|offset
operator|+=
name|len
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
block|}
end_class
end_unit
