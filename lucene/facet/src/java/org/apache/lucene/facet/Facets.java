begin_unit
begin_package
DECL|package|org.apache.lucene.facet
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Filter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|FilteredQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|MultiCollector
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Sort
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TopDocs
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TopFieldCollector
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TopFieldDocs
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TopScoreDocCollector
import|;
end_import
begin_comment
comment|/** Common base class for all facets implementations.  *  *  @lucene.experimental */
end_comment
begin_class
DECL|class|Facets
specifier|public
specifier|abstract
class|class
name|Facets
block|{
comment|/** Returns the topN child labels under the specified    *  path.  Returns null if the specified path doesn't    *  exist or if this dimension was never seen. */
DECL|method|getTopChildren
specifier|public
specifier|abstract
name|FacetResult
name|getTopChildren
parameter_list|(
name|int
name|topN
parameter_list|,
name|String
name|dim
parameter_list|,
name|String
modifier|...
name|path
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/** Return the count or value    *  for a specific path.  Returns -1 if    *  this path doesn't exist, else the count. */
DECL|method|getSpecificValue
specifier|public
specifier|abstract
name|Number
name|getSpecificValue
parameter_list|(
name|String
name|dim
parameter_list|,
name|String
modifier|...
name|path
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/** Returns topN labels for any dimension that had hits,    *  sorted by the number of hits that dimension matched;    *  this is used for "sparse" faceting, where many    *  different dimensions were indexed, for example    *  depending on the type of document. */
DECL|method|getAllDims
specifier|public
specifier|abstract
name|List
argument_list|<
name|FacetResult
argument_list|>
name|getAllDims
parameter_list|(
name|int
name|topN
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|// nocommit where to move?
comment|/** Utility method, to search for top hits by score    *  ({@link IndexSearcher#search(Query,int)}), but    *  also collect results into a {@link    *  FacetsCollector} for faceting. */
DECL|method|search
specifier|public
specifier|static
name|TopDocs
name|search
parameter_list|(
name|IndexSearcher
name|searcher
parameter_list|,
name|Query
name|q
parameter_list|,
name|int
name|topN
parameter_list|,
name|FacetsCollector
name|sfc
parameter_list|)
throws|throws
name|IOException
block|{
comment|// TODO: can we pass the "right" boolean for
comment|// in-order...?  we'd need access to the protected
comment|// IS.search methods taking Weight... could use
comment|// reflection...
name|TopScoreDocCollector
name|hitsCollector
init|=
name|TopScoreDocCollector
operator|.
name|create
argument_list|(
name|topN
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|searcher
operator|.
name|search
argument_list|(
name|q
argument_list|,
name|MultiCollector
operator|.
name|wrap
argument_list|(
name|hitsCollector
argument_list|,
name|sfc
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|hitsCollector
operator|.
name|topDocs
argument_list|()
return|;
block|}
comment|// nocommit where to move?
comment|/** Utility method, to search for top hits by score with a filter    *  ({@link IndexSearcher#search(Query,Filter,int)}), but    *  also collect results into a {@link    *  FacetsCollector} for faceting. */
DECL|method|search
specifier|public
specifier|static
name|TopDocs
name|search
parameter_list|(
name|IndexSearcher
name|searcher
parameter_list|,
name|Query
name|q
parameter_list|,
name|Filter
name|filter
parameter_list|,
name|int
name|topN
parameter_list|,
name|FacetsCollector
name|sfc
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|filter
operator|!=
literal|null
condition|)
block|{
name|q
operator|=
operator|new
name|FilteredQuery
argument_list|(
name|q
argument_list|,
name|filter
argument_list|)
expr_stmt|;
block|}
return|return
name|search
argument_list|(
name|searcher
argument_list|,
name|q
argument_list|,
name|topN
argument_list|,
name|sfc
argument_list|)
return|;
block|}
comment|// nocommit where to move?
comment|/** Utility method, to search for top hits by a custom    *  {@link Sort} with a filter    *  ({@link IndexSearcher#search(Query,Filter,int,Sort)}), but    *  also collect results into a {@link    *  FacetsCollector} for faceting. */
DECL|method|search
specifier|public
specifier|static
name|TopFieldDocs
name|search
parameter_list|(
name|IndexSearcher
name|searcher
parameter_list|,
name|Query
name|q
parameter_list|,
name|Filter
name|filter
parameter_list|,
name|int
name|topN
parameter_list|,
name|Sort
name|sort
parameter_list|,
name|FacetsCollector
name|sfc
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|search
argument_list|(
name|searcher
argument_list|,
name|q
argument_list|,
name|filter
argument_list|,
name|topN
argument_list|,
name|sort
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|sfc
argument_list|)
return|;
block|}
comment|// nocommit where to move?
comment|/** Utility method, to search for top hits by a custom    *  {@link Sort} with a filter    *  ({@link IndexSearcher#search(Query,Filter,int,Sort,boolean,boolean)}), but    *  also collect results into a {@link    *  FacetsCollector} for faceting. */
DECL|method|search
specifier|public
specifier|static
name|TopFieldDocs
name|search
parameter_list|(
name|IndexSearcher
name|searcher
parameter_list|,
name|Query
name|q
parameter_list|,
name|Filter
name|filter
parameter_list|,
name|int
name|topN
parameter_list|,
name|Sort
name|sort
parameter_list|,
name|boolean
name|doDocScores
parameter_list|,
name|boolean
name|doMaxScore
parameter_list|,
name|FacetsCollector
name|sfc
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|limit
init|=
name|searcher
operator|.
name|getIndexReader
argument_list|()
operator|.
name|maxDoc
argument_list|()
decl_stmt|;
if|if
condition|(
name|limit
operator|==
literal|0
condition|)
block|{
name|limit
operator|=
literal|1
expr_stmt|;
block|}
name|topN
operator|=
name|Math
operator|.
name|min
argument_list|(
name|topN
argument_list|,
name|limit
argument_list|)
expr_stmt|;
name|boolean
name|fillFields
init|=
literal|true
decl_stmt|;
name|TopFieldCollector
name|hitsCollector
init|=
name|TopFieldCollector
operator|.
name|create
argument_list|(
name|sort
argument_list|,
name|topN
argument_list|,
literal|null
argument_list|,
name|fillFields
argument_list|,
name|doDocScores
argument_list|,
name|doMaxScore
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|filter
operator|!=
literal|null
condition|)
block|{
name|q
operator|=
operator|new
name|FilteredQuery
argument_list|(
name|q
argument_list|,
name|filter
argument_list|)
expr_stmt|;
block|}
name|searcher
operator|.
name|search
argument_list|(
name|q
argument_list|,
name|MultiCollector
operator|.
name|wrap
argument_list|(
name|hitsCollector
argument_list|,
name|sfc
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|(
name|TopFieldDocs
operator|)
name|hitsCollector
operator|.
name|topDocs
argument_list|()
return|;
block|}
comment|// nocommit need searchAfter variants too
block|}
end_class
end_unit
