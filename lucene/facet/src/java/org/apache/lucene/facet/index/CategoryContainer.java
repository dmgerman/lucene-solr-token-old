begin_unit
begin_package
DECL|package|org.apache.lucene.facet.index
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|index
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Attribute
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|index
operator|.
name|attributes
operator|.
name|CategoryAttribute
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|index
operator|.
name|attributes
operator|.
name|CategoryAttributeImpl
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|index
operator|.
name|attributes
operator|.
name|CategoryProperty
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|taxonomy
operator|.
name|CategoryPath
import|;
end_import
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_comment
comment|/**  * A container to add categories which are to be introduced to  * {@link CategoryDocumentBuilder#setCategories(Iterable)}. Categories can be  * added with Properties.   *   * @lucene.experimental  */
end_comment
begin_class
DECL|class|CategoryContainer
specifier|public
class|class
name|CategoryContainer
implements|implements
name|Iterable
argument_list|<
name|CategoryAttribute
argument_list|>
implements|,
name|Serializable
block|{
DECL|field|map
specifier|protected
specifier|transient
name|Map
argument_list|<
name|CategoryPath
argument_list|,
name|CategoryAttribute
argument_list|>
name|map
decl_stmt|;
comment|/**    * Constructor.    */
DECL|method|CategoryContainer
specifier|public
name|CategoryContainer
parameter_list|()
block|{
name|map
operator|=
operator|new
name|HashMap
argument_list|<
name|CategoryPath
argument_list|,
name|CategoryAttribute
argument_list|>
argument_list|()
expr_stmt|;
block|}
comment|/**    * Add a category.    *     * @param categoryPath    *            The path of the category.    * @return The {@link CategoryAttribute} of the category.    */
DECL|method|addCategory
specifier|public
name|CategoryAttribute
name|addCategory
parameter_list|(
name|CategoryPath
name|categoryPath
parameter_list|)
block|{
return|return
name|mapCategoryAttribute
argument_list|(
name|categoryPath
argument_list|)
return|;
block|}
comment|/**    * Add a category with a property.    *     * @param categoryPath    *            The path of the category.    * @param property    *            The property to associate to the category.    * @return The {@link CategoryAttribute} of the category.    */
DECL|method|addCategory
specifier|public
name|CategoryAttribute
name|addCategory
parameter_list|(
name|CategoryPath
name|categoryPath
parameter_list|,
name|CategoryProperty
name|property
parameter_list|)
block|{
comment|/*      * This method is a special case of addCategory with multiple      * properties, but it is kept here for two reasons: 1) Using the array      * version has some performance cost, and 2) it is expected that most      * calls will be for this version (single property).      */
name|CategoryAttribute
name|ca
init|=
name|mapCategoryAttribute
argument_list|(
name|categoryPath
argument_list|)
decl_stmt|;
name|ca
operator|.
name|addProperty
argument_list|(
name|property
argument_list|)
expr_stmt|;
return|return
name|ca
return|;
block|}
comment|/**    * Add a category with multiple properties.    *     * @param categoryPath    *            The path of the category.    * @param properties    *            The properties to associate to the category.    * @return The {@link CategoryAttribute} of the category.    */
DECL|method|addCategory
specifier|public
name|CategoryAttribute
name|addCategory
parameter_list|(
name|CategoryPath
name|categoryPath
parameter_list|,
name|CategoryProperty
modifier|...
name|properties
parameter_list|)
block|{
name|CategoryAttribute
name|ca
init|=
name|mapCategoryAttribute
argument_list|(
name|categoryPath
argument_list|)
decl_stmt|;
for|for
control|(
name|CategoryProperty
name|attribute
range|:
name|properties
control|)
block|{
name|ca
operator|.
name|addProperty
argument_list|(
name|attribute
argument_list|)
expr_stmt|;
block|}
return|return
name|ca
return|;
block|}
comment|/**    * Add an entire {@link CategoryAttribute}.    *     * @param categoryAttribute    *            The {@link CategoryAttribute} to add.    * @return The {@link CategoryAttribute} of the category (could be different    *         from the one provided).    */
DECL|method|addCategory
specifier|public
name|CategoryAttribute
name|addCategory
parameter_list|(
name|CategoryAttribute
name|categoryAttribute
parameter_list|)
block|{
name|CategoryAttribute
name|ca
init|=
name|mapCategoryAttribute
argument_list|(
name|categoryAttribute
operator|.
name|getCategoryPath
argument_list|()
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|CategoryProperty
argument_list|>
argument_list|>
name|propertyClasses
init|=
name|categoryAttribute
operator|.
name|getPropertyClasses
argument_list|()
decl_stmt|;
if|if
condition|(
name|propertyClasses
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Class
argument_list|<
name|?
extends|extends
name|CategoryProperty
argument_list|>
name|propertyClass
range|:
name|propertyClasses
control|)
block|{
name|ca
operator|.
name|addProperty
argument_list|(
name|categoryAttribute
operator|.
name|getProperty
argument_list|(
name|propertyClass
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ca
return|;
block|}
comment|/**    * Get the {@link CategoryAttribute} object for a specific    * {@link CategoryPath}, from the map.    */
DECL|method|mapCategoryAttribute
specifier|private
specifier|final
name|CategoryAttribute
name|mapCategoryAttribute
parameter_list|(
name|CategoryPath
name|categoryPath
parameter_list|)
block|{
name|CategoryAttribute
name|ca
init|=
name|map
operator|.
name|get
argument_list|(
name|categoryPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|ca
operator|==
literal|null
condition|)
block|{
name|ca
operator|=
operator|new
name|CategoryAttributeImpl
argument_list|(
name|categoryPath
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|categoryPath
argument_list|,
name|ca
argument_list|)
expr_stmt|;
block|}
return|return
name|ca
return|;
block|}
comment|/**    * Get the {@link CategoryAttribute} this container has for a certain    * category, or {@code null} if the category is not in the container.    *     * @param categoryPath    *            The category path of the requested category.    */
DECL|method|getCategoryAttribute
specifier|public
name|CategoryAttribute
name|getCategoryAttribute
parameter_list|(
name|CategoryPath
name|categoryPath
parameter_list|)
block|{
return|return
name|map
operator|.
name|get
argument_list|(
name|categoryPath
argument_list|)
return|;
block|}
DECL|method|iterator
specifier|public
name|Iterator
argument_list|<
name|CategoryAttribute
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|map
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
return|;
block|}
comment|/**    * Remove all categories.    */
DECL|method|clear
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|map
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
comment|/** Add the categories from another {@link CategoryContainer} to this one. */
DECL|method|merge
specifier|public
name|void
name|merge
parameter_list|(
name|CategoryContainer
name|other
parameter_list|)
block|{
for|for
control|(
name|CategoryAttribute
name|categoryAttribute
range|:
name|other
operator|.
name|map
operator|.
name|values
argument_list|()
control|)
block|{
name|addCategory
argument_list|(
name|categoryAttribute
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Get the number of categories in the container.    *     * @return The number of categories in the container.    */
DECL|method|size
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|map
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"CategoryContainer"
argument_list|)
decl_stmt|;
for|for
control|(
name|CategoryAttribute
name|ca
range|:
name|map
operator|.
name|values
argument_list|()
control|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|'\t'
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|ca
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Serialize object content to given {@link ObjectOutputStream}    */
DECL|method|writeObject
specifier|private
name|void
name|writeObject
parameter_list|(
name|ObjectOutputStream
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|defaultWriteObject
argument_list|()
expr_stmt|;
comment|// write the number of categories
name|out
operator|.
name|writeInt
argument_list|(
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// write the category attributes
for|for
control|(
name|CategoryAttribute
name|ca
range|:
name|this
control|)
block|{
name|serializeCategoryAttribute
argument_list|(
name|out
argument_list|,
name|ca
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Serialize each of the {@link CategoryAttribute}s to the given    * {@link ObjectOutputStream}.<br>    * NOTE: {@link CategoryProperty}s are {@link Serializable}, but do not    * assume that Lucene's {@link Attribute}s are as well    * @throws IOException If there is a low-level I/O error.    */
DECL|method|serializeCategoryAttribute
specifier|protected
name|void
name|serializeCategoryAttribute
parameter_list|(
name|ObjectOutputStream
name|out
parameter_list|,
name|CategoryAttribute
name|ca
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeObject
argument_list|(
name|ca
operator|.
name|getCategoryPath
argument_list|()
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|CategoryProperty
argument_list|>
argument_list|>
name|propertyClasses
init|=
name|ca
operator|.
name|getPropertyClasses
argument_list|()
decl_stmt|;
if|if
condition|(
name|propertyClasses
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|writeInt
argument_list|(
name|propertyClasses
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Class
argument_list|<
name|?
extends|extends
name|CategoryProperty
argument_list|>
name|clazz
range|:
name|propertyClasses
control|)
block|{
name|out
operator|.
name|writeObject
argument_list|(
name|ca
operator|.
name|getProperty
argument_list|(
name|clazz
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|out
operator|.
name|writeInt
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Deserialize object from given {@link ObjectInputStream}    */
DECL|method|readObject
specifier|private
name|void
name|readObject
parameter_list|(
name|ObjectInputStream
name|in
parameter_list|)
throws|throws
name|IOException
throws|,
name|ClassNotFoundException
block|{
name|in
operator|.
name|defaultReadObject
argument_list|()
expr_stmt|;
name|map
operator|=
operator|new
name|HashMap
argument_list|<
name|CategoryPath
argument_list|,
name|CategoryAttribute
argument_list|>
argument_list|()
expr_stmt|;
name|int
name|size
init|=
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|deserializeCategoryAttribute
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * De-Serialize each of the {@link CategoryAttribute}s from the given    * {@link ObjectInputStream}.    */
DECL|method|deserializeCategoryAttribute
specifier|protected
name|void
name|deserializeCategoryAttribute
parameter_list|(
name|ObjectInputStream
name|in
parameter_list|)
throws|throws
name|IOException
throws|,
name|ClassNotFoundException
block|{
name|CategoryPath
name|cp
init|=
operator|(
name|CategoryPath
operator|)
name|in
operator|.
name|readObject
argument_list|()
decl_stmt|;
name|int
name|nProperties
init|=
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|nProperties
operator|==
literal|0
condition|)
block|{
name|addCategory
argument_list|(
name|cp
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|nProperties
condition|;
name|j
operator|++
control|)
block|{
name|CategoryProperty
name|property
init|=
operator|(
name|CategoryProperty
operator|)
name|in
operator|.
name|readObject
argument_list|()
decl_stmt|;
name|addCategory
argument_list|(
name|cp
argument_list|,
name|property
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|o
operator|instanceof
name|CategoryContainer
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|CategoryContainer
name|that
init|=
operator|(
name|CategoryContainer
operator|)
name|o
decl_stmt|;
return|return
name|this
operator|.
name|map
operator|.
name|equals
argument_list|(
name|that
operator|.
name|map
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|map
operator|.
name|hashCode
argument_list|()
return|;
block|}
block|}
end_class
end_unit
