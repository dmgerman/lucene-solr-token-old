begin_unit
begin_package
DECL|package|org.apache.lucene.facet.sampling
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|sampling
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|params
operator|.
name|FacetSearchParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|search
operator|.
name|Aggregator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|search
operator|.
name|FacetArrays
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|search
operator|.
name|FacetRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|search
operator|.
name|FacetResult
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|search
operator|.
name|FacetResultNode
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|search
operator|.
name|ScoredDocIDs
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|taxonomy
operator|.
name|TaxonomyReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_comment
comment|/**  * Sampling definition for facets accumulation  *<p>  * The Sampler uses TAKMI style counting to provide a 'best guess' top-K result  * set of the facets accumulated.  *<p>  * Note: Sampling accumulation (Accumulation over a sampled-set of the results),  * does not guarantee accurate values for  * {@link FacetResult#getNumValidDescendants()}.  *   * @lucene.experimental  */
end_comment
begin_class
DECL|class|Sampler
specifier|public
specifier|abstract
class|class
name|Sampler
block|{
DECL|field|samplingParams
specifier|protected
specifier|final
name|SamplingParams
name|samplingParams
decl_stmt|;
comment|/**    * Construct with {@link SamplingParams}    */
DECL|method|Sampler
specifier|public
name|Sampler
parameter_list|()
block|{
name|this
argument_list|(
operator|new
name|SamplingParams
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Construct with certain {@link SamplingParams}    *     * @param params sampling params in effect    * @throws IllegalArgumentException if the provided SamplingParams are not valid     */
DECL|method|Sampler
specifier|public
name|Sampler
parameter_list|(
name|SamplingParams
name|params
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
if|if
condition|(
operator|!
name|params
operator|.
name|validate
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The provided SamplingParams are not valid!!"
argument_list|)
throw|;
block|}
name|this
operator|.
name|samplingParams
operator|=
name|params
expr_stmt|;
block|}
comment|/**    * Check if this sampler would complement for the input docIds    */
DECL|method|shouldSample
specifier|public
name|boolean
name|shouldSample
parameter_list|(
name|ScoredDocIDs
name|docIds
parameter_list|)
block|{
return|return
name|docIds
operator|.
name|size
argument_list|()
operator|>
name|samplingParams
operator|.
name|getSamplingThreshold
argument_list|()
return|;
block|}
comment|/**    * Compute a sample set out of the input set, based on the {@link SamplingParams#getSampleRatio()}    * in effect. Sub classes can override to alter how the sample set is    * computed.    *<p>     * If the input set is of size smaller than {@link SamplingParams#getMinSampleSize()},     * the input set is returned (no sampling takes place).    *<p>    * Other than that, the returned set size will not be larger than {@link SamplingParams#getMaxSampleSize()}     * nor smaller than {@link SamplingParams#getMinSampleSize()}.      * @param docids    *          full set of matching documents out of which a sample is needed.    */
DECL|method|getSampleSet
specifier|public
name|SampleResult
name|getSampleSet
parameter_list|(
name|ScoredDocIDs
name|docids
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|shouldSample
argument_list|(
name|docids
argument_list|)
condition|)
block|{
return|return
operator|new
name|SampleResult
argument_list|(
name|docids
argument_list|,
literal|1d
argument_list|)
return|;
block|}
name|int
name|actualSize
init|=
name|docids
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|sampleSetSize
init|=
call|(
name|int
call|)
argument_list|(
name|actualSize
operator|*
name|samplingParams
operator|.
name|getSampleRatio
argument_list|()
argument_list|)
decl_stmt|;
name|sampleSetSize
operator|=
name|Math
operator|.
name|max
argument_list|(
name|sampleSetSize
argument_list|,
name|samplingParams
operator|.
name|getMinSampleSize
argument_list|()
argument_list|)
expr_stmt|;
name|sampleSetSize
operator|=
name|Math
operator|.
name|min
argument_list|(
name|sampleSetSize
argument_list|,
name|samplingParams
operator|.
name|getMaxSampleSize
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|createSample
argument_list|(
name|docids
argument_list|,
name|actualSize
argument_list|,
name|sampleSetSize
argument_list|)
return|;
block|}
comment|/**    * Create and return a sample of the input set    * @param docids input set out of which a sample is to be created     * @param actualSize original size of set, prior to sampling    * @param sampleSetSize required size of sample set    * @return sample of the input set in the required size    */
DECL|method|createSample
specifier|protected
specifier|abstract
name|SampleResult
name|createSample
parameter_list|(
name|ScoredDocIDs
name|docids
parameter_list|,
name|int
name|actualSize
parameter_list|,
name|int
name|sampleSetSize
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Get a fixer of sample facet accumulation results. Default implementation    * returns a<code>TakmiSampleFixer</code> which is adequate only for    * counting. For any other accumulator, provide a different fixer.    */
DECL|method|getSampleFixer
specifier|public
name|SampleFixer
name|getSampleFixer
parameter_list|(
name|IndexReader
name|indexReader
parameter_list|,
name|TaxonomyReader
name|taxonomyReader
parameter_list|,
name|FacetSearchParams
name|searchParams
parameter_list|)
block|{
return|return
operator|new
name|TakmiSampleFixer
argument_list|(
name|indexReader
argument_list|,
name|taxonomyReader
argument_list|,
name|searchParams
argument_list|)
return|;
block|}
comment|/**    * Result of sample computation    */
DECL|class|SampleResult
specifier|public
specifier|final
specifier|static
class|class
name|SampleResult
block|{
DECL|field|docids
specifier|public
specifier|final
name|ScoredDocIDs
name|docids
decl_stmt|;
DECL|field|actualSampleRatio
specifier|public
specifier|final
name|double
name|actualSampleRatio
decl_stmt|;
DECL|method|SampleResult
specifier|protected
name|SampleResult
parameter_list|(
name|ScoredDocIDs
name|docids
parameter_list|,
name|double
name|actualSampleRatio
parameter_list|)
block|{
name|this
operator|.
name|docids
operator|=
name|docids
expr_stmt|;
name|this
operator|.
name|actualSampleRatio
operator|=
name|actualSampleRatio
expr_stmt|;
block|}
block|}
comment|/**    * Return the sampling params in effect    */
DECL|method|getSamplingParams
specifier|public
specifier|final
name|SamplingParams
name|getSamplingParams
parameter_list|()
block|{
return|return
name|samplingParams
return|;
block|}
comment|/**    * Trim the input facet result.<br>    * Note: It is only valid to call this method with result obtained for a    * facet request created through {@link #overSampledSearchParams(FacetSearchParams)}.    *     * @throws IllegalArgumentException    *             if called with results not obtained for requests created    *             through {@link #overSampledSearchParams(FacetSearchParams)}    */
DECL|method|trimResult
specifier|public
name|FacetResult
name|trimResult
parameter_list|(
name|FacetResult
name|facetResult
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
name|double
name|overSampleFactor
init|=
name|getSamplingParams
argument_list|()
operator|.
name|getOversampleFactor
argument_list|()
decl_stmt|;
if|if
condition|(
name|overSampleFactor
operator|<=
literal|1
condition|)
block|{
comment|// no factoring done?
return|return
name|facetResult
return|;
block|}
name|OverSampledFacetRequest
name|sampledFreq
init|=
literal|null
decl_stmt|;
try|try
block|{
name|sampledFreq
operator|=
operator|(
name|OverSampledFacetRequest
operator|)
name|facetResult
operator|.
name|getFacetRequest
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassCastException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"It is only valid to call this method with result obtained for a "
operator|+
literal|"facet request created through sampler.overSamlpingSearchParams()"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|FacetRequest
name|origFrq
init|=
name|sampledFreq
operator|.
name|orig
decl_stmt|;
name|FacetResultNode
name|trimmedRootNode
init|=
name|facetResult
operator|.
name|getFacetResultNode
argument_list|()
decl_stmt|;
name|trimSubResults
argument_list|(
name|trimmedRootNode
argument_list|,
name|origFrq
operator|.
name|numResults
argument_list|)
expr_stmt|;
return|return
operator|new
name|FacetResult
argument_list|(
name|origFrq
argument_list|,
name|trimmedRootNode
argument_list|,
name|facetResult
operator|.
name|getNumValidDescendants
argument_list|()
argument_list|)
return|;
block|}
comment|/** Trim sub results to a given size. */
DECL|method|trimSubResults
specifier|private
name|void
name|trimSubResults
parameter_list|(
name|FacetResultNode
name|node
parameter_list|,
name|int
name|size
parameter_list|)
block|{
if|if
condition|(
name|node
operator|.
name|subResults
operator|==
name|FacetResultNode
operator|.
name|EMPTY_SUB_RESULTS
operator|||
name|node
operator|.
name|subResults
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return;
block|}
name|ArrayList
argument_list|<
name|FacetResultNode
argument_list|>
name|trimmed
init|=
operator|new
name|ArrayList
argument_list|<
name|FacetResultNode
argument_list|>
argument_list|(
name|size
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|node
operator|.
name|subResults
operator|.
name|size
argument_list|()
operator|&&
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|FacetResultNode
name|trimmedNode
init|=
name|node
operator|.
name|subResults
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|trimSubResults
argument_list|(
name|trimmedNode
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|trimmed
operator|.
name|add
argument_list|(
name|trimmedNode
argument_list|)
expr_stmt|;
block|}
name|node
operator|.
name|subResults
operator|=
name|trimmed
expr_stmt|;
block|}
comment|/**    * Over-sampled search params, wrapping each request with an over-sampled one.    */
DECL|method|overSampledSearchParams
specifier|public
name|FacetSearchParams
name|overSampledSearchParams
parameter_list|(
name|FacetSearchParams
name|original
parameter_list|)
block|{
name|FacetSearchParams
name|res
init|=
name|original
decl_stmt|;
comment|// So now we can sample -> altering the searchParams to accommodate for the statistical error for the sampling
name|double
name|overSampleFactor
init|=
name|getSamplingParams
argument_list|()
operator|.
name|getOversampleFactor
argument_list|()
decl_stmt|;
if|if
condition|(
name|overSampleFactor
operator|>
literal|1
condition|)
block|{
comment|// any factoring to do?
name|List
argument_list|<
name|FacetRequest
argument_list|>
name|facetRequests
init|=
operator|new
name|ArrayList
argument_list|<
name|FacetRequest
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|FacetRequest
name|frq
range|:
name|original
operator|.
name|facetRequests
control|)
block|{
name|int
name|overSampledNumResults
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|ceil
argument_list|(
name|frq
operator|.
name|numResults
operator|*
name|overSampleFactor
argument_list|)
decl_stmt|;
name|facetRequests
operator|.
name|add
argument_list|(
operator|new
name|OverSampledFacetRequest
argument_list|(
name|frq
argument_list|,
name|overSampledNumResults
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|res
operator|=
operator|new
name|FacetSearchParams
argument_list|(
name|original
operator|.
name|indexingParams
argument_list|,
name|facetRequests
argument_list|)
expr_stmt|;
block|}
return|return
name|res
return|;
block|}
comment|/**    * Wrapping a facet request for over sampling.    * Implementation detail: even if the original request is a count request, no     * statistics will be computed for it as the wrapping is not a count request.    * This is ok, as the sampling accumulator is later computing the statistics    * over the original requests.    */
DECL|class|OverSampledFacetRequest
specifier|private
specifier|static
class|class
name|OverSampledFacetRequest
extends|extends
name|FacetRequest
block|{
DECL|field|orig
specifier|final
name|FacetRequest
name|orig
decl_stmt|;
DECL|method|OverSampledFacetRequest
specifier|public
name|OverSampledFacetRequest
parameter_list|(
name|FacetRequest
name|orig
parameter_list|,
name|int
name|num
parameter_list|)
block|{
name|super
argument_list|(
name|orig
operator|.
name|categoryPath
argument_list|,
name|num
argument_list|)
expr_stmt|;
name|this
operator|.
name|orig
operator|=
name|orig
expr_stmt|;
name|setDepth
argument_list|(
name|orig
operator|.
name|getDepth
argument_list|()
argument_list|)
expr_stmt|;
name|setNumLabel
argument_list|(
name|orig
operator|.
name|getNumLabel
argument_list|()
argument_list|)
expr_stmt|;
name|setResultMode
argument_list|(
name|orig
operator|.
name|getResultMode
argument_list|()
argument_list|)
expr_stmt|;
name|setSortBy
argument_list|(
name|orig
operator|.
name|getSortBy
argument_list|()
argument_list|)
expr_stmt|;
name|setSortOrder
argument_list|(
name|orig
operator|.
name|getSortOrder
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createAggregator
specifier|public
name|Aggregator
name|createAggregator
parameter_list|(
name|boolean
name|useComplements
parameter_list|,
name|FacetArrays
name|arrays
parameter_list|,
name|TaxonomyReader
name|taxonomy
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|orig
operator|.
name|createAggregator
argument_list|(
name|useComplements
argument_list|,
name|arrays
argument_list|,
name|taxonomy
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getFacetArraysSource
specifier|public
name|FacetArraysSource
name|getFacetArraysSource
parameter_list|()
block|{
return|return
name|orig
operator|.
name|getFacetArraysSource
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getValueOf
specifier|public
name|double
name|getValueOf
parameter_list|(
name|FacetArrays
name|arrays
parameter_list|,
name|int
name|idx
parameter_list|)
block|{
return|return
name|orig
operator|.
name|getValueOf
argument_list|(
name|arrays
argument_list|,
name|idx
argument_list|)
return|;
block|}
block|}
block|}
end_class
end_unit
