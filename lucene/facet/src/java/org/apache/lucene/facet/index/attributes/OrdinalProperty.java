begin_unit
begin_package
DECL|package|org.apache.lucene.facet.index.attributes
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|index
operator|.
name|attributes
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_comment
comment|/**  * A {@link CategoryProperty} holding the ordinal from the taxonomy of the  * current category in {@link CategoryAttribute}.  *<p>  * Ordinal properties are added internally during processing of category  * streams, and it is recommended not to use it externally.  *   * @lucene.experimental  */
end_comment
begin_class
DECL|class|OrdinalProperty
specifier|public
class|class
name|OrdinalProperty
implements|implements
name|CategoryProperty
block|{
DECL|field|ordinal
specifier|protected
name|int
name|ordinal
init|=
operator|-
literal|1
decl_stmt|;
DECL|method|getOrdinal
specifier|public
name|int
name|getOrdinal
parameter_list|()
block|{
return|return
name|ordinal
return|;
block|}
DECL|method|hasBeenSet
specifier|public
name|boolean
name|hasBeenSet
parameter_list|()
block|{
return|return
name|this
operator|.
name|ordinal
operator|>=
literal|0
return|;
block|}
DECL|method|setOrdinal
specifier|public
name|void
name|setOrdinal
parameter_list|(
name|int
name|value
parameter_list|)
block|{
name|this
operator|.
name|ordinal
operator|=
name|value
expr_stmt|;
block|}
DECL|method|clear
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|ordinal
operator|=
operator|-
literal|1
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|==
name|this
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
operator|!
operator|(
name|other
operator|instanceof
name|OrdinalProperty
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|OrdinalProperty
name|o
init|=
operator|(
name|OrdinalProperty
operator|)
name|other
decl_stmt|;
return|return
name|o
operator|.
name|ordinal
operator|==
name|this
operator|.
name|ordinal
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|this
operator|.
name|ordinal
return|;
block|}
annotation|@
name|Override
DECL|method|merge
specifier|public
name|void
name|merge
parameter_list|(
name|CategoryProperty
name|other
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Merging ordinal attributes is prohibited"
argument_list|)
throw|;
block|}
block|}
end_class
end_unit
