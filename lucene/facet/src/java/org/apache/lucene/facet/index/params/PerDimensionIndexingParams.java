begin_unit
begin_package
DECL|package|org.apache.lucene.facet.index.params
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|index
operator|.
name|params
package|;
end_package
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|taxonomy
operator|.
name|CategoryPath
import|;
end_import
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_comment
comment|/**  * A FacetIndexingParams that utilizes different category lists, defined by the  * dimension specified CategoryPaths (see  * {@link PerDimensionIndexingParams#addCategoryListParams(CategoryPath, CategoryListParams)}  *<p>  * A 'dimension' is defined as the first or "zero-th" component in a  * CategoryPath. For example, if a CategoryPath is defined as  * "/Author/American/Mark Twain", then the dimension is "Author".  *<p>  * This class also uses the 'default' CategoryListParams (as specified by  * {@link CategoryListParams#CategoryListParams()} when  * {@link #getCategoryListParams(CategoryPath)} is called for a CategoryPath  * whose dimension component has not been specifically defined.  *   * @lucene.experimental  */
end_comment
begin_class
DECL|class|PerDimensionIndexingParams
specifier|public
class|class
name|PerDimensionIndexingParams
extends|extends
name|DefaultFacetIndexingParams
block|{
comment|// "Root" or "first component" of a Category Path maps to a
comment|// CategoryListParams
DECL|field|clParamsMap
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|CategoryListParams
argument_list|>
name|clParamsMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|CategoryListParams
argument_list|>
argument_list|()
decl_stmt|;
comment|/**    * Construct with the default {@link CategoryListParams} as the default    * CategoryListParams for unspecified CategoryPaths.    */
DECL|method|PerDimensionIndexingParams
specifier|public
name|PerDimensionIndexingParams
parameter_list|()
block|{
name|this
argument_list|(
operator|new
name|CategoryListParams
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Construct with the included categoryListParams as the default    * CategoryListParams for unspecified CategoryPaths.    *     * @param categoryListParams    *            the default categoryListParams to use    */
DECL|method|PerDimensionIndexingParams
specifier|public
name|PerDimensionIndexingParams
parameter_list|(
name|CategoryListParams
name|categoryListParams
parameter_list|)
block|{
name|super
argument_list|(
name|categoryListParams
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get all the categoryListParams, including the default.    */
annotation|@
name|Override
DECL|method|getAllCategoryListParams
specifier|public
name|Iterable
argument_list|<
name|CategoryListParams
argument_list|>
name|getAllCategoryListParams
parameter_list|()
block|{
name|ArrayList
argument_list|<
name|CategoryListParams
argument_list|>
name|vals
init|=
operator|new
name|ArrayList
argument_list|<
name|CategoryListParams
argument_list|>
argument_list|(
name|clParamsMap
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|CategoryListParams
name|clp
range|:
name|super
operator|.
name|getAllCategoryListParams
argument_list|()
control|)
block|{
name|vals
operator|.
name|add
argument_list|(
name|clp
argument_list|)
expr_stmt|;
block|}
return|return
name|vals
return|;
block|}
comment|/**    * Get the CategoryListParams based on the dimension or "zero-th category"    * of the specified CategoryPath.    */
annotation|@
name|Override
DECL|method|getCategoryListParams
specifier|public
name|CategoryListParams
name|getCategoryListParams
parameter_list|(
name|CategoryPath
name|category
parameter_list|)
block|{
if|if
condition|(
name|category
operator|!=
literal|null
condition|)
block|{
name|CategoryListParams
name|clParams
init|=
name|clParamsMap
operator|.
name|get
argument_list|(
name|category
operator|.
name|getComponent
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|clParams
operator|!=
literal|null
condition|)
block|{
return|return
name|clParams
return|;
block|}
block|}
return|return
name|super
operator|.
name|getCategoryListParams
argument_list|(
name|category
argument_list|)
return|;
block|}
comment|/**    * Add a CategoryListParams for a given CategoryPath's dimension or    * "zero-th" category.    *     * @param category    * @param clParams    */
DECL|method|addCategoryListParams
specifier|public
name|void
name|addCategoryListParams
parameter_list|(
name|CategoryPath
name|category
parameter_list|,
name|CategoryListParams
name|clParams
parameter_list|)
block|{
name|clParamsMap
operator|.
name|put
argument_list|(
name|category
operator|.
name|getComponent
argument_list|(
literal|0
argument_list|)
argument_list|,
name|clParams
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
