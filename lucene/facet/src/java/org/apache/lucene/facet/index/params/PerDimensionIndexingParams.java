begin_unit
begin_package
DECL|package|org.apache.lucene.facet.index.params
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|index
operator|.
name|params
package|;
end_package
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|taxonomy
operator|.
name|CategoryPath
import|;
end_import
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_comment
comment|/**  * A {@link FacetIndexingParams} that utilizes different category lists, defined  * by the dimension specified by a {@link CategoryPath category} (see  * {@link #PerDimensionIndexingParams(Map, CategoryListParams)}.  *<p>  * A 'dimension' is defined as the first or "zero-th" component in a  * {@link CategoryPath}. For example, if a category is defined as  * "Author/American/Mark Twain", then the dimension would be "Author".  *   * @lucene.experimental  */
end_comment
begin_class
DECL|class|PerDimensionIndexingParams
specifier|public
class|class
name|PerDimensionIndexingParams
extends|extends
name|FacetIndexingParams
block|{
DECL|field|clParamsMap
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|CategoryListParams
argument_list|>
name|clParamsMap
decl_stmt|;
comment|/**    * Initializes a new instance with the given dimension-to-params mapping. The    * dimension is considered as what's returned by    * {@link CategoryPath#getComponent(int) cp.getComponent(0)}.    *     *<p>    *<b>NOTE:</b> for any dimension whose {@link CategoryListParams} is not    * defined in the mapping, a default {@link CategoryListParams} will be used.    *     * @see #PerDimensionIndexingParams(Map, CategoryListParams)    */
DECL|method|PerDimensionIndexingParams
specifier|public
name|PerDimensionIndexingParams
parameter_list|(
name|Map
argument_list|<
name|CategoryPath
argument_list|,
name|CategoryListParams
argument_list|>
name|paramsMap
parameter_list|)
block|{
name|this
argument_list|(
name|paramsMap
argument_list|,
name|DEFAULT_CATEGORY_LIST_PARAMS
argument_list|)
expr_stmt|;
block|}
comment|/**    * Same as {@link #PerDimensionIndexingParams(Map)}, only the given    * {@link CategoryListParams} will be used for any dimension that is not    * specified in the given mapping.    */
DECL|method|PerDimensionIndexingParams
specifier|public
name|PerDimensionIndexingParams
parameter_list|(
name|Map
argument_list|<
name|CategoryPath
argument_list|,
name|CategoryListParams
argument_list|>
name|paramsMap
parameter_list|,
name|CategoryListParams
name|categoryListParams
parameter_list|)
block|{
name|super
argument_list|(
name|categoryListParams
argument_list|)
expr_stmt|;
name|clParamsMap
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|CategoryListParams
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|CategoryPath
argument_list|,
name|CategoryListParams
argument_list|>
name|e
range|:
name|paramsMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|clParamsMap
operator|.
name|put
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|getComponent
argument_list|(
literal|0
argument_list|)
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getAllCategoryListParams
specifier|public
name|List
argument_list|<
name|CategoryListParams
argument_list|>
name|getAllCategoryListParams
parameter_list|()
block|{
name|ArrayList
argument_list|<
name|CategoryListParams
argument_list|>
name|vals
init|=
operator|new
name|ArrayList
argument_list|<
name|CategoryListParams
argument_list|>
argument_list|(
name|clParamsMap
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
name|vals
operator|.
name|add
argument_list|(
name|clParams
argument_list|)
expr_stmt|;
comment|// add the default too
return|return
name|vals
return|;
block|}
comment|/**    * Returns the {@link CategoryListParams} for the corresponding dimension    * which is returned by {@code category.getComponent(0)}.    */
annotation|@
name|Override
DECL|method|getCategoryListParams
specifier|public
name|CategoryListParams
name|getCategoryListParams
parameter_list|(
name|CategoryPath
name|category
parameter_list|)
block|{
if|if
condition|(
name|category
operator|!=
literal|null
condition|)
block|{
name|CategoryListParams
name|clParams
init|=
name|clParamsMap
operator|.
name|get
argument_list|(
name|category
operator|.
name|getComponent
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|clParams
operator|!=
literal|null
condition|)
block|{
return|return
name|clParams
return|;
block|}
block|}
return|return
name|clParams
return|;
block|}
block|}
end_class
end_unit
