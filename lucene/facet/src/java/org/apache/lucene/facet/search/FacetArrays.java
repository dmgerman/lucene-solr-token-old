begin_unit
begin_package
DECL|package|org.apache.lucene.facet.search
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|search
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_comment
comment|/**  * Provider of arrays used for facets aggregation. Returns either an  * {@code int[]} or {@code float[]} of the specified array length. When the  * arrays are no longer needed, you should call {@link #free()}, so that e.g.  * they will be reclaimed.  *   *<p>  *<b>NOTE:</b> if you need to reuse the allocated arrays between search  * requests, use {@link ReusingFacetArrays}.  *   *<p>  *<b>NOTE:</b> this class is not thread safe. You typically allocate it per  * search.  *   * @lucene.experimental  */
end_comment
begin_class
DECL|class|FacetArrays
specifier|public
class|class
name|FacetArrays
block|{
DECL|field|ints
specifier|private
name|int
index|[]
name|ints
decl_stmt|;
DECL|field|floats
specifier|private
name|float
index|[]
name|floats
decl_stmt|;
DECL|field|arrayLength
specifier|public
specifier|final
name|int
name|arrayLength
decl_stmt|;
comment|/** Arrays will be allocated at the specified length. */
DECL|method|FacetArrays
specifier|public
name|FacetArrays
parameter_list|(
name|int
name|arrayLength
parameter_list|)
block|{
name|this
operator|.
name|arrayLength
operator|=
name|arrayLength
expr_stmt|;
block|}
DECL|method|newFloatArray
specifier|protected
name|float
index|[]
name|newFloatArray
parameter_list|()
block|{
return|return
operator|new
name|float
index|[
name|arrayLength
index|]
return|;
block|}
DECL|method|newIntArray
specifier|protected
name|int
index|[]
name|newIntArray
parameter_list|()
block|{
return|return
operator|new
name|int
index|[
name|arrayLength
index|]
return|;
block|}
DECL|method|doFree
specifier|protected
name|void
name|doFree
parameter_list|(
name|float
index|[]
name|floats
parameter_list|,
name|int
index|[]
name|ints
parameter_list|)
block|{   }
comment|/**    * Notifies that the arrays obtained from {@link #getIntArray()}    * or {@link #getFloatArray()} are no longer needed and can be freed.    */
DECL|method|free
specifier|public
specifier|final
name|void
name|free
parameter_list|()
block|{
name|doFree
argument_list|(
name|floats
argument_list|,
name|ints
argument_list|)
expr_stmt|;
name|ints
operator|=
literal|null
expr_stmt|;
name|floats
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|getIntArray
specifier|public
specifier|final
name|int
index|[]
name|getIntArray
parameter_list|()
block|{
if|if
condition|(
name|ints
operator|==
literal|null
condition|)
block|{
name|ints
operator|=
name|newIntArray
argument_list|()
expr_stmt|;
block|}
return|return
name|ints
return|;
block|}
DECL|method|getFloatArray
specifier|public
specifier|final
name|float
index|[]
name|getFloatArray
parameter_list|()
block|{
if|if
condition|(
name|floats
operator|==
literal|null
condition|)
block|{
name|floats
operator|=
name|newFloatArray
argument_list|()
expr_stmt|;
block|}
return|return
name|floats
return|;
block|}
block|}
end_class
end_unit
