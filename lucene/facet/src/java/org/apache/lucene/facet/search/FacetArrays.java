begin_unit
begin_package
DECL|package|org.apache.lucene.facet.search
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|search
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_comment
comment|/**  * Provider of arrays used for facet operations such as counting.  *   * @lucene.experimental  */
end_comment
begin_class
DECL|class|FacetArrays
specifier|public
class|class
name|FacetArrays
block|{
DECL|field|intArray
specifier|private
name|int
index|[]
name|intArray
decl_stmt|;
DECL|field|floatArray
specifier|private
name|float
index|[]
name|floatArray
decl_stmt|;
DECL|field|intArrayAllocator
specifier|private
name|IntArrayAllocator
name|intArrayAllocator
decl_stmt|;
DECL|field|floatArrayAllocator
specifier|private
name|FloatArrayAllocator
name|floatArrayAllocator
decl_stmt|;
DECL|field|arraysLength
specifier|private
name|int
name|arraysLength
decl_stmt|;
comment|/**    * Create a FacetArrays with certain array allocators.    * @param intArrayAllocator allocator for int arrays.    * @param floatArrayAllocator allocator for float arrays.    */
DECL|method|FacetArrays
specifier|public
name|FacetArrays
parameter_list|(
name|IntArrayAllocator
name|intArrayAllocator
parameter_list|,
name|FloatArrayAllocator
name|floatArrayAllocator
parameter_list|)
block|{
name|this
operator|.
name|intArrayAllocator
operator|=
name|intArrayAllocator
expr_stmt|;
name|this
operator|.
name|floatArrayAllocator
operator|=
name|floatArrayAllocator
expr_stmt|;
block|}
comment|/**    * Notify allocators that they can free arrays allocated     * on behalf of this FacetArrays object.     */
DECL|method|free
specifier|public
name|void
name|free
parameter_list|()
block|{
if|if
condition|(
name|intArrayAllocator
operator|!=
literal|null
condition|)
block|{
name|intArrayAllocator
operator|.
name|free
argument_list|(
name|intArray
argument_list|)
expr_stmt|;
comment|// Should give up handle to the array now
comment|// that it is freed.
name|intArray
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|floatArrayAllocator
operator|!=
literal|null
condition|)
block|{
name|floatArrayAllocator
operator|.
name|free
argument_list|(
name|floatArray
argument_list|)
expr_stmt|;
comment|// Should give up handle to the array now
comment|// that it is freed.
name|floatArray
operator|=
literal|null
expr_stmt|;
block|}
name|arraysLength
operator|=
literal|0
expr_stmt|;
block|}
comment|/**    * Obtain an int array, e.g. for facet counting.     */
DECL|method|getIntArray
specifier|public
name|int
index|[]
name|getIntArray
parameter_list|()
block|{
if|if
condition|(
name|intArray
operator|==
literal|null
condition|)
block|{
name|intArray
operator|=
name|intArrayAllocator
operator|.
name|allocate
argument_list|()
expr_stmt|;
name|arraysLength
operator|=
name|intArray
operator|.
name|length
expr_stmt|;
block|}
return|return
name|intArray
return|;
block|}
comment|/** Obtain a float array, e.g. for evaluating facet association values. */
DECL|method|getFloatArray
specifier|public
name|float
index|[]
name|getFloatArray
parameter_list|()
block|{
if|if
condition|(
name|floatArray
operator|==
literal|null
condition|)
block|{
name|floatArray
operator|=
name|floatArrayAllocator
operator|.
name|allocate
argument_list|()
expr_stmt|;
name|arraysLength
operator|=
name|floatArray
operator|.
name|length
expr_stmt|;
block|}
return|return
name|floatArray
return|;
block|}
comment|/**    * Return the arrays length    */
DECL|method|getArraysLength
specifier|public
name|int
name|getArraysLength
parameter_list|()
block|{
return|return
name|arraysLength
return|;
block|}
block|}
end_class
end_unit
