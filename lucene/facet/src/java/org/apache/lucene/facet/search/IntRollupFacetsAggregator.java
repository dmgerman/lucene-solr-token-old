begin_unit
begin_package
DECL|package|org.apache.lucene.facet.search
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|search
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|params
operator|.
name|CategoryListParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|search
operator|.
name|FacetsCollector
operator|.
name|MatchingDocs
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|taxonomy
operator|.
name|TaxonomyReader
import|;
end_import
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_comment
comment|/**  * A {@link FacetsAggregator} which implements  * {@link #rollupValues(FacetRequest, int, int[], int[], FacetArrays)} by  * summing the values from {@link FacetArrays#getIntArray()}. Extending classes  * should only implement {@link #aggregate}. Also, {@link #requiresDocScores()}  * always returns false.  *   * @lucene.experimental  */
end_comment
begin_class
DECL|class|IntRollupFacetsAggregator
specifier|public
specifier|abstract
class|class
name|IntRollupFacetsAggregator
implements|implements
name|FacetsAggregator
block|{
annotation|@
name|Override
DECL|method|aggregate
specifier|public
specifier|abstract
name|void
name|aggregate
parameter_list|(
name|MatchingDocs
name|matchingDocs
parameter_list|,
name|CategoryListParams
name|clp
parameter_list|,
name|FacetArrays
name|facetArrays
parameter_list|)
throws|throws
name|IOException
function_decl|;
DECL|method|rollupValues
specifier|private
name|int
name|rollupValues
parameter_list|(
name|int
name|ordinal
parameter_list|,
name|int
index|[]
name|children
parameter_list|,
name|int
index|[]
name|siblings
parameter_list|,
name|int
index|[]
name|values
parameter_list|)
block|{
name|int
name|value
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|ordinal
operator|!=
name|TaxonomyReader
operator|.
name|INVALID_ORDINAL
condition|)
block|{
name|int
name|childValue
init|=
name|values
index|[
name|ordinal
index|]
decl_stmt|;
name|childValue
operator|+=
name|rollupValues
argument_list|(
name|children
index|[
name|ordinal
index|]
argument_list|,
name|children
argument_list|,
name|siblings
argument_list|,
name|values
argument_list|)
expr_stmt|;
name|values
index|[
name|ordinal
index|]
operator|=
name|childValue
expr_stmt|;
name|value
operator|+=
name|childValue
expr_stmt|;
name|ordinal
operator|=
name|siblings
index|[
name|ordinal
index|]
expr_stmt|;
block|}
return|return
name|value
return|;
block|}
annotation|@
name|Override
DECL|method|rollupValues
specifier|public
specifier|final
name|void
name|rollupValues
parameter_list|(
name|FacetRequest
name|fr
parameter_list|,
name|int
name|ordinal
parameter_list|,
name|int
index|[]
name|children
parameter_list|,
name|int
index|[]
name|siblings
parameter_list|,
name|FacetArrays
name|facetArrays
parameter_list|)
block|{
specifier|final
name|int
index|[]
name|values
init|=
name|facetArrays
operator|.
name|getIntArray
argument_list|()
decl_stmt|;
name|values
index|[
name|ordinal
index|]
operator|+=
name|rollupValues
argument_list|(
name|children
index|[
name|ordinal
index|]
argument_list|,
name|children
argument_list|,
name|siblings
argument_list|,
name|values
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|requiresDocScores
specifier|public
specifier|final
name|boolean
name|requiresDocScores
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
block|}
end_class
end_unit
