begin_unit
begin_package
DECL|package|org.apache.lucene.facet.index.params
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|index
operator|.
name|params
package|;
end_package
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|index
operator|.
name|categorypolicy
operator|.
name|OrdinalPolicy
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|index
operator|.
name|categorypolicy
operator|.
name|PathPolicy
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|search
operator|.
name|FacetArrays
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|taxonomy
operator|.
name|CategoryPath
import|;
end_import
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_comment
comment|/**  * Defines parameters that are needed for facets indexing. Note that this class  * does not have any setters. That's because overriding the default parameters  * is considered expert. If you wish to override them, simply extend this class  * and override the relevant getter.  *   *<p>  *<b>NOTE:</b> This class is also used during faceted search in order to e.g.  * know which field holds the drill-down terms or the fulltree posting.  * Therefore this class should be initialized once and you should refrain from  * changing it. Also note that if you make any changes to it (e.g. suddenly  * deciding that drill-down terms should be read from a different field) and use  * it on an existing index, things may not work as expected.  *   * @lucene.experimental  */
end_comment
begin_class
DECL|class|FacetIndexingParams
specifier|public
class|class
name|FacetIndexingParams
block|{
comment|// the default CLP, can be a singleton
DECL|field|DEFAULT_CATEGORY_LIST_PARAMS
specifier|protected
specifier|static
specifier|final
name|CategoryListParams
name|DEFAULT_CATEGORY_LIST_PARAMS
init|=
operator|new
name|CategoryListParams
argument_list|()
decl_stmt|;
comment|/**    * A {@link FacetIndexingParams} which fixes {@link OrdinalPolicy} to    * {@link OrdinalPolicy#NO_PARENTS}. This is a singleton equivalent to new    * {@link #FacetIndexingParams()}.    */
DECL|field|ALL_PARENTS
specifier|public
specifier|static
specifier|final
name|FacetIndexingParams
name|ALL_PARENTS
init|=
operator|new
name|FacetIndexingParams
argument_list|()
decl_stmt|;
comment|/**    * The default delimiter with which {@link CategoryPath#getComponent(int)    * components} are concatenated when written to the index, e.g. as drill-down    * terms. If you choose to override it by overiding    * {@link #getFacetDelimChar()}, you should make sure that you return a    * character that's not found in any path component.    */
DECL|field|DEFAULT_FACET_DELIM_CHAR
specifier|public
specifier|static
specifier|final
name|char
name|DEFAULT_FACET_DELIM_CHAR
init|=
literal|'\uF749'
decl_stmt|;
DECL|field|ordinalPolicy
specifier|private
specifier|final
name|OrdinalPolicy
name|ordinalPolicy
init|=
name|OrdinalPolicy
operator|.
name|ALL_PARENTS
decl_stmt|;
DECL|field|pathPolicy
specifier|private
specifier|final
name|PathPolicy
name|pathPolicy
init|=
name|PathPolicy
operator|.
name|ALL_CATEGORIES
decl_stmt|;
DECL|field|partitionSize
specifier|private
specifier|final
name|int
name|partitionSize
init|=
name|Integer
operator|.
name|MAX_VALUE
decl_stmt|;
DECL|field|clParams
specifier|protected
specifier|final
name|CategoryListParams
name|clParams
decl_stmt|;
comment|/**    * Initializes new default params. You should use this constructor only if you    * intend to override any of the getters, otherwise you can use    * {@link #ALL_PARENTS} to save unnecessary object allocations.    */
DECL|method|FacetIndexingParams
specifier|public
name|FacetIndexingParams
parameter_list|()
block|{
name|this
argument_list|(
name|DEFAULT_CATEGORY_LIST_PARAMS
argument_list|)
expr_stmt|;
block|}
comment|/** Initializes new params with the given {@link CategoryListParams}. */
DECL|method|FacetIndexingParams
specifier|public
name|FacetIndexingParams
parameter_list|(
name|CategoryListParams
name|categoryListParams
parameter_list|)
block|{
name|clParams
operator|=
name|categoryListParams
expr_stmt|;
block|}
comment|/**    * The name of the category list to put this category in, or {@code null} if    * this category should not be aggregatable.    *<p>    * By default, all categories are written to the same category list, but    * applications which know in advance that in some situations only parts of    * the category hierarchy needs to be counted can divide the categories into    * two or more different category lists.    *<p>    * If {@code null} is returned for a category, it means that this category    * should not appear in any category list, and thus weights for it cannot be    * aggregated. This category can still be used for drill-down, even though the    * its weight is unknown.    *     * @see PerDimensionIndexingParams    */
DECL|method|getCategoryListParams
specifier|public
name|CategoryListParams
name|getCategoryListParams
parameter_list|(
name|CategoryPath
name|category
parameter_list|)
block|{
return|return
name|clParams
return|;
block|}
comment|/**    * Copies the text required to execute a drill-down query on the given    * category to the given {@code char[]}, and returns the number of characters    * that were written.    *<p>    *<b>NOTE:</b> You should make sure that the {@code char[]} is large enough,    * by e.g. calling {@link CategoryPath#charsNeededForFullPath()}.    */
DECL|method|drillDownTermText
specifier|public
name|int
name|drillDownTermText
parameter_list|(
name|CategoryPath
name|path
parameter_list|,
name|char
index|[]
name|buffer
parameter_list|)
block|{
return|return
name|path
operator|.
name|copyToCharArray
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
name|getFacetDelimChar
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Returns the size of a partition.<i>Partitions</i> allow you to divide    * (hence, partition) the categories space into small sets to e.g. improve RAM    * consumption during faceted search. For instance, {@code partitionSize=100K}    * would mean that if your taxonomy index contains 420K categories, they will    * be divided into 5 groups and at search time a {@link FacetArrays} will be    * allocated at the size of the partition.    *     *<p>    * This is real advanced setting and should be changed with care. By default,    * all categories are put in one partition. You should modify this setting if    * you have really large taxonomies (e.g. 1M+ nodes).    */
DECL|method|getPartitionSize
specifier|public
name|int
name|getPartitionSize
parameter_list|()
block|{
return|return
name|partitionSize
return|;
block|}
comment|/**    * Returns a list of all {@link CategoryListParams categoryListParams} that    * are used for facets indexing.    */
DECL|method|getAllCategoryListParams
specifier|public
name|List
argument_list|<
name|CategoryListParams
argument_list|>
name|getAllCategoryListParams
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|singletonList
argument_list|(
name|clParams
argument_list|)
return|;
block|}
comment|/**    * Returns the {@link OrdinalPolicy} that is used during indexing. By default    * returns {@link OrdinalPolicy#ALL_PARENTS} which means that the full    * hierarchy will be stored for every document.    */
DECL|method|getOrdinalPolicy
specifier|public
name|OrdinalPolicy
name|getOrdinalPolicy
parameter_list|()
block|{
return|return
name|ordinalPolicy
return|;
block|}
comment|/**    * Returns the {@link PathPolicy} that is used during indexing. By default    * returns {@link PathPolicy#ALL_CATEGORIES} which means that the full    * hierarchy is added as drill-down terms for every document.    */
DECL|method|getPathPolicy
specifier|public
name|PathPolicy
name|getPathPolicy
parameter_list|()
block|{
return|return
name|pathPolicy
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
specifier|final
name|int
name|prime
init|=
literal|31
decl_stmt|;
name|int
name|result
init|=
literal|1
decl_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
operator|(
operator|(
name|clParams
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|clParams
operator|.
name|hashCode
argument_list|()
operator|)
expr_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
operator|(
operator|(
name|ordinalPolicy
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|ordinalPolicy
operator|.
name|hashCode
argument_list|()
operator|)
expr_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
name|partitionSize
expr_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
operator|(
operator|(
name|pathPolicy
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|pathPolicy
operator|.
name|hashCode
argument_list|()
operator|)
expr_stmt|;
for|for
control|(
name|CategoryListParams
name|clp
range|:
name|getAllCategoryListParams
argument_list|()
control|)
block|{
name|result
operator|^=
name|clp
operator|.
name|hashCode
argument_list|()
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|obj
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
operator|(
name|obj
operator|instanceof
name|FacetIndexingParams
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|FacetIndexingParams
name|other
init|=
operator|(
name|FacetIndexingParams
operator|)
name|obj
decl_stmt|;
if|if
condition|(
name|clParams
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|other
operator|.
name|clParams
operator|!=
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|clParams
operator|.
name|equals
argument_list|(
name|other
operator|.
name|clParams
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|ordinalPolicy
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|other
operator|.
name|ordinalPolicy
operator|!=
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|ordinalPolicy
operator|.
name|equals
argument_list|(
name|other
operator|.
name|ordinalPolicy
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|partitionSize
operator|!=
name|other
operator|.
name|partitionSize
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|pathPolicy
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|other
operator|.
name|pathPolicy
operator|!=
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|pathPolicy
operator|.
name|equals
argument_list|(
name|other
operator|.
name|pathPolicy
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|Iterable
argument_list|<
name|CategoryListParams
argument_list|>
name|cLs
init|=
name|getAllCategoryListParams
argument_list|()
decl_stmt|;
name|Iterable
argument_list|<
name|CategoryListParams
argument_list|>
name|otherCLs
init|=
name|other
operator|.
name|getAllCategoryListParams
argument_list|()
decl_stmt|;
return|return
name|cLs
operator|.
name|equals
argument_list|(
name|otherCLs
argument_list|)
return|;
block|}
comment|/**    * Returns the delimiter character used internally for concatenating category    * path components, e.g. for drill-down terms.    */
DECL|method|getFacetDelimChar
specifier|public
name|char
name|getFacetDelimChar
parameter_list|()
block|{
return|return
name|DEFAULT_FACET_DELIM_CHAR
return|;
block|}
block|}
end_class
end_unit
