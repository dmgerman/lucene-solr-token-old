begin_unit
begin_package
DECL|package|org.apache.lucene.facet.taxonomy.directory
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|taxonomy
operator|.
name|directory
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|taxonomy
operator|.
name|TaxonomyReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|CorruptIndexException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DocsAndPositionsEnum
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|MultiFields
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|DocIdSetIterator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|ArrayUtil
import|;
end_import
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_comment
comment|/**  * @lucene.experimental  */
end_comment
begin_class
DECL|class|ParentArray
class|class
name|ParentArray
block|{
comment|// TODO: maybe use PackedInts?
DECL|field|parentOrdinals
specifier|private
specifier|final
name|int
index|[]
name|parentOrdinals
decl_stmt|;
comment|/** Used by {@link #add(int, int)} when the array needs to grow. */
DECL|method|ParentArray
name|ParentArray
parameter_list|(
name|int
index|[]
name|parentOrdinals
parameter_list|)
block|{
name|this
operator|.
name|parentOrdinals
operator|=
name|parentOrdinals
expr_stmt|;
block|}
DECL|method|ParentArray
specifier|public
name|ParentArray
parameter_list|(
name|IndexReader
name|reader
parameter_list|)
throws|throws
name|IOException
block|{
name|parentOrdinals
operator|=
operator|new
name|int
index|[
name|reader
operator|.
name|maxDoc
argument_list|()
index|]
expr_stmt|;
if|if
condition|(
name|parentOrdinals
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|initFromReader
argument_list|(
name|reader
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Starting Lucene 2.9, following the change LUCENE-1542, we can
comment|// no longer reliably read the parent "-1" (see comment in
comment|// LuceneTaxonomyWriter.SinglePositionTokenStream). We have no way
comment|// to fix this in indexing without breaking backward-compatibility
comment|// with existing indexes, so what we'll do instead is just
comment|// hard-code the parent of ordinal 0 to be -1, and assume (as is
comment|// indeed the case) that no other parent can be -1.
name|parentOrdinals
index|[
literal|0
index|]
operator|=
name|TaxonomyReader
operator|.
name|INVALID_ORDINAL
expr_stmt|;
block|}
block|}
DECL|method|ParentArray
specifier|public
name|ParentArray
parameter_list|(
name|IndexReader
name|reader
parameter_list|,
name|ParentArray
name|copyFrom
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|copyFrom
operator|!=
literal|null
assert|;
comment|// note that copyParents.length may be equal to reader.maxDoc(). this is not a bug
comment|// it may be caused if e.g. the taxonomy segments were merged, and so an updated
comment|// NRT reader was obtained, even though nothing was changed. this is not very likely
comment|// to happen.
name|int
index|[]
name|copyParents
init|=
name|copyFrom
operator|.
name|getArray
argument_list|()
decl_stmt|;
name|this
operator|.
name|parentOrdinals
operator|=
operator|new
name|int
index|[
name|reader
operator|.
name|maxDoc
argument_list|()
index|]
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|copyParents
argument_list|,
literal|0
argument_list|,
name|parentOrdinals
argument_list|,
literal|0
argument_list|,
name|copyParents
operator|.
name|length
argument_list|)
expr_stmt|;
name|initFromReader
argument_list|(
name|reader
argument_list|,
name|copyParents
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
comment|// Read the parents of the new categories
DECL|method|initFromReader
specifier|private
name|void
name|initFromReader
parameter_list|(
name|IndexReader
name|reader
parameter_list|,
name|int
name|first
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|reader
operator|.
name|maxDoc
argument_list|()
operator|==
name|first
condition|)
block|{
return|return;
block|}
comment|// it's ok to use MultiFields because we only iterate on one posting list.
comment|// breaking it to loop over the leaves() only complicates code for no
comment|// apparent gain.
name|DocsAndPositionsEnum
name|positions
init|=
name|MultiFields
operator|.
name|getTermPositionsEnum
argument_list|(
name|reader
argument_list|,
literal|null
argument_list|,
name|Consts
operator|.
name|FIELD_PAYLOADS
argument_list|,
name|Consts
operator|.
name|PAYLOAD_PARENT_BYTES_REF
argument_list|,
name|DocsAndPositionsEnum
operator|.
name|FLAG_PAYLOADS
argument_list|)
decl_stmt|;
comment|// shouldn't really happen, if it does, something's wrong
if|if
condition|(
name|positions
operator|==
literal|null
operator|||
name|positions
operator|.
name|advance
argument_list|(
name|first
argument_list|)
operator|==
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
condition|)
block|{
throw|throw
operator|new
name|CorruptIndexException
argument_list|(
literal|"Missing parent data for category "
operator|+
name|first
argument_list|)
throw|;
block|}
name|int
name|num
init|=
name|reader
operator|.
name|maxDoc
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|first
init|;
name|i
operator|<
name|num
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|positions
operator|.
name|docID
argument_list|()
operator|==
name|i
condition|)
block|{
if|if
condition|(
name|positions
operator|.
name|freq
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|// shouldn't happen
throw|throw
operator|new
name|CorruptIndexException
argument_list|(
literal|"Missing parent data for category "
operator|+
name|i
argument_list|)
throw|;
block|}
name|parentOrdinals
index|[
name|i
index|]
operator|=
name|positions
operator|.
name|nextPosition
argument_list|()
expr_stmt|;
if|if
condition|(
name|positions
operator|.
name|nextDoc
argument_list|()
operator|==
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
condition|)
block|{
if|if
condition|(
name|i
operator|+
literal|1
operator|<
name|num
condition|)
block|{
throw|throw
operator|new
name|CorruptIndexException
argument_list|(
literal|"Missing parent data for category "
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
argument_list|)
throw|;
block|}
break|break;
block|}
block|}
else|else
block|{
comment|// this shouldn't happen
throw|throw
operator|new
name|CorruptIndexException
argument_list|(
literal|"Missing parent data for category "
operator|+
name|i
argument_list|)
throw|;
block|}
block|}
block|}
DECL|method|getArray
specifier|public
name|int
index|[]
name|getArray
parameter_list|()
block|{
return|return
name|parentOrdinals
return|;
block|}
comment|/**    * Adds the given ordinal/parent info and returns either a new instance if the    * underlying array had to grow, or this instance otherwise.    *<p>    *<b>NOTE:</b> you should call this method from a thread-safe code.    */
DECL|method|add
name|ParentArray
name|add
parameter_list|(
name|int
name|ordinal
parameter_list|,
name|int
name|parentOrdinal
parameter_list|)
block|{
if|if
condition|(
name|ordinal
operator|>=
name|parentOrdinals
operator|.
name|length
condition|)
block|{
name|int
index|[]
name|newarray
init|=
name|ArrayUtil
operator|.
name|grow
argument_list|(
name|parentOrdinals
argument_list|)
decl_stmt|;
name|newarray
index|[
name|ordinal
index|]
operator|=
name|parentOrdinal
expr_stmt|;
return|return
operator|new
name|ParentArray
argument_list|(
name|newarray
argument_list|)
return|;
block|}
name|parentOrdinals
index|[
name|ordinal
index|]
operator|=
name|parentOrdinal
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
end_class
end_unit
