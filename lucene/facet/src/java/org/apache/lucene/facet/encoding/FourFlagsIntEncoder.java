begin_unit
begin_package
DECL|package|org.apache.lucene.facet.encoding
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|encoding
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IntsRef
import|;
end_import
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_comment
comment|/**  * A {@link ChunksIntEncoder} which encodes values in chunks of 4. Every group  * starts with a single byte (called indicator) which represents 4 - 2 bit  * flags, where the values:  *<ul>  *<li>1, 2 or 3 mean the encoded value is '1', '2' or '3' respectively.  *<li>0 means the value is encoded using {@link VInt8IntEncoder}, and the  * encoded bytes follow the indicator.<br>  * Since value 0 is illegal, and 1-3 are encoded in the indicator, the actual  * value that is encoded is<code>value-4</code>, which saves some more bits.  *</ul>  * Encoding example:  *<ul>  *<li>Original values: 6, 16, 5, 9, 7, 1, 11  *<li>After sorting: 1, 5, 6, 7, 9, 11, 16  *<li>D-Gap computing: 1, 4, 1, 1, 2, 5 (so far - done by  * {@link DGapIntEncoder})  *<li>Encoding: 1,0,1,1 as the first indicator, followed by 0 (4-4), than  * 2,0,0,0 as the second indicator, followed by 1 (5-4) encoded with.  *<li>Binary encode:<u>01 | 01 | 00 | 01</u> 00000000<u>00 | 00 | 00 | 10</u>  * 00000001 (indicators are<u>underlined</u>).<br>  *<b>NOTE:</b> the order of the values in the indicator is lsb&rArr; msb,  * which allows for more efficient decoding.  *</ul>  *   * @lucene.experimental  */
end_comment
begin_class
DECL|class|FourFlagsIntEncoder
specifier|public
class|class
name|FourFlagsIntEncoder
extends|extends
name|ChunksIntEncoder
block|{
comment|/*    * Holds all combinations of<i>indicator</i> flags for fast encoding (saves    * time on bit manipulation @ encode time)    */
DECL|field|ENCODE_TABLE
specifier|private
specifier|static
specifier|final
name|byte
index|[]
index|[]
name|ENCODE_TABLE
init|=
operator|new
name|byte
index|[]
index|[]
block|{
operator|new
name|byte
index|[]
block|{
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|}
block|,
operator|new
name|byte
index|[]
block|{
literal|0x01
block|,
literal|0x04
block|,
literal|0x10
block|,
literal|0x40
block|}
block|,
operator|new
name|byte
index|[]
block|{
literal|0x02
block|,
literal|0x08
block|,
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x80
block|}
block|,
operator|new
name|byte
index|[]
block|{
literal|0x03
block|,
literal|0x0C
block|,
literal|0x30
block|,
operator|(
name|byte
operator|)
literal|0xC0
block|}
block|,   }
decl_stmt|;
DECL|method|FourFlagsIntEncoder
specifier|public
name|FourFlagsIntEncoder
parameter_list|()
block|{
name|super
argument_list|(
literal|4
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|encode
specifier|public
name|void
name|encode
parameter_list|(
name|IntsRef
name|values
parameter_list|,
name|BytesRef
name|buf
parameter_list|)
block|{
name|buf
operator|.
name|offset
operator|=
name|buf
operator|.
name|length
operator|=
literal|0
expr_stmt|;
name|int
name|upto
init|=
name|values
operator|.
name|offset
operator|+
name|values
operator|.
name|length
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|values
operator|.
name|offset
init|;
name|i
operator|<
name|upto
condition|;
name|i
operator|++
control|)
block|{
name|int
name|value
init|=
name|values
operator|.
name|ints
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|value
operator|<=
literal|3
condition|)
block|{
name|indicator
operator||=
name|ENCODE_TABLE
index|[
name|value
index|]
index|[
name|ordinal
index|]
expr_stmt|;
block|}
else|else
block|{
name|encodeQueue
operator|.
name|ints
index|[
name|encodeQueue
operator|.
name|length
operator|++
index|]
operator|=
name|value
operator|-
literal|4
expr_stmt|;
block|}
operator|++
name|ordinal
expr_stmt|;
comment|// encode the chunk and the indicator
if|if
condition|(
name|ordinal
operator|==
literal|4
condition|)
block|{
name|encodeChunk
argument_list|(
name|buf
argument_list|)
expr_stmt|;
block|}
block|}
comment|// encode remaining values
if|if
condition|(
name|ordinal
operator|!=
literal|0
condition|)
block|{
name|encodeChunk
argument_list|(
name|buf
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|createMatchingDecoder
specifier|public
name|IntDecoder
name|createMatchingDecoder
parameter_list|()
block|{
return|return
operator|new
name|FourFlagsIntDecoder
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"FourFlags(VInt)"
return|;
block|}
block|}
end_class
end_unit
