begin_unit
begin_package
DECL|package|org.apache.lucene.facet.index
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|index
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|index
operator|.
name|params
operator|.
name|CategoryListParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|index
operator|.
name|params
operator|.
name|DefaultFacetIndexingParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|index
operator|.
name|params
operator|.
name|FacetIndexingParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|taxonomy
operator|.
name|directory
operator|.
name|DirectoryTaxonomyWriter
operator|.
name|OrdinalMap
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|AtomicReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DocsAndPositionsEnum
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Fields
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|FilterAtomicReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Terms
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|TermsEnum
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Bits
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|encoding
operator|.
name|IntDecoder
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|encoding
operator|.
name|IntEncoder
import|;
end_import
begin_comment
comment|/**  * A {@link FilterAtomicReader} for updating facets ordinal references,  * based on an ordinal map. You should use this code in conjunction with merging  * taxonomies - after you merge taxonomies, you receive an {@link OrdinalMap}  * which maps the 'old' payloads to the 'new' ones. You can use that map to  * re-map the payloads which contain the facets information (ordinals) either  * before or while merging the indexes.  *<p>  * For re-mapping the ordinals during index merge, do the following:  *   *<pre class="prettyprint">  * // merge the old taxonomy with the new one.  * OrdinalMap map = DirectoryTaxonomyWriter.addTaxonomies();  * int[] ordmap = map.getMap();  *   * // Add the index and re-map ordinals on the go  * DirectoryReader reader = DirectoryReader.open(oldDir);  * IndexWriterConfig conf = new IndexWriterConfig(VER, ANALYZER);  * IndexWriter writer = new IndexWriter(newDir, conf);  * List<AtomicReaderContext> leaves = reader.leaves();  *   AtomicReader wrappedLeaves[] = new AtomicReader[leaves.size()];  *   for (int i = 0; i< leaves.size(); i++) {  *     wrappedLeaves[i] = new OrdinalMappingAtomicReader(leaves.get(i).reader(), ordmap);  *   }  * writer.addIndexes(new MultiReader(wrappedLeaves));  * writer.commit();  *</pre>  *   * @lucene.experimental  */
end_comment
begin_class
DECL|class|OrdinalMappingAtomicReader
specifier|public
class|class
name|OrdinalMappingAtomicReader
extends|extends
name|FilterAtomicReader
block|{
DECL|field|ordinalMap
specifier|private
specifier|final
name|int
index|[]
name|ordinalMap
decl_stmt|;
comment|// a little obtuse: but we dont need to create Term objects this way
DECL|field|termMap
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|BytesRef
argument_list|,
name|CategoryListParams
argument_list|>
argument_list|>
name|termMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|BytesRef
argument_list|,
name|CategoryListParams
argument_list|>
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
comment|/**    * Wraps an AtomicReader, mapping ordinals according to the ordinalMap.    * Calls {@link #OrdinalMappingAtomicReader(AtomicReader, int[], FacetIndexingParams)    * OrdinalMappingAtomicReader(in, ordinalMap, new DefaultFacetIndexingParams())}    */
DECL|method|OrdinalMappingAtomicReader
specifier|public
name|OrdinalMappingAtomicReader
parameter_list|(
name|AtomicReader
name|in
parameter_list|,
name|int
index|[]
name|ordinalMap
parameter_list|)
block|{
name|this
argument_list|(
name|in
argument_list|,
name|ordinalMap
argument_list|,
operator|new
name|DefaultFacetIndexingParams
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Wraps an AtomicReader, mapping ordinals according to the ordinalMap,    * using the provided indexingParams.    */
DECL|method|OrdinalMappingAtomicReader
specifier|public
name|OrdinalMappingAtomicReader
parameter_list|(
name|AtomicReader
name|in
parameter_list|,
name|int
index|[]
name|ordinalMap
parameter_list|,
name|FacetIndexingParams
name|indexingParams
parameter_list|)
block|{
name|super
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|this
operator|.
name|ordinalMap
operator|=
name|ordinalMap
expr_stmt|;
for|for
control|(
name|CategoryListParams
name|params
range|:
name|indexingParams
operator|.
name|getAllCategoryListParams
argument_list|()
control|)
block|{
name|Term
name|term
init|=
name|params
operator|.
name|getTerm
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|BytesRef
argument_list|,
name|CategoryListParams
argument_list|>
name|fieldMap
init|=
name|termMap
operator|.
name|get
argument_list|(
name|term
operator|.
name|field
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|fieldMap
operator|==
literal|null
condition|)
block|{
name|fieldMap
operator|=
operator|new
name|HashMap
argument_list|<
name|BytesRef
argument_list|,
name|CategoryListParams
argument_list|>
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|termMap
operator|.
name|put
argument_list|(
name|term
operator|.
name|field
argument_list|()
argument_list|,
name|fieldMap
argument_list|)
expr_stmt|;
block|}
name|fieldMap
operator|.
name|put
argument_list|(
name|term
operator|.
name|bytes
argument_list|()
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getTermVectors
specifier|public
name|Fields
name|getTermVectors
parameter_list|(
name|int
name|docID
parameter_list|)
throws|throws
name|IOException
block|{
name|Fields
name|fields
init|=
name|super
operator|.
name|getTermVectors
argument_list|(
name|docID
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
operator|new
name|OrdinalMappingFields
argument_list|(
name|fields
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|fields
specifier|public
name|Fields
name|fields
parameter_list|()
throws|throws
name|IOException
block|{
name|Fields
name|fields
init|=
name|super
operator|.
name|fields
argument_list|()
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
operator|new
name|OrdinalMappingFields
argument_list|(
name|fields
argument_list|)
return|;
block|}
block|}
DECL|class|OrdinalMappingFields
specifier|private
class|class
name|OrdinalMappingFields
extends|extends
name|FilterFields
block|{
DECL|method|OrdinalMappingFields
specifier|public
name|OrdinalMappingFields
parameter_list|(
name|Fields
name|in
parameter_list|)
block|{
name|super
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|terms
specifier|public
name|Terms
name|terms
parameter_list|(
name|String
name|field
parameter_list|)
throws|throws
name|IOException
block|{
name|Terms
name|terms
init|=
name|super
operator|.
name|terms
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|terms
operator|==
literal|null
condition|)
block|{
return|return
name|terms
return|;
block|}
name|Map
argument_list|<
name|BytesRef
argument_list|,
name|CategoryListParams
argument_list|>
name|termsMap
init|=
name|termMap
operator|.
name|get
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|termsMap
operator|==
literal|null
condition|)
block|{
return|return
name|terms
return|;
block|}
else|else
block|{
return|return
operator|new
name|OrdinalMappingTerms
argument_list|(
name|terms
argument_list|,
name|termsMap
argument_list|)
return|;
block|}
block|}
block|}
DECL|class|OrdinalMappingTerms
specifier|private
class|class
name|OrdinalMappingTerms
extends|extends
name|FilterTerms
block|{
DECL|field|termsMap
specifier|private
specifier|final
name|Map
argument_list|<
name|BytesRef
argument_list|,
name|CategoryListParams
argument_list|>
name|termsMap
decl_stmt|;
DECL|method|OrdinalMappingTerms
specifier|public
name|OrdinalMappingTerms
parameter_list|(
name|Terms
name|in
parameter_list|,
name|Map
argument_list|<
name|BytesRef
argument_list|,
name|CategoryListParams
argument_list|>
name|termsMap
parameter_list|)
block|{
name|super
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|this
operator|.
name|termsMap
operator|=
name|termsMap
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|iterator
specifier|public
name|TermsEnum
name|iterator
parameter_list|(
name|TermsEnum
name|reuse
parameter_list|)
throws|throws
name|IOException
block|{
comment|// TODO: should we reuse the inner termsenum?
return|return
operator|new
name|OrdinalMappingTermsEnum
argument_list|(
name|super
operator|.
name|iterator
argument_list|(
name|reuse
argument_list|)
argument_list|,
name|termsMap
argument_list|)
return|;
block|}
block|}
DECL|class|OrdinalMappingTermsEnum
specifier|private
class|class
name|OrdinalMappingTermsEnum
extends|extends
name|FilterTermsEnum
block|{
DECL|field|termsMap
specifier|private
specifier|final
name|Map
argument_list|<
name|BytesRef
argument_list|,
name|CategoryListParams
argument_list|>
name|termsMap
decl_stmt|;
DECL|method|OrdinalMappingTermsEnum
specifier|public
name|OrdinalMappingTermsEnum
parameter_list|(
name|TermsEnum
name|in
parameter_list|,
name|Map
argument_list|<
name|BytesRef
argument_list|,
name|CategoryListParams
argument_list|>
name|termsMap
parameter_list|)
block|{
name|super
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|this
operator|.
name|termsMap
operator|=
name|termsMap
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|docsAndPositions
specifier|public
name|DocsAndPositionsEnum
name|docsAndPositions
parameter_list|(
name|Bits
name|liveDocs
parameter_list|,
name|DocsAndPositionsEnum
name|reuse
parameter_list|,
name|int
name|flags
parameter_list|)
throws|throws
name|IOException
block|{
comment|// TODO: we could reuse our D&P enum if we need
name|DocsAndPositionsEnum
name|inner
init|=
name|super
operator|.
name|docsAndPositions
argument_list|(
name|liveDocs
argument_list|,
name|reuse
argument_list|,
name|flags
argument_list|)
decl_stmt|;
if|if
condition|(
name|inner
operator|==
literal|null
condition|)
block|{
return|return
name|inner
return|;
block|}
name|CategoryListParams
name|params
init|=
name|termsMap
operator|.
name|get
argument_list|(
name|term
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|params
operator|==
literal|null
condition|)
block|{
return|return
name|inner
return|;
block|}
return|return
operator|new
name|OrdinalMappingDocsAndPositionsEnum
argument_list|(
name|inner
argument_list|,
name|params
argument_list|)
return|;
block|}
block|}
DECL|class|OrdinalMappingDocsAndPositionsEnum
specifier|private
class|class
name|OrdinalMappingDocsAndPositionsEnum
extends|extends
name|FilterDocsAndPositionsEnum
block|{
DECL|field|encoder
specifier|private
specifier|final
name|IntEncoder
name|encoder
decl_stmt|;
DECL|field|decoder
specifier|private
specifier|final
name|IntDecoder
name|decoder
decl_stmt|;
DECL|field|os
specifier|private
specifier|final
name|ByteArrayOutputStream
name|os
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
DECL|field|payloadOut
specifier|private
specifier|final
name|BytesRef
name|payloadOut
init|=
operator|new
name|BytesRef
argument_list|()
decl_stmt|;
DECL|method|OrdinalMappingDocsAndPositionsEnum
specifier|public
name|OrdinalMappingDocsAndPositionsEnum
parameter_list|(
name|DocsAndPositionsEnum
name|in
parameter_list|,
name|CategoryListParams
name|params
parameter_list|)
block|{
name|super
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|encoder
operator|=
name|params
operator|.
name|createEncoder
argument_list|()
expr_stmt|;
name|decoder
operator|=
name|encoder
operator|.
name|createMatchingDecoder
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getPayload
specifier|public
name|BytesRef
name|getPayload
parameter_list|()
throws|throws
name|IOException
block|{
name|BytesRef
name|payload
init|=
name|super
operator|.
name|getPayload
argument_list|()
decl_stmt|;
if|if
condition|(
name|payload
operator|==
literal|null
condition|)
block|{
return|return
name|payload
return|;
block|}
else|else
block|{
name|InputStream
name|is
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|payload
operator|.
name|bytes
argument_list|,
name|payload
operator|.
name|offset
argument_list|,
name|payload
operator|.
name|length
argument_list|)
decl_stmt|;
name|decoder
operator|.
name|reInit
argument_list|(
name|is
argument_list|)
expr_stmt|;
name|os
operator|.
name|reset
argument_list|()
expr_stmt|;
name|encoder
operator|.
name|reInit
argument_list|(
name|os
argument_list|)
expr_stmt|;
name|long
name|ordinal
decl_stmt|;
while|while
condition|(
operator|(
name|ordinal
operator|=
name|decoder
operator|.
name|decode
argument_list|()
operator|)
operator|!=
name|IntDecoder
operator|.
name|EOS
condition|)
block|{
name|int
name|newOrdinal
init|=
name|ordinalMap
index|[
operator|(
name|int
operator|)
name|ordinal
index|]
decl_stmt|;
name|encoder
operator|.
name|encode
argument_list|(
name|newOrdinal
argument_list|)
expr_stmt|;
block|}
name|encoder
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// TODO (Facet): avoid copy?
name|byte
name|out
index|[]
init|=
name|os
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|payloadOut
operator|.
name|bytes
operator|=
name|out
expr_stmt|;
name|payloadOut
operator|.
name|offset
operator|=
literal|0
expr_stmt|;
name|payloadOut
operator|.
name|length
operator|=
name|out
operator|.
name|length
expr_stmt|;
return|return
name|payloadOut
return|;
block|}
block|}
block|}
block|}
end_class
end_unit
