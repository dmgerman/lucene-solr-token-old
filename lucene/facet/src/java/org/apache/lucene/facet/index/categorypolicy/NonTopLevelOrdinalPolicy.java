begin_unit
begin_package
DECL|package|org.apache.lucene.facet.index.categorypolicy
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|index
operator|.
name|categorypolicy
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|taxonomy
operator|.
name|TaxonomyReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|taxonomy
operator|.
name|TaxonomyWriter
import|;
end_import
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_comment
comment|/**  * Filter out any "top level" category ordinals.<br> {@link #shouldAdd(int)}.  *   * @lucene.experimental  */
end_comment
begin_class
DECL|class|NonTopLevelOrdinalPolicy
specifier|public
class|class
name|NonTopLevelOrdinalPolicy
implements|implements
name|OrdinalPolicy
block|{
comment|/**    * The taxonomyWriter with which the given ordinals' parent is determined.    */
DECL|field|taxonomyWriter
specifier|private
name|TaxonomyWriter
name|taxonomyWriter
decl_stmt|;
comment|/**    * Constructs a new non-top-level-ordinal-filter. With a given    * taxonomyWriter.    *     */
DECL|method|NonTopLevelOrdinalPolicy
specifier|public
name|NonTopLevelOrdinalPolicy
parameter_list|()
block|{
name|this
operator|.
name|taxonomyWriter
operator|=
literal|null
expr_stmt|;
block|}
comment|/**     * @param taxonomyWriter    *            A relevant taxonomyWriter object, with which ordinals sent to    *            {@link #shouldAdd(int)} are examined.    */
annotation|@
name|Override
DECL|method|init
specifier|public
name|void
name|init
parameter_list|(
name|TaxonomyWriter
name|taxonomyWriter
parameter_list|)
block|{
name|this
operator|.
name|taxonomyWriter
operator|=
name|taxonomyWriter
expr_stmt|;
block|}
comment|/**    * Filters out ordinal which are ROOT or who's parent is ROOT. In order to    * determine if a parent is root, there's a need for    * {@link TaxonomyWriter#getParent(int)}.    */
annotation|@
name|Override
DECL|method|shouldAdd
specifier|public
name|boolean
name|shouldAdd
parameter_list|(
name|int
name|ordinal
parameter_list|)
block|{
if|if
condition|(
name|ordinal
operator|>
name|TaxonomyReader
operator|.
name|ROOT_ORDINAL
condition|)
block|{
try|try
block|{
if|if
condition|(
name|this
operator|.
name|taxonomyWriter
operator|.
name|getParent
argument_list|(
name|ordinal
argument_list|)
operator|>
name|TaxonomyReader
operator|.
name|ROOT_ORDINAL
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
block|}
end_class
end_unit
