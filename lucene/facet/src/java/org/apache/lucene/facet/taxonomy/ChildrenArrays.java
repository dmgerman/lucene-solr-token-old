begin_unit
begin_package
DECL|package|org.apache.lucene.facet.taxonomy
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|taxonomy
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_comment
comment|/**  * Equivalent representations of the taxonomy's parent info,   * used internally for efficient computation of facet results:   * "youngest child" and "oldest sibling"     */
end_comment
begin_class
DECL|class|ChildrenArrays
specifier|public
class|class
name|ChildrenArrays
block|{
DECL|field|youngestChild
DECL|field|olderSibling
specifier|private
specifier|final
name|int
index|[]
name|youngestChild
decl_stmt|,
name|olderSibling
decl_stmt|;
DECL|method|ChildrenArrays
specifier|public
name|ChildrenArrays
parameter_list|(
name|int
index|[]
name|parents
parameter_list|)
block|{
name|this
argument_list|(
name|parents
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|ChildrenArrays
specifier|public
name|ChildrenArrays
parameter_list|(
name|int
index|[]
name|parents
parameter_list|,
name|ChildrenArrays
name|copyFrom
parameter_list|)
block|{
name|youngestChild
operator|=
operator|new
name|int
index|[
name|parents
operator|.
name|length
index|]
expr_stmt|;
name|olderSibling
operator|=
operator|new
name|int
index|[
name|parents
operator|.
name|length
index|]
expr_stmt|;
name|int
name|first
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|copyFrom
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|copyFrom
operator|.
name|getYoungestChildArray
argument_list|()
argument_list|,
literal|0
argument_list|,
name|youngestChild
argument_list|,
literal|0
argument_list|,
name|copyFrom
operator|.
name|getYoungestChildArray
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|copyFrom
operator|.
name|getOlderSiblingArray
argument_list|()
argument_list|,
literal|0
argument_list|,
name|olderSibling
argument_list|,
literal|0
argument_list|,
name|copyFrom
operator|.
name|getOlderSiblingArray
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|first
operator|=
name|copyFrom
operator|.
name|getOlderSiblingArray
argument_list|()
operator|.
name|length
expr_stmt|;
block|}
name|computeArrays
argument_list|(
name|parents
argument_list|,
name|first
argument_list|)
expr_stmt|;
block|}
DECL|method|computeArrays
specifier|private
name|void
name|computeArrays
parameter_list|(
name|int
index|[]
name|parents
parameter_list|,
name|int
name|first
parameter_list|)
block|{
comment|// reset the youngest child of all ordinals. while this should be done only
comment|// for the leaves, we don't know up front which are the leaves, so we reset
comment|// all of them.
for|for
control|(
name|int
name|i
init|=
name|first
init|;
name|i
operator|<
name|parents
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|youngestChild
index|[
name|i
index|]
operator|=
name|TaxonomyReader
operator|.
name|INVALID_ORDINAL
expr_stmt|;
block|}
comment|// the root category has no parent, and therefore no siblings
if|if
condition|(
name|first
operator|==
literal|0
condition|)
block|{
name|first
operator|=
literal|1
expr_stmt|;
name|olderSibling
index|[
literal|0
index|]
operator|=
name|TaxonomyReader
operator|.
name|INVALID_ORDINAL
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
name|first
init|;
name|i
operator|<
name|parents
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
comment|// note that parents[i] is always< i, so the right-hand-side of
comment|// the following line is already set when we get here
name|olderSibling
index|[
name|i
index|]
operator|=
name|youngestChild
index|[
name|parents
index|[
name|i
index|]
index|]
expr_stmt|;
name|youngestChild
index|[
name|parents
index|[
name|i
index|]
index|]
operator|=
name|i
expr_stmt|;
block|}
block|}
comment|/**    * Returns an {@code int[]} the size of the taxonomy listing for each category    * the ordinal of its immediate older sibling (the sibling in the taxonomy    * tree with the highest ordinal below that of the given ordinal). The value    * for a category with no older sibling is {@link TaxonomyReader#INVALID_ORDINAL}.    */
DECL|method|getOlderSiblingArray
specifier|public
name|int
index|[]
name|getOlderSiblingArray
parameter_list|()
block|{
return|return
name|olderSibling
return|;
block|}
comment|/**    * Returns an {@code int[]} the size of the taxonomy listing the ordinal of    * the youngest (highest numbered) child category of each category in the    * taxonomy. The value for a leaf category (a category without children) is    * {@link TaxonomyReader#INVALID_ORDINAL}.    */
DECL|method|getYoungestChildArray
specifier|public
name|int
index|[]
name|getYoungestChildArray
parameter_list|()
block|{
return|return
name|youngestChild
return|;
block|}
block|}
end_class
end_unit
