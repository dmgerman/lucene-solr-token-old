begin_unit
begin_package
DECL|package|org.apache.lucene.facet
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|BinaryDocValuesField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|FieldType
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|SortedSetDocValuesField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|StringField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|sortedset
operator|.
name|SortedSetDocValuesFacetField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|taxonomy
operator|.
name|AssociationFacetField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|taxonomy
operator|.
name|FacetLabel
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|taxonomy
operator|.
name|FloatAssociationFacetField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|taxonomy
operator|.
name|IntAssociationFacetField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|taxonomy
operator|.
name|TaxonomyWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexableField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|ArrayUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IntsRef
import|;
end_import
begin_comment
comment|/** Records per-dimension configuration.  By default a  *  dimension is flat, single valued and does  *  not require count for the dimension; use  *  the setters in this class to change these settings for  *  each dim.  *  *<p><b>NOTE</b>: this configuration is not saved into the  *  index, but it's vital, and up to the application to  *  ensure, that at search time the provided {@code  *  FacetsConfig} matches what was used during indexing.  *  *  @lucene.experimental */
end_comment
begin_class
DECL|class|FacetsConfig
specifier|public
class|class
name|FacetsConfig
block|{
comment|/** Which Lucene field holds the drill-downs and ords (as    *  doc values). */
DECL|field|DEFAULT_INDEX_FIELD_NAME
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_INDEX_FIELD_NAME
init|=
literal|"$facets"
decl_stmt|;
DECL|field|fieldTypes
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|DimConfig
argument_list|>
name|fieldTypes
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Used only for best-effort detection of app mixing
comment|// int/float/bytes in a single indexed field:
DECL|field|assocDimTypes
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|assocDimTypes
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|/** Holds the configuration for one dimension    *    * @lucene.experimental */
DECL|class|DimConfig
specifier|public
specifier|static
specifier|final
class|class
name|DimConfig
block|{
comment|/** True if this dimension is hierarchical. */
DECL|field|hierarchical
specifier|public
name|boolean
name|hierarchical
decl_stmt|;
comment|/** True if this dimension is multi-valued. */
DECL|field|multiValued
specifier|public
name|boolean
name|multiValued
decl_stmt|;
comment|/** True if the count/aggregate for the entire dimension      *  is required, which is unusual (default is false). */
DECL|field|requireDimCount
specifier|public
name|boolean
name|requireDimCount
decl_stmt|;
comment|/** Actual field where this dimension's facet labels      *  should be indexed */
DECL|field|indexFieldName
specifier|public
name|String
name|indexFieldName
init|=
name|DEFAULT_INDEX_FIELD_NAME
decl_stmt|;
comment|/** Default constructor. */
DECL|method|DimConfig
specifier|public
name|DimConfig
parameter_list|()
block|{     }
block|}
comment|/** Default per-dimension configuration. */
DECL|field|DEFAULT_DIM_CONFIG
specifier|public
specifier|final
specifier|static
name|DimConfig
name|DEFAULT_DIM_CONFIG
init|=
operator|new
name|DimConfig
argument_list|()
decl_stmt|;
comment|/** Default constructor. */
DECL|method|FacetsConfig
specifier|public
name|FacetsConfig
parameter_list|()
block|{   }
comment|/** Get the default configuration for new dimensions.  Useful when    *  the dimension is not known beforehand and may need different     *  global default settings, like {@code multivalue =    *  true}.    *    *  @return The default configuration to be used for dimensions that     *  are not yet set in the {@link FacetsConfig} */
DECL|method|getDefaultDimConfig
specifier|protected
name|DimConfig
name|getDefaultDimConfig
parameter_list|()
block|{
return|return
name|DEFAULT_DIM_CONFIG
return|;
block|}
comment|/** Get the current configuration for a dimension. */
DECL|method|getDimConfig
specifier|public
specifier|synchronized
name|DimConfig
name|getDimConfig
parameter_list|(
name|String
name|dimName
parameter_list|)
block|{
name|DimConfig
name|ft
init|=
name|fieldTypes
operator|.
name|get
argument_list|(
name|dimName
argument_list|)
decl_stmt|;
if|if
condition|(
name|ft
operator|==
literal|null
condition|)
block|{
name|ft
operator|=
name|getDefaultDimConfig
argument_list|()
expr_stmt|;
block|}
return|return
name|ft
return|;
block|}
comment|/** Pass {@code true} if this dimension is hierarchical    *  (has depth> 1 paths). */
DECL|method|setHierarchical
specifier|public
specifier|synchronized
name|void
name|setHierarchical
parameter_list|(
name|String
name|dimName
parameter_list|,
name|boolean
name|v
parameter_list|)
block|{
name|DimConfig
name|ft
init|=
name|fieldTypes
operator|.
name|get
argument_list|(
name|dimName
argument_list|)
decl_stmt|;
if|if
condition|(
name|ft
operator|==
literal|null
condition|)
block|{
name|ft
operator|=
operator|new
name|DimConfig
argument_list|()
expr_stmt|;
name|fieldTypes
operator|.
name|put
argument_list|(
name|dimName
argument_list|,
name|ft
argument_list|)
expr_stmt|;
block|}
name|ft
operator|.
name|hierarchical
operator|=
name|v
expr_stmt|;
block|}
comment|/** Pass {@code true} if this dimension may have more than    *  one value per document. */
DECL|method|setMultiValued
specifier|public
specifier|synchronized
name|void
name|setMultiValued
parameter_list|(
name|String
name|dimName
parameter_list|,
name|boolean
name|v
parameter_list|)
block|{
name|DimConfig
name|ft
init|=
name|fieldTypes
operator|.
name|get
argument_list|(
name|dimName
argument_list|)
decl_stmt|;
if|if
condition|(
name|ft
operator|==
literal|null
condition|)
block|{
name|ft
operator|=
operator|new
name|DimConfig
argument_list|()
expr_stmt|;
name|fieldTypes
operator|.
name|put
argument_list|(
name|dimName
argument_list|,
name|ft
argument_list|)
expr_stmt|;
block|}
name|ft
operator|.
name|multiValued
operator|=
name|v
expr_stmt|;
block|}
comment|/** Pass {@code true} if at search time you require    *  accurate counts of the dimension, i.e. how many    *  hits have this dimension. */
DECL|method|setRequireDimCount
specifier|public
specifier|synchronized
name|void
name|setRequireDimCount
parameter_list|(
name|String
name|dimName
parameter_list|,
name|boolean
name|v
parameter_list|)
block|{
name|DimConfig
name|ft
init|=
name|fieldTypes
operator|.
name|get
argument_list|(
name|dimName
argument_list|)
decl_stmt|;
if|if
condition|(
name|ft
operator|==
literal|null
condition|)
block|{
name|ft
operator|=
operator|new
name|DimConfig
argument_list|()
expr_stmt|;
name|fieldTypes
operator|.
name|put
argument_list|(
name|dimName
argument_list|,
name|ft
argument_list|)
expr_stmt|;
block|}
name|ft
operator|.
name|requireDimCount
operator|=
name|v
expr_stmt|;
block|}
comment|/** Specify which index field name should hold the    *  ordinals for this dimension; this is only used by the    *  taxonomy based facet methods. */
DECL|method|setIndexFieldName
specifier|public
specifier|synchronized
name|void
name|setIndexFieldName
parameter_list|(
name|String
name|dimName
parameter_list|,
name|String
name|indexFieldName
parameter_list|)
block|{
name|DimConfig
name|ft
init|=
name|fieldTypes
operator|.
name|get
argument_list|(
name|dimName
argument_list|)
decl_stmt|;
if|if
condition|(
name|ft
operator|==
literal|null
condition|)
block|{
name|ft
operator|=
operator|new
name|DimConfig
argument_list|()
expr_stmt|;
name|fieldTypes
operator|.
name|put
argument_list|(
name|dimName
argument_list|,
name|ft
argument_list|)
expr_stmt|;
block|}
name|ft
operator|.
name|indexFieldName
operator|=
name|indexFieldName
expr_stmt|;
block|}
comment|/** Returns map of field name to {@link DimConfig}. */
DECL|method|getDimConfigs
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|DimConfig
argument_list|>
name|getDimConfigs
parameter_list|()
block|{
return|return
name|fieldTypes
return|;
block|}
DECL|method|checkSeen
specifier|private
specifier|static
name|void
name|checkSeen
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|seenDims
parameter_list|,
name|String
name|dim
parameter_list|)
block|{
if|if
condition|(
name|seenDims
operator|.
name|contains
argument_list|(
name|dim
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"dimension \""
operator|+
name|dim
operator|+
literal|"\" is not multiValued, but it appears more than once in this document"
argument_list|)
throw|;
block|}
name|seenDims
operator|.
name|add
argument_list|(
name|dim
argument_list|)
expr_stmt|;
block|}
comment|/**    * Translates any added {@link FacetField}s into normal fields for indexing;    * only use this version if you did not add any taxonomy-based fields (    * {@link FacetField} or {@link AssociationFacetField}).    *     *<p>    *<b>NOTE:</b> you should add the returned document to IndexWriter, not the    * input one!    */
DECL|method|build
specifier|public
name|Document
name|build
parameter_list|(
name|Document
name|doc
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|build
argument_list|(
literal|null
argument_list|,
name|doc
argument_list|)
return|;
block|}
comment|/**    * Translates any added {@link FacetField}s into normal fields for indexing.    *     *<p>    *<b>NOTE:</b> you should add the returned document to IndexWriter, not the    * input one!    */
DECL|method|build
specifier|public
name|Document
name|build
parameter_list|(
name|TaxonomyWriter
name|taxoWriter
parameter_list|,
name|Document
name|doc
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Find all FacetFields, collated by the actual field:
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|FacetField
argument_list|>
argument_list|>
name|byField
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// ... and also all SortedSetDocValuesFacetFields:
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|SortedSetDocValuesFacetField
argument_list|>
argument_list|>
name|dvByField
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// ... and also all AssociationFacetFields
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|AssociationFacetField
argument_list|>
argument_list|>
name|assocByField
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|seenDims
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|IndexableField
name|field
range|:
name|doc
operator|.
name|indexableFields
argument_list|()
control|)
block|{
if|if
condition|(
name|field
operator|.
name|fieldType
argument_list|()
operator|==
name|FacetField
operator|.
name|TYPE
condition|)
block|{
name|FacetField
name|facetField
init|=
operator|(
name|FacetField
operator|)
name|field
decl_stmt|;
name|FacetsConfig
operator|.
name|DimConfig
name|dimConfig
init|=
name|getDimConfig
argument_list|(
name|facetField
operator|.
name|dim
argument_list|)
decl_stmt|;
if|if
condition|(
name|dimConfig
operator|.
name|multiValued
operator|==
literal|false
condition|)
block|{
name|checkSeen
argument_list|(
name|seenDims
argument_list|,
name|facetField
operator|.
name|dim
argument_list|)
expr_stmt|;
block|}
name|String
name|indexFieldName
init|=
name|dimConfig
operator|.
name|indexFieldName
decl_stmt|;
name|List
argument_list|<
name|FacetField
argument_list|>
name|fields
init|=
name|byField
operator|.
name|get
argument_list|(
name|indexFieldName
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
block|{
name|fields
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|byField
operator|.
name|put
argument_list|(
name|indexFieldName
argument_list|,
name|fields
argument_list|)
expr_stmt|;
block|}
name|fields
operator|.
name|add
argument_list|(
name|facetField
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|field
operator|.
name|fieldType
argument_list|()
operator|==
name|SortedSetDocValuesFacetField
operator|.
name|TYPE
condition|)
block|{
name|SortedSetDocValuesFacetField
name|facetField
init|=
operator|(
name|SortedSetDocValuesFacetField
operator|)
name|field
decl_stmt|;
name|FacetsConfig
operator|.
name|DimConfig
name|dimConfig
init|=
name|getDimConfig
argument_list|(
name|facetField
operator|.
name|dim
argument_list|)
decl_stmt|;
if|if
condition|(
name|dimConfig
operator|.
name|multiValued
operator|==
literal|false
condition|)
block|{
name|checkSeen
argument_list|(
name|seenDims
argument_list|,
name|facetField
operator|.
name|dim
argument_list|)
expr_stmt|;
block|}
name|String
name|indexFieldName
init|=
name|dimConfig
operator|.
name|indexFieldName
decl_stmt|;
name|List
argument_list|<
name|SortedSetDocValuesFacetField
argument_list|>
name|fields
init|=
name|dvByField
operator|.
name|get
argument_list|(
name|indexFieldName
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
block|{
name|fields
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|dvByField
operator|.
name|put
argument_list|(
name|indexFieldName
argument_list|,
name|fields
argument_list|)
expr_stmt|;
block|}
name|fields
operator|.
name|add
argument_list|(
name|facetField
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|field
operator|.
name|fieldType
argument_list|()
operator|==
name|AssociationFacetField
operator|.
name|TYPE
condition|)
block|{
name|AssociationFacetField
name|facetField
init|=
operator|(
name|AssociationFacetField
operator|)
name|field
decl_stmt|;
name|FacetsConfig
operator|.
name|DimConfig
name|dimConfig
init|=
name|getDimConfig
argument_list|(
name|facetField
operator|.
name|dim
argument_list|)
decl_stmt|;
if|if
condition|(
name|dimConfig
operator|.
name|multiValued
operator|==
literal|false
condition|)
block|{
name|checkSeen
argument_list|(
name|seenDims
argument_list|,
name|facetField
operator|.
name|dim
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|dimConfig
operator|.
name|hierarchical
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"AssociationFacetField cannot be hierarchical (dim=\""
operator|+
name|facetField
operator|.
name|dim
operator|+
literal|"\")"
argument_list|)
throw|;
block|}
if|if
condition|(
name|dimConfig
operator|.
name|requireDimCount
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"AssociationFacetField cannot requireDimCount (dim=\""
operator|+
name|facetField
operator|.
name|dim
operator|+
literal|"\")"
argument_list|)
throw|;
block|}
name|String
name|indexFieldName
init|=
name|dimConfig
operator|.
name|indexFieldName
decl_stmt|;
name|List
argument_list|<
name|AssociationFacetField
argument_list|>
name|fields
init|=
name|assocByField
operator|.
name|get
argument_list|(
name|indexFieldName
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
block|{
name|fields
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|assocByField
operator|.
name|put
argument_list|(
name|indexFieldName
argument_list|,
name|fields
argument_list|)
expr_stmt|;
block|}
name|fields
operator|.
name|add
argument_list|(
name|facetField
argument_list|)
expr_stmt|;
comment|// Best effort: detect mis-matched types in same
comment|// indexed field:
name|String
name|type
decl_stmt|;
if|if
condition|(
name|facetField
operator|instanceof
name|IntAssociationFacetField
condition|)
block|{
name|type
operator|=
literal|"int"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|facetField
operator|instanceof
name|FloatAssociationFacetField
condition|)
block|{
name|type
operator|=
literal|"float"
expr_stmt|;
block|}
else|else
block|{
name|type
operator|=
literal|"bytes"
expr_stmt|;
block|}
comment|// NOTE: not thread safe, but this is just best effort:
name|String
name|curType
init|=
name|assocDimTypes
operator|.
name|get
argument_list|(
name|indexFieldName
argument_list|)
decl_stmt|;
if|if
condition|(
name|curType
operator|==
literal|null
condition|)
block|{
name|assocDimTypes
operator|.
name|put
argument_list|(
name|indexFieldName
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|curType
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"mixing incompatible types of AssocationFacetField ("
operator|+
name|curType
operator|+
literal|" and "
operator|+
name|type
operator|+
literal|") in indexed field \""
operator|+
name|indexFieldName
operator|+
literal|"\"; use FacetsConfig to change the indexFieldName for each dimension"
argument_list|)
throw|;
block|}
block|}
block|}
name|Document
name|result
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|processFacetFields
argument_list|(
name|taxoWriter
argument_list|,
name|byField
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|processSSDVFacetFields
argument_list|(
name|dvByField
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|processAssocFacetFields
argument_list|(
name|taxoWriter
argument_list|,
name|assocByField
argument_list|,
name|result
argument_list|)
expr_stmt|;
comment|//System.out.println("add stored: " + addedStoredFields);
for|for
control|(
name|Field
name|field
range|:
name|doc
operator|.
name|getFields
argument_list|()
control|)
block|{
name|FieldType
name|ft
init|=
name|field
operator|.
name|fieldType
argument_list|()
decl_stmt|;
if|if
condition|(
name|ft
operator|!=
name|FacetField
operator|.
name|TYPE
operator|&&
name|ft
operator|!=
name|SortedSetDocValuesFacetField
operator|.
name|TYPE
operator|&&
name|ft
operator|!=
name|AssociationFacetField
operator|.
name|TYPE
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|//System.out.println("all indexed: " + allIndexedFields);
comment|//System.out.println("all stored: " + allStoredFields);
return|return
name|result
return|;
block|}
DECL|method|processFacetFields
specifier|private
name|void
name|processFacetFields
parameter_list|(
name|TaxonomyWriter
name|taxoWriter
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|FacetField
argument_list|>
argument_list|>
name|byField
parameter_list|,
name|Document
name|doc
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|FacetField
argument_list|>
argument_list|>
name|ent
range|:
name|byField
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|indexFieldName
init|=
name|ent
operator|.
name|getKey
argument_list|()
decl_stmt|;
comment|//System.out.println("  indexFieldName=" + indexFieldName + " fields=" + ent.getValue());
name|IntsRef
name|ordinals
init|=
operator|new
name|IntsRef
argument_list|(
literal|32
argument_list|)
decl_stmt|;
for|for
control|(
name|FacetField
name|facetField
range|:
name|ent
operator|.
name|getValue
argument_list|()
control|)
block|{
name|FacetsConfig
operator|.
name|DimConfig
name|ft
init|=
name|getDimConfig
argument_list|(
name|facetField
operator|.
name|dim
argument_list|)
decl_stmt|;
if|if
condition|(
name|facetField
operator|.
name|path
operator|.
name|length
operator|>
literal|1
operator|&&
name|ft
operator|.
name|hierarchical
operator|==
literal|false
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"dimension \""
operator|+
name|facetField
operator|.
name|dim
operator|+
literal|"\" is not hierarchical yet has "
operator|+
name|facetField
operator|.
name|path
operator|.
name|length
operator|+
literal|" components"
argument_list|)
throw|;
block|}
name|FacetLabel
name|cp
init|=
operator|new
name|FacetLabel
argument_list|(
name|facetField
operator|.
name|dim
argument_list|,
name|facetField
operator|.
name|path
argument_list|)
decl_stmt|;
name|checkTaxoWriter
argument_list|(
name|taxoWriter
argument_list|)
expr_stmt|;
name|int
name|ordinal
init|=
name|taxoWriter
operator|.
name|addCategory
argument_list|(
name|cp
argument_list|)
decl_stmt|;
if|if
condition|(
name|ordinals
operator|.
name|length
operator|==
name|ordinals
operator|.
name|ints
operator|.
name|length
condition|)
block|{
name|ordinals
operator|.
name|grow
argument_list|(
name|ordinals
operator|.
name|length
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
name|ordinals
operator|.
name|ints
index|[
name|ordinals
operator|.
name|length
operator|++
index|]
operator|=
name|ordinal
expr_stmt|;
comment|//System.out.println("ords[" + (ordinals.length-1) + "]=" + ordinal);
comment|//System.out.println("  add cp=" + cp);
if|if
condition|(
name|ft
operator|.
name|multiValued
operator|&&
operator|(
name|ft
operator|.
name|hierarchical
operator|||
name|ft
operator|.
name|requireDimCount
operator|)
condition|)
block|{
comment|//System.out.println("  add parents");
comment|// Add all parents too:
name|int
name|parent
init|=
name|taxoWriter
operator|.
name|getParent
argument_list|(
name|ordinal
argument_list|)
decl_stmt|;
while|while
condition|(
name|parent
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|ordinals
operator|.
name|ints
operator|.
name|length
operator|==
name|ordinals
operator|.
name|length
condition|)
block|{
name|ordinals
operator|.
name|grow
argument_list|(
name|ordinals
operator|.
name|length
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
name|ordinals
operator|.
name|ints
index|[
name|ordinals
operator|.
name|length
operator|++
index|]
operator|=
name|parent
expr_stmt|;
name|parent
operator|=
name|taxoWriter
operator|.
name|getParent
argument_list|(
name|parent
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ft
operator|.
name|requireDimCount
operator|==
literal|false
condition|)
block|{
comment|// Remove last (dimension) ord:
name|ordinals
operator|.
name|length
operator|--
expr_stmt|;
block|}
block|}
comment|// Drill down:
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|cp
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|doc
operator|.
name|add
argument_list|(
operator|new
name|StringField
argument_list|(
name|indexFieldName
argument_list|,
name|pathToString
argument_list|(
name|cp
operator|.
name|components
argument_list|,
name|i
argument_list|)
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Facet counts:
comment|// DocValues are considered stored fields:
name|doc
operator|.
name|add
argument_list|(
operator|new
name|BinaryDocValuesField
argument_list|(
name|indexFieldName
argument_list|,
name|dedupAndEncode
argument_list|(
name|ordinals
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|processSSDVFacetFields
specifier|private
name|void
name|processSSDVFacetFields
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|SortedSetDocValuesFacetField
argument_list|>
argument_list|>
name|byField
parameter_list|,
name|Document
name|doc
parameter_list|)
throws|throws
name|IOException
block|{
comment|//System.out.println("process SSDV: " + byField);
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|SortedSetDocValuesFacetField
argument_list|>
argument_list|>
name|ent
range|:
name|byField
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|indexFieldName
init|=
name|ent
operator|.
name|getKey
argument_list|()
decl_stmt|;
comment|//System.out.println("  field=" + indexFieldName);
for|for
control|(
name|SortedSetDocValuesFacetField
name|facetField
range|:
name|ent
operator|.
name|getValue
argument_list|()
control|)
block|{
name|FacetLabel
name|cp
init|=
operator|new
name|FacetLabel
argument_list|(
name|facetField
operator|.
name|dim
argument_list|,
name|facetField
operator|.
name|label
argument_list|)
decl_stmt|;
name|String
name|fullPath
init|=
name|pathToString
argument_list|(
name|cp
operator|.
name|components
argument_list|,
name|cp
operator|.
name|length
argument_list|)
decl_stmt|;
comment|//System.out.println("add " + fullPath);
comment|// For facet counts:
name|doc
operator|.
name|add
argument_list|(
operator|new
name|SortedSetDocValuesField
argument_list|(
name|indexFieldName
argument_list|,
operator|new
name|BytesRef
argument_list|(
name|fullPath
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// For drill-down:
name|doc
operator|.
name|add
argument_list|(
operator|new
name|StringField
argument_list|(
name|indexFieldName
argument_list|,
name|fullPath
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|StringField
argument_list|(
name|indexFieldName
argument_list|,
name|facetField
operator|.
name|dim
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|processAssocFacetFields
specifier|private
name|void
name|processAssocFacetFields
parameter_list|(
name|TaxonomyWriter
name|taxoWriter
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|AssociationFacetField
argument_list|>
argument_list|>
name|byField
parameter_list|,
name|Document
name|doc
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|AssociationFacetField
argument_list|>
argument_list|>
name|ent
range|:
name|byField
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|byte
index|[]
name|bytes
init|=
operator|new
name|byte
index|[
literal|16
index|]
decl_stmt|;
name|int
name|upto
init|=
literal|0
decl_stmt|;
name|String
name|indexFieldName
init|=
name|ent
operator|.
name|getKey
argument_list|()
decl_stmt|;
for|for
control|(
name|AssociationFacetField
name|field
range|:
name|ent
operator|.
name|getValue
argument_list|()
control|)
block|{
comment|// NOTE: we don't add parents for associations
name|checkTaxoWriter
argument_list|(
name|taxoWriter
argument_list|)
expr_stmt|;
name|int
name|ordinal
init|=
name|taxoWriter
operator|.
name|addCategory
argument_list|(
operator|new
name|FacetLabel
argument_list|(
name|field
operator|.
name|dim
argument_list|,
name|field
operator|.
name|path
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|upto
operator|+
literal|4
operator|>
name|bytes
operator|.
name|length
condition|)
block|{
name|bytes
operator|=
name|ArrayUtil
operator|.
name|grow
argument_list|(
name|bytes
argument_list|,
name|upto
operator|+
literal|4
argument_list|)
expr_stmt|;
block|}
comment|// big-endian:
name|bytes
index|[
name|upto
operator|++
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|ordinal
operator|>>
literal|24
argument_list|)
expr_stmt|;
name|bytes
index|[
name|upto
operator|++
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|ordinal
operator|>>
literal|16
argument_list|)
expr_stmt|;
name|bytes
index|[
name|upto
operator|++
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|ordinal
operator|>>
literal|8
argument_list|)
expr_stmt|;
name|bytes
index|[
name|upto
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
name|ordinal
expr_stmt|;
if|if
condition|(
name|upto
operator|+
name|field
operator|.
name|assoc
operator|.
name|length
operator|>
name|bytes
operator|.
name|length
condition|)
block|{
name|bytes
operator|=
name|ArrayUtil
operator|.
name|grow
argument_list|(
name|bytes
argument_list|,
name|upto
operator|+
name|field
operator|.
name|assoc
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|arraycopy
argument_list|(
name|field
operator|.
name|assoc
operator|.
name|bytes
argument_list|,
name|field
operator|.
name|assoc
operator|.
name|offset
argument_list|,
name|bytes
argument_list|,
name|upto
argument_list|,
name|field
operator|.
name|assoc
operator|.
name|length
argument_list|)
expr_stmt|;
name|upto
operator|+=
name|field
operator|.
name|assoc
operator|.
name|length
expr_stmt|;
comment|// Drill down:
name|FacetLabel
name|cp
init|=
operator|new
name|FacetLabel
argument_list|(
name|field
operator|.
name|dim
argument_list|,
name|field
operator|.
name|path
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|cp
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|doc
operator|.
name|add
argument_list|(
operator|new
name|StringField
argument_list|(
name|indexFieldName
argument_list|,
name|pathToString
argument_list|(
name|cp
operator|.
name|components
argument_list|,
name|i
argument_list|)
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|doc
operator|.
name|add
argument_list|(
operator|new
name|BinaryDocValuesField
argument_list|(
name|indexFieldName
argument_list|,
operator|new
name|BytesRef
argument_list|(
name|bytes
argument_list|,
literal|0
argument_list|,
name|upto
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Encodes ordinals into a BytesRef; expert: subclass can    *  override this to change encoding. */
DECL|method|dedupAndEncode
specifier|protected
name|BytesRef
name|dedupAndEncode
parameter_list|(
name|IntsRef
name|ordinals
parameter_list|)
block|{
name|Arrays
operator|.
name|sort
argument_list|(
name|ordinals
operator|.
name|ints
argument_list|,
name|ordinals
operator|.
name|offset
argument_list|,
name|ordinals
operator|.
name|length
argument_list|)
expr_stmt|;
name|byte
index|[]
name|bytes
init|=
operator|new
name|byte
index|[
literal|5
operator|*
name|ordinals
operator|.
name|length
index|]
decl_stmt|;
name|int
name|lastOrd
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|upto
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ordinals
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|int
name|ord
init|=
name|ordinals
operator|.
name|ints
index|[
name|ordinals
operator|.
name|offset
operator|+
name|i
index|]
decl_stmt|;
comment|// ord could be == lastOrd, so we must dedup:
if|if
condition|(
name|ord
operator|>
name|lastOrd
condition|)
block|{
name|int
name|delta
decl_stmt|;
if|if
condition|(
name|lastOrd
operator|==
operator|-
literal|1
condition|)
block|{
name|delta
operator|=
name|ord
expr_stmt|;
block|}
else|else
block|{
name|delta
operator|=
name|ord
operator|-
name|lastOrd
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|delta
operator|&
operator|~
literal|0x7F
operator|)
operator|==
literal|0
condition|)
block|{
name|bytes
index|[
name|upto
index|]
operator|=
operator|(
name|byte
operator|)
name|delta
expr_stmt|;
name|upto
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|delta
operator|&
operator|~
literal|0x3FFF
operator|)
operator|==
literal|0
condition|)
block|{
name|bytes
index|[
name|upto
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
literal|0x80
operator||
operator|(
operator|(
name|delta
operator|&
literal|0x3F80
operator|)
operator|>>
literal|7
operator|)
argument_list|)
expr_stmt|;
name|bytes
index|[
name|upto
operator|+
literal|1
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|delta
operator|&
literal|0x7F
argument_list|)
expr_stmt|;
name|upto
operator|+=
literal|2
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|delta
operator|&
operator|~
literal|0x1FFFFF
operator|)
operator|==
literal|0
condition|)
block|{
name|bytes
index|[
name|upto
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
literal|0x80
operator||
operator|(
operator|(
name|delta
operator|&
literal|0x1FC000
operator|)
operator|>>
literal|14
operator|)
argument_list|)
expr_stmt|;
name|bytes
index|[
name|upto
operator|+
literal|1
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
literal|0x80
operator||
operator|(
operator|(
name|delta
operator|&
literal|0x3F80
operator|)
operator|>>
literal|7
operator|)
argument_list|)
expr_stmt|;
name|bytes
index|[
name|upto
operator|+
literal|2
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|delta
operator|&
literal|0x7F
argument_list|)
expr_stmt|;
name|upto
operator|+=
literal|3
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|delta
operator|&
operator|~
literal|0xFFFFFFF
operator|)
operator|==
literal|0
condition|)
block|{
name|bytes
index|[
name|upto
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
literal|0x80
operator||
operator|(
operator|(
name|delta
operator|&
literal|0xFE00000
operator|)
operator|>>
literal|21
operator|)
argument_list|)
expr_stmt|;
name|bytes
index|[
name|upto
operator|+
literal|1
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
literal|0x80
operator||
operator|(
operator|(
name|delta
operator|&
literal|0x1FC000
operator|)
operator|>>
literal|14
operator|)
argument_list|)
expr_stmt|;
name|bytes
index|[
name|upto
operator|+
literal|2
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
literal|0x80
operator||
operator|(
operator|(
name|delta
operator|&
literal|0x3F80
operator|)
operator|>>
literal|7
operator|)
argument_list|)
expr_stmt|;
name|bytes
index|[
name|upto
operator|+
literal|3
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|delta
operator|&
literal|0x7F
argument_list|)
expr_stmt|;
name|upto
operator|+=
literal|4
expr_stmt|;
block|}
else|else
block|{
name|bytes
index|[
name|upto
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
literal|0x80
operator||
operator|(
operator|(
name|delta
operator|&
literal|0xF0000000
operator|)
operator|>>
literal|28
operator|)
argument_list|)
expr_stmt|;
name|bytes
index|[
name|upto
operator|+
literal|1
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
literal|0x80
operator||
operator|(
operator|(
name|delta
operator|&
literal|0xFE00000
operator|)
operator|>>
literal|21
operator|)
argument_list|)
expr_stmt|;
name|bytes
index|[
name|upto
operator|+
literal|2
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
literal|0x80
operator||
operator|(
operator|(
name|delta
operator|&
literal|0x1FC000
operator|)
operator|>>
literal|14
operator|)
argument_list|)
expr_stmt|;
name|bytes
index|[
name|upto
operator|+
literal|3
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
literal|0x80
operator||
operator|(
operator|(
name|delta
operator|&
literal|0x3F80
operator|)
operator|>>
literal|7
operator|)
argument_list|)
expr_stmt|;
name|bytes
index|[
name|upto
operator|+
literal|4
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|delta
operator|&
literal|0x7F
argument_list|)
expr_stmt|;
name|upto
operator|+=
literal|5
expr_stmt|;
block|}
name|lastOrd
operator|=
name|ord
expr_stmt|;
block|}
block|}
return|return
operator|new
name|BytesRef
argument_list|(
name|bytes
argument_list|,
literal|0
argument_list|,
name|upto
argument_list|)
return|;
block|}
DECL|method|checkTaxoWriter
specifier|private
name|void
name|checkTaxoWriter
parameter_list|(
name|TaxonomyWriter
name|taxoWriter
parameter_list|)
block|{
if|if
condition|(
name|taxoWriter
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"a non-null TaxonomyWriter must be provided when indexing FacetField or AssociationFacetField"
argument_list|)
throw|;
block|}
block|}
comment|// Joins the path components together:
DECL|field|DELIM_CHAR
specifier|private
specifier|static
specifier|final
name|char
name|DELIM_CHAR
init|=
literal|'\u001F'
decl_stmt|;
comment|// Escapes any occurrence of the path component inside the label:
DECL|field|ESCAPE_CHAR
specifier|private
specifier|static
specifier|final
name|char
name|ESCAPE_CHAR
init|=
literal|'\u001E'
decl_stmt|;
comment|/** Turns a dim + path into an encoded string. */
DECL|method|pathToString
specifier|public
specifier|static
name|String
name|pathToString
parameter_list|(
name|String
name|dim
parameter_list|,
name|String
index|[]
name|path
parameter_list|)
block|{
name|String
index|[]
name|fullPath
init|=
operator|new
name|String
index|[
literal|1
operator|+
name|path
operator|.
name|length
index|]
decl_stmt|;
name|fullPath
index|[
literal|0
index|]
operator|=
name|dim
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|path
argument_list|,
literal|0
argument_list|,
name|fullPath
argument_list|,
literal|1
argument_list|,
name|path
operator|.
name|length
argument_list|)
expr_stmt|;
return|return
name|pathToString
argument_list|(
name|fullPath
argument_list|,
name|fullPath
operator|.
name|length
argument_list|)
return|;
block|}
comment|/** Turns a dim + path into an encoded string. */
DECL|method|pathToString
specifier|public
specifier|static
name|String
name|pathToString
parameter_list|(
name|String
index|[]
name|path
parameter_list|)
block|{
return|return
name|pathToString
argument_list|(
name|path
argument_list|,
name|path
operator|.
name|length
argument_list|)
return|;
block|}
comment|/** Turns the first {@code length} elements of {@code    * path} into an encoded string. */
DECL|method|pathToString
specifier|public
specifier|static
name|String
name|pathToString
parameter_list|(
name|String
index|[]
name|path
parameter_list|,
name|int
name|length
parameter_list|)
block|{
if|if
condition|(
name|length
operator|==
literal|0
condition|)
block|{
return|return
literal|""
return|;
block|}
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|s
init|=
name|path
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|s
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"each path component must have length> 0 (got: \"\")"
argument_list|)
throw|;
block|}
name|int
name|numChars
init|=
name|s
operator|.
name|length
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|numChars
condition|;
name|j
operator|++
control|)
block|{
name|char
name|ch
init|=
name|s
operator|.
name|charAt
argument_list|(
name|j
argument_list|)
decl_stmt|;
if|if
condition|(
name|ch
operator|==
name|DELIM_CHAR
operator|||
name|ch
operator|==
name|ESCAPE_CHAR
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|ESCAPE_CHAR
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|ch
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|DELIM_CHAR
argument_list|)
expr_stmt|;
block|}
comment|// Trim off last DELIM_CHAR:
name|sb
operator|.
name|setLength
argument_list|(
name|sb
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/** Turns an encoded string (from a previous call to {@link    *  #pathToString}) back into the original {@code    *  String[]}. */
DECL|method|stringToPath
specifier|public
specifier|static
name|String
index|[]
name|stringToPath
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|parts
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|length
init|=
name|s
operator|.
name|length
argument_list|()
decl_stmt|;
if|if
condition|(
name|length
operator|==
literal|0
condition|)
block|{
return|return
operator|new
name|String
index|[
literal|0
index|]
return|;
block|}
name|char
index|[]
name|buffer
init|=
operator|new
name|char
index|[
name|length
index|]
decl_stmt|;
name|int
name|upto
init|=
literal|0
decl_stmt|;
name|boolean
name|lastEscape
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
name|char
name|ch
init|=
name|s
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|lastEscape
condition|)
block|{
name|buffer
index|[
name|upto
operator|++
index|]
operator|=
name|ch
expr_stmt|;
name|lastEscape
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ch
operator|==
name|ESCAPE_CHAR
condition|)
block|{
name|lastEscape
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ch
operator|==
name|DELIM_CHAR
condition|)
block|{
name|parts
operator|.
name|add
argument_list|(
operator|new
name|String
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|upto
argument_list|)
argument_list|)
expr_stmt|;
name|upto
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
name|buffer
index|[
name|upto
operator|++
index|]
operator|=
name|ch
expr_stmt|;
block|}
block|}
name|parts
operator|.
name|add
argument_list|(
operator|new
name|String
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|upto
argument_list|)
argument_list|)
expr_stmt|;
assert|assert
operator|!
name|lastEscape
assert|;
return|return
name|parts
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|parts
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
block|}
end_class
end_unit
