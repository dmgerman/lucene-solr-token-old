begin_unit
begin_package
DECL|package|org.apache.lucene.facet.index.attributes
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|index
operator|.
name|attributes
package|;
end_package
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|AttributeImpl
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|taxonomy
operator|.
name|CategoryPath
import|;
end_import
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_comment
comment|/**  * An implementation of {@link CategoryAttribute}.  *   * @lucene.experimental  */
end_comment
begin_class
DECL|class|CategoryAttributeImpl
specifier|public
specifier|final
class|class
name|CategoryAttributeImpl
extends|extends
name|AttributeImpl
implements|implements
name|CategoryAttribute
block|{
comment|/**    * The category path instance.    */
DECL|field|categoryPath
specifier|protected
name|CategoryPath
name|categoryPath
decl_stmt|;
comment|/**    * A map of properties associated to the current category path.    */
DECL|field|properties
specifier|protected
name|HashMap
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|CategoryProperty
argument_list|>
argument_list|,
name|CategoryProperty
argument_list|>
name|properties
decl_stmt|;
comment|/**    * Construct an empty CategoryAttributeImpl.    */
DECL|method|CategoryAttributeImpl
specifier|public
name|CategoryAttributeImpl
parameter_list|()
block|{
comment|// do nothing
block|}
comment|/**    * Construct a CategoryAttributeImpl with the given CategoryPath.    *     * @param categoryPath    *            The category path to use.    */
DECL|method|CategoryAttributeImpl
specifier|public
name|CategoryAttributeImpl
parameter_list|(
name|CategoryPath
name|categoryPath
parameter_list|)
block|{
name|setCategoryPath
argument_list|(
name|categoryPath
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|set
specifier|public
name|void
name|set
parameter_list|(
name|CategoryAttribute
name|other
parameter_list|)
block|{
operator|(
operator|(
name|CategoryAttributeImpl
operator|)
name|other
operator|)
operator|.
name|copyTo
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
comment|/**    * Returns the category path value.    *     * @return The category path last assigned to this attribute, or null if    *         none has been assigned.    */
annotation|@
name|Override
DECL|method|getCategoryPath
specifier|public
name|CategoryPath
name|getCategoryPath
parameter_list|()
block|{
return|return
name|categoryPath
return|;
block|}
annotation|@
name|Override
DECL|method|setCategoryPath
specifier|public
name|void
name|setCategoryPath
parameter_list|(
name|CategoryPath
name|cp
parameter_list|)
block|{
name|categoryPath
operator|=
name|cp
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|addProperty
specifier|public
name|void
name|addProperty
parameter_list|(
name|CategoryProperty
name|property
parameter_list|)
throws|throws
name|UnsupportedOperationException
block|{
if|if
condition|(
name|properties
operator|==
literal|null
condition|)
block|{
name|properties
operator|=
operator|new
name|HashMap
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|CategoryProperty
argument_list|>
argument_list|,
name|CategoryProperty
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|CategoryProperty
name|existing
init|=
name|properties
operator|.
name|get
argument_list|(
name|property
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|existing
operator|==
literal|null
condition|)
block|{
name|properties
operator|.
name|put
argument_list|(
name|property
operator|.
name|getClass
argument_list|()
argument_list|,
name|property
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|existing
operator|.
name|merge
argument_list|(
name|property
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getProperty
specifier|public
name|CategoryProperty
name|getProperty
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|CategoryProperty
argument_list|>
name|propertyClass
parameter_list|)
block|{
if|if
condition|(
name|properties
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|properties
operator|.
name|get
argument_list|(
name|propertyClass
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getProperty
specifier|public
name|CategoryProperty
name|getProperty
parameter_list|(
name|Collection
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|CategoryProperty
argument_list|>
argument_list|>
name|propertyClasses
parameter_list|)
block|{
if|if
condition|(
name|properties
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
for|for
control|(
name|Class
argument_list|<
name|?
extends|extends
name|CategoryProperty
argument_list|>
name|propertyClass
range|:
name|propertyClasses
control|)
block|{
name|CategoryProperty
name|categoryProperty
init|=
name|properties
operator|.
name|get
argument_list|(
name|propertyClass
argument_list|)
decl_stmt|;
if|if
condition|(
name|categoryProperty
operator|!=
literal|null
condition|)
block|{
return|return
name|categoryProperty
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|copyTo
specifier|public
name|void
name|copyTo
parameter_list|(
name|AttributeImpl
name|target
parameter_list|)
block|{
operator|(
operator|(
name|CategoryAttributeImpl
operator|)
name|target
operator|)
operator|.
name|categoryPath
operator|=
name|this
operator|.
name|categoryPath
expr_stmt|;
operator|(
operator|(
name|CategoryAttributeImpl
operator|)
name|target
operator|)
operator|.
name|properties
operator|=
name|this
operator|.
name|properties
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
DECL|method|clone
specifier|public
name|CategoryAttributeImpl
name|clone
parameter_list|()
block|{
name|CategoryAttributeImpl
name|ca
init|=
operator|(
name|CategoryAttributeImpl
operator|)
name|super
operator|.
name|clone
argument_list|()
decl_stmt|;
if|if
condition|(
name|categoryPath
operator|!=
literal|null
condition|)
block|{
name|ca
operator|.
name|categoryPath
operator|=
name|categoryPath
operator|.
name|clone
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|properties
operator|!=
literal|null
operator|&&
operator|!
name|properties
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ca
operator|.
name|properties
operator|=
operator|(
name|HashMap
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|CategoryProperty
argument_list|>
argument_list|,
name|CategoryProperty
argument_list|>
operator|)
name|properties
operator|.
name|clone
argument_list|()
expr_stmt|;
block|}
return|return
name|ca
return|;
block|}
annotation|@
name|Override
DECL|method|clear
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|categoryPath
operator|=
literal|null
expr_stmt|;
name|clearProperties
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|clearProperties
specifier|public
name|void
name|clearProperties
parameter_list|()
block|{
if|if
condition|(
name|properties
operator|!=
literal|null
condition|)
block|{
name|properties
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
name|this
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
operator|!
operator|(
name|o
operator|instanceof
name|CategoryAttributeImpl
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|CategoryAttributeImpl
name|other
init|=
operator|(
name|CategoryAttributeImpl
operator|)
name|o
decl_stmt|;
if|if
condition|(
name|categoryPath
operator|==
literal|null
condition|)
block|{
return|return
operator|(
name|other
operator|.
name|categoryPath
operator|==
literal|null
operator|)
return|;
block|}
if|if
condition|(
operator|!
name|categoryPath
operator|.
name|equals
argument_list|(
name|other
operator|.
name|categoryPath
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|properties
operator|==
literal|null
operator|||
name|properties
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
operator|(
name|other
operator|.
name|properties
operator|==
literal|null
operator|||
name|other
operator|.
name|properties
operator|.
name|isEmpty
argument_list|()
operator|)
return|;
block|}
return|return
name|properties
operator|.
name|equals
argument_list|(
name|other
operator|.
name|properties
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
if|if
condition|(
name|categoryPath
operator|==
literal|null
condition|)
block|{
return|return
literal|0
return|;
block|}
name|int
name|hashCode
init|=
name|categoryPath
operator|.
name|hashCode
argument_list|()
decl_stmt|;
if|if
condition|(
name|properties
operator|!=
literal|null
operator|&&
operator|!
name|properties
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|hashCode
operator|^=
name|properties
operator|.
name|hashCode
argument_list|()
expr_stmt|;
block|}
return|return
name|hashCode
return|;
block|}
annotation|@
name|Override
DECL|method|getPropertyClasses
specifier|public
name|Set
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|CategoryProperty
argument_list|>
argument_list|>
name|getPropertyClasses
parameter_list|()
block|{
if|if
condition|(
name|properties
operator|==
literal|null
operator|||
name|properties
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|properties
operator|.
name|keySet
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|remove
specifier|public
name|void
name|remove
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|CategoryProperty
argument_list|>
name|propertyClass
parameter_list|)
block|{
name|properties
operator|.
name|remove
argument_list|(
name|propertyClass
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
