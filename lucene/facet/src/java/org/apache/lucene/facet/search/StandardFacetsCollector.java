begin_unit
begin_package
DECL|package|org.apache.lucene.facet.search
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|search
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|index
operator|.
name|params
operator|.
name|CategoryListParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|index
operator|.
name|params
operator|.
name|CategoryListParams
operator|.
name|OrdinalPolicy
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|search
operator|.
name|params
operator|.
name|FacetRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|search
operator|.
name|params
operator|.
name|FacetSearchParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|search
operator|.
name|results
operator|.
name|FacetResult
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|taxonomy
operator|.
name|TaxonomyReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|AtomicReaderContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Scorer
import|;
end_import
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_comment
comment|/**  * A {@link FacetsCollector} which allows initilizing e.g.  * {@link FacetsAccumulator}. Supports facet partitions, generic  * {@link FacetRequest facet requests}, {@link CategoryListParams} etc.  *   *<p>  *<b>NOTE:</b> this collector, with the default {@link FacetsAccumulator} does  * not support category lists which were indexed with  * {@link OrdinalPolicy#NO_PARENTS}.  *   * @lucene.experimental  */
end_comment
begin_class
DECL|class|StandardFacetsCollector
specifier|public
class|class
name|StandardFacetsCollector
extends|extends
name|FacetsCollector
block|{
DECL|field|facetsAccumulator
specifier|protected
specifier|final
name|FacetsAccumulator
name|facetsAccumulator
decl_stmt|;
DECL|field|scoreDocIdCollector
specifier|private
name|ScoredDocIdCollector
name|scoreDocIdCollector
decl_stmt|;
DECL|field|results
specifier|private
name|List
argument_list|<
name|FacetResult
argument_list|>
name|results
decl_stmt|;
DECL|field|resultsGuard
specifier|private
name|Object
name|resultsGuard
decl_stmt|;
comment|/**    * Create a collector for accumulating facets while collecting documents    * during search.    *     * @param facetSearchParams    *          faceted search parameters defining which facets are required and    *          how.    * @param indexReader    *          searched index.    * @param taxonomyReader    *          taxonomy containing the facets.    */
DECL|method|StandardFacetsCollector
specifier|public
name|StandardFacetsCollector
parameter_list|(
name|FacetSearchParams
name|facetSearchParams
parameter_list|,
name|IndexReader
name|indexReader
parameter_list|,
name|TaxonomyReader
name|taxonomyReader
parameter_list|)
block|{
name|facetsAccumulator
operator|=
name|initFacetsAccumulator
argument_list|(
name|facetSearchParams
argument_list|,
name|indexReader
argument_list|,
name|taxonomyReader
argument_list|)
expr_stmt|;
name|scoreDocIdCollector
operator|=
name|initScoredDocCollector
argument_list|(
name|facetSearchParams
argument_list|,
name|indexReader
argument_list|,
name|taxonomyReader
argument_list|)
expr_stmt|;
name|resultsGuard
operator|=
operator|new
name|Object
argument_list|()
expr_stmt|;
block|}
comment|/**    * Create a {@link ScoredDocIdCollector} to be used as the first phase of    * the facet collection. If all facetRequests are do not require the    * document score, a ScoredDocIdCollector which does not store the document    * scores would be returned. Otherwise a SDIC which does store the documents    * will be returned, having an initial allocated space for 1000 such    * documents' scores.    */
DECL|method|initScoredDocCollector
specifier|protected
name|ScoredDocIdCollector
name|initScoredDocCollector
parameter_list|(
name|FacetSearchParams
name|facetSearchParams
parameter_list|,
name|IndexReader
name|indexReader
parameter_list|,
name|TaxonomyReader
name|taxonomyReader
parameter_list|)
block|{
name|boolean
name|scoresNeeded
init|=
literal|false
decl_stmt|;
for|for
control|(
name|FacetRequest
name|frq
range|:
name|facetSearchParams
operator|.
name|facetRequests
control|)
block|{
if|if
condition|(
name|frq
operator|.
name|requireDocumentScore
argument_list|()
condition|)
block|{
name|scoresNeeded
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
return|return
name|ScoredDocIdCollector
operator|.
name|create
argument_list|(
name|indexReader
operator|.
name|maxDoc
argument_list|()
argument_list|,
name|scoresNeeded
argument_list|)
return|;
block|}
comment|/**    * Create the {@link FacetsAccumulator} to be used. Default is     * {@link StandardFacetsAccumulator}. Called once at the constructor of the collector.    *     * @param facetSearchParams    *            The search params.    * @param indexReader    *            A reader to the index to search in.    * @param taxonomyReader    *            A reader to the active taxonomy.    * @return The {@link FacetsAccumulator} to use.    */
DECL|method|initFacetsAccumulator
specifier|protected
name|FacetsAccumulator
name|initFacetsAccumulator
parameter_list|(
name|FacetSearchParams
name|facetSearchParams
parameter_list|,
name|IndexReader
name|indexReader
parameter_list|,
name|TaxonomyReader
name|taxonomyReader
parameter_list|)
block|{
return|return
operator|new
name|StandardFacetsAccumulator
argument_list|(
name|facetSearchParams
argument_list|,
name|indexReader
argument_list|,
name|taxonomyReader
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getFacetResults
specifier|public
name|List
argument_list|<
name|FacetResult
argument_list|>
name|getFacetResults
parameter_list|()
throws|throws
name|IOException
block|{
synchronized|synchronized
init|(
name|resultsGuard
init|)
block|{
comment|// over protection
if|if
condition|(
name|results
operator|==
literal|null
condition|)
block|{
comment|// lazy creation but just once
name|results
operator|=
name|facetsAccumulator
operator|.
name|accumulate
argument_list|(
name|scoreDocIdCollector
operator|.
name|getScoredDocIDs
argument_list|()
argument_list|)
expr_stmt|;
name|scoreDocIdCollector
operator|=
literal|null
expr_stmt|;
block|}
return|return
name|results
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|acceptsDocsOutOfOrder
specifier|public
name|boolean
name|acceptsDocsOutOfOrder
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|collect
specifier|public
name|void
name|collect
parameter_list|(
name|int
name|doc
parameter_list|)
throws|throws
name|IOException
block|{
name|scoreDocIdCollector
operator|.
name|collect
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setNextReader
specifier|public
name|void
name|setNextReader
parameter_list|(
name|AtomicReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|scoreDocIdCollector
operator|.
name|setNextReader
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setScorer
specifier|public
name|void
name|setScorer
parameter_list|(
name|Scorer
name|scorer
parameter_list|)
throws|throws
name|IOException
block|{
name|scoreDocIdCollector
operator|.
name|setScorer
argument_list|(
name|scorer
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
