begin_unit
begin_package
DECL|package|org.apache.lucene.facet.search
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|search
package|;
end_package
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_comment
comment|/**  * An IntArrayAllocator is an object which manages counter array objects  * of a certain length. These counter arrays are needed temporarily during  * faceted search (see {@link FacetsAccumulator} and can be reused across searches  * instead of being allocated afresh on every search.  *<P>  * An IntArrayAllocator is thread-safe.  *   * @lucene.experimental  */
end_comment
begin_class
DECL|class|IntArrayAllocator
specifier|public
specifier|final
class|class
name|IntArrayAllocator
extends|extends
name|TemporaryObjectAllocator
argument_list|<
name|int
index|[]
argument_list|>
block|{
comment|// An IntArrayAllocater deals with integer arrays of a fixed length.
DECL|field|length
specifier|private
name|int
name|length
decl_stmt|;
comment|/**    * Construct an allocator for counter arrays of length<CODE>length</CODE>,    * keeping around a pool of up to<CODE>maxArrays</CODE> old arrays.    *<P>    * Note that the pool size only restricts the number of arrays that hang    * around when not needed, but<I>not</I> the maximum number of arrays    * that are allocated when actually is use: If a number of concurrent    * threads ask for an allocation, all of them will get a counter array,    * even if their number is greater than maxArrays. If an application wants    * to limit the number of concurrent threads making allocations, it needs    * to do so on its own - for example by blocking new threads until the    * existing ones have finished.    *<P>    * In particular, when maxArrays=0, this object behaves as a trivial    * allocator, always allocating a new array and never reusing an old one.     */
DECL|method|IntArrayAllocator
specifier|public
name|IntArrayAllocator
parameter_list|(
name|int
name|length
parameter_list|,
name|int
name|maxArrays
parameter_list|)
block|{
name|super
argument_list|(
name|maxArrays
argument_list|)
expr_stmt|;
name|this
operator|.
name|length
operator|=
name|length
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|create
specifier|public
name|int
index|[]
name|create
parameter_list|()
block|{
return|return
operator|new
name|int
index|[
name|length
index|]
return|;
block|}
annotation|@
name|Override
DECL|method|clear
specifier|public
name|void
name|clear
parameter_list|(
name|int
index|[]
name|array
parameter_list|)
block|{
name|Arrays
operator|.
name|fill
argument_list|(
name|array
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
