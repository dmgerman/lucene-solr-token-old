begin_unit
begin_package
DECL|package|org.apache.lucene.facet.range
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|range
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|params
operator|.
name|CategoryListParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|params
operator|.
name|FacetSearchParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|search
operator|.
name|FacetArrays
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|search
operator|.
name|FacetRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|search
operator|.
name|FacetResult
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|search
operator|.
name|FacetResultsHandler
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|search
operator|.
name|FacetsAccumulator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|search
operator|.
name|FacetsAggregator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|search
operator|.
name|FacetsCollector
operator|.
name|MatchingDocs
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|taxonomy
operator|.
name|TaxonomyReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import
begin_comment
comment|/** Takes multiple facet requests and if necessary splits  *  them between the normal {@link FacetsAccumulator} and a  *  {@link RangeAccumulator} */
end_comment
begin_class
DECL|class|RangeFacetsAccumulatorWrapper
specifier|public
class|class
name|RangeFacetsAccumulatorWrapper
extends|extends
name|FacetsAccumulator
block|{
comment|// TODO: somehow handle SortedSetDVAccumulator as
comment|// well... but it's tricky because SSDV just uses an
comment|// "ordinary" flat CountFacetRequest so we can't switch
comment|// based on that.
DECL|field|accumulator
specifier|private
specifier|final
name|FacetsAccumulator
name|accumulator
decl_stmt|;
DECL|field|rangeAccumulator
specifier|private
specifier|final
name|RangeAccumulator
name|rangeAccumulator
decl_stmt|;
DECL|method|create
specifier|public
specifier|static
name|FacetsAccumulator
name|create
parameter_list|(
name|FacetSearchParams
name|fsp
parameter_list|,
name|IndexReader
name|indexReader
parameter_list|,
name|TaxonomyReader
name|taxoReader
parameter_list|)
block|{
return|return
name|create
argument_list|(
name|fsp
argument_list|,
name|indexReader
argument_list|,
name|taxoReader
argument_list|,
operator|new
name|FacetArrays
argument_list|(
name|taxoReader
operator|.
name|getSize
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
DECL|method|create
specifier|public
specifier|static
name|FacetsAccumulator
name|create
parameter_list|(
name|FacetSearchParams
name|fsp
parameter_list|,
name|IndexReader
name|indexReader
parameter_list|,
name|TaxonomyReader
name|taxoReader
parameter_list|,
name|FacetArrays
name|arrays
parameter_list|)
block|{
name|List
argument_list|<
name|FacetRequest
argument_list|>
name|rangeRequests
init|=
operator|new
name|ArrayList
argument_list|<
name|FacetRequest
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|FacetRequest
argument_list|>
name|nonRangeRequests
init|=
operator|new
name|ArrayList
argument_list|<
name|FacetRequest
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|FacetRequest
name|fr
range|:
name|fsp
operator|.
name|facetRequests
control|)
block|{
if|if
condition|(
name|fr
operator|instanceof
name|RangeFacetRequest
condition|)
block|{
name|rangeRequests
operator|.
name|add
argument_list|(
name|fr
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|nonRangeRequests
operator|.
name|add
argument_list|(
name|fr
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|rangeRequests
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
operator|new
name|FacetsAccumulator
argument_list|(
name|fsp
argument_list|,
name|indexReader
argument_list|,
name|taxoReader
argument_list|,
name|arrays
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|nonRangeRequests
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
operator|new
name|RangeAccumulator
argument_list|(
name|fsp
argument_list|,
name|indexReader
argument_list|)
return|;
block|}
else|else
block|{
name|FacetsAccumulator
name|accumulator
init|=
operator|new
name|FacetsAccumulator
argument_list|(
operator|new
name|FacetSearchParams
argument_list|(
name|fsp
operator|.
name|indexingParams
argument_list|,
name|nonRangeRequests
argument_list|)
argument_list|,
name|indexReader
argument_list|,
name|taxoReader
argument_list|,
name|arrays
argument_list|)
decl_stmt|;
name|RangeAccumulator
name|rangeAccumulator
init|=
operator|new
name|RangeAccumulator
argument_list|(
operator|new
name|FacetSearchParams
argument_list|(
name|fsp
operator|.
name|indexingParams
argument_list|,
name|rangeRequests
argument_list|)
argument_list|,
name|indexReader
argument_list|)
decl_stmt|;
return|return
operator|new
name|RangeFacetsAccumulatorWrapper
argument_list|(
name|accumulator
argument_list|,
name|rangeAccumulator
argument_list|,
name|fsp
argument_list|)
return|;
block|}
block|}
DECL|method|RangeFacetsAccumulatorWrapper
specifier|private
name|RangeFacetsAccumulatorWrapper
parameter_list|(
name|FacetsAccumulator
name|accumulator
parameter_list|,
name|RangeAccumulator
name|rangeAccumulator
parameter_list|,
name|FacetSearchParams
name|fsp
parameter_list|)
block|{
name|super
argument_list|(
name|fsp
argument_list|,
name|accumulator
operator|.
name|indexReader
argument_list|,
name|accumulator
operator|.
name|taxonomyReader
argument_list|)
expr_stmt|;
name|this
operator|.
name|accumulator
operator|=
name|accumulator
expr_stmt|;
name|this
operator|.
name|rangeAccumulator
operator|=
name|rangeAccumulator
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getAggregator
specifier|public
name|FacetsAggregator
name|getAggregator
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|createFacetResultsHandler
specifier|protected
name|FacetResultsHandler
name|createFacetResultsHandler
parameter_list|(
name|FacetRequest
name|fr
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|getCategoryLists
specifier|protected
name|Set
argument_list|<
name|CategoryListParams
argument_list|>
name|getCategoryLists
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|requiresDocScores
specifier|public
name|boolean
name|requiresDocScores
parameter_list|()
block|{
return|return
name|accumulator
operator|.
name|requiresDocScores
argument_list|()
return|;
block|}
DECL|method|accumulate
specifier|public
name|List
argument_list|<
name|FacetResult
argument_list|>
name|accumulate
parameter_list|(
name|List
argument_list|<
name|MatchingDocs
argument_list|>
name|matchingDocs
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|FacetResult
argument_list|>
name|results
init|=
name|accumulator
operator|.
name|accumulate
argument_list|(
name|matchingDocs
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|FacetResult
argument_list|>
name|rangeResults
init|=
name|rangeAccumulator
operator|.
name|accumulate
argument_list|(
name|matchingDocs
argument_list|)
decl_stmt|;
name|int
name|aUpto
init|=
literal|0
decl_stmt|;
name|int
name|raUpto
init|=
literal|0
decl_stmt|;
name|List
argument_list|<
name|FacetResult
argument_list|>
name|merged
init|=
operator|new
name|ArrayList
argument_list|<
name|FacetResult
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|FacetRequest
name|fr
range|:
name|searchParams
operator|.
name|facetRequests
control|)
block|{
if|if
condition|(
name|fr
operator|instanceof
name|RangeFacetRequest
condition|)
block|{
name|merged
operator|.
name|add
argument_list|(
name|rangeResults
operator|.
name|get
argument_list|(
name|raUpto
operator|++
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|merged
operator|.
name|add
argument_list|(
name|results
operator|.
name|get
argument_list|(
name|aUpto
operator|++
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|merged
return|;
block|}
block|}
end_class
end_unit
