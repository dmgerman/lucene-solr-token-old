begin_unit
begin_package
DECL|package|org.apache.lucene.facet.old
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|old
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|search
operator|.
name|FacetsCollector
operator|.
name|MatchingDocs
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|DocIdSet
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|DocIdSetIterator
import|;
end_import
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_comment
comment|/**   * Represents {@link MatchingDocs} as {@link ScoredDocIDs}.  *   * @lucene.experimental  */
end_comment
begin_class
DECL|class|MatchingDocsAsScoredDocIDs
specifier|public
class|class
name|MatchingDocsAsScoredDocIDs
implements|implements
name|ScoredDocIDs
block|{
comment|// TODO remove this class once we get rid of ScoredDocIDs
DECL|field|matchingDocs
specifier|final
name|List
argument_list|<
name|MatchingDocs
argument_list|>
name|matchingDocs
decl_stmt|;
DECL|field|size
specifier|final
name|int
name|size
decl_stmt|;
DECL|method|MatchingDocsAsScoredDocIDs
specifier|public
name|MatchingDocsAsScoredDocIDs
parameter_list|(
name|List
argument_list|<
name|MatchingDocs
argument_list|>
name|matchingDocs
parameter_list|)
block|{
name|this
operator|.
name|matchingDocs
operator|=
name|matchingDocs
expr_stmt|;
name|int
name|totalSize
init|=
literal|0
decl_stmt|;
for|for
control|(
name|MatchingDocs
name|md
range|:
name|matchingDocs
control|)
block|{
name|totalSize
operator|+=
name|md
operator|.
name|totalHits
expr_stmt|;
block|}
name|this
operator|.
name|size
operator|=
name|totalSize
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|iterator
specifier|public
name|ScoredDocIDsIterator
name|iterator
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|ScoredDocIDsIterator
argument_list|()
block|{
specifier|final
name|Iterator
argument_list|<
name|MatchingDocs
argument_list|>
name|mdIter
init|=
name|matchingDocs
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|int
name|scoresIdx
init|=
literal|0
decl_stmt|;
name|int
name|doc
init|=
literal|0
decl_stmt|;
name|MatchingDocs
name|current
decl_stmt|;
name|int
name|currentLength
decl_stmt|;
name|boolean
name|done
init|=
literal|false
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|next
parameter_list|()
block|{
if|if
condition|(
name|done
condition|)
block|{
return|return
literal|false
return|;
block|}
while|while
condition|(
name|current
operator|==
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|mdIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|done
operator|=
literal|true
expr_stmt|;
return|return
literal|false
return|;
block|}
name|current
operator|=
name|mdIter
operator|.
name|next
argument_list|()
expr_stmt|;
name|currentLength
operator|=
name|current
operator|.
name|bits
operator|.
name|length
argument_list|()
expr_stmt|;
name|doc
operator|=
literal|0
expr_stmt|;
name|scoresIdx
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|doc
operator|>=
name|currentLength
operator|||
operator|(
name|doc
operator|=
name|current
operator|.
name|bits
operator|.
name|nextSetBit
argument_list|(
name|doc
argument_list|)
operator|)
operator|==
operator|-
literal|1
condition|)
block|{
name|current
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|doc
operator|=
operator|-
literal|1
expr_stmt|;
comment|// we're calling nextSetBit later on
block|}
block|}
operator|++
name|doc
expr_stmt|;
if|if
condition|(
name|doc
operator|>=
name|currentLength
operator|||
operator|(
name|doc
operator|=
name|current
operator|.
name|bits
operator|.
name|nextSetBit
argument_list|(
name|doc
argument_list|)
operator|)
operator|==
operator|-
literal|1
condition|)
block|{
name|current
operator|=
literal|null
expr_stmt|;
return|return
name|next
argument_list|()
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|float
name|getScore
parameter_list|()
block|{
return|return
name|current
operator|.
name|scores
operator|==
literal|null
condition|?
name|ScoredDocIDsIterator
operator|.
name|DEFAULT_SCORE
else|:
name|current
operator|.
name|scores
index|[
name|scoresIdx
operator|++
index|]
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getDocID
parameter_list|()
block|{
return|return
name|done
condition|?
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
else|:
name|doc
operator|+
name|current
operator|.
name|context
operator|.
name|docBase
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|getDocIDs
specifier|public
name|DocIdSet
name|getDocIDs
parameter_list|()
block|{
return|return
operator|new
name|DocIdSet
argument_list|()
block|{
specifier|final
name|Iterator
argument_list|<
name|MatchingDocs
argument_list|>
name|mdIter
init|=
name|matchingDocs
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|int
name|doc
init|=
literal|0
decl_stmt|;
name|MatchingDocs
name|current
decl_stmt|;
name|int
name|currentLength
decl_stmt|;
name|boolean
name|done
init|=
literal|false
decl_stmt|;
annotation|@
name|Override
specifier|public
name|DocIdSetIterator
name|iterator
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|DocIdSetIterator
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|nextDoc
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|done
condition|)
block|{
return|return
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
return|;
block|}
while|while
condition|(
name|current
operator|==
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|mdIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|done
operator|=
literal|true
expr_stmt|;
return|return
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
return|;
block|}
name|current
operator|=
name|mdIter
operator|.
name|next
argument_list|()
expr_stmt|;
name|currentLength
operator|=
name|current
operator|.
name|bits
operator|.
name|length
argument_list|()
expr_stmt|;
name|doc
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|doc
operator|>=
name|currentLength
operator|||
operator|(
name|doc
operator|=
name|current
operator|.
name|bits
operator|.
name|nextSetBit
argument_list|(
name|doc
argument_list|)
operator|)
operator|==
operator|-
literal|1
condition|)
block|{
name|current
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|doc
operator|=
operator|-
literal|1
expr_stmt|;
comment|// we're calling nextSetBit later on
block|}
block|}
operator|++
name|doc
expr_stmt|;
if|if
condition|(
name|doc
operator|>=
name|currentLength
operator|||
operator|(
name|doc
operator|=
name|current
operator|.
name|bits
operator|.
name|nextSetBit
argument_list|(
name|doc
argument_list|)
operator|)
operator|==
operator|-
literal|1
condition|)
block|{
name|current
operator|=
literal|null
expr_stmt|;
return|return
name|nextDoc
argument_list|()
return|;
block|}
return|return
name|doc
operator|+
name|current
operator|.
name|context
operator|.
name|docBase
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|docID
parameter_list|()
block|{
return|return
name|doc
operator|+
name|current
operator|.
name|context
operator|.
name|docBase
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|cost
parameter_list|()
block|{
return|return
name|size
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|advance
parameter_list|(
name|int
name|target
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"not supported"
argument_list|)
throw|;
block|}
block|}
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|size
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|size
return|;
block|}
block|}
end_class
end_unit
