begin_unit
begin_package
DECL|package|org.apache.lucene.facet.range
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|range
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|params
operator|.
name|FacetIndexingParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|search
operator|.
name|FacetRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|search
operator|.
name|FacetResultNode
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|search
operator|.
name|FacetsAggregator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|taxonomy
operator|.
name|CategoryPath
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|AtomicReaderContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|NumericDocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queries
operator|.
name|function
operator|.
name|FunctionValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queries
operator|.
name|function
operator|.
name|ValueSource
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queries
operator|.
name|function
operator|.
name|valuesource
operator|.
name|LongFieldSource
import|;
end_import
begin_comment
comment|/**  * A {@link FacetRequest} for dynamic ranges based on a {@link NumericDocValues}  * field or {@link ValueSource}. This does not use the taxonomy index nor any  * indexed facet values.  *   * @lucene.experimental  */
end_comment
begin_class
DECL|class|RangeFacetRequest
specifier|public
class|class
name|RangeFacetRequest
parameter_list|<
name|T
extends|extends
name|Range
parameter_list|>
extends|extends
name|FacetRequest
block|{
DECL|field|ranges
specifier|public
specifier|final
name|Range
index|[]
name|ranges
decl_stmt|;
DECL|field|label
specifier|public
specifier|final
name|String
name|label
decl_stmt|;
DECL|field|valueSource
specifier|private
specifier|final
name|ValueSource
name|valueSource
decl_stmt|;
comment|/**    * Create a request for the given ranges over the specified    * {@link NumericDocValues} field. The field will be used to as the root's    * {@link FacetResultNode} label.    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|RangeFacetRequest
specifier|public
name|RangeFacetRequest
parameter_list|(
name|String
name|field
parameter_list|,
name|T
modifier|...
name|ranges
parameter_list|)
block|{
name|this
argument_list|(
name|field
argument_list|,
operator|new
name|LongFieldSource
argument_list|(
name|field
argument_list|)
argument_list|,
name|ranges
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create a request for the given ranges over the specified    * {@link NumericDocValues} field. The field will be used to as the root's    * {@link FacetResultNode} label.    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|RangeFacetRequest
specifier|public
name|RangeFacetRequest
parameter_list|(
name|String
name|field
parameter_list|,
name|List
argument_list|<
name|T
argument_list|>
name|ranges
parameter_list|)
block|{
name|this
argument_list|(
name|field
argument_list|,
operator|(
name|T
index|[]
operator|)
name|ranges
operator|.
name|toArray
argument_list|(
operator|new
name|Range
index|[
name|ranges
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create a request for the given ranges over the specified    * {@link ValueSource}. The label will be used to as the root's    * {@link FacetResultNode} label.    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|RangeFacetRequest
specifier|public
name|RangeFacetRequest
parameter_list|(
name|String
name|label
parameter_list|,
name|ValueSource
name|valueSource
parameter_list|,
name|T
modifier|...
name|ranges
parameter_list|)
block|{
name|super
argument_list|(
operator|new
name|CategoryPath
argument_list|(
name|label
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|this
operator|.
name|ranges
operator|=
name|ranges
expr_stmt|;
name|this
operator|.
name|valueSource
operator|=
name|valueSource
expr_stmt|;
name|this
operator|.
name|label
operator|=
name|label
expr_stmt|;
block|}
comment|/**    * Create a request for the given ranges over the specified    * {@link ValueSource}. The label will be used to as the root's    * {@link FacetResultNode} label.    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|RangeFacetRequest
specifier|public
name|RangeFacetRequest
parameter_list|(
name|String
name|label
parameter_list|,
name|ValueSource
name|valueSource
parameter_list|,
name|List
argument_list|<
name|T
argument_list|>
name|ranges
parameter_list|)
block|{
name|this
argument_list|(
name|label
argument_list|,
name|valueSource
argument_list|,
operator|(
name|T
index|[]
operator|)
name|ranges
operator|.
name|toArray
argument_list|(
operator|new
name|Range
index|[
name|ranges
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Returns the {@link FunctionValues} for the given    * {@link AtomicReaderContext}. If the request was created over a    * {@link NumericDocValues} field, the respective {@link NumericDocValues} is    * returned.    */
DECL|method|getValues
specifier|public
name|FunctionValues
name|getValues
parameter_list|(
name|AtomicReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|valueSource
operator|.
name|getValues
argument_list|(
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|,
name|context
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|createFacetsAggregator
specifier|public
name|FacetsAggregator
name|createFacetsAggregator
parameter_list|(
name|FacetIndexingParams
name|fip
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"this FacetRequest does not support categories aggregation and only works with RangeAccumulator"
argument_list|)
throw|;
block|}
block|}
end_class
end_unit
