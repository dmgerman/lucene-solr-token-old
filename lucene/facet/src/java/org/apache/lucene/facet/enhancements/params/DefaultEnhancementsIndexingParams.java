begin_unit
begin_package
DECL|package|org.apache.lucene.facet.enhancements.params
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|enhancements
operator|.
name|params
package|;
end_package
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|enhancements
operator|.
name|CategoryEnhancement
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|index
operator|.
name|attributes
operator|.
name|CategoryProperty
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|index
operator|.
name|params
operator|.
name|CategoryListParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|index
operator|.
name|params
operator|.
name|PerDimensionIndexingParams
import|;
end_import
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_comment
comment|/**  * Default implementation of {@link EnhancementsIndexingParams}   *   * @lucene.experimental  */
end_comment
begin_class
DECL|class|DefaultEnhancementsIndexingParams
specifier|public
class|class
name|DefaultEnhancementsIndexingParams
extends|extends
name|PerDimensionIndexingParams
implements|implements
name|EnhancementsIndexingParams
block|{
DECL|field|enhancedCategories
specifier|private
name|List
argument_list|<
name|CategoryEnhancement
argument_list|>
name|enhancedCategories
decl_stmt|;
comment|/**    * Construct with a certain {@link CategoryEnhancement enhancement}    * @throws IllegalArgumentException if no enhancements are provided    */
DECL|method|DefaultEnhancementsIndexingParams
specifier|public
name|DefaultEnhancementsIndexingParams
parameter_list|(
name|CategoryEnhancement
modifier|...
name|enhancements
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|validateparams
argument_list|(
name|enhancements
argument_list|)
expr_stmt|;
name|addCategoryEnhancements
argument_list|(
name|enhancements
argument_list|)
expr_stmt|;
block|}
DECL|method|validateparams
specifier|private
name|void
name|validateparams
parameter_list|(
name|CategoryEnhancement
modifier|...
name|enhancements
parameter_list|)
block|{
if|if
condition|(
name|enhancements
operator|==
literal|null
operator|||
name|enhancements
operator|.
name|length
operator|<
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"at least one enhancement is required"
argument_list|)
throw|;
block|}
block|}
comment|/**    * Construct with certain {@link CategoryEnhancement enhancements}    * and {@link CategoryListParams}    * @throws IllegalArgumentException if no enhancements are provided    */
DECL|method|DefaultEnhancementsIndexingParams
specifier|public
name|DefaultEnhancementsIndexingParams
parameter_list|(
name|CategoryListParams
name|categoryListParams
parameter_list|,
name|CategoryEnhancement
modifier|...
name|enhancements
parameter_list|)
block|{
name|super
argument_list|(
name|categoryListParams
argument_list|)
expr_stmt|;
name|validateparams
argument_list|(
name|enhancements
argument_list|)
expr_stmt|;
name|addCategoryEnhancements
argument_list|(
name|enhancements
argument_list|)
expr_stmt|;
block|}
DECL|method|addCategoryEnhancements
specifier|public
name|void
name|addCategoryEnhancements
parameter_list|(
name|CategoryEnhancement
modifier|...
name|enhancements
parameter_list|)
block|{
if|if
condition|(
name|enhancedCategories
operator|==
literal|null
condition|)
block|{
name|enhancedCategories
operator|=
operator|new
name|ArrayList
argument_list|<
name|CategoryEnhancement
argument_list|>
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|CategoryEnhancement
name|categoryEnhancement
range|:
name|enhancements
control|)
block|{
name|enhancedCategories
operator|.
name|add
argument_list|(
name|categoryEnhancement
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getCategoryEnhancements
specifier|public
name|List
argument_list|<
name|CategoryEnhancement
argument_list|>
name|getCategoryEnhancements
parameter_list|()
block|{
if|if
condition|(
name|enhancedCategories
operator|==
literal|null
operator|||
name|enhancedCategories
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|enhancedCategories
return|;
block|}
DECL|method|getRetainableProperties
specifier|public
name|List
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|CategoryProperty
argument_list|>
argument_list|>
name|getRetainableProperties
parameter_list|()
block|{
if|if
condition|(
name|enhancedCategories
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|List
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|CategoryProperty
argument_list|>
argument_list|>
name|retainableProperties
init|=
operator|new
name|ArrayList
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|CategoryProperty
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|CategoryEnhancement
name|enhancement
range|:
name|enhancedCategories
control|)
block|{
if|if
condition|(
name|enhancement
operator|.
name|getRetainableProperty
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|retainableProperties
operator|.
name|add
argument_list|(
name|enhancement
operator|.
name|getRetainableProperty
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|retainableProperties
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|retainableProperties
return|;
block|}
block|}
end_class
end_unit
