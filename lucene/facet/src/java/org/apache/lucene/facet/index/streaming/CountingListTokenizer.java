begin_unit
begin_package
DECL|package|org.apache.lucene.facet.index.streaming
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|index
operator|.
name|streaming
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|index
operator|.
name|CategoryListPayloadStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|index
operator|.
name|attributes
operator|.
name|OrdinalProperty
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|index
operator|.
name|params
operator|.
name|CategoryListParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|index
operator|.
name|params
operator|.
name|FacetIndexingParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|taxonomy
operator|.
name|CategoryPath
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|util
operator|.
name|PartitionsUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|encoding
operator|.
name|IntEncoder
import|;
end_import
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_comment
comment|/**  * {@link CategoryListTokenizer} for facet counting  *   * @lucene.experimental  */
end_comment
begin_class
DECL|class|CountingListTokenizer
specifier|public
class|class
name|CountingListTokenizer
extends|extends
name|CategoryListTokenizer
block|{
comment|/** A table for retrieving payload streams by category-list name. */
DECL|field|payloadStreamsByName
specifier|protected
name|HashMap
argument_list|<
name|String
argument_list|,
name|CategoryListPayloadStream
argument_list|>
name|payloadStreamsByName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|CategoryListPayloadStream
argument_list|>
argument_list|()
decl_stmt|;
comment|/** An iterator over the payload streams */
DECL|field|payloadStreamIterator
specifier|protected
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|CategoryListPayloadStream
argument_list|>
argument_list|>
name|payloadStreamIterator
decl_stmt|;
DECL|method|CountingListTokenizer
specifier|public
name|CountingListTokenizer
parameter_list|(
name|TokenStream
name|input
parameter_list|,
name|FacetIndexingParams
name|indexingParams
parameter_list|)
block|{
name|super
argument_list|(
name|input
argument_list|,
name|indexingParams
argument_list|)
expr_stmt|;
name|this
operator|.
name|payloadStreamsByName
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|CategoryListPayloadStream
argument_list|>
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|handleStartOfInput
specifier|protected
name|void
name|handleStartOfInput
parameter_list|()
throws|throws
name|IOException
block|{
name|payloadStreamsByName
operator|.
name|clear
argument_list|()
expr_stmt|;
name|payloadStreamIterator
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|incrementToken
specifier|public
specifier|final
name|boolean
name|incrementToken
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|input
operator|.
name|incrementToken
argument_list|()
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|categoryAttribute
operator|!=
literal|null
condition|)
block|{
name|OrdinalProperty
name|ordinalProperty
init|=
operator|(
name|OrdinalProperty
operator|)
name|this
operator|.
name|categoryAttribute
operator|.
name|getProperty
argument_list|(
name|OrdinalProperty
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|ordinalProperty
operator|!=
literal|null
operator|&&
name|legalCategory
argument_list|()
condition|)
block|{
name|CategoryPath
name|categoryPath
init|=
name|this
operator|.
name|categoryAttribute
operator|.
name|getCategoryPath
argument_list|()
decl_stmt|;
name|int
name|ordinal
init|=
name|ordinalProperty
operator|.
name|getOrdinal
argument_list|()
decl_stmt|;
name|CategoryListPayloadStream
name|payloadStream
init|=
name|getPayloadStream
argument_list|(
name|categoryPath
argument_list|,
name|ordinal
argument_list|)
decl_stmt|;
name|int
name|partitionSize
init|=
name|indexingParams
operator|.
name|getPartitionSize
argument_list|()
decl_stmt|;
name|payloadStream
operator|.
name|appendIntToStream
argument_list|(
name|ordinal
operator|%
name|partitionSize
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|true
return|;
block|}
if|if
condition|(
name|this
operator|.
name|payloadStreamIterator
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|handleEndOfInput
argument_list|()
expr_stmt|;
name|this
operator|.
name|payloadStreamIterator
operator|=
name|this
operator|.
name|payloadStreamsByName
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|payloadStreamIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Entry
argument_list|<
name|String
argument_list|,
name|CategoryListPayloadStream
argument_list|>
name|entry
init|=
name|this
operator|.
name|payloadStreamIterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|countingListName
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|int
name|length
init|=
name|countingListName
operator|.
name|length
argument_list|()
decl_stmt|;
name|this
operator|.
name|termAttribute
operator|.
name|resizeBuffer
argument_list|(
name|length
argument_list|)
expr_stmt|;
name|countingListName
operator|.
name|getChars
argument_list|(
literal|0
argument_list|,
name|length
argument_list|,
name|termAttribute
operator|.
name|buffer
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|this
operator|.
name|termAttribute
operator|.
name|setLength
argument_list|(
name|length
argument_list|)
expr_stmt|;
name|CategoryListPayloadStream
name|payloadStream
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|payload
operator|.
name|bytes
operator|=
name|payloadStream
operator|.
name|convertStreamToByteArray
argument_list|()
expr_stmt|;
name|payload
operator|.
name|offset
operator|=
literal|0
expr_stmt|;
name|payload
operator|.
name|length
operator|=
name|payload
operator|.
name|bytes
operator|.
name|length
expr_stmt|;
name|this
operator|.
name|payloadAttribute
operator|.
name|setPayload
argument_list|(
name|payload
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/**    * A method which allows extending classes to filter the categories going    * into the counting list.    *     * @return By default returns {@code true}, meaning the current category is    *         to be part of the counting list. For categories that should be    *         filtered, return {@code false}.    */
DECL|method|legalCategory
specifier|protected
name|boolean
name|legalCategory
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
DECL|method|getPayloadStream
specifier|protected
name|CategoryListPayloadStream
name|getPayloadStream
parameter_list|(
name|CategoryPath
name|categoryPath
parameter_list|,
name|int
name|ordinal
parameter_list|)
throws|throws
name|IOException
block|{
name|CategoryListParams
name|clParams
init|=
name|this
operator|.
name|indexingParams
operator|.
name|getCategoryListParams
argument_list|(
name|categoryPath
argument_list|)
decl_stmt|;
name|String
name|name
init|=
name|PartitionsUtils
operator|.
name|partitionNameByOrdinal
argument_list|(
name|indexingParams
argument_list|,
name|clParams
argument_list|,
name|ordinal
argument_list|)
decl_stmt|;
name|CategoryListPayloadStream
name|fps
init|=
name|payloadStreamsByName
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|fps
operator|==
literal|null
condition|)
block|{
name|IntEncoder
name|encoder
init|=
name|clParams
operator|.
name|createEncoder
argument_list|()
decl_stmt|;
name|fps
operator|=
operator|new
name|CategoryListPayloadStream
argument_list|(
name|encoder
argument_list|)
expr_stmt|;
name|payloadStreamsByName
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|fps
argument_list|)
expr_stmt|;
block|}
return|return
name|fps
return|;
block|}
block|}
end_class
end_unit
