begin_unit
begin_package
DECL|package|org.apache.lucene.facet.enhancements
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|enhancements
package|;
end_package
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|enhancements
operator|.
name|params
operator|.
name|EnhancementsIndexingParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|index
operator|.
name|streaming
operator|.
name|CategoryTokenizer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Vint8
import|;
end_import
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_comment
comment|/**  * A tokenizer which adds to each category token payload according to the  * {@link CategoryEnhancement}s defined in the given  * {@link EnhancementsIndexingParams}.  *   * @lucene.experimental  */
end_comment
begin_class
DECL|class|EnhancementsCategoryTokenizer
specifier|public
class|class
name|EnhancementsCategoryTokenizer
extends|extends
name|CategoryTokenizer
block|{
comment|/**    * The data buffer used for payload instance.    */
DECL|field|payloadBytes
specifier|protected
name|byte
index|[]
name|payloadBytes
decl_stmt|;
comment|/**    * The category enhancements to handle    */
DECL|field|enhancements
specifier|protected
name|List
argument_list|<
name|CategoryEnhancement
argument_list|>
name|enhancements
decl_stmt|;
comment|/**    * Buffers for enhancement payload bytes    */
DECL|field|enhancementBytes
specifier|protected
name|byte
index|[]
index|[]
name|enhancementBytes
decl_stmt|;
DECL|field|nStart
specifier|private
name|int
name|nStart
decl_stmt|;
comment|/**    * Constructor.    *     * @param input    *            The stream of category tokens.    * @param indexingParams    *            The indexing params to use.    */
DECL|method|EnhancementsCategoryTokenizer
specifier|public
name|EnhancementsCategoryTokenizer
parameter_list|(
name|TokenStream
name|input
parameter_list|,
name|EnhancementsIndexingParams
name|indexingParams
parameter_list|)
block|{
name|super
argument_list|(
name|input
argument_list|,
name|indexingParams
argument_list|)
expr_stmt|;
name|payloadBytes
operator|=
operator|new
name|byte
index|[
name|Vint8
operator|.
name|MAXIMUM_BYTES_NEEDED
operator|*
operator|(
name|indexingParams
operator|.
name|getCategoryEnhancements
argument_list|()
operator|.
name|size
argument_list|()
operator|+
literal|1
operator|)
index|]
expr_stmt|;
name|enhancements
operator|=
name|indexingParams
operator|.
name|getCategoryEnhancements
argument_list|()
expr_stmt|;
if|if
condition|(
name|enhancements
operator|!=
literal|null
condition|)
block|{
comment|// create array of bytes per enhancement
name|enhancementBytes
operator|=
operator|new
name|byte
index|[
name|enhancements
operator|.
name|size
argument_list|()
index|]
index|[]
expr_stmt|;
comment|// write once the number of enhancements in the payload bytes
name|nStart
operator|=
name|Vint8
operator|.
name|encode
argument_list|(
name|enhancements
operator|.
name|size
argument_list|()
argument_list|,
name|payloadBytes
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|setPayload
specifier|protected
name|void
name|setPayload
parameter_list|()
block|{
name|this
operator|.
name|payloadAttribute
operator|.
name|setPayload
argument_list|(
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|enhancements
operator|==
literal|null
condition|)
block|{
return|return;
block|}
comment|// clear previous payload content
name|int
name|nBytes
init|=
name|nStart
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
name|int
name|nEnhancementBytes
init|=
literal|0
decl_stmt|;
for|for
control|(
name|CategoryEnhancement
name|enhancement
range|:
name|enhancements
control|)
block|{
comment|// get payload bytes from each enhancement
name|enhancementBytes
index|[
name|i
index|]
operator|=
name|enhancement
operator|.
name|getCategoryTokenBytes
argument_list|(
name|categoryAttribute
argument_list|)
expr_stmt|;
comment|// write the number of bytes in the payload
if|if
condition|(
name|enhancementBytes
index|[
name|i
index|]
operator|==
literal|null
condition|)
block|{
name|nBytes
operator|+=
name|Vint8
operator|.
name|encode
argument_list|(
literal|0
argument_list|,
name|payloadBytes
argument_list|,
name|nBytes
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|nBytes
operator|+=
name|Vint8
operator|.
name|encode
argument_list|(
name|enhancementBytes
index|[
name|i
index|]
operator|.
name|length
argument_list|,
name|payloadBytes
argument_list|,
name|nBytes
argument_list|)
expr_stmt|;
name|nEnhancementBytes
operator|+=
name|enhancementBytes
index|[
name|i
index|]
operator|.
name|length
expr_stmt|;
block|}
name|i
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|nEnhancementBytes
operator|>
literal|0
condition|)
block|{
comment|// make sure we have space for all bytes
if|if
condition|(
name|payloadBytes
operator|.
name|length
operator|<
name|nBytes
operator|+
name|nEnhancementBytes
condition|)
block|{
name|byte
index|[]
name|temp
init|=
operator|new
name|byte
index|[
operator|(
name|nBytes
operator|+
name|nEnhancementBytes
operator|)
operator|*
literal|2
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|payloadBytes
argument_list|,
literal|0
argument_list|,
name|temp
argument_list|,
literal|0
argument_list|,
name|nBytes
argument_list|)
expr_stmt|;
name|payloadBytes
operator|=
name|temp
expr_stmt|;
block|}
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|enhancementBytes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
comment|// add the enhancement payload bytes after the existing bytes
if|if
condition|(
name|enhancementBytes
index|[
name|i
index|]
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|enhancementBytes
index|[
name|i
index|]
argument_list|,
literal|0
argument_list|,
name|payloadBytes
argument_list|,
name|nBytes
argument_list|,
name|enhancementBytes
index|[
name|i
index|]
operator|.
name|length
argument_list|)
expr_stmt|;
name|nBytes
operator|+=
name|enhancementBytes
index|[
name|i
index|]
operator|.
name|length
expr_stmt|;
block|}
block|}
name|payload
operator|.
name|bytes
operator|=
name|payloadBytes
expr_stmt|;
name|payload
operator|.
name|offset
operator|=
literal|0
expr_stmt|;
name|payload
operator|.
name|length
operator|=
name|nBytes
expr_stmt|;
name|payloadAttribute
operator|.
name|setPayload
argument_list|(
name|payload
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class
end_unit
