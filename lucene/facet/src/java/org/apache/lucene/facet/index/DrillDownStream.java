begin_unit
begin_package
DECL|package|org.apache.lucene.facet.index
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|index
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|CharTermAttribute
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|index
operator|.
name|categorypolicy
operator|.
name|PathPolicy
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|index
operator|.
name|params
operator|.
name|FacetIndexingParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|taxonomy
operator|.
name|CategoryPath
import|;
end_import
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_comment
comment|/**  * A {@link TokenStream} which creates category drill-down terms.  *   * @lucene.experimental  */
end_comment
begin_class
DECL|class|DrillDownStream
specifier|public
class|class
name|DrillDownStream
extends|extends
name|TokenStream
block|{
DECL|field|indexingParams
specifier|private
specifier|final
name|FacetIndexingParams
name|indexingParams
decl_stmt|;
DECL|field|categories
specifier|private
specifier|final
name|Iterator
argument_list|<
name|CategoryPath
argument_list|>
name|categories
decl_stmt|;
DECL|field|termAttribute
specifier|private
specifier|final
name|CharTermAttribute
name|termAttribute
decl_stmt|;
DECL|field|pathPolicy
specifier|private
specifier|final
name|PathPolicy
name|pathPolicy
decl_stmt|;
DECL|field|current
specifier|private
name|CategoryPath
name|current
decl_stmt|;
DECL|field|isParent
specifier|private
name|boolean
name|isParent
decl_stmt|;
DECL|method|DrillDownStream
specifier|public
name|DrillDownStream
parameter_list|(
name|Iterable
argument_list|<
name|CategoryPath
argument_list|>
name|categories
parameter_list|,
name|FacetIndexingParams
name|indexingParams
parameter_list|)
block|{
name|termAttribute
operator|=
name|addAttribute
argument_list|(
name|CharTermAttribute
operator|.
name|class
argument_list|)
expr_stmt|;
name|this
operator|.
name|categories
operator|=
name|categories
operator|.
name|iterator
argument_list|()
expr_stmt|;
name|this
operator|.
name|indexingParams
operator|=
name|indexingParams
expr_stmt|;
name|this
operator|.
name|pathPolicy
operator|=
name|indexingParams
operator|.
name|getPathPolicy
argument_list|()
expr_stmt|;
block|}
DECL|method|addAdditionalAttributes
specifier|protected
name|void
name|addAdditionalAttributes
parameter_list|(
name|CategoryPath
name|category
parameter_list|,
name|boolean
name|isParent
parameter_list|)
block|{
comment|// a hook for AssociationsDrillDownStream to add the associations payload to
comment|// the drill-down terms
block|}
annotation|@
name|Override
DECL|method|incrementToken
specifier|public
specifier|final
name|boolean
name|incrementToken
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|current
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
if|if
condition|(
operator|!
name|categories
operator|.
name|hasNext
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
comment|// no more categories
block|}
name|current
operator|=
name|categories
operator|.
name|next
argument_list|()
expr_stmt|;
name|termAttribute
operator|.
name|resizeBuffer
argument_list|(
name|current
operator|.
name|charsNeededForFullPath
argument_list|()
argument_list|)
expr_stmt|;
name|isParent
operator|=
literal|false
expr_stmt|;
block|}
comment|// copy current as drill-down term (it's either the leaf node or PathPolicy
comment|// accepted it.
name|int
name|nChars
init|=
name|indexingParams
operator|.
name|drillDownTermText
argument_list|(
name|current
argument_list|,
name|termAttribute
operator|.
name|buffer
argument_list|()
argument_list|)
decl_stmt|;
name|termAttribute
operator|.
name|setLength
argument_list|(
name|nChars
argument_list|)
expr_stmt|;
name|addAdditionalAttributes
argument_list|(
name|current
argument_list|,
name|isParent
argument_list|)
expr_stmt|;
comment|// prepare current for next call by trimming the last component (parents)
do|do
block|{
comment|// skip all parent categories which are not accepted by PathPolicy
name|current
operator|.
name|trim
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
operator|!
name|pathPolicy
operator|.
name|shouldAdd
argument_list|(
name|current
argument_list|)
operator|&&
name|current
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
do|;
name|isParent
operator|=
literal|true
expr_stmt|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|reset
specifier|public
name|void
name|reset
parameter_list|()
throws|throws
name|IOException
block|{
name|current
operator|=
name|categories
operator|.
name|next
argument_list|()
expr_stmt|;
name|termAttribute
operator|.
name|resizeBuffer
argument_list|(
name|current
operator|.
name|charsNeededForFullPath
argument_list|()
argument_list|)
expr_stmt|;
name|isParent
operator|=
literal|false
expr_stmt|;
block|}
block|}
end_class
end_unit
