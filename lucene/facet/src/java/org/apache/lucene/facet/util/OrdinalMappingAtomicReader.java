begin_unit
begin_package
DECL|package|org.apache.lucene.facet.util
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|util
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|encoding
operator|.
name|IntDecoder
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|encoding
operator|.
name|IntEncoder
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|params
operator|.
name|CategoryListParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|params
operator|.
name|FacetIndexingParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|taxonomy
operator|.
name|directory
operator|.
name|DirectoryTaxonomyWriter
operator|.
name|OrdinalMap
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|AtomicReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|BinaryDocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|FilterAtomicReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IntsRef
import|;
end_import
begin_comment
comment|/**  * A {@link FilterAtomicReader} for updating facets ordinal references,  * based on an ordinal map. You should use this code in conjunction with merging  * taxonomies - after you merge taxonomies, you receive an {@link OrdinalMap}  * which maps the 'old' ordinals to the 'new' ones. You can use that map to  * re-map the doc values which contain the facets information (ordinals) either  * before or while merging the indexes.  *<p>  * For re-mapping the ordinals during index merge, do the following:  *   *<pre class="prettyprint">  * // merge the old taxonomy with the new one.  * OrdinalMap map = DirectoryTaxonomyWriter.addTaxonomies();  * int[] ordmap = map.getMap();  *   * // Add the index and re-map ordinals on the go  * DirectoryReader reader = DirectoryReader.open(oldDir);  * IndexWriterConfig conf = new IndexWriterConfig(VER, ANALYZER);  * IndexWriter writer = new IndexWriter(newDir, conf);  * List&lt;AtomicReaderContext&gt; leaves = reader.leaves();  *   AtomicReader wrappedLeaves[] = new AtomicReader[leaves.size()];  *   for (int i = 0; i< leaves.size(); i++) {  *     wrappedLeaves[i] = new OrdinalMappingAtomicReader(leaves.get(i).reader(), ordmap);  *   }  * writer.addIndexes(new MultiReader(wrappedLeaves));  * writer.commit();  *</pre>  *   * @lucene.experimental  */
end_comment
begin_class
DECL|class|OrdinalMappingAtomicReader
specifier|public
class|class
name|OrdinalMappingAtomicReader
extends|extends
name|FilterAtomicReader
block|{
DECL|field|ordinalMap
specifier|private
specifier|final
name|int
index|[]
name|ordinalMap
decl_stmt|;
DECL|field|dvFieldMap
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|CategoryListParams
argument_list|>
name|dvFieldMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|CategoryListParams
argument_list|>
argument_list|()
decl_stmt|;
comment|/**    * Wraps an AtomicReader, mapping ordinals according to the ordinalMap.    * Calls {@link #OrdinalMappingAtomicReader(AtomicReader, int[], FacetIndexingParams)    * OrdinalMappingAtomicReader(in, ordinalMap, new DefaultFacetIndexingParams())}    */
DECL|method|OrdinalMappingAtomicReader
specifier|public
name|OrdinalMappingAtomicReader
parameter_list|(
name|AtomicReader
name|in
parameter_list|,
name|int
index|[]
name|ordinalMap
parameter_list|)
block|{
name|this
argument_list|(
name|in
argument_list|,
name|ordinalMap
argument_list|,
name|FacetIndexingParams
operator|.
name|ALL_PARENTS
argument_list|)
expr_stmt|;
block|}
comment|/**    * Wraps an AtomicReader, mapping ordinals according to the ordinalMap,    * using the provided indexingParams.    */
DECL|method|OrdinalMappingAtomicReader
specifier|public
name|OrdinalMappingAtomicReader
parameter_list|(
name|AtomicReader
name|in
parameter_list|,
name|int
index|[]
name|ordinalMap
parameter_list|,
name|FacetIndexingParams
name|indexingParams
parameter_list|)
block|{
name|super
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|this
operator|.
name|ordinalMap
operator|=
name|ordinalMap
expr_stmt|;
for|for
control|(
name|CategoryListParams
name|params
range|:
name|indexingParams
operator|.
name|getAllCategoryListParams
argument_list|()
control|)
block|{
name|dvFieldMap
operator|.
name|put
argument_list|(
name|params
operator|.
name|field
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getBinaryDocValues
specifier|public
name|BinaryDocValues
name|getBinaryDocValues
parameter_list|(
name|String
name|field
parameter_list|)
throws|throws
name|IOException
block|{
name|BinaryDocValues
name|inner
init|=
name|super
operator|.
name|getBinaryDocValues
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|inner
operator|==
literal|null
condition|)
block|{
return|return
name|inner
return|;
block|}
name|CategoryListParams
name|clp
init|=
name|dvFieldMap
operator|.
name|get
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|clp
operator|==
literal|null
condition|)
block|{
return|return
name|inner
return|;
block|}
else|else
block|{
return|return
operator|new
name|OrdinalMappingBinaryDocValues
argument_list|(
name|clp
argument_list|,
name|inner
argument_list|)
return|;
block|}
block|}
DECL|class|OrdinalMappingBinaryDocValues
specifier|private
class|class
name|OrdinalMappingBinaryDocValues
extends|extends
name|BinaryDocValues
block|{
DECL|field|encoder
specifier|private
specifier|final
name|IntEncoder
name|encoder
decl_stmt|;
DECL|field|decoder
specifier|private
specifier|final
name|IntDecoder
name|decoder
decl_stmt|;
DECL|field|ordinals
specifier|private
specifier|final
name|IntsRef
name|ordinals
init|=
operator|new
name|IntsRef
argument_list|(
literal|32
argument_list|)
decl_stmt|;
DECL|field|delegate
specifier|private
specifier|final
name|BinaryDocValues
name|delegate
decl_stmt|;
DECL|field|scratch
specifier|private
specifier|final
name|BytesRef
name|scratch
init|=
operator|new
name|BytesRef
argument_list|()
decl_stmt|;
DECL|method|OrdinalMappingBinaryDocValues
specifier|protected
name|OrdinalMappingBinaryDocValues
parameter_list|(
name|CategoryListParams
name|clp
parameter_list|,
name|BinaryDocValues
name|delegate
parameter_list|)
block|{
name|this
operator|.
name|delegate
operator|=
name|delegate
expr_stmt|;
name|encoder
operator|=
name|clp
operator|.
name|createEncoder
argument_list|()
expr_stmt|;
name|decoder
operator|=
name|encoder
operator|.
name|createMatchingDecoder
argument_list|()
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"synthetic-access"
argument_list|)
annotation|@
name|Override
DECL|method|get
specifier|public
name|void
name|get
parameter_list|(
name|int
name|docID
parameter_list|,
name|BytesRef
name|result
parameter_list|)
block|{
comment|// NOTE: this isn't quite koscher, because in general
comment|// multiple threads can call BinaryDV.get which would
comment|// then conflict on the single scratch instance, but
comment|// because this impl is only used for merging, we know
comment|// only 1 thread calls us:
name|delegate
operator|.
name|get
argument_list|(
name|docID
argument_list|,
name|scratch
argument_list|)
expr_stmt|;
if|if
condition|(
name|scratch
operator|.
name|length
operator|>
literal|0
condition|)
block|{
comment|// We must use scratch (and not re-use result) here,
comment|// else encoder may overwrite the DV provider's
comment|// private byte[]:
name|decoder
operator|.
name|decode
argument_list|(
name|scratch
argument_list|,
name|ordinals
argument_list|)
expr_stmt|;
comment|// map the ordinals
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ordinals
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|ordinals
operator|.
name|ints
index|[
name|i
index|]
operator|=
name|ordinalMap
index|[
name|ordinals
operator|.
name|ints
index|[
name|i
index|]
index|]
expr_stmt|;
block|}
name|encoder
operator|.
name|encode
argument_list|(
name|ordinals
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class
end_unit
