begin_unit
begin_package
DECL|package|org.apache.lucene.facet.enhancements.association
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|enhancements
operator|.
name|association
package|;
end_package
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|enhancements
operator|.
name|CategoryEnhancement
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|enhancements
operator|.
name|params
operator|.
name|EnhancementsIndexingParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|index
operator|.
name|attributes
operator|.
name|CategoryAttribute
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|index
operator|.
name|attributes
operator|.
name|CategoryProperty
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|index
operator|.
name|streaming
operator|.
name|CategoryListTokenizer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|taxonomy
operator|.
name|TaxonomyWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Vint8
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Vint8
operator|.
name|Position
import|;
end_import
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_comment
comment|/**  * A {@link CategoryEnhancement} for adding associations data to the index  * (categories with {@link AssociationProperty}s).  *   * @lucene.experimental  */
end_comment
begin_class
DECL|class|AssociationEnhancement
specifier|public
class|class
name|AssociationEnhancement
implements|implements
name|CategoryEnhancement
block|{
DECL|field|CATEGORY_LIST_TERM_TEXT
specifier|static
specifier|final
name|String
name|CATEGORY_LIST_TERM_TEXT
init|=
literal|"CATEGORY_ASSOCIATION_LIST"
decl_stmt|;
comment|/** Property Classes which extend AssociationProperty */
DECL|field|ASSOCIATION_PROPERTY_CLASSES
specifier|private
specifier|static
specifier|final
name|HashSet
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|CategoryProperty
argument_list|>
argument_list|>
name|ASSOCIATION_PROPERTY_CLASSES
decl_stmt|;
comment|/** Property Classes which do not extend AssociationProperty */
DECL|field|NON_ASSOCIATION_PROPERTY_CLASSES
specifier|private
specifier|static
specifier|final
name|HashSet
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|CategoryProperty
argument_list|>
argument_list|>
name|NON_ASSOCIATION_PROPERTY_CLASSES
decl_stmt|;
static|static
block|{
name|ASSOCIATION_PROPERTY_CLASSES
operator|=
operator|new
name|HashSet
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|CategoryProperty
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|NON_ASSOCIATION_PROPERTY_CLASSES
operator|=
operator|new
name|HashSet
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|CategoryProperty
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
block|}
comment|/**    * For a given class which extends a CategoryProperty, answers whether it is    * an instance of AssociationProperty (AP) or not.<br>    * This method is a cheaper replacement for a call to    *<code>instanceof</code>. It has two HashSets - one for classes which are    * an extension to AP and one for the classes which are not. Whenever a    * property class is introduced:    *<ul>    *<li>if it is known as a property class extending AP (contained in the    * validHashSet)- returns true</li>    *<li>if it is known as a property class NOT extending AP - returns false</li>    *<li>    * If it was not matched against both sets, it calls 'instanceof' to find    * out if it extends AP, puts it in the matching Set and returning true or    * false accordingly</li>    *</ul>    *     * NOTE: 'instanceof' is only called once per a Class (not instance) of a    * property. And as there are few properties (currently 4 concrete    * implementations) the two sets would be rather small    */
DECL|method|isAssociationProperty
specifier|public
specifier|static
name|boolean
name|isAssociationProperty
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|CategoryProperty
argument_list|>
name|clazz
parameter_list|)
block|{
if|if
condition|(
name|ASSOCIATION_PROPERTY_CLASSES
operator|.
name|contains
argument_list|(
name|clazz
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|NON_ASSOCIATION_PROPERTY_CLASSES
operator|.
name|contains
argument_list|(
name|clazz
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|AssociationProperty
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|clazz
argument_list|)
condition|)
block|{
name|ASSOCIATION_PROPERTY_CLASSES
operator|.
name|add
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
name|NON_ASSOCIATION_PROPERTY_CLASSES
operator|.
name|add
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|generatesCategoryList
specifier|public
name|boolean
name|generatesCategoryList
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|getCategoryListTermText
specifier|public
name|String
name|getCategoryListTermText
parameter_list|()
block|{
return|return
name|CATEGORY_LIST_TERM_TEXT
return|;
block|}
annotation|@
name|Override
DECL|method|getCategoryListTokenizer
specifier|public
name|CategoryListTokenizer
name|getCategoryListTokenizer
parameter_list|(
name|TokenStream
name|tokenizer
parameter_list|,
name|EnhancementsIndexingParams
name|indexingParams
parameter_list|,
name|TaxonomyWriter
name|taxonomyWriter
parameter_list|)
block|{
return|return
operator|new
name|AssociationListTokenizer
argument_list|(
name|tokenizer
argument_list|,
name|indexingParams
argument_list|,
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getCategoryTokenBytes
specifier|public
name|byte
index|[]
name|getCategoryTokenBytes
parameter_list|(
name|CategoryAttribute
name|categoryAttribute
parameter_list|)
block|{
name|AssociationProperty
name|property
init|=
name|getAssociationProperty
argument_list|(
name|categoryAttribute
argument_list|)
decl_stmt|;
if|if
condition|(
name|property
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|int
name|association
init|=
name|property
operator|.
name|getAssociation
argument_list|()
decl_stmt|;
name|int
name|bytesNeeded
init|=
name|Vint8
operator|.
name|bytesNeeded
argument_list|(
name|association
argument_list|)
decl_stmt|;
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
name|bytesNeeded
index|]
decl_stmt|;
name|Vint8
operator|.
name|encode
argument_list|(
name|association
argument_list|,
name|buffer
argument_list|,
literal|0
argument_list|)
expr_stmt|;
return|return
name|buffer
return|;
block|}
DECL|method|getAssociationProperty
specifier|public
specifier|static
name|AssociationProperty
name|getAssociationProperty
parameter_list|(
name|CategoryAttribute
name|categoryAttribute
parameter_list|)
block|{
name|AssociationProperty
name|property
init|=
literal|null
decl_stmt|;
name|Set
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|CategoryProperty
argument_list|>
argument_list|>
name|propertyClasses
init|=
name|categoryAttribute
operator|.
name|getPropertyClasses
argument_list|()
decl_stmt|;
if|if
condition|(
name|propertyClasses
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
for|for
control|(
name|Class
argument_list|<
name|?
extends|extends
name|CategoryProperty
argument_list|>
name|clazz
range|:
name|propertyClasses
control|)
block|{
if|if
condition|(
name|isAssociationProperty
argument_list|(
name|clazz
argument_list|)
condition|)
block|{
name|property
operator|=
operator|(
name|AssociationProperty
operator|)
name|categoryAttribute
operator|.
name|getProperty
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
return|return
name|property
return|;
block|}
annotation|@
name|Override
DECL|method|extractCategoryTokenData
specifier|public
name|Object
name|extractCategoryTokenData
parameter_list|(
name|byte
index|[]
name|buffer
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
if|if
condition|(
name|length
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Integer
name|i
init|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|Vint8
operator|.
name|decode
argument_list|(
name|buffer
argument_list|,
operator|new
name|Position
argument_list|(
name|offset
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|i
return|;
block|}
annotation|@
name|Override
DECL|method|getRetainableProperty
specifier|public
name|Class
argument_list|<
name|?
extends|extends
name|CategoryProperty
argument_list|>
name|getRetainableProperty
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
name|this
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
operator|(
name|o
operator|instanceof
name|AssociationEnhancement
operator|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|super
operator|.
name|hashCode
argument_list|()
return|;
block|}
block|}
end_class
end_unit
