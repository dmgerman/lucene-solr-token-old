begin_unit
begin_package
DECL|package|org.apache.lucene.facet.enhancements.association
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|enhancements
operator|.
name|association
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|index
operator|.
name|params
operator|.
name|CategoryListParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|search
operator|.
name|PayloadIntDecodingIterator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|collections
operator|.
name|IntIterator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|collections
operator|.
name|IntToIntMap
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|encoding
operator|.
name|SimpleIntDecoder
import|;
end_import
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_comment
comment|/**  * Allows easy iteration over the associations payload, decoding and breaking it  * to (ordinal, value) pairs, stored in a hash.  *   * @lucene.experimental  */
end_comment
begin_class
DECL|class|AssociationsPayloadIterator
specifier|public
class|class
name|AssociationsPayloadIterator
block|{
comment|/**    * Default Term for associations    */
DECL|field|ASSOCIATION_POSTING_TERM
specifier|public
specifier|static
specifier|final
name|Term
name|ASSOCIATION_POSTING_TERM
init|=
operator|new
name|Term
argument_list|(
name|CategoryListParams
operator|.
name|DEFAULT_TERM
operator|.
name|field
argument_list|()
argument_list|,
name|AssociationEnhancement
operator|.
name|CATEGORY_LIST_TERM_TEXT
argument_list|)
decl_stmt|;
comment|/**    * Hash mapping to ordinals to the associated int value    */
DECL|field|ordinalToAssociationMap
specifier|private
name|IntToIntMap
name|ordinalToAssociationMap
decl_stmt|;
comment|/**    * An inner payload decoder which actually goes through the posting and    * decode the ints representing the ordinals and the values    */
DECL|field|associationPayloadIter
specifier|private
name|PayloadIntDecodingIterator
name|associationPayloadIter
decl_stmt|;
comment|/**    * Marking whether there are associations (at all) in the given index    */
DECL|field|hasAssociations
specifier|private
name|boolean
name|hasAssociations
init|=
literal|false
decl_stmt|;
comment|/**    * The long-special-value returned for ordinals which have no associated int    * value. It is not in the int range of values making it a valid mark.    */
DECL|field|NO_ASSOCIATION
specifier|public
specifier|final
specifier|static
name|long
name|NO_ASSOCIATION
init|=
name|Integer
operator|.
name|MAX_VALUE
operator|+
literal|1
decl_stmt|;
comment|/**    * Construct a new association-iterator, initializing the inner payload    * iterator, with the supplied term and checking whether there are any    * associations within the given index    *     * @param reader    *            a reader containing the postings to be iterated    * @param field    *            the field containing the relevant associations list term    */
DECL|method|AssociationsPayloadIterator
specifier|public
name|AssociationsPayloadIterator
parameter_list|(
name|IndexReader
name|reader
parameter_list|,
name|String
name|field
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Initialize the payloadDecodingIterator
name|associationPayloadIter
operator|=
operator|new
name|PayloadIntDecodingIterator
argument_list|(
name|reader
argument_list|,
comment|// TODO (Facet): should consolidate with AssociationListTokenizer which
comment|// uses AssociationEnhancement.getCatTermText()
operator|new
name|Term
argument_list|(
name|field
argument_list|,
name|AssociationEnhancement
operator|.
name|CATEGORY_LIST_TERM_TEXT
argument_list|)
argument_list|,
operator|new
name|SimpleIntDecoder
argument_list|()
argument_list|)
expr_stmt|;
comment|// Check whether there are any associations
name|hasAssociations
operator|=
name|associationPayloadIter
operator|.
name|init
argument_list|()
expr_stmt|;
name|ordinalToAssociationMap
operator|=
operator|new
name|IntToIntMap
argument_list|()
expr_stmt|;
block|}
comment|/**    * Skipping to the next document, fetching its associations& populating the    * map.    *     * @param docId    *            document id to be skipped to    * @return true if the document contains associations and they were fetched    *         correctly. false otherwise.    * @throws IOException    *             on error    */
DECL|method|setNextDoc
specifier|public
name|boolean
name|setNextDoc
parameter_list|(
name|int
name|docId
parameter_list|)
throws|throws
name|IOException
block|{
name|ordinalToAssociationMap
operator|.
name|clear
argument_list|()
expr_stmt|;
name|boolean
name|docContainsAssociations
init|=
literal|false
decl_stmt|;
try|try
block|{
name|docContainsAssociations
operator|=
name|fetchAssociations
argument_list|(
name|docId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|IOException
name|ioe
init|=
operator|new
name|IOException
argument_list|(
literal|"An Error occured while reading a document's associations payload (docId="
operator|+
name|docId
operator|+
literal|")"
argument_list|)
decl_stmt|;
name|ioe
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|ioe
throw|;
block|}
return|return
name|docContainsAssociations
return|;
block|}
comment|/**    * Get int association value for the given ordinal.<br>    * The return is either an int value casted as long if the ordinal has an    * associated value. Otherwise the returned value would be    * {@link #NO_ASSOCIATION} which is 'pure long' value (e.g not in the int    * range of values)    *     * @param ordinal    *            for which the association value is requested    * @return the associated int value (encapsulated in a long) if the ordinal    *         had an associated value, or {@link #NO_ASSOCIATION} otherwise    */
DECL|method|getAssociation
specifier|public
name|long
name|getAssociation
parameter_list|(
name|int
name|ordinal
parameter_list|)
block|{
if|if
condition|(
name|ordinalToAssociationMap
operator|.
name|containsKey
argument_list|(
name|ordinal
argument_list|)
condition|)
block|{
return|return
name|ordinalToAssociationMap
operator|.
name|get
argument_list|(
name|ordinal
argument_list|)
return|;
block|}
return|return
name|NO_ASSOCIATION
return|;
block|}
comment|/**    * Get an iterator over the ordinals which has an association for the    * document set by {@link #setNextDoc(int)}.    */
DECL|method|getAssociatedOrdinals
specifier|public
name|IntIterator
name|getAssociatedOrdinals
parameter_list|()
block|{
return|return
name|ordinalToAssociationMap
operator|.
name|keyIterator
argument_list|()
return|;
block|}
comment|/**    * Skips to the given docId, getting the values in pairs of (ordinal, value)    * and populating the map    *     * @param docId    *            document id owning the associations    * @return true if associations were fetched successfully, false otherwise    * @throws IOException    *             on error    */
DECL|method|fetchAssociations
specifier|private
name|boolean
name|fetchAssociations
parameter_list|(
name|int
name|docId
parameter_list|)
throws|throws
name|IOException
block|{
comment|// No associations at all? don't bother trying to seek the docID in the
comment|// posting
if|if
condition|(
operator|!
name|hasAssociations
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// No associations for this document? well, nothing to decode than,
comment|// return false
if|if
condition|(
operator|!
name|associationPayloadIter
operator|.
name|skipTo
argument_list|(
name|docId
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// loop over all the values decoded from the payload in pairs.
for|for
control|(
init|;
condition|;
control|)
block|{
comment|// Get the ordinal
name|long
name|ordinal
init|=
name|associationPayloadIter
operator|.
name|nextCategory
argument_list|()
decl_stmt|;
comment|// if no ordinal - it's the end of data, break the loop
if|if
condition|(
name|ordinal
operator|>
name|Integer
operator|.
name|MAX_VALUE
condition|)
block|{
break|break;
block|}
comment|// get the associated value
name|long
name|association
init|=
name|associationPayloadIter
operator|.
name|nextCategory
argument_list|()
decl_stmt|;
comment|// If we're at this step - it means we have an ordinal, do we have
comment|// an association for it?
if|if
condition|(
name|association
operator|>
name|Integer
operator|.
name|MAX_VALUE
condition|)
block|{
comment|// No association!!! A Broken Pair!! PANIC!
throw|throw
operator|new
name|IOException
argument_list|(
literal|"ERROR! Associations should come in pairs of (ordinal, value), yet this payload has an odd number of values! (docId="
operator|+
name|docId
operator|+
literal|")"
argument_list|)
throw|;
block|}
comment|// Populate the map with the given ordinal and association pair
name|ordinalToAssociationMap
operator|.
name|put
argument_list|(
operator|(
name|int
operator|)
name|ordinal
argument_list|,
operator|(
name|int
operator|)
name|association
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
specifier|final
name|int
name|prime
init|=
literal|31
decl_stmt|;
name|int
name|result
init|=
literal|1
decl_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
operator|(
operator|(
name|associationPayloadIter
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|associationPayloadIter
operator|.
name|hashCode
argument_list|()
operator|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|obj
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|getClass
argument_list|()
operator|!=
name|obj
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|AssociationsPayloadIterator
name|other
init|=
operator|(
name|AssociationsPayloadIterator
operator|)
name|obj
decl_stmt|;
if|if
condition|(
name|associationPayloadIter
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|other
operator|.
name|associationPayloadIter
operator|!=
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|associationPayloadIter
operator|.
name|equals
argument_list|(
name|other
operator|.
name|associationPayloadIter
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
block|}
end_class
end_unit
