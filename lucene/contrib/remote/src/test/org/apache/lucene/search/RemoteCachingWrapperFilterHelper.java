begin_unit
begin_package
DECL|package|org.apache.lucene.search
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Assert
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import
begin_comment
comment|/**  * A unit test helper class to help with RemoteCachingWrapperFilter testing and  * assert that it is working correctly.  */
end_comment
begin_class
DECL|class|RemoteCachingWrapperFilterHelper
specifier|public
class|class
name|RemoteCachingWrapperFilterHelper
extends|extends
name|RemoteCachingWrapperFilter
block|{
DECL|field|shouldHaveCache
specifier|private
name|boolean
name|shouldHaveCache
decl_stmt|;
DECL|method|RemoteCachingWrapperFilterHelper
specifier|public
name|RemoteCachingWrapperFilterHelper
parameter_list|(
name|Filter
name|filter
parameter_list|,
name|boolean
name|shouldHaveCache
parameter_list|)
block|{
name|super
argument_list|(
name|filter
argument_list|)
expr_stmt|;
name|this
operator|.
name|shouldHaveCache
operator|=
name|shouldHaveCache
expr_stmt|;
block|}
DECL|method|shouldHaveCache
specifier|public
name|void
name|shouldHaveCache
parameter_list|(
name|boolean
name|shouldHaveCache
parameter_list|)
block|{
name|this
operator|.
name|shouldHaveCache
operator|=
name|shouldHaveCache
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getDocIdSet
specifier|public
name|DocIdSet
name|getDocIdSet
parameter_list|(
name|IndexReader
name|reader
parameter_list|)
throws|throws
name|IOException
block|{
name|Filter
name|cachedFilter
init|=
name|FilterManager
operator|.
name|getInstance
argument_list|()
operator|.
name|getFilter
argument_list|(
name|filter
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"Filter should not be null"
argument_list|,
name|cachedFilter
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|shouldHaveCache
condition|)
block|{
name|Assert
operator|.
name|assertSame
argument_list|(
literal|"First time filter should be the same "
argument_list|,
name|filter
argument_list|,
name|cachedFilter
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|assertNotSame
argument_list|(
literal|"We should have a cached version of the filter"
argument_list|,
name|filter
argument_list|,
name|cachedFilter
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|filter
operator|instanceof
name|CachingWrapperFilterHelper
condition|)
block|{
operator|(
operator|(
name|CachingWrapperFilterHelper
operator|)
name|cachedFilter
operator|)
operator|.
name|setShouldHaveCache
argument_list|(
name|shouldHaveCache
argument_list|)
expr_stmt|;
block|}
return|return
name|cachedFilter
operator|.
name|getDocIdSet
argument_list|(
name|reader
argument_list|)
return|;
block|}
block|}
end_class
end_unit
