begin_unit
begin_package
DECL|package|org.apache.lucene.search
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|MockAnalyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriterConfig
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LogMergePolicy
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|MockRAMDirectory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_comment
comment|/**  * Unit tests for remote sorting code.  * Note: This is a modified copy of {@link TestSort} without duplicated test  * methods and therefore unused members and methodes.   */
end_comment
begin_class
DECL|class|TestRemoteSort
specifier|public
class|class
name|TestRemoteSort
extends|extends
name|RemoteTestCaseJ4
block|{
DECL|field|full
specifier|private
specifier|static
name|IndexSearcher
name|full
decl_stmt|;
DECL|field|indexStore
specifier|private
specifier|static
name|MockRAMDirectory
name|indexStore
decl_stmt|;
DECL|field|queryX
specifier|private
name|Query
name|queryX
decl_stmt|;
DECL|field|queryY
specifier|private
name|Query
name|queryY
decl_stmt|;
DECL|field|queryA
specifier|private
name|Query
name|queryA
decl_stmt|;
DECL|field|queryF
specifier|private
name|Query
name|queryF
decl_stmt|;
DECL|field|sort
specifier|private
name|Sort
name|sort
decl_stmt|;
comment|// document data:
comment|// the tracer field is used to determine which document was hit
comment|// the contents field is used to search and sort by relevance
comment|// the int field to sort by int
comment|// the float field to sort by float
comment|// the string field to sort by string
comment|// the i18n field includes accented characters for testing locale-specific sorting
DECL|field|data
specifier|private
specifier|static
specifier|final
name|String
index|[]
index|[]
name|data
init|=
operator|new
name|String
index|[]
index|[]
block|{
comment|// tracer  contents         int            float           string   custom   i18n               long            double, 'short', byte, 'custom parser encoding'
block|{
literal|"A"
block|,
literal|"x a"
block|,
literal|"5"
block|,
literal|"4f"
block|,
literal|"c"
block|,
literal|"A-3"
block|,
literal|"p\u00EAche"
block|,
literal|"10"
block|,
literal|"-4.0"
block|,
literal|"3"
block|,
literal|"126"
block|,
literal|"J"
block|}
block|,
comment|//A, x
block|{
literal|"B"
block|,
literal|"y a"
block|,
literal|"5"
block|,
literal|"3.4028235E38"
block|,
literal|"i"
block|,
literal|"B-10"
block|,
literal|"HAT"
block|,
literal|"1000000000"
block|,
literal|"40.0"
block|,
literal|"24"
block|,
literal|"1"
block|,
literal|"I"
block|}
block|,
comment|//B, y
block|{
literal|"C"
block|,
literal|"x a b c"
block|,
literal|"2147483647"
block|,
literal|"1.0"
block|,
literal|"j"
block|,
literal|"A-2"
block|,
literal|"p\u00E9ch\u00E9"
block|,
literal|"99999999"
block|,
literal|"40.00002343"
block|,
literal|"125"
block|,
literal|"15"
block|,
literal|"H"
block|}
block|,
comment|//C, x
block|{
literal|"D"
block|,
literal|"y a b c"
block|,
literal|"-1"
block|,
literal|"0.0f"
block|,
literal|"a"
block|,
literal|"C-0"
block|,
literal|"HUT"
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|Double
operator|.
name|MIN_VALUE
argument_list|)
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|Short
operator|.
name|MIN_VALUE
argument_list|)
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|Byte
operator|.
name|MIN_VALUE
argument_list|)
block|,
literal|"G"
block|}
block|,
comment|//D, y
block|{
literal|"E"
block|,
literal|"x a b c d"
block|,
literal|"5"
block|,
literal|"2f"
block|,
literal|"h"
block|,
literal|"B-8"
block|,
literal|"peach"
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|Long
operator|.
name|MIN_VALUE
argument_list|)
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|Double
operator|.
name|MAX_VALUE
argument_list|)
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|Short
operator|.
name|MAX_VALUE
argument_list|)
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|Byte
operator|.
name|MAX_VALUE
argument_list|)
block|,
literal|"F"
block|}
block|,
comment|//E,x
block|{
literal|"F"
block|,
literal|"y a b c d"
block|,
literal|"2"
block|,
literal|"3.14159f"
block|,
literal|"g"
block|,
literal|"B-1"
block|,
literal|"H\u00C5T"
block|,
literal|"-44"
block|,
literal|"343.034435444"
block|,
literal|"-3"
block|,
literal|"0"
block|,
literal|"E"
block|}
block|,
comment|//F,y
block|{
literal|"G"
block|,
literal|"x a b c d"
block|,
literal|"3"
block|,
literal|"-1.0"
block|,
literal|"f"
block|,
literal|"C-100"
block|,
literal|"sin"
block|,
literal|"323254543543"
block|,
literal|"4.043544"
block|,
literal|"5"
block|,
literal|"100"
block|,
literal|"D"
block|}
block|,
comment|//G,x
block|{
literal|"H"
block|,
literal|"y a b c d"
block|,
literal|"0"
block|,
literal|"1.4E-45"
block|,
literal|"e"
block|,
literal|"C-88"
block|,
literal|"H\u00D8T"
block|,
literal|"1023423423005"
block|,
literal|"4.043545"
block|,
literal|"10"
block|,
literal|"-50"
block|,
literal|"C"
block|}
block|,
comment|//H,y
block|{
literal|"I"
block|,
literal|"x a b c d e f"
block|,
literal|"-2147483648"
block|,
literal|"1.0e+0"
block|,
literal|"d"
block|,
literal|"A-10"
block|,
literal|"s\u00EDn"
block|,
literal|"332422459999"
block|,
literal|"4.043546"
block|,
literal|"-340"
block|,
literal|"51"
block|,
literal|"B"
block|}
block|,
comment|//I,x
block|{
literal|"J"
block|,
literal|"y a b c d e f"
block|,
literal|"4"
block|,
literal|".5"
block|,
literal|"b"
block|,
literal|"C-7"
block|,
literal|"HOT"
block|,
literal|"34334543543"
block|,
literal|"4.0000220343"
block|,
literal|"300"
block|,
literal|"2"
block|,
literal|"A"
block|}
block|,
comment|//J,y
block|{
literal|"W"
block|,
literal|"g"
block|,
literal|"1"
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|}
block|,
block|{
literal|"X"
block|,
literal|"g"
block|,
literal|"1"
block|,
literal|"0.1"
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|}
block|,
block|{
literal|"Y"
block|,
literal|"g"
block|,
literal|"1"
block|,
literal|"0.2"
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|}
block|,
block|{
literal|"Z"
block|,
literal|"f g"
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|}
block|}
decl_stmt|;
comment|// create an index of all the documents, or just the x, or just the y documents
annotation|@
name|BeforeClass
DECL|method|beforeClass
specifier|public
specifier|static
name|void
name|beforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|Random
name|random
init|=
name|newStaticRandom
argument_list|(
name|TestRemoteSort
operator|.
name|class
argument_list|)
decl_stmt|;
name|indexStore
operator|=
name|newDirectory
argument_list|(
name|random
argument_list|)
expr_stmt|;
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|indexStore
argument_list|,
name|newIndexWriterConfig
argument_list|(
name|random
argument_list|,
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|()
argument_list|)
operator|.
name|setMaxBufferedDocs
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
operator|(
operator|(
name|LogMergePolicy
operator|)
name|writer
operator|.
name|getConfig
argument_list|()
operator|.
name|getMergePolicy
argument_list|()
operator|)
operator|.
name|setMergeFactor
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|data
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"tracer"
argument_list|,
name|data
index|[
name|i
index|]
index|[
literal|0
index|]
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"contents"
argument_list|,
name|data
index|[
name|i
index|]
index|[
literal|1
index|]
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|ANALYZED
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|data
index|[
name|i
index|]
index|[
literal|2
index|]
operator|!=
literal|null
condition|)
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"int"
argument_list|,
name|data
index|[
name|i
index|]
index|[
literal|2
index|]
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|NOT_ANALYZED
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|data
index|[
name|i
index|]
index|[
literal|3
index|]
operator|!=
literal|null
condition|)
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"float"
argument_list|,
name|data
index|[
name|i
index|]
index|[
literal|3
index|]
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|NOT_ANALYZED
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|data
index|[
name|i
index|]
index|[
literal|4
index|]
operator|!=
literal|null
condition|)
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"string"
argument_list|,
name|data
index|[
name|i
index|]
index|[
literal|4
index|]
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|NOT_ANALYZED
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|data
index|[
name|i
index|]
index|[
literal|5
index|]
operator|!=
literal|null
condition|)
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"custom"
argument_list|,
name|data
index|[
name|i
index|]
index|[
literal|5
index|]
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|NOT_ANALYZED
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|data
index|[
name|i
index|]
index|[
literal|6
index|]
operator|!=
literal|null
condition|)
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"i18n"
argument_list|,
name|data
index|[
name|i
index|]
index|[
literal|6
index|]
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|NOT_ANALYZED
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|data
index|[
name|i
index|]
index|[
literal|7
index|]
operator|!=
literal|null
condition|)
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"long"
argument_list|,
name|data
index|[
name|i
index|]
index|[
literal|7
index|]
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|NOT_ANALYZED
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|data
index|[
name|i
index|]
index|[
literal|8
index|]
operator|!=
literal|null
condition|)
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"double"
argument_list|,
name|data
index|[
name|i
index|]
index|[
literal|8
index|]
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|NOT_ANALYZED
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|data
index|[
name|i
index|]
index|[
literal|9
index|]
operator|!=
literal|null
condition|)
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"short"
argument_list|,
name|data
index|[
name|i
index|]
index|[
literal|9
index|]
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|NOT_ANALYZED
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|data
index|[
name|i
index|]
index|[
literal|10
index|]
operator|!=
literal|null
condition|)
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"byte"
argument_list|,
name|data
index|[
name|i
index|]
index|[
literal|10
index|]
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|NOT_ANALYZED
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|data
index|[
name|i
index|]
index|[
literal|11
index|]
operator|!=
literal|null
condition|)
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"parser"
argument_list|,
name|data
index|[
name|i
index|]
index|[
literal|11
index|]
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|NOT_ANALYZED
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|setBoost
argument_list|(
literal|2
argument_list|)
expr_stmt|;
comment|// produce some scores above 1.0
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
comment|//writer.optimize ();
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|full
operator|=
operator|new
name|IndexSearcher
argument_list|(
name|indexStore
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|full
operator|.
name|setDefaultFieldSortScoring
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|startServer
argument_list|(
name|full
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|afterClass
specifier|public
specifier|static
name|void
name|afterClass
parameter_list|()
throws|throws
name|Exception
block|{
name|full
operator|.
name|close
argument_list|()
expr_stmt|;
name|full
operator|=
literal|null
expr_stmt|;
name|indexStore
operator|.
name|close
argument_list|()
expr_stmt|;
name|indexStore
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|getRandomNumberString
specifier|public
name|String
name|getRandomNumberString
parameter_list|(
name|int
name|num
parameter_list|,
name|int
name|low
parameter_list|,
name|int
name|high
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|num
condition|;
name|i
operator|++
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|getRandomNumber
argument_list|(
name|low
argument_list|,
name|high
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|getRandomCharString
specifier|public
name|String
name|getRandomCharString
parameter_list|(
name|int
name|num
parameter_list|)
block|{
return|return
name|getRandomCharString
argument_list|(
name|num
argument_list|,
literal|48
argument_list|,
literal|122
argument_list|)
return|;
block|}
DECL|method|getRandomCharString
specifier|public
name|String
name|getRandomCharString
parameter_list|(
name|int
name|num
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|num
condition|;
name|i
operator|++
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
operator|new
name|Character
argument_list|(
operator|(
name|char
operator|)
name|getRandomNumber
argument_list|(
name|start
argument_list|,
name|end
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|field|r
name|Random
name|r
decl_stmt|;
DECL|method|getRandomNumber
specifier|public
name|int
name|getRandomNumber
parameter_list|(
specifier|final
name|int
name|low
parameter_list|,
specifier|final
name|int
name|high
parameter_list|)
block|{
name|int
name|randInt
init|=
operator|(
name|Math
operator|.
name|abs
argument_list|(
name|r
operator|.
name|nextInt
argument_list|()
argument_list|)
operator|%
operator|(
name|high
operator|-
name|low
operator|)
operator|)
operator|+
name|low
decl_stmt|;
return|return
name|randInt
return|;
block|}
annotation|@
name|Override
annotation|@
name|Before
DECL|method|setUp
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|queryX
operator|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"contents"
argument_list|,
literal|"x"
argument_list|)
argument_list|)
expr_stmt|;
name|queryY
operator|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"contents"
argument_list|,
literal|"y"
argument_list|)
argument_list|)
expr_stmt|;
name|queryA
operator|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"contents"
argument_list|,
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|queryF
operator|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"contents"
argument_list|,
literal|"f"
argument_list|)
argument_list|)
expr_stmt|;
name|sort
operator|=
operator|new
name|Sort
argument_list|()
expr_stmt|;
block|}
DECL|class|MyFieldComparator
specifier|static
class|class
name|MyFieldComparator
extends|extends
name|FieldComparator
block|{
DECL|field|docValues
name|int
index|[]
name|docValues
decl_stmt|;
DECL|field|slotValues
name|int
index|[]
name|slotValues
decl_stmt|;
DECL|field|bottomValue
name|int
name|bottomValue
decl_stmt|;
DECL|method|MyFieldComparator
name|MyFieldComparator
parameter_list|(
name|int
name|numHits
parameter_list|)
block|{
name|slotValues
operator|=
operator|new
name|int
index|[
name|numHits
index|]
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|copy
specifier|public
name|void
name|copy
parameter_list|(
name|int
name|slot
parameter_list|,
name|int
name|doc
parameter_list|)
block|{
name|slotValues
index|[
name|slot
index|]
operator|=
name|docValues
index|[
name|doc
index|]
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|compare
specifier|public
name|int
name|compare
parameter_list|(
name|int
name|slot1
parameter_list|,
name|int
name|slot2
parameter_list|)
block|{
return|return
name|slotValues
index|[
name|slot1
index|]
operator|-
name|slotValues
index|[
name|slot2
index|]
return|;
block|}
annotation|@
name|Override
DECL|method|compareBottom
specifier|public
name|int
name|compareBottom
parameter_list|(
name|int
name|doc
parameter_list|)
block|{
return|return
name|bottomValue
operator|-
name|docValues
index|[
name|doc
index|]
return|;
block|}
annotation|@
name|Override
DECL|method|setBottom
specifier|public
name|void
name|setBottom
parameter_list|(
name|int
name|bottom
parameter_list|)
block|{
name|bottomValue
operator|=
name|slotValues
index|[
name|bottom
index|]
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setNextReader
specifier|public
name|void
name|setNextReader
parameter_list|(
name|IndexReader
name|reader
parameter_list|,
name|int
name|docBase
parameter_list|)
throws|throws
name|IOException
block|{
name|docValues
operator|=
name|FieldCache
operator|.
name|DEFAULT
operator|.
name|getInts
argument_list|(
name|reader
argument_list|,
literal|"parser"
argument_list|,
operator|new
name|FieldCache
operator|.
name|IntParser
argument_list|()
block|{
specifier|public
specifier|final
name|int
name|parseInt
parameter_list|(
name|BytesRef
name|termRef
parameter_list|)
block|{
return|return
operator|(
name|termRef
operator|.
name|utf8ToString
argument_list|()
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|-
literal|'A'
operator|)
operator|*
literal|123456
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|value
specifier|public
name|Comparable
argument_list|<
name|?
argument_list|>
name|value
parameter_list|(
name|int
name|slot
parameter_list|)
block|{
return|return
name|Integer
operator|.
name|valueOf
argument_list|(
name|slotValues
index|[
name|slot
index|]
argument_list|)
return|;
block|}
block|}
DECL|class|MyFieldComparatorSource
specifier|static
class|class
name|MyFieldComparatorSource
extends|extends
name|FieldComparatorSource
block|{
annotation|@
name|Override
DECL|method|newComparator
specifier|public
name|FieldComparator
name|newComparator
parameter_list|(
name|String
name|fieldname
parameter_list|,
name|int
name|numHits
parameter_list|,
name|int
name|sortPos
parameter_list|,
name|boolean
name|reversed
parameter_list|)
block|{
return|return
operator|new
name|MyFieldComparator
argument_list|(
name|numHits
argument_list|)
return|;
block|}
block|}
comment|// test a variety of sorts using a remote searcher
annotation|@
name|Test
DECL|method|testRemoteSort
specifier|public
name|void
name|testRemoteSort
parameter_list|()
throws|throws
name|Exception
block|{
name|Searchable
name|searcher
init|=
name|lookupRemote
argument_list|()
decl_stmt|;
name|MultiSearcher
name|multi
init|=
operator|new
name|MultiSearcher
argument_list|(
operator|new
name|Searchable
index|[]
block|{
name|searcher
block|}
argument_list|)
decl_stmt|;
name|runMultiSorts
argument_list|(
name|multi
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// this runs on the full index
block|}
comment|// test custom search when remote
comment|/* rewrite with new API   public void testRemoteCustomSort() throws Exception {     Searchable searcher = getRemote();     MultiSearcher multi = new MultiSearcher (new Searchable[] { searcher });     sort.setSort (new SortField ("custom", SampleComparable.getComparatorSource()));     assertMatches (multi, queryX, sort, "CAIEG");     sort.setSort (new SortField ("custom", SampleComparable.getComparatorSource(), true));     assertMatches (multi, queryY, sort, "HJDBF");      assertSaneFieldCaches(getName() + " ComparatorSource");     FieldCache.DEFAULT.purgeAllCaches();      SortComparator custom = SampleComparable.getComparator();     sort.setSort (new SortField ("custom", custom));     assertMatches (multi, queryX, sort, "CAIEG");     sort.setSort (new SortField ("custom", custom, true));     assertMatches (multi, queryY, sort, "HJDBF");      assertSaneFieldCaches(getName() + " Comparator");     FieldCache.DEFAULT.purgeAllCaches();   }*/
comment|// test that the relevancy scores are the same even if
comment|// hits are sorted
annotation|@
name|Test
DECL|method|testNormalizedScores
specifier|public
name|void
name|testNormalizedScores
parameter_list|()
throws|throws
name|Exception
block|{
comment|// capture relevancy scores
name|HashMap
argument_list|<
name|String
argument_list|,
name|Float
argument_list|>
name|scoresX
init|=
name|getScores
argument_list|(
name|full
operator|.
name|search
argument_list|(
name|queryX
argument_list|,
literal|null
argument_list|,
literal|1000
argument_list|)
operator|.
name|scoreDocs
argument_list|,
name|full
argument_list|)
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|Float
argument_list|>
name|scoresY
init|=
name|getScores
argument_list|(
name|full
operator|.
name|search
argument_list|(
name|queryY
argument_list|,
literal|null
argument_list|,
literal|1000
argument_list|)
operator|.
name|scoreDocs
argument_list|,
name|full
argument_list|)
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|Float
argument_list|>
name|scoresA
init|=
name|getScores
argument_list|(
name|full
operator|.
name|search
argument_list|(
name|queryA
argument_list|,
literal|null
argument_list|,
literal|1000
argument_list|)
operator|.
name|scoreDocs
argument_list|,
name|full
argument_list|)
decl_stmt|;
comment|// we'll test searching locally, remote and multi
name|MultiSearcher
name|remote
init|=
operator|new
name|MultiSearcher
argument_list|(
operator|new
name|Searchable
index|[]
block|{
name|lookupRemote
argument_list|()
block|}
argument_list|)
decl_stmt|;
comment|// change sorting and make sure relevancy stays the same
name|sort
operator|=
operator|new
name|Sort
argument_list|()
expr_stmt|;
name|assertSameValues
argument_list|(
name|scoresX
argument_list|,
name|getScores
argument_list|(
name|remote
operator|.
name|search
argument_list|(
name|queryX
argument_list|,
literal|null
argument_list|,
literal|1000
argument_list|,
name|sort
argument_list|)
operator|.
name|scoreDocs
argument_list|,
name|remote
argument_list|)
argument_list|)
expr_stmt|;
name|assertSameValues
argument_list|(
name|scoresY
argument_list|,
name|getScores
argument_list|(
name|remote
operator|.
name|search
argument_list|(
name|queryY
argument_list|,
literal|null
argument_list|,
literal|1000
argument_list|,
name|sort
argument_list|)
operator|.
name|scoreDocs
argument_list|,
name|remote
argument_list|)
argument_list|)
expr_stmt|;
name|assertSameValues
argument_list|(
name|scoresA
argument_list|,
name|getScores
argument_list|(
name|remote
operator|.
name|search
argument_list|(
name|queryA
argument_list|,
literal|null
argument_list|,
literal|1000
argument_list|,
name|sort
argument_list|)
operator|.
name|scoreDocs
argument_list|,
name|remote
argument_list|)
argument_list|)
expr_stmt|;
name|sort
operator|.
name|setSort
argument_list|(
name|SortField
operator|.
name|FIELD_DOC
argument_list|)
expr_stmt|;
name|assertSameValues
argument_list|(
name|scoresX
argument_list|,
name|getScores
argument_list|(
name|remote
operator|.
name|search
argument_list|(
name|queryX
argument_list|,
literal|null
argument_list|,
literal|1000
argument_list|,
name|sort
argument_list|)
operator|.
name|scoreDocs
argument_list|,
name|remote
argument_list|)
argument_list|)
expr_stmt|;
name|assertSameValues
argument_list|(
name|scoresY
argument_list|,
name|getScores
argument_list|(
name|remote
operator|.
name|search
argument_list|(
name|queryY
argument_list|,
literal|null
argument_list|,
literal|1000
argument_list|,
name|sort
argument_list|)
operator|.
name|scoreDocs
argument_list|,
name|remote
argument_list|)
argument_list|)
expr_stmt|;
name|assertSameValues
argument_list|(
name|scoresA
argument_list|,
name|getScores
argument_list|(
name|remote
operator|.
name|search
argument_list|(
name|queryA
argument_list|,
literal|null
argument_list|,
literal|1000
argument_list|,
name|sort
argument_list|)
operator|.
name|scoreDocs
argument_list|,
name|remote
argument_list|)
argument_list|)
expr_stmt|;
name|sort
operator|.
name|setSort
argument_list|(
operator|new
name|SortField
argument_list|(
literal|"int"
argument_list|,
name|SortField
operator|.
name|INT
argument_list|)
argument_list|)
expr_stmt|;
name|assertSameValues
argument_list|(
name|scoresX
argument_list|,
name|getScores
argument_list|(
name|remote
operator|.
name|search
argument_list|(
name|queryX
argument_list|,
literal|null
argument_list|,
literal|1000
argument_list|,
name|sort
argument_list|)
operator|.
name|scoreDocs
argument_list|,
name|remote
argument_list|)
argument_list|)
expr_stmt|;
name|assertSameValues
argument_list|(
name|scoresY
argument_list|,
name|getScores
argument_list|(
name|remote
operator|.
name|search
argument_list|(
name|queryY
argument_list|,
literal|null
argument_list|,
literal|1000
argument_list|,
name|sort
argument_list|)
operator|.
name|scoreDocs
argument_list|,
name|remote
argument_list|)
argument_list|)
expr_stmt|;
name|assertSameValues
argument_list|(
name|scoresA
argument_list|,
name|getScores
argument_list|(
name|remote
operator|.
name|search
argument_list|(
name|queryA
argument_list|,
literal|null
argument_list|,
literal|1000
argument_list|,
name|sort
argument_list|)
operator|.
name|scoreDocs
argument_list|,
name|remote
argument_list|)
argument_list|)
expr_stmt|;
name|sort
operator|.
name|setSort
argument_list|(
operator|new
name|SortField
argument_list|(
literal|"float"
argument_list|,
name|SortField
operator|.
name|FLOAT
argument_list|)
argument_list|)
expr_stmt|;
name|assertSameValues
argument_list|(
name|scoresX
argument_list|,
name|getScores
argument_list|(
name|remote
operator|.
name|search
argument_list|(
name|queryX
argument_list|,
literal|null
argument_list|,
literal|1000
argument_list|,
name|sort
argument_list|)
operator|.
name|scoreDocs
argument_list|,
name|remote
argument_list|)
argument_list|)
expr_stmt|;
name|assertSameValues
argument_list|(
name|scoresY
argument_list|,
name|getScores
argument_list|(
name|remote
operator|.
name|search
argument_list|(
name|queryY
argument_list|,
literal|null
argument_list|,
literal|1000
argument_list|,
name|sort
argument_list|)
operator|.
name|scoreDocs
argument_list|,
name|remote
argument_list|)
argument_list|)
expr_stmt|;
name|assertSameValues
argument_list|(
name|scoresA
argument_list|,
name|getScores
argument_list|(
name|remote
operator|.
name|search
argument_list|(
name|queryA
argument_list|,
literal|null
argument_list|,
literal|1000
argument_list|,
name|sort
argument_list|)
operator|.
name|scoreDocs
argument_list|,
name|remote
argument_list|)
argument_list|)
expr_stmt|;
name|sort
operator|.
name|setSort
argument_list|(
operator|new
name|SortField
argument_list|(
literal|"string"
argument_list|,
name|SortField
operator|.
name|STRING
argument_list|)
argument_list|)
expr_stmt|;
name|assertSameValues
argument_list|(
name|scoresX
argument_list|,
name|getScores
argument_list|(
name|remote
operator|.
name|search
argument_list|(
name|queryX
argument_list|,
literal|null
argument_list|,
literal|1000
argument_list|,
name|sort
argument_list|)
operator|.
name|scoreDocs
argument_list|,
name|remote
argument_list|)
argument_list|)
expr_stmt|;
name|assertSameValues
argument_list|(
name|scoresY
argument_list|,
name|getScores
argument_list|(
name|remote
operator|.
name|search
argument_list|(
name|queryY
argument_list|,
literal|null
argument_list|,
literal|1000
argument_list|,
name|sort
argument_list|)
operator|.
name|scoreDocs
argument_list|,
name|remote
argument_list|)
argument_list|)
expr_stmt|;
name|assertSameValues
argument_list|(
name|scoresA
argument_list|,
name|getScores
argument_list|(
name|remote
operator|.
name|search
argument_list|(
name|queryA
argument_list|,
literal|null
argument_list|,
literal|1000
argument_list|,
name|sort
argument_list|)
operator|.
name|scoreDocs
argument_list|,
name|remote
argument_list|)
argument_list|)
expr_stmt|;
name|sort
operator|.
name|setSort
argument_list|(
operator|new
name|SortField
argument_list|(
literal|"int"
argument_list|,
name|SortField
operator|.
name|INT
argument_list|)
argument_list|,
operator|new
name|SortField
argument_list|(
literal|"float"
argument_list|,
name|SortField
operator|.
name|FLOAT
argument_list|)
argument_list|)
expr_stmt|;
name|assertSameValues
argument_list|(
name|scoresX
argument_list|,
name|getScores
argument_list|(
name|remote
operator|.
name|search
argument_list|(
name|queryX
argument_list|,
literal|null
argument_list|,
literal|1000
argument_list|,
name|sort
argument_list|)
operator|.
name|scoreDocs
argument_list|,
name|remote
argument_list|)
argument_list|)
expr_stmt|;
name|assertSameValues
argument_list|(
name|scoresY
argument_list|,
name|getScores
argument_list|(
name|remote
operator|.
name|search
argument_list|(
name|queryY
argument_list|,
literal|null
argument_list|,
literal|1000
argument_list|,
name|sort
argument_list|)
operator|.
name|scoreDocs
argument_list|,
name|remote
argument_list|)
argument_list|)
expr_stmt|;
name|assertSameValues
argument_list|(
name|scoresA
argument_list|,
name|getScores
argument_list|(
name|remote
operator|.
name|search
argument_list|(
name|queryA
argument_list|,
literal|null
argument_list|,
literal|1000
argument_list|,
name|sort
argument_list|)
operator|.
name|scoreDocs
argument_list|,
name|remote
argument_list|)
argument_list|)
expr_stmt|;
name|sort
operator|.
name|setSort
argument_list|(
operator|new
name|SortField
argument_list|(
literal|"int"
argument_list|,
name|SortField
operator|.
name|INT
argument_list|,
literal|true
argument_list|)
argument_list|,
operator|new
name|SortField
argument_list|(
literal|null
argument_list|,
name|SortField
operator|.
name|DOC
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertSameValues
argument_list|(
name|scoresX
argument_list|,
name|getScores
argument_list|(
name|remote
operator|.
name|search
argument_list|(
name|queryX
argument_list|,
literal|null
argument_list|,
literal|1000
argument_list|,
name|sort
argument_list|)
operator|.
name|scoreDocs
argument_list|,
name|remote
argument_list|)
argument_list|)
expr_stmt|;
name|assertSameValues
argument_list|(
name|scoresY
argument_list|,
name|getScores
argument_list|(
name|remote
operator|.
name|search
argument_list|(
name|queryY
argument_list|,
literal|null
argument_list|,
literal|1000
argument_list|,
name|sort
argument_list|)
operator|.
name|scoreDocs
argument_list|,
name|remote
argument_list|)
argument_list|)
expr_stmt|;
name|assertSameValues
argument_list|(
name|scoresA
argument_list|,
name|getScores
argument_list|(
name|remote
operator|.
name|search
argument_list|(
name|queryA
argument_list|,
literal|null
argument_list|,
literal|1000
argument_list|,
name|sort
argument_list|)
operator|.
name|scoreDocs
argument_list|,
name|remote
argument_list|)
argument_list|)
expr_stmt|;
name|sort
operator|.
name|setSort
argument_list|(
operator|new
name|SortField
argument_list|(
literal|"float"
argument_list|,
name|SortField
operator|.
name|FLOAT
argument_list|)
argument_list|)
expr_stmt|;
name|assertSameValues
argument_list|(
name|scoresX
argument_list|,
name|getScores
argument_list|(
name|remote
operator|.
name|search
argument_list|(
name|queryX
argument_list|,
literal|null
argument_list|,
literal|1000
argument_list|,
name|sort
argument_list|)
operator|.
name|scoreDocs
argument_list|,
name|remote
argument_list|)
argument_list|)
expr_stmt|;
name|assertSameValues
argument_list|(
name|scoresY
argument_list|,
name|getScores
argument_list|(
name|remote
operator|.
name|search
argument_list|(
name|queryY
argument_list|,
literal|null
argument_list|,
literal|1000
argument_list|,
name|sort
argument_list|)
operator|.
name|scoreDocs
argument_list|,
name|remote
argument_list|)
argument_list|)
expr_stmt|;
name|assertSameValues
argument_list|(
name|scoresA
argument_list|,
name|getScores
argument_list|(
name|remote
operator|.
name|search
argument_list|(
name|queryA
argument_list|,
literal|null
argument_list|,
literal|1000
argument_list|,
name|sort
argument_list|)
operator|.
name|scoreDocs
argument_list|,
name|remote
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// runs a variety of sorts useful for multisearchers
DECL|method|runMultiSorts
specifier|private
name|void
name|runMultiSorts
parameter_list|(
name|Searcher
name|multi
parameter_list|,
name|boolean
name|isFull
parameter_list|)
throws|throws
name|Exception
block|{
name|sort
operator|.
name|setSort
argument_list|(
name|SortField
operator|.
name|FIELD_DOC
argument_list|)
expr_stmt|;
name|String
name|expected
init|=
name|isFull
condition|?
literal|"ABCDEFGHIJ"
else|:
literal|"ACEGIBDFHJ"
decl_stmt|;
name|assertMatches
argument_list|(
name|multi
argument_list|,
name|queryA
argument_list|,
name|sort
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|sort
operator|.
name|setSort
argument_list|(
operator|new
name|SortField
argument_list|(
literal|"int"
argument_list|,
name|SortField
operator|.
name|INT
argument_list|)
argument_list|)
expr_stmt|;
name|expected
operator|=
name|isFull
condition|?
literal|"IDHFGJABEC"
else|:
literal|"IDHFGJAEBC"
expr_stmt|;
name|assertMatches
argument_list|(
name|multi
argument_list|,
name|queryA
argument_list|,
name|sort
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|sort
operator|.
name|setSort
argument_list|(
operator|new
name|SortField
argument_list|(
literal|"int"
argument_list|,
name|SortField
operator|.
name|INT
argument_list|)
argument_list|,
name|SortField
operator|.
name|FIELD_DOC
argument_list|)
expr_stmt|;
name|expected
operator|=
name|isFull
condition|?
literal|"IDHFGJABEC"
else|:
literal|"IDHFGJAEBC"
expr_stmt|;
name|assertMatches
argument_list|(
name|multi
argument_list|,
name|queryA
argument_list|,
name|sort
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|sort
operator|.
name|setSort
argument_list|(
operator|new
name|SortField
argument_list|(
literal|"int"
argument_list|,
name|SortField
operator|.
name|INT
argument_list|)
argument_list|)
expr_stmt|;
name|expected
operator|=
name|isFull
condition|?
literal|"IDHFGJABEC"
else|:
literal|"IDHFGJAEBC"
expr_stmt|;
name|assertMatches
argument_list|(
name|multi
argument_list|,
name|queryA
argument_list|,
name|sort
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|sort
operator|.
name|setSort
argument_list|(
operator|new
name|SortField
argument_list|(
literal|"float"
argument_list|,
name|SortField
operator|.
name|FLOAT
argument_list|)
argument_list|,
name|SortField
operator|.
name|FIELD_DOC
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|multi
argument_list|,
name|queryA
argument_list|,
name|sort
argument_list|,
literal|"GDHJCIEFAB"
argument_list|)
expr_stmt|;
name|sort
operator|.
name|setSort
argument_list|(
operator|new
name|SortField
argument_list|(
literal|"float"
argument_list|,
name|SortField
operator|.
name|FLOAT
argument_list|)
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|multi
argument_list|,
name|queryA
argument_list|,
name|sort
argument_list|,
literal|"GDHJCIEFAB"
argument_list|)
expr_stmt|;
name|sort
operator|.
name|setSort
argument_list|(
operator|new
name|SortField
argument_list|(
literal|"string"
argument_list|,
name|SortField
operator|.
name|STRING
argument_list|)
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|multi
argument_list|,
name|queryA
argument_list|,
name|sort
argument_list|,
literal|"DJAIHGFEBC"
argument_list|)
expr_stmt|;
name|sort
operator|.
name|setSort
argument_list|(
operator|new
name|SortField
argument_list|(
literal|"int"
argument_list|,
name|SortField
operator|.
name|INT
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|expected
operator|=
name|isFull
condition|?
literal|"CABEJGFHDI"
else|:
literal|"CAEBJGFHDI"
expr_stmt|;
name|assertMatches
argument_list|(
name|multi
argument_list|,
name|queryA
argument_list|,
name|sort
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|sort
operator|.
name|setSort
argument_list|(
operator|new
name|SortField
argument_list|(
literal|"float"
argument_list|,
name|SortField
operator|.
name|FLOAT
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|multi
argument_list|,
name|queryA
argument_list|,
name|sort
argument_list|,
literal|"BAFECIJHDG"
argument_list|)
expr_stmt|;
name|sort
operator|.
name|setSort
argument_list|(
operator|new
name|SortField
argument_list|(
literal|"string"
argument_list|,
name|SortField
operator|.
name|STRING
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|multi
argument_list|,
name|queryA
argument_list|,
name|sort
argument_list|,
literal|"CBEFGHIAJD"
argument_list|)
expr_stmt|;
name|sort
operator|.
name|setSort
argument_list|(
operator|new
name|SortField
argument_list|(
literal|"int"
argument_list|,
name|SortField
operator|.
name|INT
argument_list|)
argument_list|,
operator|new
name|SortField
argument_list|(
literal|"float"
argument_list|,
name|SortField
operator|.
name|FLOAT
argument_list|)
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|multi
argument_list|,
name|queryA
argument_list|,
name|sort
argument_list|,
literal|"IDHFGJEABC"
argument_list|)
expr_stmt|;
name|sort
operator|.
name|setSort
argument_list|(
operator|new
name|SortField
argument_list|(
literal|"float"
argument_list|,
name|SortField
operator|.
name|FLOAT
argument_list|)
argument_list|,
operator|new
name|SortField
argument_list|(
literal|"string"
argument_list|,
name|SortField
operator|.
name|STRING
argument_list|)
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|multi
argument_list|,
name|queryA
argument_list|,
name|sort
argument_list|,
literal|"GDHJICEFAB"
argument_list|)
expr_stmt|;
name|sort
operator|.
name|setSort
argument_list|(
operator|new
name|SortField
argument_list|(
literal|"int"
argument_list|,
name|SortField
operator|.
name|INT
argument_list|)
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|multi
argument_list|,
name|queryF
argument_list|,
name|sort
argument_list|,
literal|"IZJ"
argument_list|)
expr_stmt|;
name|sort
operator|.
name|setSort
argument_list|(
operator|new
name|SortField
argument_list|(
literal|"int"
argument_list|,
name|SortField
operator|.
name|INT
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|multi
argument_list|,
name|queryF
argument_list|,
name|sort
argument_list|,
literal|"JZI"
argument_list|)
expr_stmt|;
name|sort
operator|.
name|setSort
argument_list|(
operator|new
name|SortField
argument_list|(
literal|"float"
argument_list|,
name|SortField
operator|.
name|FLOAT
argument_list|)
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|multi
argument_list|,
name|queryF
argument_list|,
name|sort
argument_list|,
literal|"ZJI"
argument_list|)
expr_stmt|;
name|sort
operator|.
name|setSort
argument_list|(
operator|new
name|SortField
argument_list|(
literal|"string"
argument_list|,
name|SortField
operator|.
name|STRING
argument_list|)
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|multi
argument_list|,
name|queryF
argument_list|,
name|sort
argument_list|,
literal|"ZJI"
argument_list|)
expr_stmt|;
name|sort
operator|.
name|setSort
argument_list|(
operator|new
name|SortField
argument_list|(
literal|"string"
argument_list|,
name|SortField
operator|.
name|STRING
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|multi
argument_list|,
name|queryF
argument_list|,
name|sort
argument_list|,
literal|"IJZ"
argument_list|)
expr_stmt|;
comment|// up to this point, all of the searches should have "sane"
comment|// FieldCache behavior, and should have reused hte cache in several cases
name|assertSaneFieldCaches
argument_list|(
name|getName
argument_list|()
operator|+
literal|" Basics"
argument_list|)
expr_stmt|;
comment|// next we'll check an alternate Locale for string, so purge first
name|FieldCache
operator|.
name|DEFAULT
operator|.
name|purgeAllCaches
argument_list|()
expr_stmt|;
name|sort
operator|.
name|setSort
argument_list|(
operator|new
name|SortField
argument_list|(
literal|"string"
argument_list|,
name|Locale
operator|.
name|US
argument_list|)
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|multi
argument_list|,
name|queryA
argument_list|,
name|sort
argument_list|,
literal|"DJAIHGFEBC"
argument_list|)
expr_stmt|;
name|sort
operator|.
name|setSort
argument_list|(
operator|new
name|SortField
argument_list|(
literal|"string"
argument_list|,
name|Locale
operator|.
name|US
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|multi
argument_list|,
name|queryA
argument_list|,
name|sort
argument_list|,
literal|"CBEFGHIAJD"
argument_list|)
expr_stmt|;
name|assertSaneFieldCaches
argument_list|(
name|getName
argument_list|()
operator|+
literal|" Locale.US"
argument_list|)
expr_stmt|;
name|FieldCache
operator|.
name|DEFAULT
operator|.
name|purgeAllCaches
argument_list|()
expr_stmt|;
block|}
comment|// make sure the documents returned by the search match the expected list
DECL|method|assertMatches
specifier|private
name|void
name|assertMatches
parameter_list|(
name|Searcher
name|searcher
parameter_list|,
name|Query
name|query
parameter_list|,
name|Sort
name|sort
parameter_list|,
name|String
name|expectedResult
parameter_list|)
throws|throws
name|IOException
block|{
comment|//ScoreDoc[] result = searcher.search (query, null, 1000, sort).scoreDocs;
name|TopDocs
name|hits
init|=
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
literal|null
argument_list|,
name|expectedResult
operator|.
name|length
argument_list|()
argument_list|,
name|sort
argument_list|)
decl_stmt|;
name|ScoreDoc
index|[]
name|result
init|=
name|hits
operator|.
name|scoreDocs
decl_stmt|;
name|assertEquals
argument_list|(
name|hits
operator|.
name|totalHits
argument_list|,
name|expectedResult
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|StringBuilder
name|buff
init|=
operator|new
name|StringBuilder
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|int
name|n
init|=
name|result
operator|.
name|length
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
operator|++
name|i
control|)
block|{
name|Document
name|doc
init|=
name|searcher
operator|.
name|doc
argument_list|(
name|result
index|[
name|i
index|]
operator|.
name|doc
argument_list|)
decl_stmt|;
name|String
index|[]
name|v
init|=
name|doc
operator|.
name|getValues
argument_list|(
literal|"tracer"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|v
operator|.
name|length
condition|;
operator|++
name|j
control|)
block|{
name|buff
operator|.
name|append
argument_list|(
name|v
index|[
name|j
index|]
argument_list|)
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
name|expectedResult
argument_list|,
name|buff
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|getScores
specifier|private
name|HashMap
argument_list|<
name|String
argument_list|,
name|Float
argument_list|>
name|getScores
parameter_list|(
name|ScoreDoc
index|[]
name|hits
parameter_list|,
name|Searcher
name|searcher
parameter_list|)
throws|throws
name|IOException
block|{
name|HashMap
argument_list|<
name|String
argument_list|,
name|Float
argument_list|>
name|scoreMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Float
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|n
init|=
name|hits
operator|.
name|length
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
operator|++
name|i
control|)
block|{
name|Document
name|doc
init|=
name|searcher
operator|.
name|doc
argument_list|(
name|hits
index|[
name|i
index|]
operator|.
name|doc
argument_list|)
decl_stmt|;
name|String
index|[]
name|v
init|=
name|doc
operator|.
name|getValues
argument_list|(
literal|"tracer"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|v
operator|.
name|length
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|scoreMap
operator|.
name|put
argument_list|(
name|v
index|[
literal|0
index|]
argument_list|,
name|Float
operator|.
name|valueOf
argument_list|(
name|hits
index|[
name|i
index|]
operator|.
name|score
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|scoreMap
return|;
block|}
comment|// make sure all the values in the maps match
DECL|method|assertSameValues
specifier|private
name|void
name|assertSameValues
parameter_list|(
name|HashMap
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|m1
parameter_list|,
name|HashMap
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|m2
parameter_list|)
block|{
name|int
name|n
init|=
name|m1
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|m
init|=
name|m2
operator|.
name|size
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|n
argument_list|,
name|m
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|?
argument_list|>
name|iter
init|=
name|m1
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Object
name|key
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|Object
name|o1
init|=
name|m1
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|Object
name|o2
init|=
name|m2
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|o1
operator|instanceof
name|Float
condition|)
block|{
name|assertEquals
argument_list|(
operator|(
operator|(
name|Float
operator|)
name|o1
operator|)
operator|.
name|floatValue
argument_list|()
argument_list|,
operator|(
operator|(
name|Float
operator|)
name|o2
operator|)
operator|.
name|floatValue
argument_list|()
argument_list|,
literal|1e-6
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
name|m1
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|,
name|m2
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class
end_unit
