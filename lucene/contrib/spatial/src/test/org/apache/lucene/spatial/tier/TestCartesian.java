begin_unit
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.spatial.tier
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|tier
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|MockAnalyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|NumericField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|ScoreDoc
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Sort
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|SortField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TermQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TopDocs
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|function
operator|.
name|CustomScoreQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|function
operator|.
name|CustomScoreProvider
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|function
operator|.
name|FieldScoreQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|function
operator|.
name|FieldScoreQuery
operator|.
name|Type
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|DistanceUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|geohash
operator|.
name|GeoHashUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|geometry
operator|.
name|DistanceUnits
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|geometry
operator|.
name|FloatLatLng
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|geometry
operator|.
name|LatLng
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|tier
operator|.
name|projections
operator|.
name|CartesianTierPlotter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|tier
operator|.
name|projections
operator|.
name|IProjector
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|tier
operator|.
name|projections
operator|.
name|SinusoidalProjector
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_class
DECL|class|TestCartesian
specifier|public
class|class
name|TestCartesian
extends|extends
name|LuceneTestCase
block|{
DECL|field|directory
specifier|private
name|Directory
name|directory
decl_stmt|;
DECL|field|searcher
specifier|private
name|IndexSearcher
name|searcher
decl_stmt|;
comment|// reston va
DECL|field|lat
specifier|private
name|double
name|lat
init|=
literal|38.969398
decl_stmt|;
DECL|field|lng
specifier|private
name|double
name|lng
init|=
operator|-
literal|77.386398
decl_stmt|;
DECL|field|latField
specifier|private
name|String
name|latField
init|=
literal|"lat"
decl_stmt|;
DECL|field|lngField
specifier|private
name|String
name|lngField
init|=
literal|"lng"
decl_stmt|;
DECL|field|ctps
specifier|private
name|List
argument_list|<
name|CartesianTierPlotter
argument_list|>
name|ctps
init|=
operator|new
name|LinkedList
argument_list|<
name|CartesianTierPlotter
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|geoHashPrefix
specifier|private
name|String
name|geoHashPrefix
init|=
literal|"_geoHash_"
decl_stmt|;
DECL|field|project
specifier|private
name|IProjector
name|project
init|=
operator|new
name|SinusoidalProjector
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|setUp
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|directory
operator|=
name|newDirectory
argument_list|()
expr_stmt|;
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|directory
argument_list|,
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|setUpPlotter
argument_list|(
literal|2
argument_list|,
literal|15
argument_list|)
expr_stmt|;
name|addData
argument_list|(
name|writer
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|tearDown
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|directory
operator|.
name|close
argument_list|()
expr_stmt|;
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
DECL|method|setUpPlotter
specifier|private
name|void
name|setUpPlotter
parameter_list|(
name|int
name|base
parameter_list|,
name|int
name|top
parameter_list|)
block|{
for|for
control|(
init|;
name|base
operator|<=
name|top
condition|;
name|base
operator|++
control|)
block|{
name|ctps
operator|.
name|add
argument_list|(
operator|new
name|CartesianTierPlotter
argument_list|(
name|base
argument_list|,
name|project
argument_list|,
name|CartesianTierPlotter
operator|.
name|DEFALT_FIELD_PREFIX
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|addPoint
specifier|private
name|void
name|addPoint
parameter_list|(
name|IndexWriter
name|writer
parameter_list|,
name|String
name|name
parameter_list|,
name|double
name|lat
parameter_list|,
name|double
name|lng
parameter_list|)
throws|throws
name|IOException
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newField
argument_list|(
literal|"name"
argument_list|,
name|name
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|ANALYZED
argument_list|)
argument_list|)
expr_stmt|;
comment|// convert the lat / long to lucene fields
name|doc
operator|.
name|add
argument_list|(
operator|new
name|NumericField
argument_list|(
name|latField
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|,
literal|true
argument_list|)
operator|.
name|setDoubleValue
argument_list|(
name|lat
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|NumericField
argument_list|(
name|lngField
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|,
literal|true
argument_list|)
operator|.
name|setDoubleValue
argument_list|(
name|lng
argument_list|)
argument_list|)
expr_stmt|;
comment|// add a default meta field to make searching all documents easy
name|doc
operator|.
name|add
argument_list|(
name|newField
argument_list|(
literal|"metafile"
argument_list|,
literal|"doc"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|ANALYZED
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|ctpsize
init|=
name|ctps
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ctpsize
condition|;
name|i
operator|++
control|)
block|{
name|CartesianTierPlotter
name|ctp
init|=
name|ctps
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|NumericField
argument_list|(
name|ctp
operator|.
name|getTierFieldName
argument_list|()
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|,
literal|true
argument_list|)
operator|.
name|setDoubleValue
argument_list|(
name|ctp
operator|.
name|getTierBoxId
argument_list|(
name|lat
argument_list|,
name|lng
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newField
argument_list|(
name|geoHashPrefix
argument_list|,
name|GeoHashUtils
operator|.
name|encode
argument_list|(
name|lat
argument_list|,
name|lng
argument_list|)
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|NOT_ANALYZED_NO_NORMS
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
DECL|method|addData
specifier|private
name|void
name|addData
parameter_list|(
name|IndexWriter
name|writer
parameter_list|)
throws|throws
name|IOException
block|{
name|addPoint
argument_list|(
name|writer
argument_list|,
literal|"McCormick&amp; Schmick's Seafood Restaurant"
argument_list|,
literal|38.9579000
argument_list|,
operator|-
literal|77.3572000
argument_list|)
expr_stmt|;
name|addPoint
argument_list|(
name|writer
argument_list|,
literal|"Jimmy's Old Town Tavern"
argument_list|,
literal|38.9690000
argument_list|,
operator|-
literal|77.3862000
argument_list|)
expr_stmt|;
name|addPoint
argument_list|(
name|writer
argument_list|,
literal|"Ned Devine's"
argument_list|,
literal|38.9510000
argument_list|,
operator|-
literal|77.4107000
argument_list|)
expr_stmt|;
name|addPoint
argument_list|(
name|writer
argument_list|,
literal|"Old Brogue Irish Pub"
argument_list|,
literal|38.9955000
argument_list|,
operator|-
literal|77.2884000
argument_list|)
expr_stmt|;
name|addPoint
argument_list|(
name|writer
argument_list|,
literal|"Alf Laylah Wa Laylah"
argument_list|,
literal|38.8956000
argument_list|,
operator|-
literal|77.4258000
argument_list|)
expr_stmt|;
name|addPoint
argument_list|(
name|writer
argument_list|,
literal|"Sully's Restaurant&amp; Supper"
argument_list|,
literal|38.9003000
argument_list|,
operator|-
literal|77.4467000
argument_list|)
expr_stmt|;
name|addPoint
argument_list|(
name|writer
argument_list|,
literal|"TGIFriday"
argument_list|,
literal|38.8725000
argument_list|,
operator|-
literal|77.3829000
argument_list|)
expr_stmt|;
name|addPoint
argument_list|(
name|writer
argument_list|,
literal|"Potomac Swing Dance Club"
argument_list|,
literal|38.9027000
argument_list|,
operator|-
literal|77.2639000
argument_list|)
expr_stmt|;
name|addPoint
argument_list|(
name|writer
argument_list|,
literal|"White Tiger Restaurant"
argument_list|,
literal|38.9027000
argument_list|,
operator|-
literal|77.2638000
argument_list|)
expr_stmt|;
name|addPoint
argument_list|(
name|writer
argument_list|,
literal|"Jammin' Java"
argument_list|,
literal|38.9039000
argument_list|,
operator|-
literal|77.2622000
argument_list|)
expr_stmt|;
name|addPoint
argument_list|(
name|writer
argument_list|,
literal|"Potomac Swing Dance Club"
argument_list|,
literal|38.9027000
argument_list|,
operator|-
literal|77.2639000
argument_list|)
expr_stmt|;
name|addPoint
argument_list|(
name|writer
argument_list|,
literal|"WiseAcres Comedy Club"
argument_list|,
literal|38.9248000
argument_list|,
operator|-
literal|77.2344000
argument_list|)
expr_stmt|;
name|addPoint
argument_list|(
name|writer
argument_list|,
literal|"Glen Echo Spanish Ballroom"
argument_list|,
literal|38.9691000
argument_list|,
operator|-
literal|77.1400000
argument_list|)
expr_stmt|;
name|addPoint
argument_list|(
name|writer
argument_list|,
literal|"Whitlow's on Wilson"
argument_list|,
literal|38.8889000
argument_list|,
operator|-
literal|77.0926000
argument_list|)
expr_stmt|;
name|addPoint
argument_list|(
name|writer
argument_list|,
literal|"Iota Club and Cafe"
argument_list|,
literal|38.8890000
argument_list|,
operator|-
literal|77.0923000
argument_list|)
expr_stmt|;
name|addPoint
argument_list|(
name|writer
argument_list|,
literal|"Hilton Washington Embassy Row"
argument_list|,
literal|38.9103000
argument_list|,
operator|-
literal|77.0451000
argument_list|)
expr_stmt|;
name|addPoint
argument_list|(
name|writer
argument_list|,
literal|"HorseFeathers, Bar& Grill"
argument_list|,
literal|39.01220000000001
argument_list|,
operator|-
literal|77.3942
argument_list|)
expr_stmt|;
name|addPoint
argument_list|(
name|writer
argument_list|,
literal|"Marshall Island Airfield"
argument_list|,
literal|7.06
argument_list|,
literal|171.2
argument_list|)
expr_stmt|;
name|addPoint
argument_list|(
name|writer
argument_list|,
literal|"Wonga Wongue Reserve, Gabon"
argument_list|,
operator|-
literal|0.546562
argument_list|,
literal|9.459229
argument_list|)
expr_stmt|;
name|addPoint
argument_list|(
name|writer
argument_list|,
literal|"Midway Island"
argument_list|,
literal|25.7
argument_list|,
operator|-
literal|171.7
argument_list|)
expr_stmt|;
name|addPoint
argument_list|(
name|writer
argument_list|,
literal|"North Pole Way"
argument_list|,
literal|55.0
argument_list|,
literal|4.0
argument_list|)
expr_stmt|;
name|writer
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|// TODO: fix CustomScoreQuery usage in testRange/testGeoHashRange so we don't need this.
name|writer
operator|.
name|optimize
argument_list|()
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testDistances
specifier|public
name|void
name|testDistances
parameter_list|()
throws|throws
name|IOException
throws|,
name|InvalidGeoException
block|{
name|LatLng
name|p1
init|=
operator|new
name|FloatLatLng
argument_list|(
literal|7.06
argument_list|,
literal|171.2
argument_list|)
decl_stmt|;
name|LatLng
name|p2
init|=
operator|new
name|FloatLatLng
argument_list|(
literal|21.6032207
argument_list|,
operator|-
literal|158.0
argument_list|)
decl_stmt|;
name|double
name|miles
init|=
name|p1
operator|.
name|arcDistance
argument_list|(
name|p2
argument_list|,
name|DistanceUnits
operator|.
name|MILES
argument_list|)
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testDistances"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"miles:"
operator|+
name|miles
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|2288.82495932794
argument_list|,
name|miles
argument_list|)
expr_stmt|;
name|LatLng
name|p3
init|=
operator|new
name|FloatLatLng
argument_list|(
literal|41.6032207
argument_list|,
operator|-
literal|73.087749
argument_list|)
decl_stmt|;
name|LatLng
name|p4
init|=
operator|new
name|FloatLatLng
argument_list|(
literal|55.0
argument_list|,
literal|4.0
argument_list|)
decl_stmt|;
name|miles
operator|=
name|p3
operator|.
name|arcDistance
argument_list|(
name|p4
argument_list|,
name|DistanceUnits
operator|.
name|MILES
argument_list|)
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"miles:"
operator|+
name|miles
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3474.331719997617
argument_list|,
name|miles
argument_list|)
expr_stmt|;
block|}
comment|/*public void testCartesianPolyFilterBuilder() throws Exception {     CartesianPolyFilterBuilder cpfb = new CartesianPolyFilterBuilder(CartesianTierPlotter.DEFALT_FIELD_PREFIX, 2, 15);     //try out some shapes     final double miles = 20.0;         // Hawaii         // 2300 miles to Marshall Island Airfield     //Hawaii to Midway is 911 miles     lat = 0;     lng = -179.9;     Shape shape;     shape = cpfb.getBoxShape(lat, lng, miles);     System.out.println("Tier: " + shape.getTierLevel());     System.out.println("area: " + shape.getArea().size());     lat = 30;     lng = -100;     shape = cpfb.getBoxShape(lat, lng, miles);     System.out.println("Tier: " + shape.getTierLevel());     System.out.println("area: " + shape.getArea().size());      lat = 30;     lng = 100;     shape = cpfb.getBoxShape(lat, lng, miles);     System.out.println("Tier: " + shape.getTierLevel());     System.out.println("area: " + shape.getArea().size());   } */
DECL|method|testAntiM
specifier|public
name|void
name|testAntiM
parameter_list|()
throws|throws
name|IOException
throws|,
name|InvalidGeoException
block|{
name|searcher
operator|=
operator|new
name|IndexSearcher
argument_list|(
name|directory
argument_list|,
literal|true
argument_list|)
expr_stmt|;
specifier|final
name|double
name|miles
init|=
literal|2800.0
decl_stmt|;
comment|// Hawaii
comment|// 2300 miles to Marshall Island Airfield
comment|//Hawaii to Midway is 911 miles
name|lat
operator|=
literal|21.6032207
expr_stmt|;
name|lng
operator|=
operator|-
literal|158.0
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testAntiM"
argument_list|)
expr_stmt|;
comment|// create a distance query
specifier|final
name|DistanceQueryBuilder
name|dq
init|=
operator|new
name|DistanceQueryBuilder
argument_list|(
name|lat
argument_list|,
name|lng
argument_list|,
name|miles
argument_list|,
name|latField
argument_list|,
name|lngField
argument_list|,
name|CartesianTierPlotter
operator|.
name|DEFALT_FIELD_PREFIX
argument_list|,
literal|true
argument_list|,
literal|2
argument_list|,
literal|15
argument_list|)
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|dq
argument_list|)
expr_stmt|;
comment|//create a term query to search against all documents
name|Query
name|tq
init|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"metafile"
argument_list|,
literal|"doc"
argument_list|)
argument_list|)
decl_stmt|;
name|FieldScoreQuery
name|fsQuery
init|=
operator|new
name|FieldScoreQuery
argument_list|(
literal|"geo_distance"
argument_list|,
name|Type
operator|.
name|FLOAT
argument_list|)
decl_stmt|;
name|CustomScoreQuery
name|customScore
init|=
operator|new
name|CustomScoreQuery
argument_list|(
name|dq
operator|.
name|getQuery
argument_list|(
name|tq
argument_list|)
argument_list|,
name|fsQuery
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|CustomScoreProvider
name|getCustomScoreProvider
parameter_list|(
name|IndexReader
name|reader
parameter_list|)
block|{
return|return
operator|new
name|CustomScoreProvider
argument_list|(
name|reader
argument_list|)
block|{
annotation|@
name|Override
comment|// TODO: broken, as reader is not used!
specifier|public
name|float
name|customScore
parameter_list|(
name|int
name|doc
parameter_list|,
name|float
name|subQueryScore
parameter_list|,
name|float
name|valSrcScore
parameter_list|)
block|{
if|if
condition|(
name|VERBOSE
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|doc
argument_list|)
expr_stmt|;
if|if
condition|(
name|dq
operator|.
name|distanceFilter
operator|.
name|getDistance
argument_list|(
name|doc
argument_list|)
operator|==
literal|null
condition|)
return|return
literal|0
return|;
name|double
name|distance
init|=
name|dq
operator|.
name|distanceFilter
operator|.
name|getDistance
argument_list|(
name|doc
argument_list|)
decl_stmt|;
comment|// boost score shouldn't exceed 1
if|if
condition|(
name|distance
operator|<
literal|1.0d
condition|)
name|distance
operator|=
literal|1.0d
expr_stmt|;
comment|//boost by distance is invertly proportional to
comment|// to distance from center point to location
name|float
name|score
init|=
call|(
name|float
call|)
argument_list|(
operator|(
name|miles
operator|-
name|distance
operator|)
operator|/
name|miles
argument_list|)
decl_stmt|;
return|return
name|score
operator|*
name|subQueryScore
return|;
block|}
block|}
return|;
block|}
block|}
decl_stmt|;
comment|// Create a distance sort
comment|// As the radius filter has performed the distance calculations
comment|// already, pass in the filter to reuse the results.
comment|//
name|DistanceFieldComparatorSource
name|dsort
init|=
operator|new
name|DistanceFieldComparatorSource
argument_list|(
name|dq
operator|.
name|distanceFilter
argument_list|)
decl_stmt|;
name|Sort
name|sort
init|=
operator|new
name|Sort
argument_list|(
operator|new
name|SortField
argument_list|(
literal|"foo"
argument_list|,
name|dsort
argument_list|,
literal|false
argument_list|)
argument_list|)
decl_stmt|;
comment|// Perform the search, using the term query, the serial chain filter, and the
comment|// distance sort
name|TopDocs
name|hits
init|=
name|searcher
operator|.
name|search
argument_list|(
name|customScore
operator|.
name|createWeight
argument_list|(
name|searcher
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|1000
argument_list|,
name|sort
argument_list|)
decl_stmt|;
name|int
name|results
init|=
name|hits
operator|.
name|totalHits
decl_stmt|;
name|ScoreDoc
index|[]
name|scoreDocs
init|=
name|hits
operator|.
name|scoreDocs
decl_stmt|;
comment|// Get a list of distances
name|Map
argument_list|<
name|Integer
argument_list|,
name|Double
argument_list|>
name|distances
init|=
name|dq
operator|.
name|distanceFilter
operator|.
name|getDistances
argument_list|()
decl_stmt|;
comment|// distances calculated from filter first pass must be less than total
comment|// docs, from the above test of 20 items, 12 will come from the boundary box
comment|// filter, but only 5 are actually in the radius of the results.
comment|// Note Boundary Box filtering, is not accurate enough for most systems.
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Distance Filter filtered: "
operator|+
name|distances
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Results: "
operator|+
name|results
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"============================="
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Distances should be 2 "
operator|+
name|distances
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Results should be 2 "
operator|+
name|results
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|distances
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// fixed a store of only needed distances
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|results
argument_list|)
expr_stmt|;
name|double
name|lastDistance
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|results
condition|;
name|i
operator|++
control|)
block|{
name|Document
name|d
init|=
name|searcher
operator|.
name|doc
argument_list|(
name|scoreDocs
index|[
name|i
index|]
operator|.
name|doc
argument_list|)
decl_stmt|;
name|String
name|name
init|=
name|d
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
name|double
name|rsLat
init|=
name|Double
operator|.
name|parseDouble
argument_list|(
name|d
operator|.
name|get
argument_list|(
name|latField
argument_list|)
argument_list|)
decl_stmt|;
name|double
name|rsLng
init|=
name|Double
operator|.
name|parseDouble
argument_list|(
name|d
operator|.
name|get
argument_list|(
name|lngField
argument_list|)
argument_list|)
decl_stmt|;
name|Double
name|geo_distance
init|=
name|distances
operator|.
name|get
argument_list|(
name|scoreDocs
index|[
name|i
index|]
operator|.
name|doc
argument_list|)
decl_stmt|;
name|double
name|distance
init|=
name|DistanceUtils
operator|.
name|getDistanceMi
argument_list|(
name|lat
argument_list|,
name|lng
argument_list|,
name|rsLat
argument_list|,
name|rsLng
argument_list|)
decl_stmt|;
name|double
name|llm
init|=
name|DistanceUtils
operator|.
name|getLLMDistance
argument_list|(
name|lat
argument_list|,
name|lng
argument_list|,
name|rsLat
argument_list|,
name|rsLng
argument_list|)
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Name: "
operator|+
name|name
operator|+
literal|", Distance "
operator|+
name|distance
argument_list|)
expr_stmt|;
comment|//(res, ortho, harvesine):"+ distance +" |"+ geo_distance +"|"+ llm +" | score "+ hits.score(i));
name|assertTrue
argument_list|(
name|Math
operator|.
name|abs
argument_list|(
operator|(
name|distance
operator|-
name|llm
operator|)
argument_list|)
operator|<
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
name|distance
operator|<
name|miles
operator|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|geo_distance
operator|>=
name|lastDistance
argument_list|)
expr_stmt|;
name|lastDistance
operator|=
name|geo_distance
expr_stmt|;
block|}
name|searcher
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testPoleFlipping
specifier|public
name|void
name|testPoleFlipping
parameter_list|()
throws|throws
name|IOException
throws|,
name|InvalidGeoException
block|{
name|searcher
operator|=
operator|new
name|IndexSearcher
argument_list|(
name|directory
argument_list|,
literal|true
argument_list|)
expr_stmt|;
specifier|final
name|double
name|miles
init|=
literal|3500.0
decl_stmt|;
name|lat
operator|=
literal|41.6032207
expr_stmt|;
name|lng
operator|=
operator|-
literal|73.087749
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testPoleFlipping"
argument_list|)
expr_stmt|;
comment|// create a distance query
specifier|final
name|DistanceQueryBuilder
name|dq
init|=
operator|new
name|DistanceQueryBuilder
argument_list|(
name|lat
argument_list|,
name|lng
argument_list|,
name|miles
argument_list|,
name|latField
argument_list|,
name|lngField
argument_list|,
name|CartesianTierPlotter
operator|.
name|DEFALT_FIELD_PREFIX
argument_list|,
literal|true
argument_list|,
literal|2
argument_list|,
literal|15
argument_list|)
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|dq
argument_list|)
expr_stmt|;
comment|//create a term query to search against all documents
name|Query
name|tq
init|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"metafile"
argument_list|,
literal|"doc"
argument_list|)
argument_list|)
decl_stmt|;
name|FieldScoreQuery
name|fsQuery
init|=
operator|new
name|FieldScoreQuery
argument_list|(
literal|"geo_distance"
argument_list|,
name|Type
operator|.
name|FLOAT
argument_list|)
decl_stmt|;
name|CustomScoreQuery
name|customScore
init|=
operator|new
name|CustomScoreQuery
argument_list|(
name|dq
operator|.
name|getQuery
argument_list|(
name|tq
argument_list|)
argument_list|,
name|fsQuery
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|CustomScoreProvider
name|getCustomScoreProvider
parameter_list|(
name|IndexReader
name|reader
parameter_list|)
block|{
return|return
operator|new
name|CustomScoreProvider
argument_list|(
name|reader
argument_list|)
block|{
annotation|@
name|Override
comment|// TODO: broken, as reader is not used!
specifier|public
name|float
name|customScore
parameter_list|(
name|int
name|doc
parameter_list|,
name|float
name|subQueryScore
parameter_list|,
name|float
name|valSrcScore
parameter_list|)
block|{
if|if
condition|(
name|VERBOSE
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|doc
argument_list|)
expr_stmt|;
if|if
condition|(
name|dq
operator|.
name|distanceFilter
operator|.
name|getDistance
argument_list|(
name|doc
argument_list|)
operator|==
literal|null
condition|)
return|return
literal|0
return|;
name|double
name|distance
init|=
name|dq
operator|.
name|distanceFilter
operator|.
name|getDistance
argument_list|(
name|doc
argument_list|)
decl_stmt|;
comment|// boost score shouldn't exceed 1
if|if
condition|(
name|distance
operator|<
literal|1.0d
condition|)
name|distance
operator|=
literal|1.0d
expr_stmt|;
comment|//boost by distance is invertly proportional to
comment|// to distance from center point to location
name|float
name|score
init|=
call|(
name|float
call|)
argument_list|(
operator|(
name|miles
operator|-
name|distance
operator|)
operator|/
name|miles
argument_list|)
decl_stmt|;
return|return
name|score
operator|*
name|subQueryScore
return|;
block|}
block|}
return|;
block|}
block|}
decl_stmt|;
comment|// Create a distance sort
comment|// As the radius filter has performed the distance calculations
comment|// already, pass in the filter to reuse the results.
comment|//
name|DistanceFieldComparatorSource
name|dsort
init|=
operator|new
name|DistanceFieldComparatorSource
argument_list|(
name|dq
operator|.
name|distanceFilter
argument_list|)
decl_stmt|;
name|Sort
name|sort
init|=
operator|new
name|Sort
argument_list|(
operator|new
name|SortField
argument_list|(
literal|"foo"
argument_list|,
name|dsort
argument_list|,
literal|false
argument_list|)
argument_list|)
decl_stmt|;
comment|// Perform the search, using the term query, the serial chain filter, and the
comment|// distance sort
name|TopDocs
name|hits
init|=
name|searcher
operator|.
name|search
argument_list|(
name|customScore
operator|.
name|createWeight
argument_list|(
name|searcher
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|1000
argument_list|,
name|sort
argument_list|)
decl_stmt|;
name|int
name|results
init|=
name|hits
operator|.
name|totalHits
decl_stmt|;
name|ScoreDoc
index|[]
name|scoreDocs
init|=
name|hits
operator|.
name|scoreDocs
decl_stmt|;
comment|// Get a list of distances
name|Map
argument_list|<
name|Integer
argument_list|,
name|Double
argument_list|>
name|distances
init|=
name|dq
operator|.
name|distanceFilter
operator|.
name|getDistances
argument_list|()
decl_stmt|;
comment|// distances calculated from filter first pass must be less than total
comment|// docs, from the above test of 20 items, 12 will come from the boundary box
comment|// filter, but only 5 are actually in the radius of the results.
comment|// Note Boundary Box filtering, is not accurate enough for most systems.
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Distance Filter filtered: "
operator|+
name|distances
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Results: "
operator|+
name|results
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"============================="
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Distances should be 18 "
operator|+
name|distances
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Results should be 18 "
operator|+
name|results
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|18
argument_list|,
name|distances
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// fixed a store of only needed distances
name|assertEquals
argument_list|(
literal|18
argument_list|,
name|results
argument_list|)
expr_stmt|;
name|double
name|lastDistance
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|results
condition|;
name|i
operator|++
control|)
block|{
name|Document
name|d
init|=
name|searcher
operator|.
name|doc
argument_list|(
name|scoreDocs
index|[
name|i
index|]
operator|.
name|doc
argument_list|)
decl_stmt|;
name|String
name|name
init|=
name|d
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
name|double
name|rsLat
init|=
name|Double
operator|.
name|parseDouble
argument_list|(
name|d
operator|.
name|get
argument_list|(
name|latField
argument_list|)
argument_list|)
decl_stmt|;
name|double
name|rsLng
init|=
name|Double
operator|.
name|parseDouble
argument_list|(
name|d
operator|.
name|get
argument_list|(
name|lngField
argument_list|)
argument_list|)
decl_stmt|;
name|Double
name|geo_distance
init|=
name|distances
operator|.
name|get
argument_list|(
name|scoreDocs
index|[
name|i
index|]
operator|.
name|doc
argument_list|)
decl_stmt|;
name|double
name|distance
init|=
name|DistanceUtils
operator|.
name|getDistanceMi
argument_list|(
name|lat
argument_list|,
name|lng
argument_list|,
name|rsLat
argument_list|,
name|rsLng
argument_list|)
decl_stmt|;
name|double
name|llm
init|=
name|DistanceUtils
operator|.
name|getLLMDistance
argument_list|(
name|lat
argument_list|,
name|lng
argument_list|,
name|rsLat
argument_list|,
name|rsLng
argument_list|)
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Name: "
operator|+
name|name
operator|+
literal|", Distance "
operator|+
name|distance
argument_list|)
expr_stmt|;
comment|//(res, ortho, harvesine):"+ distance +" |"+ geo_distance +"|"+ llm +" | score "+ hits.score(i));
name|assertTrue
argument_list|(
name|Math
operator|.
name|abs
argument_list|(
operator|(
name|distance
operator|-
name|llm
operator|)
argument_list|)
operator|<
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"checking limit "
operator|+
name|distance
operator|+
literal|"< "
operator|+
name|miles
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
name|distance
operator|<
name|miles
operator|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"checking sort "
operator|+
name|geo_distance
operator|+
literal|">= "
operator|+
name|lastDistance
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|geo_distance
operator|>=
name|lastDistance
argument_list|)
expr_stmt|;
name|lastDistance
operator|=
name|geo_distance
expr_stmt|;
block|}
name|searcher
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testRange
specifier|public
name|void
name|testRange
parameter_list|()
throws|throws
name|IOException
throws|,
name|InvalidGeoException
block|{
name|searcher
operator|=
operator|new
name|IndexSearcher
argument_list|(
name|directory
argument_list|,
literal|true
argument_list|)
expr_stmt|;
specifier|final
name|double
index|[]
name|milesToTest
init|=
operator|new
name|double
index|[]
block|{
literal|6.0
block|,
literal|0.5
block|,
literal|0.001
block|,
literal|0.0
block|}
decl_stmt|;
specifier|final
name|int
index|[]
name|expected
init|=
operator|new
name|int
index|[]
block|{
literal|7
block|,
literal|1
block|,
literal|0
block|,
literal|0
block|}
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|expected
operator|.
name|length
condition|;
name|x
operator|++
control|)
block|{
specifier|final
name|double
name|miles
init|=
name|milesToTest
index|[
name|x
index|]
decl_stmt|;
comment|// create a distance query
specifier|final
name|DistanceQueryBuilder
name|dq
init|=
operator|new
name|DistanceQueryBuilder
argument_list|(
name|lat
argument_list|,
name|lng
argument_list|,
name|miles
argument_list|,
name|latField
argument_list|,
name|lngField
argument_list|,
name|CartesianTierPlotter
operator|.
name|DEFALT_FIELD_PREFIX
argument_list|,
literal|true
argument_list|,
literal|2
argument_list|,
literal|15
argument_list|)
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|dq
argument_list|)
expr_stmt|;
comment|//create a term query to search against all documents
name|Query
name|tq
init|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"metafile"
argument_list|,
literal|"doc"
argument_list|)
argument_list|)
decl_stmt|;
name|FieldScoreQuery
name|fsQuery
init|=
operator|new
name|FieldScoreQuery
argument_list|(
literal|"geo_distance"
argument_list|,
name|Type
operator|.
name|FLOAT
argument_list|)
decl_stmt|;
name|CustomScoreQuery
name|customScore
init|=
operator|new
name|CustomScoreQuery
argument_list|(
name|dq
operator|.
name|getQuery
argument_list|(
name|tq
argument_list|)
argument_list|,
name|fsQuery
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|CustomScoreProvider
name|getCustomScoreProvider
parameter_list|(
name|IndexReader
name|reader
parameter_list|)
block|{
return|return
operator|new
name|CustomScoreProvider
argument_list|(
name|reader
argument_list|)
block|{
annotation|@
name|Override
comment|// TODO: broken, as reader is not used!
specifier|public
name|float
name|customScore
parameter_list|(
name|int
name|doc
parameter_list|,
name|float
name|subQueryScore
parameter_list|,
name|float
name|valSrcScore
parameter_list|)
block|{
if|if
condition|(
name|VERBOSE
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|doc
argument_list|)
expr_stmt|;
if|if
condition|(
name|dq
operator|.
name|distanceFilter
operator|.
name|getDistance
argument_list|(
name|doc
argument_list|)
operator|==
literal|null
condition|)
return|return
literal|0
return|;
name|double
name|distance
init|=
name|dq
operator|.
name|distanceFilter
operator|.
name|getDistance
argument_list|(
name|doc
argument_list|)
decl_stmt|;
comment|// boost score shouldn't exceed 1
if|if
condition|(
name|distance
operator|<
literal|1.0d
condition|)
name|distance
operator|=
literal|1.0d
expr_stmt|;
comment|//boost by distance is invertly proportional to
comment|// to distance from center point to location
name|float
name|score
init|=
call|(
name|float
call|)
argument_list|(
operator|(
name|miles
operator|-
name|distance
operator|)
operator|/
name|miles
argument_list|)
decl_stmt|;
return|return
name|score
operator|*
name|subQueryScore
return|;
block|}
block|}
return|;
block|}
block|}
decl_stmt|;
comment|// Create a distance sort
comment|// As the radius filter has performed the distance calculations
comment|// already, pass in the filter to reuse the results.
comment|//
name|DistanceFieldComparatorSource
name|dsort
init|=
operator|new
name|DistanceFieldComparatorSource
argument_list|(
name|dq
operator|.
name|distanceFilter
argument_list|)
decl_stmt|;
name|Sort
name|sort
init|=
operator|new
name|Sort
argument_list|(
operator|new
name|SortField
argument_list|(
literal|"foo"
argument_list|,
name|dsort
argument_list|,
literal|false
argument_list|)
argument_list|)
decl_stmt|;
comment|// Perform the search, using the term query, the serial chain filter, and the
comment|// distance sort
name|TopDocs
name|hits
init|=
name|searcher
operator|.
name|search
argument_list|(
name|customScore
operator|.
name|createWeight
argument_list|(
name|searcher
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|1000
argument_list|,
name|sort
argument_list|)
decl_stmt|;
name|int
name|results
init|=
name|hits
operator|.
name|totalHits
decl_stmt|;
name|ScoreDoc
index|[]
name|scoreDocs
init|=
name|hits
operator|.
name|scoreDocs
decl_stmt|;
comment|// Get a list of distances
name|Map
argument_list|<
name|Integer
argument_list|,
name|Double
argument_list|>
name|distances
init|=
name|dq
operator|.
name|distanceFilter
operator|.
name|getDistances
argument_list|()
decl_stmt|;
comment|// distances calculated from filter first pass must be less than total
comment|// docs, from the above test of 20 items, 12 will come from the boundary box
comment|// filter, but only 5 are actually in the radius of the results.
comment|// Note Boundary Box filtering, is not accurate enough for most systems.
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Distance Filter filtered: "
operator|+
name|distances
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Results: "
operator|+
name|results
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"============================="
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Distances should be 7 "
operator|+
name|expected
index|[
name|x
index|]
operator|+
literal|":"
operator|+
name|distances
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Results should be 7 "
operator|+
name|expected
index|[
name|x
index|]
operator|+
literal|":"
operator|+
name|results
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|expected
index|[
name|x
index|]
argument_list|,
name|distances
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// fixed a store of only needed distances
name|assertEquals
argument_list|(
name|expected
index|[
name|x
index|]
argument_list|,
name|results
argument_list|)
expr_stmt|;
name|double
name|lastDistance
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|results
condition|;
name|i
operator|++
control|)
block|{
name|Document
name|d
init|=
name|searcher
operator|.
name|doc
argument_list|(
name|scoreDocs
index|[
name|i
index|]
operator|.
name|doc
argument_list|)
decl_stmt|;
name|String
name|name
init|=
name|d
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
name|double
name|rsLat
init|=
name|Double
operator|.
name|parseDouble
argument_list|(
name|d
operator|.
name|get
argument_list|(
name|latField
argument_list|)
argument_list|)
decl_stmt|;
name|double
name|rsLng
init|=
name|Double
operator|.
name|parseDouble
argument_list|(
name|d
operator|.
name|get
argument_list|(
name|lngField
argument_list|)
argument_list|)
decl_stmt|;
name|Double
name|geo_distance
init|=
name|distances
operator|.
name|get
argument_list|(
name|scoreDocs
index|[
name|i
index|]
operator|.
name|doc
argument_list|)
decl_stmt|;
name|double
name|distance
init|=
name|DistanceUtils
operator|.
name|getDistanceMi
argument_list|(
name|lat
argument_list|,
name|lng
argument_list|,
name|rsLat
argument_list|,
name|rsLng
argument_list|)
decl_stmt|;
name|double
name|llm
init|=
name|DistanceUtils
operator|.
name|getLLMDistance
argument_list|(
name|lat
argument_list|,
name|lng
argument_list|,
name|rsLat
argument_list|,
name|rsLng
argument_list|)
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Name: "
operator|+
name|name
operator|+
literal|", Distance "
operator|+
name|distance
argument_list|)
expr_stmt|;
comment|//(res, ortho, harvesine):"+ distance +" |"+ geo_distance +"|"+ llm +" | score "+ hits.score(i));
name|assertTrue
argument_list|(
name|Math
operator|.
name|abs
argument_list|(
operator|(
name|distance
operator|-
name|llm
operator|)
argument_list|)
operator|<
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
name|distance
operator|<
name|miles
operator|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|geo_distance
operator|>
name|lastDistance
argument_list|)
expr_stmt|;
name|lastDistance
operator|=
name|geo_distance
expr_stmt|;
block|}
block|}
name|searcher
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testGeoHashRange
specifier|public
name|void
name|testGeoHashRange
parameter_list|()
throws|throws
name|IOException
throws|,
name|InvalidGeoException
block|{
name|searcher
operator|=
operator|new
name|IndexSearcher
argument_list|(
name|directory
argument_list|,
literal|true
argument_list|)
expr_stmt|;
specifier|final
name|double
index|[]
name|milesToTest
init|=
operator|new
name|double
index|[]
block|{
literal|6.0
block|,
literal|0.5
block|,
literal|0.001
block|,
literal|0.0
block|}
decl_stmt|;
specifier|final
name|int
index|[]
name|expected
init|=
operator|new
name|int
index|[]
block|{
literal|7
block|,
literal|1
block|,
literal|0
block|,
literal|0
block|}
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|expected
operator|.
name|length
condition|;
name|x
operator|++
control|)
block|{
specifier|final
name|double
name|miles
init|=
name|milesToTest
index|[
name|x
index|]
decl_stmt|;
comment|// create a distance query
specifier|final
name|DistanceQueryBuilder
name|dq
init|=
operator|new
name|DistanceQueryBuilder
argument_list|(
name|lat
argument_list|,
name|lng
argument_list|,
name|miles
argument_list|,
name|geoHashPrefix
argument_list|,
name|CartesianTierPlotter
operator|.
name|DEFALT_FIELD_PREFIX
argument_list|,
literal|true
argument_list|,
literal|2
argument_list|,
literal|15
argument_list|)
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|dq
argument_list|)
expr_stmt|;
comment|//create a term query to search against all documents
name|Query
name|tq
init|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"metafile"
argument_list|,
literal|"doc"
argument_list|)
argument_list|)
decl_stmt|;
name|FieldScoreQuery
name|fsQuery
init|=
operator|new
name|FieldScoreQuery
argument_list|(
literal|"geo_distance"
argument_list|,
name|Type
operator|.
name|FLOAT
argument_list|)
decl_stmt|;
name|CustomScoreQuery
name|customScore
init|=
operator|new
name|CustomScoreQuery
argument_list|(
name|tq
argument_list|,
name|fsQuery
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|CustomScoreProvider
name|getCustomScoreProvider
parameter_list|(
name|IndexReader
name|reader
parameter_list|)
block|{
return|return
operator|new
name|CustomScoreProvider
argument_list|(
name|reader
argument_list|)
block|{
annotation|@
name|Override
comment|// TODO: broken, as reader is not used!
specifier|public
name|float
name|customScore
parameter_list|(
name|int
name|doc
parameter_list|,
name|float
name|subQueryScore
parameter_list|,
name|float
name|valSrcScore
parameter_list|)
block|{
if|if
condition|(
name|VERBOSE
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|doc
argument_list|)
expr_stmt|;
if|if
condition|(
name|dq
operator|.
name|distanceFilter
operator|.
name|getDistance
argument_list|(
name|doc
argument_list|)
operator|==
literal|null
condition|)
return|return
literal|0
return|;
name|double
name|distance
init|=
name|dq
operator|.
name|distanceFilter
operator|.
name|getDistance
argument_list|(
name|doc
argument_list|)
decl_stmt|;
comment|// boost score shouldn't exceed 1
if|if
condition|(
name|distance
operator|<
literal|1.0d
condition|)
name|distance
operator|=
literal|1.0d
expr_stmt|;
comment|//boost by distance is invertly proportional to
comment|// to distance from center point to location
name|float
name|score
init|=
call|(
name|float
call|)
argument_list|(
operator|(
name|miles
operator|-
name|distance
operator|)
operator|/
name|miles
argument_list|)
decl_stmt|;
return|return
name|score
operator|*
name|subQueryScore
return|;
block|}
block|}
return|;
block|}
block|}
decl_stmt|;
comment|// Create a distance sort
comment|// As the radius filter has performed the distance calculations
comment|// already, pass in the filter to reuse the results.
comment|//
comment|//DistanceFieldComparatorSource dsort = new DistanceFieldComparatorSource(dq.distanceFilter);
comment|//Sort sort = new Sort(new SortField("foo", dsort));
comment|// Perform the search, using the term query, the serial chain filter, and the
comment|// distance sort
name|TopDocs
name|hits
init|=
name|searcher
operator|.
name|search
argument_list|(
name|customScore
operator|.
name|createWeight
argument_list|(
name|searcher
argument_list|)
argument_list|,
name|dq
operator|.
name|getFilter
argument_list|()
argument_list|,
literal|1000
argument_list|)
decl_stmt|;
comment|//,sort);
name|int
name|results
init|=
name|hits
operator|.
name|totalHits
decl_stmt|;
name|ScoreDoc
index|[]
name|scoreDocs
init|=
name|hits
operator|.
name|scoreDocs
decl_stmt|;
comment|// Get a list of distances
name|Map
argument_list|<
name|Integer
argument_list|,
name|Double
argument_list|>
name|distances
init|=
name|dq
operator|.
name|distanceFilter
operator|.
name|getDistances
argument_list|()
decl_stmt|;
comment|// distances calculated from filter first pass must be less than total
comment|// docs, from the above test of 20 items, 12 will come from the boundary box
comment|// filter, but only 5 are actually in the radius of the results.
comment|// Note Boundary Box filtering, is not accurate enough for most systems.
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Distance Filter filtered: "
operator|+
name|distances
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Results: "
operator|+
name|results
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"============================="
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Distances should be 14 "
operator|+
name|expected
index|[
name|x
index|]
operator|+
literal|":"
operator|+
name|distances
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Results should be 7 "
operator|+
name|expected
index|[
name|x
index|]
operator|+
literal|":"
operator|+
name|results
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|expected
index|[
name|x
index|]
argument_list|,
name|distances
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
index|[
name|x
index|]
argument_list|,
name|results
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|results
condition|;
name|i
operator|++
control|)
block|{
name|Document
name|d
init|=
name|searcher
operator|.
name|doc
argument_list|(
name|scoreDocs
index|[
name|i
index|]
operator|.
name|doc
argument_list|)
decl_stmt|;
name|String
name|name
init|=
name|d
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
name|double
name|rsLat
init|=
name|Double
operator|.
name|parseDouble
argument_list|(
name|d
operator|.
name|get
argument_list|(
name|latField
argument_list|)
argument_list|)
decl_stmt|;
name|double
name|rsLng
init|=
name|Double
operator|.
name|parseDouble
argument_list|(
name|d
operator|.
name|get
argument_list|(
name|lngField
argument_list|)
argument_list|)
decl_stmt|;
name|Double
name|geo_distance
init|=
name|distances
operator|.
name|get
argument_list|(
name|scoreDocs
index|[
name|i
index|]
operator|.
name|doc
argument_list|)
decl_stmt|;
name|double
name|distance
init|=
name|DistanceUtils
operator|.
name|getDistanceMi
argument_list|(
name|lat
argument_list|,
name|lng
argument_list|,
name|rsLat
argument_list|,
name|rsLng
argument_list|)
decl_stmt|;
name|double
name|llm
init|=
name|DistanceUtils
operator|.
name|getLLMDistance
argument_list|(
name|lat
argument_list|,
name|lng
argument_list|,
name|rsLat
argument_list|,
name|rsLng
argument_list|)
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Name: "
operator|+
name|name
operator|+
literal|", Distance (res, ortho, harvesine):"
operator|+
name|distance
operator|+
literal|" |"
operator|+
name|geo_distance
operator|+
literal|"|"
operator|+
name|llm
operator|+
literal|" | score "
operator|+
name|scoreDocs
index|[
name|i
index|]
operator|.
name|score
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Math
operator|.
name|abs
argument_list|(
operator|(
name|distance
operator|-
name|llm
operator|)
argument_list|)
operator|<
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
name|distance
operator|<
name|miles
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
name|searcher
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class
end_unit
