begin_unit
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.spatial.tier
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|tier
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Filter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|tier
operator|.
name|projections
operator|.
name|CartesianTierPlotter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|tier
operator|.
name|projections
operator|.
name|IProjector
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|tier
operator|.
name|projections
operator|.
name|SinusoidalProjector
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|geometry
operator|.
name|LatLng
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|geometry
operator|.
name|FloatLatLng
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|geometry
operator|.
name|shape
operator|.
name|LLRect
import|;
end_import
begin_comment
comment|/**  *<p><font color="red"><b>NOTE:</b> This API is still in  * flux and might change in incompatible ways in the next  * release.</font>  */
end_comment
begin_class
DECL|class|CartesianPolyFilterBuilder
specifier|public
class|class
name|CartesianPolyFilterBuilder
block|{
comment|// Finer granularity than 1 mile isn't accurate with
comment|// standard java math.  Also, there's already a 2nd
comment|// precise filter, if needed, in DistanceQueryBuilder,
comment|// that will make the filtering exact.
DECL|field|MILES_FLOOR
specifier|public
specifier|static
specifier|final
name|double
name|MILES_FLOOR
init|=
literal|1.0
decl_stmt|;
DECL|field|projector
specifier|private
name|IProjector
name|projector
init|=
operator|new
name|SinusoidalProjector
argument_list|()
decl_stmt|;
DECL|field|tierPrefix
specifier|private
specifier|final
name|String
name|tierPrefix
decl_stmt|;
DECL|field|minTier
specifier|private
name|int
name|minTier
decl_stmt|;
DECL|field|maxTier
specifier|private
name|int
name|maxTier
decl_stmt|;
comment|/**    *     * @param tierPrefix The prefix for the name of the fields containing the tier info    * @param minTierIndexed The minimum tier level indexed    * @param maxTierIndexed The maximum tier level indexed    */
DECL|method|CartesianPolyFilterBuilder
specifier|public
name|CartesianPolyFilterBuilder
parameter_list|(
name|String
name|tierPrefix
parameter_list|,
name|int
name|minTierIndexed
parameter_list|,
name|int
name|maxTierIndexed
parameter_list|)
block|{
name|this
operator|.
name|tierPrefix
operator|=
name|tierPrefix
expr_stmt|;
name|this
operator|.
name|minTier
operator|=
name|minTierIndexed
expr_stmt|;
name|this
operator|.
name|maxTier
operator|=
name|maxTierIndexed
expr_stmt|;
block|}
DECL|method|getBoxShape
specifier|public
name|Shape
name|getBoxShape
parameter_list|(
name|double
name|latitude
parameter_list|,
name|double
name|longitude
parameter_list|,
name|double
name|miles
parameter_list|)
block|{
if|if
condition|(
name|miles
operator|<
name|MILES_FLOOR
condition|)
block|{
name|miles
operator|=
name|MILES_FLOOR
expr_stmt|;
block|}
name|LLRect
name|box1
init|=
name|LLRect
operator|.
name|createBox
argument_list|(
operator|new
name|FloatLatLng
argument_list|(
name|latitude
argument_list|,
name|longitude
argument_list|)
argument_list|,
name|miles
argument_list|,
name|miles
argument_list|)
decl_stmt|;
name|LatLng
name|lowerLeft
init|=
name|box1
operator|.
name|getLowerLeft
argument_list|()
decl_stmt|;
name|LatLng
name|upperRight
init|=
name|box1
operator|.
name|getUpperRight
argument_list|()
decl_stmt|;
name|double
name|latUpperRight
init|=
name|upperRight
operator|.
name|getLat
argument_list|()
decl_stmt|;
name|double
name|latLowerLeft
init|=
name|lowerLeft
operator|.
name|getLat
argument_list|()
decl_stmt|;
name|double
name|longUpperRight
init|=
name|upperRight
operator|.
name|getLng
argument_list|()
decl_stmt|;
name|double
name|longLowerLeft
init|=
name|lowerLeft
operator|.
name|getLng
argument_list|()
decl_stmt|;
name|CartesianTierPlotter
name|ctp
init|=
operator|new
name|CartesianTierPlotter
argument_list|(
name|miles
argument_list|,
name|projector
argument_list|,
name|tierPrefix
argument_list|,
name|minTier
argument_list|,
name|maxTier
argument_list|)
decl_stmt|;
name|Shape
name|shape
init|=
operator|new
name|Shape
argument_list|(
name|ctp
operator|.
name|getTierLevelId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|longUpperRight
operator|<
name|longLowerLeft
condition|)
block|{
comment|// Box cross the 180 meridian
name|addBoxes
argument_list|(
name|shape
argument_list|,
name|ctp
argument_list|,
name|latLowerLeft
argument_list|,
name|longLowerLeft
argument_list|,
name|latUpperRight
argument_list|,
name|LatLng
operator|.
name|LONGITUDE_DEGREE_MAX
argument_list|)
expr_stmt|;
name|addBoxes
argument_list|(
name|shape
argument_list|,
name|ctp
argument_list|,
name|latLowerLeft
argument_list|,
operator|-
name|LatLng
operator|.
name|LONGITUDE_DEGREE_MIN
argument_list|,
name|latUpperRight
argument_list|,
name|longUpperRight
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|addBoxes
argument_list|(
name|shape
argument_list|,
name|ctp
argument_list|,
name|latLowerLeft
argument_list|,
name|longLowerLeft
argument_list|,
name|latUpperRight
argument_list|,
name|longUpperRight
argument_list|)
expr_stmt|;
block|}
return|return
name|shape
return|;
block|}
DECL|method|addBoxes
specifier|private
name|void
name|addBoxes
parameter_list|(
name|Shape
name|shape
parameter_list|,
name|CartesianTierPlotter
name|tierPlotter
parameter_list|,
name|double
name|lat1
parameter_list|,
name|double
name|long1
parameter_list|,
name|double
name|lat2
parameter_list|,
name|double
name|long2
parameter_list|)
block|{
name|double
name|boxId1
init|=
name|tierPlotter
operator|.
name|getTierBoxId
argument_list|(
name|lat1
argument_list|,
name|long1
argument_list|)
decl_stmt|;
name|double
name|boxId2
init|=
name|tierPlotter
operator|.
name|getTierBoxId
argument_list|(
name|lat2
argument_list|,
name|long2
argument_list|)
decl_stmt|;
name|double
name|tierVert
init|=
name|tierPlotter
operator|.
name|getTierVerticalPosDivider
argument_list|()
decl_stmt|;
name|int
name|LongIndex1
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|round
argument_list|(
name|boxId1
argument_list|)
decl_stmt|;
name|int
name|LatIndex1
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|round
argument_list|(
operator|(
name|boxId1
operator|-
name|LongIndex1
operator|)
operator|*
name|tierVert
argument_list|)
decl_stmt|;
name|int
name|LongIndex2
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|round
argument_list|(
name|boxId2
argument_list|)
decl_stmt|;
name|int
name|LatIndex2
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|round
argument_list|(
operator|(
name|boxId2
operator|-
name|LongIndex2
operator|)
operator|*
name|tierVert
argument_list|)
decl_stmt|;
name|int
name|startLong
decl_stmt|,
name|endLong
decl_stmt|;
name|int
name|startLat
decl_stmt|,
name|endLat
decl_stmt|;
if|if
condition|(
name|LongIndex1
operator|>
name|LongIndex2
condition|)
block|{
name|startLong
operator|=
name|LongIndex2
expr_stmt|;
name|endLong
operator|=
name|LongIndex1
expr_stmt|;
block|}
else|else
block|{
name|startLong
operator|=
name|LongIndex1
expr_stmt|;
name|endLong
operator|=
name|LongIndex2
expr_stmt|;
block|}
if|if
condition|(
name|LatIndex1
operator|>
name|LatIndex2
condition|)
block|{
name|startLat
operator|=
name|LatIndex2
expr_stmt|;
name|endLat
operator|=
name|LatIndex1
expr_stmt|;
block|}
else|else
block|{
name|startLat
operator|=
name|LatIndex1
expr_stmt|;
name|endLat
operator|=
name|LatIndex2
expr_stmt|;
block|}
name|int
name|LatIndex
decl_stmt|,
name|LongIndex
decl_stmt|;
for|for
control|(
name|LongIndex
operator|=
name|startLong
init|;
name|LongIndex
operator|<=
name|endLong
condition|;
name|LongIndex
operator|++
control|)
block|{
for|for
control|(
name|LatIndex
operator|=
name|startLat
init|;
name|LatIndex
operator|<=
name|endLat
condition|;
name|LatIndex
operator|++
control|)
block|{
comment|// create a boxId
name|double
name|boxId
init|=
name|LongIndex
operator|+
name|LatIndex
operator|/
name|tierVert
decl_stmt|;
name|shape
operator|.
name|addBox
argument_list|(
name|boxId
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|getBoundingArea
specifier|public
name|Filter
name|getBoundingArea
parameter_list|(
name|double
name|latitude
parameter_list|,
name|double
name|longitude
parameter_list|,
name|double
name|miles
parameter_list|)
block|{
name|Shape
name|shape
init|=
name|getBoxShape
argument_list|(
name|latitude
argument_list|,
name|longitude
argument_list|,
name|miles
argument_list|)
decl_stmt|;
return|return
operator|new
name|CartesianShapeFilter
argument_list|(
name|shape
argument_list|,
name|tierPrefix
operator|+
name|shape
operator|.
name|getTierId
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class
end_unit
