begin_unit
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.spatial.tier
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|tier
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
operator|.
name|AtomicReaderContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|FilteredDocIdSet
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|FieldCache
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Filter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|DocIdSet
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Bits
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|DistanceUtils
import|;
end_import
begin_comment
comment|/**  *<p><font color="red"><b>NOTE:</b> This API is still in  * flux and might change in incompatible ways in the next  * release.</font>  */
end_comment
begin_class
DECL|class|LatLongDistanceFilter
specifier|public
class|class
name|LatLongDistanceFilter
extends|extends
name|DistanceFilter
block|{
DECL|field|lat
name|double
name|lat
decl_stmt|;
DECL|field|lng
name|double
name|lng
decl_stmt|;
DECL|field|latField
name|String
name|latField
decl_stmt|;
DECL|field|lngField
name|String
name|lngField
decl_stmt|;
DECL|field|nextOffset
name|int
name|nextOffset
init|=
literal|0
decl_stmt|;
comment|/**    * Provide a distance filter based from a center point with a radius    * in miles.    * @param startingFilter Filter to start from    * @param lat    * @param lng    * @param miles    * @param latField    * @param lngField    */
DECL|method|LatLongDistanceFilter
specifier|public
name|LatLongDistanceFilter
parameter_list|(
name|Filter
name|startingFilter
parameter_list|,
name|double
name|lat
parameter_list|,
name|double
name|lng
parameter_list|,
name|double
name|miles
parameter_list|,
name|String
name|latField
parameter_list|,
name|String
name|lngField
parameter_list|)
block|{
name|super
argument_list|(
name|startingFilter
argument_list|,
name|miles
argument_list|)
expr_stmt|;
name|this
operator|.
name|lat
operator|=
name|lat
expr_stmt|;
name|this
operator|.
name|lng
operator|=
name|lng
expr_stmt|;
name|this
operator|.
name|latField
operator|=
name|latField
expr_stmt|;
name|this
operator|.
name|lngField
operator|=
name|lngField
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getDocIdSet
specifier|public
name|DocIdSet
name|getDocIdSet
parameter_list|(
name|AtomicReaderContext
name|context
parameter_list|,
name|Bits
name|acceptDocs
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|double
index|[]
name|latIndex
init|=
name|FieldCache
operator|.
name|DEFAULT
operator|.
name|getDoubles
argument_list|(
name|context
operator|.
name|reader
argument_list|,
name|latField
argument_list|,
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|double
index|[]
name|lngIndex
init|=
name|FieldCache
operator|.
name|DEFAULT
operator|.
name|getDoubles
argument_list|(
name|context
operator|.
name|reader
argument_list|,
name|lngField
argument_list|,
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|int
name|docBase
init|=
name|nextDocBase
decl_stmt|;
name|nextDocBase
operator|+=
name|context
operator|.
name|reader
operator|.
name|maxDoc
argument_list|()
expr_stmt|;
return|return
operator|new
name|FilteredDocIdSet
argument_list|(
name|startingFilter
operator|.
name|getDocIdSet
argument_list|(
name|context
argument_list|,
name|acceptDocs
argument_list|)
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|boolean
name|match
parameter_list|(
name|int
name|doc
parameter_list|)
block|{
name|double
name|x
init|=
name|latIndex
index|[
name|doc
index|]
decl_stmt|;
name|double
name|y
init|=
name|lngIndex
index|[
name|doc
index|]
decl_stmt|;
comment|// round off lat / longs if necessary
comment|//      x = DistanceHandler.getPrecision(x, precise);
comment|//      y = DistanceHandler.getPrecision(y, precise);
name|String
name|ck
init|=
name|Double
operator|.
name|toString
argument_list|(
name|x
argument_list|)
operator|+
literal|","
operator|+
name|Double
operator|.
name|toString
argument_list|(
name|y
argument_list|)
decl_stmt|;
name|Double
name|cachedDistance
init|=
name|distanceLookupCache
operator|.
name|get
argument_list|(
name|ck
argument_list|)
decl_stmt|;
name|double
name|d
decl_stmt|;
if|if
condition|(
name|cachedDistance
operator|!=
literal|null
condition|)
block|{
name|d
operator|=
name|cachedDistance
operator|.
name|doubleValue
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|d
operator|=
name|DistanceUtils
operator|.
name|getDistanceMi
argument_list|(
name|lat
argument_list|,
name|lng
argument_list|,
name|x
argument_list|,
name|y
argument_list|)
expr_stmt|;
name|distanceLookupCache
operator|.
name|put
argument_list|(
name|ck
argument_list|,
name|d
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|d
operator|<
name|distance
condition|)
block|{
comment|// Save distances, so they can be pulled for
comment|// sorting after filtering is done:
name|distances
operator|.
name|put
argument_list|(
name|doc
operator|+
name|docBase
argument_list|,
name|d
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
return|;
block|}
comment|/** Returns true if<code>o</code> is equal to this. */
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
return|return
literal|true
return|;
if|if
condition|(
operator|!
operator|(
name|o
operator|instanceof
name|LatLongDistanceFilter
operator|)
condition|)
return|return
literal|false
return|;
name|LatLongDistanceFilter
name|other
init|=
operator|(
name|LatLongDistanceFilter
operator|)
name|o
decl_stmt|;
if|if
condition|(
operator|!
name|this
operator|.
name|startingFilter
operator|.
name|equals
argument_list|(
name|other
operator|.
name|startingFilter
argument_list|)
operator|||
name|this
operator|.
name|distance
operator|!=
name|other
operator|.
name|distance
operator|||
name|this
operator|.
name|lat
operator|!=
name|other
operator|.
name|lat
operator|||
name|this
operator|.
name|lng
operator|!=
name|other
operator|.
name|lng
operator|||
operator|!
name|this
operator|.
name|latField
operator|.
name|equals
argument_list|(
name|other
operator|.
name|latField
argument_list|)
operator|||
operator|!
name|this
operator|.
name|lngField
operator|.
name|equals
argument_list|(
name|other
operator|.
name|lngField
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
comment|/** Returns a hash code value for this object.*/
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|h
init|=
name|Double
operator|.
name|valueOf
argument_list|(
name|distance
argument_list|)
operator|.
name|hashCode
argument_list|()
decl_stmt|;
name|h
operator|^=
name|startingFilter
operator|.
name|hashCode
argument_list|()
expr_stmt|;
name|h
operator|^=
name|Double
operator|.
name|valueOf
argument_list|(
name|lat
argument_list|)
operator|.
name|hashCode
argument_list|()
expr_stmt|;
name|h
operator|^=
name|Double
operator|.
name|valueOf
argument_list|(
name|lng
argument_list|)
operator|.
name|hashCode
argument_list|()
expr_stmt|;
name|h
operator|^=
name|latField
operator|.
name|hashCode
argument_list|()
expr_stmt|;
name|h
operator|^=
name|lngField
operator|.
name|hashCode
argument_list|()
expr_stmt|;
return|return
name|h
return|;
block|}
block|}
end_class
end_unit
