begin_unit
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.spatial.geometry.shape
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|geometry
operator|.
name|shape
package|;
end_package
begin_comment
comment|/**  * 2d line segment.  *  *<p><font color="red"><b>NOTE:</b> This API is still in  * flux and might change in incompatible ways in the next  * release.</font>  */
end_comment
begin_class
DECL|class|LineSegment
specifier|public
class|class
name|LineSegment
block|{
DECL|field|A
specifier|public
specifier|final
name|Point2D
name|A
init|=
operator|new
name|Point2D
argument_list|()
decl_stmt|;
DECL|field|B
specifier|public
specifier|final
name|Point2D
name|B
init|=
operator|new
name|Point2D
argument_list|()
decl_stmt|;
DECL|method|LineSegment
specifier|public
name|LineSegment
parameter_list|()
block|{
name|A
operator|.
name|set
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|B
operator|.
name|set
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|LineSegment
specifier|public
name|LineSegment
parameter_list|(
name|Point2D
name|p1
parameter_list|,
name|Point2D
name|p2
parameter_list|)
block|{
name|A
operator|.
name|set
argument_list|(
name|p1
argument_list|)
expr_stmt|;
name|B
operator|.
name|set
argument_list|(
name|p2
argument_list|)
expr_stmt|;
block|}
comment|/**    * Finds the distance of a specified point from the line segment and the    * closest point on the segment to the specified point.    *     * @param P    *            Test point.    * @param closestPt    *            (Return) Closest point on the segment to c.    *     * @return Returns the distance from P to the closest point on the segment.    */
DECL|method|distance
specifier|public
name|double
name|distance
parameter_list|(
name|Point2D
name|P
parameter_list|,
name|Point2D
comment|/* out */
name|closestPt
parameter_list|)
block|{
if|if
condition|(
name|closestPt
operator|==
literal|null
condition|)
name|closestPt
operator|=
operator|new
name|Point2D
argument_list|()
expr_stmt|;
comment|// Construct vector v (AB) and w (AP)
name|Vector2D
name|v
init|=
operator|new
name|Vector2D
argument_list|(
name|A
argument_list|,
name|B
argument_list|)
decl_stmt|;
name|Vector2D
name|w
init|=
operator|new
name|Vector2D
argument_list|(
name|A
argument_list|,
name|P
argument_list|)
decl_stmt|;
comment|// Numerator of the component of w onto v. If<= 0 then A
comment|// is the closest point. By separating into the numerator
comment|// and denominator of the component we avoid a division unless
comment|// it is necessary.
name|double
name|n
init|=
name|w
operator|.
name|dot
argument_list|(
name|v
argument_list|)
decl_stmt|;
if|if
condition|(
name|n
operator|<=
literal|0.0f
condition|)
block|{
name|closestPt
operator|.
name|set
argument_list|(
name|A
argument_list|)
expr_stmt|;
return|return
name|w
operator|.
name|norm
argument_list|()
return|;
block|}
comment|// Get the denominator of the component. If the component>= 1
comment|// (d<= n) then point B is the closest point
name|double
name|d
init|=
name|v
operator|.
name|dot
argument_list|(
name|v
argument_list|)
decl_stmt|;
if|if
condition|(
name|d
operator|<=
name|n
condition|)
block|{
name|closestPt
operator|.
name|set
argument_list|(
name|B
argument_list|)
expr_stmt|;
return|return
operator|new
name|Vector2D
argument_list|(
name|B
argument_list|,
name|P
argument_list|)
operator|.
name|norm
argument_list|()
return|;
block|}
comment|// Closest point is along the segment. The point is the projection of
comment|// w onto v.
name|closestPt
operator|.
name|set
argument_list|(
name|v
operator|.
name|mult
argument_list|(
name|n
operator|/
name|d
argument_list|)
argument_list|)
expr_stmt|;
name|closestPt
operator|.
name|add
argument_list|(
name|A
argument_list|)
expr_stmt|;
return|return
operator|new
name|Vector2D
argument_list|(
name|closestPt
argument_list|,
name|P
argument_list|)
operator|.
name|norm
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
specifier|final
name|int
name|prime
init|=
literal|31
decl_stmt|;
name|int
name|result
init|=
literal|1
decl_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
operator|(
operator|(
name|A
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|A
operator|.
name|hashCode
argument_list|()
operator|)
expr_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
operator|(
operator|(
name|B
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|B
operator|.
name|hashCode
argument_list|()
operator|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|obj
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|getClass
argument_list|()
operator|!=
name|obj
operator|.
name|getClass
argument_list|()
condition|)
return|return
literal|false
return|;
name|LineSegment
name|other
init|=
operator|(
name|LineSegment
operator|)
name|obj
decl_stmt|;
if|if
condition|(
name|A
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|other
operator|.
name|A
operator|!=
literal|null
condition|)
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|A
operator|.
name|equals
argument_list|(
name|other
operator|.
name|A
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|B
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|other
operator|.
name|B
operator|!=
literal|null
condition|)
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|B
operator|.
name|equals
argument_list|(
name|other
operator|.
name|B
argument_list|)
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
block|}
end_class
end_unit
