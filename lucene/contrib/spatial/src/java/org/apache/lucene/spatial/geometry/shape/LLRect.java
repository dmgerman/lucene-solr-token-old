begin_unit
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.spatial.geometry.shape
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|geometry
operator|.
name|shape
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|geometry
operator|.
name|DistanceUnits
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|geometry
operator|.
name|FloatLatLng
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|geometry
operator|.
name|LatLng
import|;
end_import
begin_comment
comment|/**  * Lat-long rect.  Instances are mutable.  *  *<p><font color="red"><b>NOTE:</b> This API is still in  * flux and might change in incompatible ways in the next  * release.</font>  */
end_comment
begin_class
DECL|class|LLRect
specifier|public
class|class
name|LLRect
block|{
DECL|field|ll
DECL|field|ur
specifier|private
name|LatLng
name|ll
decl_stmt|,
name|ur
decl_stmt|;
DECL|method|LLRect
specifier|public
name|LLRect
parameter_list|(
name|LatLng
name|ll
parameter_list|,
name|LatLng
name|ur
parameter_list|)
block|{
name|this
operator|.
name|ll
operator|=
name|ll
expr_stmt|;
name|this
operator|.
name|ur
operator|=
name|ur
expr_stmt|;
block|}
DECL|method|LLRect
specifier|public
name|LLRect
parameter_list|(
name|LLRect
name|other
parameter_list|)
block|{
name|this
operator|.
name|ll
operator|=
name|other
operator|.
name|ll
expr_stmt|;
name|this
operator|.
name|ur
operator|=
name|other
operator|.
name|ur
expr_stmt|;
block|}
comment|/**    * Return the area in units of lat-lng squared.  This is a contrived unit    * that only has value when comparing to something else.    */
DECL|method|area
specifier|public
name|double
name|area
parameter_list|()
block|{
return|return
name|Math
operator|.
name|abs
argument_list|(
operator|(
name|ll
operator|.
name|getLat
argument_list|()
operator|-
name|ur
operator|.
name|getLat
argument_list|()
operator|)
operator|*
operator|(
name|ll
operator|.
name|getLng
argument_list|()
operator|-
name|ur
operator|.
name|getLng
argument_list|()
operator|)
argument_list|)
return|;
block|}
DECL|method|getLowerLeft
specifier|public
name|LatLng
name|getLowerLeft
parameter_list|()
block|{
return|return
name|ll
return|;
block|}
DECL|method|getUpperRight
specifier|public
name|LatLng
name|getUpperRight
parameter_list|()
block|{
return|return
name|ur
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"{"
operator|+
name|ll
operator|+
literal|", "
operator|+
name|ur
operator|+
literal|"}"
return|;
block|}
DECL|method|getMidpoint
specifier|public
name|LatLng
name|getMidpoint
parameter_list|()
block|{
return|return
name|ll
operator|.
name|calculateMidpoint
argument_list|(
name|ur
argument_list|)
return|;
block|}
comment|/**    * Approximates a box centered at the given point with the given width and height in miles.    * @param center    * @param widthMi    * @param heightMi    */
DECL|method|createBox
specifier|public
specifier|static
name|LLRect
name|createBox
parameter_list|(
name|LatLng
name|center
parameter_list|,
name|double
name|widthMi
parameter_list|,
name|double
name|heightMi
parameter_list|)
block|{
name|double
name|minLat
decl_stmt|;
name|double
name|maxLat
decl_stmt|;
name|double
name|minLng
decl_stmt|;
name|double
name|maxLng
decl_stmt|;
name|double
name|radius
init|=
name|Math
operator|.
name|max
argument_list|(
name|widthMi
argument_list|,
name|heightMi
argument_list|)
decl_stmt|;
if|if
condition|(
name|radius
operator|>
name|center
operator|.
name|arcDistance
argument_list|(
operator|new
name|FloatLatLng
argument_list|(
name|LatLng
operator|.
name|LATITUDE_DEGREE_MAX
argument_list|,
name|LatLng
operator|.
name|HEADING_NORTH
argument_list|)
argument_list|)
condition|)
block|{
name|maxLat
operator|=
name|LatLng
operator|.
name|LATITUDE_DEGREE_MAX
expr_stmt|;
block|}
else|else
block|{
name|maxLat
operator|=
name|LatLng
operator|.
name|computeDestination
argument_list|(
name|center
argument_list|,
name|radius
argument_list|,
name|LatLng
operator|.
name|HEADING_NORTH
argument_list|)
operator|.
name|getLat
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|radius
operator|>
name|center
operator|.
name|arcDistance
argument_list|(
operator|new
name|FloatLatLng
argument_list|(
name|LatLng
operator|.
name|LATITUDE_DEGREE_MIN
argument_list|,
name|LatLng
operator|.
name|HEADING_NORTH
argument_list|)
argument_list|)
condition|)
block|{
name|minLat
operator|=
name|LatLng
operator|.
name|LATITUDE_DEGREE_MIN
expr_stmt|;
block|}
else|else
block|{
name|minLat
operator|=
name|LatLng
operator|.
name|computeDestination
argument_list|(
name|center
argument_list|,
name|radius
argument_list|,
name|LatLng
operator|.
name|HEADING_SOUTH
argument_list|)
operator|.
name|getLat
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|radius
operator|>
literal|2
operator|*
name|Math
operator|.
name|PI
operator|*
name|DistanceUnits
operator|.
name|MILES
operator|.
name|earthRadius
argument_list|()
operator|*
name|Math
operator|.
name|cos
argument_list|(
name|Math
operator|.
name|toRadians
argument_list|(
name|minLat
argument_list|)
argument_list|)
operator|)
operator|||
operator|(
name|radius
operator|>
literal|2
operator|*
name|Math
operator|.
name|PI
operator|*
name|DistanceUnits
operator|.
name|MILES
operator|.
name|earthRadius
argument_list|()
operator|*
name|Math
operator|.
name|cos
argument_list|(
name|Math
operator|.
name|toRadians
argument_list|(
name|maxLat
argument_list|)
argument_list|)
operator|)
condition|)
block|{
name|maxLng
operator|=
name|LatLng
operator|.
name|LONGITUDE_DEGREE_MAX
expr_stmt|;
name|minLng
operator|=
name|LatLng
operator|.
name|LONGITUDE_DEGREE_MIN
expr_stmt|;
block|}
else|else
block|{
name|maxLng
operator|=
name|LatLng
operator|.
name|computeDestination
argument_list|(
operator|new
name|FloatLatLng
argument_list|(
name|Math
operator|.
name|max
argument_list|(
name|Math
operator|.
name|abs
argument_list|(
name|minLat
argument_list|)
argument_list|,
name|Math
operator|.
name|abs
argument_list|(
name|maxLat
argument_list|)
argument_list|)
argument_list|,
name|center
operator|.
name|getLng
argument_list|()
argument_list|)
argument_list|,
name|radius
argument_list|,
name|LatLng
operator|.
name|HEADING_EAST
argument_list|)
operator|.
name|getLng
argument_list|()
expr_stmt|;
name|minLng
operator|=
name|LatLng
operator|.
name|computeDestination
argument_list|(
operator|new
name|FloatLatLng
argument_list|(
name|Math
operator|.
name|max
argument_list|(
name|Math
operator|.
name|abs
argument_list|(
name|minLat
argument_list|)
argument_list|,
name|Math
operator|.
name|abs
argument_list|(
name|maxLat
argument_list|)
argument_list|)
argument_list|,
name|center
operator|.
name|getLng
argument_list|()
argument_list|)
argument_list|,
name|radius
argument_list|,
name|LatLng
operator|.
name|HEADING_WEST
argument_list|)
operator|.
name|getLng
argument_list|()
expr_stmt|;
block|}
return|return
operator|new
name|LLRect
argument_list|(
operator|(
operator|new
name|FloatLatLng
argument_list|(
name|minLat
argument_list|,
name|minLng
argument_list|)
operator|.
name|normalize
argument_list|()
operator|)
argument_list|,
operator|(
operator|new
name|FloatLatLng
argument_list|(
name|maxLat
argument_list|,
name|maxLng
argument_list|)
operator|)
operator|.
name|normalize
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Returns a rectangle shape for the bounding box    */
DECL|method|toRectangle
specifier|public
name|Rectangle
name|toRectangle
parameter_list|()
block|{
return|return
operator|new
name|Rectangle
argument_list|(
name|ll
operator|.
name|getLng
argument_list|()
argument_list|,
name|ll
operator|.
name|getLat
argument_list|()
argument_list|,
name|ur
operator|.
name|getLng
argument_list|()
argument_list|,
name|ur
operator|.
name|getLat
argument_list|()
argument_list|)
return|;
block|}
DECL|method|boxCorners
specifier|private
specifier|static
name|LatLng
name|boxCorners
parameter_list|(
name|LatLng
name|center
parameter_list|,
name|double
name|d
parameter_list|,
name|double
name|brngdeg
parameter_list|)
block|{
name|double
name|a
init|=
name|center
operator|.
name|getLat
argument_list|()
decl_stmt|;
name|double
name|b
init|=
name|center
operator|.
name|getLng
argument_list|()
decl_stmt|;
name|double
name|R
init|=
literal|3963.0
decl_stmt|;
comment|// radius of earth in miles
name|double
name|brng
init|=
operator|(
name|Math
operator|.
name|PI
operator|*
name|brngdeg
operator|/
literal|180
operator|)
decl_stmt|;
name|double
name|lat1
init|=
operator|(
name|Math
operator|.
name|PI
operator|*
name|a
operator|/
literal|180
operator|)
decl_stmt|;
name|double
name|lon1
init|=
operator|(
name|Math
operator|.
name|PI
operator|*
name|b
operator|/
literal|180
operator|)
decl_stmt|;
comment|// Haversine formula
name|double
name|lat2
init|=
name|Math
operator|.
name|asin
argument_list|(
name|Math
operator|.
name|sin
argument_list|(
name|lat1
argument_list|)
operator|*
name|Math
operator|.
name|cos
argument_list|(
name|d
operator|/
name|R
argument_list|)
operator|+
name|Math
operator|.
name|cos
argument_list|(
name|lat1
argument_list|)
operator|*
name|Math
operator|.
name|sin
argument_list|(
name|d
operator|/
name|R
argument_list|)
operator|*
name|Math
operator|.
name|cos
argument_list|(
name|brng
argument_list|)
argument_list|)
decl_stmt|;
name|double
name|lon2
init|=
name|lon1
operator|+
name|Math
operator|.
name|atan2
argument_list|(
name|Math
operator|.
name|sin
argument_list|(
name|brng
argument_list|)
operator|*
name|Math
operator|.
name|sin
argument_list|(
name|d
operator|/
name|R
argument_list|)
operator|*
name|Math
operator|.
name|cos
argument_list|(
name|lat1
argument_list|)
argument_list|,
name|Math
operator|.
name|cos
argument_list|(
name|d
operator|/
name|R
argument_list|)
operator|-
name|Math
operator|.
name|sin
argument_list|(
name|lat1
argument_list|)
operator|*
name|Math
operator|.
name|sin
argument_list|(
name|lat2
argument_list|)
argument_list|)
decl_stmt|;
name|lat2
operator|=
operator|(
name|lat2
operator|*
literal|180
operator|)
operator|/
name|Math
operator|.
name|PI
expr_stmt|;
name|lon2
operator|=
operator|(
name|lon2
operator|*
literal|180
operator|)
operator|/
name|Math
operator|.
name|PI
expr_stmt|;
comment|// normalize long first
name|LatLng
name|ll
init|=
name|normLng
argument_list|(
name|lat2
argument_list|,
name|lon2
argument_list|)
decl_stmt|;
comment|// normalize lat - could flip poles
name|ll
operator|=
name|normLat
argument_list|(
name|ll
operator|.
name|getLat
argument_list|()
argument_list|,
name|ll
operator|.
name|getLng
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|ll
return|;
block|}
comment|/**    * Returns a normalized Lat rectangle shape for the bounding box    * If you go over the poles, you need to flip the lng value too    */
DECL|method|normLat
specifier|private
specifier|static
name|LatLng
name|normLat
parameter_list|(
name|double
name|lat
parameter_list|,
name|double
name|lng
parameter_list|)
block|{
if|if
condition|(
name|lat
operator|>
literal|90.0
condition|)
block|{
name|lat
operator|=
literal|90.0
operator|-
operator|(
name|lat
operator|-
literal|90.0
operator|)
expr_stmt|;
if|if
condition|(
name|lng
operator|<
literal|0
condition|)
block|{
name|lng
operator|=
name|lng
operator|+
literal|180
expr_stmt|;
block|}
else|else
block|{
name|lng
operator|=
name|lng
operator|-
literal|180
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|lat
operator|<
operator|-
literal|90.0
condition|)
block|{
name|lat
operator|=
operator|-
literal|90.0
operator|-
operator|(
name|lat
operator|+
literal|90.0
operator|)
expr_stmt|;
if|if
condition|(
name|lng
operator|<
literal|0
condition|)
block|{
name|lng
operator|=
name|lng
operator|+
literal|180
expr_stmt|;
block|}
else|else
block|{
name|lng
operator|=
name|lng
operator|-
literal|180
expr_stmt|;
block|}
block|}
name|LatLng
name|ll
init|=
operator|new
name|FloatLatLng
argument_list|(
name|lat
argument_list|,
name|lng
argument_list|)
decl_stmt|;
return|return
name|ll
return|;
block|}
comment|/**    * Returns a normalized Lng rectangle shape for the bounding box    */
DECL|method|normLng
specifier|private
specifier|static
name|LatLng
name|normLng
parameter_list|(
name|double
name|lat
parameter_list|,
name|double
name|lng
parameter_list|)
block|{
if|if
condition|(
name|lng
operator|>
literal|180.0
condition|)
block|{
name|lng
operator|=
operator|-
literal|1.0
operator|*
operator|(
literal|180.0
operator|-
operator|(
name|lng
operator|-
literal|180.0
operator|)
operator|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|lng
operator|<
operator|-
literal|180.0
condition|)
block|{
name|lng
operator|=
operator|(
name|lng
operator|+
literal|180.0
operator|)
operator|+
literal|180.0
expr_stmt|;
block|}
name|LatLng
name|ll
init|=
operator|new
name|FloatLatLng
argument_list|(
name|lat
argument_list|,
name|lng
argument_list|)
decl_stmt|;
return|return
name|ll
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
specifier|final
name|int
name|prime
init|=
literal|31
decl_stmt|;
name|int
name|result
init|=
literal|1
decl_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
operator|(
operator|(
name|ll
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|ll
operator|.
name|hashCode
argument_list|()
operator|)
expr_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
operator|(
operator|(
name|ur
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|ur
operator|.
name|hashCode
argument_list|()
operator|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|obj
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|getClass
argument_list|()
operator|!=
name|obj
operator|.
name|getClass
argument_list|()
condition|)
return|return
literal|false
return|;
name|LLRect
name|other
init|=
operator|(
name|LLRect
operator|)
name|obj
decl_stmt|;
if|if
condition|(
name|ll
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|other
operator|.
name|ll
operator|!=
literal|null
condition|)
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|ll
operator|.
name|equals
argument_list|(
name|other
operator|.
name|ll
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|ur
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|other
operator|.
name|ur
operator|!=
literal|null
condition|)
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|ur
operator|.
name|equals
argument_list|(
name|other
operator|.
name|ur
argument_list|)
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
block|}
end_class
end_unit
