begin_unit
begin_package
DECL|package|org.apache.lucene.index
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|core
operator|.
name|WhitespaceAnalyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriterConfig
operator|.
name|OpenMode
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Bits
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|OpenBitSet
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Version
import|;
end_import
begin_comment
comment|/**  * Split an index based on a given primary key term   * and a 'middle' term.  If the middle term is present, it's  * sent to dir2.  */
end_comment
begin_class
DECL|class|PKIndexSplitter
specifier|public
class|class
name|PKIndexSplitter
block|{
DECL|field|midTerm
specifier|private
name|Term
name|midTerm
decl_stmt|;
DECL|field|input
name|Directory
name|input
decl_stmt|;
DECL|field|dir1
name|Directory
name|dir1
decl_stmt|;
DECL|field|dir2
name|Directory
name|dir2
decl_stmt|;
DECL|method|PKIndexSplitter
specifier|public
name|PKIndexSplitter
parameter_list|(
name|Term
name|midTerm
parameter_list|,
name|Directory
name|input
parameter_list|,
name|Directory
name|dir1
parameter_list|,
name|Directory
name|dir2
parameter_list|)
block|{
name|this
operator|.
name|midTerm
operator|=
name|midTerm
expr_stmt|;
name|this
operator|.
name|input
operator|=
name|input
expr_stmt|;
name|this
operator|.
name|dir1
operator|=
name|dir1
expr_stmt|;
name|this
operator|.
name|dir2
operator|=
name|dir2
expr_stmt|;
block|}
DECL|method|split
specifier|public
name|void
name|split
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexReader
name|reader
init|=
name|IndexReader
operator|.
name|open
argument_list|(
name|input
argument_list|)
decl_stmt|;
name|OpenBitSet
name|lowDels
init|=
name|setDeletes
argument_list|(
name|reader
argument_list|,
literal|null
argument_list|,
name|midTerm
operator|.
name|bytes
argument_list|()
argument_list|)
decl_stmt|;
name|OpenBitSet
name|hiDels
init|=
name|setDeletes
argument_list|(
name|reader
argument_list|,
name|midTerm
operator|.
name|bytes
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|createIndex
argument_list|(
name|dir1
argument_list|,
name|reader
argument_list|,
name|lowDels
argument_list|)
expr_stmt|;
name|createIndex
argument_list|(
name|dir2
argument_list|,
name|reader
argument_list|,
name|hiDels
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|createIndex
specifier|private
name|void
name|createIndex
parameter_list|(
name|Directory
name|target
parameter_list|,
name|IndexReader
name|reader
parameter_list|,
name|OpenBitSet
name|bv
parameter_list|)
throws|throws
name|IOException
block|{
name|IndexWriter
name|w
init|=
operator|new
name|IndexWriter
argument_list|(
name|target
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
name|Version
operator|.
name|LUCENE_CURRENT
argument_list|,
operator|new
name|WhitespaceAnalyzer
argument_list|(
name|Version
operator|.
name|LUCENE_CURRENT
argument_list|)
argument_list|)
operator|.
name|setOpenMode
argument_list|(
name|OpenMode
operator|.
name|CREATE
argument_list|)
argument_list|)
decl_stmt|;
name|w
operator|.
name|addIndexes
argument_list|(
operator|new
name|DeletesIndexReader
argument_list|(
name|reader
argument_list|,
name|bv
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|setDeletes
specifier|private
name|OpenBitSet
name|setDeletes
parameter_list|(
name|IndexReader
name|reader
parameter_list|,
name|BytesRef
name|startTerm
parameter_list|,
name|BytesRef
name|endTermExcl
parameter_list|)
throws|throws
name|IOException
block|{
name|OpenBitSet
name|incl
init|=
operator|new
name|OpenBitSet
argument_list|(
name|reader
operator|.
name|maxDoc
argument_list|()
argument_list|)
decl_stmt|;
name|Terms
name|terms
init|=
name|MultiFields
operator|.
name|getTerms
argument_list|(
name|reader
argument_list|,
name|midTerm
operator|.
name|field
argument_list|()
argument_list|)
decl_stmt|;
name|TermsEnum
name|te
init|=
name|terms
operator|.
name|iterator
argument_list|()
decl_stmt|;
if|if
condition|(
name|startTerm
operator|!=
literal|null
condition|)
block|{
name|te
operator|.
name|seek
argument_list|(
name|startTerm
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
literal|true
condition|)
block|{
specifier|final
name|BytesRef
name|term
init|=
name|te
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|term
operator|==
literal|null
condition|)
block|{
break|break;
block|}
if|if
condition|(
name|endTermExcl
operator|!=
literal|null
operator|&&
name|term
operator|.
name|compareTo
argument_list|(
name|endTermExcl
argument_list|)
operator|>=
literal|0
condition|)
block|{
break|break;
block|}
name|DocsEnum
name|docs
init|=
name|MultiFields
operator|.
name|getTermDocsEnum
argument_list|(
name|reader
argument_list|,
name|MultiFields
operator|.
name|getDeletedDocs
argument_list|(
name|reader
argument_list|)
argument_list|,
name|midTerm
operator|.
name|field
argument_list|()
argument_list|,
name|term
argument_list|)
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
specifier|final
name|int
name|doc
init|=
name|docs
operator|.
name|nextDoc
argument_list|()
decl_stmt|;
if|if
condition|(
name|doc
operator|!=
name|DocsEnum
operator|.
name|NO_MORE_DOCS
condition|)
block|{
name|incl
operator|.
name|set
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
else|else
break|break;
block|}
block|}
name|OpenBitSet
name|dels
init|=
operator|new
name|OpenBitSet
argument_list|(
name|reader
operator|.
name|maxDoc
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|reader
operator|.
name|maxDoc
argument_list|()
condition|;
name|x
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|incl
operator|.
name|get
argument_list|(
name|x
argument_list|)
condition|)
block|{
name|dels
operator|.
name|set
argument_list|(
name|x
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|dels
return|;
block|}
DECL|class|DeletesIndexReader
specifier|public
specifier|static
class|class
name|DeletesIndexReader
extends|extends
name|FilterIndexReader
block|{
DECL|field|readerDels
name|OpenBitSet
name|readerDels
decl_stmt|;
DECL|method|DeletesIndexReader
specifier|public
name|DeletesIndexReader
parameter_list|(
name|IndexReader
name|reader
parameter_list|,
name|OpenBitSet
name|deletes
parameter_list|)
block|{
name|super
argument_list|(
operator|new
name|SlowMultiReaderWrapper
argument_list|(
name|reader
argument_list|)
argument_list|)
expr_stmt|;
name|readerDels
operator|=
operator|new
name|OpenBitSet
argument_list|(
name|reader
operator|.
name|maxDoc
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|in
operator|.
name|hasDeletions
argument_list|()
condition|)
block|{
specifier|final
name|Bits
name|oldDelBits
init|=
name|MultiFields
operator|.
name|getDeletedDocs
argument_list|(
name|in
argument_list|)
decl_stmt|;
assert|assert
name|oldDelBits
operator|!=
literal|null
assert|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|in
operator|.
name|maxDoc
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|oldDelBits
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|||
name|deletes
operator|.
name|get
argument_list|(
name|i
argument_list|)
condition|)
block|{
name|readerDels
operator|.
name|set
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|readerDels
operator|=
name|deletes
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|numDocs
specifier|public
name|int
name|numDocs
parameter_list|()
block|{
return|return
name|in
operator|.
name|maxDoc
argument_list|()
operator|-
operator|(
name|int
operator|)
name|readerDels
operator|.
name|cardinality
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|hasDeletions
specifier|public
name|boolean
name|hasDeletions
parameter_list|()
block|{
return|return
operator|(
name|int
operator|)
name|readerDels
operator|.
name|cardinality
argument_list|()
operator|>
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|getDeletedDocs
specifier|public
name|Bits
name|getDeletedDocs
parameter_list|()
block|{
return|return
name|readerDels
return|;
block|}
block|}
block|}
end_class
end_unit
