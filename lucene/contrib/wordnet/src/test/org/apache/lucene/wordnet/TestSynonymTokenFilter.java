begin_unit
begin_package
DECL|package|org.apache.lucene.wordnet
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|wordnet
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Analyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|MockTokenizer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Tokenizer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|BaseTokenStreamTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|core
operator|.
name|LowerCaseFilter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|core
operator|.
name|WhitespaceTokenizer
import|;
end_import
begin_class
DECL|class|TestSynonymTokenFilter
specifier|public
class|class
name|TestSynonymTokenFilter
extends|extends
name|BaseTokenStreamTestCase
block|{
DECL|field|testFile
specifier|final
name|String
name|testFile
init|=
literal|"testSynonyms.txt"
decl_stmt|;
DECL|method|testSynonyms
specifier|public
name|void
name|testSynonyms
parameter_list|()
throws|throws
name|Exception
block|{
name|SynonymMap
name|map
init|=
operator|new
name|SynonymMap
argument_list|(
name|getClass
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
name|testFile
argument_list|)
argument_list|)
decl_stmt|;
comment|/* all expansions */
name|Analyzer
name|analyzer
init|=
operator|new
name|SynonymWhitespaceAnalyzer
argument_list|(
name|map
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
name|assertAnalyzesTo
argument_list|(
name|analyzer
argument_list|,
literal|"Lost in the woods"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"lost"
block|,
literal|"in"
block|,
literal|"the"
block|,
literal|"woods"
block|,
literal|"forest"
block|,
literal|"wood"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|5
block|,
literal|8
block|,
literal|12
block|,
literal|12
block|,
literal|12
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|4
block|,
literal|7
block|,
literal|11
block|,
literal|17
block|,
literal|17
block|,
literal|17
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|0
block|,
literal|0
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|testSynonymsSingleQuote
specifier|public
name|void
name|testSynonymsSingleQuote
parameter_list|()
throws|throws
name|Exception
block|{
name|SynonymMap
name|map
init|=
operator|new
name|SynonymMap
argument_list|(
name|getClass
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
name|testFile
argument_list|)
argument_list|)
decl_stmt|;
comment|/* all expansions */
name|Analyzer
name|analyzer
init|=
operator|new
name|SynonymWhitespaceAnalyzer
argument_list|(
name|map
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
name|assertAnalyzesTo
argument_list|(
name|analyzer
argument_list|,
literal|"king"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"king"
block|,
literal|"baron"
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|testSynonymsLimitedAmount
specifier|public
name|void
name|testSynonymsLimitedAmount
parameter_list|()
throws|throws
name|Exception
block|{
name|SynonymMap
name|map
init|=
operator|new
name|SynonymMap
argument_list|(
name|getClass
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
name|testFile
argument_list|)
argument_list|)
decl_stmt|;
comment|/* limit to one synonym expansion */
name|Analyzer
name|analyzer
init|=
operator|new
name|SynonymWhitespaceAnalyzer
argument_list|(
name|map
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assertAnalyzesTo
argument_list|(
name|analyzer
argument_list|,
literal|"Lost in the woods"
argument_list|,
comment|/* wood comes before forest due to           * the input file, not lexicographic order          */
operator|new
name|String
index|[]
block|{
literal|"lost"
block|,
literal|"in"
block|,
literal|"the"
block|,
literal|"woods"
block|,
literal|"wood"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|5
block|,
literal|8
block|,
literal|12
block|,
literal|12
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|4
block|,
literal|7
block|,
literal|11
block|,
literal|17
block|,
literal|17
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|0
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|testReusableTokenStream
specifier|public
name|void
name|testReusableTokenStream
parameter_list|()
throws|throws
name|Exception
block|{
name|SynonymMap
name|map
init|=
operator|new
name|SynonymMap
argument_list|(
name|getClass
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
name|testFile
argument_list|)
argument_list|)
decl_stmt|;
comment|/* limit to one synonym expansion */
name|Analyzer
name|analyzer
init|=
operator|new
name|SynonymWhitespaceAnalyzer
argument_list|(
name|map
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assertAnalyzesToReuse
argument_list|(
name|analyzer
argument_list|,
literal|"Lost in the woods"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"lost"
block|,
literal|"in"
block|,
literal|"the"
block|,
literal|"woods"
block|,
literal|"wood"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|5
block|,
literal|8
block|,
literal|12
block|,
literal|12
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|4
block|,
literal|7
block|,
literal|11
block|,
literal|17
block|,
literal|17
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|0
block|}
argument_list|)
expr_stmt|;
name|assertAnalyzesToReuse
argument_list|(
name|analyzer
argument_list|,
literal|"My wolfish dog went to the forest"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"my"
block|,
literal|"wolfish"
block|,
literal|"ravenous"
block|,
literal|"dog"
block|,
literal|"went"
block|,
literal|"to"
block|,
literal|"the"
block|,
literal|"forest"
block|,
literal|"woods"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|3
block|,
literal|3
block|,
literal|11
block|,
literal|15
block|,
literal|20
block|,
literal|23
block|,
literal|27
block|,
literal|27
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|2
block|,
literal|10
block|,
literal|10
block|,
literal|14
block|,
literal|19
block|,
literal|22
block|,
literal|26
block|,
literal|33
block|,
literal|33
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|1
block|,
literal|0
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|0
block|}
argument_list|)
expr_stmt|;
block|}
DECL|class|SynonymWhitespaceAnalyzer
specifier|private
class|class
name|SynonymWhitespaceAnalyzer
extends|extends
name|Analyzer
block|{
DECL|field|synonyms
specifier|private
name|SynonymMap
name|synonyms
decl_stmt|;
DECL|field|maxSynonyms
specifier|private
name|int
name|maxSynonyms
decl_stmt|;
DECL|method|SynonymWhitespaceAnalyzer
specifier|public
name|SynonymWhitespaceAnalyzer
parameter_list|(
name|SynonymMap
name|synonyms
parameter_list|,
name|int
name|maxSynonyms
parameter_list|)
block|{
name|this
operator|.
name|synonyms
operator|=
name|synonyms
expr_stmt|;
name|this
operator|.
name|maxSynonyms
operator|=
name|maxSynonyms
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|tokenStream
specifier|public
name|TokenStream
name|tokenStream
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|Reader
name|reader
parameter_list|)
block|{
name|TokenStream
name|ts
init|=
operator|new
name|MockTokenizer
argument_list|(
name|reader
argument_list|,
name|MockTokenizer
operator|.
name|WHITESPACE
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|ts
operator|=
operator|new
name|SynonymTokenFilter
argument_list|(
name|ts
argument_list|,
name|synonyms
argument_list|,
name|maxSynonyms
argument_list|)
expr_stmt|;
return|return
name|ts
return|;
block|}
DECL|class|SavedStreams
specifier|private
class|class
name|SavedStreams
block|{
DECL|field|source
name|Tokenizer
name|source
decl_stmt|;
DECL|field|result
name|TokenStream
name|result
decl_stmt|;
block|}
annotation|@
name|Override
DECL|method|reusableTokenStream
specifier|public
name|TokenStream
name|reusableTokenStream
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|Reader
name|reader
parameter_list|)
throws|throws
name|IOException
block|{
name|SavedStreams
name|streams
init|=
operator|(
name|SavedStreams
operator|)
name|getPreviousTokenStream
argument_list|()
decl_stmt|;
if|if
condition|(
name|streams
operator|==
literal|null
condition|)
block|{
name|streams
operator|=
operator|new
name|SavedStreams
argument_list|()
expr_stmt|;
name|streams
operator|.
name|source
operator|=
operator|new
name|MockTokenizer
argument_list|(
name|reader
argument_list|,
name|MockTokenizer
operator|.
name|WHITESPACE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|streams
operator|.
name|result
operator|=
operator|new
name|SynonymTokenFilter
argument_list|(
name|streams
operator|.
name|source
argument_list|,
name|synonyms
argument_list|,
name|maxSynonyms
argument_list|)
expr_stmt|;
name|setPreviousTokenStream
argument_list|(
name|streams
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|streams
operator|.
name|source
operator|.
name|reset
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|streams
operator|.
name|result
operator|.
name|reset
argument_list|()
expr_stmt|;
comment|// reset the SynonymTokenFilter
block|}
return|return
name|streams
operator|.
name|result
return|;
block|}
block|}
block|}
end_class
end_unit
