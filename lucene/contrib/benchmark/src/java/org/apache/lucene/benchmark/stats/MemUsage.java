begin_unit
begin_package
DECL|package|org.apache.lucene.benchmark.stats
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|benchmark
operator|.
name|stats
package|;
end_package
begin_comment
comment|/**  * Copyright 2005 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_comment
comment|/**  * This class holds a set of memory usage values.  *  */
end_comment
begin_class
DECL|class|MemUsage
specifier|public
class|class
name|MemUsage
block|{
DECL|field|maxFree
DECL|field|minFree
DECL|field|avgFree
specifier|public
name|long
name|maxFree
decl_stmt|,
name|minFree
decl_stmt|,
name|avgFree
decl_stmt|;
DECL|field|maxTotal
DECL|field|minTotal
DECL|field|avgTotal
specifier|public
name|long
name|maxTotal
decl_stmt|,
name|minTotal
decl_stmt|,
name|avgTotal
decl_stmt|;
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|toScaledString
argument_list|(
literal|1
argument_list|,
literal|"B"
argument_list|)
return|;
block|}
comment|/** Scale down the values by divisor, append the unit string. */
DECL|method|toScaledString
specifier|public
name|String
name|toScaledString
parameter_list|(
name|int
name|div
parameter_list|,
name|String
name|unit
parameter_list|)
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"free="
argument_list|)
operator|.
name|append
argument_list|(
name|minFree
operator|/
name|div
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"/"
argument_list|)
operator|.
name|append
argument_list|(
name|avgFree
operator|/
name|div
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"/"
argument_list|)
operator|.
name|append
argument_list|(
name|maxFree
operator|/
name|div
argument_list|)
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
operator|.
name|append
argument_list|(
name|unit
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", total="
argument_list|)
operator|.
name|append
argument_list|(
name|minTotal
operator|/
name|div
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"/"
argument_list|)
operator|.
name|append
argument_list|(
name|avgTotal
operator|/
name|div
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"/"
argument_list|)
operator|.
name|append
argument_list|(
name|maxTotal
operator|/
name|div
argument_list|)
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
operator|.
name|append
argument_list|(
name|unit
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class
end_unit
