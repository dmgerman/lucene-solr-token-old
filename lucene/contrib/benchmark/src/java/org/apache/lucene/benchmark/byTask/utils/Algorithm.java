begin_unit
begin_package
DECL|package|org.apache.lucene.benchmark.byTask.utils
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|benchmark
operator|.
name|byTask
operator|.
name|utils
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StreamTokenizer
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import
begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|benchmark
operator|.
name|byTask
operator|.
name|PerfRunData
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|benchmark
operator|.
name|byTask
operator|.
name|tasks
operator|.
name|PerfTask
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|benchmark
operator|.
name|byTask
operator|.
name|tasks
operator|.
name|RepSumByPrefTask
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|benchmark
operator|.
name|byTask
operator|.
name|tasks
operator|.
name|TaskSequence
import|;
end_import
begin_comment
comment|/**  * Test algorithm, as read from file  */
end_comment
begin_class
DECL|class|Algorithm
specifier|public
class|class
name|Algorithm
block|{
DECL|field|sequence
specifier|private
name|TaskSequence
name|sequence
decl_stmt|;
comment|/**    * Read algorithm from file    * @param runData perf-run-data used at running the tasks.    * @throws Exception if errors while parsing the algorithm     */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"fallthrough"
argument_list|)
DECL|method|Algorithm
specifier|public
name|Algorithm
parameter_list|(
name|PerfRunData
name|runData
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|algTxt
init|=
name|runData
operator|.
name|getConfig
argument_list|()
operator|.
name|getAlgorithmText
argument_list|()
decl_stmt|;
name|sequence
operator|=
operator|new
name|TaskSequence
argument_list|(
name|runData
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|TaskSequence
name|currSequence
init|=
name|sequence
decl_stmt|;
name|PerfTask
name|prevTask
init|=
literal|null
decl_stmt|;
name|StreamTokenizer
name|stok
init|=
operator|new
name|StreamTokenizer
argument_list|(
operator|new
name|StringReader
argument_list|(
name|algTxt
argument_list|)
argument_list|)
decl_stmt|;
name|stok
operator|.
name|commentChar
argument_list|(
literal|'#'
argument_list|)
expr_stmt|;
name|stok
operator|.
name|eolIsSignificant
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|stok
operator|.
name|ordinaryChar
argument_list|(
literal|'"'
argument_list|)
expr_stmt|;
name|stok
operator|.
name|ordinaryChar
argument_list|(
literal|'/'
argument_list|)
expr_stmt|;
name|stok
operator|.
name|ordinaryChar
argument_list|(
literal|'('
argument_list|)
expr_stmt|;
name|stok
operator|.
name|ordinaryChar
argument_list|(
literal|')'
argument_list|)
expr_stmt|;
name|boolean
name|colonOk
init|=
literal|false
decl_stmt|;
name|boolean
name|isDisableCountNextTask
init|=
literal|false
decl_stmt|;
comment|// only for primitive tasks
name|currSequence
operator|.
name|setDepth
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|String
name|taskPackage
init|=
name|PerfTask
operator|.
name|class
operator|.
name|getPackage
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"."
decl_stmt|;
while|while
condition|(
name|stok
operator|.
name|nextToken
argument_list|()
operator|!=
name|StreamTokenizer
operator|.
name|TT_EOF
condition|)
block|{
switch|switch
condition|(
name|stok
operator|.
name|ttype
condition|)
block|{
case|case
name|StreamTokenizer
operator|.
name|TT_WORD
case|:
name|String
name|s
init|=
name|stok
operator|.
name|sval
decl_stmt|;
name|Constructor
argument_list|<
name|?
extends|extends
name|PerfTask
argument_list|>
name|cnstr
init|=
name|Class
operator|.
name|forName
argument_list|(
name|taskPackage
operator|+
name|s
operator|+
literal|"Task"
argument_list|)
operator|.
name|asSubclass
argument_list|(
name|PerfTask
operator|.
name|class
argument_list|)
operator|.
name|getConstructor
argument_list|(
name|PerfRunData
operator|.
name|class
argument_list|)
decl_stmt|;
name|PerfTask
name|task
init|=
name|cnstr
operator|.
name|newInstance
argument_list|(
name|runData
argument_list|)
decl_stmt|;
name|task
operator|.
name|setDisableCounting
argument_list|(
name|isDisableCountNextTask
argument_list|)
expr_stmt|;
name|isDisableCountNextTask
operator|=
literal|false
expr_stmt|;
name|currSequence
operator|.
name|addTask
argument_list|(
name|task
argument_list|)
expr_stmt|;
if|if
condition|(
name|task
operator|instanceof
name|RepSumByPrefTask
condition|)
block|{
name|stok
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|String
name|prefix
init|=
name|stok
operator|.
name|sval
decl_stmt|;
if|if
condition|(
name|prefix
operator|==
literal|null
operator|||
name|prefix
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"named report prefix problem - "
operator|+
name|stok
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
operator|(
operator|(
name|RepSumByPrefTask
operator|)
name|task
operator|)
operator|.
name|setPrefix
argument_list|(
name|prefix
argument_list|)
expr_stmt|;
block|}
comment|// check for task param: '(' someParam ')'
name|stok
operator|.
name|nextToken
argument_list|()
expr_stmt|;
if|if
condition|(
name|stok
operator|.
name|ttype
operator|!=
literal|'('
condition|)
block|{
name|stok
operator|.
name|pushBack
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// get params, for tasks that supports them, - anything until next ')'
name|StringBuffer
name|params
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|stok
operator|.
name|nextToken
argument_list|()
expr_stmt|;
while|while
condition|(
name|stok
operator|.
name|ttype
operator|!=
literal|')'
condition|)
block|{
switch|switch
condition|(
name|stok
operator|.
name|ttype
condition|)
block|{
case|case
name|StreamTokenizer
operator|.
name|TT_NUMBER
case|:
name|params
operator|.
name|append
argument_list|(
name|stok
operator|.
name|nval
argument_list|)
expr_stmt|;
break|break;
case|case
name|StreamTokenizer
operator|.
name|TT_WORD
case|:
name|params
operator|.
name|append
argument_list|(
name|stok
operator|.
name|sval
argument_list|)
expr_stmt|;
break|break;
case|case
name|StreamTokenizer
operator|.
name|TT_EOF
case|:
throw|throw
operator|new
name|Exception
argument_list|(
literal|"unexpexted EOF: - "
operator|+
name|stok
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
default|default:
name|params
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
name|stok
operator|.
name|ttype
argument_list|)
expr_stmt|;
block|}
name|stok
operator|.
name|nextToken
argument_list|()
expr_stmt|;
block|}
name|String
name|prm
init|=
name|params
operator|.
name|toString
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
if|if
condition|(
name|prm
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|task
operator|.
name|setParams
argument_list|(
name|prm
argument_list|)
expr_stmt|;
block|}
block|}
comment|// ---------------------------------------
name|colonOk
operator|=
literal|false
expr_stmt|;
name|prevTask
operator|=
name|task
expr_stmt|;
break|break;
default|default:
name|char
name|c
init|=
operator|(
name|char
operator|)
name|stok
operator|.
name|ttype
decl_stmt|;
switch|switch
condition|(
name|c
condition|)
block|{
case|case
literal|':'
case|:
if|if
condition|(
operator|!
name|colonOk
condition|)
throw|throw
operator|new
name|Exception
argument_list|(
literal|"colon unexpexted: - "
operator|+
name|stok
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
name|colonOk
operator|=
literal|false
expr_stmt|;
comment|// get repetitions number
name|stok
operator|.
name|nextToken
argument_list|()
expr_stmt|;
if|if
condition|(
operator|(
name|char
operator|)
name|stok
operator|.
name|ttype
operator|==
literal|'*'
condition|)
block|{
operator|(
operator|(
name|TaskSequence
operator|)
name|prevTask
operator|)
operator|.
name|setRepetitions
argument_list|(
name|TaskSequence
operator|.
name|REPEAT_EXHAUST
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|stok
operator|.
name|ttype
operator|!=
name|StreamTokenizer
operator|.
name|TT_NUMBER
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"expected repetitions number or XXXs: - "
operator|+
name|stok
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
else|else
block|{
name|double
name|num
init|=
name|stok
operator|.
name|nval
decl_stmt|;
name|stok
operator|.
name|nextToken
argument_list|()
expr_stmt|;
if|if
condition|(
name|stok
operator|.
name|ttype
operator|==
name|StreamTokenizer
operator|.
name|TT_WORD
operator|&&
name|stok
operator|.
name|sval
operator|.
name|equals
argument_list|(
literal|"s"
argument_list|)
condition|)
block|{
operator|(
operator|(
name|TaskSequence
operator|)
name|prevTask
operator|)
operator|.
name|setRunTime
argument_list|(
name|num
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|stok
operator|.
name|pushBack
argument_list|()
expr_stmt|;
operator|(
operator|(
name|TaskSequence
operator|)
name|prevTask
operator|)
operator|.
name|setRepetitions
argument_list|(
operator|(
name|int
operator|)
name|num
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// check for rate specification (ops/min)
name|stok
operator|.
name|nextToken
argument_list|()
expr_stmt|;
if|if
condition|(
name|stok
operator|.
name|ttype
operator|!=
literal|':'
condition|)
block|{
name|stok
operator|.
name|pushBack
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// get rate number
name|stok
operator|.
name|nextToken
argument_list|()
expr_stmt|;
if|if
condition|(
name|stok
operator|.
name|ttype
operator|!=
name|StreamTokenizer
operator|.
name|TT_NUMBER
condition|)
throw|throw
operator|new
name|Exception
argument_list|(
literal|"expected rate number: - "
operator|+
name|stok
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
comment|// check for unit - min or sec, sec is default
name|stok
operator|.
name|nextToken
argument_list|()
expr_stmt|;
if|if
condition|(
name|stok
operator|.
name|ttype
operator|!=
literal|'/'
condition|)
block|{
name|stok
operator|.
name|pushBack
argument_list|()
expr_stmt|;
operator|(
operator|(
name|TaskSequence
operator|)
name|prevTask
operator|)
operator|.
name|setRate
argument_list|(
operator|(
name|int
operator|)
name|stok
operator|.
name|nval
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// set rate per sec
block|}
else|else
block|{
name|stok
operator|.
name|nextToken
argument_list|()
expr_stmt|;
if|if
condition|(
name|stok
operator|.
name|ttype
operator|!=
name|StreamTokenizer
operator|.
name|TT_WORD
condition|)
throw|throw
operator|new
name|Exception
argument_list|(
literal|"expected rate unit: 'min' or 'sec' - "
operator|+
name|stok
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
name|String
name|unit
init|=
name|stok
operator|.
name|sval
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
if|if
condition|(
literal|"min"
operator|.
name|equals
argument_list|(
name|unit
argument_list|)
condition|)
block|{
operator|(
operator|(
name|TaskSequence
operator|)
name|prevTask
operator|)
operator|.
name|setRate
argument_list|(
operator|(
name|int
operator|)
name|stok
operator|.
name|nval
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// set rate per min
block|}
elseif|else
if|if
condition|(
literal|"sec"
operator|.
name|equals
argument_list|(
name|unit
argument_list|)
condition|)
block|{
operator|(
operator|(
name|TaskSequence
operator|)
name|prevTask
operator|)
operator|.
name|setRate
argument_list|(
operator|(
name|int
operator|)
name|stok
operator|.
name|nval
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// set rate per sec
block|}
else|else
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"expected rate unit: 'min' or 'sec' - "
operator|+
name|stok
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|colonOk
operator|=
literal|false
expr_stmt|;
break|break;
case|case
literal|'{'
case|:
case|case
literal|'['
case|:
comment|// a sequence
comment|// check for sequence name
name|String
name|name
init|=
literal|null
decl_stmt|;
name|stok
operator|.
name|nextToken
argument_list|()
expr_stmt|;
if|if
condition|(
name|stok
operator|.
name|ttype
operator|!=
literal|'"'
condition|)
block|{
name|stok
operator|.
name|pushBack
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|stok
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|name
operator|=
name|stok
operator|.
name|sval
expr_stmt|;
name|stok
operator|.
name|nextToken
argument_list|()
expr_stmt|;
if|if
condition|(
name|stok
operator|.
name|ttype
operator|!=
literal|'"'
operator|||
name|name
operator|==
literal|null
operator|||
name|name
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"sequence name problem - "
operator|+
name|stok
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|// start the sequence
name|TaskSequence
name|seq2
init|=
operator|new
name|TaskSequence
argument_list|(
name|runData
argument_list|,
name|name
argument_list|,
name|currSequence
argument_list|,
name|c
operator|==
literal|'['
argument_list|)
decl_stmt|;
name|currSequence
operator|.
name|addTask
argument_list|(
name|seq2
argument_list|)
expr_stmt|;
name|currSequence
operator|=
name|seq2
expr_stmt|;
name|colonOk
operator|=
literal|false
expr_stmt|;
break|break;
case|case
literal|'&'
case|:
if|if
condition|(
name|currSequence
operator|.
name|isParallel
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Can only create background tasks within a serial task"
argument_list|)
throw|;
block|}
name|stok
operator|.
name|nextToken
argument_list|()
expr_stmt|;
specifier|final
name|int
name|deltaPri
decl_stmt|;
if|if
condition|(
name|stok
operator|.
name|ttype
operator|!=
name|StreamTokenizer
operator|.
name|TT_NUMBER
condition|)
block|{
name|stok
operator|.
name|pushBack
argument_list|()
expr_stmt|;
name|deltaPri
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
comment|// priority
name|deltaPri
operator|=
operator|(
name|int
operator|)
name|stok
operator|.
name|nval
expr_stmt|;
block|}
if|if
condition|(
name|prevTask
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"& was unexpected"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|prevTask
operator|.
name|getRunInBackground
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"double& was unexpected"
argument_list|)
throw|;
block|}
else|else
block|{
name|prevTask
operator|.
name|setRunInBackground
argument_list|(
name|deltaPri
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|'>'
case|:
name|currSequence
operator|.
name|setNoChildReport
argument_list|()
expr_stmt|;
comment|/* intentional fallthrough */
case|case
literal|'}'
case|:
case|case
literal|']'
case|:
comment|// end sequence
name|colonOk
operator|=
literal|true
expr_stmt|;
name|prevTask
operator|=
name|currSequence
expr_stmt|;
name|currSequence
operator|=
name|currSequence
operator|.
name|getParent
argument_list|()
expr_stmt|;
break|break;
case|case
literal|'-'
case|:
name|isDisableCountNextTask
operator|=
literal|true
expr_stmt|;
break|break;
block|}
comment|//switch(c)
break|break;
block|}
comment|//switch(stok.ttype)
block|}
if|if
condition|(
name|sequence
operator|!=
name|currSequence
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Unmatched sequences"
argument_list|)
throw|;
block|}
comment|// remove redundant top level enclosing sequences
while|while
condition|(
name|sequence
operator|.
name|isCollapsable
argument_list|()
operator|&&
name|sequence
operator|.
name|getRepetitions
argument_list|()
operator|==
literal|1
operator|&&
name|sequence
operator|.
name|getRate
argument_list|()
operator|==
literal|0
condition|)
block|{
name|ArrayList
argument_list|<
name|PerfTask
argument_list|>
name|t
init|=
name|sequence
operator|.
name|getTasks
argument_list|()
decl_stmt|;
if|if
condition|(
name|t
operator|!=
literal|null
operator|&&
name|t
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|PerfTask
name|p
init|=
name|t
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|instanceof
name|TaskSequence
condition|)
block|{
name|sequence
operator|=
operator|(
name|TaskSequence
operator|)
name|p
expr_stmt|;
continue|continue;
block|}
block|}
break|break;
block|}
block|}
comment|/* (non-Javadoc)    * @see java.lang.Object#toString()    */
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|String
name|newline
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|)
decl_stmt|;
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|sequence
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|newline
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Execute this algorithm    * @throws Exception     */
DECL|method|execute
specifier|public
name|void
name|execute
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|sequence
operator|.
name|runAndMaybeStats
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|sequence
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Expert: for test purposes, return all tasks participating in this algorithm.    * @return all tasks participating in this algorithm.    */
DECL|method|extractTasks
specifier|public
name|ArrayList
argument_list|<
name|PerfTask
argument_list|>
name|extractTasks
parameter_list|()
block|{
name|ArrayList
argument_list|<
name|PerfTask
argument_list|>
name|res
init|=
operator|new
name|ArrayList
argument_list|<
name|PerfTask
argument_list|>
argument_list|()
decl_stmt|;
name|extractTasks
argument_list|(
name|res
argument_list|,
name|sequence
argument_list|)
expr_stmt|;
return|return
name|res
return|;
block|}
DECL|method|extractTasks
specifier|private
name|void
name|extractTasks
parameter_list|(
name|ArrayList
argument_list|<
name|PerfTask
argument_list|>
name|extrct
parameter_list|,
name|TaskSequence
name|seq
parameter_list|)
block|{
if|if
condition|(
name|seq
operator|==
literal|null
condition|)
return|return;
name|extrct
operator|.
name|add
argument_list|(
name|seq
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|PerfTask
argument_list|>
name|t
init|=
name|sequence
operator|.
name|getTasks
argument_list|()
decl_stmt|;
if|if
condition|(
name|t
operator|==
literal|null
condition|)
return|return;
for|for
control|(
specifier|final
name|PerfTask
name|p
range|:
name|t
control|)
block|{
if|if
condition|(
name|p
operator|instanceof
name|TaskSequence
condition|)
block|{
name|extractTasks
argument_list|(
name|extrct
argument_list|,
operator|(
name|TaskSequence
operator|)
name|p
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|extrct
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class
end_unit
