begin_unit
begin_package
DECL|package|org.apache.lucene.benchmark.byTask.feeds
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|benchmark
operator|.
name|byTask
operator|.
name|feeds
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|benchmark
operator|.
name|byTask
operator|.
name|tasks
operator|.
name|WriteLineDocTask
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|benchmark
operator|.
name|byTask
operator|.
name|utils
operator|.
name|Config
import|;
end_import
begin_comment
comment|/**  * A {@link ContentSource} reading one line at a time as a  * {@link org.apache.lucene.document.Document} from a single file. This saves IO  * cost (over DirContentSource) of recursing through a directory and opening a  * new file for every document.<br>  * The expected format of each line is (arguments are separated by&lt;TAB&gt;):  *<i>title, date, body</i>. If a line is read in a different format, a  * {@link RuntimeException} will be thrown. In general, you should use this  * content source for files that were created with {@link WriteLineDocTask}.<br>  *<br>  * Config properties:  *<ul>  *<li>docs.file=&lt;path to the file&gt;  *<li>content.source.encoding - default to UTF-8.  *</ul>  */
end_comment
begin_class
DECL|class|LineDocSource
specifier|public
class|class
name|LineDocSource
extends|extends
name|ContentSource
block|{
DECL|field|SEP
specifier|private
specifier|final
specifier|static
name|char
name|SEP
init|=
name|WriteLineDocTask
operator|.
name|SEP
decl_stmt|;
DECL|field|file
specifier|private
name|File
name|file
decl_stmt|;
DECL|field|reader
specifier|private
name|BufferedReader
name|reader
decl_stmt|;
DECL|method|openFile
specifier|private
specifier|synchronized
name|void
name|openFile
parameter_list|()
block|{
try|try
block|{
if|if
condition|(
name|reader
operator|!=
literal|null
condition|)
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|InputStream
name|is
init|=
name|getInputStream
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|reader
operator|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|is
argument_list|,
name|encoding
argument_list|)
argument_list|,
name|BUFFER_SIZE
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|reader
operator|!=
literal|null
condition|)
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|reader
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getNextDocData
specifier|public
name|DocData
name|getNextDocData
parameter_list|(
name|DocData
name|docData
parameter_list|)
throws|throws
name|NoMoreDataException
throws|,
name|IOException
block|{
name|String
name|line
decl_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
expr_stmt|;
if|if
condition|(
name|line
operator|==
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|forever
condition|)
block|{
throw|throw
operator|new
name|NoMoreDataException
argument_list|()
throw|;
block|}
comment|// Reset the file
name|openFile
argument_list|()
expr_stmt|;
return|return
name|getNextDocData
argument_list|(
name|docData
argument_list|)
return|;
block|}
block|}
comment|// A line must be in the following format. If it's not, fail !
comment|// title<TAB> date<TAB> body<NEWLINE>
name|int
name|spot
init|=
name|line
operator|.
name|indexOf
argument_list|(
name|SEP
argument_list|)
decl_stmt|;
if|if
condition|(
name|spot
operator|==
operator|-
literal|1
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"line: ["
operator|+
name|line
operator|+
literal|"] is in an invalid format !"
argument_list|)
throw|;
block|}
name|int
name|spot2
init|=
name|line
operator|.
name|indexOf
argument_list|(
name|SEP
argument_list|,
literal|1
operator|+
name|spot
argument_list|)
decl_stmt|;
if|if
condition|(
name|spot2
operator|==
operator|-
literal|1
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"line: ["
operator|+
name|line
operator|+
literal|"] is in an invalid format !"
argument_list|)
throw|;
block|}
comment|// The date String was written in the format of DateTools.dateToString.
name|docData
operator|.
name|clear
argument_list|()
expr_stmt|;
name|docData
operator|.
name|setBody
argument_list|(
name|line
operator|.
name|substring
argument_list|(
literal|1
operator|+
name|spot2
argument_list|,
name|line
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|docData
operator|.
name|setTitle
argument_list|(
name|line
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|spot
argument_list|)
argument_list|)
expr_stmt|;
name|docData
operator|.
name|setDate
argument_list|(
name|line
operator|.
name|substring
argument_list|(
literal|1
operator|+
name|spot
argument_list|,
name|spot2
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|docData
return|;
block|}
annotation|@
name|Override
DECL|method|resetInputs
specifier|public
name|void
name|resetInputs
parameter_list|()
throws|throws
name|IOException
block|{
name|super
operator|.
name|resetInputs
argument_list|()
expr_stmt|;
name|openFile
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setConfig
specifier|public
name|void
name|setConfig
parameter_list|(
name|Config
name|config
parameter_list|)
block|{
name|super
operator|.
name|setConfig
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|String
name|fileName
init|=
name|config
operator|.
name|get
argument_list|(
literal|"docs.file"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|fileName
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"docs.file must be set"
argument_list|)
throw|;
block|}
name|file
operator|=
operator|new
name|File
argument_list|(
name|fileName
argument_list|)
operator|.
name|getAbsoluteFile
argument_list|()
expr_stmt|;
if|if
condition|(
name|encoding
operator|==
literal|null
condition|)
block|{
name|encoding
operator|=
literal|"UTF-8"
expr_stmt|;
block|}
block|}
block|}
end_class
end_unit
