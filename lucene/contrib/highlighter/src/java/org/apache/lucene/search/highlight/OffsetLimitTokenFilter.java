begin_unit
begin_package
DECL|package|org.apache.lucene.search.highlight
DECL|method|OffsetLimitTokenFilter
DECL|field|offsetCount
DECL|field|offsetAttrib
DECL|field|offsetLimit
DECL|method|OffsetLimitTokenFilter
DECL|method|incrementToken
DECL|method|reset
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|highlight
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenFilter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|OffsetAttribute
import|;
end_import
begin_comment
comment|/**  * This TokenFilter limits the number of tokens while indexing by adding up the  * current offset.  */
end_comment
begin_class
specifier|public
specifier|final
class|class
name|OffsetLimitTokenFilter
extends|extends
name|TokenFilter
block|{
specifier|private
name|int
name|offsetCount
decl_stmt|;
specifier|private
name|OffsetAttribute
name|offsetAttrib
init|=
name|getAttribute
argument_list|(
name|OffsetAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|int
name|offsetLimit
decl_stmt|;
specifier|public
name|OffsetLimitTokenFilter
parameter_list|(
name|TokenStream
name|input
parameter_list|,
name|int
name|offsetLimit
parameter_list|)
block|{
name|super
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|this
operator|.
name|offsetLimit
operator|=
name|offsetLimit
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|incrementToken
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|offsetCount
operator|<
name|offsetLimit
operator|&&
name|input
operator|.
name|incrementToken
argument_list|()
condition|)
block|{
name|int
name|offsetLength
init|=
name|offsetAttrib
operator|.
name|endOffset
argument_list|()
operator|-
name|offsetAttrib
operator|.
name|startOffset
argument_list|()
decl_stmt|;
name|offsetCount
operator|+=
name|offsetLength
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|reset
parameter_list|()
throws|throws
name|IOException
block|{
name|super
operator|.
name|reset
argument_list|()
expr_stmt|;
name|offsetCount
operator|=
literal|0
expr_stmt|;
block|}
block|}
end_class
end_unit
