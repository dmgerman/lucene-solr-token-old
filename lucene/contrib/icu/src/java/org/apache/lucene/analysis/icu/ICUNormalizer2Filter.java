begin_unit
begin_package
DECL|package|org.apache.lucene.analysis.icu
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|icu
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenFilter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|CharTermAttribute
import|;
end_import
begin_import
import|import
name|com
operator|.
name|ibm
operator|.
name|icu
operator|.
name|text
operator|.
name|Normalizer
import|;
end_import
begin_import
import|import
name|com
operator|.
name|ibm
operator|.
name|icu
operator|.
name|text
operator|.
name|Normalizer2
import|;
end_import
begin_comment
comment|/**  * Normalize token text with ICU's {@link com.ibm.icu.text.Normalizer2}  *<p>  * With this filter, you can normalize text in the following ways:  *<ul>  *<li> NFKC Normalization, Case Folding, and removing Ignorables (the default)  *<li> Using a standard Normalization mode (NFC, NFD, NFKC, NFKD)  *<li> Based on rules from a custom normalization mapping.  *</ul>  *<p>  * If you use the defaults, this filter is a simple way to standardize Unicode text  * in a language-independent way for search:  *<ul>  *<li> The case folding that it does can be seen as a replacement for  *  LowerCaseFilter: For example, it handles cases such as the Greek sigma, so that  * "ÎÎ¬ÏÎ¿Ï" and "ÎÎÎªÎÎ£" will match correctly.  *<li> The normalization will standardizes different forms of the same   *  character in Unicode. For example, CJK full-width numbers will be standardized  *  to their ASCII forms.  *<li> Ignorables such as Zero-Width Joiner and Variation Selectors are removed.  *  These are typically modifier characters that affect display.  *</ul>  *   * @see com.ibm.icu.text.Normalizer2  * @see com.ibm.icu.text.FilteredNormalizer2  */
end_comment
begin_class
DECL|class|ICUNormalizer2Filter
specifier|public
class|class
name|ICUNormalizer2Filter
extends|extends
name|TokenFilter
block|{
DECL|field|termAtt
specifier|private
specifier|final
name|CharTermAttribute
name|termAtt
init|=
name|addAttribute
argument_list|(
name|CharTermAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|normalizer
specifier|private
specifier|final
name|Normalizer2
name|normalizer
decl_stmt|;
DECL|field|buffer
specifier|private
specifier|final
name|StringBuilder
name|buffer
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
comment|/**    * Create a new Normalizer2Filter that combines NFKC normalization, Case    * Folding, and removes Default Ignorables (NFKC_Casefold)    */
DECL|method|ICUNormalizer2Filter
specifier|public
name|ICUNormalizer2Filter
parameter_list|(
name|TokenStream
name|input
parameter_list|)
block|{
name|this
argument_list|(
name|input
argument_list|,
name|Normalizer2
operator|.
name|getInstance
argument_list|(
literal|null
argument_list|,
literal|"nfkc_cf"
argument_list|,
name|Normalizer2
operator|.
name|Mode
operator|.
name|COMPOSE
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create a new Normalizer2Filter with the specified Normalizer2    * @param input stream    * @param normalizer normalizer to use    */
DECL|method|ICUNormalizer2Filter
specifier|public
name|ICUNormalizer2Filter
parameter_list|(
name|TokenStream
name|input
parameter_list|,
name|Normalizer2
name|normalizer
parameter_list|)
block|{
name|super
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|this
operator|.
name|normalizer
operator|=
name|normalizer
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|incrementToken
specifier|public
specifier|final
name|boolean
name|incrementToken
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|input
operator|.
name|incrementToken
argument_list|()
condition|)
block|{
if|if
condition|(
name|normalizer
operator|.
name|quickCheck
argument_list|(
name|termAtt
argument_list|)
operator|!=
name|Normalizer
operator|.
name|YES
condition|)
block|{
name|buffer
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|termAtt
operator|.
name|buffer
argument_list|()
argument_list|,
literal|0
argument_list|,
name|termAtt
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|termAtt
operator|.
name|setEmpty
argument_list|()
expr_stmt|;
name|normalizer
operator|.
name|normalize
argument_list|(
name|buffer
argument_list|,
name|termAtt
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
end_class
end_unit
