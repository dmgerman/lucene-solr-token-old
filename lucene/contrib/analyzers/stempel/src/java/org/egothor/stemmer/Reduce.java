begin_unit
begin_comment
comment|/*                     Egothor Software License version 1.00                     Copyright (C) 1997-2004 Leo Galambos.                  Copyright (C) 2002-2004 "Egothor developers"                       on behalf of the Egothor Project.                              All rights reserved.     This  software  is  copyrighted  by  the "Egothor developers". If this    license applies to a single file or document, the "Egothor developers"    are the people or entities mentioned as copyright holders in that file    or  document.  If  this  license  applies  to the Egothor project as a    whole,  the  copyright holders are the people or entities mentioned in    the  file CREDITS. This file can be found in the same location as this    license in the distribution.     Redistribution  and  use  in  source and binary forms, with or without    modification, are permitted provided that the following conditions are    met:     1. Redistributions  of  source  code  must retain the above copyright        notice, the list of contributors, this list of conditions, and the        following disclaimer.     2. Redistributions  in binary form must reproduce the above copyright        notice, the list of contributors, this list of conditions, and the        disclaimer  that  follows  these  conditions  in the documentation        and/or other materials provided with the distribution.     3. The name "Egothor" must not be used to endorse or promote products        derived  from  this software without prior written permission. For        written permission, please contact Leo.G@seznam.cz     4. Products  derived  from this software may not be called "Egothor",        nor  may  "Egothor"  appear  in  their name, without prior written        permission from Leo.G@seznam.cz.     In addition, we request that you include in the end-user documentation    provided  with  the  redistribution  and/or  in the software itself an    acknowledgement equivalent to the following:    "This product includes software developed by the Egothor Project.     http://egothor.sf.net/"     THIS  SOFTWARE  IS  PROVIDED  ``AS  IS''  AND ANY EXPRESSED OR IMPLIED    WARRANTIES,  INCLUDING,  BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF    MERCHANTABILITY  AND  FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.    IN  NO  EVENT  SHALL THE EGOTHOR PROJECT OR ITS CONTRIBUTORS BE LIABLE    FOR   ANY   DIRECT,   INDIRECT,  INCIDENTAL,  SPECIAL,  EXEMPLARY,  OR    CONSEQUENTIAL  DAMAGES  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF    SUBSTITUTE  GOODS  OR  SERVICES;  LOSS  OF  USE,  DATA, OR PROFITS; OR    BUSINESS  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,    WHETHER  IN  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE    OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN    IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.     This  software  consists  of  voluntary  contributions  made  by  many    individuals  on  behalf  of  the  Egothor  Project  and was originally    created by Leo Galambos (Leo.G@seznam.cz).  */
end_comment
begin_package
DECL|package|org.egothor.stemmer
package|package
name|org
operator|.
name|egothor
operator|.
name|stemmer
package|;
end_package
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_comment
comment|/**  * The Reduce object is used to remove gaps in a Trie which stores a dictionary.  */
end_comment
begin_class
DECL|class|Reduce
specifier|public
class|class
name|Reduce
block|{
comment|/**    * Constructor for the Reduce object.    */
DECL|method|Reduce
specifier|public
name|Reduce
parameter_list|()
block|{}
comment|/**    * Optimize (remove holes in the rows) the given Trie and return the    * restructured Trie.    *     * @param orig the Trie to optimize    * @return the restructured Trie    */
DECL|method|optimize
specifier|public
name|Trie
name|optimize
parameter_list|(
name|Trie
name|orig
parameter_list|)
block|{
name|List
argument_list|<
name|CharSequence
argument_list|>
name|cmds
init|=
name|orig
operator|.
name|cmds
decl_stmt|;
name|List
argument_list|<
name|Row
argument_list|>
name|rows
init|=
operator|new
name|ArrayList
argument_list|<
name|Row
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Row
argument_list|>
name|orows
init|=
name|orig
operator|.
name|rows
decl_stmt|;
name|int
name|remap
index|[]
init|=
operator|new
name|int
index|[
name|orows
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|remap
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|rows
operator|=
name|removeGaps
argument_list|(
name|orig
operator|.
name|root
argument_list|,
name|rows
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|Row
argument_list|>
argument_list|()
argument_list|,
name|remap
argument_list|)
expr_stmt|;
return|return
operator|new
name|Trie
argument_list|(
name|orig
operator|.
name|forward
argument_list|,
name|remap
index|[
name|orig
operator|.
name|root
index|]
argument_list|,
name|cmds
argument_list|,
name|rows
argument_list|)
return|;
block|}
DECL|method|removeGaps
name|List
argument_list|<
name|Row
argument_list|>
name|removeGaps
parameter_list|(
name|int
name|ind
parameter_list|,
name|List
argument_list|<
name|Row
argument_list|>
name|old
parameter_list|,
name|List
argument_list|<
name|Row
argument_list|>
name|to
parameter_list|,
name|int
name|remap
index|[]
parameter_list|)
block|{
name|remap
index|[
name|ind
index|]
operator|=
name|to
operator|.
name|size
argument_list|()
expr_stmt|;
name|Row
name|now
init|=
name|old
operator|.
name|get
argument_list|(
name|ind
argument_list|)
decl_stmt|;
name|to
operator|.
name|add
argument_list|(
name|now
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|Cell
argument_list|>
name|i
init|=
name|now
operator|.
name|cells
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
for|for
control|(
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Cell
name|c
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|c
operator|.
name|ref
operator|>=
literal|0
operator|&&
name|remap
index|[
name|c
operator|.
name|ref
index|]
operator|<
literal|0
condition|)
block|{
name|removeGaps
argument_list|(
name|c
operator|.
name|ref
argument_list|,
name|old
argument_list|,
name|to
argument_list|,
name|remap
argument_list|)
expr_stmt|;
block|}
block|}
name|to
operator|.
name|set
argument_list|(
name|remap
index|[
name|ind
index|]
argument_list|,
operator|new
name|Remap
argument_list|(
name|now
argument_list|,
name|remap
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|to
return|;
block|}
comment|/**    * This class is part of the Egothor Project    */
DECL|class|Remap
class|class
name|Remap
extends|extends
name|Row
block|{
comment|/**      * Constructor for the Remap object      *       * @param old Description of the Parameter      * @param remap Description of the Parameter      */
DECL|method|Remap
specifier|public
name|Remap
parameter_list|(
name|Row
name|old
parameter_list|,
name|int
name|remap
index|[]
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|Iterator
argument_list|<
name|Character
argument_list|>
name|i
init|=
name|old
operator|.
name|cells
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
for|for
control|(
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Character
name|ch
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Cell
name|c
init|=
name|old
operator|.
name|at
argument_list|(
name|ch
argument_list|)
decl_stmt|;
name|Cell
name|nc
decl_stmt|;
if|if
condition|(
name|c
operator|.
name|ref
operator|>=
literal|0
condition|)
block|{
name|nc
operator|=
operator|new
name|Cell
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|nc
operator|.
name|ref
operator|=
name|remap
index|[
name|nc
operator|.
name|ref
index|]
expr_stmt|;
block|}
else|else
block|{
name|nc
operator|=
operator|new
name|Cell
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
name|cells
operator|.
name|put
argument_list|(
name|ch
argument_list|,
name|nc
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class
end_unit
