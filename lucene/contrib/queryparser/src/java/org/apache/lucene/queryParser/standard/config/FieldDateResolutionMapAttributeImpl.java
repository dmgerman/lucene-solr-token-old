begin_unit
begin_package
DECL|package|org.apache.lucene.queryParser.standard.config
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryParser
operator|.
name|standard
operator|.
name|config
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|DateTools
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|DateTools
operator|.
name|Resolution
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|AttributeImpl
import|;
end_import
begin_comment
comment|/**  * This attribute enables the user to define a default DateResolution per field.  * it's used by {@link FieldDateResolutionFCListener#buildFieldConfig(org.apache.lucene.queryParser.core.config.FieldConfig)}  *  * @see FieldDateResolutionMapAttribute  */
end_comment
begin_class
DECL|class|FieldDateResolutionMapAttributeImpl
specifier|public
class|class
name|FieldDateResolutionMapAttributeImpl
extends|extends
name|AttributeImpl
implements|implements
name|FieldDateResolutionMapAttribute
block|{
DECL|field|dateRes
specifier|private
name|Map
argument_list|<
name|CharSequence
argument_list|,
name|DateTools
operator|.
name|Resolution
argument_list|>
name|dateRes
init|=
operator|new
name|HashMap
argument_list|<
name|CharSequence
argument_list|,
name|DateTools
operator|.
name|Resolution
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|FieldDateResolutionMapAttributeImpl
specifier|public
name|FieldDateResolutionMapAttributeImpl
parameter_list|()
block|{
comment|// empty constructor
block|}
DECL|method|setFieldDateResolutionMap
specifier|public
name|void
name|setFieldDateResolutionMap
parameter_list|(
name|Map
argument_list|<
name|CharSequence
argument_list|,
name|DateTools
operator|.
name|Resolution
argument_list|>
name|dateRes
parameter_list|)
block|{
name|this
operator|.
name|dateRes
operator|=
name|dateRes
expr_stmt|;
block|}
DECL|method|getFieldDateResolutionMap
specifier|public
name|Map
argument_list|<
name|CharSequence
argument_list|,
name|Resolution
argument_list|>
name|getFieldDateResolutionMap
parameter_list|()
block|{
return|return
name|this
operator|.
name|dateRes
return|;
block|}
annotation|@
name|Override
DECL|method|clear
specifier|public
name|void
name|clear
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|copyTo
specifier|public
name|void
name|copyTo
parameter_list|(
name|AttributeImpl
name|target
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|instanceof
name|FieldDateResolutionMapAttributeImpl
operator|&&
operator|(
operator|(
name|FieldDateResolutionMapAttributeImpl
operator|)
name|other
operator|)
operator|.
name|dateRes
operator|.
name|equals
argument_list|(
name|this
operator|.
name|dateRes
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
specifier|final
name|int
name|prime
init|=
literal|97
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|dateRes
operator|!=
literal|null
condition|)
return|return
name|this
operator|.
name|dateRes
operator|.
name|hashCode
argument_list|()
operator|*
name|prime
return|;
else|else
return|return
name|Float
operator|.
name|valueOf
argument_list|(
name|prime
argument_list|)
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"<fieldDateResolutionMapAttribute map="
operator|+
name|this
operator|.
name|dateRes
operator|+
literal|"/>"
return|;
block|}
block|}
end_class
end_unit
