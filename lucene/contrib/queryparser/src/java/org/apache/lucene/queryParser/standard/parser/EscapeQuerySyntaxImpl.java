begin_unit
begin_package
DECL|package|org.apache.lucene.queryParser.standard.parser
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryParser
operator|.
name|standard
operator|.
name|parser
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|messages
operator|.
name|MessageImpl
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryParser
operator|.
name|core
operator|.
name|messages
operator|.
name|QueryParserMessages
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryParser
operator|.
name|core
operator|.
name|parser
operator|.
name|EscapeQuerySyntax
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryParser
operator|.
name|core
operator|.
name|util
operator|.
name|UnescapedCharSequence
import|;
end_import
begin_comment
comment|/**  */
end_comment
begin_class
DECL|class|EscapeQuerySyntaxImpl
specifier|public
class|class
name|EscapeQuerySyntaxImpl
implements|implements
name|EscapeQuerySyntax
block|{
DECL|field|wildcardChars
specifier|private
specifier|static
specifier|final
name|char
index|[]
name|wildcardChars
init|=
block|{
literal|'*'
block|,
literal|'?'
block|}
decl_stmt|;
DECL|field|escapableTermExtraFirstChars
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|escapableTermExtraFirstChars
init|=
block|{
literal|"+"
block|,
literal|"-"
block|,
literal|"@"
block|}
decl_stmt|;
DECL|field|escapableTermChars
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|escapableTermChars
init|=
block|{
literal|"\""
block|,
literal|"<"
block|,
literal|">"
block|,
literal|"="
block|,
literal|"!"
block|,
literal|"("
block|,
literal|")"
block|,
literal|"^"
block|,
literal|"["
block|,
literal|"{"
block|,
literal|":"
block|,
literal|"]"
block|,
literal|"}"
block|,
literal|"~"
block|}
decl_stmt|;
comment|// TODO: check what to do with these "*", "?", "\\"
DECL|field|escapableQuotedChars
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|escapableQuotedChars
init|=
block|{
literal|"\""
block|}
decl_stmt|;
DECL|field|escapableWhiteChars
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|escapableWhiteChars
init|=
block|{
literal|" "
block|,
literal|"\t"
block|,
literal|"\n"
block|,
literal|"\r"
block|,
literal|"\f"
block|,
literal|"\b"
block|,
literal|"\u3000"
block|}
decl_stmt|;
DECL|field|escapableWordTokens
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|escapableWordTokens
init|=
block|{
literal|"AND"
block|,
literal|"OR"
block|,
literal|"NOT"
block|,
literal|"TO"
block|,
literal|"WITHIN"
block|,
literal|"SENTENCE"
block|,
literal|"PARAGRAPH"
block|,
literal|"INORDER"
block|}
decl_stmt|;
DECL|method|escapeChar
specifier|private
specifier|static
specifier|final
name|CharSequence
name|escapeChar
parameter_list|(
name|CharSequence
name|str
parameter_list|,
name|Locale
name|locale
parameter_list|)
block|{
if|if
condition|(
name|str
operator|==
literal|null
operator|||
name|str
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
return|return
name|str
return|;
name|CharSequence
name|buffer
init|=
name|str
decl_stmt|;
comment|// regular escapable Char for terms
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|escapableTermChars
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|buffer
operator|=
name|replaceIgnoreCase
argument_list|(
name|buffer
argument_list|,
name|escapableTermChars
index|[
name|i
index|]
operator|.
name|toLowerCase
argument_list|()
argument_list|,
literal|"\\"
argument_list|,
name|locale
argument_list|)
expr_stmt|;
block|}
comment|// First Character of a term as more escaping chars
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|escapableTermExtraFirstChars
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|buffer
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
name|escapableTermExtraFirstChars
index|[
name|i
index|]
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
condition|)
block|{
name|buffer
operator|=
literal|"\\"
operator|+
name|buffer
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|+
name|buffer
operator|.
name|subSequence
argument_list|(
literal|1
argument_list|,
name|buffer
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
return|return
name|buffer
return|;
block|}
DECL|method|escapeQuoted
specifier|private
specifier|final
name|CharSequence
name|escapeQuoted
parameter_list|(
name|CharSequence
name|str
parameter_list|,
name|Locale
name|locale
parameter_list|)
block|{
if|if
condition|(
name|str
operator|==
literal|null
operator|||
name|str
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
return|return
name|str
return|;
name|CharSequence
name|buffer
init|=
name|str
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|escapableQuotedChars
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|buffer
operator|=
name|replaceIgnoreCase
argument_list|(
name|buffer
argument_list|,
name|escapableTermChars
index|[
name|i
index|]
operator|.
name|toLowerCase
argument_list|()
argument_list|,
literal|"\\"
argument_list|,
name|locale
argument_list|)
expr_stmt|;
block|}
return|return
name|buffer
return|;
block|}
DECL|method|escapeTerm
specifier|private
specifier|static
specifier|final
name|CharSequence
name|escapeTerm
parameter_list|(
name|CharSequence
name|term
parameter_list|,
name|Locale
name|locale
parameter_list|)
block|{
if|if
condition|(
name|term
operator|==
literal|null
condition|)
return|return
name|term
return|;
comment|// Escape single Chars
name|term
operator|=
name|escapeChar
argument_list|(
name|term
argument_list|,
name|locale
argument_list|)
expr_stmt|;
name|term
operator|=
name|escapeWhiteChar
argument_list|(
name|term
argument_list|,
name|locale
argument_list|)
expr_stmt|;
comment|// Escape Parser Words
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|escapableWordTokens
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|escapableWordTokens
index|[
name|i
index|]
operator|.
name|equalsIgnoreCase
argument_list|(
name|term
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
return|return
literal|"\\"
operator|+
name|term
return|;
block|}
return|return
name|term
return|;
block|}
comment|/**    * replace with ignore case    *     * @param string    *          string to get replaced    * @param sequence1    *          the old character sequence in lowercase    * @param escapeChar    *          the new character to prefix sequence1 in return string.    * @return the new String    */
DECL|method|replaceIgnoreCase
specifier|private
specifier|static
name|CharSequence
name|replaceIgnoreCase
parameter_list|(
name|CharSequence
name|string
parameter_list|,
name|CharSequence
name|sequence1
parameter_list|,
name|CharSequence
name|escapeChar
parameter_list|,
name|Locale
name|locale
parameter_list|)
block|{
if|if
condition|(
name|escapeChar
operator|==
literal|null
operator|||
name|sequence1
operator|==
literal|null
operator|||
name|string
operator|==
literal|null
condition|)
throw|throw
operator|new
name|NullPointerException
argument_list|()
throw|;
comment|// empty string case
name|int
name|count
init|=
name|string
operator|.
name|length
argument_list|()
decl_stmt|;
name|int
name|sequence1Length
init|=
name|sequence1
operator|.
name|length
argument_list|()
decl_stmt|;
if|if
condition|(
name|sequence1Length
operator|==
literal|0
condition|)
block|{
name|StringBuilder
name|result
init|=
operator|new
name|StringBuilder
argument_list|(
operator|(
name|count
operator|+
literal|1
operator|)
operator|*
name|escapeChar
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|result
operator|.
name|append
argument_list|(
name|escapeChar
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|result
operator|.
name|append
argument_list|(
name|string
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|append
argument_list|(
name|escapeChar
argument_list|)
expr_stmt|;
block|}
return|return
name|result
operator|.
name|toString
argument_list|()
return|;
block|}
comment|// normal case
name|StringBuilder
name|result
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|char
name|first
init|=
name|sequence1
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|int
name|start
init|=
literal|0
decl_stmt|,
name|copyStart
init|=
literal|0
decl_stmt|,
name|firstIndex
decl_stmt|;
while|while
condition|(
name|start
operator|<
name|count
condition|)
block|{
if|if
condition|(
operator|(
name|firstIndex
operator|=
name|string
operator|.
name|toString
argument_list|()
operator|.
name|toLowerCase
argument_list|(
name|locale
argument_list|)
operator|.
name|indexOf
argument_list|(
name|first
argument_list|,
name|start
argument_list|)
operator|)
operator|==
operator|-
literal|1
condition|)
break|break;
name|boolean
name|found
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|sequence1
operator|.
name|length
argument_list|()
operator|>
literal|1
condition|)
block|{
if|if
condition|(
name|firstIndex
operator|+
name|sequence1Length
operator|>
name|count
condition|)
break|break;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|sequence1Length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|string
operator|.
name|toString
argument_list|()
operator|.
name|toLowerCase
argument_list|(
name|locale
argument_list|)
operator|.
name|charAt
argument_list|(
name|firstIndex
operator|+
name|i
argument_list|)
operator|!=
name|sequence1
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
condition|)
block|{
name|found
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
name|found
condition|)
block|{
name|result
operator|.
name|append
argument_list|(
name|string
operator|.
name|toString
argument_list|()
operator|.
name|substring
argument_list|(
name|copyStart
argument_list|,
name|firstIndex
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|append
argument_list|(
name|escapeChar
argument_list|)
expr_stmt|;
name|result
operator|.
name|append
argument_list|(
name|string
operator|.
name|toString
argument_list|()
operator|.
name|substring
argument_list|(
name|firstIndex
argument_list|,
name|firstIndex
operator|+
name|sequence1Length
argument_list|)
argument_list|)
expr_stmt|;
name|copyStart
operator|=
name|start
operator|=
name|firstIndex
operator|+
name|sequence1Length
expr_stmt|;
block|}
else|else
block|{
name|start
operator|=
name|firstIndex
operator|+
literal|1
expr_stmt|;
block|}
block|}
if|if
condition|(
name|result
operator|.
name|length
argument_list|()
operator|==
literal|0
operator|&&
name|copyStart
operator|==
literal|0
condition|)
return|return
name|string
return|;
name|result
operator|.
name|append
argument_list|(
name|string
operator|.
name|toString
argument_list|()
operator|.
name|substring
argument_list|(
name|copyStart
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|result
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * escape all tokens that are part of the parser syntax on a given string    *     * @param str    *          string to get replaced    * @param locale    *          locale to be used when performing string compares    * @return the new String    */
DECL|method|escapeWhiteChar
specifier|private
specifier|static
specifier|final
name|CharSequence
name|escapeWhiteChar
parameter_list|(
name|CharSequence
name|str
parameter_list|,
name|Locale
name|locale
parameter_list|)
block|{
if|if
condition|(
name|str
operator|==
literal|null
operator|||
name|str
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
return|return
name|str
return|;
name|CharSequence
name|buffer
init|=
name|str
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|escapableWhiteChars
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|buffer
operator|=
name|replaceIgnoreCase
argument_list|(
name|buffer
argument_list|,
name|escapableWhiteChars
index|[
name|i
index|]
operator|.
name|toLowerCase
argument_list|()
argument_list|,
literal|"\\"
argument_list|,
name|locale
argument_list|)
expr_stmt|;
block|}
return|return
name|buffer
return|;
block|}
DECL|method|escape
specifier|public
name|CharSequence
name|escape
parameter_list|(
name|CharSequence
name|text
parameter_list|,
name|Locale
name|locale
parameter_list|,
name|Type
name|type
parameter_list|)
block|{
if|if
condition|(
name|text
operator|==
literal|null
operator|||
name|text
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
return|return
name|text
return|;
comment|// escape wildcards and the escape char (this has to be perform before
comment|// anything else)
comment|// since we need to preserve the UnescapedCharSequence and escape the
comment|// original escape chars
if|if
condition|(
name|text
operator|instanceof
name|UnescapedCharSequence
condition|)
block|{
name|text
operator|=
operator|(
operator|(
name|UnescapedCharSequence
operator|)
name|text
operator|)
operator|.
name|toStringEscaped
argument_list|(
name|wildcardChars
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|text
operator|=
operator|new
name|UnescapedCharSequence
argument_list|(
name|text
argument_list|)
operator|.
name|toStringEscaped
argument_list|(
name|wildcardChars
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|type
operator|==
name|Type
operator|.
name|STRING
condition|)
block|{
return|return
name|escapeQuoted
argument_list|(
name|text
argument_list|,
name|locale
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|escapeTerm
argument_list|(
name|text
argument_list|,
name|locale
argument_list|)
return|;
block|}
block|}
comment|/**    * Returns a String where the escape char has been removed, or kept only once    * if there was a double escape.    *     * Supports escaped unicode characters, e. g. translates<code>A</code> to    *<code>A</code>.    *     */
DECL|method|discardEscapeChar
specifier|public
specifier|static
name|UnescapedCharSequence
name|discardEscapeChar
parameter_list|(
name|CharSequence
name|input
parameter_list|)
throws|throws
name|ParseException
block|{
comment|// Create char array to hold unescaped char sequence
name|char
index|[]
name|output
init|=
operator|new
name|char
index|[
name|input
operator|.
name|length
argument_list|()
index|]
decl_stmt|;
name|boolean
index|[]
name|wasEscaped
init|=
operator|new
name|boolean
index|[
name|input
operator|.
name|length
argument_list|()
index|]
decl_stmt|;
comment|// The length of the output can be less than the input
comment|// due to discarded escape chars. This variable holds
comment|// the actual length of the output
name|int
name|length
init|=
literal|0
decl_stmt|;
comment|// We remember whether the last processed character was
comment|// an escape character
name|boolean
name|lastCharWasEscapeChar
init|=
literal|false
decl_stmt|;
comment|// The multiplier the current unicode digit must be multiplied with.
comment|// E. g. the first digit must be multiplied with 16^3, the second with
comment|// 16^2...
name|int
name|codePointMultiplier
init|=
literal|0
decl_stmt|;
comment|// Used to calculate the codepoint of the escaped unicode character
name|int
name|codePoint
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|input
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|char
name|curChar
init|=
name|input
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|codePointMultiplier
operator|>
literal|0
condition|)
block|{
name|codePoint
operator|+=
name|hexToInt
argument_list|(
name|curChar
argument_list|)
operator|*
name|codePointMultiplier
expr_stmt|;
name|codePointMultiplier
operator|>>>=
literal|4
expr_stmt|;
if|if
condition|(
name|codePointMultiplier
operator|==
literal|0
condition|)
block|{
name|output
index|[
name|length
operator|++
index|]
operator|=
operator|(
name|char
operator|)
name|codePoint
expr_stmt|;
name|codePoint
operator|=
literal|0
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|lastCharWasEscapeChar
condition|)
block|{
if|if
condition|(
name|curChar
operator|==
literal|'u'
condition|)
block|{
comment|// found an escaped unicode character
name|codePointMultiplier
operator|=
literal|16
operator|*
literal|16
operator|*
literal|16
expr_stmt|;
block|}
else|else
block|{
comment|// this character was escaped
name|output
index|[
name|length
index|]
operator|=
name|curChar
expr_stmt|;
name|wasEscaped
index|[
name|length
index|]
operator|=
literal|true
expr_stmt|;
name|length
operator|++
expr_stmt|;
block|}
name|lastCharWasEscapeChar
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|curChar
operator|==
literal|'\\'
condition|)
block|{
name|lastCharWasEscapeChar
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|output
index|[
name|length
index|]
operator|=
name|curChar
expr_stmt|;
name|length
operator|++
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|codePointMultiplier
operator|>
literal|0
condition|)
block|{
throw|throw
operator|new
name|ParseException
argument_list|(
operator|new
name|MessageImpl
argument_list|(
name|QueryParserMessages
operator|.
name|INVALID_SYNTAX_ESCAPE_UNICODE_TRUNCATION
argument_list|)
argument_list|)
throw|;
block|}
if|if
condition|(
name|lastCharWasEscapeChar
condition|)
block|{
throw|throw
operator|new
name|ParseException
argument_list|(
operator|new
name|MessageImpl
argument_list|(
name|QueryParserMessages
operator|.
name|INVALID_SYNTAX_ESCAPE_CHARACTER
argument_list|)
argument_list|)
throw|;
block|}
return|return
operator|new
name|UnescapedCharSequence
argument_list|(
name|output
argument_list|,
name|wasEscaped
argument_list|,
literal|0
argument_list|,
name|length
argument_list|)
return|;
block|}
comment|/** Returns the numeric value of the hexadecimal character */
DECL|method|hexToInt
specifier|private
specifier|static
specifier|final
name|int
name|hexToInt
parameter_list|(
name|char
name|c
parameter_list|)
throws|throws
name|ParseException
block|{
if|if
condition|(
literal|'0'
operator|<=
name|c
operator|&&
name|c
operator|<=
literal|'9'
condition|)
block|{
return|return
name|c
operator|-
literal|'0'
return|;
block|}
elseif|else
if|if
condition|(
literal|'a'
operator|<=
name|c
operator|&&
name|c
operator|<=
literal|'f'
condition|)
block|{
return|return
name|c
operator|-
literal|'a'
operator|+
literal|10
return|;
block|}
elseif|else
if|if
condition|(
literal|'A'
operator|<=
name|c
operator|&&
name|c
operator|<=
literal|'F'
condition|)
block|{
return|return
name|c
operator|-
literal|'A'
operator|+
literal|10
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|ParseException
argument_list|(
operator|new
name|MessageImpl
argument_list|(
name|QueryParserMessages
operator|.
name|INVALID_SYNTAX_ESCAPE_NONE_HEX_UNICODE
argument_list|,
name|c
argument_list|)
argument_list|)
throw|;
block|}
block|}
block|}
end_class
end_unit
