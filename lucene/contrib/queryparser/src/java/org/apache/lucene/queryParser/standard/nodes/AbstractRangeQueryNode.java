begin_unit
begin_package
DECL|package|org.apache.lucene.queryParser.standard.nodes
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryParser
operator|.
name|standard
operator|.
name|nodes
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryParser
operator|.
name|core
operator|.
name|nodes
operator|.
name|FieldValuePairQueryNode
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryParser
operator|.
name|core
operator|.
name|nodes
operator|.
name|FieldableNode
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryParser
operator|.
name|core
operator|.
name|nodes
operator|.
name|QueryNode
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryParser
operator|.
name|core
operator|.
name|nodes
operator|.
name|QueryNodeImpl
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryParser
operator|.
name|core
operator|.
name|parser
operator|.
name|EscapeQuerySyntax
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryParser
operator|.
name|core
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import
begin_class
DECL|class|AbstractRangeQueryNode
specifier|public
specifier|abstract
class|class
name|AbstractRangeQueryNode
parameter_list|<
name|T
extends|extends
name|FieldValuePairQueryNode
parameter_list|<
name|?
parameter_list|>
parameter_list|>
extends|extends
name|QueryNodeImpl
implements|implements
name|FieldableNode
block|{
DECL|field|lowerInclusive
DECL|field|upperInclusive
specifier|private
name|boolean
name|lowerInclusive
decl_stmt|,
name|upperInclusive
decl_stmt|;
DECL|method|AbstractRangeQueryNode
specifier|protected
name|AbstractRangeQueryNode
parameter_list|()
block|{
name|setLeaf
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|allocate
argument_list|()
expr_stmt|;
block|}
DECL|method|getField
specifier|public
name|CharSequence
name|getField
parameter_list|()
block|{
name|CharSequence
name|field
init|=
literal|null
decl_stmt|;
name|T
name|lower
init|=
name|getLowerBound
argument_list|()
decl_stmt|;
name|T
name|upper
init|=
name|getUpperBound
argument_list|()
decl_stmt|;
if|if
condition|(
name|lower
operator|!=
literal|null
condition|)
block|{
name|field
operator|=
name|lower
operator|.
name|getField
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|upper
operator|!=
literal|null
condition|)
block|{
name|field
operator|=
name|upper
operator|.
name|getField
argument_list|()
expr_stmt|;
block|}
return|return
name|field
return|;
block|}
DECL|method|setField
specifier|public
name|void
name|setField
parameter_list|(
name|CharSequence
name|fieldName
parameter_list|)
block|{
name|T
name|lower
init|=
name|getLowerBound
argument_list|()
decl_stmt|;
name|T
name|upper
init|=
name|getUpperBound
argument_list|()
decl_stmt|;
if|if
condition|(
name|lower
operator|!=
literal|null
condition|)
block|{
name|lower
operator|.
name|setField
argument_list|(
name|fieldName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|upper
operator|!=
literal|null
condition|)
block|{
name|upper
operator|.
name|setField
argument_list|(
name|fieldName
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|getLowerBound
specifier|public
name|T
name|getLowerBound
parameter_list|()
block|{
return|return
operator|(
name|T
operator|)
name|getChildren
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|getUpperBound
specifier|public
name|T
name|getUpperBound
parameter_list|()
block|{
return|return
operator|(
name|T
operator|)
name|getChildren
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
return|;
block|}
DECL|method|isLowerInclusive
specifier|public
name|boolean
name|isLowerInclusive
parameter_list|()
block|{
return|return
name|lowerInclusive
return|;
block|}
DECL|method|isUpperInclusive
specifier|public
name|boolean
name|isUpperInclusive
parameter_list|()
block|{
return|return
name|upperInclusive
return|;
block|}
DECL|method|setBounds
specifier|public
name|void
name|setBounds
parameter_list|(
name|T
name|lower
parameter_list|,
name|T
name|upper
parameter_list|,
name|boolean
name|lowerInclusive
parameter_list|,
name|boolean
name|upperInclusive
parameter_list|)
block|{
if|if
condition|(
name|lower
operator|!=
literal|null
operator|&&
name|upper
operator|!=
literal|null
condition|)
block|{
name|String
name|lowerField
init|=
name|StringUtils
operator|.
name|toString
argument_list|(
name|lower
operator|.
name|getField
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|upperField
init|=
name|StringUtils
operator|.
name|toString
argument_list|(
name|upper
operator|.
name|getField
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|upperField
operator|==
literal|null
operator|&&
name|lowerField
operator|==
literal|null
operator|)
operator|||
operator|(
name|upperField
operator|!=
literal|null
operator|&&
operator|!
name|upperField
operator|.
name|equals
argument_list|(
name|lowerField
argument_list|)
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"lower and upper bounds should have the same field name!"
argument_list|)
throw|;
block|}
name|this
operator|.
name|lowerInclusive
operator|=
name|lowerInclusive
expr_stmt|;
name|this
operator|.
name|upperInclusive
operator|=
name|upperInclusive
expr_stmt|;
name|ArrayList
argument_list|<
name|QueryNode
argument_list|>
name|children
init|=
operator|new
name|ArrayList
argument_list|<
name|QueryNode
argument_list|>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|children
operator|.
name|add
argument_list|(
name|lower
argument_list|)
expr_stmt|;
name|children
operator|.
name|add
argument_list|(
name|upper
argument_list|)
expr_stmt|;
name|set
argument_list|(
name|children
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|toQueryString
specifier|public
name|CharSequence
name|toQueryString
parameter_list|(
name|EscapeQuerySyntax
name|escapeSyntaxParser
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|T
name|lower
init|=
name|getLowerBound
argument_list|()
decl_stmt|;
name|T
name|upper
init|=
name|getUpperBound
argument_list|()
decl_stmt|;
if|if
condition|(
name|lowerInclusive
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|'['
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
literal|'{'
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|lower
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|lower
operator|.
name|toQueryString
argument_list|(
name|escapeSyntaxParser
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"..."
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
if|if
condition|(
name|upper
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|upper
operator|.
name|toQueryString
argument_list|(
name|escapeSyntaxParser
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"..."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|upperInclusive
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|']'
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
literal|'}'
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class
end_unit
