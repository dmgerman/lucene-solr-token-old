begin_unit
begin_package
DECL|package|org.apache.lucene.queryParser.core.nodes
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryParser
operator|.
name|core
operator|.
name|nodes
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryParser
operator|.
name|core
operator|.
name|parser
operator|.
name|EscapeQuerySyntax
import|;
end_import
begin_comment
comment|/**  * A {@link AnyQueryNode} represents an ANY operator performed on a list of  * nodes.  */
end_comment
begin_class
DECL|class|AnyQueryNode
specifier|public
class|class
name|AnyQueryNode
extends|extends
name|AndQueryNode
block|{
DECL|field|field
specifier|private
name|CharSequence
name|field
init|=
literal|null
decl_stmt|;
DECL|field|minimumMatchingmElements
specifier|private
name|int
name|minimumMatchingmElements
init|=
literal|0
decl_stmt|;
comment|/**    * @param clauses    *          - the query nodes to be or'ed    */
DECL|method|AnyQueryNode
specifier|public
name|AnyQueryNode
parameter_list|(
name|List
argument_list|<
name|QueryNode
argument_list|>
name|clauses
parameter_list|,
name|CharSequence
name|field
parameter_list|,
name|int
name|minimumMatchingElements
parameter_list|)
block|{
name|super
argument_list|(
name|clauses
argument_list|)
expr_stmt|;
name|this
operator|.
name|field
operator|=
name|field
expr_stmt|;
name|this
operator|.
name|minimumMatchingmElements
operator|=
name|minimumMatchingElements
expr_stmt|;
if|if
condition|(
name|clauses
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|QueryNode
name|clause
range|:
name|clauses
control|)
block|{
if|if
condition|(
name|clause
operator|instanceof
name|FieldQueryNode
condition|)
block|{
if|if
condition|(
name|clause
operator|instanceof
name|QueryNodeImpl
condition|)
block|{
operator|(
operator|(
name|QueryNodeImpl
operator|)
name|clause
operator|)
operator|.
name|toQueryStringIgnoreFields
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|clause
operator|instanceof
name|FieldableNode
condition|)
block|{
operator|(
operator|(
name|FieldableNode
operator|)
name|clause
operator|)
operator|.
name|setField
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
DECL|method|getMinimumMatchingElements
specifier|public
name|int
name|getMinimumMatchingElements
parameter_list|()
block|{
return|return
name|this
operator|.
name|minimumMatchingmElements
return|;
block|}
comment|/**    * returns null if the field was not specified    *     * @return the field    */
DECL|method|getField
specifier|public
name|CharSequence
name|getField
parameter_list|()
block|{
return|return
name|this
operator|.
name|field
return|;
block|}
comment|/**    * returns - null if the field was not specified    *     * @return the field as a String    */
DECL|method|getFieldAsString
specifier|public
name|String
name|getFieldAsString
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|field
operator|==
literal|null
condition|)
return|return
literal|null
return|;
else|else
return|return
name|this
operator|.
name|field
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * @param field    *          - the field to set    */
DECL|method|setField
specifier|public
name|void
name|setField
parameter_list|(
name|CharSequence
name|field
parameter_list|)
block|{
name|this
operator|.
name|field
operator|=
name|field
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|cloneTree
specifier|public
name|QueryNode
name|cloneTree
parameter_list|()
throws|throws
name|CloneNotSupportedException
block|{
name|AnyQueryNode
name|clone
init|=
operator|(
name|AnyQueryNode
operator|)
name|super
operator|.
name|cloneTree
argument_list|()
decl_stmt|;
name|clone
operator|.
name|field
operator|=
name|this
operator|.
name|field
expr_stmt|;
name|clone
operator|.
name|minimumMatchingmElements
operator|=
name|this
operator|.
name|minimumMatchingmElements
expr_stmt|;
return|return
name|clone
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
if|if
condition|(
name|getChildren
argument_list|()
operator|==
literal|null
operator|||
name|getChildren
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
return|return
literal|"<any field='"
operator|+
name|this
operator|.
name|field
operator|+
literal|"'  matchelements="
operator|+
name|this
operator|.
name|minimumMatchingmElements
operator|+
literal|"/>"
return|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<any field='"
operator|+
name|this
operator|.
name|field
operator|+
literal|"'  matchelements="
operator|+
name|this
operator|.
name|minimumMatchingmElements
operator|+
literal|">"
argument_list|)
expr_stmt|;
for|for
control|(
name|QueryNode
name|clause
range|:
name|getChildren
argument_list|()
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|clause
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"\n</any>"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|toQueryString
specifier|public
name|CharSequence
name|toQueryString
parameter_list|(
name|EscapeQuerySyntax
name|escapeSyntaxParser
parameter_list|)
block|{
name|String
name|anySTR
init|=
literal|"ANY "
operator|+
name|this
operator|.
name|minimumMatchingmElements
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|getChildren
argument_list|()
operator|==
literal|null
operator|||
name|getChildren
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|// no childs case
block|}
else|else
block|{
name|String
name|filler
init|=
literal|""
decl_stmt|;
for|for
control|(
name|QueryNode
name|clause
range|:
name|getChildren
argument_list|()
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|filler
argument_list|)
operator|.
name|append
argument_list|(
name|clause
operator|.
name|toQueryString
argument_list|(
name|escapeSyntaxParser
argument_list|)
argument_list|)
expr_stmt|;
name|filler
operator|=
literal|" "
expr_stmt|;
block|}
block|}
if|if
condition|(
name|isDefaultField
argument_list|(
name|this
operator|.
name|field
argument_list|)
condition|)
block|{
return|return
literal|"( "
operator|+
name|sb
operator|.
name|toString
argument_list|()
operator|+
literal|" ) "
operator|+
name|anySTR
return|;
block|}
else|else
block|{
return|return
name|this
operator|.
name|field
operator|+
literal|":(( "
operator|+
name|sb
operator|.
name|toString
argument_list|()
operator|+
literal|" ) "
operator|+
name|anySTR
operator|+
literal|")"
return|;
block|}
block|}
block|}
end_class
end_unit
