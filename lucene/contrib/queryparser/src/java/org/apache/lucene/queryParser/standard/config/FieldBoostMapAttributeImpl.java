begin_unit
begin_package
DECL|package|org.apache.lucene.queryParser.standard.config
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryParser
operator|.
name|standard
operator|.
name|config
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryParser
operator|.
name|core
operator|.
name|config
operator|.
name|FieldConfig
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryParser
operator|.
name|standard
operator|.
name|processors
operator|.
name|MultiFieldQueryNodeProcessor
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|AttributeImpl
import|;
end_import
begin_comment
comment|/**  * This attribute is used by {@link MultiFieldQueryNodeProcessor} processor and  * it should be defined in a {@link FieldConfig}. This processor uses this  * attribute to define which boost a specific field should have when none is  * defined to it.<br/>  *<br/>  *   * @see org.apache.lucene.queryParser.standard.config.BoostAttribute  */
end_comment
begin_class
DECL|class|FieldBoostMapAttributeImpl
specifier|public
class|class
name|FieldBoostMapAttributeImpl
extends|extends
name|AttributeImpl
implements|implements
name|FieldBoostMapAttribute
block|{
DECL|field|boosts
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Float
argument_list|>
name|boosts
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|Float
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|FieldBoostMapAttributeImpl
specifier|public
name|FieldBoostMapAttributeImpl
parameter_list|()
block|{
comment|// empty constructor
block|}
DECL|method|setFieldBoostMap
specifier|public
name|void
name|setFieldBoostMap
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Float
argument_list|>
name|boosts
parameter_list|)
block|{
name|this
operator|.
name|boosts
operator|=
name|boosts
expr_stmt|;
block|}
DECL|method|getFieldBoostMap
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Float
argument_list|>
name|getFieldBoostMap
parameter_list|()
block|{
return|return
name|this
operator|.
name|boosts
return|;
block|}
annotation|@
name|Override
DECL|method|clear
specifier|public
name|void
name|clear
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|copyTo
specifier|public
name|void
name|copyTo
parameter_list|(
name|AttributeImpl
name|target
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|instanceof
name|FieldBoostMapAttributeImpl
operator|&&
operator|(
operator|(
name|FieldBoostMapAttributeImpl
operator|)
name|other
operator|)
operator|.
name|boosts
operator|.
name|equals
argument_list|(
name|this
operator|.
name|boosts
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
specifier|final
name|int
name|prime
init|=
literal|97
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|boosts
operator|!=
literal|null
condition|)
return|return
name|this
operator|.
name|boosts
operator|.
name|hashCode
argument_list|()
operator|*
name|prime
return|;
else|else
return|return
name|Float
operator|.
name|valueOf
argument_list|(
name|prime
argument_list|)
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"<fieldBoostMapAttribute map="
operator|+
name|this
operator|.
name|boosts
operator|+
literal|"/>"
return|;
block|}
block|}
end_class
end_unit
