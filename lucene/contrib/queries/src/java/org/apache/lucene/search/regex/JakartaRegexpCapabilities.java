begin_unit
begin_package
DECL|package|org.apache.lucene.search.regex
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|regex
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|regexp
operator|.
name|RE
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|regexp
operator|.
name|REProgram
import|;
end_import
begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import
begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import
begin_comment
comment|/**  * Implementation tying<a href="http://jakarta.apache.org/regexp">Jakarta  * Regexp</a> to RegexQuery. Jakarta Regepx internally supports a  * {@link #prefix} implementation which can offer performance gains under  * certain circumstances. Yet, the implementation appears to be rather shaky as  * it doesn't always provide a prefix even if one would exist.  */
end_comment
begin_class
DECL|class|JakartaRegexpCapabilities
specifier|public
class|class
name|JakartaRegexpCapabilities
implements|implements
name|RegexCapabilities
block|{
DECL|field|regexp
specifier|private
name|RE
name|regexp
decl_stmt|;
DECL|field|prefixField
specifier|private
specifier|static
name|Field
name|prefixField
decl_stmt|;
DECL|field|getPrefixMethod
specifier|private
specifier|static
name|Method
name|getPrefixMethod
decl_stmt|;
static|static
block|{
try|try
block|{
name|getPrefixMethod
operator|=
name|REProgram
operator|.
name|class
operator|.
name|getMethod
argument_list|(
literal|"getPrefix"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|getPrefixMethod
operator|=
literal|null
expr_stmt|;
block|}
try|try
block|{
name|prefixField
operator|=
name|REProgram
operator|.
name|class
operator|.
name|getDeclaredField
argument_list|(
literal|"prefix"
argument_list|)
expr_stmt|;
name|prefixField
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|prefixField
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|// Define the flags that are possible. Redefine them here
comment|// to avoid exposing the RE class to the caller.
DECL|field|flags
specifier|private
name|int
name|flags
init|=
name|RE
operator|.
name|MATCH_NORMAL
decl_stmt|;
comment|/**    * Flag to specify normal, case-sensitive matching behaviour. This is the default.    */
DECL|field|FLAG_MATCH_NORMAL
specifier|public
specifier|static
specifier|final
name|int
name|FLAG_MATCH_NORMAL
init|=
name|RE
operator|.
name|MATCH_NORMAL
decl_stmt|;
comment|/**    * Flag to specify that matching should be case-independent (folded)    */
DECL|field|FLAG_MATCH_CASEINDEPENDENT
specifier|public
specifier|static
specifier|final
name|int
name|FLAG_MATCH_CASEINDEPENDENT
init|=
name|RE
operator|.
name|MATCH_CASEINDEPENDENT
decl_stmt|;
comment|/**    * Constructs a RegexCapabilities with the default MATCH_NORMAL match style.    */
DECL|method|JakartaRegexpCapabilities
specifier|public
name|JakartaRegexpCapabilities
parameter_list|()
block|{}
comment|/**    * Constructs a RegexCapabilities with the provided match flags.    * Multiple flags should be ORed together.    *     * @param flags The matching style    */
DECL|method|JakartaRegexpCapabilities
specifier|public
name|JakartaRegexpCapabilities
parameter_list|(
name|int
name|flags
parameter_list|)
block|{
name|this
operator|.
name|flags
operator|=
name|flags
expr_stmt|;
block|}
DECL|method|compile
specifier|public
name|void
name|compile
parameter_list|(
name|String
name|pattern
parameter_list|)
block|{
name|regexp
operator|=
operator|new
name|RE
argument_list|(
name|pattern
argument_list|,
name|this
operator|.
name|flags
argument_list|)
expr_stmt|;
block|}
DECL|method|match
specifier|public
name|boolean
name|match
parameter_list|(
name|String
name|string
parameter_list|)
block|{
return|return
name|regexp
operator|.
name|match
argument_list|(
name|string
argument_list|)
return|;
block|}
DECL|method|prefix
specifier|public
name|String
name|prefix
parameter_list|()
block|{
try|try
block|{
specifier|final
name|char
index|[]
name|prefix
decl_stmt|;
if|if
condition|(
name|getPrefixMethod
operator|!=
literal|null
condition|)
block|{
name|prefix
operator|=
operator|(
name|char
index|[]
operator|)
name|getPrefixMethod
operator|.
name|invoke
argument_list|(
name|regexp
operator|.
name|getProgram
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|prefixField
operator|!=
literal|null
condition|)
block|{
name|prefix
operator|=
operator|(
name|char
index|[]
operator|)
name|prefixField
operator|.
name|get
argument_list|(
name|regexp
operator|.
name|getProgram
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
return|return
name|prefix
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|String
argument_list|(
name|prefix
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// if we cannot get the prefix, return none
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
return|return
literal|false
return|;
specifier|final
name|JakartaRegexpCapabilities
name|that
init|=
operator|(
name|JakartaRegexpCapabilities
operator|)
name|o
decl_stmt|;
if|if
condition|(
name|regexp
operator|!=
literal|null
condition|?
operator|!
name|regexp
operator|.
name|equals
argument_list|(
name|that
operator|.
name|regexp
argument_list|)
else|:
name|that
operator|.
name|regexp
operator|!=
literal|null
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
operator|(
name|regexp
operator|!=
literal|null
condition|?
name|regexp
operator|.
name|hashCode
argument_list|()
else|:
literal|0
operator|)
return|;
block|}
block|}
end_class
end_unit
