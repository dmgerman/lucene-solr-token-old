begin_unit
begin_package
DECL|package|org.apache.lucene.search.regex
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|regex
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|spans
operator|.
name|SpanMultiTermQueryWrapper
import|;
end_import
begin_comment
comment|/**  * A SpanQuery version of {@link RegexQuery} allowing regular expression  * queries to be nested within other SpanQuery subclasses.  * @deprecated Use<code>new SpanMultiTermQueryWrapper&lt;RegexQuery&gt;(new RegexQuery())</code> instead.  * This query will be removed in Lucene 4.0  */
end_comment
begin_class
annotation|@
name|Deprecated
DECL|class|SpanRegexQuery
specifier|public
class|class
name|SpanRegexQuery
extends|extends
name|SpanMultiTermQueryWrapper
argument_list|<
name|RegexQuery
argument_list|>
implements|implements
name|RegexQueryCapable
block|{
DECL|field|regexImpl
specifier|private
specifier|final
name|RegexCapabilities
name|regexImpl
init|=
operator|new
name|JavaUtilRegexCapabilities
argument_list|()
decl_stmt|;
DECL|method|SpanRegexQuery
specifier|public
name|SpanRegexQuery
parameter_list|(
name|Term
name|term
parameter_list|)
block|{
name|super
argument_list|(
operator|new
name|RegexQuery
argument_list|(
name|term
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|getTerm
specifier|public
name|Term
name|getTerm
parameter_list|()
block|{
return|return
name|query
operator|.
name|getTerm
argument_list|()
return|;
block|}
DECL|method|setRegexImplementation
specifier|public
name|void
name|setRegexImplementation
parameter_list|(
name|RegexCapabilities
name|impl
parameter_list|)
block|{
name|query
operator|.
name|setRegexImplementation
argument_list|(
name|impl
argument_list|)
expr_stmt|;
block|}
DECL|method|getRegexImplementation
specifier|public
name|RegexCapabilities
name|getRegexImplementation
parameter_list|()
block|{
return|return
name|query
operator|.
name|getRegexImplementation
argument_list|()
return|;
block|}
block|}
end_class
end_unit
