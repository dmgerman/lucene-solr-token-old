begin_unit
begin_package
DECL|package|org.apache.lucene.spatial.query
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|query
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|com
operator|.
name|spatial4j
operator|.
name|core
operator|.
name|shape
operator|.
name|Rectangle
import|;
end_import
begin_import
import|import
name|com
operator|.
name|spatial4j
operator|.
name|core
operator|.
name|shape
operator|.
name|Shape
import|;
end_import
begin_import
import|import
name|com
operator|.
name|spatial4j
operator|.
name|core
operator|.
name|shape
operator|.
name|SpatialRelation
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_comment
comment|/**  * A clause that compares a stored geometry to a supplied geometry. For more  * explanation of each operation, consider looking at the source implementation  * of {@link #evaluate(com.spatial4j.core.shape.Shape, com.spatial4j.core.shape.Shape)}.  *  * @see<a href="http://edndoc.esri.com/arcsde/9.1/general_topics/understand_spatial_relations.htm">  *   ESRIs docs on spatial relations</a>  *  * @lucene.experimental  */
end_comment
begin_class
DECL|class|SpatialOperation
specifier|public
specifier|abstract
class|class
name|SpatialOperation
implements|implements
name|Serializable
block|{
comment|// Private registry
DECL|field|registry
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|SpatialOperation
argument_list|>
name|registry
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|SpatialOperation
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|list
specifier|private
specifier|static
specifier|final
name|List
argument_list|<
name|SpatialOperation
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|SpatialOperation
argument_list|>
argument_list|()
decl_stmt|;
comment|// Geometry Operations
comment|/** Bounding box of the *indexed* shape. */
DECL|field|BBoxIntersects
specifier|public
specifier|static
specifier|final
name|SpatialOperation
name|BBoxIntersects
init|=
operator|new
name|SpatialOperation
argument_list|(
literal|"BBoxIntersects"
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|evaluate
parameter_list|(
name|Shape
name|indexedShape
parameter_list|,
name|Shape
name|queryShape
parameter_list|)
block|{
return|return
name|indexedShape
operator|.
name|getBoundingBox
argument_list|()
operator|.
name|relate
argument_list|(
name|queryShape
argument_list|)
operator|.
name|intersects
argument_list|()
return|;
block|}
block|}
decl_stmt|;
comment|/** Bounding box of the *indexed* shape. */
DECL|field|BBoxWithin
specifier|public
specifier|static
specifier|final
name|SpatialOperation
name|BBoxWithin
init|=
operator|new
name|SpatialOperation
argument_list|(
literal|"BBoxWithin"
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|evaluate
parameter_list|(
name|Shape
name|indexedShape
parameter_list|,
name|Shape
name|queryShape
parameter_list|)
block|{
name|Rectangle
name|bbox
init|=
name|indexedShape
operator|.
name|getBoundingBox
argument_list|()
decl_stmt|;
return|return
name|bbox
operator|.
name|relate
argument_list|(
name|queryShape
argument_list|)
operator|==
name|SpatialRelation
operator|.
name|WITHIN
operator|||
name|bbox
operator|.
name|equals
argument_list|(
name|queryShape
argument_list|)
return|;
block|}
block|}
decl_stmt|;
DECL|field|Contains
specifier|public
specifier|static
specifier|final
name|SpatialOperation
name|Contains
init|=
operator|new
name|SpatialOperation
argument_list|(
literal|"Contains"
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|evaluate
parameter_list|(
name|Shape
name|indexedShape
parameter_list|,
name|Shape
name|queryShape
parameter_list|)
block|{
return|return
name|indexedShape
operator|.
name|hasArea
argument_list|()
operator|&&
name|indexedShape
operator|.
name|relate
argument_list|(
name|queryShape
argument_list|)
operator|==
name|SpatialRelation
operator|.
name|CONTAINS
operator|||
name|indexedShape
operator|.
name|equals
argument_list|(
name|queryShape
argument_list|)
return|;
block|}
block|}
decl_stmt|;
DECL|field|Intersects
specifier|public
specifier|static
specifier|final
name|SpatialOperation
name|Intersects
init|=
operator|new
name|SpatialOperation
argument_list|(
literal|"Intersects"
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|evaluate
parameter_list|(
name|Shape
name|indexedShape
parameter_list|,
name|Shape
name|queryShape
parameter_list|)
block|{
return|return
name|indexedShape
operator|.
name|relate
argument_list|(
name|queryShape
argument_list|)
operator|.
name|intersects
argument_list|()
return|;
block|}
block|}
decl_stmt|;
DECL|field|IsEqualTo
specifier|public
specifier|static
specifier|final
name|SpatialOperation
name|IsEqualTo
init|=
operator|new
name|SpatialOperation
argument_list|(
literal|"IsEqualTo"
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|evaluate
parameter_list|(
name|Shape
name|indexedShape
parameter_list|,
name|Shape
name|queryShape
parameter_list|)
block|{
return|return
name|indexedShape
operator|.
name|equals
argument_list|(
name|queryShape
argument_list|)
return|;
block|}
block|}
decl_stmt|;
DECL|field|IsDisjointTo
specifier|public
specifier|static
specifier|final
name|SpatialOperation
name|IsDisjointTo
init|=
operator|new
name|SpatialOperation
argument_list|(
literal|"IsDisjointTo"
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|evaluate
parameter_list|(
name|Shape
name|indexedShape
parameter_list|,
name|Shape
name|queryShape
parameter_list|)
block|{
return|return
operator|!
name|indexedShape
operator|.
name|relate
argument_list|(
name|queryShape
argument_list|)
operator|.
name|intersects
argument_list|()
return|;
block|}
block|}
decl_stmt|;
DECL|field|IsWithin
specifier|public
specifier|static
specifier|final
name|SpatialOperation
name|IsWithin
init|=
operator|new
name|SpatialOperation
argument_list|(
literal|"IsWithin"
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|evaluate
parameter_list|(
name|Shape
name|indexedShape
parameter_list|,
name|Shape
name|queryShape
parameter_list|)
block|{
return|return
name|queryShape
operator|.
name|hasArea
argument_list|()
operator|&&
operator|(
name|indexedShape
operator|.
name|relate
argument_list|(
name|queryShape
argument_list|)
operator|==
name|SpatialRelation
operator|.
name|WITHIN
operator|||
name|indexedShape
operator|.
name|equals
argument_list|(
name|queryShape
argument_list|)
operator|)
return|;
block|}
block|}
decl_stmt|;
DECL|field|Overlaps
specifier|public
specifier|static
specifier|final
name|SpatialOperation
name|Overlaps
init|=
operator|new
name|SpatialOperation
argument_list|(
literal|"Overlaps"
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|evaluate
parameter_list|(
name|Shape
name|indexedShape
parameter_list|,
name|Shape
name|queryShape
parameter_list|)
block|{
return|return
name|queryShape
operator|.
name|hasArea
argument_list|()
operator|&&
name|indexedShape
operator|.
name|relate
argument_list|(
name|queryShape
argument_list|)
operator|.
name|intersects
argument_list|()
return|;
block|}
block|}
decl_stmt|;
comment|// Member variables
DECL|field|scoreIsMeaningful
specifier|private
specifier|final
name|boolean
name|scoreIsMeaningful
decl_stmt|;
DECL|field|sourceNeedsArea
specifier|private
specifier|final
name|boolean
name|sourceNeedsArea
decl_stmt|;
DECL|field|targetNeedsArea
specifier|private
specifier|final
name|boolean
name|targetNeedsArea
decl_stmt|;
DECL|field|name
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
DECL|method|SpatialOperation
specifier|protected
name|SpatialOperation
parameter_list|(
name|String
name|name
parameter_list|,
name|boolean
name|scoreIsMeaningful
parameter_list|,
name|boolean
name|sourceNeedsArea
parameter_list|,
name|boolean
name|targetNeedsArea
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|scoreIsMeaningful
operator|=
name|scoreIsMeaningful
expr_stmt|;
name|this
operator|.
name|sourceNeedsArea
operator|=
name|sourceNeedsArea
expr_stmt|;
name|this
operator|.
name|targetNeedsArea
operator|=
name|targetNeedsArea
expr_stmt|;
name|registry
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|registry
operator|.
name|put
argument_list|(
name|name
operator|.
name|toUpperCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
DECL|method|get
specifier|public
specifier|static
name|SpatialOperation
name|get
parameter_list|(
name|String
name|v
parameter_list|)
block|{
name|SpatialOperation
name|op
init|=
name|registry
operator|.
name|get
argument_list|(
name|v
argument_list|)
decl_stmt|;
if|if
condition|(
name|op
operator|==
literal|null
condition|)
block|{
name|op
operator|=
name|registry
operator|.
name|get
argument_list|(
name|v
operator|.
name|toUpperCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|op
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unknown Operation: "
operator|+
name|v
argument_list|)
throw|;
block|}
return|return
name|op
return|;
block|}
DECL|method|values
specifier|public
specifier|static
name|List
argument_list|<
name|SpatialOperation
argument_list|>
name|values
parameter_list|()
block|{
return|return
name|list
return|;
block|}
DECL|method|is
specifier|public
specifier|static
name|boolean
name|is
parameter_list|(
name|SpatialOperation
name|op
parameter_list|,
name|SpatialOperation
modifier|...
name|tst
parameter_list|)
block|{
for|for
control|(
name|SpatialOperation
name|t
range|:
name|tst
control|)
block|{
if|if
condition|(
name|op
operator|==
name|t
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**    * Returns whether the relationship between indexedShape and queryShape is    * satisfied by this operation.    */
DECL|method|evaluate
specifier|public
specifier|abstract
name|boolean
name|evaluate
parameter_list|(
name|Shape
name|indexedShape
parameter_list|,
name|Shape
name|queryShape
parameter_list|)
function_decl|;
comment|// ================================================= Getters / Setters =============================================
DECL|method|isScoreIsMeaningful
specifier|public
name|boolean
name|isScoreIsMeaningful
parameter_list|()
block|{
return|return
name|scoreIsMeaningful
return|;
block|}
DECL|method|isSourceNeedsArea
specifier|public
name|boolean
name|isSourceNeedsArea
parameter_list|()
block|{
return|return
name|sourceNeedsArea
return|;
block|}
DECL|method|isTargetNeedsArea
specifier|public
name|boolean
name|isTargetNeedsArea
parameter_list|()
block|{
return|return
name|targetNeedsArea
return|;
block|}
DECL|method|getName
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|name
return|;
block|}
block|}
end_class
end_unit
