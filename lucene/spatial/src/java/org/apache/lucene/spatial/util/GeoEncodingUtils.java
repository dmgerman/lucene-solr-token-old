begin_unit
begin_package
DECL|package|org.apache.lucene.spatial.util
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|util
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BitUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRefBuilder
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|util
operator|.
name|GeoUtils
operator|.
name|MIN_LON_INCL
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|util
operator|.
name|GeoUtils
operator|.
name|MIN_LAT_INCL
import|;
end_import
begin_comment
comment|/**  * Basic reusable geopoint encoding methods  *  * @lucene.experimental  */
end_comment
begin_class
DECL|class|GeoEncodingUtils
specifier|public
specifier|final
class|class
name|GeoEncodingUtils
block|{
comment|/** number of bits used for quantizing latitude and longitude values */
DECL|field|BITS
specifier|public
specifier|static
specifier|final
name|short
name|BITS
init|=
literal|31
decl_stmt|;
DECL|field|LAT_SCALE
specifier|private
specifier|static
specifier|final
name|double
name|LAT_SCALE
init|=
operator|(
literal|0x1L
operator|<<
name|BITS
operator|)
operator|/
literal|180.0D
decl_stmt|;
DECL|field|LON_SCALE
specifier|private
specifier|static
specifier|final
name|double
name|LON_SCALE
init|=
operator|(
literal|0x1L
operator|<<
name|BITS
operator|)
operator|/
literal|360.0D
decl_stmt|;
comment|/**    * The maximum term length (used for<code>byte[]</code> buffer size)    * for encoding<code>geoEncoded</code> values.    * @see #geoCodedToPrefixCodedBytes(long, int, BytesRefBuilder)    */
DECL|field|BUF_SIZE_LONG
specifier|public
specifier|static
specifier|final
name|int
name|BUF_SIZE_LONG
init|=
literal|28
operator|/
literal|8
operator|+
literal|1
decl_stmt|;
comment|/** rounding error for quantized latitude and longitude values */
DECL|field|TOLERANCE
specifier|public
specifier|static
specifier|final
name|double
name|TOLERANCE
init|=
literal|1E
operator|-
literal|6
decl_stmt|;
comment|// No instance:
DECL|method|GeoEncodingUtils
specifier|private
name|GeoEncodingUtils
parameter_list|()
block|{   }
comment|/**    * encode latitude, longitude geopoint values using morton encoding method    * https://en.wikipedia.org/wiki/Z-order_curve    */
DECL|method|mortonHash
specifier|public
specifier|static
specifier|final
name|Long
name|mortonHash
parameter_list|(
specifier|final
name|double
name|lat
parameter_list|,
specifier|final
name|double
name|lon
parameter_list|)
block|{
return|return
name|BitUtil
operator|.
name|interleave
argument_list|(
name|scaleLon
argument_list|(
name|lon
argument_list|)
argument_list|,
name|scaleLat
argument_list|(
name|lat
argument_list|)
argument_list|)
return|;
block|}
comment|/** decode longitude value from morton encoded geo point */
DECL|method|mortonUnhashLon
specifier|public
specifier|static
specifier|final
name|double
name|mortonUnhashLon
parameter_list|(
specifier|final
name|long
name|hash
parameter_list|)
block|{
return|return
name|unscaleLon
argument_list|(
name|BitUtil
operator|.
name|deinterleave
argument_list|(
name|hash
argument_list|)
argument_list|)
return|;
block|}
comment|/** decode latitude value from morton encoded geo point */
DECL|method|mortonUnhashLat
specifier|public
specifier|static
specifier|final
name|double
name|mortonUnhashLat
parameter_list|(
specifier|final
name|long
name|hash
parameter_list|)
block|{
return|return
name|unscaleLat
argument_list|(
name|BitUtil
operator|.
name|deinterleave
argument_list|(
name|hash
operator|>>>
literal|1
argument_list|)
argument_list|)
return|;
block|}
DECL|method|scaleLon
specifier|private
specifier|static
specifier|final
name|long
name|scaleLon
parameter_list|(
specifier|final
name|double
name|val
parameter_list|)
block|{
return|return
call|(
name|long
call|)
argument_list|(
operator|(
name|val
operator|-
name|MIN_LON_INCL
operator|)
operator|*
name|LON_SCALE
argument_list|)
return|;
block|}
DECL|method|scaleLat
specifier|private
specifier|static
specifier|final
name|long
name|scaleLat
parameter_list|(
specifier|final
name|double
name|val
parameter_list|)
block|{
return|return
call|(
name|long
call|)
argument_list|(
operator|(
name|val
operator|-
name|MIN_LAT_INCL
operator|)
operator|*
name|LAT_SCALE
argument_list|)
return|;
block|}
DECL|method|unscaleLon
specifier|private
specifier|static
specifier|final
name|double
name|unscaleLon
parameter_list|(
specifier|final
name|long
name|val
parameter_list|)
block|{
return|return
operator|(
name|val
operator|/
name|LON_SCALE
operator|)
operator|+
name|MIN_LON_INCL
return|;
block|}
DECL|method|unscaleLat
specifier|private
specifier|static
specifier|final
name|double
name|unscaleLat
parameter_list|(
specifier|final
name|long
name|val
parameter_list|)
block|{
return|return
operator|(
name|val
operator|/
name|LAT_SCALE
operator|)
operator|+
name|MIN_LAT_INCL
return|;
block|}
comment|/** Compare two position values within a {@link GeoEncodingUtils#TOLERANCE} factor */
DECL|method|compare
specifier|public
specifier|static
name|double
name|compare
parameter_list|(
specifier|final
name|double
name|v1
parameter_list|,
specifier|final
name|double
name|v2
parameter_list|)
block|{
specifier|final
name|double
name|delta
init|=
name|v1
operator|-
name|v2
decl_stmt|;
return|return
name|Math
operator|.
name|abs
argument_list|(
name|delta
argument_list|)
operator|<=
name|TOLERANCE
condition|?
literal|0
else|:
name|delta
return|;
block|}
comment|/** Convert a geocoded morton long into a prefix coded geo term */
DECL|method|geoCodedToPrefixCoded
specifier|public
specifier|static
name|void
name|geoCodedToPrefixCoded
parameter_list|(
name|long
name|hash
parameter_list|,
name|int
name|shift
parameter_list|,
name|BytesRefBuilder
name|bytes
parameter_list|)
block|{
name|geoCodedToPrefixCodedBytes
argument_list|(
name|hash
argument_list|,
name|shift
argument_list|,
name|bytes
argument_list|)
expr_stmt|;
block|}
comment|/** Convert a prefix coded geo term back into the geocoded morton long */
DECL|method|prefixCodedToGeoCoded
specifier|public
specifier|static
name|long
name|prefixCodedToGeoCoded
parameter_list|(
specifier|final
name|BytesRef
name|val
parameter_list|)
block|{
specifier|final
name|long
name|result
init|=
name|fromBytes
argument_list|(
operator|(
name|byte
operator|)
literal|0
argument_list|,
operator|(
name|byte
operator|)
literal|0
argument_list|,
operator|(
name|byte
operator|)
literal|0
argument_list|,
operator|(
name|byte
operator|)
literal|0
argument_list|,
name|val
operator|.
name|bytes
index|[
name|val
operator|.
name|offset
operator|+
literal|0
index|]
argument_list|,
name|val
operator|.
name|bytes
index|[
name|val
operator|.
name|offset
operator|+
literal|1
index|]
argument_list|,
name|val
operator|.
name|bytes
index|[
name|val
operator|.
name|offset
operator|+
literal|2
index|]
argument_list|,
name|val
operator|.
name|bytes
index|[
name|val
operator|.
name|offset
operator|+
literal|3
index|]
argument_list|)
decl_stmt|;
return|return
name|result
operator|<<
literal|32
return|;
block|}
comment|/**    * GeoTerms are coded using 4 prefix bytes + 1 byte to record number of prefix bits    *    * example prefix at shift 54 (yields 10 significant prefix bits):    *  pppppppp pp000000 00000000 00000000 00001010    *  (byte 1) (byte 2) (byte 3) (byte 4) (sigbits)    */
DECL|method|geoCodedToPrefixCodedBytes
specifier|private
specifier|static
name|void
name|geoCodedToPrefixCodedBytes
parameter_list|(
specifier|final
name|long
name|hash
parameter_list|,
specifier|final
name|int
name|shift
parameter_list|,
specifier|final
name|BytesRefBuilder
name|bytes
parameter_list|)
block|{
comment|// ensure shift is 32..63
if|if
condition|(
name|shift
argument_list|<
literal|32
operator|||
name|shift
argument_list|>
literal|63
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Illegal shift value, must be 32..63; got shift="
operator|+
name|shift
argument_list|)
throw|;
block|}
name|int
name|nChars
init|=
name|BUF_SIZE_LONG
operator|+
literal|1
decl_stmt|;
comment|// one extra for the byte that contains the number of significant bits
name|bytes
operator|.
name|setLength
argument_list|(
name|nChars
argument_list|)
expr_stmt|;
name|bytes
operator|.
name|grow
argument_list|(
name|nChars
operator|--
argument_list|)
expr_stmt|;
specifier|final
name|int
name|sigBits
init|=
literal|64
operator|-
name|shift
decl_stmt|;
name|bytes
operator|.
name|setByteAt
argument_list|(
name|BUF_SIZE_LONG
argument_list|,
call|(
name|byte
call|)
argument_list|(
name|sigBits
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|sortableBits
init|=
name|hash
decl_stmt|;
name|sortableBits
operator|>>>=
name|shift
expr_stmt|;
name|sortableBits
operator|<<=
literal|32
operator|-
name|sigBits
expr_stmt|;
do|do
block|{
name|bytes
operator|.
name|setByteAt
argument_list|(
operator|--
name|nChars
argument_list|,
call|(
name|byte
call|)
argument_list|(
name|sortableBits
argument_list|)
argument_list|)
expr_stmt|;
name|sortableBits
operator|>>>=
literal|8
expr_stmt|;
block|}
do|while
condition|(
name|nChars
operator|>
literal|0
condition|)
do|;
block|}
comment|/** Get the prefix coded geo term shift value */
DECL|method|getPrefixCodedShift
specifier|public
specifier|static
name|int
name|getPrefixCodedShift
parameter_list|(
specifier|final
name|BytesRef
name|val
parameter_list|)
block|{
specifier|final
name|int
name|shift
init|=
name|val
operator|.
name|bytes
index|[
name|val
operator|.
name|offset
operator|+
name|BUF_SIZE_LONG
index|]
decl_stmt|;
if|if
condition|(
name|shift
operator|>
literal|63
operator|||
name|shift
operator|<
literal|0
condition|)
throw|throw
operator|new
name|NumberFormatException
argument_list|(
literal|"Invalid shift value ("
operator|+
name|shift
operator|+
literal|") in prefixCoded bytes (is encoded value really a geo point?)"
argument_list|)
throw|;
return|return
name|shift
return|;
block|}
comment|/** Converts 8 bytes to a long value */
DECL|method|fromBytes
specifier|protected
specifier|static
name|long
name|fromBytes
parameter_list|(
name|byte
name|b1
parameter_list|,
name|byte
name|b2
parameter_list|,
name|byte
name|b3
parameter_list|,
name|byte
name|b4
parameter_list|,
name|byte
name|b5
parameter_list|,
name|byte
name|b6
parameter_list|,
name|byte
name|b7
parameter_list|,
name|byte
name|b8
parameter_list|)
block|{
return|return
operator|(
operator|(
name|long
operator|)
name|b1
operator|&
literal|255L
operator|)
operator|<<
literal|56
operator||
operator|(
operator|(
name|long
operator|)
name|b2
operator|&
literal|255L
operator|)
operator|<<
literal|48
operator||
operator|(
operator|(
name|long
operator|)
name|b3
operator|&
literal|255L
operator|)
operator|<<
literal|40
operator||
operator|(
operator|(
name|long
operator|)
name|b4
operator|&
literal|255L
operator|)
operator|<<
literal|32
operator||
operator|(
operator|(
name|long
operator|)
name|b5
operator|&
literal|255L
operator|)
operator|<<
literal|24
operator||
operator|(
operator|(
name|long
operator|)
name|b6
operator|&
literal|255L
operator|)
operator|<<
literal|16
operator||
operator|(
operator|(
name|long
operator|)
name|b7
operator|&
literal|255L
operator|)
operator|<<
literal|8
operator||
operator|(
name|long
operator|)
name|b8
operator|&
literal|255L
return|;
block|}
comment|/** Converts a long value into a bit string (useful for debugging) */
DECL|method|geoTermToString
specifier|public
specifier|static
name|String
name|geoTermToString
parameter_list|(
name|long
name|term
parameter_list|)
block|{
name|StringBuilder
name|s
init|=
operator|new
name|StringBuilder
argument_list|(
literal|64
argument_list|)
decl_stmt|;
specifier|final
name|int
name|numberOfLeadingZeros
init|=
name|Long
operator|.
name|numberOfLeadingZeros
argument_list|(
name|term
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfLeadingZeros
condition|;
name|i
operator|++
control|)
block|{
name|s
operator|.
name|append
argument_list|(
literal|'0'
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|term
operator|!=
literal|0
condition|)
block|{
name|s
operator|.
name|append
argument_list|(
name|Long
operator|.
name|toBinaryString
argument_list|(
name|term
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|s
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class
end_unit
