begin_unit
begin_package
DECL|package|org.apache.lucene.spatial.prefix
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|prefix
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|com
operator|.
name|spatial4j
operator|.
name|core
operator|.
name|shape
operator|.
name|Shape
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DocsEnum
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReaderContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReaderContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|DocIdSet
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|DocIdSetIterator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|NumberRangePrefixTreeStrategy
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|NumberRangePrefixTreeStrategy
operator|.
name|Facets
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|prefix
operator|.
name|tree
operator|.
name|Cell
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|prefix
operator|.
name|tree
operator|.
name|NumberRangePrefixTree
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|prefix
operator|.
name|tree
operator|.
name|NumberRangePrefixTree
operator|.
name|UnitNRShape
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Bits
import|;
end_import
begin_comment
comment|/**  * Computes range facets for {@link NumberRangePrefixTreeStrategy}.  *  * @see NumberRangePrefixTreeStrategy#calcFacets(IndexReaderContext, Bits, Shape, int)  *  * @lucene.internal  */
end_comment
begin_class
DECL|class|NumberRangePrefixTreeFacets
specifier|public
class|class
name|NumberRangePrefixTreeFacets
block|{
DECL|method|compute
specifier|public
specifier|static
name|Facets
name|compute
parameter_list|(
name|NumberRangePrefixTreeStrategy
name|strategy
parameter_list|,
name|IndexReaderContext
name|context
parameter_list|,
specifier|final
name|Bits
name|acceptDocs
parameter_list|,
name|Shape
name|queryShape
parameter_list|,
name|int
name|facetLevel
parameter_list|)
throws|throws
name|IOException
block|{
name|Facets
name|facets
init|=
operator|new
name|Facets
argument_list|(
name|facetLevel
argument_list|)
decl_stmt|;
comment|// TODO should we pre-create all parent buckets? It's not necessary, but the client/user may find it convenient to
comment|//   have so it needn't do a bunch of calendar work itself to ascertain which buckets are missing. It would
comment|//   also then easily allow us to have a too-many-facets exception (e.g. you ask for a millisecond bucket for
comment|//   the entire year). We could do that now but we would only be able to throw if the actual counts get to the
comment|//   threshold vs. being able to know the possible values consistently a-priori which is much preferred. Now on the
comment|//   other hand, we can facet over extremely sparse data sets without needless parent buckets.
comment|//We collect per-leaf
specifier|final
name|List
argument_list|<
name|LeafReaderContext
argument_list|>
name|leaves
init|=
name|context
operator|.
name|leaves
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|LeafReaderContext
name|leafCtx
range|:
name|leaves
control|)
block|{
comment|//determine leaf acceptDocs
name|Bits
name|leafAcceptDocs
decl_stmt|;
if|if
condition|(
name|acceptDocs
operator|==
literal|null
condition|)
block|{
name|leafAcceptDocs
operator|=
name|leafCtx
operator|.
name|reader
argument_list|()
operator|.
name|getLiveDocs
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|leaves
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|leafAcceptDocs
operator|=
name|acceptDocs
expr_stmt|;
block|}
else|else
block|{
name|leafAcceptDocs
operator|=
operator|new
name|Bits
argument_list|()
block|{
comment|//note: it'd be nice if Lucene's BitsSlice was public.
specifier|final
name|int
name|docBase
init|=
name|leafCtx
operator|.
name|docBase
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|get
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|acceptDocs
operator|.
name|get
argument_list|(
name|docBase
operator|+
name|index
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|length
parameter_list|()
block|{
return|return
name|leafCtx
operator|.
name|reader
argument_list|()
operator|.
name|maxDoc
argument_list|()
return|;
block|}
block|}
expr_stmt|;
block|}
name|facets
operator|=
name|compute
argument_list|(
name|strategy
argument_list|,
name|leafCtx
argument_list|,
name|leafAcceptDocs
argument_list|,
name|queryShape
argument_list|,
name|facets
argument_list|)
expr_stmt|;
block|}
return|return
name|facets
return|;
block|}
DECL|method|compute
specifier|public
specifier|static
name|Facets
name|compute
parameter_list|(
specifier|final
name|NumberRangePrefixTreeStrategy
name|strategy
parameter_list|,
name|LeafReaderContext
name|context
parameter_list|,
name|Bits
name|acceptDocs
parameter_list|,
name|Shape
name|queryShape
parameter_list|,
specifier|final
name|Facets
name|facets
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|NumberRangePrefixTree
name|tree
init|=
name|strategy
operator|.
name|getGrid
argument_list|()
decl_stmt|;
specifier|final
name|int
name|scanLevel
init|=
name|tree
operator|.
name|getMaxLevels
argument_list|()
decl_stmt|;
comment|//TODO extract AbstractVisitingPrefixTreeFilter / VisitorTemplate to be generic, not necessarily a Filter/DocIdSet.
operator|new
name|AbstractVisitingPrefixTreeFilter
argument_list|(
name|queryShape
argument_list|,
name|strategy
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|tree
argument_list|,
name|facets
operator|.
name|detailLevel
argument_list|,
name|scanLevel
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|DocIdSet
name|getDocIdSet
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|,
name|Bits
name|acceptDocs
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|VisitorTemplate
argument_list|(
name|context
argument_list|,
name|acceptDocs
argument_list|,
operator|!
name|strategy
operator|.
name|pointsOnly
argument_list|)
block|{
name|Facets
operator|.
name|FacetParentVal
name|parentFacet
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|void
name|start
parameter_list|()
throws|throws
name|IOException
block|{           }
annotation|@
name|Override
specifier|protected
name|DocIdSet
name|finish
parameter_list|()
throws|throws
name|IOException
block|{
return|return
literal|null
return|;
comment|//unused
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|visit
parameter_list|(
name|Cell
name|cell
parameter_list|)
throws|throws
name|IOException
block|{
comment|// At facetLevel...
if|if
condition|(
name|cell
operator|.
name|getLevel
argument_list|()
operator|==
name|facets
operator|.
name|detailLevel
condition|)
block|{
comment|//note: parentFacet shouldn't be null if we get here
comment|// Count docs
name|int
name|count
init|=
name|countDocsAtThisTermInSet
argument_list|(
name|acceptDocs
argument_list|)
decl_stmt|;
if|if
condition|(
name|count
operator|>
literal|0
condition|)
block|{
comment|//lazy init childCounts
if|if
condition|(
name|parentFacet
operator|.
name|childCounts
operator|==
literal|null
condition|)
block|{
name|parentFacet
operator|.
name|childCounts
operator|=
operator|new
name|int
index|[
name|parentFacet
operator|.
name|childCountsLen
index|]
expr_stmt|;
block|}
name|UnitNRShape
name|unitShape
init|=
operator|(
name|UnitNRShape
operator|)
name|cell
operator|.
name|getShape
argument_list|()
decl_stmt|;
name|parentFacet
operator|.
name|childCounts
index|[
name|unitShape
operator|.
name|getValAtLevel
argument_list|(
name|cell
operator|.
name|getLevel
argument_list|()
argument_list|)
index|]
operator|+=
name|count
expr_stmt|;
block|}
return|return
literal|false
return|;
comment|//don't descend further; this is enough detail
block|}
name|parentFacet
operator|=
literal|null
expr_stmt|;
comment|//reset
comment|// At parent
if|if
condition|(
name|cell
operator|.
name|getLevel
argument_list|()
operator|==
name|facets
operator|.
name|detailLevel
operator|-
literal|1
condition|)
block|{
if|if
condition|(
operator|!
name|hasDocsAtThisTermInSet
argument_list|(
name|acceptDocs
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|//Look for existing parentFacet (from previous segment)
name|UnitNRShape
name|unitShape
init|=
operator|(
name|UnitNRShape
operator|)
name|cell
operator|.
name|getShape
argument_list|()
decl_stmt|;
name|UnitNRShape
name|key
init|=
name|unitShape
operator|.
name|clone
argument_list|()
decl_stmt|;
name|parentFacet
operator|=
name|facets
operator|.
name|parents
operator|.
name|get
argument_list|(
name|key
argument_list|)
expr_stmt|;
if|if
condition|(
name|parentFacet
operator|==
literal|null
condition|)
block|{
comment|//didn't find one; make a new one
name|parentFacet
operator|=
operator|new
name|Facets
operator|.
name|FacetParentVal
argument_list|()
expr_stmt|;
name|parentFacet
operator|.
name|childCountsLen
operator|=
name|tree
operator|.
name|getNumSubCells
argument_list|(
name|unitShape
argument_list|)
expr_stmt|;
name|facets
operator|.
name|parents
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|parentFacet
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|visitLeaf
parameter_list|(
name|Cell
name|cell
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|int
name|levelsToGo
init|=
name|facets
operator|.
name|detailLevel
operator|-
name|cell
operator|.
name|getLevel
argument_list|()
decl_stmt|;
if|if
condition|(
name|levelsToGo
operator|<=
literal|0
condition|)
block|{
return|return;
comment|//do nothing; we already collected in visit()
comment|//note: once we index ranges without direct prefix's of leaves,
comment|//  we'll need to collect here at levelsToGo==0 too.
block|}
name|int
name|count
init|=
name|countDocsAtThisTermInSet
argument_list|(
name|acceptDocs
argument_list|)
decl_stmt|;
if|if
condition|(
name|count
operator|==
literal|0
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|levelsToGo
operator|==
literal|1
condition|)
block|{
comment|// Because all leaves also have an indexed non-leaf, we can be sure we have parentCell set via visit().
name|parentFacet
operator|.
name|parentLeaves
operator|+=
name|count
expr_stmt|;
block|}
else|else
block|{
name|facets
operator|.
name|topLeaves
operator|+=
name|count
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|visitScanned
parameter_list|(
name|Cell
name|cell
parameter_list|)
throws|throws
name|IOException
block|{
comment|//TODO does this belong in superclass?  It ignores boolean result from visit(), but that's ok.
if|if
condition|(
name|queryShape
operator|.
name|relate
argument_list|(
name|cell
operator|.
name|getShape
argument_list|()
argument_list|)
operator|.
name|intersects
argument_list|()
condition|)
block|{
if|if
condition|(
name|cell
operator|.
name|isLeaf
argument_list|()
condition|)
block|{
name|visitLeaf
argument_list|(
name|cell
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|visit
argument_list|(
name|cell
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|//TODO These utility methods could move to superclass
specifier|private
name|int
name|countDocsAtThisTermInSet
parameter_list|(
name|Bits
name|actualBaseDocs
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|actualBaseDocs
operator|==
literal|null
condition|)
block|{
return|return
name|termsEnum
operator|.
name|docFreq
argument_list|()
return|;
block|}
name|int
name|count
init|=
literal|0
decl_stmt|;
name|docsEnum
operator|=
name|termsEnum
operator|.
name|docs
argument_list|(
name|actualBaseDocs
argument_list|,
name|docsEnum
argument_list|,
name|DocsEnum
operator|.
name|FLAG_NONE
argument_list|)
expr_stmt|;
while|while
condition|(
name|docsEnum
operator|.
name|nextDoc
argument_list|()
operator|!=
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
condition|)
block|{
name|count
operator|++
expr_stmt|;
block|}
return|return
name|count
return|;
block|}
specifier|private
name|boolean
name|hasDocsAtThisTermInSet
parameter_list|(
name|Bits
name|actualBaseDocs
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|actualBaseDocs
operator|==
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
name|docsEnum
operator|=
name|termsEnum
operator|.
name|docs
argument_list|(
name|actualBaseDocs
argument_list|,
name|docsEnum
argument_list|,
name|DocsEnum
operator|.
name|FLAG_NONE
argument_list|)
expr_stmt|;
return|return
operator|(
name|docsEnum
operator|.
name|nextDoc
argument_list|()
operator|!=
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
operator|)
return|;
block|}
block|}
operator|.
name|getDocIdSet
argument_list|()
return|;
block|}
block|}
operator|.
name|getDocIdSet
argument_list|(
name|context
argument_list|,
name|acceptDocs
argument_list|)
expr_stmt|;
return|return
name|facets
return|;
block|}
block|}
end_class
end_unit
