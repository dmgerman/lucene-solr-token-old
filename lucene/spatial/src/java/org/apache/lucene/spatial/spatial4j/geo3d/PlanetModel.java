begin_unit
begin_package
DECL|package|org.apache.lucene.spatial.spatial4j.geo3d
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|spatial4j
operator|.
name|geo3d
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_comment
comment|/**  * Holds mathematical constants associated with the model of a planet.  * @lucene.experimental  */
end_comment
begin_class
DECL|class|PlanetModel
specifier|public
class|class
name|PlanetModel
block|{
comment|/** Planet model corresponding to sphere. */
DECL|field|SPHERE
specifier|public
specifier|static
specifier|final
name|PlanetModel
name|SPHERE
init|=
operator|new
name|PlanetModel
argument_list|(
literal|1.0
argument_list|,
literal|1.0
argument_list|)
decl_stmt|;
comment|/** Mean radius */
DECL|field|WGS84_MEAN
specifier|public
specifier|static
specifier|final
name|double
name|WGS84_MEAN
init|=
literal|6371009.0
decl_stmt|;
comment|/** Polar radius */
DECL|field|WGS84_POLAR
specifier|public
specifier|static
specifier|final
name|double
name|WGS84_POLAR
init|=
literal|6356752.314245
decl_stmt|;
comment|/** Equatorial radius */
DECL|field|WGS84_EQUATORIAL
specifier|public
specifier|static
specifier|final
name|double
name|WGS84_EQUATORIAL
init|=
literal|6378137.0
decl_stmt|;
comment|/** Planet model corresponding to WGS84 */
DECL|field|WGS84
specifier|public
specifier|static
specifier|final
name|PlanetModel
name|WGS84
init|=
operator|new
name|PlanetModel
argument_list|(
name|WGS84_EQUATORIAL
operator|/
name|WGS84_MEAN
argument_list|,
name|WGS84_POLAR
operator|/
name|WGS84_MEAN
argument_list|)
decl_stmt|;
comment|// Surface of the planet:
comment|// x^2/a^2 + y^2/b^2 + z^2/c^2 = 1.0
comment|// Scaling factors are a,b,c.  geo3d can only support models where a==b, so use ab instead.
DECL|field|ab
specifier|public
specifier|final
name|double
name|ab
decl_stmt|;
DECL|field|c
specifier|public
specifier|final
name|double
name|c
decl_stmt|;
DECL|field|inverseAb
specifier|public
specifier|final
name|double
name|inverseAb
decl_stmt|;
DECL|field|inverseC
specifier|public
specifier|final
name|double
name|inverseC
decl_stmt|;
DECL|field|inverseAbSquared
specifier|public
specifier|final
name|double
name|inverseAbSquared
decl_stmt|;
DECL|field|inverseCSquared
specifier|public
specifier|final
name|double
name|inverseCSquared
decl_stmt|;
DECL|field|flattening
specifier|public
specifier|final
name|double
name|flattening
decl_stmt|;
DECL|field|squareRatio
specifier|public
specifier|final
name|double
name|squareRatio
decl_stmt|;
comment|// We do NOT include radius, because all computations in geo3d are in radians, not meters.
comment|// Compute north and south pole for planet model, since these are commonly used.
DECL|field|NORTH_POLE
specifier|public
specifier|final
name|GeoPoint
name|NORTH_POLE
decl_stmt|;
DECL|field|SOUTH_POLE
specifier|public
specifier|final
name|GeoPoint
name|SOUTH_POLE
decl_stmt|;
DECL|method|PlanetModel
specifier|public
name|PlanetModel
parameter_list|(
specifier|final
name|double
name|ab
parameter_list|,
specifier|final
name|double
name|c
parameter_list|)
block|{
name|this
operator|.
name|ab
operator|=
name|ab
expr_stmt|;
name|this
operator|.
name|c
operator|=
name|c
expr_stmt|;
name|this
operator|.
name|inverseAb
operator|=
literal|1.0
operator|/
name|ab
expr_stmt|;
name|this
operator|.
name|inverseC
operator|=
literal|1.0
operator|/
name|c
expr_stmt|;
name|this
operator|.
name|flattening
operator|=
operator|(
name|ab
operator|-
name|c
operator|)
operator|*
name|inverseAb
expr_stmt|;
name|this
operator|.
name|squareRatio
operator|=
operator|(
name|ab
operator|*
name|ab
operator|-
name|c
operator|*
name|c
operator|)
operator|/
operator|(
name|c
operator|*
name|c
operator|)
expr_stmt|;
name|this
operator|.
name|inverseAbSquared
operator|=
name|inverseAb
operator|*
name|inverseAb
expr_stmt|;
name|this
operator|.
name|inverseCSquared
operator|=
name|inverseC
operator|*
name|inverseC
expr_stmt|;
name|this
operator|.
name|NORTH_POLE
operator|=
operator|new
name|GeoPoint
argument_list|(
name|c
argument_list|,
literal|0.0
argument_list|,
literal|0.0
argument_list|,
literal|1.0
argument_list|,
name|Math
operator|.
name|PI
operator|*
literal|0.5
argument_list|,
literal|0.0
argument_list|)
expr_stmt|;
name|this
operator|.
name|SOUTH_POLE
operator|=
operator|new
name|GeoPoint
argument_list|(
name|c
argument_list|,
literal|0.0
argument_list|,
literal|0.0
argument_list|,
operator|-
literal|1.0
argument_list|,
operator|-
name|Math
operator|.
name|PI
operator|*
literal|0.5
argument_list|,
literal|0.0
argument_list|)
expr_stmt|;
block|}
comment|/** Find the minimum magnitude of all points on the ellipsoid.    */
DECL|method|getMinimumMagnitude
specifier|public
name|double
name|getMinimumMagnitude
parameter_list|()
block|{
return|return
name|Math
operator|.
name|min
argument_list|(
name|this
operator|.
name|ab
argument_list|,
name|this
operator|.
name|c
argument_list|)
return|;
block|}
comment|/** Find the maximum magnitude of all points on the ellipsoid.    */
DECL|method|getMaximumMagnitude
specifier|public
name|double
name|getMaximumMagnitude
parameter_list|()
block|{
return|return
name|Math
operator|.
name|max
argument_list|(
name|this
operator|.
name|ab
argument_list|,
name|this
operator|.
name|c
argument_list|)
return|;
block|}
comment|/** Compute surface distance between two points.    * @param p1 is the first point.    * @param p2 is the second point.    * @return the adjusted angle, when multiplied by the mean earth radius, yields a surface distance.  This will differ    * from GeoPoint.arcDistance() only when the planet model is not a sphere. @see {@link org.apache.lucene.spatial.spatial4j.geo3d.GeoPoint#arcDistance(GeoPoint)}    */
DECL|method|surfaceDistance
specifier|public
name|double
name|surfaceDistance
parameter_list|(
specifier|final
name|GeoPoint
name|p1
parameter_list|,
specifier|final
name|GeoPoint
name|p2
parameter_list|)
block|{
specifier|final
name|double
name|latA
init|=
name|p1
operator|.
name|getLatitude
argument_list|()
decl_stmt|;
specifier|final
name|double
name|lonA
init|=
name|p1
operator|.
name|getLongitude
argument_list|()
decl_stmt|;
specifier|final
name|double
name|latB
init|=
name|p2
operator|.
name|getLatitude
argument_list|()
decl_stmt|;
specifier|final
name|double
name|lonB
init|=
name|p2
operator|.
name|getLongitude
argument_list|()
decl_stmt|;
specifier|final
name|double
name|L
init|=
name|lonB
operator|-
name|lonA
decl_stmt|;
specifier|final
name|double
name|oF
init|=
literal|1.0
operator|-
name|this
operator|.
name|flattening
decl_stmt|;
specifier|final
name|double
name|U1
init|=
name|Math
operator|.
name|atan
argument_list|(
name|oF
operator|*
name|Math
operator|.
name|tan
argument_list|(
name|latA
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|double
name|U2
init|=
name|Math
operator|.
name|atan
argument_list|(
name|oF
operator|*
name|Math
operator|.
name|tan
argument_list|(
name|latB
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|double
name|sU1
init|=
name|Math
operator|.
name|sin
argument_list|(
name|U1
argument_list|)
decl_stmt|;
specifier|final
name|double
name|cU1
init|=
name|Math
operator|.
name|cos
argument_list|(
name|U1
argument_list|)
decl_stmt|;
specifier|final
name|double
name|sU2
init|=
name|Math
operator|.
name|sin
argument_list|(
name|U2
argument_list|)
decl_stmt|;
specifier|final
name|double
name|cU2
init|=
name|Math
operator|.
name|cos
argument_list|(
name|U2
argument_list|)
decl_stmt|;
name|double
name|sigma
decl_stmt|,
name|sinSigma
decl_stmt|,
name|cosSigma
decl_stmt|;
name|double
name|cos2Alpha
decl_stmt|,
name|cos2SigmaM
decl_stmt|;
name|double
name|lambda
init|=
name|L
decl_stmt|;
name|double
name|iters
init|=
literal|100
decl_stmt|;
do|do
block|{
specifier|final
name|double
name|sinLambda
init|=
name|Math
operator|.
name|sin
argument_list|(
name|lambda
argument_list|)
decl_stmt|;
specifier|final
name|double
name|cosLambda
init|=
name|Math
operator|.
name|cos
argument_list|(
name|lambda
argument_list|)
decl_stmt|;
name|sinSigma
operator|=
name|Math
operator|.
name|sqrt
argument_list|(
operator|(
name|cU2
operator|*
name|sinLambda
operator|)
operator|*
operator|(
name|cU2
operator|*
name|sinLambda
operator|)
operator|+
operator|(
name|cU1
operator|*
name|sU2
operator|-
name|sU1
operator|*
name|cU2
operator|*
name|cosLambda
operator|)
operator|*
operator|(
name|cU1
operator|*
name|sU2
operator|-
name|sU1
operator|*
name|cU2
operator|*
name|cosLambda
operator|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|Math
operator|.
name|abs
argument_list|(
name|sinSigma
argument_list|)
operator|<
name|Vector
operator|.
name|MINIMUM_RESOLUTION
condition|)
return|return
literal|0.0
return|;
name|cosSigma
operator|=
name|sU1
operator|*
name|sU2
operator|+
name|cU1
operator|*
name|cU2
operator|*
name|cosLambda
expr_stmt|;
name|sigma
operator|=
name|Math
operator|.
name|atan2
argument_list|(
name|sinSigma
argument_list|,
name|cosSigma
argument_list|)
expr_stmt|;
specifier|final
name|double
name|sinAlpha
init|=
name|cU1
operator|*
name|cU2
operator|*
name|sinLambda
operator|/
name|sinSigma
decl_stmt|;
name|cos2Alpha
operator|=
literal|1.0
operator|-
name|sinAlpha
operator|*
name|sinAlpha
expr_stmt|;
name|cos2SigmaM
operator|=
name|cosSigma
operator|-
literal|2.0
operator|*
name|sU1
operator|*
name|sU2
operator|/
name|cos2Alpha
expr_stmt|;
specifier|final
name|double
name|c
init|=
name|this
operator|.
name|flattening
operator|*
literal|0.625
operator|*
name|cos2Alpha
operator|*
operator|(
literal|4.0
operator|+
name|this
operator|.
name|flattening
operator|*
operator|(
literal|4.0
operator|-
literal|3.0
operator|*
name|cos2Alpha
operator|)
operator|)
decl_stmt|;
specifier|final
name|double
name|lambdaP
init|=
name|lambda
decl_stmt|;
name|lambda
operator|=
name|L
operator|+
operator|(
literal|1.0
operator|-
name|c
operator|)
operator|*
name|this
operator|.
name|flattening
operator|*
name|sinAlpha
operator|*
operator|(
name|sigma
operator|+
name|c
operator|*
name|sinSigma
operator|*
operator|(
name|cos2SigmaM
operator|+
name|c
operator|*
name|cosSigma
operator|*
operator|(
operator|-
literal|1.0
operator|+
literal|2.0
operator|*
name|cos2SigmaM
operator|*
name|cos2SigmaM
operator|)
operator|)
operator|)
expr_stmt|;
if|if
condition|(
name|Math
operator|.
name|abs
argument_list|(
name|lambda
operator|-
name|lambdaP
argument_list|)
operator|<
name|Vector
operator|.
name|MINIMUM_RESOLUTION
condition|)
break|break;
block|}
do|while
condition|(
operator|--
name|iters
operator|>
literal|0
condition|)
do|;
if|if
condition|(
name|iters
operator|==
literal|0
condition|)
return|return
literal|0.0
return|;
specifier|final
name|double
name|uSq
init|=
name|cos2Alpha
operator|*
name|this
operator|.
name|squareRatio
decl_stmt|;
specifier|final
name|double
name|A
init|=
literal|1.0
operator|+
name|uSq
operator|*
literal|0.00006103515625
operator|*
operator|(
literal|4096.0
operator|+
name|uSq
operator|*
operator|(
operator|-
literal|768.0
operator|+
name|uSq
operator|*
operator|(
literal|320.0
operator|-
literal|175.0
operator|*
name|uSq
operator|)
operator|)
operator|)
decl_stmt|;
specifier|final
name|double
name|B
init|=
name|uSq
operator|*
literal|0.0009765625
operator|*
operator|(
literal|256.0
operator|+
name|uSq
operator|*
operator|(
operator|-
literal|128.0
operator|+
name|uSq
operator|*
operator|(
literal|74.0
operator|-
literal|47.0
operator|*
name|uSq
operator|)
operator|)
operator|)
decl_stmt|;
specifier|final
name|double
name|deltaSigma
init|=
name|B
operator|*
name|sinSigma
operator|*
operator|(
name|cos2SigmaM
operator|+
name|B
operator|*
literal|0.25
operator|*
operator|(
name|cosSigma
operator|*
operator|(
operator|-
literal|1.0
operator|+
literal|2.0
operator|*
name|cos2SigmaM
operator|*
name|cos2SigmaM
operator|)
operator|-
name|B
operator|*
literal|0.16666666666666666666667
operator|*
name|cos2SigmaM
operator|*
operator|(
operator|-
literal|3.0
operator|+
literal|4.0
operator|*
name|sinSigma
operator|*
name|sinSigma
operator|)
operator|*
operator|(
operator|-
literal|3.0
operator|+
literal|4.0
operator|*
name|cos2SigmaM
operator|*
name|cos2SigmaM
operator|)
operator|)
operator|)
decl_stmt|;
return|return
name|this
operator|.
name|c
operator|*
name|A
operator|*
operator|(
name|sigma
operator|-
name|deltaSigma
operator|)
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
specifier|final
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|o
operator|instanceof
name|PlanetModel
operator|)
condition|)
return|return
literal|false
return|;
specifier|final
name|PlanetModel
name|other
init|=
operator|(
name|PlanetModel
operator|)
name|o
decl_stmt|;
return|return
name|ab
operator|==
name|other
operator|.
name|ab
operator|&&
name|c
operator|==
name|other
operator|.
name|c
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Double
operator|.
name|hashCode
argument_list|(
name|ab
argument_list|)
operator|+
name|Double
operator|.
name|hashCode
argument_list|(
name|c
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|equals
argument_list|(
name|SPHERE
argument_list|)
condition|)
block|{
return|return
literal|"PlanetModel.SPHERE"
return|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|equals
argument_list|(
name|WGS84
argument_list|)
condition|)
block|{
return|return
literal|"PlanetModel.WGS84"
return|;
block|}
else|else
block|{
return|return
literal|"PlanetModel(ab="
operator|+
name|ab
operator|+
literal|" c="
operator|+
name|c
operator|+
literal|")"
return|;
block|}
block|}
block|}
end_class
end_unit
