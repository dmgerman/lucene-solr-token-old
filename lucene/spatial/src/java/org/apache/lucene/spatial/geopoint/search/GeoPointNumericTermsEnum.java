begin_unit
begin_package
DECL|package|org.apache.lucene.spatial.geopoint.search
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|geopoint
operator|.
name|search
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|TermsEnum
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|geopoint
operator|.
name|document
operator|.
name|GeoPointField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRefBuilder
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LegacyNumericUtils
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|geopoint
operator|.
name|document
operator|.
name|GeoPointField
operator|.
name|BITS
import|;
end_import
begin_comment
comment|/**  * Decomposes a given {@link GeoPointMultiTermQuery} into a set of terms that represent the query criteria using  * {@link org.apache.lucene.spatial.geopoint.document.GeoPointField.TermEncoding#NUMERIC} method defined by  * {@link org.apache.lucene.analysis.LegacyNumericTokenStream}. The terms are then enumerated by the  * {@link GeoPointTermQueryConstantScoreWrapper} and all docs whose GeoPoint fields match the prefix terms or  * pass the {@link GeoPointMultiTermQuery.CellComparator#postFilter} criteria are returned in the resulting DocIdSet.  *  *  @lucene.experimental  */
end_comment
begin_class
annotation|@
name|Deprecated
DECL|class|GeoPointNumericTermsEnum
specifier|final
class|class
name|GeoPointNumericTermsEnum
extends|extends
name|GeoPointTermsEnum
block|{
DECL|field|rangeBounds
specifier|private
specifier|final
name|List
argument_list|<
name|Range
argument_list|>
name|rangeBounds
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// detail level should be a factor of PRECISION_STEP limiting the depth of recursion (and number of ranges)
DECL|field|DETAIL_LEVEL
specifier|private
specifier|final
name|short
name|DETAIL_LEVEL
decl_stmt|;
DECL|method|GeoPointNumericTermsEnum
name|GeoPointNumericTermsEnum
parameter_list|(
specifier|final
name|TermsEnum
name|tenum
parameter_list|,
specifier|final
name|GeoPointMultiTermQuery
name|query
parameter_list|)
block|{
name|super
argument_list|(
name|tenum
argument_list|,
name|query
argument_list|)
expr_stmt|;
name|DETAIL_LEVEL
operator|=
call|(
name|short
call|)
argument_list|(
operator|(
operator|(
name|BITS
operator|<<
literal|1
operator|)
operator|-
name|this
operator|.
name|maxShift
operator|)
operator|/
literal|2
argument_list|)
expr_stmt|;
name|computeRange
argument_list|(
literal|0L
argument_list|,
call|(
name|short
call|)
argument_list|(
operator|(
operator|(
name|BITS
operator|)
operator|<<
literal|1
operator|)
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
assert|assert
name|rangeBounds
operator|.
name|isEmpty
argument_list|()
operator|==
literal|false
assert|;
name|Collections
operator|.
name|sort
argument_list|(
name|rangeBounds
argument_list|)
expr_stmt|;
block|}
comment|/**    * entry point for recursively computing ranges    */
DECL|method|computeRange
specifier|private
specifier|final
name|void
name|computeRange
parameter_list|(
name|long
name|term
parameter_list|,
specifier|final
name|short
name|shift
parameter_list|)
block|{
specifier|final
name|long
name|split
init|=
name|term
operator||
operator|(
literal|0x1L
operator|<<
name|shift
operator|)
decl_stmt|;
assert|assert
name|shift
operator|<
literal|64
assert|;
specifier|final
name|long
name|upperMax
decl_stmt|;
if|if
condition|(
name|shift
operator|<
literal|63
condition|)
block|{
name|upperMax
operator|=
name|term
operator||
operator|(
operator|(
literal|1L
operator|<<
operator|(
name|shift
operator|+
literal|1
operator|)
operator|)
operator|-
literal|1
operator|)
expr_stmt|;
block|}
else|else
block|{
name|upperMax
operator|=
literal|0xffffffffffffffffL
expr_stmt|;
block|}
specifier|final
name|long
name|lowerMax
init|=
name|split
operator|-
literal|1
decl_stmt|;
name|relateAndRecurse
argument_list|(
name|term
argument_list|,
name|lowerMax
argument_list|,
name|shift
argument_list|)
expr_stmt|;
name|relateAndRecurse
argument_list|(
name|split
argument_list|,
name|upperMax
argument_list|,
name|shift
argument_list|)
expr_stmt|;
block|}
comment|/**    * recurse to higher level precision cells to find ranges along the space-filling curve that fall within the    * query box    *    * @param start starting value on the space-filling curve for a cell at a given res    * @param end ending value on the space-filling curve for a cell at a given res    * @param res spatial res represented as a bit shift (MSB is lower res)    */
DECL|method|relateAndRecurse
specifier|private
name|void
name|relateAndRecurse
parameter_list|(
specifier|final
name|long
name|start
parameter_list|,
specifier|final
name|long
name|end
parameter_list|,
specifier|final
name|short
name|res
parameter_list|)
block|{
specifier|final
name|double
name|minLon
init|=
name|GeoPointField
operator|.
name|decodeLongitude
argument_list|(
name|start
argument_list|)
decl_stmt|;
specifier|final
name|double
name|minLat
init|=
name|GeoPointField
operator|.
name|decodeLatitude
argument_list|(
name|start
argument_list|)
decl_stmt|;
specifier|final
name|double
name|maxLon
init|=
name|GeoPointField
operator|.
name|decodeLongitude
argument_list|(
name|end
argument_list|)
decl_stmt|;
specifier|final
name|double
name|maxLat
init|=
name|GeoPointField
operator|.
name|decodeLatitude
argument_list|(
name|end
argument_list|)
decl_stmt|;
specifier|final
name|short
name|level
init|=
call|(
name|short
call|)
argument_list|(
operator|(
name|BITS
operator|<<
literal|1
operator|)
operator|-
name|res
operator|>>>
literal|1
argument_list|)
decl_stmt|;
comment|// if cell is within and a factor of the precision step, or it crosses the edge of the shape add the range
specifier|final
name|boolean
name|within
init|=
name|res
operator|%
name|GeoPointField
operator|.
name|PRECISION_STEP
operator|==
literal|0
operator|&&
name|relationImpl
operator|.
name|cellWithin
argument_list|(
name|minLat
argument_list|,
name|maxLat
argument_list|,
name|minLon
argument_list|,
name|maxLon
argument_list|)
decl_stmt|;
if|if
condition|(
name|within
operator|||
operator|(
name|level
operator|==
name|DETAIL_LEVEL
operator|&&
name|relationImpl
operator|.
name|cellIntersectsShape
argument_list|(
name|minLat
argument_list|,
name|maxLat
argument_list|,
name|minLon
argument_list|,
name|maxLon
argument_list|)
operator|)
condition|)
block|{
specifier|final
name|short
name|nextRes
init|=
call|(
name|short
call|)
argument_list|(
name|res
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|nextRes
operator|%
name|GeoPointField
operator|.
name|PRECISION_STEP
operator|==
literal|0
condition|)
block|{
name|rangeBounds
operator|.
name|add
argument_list|(
operator|new
name|Range
argument_list|(
name|start
argument_list|,
name|nextRes
argument_list|,
operator|!
name|within
argument_list|)
argument_list|)
expr_stmt|;
name|rangeBounds
operator|.
name|add
argument_list|(
operator|new
name|Range
argument_list|(
name|start
operator||
operator|(
literal|1L
operator|<<
name|nextRes
operator|)
argument_list|,
name|nextRes
argument_list|,
operator|!
name|within
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|rangeBounds
operator|.
name|add
argument_list|(
operator|new
name|Range
argument_list|(
name|start
argument_list|,
name|res
argument_list|,
operator|!
name|within
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|level
operator|<
name|DETAIL_LEVEL
operator|&&
name|relationImpl
operator|.
name|cellIntersectsMBR
argument_list|(
name|minLat
argument_list|,
name|maxLat
argument_list|,
name|minLon
argument_list|,
name|maxLon
argument_list|)
condition|)
block|{
name|computeRange
argument_list|(
name|start
argument_list|,
call|(
name|short
call|)
argument_list|(
name|res
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|peek
specifier|protected
specifier|final
name|BytesRef
name|peek
parameter_list|()
block|{
name|rangeBounds
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|fillBytesRef
argument_list|(
name|this
operator|.
name|nextSubRangeBRB
argument_list|)
expr_stmt|;
return|return
name|nextSubRangeBRB
operator|.
name|get
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|nextRange
specifier|protected
name|void
name|nextRange
parameter_list|()
block|{
name|currentRange
operator|=
name|rangeBounds
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|super
operator|.
name|nextRange
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|nextSeekTerm
specifier|protected
specifier|final
name|BytesRef
name|nextSeekTerm
parameter_list|(
name|BytesRef
name|term
parameter_list|)
block|{
while|while
condition|(
name|hasNext
argument_list|()
condition|)
block|{
if|if
condition|(
name|currentRange
operator|==
literal|null
condition|)
block|{
name|nextRange
argument_list|()
expr_stmt|;
block|}
comment|// if the new upper bound is before the term parameter, the sub-range is never a hit
if|if
condition|(
name|term
operator|!=
literal|null
operator|&&
name|term
operator|.
name|compareTo
argument_list|(
name|currentCell
argument_list|)
operator|>
literal|0
condition|)
block|{
name|nextRange
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|rangeBounds
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
continue|continue;
block|}
block|}
comment|// never seek backwards, so use current term if lower bound is smaller
return|return
operator|(
name|term
operator|!=
literal|null
operator|&&
name|term
operator|.
name|compareTo
argument_list|(
name|currentCell
argument_list|)
operator|>
literal|0
operator|)
condition|?
name|term
else|:
name|currentCell
return|;
block|}
comment|// no more sub-range enums available
assert|assert
name|rangeBounds
operator|.
name|isEmpty
argument_list|()
assert|;
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|hasNext
specifier|protected
specifier|final
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|rangeBounds
operator|.
name|isEmpty
argument_list|()
operator|==
literal|false
return|;
block|}
comment|/**    * Internal class to represent a range along the space filling curve    */
DECL|class|Range
specifier|protected
specifier|final
class|class
name|Range
extends|extends
name|BaseRange
block|{
DECL|method|Range
name|Range
parameter_list|(
specifier|final
name|long
name|lower
parameter_list|,
specifier|final
name|short
name|shift
parameter_list|,
name|boolean
name|boundary
parameter_list|)
block|{
name|super
argument_list|(
name|lower
argument_list|,
name|shift
argument_list|,
name|boundary
argument_list|)
expr_stmt|;
block|}
comment|/**      * Encode as a BytesRef using a reusable object. This allows us to lazily create the BytesRef (which is      * quite expensive), only when we need it.      */
annotation|@
name|Override
DECL|method|fillBytesRef
specifier|protected
name|void
name|fillBytesRef
parameter_list|(
name|BytesRefBuilder
name|result
parameter_list|)
block|{
assert|assert
name|result
operator|!=
literal|null
assert|;
name|LegacyNumericUtils
operator|.
name|longToPrefixCoded
argument_list|(
name|start
argument_list|,
name|shift
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class
end_unit
