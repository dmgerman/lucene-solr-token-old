begin_unit
begin_package
DECL|package|org.apache.lucene.spatial.spatial4j.geo3d
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|spatial4j
operator|.
name|geo3d
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_comment
comment|/** This GeoBBox represents an area rectangle limited only in latitude. */
end_comment
begin_class
DECL|class|GeoLatitudeZone
specifier|public
class|class
name|GeoLatitudeZone
implements|implements
name|GeoBBox
block|{
DECL|field|topLat
specifier|public
specifier|final
name|double
name|topLat
decl_stmt|;
DECL|field|bottomLat
specifier|public
specifier|final
name|double
name|bottomLat
decl_stmt|;
DECL|field|cosTopLat
specifier|public
specifier|final
name|double
name|cosTopLat
decl_stmt|;
DECL|field|cosBottomLat
specifier|public
specifier|final
name|double
name|cosBottomLat
decl_stmt|;
DECL|field|topPlane
specifier|public
specifier|final
name|SidedPlane
name|topPlane
decl_stmt|;
DECL|field|bottomPlane
specifier|public
specifier|final
name|SidedPlane
name|bottomPlane
decl_stmt|;
DECL|field|interiorPoint
specifier|public
specifier|final
name|GeoPoint
name|interiorPoint
decl_stmt|;
DECL|method|GeoLatitudeZone
specifier|public
name|GeoLatitudeZone
parameter_list|(
name|double
name|topLat
parameter_list|,
name|double
name|bottomLat
parameter_list|)
block|{
name|this
operator|.
name|topLat
operator|=
name|topLat
expr_stmt|;
name|this
operator|.
name|bottomLat
operator|=
name|bottomLat
expr_stmt|;
name|double
name|sinTopLat
init|=
name|Math
operator|.
name|sin
argument_list|(
name|topLat
argument_list|)
decl_stmt|;
name|double
name|sinBottomLat
init|=
name|Math
operator|.
name|sin
argument_list|(
name|bottomLat
argument_list|)
decl_stmt|;
name|cosTopLat
operator|=
name|Math
operator|.
name|cos
argument_list|(
name|topLat
argument_list|)
expr_stmt|;
name|cosBottomLat
operator|=
name|Math
operator|.
name|cos
argument_list|(
name|bottomLat
argument_list|)
expr_stmt|;
comment|// Construct sample points, so we get our sidedness right
name|Vector
name|topPoint
init|=
operator|new
name|Vector
argument_list|(
literal|0.0
argument_list|,
literal|0.0
argument_list|,
name|sinTopLat
argument_list|)
decl_stmt|;
name|Vector
name|bottomPoint
init|=
operator|new
name|Vector
argument_list|(
literal|0.0
argument_list|,
literal|0.0
argument_list|,
name|sinBottomLat
argument_list|)
decl_stmt|;
comment|// Compute an interior point.  Pick one whose lat is between top and bottom.
name|double
name|middleLat
init|=
operator|(
name|topLat
operator|+
name|bottomLat
operator|)
operator|*
literal|0.5
decl_stmt|;
name|double
name|sinMiddleLat
init|=
name|Math
operator|.
name|sin
argument_list|(
name|middleLat
argument_list|)
decl_stmt|;
name|interiorPoint
operator|=
operator|new
name|GeoPoint
argument_list|(
name|Math
operator|.
name|sqrt
argument_list|(
literal|1.0
operator|-
name|sinMiddleLat
operator|*
name|sinMiddleLat
argument_list|)
argument_list|,
literal|0.0
argument_list|,
name|sinMiddleLat
argument_list|)
expr_stmt|;
name|this
operator|.
name|topPlane
operator|=
operator|new
name|SidedPlane
argument_list|(
name|interiorPoint
argument_list|,
name|sinTopLat
argument_list|)
expr_stmt|;
name|this
operator|.
name|bottomPlane
operator|=
operator|new
name|SidedPlane
argument_list|(
name|interiorPoint
argument_list|,
name|sinBottomLat
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|expand
specifier|public
name|GeoBBox
name|expand
parameter_list|(
name|double
name|angle
parameter_list|)
block|{
name|double
name|newTopLat
init|=
name|topLat
operator|+
name|angle
decl_stmt|;
name|double
name|newBottomLat
init|=
name|bottomLat
operator|-
name|angle
decl_stmt|;
return|return
name|GeoBBoxFactory
operator|.
name|makeGeoBBox
argument_list|(
name|newTopLat
argument_list|,
name|newBottomLat
argument_list|,
operator|-
name|Math
operator|.
name|PI
argument_list|,
name|Math
operator|.
name|PI
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|isWithin
specifier|public
name|boolean
name|isWithin
parameter_list|(
name|Vector
name|point
parameter_list|)
block|{
return|return
name|topPlane
operator|.
name|isWithin
argument_list|(
name|point
argument_list|)
operator|&&
name|bottomPlane
operator|.
name|isWithin
argument_list|(
name|point
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|isWithin
specifier|public
name|boolean
name|isWithin
parameter_list|(
name|double
name|x
parameter_list|,
name|double
name|y
parameter_list|,
name|double
name|z
parameter_list|)
block|{
return|return
name|topPlane
operator|.
name|isWithin
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
operator|&&
name|bottomPlane
operator|.
name|isWithin
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getRadius
specifier|public
name|double
name|getRadius
parameter_list|()
block|{
comment|// This is a bit tricky.  I guess we should interpret this as meaning the angle of a circle that
comment|// would contain all the bounding box points, when starting in the "center".
if|if
condition|(
name|topLat
operator|>
literal|0.0
operator|&&
name|bottomLat
operator|<
literal|0.0
condition|)
return|return
name|Math
operator|.
name|PI
return|;
name|double
name|maxCosLat
init|=
name|cosTopLat
decl_stmt|;
if|if
condition|(
name|maxCosLat
operator|<
name|cosBottomLat
condition|)
name|maxCosLat
operator|=
name|cosBottomLat
expr_stmt|;
return|return
name|maxCosLat
operator|*
name|Math
operator|.
name|PI
return|;
block|}
annotation|@
name|Override
DECL|method|getInteriorPoint
specifier|public
name|GeoPoint
name|getInteriorPoint
parameter_list|()
block|{
return|return
name|interiorPoint
return|;
block|}
annotation|@
name|Override
DECL|method|intersects
specifier|public
name|boolean
name|intersects
parameter_list|(
name|Plane
name|p
parameter_list|,
name|Membership
modifier|...
name|bounds
parameter_list|)
block|{
return|return
name|p
operator|.
name|intersects
argument_list|(
name|topPlane
argument_list|,
name|bounds
argument_list|,
name|bottomPlane
argument_list|)
operator|||
name|p
operator|.
name|intersects
argument_list|(
name|bottomPlane
argument_list|,
name|bounds
argument_list|,
name|topPlane
argument_list|)
return|;
block|}
comment|/** Compute longitude/latitude bounds for the shape.     *@param bounds is the optional input bounds object.  If this is null,     * a bounds object will be created.  Otherwise, the input object will be modified.     *@return a Bounds object describing the shape's bounds.  If the bounds cannot     * be computed, then return a Bounds object with noLongitudeBound,     * noTopLatitudeBound, and noBottomLatitudeBound.     */
annotation|@
name|Override
DECL|method|getBounds
specifier|public
name|Bounds
name|getBounds
parameter_list|(
name|Bounds
name|bounds
parameter_list|)
block|{
if|if
condition|(
name|bounds
operator|==
literal|null
condition|)
name|bounds
operator|=
operator|new
name|Bounds
argument_list|()
expr_stmt|;
name|bounds
operator|.
name|noLongitudeBound
argument_list|()
operator|.
name|addLatitudeZone
argument_list|(
name|topLat
argument_list|)
operator|.
name|addLatitudeZone
argument_list|(
name|bottomLat
argument_list|)
expr_stmt|;
return|return
name|bounds
return|;
block|}
annotation|@
name|Override
DECL|method|getRelationship
specifier|public
name|int
name|getRelationship
parameter_list|(
name|GeoShape
name|path
parameter_list|)
block|{
comment|// Second, the shortcut of seeing whether endpoints are in/out is not going to
comment|// work with no area endpoints.  So we rely entirely on intersections.
if|if
condition|(
name|path
operator|.
name|intersects
argument_list|(
name|topPlane
argument_list|,
name|bottomPlane
argument_list|)
operator|||
name|path
operator|.
name|intersects
argument_list|(
name|bottomPlane
argument_list|,
name|topPlane
argument_list|)
condition|)
return|return
name|OVERLAPS
return|;
if|if
condition|(
name|path
operator|.
name|isWithin
argument_list|(
name|interiorPoint
argument_list|)
condition|)
return|return
name|CONTAINS
return|;
if|if
condition|(
name|isWithin
argument_list|(
name|path
operator|.
name|getInteriorPoint
argument_list|()
argument_list|)
condition|)
return|return
name|WITHIN
return|;
return|return
name|DISJOINT
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|o
operator|instanceof
name|GeoLatitudeZone
operator|)
condition|)
return|return
literal|false
return|;
name|GeoLatitudeZone
name|other
init|=
operator|(
name|GeoLatitudeZone
operator|)
name|o
decl_stmt|;
return|return
name|other
operator|.
name|topPlane
operator|.
name|equals
argument_list|(
name|topPlane
argument_list|)
operator|&&
name|other
operator|.
name|bottomPlane
operator|.
name|equals
argument_list|(
name|bottomPlane
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|result
init|=
name|topPlane
operator|.
name|hashCode
argument_list|()
decl_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
name|bottomPlane
operator|.
name|hashCode
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
end_class
end_unit
