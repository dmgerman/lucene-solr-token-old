begin_unit
begin_package
DECL|package|org.apache.lucene.spatial.spatial4j.geo3d
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|spatial4j
operator|.
name|geo3d
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_comment
comment|/** Degenerate bounding box wider than PI and limited on two sides (left lon, right lon). */
end_comment
begin_class
DECL|class|GeoWideDegenerateHorizontalLine
specifier|public
class|class
name|GeoWideDegenerateHorizontalLine
implements|implements
name|GeoBBox
block|{
DECL|field|latitude
specifier|public
specifier|final
name|double
name|latitude
decl_stmt|;
DECL|field|leftLon
specifier|public
specifier|final
name|double
name|leftLon
decl_stmt|;
DECL|field|rightLon
specifier|public
specifier|final
name|double
name|rightLon
decl_stmt|;
DECL|field|LHC
specifier|public
specifier|final
name|GeoPoint
name|LHC
decl_stmt|;
DECL|field|RHC
specifier|public
specifier|final
name|GeoPoint
name|RHC
decl_stmt|;
DECL|field|plane
specifier|public
specifier|final
name|Plane
name|plane
decl_stmt|;
DECL|field|leftPlane
specifier|public
specifier|final
name|SidedPlane
name|leftPlane
decl_stmt|;
DECL|field|rightPlane
specifier|public
specifier|final
name|SidedPlane
name|rightPlane
decl_stmt|;
DECL|field|centerPoint
specifier|public
specifier|final
name|GeoPoint
name|centerPoint
decl_stmt|;
DECL|field|eitherBound
specifier|public
specifier|final
name|EitherBound
name|eitherBound
decl_stmt|;
comment|/** Accepts only values in the following ranges: lat: {@code -PI/2 -> PI/2}, lon: {@code -PI -> PI}.      * Horizontal angle must be greater than or equal to PI.      */
DECL|method|GeoWideDegenerateHorizontalLine
specifier|public
name|GeoWideDegenerateHorizontalLine
parameter_list|(
name|double
name|latitude
parameter_list|,
name|double
name|leftLon
parameter_list|,
name|double
name|rightLon
parameter_list|)
block|{
comment|// Argument checking
if|if
condition|(
name|latitude
operator|>
name|Math
operator|.
name|PI
operator|*
literal|0.5
operator|||
name|latitude
operator|<
operator|-
name|Math
operator|.
name|PI
operator|*
literal|0.5
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Latitude out of range"
argument_list|)
throw|;
if|if
condition|(
name|leftLon
argument_list|<
operator|-
name|Math
operator|.
name|PI
operator|||
name|leftLon
argument_list|>
name|Math
operator|.
name|PI
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Left longitude out of range"
argument_list|)
throw|;
if|if
condition|(
name|rightLon
argument_list|<
operator|-
name|Math
operator|.
name|PI
operator|||
name|rightLon
argument_list|>
name|Math
operator|.
name|PI
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Right longitude out of range"
argument_list|)
throw|;
name|double
name|extent
init|=
name|rightLon
operator|-
name|leftLon
decl_stmt|;
if|if
condition|(
name|extent
operator|<
literal|0.0
condition|)
block|{
name|extent
operator|+=
literal|2.0
operator|*
name|Math
operator|.
name|PI
expr_stmt|;
block|}
if|if
condition|(
name|extent
operator|<
name|Math
operator|.
name|PI
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Width of rectangle too small"
argument_list|)
throw|;
name|this
operator|.
name|latitude
operator|=
name|latitude
expr_stmt|;
name|this
operator|.
name|leftLon
operator|=
name|leftLon
expr_stmt|;
name|this
operator|.
name|rightLon
operator|=
name|rightLon
expr_stmt|;
name|double
name|sinLatitude
init|=
name|Math
operator|.
name|sin
argument_list|(
name|latitude
argument_list|)
decl_stmt|;
name|double
name|cosLatitude
init|=
name|Math
operator|.
name|cos
argument_list|(
name|latitude
argument_list|)
decl_stmt|;
name|double
name|sinLeftLon
init|=
name|Math
operator|.
name|sin
argument_list|(
name|leftLon
argument_list|)
decl_stmt|;
name|double
name|cosLeftLon
init|=
name|Math
operator|.
name|cos
argument_list|(
name|leftLon
argument_list|)
decl_stmt|;
name|double
name|sinRightLon
init|=
name|Math
operator|.
name|sin
argument_list|(
name|rightLon
argument_list|)
decl_stmt|;
name|double
name|cosRightLon
init|=
name|Math
operator|.
name|cos
argument_list|(
name|rightLon
argument_list|)
decl_stmt|;
comment|// Now build the two points
name|this
operator|.
name|LHC
operator|=
operator|new
name|GeoPoint
argument_list|(
name|sinLatitude
argument_list|,
name|sinLeftLon
argument_list|,
name|cosLatitude
argument_list|,
name|cosLeftLon
argument_list|)
expr_stmt|;
name|this
operator|.
name|RHC
operator|=
operator|new
name|GeoPoint
argument_list|(
name|sinLatitude
argument_list|,
name|sinRightLon
argument_list|,
name|cosLatitude
argument_list|,
name|cosRightLon
argument_list|)
expr_stmt|;
name|this
operator|.
name|plane
operator|=
operator|new
name|Plane
argument_list|(
name|sinLatitude
argument_list|)
expr_stmt|;
comment|// Normalize
while|while
condition|(
name|leftLon
operator|>
name|rightLon
condition|)
block|{
name|rightLon
operator|+=
name|Math
operator|.
name|PI
operator|*
literal|2.0
expr_stmt|;
block|}
name|double
name|middleLon
init|=
operator|(
name|leftLon
operator|+
name|rightLon
operator|)
operator|*
literal|0.5
decl_stmt|;
name|double
name|sinMiddleLon
init|=
name|Math
operator|.
name|sin
argument_list|(
name|middleLon
argument_list|)
decl_stmt|;
name|double
name|cosMiddleLon
init|=
name|Math
operator|.
name|cos
argument_list|(
name|middleLon
argument_list|)
decl_stmt|;
name|centerPoint
operator|=
operator|new
name|GeoPoint
argument_list|(
name|sinLatitude
argument_list|,
name|sinMiddleLon
argument_list|,
name|cosLatitude
argument_list|,
name|cosMiddleLon
argument_list|)
expr_stmt|;
name|this
operator|.
name|leftPlane
operator|=
operator|new
name|SidedPlane
argument_list|(
name|centerPoint
argument_list|,
name|cosLeftLon
argument_list|,
name|sinLeftLon
argument_list|)
expr_stmt|;
name|this
operator|.
name|rightPlane
operator|=
operator|new
name|SidedPlane
argument_list|(
name|centerPoint
argument_list|,
name|cosRightLon
argument_list|,
name|sinRightLon
argument_list|)
expr_stmt|;
name|this
operator|.
name|eitherBound
operator|=
operator|new
name|EitherBound
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|expand
specifier|public
name|GeoBBox
name|expand
parameter_list|(
name|double
name|angle
parameter_list|)
block|{
name|double
name|newTopLat
init|=
name|latitude
operator|+
name|angle
decl_stmt|;
name|double
name|newBottomLat
init|=
name|latitude
operator|-
name|angle
decl_stmt|;
comment|// Figuring out when we escalate to a special case requires some prefiguring
name|double
name|currentLonSpan
init|=
name|rightLon
operator|-
name|leftLon
decl_stmt|;
if|if
condition|(
name|currentLonSpan
operator|<
literal|0.0
condition|)
name|currentLonSpan
operator|+=
name|Math
operator|.
name|PI
operator|*
literal|2.0
expr_stmt|;
name|double
name|newLeftLon
init|=
name|leftLon
operator|-
name|angle
decl_stmt|;
name|double
name|newRightLon
init|=
name|rightLon
operator|+
name|angle
decl_stmt|;
if|if
condition|(
name|currentLonSpan
operator|+
literal|2.0
operator|*
name|angle
operator|>=
name|Math
operator|.
name|PI
operator|*
literal|2.0
condition|)
block|{
name|newLeftLon
operator|=
operator|-
name|Math
operator|.
name|PI
expr_stmt|;
name|newRightLon
operator|=
name|Math
operator|.
name|PI
expr_stmt|;
block|}
return|return
name|GeoBBoxFactory
operator|.
name|makeGeoBBox
argument_list|(
name|newTopLat
argument_list|,
name|newBottomLat
argument_list|,
name|newLeftLon
argument_list|,
name|newRightLon
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|isWithin
specifier|public
name|boolean
name|isWithin
parameter_list|(
name|Vector
name|point
parameter_list|)
block|{
return|return
name|plane
operator|.
name|evaluate
argument_list|(
name|point
argument_list|)
operator|==
literal|0.0
operator|&&
operator|(
name|leftPlane
operator|.
name|isWithin
argument_list|(
name|point
argument_list|)
operator|||
name|rightPlane
operator|.
name|isWithin
argument_list|(
name|point
argument_list|)
operator|)
return|;
block|}
annotation|@
name|Override
DECL|method|isWithin
specifier|public
name|boolean
name|isWithin
parameter_list|(
name|double
name|x
parameter_list|,
name|double
name|y
parameter_list|,
name|double
name|z
parameter_list|)
block|{
return|return
name|plane
operator|.
name|evaluate
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
operator|==
literal|0.0
operator|&&
operator|(
name|leftPlane
operator|.
name|isWithin
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
operator|||
name|rightPlane
operator|.
name|isWithin
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
operator|)
return|;
block|}
annotation|@
name|Override
DECL|method|getRadius
specifier|public
name|double
name|getRadius
parameter_list|()
block|{
comment|// Here we compute the distance from the middle point to one of the corners.  However, we need to be careful
comment|// to use the longest of three distances: the distance to a corner on the top; the distnace to a corner on the bottom, and
comment|// the distance to the right or left edge from the center.
name|double
name|topAngle
init|=
name|centerPoint
operator|.
name|arcDistance
argument_list|(
name|RHC
argument_list|)
decl_stmt|;
name|double
name|bottomAngle
init|=
name|centerPoint
operator|.
name|arcDistance
argument_list|(
name|LHC
argument_list|)
decl_stmt|;
return|return
name|Math
operator|.
name|max
argument_list|(
name|topAngle
argument_list|,
name|bottomAngle
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getInteriorPoint
specifier|public
name|GeoPoint
name|getInteriorPoint
parameter_list|()
block|{
return|return
name|centerPoint
return|;
block|}
annotation|@
name|Override
DECL|method|intersects
specifier|public
name|boolean
name|intersects
parameter_list|(
name|Plane
name|p
parameter_list|,
name|Membership
modifier|...
name|bounds
parameter_list|)
block|{
comment|// Right and left bounds are essentially independent hemispheres; crossing into the wrong part of one
comment|// requires crossing into the right part of the other.  So intersection can ignore the left/right bounds.
return|return
name|p
operator|.
name|intersects
argument_list|(
name|plane
argument_list|,
name|bounds
argument_list|,
name|eitherBound
argument_list|)
return|;
block|}
comment|/** Compute longitude/latitude bounds for the shape.     *@param bounds is the optional input bounds object.  If this is null,     * a bounds object will be created.  Otherwise, the input object will be modified.     *@return a Bounds object describing the shape's bounds.  If the bounds cannot     * be computed, then return a Bounds object with noLongitudeBound,     * noTopLatitudeBound, and noBottomLatitudeBound.     */
annotation|@
name|Override
DECL|method|getBounds
specifier|public
name|Bounds
name|getBounds
parameter_list|(
name|Bounds
name|bounds
parameter_list|)
block|{
if|if
condition|(
name|bounds
operator|==
literal|null
condition|)
name|bounds
operator|=
operator|new
name|Bounds
argument_list|()
expr_stmt|;
name|bounds
operator|.
name|addLatitudeZone
argument_list|(
name|latitude
argument_list|)
operator|.
name|addLongitudeSlice
argument_list|(
name|leftLon
argument_list|,
name|rightLon
argument_list|)
expr_stmt|;
return|return
name|bounds
return|;
block|}
annotation|@
name|Override
DECL|method|getRelationship
specifier|public
name|int
name|getRelationship
parameter_list|(
name|GeoShape
name|path
parameter_list|)
block|{
if|if
condition|(
name|path
operator|.
name|intersects
argument_list|(
name|plane
argument_list|,
name|eitherBound
argument_list|)
condition|)
block|{
return|return
name|OVERLAPS
return|;
block|}
if|if
condition|(
name|path
operator|.
name|isWithin
argument_list|(
name|centerPoint
argument_list|)
condition|)
block|{
return|return
name|CONTAINS
return|;
block|}
return|return
name|DISJOINT
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|o
operator|instanceof
name|GeoWideDegenerateHorizontalLine
operator|)
condition|)
return|return
literal|false
return|;
name|GeoWideDegenerateHorizontalLine
name|other
init|=
operator|(
name|GeoWideDegenerateHorizontalLine
operator|)
name|o
decl_stmt|;
return|return
name|other
operator|.
name|LHC
operator|.
name|equals
argument_list|(
name|LHC
argument_list|)
operator|&&
name|other
operator|.
name|RHC
operator|.
name|equals
argument_list|(
name|RHC
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|result
init|=
name|LHC
operator|.
name|hashCode
argument_list|()
decl_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
name|RHC
operator|.
name|hashCode
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
DECL|class|EitherBound
specifier|protected
class|class
name|EitherBound
implements|implements
name|Membership
block|{
DECL|method|EitherBound
specifier|public
name|EitherBound
parameter_list|()
block|{         }
annotation|@
name|Override
DECL|method|isWithin
specifier|public
name|boolean
name|isWithin
parameter_list|(
name|Vector
name|v
parameter_list|)
block|{
return|return
name|leftPlane
operator|.
name|isWithin
argument_list|(
name|v
argument_list|)
operator|||
name|rightPlane
operator|.
name|isWithin
argument_list|(
name|v
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|isWithin
specifier|public
name|boolean
name|isWithin
parameter_list|(
name|double
name|x
parameter_list|,
name|double
name|y
parameter_list|,
name|double
name|z
parameter_list|)
block|{
return|return
name|leftPlane
operator|.
name|isWithin
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
operator|||
name|rightPlane
operator|.
name|isWithin
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
return|;
block|}
block|}
block|}
end_class
end_unit
