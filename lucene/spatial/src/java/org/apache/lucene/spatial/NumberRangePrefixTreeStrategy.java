begin_unit
begin_package
DECL|package|org.apache.lucene.spatial
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|com
operator|.
name|spatial4j
operator|.
name|core
operator|.
name|shape
operator|.
name|Point
import|;
end_import
begin_import
import|import
name|com
operator|.
name|spatial4j
operator|.
name|core
operator|.
name|shape
operator|.
name|Shape
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queries
operator|.
name|function
operator|.
name|ValueSource
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|prefix
operator|.
name|RecursivePrefixTreeStrategy
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|prefix
operator|.
name|tree
operator|.
name|NumberRangePrefixTree
import|;
end_import
begin_comment
comment|/** A PrefixTree based on Number/Date ranges. This isn't very "spatial" on the surface (to the user) but  * it's implemented using spatial so that's why it's here extending a SpatialStrategy. When using this class, you will  * use various utility methods on the prefix tree implementation to convert objects/strings to/from shapes.  *  * To use with dates, pass in {@link org.apache.lucene.spatial.prefix.tree.DateRangePrefixTree}.  *  * @lucene.experimental  */
end_comment
begin_class
DECL|class|NumberRangePrefixTreeStrategy
specifier|public
class|class
name|NumberRangePrefixTreeStrategy
extends|extends
name|RecursivePrefixTreeStrategy
block|{
DECL|method|NumberRangePrefixTreeStrategy
specifier|public
name|NumberRangePrefixTreeStrategy
parameter_list|(
name|NumberRangePrefixTree
name|prefixTree
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|super
argument_list|(
name|prefixTree
argument_list|,
name|fieldName
argument_list|)
expr_stmt|;
name|setPruneLeafyBranches
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|setPrefixGridScanLevel
argument_list|(
name|prefixTree
operator|.
name|getMaxLevels
argument_list|()
operator|-
literal|2
argument_list|)
expr_stmt|;
comment|//user might want to change, however
name|setPointsOnly
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|setDistErrPct
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getGrid
specifier|public
name|NumberRangePrefixTree
name|getGrid
parameter_list|()
block|{
return|return
operator|(
name|NumberRangePrefixTree
operator|)
name|super
operator|.
name|getGrid
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|createIndexableFields
specifier|public
name|Field
index|[]
name|createIndexableFields
parameter_list|(
name|Shape
name|shape
parameter_list|)
block|{
comment|//levels doesn't actually matter; NumberRange based Shapes have their own "level".
name|TokenStream
name|tokenStream
init|=
name|createTokenStream
argument_list|(
name|shape
argument_list|,
name|grid
operator|.
name|getMaxLevels
argument_list|()
argument_list|)
decl_stmt|;
name|Field
name|field
init|=
operator|new
name|Field
argument_list|(
name|getFieldName
argument_list|()
argument_list|,
name|tokenStream
argument_list|,
name|FIELD_TYPE
argument_list|)
decl_stmt|;
return|return
operator|new
name|Field
index|[]
block|{
name|field
block|}
return|;
block|}
comment|/** Unsupported. */
annotation|@
name|Override
DECL|method|makeDistanceValueSource
specifier|public
name|ValueSource
name|makeDistanceValueSource
parameter_list|(
name|Point
name|queryPoint
parameter_list|,
name|double
name|multiplier
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
end_class
end_unit
