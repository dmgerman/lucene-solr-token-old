begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.spatial.util
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|util
package|;
end_package
begin_import
import|import static
name|java
operator|.
name|lang
operator|.
name|StrictMath
operator|.
name|sqrt
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|SloppyMath
operator|.
name|asin
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|SloppyMath
operator|.
name|cos
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|SloppyMath
operator|.
name|TO_DEGREES
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|SloppyMath
operator|.
name|TO_RADIANS
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|util
operator|.
name|GeoUtils
operator|.
name|MAX_LAT_INCL
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|util
operator|.
name|GeoUtils
operator|.
name|MAX_LON_INCL
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|util
operator|.
name|GeoUtils
operator|.
name|MIN_LAT_INCL
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|util
operator|.
name|GeoUtils
operator|.
name|MIN_LON_INCL
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|util
operator|.
name|GeoUtils
operator|.
name|PIO2
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|util
operator|.
name|GeoUtils
operator|.
name|normalizeLat
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|util
operator|.
name|GeoUtils
operator|.
name|normalizeLon
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|util
operator|.
name|GeoUtils
operator|.
name|sloppySin
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|util
operator|.
name|GeoUtils
operator|.
name|sloppyTan
import|;
end_import
begin_comment
comment|/**  * Reusable geo-spatial projection utility methods.  *  * @lucene.experimental  */
end_comment
begin_class
DECL|class|GeoProjectionUtils
specifier|public
class|class
name|GeoProjectionUtils
block|{
comment|// WGS84 earth-ellipsoid parameters
comment|/** major (a) axis in meters */
DECL|field|SEMIMAJOR_AXIS
specifier|public
specifier|static
specifier|final
name|double
name|SEMIMAJOR_AXIS
init|=
literal|6_378_137
decl_stmt|;
comment|// [m]
comment|/** earth flattening factor (f) */
DECL|field|FLATTENING
specifier|public
specifier|static
specifier|final
name|double
name|FLATTENING
init|=
literal|1.0
operator|/
literal|298.257223563
decl_stmt|;
comment|/** minor (b) axis in meters */
DECL|field|SEMIMINOR_AXIS
specifier|public
specifier|static
specifier|final
name|double
name|SEMIMINOR_AXIS
init|=
name|SEMIMAJOR_AXIS
operator|*
operator|(
literal|1.0
operator|-
name|FLATTENING
operator|)
decl_stmt|;
comment|//6_356_752.31420; // [m]
comment|/** first eccentricity (e) */
DECL|field|ECCENTRICITY
specifier|public
specifier|static
specifier|final
name|double
name|ECCENTRICITY
init|=
name|sqrt
argument_list|(
operator|(
literal|2.0
operator|-
name|FLATTENING
operator|)
operator|*
name|FLATTENING
argument_list|)
decl_stmt|;
comment|/** major axis squared (a2) */
DECL|field|SEMIMAJOR_AXIS2
specifier|public
specifier|static
specifier|final
name|double
name|SEMIMAJOR_AXIS2
init|=
name|SEMIMAJOR_AXIS
operator|*
name|SEMIMAJOR_AXIS
decl_stmt|;
comment|/** minor axis squared (b2) */
DECL|field|SEMIMINOR_AXIS2
specifier|public
specifier|static
specifier|final
name|double
name|SEMIMINOR_AXIS2
init|=
name|SEMIMINOR_AXIS
operator|*
name|SEMIMINOR_AXIS
decl_stmt|;
DECL|field|E2
specifier|private
specifier|static
specifier|final
name|double
name|E2
init|=
operator|(
name|SEMIMAJOR_AXIS2
operator|-
name|SEMIMINOR_AXIS2
operator|)
operator|/
operator|(
name|SEMIMAJOR_AXIS2
operator|)
decl_stmt|;
DECL|field|EP2
specifier|private
specifier|static
specifier|final
name|double
name|EP2
init|=
operator|(
name|SEMIMAJOR_AXIS2
operator|-
name|SEMIMINOR_AXIS2
operator|)
operator|/
operator|(
name|SEMIMINOR_AXIS2
operator|)
decl_stmt|;
comment|/** min longitude value in radians */
DECL|field|MIN_LON_RADIANS
specifier|public
specifier|static
specifier|final
name|double
name|MIN_LON_RADIANS
init|=
name|TO_RADIANS
operator|*
name|MIN_LON_INCL
decl_stmt|;
comment|/** min latitude value in radians */
DECL|field|MIN_LAT_RADIANS
specifier|public
specifier|static
specifier|final
name|double
name|MIN_LAT_RADIANS
init|=
name|TO_RADIANS
operator|*
name|MIN_LAT_INCL
decl_stmt|;
comment|/** max longitude value in radians */
DECL|field|MAX_LON_RADIANS
specifier|public
specifier|static
specifier|final
name|double
name|MAX_LON_RADIANS
init|=
name|TO_RADIANS
operator|*
name|MAX_LON_INCL
decl_stmt|;
comment|/** max latitude value in radians */
DECL|field|MAX_LAT_RADIANS
specifier|public
specifier|static
specifier|final
name|double
name|MAX_LAT_RADIANS
init|=
name|TO_RADIANS
operator|*
name|MAX_LAT_INCL
decl_stmt|;
comment|// No instance:
DECL|method|GeoProjectionUtils
specifier|private
name|GeoProjectionUtils
parameter_list|()
block|{   }
comment|/**    * Converts from geodesic lat lon alt to geocentric earth-centered earth-fixed    * @param lat geodesic latitude    * @param lon geodesic longitude    * @param alt geodesic altitude    * @param ecf reusable earth-centered earth-fixed result    * @return either a new ecef array or the reusable ecf parameter    */
DECL|method|llaToECF
specifier|public
specifier|static
specifier|final
name|double
index|[]
name|llaToECF
parameter_list|(
name|double
name|lat
parameter_list|,
name|double
name|lon
parameter_list|,
name|double
name|alt
parameter_list|,
name|double
index|[]
name|ecf
parameter_list|)
block|{
name|lon
operator|=
name|TO_RADIANS
operator|*
name|lon
expr_stmt|;
name|lat
operator|=
name|TO_RADIANS
operator|*
name|lat
expr_stmt|;
specifier|final
name|double
name|sl
init|=
name|sloppySin
argument_list|(
name|lat
argument_list|)
decl_stmt|;
specifier|final
name|double
name|s2
init|=
name|sl
operator|*
name|sl
decl_stmt|;
specifier|final
name|double
name|cl
init|=
name|cos
argument_list|(
name|lat
argument_list|)
decl_stmt|;
if|if
condition|(
name|ecf
operator|==
literal|null
condition|)
block|{
name|ecf
operator|=
operator|new
name|double
index|[
literal|3
index|]
expr_stmt|;
block|}
if|if
condition|(
name|lat
argument_list|<
operator|-
name|PIO2
operator|&&
name|lat
argument_list|>
operator|-
literal|1.001D
operator|*
name|PIO2
condition|)
block|{
name|lat
operator|=
operator|-
name|PIO2
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|lat
operator|>
name|PIO2
operator|&&
name|lat
operator|<
literal|1.001D
operator|*
name|PIO2
condition|)
block|{
name|lat
operator|=
name|PIO2
expr_stmt|;
block|}
assert|assert
operator|(
name|lat
operator|>=
operator|-
name|PIO2
operator|)
operator|||
operator|(
name|lat
operator|<=
name|PIO2
operator|)
assert|;
if|if
condition|(
name|lon
operator|>
name|StrictMath
operator|.
name|PI
condition|)
block|{
name|lon
operator|-=
operator|(
literal|2
operator|*
name|StrictMath
operator|.
name|PI
operator|)
expr_stmt|;
block|}
specifier|final
name|double
name|rn
init|=
name|SEMIMAJOR_AXIS
operator|/
name|StrictMath
operator|.
name|sqrt
argument_list|(
literal|1.0D
operator|-
name|E2
operator|*
name|s2
argument_list|)
decl_stmt|;
name|ecf
index|[
literal|0
index|]
operator|=
operator|(
name|rn
operator|+
name|alt
operator|)
operator|*
name|cl
operator|*
name|cos
argument_list|(
name|lon
argument_list|)
expr_stmt|;
name|ecf
index|[
literal|1
index|]
operator|=
operator|(
name|rn
operator|+
name|alt
operator|)
operator|*
name|cl
operator|*
name|sloppySin
argument_list|(
name|lon
argument_list|)
expr_stmt|;
name|ecf
index|[
literal|2
index|]
operator|=
operator|(
operator|(
name|rn
operator|*
operator|(
literal|1.0
operator|-
name|E2
operator|)
operator|)
operator|+
name|alt
operator|)
operator|*
name|sl
expr_stmt|;
return|return
name|ecf
return|;
block|}
comment|/**    * Finds a point along a bearing from a given lat,lon geolocation using great circle arc    *    * @param lat origin latitude in degrees    * @param lon origin longitude in degrees    * @param bearing azimuthal bearing in degrees    * @param dist distance in meters    * @param pt resulting point    * @return the point along a bearing at a given distance in meters    */
DECL|method|pointFromLonLatBearingGreatCircle
specifier|public
specifier|static
specifier|final
name|double
index|[]
name|pointFromLonLatBearingGreatCircle
parameter_list|(
name|double
name|lat
parameter_list|,
name|double
name|lon
parameter_list|,
name|double
name|bearing
parameter_list|,
name|double
name|dist
parameter_list|,
name|double
index|[]
name|pt
parameter_list|)
block|{
if|if
condition|(
name|pt
operator|==
literal|null
condition|)
block|{
name|pt
operator|=
operator|new
name|double
index|[
literal|2
index|]
expr_stmt|;
block|}
name|lat
operator|*=
name|TO_RADIANS
expr_stmt|;
name|lon
operator|*=
name|TO_RADIANS
expr_stmt|;
name|bearing
operator|*=
name|TO_RADIANS
expr_stmt|;
specifier|final
name|double
name|cLat
init|=
name|cos
argument_list|(
name|lat
argument_list|)
decl_stmt|;
specifier|final
name|double
name|sLat
init|=
name|sloppySin
argument_list|(
name|lat
argument_list|)
decl_stmt|;
specifier|final
name|double
name|sinDoR
init|=
name|sloppySin
argument_list|(
name|dist
operator|/
name|GeoProjectionUtils
operator|.
name|SEMIMAJOR_AXIS
argument_list|)
decl_stmt|;
specifier|final
name|double
name|cosDoR
init|=
name|cos
argument_list|(
name|dist
operator|/
name|GeoProjectionUtils
operator|.
name|SEMIMAJOR_AXIS
argument_list|)
decl_stmt|;
name|pt
index|[
literal|1
index|]
operator|=
name|asin
argument_list|(
name|sLat
operator|*
name|cosDoR
operator|+
name|cLat
operator|*
name|sinDoR
operator|*
name|cos
argument_list|(
name|bearing
argument_list|)
argument_list|)
expr_stmt|;
name|pt
index|[
literal|0
index|]
operator|=
name|TO_DEGREES
operator|*
operator|(
name|lon
operator|+
name|Math
operator|.
name|atan2
argument_list|(
name|sloppySin
argument_list|(
name|bearing
argument_list|)
operator|*
name|sinDoR
operator|*
name|cLat
argument_list|,
name|cosDoR
operator|-
name|sLat
operator|*
name|sloppySin
argument_list|(
name|pt
index|[
literal|1
index|]
argument_list|)
argument_list|)
operator|)
expr_stmt|;
name|pt
index|[
literal|1
index|]
operator|*=
name|TO_DEGREES
expr_stmt|;
return|return
name|pt
return|;
block|}
comment|/**    * Finds the bearing (in degrees) between 2 geo points (lat, lon) using great circle arc    * @param lat1 first point latitude in degrees    * @param lon1 first point longitude in degrees    * @param lat2 second point latitude in degrees    * @param lon2 second point longitude in degrees    * @return the bearing (in degrees) between the two provided points    */
DECL|method|bearingGreatCircle
specifier|public
specifier|static
name|double
name|bearingGreatCircle
parameter_list|(
name|double
name|lat1
parameter_list|,
name|double
name|lon1
parameter_list|,
name|double
name|lat2
parameter_list|,
name|double
name|lon2
parameter_list|)
block|{
name|double
name|dLon
init|=
operator|(
name|lon2
operator|-
name|lon1
operator|)
operator|*
name|TO_RADIANS
decl_stmt|;
name|lat2
operator|*=
name|TO_RADIANS
expr_stmt|;
name|lat1
operator|*=
name|TO_RADIANS
expr_stmt|;
name|double
name|y
init|=
name|sloppySin
argument_list|(
name|dLon
argument_list|)
operator|*
name|cos
argument_list|(
name|lat2
argument_list|)
decl_stmt|;
name|double
name|x
init|=
name|cos
argument_list|(
name|lat1
argument_list|)
operator|*
name|sloppySin
argument_list|(
name|lat2
argument_list|)
operator|-
name|sloppySin
argument_list|(
name|lat1
argument_list|)
operator|*
name|cos
argument_list|(
name|lat2
argument_list|)
operator|*
name|cos
argument_list|(
name|dLon
argument_list|)
decl_stmt|;
return|return
name|Math
operator|.
name|atan2
argument_list|(
name|y
argument_list|,
name|x
argument_list|)
operator|*
name|TO_DEGREES
return|;
block|}
block|}
end_class
end_unit
