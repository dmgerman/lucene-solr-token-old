begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.spatial.geopoint.search
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|geopoint
operator|.
name|search
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|FilteredTermsEnum
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|TermsEnum
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRefBuilder
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|geopoint
operator|.
name|document
operator|.
name|GeoPointField
operator|.
name|TermEncoding
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|geopoint
operator|.
name|search
operator|.
name|GeoPointMultiTermQuery
operator|.
name|CellComparator
import|;
end_import
begin_comment
comment|/**  * Base class for {@link GeoPointNumericTermsEnum} and {@link GeoPointPrefixTermsEnum} which compares  * candidate GeoPointField encoded terms against terms matching the defined query criteria.  *  *  @lucene.experimental  */
end_comment
begin_class
DECL|class|GeoPointTermsEnum
specifier|abstract
class|class
name|GeoPointTermsEnum
extends|extends
name|FilteredTermsEnum
block|{
DECL|field|maxShift
specifier|protected
specifier|final
name|short
name|maxShift
decl_stmt|;
DECL|field|currentRange
specifier|protected
name|BaseRange
name|currentRange
decl_stmt|;
DECL|field|currentCell
specifier|protected
name|BytesRef
name|currentCell
decl_stmt|;
DECL|field|currentCellBRB
specifier|protected
specifier|final
name|BytesRefBuilder
name|currentCellBRB
init|=
operator|new
name|BytesRefBuilder
argument_list|()
decl_stmt|;
DECL|field|nextSubRangeBRB
specifier|protected
specifier|final
name|BytesRefBuilder
name|nextSubRangeBRB
init|=
operator|new
name|BytesRefBuilder
argument_list|()
decl_stmt|;
DECL|field|relationImpl
specifier|protected
specifier|final
name|CellComparator
name|relationImpl
decl_stmt|;
DECL|method|GeoPointTermsEnum
name|GeoPointTermsEnum
parameter_list|(
specifier|final
name|TermsEnum
name|tenum
parameter_list|,
specifier|final
name|GeoPointMultiTermQuery
name|query
parameter_list|)
block|{
name|super
argument_list|(
name|tenum
argument_list|)
expr_stmt|;
name|this
operator|.
name|maxShift
operator|=
name|query
operator|.
name|maxShift
expr_stmt|;
name|this
operator|.
name|relationImpl
operator|=
name|query
operator|.
name|cellComparator
expr_stmt|;
block|}
DECL|method|newInstance
specifier|static
name|GeoPointTermsEnum
name|newInstance
parameter_list|(
specifier|final
name|TermsEnum
name|terms
parameter_list|,
specifier|final
name|GeoPointMultiTermQuery
name|query
parameter_list|)
block|{
if|if
condition|(
name|query
operator|.
name|termEncoding
operator|==
name|TermEncoding
operator|.
name|PREFIX
condition|)
block|{
return|return
operator|new
name|GeoPointPrefixTermsEnum
argument_list|(
name|terms
argument_list|,
name|query
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|query
operator|.
name|termEncoding
operator|==
name|TermEncoding
operator|.
name|NUMERIC
condition|)
block|{
return|return
operator|new
name|GeoPointNumericTermsEnum
argument_list|(
name|terms
argument_list|,
name|query
argument_list|)
return|;
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid GeoPoint TermEncoding "
operator|+
name|query
operator|.
name|termEncoding
argument_list|)
throw|;
block|}
DECL|method|boundaryTerm
specifier|public
name|boolean
name|boundaryTerm
parameter_list|()
block|{
if|if
condition|(
name|currentCell
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"GeoPointTermsEnum empty or not initialized"
argument_list|)
throw|;
block|}
return|return
name|currentRange
operator|.
name|boundary
return|;
block|}
DECL|method|peek
specifier|protected
name|BytesRef
name|peek
parameter_list|()
block|{
return|return
name|nextSubRangeBRB
operator|.
name|get
argument_list|()
return|;
block|}
DECL|method|hasNext
specifier|abstract
specifier|protected
name|boolean
name|hasNext
parameter_list|()
function_decl|;
DECL|method|nextRange
specifier|protected
name|void
name|nextRange
parameter_list|()
block|{
name|currentRange
operator|.
name|fillBytesRef
argument_list|(
name|currentCellBRB
argument_list|)
expr_stmt|;
name|currentCell
operator|=
name|currentCellBRB
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
comment|/**    * The two-phase query approach. {@link #nextSeekTerm} is called to obtain the next term that matches a numeric    * range of the bounding box. Those terms that pass the initial range filter are then compared against the    * decoded min/max latitude and longitude values of the bounding box only if the range is not a "boundary" range    * (e.g., a range that straddles the boundary of the bbox).    * @param term term for candidate document    * @return match status    */
annotation|@
name|Override
DECL|method|accept
specifier|protected
name|AcceptStatus
name|accept
parameter_list|(
name|BytesRef
name|term
parameter_list|)
block|{
comment|// validate value is in range
while|while
condition|(
name|currentCell
operator|==
literal|null
operator|||
name|term
operator|.
name|compareTo
argument_list|(
name|currentCell
argument_list|)
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|hasNext
argument_list|()
operator|==
literal|false
condition|)
block|{
return|return
name|AcceptStatus
operator|.
name|END
return|;
block|}
comment|// peek next sub-range, only seek if the current term is smaller than next lower bound
if|if
condition|(
name|term
operator|.
name|compareTo
argument_list|(
name|peek
argument_list|()
argument_list|)
operator|<
literal|0
condition|)
block|{
return|return
name|AcceptStatus
operator|.
name|NO_AND_SEEK
return|;
block|}
comment|// step forward to next range without seeking, as next range is less or equal current term
name|nextRange
argument_list|()
expr_stmt|;
block|}
return|return
name|AcceptStatus
operator|.
name|YES
return|;
block|}
DECL|method|postFilter
specifier|protected
name|boolean
name|postFilter
parameter_list|(
specifier|final
name|double
name|lon
parameter_list|,
specifier|final
name|double
name|lat
parameter_list|)
block|{
return|return
name|relationImpl
operator|.
name|postFilter
argument_list|(
name|lon
argument_list|,
name|lat
argument_list|)
return|;
block|}
comment|/**    * Internal class to represent a range along the space filling curve    */
DECL|class|BaseRange
specifier|abstract
class|class
name|BaseRange
implements|implements
name|Comparable
argument_list|<
name|BaseRange
argument_list|>
block|{
DECL|field|shift
specifier|protected
name|short
name|shift
decl_stmt|;
DECL|field|start
specifier|protected
name|long
name|start
decl_stmt|;
DECL|field|boundary
specifier|protected
name|boolean
name|boundary
decl_stmt|;
DECL|method|BaseRange
name|BaseRange
parameter_list|(
specifier|final
name|long
name|lower
parameter_list|,
specifier|final
name|short
name|shift
parameter_list|,
name|boolean
name|boundary
parameter_list|)
block|{
name|this
operator|.
name|boundary
operator|=
name|boundary
expr_stmt|;
name|this
operator|.
name|start
operator|=
name|lower
expr_stmt|;
name|this
operator|.
name|shift
operator|=
name|shift
expr_stmt|;
block|}
comment|/**      * Encode as a BytesRef using a reusable object. This allows us to lazily create the BytesRef (which is      * quite expensive), only when we need it.      */
DECL|method|fillBytesRef
specifier|abstract
specifier|protected
name|void
name|fillBytesRef
parameter_list|(
name|BytesRefBuilder
name|result
parameter_list|)
function_decl|;
annotation|@
name|Override
DECL|method|compareTo
specifier|public
name|int
name|compareTo
parameter_list|(
name|BaseRange
name|other
parameter_list|)
block|{
specifier|final
name|int
name|result
init|=
name|Short
operator|.
name|compare
argument_list|(
name|this
operator|.
name|shift
argument_list|,
name|other
operator|.
name|shift
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|0
condition|)
block|{
return|return
name|Long
operator|.
name|compare
argument_list|(
name|this
operator|.
name|start
argument_list|,
name|other
operator|.
name|start
argument_list|)
return|;
block|}
return|return
name|result
return|;
block|}
DECL|method|set
specifier|protected
name|void
name|set
parameter_list|(
name|BaseRange
name|other
parameter_list|)
block|{
name|this
operator|.
name|start
operator|=
name|other
operator|.
name|start
expr_stmt|;
name|this
operator|.
name|shift
operator|=
name|other
operator|.
name|shift
expr_stmt|;
name|this
operator|.
name|boundary
operator|=
name|other
operator|.
name|boundary
expr_stmt|;
block|}
block|}
block|}
end_class
end_unit
