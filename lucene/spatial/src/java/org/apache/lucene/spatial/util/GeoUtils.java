begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.spatial.util
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|util
package|;
end_package
begin_import
import|import static
name|java
operator|.
name|lang
operator|.
name|Math
operator|.
name|max
import|;
end_import
begin_import
import|import static
name|java
operator|.
name|lang
operator|.
name|Math
operator|.
name|min
import|;
end_import
begin_import
import|import static
name|java
operator|.
name|lang
operator|.
name|Math
operator|.
name|PI
import|;
end_import
begin_import
import|import static
name|java
operator|.
name|lang
operator|.
name|Math
operator|.
name|abs
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|SloppyMath
operator|.
name|asin
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|SloppyMath
operator|.
name|cos
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|SloppyMath
operator|.
name|TO_DEGREES
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|SloppyMath
operator|.
name|TO_RADIANS
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|util
operator|.
name|GeoEncodingUtils
operator|.
name|TOLERANCE
import|;
end_import
begin_comment
comment|/**  * Basic reusable geo-spatial utility methods  *  * @lucene.experimental  */
end_comment
begin_class
DECL|class|GeoUtils
specifier|public
specifier|final
class|class
name|GeoUtils
block|{
comment|/** Minimum longitude value. */
DECL|field|MIN_LON_INCL
specifier|public
specifier|static
specifier|final
name|double
name|MIN_LON_INCL
init|=
operator|-
literal|180.0D
decl_stmt|;
comment|/** Maximum longitude value. */
DECL|field|MAX_LON_INCL
specifier|public
specifier|static
specifier|final
name|double
name|MAX_LON_INCL
init|=
literal|180.0D
decl_stmt|;
comment|/** Minimum latitude value. */
DECL|field|MIN_LAT_INCL
specifier|public
specifier|static
specifier|final
name|double
name|MIN_LAT_INCL
init|=
operator|-
literal|90.0D
decl_stmt|;
comment|/** Maximum latitude value. */
DECL|field|MAX_LAT_INCL
specifier|public
specifier|static
specifier|final
name|double
name|MAX_LAT_INCL
init|=
literal|90.0D
decl_stmt|;
comment|/** min longitude value in radians */
DECL|field|MIN_LON_RADIANS
specifier|public
specifier|static
specifier|final
name|double
name|MIN_LON_RADIANS
init|=
name|TO_RADIANS
operator|*
name|MIN_LON_INCL
decl_stmt|;
comment|/** min latitude value in radians */
DECL|field|MIN_LAT_RADIANS
specifier|public
specifier|static
specifier|final
name|double
name|MIN_LAT_RADIANS
init|=
name|TO_RADIANS
operator|*
name|MIN_LAT_INCL
decl_stmt|;
comment|/** max longitude value in radians */
DECL|field|MAX_LON_RADIANS
specifier|public
specifier|static
specifier|final
name|double
name|MAX_LON_RADIANS
init|=
name|TO_RADIANS
operator|*
name|MAX_LON_INCL
decl_stmt|;
comment|/** max latitude value in radians */
DECL|field|MAX_LAT_RADIANS
specifier|public
specifier|static
specifier|final
name|double
name|MAX_LAT_RADIANS
init|=
name|TO_RADIANS
operator|*
name|MAX_LAT_INCL
decl_stmt|;
comment|// WGS84 earth-ellipsoid parameters
comment|/** major (a) axis in meters */
DECL|field|SEMIMAJOR_AXIS
specifier|public
specifier|static
specifier|final
name|double
name|SEMIMAJOR_AXIS
init|=
literal|6_378_137
decl_stmt|;
comment|// [m]
comment|// No instance:
DECL|method|GeoUtils
specifier|private
name|GeoUtils
parameter_list|()
block|{   }
comment|/** validates latitude value is within standard +/-90 coordinate bounds */
DECL|method|isValidLat
specifier|public
specifier|static
name|boolean
name|isValidLat
parameter_list|(
name|double
name|lat
parameter_list|)
block|{
return|return
name|Double
operator|.
name|isNaN
argument_list|(
name|lat
argument_list|)
operator|==
literal|false
operator|&&
name|lat
operator|>=
name|MIN_LAT_INCL
operator|&&
name|lat
operator|<=
name|MAX_LAT_INCL
return|;
block|}
comment|/** validates longitude value is within standard +/-180 coordinate bounds */
DECL|method|isValidLon
specifier|public
specifier|static
name|boolean
name|isValidLon
parameter_list|(
name|double
name|lon
parameter_list|)
block|{
return|return
name|Double
operator|.
name|isNaN
argument_list|(
name|lon
argument_list|)
operator|==
literal|false
operator|&&
name|lon
operator|>=
name|MIN_LON_INCL
operator|&&
name|lon
operator|<=
name|MAX_LON_INCL
return|;
block|}
comment|/** Puts longitude in range of -180 to +180. */
DECL|method|normalizeLon
specifier|public
specifier|static
name|double
name|normalizeLon
parameter_list|(
name|double
name|lon_deg
parameter_list|)
block|{
if|if
condition|(
name|lon_deg
operator|>=
operator|-
literal|180
operator|&&
name|lon_deg
operator|<=
literal|180
condition|)
block|{
return|return
name|lon_deg
return|;
comment|//common case, and avoids slight double precision shifting
block|}
name|double
name|off
init|=
operator|(
name|lon_deg
operator|+
literal|180
operator|)
operator|%
literal|360
decl_stmt|;
if|if
condition|(
name|off
operator|<
literal|0
condition|)
block|{
return|return
literal|180
operator|+
name|off
return|;
block|}
elseif|else
if|if
condition|(
name|off
operator|==
literal|0
operator|&&
name|lon_deg
operator|>
literal|0
condition|)
block|{
return|return
literal|180
return|;
block|}
else|else
block|{
return|return
operator|-
literal|180
operator|+
name|off
return|;
block|}
block|}
comment|/** Puts latitude in range of -90 to 90. */
DECL|method|normalizeLat
specifier|public
specifier|static
name|double
name|normalizeLat
parameter_list|(
name|double
name|lat_deg
parameter_list|)
block|{
if|if
condition|(
name|lat_deg
operator|>=
operator|-
literal|90
operator|&&
name|lat_deg
operator|<=
literal|90
condition|)
block|{
return|return
name|lat_deg
return|;
comment|//common case, and avoids slight double precision shifting
block|}
name|double
name|off
init|=
name|abs
argument_list|(
operator|(
name|lat_deg
operator|+
literal|90
operator|)
operator|%
literal|360
argument_list|)
decl_stmt|;
return|return
operator|(
name|off
operator|<=
literal|180
condition|?
name|off
else|:
literal|360
operator|-
name|off
operator|)
operator|-
literal|90
return|;
block|}
comment|/** Compute Bounding Box for a circle using WGS-84 parameters */
DECL|method|circleToBBox
specifier|public
specifier|static
name|GeoRect
name|circleToBBox
parameter_list|(
specifier|final
name|double
name|centerLat
parameter_list|,
specifier|final
name|double
name|centerLon
parameter_list|,
specifier|final
name|double
name|radiusMeters
parameter_list|)
block|{
specifier|final
name|double
name|radLat
init|=
name|TO_RADIANS
operator|*
name|centerLat
decl_stmt|;
specifier|final
name|double
name|radLon
init|=
name|TO_RADIANS
operator|*
name|centerLon
decl_stmt|;
name|double
name|radDistance
init|=
name|radiusMeters
operator|/
name|SEMIMAJOR_AXIS
decl_stmt|;
name|double
name|minLat
init|=
name|radLat
operator|-
name|radDistance
decl_stmt|;
name|double
name|maxLat
init|=
name|radLat
operator|+
name|radDistance
decl_stmt|;
name|double
name|minLon
decl_stmt|;
name|double
name|maxLon
decl_stmt|;
if|if
condition|(
name|minLat
operator|>
name|MIN_LAT_RADIANS
operator|&&
name|maxLat
operator|<
name|MAX_LAT_RADIANS
condition|)
block|{
name|double
name|deltaLon
init|=
name|asin
argument_list|(
name|sloppySin
argument_list|(
name|radDistance
argument_list|)
operator|/
name|cos
argument_list|(
name|radLat
argument_list|)
argument_list|)
decl_stmt|;
name|minLon
operator|=
name|radLon
operator|-
name|deltaLon
expr_stmt|;
if|if
condition|(
name|minLon
operator|<
name|MIN_LON_RADIANS
condition|)
block|{
name|minLon
operator|+=
literal|2d
operator|*
name|PI
expr_stmt|;
block|}
name|maxLon
operator|=
name|radLon
operator|+
name|deltaLon
expr_stmt|;
if|if
condition|(
name|maxLon
operator|>
name|MAX_LON_RADIANS
condition|)
block|{
name|maxLon
operator|-=
literal|2d
operator|*
name|PI
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// a pole is within the distance
name|minLat
operator|=
name|max
argument_list|(
name|minLat
argument_list|,
name|MIN_LAT_RADIANS
argument_list|)
expr_stmt|;
name|maxLat
operator|=
name|min
argument_list|(
name|maxLat
argument_list|,
name|MAX_LAT_RADIANS
argument_list|)
expr_stmt|;
name|minLon
operator|=
name|MIN_LON_RADIANS
expr_stmt|;
name|maxLon
operator|=
name|MAX_LON_RADIANS
expr_stmt|;
block|}
return|return
operator|new
name|GeoRect
argument_list|(
name|TO_DEGREES
operator|*
name|minLat
argument_list|,
name|TO_DEGREES
operator|*
name|maxLat
argument_list|,
name|TO_DEGREES
operator|*
name|minLon
argument_list|,
name|TO_DEGREES
operator|*
name|maxLon
argument_list|)
return|;
block|}
comment|/** Compute Bounding Box for a polygon using WGS-84 parameters */
DECL|method|polyToBBox
specifier|public
specifier|static
name|GeoRect
name|polyToBBox
parameter_list|(
name|double
index|[]
name|polyLats
parameter_list|,
name|double
index|[]
name|polyLons
parameter_list|)
block|{
if|if
condition|(
name|polyLons
operator|.
name|length
operator|!=
name|polyLats
operator|.
name|length
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"polyLons and polyLats must be equal length"
argument_list|)
throw|;
block|}
name|double
name|minLon
init|=
name|Double
operator|.
name|POSITIVE_INFINITY
decl_stmt|;
name|double
name|maxLon
init|=
name|Double
operator|.
name|NEGATIVE_INFINITY
decl_stmt|;
name|double
name|minLat
init|=
name|Double
operator|.
name|POSITIVE_INFINITY
decl_stmt|;
name|double
name|maxLat
init|=
name|Double
operator|.
name|NEGATIVE_INFINITY
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|polyLats
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|GeoUtils
operator|.
name|isValidLon
argument_list|(
name|polyLons
index|[
name|i
index|]
argument_list|)
operator|==
literal|false
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"invalid polyLons["
operator|+
name|i
operator|+
literal|"]="
operator|+
name|polyLons
index|[
name|i
index|]
argument_list|)
throw|;
block|}
if|if
condition|(
name|GeoUtils
operator|.
name|isValidLat
argument_list|(
name|polyLats
index|[
name|i
index|]
argument_list|)
operator|==
literal|false
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"invalid polyLats["
operator|+
name|i
operator|+
literal|"]="
operator|+
name|polyLats
index|[
name|i
index|]
argument_list|)
throw|;
block|}
name|minLon
operator|=
name|min
argument_list|(
name|polyLons
index|[
name|i
index|]
argument_list|,
name|minLon
argument_list|)
expr_stmt|;
name|maxLon
operator|=
name|max
argument_list|(
name|polyLons
index|[
name|i
index|]
argument_list|,
name|maxLon
argument_list|)
expr_stmt|;
name|minLat
operator|=
name|min
argument_list|(
name|polyLats
index|[
name|i
index|]
argument_list|,
name|minLat
argument_list|)
expr_stmt|;
name|maxLat
operator|=
name|max
argument_list|(
name|polyLats
index|[
name|i
index|]
argument_list|,
name|maxLat
argument_list|)
expr_stmt|;
block|}
comment|// expand bounding box by TOLERANCE factor to handle round-off error
return|return
operator|new
name|GeoRect
argument_list|(
name|max
argument_list|(
name|minLat
operator|-
name|TOLERANCE
argument_list|,
name|MIN_LAT_INCL
argument_list|)
argument_list|,
name|min
argument_list|(
name|maxLat
operator|+
name|TOLERANCE
argument_list|,
name|MAX_LAT_INCL
argument_list|)
argument_list|,
name|max
argument_list|(
name|minLon
operator|-
name|TOLERANCE
argument_list|,
name|MIN_LON_INCL
argument_list|)
argument_list|,
name|min
argument_list|(
name|maxLon
operator|+
name|TOLERANCE
argument_list|,
name|MAX_LON_INCL
argument_list|)
argument_list|)
return|;
block|}
comment|// some sloppyish stuff, do we really need this to be done in a sloppy way?
comment|// unless it is performance sensitive, we should try to remove.
DECL|field|PIO2
specifier|private
specifier|static
specifier|final
name|double
name|PIO2
init|=
name|Math
operator|.
name|PI
operator|/
literal|2D
decl_stmt|;
comment|/**    * Returns the trigonometric sine of an angle converted as a cos operation.    *<p>    * Note that this is not quite right... e.g. sin(0) != 0    *<p>    * Special cases:    *<ul>    *<li>If the argument is {@code NaN} or an infinity, then the result is {@code NaN}.    *</ul>    * @param a an angle, in radians.    * @return the sine of the argument.    * @see Math#sin(double)    */
comment|// TODO: deprecate/remove this? at least its no longer public.
DECL|method|sloppySin
specifier|private
specifier|static
name|double
name|sloppySin
parameter_list|(
name|double
name|a
parameter_list|)
block|{
return|return
name|cos
argument_list|(
name|a
operator|-
name|PIO2
argument_list|)
return|;
block|}
block|}
end_class
end_unit
