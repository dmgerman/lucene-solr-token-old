begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.spatial.util
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|util
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|geo
operator|.
name|GeoEncodingUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BitUtil
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|geo
operator|.
name|GeoUtils
operator|.
name|checkLatitude
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|geo
operator|.
name|GeoUtils
operator|.
name|checkLongitude
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|geo
operator|.
name|GeoEncodingUtils
operator|.
name|encodeLatitude
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|geo
operator|.
name|GeoEncodingUtils
operator|.
name|encodeLatitudeCeil
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|geo
operator|.
name|GeoEncodingUtils
operator|.
name|encodeLongitude
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|geo
operator|.
name|GeoEncodingUtils
operator|.
name|encodeLongitudeCeil
import|;
end_import
begin_comment
comment|/**  * Quantizes lat/lon points and bit interleaves them into a binary morton code  * in the range of 0x00000000... : 0xFFFFFFFF...  * https://en.wikipedia.org/wiki/Z-order_curve  *  * This is useful for bitwise operations in raster space  *  * @lucene.experimental  */
end_comment
begin_class
DECL|class|MortonEncoder
specifier|public
class|class
name|MortonEncoder
block|{
DECL|method|MortonEncoder
specifier|private
name|MortonEncoder
parameter_list|()
block|{}
comment|// no instance
comment|/**    * Main encoding method to quantize lat/lon points and bit interleave them into a binary morton code    * in the range of 0x00000000... : 0xFFFFFFFF...    *    * @param latitude latitude value: must be within standard +/-90 coordinate bounds.    * @param longitude longitude value: must be within standard +/-180 coordinate bounds.    * @return bit interleaved encoded values as a 64-bit {@code long}    * @throws IllegalArgumentException if latitude or longitude is out of bounds    */
DECL|method|encode
specifier|public
specifier|static
specifier|final
name|long
name|encode
parameter_list|(
name|double
name|latitude
parameter_list|,
name|double
name|longitude
parameter_list|)
block|{
name|checkLatitude
argument_list|(
name|latitude
argument_list|)
expr_stmt|;
name|checkLongitude
argument_list|(
name|longitude
argument_list|)
expr_stmt|;
comment|// encode lat/lon flipping the sign bit so negative ints sort before positive ints
specifier|final
name|int
name|latEnc
init|=
name|encodeLatitude
argument_list|(
name|latitude
argument_list|)
operator|^
literal|0x80000000
decl_stmt|;
specifier|final
name|int
name|lonEnc
init|=
name|encodeLongitude
argument_list|(
name|longitude
argument_list|)
operator|^
literal|0x80000000
decl_stmt|;
return|return
name|BitUtil
operator|.
name|interleave
argument_list|(
name|lonEnc
argument_list|,
name|latEnc
argument_list|)
return|;
block|}
comment|/**    * Quantizes lat/lon points and bit interleaves them into a sortable morton code    * ranging from 0x00 : 0xFF...    * https://en.wikipedia.org/wiki/Z-order_curve    * This is useful for bitwise operations in raster space    * @param latitude latitude value: must be within standard +/-90 coordinate bounds.    * @param longitude longitude value: must be within standard +/-180 coordinate bounds.    * @return bit interleaved encoded values as a 64-bit {@code long}    * @throws IllegalArgumentException if latitude or longitude is out of bounds    */
DECL|method|encodeCeil
specifier|public
specifier|static
specifier|final
name|long
name|encodeCeil
parameter_list|(
name|double
name|latitude
parameter_list|,
name|double
name|longitude
parameter_list|)
block|{
name|checkLatitude
argument_list|(
name|latitude
argument_list|)
expr_stmt|;
name|checkLongitude
argument_list|(
name|longitude
argument_list|)
expr_stmt|;
comment|// encode lat/lon flipping the sign bit so negative ints sort before positive ints
specifier|final
name|int
name|latEnc
init|=
name|encodeLatitudeCeil
argument_list|(
name|latitude
argument_list|)
operator|^
literal|0x80000000
decl_stmt|;
specifier|final
name|int
name|lonEnc
init|=
name|encodeLongitudeCeil
argument_list|(
name|longitude
argument_list|)
operator|^
literal|0x80000000
decl_stmt|;
return|return
name|BitUtil
operator|.
name|interleave
argument_list|(
name|lonEnc
argument_list|,
name|latEnc
argument_list|)
return|;
block|}
comment|/** decode latitude value from morton encoded geo point */
DECL|method|decodeLatitude
specifier|public
specifier|static
specifier|final
name|double
name|decodeLatitude
parameter_list|(
specifier|final
name|long
name|hash
parameter_list|)
block|{
comment|// decode lat/lon flipping the sign bit so negative ints sort before positive ints
return|return
name|GeoEncodingUtils
operator|.
name|decodeLatitude
argument_list|(
operator|(
name|int
operator|)
name|BitUtil
operator|.
name|deinterleave
argument_list|(
name|hash
operator|>>>
literal|1
argument_list|)
operator|^
literal|0x80000000
argument_list|)
return|;
block|}
comment|/** decode longitude value from morton encoded geo point */
DECL|method|decodeLongitude
specifier|public
specifier|static
specifier|final
name|double
name|decodeLongitude
parameter_list|(
specifier|final
name|long
name|hash
parameter_list|)
block|{
comment|// decode lat/lon flipping the sign bit so negative ints sort before positive ints
return|return
name|GeoEncodingUtils
operator|.
name|decodeLongitude
argument_list|(
operator|(
name|int
operator|)
name|BitUtil
operator|.
name|deinterleave
argument_list|(
name|hash
argument_list|)
operator|^
literal|0x80000000
argument_list|)
return|;
block|}
comment|/** Converts a long value into a full 64 bit string (useful for debugging) */
DECL|method|geoTermToString
specifier|public
specifier|static
name|String
name|geoTermToString
parameter_list|(
name|long
name|term
parameter_list|)
block|{
name|StringBuilder
name|s
init|=
operator|new
name|StringBuilder
argument_list|(
literal|64
argument_list|)
decl_stmt|;
specifier|final
name|int
name|numberOfLeadingZeros
init|=
name|Long
operator|.
name|numberOfLeadingZeros
argument_list|(
name|term
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfLeadingZeros
condition|;
name|i
operator|++
control|)
block|{
name|s
operator|.
name|append
argument_list|(
literal|'0'
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|term
operator|!=
literal|0
condition|)
block|{
name|s
operator|.
name|append
argument_list|(
name|Long
operator|.
name|toBinaryString
argument_list|(
name|term
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|s
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class
end_unit
