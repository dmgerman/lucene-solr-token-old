begin_unit
begin_package
DECL|package|org.apache.lucene.spatial.bbox
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|bbox
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|com
operator|.
name|spatial4j
operator|.
name|core
operator|.
name|context
operator|.
name|SpatialContext
import|;
end_import
begin_import
import|import
name|com
operator|.
name|spatial4j
operator|.
name|core
operator|.
name|distance
operator|.
name|DistanceCalculator
import|;
end_import
begin_import
import|import
name|com
operator|.
name|spatial4j
operator|.
name|core
operator|.
name|shape
operator|.
name|Point
import|;
end_import
begin_import
import|import
name|com
operator|.
name|spatial4j
operator|.
name|core
operator|.
name|shape
operator|.
name|Rectangle
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Explanation
import|;
end_import
begin_comment
comment|/**  * Returns the distance between the center of the indexed rectangle and the  * query shape.  * @lucene.experimental  */
end_comment
begin_class
DECL|class|DistanceSimilarity
specifier|public
class|class
name|DistanceSimilarity
implements|implements
name|BBoxSimilarity
block|{
DECL|field|queryPoint
specifier|private
specifier|final
name|Point
name|queryPoint
decl_stmt|;
DECL|field|multiplier
specifier|private
specifier|final
name|double
name|multiplier
decl_stmt|;
DECL|field|distCalc
specifier|private
specifier|final
name|DistanceCalculator
name|distCalc
decl_stmt|;
DECL|field|nullValue
specifier|private
specifier|final
name|double
name|nullValue
decl_stmt|;
DECL|method|DistanceSimilarity
specifier|public
name|DistanceSimilarity
parameter_list|(
name|SpatialContext
name|ctx
parameter_list|,
name|Point
name|queryPoint
parameter_list|,
name|double
name|multiplier
parameter_list|)
block|{
name|this
operator|.
name|queryPoint
operator|=
name|queryPoint
expr_stmt|;
name|this
operator|.
name|multiplier
operator|=
name|multiplier
expr_stmt|;
name|this
operator|.
name|distCalc
operator|=
name|ctx
operator|.
name|getDistCalc
argument_list|()
expr_stmt|;
name|this
operator|.
name|nullValue
operator|=
operator|(
name|ctx
operator|.
name|isGeo
argument_list|()
condition|?
literal|180
operator|*
name|multiplier
else|:
name|Double
operator|.
name|MAX_VALUE
operator|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|score
specifier|public
name|double
name|score
parameter_list|(
name|Rectangle
name|indexRect
parameter_list|,
name|Explanation
name|exp
parameter_list|)
block|{
name|double
name|score
decl_stmt|;
if|if
condition|(
name|indexRect
operator|==
literal|null
condition|)
block|{
name|score
operator|=
name|nullValue
expr_stmt|;
block|}
else|else
block|{
name|score
operator|=
name|distCalc
operator|.
name|distance
argument_list|(
name|queryPoint
argument_list|,
name|indexRect
operator|.
name|getCenter
argument_list|()
argument_list|)
operator|*
name|multiplier
expr_stmt|;
block|}
if|if
condition|(
name|exp
operator|!=
literal|null
condition|)
block|{
name|exp
operator|.
name|setValue
argument_list|(
operator|(
name|float
operator|)
name|score
argument_list|)
expr_stmt|;
name|exp
operator|.
name|setDescription
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
name|exp
operator|.
name|addDetail
argument_list|(
operator|new
name|Explanation
argument_list|(
operator|-
literal|1f
argument_list|,
literal|""
operator|+
name|queryPoint
argument_list|)
argument_list|)
expr_stmt|;
name|exp
operator|.
name|addDetail
argument_list|(
operator|new
name|Explanation
argument_list|(
operator|-
literal|1f
argument_list|,
literal|""
operator|+
name|indexRect
argument_list|)
argument_list|)
expr_stmt|;
name|exp
operator|.
name|addDetail
argument_list|(
operator|new
name|Explanation
argument_list|(
operator|(
name|float
operator|)
name|multiplier
argument_list|,
literal|"multiplier"
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|score
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
return|return
literal|false
return|;
name|DistanceSimilarity
name|that
init|=
operator|(
name|DistanceSimilarity
operator|)
name|o
decl_stmt|;
if|if
condition|(
name|Double
operator|.
name|compare
argument_list|(
name|that
operator|.
name|multiplier
argument_list|,
name|multiplier
argument_list|)
operator|!=
literal|0
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|Double
operator|.
name|compare
argument_list|(
name|that
operator|.
name|nullValue
argument_list|,
name|nullValue
argument_list|)
operator|!=
literal|0
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|distCalc
operator|.
name|equals
argument_list|(
name|that
operator|.
name|distCalc
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|queryPoint
operator|.
name|equals
argument_list|(
name|that
operator|.
name|queryPoint
argument_list|)
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|result
decl_stmt|;
name|long
name|temp
decl_stmt|;
name|result
operator|=
name|queryPoint
operator|.
name|hashCode
argument_list|()
expr_stmt|;
name|temp
operator|=
name|Double
operator|.
name|doubleToLongBits
argument_list|(
name|multiplier
argument_list|)
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
call|(
name|int
call|)
argument_list|(
name|temp
operator|^
operator|(
name|temp
operator|>>>
literal|32
operator|)
argument_list|)
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
name|distCalc
operator|.
name|hashCode
argument_list|()
expr_stmt|;
name|temp
operator|=
name|Double
operator|.
name|doubleToLongBits
argument_list|(
name|nullValue
argument_list|)
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
call|(
name|int
call|)
argument_list|(
name|temp
operator|^
operator|(
name|temp
operator|>>>
literal|32
operator|)
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
end_class
end_unit
