begin_unit
begin_package
DECL|package|org.apache.lucene.spatial.spatial4j.geo3d
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|spatial4j
operator|.
name|geo3d
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_comment
comment|/**  * Base extended shape object.  *  * @lucene.experimental  */
end_comment
begin_class
DECL|class|GeoBaseExtendedShape
specifier|public
specifier|abstract
class|class
name|GeoBaseExtendedShape
implements|implements
name|GeoShape
block|{
DECL|field|NORTH_POLE
specifier|protected
specifier|final
specifier|static
name|GeoPoint
name|NORTH_POLE
init|=
operator|new
name|GeoPoint
argument_list|(
literal|0.0
argument_list|,
literal|0.0
argument_list|,
literal|1.0
argument_list|)
decl_stmt|;
DECL|field|SOUTH_POLE
specifier|protected
specifier|final
specifier|static
name|GeoPoint
name|SOUTH_POLE
init|=
operator|new
name|GeoPoint
argument_list|(
literal|0.0
argument_list|,
literal|0.0
argument_list|,
operator|-
literal|1.0
argument_list|)
decl_stmt|;
DECL|method|GeoBaseExtendedShape
specifier|public
name|GeoBaseExtendedShape
parameter_list|()
block|{   }
comment|/**    * Check if a point is within this shape.    *    * @param point is the point to check.    * @return true if the point is within this shape    */
annotation|@
name|Override
DECL|method|isWithin
specifier|public
specifier|abstract
name|boolean
name|isWithin
parameter_list|(
specifier|final
name|Vector
name|point
parameter_list|)
function_decl|;
comment|/**    * Check if a point is within this shape.    *    * @param x is x coordinate of point to check.    * @param y is y coordinate of point to check.    * @param z is z coordinate of point to check.    * @return true if the point is within this shape    */
annotation|@
name|Override
DECL|method|isWithin
specifier|public
specifier|abstract
name|boolean
name|isWithin
parameter_list|(
specifier|final
name|double
name|x
parameter_list|,
specifier|final
name|double
name|y
parameter_list|,
specifier|final
name|double
name|z
parameter_list|)
function_decl|;
comment|/**    * Return a sample point that is on the edge of the shape.    *    * @return a number of edge points, one for each disconnected edge.    */
annotation|@
name|Override
DECL|method|getEdgePoints
specifier|public
specifier|abstract
name|GeoPoint
index|[]
name|getEdgePoints
parameter_list|()
function_decl|;
comment|/**    * Assess whether a plane, within the provided bounds, intersects    * with the shape.    *    * @param plane  is the plane to assess for intersection with the shape's edges or    *               bounding curves.    * @param bounds are a set of bounds that define an area that an    *               intersection must be within in order to qualify (provided by a GeoArea).    * @return true if there's such an intersection, false if not.    */
annotation|@
name|Override
DECL|method|intersects
specifier|public
specifier|abstract
name|boolean
name|intersects
parameter_list|(
specifier|final
name|Plane
name|plane
parameter_list|,
specifier|final
name|GeoPoint
index|[]
name|notablePoints
parameter_list|,
specifier|final
name|Membership
modifier|...
name|bounds
parameter_list|)
function_decl|;
comment|/**    * Compute longitude/latitude bounds for the shape.    *    * @param bounds is the optional input bounds object.  If this is null,    *               a bounds object will be created.  Otherwise, the input object will be modified.    * @return a Bounds object describing the shape's bounds.  If the bounds cannot    * be computed, then return a Bounds object with noLongitudeBound,    * noTopLatitudeBound, and noBottomLatitudeBound.    */
annotation|@
name|Override
DECL|method|getBounds
specifier|public
name|Bounds
name|getBounds
parameter_list|(
name|Bounds
name|bounds
parameter_list|)
block|{
if|if
condition|(
name|bounds
operator|==
literal|null
condition|)
name|bounds
operator|=
operator|new
name|Bounds
argument_list|()
expr_stmt|;
if|if
condition|(
name|isWithin
argument_list|(
name|NORTH_POLE
argument_list|)
condition|)
block|{
name|bounds
operator|.
name|noTopLatitudeBound
argument_list|()
operator|.
name|noLongitudeBound
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|isWithin
argument_list|(
name|SOUTH_POLE
argument_list|)
condition|)
block|{
name|bounds
operator|.
name|noBottomLatitudeBound
argument_list|()
operator|.
name|noLongitudeBound
argument_list|()
expr_stmt|;
block|}
return|return
name|bounds
return|;
block|}
block|}
end_class
end_unit
