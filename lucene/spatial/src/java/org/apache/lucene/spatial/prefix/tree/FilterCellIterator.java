begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.spatial.prefix.tree
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|prefix
operator|.
name|tree
package|;
end_package
begin_import
import|import
name|com
operator|.
name|spatial4j
operator|.
name|core
operator|.
name|shape
operator|.
name|Shape
import|;
end_import
begin_import
import|import
name|com
operator|.
name|spatial4j
operator|.
name|core
operator|.
name|shape
operator|.
name|SpatialRelation
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import
begin_comment
comment|/**  * A filtering iterator of Cells. Those not matching the provided shape (disjoint) are  * skipped. If {@code shapeFilter} is null then all cells are returned.  *  * @lucene.internal  */
end_comment
begin_class
DECL|class|FilterCellIterator
class|class
name|FilterCellIterator
extends|extends
name|CellIterator
block|{
DECL|field|baseIter
specifier|final
name|Iterator
argument_list|<
name|Cell
argument_list|>
name|baseIter
decl_stmt|;
DECL|field|shapeFilter
specifier|final
name|Shape
name|shapeFilter
decl_stmt|;
DECL|method|FilterCellIterator
name|FilterCellIterator
parameter_list|(
name|Iterator
argument_list|<
name|Cell
argument_list|>
name|baseIter
parameter_list|,
name|Shape
name|shapeFilter
parameter_list|)
block|{
name|this
operator|.
name|baseIter
operator|=
name|baseIter
expr_stmt|;
name|this
operator|.
name|shapeFilter
operator|=
name|shapeFilter
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|hasNext
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
name|thisCell
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|nextCell
operator|!=
literal|null
condition|)
comment|//calling hasNext twice in a row
return|return
literal|true
return|;
while|while
condition|(
name|baseIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|nextCell
operator|=
name|baseIter
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|shapeFilter
operator|==
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
name|SpatialRelation
name|rel
init|=
name|nextCell
operator|.
name|getShape
argument_list|()
operator|.
name|relate
argument_list|(
name|shapeFilter
argument_list|)
decl_stmt|;
if|if
condition|(
name|rel
operator|.
name|intersects
argument_list|()
condition|)
block|{
name|nextCell
operator|.
name|setShapeRel
argument_list|(
name|rel
argument_list|)
expr_stmt|;
if|if
condition|(
name|rel
operator|==
name|SpatialRelation
operator|.
name|WITHIN
condition|)
name|nextCell
operator|.
name|setLeaf
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
block|}
end_class
end_unit
