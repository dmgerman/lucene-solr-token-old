begin_unit
begin_package
DECL|package|org.apache.lucene.spatial.bbox
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|bbox
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|com
operator|.
name|spatial4j
operator|.
name|core
operator|.
name|context
operator|.
name|SpatialContext
import|;
end_import
begin_import
import|import
name|com
operator|.
name|spatial4j
operator|.
name|core
operator|.
name|shape
operator|.
name|Point
import|;
end_import
begin_import
import|import
name|com
operator|.
name|spatial4j
operator|.
name|core
operator|.
name|shape
operator|.
name|Rectangle
import|;
end_import
begin_import
import|import
name|com
operator|.
name|spatial4j
operator|.
name|core
operator|.
name|shape
operator|.
name|Shape
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|DoubleField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|FieldType
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|StringField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|AtomicReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queries
operator|.
name|function
operator|.
name|FunctionQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queries
operator|.
name|function
operator|.
name|ValueSource
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanClause
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|ConstantScoreQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Filter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|NumericRangeQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|QueryWrapperFilter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TermQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|SpatialStrategy
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|query
operator|.
name|SpatialArgs
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|query
operator|.
name|SpatialOperation
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|query
operator|.
name|UnsupportedSpatialOperation
import|;
end_import
begin_comment
comment|/**  * A SpatialStrategy for indexing and searching Rectangles by storing its  * coordinates in numeric fields. It supports all {@link SpatialOperation}s and  * has a custom overlap relevancy. It is based on GeoPortal's<a  * href="http://geoportal.svn.sourceforge.net/svnroot/geoportal/Geoportal/trunk/src/com/esri/gpt/catalog/lucene/SpatialClauseAdapter.java">SpatialClauseAdapter</a>.  *  *<h4>Characteristics:</h4>  *<ul>  *<li>Only indexes Rectangles; just one per field value.</li>  *<li>Can query only by a Rectangle.</li>  *<li>Supports most {@link SpatialOperation}s -- not Overlaps.</li>  *<li>Uses the DocValues API for any sorting / relevancy.</li>  *</ul>  *  *<h4>Implementation:</h4>  * This uses 4 double fields for minX, maxX, minY, maxY  * and a boolean to mark a dateline cross. Depending on the particular {@link  * SpatialOperation}s, there is a variety of {@link NumericRangeQuery}s to be  * done.  * The {@link #makeBBoxAreaSimilarityValueSource(com.spatial4j.core.shape.Rectangle)}  * works by calculating the query bbox overlap percentage against the indexed  * shape overlap percentage. The indexed shape's coordinates are retrieved from  * {@link AtomicReader#getNumericDocValues}  *  * @lucene.experimental  */
end_comment
begin_class
DECL|class|BBoxStrategy
specifier|public
class|class
name|BBoxStrategy
extends|extends
name|SpatialStrategy
block|{
DECL|field|SUFFIX_MINX
specifier|public
specifier|static
specifier|final
name|String
name|SUFFIX_MINX
init|=
literal|"__minX"
decl_stmt|;
DECL|field|SUFFIX_MAXX
specifier|public
specifier|static
specifier|final
name|String
name|SUFFIX_MAXX
init|=
literal|"__maxX"
decl_stmt|;
DECL|field|SUFFIX_MINY
specifier|public
specifier|static
specifier|final
name|String
name|SUFFIX_MINY
init|=
literal|"__minY"
decl_stmt|;
DECL|field|SUFFIX_MAXY
specifier|public
specifier|static
specifier|final
name|String
name|SUFFIX_MAXY
init|=
literal|"__maxY"
decl_stmt|;
DECL|field|SUFFIX_XDL
specifier|public
specifier|static
specifier|final
name|String
name|SUFFIX_XDL
init|=
literal|"__xdl"
decl_stmt|;
comment|/*    * The Bounding Box gets stored as four fields for x/y min/max and a flag    * that says if the box crosses the dateline (xdl).    */
DECL|field|field_bbox
specifier|public
specifier|final
name|String
name|field_bbox
decl_stmt|;
DECL|field|field_minX
specifier|public
specifier|final
name|String
name|field_minX
decl_stmt|;
DECL|field|field_minY
specifier|public
specifier|final
name|String
name|field_minY
decl_stmt|;
DECL|field|field_maxX
specifier|public
specifier|final
name|String
name|field_maxX
decl_stmt|;
DECL|field|field_maxY
specifier|public
specifier|final
name|String
name|field_maxY
decl_stmt|;
DECL|field|field_xdl
specifier|public
specifier|final
name|String
name|field_xdl
decl_stmt|;
comment|// crosses dateline
DECL|field|queryPower
specifier|public
name|double
name|queryPower
init|=
literal|1.0
decl_stmt|;
DECL|field|targetPower
specifier|public
name|double
name|targetPower
init|=
literal|1.0f
decl_stmt|;
DECL|field|precisionStep
specifier|public
name|int
name|precisionStep
init|=
literal|8
decl_stmt|;
comment|// same as solr default
DECL|method|BBoxStrategy
specifier|public
name|BBoxStrategy
parameter_list|(
name|SpatialContext
name|ctx
parameter_list|,
name|String
name|fieldNamePrefix
parameter_list|)
block|{
name|super
argument_list|(
name|ctx
argument_list|,
name|fieldNamePrefix
argument_list|)
expr_stmt|;
name|field_bbox
operator|=
name|fieldNamePrefix
expr_stmt|;
name|field_minX
operator|=
name|fieldNamePrefix
operator|+
name|SUFFIX_MINX
expr_stmt|;
name|field_maxX
operator|=
name|fieldNamePrefix
operator|+
name|SUFFIX_MAXX
expr_stmt|;
name|field_minY
operator|=
name|fieldNamePrefix
operator|+
name|SUFFIX_MINY
expr_stmt|;
name|field_maxY
operator|=
name|fieldNamePrefix
operator|+
name|SUFFIX_MAXY
expr_stmt|;
name|field_xdl
operator|=
name|fieldNamePrefix
operator|+
name|SUFFIX_XDL
expr_stmt|;
block|}
DECL|method|setPrecisionStep
specifier|public
name|void
name|setPrecisionStep
parameter_list|(
name|int
name|p
parameter_list|)
block|{
name|precisionStep
operator|=
name|p
expr_stmt|;
if|if
condition|(
name|precisionStep
operator|<=
literal|0
operator|||
name|precisionStep
operator|>=
literal|64
condition|)
name|precisionStep
operator|=
name|Integer
operator|.
name|MAX_VALUE
expr_stmt|;
block|}
comment|//---------------------------------
comment|// Indexing
comment|//---------------------------------
annotation|@
name|Override
DECL|method|createIndexableFields
specifier|public
name|Field
index|[]
name|createIndexableFields
parameter_list|(
name|Shape
name|shape
parameter_list|)
block|{
if|if
condition|(
name|shape
operator|instanceof
name|Rectangle
condition|)
return|return
name|createIndexableFields
argument_list|(
operator|(
name|Rectangle
operator|)
name|shape
argument_list|)
return|;
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Can only index a Rectangle, not "
operator|+
name|shape
argument_list|)
throw|;
block|}
DECL|method|createIndexableFields
specifier|public
name|Field
index|[]
name|createIndexableFields
parameter_list|(
name|Rectangle
name|bbox
parameter_list|)
block|{
name|FieldType
name|doubleFieldType
init|=
operator|new
name|FieldType
argument_list|(
name|DoubleField
operator|.
name|TYPE_NOT_STORED
argument_list|)
decl_stmt|;
name|doubleFieldType
operator|.
name|setNumericPrecisionStep
argument_list|(
name|precisionStep
argument_list|)
expr_stmt|;
name|Field
index|[]
name|fields
init|=
operator|new
name|Field
index|[
literal|5
index|]
decl_stmt|;
name|fields
index|[
literal|0
index|]
operator|=
operator|new
name|DoubleField
argument_list|(
name|field_minX
argument_list|,
name|bbox
operator|.
name|getMinX
argument_list|()
argument_list|,
name|doubleFieldType
argument_list|)
expr_stmt|;
name|fields
index|[
literal|1
index|]
operator|=
operator|new
name|DoubleField
argument_list|(
name|field_maxX
argument_list|,
name|bbox
operator|.
name|getMaxX
argument_list|()
argument_list|,
name|doubleFieldType
argument_list|)
expr_stmt|;
name|fields
index|[
literal|2
index|]
operator|=
operator|new
name|DoubleField
argument_list|(
name|field_minY
argument_list|,
name|bbox
operator|.
name|getMinY
argument_list|()
argument_list|,
name|doubleFieldType
argument_list|)
expr_stmt|;
name|fields
index|[
literal|3
index|]
operator|=
operator|new
name|DoubleField
argument_list|(
name|field_maxY
argument_list|,
name|bbox
operator|.
name|getMaxY
argument_list|()
argument_list|,
name|doubleFieldType
argument_list|)
expr_stmt|;
name|fields
index|[
literal|4
index|]
operator|=
operator|new
name|Field
argument_list|(
name|field_xdl
argument_list|,
name|bbox
operator|.
name|getCrossesDateLine
argument_list|()
condition|?
literal|"T"
else|:
literal|"F"
argument_list|,
name|StringField
operator|.
name|TYPE_NOT_STORED
argument_list|)
expr_stmt|;
return|return
name|fields
return|;
block|}
comment|//---------------------------------
comment|// Query Builder
comment|//---------------------------------
annotation|@
name|Override
DECL|method|makeDistanceValueSource
specifier|public
name|ValueSource
name|makeDistanceValueSource
parameter_list|(
name|Point
name|queryPoint
parameter_list|,
name|double
name|multiplier
parameter_list|)
block|{
return|return
operator|new
name|BBoxSimilarityValueSource
argument_list|(
name|this
argument_list|,
operator|new
name|DistanceSimilarity
argument_list|(
name|this
operator|.
name|getSpatialContext
argument_list|()
argument_list|,
name|queryPoint
argument_list|,
name|multiplier
argument_list|)
argument_list|)
return|;
block|}
DECL|method|makeBBoxAreaSimilarityValueSource
specifier|public
name|ValueSource
name|makeBBoxAreaSimilarityValueSource
parameter_list|(
name|Rectangle
name|queryBox
parameter_list|)
block|{
return|return
operator|new
name|BBoxSimilarityValueSource
argument_list|(
name|this
argument_list|,
operator|new
name|AreaSimilarity
argument_list|(
name|queryBox
argument_list|,
name|queryPower
argument_list|,
name|targetPower
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|makeFilter
specifier|public
name|Filter
name|makeFilter
parameter_list|(
name|SpatialArgs
name|args
parameter_list|)
block|{
return|return
operator|new
name|QueryWrapperFilter
argument_list|(
name|makeSpatialQuery
argument_list|(
name|args
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|makeQuery
specifier|public
name|ConstantScoreQuery
name|makeQuery
parameter_list|(
name|SpatialArgs
name|args
parameter_list|)
block|{
return|return
operator|new
name|ConstantScoreQuery
argument_list|(
name|makeSpatialQuery
argument_list|(
name|args
argument_list|)
argument_list|)
return|;
block|}
DECL|method|makeQueryWithValueSource
specifier|public
name|Query
name|makeQueryWithValueSource
parameter_list|(
name|SpatialArgs
name|args
parameter_list|,
name|ValueSource
name|valueSource
parameter_list|)
block|{
name|BooleanQuery
name|bq
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
name|Query
name|spatial
init|=
name|makeSpatialQuery
argument_list|(
name|args
argument_list|)
decl_stmt|;
name|bq
operator|.
name|add
argument_list|(
operator|new
name|ConstantScoreQuery
argument_list|(
name|spatial
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
comment|// This part does the scoring
name|Query
name|spatialRankingQuery
init|=
operator|new
name|FunctionQuery
argument_list|(
name|valueSource
argument_list|)
decl_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|spatialRankingQuery
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
return|return
name|bq
return|;
block|}
DECL|method|makeSpatialQuery
specifier|private
name|Query
name|makeSpatialQuery
parameter_list|(
name|SpatialArgs
name|args
parameter_list|)
block|{
name|Shape
name|shape
init|=
name|args
operator|.
name|getShape
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|shape
operator|instanceof
name|Rectangle
operator|)
condition|)
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Can only query by Rectangle, not "
operator|+
name|shape
argument_list|)
throw|;
name|Rectangle
name|bbox
init|=
operator|(
name|Rectangle
operator|)
name|shape
decl_stmt|;
name|Query
name|spatial
decl_stmt|;
comment|// Useful for understanding Relations:
comment|// http://edndoc.esri.com/arcsde/9.1/general_topics/understand_spatial_relations.htm
name|SpatialOperation
name|op
init|=
name|args
operator|.
name|getOperation
argument_list|()
decl_stmt|;
if|if
condition|(
name|op
operator|==
name|SpatialOperation
operator|.
name|BBoxIntersects
condition|)
name|spatial
operator|=
name|makeIntersects
argument_list|(
name|bbox
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|op
operator|==
name|SpatialOperation
operator|.
name|BBoxWithin
condition|)
name|spatial
operator|=
name|makeWithin
argument_list|(
name|bbox
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|op
operator|==
name|SpatialOperation
operator|.
name|Contains
condition|)
name|spatial
operator|=
name|makeContains
argument_list|(
name|bbox
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|op
operator|==
name|SpatialOperation
operator|.
name|Intersects
condition|)
name|spatial
operator|=
name|makeIntersects
argument_list|(
name|bbox
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|op
operator|==
name|SpatialOperation
operator|.
name|IsEqualTo
condition|)
name|spatial
operator|=
name|makeEquals
argument_list|(
name|bbox
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|op
operator|==
name|SpatialOperation
operator|.
name|IsDisjointTo
condition|)
name|spatial
operator|=
name|makeDisjoint
argument_list|(
name|bbox
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|op
operator|==
name|SpatialOperation
operator|.
name|IsWithin
condition|)
name|spatial
operator|=
name|makeWithin
argument_list|(
name|bbox
argument_list|)
expr_stmt|;
else|else
block|{
comment|//no Overlaps support yet
throw|throw
operator|new
name|UnsupportedSpatialOperation
argument_list|(
name|op
argument_list|)
throw|;
block|}
return|return
name|spatial
return|;
block|}
comment|//-------------------------------------------------------------------------------
comment|//
comment|//-------------------------------------------------------------------------------
comment|/**    * Constructs a query to retrieve documents that fully contain the input envelope.    *    * @return the spatial query    */
DECL|method|makeContains
name|Query
name|makeContains
parameter_list|(
name|Rectangle
name|bbox
parameter_list|)
block|{
comment|// general case
comment|// docMinX<= queryExtent.getMinX() AND docMinY<= queryExtent.getMinY() AND docMaxX>= queryExtent.getMaxX() AND docMaxY>= queryExtent.getMaxY()
comment|// Y conditions
comment|// docMinY<= queryExtent.getMinY() AND docMaxY>= queryExtent.getMaxY()
name|Query
name|qMinY
init|=
name|NumericRangeQuery
operator|.
name|newDoubleRange
argument_list|(
name|field_minY
argument_list|,
name|precisionStep
argument_list|,
literal|null
argument_list|,
name|bbox
operator|.
name|getMinY
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Query
name|qMaxY
init|=
name|NumericRangeQuery
operator|.
name|newDoubleRange
argument_list|(
name|field_maxY
argument_list|,
name|precisionStep
argument_list|,
name|bbox
operator|.
name|getMaxY
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Query
name|yConditions
init|=
name|this
operator|.
name|makeQuery
argument_list|(
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|,
name|qMinY
argument_list|,
name|qMaxY
argument_list|)
decl_stmt|;
comment|// X conditions
name|Query
name|xConditions
decl_stmt|;
comment|// queries that do not cross the date line
if|if
condition|(
operator|!
name|bbox
operator|.
name|getCrossesDateLine
argument_list|()
condition|)
block|{
comment|// X Conditions for documents that do not cross the date line,
comment|// documents that contain the min X and max X of the query envelope,
comment|// docMinX<= queryExtent.getMinX() AND docMaxX>= queryExtent.getMaxX()
name|Query
name|qMinX
init|=
name|NumericRangeQuery
operator|.
name|newDoubleRange
argument_list|(
name|field_minX
argument_list|,
name|precisionStep
argument_list|,
literal|null
argument_list|,
name|bbox
operator|.
name|getMinX
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Query
name|qMaxX
init|=
name|NumericRangeQuery
operator|.
name|newDoubleRange
argument_list|(
name|field_maxX
argument_list|,
name|precisionStep
argument_list|,
name|bbox
operator|.
name|getMaxX
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Query
name|qMinMax
init|=
name|this
operator|.
name|makeQuery
argument_list|(
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|,
name|qMinX
argument_list|,
name|qMaxX
argument_list|)
decl_stmt|;
name|Query
name|qNonXDL
init|=
name|this
operator|.
name|makeXDL
argument_list|(
literal|false
argument_list|,
name|qMinMax
argument_list|)
decl_stmt|;
comment|// X Conditions for documents that cross the date line,
comment|// the left portion of the document contains the min X of the query
comment|// OR the right portion of the document contains the max X of the query,
comment|// docMinXLeft<= queryExtent.getMinX() OR docMaxXRight>= queryExtent.getMaxX()
name|Query
name|qXDLLeft
init|=
name|NumericRangeQuery
operator|.
name|newDoubleRange
argument_list|(
name|field_minX
argument_list|,
name|precisionStep
argument_list|,
literal|null
argument_list|,
name|bbox
operator|.
name|getMinX
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Query
name|qXDLRight
init|=
name|NumericRangeQuery
operator|.
name|newDoubleRange
argument_list|(
name|field_maxX
argument_list|,
name|precisionStep
argument_list|,
name|bbox
operator|.
name|getMaxX
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Query
name|qXDLLeftRight
init|=
name|this
operator|.
name|makeQuery
argument_list|(
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|,
name|qXDLLeft
argument_list|,
name|qXDLRight
argument_list|)
decl_stmt|;
name|Query
name|qXDL
init|=
name|this
operator|.
name|makeXDL
argument_list|(
literal|true
argument_list|,
name|qXDLLeftRight
argument_list|)
decl_stmt|;
comment|// apply the non-XDL and XDL conditions
name|xConditions
operator|=
name|this
operator|.
name|makeQuery
argument_list|(
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|,
name|qNonXDL
argument_list|,
name|qXDL
argument_list|)
expr_stmt|;
comment|// queries that cross the date line
block|}
else|else
block|{
comment|// No need to search for documents that do not cross the date line
comment|// X Conditions for documents that cross the date line,
comment|// the left portion of the document contains the min X of the query
comment|// AND the right portion of the document contains the max X of the query,
comment|// docMinXLeft<= queryExtent.getMinX() AND docMaxXRight>= queryExtent.getMaxX()
name|Query
name|qXDLLeft
init|=
name|NumericRangeQuery
operator|.
name|newDoubleRange
argument_list|(
name|field_minX
argument_list|,
name|precisionStep
argument_list|,
literal|null
argument_list|,
name|bbox
operator|.
name|getMinX
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Query
name|qXDLRight
init|=
name|NumericRangeQuery
operator|.
name|newDoubleRange
argument_list|(
name|field_maxX
argument_list|,
name|precisionStep
argument_list|,
name|bbox
operator|.
name|getMaxX
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Query
name|qXDLLeftRight
init|=
name|this
operator|.
name|makeQuery
argument_list|(
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|,
name|qXDLLeft
argument_list|,
name|qXDLRight
argument_list|)
decl_stmt|;
name|xConditions
operator|=
name|this
operator|.
name|makeXDL
argument_list|(
literal|true
argument_list|,
name|qXDLLeftRight
argument_list|)
expr_stmt|;
block|}
comment|// both X and Y conditions must occur
return|return
name|this
operator|.
name|makeQuery
argument_list|(
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|,
name|xConditions
argument_list|,
name|yConditions
argument_list|)
return|;
block|}
comment|/**    * Constructs a query to retrieve documents that are disjoint to the input envelope.    *    * @return the spatial query    */
DECL|method|makeDisjoint
name|Query
name|makeDisjoint
parameter_list|(
name|Rectangle
name|bbox
parameter_list|)
block|{
comment|// general case
comment|// docMinX> queryExtent.getMaxX() OR docMaxX< queryExtent.getMinX() OR docMinY> queryExtent.getMaxY() OR docMaxY< queryExtent.getMinY()
comment|// Y conditions
comment|// docMinY> queryExtent.getMaxY() OR docMaxY< queryExtent.getMinY()
name|Query
name|qMinY
init|=
name|NumericRangeQuery
operator|.
name|newDoubleRange
argument_list|(
name|field_minY
argument_list|,
name|precisionStep
argument_list|,
name|bbox
operator|.
name|getMaxY
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Query
name|qMaxY
init|=
name|NumericRangeQuery
operator|.
name|newDoubleRange
argument_list|(
name|field_maxY
argument_list|,
name|precisionStep
argument_list|,
literal|null
argument_list|,
name|bbox
operator|.
name|getMinY
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Query
name|yConditions
init|=
name|this
operator|.
name|makeQuery
argument_list|(
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|,
name|qMinY
argument_list|,
name|qMaxY
argument_list|)
decl_stmt|;
comment|// X conditions
name|Query
name|xConditions
decl_stmt|;
comment|// queries that do not cross the date line
if|if
condition|(
operator|!
name|bbox
operator|.
name|getCrossesDateLine
argument_list|()
condition|)
block|{
comment|// X Conditions for documents that do not cross the date line,
comment|// docMinX> queryExtent.getMaxX() OR docMaxX< queryExtent.getMinX()
name|Query
name|qMinX
init|=
name|NumericRangeQuery
operator|.
name|newDoubleRange
argument_list|(
name|field_minX
argument_list|,
name|precisionStep
argument_list|,
name|bbox
operator|.
name|getMaxX
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Query
name|qMaxX
init|=
name|NumericRangeQuery
operator|.
name|newDoubleRange
argument_list|(
name|field_maxX
argument_list|,
name|precisionStep
argument_list|,
literal|null
argument_list|,
name|bbox
operator|.
name|getMinX
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Query
name|qMinMax
init|=
name|this
operator|.
name|makeQuery
argument_list|(
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|,
name|qMinX
argument_list|,
name|qMaxX
argument_list|)
decl_stmt|;
name|Query
name|qNonXDL
init|=
name|this
operator|.
name|makeXDL
argument_list|(
literal|false
argument_list|,
name|qMinMax
argument_list|)
decl_stmt|;
comment|// X Conditions for documents that cross the date line,
comment|// both the left and right portions of the document must be disjoint to the query
comment|// (docMinXLeft> queryExtent.getMaxX() OR docMaxXLeft< queryExtent.getMinX()) AND
comment|// (docMinXRight> queryExtent.getMaxX() OR docMaxXRight< queryExtent.getMinX())
comment|// where: docMaxXLeft = 180.0, docMinXRight = -180.0
comment|// (docMaxXLeft< queryExtent.getMinX()) equates to (180.0< queryExtent.getMinX()) and is ignored
comment|// (docMinXRight> queryExtent.getMaxX()) equates to (-180.0> queryExtent.getMaxX()) and is ignored
name|Query
name|qMinXLeft
init|=
name|NumericRangeQuery
operator|.
name|newDoubleRange
argument_list|(
name|field_minX
argument_list|,
name|precisionStep
argument_list|,
name|bbox
operator|.
name|getMaxX
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Query
name|qMaxXRight
init|=
name|NumericRangeQuery
operator|.
name|newDoubleRange
argument_list|(
name|field_maxX
argument_list|,
name|precisionStep
argument_list|,
literal|null
argument_list|,
name|bbox
operator|.
name|getMinX
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Query
name|qLeftRight
init|=
name|this
operator|.
name|makeQuery
argument_list|(
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|,
name|qMinXLeft
argument_list|,
name|qMaxXRight
argument_list|)
decl_stmt|;
name|Query
name|qXDL
init|=
name|this
operator|.
name|makeXDL
argument_list|(
literal|true
argument_list|,
name|qLeftRight
argument_list|)
decl_stmt|;
comment|// apply the non-XDL and XDL conditions
name|xConditions
operator|=
name|this
operator|.
name|makeQuery
argument_list|(
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|,
name|qNonXDL
argument_list|,
name|qXDL
argument_list|)
expr_stmt|;
comment|// queries that cross the date line
block|}
else|else
block|{
comment|// X Conditions for documents that do not cross the date line,
comment|// the document must be disjoint to both the left and right query portions
comment|// (docMinX> queryExtent.getMaxX()Left OR docMaxX< queryExtent.getMinX()) AND (docMinX> queryExtent.getMaxX() OR docMaxX< queryExtent.getMinX()Left)
comment|// where: queryExtent.getMaxX()Left = 180.0, queryExtent.getMinX()Left = -180.0
name|Query
name|qMinXLeft
init|=
name|NumericRangeQuery
operator|.
name|newDoubleRange
argument_list|(
name|field_minX
argument_list|,
name|precisionStep
argument_list|,
literal|180.0
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Query
name|qMaxXLeft
init|=
name|NumericRangeQuery
operator|.
name|newDoubleRange
argument_list|(
name|field_maxX
argument_list|,
name|precisionStep
argument_list|,
literal|null
argument_list|,
name|bbox
operator|.
name|getMinX
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Query
name|qMinXRight
init|=
name|NumericRangeQuery
operator|.
name|newDoubleRange
argument_list|(
name|field_minX
argument_list|,
name|precisionStep
argument_list|,
name|bbox
operator|.
name|getMaxX
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Query
name|qMaxXRight
init|=
name|NumericRangeQuery
operator|.
name|newDoubleRange
argument_list|(
name|field_maxX
argument_list|,
name|precisionStep
argument_list|,
literal|null
argument_list|,
operator|-
literal|180.0
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Query
name|qLeft
init|=
name|this
operator|.
name|makeQuery
argument_list|(
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|,
name|qMinXLeft
argument_list|,
name|qMaxXLeft
argument_list|)
decl_stmt|;
name|Query
name|qRight
init|=
name|this
operator|.
name|makeQuery
argument_list|(
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|,
name|qMinXRight
argument_list|,
name|qMaxXRight
argument_list|)
decl_stmt|;
name|Query
name|qLeftRight
init|=
name|this
operator|.
name|makeQuery
argument_list|(
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|,
name|qLeft
argument_list|,
name|qRight
argument_list|)
decl_stmt|;
comment|// No need to search for documents that do not cross the date line
name|xConditions
operator|=
name|this
operator|.
name|makeXDL
argument_list|(
literal|false
argument_list|,
name|qLeftRight
argument_list|)
expr_stmt|;
block|}
comment|// either X or Y conditions should occur
return|return
name|this
operator|.
name|makeQuery
argument_list|(
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|,
name|xConditions
argument_list|,
name|yConditions
argument_list|)
return|;
block|}
comment|/**    * Constructs a query to retrieve documents that equal the input envelope.    *    * @return the spatial query    */
DECL|method|makeEquals
name|Query
name|makeEquals
parameter_list|(
name|Rectangle
name|bbox
parameter_list|)
block|{
comment|// docMinX = queryExtent.getMinX() AND docMinY = queryExtent.getMinY() AND docMaxX = queryExtent.getMaxX() AND docMaxY = queryExtent.getMaxY()
name|Query
name|qMinX
init|=
name|NumericRangeQuery
operator|.
name|newDoubleRange
argument_list|(
name|field_minX
argument_list|,
name|precisionStep
argument_list|,
name|bbox
operator|.
name|getMinX
argument_list|()
argument_list|,
name|bbox
operator|.
name|getMinX
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Query
name|qMinY
init|=
name|NumericRangeQuery
operator|.
name|newDoubleRange
argument_list|(
name|field_minY
argument_list|,
name|precisionStep
argument_list|,
name|bbox
operator|.
name|getMinY
argument_list|()
argument_list|,
name|bbox
operator|.
name|getMinY
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Query
name|qMaxX
init|=
name|NumericRangeQuery
operator|.
name|newDoubleRange
argument_list|(
name|field_maxX
argument_list|,
name|precisionStep
argument_list|,
name|bbox
operator|.
name|getMaxX
argument_list|()
argument_list|,
name|bbox
operator|.
name|getMaxX
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Query
name|qMaxY
init|=
name|NumericRangeQuery
operator|.
name|newDoubleRange
argument_list|(
name|field_maxY
argument_list|,
name|precisionStep
argument_list|,
name|bbox
operator|.
name|getMaxY
argument_list|()
argument_list|,
name|bbox
operator|.
name|getMaxY
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|BooleanQuery
name|bq
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|qMinX
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|qMinY
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|qMaxX
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|qMaxY
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
return|return
name|bq
return|;
block|}
comment|/**    * Constructs a query to retrieve documents that intersect the input envelope.    *    * @return the spatial query    */
DECL|method|makeIntersects
name|Query
name|makeIntersects
parameter_list|(
name|Rectangle
name|bbox
parameter_list|)
block|{
comment|// the original intersects query does not work for envelopes that cross the date line,
comment|// switch to a NOT Disjoint query
comment|// MUST_NOT causes a problem when it's the only clause type within a BooleanQuery,
comment|// to get around it we add all documents as a SHOULD
comment|// there must be an envelope, it must not be disjoint
name|Query
name|qDisjoint
init|=
name|makeDisjoint
argument_list|(
name|bbox
argument_list|)
decl_stmt|;
name|Query
name|qIsNonXDL
init|=
name|this
operator|.
name|makeXDL
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|Query
name|qIsXDL
init|=
name|this
operator|.
name|makeXDL
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|Query
name|qHasEnv
init|=
name|this
operator|.
name|makeQuery
argument_list|(
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|,
name|qIsNonXDL
argument_list|,
name|qIsXDL
argument_list|)
decl_stmt|;
name|BooleanQuery
name|qNotDisjoint
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
name|qNotDisjoint
operator|.
name|add
argument_list|(
name|qHasEnv
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|qNotDisjoint
operator|.
name|add
argument_list|(
name|qDisjoint
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST_NOT
argument_list|)
expr_stmt|;
comment|//Query qDisjoint = makeDisjoint();
comment|//BooleanQuery qNotDisjoint = new BooleanQuery();
comment|//qNotDisjoint.add(new MatchAllDocsQuery(),BooleanClause.Occur.SHOULD);
comment|//qNotDisjoint.add(qDisjoint,BooleanClause.Occur.MUST_NOT);
return|return
name|qNotDisjoint
return|;
block|}
comment|/**    * Makes a boolean query based upon a collection of queries and a logical operator.    *    * @param occur the logical operator    * @param queries the query collection    * @return the query    */
DECL|method|makeQuery
name|BooleanQuery
name|makeQuery
parameter_list|(
name|BooleanClause
operator|.
name|Occur
name|occur
parameter_list|,
name|Query
modifier|...
name|queries
parameter_list|)
block|{
name|BooleanQuery
name|bq
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
for|for
control|(
name|Query
name|query
range|:
name|queries
control|)
block|{
name|bq
operator|.
name|add
argument_list|(
name|query
argument_list|,
name|occur
argument_list|)
expr_stmt|;
block|}
return|return
name|bq
return|;
block|}
comment|/**    * Constructs a query to retrieve documents are fully within the input envelope.    *    * @return the spatial query    */
DECL|method|makeWithin
name|Query
name|makeWithin
parameter_list|(
name|Rectangle
name|bbox
parameter_list|)
block|{
comment|// general case
comment|// docMinX>= queryExtent.getMinX() AND docMinY>= queryExtent.getMinY() AND docMaxX<= queryExtent.getMaxX() AND docMaxY<= queryExtent.getMaxY()
comment|// Y conditions
comment|// docMinY>= queryExtent.getMinY() AND docMaxY<= queryExtent.getMaxY()
name|Query
name|qMinY
init|=
name|NumericRangeQuery
operator|.
name|newDoubleRange
argument_list|(
name|field_minY
argument_list|,
name|precisionStep
argument_list|,
name|bbox
operator|.
name|getMinY
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Query
name|qMaxY
init|=
name|NumericRangeQuery
operator|.
name|newDoubleRange
argument_list|(
name|field_maxY
argument_list|,
name|precisionStep
argument_list|,
literal|null
argument_list|,
name|bbox
operator|.
name|getMaxY
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Query
name|yConditions
init|=
name|this
operator|.
name|makeQuery
argument_list|(
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|,
name|qMinY
argument_list|,
name|qMaxY
argument_list|)
decl_stmt|;
comment|// X conditions
name|Query
name|xConditions
decl_stmt|;
comment|// X Conditions for documents that cross the date line,
comment|// the left portion of the document must be within the left portion of the query,
comment|// AND the right portion of the document must be within the right portion of the query
comment|// docMinXLeft>= queryExtent.getMinX() AND docMaxXLeft<= 180.0
comment|// AND docMinXRight>= -180.0 AND docMaxXRight<= queryExtent.getMaxX()
name|Query
name|qXDLLeft
init|=
name|NumericRangeQuery
operator|.
name|newDoubleRange
argument_list|(
name|field_minX
argument_list|,
name|precisionStep
argument_list|,
name|bbox
operator|.
name|getMinX
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Query
name|qXDLRight
init|=
name|NumericRangeQuery
operator|.
name|newDoubleRange
argument_list|(
name|field_maxX
argument_list|,
name|precisionStep
argument_list|,
literal|null
argument_list|,
name|bbox
operator|.
name|getMaxX
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Query
name|qXDLLeftRight
init|=
name|this
operator|.
name|makeQuery
argument_list|(
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|,
name|qXDLLeft
argument_list|,
name|qXDLRight
argument_list|)
decl_stmt|;
name|Query
name|qXDL
init|=
name|this
operator|.
name|makeXDL
argument_list|(
literal|true
argument_list|,
name|qXDLLeftRight
argument_list|)
decl_stmt|;
comment|// queries that do not cross the date line
if|if
condition|(
operator|!
name|bbox
operator|.
name|getCrossesDateLine
argument_list|()
condition|)
block|{
comment|// X Conditions for documents that do not cross the date line,
comment|// docMinX>= queryExtent.getMinX() AND docMaxX<= queryExtent.getMaxX()
name|Query
name|qMinX
init|=
name|NumericRangeQuery
operator|.
name|newDoubleRange
argument_list|(
name|field_minX
argument_list|,
name|precisionStep
argument_list|,
name|bbox
operator|.
name|getMinX
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Query
name|qMaxX
init|=
name|NumericRangeQuery
operator|.
name|newDoubleRange
argument_list|(
name|field_maxX
argument_list|,
name|precisionStep
argument_list|,
literal|null
argument_list|,
name|bbox
operator|.
name|getMaxX
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Query
name|qMinMax
init|=
name|this
operator|.
name|makeQuery
argument_list|(
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|,
name|qMinX
argument_list|,
name|qMaxX
argument_list|)
decl_stmt|;
name|Query
name|qNonXDL
init|=
name|this
operator|.
name|makeXDL
argument_list|(
literal|false
argument_list|,
name|qMinMax
argument_list|)
decl_stmt|;
comment|// apply the non-XDL or XDL X conditions
if|if
condition|(
operator|(
name|bbox
operator|.
name|getMinX
argument_list|()
operator|<=
operator|-
literal|180.0
operator|)
operator|&&
name|bbox
operator|.
name|getMaxX
argument_list|()
operator|>=
literal|180.0
condition|)
block|{
name|xConditions
operator|=
name|this
operator|.
name|makeQuery
argument_list|(
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|,
name|qNonXDL
argument_list|,
name|qXDL
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|xConditions
operator|=
name|qNonXDL
expr_stmt|;
block|}
comment|// queries that cross the date line
block|}
else|else
block|{
comment|// X Conditions for documents that do not cross the date line
comment|// the document should be within the left portion of the query
comment|// docMinX>= queryExtent.getMinX() AND docMaxX<= 180.0
name|Query
name|qMinXLeft
init|=
name|NumericRangeQuery
operator|.
name|newDoubleRange
argument_list|(
name|field_minX
argument_list|,
name|precisionStep
argument_list|,
name|bbox
operator|.
name|getMinX
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Query
name|qMaxXLeft
init|=
name|NumericRangeQuery
operator|.
name|newDoubleRange
argument_list|(
name|field_maxX
argument_list|,
name|precisionStep
argument_list|,
literal|null
argument_list|,
literal|180.0
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Query
name|qLeft
init|=
name|this
operator|.
name|makeQuery
argument_list|(
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|,
name|qMinXLeft
argument_list|,
name|qMaxXLeft
argument_list|)
decl_stmt|;
comment|// the document should be within the right portion of the query
comment|// docMinX>= -180.0 AND docMaxX<= queryExtent.getMaxX()
name|Query
name|qMinXRight
init|=
name|NumericRangeQuery
operator|.
name|newDoubleRange
argument_list|(
name|field_minX
argument_list|,
name|precisionStep
argument_list|,
operator|-
literal|180.0
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Query
name|qMaxXRight
init|=
name|NumericRangeQuery
operator|.
name|newDoubleRange
argument_list|(
name|field_maxX
argument_list|,
name|precisionStep
argument_list|,
literal|null
argument_list|,
name|bbox
operator|.
name|getMaxX
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Query
name|qRight
init|=
name|this
operator|.
name|makeQuery
argument_list|(
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|,
name|qMinXRight
argument_list|,
name|qMaxXRight
argument_list|)
decl_stmt|;
comment|// either left or right conditions should occur,
comment|// apply the left and right conditions to documents that do not cross the date line
name|Query
name|qLeftRight
init|=
name|this
operator|.
name|makeQuery
argument_list|(
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|,
name|qLeft
argument_list|,
name|qRight
argument_list|)
decl_stmt|;
name|Query
name|qNonXDL
init|=
name|this
operator|.
name|makeXDL
argument_list|(
literal|false
argument_list|,
name|qLeftRight
argument_list|)
decl_stmt|;
comment|// apply the non-XDL and XDL conditions
name|xConditions
operator|=
name|this
operator|.
name|makeQuery
argument_list|(
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|,
name|qNonXDL
argument_list|,
name|qXDL
argument_list|)
expr_stmt|;
block|}
comment|// both X and Y conditions must occur
return|return
name|this
operator|.
name|makeQuery
argument_list|(
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|,
name|xConditions
argument_list|,
name|yConditions
argument_list|)
return|;
block|}
comment|/**    * Constructs a query to retrieve documents that do or do not cross the date line.    *    *    * @param crossedDateLine<code>true</true> for documents that cross the date line    * @return the query    */
DECL|method|makeXDL
name|Query
name|makeXDL
parameter_list|(
name|boolean
name|crossedDateLine
parameter_list|)
block|{
comment|// The 'T' and 'F' values match solr fields
return|return
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|field_xdl
argument_list|,
name|crossedDateLine
condition|?
literal|"T"
else|:
literal|"F"
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Constructs a query to retrieve documents that do or do not cross the date line    * and match the supplied spatial query.    *    * @param crossedDateLine<code>true</true> for documents that cross the date line    * @param query the spatial query    * @return the query    */
DECL|method|makeXDL
name|Query
name|makeXDL
parameter_list|(
name|boolean
name|crossedDateLine
parameter_list|,
name|Query
name|query
parameter_list|)
block|{
name|BooleanQuery
name|bq
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|this
operator|.
name|makeXDL
argument_list|(
name|crossedDateLine
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|query
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
return|return
name|bq
return|;
block|}
block|}
end_class
end_unit
