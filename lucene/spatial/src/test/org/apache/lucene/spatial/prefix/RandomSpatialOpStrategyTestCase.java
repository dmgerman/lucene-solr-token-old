begin_unit
begin_package
DECL|package|org.apache.lucene.spatial.prefix
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|prefix
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|com
operator|.
name|spatial4j
operator|.
name|core
operator|.
name|shape
operator|.
name|Shape
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|StrategyTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|query
operator|.
name|SpatialArgs
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|query
operator|.
name|SpatialOperation
import|;
end_import
begin_import
import|import static
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|RandomizedTest
operator|.
name|randomInt
import|;
end_import
begin_import
import|import static
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|RandomizedTest
operator|.
name|randomIntBetween
import|;
end_import
begin_comment
comment|/** Base test harness, ideally for SpatialStrategy impls that have exact results  * (not grid approximated), hence "not fuzzy".  */
end_comment
begin_class
DECL|class|RandomSpatialOpStrategyTestCase
specifier|public
specifier|abstract
class|class
name|RandomSpatialOpStrategyTestCase
extends|extends
name|StrategyTestCase
block|{
comment|//Note: this is partially redundant with StrategyTestCase.runTestQuery& testOperation
DECL|method|testOperationRandomShapes
specifier|protected
name|void
name|testOperationRandomShapes
parameter_list|(
specifier|final
name|SpatialOperation
name|operation
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|int
name|numIndexedShapes
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|6
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Shape
argument_list|>
name|indexedShapes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|numIndexedShapes
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numIndexedShapes
condition|;
name|i
operator|++
control|)
block|{
name|indexedShapes
operator|.
name|add
argument_list|(
name|randomIndexedShape
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|final
name|int
name|numQueryShapes
init|=
name|atLeast
argument_list|(
literal|20
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Shape
argument_list|>
name|queryShapes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|numQueryShapes
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numQueryShapes
condition|;
name|i
operator|++
control|)
block|{
name|queryShapes
operator|.
name|add
argument_list|(
name|randomQueryShape
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|testOperation
argument_list|(
name|operation
argument_list|,
name|indexedShapes
argument_list|,
name|queryShapes
argument_list|,
literal|true
comment|/*havoc*/
argument_list|)
expr_stmt|;
block|}
DECL|method|testOperation
specifier|protected
name|void
name|testOperation
parameter_list|(
specifier|final
name|SpatialOperation
name|operation
parameter_list|,
name|List
argument_list|<
name|Shape
argument_list|>
name|indexedShapes
parameter_list|,
name|List
argument_list|<
name|Shape
argument_list|>
name|queryShapes
parameter_list|,
name|boolean
name|havoc
parameter_list|)
throws|throws
name|IOException
block|{
comment|//first show that when there's no data, a query will result in no results
block|{
name|Query
name|query
init|=
name|strategy
operator|.
name|makeQuery
argument_list|(
operator|new
name|SpatialArgs
argument_list|(
name|operation
argument_list|,
name|randomQueryShape
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|SearchResults
name|searchResults
init|=
name|executeQuery
argument_list|(
name|query
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|searchResults
operator|.
name|numFound
argument_list|)
expr_stmt|;
block|}
comment|//Main index loop:
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|indexedShapes
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Shape
name|shape
init|=
name|indexedShapes
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|adoc
argument_list|(
literal|""
operator|+
name|i
argument_list|,
name|shape
argument_list|)
expr_stmt|;
if|if
condition|(
name|havoc
operator|&&
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
operator|==
literal|0
condition|)
name|commit
argument_list|()
expr_stmt|;
comment|//intermediate commit, produces extra segments
block|}
if|if
condition|(
name|havoc
condition|)
block|{
comment|//delete some documents randomly
for|for
control|(
name|int
name|id
init|=
literal|0
init|;
name|id
operator|<
name|indexedShapes
operator|.
name|size
argument_list|()
condition|;
name|id
operator|++
control|)
block|{
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
operator|==
literal|0
condition|)
block|{
name|deleteDoc
argument_list|(
literal|""
operator|+
name|id
argument_list|)
expr_stmt|;
name|indexedShapes
operator|.
name|set
argument_list|(
name|id
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|commit
argument_list|()
expr_stmt|;
comment|//Main query loop:
for|for
control|(
name|int
name|queryIdx
init|=
literal|0
init|;
name|queryIdx
operator|<
name|queryShapes
operator|.
name|size
argument_list|()
condition|;
name|queryIdx
operator|++
control|)
block|{
specifier|final
name|Shape
name|queryShape
init|=
name|queryShapes
operator|.
name|get
argument_list|(
name|queryIdx
argument_list|)
decl_stmt|;
if|if
condition|(
name|havoc
condition|)
name|preQueryHavoc
argument_list|()
expr_stmt|;
comment|//Generate truth via brute force:
comment|// We ensure true-positive matches (if the predicate on the raw shapes match
comment|//  then the search should find those same matches).
name|Set
argument_list|<
name|String
argument_list|>
name|expectedIds
init|=
operator|new
name|LinkedHashSet
argument_list|<>
argument_list|()
decl_stmt|;
comment|//true-positives
for|for
control|(
name|int
name|id
init|=
literal|0
init|;
name|id
operator|<
name|indexedShapes
operator|.
name|size
argument_list|()
condition|;
name|id
operator|++
control|)
block|{
name|Shape
name|indexedShape
init|=
name|indexedShapes
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexedShape
operator|==
literal|null
condition|)
continue|continue;
if|if
condition|(
name|operation
operator|.
name|evaluate
argument_list|(
name|indexedShape
argument_list|,
name|queryShape
argument_list|)
condition|)
block|{
name|expectedIds
operator|.
name|add
argument_list|(
literal|""
operator|+
name|id
argument_list|)
expr_stmt|;
block|}
block|}
comment|//Search and verify results
name|SpatialArgs
name|args
init|=
operator|new
name|SpatialArgs
argument_list|(
name|operation
argument_list|,
name|queryShape
argument_list|)
decl_stmt|;
name|Query
name|query
init|=
name|strategy
operator|.
name|makeQuery
argument_list|(
name|args
argument_list|)
decl_stmt|;
name|SearchResults
name|got
init|=
name|executeQuery
argument_list|(
name|query
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|remainingExpectedIds
init|=
operator|new
name|LinkedHashSet
argument_list|<>
argument_list|(
name|expectedIds
argument_list|)
decl_stmt|;
for|for
control|(
name|SearchResult
name|result
range|:
name|got
operator|.
name|results
control|)
block|{
name|String
name|id
init|=
name|result
operator|.
name|getId
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|remainingExpectedIds
operator|.
name|remove
argument_list|(
name|id
argument_list|)
condition|)
block|{
name|fail
argument_list|(
literal|"Shouldn't match"
argument_list|,
name|id
argument_list|,
name|indexedShapes
argument_list|,
name|queryShape
argument_list|,
name|operation
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|remainingExpectedIds
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
name|id
init|=
name|remainingExpectedIds
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|fail
argument_list|(
literal|"Should have matched"
argument_list|,
name|id
argument_list|,
name|indexedShapes
argument_list|,
name|queryShape
argument_list|,
name|operation
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|fail
specifier|private
name|void
name|fail
parameter_list|(
name|String
name|label
parameter_list|,
name|String
name|id
parameter_list|,
name|List
argument_list|<
name|Shape
argument_list|>
name|indexedShapes
parameter_list|,
name|Shape
name|queryShape
parameter_list|,
name|SpatialOperation
name|operation
parameter_list|)
block|{
name|fail
argument_list|(
literal|"["
operator|+
name|operation
operator|+
literal|"] "
operator|+
name|label
operator|+
literal|" I#"
operator|+
name|id
operator|+
literal|":"
operator|+
name|indexedShapes
operator|.
name|get
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|id
argument_list|)
argument_list|)
operator|+
literal|" Q:"
operator|+
name|queryShape
argument_list|)
expr_stmt|;
block|}
DECL|method|preQueryHavoc
specifier|protected
name|void
name|preQueryHavoc
parameter_list|()
block|{
if|if
condition|(
name|strategy
operator|instanceof
name|RecursivePrefixTreeStrategy
condition|)
block|{
name|RecursivePrefixTreeStrategy
name|rpts
init|=
operator|(
name|RecursivePrefixTreeStrategy
operator|)
name|strategy
decl_stmt|;
name|int
name|scanLevel
init|=
name|randomInt
argument_list|(
name|rpts
operator|.
name|getGrid
argument_list|()
operator|.
name|getMaxLevels
argument_list|()
argument_list|)
decl_stmt|;
name|rpts
operator|.
name|setPrefixGridScanLevel
argument_list|(
name|scanLevel
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|randomIndexedShape
specifier|protected
specifier|abstract
name|Shape
name|randomIndexedShape
parameter_list|()
function_decl|;
DECL|method|randomQueryShape
specifier|protected
specifier|abstract
name|Shape
name|randomQueryShape
parameter_list|()
function_decl|;
block|}
end_class
end_unit
