begin_unit
begin_package
DECL|package|org.apache.lucene.spatial.util
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|util
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRefBuilder
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|geo
operator|.
name|GeoTestUtil
operator|.
name|nextLatitude
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|geo
operator|.
name|GeoTestUtil
operator|.
name|nextLongitude
import|;
end_import
begin_comment
comment|/**  * Tests methods in {@link GeoEncodingUtils}  */
end_comment
begin_class
DECL|class|TestGeoEncodingUtils
specifier|public
class|class
name|TestGeoEncodingUtils
extends|extends
name|LuceneTestCase
block|{
comment|/**    * Tests stability of {@link GeoEncodingUtils#geoCodedToPrefixCoded}    */
DECL|method|testGeoPrefixCoding
specifier|public
name|void
name|testGeoPrefixCoding
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|numIters
init|=
name|atLeast
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
name|long
name|hash
decl_stmt|;
name|long
name|decodedHash
decl_stmt|;
name|BytesRefBuilder
name|brb
init|=
operator|new
name|BytesRefBuilder
argument_list|()
decl_stmt|;
while|while
condition|(
name|numIters
operator|--
operator|>=
literal|0
condition|)
block|{
name|hash
operator|=
name|GeoEncodingUtils
operator|.
name|mortonHash
argument_list|(
name|nextLatitude
argument_list|()
argument_list|,
name|nextLongitude
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|32
init|;
name|i
operator|<
literal|64
condition|;
operator|++
name|i
control|)
block|{
name|GeoEncodingUtils
operator|.
name|geoCodedToPrefixCoded
argument_list|(
name|hash
argument_list|,
name|i
argument_list|,
name|brb
argument_list|)
expr_stmt|;
name|decodedHash
operator|=
name|GeoEncodingUtils
operator|.
name|prefixCodedToGeoCoded
argument_list|(
name|brb
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|hash
operator|>>>
name|i
operator|)
operator|<<
name|i
argument_list|,
name|decodedHash
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testMortonEncoding
specifier|public
name|void
name|testMortonEncoding
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|hash
init|=
name|GeoEncodingUtils
operator|.
name|mortonHash
argument_list|(
literal|90
argument_list|,
literal|180
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|180.0
argument_list|,
name|GeoEncodingUtils
operator|.
name|mortonUnhashLon
argument_list|(
name|hash
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|90.0
argument_list|,
name|GeoEncodingUtils
operator|.
name|mortonUnhashLat
argument_list|(
name|hash
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|testEncodeDecode
specifier|public
name|void
name|testEncodeDecode
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|iters
init|=
name|atLeast
argument_list|(
literal|10000
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|iter
init|=
literal|0
init|;
name|iter
operator|<
name|iters
condition|;
name|iter
operator|++
control|)
block|{
name|double
name|lat
init|=
name|nextLatitude
argument_list|()
decl_stmt|;
name|double
name|lon
init|=
name|nextLongitude
argument_list|()
decl_stmt|;
name|long
name|enc
init|=
name|GeoEncodingUtils
operator|.
name|mortonHash
argument_list|(
name|lat
argument_list|,
name|lon
argument_list|)
decl_stmt|;
name|double
name|latEnc
init|=
name|GeoEncodingUtils
operator|.
name|mortonUnhashLat
argument_list|(
name|enc
argument_list|)
decl_stmt|;
name|double
name|lonEnc
init|=
name|GeoEncodingUtils
operator|.
name|mortonUnhashLon
argument_list|(
name|enc
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"lat="
operator|+
name|lat
operator|+
literal|" latEnc="
operator|+
name|latEnc
operator|+
literal|" diff="
operator|+
operator|(
name|lat
operator|-
name|latEnc
operator|)
argument_list|,
name|lat
argument_list|,
name|latEnc
argument_list|,
name|GeoEncodingUtils
operator|.
name|TOLERANCE
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"lon="
operator|+
name|lon
operator|+
literal|" lonEnc="
operator|+
name|lonEnc
operator|+
literal|" diff="
operator|+
operator|(
name|lon
operator|-
name|lonEnc
operator|)
argument_list|,
name|lon
argument_list|,
name|lonEnc
argument_list|,
name|GeoEncodingUtils
operator|.
name|TOLERANCE
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** make sure values always go down: this is important for edge case consistency */
DECL|method|testEncodeDecodeRoundsDown
specifier|public
name|void
name|testEncodeDecodeRoundsDown
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|iters
init|=
name|atLeast
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|iter
init|=
literal|0
init|;
name|iter
operator|<
name|iters
condition|;
name|iter
operator|++
control|)
block|{
name|double
name|lat
init|=
operator|-
literal|90
operator|+
literal|180.0
operator|*
name|random
argument_list|()
operator|.
name|nextDouble
argument_list|()
decl_stmt|;
name|double
name|lon
init|=
operator|-
literal|180
operator|+
literal|360.0
operator|*
name|random
argument_list|()
operator|.
name|nextDouble
argument_list|()
decl_stmt|;
name|long
name|enc
init|=
name|GeoEncodingUtils
operator|.
name|mortonHash
argument_list|(
name|lat
argument_list|,
name|lon
argument_list|)
decl_stmt|;
name|double
name|latEnc
init|=
name|GeoEncodingUtils
operator|.
name|mortonUnhashLat
argument_list|(
name|enc
argument_list|)
decl_stmt|;
name|double
name|lonEnc
init|=
name|GeoEncodingUtils
operator|.
name|mortonUnhashLon
argument_list|(
name|enc
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|latEnc
operator|<=
name|lat
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|lonEnc
operator|<=
name|lon
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testScaleUnscaleIsStable
specifier|public
name|void
name|testScaleUnscaleIsStable
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|iters
init|=
name|atLeast
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|iter
init|=
literal|0
init|;
name|iter
operator|<
name|iters
condition|;
name|iter
operator|++
control|)
block|{
name|double
name|lat
init|=
name|nextLatitude
argument_list|()
decl_stmt|;
name|double
name|lon
init|=
name|nextLongitude
argument_list|()
decl_stmt|;
name|long
name|enc
init|=
name|GeoEncodingUtils
operator|.
name|mortonHash
argument_list|(
name|lat
argument_list|,
name|lon
argument_list|)
decl_stmt|;
name|double
name|latEnc
init|=
name|GeoEncodingUtils
operator|.
name|mortonUnhashLat
argument_list|(
name|enc
argument_list|)
decl_stmt|;
name|double
name|lonEnc
init|=
name|GeoEncodingUtils
operator|.
name|mortonUnhashLon
argument_list|(
name|enc
argument_list|)
decl_stmt|;
name|long
name|enc2
init|=
name|GeoEncodingUtils
operator|.
name|mortonHash
argument_list|(
name|lat
argument_list|,
name|lon
argument_list|)
decl_stmt|;
name|double
name|latEnc2
init|=
name|GeoEncodingUtils
operator|.
name|mortonUnhashLat
argument_list|(
name|enc2
argument_list|)
decl_stmt|;
name|double
name|lonEnc2
init|=
name|GeoEncodingUtils
operator|.
name|mortonUnhashLon
argument_list|(
name|enc2
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|latEnc
argument_list|,
name|latEnc2
argument_list|,
literal|0.0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|lonEnc
argument_list|,
name|lonEnc2
argument_list|,
literal|0.0
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class
end_unit
