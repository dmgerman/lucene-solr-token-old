begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.spatial.util
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|util
package|;
end_package
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import
begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|RandomizedContext
import|;
end_import
begin_comment
comment|/** static methods for testing geo */
end_comment
begin_class
DECL|class|GeoTestUtil
specifier|public
class|class
name|GeoTestUtil
block|{
comment|/** returns next pseudorandom latitude (anywhere) */
DECL|method|nextLatitude
specifier|public
specifier|static
name|double
name|nextLatitude
parameter_list|()
block|{
return|return
operator|-
literal|90
operator|+
literal|180.0
operator|*
name|random
argument_list|()
operator|.
name|nextDouble
argument_list|()
return|;
block|}
comment|/** returns next pseudorandom longitude (anywhere) */
DECL|method|nextLongitude
specifier|public
specifier|static
name|double
name|nextLongitude
parameter_list|()
block|{
return|return
operator|-
literal|180
operator|+
literal|360.0
operator|*
name|random
argument_list|()
operator|.
name|nextDouble
argument_list|()
return|;
block|}
comment|/** returns next pseudorandom latitude, kinda close to {@code otherLatitude} */
DECL|method|nextLatitudeNear
specifier|public
specifier|static
name|double
name|nextLatitudeNear
parameter_list|(
name|double
name|otherLatitude
parameter_list|)
block|{
name|GeoUtils
operator|.
name|checkLatitude
argument_list|(
name|otherLatitude
argument_list|)
expr_stmt|;
return|return
name|normalizeLatitude
argument_list|(
name|otherLatitude
operator|+
name|random
argument_list|()
operator|.
name|nextDouble
argument_list|()
operator|-
literal|0.5
argument_list|)
return|;
block|}
comment|/** returns next pseudorandom longitude, kinda close to {@code otherLongitude} */
DECL|method|nextLongitudeNear
specifier|public
specifier|static
name|double
name|nextLongitudeNear
parameter_list|(
name|double
name|otherLongitude
parameter_list|)
block|{
name|GeoUtils
operator|.
name|checkLongitude
argument_list|(
name|otherLongitude
argument_list|)
expr_stmt|;
return|return
name|normalizeLongitude
argument_list|(
name|otherLongitude
operator|+
name|random
argument_list|()
operator|.
name|nextDouble
argument_list|()
operator|-
literal|0.5
argument_list|)
return|;
block|}
comment|/**     * returns next pseudorandom latitude, kinda close to {@code minLatitude/maxLatitude}    *<b>NOTE:</b>minLatitude/maxLatitude are merely guidelines. the returned value is sometimes    * outside of that range! this is to facilitate edge testing.    */
DECL|method|nextLatitudeAround
specifier|public
specifier|static
name|double
name|nextLatitudeAround
parameter_list|(
name|double
name|minLatitude
parameter_list|,
name|double
name|maxLatitude
parameter_list|)
block|{
name|GeoUtils
operator|.
name|checkLatitude
argument_list|(
name|minLatitude
argument_list|)
expr_stmt|;
name|GeoUtils
operator|.
name|checkLatitude
argument_list|(
name|maxLatitude
argument_list|)
expr_stmt|;
return|return
name|normalizeLatitude
argument_list|(
name|randomRangeMaybeSlightlyOutside
argument_list|(
name|minLatitude
argument_list|,
name|maxLatitude
argument_list|)
argument_list|)
return|;
block|}
comment|/**     * returns next pseudorandom longitude, kinda close to {@code minLongitude/maxLongitude}    *<b>NOTE:</b>minLongitude/maxLongitude are merely guidelines. the returned value is sometimes    * outside of that range! this is to facilitate edge testing.    */
DECL|method|nextLongitudeAround
specifier|public
specifier|static
name|double
name|nextLongitudeAround
parameter_list|(
name|double
name|minLongitude
parameter_list|,
name|double
name|maxLongitude
parameter_list|)
block|{
name|GeoUtils
operator|.
name|checkLongitude
argument_list|(
name|minLongitude
argument_list|)
expr_stmt|;
name|GeoUtils
operator|.
name|checkLongitude
argument_list|(
name|maxLongitude
argument_list|)
expr_stmt|;
return|return
name|normalizeLongitude
argument_list|(
name|randomRangeMaybeSlightlyOutside
argument_list|(
name|minLongitude
argument_list|,
name|maxLongitude
argument_list|)
argument_list|)
return|;
block|}
comment|/** returns next pseudorandom box: can cross the 180th meridian */
DECL|method|nextBox
specifier|public
specifier|static
name|GeoRect
name|nextBox
parameter_list|()
block|{
return|return
name|nextBoxInternal
argument_list|(
name|nextLatitude
argument_list|()
argument_list|,
name|nextLatitude
argument_list|()
argument_list|,
name|nextLongitude
argument_list|()
argument_list|,
name|nextLongitude
argument_list|()
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/** returns next pseudorandom box, can cross the 180th meridian, kinda close to {@code otherLatitude} and {@code otherLongitude} */
DECL|method|nextBoxNear
specifier|public
specifier|static
name|GeoRect
name|nextBoxNear
parameter_list|(
name|double
name|otherLatitude
parameter_list|,
name|double
name|otherLongitude
parameter_list|)
block|{
name|GeoUtils
operator|.
name|checkLongitude
argument_list|(
name|otherLongitude
argument_list|)
expr_stmt|;
name|GeoUtils
operator|.
name|checkLongitude
argument_list|(
name|otherLongitude
argument_list|)
expr_stmt|;
return|return
name|nextBoxInternal
argument_list|(
name|nextLatitudeNear
argument_list|(
name|otherLatitude
argument_list|)
argument_list|,
name|nextLatitudeNear
argument_list|(
name|otherLatitude
argument_list|)
argument_list|,
name|nextLongitudeNear
argument_list|(
name|otherLongitude
argument_list|)
argument_list|,
name|nextLongitudeNear
argument_list|(
name|otherLongitude
argument_list|)
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/** returns next pseudorandom polygon */
DECL|method|nextPolygon
specifier|public
specifier|static
name|double
index|[]
index|[]
name|nextPolygon
parameter_list|()
block|{
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
return|return
name|surpriseMePolygon
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
name|GeoRect
name|box
init|=
name|nextBoxInternal
argument_list|(
name|nextLatitude
argument_list|()
argument_list|,
name|nextLatitude
argument_list|()
argument_list|,
name|nextLongitude
argument_list|()
argument_list|,
name|nextLongitude
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
comment|// box
return|return
name|boxPolygon
argument_list|(
name|box
argument_list|)
return|;
block|}
else|else
block|{
comment|// triangle
return|return
name|trianglePolygon
argument_list|(
name|box
argument_list|)
return|;
block|}
block|}
comment|/** returns next pseudorandom polygon, kinda close to {@code otherLatitude} and {@code otherLongitude} */
DECL|method|nextPolygonNear
specifier|public
specifier|static
name|double
index|[]
index|[]
name|nextPolygonNear
parameter_list|(
name|double
name|otherLatitude
parameter_list|,
name|double
name|otherLongitude
parameter_list|)
block|{
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
return|return
name|surpriseMePolygon
argument_list|(
name|otherLatitude
argument_list|,
name|otherLongitude
argument_list|)
return|;
block|}
name|GeoRect
name|box
init|=
name|nextBoxInternal
argument_list|(
name|nextLatitudeNear
argument_list|(
name|otherLatitude
argument_list|)
argument_list|,
name|nextLatitudeNear
argument_list|(
name|otherLatitude
argument_list|)
argument_list|,
name|nextLongitudeNear
argument_list|(
name|otherLongitude
argument_list|)
argument_list|,
name|nextLongitudeNear
argument_list|(
name|otherLongitude
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
comment|// box
return|return
name|boxPolygon
argument_list|(
name|box
argument_list|)
return|;
block|}
else|else
block|{
comment|// triangle
return|return
name|trianglePolygon
argument_list|(
name|box
argument_list|)
return|;
block|}
block|}
DECL|method|nextBoxInternal
specifier|private
specifier|static
name|GeoRect
name|nextBoxInternal
parameter_list|(
name|double
name|lat0
parameter_list|,
name|double
name|lat1
parameter_list|,
name|double
name|lon0
parameter_list|,
name|double
name|lon1
parameter_list|,
name|boolean
name|canCrossDateLine
parameter_list|)
block|{
if|if
condition|(
name|lat1
operator|<
name|lat0
condition|)
block|{
name|double
name|x
init|=
name|lat0
decl_stmt|;
name|lat0
operator|=
name|lat1
expr_stmt|;
name|lat1
operator|=
name|x
expr_stmt|;
block|}
if|if
condition|(
name|canCrossDateLine
operator|==
literal|false
operator|&&
name|lon1
operator|<
name|lon0
condition|)
block|{
name|double
name|x
init|=
name|lon0
decl_stmt|;
name|lon0
operator|=
name|lon1
expr_stmt|;
name|lon1
operator|=
name|x
expr_stmt|;
block|}
return|return
operator|new
name|GeoRect
argument_list|(
name|lat0
argument_list|,
name|lat1
argument_list|,
name|lon0
argument_list|,
name|lon1
argument_list|)
return|;
block|}
DECL|method|boxPolygon
specifier|private
specifier|static
name|double
index|[]
index|[]
name|boxPolygon
parameter_list|(
name|GeoRect
name|box
parameter_list|)
block|{
assert|assert
name|box
operator|.
name|crossesDateline
argument_list|()
operator|==
literal|false
assert|;
specifier|final
name|double
index|[]
name|polyLats
init|=
operator|new
name|double
index|[
literal|5
index|]
decl_stmt|;
specifier|final
name|double
index|[]
name|polyLons
init|=
operator|new
name|double
index|[
literal|5
index|]
decl_stmt|;
name|polyLats
index|[
literal|0
index|]
operator|=
name|box
operator|.
name|minLat
expr_stmt|;
name|polyLons
index|[
literal|0
index|]
operator|=
name|box
operator|.
name|minLon
expr_stmt|;
name|polyLats
index|[
literal|1
index|]
operator|=
name|box
operator|.
name|maxLat
expr_stmt|;
name|polyLons
index|[
literal|1
index|]
operator|=
name|box
operator|.
name|minLon
expr_stmt|;
name|polyLats
index|[
literal|2
index|]
operator|=
name|box
operator|.
name|maxLat
expr_stmt|;
name|polyLons
index|[
literal|2
index|]
operator|=
name|box
operator|.
name|maxLon
expr_stmt|;
name|polyLats
index|[
literal|3
index|]
operator|=
name|box
operator|.
name|minLat
expr_stmt|;
name|polyLons
index|[
literal|3
index|]
operator|=
name|box
operator|.
name|maxLon
expr_stmt|;
name|polyLats
index|[
literal|4
index|]
operator|=
name|box
operator|.
name|minLat
expr_stmt|;
name|polyLons
index|[
literal|4
index|]
operator|=
name|box
operator|.
name|minLon
expr_stmt|;
return|return
operator|new
name|double
index|[]
index|[]
block|{
name|polyLats
block|,
name|polyLons
block|}
return|;
block|}
DECL|method|trianglePolygon
specifier|private
specifier|static
name|double
index|[]
index|[]
name|trianglePolygon
parameter_list|(
name|GeoRect
name|box
parameter_list|)
block|{
assert|assert
name|box
operator|.
name|crossesDateline
argument_list|()
operator|==
literal|false
assert|;
specifier|final
name|double
index|[]
name|polyLats
init|=
operator|new
name|double
index|[
literal|4
index|]
decl_stmt|;
specifier|final
name|double
index|[]
name|polyLons
init|=
operator|new
name|double
index|[
literal|4
index|]
decl_stmt|;
name|polyLats
index|[
literal|0
index|]
operator|=
name|box
operator|.
name|minLat
expr_stmt|;
name|polyLons
index|[
literal|0
index|]
operator|=
name|box
operator|.
name|minLon
expr_stmt|;
name|polyLats
index|[
literal|1
index|]
operator|=
name|box
operator|.
name|maxLat
expr_stmt|;
name|polyLons
index|[
literal|1
index|]
operator|=
name|box
operator|.
name|minLon
expr_stmt|;
name|polyLats
index|[
literal|2
index|]
operator|=
name|box
operator|.
name|maxLat
expr_stmt|;
name|polyLons
index|[
literal|2
index|]
operator|=
name|box
operator|.
name|maxLon
expr_stmt|;
name|polyLats
index|[
literal|3
index|]
operator|=
name|box
operator|.
name|minLat
expr_stmt|;
name|polyLons
index|[
literal|3
index|]
operator|=
name|box
operator|.
name|minLon
expr_stmt|;
return|return
operator|new
name|double
index|[]
index|[]
block|{
name|polyLats
block|,
name|polyLons
block|}
return|;
block|}
comment|/** Returns {polyLats, polyLons} double[] array */
DECL|method|surpriseMePolygon
specifier|private
specifier|static
name|double
index|[]
index|[]
name|surpriseMePolygon
parameter_list|(
name|Double
name|otherLatitude
parameter_list|,
name|Double
name|otherLongitude
parameter_list|)
block|{
comment|// repeat until we get a poly that doesn't cross dateline:
name|newPoly
label|:
while|while
condition|(
literal|true
condition|)
block|{
comment|//System.out.println("\nPOLY ITER");
specifier|final
name|double
name|centerLat
decl_stmt|;
specifier|final
name|double
name|centerLon
decl_stmt|;
if|if
condition|(
name|otherLatitude
operator|==
literal|null
condition|)
block|{
name|centerLat
operator|=
name|nextLatitude
argument_list|()
expr_stmt|;
name|centerLon
operator|=
name|nextLongitude
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|GeoUtils
operator|.
name|checkLatitude
argument_list|(
name|otherLatitude
argument_list|)
expr_stmt|;
name|GeoUtils
operator|.
name|checkLongitude
argument_list|(
name|otherLongitude
argument_list|)
expr_stmt|;
name|centerLat
operator|=
name|nextLatitudeNear
argument_list|(
name|otherLatitude
argument_list|)
expr_stmt|;
name|centerLon
operator|=
name|nextLongitudeNear
argument_list|(
name|otherLongitude
argument_list|)
expr_stmt|;
block|}
name|double
name|radius
init|=
literal|0.1
operator|+
literal|20
operator|*
name|random
argument_list|()
operator|.
name|nextDouble
argument_list|()
decl_stmt|;
name|double
name|radiusDelta
init|=
name|random
argument_list|()
operator|.
name|nextDouble
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|Double
argument_list|>
name|lats
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|Double
argument_list|>
name|lons
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|double
name|angle
init|=
literal|0.0
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|angle
operator|+=
name|random
argument_list|()
operator|.
name|nextDouble
argument_list|()
operator|*
literal|40.0
expr_stmt|;
comment|//System.out.println("  angle " + angle);
if|if
condition|(
name|angle
operator|>
literal|360
condition|)
block|{
break|break;
block|}
name|double
name|len
init|=
name|radius
operator|*
operator|(
literal|1.0
operator|-
name|radiusDelta
operator|+
name|radiusDelta
operator|*
name|random
argument_list|()
operator|.
name|nextDouble
argument_list|()
operator|)
decl_stmt|;
comment|//System.out.println("    len=" + len);
name|double
name|lat
init|=
name|centerLat
operator|+
name|len
operator|*
name|Math
operator|.
name|cos
argument_list|(
name|Math
operator|.
name|toRadians
argument_list|(
name|angle
argument_list|)
argument_list|)
decl_stmt|;
name|double
name|lon
init|=
name|centerLon
operator|+
name|len
operator|*
name|Math
operator|.
name|sin
argument_list|(
name|Math
operator|.
name|toRadians
argument_list|(
name|angle
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|lon
operator|<=
name|GeoUtils
operator|.
name|MIN_LON_INCL
operator|||
name|lon
operator|>=
name|GeoUtils
operator|.
name|MAX_LON_INCL
condition|)
block|{
comment|// cannot cross dateline: try again!
continue|continue
name|newPoly
continue|;
block|}
if|if
condition|(
name|lat
operator|>
literal|90
condition|)
block|{
comment|// cross the north pole
name|lat
operator|=
literal|180
operator|-
name|lat
expr_stmt|;
name|lon
operator|=
literal|180
operator|-
name|lon
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|lat
operator|<
operator|-
literal|90
condition|)
block|{
comment|// cross the south pole
name|lat
operator|=
operator|-
literal|180
operator|-
name|lat
expr_stmt|;
name|lon
operator|=
literal|180
operator|-
name|lon
expr_stmt|;
block|}
if|if
condition|(
name|lon
operator|<=
name|GeoUtils
operator|.
name|MIN_LON_INCL
operator|||
name|lon
operator|>=
name|GeoUtils
operator|.
name|MAX_LON_INCL
condition|)
block|{
comment|// cannot cross dateline: try again!
continue|continue
name|newPoly
continue|;
block|}
name|lats
operator|.
name|add
argument_list|(
name|lat
argument_list|)
expr_stmt|;
name|lons
operator|.
name|add
argument_list|(
name|lon
argument_list|)
expr_stmt|;
comment|//System.out.println("    lat=" + lats.get(lats.size()-1) + " lon=" + lons.get(lons.size()-1));
block|}
comment|// close it
name|lats
operator|.
name|add
argument_list|(
name|lats
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|lons
operator|.
name|add
argument_list|(
name|lons
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|double
index|[]
name|latsArray
init|=
operator|new
name|double
index|[
name|lats
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|double
index|[]
name|lonsArray
init|=
operator|new
name|double
index|[
name|lons
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|lats
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|latsArray
index|[
name|i
index|]
operator|=
name|lats
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|lonsArray
index|[
name|i
index|]
operator|=
name|lons
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|double
index|[]
index|[]
block|{
name|latsArray
block|,
name|lonsArray
block|}
return|;
block|}
block|}
comment|/** Returns random double min to max or up to 1% outside of that range */
DECL|method|randomRangeMaybeSlightlyOutside
specifier|private
specifier|static
name|double
name|randomRangeMaybeSlightlyOutside
parameter_list|(
name|double
name|min
parameter_list|,
name|double
name|max
parameter_list|)
block|{
return|return
name|min
operator|+
operator|(
name|random
argument_list|()
operator|.
name|nextDouble
argument_list|()
operator|+
operator|(
literal|0.5
operator|-
name|random
argument_list|()
operator|.
name|nextDouble
argument_list|()
operator|)
operator|*
literal|.02
operator|)
operator|*
operator|(
name|max
operator|-
name|min
operator|)
return|;
block|}
comment|/** Puts latitude in range of -90 to 90. */
DECL|method|normalizeLatitude
specifier|private
specifier|static
name|double
name|normalizeLatitude
parameter_list|(
name|double
name|latitude
parameter_list|)
block|{
if|if
condition|(
name|latitude
operator|>=
operator|-
literal|90
operator|&&
name|latitude
operator|<=
literal|90
condition|)
block|{
return|return
name|latitude
return|;
comment|//common case, and avoids slight double precision shifting
block|}
name|double
name|off
init|=
name|Math
operator|.
name|abs
argument_list|(
operator|(
name|latitude
operator|+
literal|90
operator|)
operator|%
literal|360
argument_list|)
decl_stmt|;
return|return
operator|(
name|off
operator|<=
literal|180
condition|?
name|off
else|:
literal|360
operator|-
name|off
operator|)
operator|-
literal|90
return|;
block|}
comment|/** Puts longitude in range of -180 to +180. */
DECL|method|normalizeLongitude
specifier|private
specifier|static
name|double
name|normalizeLongitude
parameter_list|(
name|double
name|longitude
parameter_list|)
block|{
if|if
condition|(
name|longitude
operator|>=
operator|-
literal|180
operator|&&
name|longitude
operator|<=
literal|180
condition|)
block|{
return|return
name|longitude
return|;
comment|//common case, and avoids slight double precision shifting
block|}
name|double
name|off
init|=
operator|(
name|longitude
operator|+
literal|180
operator|)
operator|%
literal|360
decl_stmt|;
if|if
condition|(
name|off
operator|<
literal|0
condition|)
block|{
return|return
literal|180
operator|+
name|off
return|;
block|}
elseif|else
if|if
condition|(
name|off
operator|==
literal|0
operator|&&
name|longitude
operator|>
literal|0
condition|)
block|{
return|return
literal|180
return|;
block|}
else|else
block|{
return|return
operator|-
literal|180
operator|+
name|off
return|;
block|}
block|}
comment|/** Keep it simple, we don't need to take arbitrary Random for geo tests */
DECL|method|random
specifier|private
specifier|static
name|Random
name|random
parameter_list|()
block|{
return|return
name|RandomizedContext
operator|.
name|current
argument_list|()
operator|.
name|getRandom
argument_list|()
return|;
block|}
block|}
end_class
end_unit
