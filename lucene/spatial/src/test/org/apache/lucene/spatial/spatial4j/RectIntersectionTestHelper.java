begin_unit
begin_package
DECL|package|org.apache.lucene.spatial.spatial4j
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|spatial4j
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|com
operator|.
name|spatial4j
operator|.
name|core
operator|.
name|context
operator|.
name|SpatialContext
import|;
end_import
begin_import
import|import
name|com
operator|.
name|spatial4j
operator|.
name|core
operator|.
name|shape
operator|.
name|Point
import|;
end_import
begin_import
import|import
name|com
operator|.
name|spatial4j
operator|.
name|core
operator|.
name|shape
operator|.
name|Rectangle
import|;
end_import
begin_import
import|import
name|com
operator|.
name|spatial4j
operator|.
name|core
operator|.
name|shape
operator|.
name|Shape
import|;
end_import
begin_import
import|import
name|com
operator|.
name|spatial4j
operator|.
name|core
operator|.
name|shape
operator|.
name|SpatialRelation
import|;
end_import
begin_import
import|import
name|com
operator|.
name|spatial4j
operator|.
name|core
operator|.
name|shape
operator|.
name|impl
operator|.
name|InfBufLine
import|;
end_import
begin_import
import|import
name|com
operator|.
name|spatial4j
operator|.
name|core
operator|.
name|shape
operator|.
name|impl
operator|.
name|PointImpl
import|;
end_import
begin_import
import|import static
name|com
operator|.
name|spatial4j
operator|.
name|core
operator|.
name|shape
operator|.
name|SpatialRelation
operator|.
name|CONTAINS
import|;
end_import
begin_import
import|import static
name|com
operator|.
name|spatial4j
operator|.
name|core
operator|.
name|shape
operator|.
name|SpatialRelation
operator|.
name|DISJOINT
import|;
end_import
begin_class
DECL|class|RectIntersectionTestHelper
specifier|public
specifier|abstract
class|class
name|RectIntersectionTestHelper
parameter_list|<
name|S
extends|extends
name|Shape
parameter_list|>
extends|extends
name|RandomizedShapeTest
block|{
DECL|method|RectIntersectionTestHelper
specifier|public
name|RectIntersectionTestHelper
parameter_list|(
name|SpatialContext
name|ctx
parameter_list|)
block|{
name|super
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
comment|/** Override to return true if generateRandomShape is essentially a Rectangle. */
DECL|method|isRandomShapeRectangular
specifier|protected
name|boolean
name|isRandomShapeRectangular
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
DECL|method|generateRandomShape
specifier|protected
specifier|abstract
name|S
name|generateRandomShape
parameter_list|(
name|Point
name|nearP
parameter_list|)
function_decl|;
comment|/** shape has no area; return a point in it */
DECL|method|randomPointInEmptyShape
specifier|protected
specifier|abstract
name|Point
name|randomPointInEmptyShape
parameter_list|(
name|S
name|shape
parameter_list|)
function_decl|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
DECL|method|randomPointIn
specifier|protected
name|Point
name|randomPointIn
parameter_list|(
name|Shape
name|shape
parameter_list|)
block|{
if|if
condition|(
operator|!
name|shape
operator|.
name|hasArea
argument_list|()
condition|)
block|{
specifier|final
name|Point
name|pt
init|=
name|randomPointInEmptyShape
argument_list|(
operator|(
name|S
operator|)
name|shape
argument_list|)
decl_stmt|;
assert|assert
name|shape
operator|.
name|relate
argument_list|(
name|pt
argument_list|)
operator|.
name|intersects
argument_list|()
operator|:
literal|"faulty randomPointInEmptyShape"
assert|;
return|return
name|pt
return|;
block|}
return|return
name|super
operator|.
name|randomPointIn
argument_list|(
name|shape
argument_list|)
return|;
block|}
DECL|method|testRelateWithRectangle
specifier|public
name|void
name|testRelateWithRectangle
parameter_list|()
block|{
comment|//counters for the different intersection cases
name|int
name|i_C
init|=
literal|0
decl_stmt|,
name|i_I
init|=
literal|0
decl_stmt|,
name|i_W
init|=
literal|0
decl_stmt|,
name|i_D
init|=
literal|0
decl_stmt|,
name|i_bboxD
init|=
literal|0
decl_stmt|;
name|int
name|laps
init|=
literal|0
decl_stmt|;
specifier|final
name|int
name|MINLAPSPERCASE
init|=
name|scaledRandomIntBetween
argument_list|(
literal|20
argument_list|,
literal|200
argument_list|)
decl_stmt|;
while|while
condition|(
name|i_C
operator|<
name|MINLAPSPERCASE
operator|||
name|i_I
operator|<
name|MINLAPSPERCASE
operator|||
name|i_W
operator|<
name|MINLAPSPERCASE
operator|||
operator|(
operator|!
name|isRandomShapeRectangular
argument_list|()
operator|&&
name|i_D
operator|<
name|MINLAPSPERCASE
operator|)
operator|||
name|i_bboxD
operator|<
name|MINLAPSPERCASE
condition|)
block|{
name|laps
operator|++
expr_stmt|;
name|TestLog
operator|.
name|clear
argument_list|()
expr_stmt|;
name|Point
name|nearP
init|=
name|randomPointIn
argument_list|(
name|ctx
operator|.
name|getWorldBounds
argument_list|()
argument_list|)
decl_stmt|;
name|S
name|s
init|=
name|generateRandomShape
argument_list|(
name|nearP
argument_list|)
decl_stmt|;
name|Rectangle
name|r
init|=
name|randomRectangle
argument_list|(
name|s
operator|.
name|getBoundingBox
argument_list|()
operator|.
name|getCenter
argument_list|()
argument_list|)
decl_stmt|;
name|SpatialRelation
name|ic
init|=
name|s
operator|.
name|relate
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|TestLog
operator|.
name|log
argument_list|(
literal|"S-R Rel: {}, Shape {}, Rectangle {}"
argument_list|,
name|ic
argument_list|,
name|s
argument_list|,
name|r
argument_list|)
expr_stmt|;
if|if
condition|(
name|ic
operator|!=
name|DISJOINT
condition|)
block|{
name|assertTrue
argument_list|(
literal|"if not disjoint then the shape's bbox shouldn't be disjoint"
argument_list|,
name|s
operator|.
name|getBoundingBox
argument_list|()
operator|.
name|relate
argument_list|(
name|r
argument_list|)
operator|.
name|intersects
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|int
name|MAX_TRIES
init|=
name|scaledRandomIntBetween
argument_list|(
literal|10
argument_list|,
literal|100
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|ic
condition|)
block|{
case|case
name|CONTAINS
case|:
name|i_C
operator|++
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|MAX_TRIES
condition|;
name|j
operator|++
control|)
block|{
name|Point
name|p
init|=
name|randomPointIn
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|assertRelation
argument_list|(
literal|null
argument_list|,
name|CONTAINS
argument_list|,
name|s
argument_list|,
name|p
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|WITHIN
case|:
name|i_W
operator|++
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|MAX_TRIES
condition|;
name|j
operator|++
control|)
block|{
name|Point
name|p
init|=
name|randomPointIn
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|assertRelation
argument_list|(
literal|null
argument_list|,
name|CONTAINS
argument_list|,
name|r
argument_list|,
name|p
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|DISJOINT
case|:
if|if
condition|(
operator|!
name|s
operator|.
name|getBoundingBox
argument_list|()
operator|.
name|relate
argument_list|(
name|r
argument_list|)
operator|.
name|intersects
argument_list|()
condition|)
block|{
comment|//bboxes are disjoint
name|i_bboxD
operator|++
expr_stmt|;
if|if
condition|(
name|i_bboxD
operator|>
name|MINLAPSPERCASE
condition|)
break|break;
block|}
else|else
block|{
name|i_D
operator|++
expr_stmt|;
block|}
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|MAX_TRIES
condition|;
name|j
operator|++
control|)
block|{
name|Point
name|p
init|=
name|randomPointIn
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|assertRelation
argument_list|(
literal|null
argument_list|,
name|DISJOINT
argument_list|,
name|s
argument_list|,
name|p
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|INTERSECTS
case|:
name|i_I
operator|++
expr_stmt|;
name|SpatialRelation
name|pointR
init|=
literal|null
decl_stmt|;
comment|//set once
name|Rectangle
name|randomPointSpace
init|=
literal|null
decl_stmt|;
name|MAX_TRIES
operator|=
literal|1000
expr_stmt|;
comment|//give many attempts
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|MAX_TRIES
condition|;
name|j
operator|++
control|)
block|{
name|Point
name|p
decl_stmt|;
if|if
condition|(
name|j
operator|<
literal|4
condition|)
block|{
name|p
operator|=
operator|new
name|PointImpl
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
name|InfBufLine
operator|.
name|cornerByQuadrant
argument_list|(
name|r
argument_list|,
name|j
operator|+
literal|1
argument_list|,
name|p
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|randomPointSpace
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|pointR
operator|==
name|DISJOINT
condition|)
block|{
name|randomPointSpace
operator|=
name|intersectRects
argument_list|(
name|r
argument_list|,
name|s
operator|.
name|getBoundingBox
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//CONTAINS
name|randomPointSpace
operator|=
name|r
expr_stmt|;
block|}
block|}
name|p
operator|=
name|randomPointIn
argument_list|(
name|randomPointSpace
argument_list|)
expr_stmt|;
block|}
name|SpatialRelation
name|pointRNew
init|=
name|s
operator|.
name|relate
argument_list|(
name|p
argument_list|)
decl_stmt|;
if|if
condition|(
name|pointR
operator|==
literal|null
condition|)
block|{
name|pointR
operator|=
name|pointRNew
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|pointR
operator|!=
name|pointRNew
condition|)
block|{
break|break;
block|}
elseif|else
if|if
condition|(
name|j
operator|>=
name|MAX_TRIES
condition|)
block|{
comment|//TODO consider logging instead of failing
name|fail
argument_list|(
literal|"Tried intersection brute-force too many times without success"
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
default|default:
name|fail
argument_list|(
literal|""
operator|+
name|ic
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|AssertionError
name|e
parameter_list|)
block|{
name|onAssertFail
argument_list|(
name|e
argument_list|,
name|s
argument_list|,
name|r
argument_list|,
name|ic
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|laps
operator|>
name|MINLAPSPERCASE
operator|*
literal|1000
condition|)
name|fail
argument_list|(
literal|"Did not find enough intersection cases in a reasonable number"
operator|+
literal|" of random attempts. CWIDbD: "
operator|+
name|i_C
operator|+
literal|","
operator|+
name|i_W
operator|+
literal|","
operator|+
name|i_I
operator|+
literal|","
operator|+
name|i_D
operator|+
literal|","
operator|+
name|i_bboxD
operator|+
literal|"  Laps exceeded "
operator|+
name|MINLAPSPERCASE
operator|*
literal|1000
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Laps: "
operator|+
name|laps
operator|+
literal|" CWIDbD: "
operator|+
name|i_C
operator|+
literal|","
operator|+
name|i_W
operator|+
literal|","
operator|+
name|i_I
operator|+
literal|","
operator|+
name|i_D
operator|+
literal|","
operator|+
name|i_bboxD
argument_list|)
expr_stmt|;
block|}
DECL|method|onAssertFail
specifier|protected
name|void
name|onAssertFail
parameter_list|(
name|AssertionError
name|e
parameter_list|,
name|S
name|s
parameter_list|,
name|Rectangle
name|r
parameter_list|,
name|SpatialRelation
name|ic
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
DECL|method|intersectRects
specifier|private
name|Rectangle
name|intersectRects
parameter_list|(
name|Rectangle
name|r1
parameter_list|,
name|Rectangle
name|r2
parameter_list|)
block|{
assert|assert
name|r1
operator|.
name|relate
argument_list|(
name|r2
argument_list|)
operator|.
name|intersects
argument_list|()
assert|;
specifier|final
name|double
name|minX
decl_stmt|,
name|maxX
decl_stmt|;
if|if
condition|(
name|r1
operator|.
name|relateXRange
argument_list|(
name|r2
operator|.
name|getMinX
argument_list|()
argument_list|,
name|r2
operator|.
name|getMinX
argument_list|()
argument_list|)
operator|.
name|intersects
argument_list|()
condition|)
block|{
name|minX
operator|=
name|r2
operator|.
name|getMinX
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|minX
operator|=
name|r1
operator|.
name|getMinX
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|r1
operator|.
name|relateXRange
argument_list|(
name|r2
operator|.
name|getMaxX
argument_list|()
argument_list|,
name|r2
operator|.
name|getMaxX
argument_list|()
argument_list|)
operator|.
name|intersects
argument_list|()
condition|)
block|{
name|maxX
operator|=
name|r2
operator|.
name|getMaxX
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|maxX
operator|=
name|r1
operator|.
name|getMaxX
argument_list|()
expr_stmt|;
block|}
specifier|final
name|double
name|minY
decl_stmt|,
name|maxY
decl_stmt|;
if|if
condition|(
name|r1
operator|.
name|relateYRange
argument_list|(
name|r2
operator|.
name|getMinY
argument_list|()
argument_list|,
name|r2
operator|.
name|getMinY
argument_list|()
argument_list|)
operator|.
name|intersects
argument_list|()
condition|)
block|{
name|minY
operator|=
name|r2
operator|.
name|getMinY
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|minY
operator|=
name|r1
operator|.
name|getMinY
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|r1
operator|.
name|relateYRange
argument_list|(
name|r2
operator|.
name|getMaxY
argument_list|()
argument_list|,
name|r2
operator|.
name|getMaxY
argument_list|()
argument_list|)
operator|.
name|intersects
argument_list|()
condition|)
block|{
name|maxY
operator|=
name|r2
operator|.
name|getMaxY
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|maxY
operator|=
name|r1
operator|.
name|getMaxY
argument_list|()
expr_stmt|;
block|}
return|return
name|ctx
operator|.
name|makeRectangle
argument_list|(
name|minX
argument_list|,
name|maxX
argument_list|,
name|minY
argument_list|,
name|maxY
argument_list|)
return|;
block|}
block|}
end_class
end_unit
