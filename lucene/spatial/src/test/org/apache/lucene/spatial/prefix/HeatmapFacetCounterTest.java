begin_unit
begin_package
DECL|package|org.apache.lucene.spatial.prefix
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|prefix
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|annotations
operator|.
name|Repeat
import|;
end_import
begin_import
import|import
name|com
operator|.
name|spatial4j
operator|.
name|core
operator|.
name|context
operator|.
name|SpatialContext
import|;
end_import
begin_import
import|import
name|com
operator|.
name|spatial4j
operator|.
name|core
operator|.
name|context
operator|.
name|SpatialContextFactory
import|;
end_import
begin_import
import|import
name|com
operator|.
name|spatial4j
operator|.
name|core
operator|.
name|distance
operator|.
name|DistanceUtils
import|;
end_import
begin_import
import|import
name|com
operator|.
name|spatial4j
operator|.
name|core
operator|.
name|shape
operator|.
name|Circle
import|;
end_import
begin_import
import|import
name|com
operator|.
name|spatial4j
operator|.
name|core
operator|.
name|shape
operator|.
name|Point
import|;
end_import
begin_import
import|import
name|com
operator|.
name|spatial4j
operator|.
name|core
operator|.
name|shape
operator|.
name|Rectangle
import|;
end_import
begin_import
import|import
name|com
operator|.
name|spatial4j
operator|.
name|core
operator|.
name|shape
operator|.
name|Shape
import|;
end_import
begin_import
import|import
name|com
operator|.
name|spatial4j
operator|.
name|core
operator|.
name|shape
operator|.
name|SpatialRelation
import|;
end_import
begin_import
import|import
name|com
operator|.
name|spatial4j
operator|.
name|core
operator|.
name|shape
operator|.
name|impl
operator|.
name|RectangleImpl
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Filter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|MatchAllDocsQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TotalHitCountCollector
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|StrategyTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|prefix
operator|.
name|tree
operator|.
name|QuadPrefixTree
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|prefix
operator|.
name|tree
operator|.
name|SpatialPrefixTree
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_import
import|import static
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|RandomizedTest
operator|.
name|atMost
import|;
end_import
begin_import
import|import static
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|RandomizedTest
operator|.
name|randomIntBetween
import|;
end_import
begin_class
DECL|class|HeatmapFacetCounterTest
specifier|public
class|class
name|HeatmapFacetCounterTest
extends|extends
name|StrategyTestCase
block|{
DECL|field|grid
name|SpatialPrefixTree
name|grid
decl_stmt|;
DECL|field|cellsValidated
name|int
name|cellsValidated
decl_stmt|;
DECL|field|cellValidatedNonZero
name|int
name|cellValidatedNonZero
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|cellsValidated
operator|=
name|cellValidatedNonZero
operator|=
literal|0
expr_stmt|;
name|ctx
operator|=
name|SpatialContext
operator|.
name|GEO
expr_stmt|;
name|grid
operator|=
operator|new
name|QuadPrefixTree
argument_list|(
name|ctx
argument_list|,
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|8
argument_list|)
argument_list|)
expr_stmt|;
name|strategy
operator|=
operator|new
name|RecursivePrefixTreeStrategy
argument_list|(
name|grid
argument_list|,
name|getTestClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|rarely
argument_list|()
condition|)
block|{
operator|(
operator|(
name|PrefixTreeStrategy
operator|)
name|strategy
operator|)
operator|.
name|setPointsOnly
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|After
DECL|method|after
specifier|public
name|void
name|after
parameter_list|()
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Validated "
operator|+
name|cellsValidated
operator|+
literal|" cells, "
operator|+
name|cellValidatedNonZero
operator|+
literal|" non-zero"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testStatic
specifier|public
name|void
name|testStatic
parameter_list|()
throws|throws
name|IOException
block|{
comment|//Some specific tests (static, not random).
name|adoc
argument_list|(
literal|"0"
argument_list|,
name|ctx
operator|.
name|makeRectangle
argument_list|(
literal|179.8
argument_list|,
operator|-
literal|170
argument_list|,
operator|-
literal|90
argument_list|,
operator|-
literal|80
argument_list|)
argument_list|)
expr_stmt|;
comment|//barely crosses equator
name|adoc
argument_list|(
literal|"1"
argument_list|,
name|ctx
operator|.
name|makePoint
argument_list|(
operator|-
literal|180
argument_list|,
operator|-
literal|85
argument_list|)
argument_list|)
expr_stmt|;
comment|//a pt within the above rect
name|adoc
argument_list|(
literal|"2"
argument_list|,
name|ctx
operator|.
name|makePoint
argument_list|(
literal|172
argument_list|,
operator|-
literal|85
argument_list|)
argument_list|)
expr_stmt|;
comment|//a pt to left of rect
name|commit
argument_list|()
expr_stmt|;
name|validateHeatmapResultLoop
argument_list|(
name|ctx
operator|.
name|makeRectangle
argument_list|(
operator|+
literal|170
argument_list|,
operator|+
literal|180
argument_list|,
operator|-
literal|90
argument_list|,
operator|-
literal|85
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|validateHeatmapResultLoop
argument_list|(
name|ctx
operator|.
name|makeRectangle
argument_list|(
operator|-
literal|180
argument_list|,
operator|-
literal|160
argument_list|,
operator|-
literal|89
argument_list|,
operator|-
literal|50
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|validateHeatmapResultLoop
argument_list|(
name|ctx
operator|.
name|makeRectangle
argument_list|(
literal|179
argument_list|,
literal|179
argument_list|,
operator|-
literal|89
argument_list|,
operator|-
literal|50
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|100
argument_list|)
expr_stmt|;
comment|//line
comment|// We could test anything and everything at this point... I prefer we leave that to random testing and then
comment|// add specific tests if we find a bug.
block|}
annotation|@
name|Test
DECL|method|testQueryCircle
specifier|public
name|void
name|testQueryCircle
parameter_list|()
throws|throws
name|IOException
block|{
comment|//overwrite setUp; non-geo bounds is more straight-forward; otherwise 88,88 would actually be practically north,
specifier|final
name|SpatialContextFactory
name|spatialContextFactory
init|=
operator|new
name|SpatialContextFactory
argument_list|()
decl_stmt|;
name|spatialContextFactory
operator|.
name|geo
operator|=
literal|false
expr_stmt|;
name|spatialContextFactory
operator|.
name|worldBounds
operator|=
operator|new
name|RectangleImpl
argument_list|(
operator|-
literal|90
argument_list|,
literal|90
argument_list|,
operator|-
literal|90
argument_list|,
literal|90
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|ctx
operator|=
name|spatialContextFactory
operator|.
name|newSpatialContext
argument_list|()
expr_stmt|;
specifier|final
name|int
name|LEVEL
init|=
literal|4
decl_stmt|;
name|grid
operator|=
operator|new
name|QuadPrefixTree
argument_list|(
name|ctx
argument_list|,
name|LEVEL
argument_list|)
expr_stmt|;
name|strategy
operator|=
operator|new
name|RecursivePrefixTreeStrategy
argument_list|(
name|grid
argument_list|,
name|getTestClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
name|Circle
name|circle
init|=
name|ctx
operator|.
name|makeCircle
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|89
argument_list|)
decl_stmt|;
name|adoc
argument_list|(
literal|"0"
argument_list|,
name|ctx
operator|.
name|makePoint
argument_list|(
literal|88
argument_list|,
literal|88
argument_list|)
argument_list|)
expr_stmt|;
comment|//top-right, inside bbox of circle but not the circle
name|adoc
argument_list|(
literal|"1"
argument_list|,
name|ctx
operator|.
name|makePoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|//clearly inside; dead center in fact
name|commit
argument_list|()
expr_stmt|;
specifier|final
name|HeatmapFacetCounter
operator|.
name|Heatmap
name|heatmap
init|=
name|HeatmapFacetCounter
operator|.
name|calcFacets
argument_list|(
operator|(
name|PrefixTreeStrategy
operator|)
name|strategy
argument_list|,
name|indexSearcher
operator|.
name|getTopReaderContext
argument_list|()
argument_list|,
literal|null
argument_list|,
name|circle
argument_list|,
name|LEVEL
argument_list|,
literal|1000
argument_list|)
decl_stmt|;
comment|//assert that only one point is found, not 2
name|boolean
name|foundOne
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|count
range|:
name|heatmap
operator|.
name|counts
control|)
block|{
switch|switch
condition|(
name|count
condition|)
block|{
case|case
literal|0
case|:
break|break;
case|case
literal|1
case|:
name|assertFalse
argument_list|(
name|foundOne
argument_list|)
expr_stmt|;
comment|//this is the first
name|foundOne
operator|=
literal|true
expr_stmt|;
break|break;
default|default:
name|fail
argument_list|(
literal|"counts should be 0 or 1: "
operator|+
name|count
argument_list|)
expr_stmt|;
block|}
block|}
name|assertTrue
argument_list|(
name|foundOne
argument_list|)
expr_stmt|;
block|}
comment|/** Recursively facet& validate at higher resolutions until we've seen enough. We assume there are    * some non-zero cells. */
DECL|method|validateHeatmapResultLoop
specifier|private
name|void
name|validateHeatmapResultLoop
parameter_list|(
name|Rectangle
name|inputRange
parameter_list|,
name|int
name|facetLevel
parameter_list|,
name|int
name|cellCountRecursThreshold
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|facetLevel
operator|>
name|grid
operator|.
name|getMaxLevels
argument_list|()
condition|)
block|{
return|return;
block|}
specifier|final
name|int
name|maxCells
init|=
literal|10_000
decl_stmt|;
specifier|final
name|HeatmapFacetCounter
operator|.
name|Heatmap
name|heatmap
init|=
name|HeatmapFacetCounter
operator|.
name|calcFacets
argument_list|(
operator|(
name|PrefixTreeStrategy
operator|)
name|strategy
argument_list|,
name|indexSearcher
operator|.
name|getTopReaderContext
argument_list|()
argument_list|,
literal|null
argument_list|,
name|inputRange
argument_list|,
name|facetLevel
argument_list|,
name|maxCells
argument_list|)
decl_stmt|;
name|int
name|preNonZero
init|=
name|cellValidatedNonZero
decl_stmt|;
name|validateHeatmapResult
argument_list|(
name|inputRange
argument_list|,
name|facetLevel
argument_list|,
name|heatmap
argument_list|)
expr_stmt|;
assert|assert
name|cellValidatedNonZero
operator|-
name|preNonZero
operator|>
literal|0
assert|;
comment|//we validated more non-zero cells
if|if
condition|(
name|heatmap
operator|.
name|counts
operator|.
name|length
operator|<
name|cellCountRecursThreshold
condition|)
block|{
name|validateHeatmapResultLoop
argument_list|(
name|inputRange
argument_list|,
name|facetLevel
operator|+
literal|1
argument_list|,
name|cellCountRecursThreshold
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
annotation|@
name|Repeat
argument_list|(
name|iterations
operator|=
literal|20
argument_list|)
DECL|method|testRandom
specifier|public
name|void
name|testRandom
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Tests using random index shapes& query shapes. This has found all sorts of edge case bugs (e.g. dateline,
comment|// cell border, overflow(?)).
specifier|final
name|int
name|numIndexedShapes
init|=
literal|1
operator|+
name|atMost
argument_list|(
literal|9
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Shape
argument_list|>
name|indexedShapes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|numIndexedShapes
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numIndexedShapes
condition|;
name|i
operator|++
control|)
block|{
name|indexedShapes
operator|.
name|add
argument_list|(
name|randomIndexedShape
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//Main index loop:
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|indexedShapes
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Shape
name|shape
init|=
name|indexedShapes
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|adoc
argument_list|(
literal|""
operator|+
name|i
argument_list|,
name|shape
argument_list|)
expr_stmt|;
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
operator|==
literal|0
condition|)
name|commit
argument_list|()
expr_stmt|;
comment|//intermediate commit, produces extra segments
block|}
comment|//delete some documents randomly
for|for
control|(
name|int
name|id
init|=
literal|0
init|;
name|id
operator|<
name|indexedShapes
operator|.
name|size
argument_list|()
condition|;
name|id
operator|++
control|)
block|{
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
operator|==
literal|0
condition|)
block|{
name|deleteDoc
argument_list|(
literal|""
operator|+
name|id
argument_list|)
expr_stmt|;
name|indexedShapes
operator|.
name|set
argument_list|(
name|id
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
name|commit
argument_list|()
expr_stmt|;
comment|// once without dateline wrap
specifier|final
name|Rectangle
name|rect
init|=
name|randomRectangle
argument_list|()
decl_stmt|;
name|queryHeatmapRecursive
argument_list|(
name|usually
argument_list|()
condition|?
name|ctx
operator|.
name|getWorldBounds
argument_list|()
else|:
name|rect
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// and once with dateline wrap
if|if
condition|(
name|rect
operator|.
name|getWidth
argument_list|()
operator|>
literal|0
condition|)
block|{
name|double
name|shift
init|=
name|random
argument_list|()
operator|.
name|nextDouble
argument_list|()
operator|%
name|rect
operator|.
name|getWidth
argument_list|()
decl_stmt|;
name|queryHeatmapRecursive
argument_list|(
name|ctx
operator|.
name|makeRectangle
argument_list|(
name|DistanceUtils
operator|.
name|normLonDEG
argument_list|(
name|rect
operator|.
name|getMinX
argument_list|()
operator|-
name|shift
argument_list|)
argument_list|,
name|DistanceUtils
operator|.
name|normLonDEG
argument_list|(
name|rect
operator|.
name|getMaxX
argument_list|()
operator|-
name|shift
argument_list|)
argument_list|,
name|rect
operator|.
name|getMinY
argument_list|()
argument_list|,
name|rect
operator|.
name|getMaxY
argument_list|()
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Build heatmap, validate results, then descend recursively to another facet level. */
DECL|method|queryHeatmapRecursive
specifier|private
name|boolean
name|queryHeatmapRecursive
parameter_list|(
name|Rectangle
name|inputRange
parameter_list|,
name|int
name|facetLevel
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|inputRange
operator|.
name|hasArea
argument_list|()
condition|)
block|{
comment|// Don't test line inputs. It's not that we don't support it but it is more challenging to test if per-chance it
comment|// coincides with a grid line due due to edge overlap issue for some grid implementations (geo& quad).
return|return
literal|false
return|;
block|}
name|Filter
name|filter
init|=
literal|null
decl_stmt|;
comment|//FYI testing filtering of underlying PrefixTreeFacetCounter is done in another test
comment|//Calculate facets
specifier|final
name|int
name|maxCells
init|=
literal|10_000
decl_stmt|;
specifier|final
name|HeatmapFacetCounter
operator|.
name|Heatmap
name|heatmap
init|=
name|HeatmapFacetCounter
operator|.
name|calcFacets
argument_list|(
operator|(
name|PrefixTreeStrategy
operator|)
name|strategy
argument_list|,
name|indexSearcher
operator|.
name|getTopReaderContext
argument_list|()
argument_list|,
name|filter
argument_list|,
name|inputRange
argument_list|,
name|facetLevel
argument_list|,
name|maxCells
argument_list|)
decl_stmt|;
name|validateHeatmapResult
argument_list|(
name|inputRange
argument_list|,
name|facetLevel
argument_list|,
name|heatmap
argument_list|)
expr_stmt|;
name|boolean
name|foundNonZeroCount
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|count
range|:
name|heatmap
operator|.
name|counts
control|)
block|{
if|if
condition|(
name|count
operator|>
literal|0
condition|)
block|{
name|foundNonZeroCount
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
comment|//Test again recursively to higher facetLevel (more detailed cells)
if|if
condition|(
name|foundNonZeroCount
operator|&&
name|cellsValidated
operator|<=
literal|500
operator|&&
name|facetLevel
operator|!=
name|grid
operator|.
name|getMaxLevels
argument_list|()
operator|&&
name|inputRange
operator|.
name|hasArea
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
comment|//try multiple times until we find non-zero counts
if|if
condition|(
name|queryHeatmapRecursive
argument_list|(
name|randomRectangle
argument_list|(
name|inputRange
argument_list|)
argument_list|,
name|facetLevel
operator|+
literal|1
argument_list|)
condition|)
block|{
break|break;
comment|//we found data here so we needn't try again
block|}
block|}
block|}
return|return
name|foundNonZeroCount
return|;
block|}
DECL|method|validateHeatmapResult
specifier|private
name|void
name|validateHeatmapResult
parameter_list|(
name|Rectangle
name|inputRange
parameter_list|,
name|int
name|facetLevel
parameter_list|,
name|HeatmapFacetCounter
operator|.
name|Heatmap
name|heatmap
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Rectangle
name|heatRect
init|=
name|heatmap
operator|.
name|region
decl_stmt|;
name|assertTrue
argument_list|(
name|heatRect
operator|.
name|relate
argument_list|(
name|inputRange
argument_list|)
operator|==
name|SpatialRelation
operator|.
name|CONTAINS
operator|||
name|heatRect
operator|.
name|equals
argument_list|(
name|inputRange
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|double
name|cellWidth
init|=
name|heatRect
operator|.
name|getWidth
argument_list|()
operator|/
name|heatmap
operator|.
name|columns
decl_stmt|;
specifier|final
name|double
name|cellHeight
init|=
name|heatRect
operator|.
name|getHeight
argument_list|()
operator|/
name|heatmap
operator|.
name|rows
decl_stmt|;
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
name|heatmap
operator|.
name|columns
condition|;
name|c
operator|++
control|)
block|{
for|for
control|(
name|int
name|r
init|=
literal|0
init|;
name|r
operator|<
name|heatmap
operator|.
name|rows
condition|;
name|r
operator|++
control|)
block|{
specifier|final
name|int
name|facetCount
init|=
name|heatmap
operator|.
name|getCount
argument_list|(
name|c
argument_list|,
name|r
argument_list|)
decl_stmt|;
name|double
name|x
init|=
name|DistanceUtils
operator|.
name|normLonDEG
argument_list|(
name|heatRect
operator|.
name|getMinX
argument_list|()
operator|+
name|c
operator|*
name|cellWidth
operator|+
name|cellWidth
operator|/
literal|2
argument_list|)
decl_stmt|;
name|double
name|y
init|=
name|DistanceUtils
operator|.
name|normLatDEG
argument_list|(
name|heatRect
operator|.
name|getMinY
argument_list|()
operator|+
name|r
operator|*
name|cellHeight
operator|+
name|cellHeight
operator|/
literal|2
argument_list|)
decl_stmt|;
name|Point
name|pt
init|=
name|ctx
operator|.
name|makePoint
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|countMatchingDocsAtLevel
argument_list|(
name|pt
argument_list|,
name|facetLevel
argument_list|)
argument_list|,
name|facetCount
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|countMatchingDocsAtLevel
specifier|private
name|int
name|countMatchingDocsAtLevel
parameter_list|(
name|Point
name|pt
parameter_list|,
name|int
name|facetLevel
parameter_list|)
throws|throws
name|IOException
block|{
comment|// we use IntersectsPrefixTreeFilter directly so that we can specify the level to go to exactly.
name|RecursivePrefixTreeStrategy
name|strategy
init|=
operator|(
name|RecursivePrefixTreeStrategy
operator|)
name|this
operator|.
name|strategy
decl_stmt|;
name|Filter
name|filter
init|=
operator|new
name|IntersectsPrefixTreeFilter
argument_list|(
name|pt
argument_list|,
name|strategy
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|grid
argument_list|,
name|facetLevel
argument_list|,
name|grid
operator|.
name|getMaxLevels
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|TotalHitCountCollector
name|collector
init|=
operator|new
name|TotalHitCountCollector
argument_list|()
decl_stmt|;
name|indexSearcher
operator|.
name|search
argument_list|(
name|filter
argument_list|,
name|collector
argument_list|)
expr_stmt|;
name|cellsValidated
operator|++
expr_stmt|;
if|if
condition|(
name|collector
operator|.
name|getTotalHits
argument_list|()
operator|>
literal|0
condition|)
block|{
name|cellValidatedNonZero
operator|++
expr_stmt|;
block|}
return|return
name|collector
operator|.
name|getTotalHits
argument_list|()
return|;
block|}
DECL|method|randomIndexedShape
specifier|private
name|Shape
name|randomIndexedShape
parameter_list|()
block|{
if|if
condition|(
operator|(
operator|(
name|PrefixTreeStrategy
operator|)
name|strategy
operator|)
operator|.
name|isPointsOnly
argument_list|()
operator|||
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
return|return
name|randomPoint
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|randomRectangle
argument_list|()
return|;
block|}
block|}
block|}
end_class
end_unit
