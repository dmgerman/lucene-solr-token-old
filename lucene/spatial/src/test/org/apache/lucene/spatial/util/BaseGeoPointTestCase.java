begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.spatial.util
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|util
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DecimalFormat
import|;
end_import
begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DecimalFormatSymbols
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|BitSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|MockAnalyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|FilterCodec
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|PointsFormat
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|PointsReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|PointsWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|lucene60
operator|.
name|Lucene60PointsReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|lucene60
operator|.
name|Lucene60PointsWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|NumericDocValuesField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|StoredField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|StringField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DirectoryReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriterConfig
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReaderContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|MultiDocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|MultiFields
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|NumericDocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|RandomIndexWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SegmentReadState
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SegmentWriteState
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|ScoreDoc
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|SimpleCollector
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Sort
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TopDocs
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Bits
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|FixedBitSet
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|SloppyMath
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|TestUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|bkd
operator|.
name|BKDWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import
begin_comment
comment|/**  * Abstract class to do basic tests for a geospatial impl (high level  * fields and queries)  * NOTE: This test focuses on geospatial (distance queries, polygon  * queries, etc) indexing and search, not any underlying storage  * format or encoding: it merely supplies two hooks for the encoding  * so that tests can be exact. The [stretch] goal is for this test to be  * so thorough in testing a new geo impl that if this  * test passes, then all Lucene/Solr tests should also pass.  Ie,  * if there is some bug in a given geo impl that this  * test fails to catch then this test needs to be improved! */
end_comment
begin_class
DECL|class|BaseGeoPointTestCase
specifier|public
specifier|abstract
class|class
name|BaseGeoPointTestCase
extends|extends
name|LuceneTestCase
block|{
DECL|field|FIELD_NAME
specifier|protected
specifier|static
specifier|final
name|String
name|FIELD_NAME
init|=
literal|"point"
decl_stmt|;
DECL|field|originLat
specifier|private
specifier|static
name|double
name|originLat
decl_stmt|;
DECL|field|originLon
specifier|private
specifier|static
name|double
name|originLon
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|beforeClassBase
specifier|public
specifier|static
name|void
name|beforeClassBase
parameter_list|()
throws|throws
name|Exception
block|{
name|originLon
operator|=
name|GeoTestUtil
operator|.
name|nextLongitude
argument_list|()
expr_stmt|;
name|originLat
operator|=
name|GeoTestUtil
operator|.
name|nextLatitude
argument_list|()
expr_stmt|;
block|}
comment|/** Valid values that should not cause exception */
DECL|method|testIndexExtremeValues
specifier|public
name|void
name|testIndexExtremeValues
parameter_list|()
block|{
name|Document
name|document
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|addPointToDoc
argument_list|(
literal|"foo"
argument_list|,
name|document
argument_list|,
literal|90.0
argument_list|,
literal|180.0
argument_list|)
expr_stmt|;
name|addPointToDoc
argument_list|(
literal|"foo"
argument_list|,
name|document
argument_list|,
literal|90.0
argument_list|,
operator|-
literal|180.0
argument_list|)
expr_stmt|;
name|addPointToDoc
argument_list|(
literal|"foo"
argument_list|,
name|document
argument_list|,
operator|-
literal|90.0
argument_list|,
literal|180.0
argument_list|)
expr_stmt|;
name|addPointToDoc
argument_list|(
literal|"foo"
argument_list|,
name|document
argument_list|,
operator|-
literal|90.0
argument_list|,
operator|-
literal|180.0
argument_list|)
expr_stmt|;
block|}
comment|/** Invalid values */
DECL|method|testIndexOutOfRangeValues
specifier|public
name|void
name|testIndexOutOfRangeValues
parameter_list|()
block|{
name|Document
name|document
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|IllegalArgumentException
name|expected
decl_stmt|;
name|expected
operator|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|addPointToDoc
argument_list|(
literal|"foo"
argument_list|,
name|document
argument_list|,
name|Math
operator|.
name|nextUp
argument_list|(
literal|90.0
argument_list|)
argument_list|,
literal|50.0
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|expected
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"invalid latitude"
argument_list|)
argument_list|)
expr_stmt|;
name|expected
operator|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|addPointToDoc
argument_list|(
literal|"foo"
argument_list|,
name|document
argument_list|,
name|Math
operator|.
name|nextDown
argument_list|(
operator|-
literal|90.0
argument_list|)
argument_list|,
literal|50.0
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|expected
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"invalid latitude"
argument_list|)
argument_list|)
expr_stmt|;
name|expected
operator|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|addPointToDoc
argument_list|(
literal|"foo"
argument_list|,
name|document
argument_list|,
literal|90.0
argument_list|,
name|Math
operator|.
name|nextUp
argument_list|(
literal|180.0
argument_list|)
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|expected
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"invalid longitude"
argument_list|)
argument_list|)
expr_stmt|;
name|expected
operator|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|addPointToDoc
argument_list|(
literal|"foo"
argument_list|,
name|document
argument_list|,
literal|90.0
argument_list|,
name|Math
operator|.
name|nextDown
argument_list|(
operator|-
literal|180.0
argument_list|)
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|expected
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"invalid longitude"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** NaN: illegal */
DECL|method|testIndexNaNValues
specifier|public
name|void
name|testIndexNaNValues
parameter_list|()
block|{
name|Document
name|document
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|IllegalArgumentException
name|expected
decl_stmt|;
name|expected
operator|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|addPointToDoc
argument_list|(
literal|"foo"
argument_list|,
name|document
argument_list|,
name|Double
operator|.
name|NaN
argument_list|,
literal|50.0
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|expected
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"invalid latitude"
argument_list|)
argument_list|)
expr_stmt|;
name|expected
operator|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|addPointToDoc
argument_list|(
literal|"foo"
argument_list|,
name|document
argument_list|,
literal|50.0
argument_list|,
name|Double
operator|.
name|NaN
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|expected
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"invalid longitude"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Inf: illegal */
DECL|method|testIndexInfValues
specifier|public
name|void
name|testIndexInfValues
parameter_list|()
block|{
name|Document
name|document
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|IllegalArgumentException
name|expected
decl_stmt|;
name|expected
operator|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|addPointToDoc
argument_list|(
literal|"foo"
argument_list|,
name|document
argument_list|,
name|Double
operator|.
name|POSITIVE_INFINITY
argument_list|,
literal|50.0
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|expected
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"invalid latitude"
argument_list|)
argument_list|)
expr_stmt|;
name|expected
operator|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|addPointToDoc
argument_list|(
literal|"foo"
argument_list|,
name|document
argument_list|,
name|Double
operator|.
name|NEGATIVE_INFINITY
argument_list|,
literal|50.0
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|expected
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"invalid latitude"
argument_list|)
argument_list|)
expr_stmt|;
name|expected
operator|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|addPointToDoc
argument_list|(
literal|"foo"
argument_list|,
name|document
argument_list|,
literal|50.0
argument_list|,
name|Double
operator|.
name|POSITIVE_INFINITY
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|expected
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"invalid longitude"
argument_list|)
argument_list|)
expr_stmt|;
name|expected
operator|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|addPointToDoc
argument_list|(
literal|"foo"
argument_list|,
name|document
argument_list|,
literal|50.0
argument_list|,
name|Double
operator|.
name|NEGATIVE_INFINITY
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|expected
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"invalid longitude"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Add a single point and search for it in a box */
comment|// NOTE: we don't currently supply an exact search, only ranges, because of the lossiness...
DECL|method|testBoxBasics
specifier|public
name|void
name|testBoxBasics
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|RandomIndexWriter
name|writer
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|)
decl_stmt|;
comment|// add a doc with a point
name|Document
name|document
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|addPointToDoc
argument_list|(
literal|"field"
argument_list|,
name|document
argument_list|,
literal|18.313694
argument_list|,
operator|-
literal|65.227444
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|document
argument_list|)
expr_stmt|;
comment|// search and verify we found our doc
name|IndexReader
name|reader
init|=
name|writer
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|IndexSearcher
name|searcher
init|=
name|newSearcher
argument_list|(
name|reader
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|searcher
operator|.
name|count
argument_list|(
name|newRectQuery
argument_list|(
literal|"field"
argument_list|,
literal|18
argument_list|,
literal|19
argument_list|,
operator|-
literal|66
argument_list|,
operator|-
literal|65
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/** null field name not allowed */
DECL|method|testBoxNull
specifier|public
name|void
name|testBoxNull
parameter_list|()
block|{
name|IllegalArgumentException
name|expected
init|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|newRectQuery
argument_list|(
literal|null
argument_list|,
literal|18
argument_list|,
literal|19
argument_list|,
operator|-
literal|66
argument_list|,
operator|-
literal|65
argument_list|)
expr_stmt|;
block|}
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|expected
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"field must not be null"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// box should not accept invalid lat/lon
DECL|method|testBoxInvalidCoordinates
specifier|public
name|void
name|testBoxInvalidCoordinates
parameter_list|()
throws|throws
name|Exception
block|{
name|expectThrows
argument_list|(
name|Exception
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|newRectQuery
argument_list|(
literal|"field"
argument_list|,
operator|-
literal|92.0
argument_list|,
operator|-
literal|91.0
argument_list|,
literal|179.0
argument_list|,
literal|181.0
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
comment|/** test we can search for a point */
DECL|method|testDistanceBasics
specifier|public
name|void
name|testDistanceBasics
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|RandomIndexWriter
name|writer
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|)
decl_stmt|;
comment|// add a doc with a location
name|Document
name|document
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|addPointToDoc
argument_list|(
literal|"field"
argument_list|,
name|document
argument_list|,
literal|18.313694
argument_list|,
operator|-
literal|65.227444
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|document
argument_list|)
expr_stmt|;
comment|// search within 50km and verify we found our doc
name|IndexReader
name|reader
init|=
name|writer
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|IndexSearcher
name|searcher
init|=
name|newSearcher
argument_list|(
name|reader
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|searcher
operator|.
name|count
argument_list|(
name|newDistanceQuery
argument_list|(
literal|"field"
argument_list|,
literal|18
argument_list|,
operator|-
literal|65
argument_list|,
literal|50_000
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/** null field name not allowed */
DECL|method|testDistanceNull
specifier|public
name|void
name|testDistanceNull
parameter_list|()
block|{
name|IllegalArgumentException
name|expected
init|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|newDistanceQuery
argument_list|(
literal|null
argument_list|,
literal|18
argument_list|,
operator|-
literal|65
argument_list|,
literal|50_000
argument_list|)
expr_stmt|;
block|}
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|expected
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"field must not be null"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** distance query should not accept invalid lat/lon as origin */
DECL|method|testDistanceIllegal
specifier|public
name|void
name|testDistanceIllegal
parameter_list|()
throws|throws
name|Exception
block|{
name|expectThrows
argument_list|(
name|Exception
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|newDistanceQuery
argument_list|(
literal|"field"
argument_list|,
literal|92.0
argument_list|,
literal|181.0
argument_list|,
literal|120000
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
comment|/** negative distance queries are not allowed */
DECL|method|testDistanceNegative
specifier|public
name|void
name|testDistanceNegative
parameter_list|()
block|{
name|IllegalArgumentException
name|expected
init|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|newDistanceQuery
argument_list|(
literal|"field"
argument_list|,
literal|18
argument_list|,
literal|19
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|expected
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"radiusMeters"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|expected
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"invalid"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** NaN distance queries are not allowed */
DECL|method|testDistanceNaN
specifier|public
name|void
name|testDistanceNaN
parameter_list|()
block|{
name|IllegalArgumentException
name|expected
init|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|newDistanceQuery
argument_list|(
literal|"field"
argument_list|,
literal|18
argument_list|,
literal|19
argument_list|,
name|Double
operator|.
name|NaN
argument_list|)
expr_stmt|;
block|}
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|expected
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"radiusMeters"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|expected
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"invalid"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Inf distance queries are not allowed */
DECL|method|testDistanceInf
specifier|public
name|void
name|testDistanceInf
parameter_list|()
block|{
name|IllegalArgumentException
name|expected
decl_stmt|;
name|expected
operator|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|newDistanceQuery
argument_list|(
literal|"field"
argument_list|,
literal|18
argument_list|,
literal|19
argument_list|,
name|Double
operator|.
name|POSITIVE_INFINITY
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|expected
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"radiusMeters"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|expected
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"invalid"
argument_list|)
argument_list|)
expr_stmt|;
name|expected
operator|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|newDistanceQuery
argument_list|(
literal|"field"
argument_list|,
literal|18
argument_list|,
literal|19
argument_list|,
name|Double
operator|.
name|NEGATIVE_INFINITY
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|expected
operator|.
name|getMessage
argument_list|()
argument_list|,
name|expected
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"radiusMeters"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|expected
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"invalid"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** test we can search for a polygon */
DECL|method|testPolygonBasics
specifier|public
name|void
name|testPolygonBasics
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|RandomIndexWriter
name|writer
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|)
decl_stmt|;
comment|// add a doc with a point
name|Document
name|document
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|addPointToDoc
argument_list|(
literal|"field"
argument_list|,
name|document
argument_list|,
literal|18.313694
argument_list|,
operator|-
literal|65.227444
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|document
argument_list|)
expr_stmt|;
comment|// search and verify we found our doc
name|IndexReader
name|reader
init|=
name|writer
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|IndexSearcher
name|searcher
init|=
name|newSearcher
argument_list|(
name|reader
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|searcher
operator|.
name|count
argument_list|(
name|newPolygonQuery
argument_list|(
literal|"field"
argument_list|,
operator|new
name|Polygon
argument_list|(
operator|new
name|double
index|[]
block|{
literal|18
block|,
literal|18
block|,
literal|19
block|,
literal|19
block|,
literal|18
block|}
argument_list|,
operator|new
name|double
index|[]
block|{
operator|-
literal|66
block|,
operator|-
literal|65
block|,
operator|-
literal|65
block|,
operator|-
literal|66
block|,
operator|-
literal|66
block|}
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/** test we can search for a polygon with a hole (but still includes the doc) */
DECL|method|testPolygonHole
specifier|public
name|void
name|testPolygonHole
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|RandomIndexWriter
name|writer
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|)
decl_stmt|;
comment|// add a doc with a point
name|Document
name|document
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|addPointToDoc
argument_list|(
literal|"field"
argument_list|,
name|document
argument_list|,
literal|18.313694
argument_list|,
operator|-
literal|65.227444
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|document
argument_list|)
expr_stmt|;
comment|// search and verify we found our doc
name|IndexReader
name|reader
init|=
name|writer
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|IndexSearcher
name|searcher
init|=
name|newSearcher
argument_list|(
name|reader
argument_list|)
decl_stmt|;
name|Polygon
name|inner
init|=
operator|new
name|Polygon
argument_list|(
operator|new
name|double
index|[]
block|{
literal|18.5
block|,
literal|18.5
block|,
literal|18.7
block|,
literal|18.7
block|,
literal|18.5
block|}
argument_list|,
operator|new
name|double
index|[]
block|{
operator|-
literal|65.7
block|,
operator|-
literal|65.4
block|,
operator|-
literal|65.4
block|,
operator|-
literal|65.7
block|,
operator|-
literal|65.7
block|}
argument_list|)
decl_stmt|;
name|Polygon
name|outer
init|=
operator|new
name|Polygon
argument_list|(
operator|new
name|double
index|[]
block|{
literal|18
block|,
literal|18
block|,
literal|19
block|,
literal|19
block|,
literal|18
block|}
argument_list|,
operator|new
name|double
index|[]
block|{
operator|-
literal|66
block|,
operator|-
literal|65
block|,
operator|-
literal|65
block|,
operator|-
literal|66
block|,
operator|-
literal|66
block|}
argument_list|,
name|inner
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|searcher
operator|.
name|count
argument_list|(
name|newPolygonQuery
argument_list|(
literal|"field"
argument_list|,
name|outer
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/** test we can search for a polygon with a hole (that excludes the doc) */
DECL|method|testPolygonHoleExcludes
specifier|public
name|void
name|testPolygonHoleExcludes
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|RandomIndexWriter
name|writer
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|)
decl_stmt|;
comment|// add a doc with a point
name|Document
name|document
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|addPointToDoc
argument_list|(
literal|"field"
argument_list|,
name|document
argument_list|,
literal|18.313694
argument_list|,
operator|-
literal|65.227444
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|document
argument_list|)
expr_stmt|;
comment|// search and verify we found our doc
name|IndexReader
name|reader
init|=
name|writer
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|IndexSearcher
name|searcher
init|=
name|newSearcher
argument_list|(
name|reader
argument_list|)
decl_stmt|;
name|Polygon
name|inner
init|=
operator|new
name|Polygon
argument_list|(
operator|new
name|double
index|[]
block|{
literal|18.2
block|,
literal|18.2
block|,
literal|18.4
block|,
literal|18.4
block|,
literal|18.2
block|}
argument_list|,
operator|new
name|double
index|[]
block|{
operator|-
literal|65.3
block|,
operator|-
literal|65.2
block|,
operator|-
literal|65.2
block|,
operator|-
literal|65.3
block|,
operator|-
literal|65.3
block|}
argument_list|)
decl_stmt|;
name|Polygon
name|outer
init|=
operator|new
name|Polygon
argument_list|(
operator|new
name|double
index|[]
block|{
literal|18
block|,
literal|18
block|,
literal|19
block|,
literal|19
block|,
literal|18
block|}
argument_list|,
operator|new
name|double
index|[]
block|{
operator|-
literal|66
block|,
operator|-
literal|65
block|,
operator|-
literal|65
block|,
operator|-
literal|66
block|,
operator|-
literal|66
block|}
argument_list|,
name|inner
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|searcher
operator|.
name|count
argument_list|(
name|newPolygonQuery
argument_list|(
literal|"field"
argument_list|,
name|outer
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/** test we can search for a multi-polygon */
DECL|method|testMultiPolygonBasics
specifier|public
name|void
name|testMultiPolygonBasics
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|RandomIndexWriter
name|writer
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|)
decl_stmt|;
comment|// add a doc with a point
name|Document
name|document
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|addPointToDoc
argument_list|(
literal|"field"
argument_list|,
name|document
argument_list|,
literal|18.313694
argument_list|,
operator|-
literal|65.227444
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|document
argument_list|)
expr_stmt|;
comment|// search and verify we found our doc
name|IndexReader
name|reader
init|=
name|writer
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|IndexSearcher
name|searcher
init|=
name|newSearcher
argument_list|(
name|reader
argument_list|)
decl_stmt|;
name|Polygon
name|a
init|=
operator|new
name|Polygon
argument_list|(
operator|new
name|double
index|[]
block|{
literal|28
block|,
literal|28
block|,
literal|29
block|,
literal|29
block|,
literal|28
block|}
argument_list|,
operator|new
name|double
index|[]
block|{
operator|-
literal|56
block|,
operator|-
literal|55
block|,
operator|-
literal|55
block|,
operator|-
literal|56
block|,
operator|-
literal|56
block|}
argument_list|)
decl_stmt|;
name|Polygon
name|b
init|=
operator|new
name|Polygon
argument_list|(
operator|new
name|double
index|[]
block|{
literal|18
block|,
literal|18
block|,
literal|19
block|,
literal|19
block|,
literal|18
block|}
argument_list|,
operator|new
name|double
index|[]
block|{
operator|-
literal|66
block|,
operator|-
literal|65
block|,
operator|-
literal|65
block|,
operator|-
literal|66
block|,
operator|-
literal|66
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|searcher
operator|.
name|count
argument_list|(
name|newPolygonQuery
argument_list|(
literal|"field"
argument_list|,
name|a
argument_list|,
name|b
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/** null field name not allowed */
DECL|method|testPolygonNullField
specifier|public
name|void
name|testPolygonNullField
parameter_list|()
block|{
name|IllegalArgumentException
name|expected
init|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|newPolygonQuery
argument_list|(
literal|null
argument_list|,
operator|new
name|Polygon
argument_list|(
operator|new
name|double
index|[]
block|{
literal|18
operator|,
literal|18
operator|,
literal|19
operator|,
literal|19
operator|,
literal|18
block|}
operator|,
operator|new
name|double
index|[]
block|{
operator|-
literal|66
operator|,
operator|-
literal|65
operator|,
operator|-
literal|65
operator|,
operator|-
literal|66
operator|,
operator|-
literal|66
block|}
argument_list|)
init|)
decl_stmt|;
block|}
block|)
class|;
end_class
begin_expr_stmt
name|assertTrue
argument_list|(
name|expected
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"field must not be null"
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt
begin_comment
unit|}
comment|// A particularly tricky adversary for BKD tree:
end_comment
begin_function
unit|public
DECL|method|testSamePointManyTimes
name|void
name|testSamePointManyTimes
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|numPoints
init|=
name|atLeast
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
name|boolean
name|small
init|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
decl_stmt|;
comment|// Every doc has 2 points:
name|double
name|theLat
init|=
name|randomLat
argument_list|(
name|small
argument_list|)
decl_stmt|;
name|double
name|theLon
init|=
name|randomLon
argument_list|(
name|small
argument_list|)
decl_stmt|;
name|double
index|[]
name|lats
init|=
operator|new
name|double
index|[
name|numPoints
index|]
decl_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|lats
argument_list|,
name|theLat
argument_list|)
expr_stmt|;
name|double
index|[]
name|lons
init|=
operator|new
name|double
index|[
name|numPoints
index|]
decl_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|lons
argument_list|,
name|theLon
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|small
argument_list|,
name|lats
argument_list|,
name|lons
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|method|testAllLatEqual
specifier|public
name|void
name|testAllLatEqual
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|numPoints
init|=
name|atLeast
argument_list|(
literal|10000
argument_list|)
decl_stmt|;
name|boolean
name|small
init|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
decl_stmt|;
name|double
name|lat
init|=
name|randomLat
argument_list|(
name|small
argument_list|)
decl_stmt|;
name|double
index|[]
name|lats
init|=
operator|new
name|double
index|[
name|numPoints
index|]
decl_stmt|;
name|double
index|[]
name|lons
init|=
operator|new
name|double
index|[
name|numPoints
index|]
decl_stmt|;
name|boolean
name|haveRealDoc
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|docID
init|=
literal|0
init|;
name|docID
operator|<
name|numPoints
condition|;
name|docID
operator|++
control|)
block|{
name|int
name|x
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|20
argument_list|)
decl_stmt|;
if|if
condition|(
name|x
operator|==
literal|17
condition|)
block|{
comment|// Some docs don't have a point:
name|lats
index|[
name|docID
index|]
operator|=
name|Double
operator|.
name|NaN
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  doc="
operator|+
name|docID
operator|+
literal|" is missing"
argument_list|)
expr_stmt|;
block|}
continue|continue;
block|}
if|if
condition|(
name|docID
operator|>
literal|0
operator|&&
name|x
operator|==
literal|14
operator|&&
name|haveRealDoc
condition|)
block|{
name|int
name|oldDocID
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|oldDocID
operator|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|docID
argument_list|)
expr_stmt|;
if|if
condition|(
name|Double
operator|.
name|isNaN
argument_list|(
name|lats
index|[
name|oldDocID
index|]
argument_list|)
operator|==
literal|false
condition|)
block|{
break|break;
block|}
block|}
comment|// Fully identical point:
name|lons
index|[
name|docID
index|]
operator|=
name|lons
index|[
name|oldDocID
index|]
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  doc="
operator|+
name|docID
operator|+
literal|" lat="
operator|+
name|lat
operator|+
literal|" lon="
operator|+
name|lons
index|[
name|docID
index|]
operator|+
literal|" (same lat/lon as doc="
operator|+
name|oldDocID
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|lons
index|[
name|docID
index|]
operator|=
name|randomLon
argument_list|(
name|small
argument_list|)
expr_stmt|;
name|haveRealDoc
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  doc="
operator|+
name|docID
operator|+
literal|" lat="
operator|+
name|lat
operator|+
literal|" lon="
operator|+
name|lons
index|[
name|docID
index|]
argument_list|)
expr_stmt|;
block|}
block|}
name|lats
index|[
name|docID
index|]
operator|=
name|lat
expr_stmt|;
block|}
name|verify
argument_list|(
name|small
argument_list|,
name|lats
argument_list|,
name|lons
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|method|testAllLonEqual
specifier|public
name|void
name|testAllLonEqual
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|numPoints
init|=
name|atLeast
argument_list|(
literal|10000
argument_list|)
decl_stmt|;
name|boolean
name|small
init|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
decl_stmt|;
name|double
name|theLon
init|=
name|randomLon
argument_list|(
name|small
argument_list|)
decl_stmt|;
name|double
index|[]
name|lats
init|=
operator|new
name|double
index|[
name|numPoints
index|]
decl_stmt|;
name|double
index|[]
name|lons
init|=
operator|new
name|double
index|[
name|numPoints
index|]
decl_stmt|;
name|boolean
name|haveRealDoc
init|=
literal|false
decl_stmt|;
comment|//System.out.println("theLon=" + theLon);
for|for
control|(
name|int
name|docID
init|=
literal|0
init|;
name|docID
operator|<
name|numPoints
condition|;
name|docID
operator|++
control|)
block|{
name|int
name|x
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|20
argument_list|)
decl_stmt|;
if|if
condition|(
name|x
operator|==
literal|17
condition|)
block|{
comment|// Some docs don't have a point:
name|lats
index|[
name|docID
index|]
operator|=
name|Double
operator|.
name|NaN
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  doc="
operator|+
name|docID
operator|+
literal|" is missing"
argument_list|)
expr_stmt|;
block|}
continue|continue;
block|}
if|if
condition|(
name|docID
operator|>
literal|0
operator|&&
name|x
operator|==
literal|14
operator|&&
name|haveRealDoc
condition|)
block|{
name|int
name|oldDocID
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|oldDocID
operator|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|docID
argument_list|)
expr_stmt|;
if|if
condition|(
name|Double
operator|.
name|isNaN
argument_list|(
name|lats
index|[
name|oldDocID
index|]
argument_list|)
operator|==
literal|false
condition|)
block|{
break|break;
block|}
block|}
comment|// Fully identical point:
name|lats
index|[
name|docID
index|]
operator|=
name|lats
index|[
name|oldDocID
index|]
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  doc="
operator|+
name|docID
operator|+
literal|" lat="
operator|+
name|lats
index|[
name|docID
index|]
operator|+
literal|" lon="
operator|+
name|theLon
operator|+
literal|" (same lat/lon as doc="
operator|+
name|oldDocID
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|lats
index|[
name|docID
index|]
operator|=
name|randomLat
argument_list|(
name|small
argument_list|)
expr_stmt|;
name|haveRealDoc
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  doc="
operator|+
name|docID
operator|+
literal|" lat="
operator|+
name|lats
index|[
name|docID
index|]
operator|+
literal|" lon="
operator|+
name|theLon
argument_list|)
expr_stmt|;
block|}
block|}
name|lons
index|[
name|docID
index|]
operator|=
name|theLon
expr_stmt|;
block|}
name|verify
argument_list|(
name|small
argument_list|,
name|lats
argument_list|,
name|lons
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|method|testMultiValued
specifier|public
name|void
name|testMultiValued
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|numPoints
init|=
name|atLeast
argument_list|(
literal|10000
argument_list|)
decl_stmt|;
comment|// Every doc has 2 points:
name|double
index|[]
name|lats
init|=
operator|new
name|double
index|[
literal|2
operator|*
name|numPoints
index|]
decl_stmt|;
name|double
index|[]
name|lons
init|=
operator|new
name|double
index|[
literal|2
operator|*
name|numPoints
index|]
decl_stmt|;
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriterConfig
name|iwc
init|=
name|newIndexWriterConfig
argument_list|()
decl_stmt|;
name|initIndexWriterConfig
argument_list|(
name|FIELD_NAME
argument_list|,
name|iwc
argument_list|)
expr_stmt|;
comment|// We rely on docID order:
name|iwc
operator|.
name|setMergePolicy
argument_list|(
name|newLogMergePolicy
argument_list|()
argument_list|)
expr_stmt|;
name|RandomIndexWriter
name|w
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|,
name|iwc
argument_list|)
decl_stmt|;
name|boolean
name|small
init|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|id
init|=
literal|0
init|;
name|id
operator|<
name|numPoints
condition|;
name|id
operator|++
control|)
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|lats
index|[
literal|2
operator|*
name|id
index|]
operator|=
name|quantizeLat
argument_list|(
name|randomLat
argument_list|(
name|small
argument_list|)
argument_list|)
expr_stmt|;
name|lons
index|[
literal|2
operator|*
name|id
index|]
operator|=
name|quantizeLon
argument_list|(
name|randomLon
argument_list|(
name|small
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newStringField
argument_list|(
literal|"id"
argument_list|,
literal|""
operator|+
name|id
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|)
argument_list|)
expr_stmt|;
name|addPointToDoc
argument_list|(
name|FIELD_NAME
argument_list|,
name|doc
argument_list|,
name|lats
index|[
literal|2
operator|*
name|id
index|]
argument_list|,
name|lons
index|[
literal|2
operator|*
name|id
index|]
argument_list|)
expr_stmt|;
name|lats
index|[
literal|2
operator|*
name|id
operator|+
literal|1
index|]
operator|=
name|quantizeLat
argument_list|(
name|randomLat
argument_list|(
name|small
argument_list|)
argument_list|)
expr_stmt|;
name|lons
index|[
literal|2
operator|*
name|id
operator|+
literal|1
index|]
operator|=
name|quantizeLon
argument_list|(
name|randomLon
argument_list|(
name|small
argument_list|)
argument_list|)
expr_stmt|;
name|addPointToDoc
argument_list|(
name|FIELD_NAME
argument_list|,
name|doc
argument_list|,
name|lats
index|[
literal|2
operator|*
name|id
operator|+
literal|1
index|]
argument_list|,
name|lons
index|[
literal|2
operator|*
name|id
operator|+
literal|1
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"id="
operator|+
name|id
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  lat="
operator|+
name|lats
index|[
literal|2
operator|*
name|id
index|]
operator|+
literal|" lon="
operator|+
name|lons
index|[
literal|2
operator|*
name|id
index|]
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  lat="
operator|+
name|lats
index|[
literal|2
operator|*
name|id
operator|+
literal|1
index|]
operator|+
literal|" lon="
operator|+
name|lons
index|[
literal|2
operator|*
name|id
operator|+
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
comment|// TODO: share w/ verify; just need parallel array of the expected ids
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|w
operator|.
name|forceMerge
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|IndexReader
name|r
init|=
name|w
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|IndexSearcher
name|s
init|=
name|newSearcher
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|int
name|iters
init|=
name|atLeast
argument_list|(
literal|25
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|iter
init|=
literal|0
init|;
name|iter
operator|<
name|iters
condition|;
name|iter
operator|++
control|)
block|{
name|GeoRect
name|rect
init|=
name|randomRect
argument_list|(
name|small
argument_list|)
decl_stmt|;
comment|// TODO: why does this test need this quantization leniency? something is not right
name|rect
operator|=
operator|new
name|GeoRect
argument_list|(
name|quantizeLat
argument_list|(
name|rect
operator|.
name|minLat
argument_list|)
argument_list|,
name|quantizeLat
argument_list|(
name|rect
operator|.
name|maxLat
argument_list|)
argument_list|,
name|quantizeLon
argument_list|(
name|rect
operator|.
name|minLon
argument_list|)
argument_list|,
name|quantizeLon
argument_list|(
name|rect
operator|.
name|maxLon
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\nTEST: iter="
operator|+
name|iter
operator|+
literal|" rect="
operator|+
name|rect
argument_list|)
expr_stmt|;
block|}
name|Query
name|query
init|=
name|newRectQuery
argument_list|(
name|FIELD_NAME
argument_list|,
name|rect
operator|.
name|minLat
argument_list|,
name|rect
operator|.
name|maxLat
argument_list|,
name|rect
operator|.
name|minLon
argument_list|,
name|rect
operator|.
name|maxLon
argument_list|)
decl_stmt|;
specifier|final
name|FixedBitSet
name|hits
init|=
operator|new
name|FixedBitSet
argument_list|(
name|r
operator|.
name|maxDoc
argument_list|()
argument_list|)
decl_stmt|;
name|s
operator|.
name|search
argument_list|(
name|query
argument_list|,
operator|new
name|SimpleCollector
argument_list|()
block|{
specifier|private
name|int
name|docBase
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|needsScores
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|doSetNextReader
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|docBase
operator|=
name|context
operator|.
name|docBase
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|collect
parameter_list|(
name|int
name|doc
parameter_list|)
block|{
name|hits
operator|.
name|set
argument_list|(
name|docBase
operator|+
name|doc
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|boolean
name|fail
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|docID
init|=
literal|0
init|;
name|docID
operator|<
name|lats
operator|.
name|length
operator|/
literal|2
condition|;
name|docID
operator|++
control|)
block|{
name|double
name|latDoc1
init|=
name|lats
index|[
literal|2
operator|*
name|docID
index|]
decl_stmt|;
name|double
name|lonDoc1
init|=
name|lons
index|[
literal|2
operator|*
name|docID
index|]
decl_stmt|;
name|double
name|latDoc2
init|=
name|lats
index|[
literal|2
operator|*
name|docID
operator|+
literal|1
index|]
decl_stmt|;
name|double
name|lonDoc2
init|=
name|lons
index|[
literal|2
operator|*
name|docID
operator|+
literal|1
index|]
decl_stmt|;
name|boolean
name|result1
init|=
name|rectContainsPoint
argument_list|(
name|rect
argument_list|,
name|latDoc1
argument_list|,
name|lonDoc1
argument_list|)
decl_stmt|;
name|boolean
name|result2
init|=
name|rectContainsPoint
argument_list|(
name|rect
argument_list|,
name|latDoc2
argument_list|,
name|lonDoc2
argument_list|)
decl_stmt|;
name|boolean
name|expected
init|=
name|result1
operator|||
name|result2
decl_stmt|;
if|if
condition|(
name|hits
operator|.
name|get
argument_list|(
name|docID
argument_list|)
operator|!=
name|expected
condition|)
block|{
name|String
name|id
init|=
name|s
operator|.
name|doc
argument_list|(
name|docID
argument_list|)
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
decl_stmt|;
if|if
condition|(
name|expected
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TEST: id="
operator|+
name|id
operator|+
literal|" docID="
operator|+
name|docID
operator|+
literal|" should match but did not"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TEST: id="
operator|+
name|id
operator|+
literal|" docID="
operator|+
name|docID
operator|+
literal|" should not match but did"
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  rect="
operator|+
name|rect
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  lat="
operator|+
name|latDoc1
operator|+
literal|" lon="
operator|+
name|lonDoc1
operator|+
literal|"\n  lat="
operator|+
name|latDoc2
operator|+
literal|" lon="
operator|+
name|lonDoc2
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  result1="
operator|+
name|result1
operator|+
literal|" result2="
operator|+
name|result2
argument_list|)
expr_stmt|;
name|fail
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|fail
condition|)
block|{
name|fail
argument_list|(
literal|"some hits were wrong"
argument_list|)
expr_stmt|;
block|}
block|}
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|method|testRandomTiny
specifier|public
name|void
name|testRandomTiny
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Make sure single-leaf-node case is OK:
name|doTestRandom
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|method|testRandomMedium
specifier|public
name|void
name|testRandomMedium
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestRandom
argument_list|(
literal|10000
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
annotation|@
name|Nightly
DECL|method|testRandomBig
specifier|public
name|void
name|testRandomBig
parameter_list|()
throws|throws
name|Exception
block|{
name|assumeFalse
argument_list|(
literal|"Direct codec can OOME on this test"
argument_list|,
name|TestUtil
operator|.
name|getDocValuesFormat
argument_list|(
name|FIELD_NAME
argument_list|)
operator|.
name|equals
argument_list|(
literal|"Direct"
argument_list|)
argument_list|)
expr_stmt|;
name|assumeFalse
argument_list|(
literal|"Memory codec can OOME on this test"
argument_list|,
name|TestUtil
operator|.
name|getDocValuesFormat
argument_list|(
name|FIELD_NAME
argument_list|)
operator|.
name|equals
argument_list|(
literal|"Memory"
argument_list|)
argument_list|)
expr_stmt|;
name|doTestRandom
argument_list|(
literal|200000
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|method|doTestRandom
specifier|private
name|void
name|doTestRandom
parameter_list|(
name|int
name|count
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|numPoints
init|=
name|atLeast
argument_list|(
name|count
argument_list|)
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TEST: numPoints="
operator|+
name|numPoints
argument_list|)
expr_stmt|;
block|}
name|double
index|[]
name|lats
init|=
operator|new
name|double
index|[
name|numPoints
index|]
decl_stmt|;
name|double
index|[]
name|lons
init|=
operator|new
name|double
index|[
name|numPoints
index|]
decl_stmt|;
name|boolean
name|small
init|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
decl_stmt|;
name|boolean
name|haveRealDoc
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|id
init|=
literal|0
init|;
name|id
operator|<
name|numPoints
condition|;
name|id
operator|++
control|)
block|{
name|int
name|x
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|20
argument_list|)
decl_stmt|;
if|if
condition|(
name|x
operator|==
literal|17
condition|)
block|{
comment|// Some docs don't have a point:
name|lats
index|[
name|id
index|]
operator|=
name|Double
operator|.
name|NaN
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  id="
operator|+
name|id
operator|+
literal|" is missing"
argument_list|)
expr_stmt|;
block|}
continue|continue;
block|}
if|if
condition|(
name|id
operator|>
literal|0
operator|&&
name|x
operator|<
literal|3
operator|&&
name|haveRealDoc
condition|)
block|{
name|int
name|oldID
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|oldID
operator|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|id
argument_list|)
expr_stmt|;
if|if
condition|(
name|Double
operator|.
name|isNaN
argument_list|(
name|lats
index|[
name|oldID
index|]
argument_list|)
operator|==
literal|false
condition|)
block|{
break|break;
block|}
block|}
if|if
condition|(
name|x
operator|==
literal|0
condition|)
block|{
comment|// Identical lat to old point
name|lats
index|[
name|id
index|]
operator|=
name|lats
index|[
name|oldID
index|]
expr_stmt|;
name|lons
index|[
name|id
index|]
operator|=
name|randomLon
argument_list|(
name|small
argument_list|)
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  id="
operator|+
name|id
operator|+
literal|" lat="
operator|+
name|lats
index|[
name|id
index|]
operator|+
literal|" lon="
operator|+
name|lons
index|[
name|id
index|]
operator|+
literal|" (same lat as doc="
operator|+
name|oldID
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|x
operator|==
literal|1
condition|)
block|{
comment|// Identical lon to old point
name|lats
index|[
name|id
index|]
operator|=
name|randomLat
argument_list|(
name|small
argument_list|)
expr_stmt|;
name|lons
index|[
name|id
index|]
operator|=
name|lons
index|[
name|oldID
index|]
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  id="
operator|+
name|id
operator|+
literal|" lat="
operator|+
name|lats
index|[
name|id
index|]
operator|+
literal|" lon="
operator|+
name|lons
index|[
name|id
index|]
operator|+
literal|" (same lon as doc="
operator|+
name|oldID
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
assert|assert
name|x
operator|==
literal|2
assert|;
comment|// Fully identical point:
name|lats
index|[
name|id
index|]
operator|=
name|lats
index|[
name|oldID
index|]
expr_stmt|;
name|lons
index|[
name|id
index|]
operator|=
name|lons
index|[
name|oldID
index|]
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  id="
operator|+
name|id
operator|+
literal|" lat="
operator|+
name|lats
index|[
name|id
index|]
operator|+
literal|" lon="
operator|+
name|lons
index|[
name|id
index|]
operator|+
literal|" (same lat/lon as doc="
operator|+
name|oldID
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|lats
index|[
name|id
index|]
operator|=
name|randomLat
argument_list|(
name|small
argument_list|)
expr_stmt|;
name|lons
index|[
name|id
index|]
operator|=
name|randomLon
argument_list|(
name|small
argument_list|)
expr_stmt|;
name|haveRealDoc
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  id="
operator|+
name|id
operator|+
literal|" lat="
operator|+
name|lats
index|[
name|id
index|]
operator|+
literal|" lon="
operator|+
name|lons
index|[
name|id
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|verify
argument_list|(
name|small
argument_list|,
name|lats
argument_list|,
name|lons
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|method|randomLat
specifier|public
name|double
name|randomLat
parameter_list|(
name|boolean
name|small
parameter_list|)
block|{
if|if
condition|(
name|small
condition|)
block|{
return|return
name|GeoTestUtil
operator|.
name|nextLatitudeNear
argument_list|(
name|originLat
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|GeoTestUtil
operator|.
name|nextLatitude
argument_list|()
return|;
block|}
block|}
end_function
begin_function
DECL|method|randomLon
specifier|public
name|double
name|randomLon
parameter_list|(
name|boolean
name|small
parameter_list|)
block|{
if|if
condition|(
name|small
condition|)
block|{
return|return
name|GeoTestUtil
operator|.
name|nextLongitudeNear
argument_list|(
name|originLon
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|GeoTestUtil
operator|.
name|nextLongitude
argument_list|()
return|;
block|}
block|}
end_function
begin_comment
comment|/** Override this to quantize randomly generated lat, so the test won't fail due to quantization errors, which are 1) annoying to debug,    *  and 2) should never affect "real" usage terribly. */
end_comment
begin_function
DECL|method|quantizeLat
specifier|protected
name|double
name|quantizeLat
parameter_list|(
name|double
name|lat
parameter_list|)
block|{
return|return
name|lat
return|;
block|}
end_function
begin_comment
comment|/** Override this to quantize randomly generated lon, so the test won't fail due to quantization errors, which are 1) annoying to debug,    *  and 2) should never affect "real" usage terribly. */
end_comment
begin_function
DECL|method|quantizeLon
specifier|protected
name|double
name|quantizeLon
parameter_list|(
name|double
name|lon
parameter_list|)
block|{
return|return
name|lon
return|;
block|}
end_function
begin_function
DECL|method|randomRect
specifier|protected
name|GeoRect
name|randomRect
parameter_list|(
name|boolean
name|small
parameter_list|)
block|{
if|if
condition|(
name|small
condition|)
block|{
return|return
name|GeoTestUtil
operator|.
name|nextBoxNear
argument_list|(
name|originLat
argument_list|,
name|originLon
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|GeoTestUtil
operator|.
name|nextBox
argument_list|()
return|;
block|}
block|}
end_function
begin_function
DECL|method|initIndexWriterConfig
specifier|protected
name|void
name|initIndexWriterConfig
parameter_list|(
name|String
name|field
parameter_list|,
name|IndexWriterConfig
name|iwc
parameter_list|)
block|{   }
end_function
begin_function_decl
DECL|method|addPointToDoc
specifier|protected
specifier|abstract
name|void
name|addPointToDoc
parameter_list|(
name|String
name|field
parameter_list|,
name|Document
name|doc
parameter_list|,
name|double
name|lat
parameter_list|,
name|double
name|lon
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
DECL|method|newRectQuery
specifier|protected
specifier|abstract
name|Query
name|newRectQuery
parameter_list|(
name|String
name|field
parameter_list|,
name|double
name|minLat
parameter_list|,
name|double
name|maxLat
parameter_list|,
name|double
name|minLon
parameter_list|,
name|double
name|maxLon
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
DECL|method|newDistanceQuery
specifier|protected
specifier|abstract
name|Query
name|newDistanceQuery
parameter_list|(
name|String
name|field
parameter_list|,
name|double
name|centerLat
parameter_list|,
name|double
name|centerLon
parameter_list|,
name|double
name|radiusMeters
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
DECL|method|newPolygonQuery
specifier|protected
specifier|abstract
name|Query
name|newPolygonQuery
parameter_list|(
name|String
name|field
parameter_list|,
name|Polygon
modifier|...
name|polygon
parameter_list|)
function_decl|;
end_function_decl
begin_function
DECL|method|rectContainsPoint
specifier|static
specifier|final
name|boolean
name|rectContainsPoint
parameter_list|(
name|GeoRect
name|rect
parameter_list|,
name|double
name|pointLat
parameter_list|,
name|double
name|pointLon
parameter_list|)
block|{
assert|assert
name|Double
operator|.
name|isNaN
argument_list|(
name|pointLat
argument_list|)
operator|==
literal|false
assert|;
if|if
condition|(
name|rect
operator|.
name|minLon
operator|<
name|rect
operator|.
name|maxLon
condition|)
block|{
return|return
name|GeoRelationUtils
operator|.
name|pointInRectPrecise
argument_list|(
name|pointLat
argument_list|,
name|pointLon
argument_list|,
name|rect
operator|.
name|minLat
argument_list|,
name|rect
operator|.
name|maxLat
argument_list|,
name|rect
operator|.
name|minLon
argument_list|,
name|rect
operator|.
name|maxLon
argument_list|)
return|;
block|}
else|else
block|{
comment|// Rect crosses dateline:
return|return
name|GeoRelationUtils
operator|.
name|pointInRectPrecise
argument_list|(
name|pointLat
argument_list|,
name|pointLon
argument_list|,
name|rect
operator|.
name|minLat
argument_list|,
name|rect
operator|.
name|maxLat
argument_list|,
operator|-
literal|180.0
argument_list|,
name|rect
operator|.
name|maxLon
argument_list|)
operator|||
name|GeoRelationUtils
operator|.
name|pointInRectPrecise
argument_list|(
name|pointLat
argument_list|,
name|pointLon
argument_list|,
name|rect
operator|.
name|minLat
argument_list|,
name|rect
operator|.
name|maxLat
argument_list|,
name|rect
operator|.
name|minLon
argument_list|,
literal|180.0
argument_list|)
return|;
block|}
block|}
end_function
begin_function
DECL|method|verify
specifier|private
name|void
name|verify
parameter_list|(
name|boolean
name|small
parameter_list|,
name|double
index|[]
name|lats
parameter_list|,
name|double
index|[]
name|lons
parameter_list|)
throws|throws
name|Exception
block|{
comment|// quantize each value the same way the index does
comment|// NaN means missing for the doc!!!!!
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|lats
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|Double
operator|.
name|isNaN
argument_list|(
name|lats
index|[
name|i
index|]
argument_list|)
condition|)
block|{
name|lats
index|[
name|i
index|]
operator|=
name|quantizeLat
argument_list|(
name|lats
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|lons
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|Double
operator|.
name|isNaN
argument_list|(
name|lons
index|[
name|i
index|]
argument_list|)
condition|)
block|{
name|lons
index|[
name|i
index|]
operator|=
name|quantizeLon
argument_list|(
name|lons
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
name|verifyRandomRectangles
argument_list|(
name|small
argument_list|,
name|lats
argument_list|,
name|lons
argument_list|)
expr_stmt|;
name|verifyRandomDistances
argument_list|(
name|small
argument_list|,
name|lats
argument_list|,
name|lons
argument_list|)
expr_stmt|;
name|verifyRandomPolygons
argument_list|(
name|small
argument_list|,
name|lats
argument_list|,
name|lons
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|method|verifyRandomRectangles
specifier|protected
name|void
name|verifyRandomRectangles
parameter_list|(
name|boolean
name|small
parameter_list|,
name|double
index|[]
name|lats
parameter_list|,
name|double
index|[]
name|lons
parameter_list|)
throws|throws
name|Exception
block|{
name|IndexWriterConfig
name|iwc
init|=
name|newIndexWriterConfig
argument_list|()
decl_stmt|;
comment|// Else we can get O(N^2) merging:
name|int
name|mbd
init|=
name|iwc
operator|.
name|getMaxBufferedDocs
argument_list|()
decl_stmt|;
if|if
condition|(
name|mbd
operator|!=
operator|-
literal|1
operator|&&
name|mbd
operator|<
name|lats
operator|.
name|length
operator|/
literal|100
condition|)
block|{
name|iwc
operator|.
name|setMaxBufferedDocs
argument_list|(
name|lats
operator|.
name|length
operator|/
literal|100
argument_list|)
expr_stmt|;
block|}
name|Directory
name|dir
decl_stmt|;
if|if
condition|(
name|lats
operator|.
name|length
operator|>
literal|100000
condition|)
block|{
name|dir
operator|=
name|newFSDirectory
argument_list|(
name|createTempDir
argument_list|(
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|dir
operator|=
name|newDirectory
argument_list|()
expr_stmt|;
block|}
name|Set
argument_list|<
name|Integer
argument_list|>
name|deleted
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
comment|// RandomIndexWriter is too slow here:
name|IndexWriter
name|w
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|iwc
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|id
init|=
literal|0
init|;
name|id
operator|<
name|lats
operator|.
name|length
condition|;
name|id
operator|++
control|)
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newStringField
argument_list|(
literal|"id"
argument_list|,
literal|""
operator|+
name|id
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|NumericDocValuesField
argument_list|(
literal|"id"
argument_list|,
name|id
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|Double
operator|.
name|isNaN
argument_list|(
name|lats
index|[
name|id
index|]
argument_list|)
operator|==
literal|false
condition|)
block|{
name|addPointToDoc
argument_list|(
name|FIELD_NAME
argument_list|,
name|doc
argument_list|,
name|lats
index|[
name|id
index|]
argument_list|,
name|lons
index|[
name|id
index|]
argument_list|)
expr_stmt|;
block|}
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
if|if
condition|(
name|id
operator|>
literal|0
operator|&&
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
operator|==
literal|42
condition|)
block|{
name|int
name|idToDelete
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|w
operator|.
name|deleteDocuments
argument_list|(
operator|new
name|Term
argument_list|(
literal|"id"
argument_list|,
literal|""
operator|+
name|idToDelete
argument_list|)
argument_list|)
expr_stmt|;
name|deleted
operator|.
name|add
argument_list|(
name|idToDelete
argument_list|)
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  delete id="
operator|+
name|idToDelete
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|w
operator|.
name|forceMerge
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
specifier|final
name|IndexReader
name|r
init|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|w
argument_list|)
decl_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|IndexSearcher
name|s
init|=
name|newSearcher
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|int
name|iters
init|=
name|atLeast
argument_list|(
literal|25
argument_list|)
decl_stmt|;
name|NumericDocValues
name|docIDToID
init|=
name|MultiDocValues
operator|.
name|getNumericValues
argument_list|(
name|r
argument_list|,
literal|"id"
argument_list|)
decl_stmt|;
name|Bits
name|liveDocs
init|=
name|MultiFields
operator|.
name|getLiveDocs
argument_list|(
name|s
operator|.
name|getIndexReader
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|maxDoc
init|=
name|s
operator|.
name|getIndexReader
argument_list|()
operator|.
name|maxDoc
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|iter
init|=
literal|0
init|;
name|iter
operator|<
name|iters
condition|;
name|iter
operator|++
control|)
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\nTEST: iter="
operator|+
name|iter
operator|+
literal|" s="
operator|+
name|s
argument_list|)
expr_stmt|;
block|}
name|GeoRect
name|rect
init|=
name|randomRect
argument_list|(
name|small
argument_list|)
decl_stmt|;
comment|// TODO: why does this test need this quantization leniency? something is not right
name|rect
operator|=
operator|new
name|GeoRect
argument_list|(
name|quantizeLat
argument_list|(
name|rect
operator|.
name|minLat
argument_list|)
argument_list|,
name|quantizeLat
argument_list|(
name|rect
operator|.
name|maxLat
argument_list|)
argument_list|,
name|quantizeLon
argument_list|(
name|rect
operator|.
name|minLon
argument_list|)
argument_list|,
name|quantizeLon
argument_list|(
name|rect
operator|.
name|maxLon
argument_list|)
argument_list|)
expr_stmt|;
name|Query
name|query
init|=
name|newRectQuery
argument_list|(
name|FIELD_NAME
argument_list|,
name|rect
operator|.
name|minLat
argument_list|,
name|rect
operator|.
name|maxLat
argument_list|,
name|rect
operator|.
name|minLon
argument_list|,
name|rect
operator|.
name|maxLon
argument_list|)
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  query="
operator|+
name|query
argument_list|)
expr_stmt|;
block|}
specifier|final
name|FixedBitSet
name|hits
init|=
operator|new
name|FixedBitSet
argument_list|(
name|maxDoc
argument_list|)
decl_stmt|;
name|s
operator|.
name|search
argument_list|(
name|query
argument_list|,
operator|new
name|SimpleCollector
argument_list|()
block|{
specifier|private
name|int
name|docBase
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|needsScores
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|doSetNextReader
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|docBase
operator|=
name|context
operator|.
name|docBase
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|collect
parameter_list|(
name|int
name|doc
parameter_list|)
block|{
name|hits
operator|.
name|set
argument_list|(
name|docBase
operator|+
name|doc
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|boolean
name|fail
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|docID
init|=
literal|0
init|;
name|docID
operator|<
name|maxDoc
condition|;
name|docID
operator|++
control|)
block|{
name|int
name|id
init|=
operator|(
name|int
operator|)
name|docIDToID
operator|.
name|get
argument_list|(
name|docID
argument_list|)
decl_stmt|;
name|boolean
name|expected
decl_stmt|;
if|if
condition|(
name|liveDocs
operator|!=
literal|null
operator|&&
name|liveDocs
operator|.
name|get
argument_list|(
name|docID
argument_list|)
operator|==
literal|false
condition|)
block|{
comment|// document is deleted
name|expected
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|Double
operator|.
name|isNaN
argument_list|(
name|lats
index|[
name|id
index|]
argument_list|)
condition|)
block|{
name|expected
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|expected
operator|=
name|rectContainsPoint
argument_list|(
name|rect
argument_list|,
name|lats
index|[
name|id
index|]
argument_list|,
name|lons
index|[
name|id
index|]
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|hits
operator|.
name|get
argument_list|(
name|docID
argument_list|)
operator|!=
name|expected
condition|)
block|{
name|StringBuilder
name|b
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|expected
condition|)
block|{
name|b
operator|.
name|append
argument_list|(
literal|"FAIL: id="
operator|+
name|id
operator|+
literal|" should match but did not\n"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|b
operator|.
name|append
argument_list|(
literal|"FAIL: id="
operator|+
name|id
operator|+
literal|" should not match but did\n"
argument_list|)
expr_stmt|;
block|}
name|b
operator|.
name|append
argument_list|(
literal|"  query="
operator|+
name|query
operator|+
literal|" docID="
operator|+
name|docID
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"  lat="
operator|+
name|lats
index|[
name|id
index|]
operator|+
literal|" lon="
operator|+
name|lons
index|[
name|id
index|]
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"  deleted?="
operator|+
operator|(
name|liveDocs
operator|!=
literal|null
operator|&&
name|liveDocs
operator|.
name|get
argument_list|(
name|docID
argument_list|)
operator|==
literal|false
operator|)
argument_list|)
expr_stmt|;
if|if
condition|(
literal|true
condition|)
block|{
name|fail
argument_list|(
literal|"wrong hit (first of possibly more):\n\n"
operator|+
name|b
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|b
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|fail
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|fail
condition|)
block|{
name|fail
argument_list|(
literal|"some hits were wrong"
argument_list|)
expr_stmt|;
block|}
block|}
name|IOUtils
operator|.
name|close
argument_list|(
name|r
argument_list|,
name|dir
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|method|verifyRandomDistances
specifier|protected
name|void
name|verifyRandomDistances
parameter_list|(
name|boolean
name|small
parameter_list|,
name|double
index|[]
name|lats
parameter_list|,
name|double
index|[]
name|lons
parameter_list|)
throws|throws
name|Exception
block|{
name|IndexWriterConfig
name|iwc
init|=
name|newIndexWriterConfig
argument_list|()
decl_stmt|;
comment|// Else we can get O(N^2) merging:
name|int
name|mbd
init|=
name|iwc
operator|.
name|getMaxBufferedDocs
argument_list|()
decl_stmt|;
if|if
condition|(
name|mbd
operator|!=
operator|-
literal|1
operator|&&
name|mbd
operator|<
name|lats
operator|.
name|length
operator|/
literal|100
condition|)
block|{
name|iwc
operator|.
name|setMaxBufferedDocs
argument_list|(
name|lats
operator|.
name|length
operator|/
literal|100
argument_list|)
expr_stmt|;
block|}
name|Directory
name|dir
decl_stmt|;
if|if
condition|(
name|lats
operator|.
name|length
operator|>
literal|100000
condition|)
block|{
name|dir
operator|=
name|newFSDirectory
argument_list|(
name|createTempDir
argument_list|(
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|dir
operator|=
name|newDirectory
argument_list|()
expr_stmt|;
block|}
name|Set
argument_list|<
name|Integer
argument_list|>
name|deleted
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
comment|// RandomIndexWriter is too slow here:
name|IndexWriter
name|w
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|iwc
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|id
init|=
literal|0
init|;
name|id
operator|<
name|lats
operator|.
name|length
condition|;
name|id
operator|++
control|)
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newStringField
argument_list|(
literal|"id"
argument_list|,
literal|""
operator|+
name|id
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|NumericDocValuesField
argument_list|(
literal|"id"
argument_list|,
name|id
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|Double
operator|.
name|isNaN
argument_list|(
name|lats
index|[
name|id
index|]
argument_list|)
operator|==
literal|false
condition|)
block|{
name|addPointToDoc
argument_list|(
name|FIELD_NAME
argument_list|,
name|doc
argument_list|,
name|lats
index|[
name|id
index|]
argument_list|,
name|lons
index|[
name|id
index|]
argument_list|)
expr_stmt|;
block|}
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
if|if
condition|(
name|id
operator|>
literal|0
operator|&&
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
operator|==
literal|42
condition|)
block|{
name|int
name|idToDelete
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|w
operator|.
name|deleteDocuments
argument_list|(
operator|new
name|Term
argument_list|(
literal|"id"
argument_list|,
literal|""
operator|+
name|idToDelete
argument_list|)
argument_list|)
expr_stmt|;
name|deleted
operator|.
name|add
argument_list|(
name|idToDelete
argument_list|)
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  delete id="
operator|+
name|idToDelete
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|w
operator|.
name|forceMerge
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
specifier|final
name|IndexReader
name|r
init|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|w
argument_list|)
decl_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|IndexSearcher
name|s
init|=
name|newSearcher
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|int
name|iters
init|=
name|atLeast
argument_list|(
literal|25
argument_list|)
decl_stmt|;
name|NumericDocValues
name|docIDToID
init|=
name|MultiDocValues
operator|.
name|getNumericValues
argument_list|(
name|r
argument_list|,
literal|"id"
argument_list|)
decl_stmt|;
name|Bits
name|liveDocs
init|=
name|MultiFields
operator|.
name|getLiveDocs
argument_list|(
name|s
operator|.
name|getIndexReader
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|maxDoc
init|=
name|s
operator|.
name|getIndexReader
argument_list|()
operator|.
name|maxDoc
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|iter
init|=
literal|0
init|;
name|iter
operator|<
name|iters
condition|;
name|iter
operator|++
control|)
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\nTEST: iter="
operator|+
name|iter
operator|+
literal|" s="
operator|+
name|s
argument_list|)
expr_stmt|;
block|}
comment|// Distance
specifier|final
name|double
name|centerLat
init|=
name|randomLat
argument_list|(
name|small
argument_list|)
decl_stmt|;
specifier|final
name|double
name|centerLon
init|=
name|randomLon
argument_list|(
name|small
argument_list|)
decl_stmt|;
specifier|final
name|double
name|radiusMeters
decl_stmt|;
if|if
condition|(
name|small
condition|)
block|{
comment|// Approx 3 degrees lon at the equator:
name|radiusMeters
operator|=
name|random
argument_list|()
operator|.
name|nextDouble
argument_list|()
operator|*
literal|333000
operator|+
literal|1.0
expr_stmt|;
block|}
else|else
block|{
comment|// So the query can cover at most 50% of the earth's surface:
name|radiusMeters
operator|=
name|random
argument_list|()
operator|.
name|nextDouble
argument_list|()
operator|*
name|GeoUtils
operator|.
name|SEMIMAJOR_AXIS
operator|*
name|Math
operator|.
name|PI
operator|/
literal|2.0
operator|+
literal|1.0
expr_stmt|;
block|}
if|if
condition|(
name|VERBOSE
condition|)
block|{
specifier|final
name|DecimalFormat
name|df
init|=
operator|new
name|DecimalFormat
argument_list|(
literal|"#,###.00"
argument_list|,
name|DecimalFormatSymbols
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|ENGLISH
argument_list|)
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  radiusMeters = "
operator|+
name|df
operator|.
name|format
argument_list|(
name|radiusMeters
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Query
name|query
init|=
name|newDistanceQuery
argument_list|(
name|FIELD_NAME
argument_list|,
name|centerLat
argument_list|,
name|centerLon
argument_list|,
name|radiusMeters
argument_list|)
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  query="
operator|+
name|query
argument_list|)
expr_stmt|;
block|}
specifier|final
name|FixedBitSet
name|hits
init|=
operator|new
name|FixedBitSet
argument_list|(
name|maxDoc
argument_list|)
decl_stmt|;
name|s
operator|.
name|search
argument_list|(
name|query
argument_list|,
operator|new
name|SimpleCollector
argument_list|()
block|{
specifier|private
name|int
name|docBase
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|needsScores
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|doSetNextReader
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|docBase
operator|=
name|context
operator|.
name|docBase
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|collect
parameter_list|(
name|int
name|doc
parameter_list|)
block|{
name|hits
operator|.
name|set
argument_list|(
name|docBase
operator|+
name|doc
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|boolean
name|fail
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|docID
init|=
literal|0
init|;
name|docID
operator|<
name|maxDoc
condition|;
name|docID
operator|++
control|)
block|{
name|int
name|id
init|=
operator|(
name|int
operator|)
name|docIDToID
operator|.
name|get
argument_list|(
name|docID
argument_list|)
decl_stmt|;
name|boolean
name|expected
decl_stmt|;
if|if
condition|(
name|liveDocs
operator|!=
literal|null
operator|&&
name|liveDocs
operator|.
name|get
argument_list|(
name|docID
argument_list|)
operator|==
literal|false
condition|)
block|{
comment|// document is deleted
name|expected
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|Double
operator|.
name|isNaN
argument_list|(
name|lats
index|[
name|id
index|]
argument_list|)
condition|)
block|{
name|expected
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|expected
operator|=
name|SloppyMath
operator|.
name|haversinMeters
argument_list|(
name|centerLat
argument_list|,
name|centerLon
argument_list|,
name|lats
index|[
name|id
index|]
argument_list|,
name|lons
index|[
name|id
index|]
argument_list|)
operator|<=
name|radiusMeters
expr_stmt|;
block|}
if|if
condition|(
name|hits
operator|.
name|get
argument_list|(
name|docID
argument_list|)
operator|!=
name|expected
condition|)
block|{
name|StringBuilder
name|b
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|expected
condition|)
block|{
name|b
operator|.
name|append
argument_list|(
literal|"FAIL: id="
operator|+
name|id
operator|+
literal|" should match but did not\n"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|b
operator|.
name|append
argument_list|(
literal|"FAIL: id="
operator|+
name|id
operator|+
literal|" should not match but did\n"
argument_list|)
expr_stmt|;
block|}
name|b
operator|.
name|append
argument_list|(
literal|"  query="
operator|+
name|query
operator|+
literal|" docID="
operator|+
name|docID
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"  lat="
operator|+
name|lats
index|[
name|id
index|]
operator|+
literal|" lon="
operator|+
name|lons
index|[
name|id
index|]
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"  deleted?="
operator|+
operator|(
name|liveDocs
operator|!=
literal|null
operator|&&
name|liveDocs
operator|.
name|get
argument_list|(
name|docID
argument_list|)
operator|==
literal|false
operator|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|Double
operator|.
name|isNaN
argument_list|(
name|lats
index|[
name|id
index|]
argument_list|)
operator|==
literal|false
condition|)
block|{
name|double
name|distanceMeters
init|=
name|SloppyMath
operator|.
name|haversinMeters
argument_list|(
name|centerLat
argument_list|,
name|centerLon
argument_list|,
name|lats
index|[
name|id
index|]
argument_list|,
name|lons
index|[
name|id
index|]
argument_list|)
decl_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"  centerLat="
operator|+
name|centerLat
operator|+
literal|" centerLon="
operator|+
name|centerLon
operator|+
literal|" distanceMeters="
operator|+
name|distanceMeters
operator|+
literal|" vs radiusMeters="
operator|+
name|radiusMeters
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|true
condition|)
block|{
name|fail
argument_list|(
literal|"wrong hit (first of possibly more):\n\n"
operator|+
name|b
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|b
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|fail
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|fail
condition|)
block|{
name|fail
argument_list|(
literal|"some hits were wrong"
argument_list|)
expr_stmt|;
block|}
block|}
name|IOUtils
operator|.
name|close
argument_list|(
name|r
argument_list|,
name|dir
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|method|verifyRandomPolygons
specifier|protected
name|void
name|verifyRandomPolygons
parameter_list|(
name|boolean
name|small
parameter_list|,
name|double
index|[]
name|lats
parameter_list|,
name|double
index|[]
name|lons
parameter_list|)
throws|throws
name|Exception
block|{
name|IndexWriterConfig
name|iwc
init|=
name|newIndexWriterConfig
argument_list|()
decl_stmt|;
comment|// Else we can get O(N^2) merging:
name|int
name|mbd
init|=
name|iwc
operator|.
name|getMaxBufferedDocs
argument_list|()
decl_stmt|;
if|if
condition|(
name|mbd
operator|!=
operator|-
literal|1
operator|&&
name|mbd
operator|<
name|lats
operator|.
name|length
operator|/
literal|100
condition|)
block|{
name|iwc
operator|.
name|setMaxBufferedDocs
argument_list|(
name|lats
operator|.
name|length
operator|/
literal|100
argument_list|)
expr_stmt|;
block|}
name|Directory
name|dir
decl_stmt|;
if|if
condition|(
name|lats
operator|.
name|length
operator|>
literal|100000
condition|)
block|{
name|dir
operator|=
name|newFSDirectory
argument_list|(
name|createTempDir
argument_list|(
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|dir
operator|=
name|newDirectory
argument_list|()
expr_stmt|;
block|}
name|Set
argument_list|<
name|Integer
argument_list|>
name|deleted
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
comment|// RandomIndexWriter is too slow here:
name|IndexWriter
name|w
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|iwc
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|id
init|=
literal|0
init|;
name|id
operator|<
name|lats
operator|.
name|length
condition|;
name|id
operator|++
control|)
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newStringField
argument_list|(
literal|"id"
argument_list|,
literal|""
operator|+
name|id
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|NumericDocValuesField
argument_list|(
literal|"id"
argument_list|,
name|id
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|Double
operator|.
name|isNaN
argument_list|(
name|lats
index|[
name|id
index|]
argument_list|)
operator|==
literal|false
condition|)
block|{
name|addPointToDoc
argument_list|(
name|FIELD_NAME
argument_list|,
name|doc
argument_list|,
name|lats
index|[
name|id
index|]
argument_list|,
name|lons
index|[
name|id
index|]
argument_list|)
expr_stmt|;
block|}
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
if|if
condition|(
name|id
operator|>
literal|0
operator|&&
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
operator|==
literal|42
condition|)
block|{
name|int
name|idToDelete
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|w
operator|.
name|deleteDocuments
argument_list|(
operator|new
name|Term
argument_list|(
literal|"id"
argument_list|,
literal|""
operator|+
name|idToDelete
argument_list|)
argument_list|)
expr_stmt|;
name|deleted
operator|.
name|add
argument_list|(
name|idToDelete
argument_list|)
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  delete id="
operator|+
name|idToDelete
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|w
operator|.
name|forceMerge
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
specifier|final
name|IndexReader
name|r
init|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|w
argument_list|)
decl_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// We can't wrap with "exotic" readers because points needs to work:
name|IndexSearcher
name|s
init|=
name|newSearcher
argument_list|(
name|r
argument_list|)
decl_stmt|;
specifier|final
name|int
name|iters
init|=
name|atLeast
argument_list|(
literal|75
argument_list|)
decl_stmt|;
name|NumericDocValues
name|docIDToID
init|=
name|MultiDocValues
operator|.
name|getNumericValues
argument_list|(
name|r
argument_list|,
literal|"id"
argument_list|)
decl_stmt|;
name|Bits
name|liveDocs
init|=
name|MultiFields
operator|.
name|getLiveDocs
argument_list|(
name|s
operator|.
name|getIndexReader
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|maxDoc
init|=
name|s
operator|.
name|getIndexReader
argument_list|()
operator|.
name|maxDoc
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|iter
init|=
literal|0
init|;
name|iter
operator|<
name|iters
condition|;
name|iter
operator|++
control|)
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\nTEST: iter="
operator|+
name|iter
operator|+
literal|" s="
operator|+
name|s
argument_list|)
expr_stmt|;
block|}
comment|// Polygon
specifier|final
name|Polygon
name|polygon
decl_stmt|;
if|if
condition|(
name|small
condition|)
block|{
name|polygon
operator|=
name|GeoTestUtil
operator|.
name|nextPolygonNear
argument_list|(
name|originLat
argument_list|,
name|originLon
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|polygon
operator|=
name|GeoTestUtil
operator|.
name|nextPolygon
argument_list|()
expr_stmt|;
block|}
name|Query
name|query
init|=
name|newPolygonQuery
argument_list|(
name|FIELD_NAME
argument_list|,
name|polygon
argument_list|)
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  query="
operator|+
name|query
argument_list|)
expr_stmt|;
block|}
specifier|final
name|FixedBitSet
name|hits
init|=
operator|new
name|FixedBitSet
argument_list|(
name|maxDoc
argument_list|)
decl_stmt|;
name|s
operator|.
name|search
argument_list|(
name|query
argument_list|,
operator|new
name|SimpleCollector
argument_list|()
block|{
specifier|private
name|int
name|docBase
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|needsScores
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|doSetNextReader
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|docBase
operator|=
name|context
operator|.
name|docBase
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|collect
parameter_list|(
name|int
name|doc
parameter_list|)
block|{
name|hits
operator|.
name|set
argument_list|(
name|docBase
operator|+
name|doc
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|boolean
name|fail
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|docID
init|=
literal|0
init|;
name|docID
operator|<
name|maxDoc
condition|;
name|docID
operator|++
control|)
block|{
name|int
name|id
init|=
operator|(
name|int
operator|)
name|docIDToID
operator|.
name|get
argument_list|(
name|docID
argument_list|)
decl_stmt|;
name|boolean
name|expected
decl_stmt|;
if|if
condition|(
name|liveDocs
operator|!=
literal|null
operator|&&
name|liveDocs
operator|.
name|get
argument_list|(
name|docID
argument_list|)
operator|==
literal|false
condition|)
block|{
comment|// document is deleted
name|expected
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|Double
operator|.
name|isNaN
argument_list|(
name|lats
index|[
name|id
index|]
argument_list|)
condition|)
block|{
name|expected
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|expected
operator|=
name|polygon
operator|.
name|contains
argument_list|(
name|lats
index|[
name|id
index|]
argument_list|,
name|lons
index|[
name|id
index|]
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|hits
operator|.
name|get
argument_list|(
name|docID
argument_list|)
operator|!=
name|expected
condition|)
block|{
name|StringBuilder
name|b
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|expected
condition|)
block|{
name|b
operator|.
name|append
argument_list|(
literal|"FAIL: id="
operator|+
name|id
operator|+
literal|" should match but did not\n"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|b
operator|.
name|append
argument_list|(
literal|"FAIL: id="
operator|+
name|id
operator|+
literal|" should not match but did\n"
argument_list|)
expr_stmt|;
block|}
name|b
operator|.
name|append
argument_list|(
literal|"  query="
operator|+
name|query
operator|+
literal|" docID="
operator|+
name|docID
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"  lat="
operator|+
name|lats
index|[
name|id
index|]
operator|+
literal|" lon="
operator|+
name|lons
index|[
name|id
index|]
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"  deleted?="
operator|+
operator|(
name|liveDocs
operator|!=
literal|null
operator|&&
name|liveDocs
operator|.
name|get
argument_list|(
name|docID
argument_list|)
operator|==
literal|false
operator|)
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"  polygon="
operator|+
name|polygon
argument_list|)
expr_stmt|;
if|if
condition|(
literal|true
condition|)
block|{
name|fail
argument_list|(
literal|"wrong hit (first of possibly more):\n\n"
operator|+
name|b
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|b
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|fail
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|fail
condition|)
block|{
name|fail
argument_list|(
literal|"some hits were wrong"
argument_list|)
expr_stmt|;
block|}
block|}
name|IOUtils
operator|.
name|close
argument_list|(
name|r
argument_list|,
name|dir
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|method|testRectBoundariesAreInclusive
specifier|public
name|void
name|testRectBoundariesAreInclusive
parameter_list|()
throws|throws
name|Exception
block|{
name|GeoRect
name|rect
decl_stmt|;
comment|// TODO: why this dateline leniency???
while|while
condition|(
literal|true
condition|)
block|{
name|rect
operator|=
name|randomRect
argument_list|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|rect
operator|.
name|crossesDateline
argument_list|()
operator|==
literal|false
condition|)
block|{
break|break;
block|}
block|}
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriterConfig
name|iwc
init|=
name|newIndexWriterConfig
argument_list|()
decl_stmt|;
name|RandomIndexWriter
name|w
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|,
name|iwc
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
literal|3
condition|;
name|x
operator|++
control|)
block|{
name|double
name|lat
decl_stmt|;
if|if
condition|(
name|x
operator|==
literal|0
condition|)
block|{
name|lat
operator|=
name|rect
operator|.
name|minLat
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|x
operator|==
literal|1
condition|)
block|{
name|lat
operator|=
name|quantizeLat
argument_list|(
operator|(
name|rect
operator|.
name|minLat
operator|+
name|rect
operator|.
name|maxLat
operator|)
operator|/
literal|2.0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|lat
operator|=
name|rect
operator|.
name|maxLat
expr_stmt|;
block|}
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
literal|3
condition|;
name|y
operator|++
control|)
block|{
name|double
name|lon
decl_stmt|;
if|if
condition|(
name|y
operator|==
literal|0
condition|)
block|{
name|lon
operator|=
name|rect
operator|.
name|minLon
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|y
operator|==
literal|1
condition|)
block|{
if|if
condition|(
name|x
operator|==
literal|1
condition|)
block|{
continue|continue;
block|}
name|lon
operator|=
name|quantizeLon
argument_list|(
operator|(
name|rect
operator|.
name|minLon
operator|+
name|rect
operator|.
name|maxLon
operator|)
operator|/
literal|2.0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|lon
operator|=
name|rect
operator|.
name|maxLon
expr_stmt|;
block|}
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|addPointToDoc
argument_list|(
name|FIELD_NAME
argument_list|,
name|doc
argument_list|,
name|lat
argument_list|,
name|lon
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
block|}
name|IndexReader
name|r
init|=
name|w
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|IndexSearcher
name|s
init|=
name|newSearcher
argument_list|(
name|r
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|8
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|newRectQuery
argument_list|(
name|FIELD_NAME
argument_list|,
name|rect
operator|.
name|minLat
argument_list|,
name|rect
operator|.
name|maxLat
argument_list|,
name|rect
operator|.
name|minLon
argument_list|,
name|rect
operator|.
name|maxLon
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/** Run a few iterations with just 10 docs, hopefully easy to debug */
end_comment
begin_function
DECL|method|testRandomDistance
specifier|public
name|void
name|testRandomDistance
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|iters
init|=
literal|0
init|;
name|iters
operator|<
literal|100
condition|;
name|iters
operator|++
control|)
block|{
name|doRandomDistanceTest
argument_list|(
literal|10
argument_list|,
literal|100
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/** Runs with thousands of docs */
end_comment
begin_function
annotation|@
name|Nightly
DECL|method|testRandomDistanceHuge
specifier|public
name|void
name|testRandomDistanceHuge
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|iters
init|=
literal|0
init|;
name|iters
operator|<
literal|10
condition|;
name|iters
operator|++
control|)
block|{
name|doRandomDistanceTest
argument_list|(
literal|2000
argument_list|,
literal|100
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|method|doRandomDistanceTest
specifier|private
name|void
name|doRandomDistanceTest
parameter_list|(
name|int
name|numDocs
parameter_list|,
name|int
name|numQueries
parameter_list|)
throws|throws
name|IOException
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriterConfig
name|iwc
init|=
name|newIndexWriterConfig
argument_list|()
decl_stmt|;
name|int
name|pointsInLeaf
init|=
literal|2
operator|+
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|iwc
operator|.
name|setCodec
argument_list|(
operator|new
name|FilterCodec
argument_list|(
literal|"Lucene60"
argument_list|,
name|TestUtil
operator|.
name|getDefaultCodec
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|PointsFormat
name|pointsFormat
parameter_list|()
block|{
return|return
operator|new
name|PointsFormat
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|PointsWriter
name|fieldsWriter
parameter_list|(
name|SegmentWriteState
name|writeState
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|Lucene60PointsWriter
argument_list|(
name|writeState
argument_list|,
name|pointsInLeaf
argument_list|,
name|BKDWriter
operator|.
name|DEFAULT_MAX_MB_SORT_IN_HEAP
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|PointsReader
name|fieldsReader
parameter_list|(
name|SegmentReadState
name|readState
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|Lucene60PointsReader
argument_list|(
name|readState
argument_list|)
return|;
block|}
block|}
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|RandomIndexWriter
name|writer
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|,
name|iwc
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
name|i
operator|++
control|)
block|{
name|double
name|latRaw
init|=
name|GeoTestUtil
operator|.
name|nextLatitude
argument_list|()
decl_stmt|;
name|double
name|lonRaw
init|=
name|GeoTestUtil
operator|.
name|nextLongitude
argument_list|()
decl_stmt|;
comment|// pre-normalize up front, so we can just use quantized value for testing and do simple exact comparisons
name|double
name|lat
init|=
name|quantizeLat
argument_list|(
name|latRaw
argument_list|)
decl_stmt|;
name|double
name|lon
init|=
name|quantizeLon
argument_list|(
name|lonRaw
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|addPointToDoc
argument_list|(
literal|"field"
argument_list|,
name|doc
argument_list|,
name|lat
argument_list|,
name|lon
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|StoredField
argument_list|(
literal|"lat"
argument_list|,
name|lat
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|StoredField
argument_list|(
literal|"lon"
argument_list|,
name|lon
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
name|IndexReader
name|reader
init|=
name|writer
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|IndexSearcher
name|searcher
init|=
name|newSearcher
argument_list|(
name|reader
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numQueries
condition|;
name|i
operator|++
control|)
block|{
name|double
name|lat
init|=
name|GeoTestUtil
operator|.
name|nextLatitude
argument_list|()
decl_stmt|;
name|double
name|lon
init|=
name|GeoTestUtil
operator|.
name|nextLongitude
argument_list|()
decl_stmt|;
name|double
name|radius
init|=
literal|50000000D
operator|*
name|random
argument_list|()
operator|.
name|nextDouble
argument_list|()
decl_stmt|;
name|BitSet
name|expected
init|=
operator|new
name|BitSet
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|doc
init|=
literal|0
init|;
name|doc
operator|<
name|reader
operator|.
name|maxDoc
argument_list|()
condition|;
name|doc
operator|++
control|)
block|{
name|double
name|docLatitude
init|=
name|reader
operator|.
name|document
argument_list|(
name|doc
argument_list|)
operator|.
name|getField
argument_list|(
literal|"lat"
argument_list|)
operator|.
name|numericValue
argument_list|()
operator|.
name|doubleValue
argument_list|()
decl_stmt|;
name|double
name|docLongitude
init|=
name|reader
operator|.
name|document
argument_list|(
name|doc
argument_list|)
operator|.
name|getField
argument_list|(
literal|"lon"
argument_list|)
operator|.
name|numericValue
argument_list|()
operator|.
name|doubleValue
argument_list|()
decl_stmt|;
name|double
name|distance
init|=
name|SloppyMath
operator|.
name|haversinMeters
argument_list|(
name|lat
argument_list|,
name|lon
argument_list|,
name|docLatitude
argument_list|,
name|docLongitude
argument_list|)
decl_stmt|;
if|if
condition|(
name|distance
operator|<=
name|radius
condition|)
block|{
name|expected
operator|.
name|set
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
block|}
name|TopDocs
name|topDocs
init|=
name|searcher
operator|.
name|search
argument_list|(
name|newDistanceQuery
argument_list|(
literal|"field"
argument_list|,
name|lat
argument_list|,
name|lon
argument_list|,
name|radius
argument_list|)
argument_list|,
name|reader
operator|.
name|maxDoc
argument_list|()
argument_list|,
name|Sort
operator|.
name|INDEXORDER
argument_list|)
decl_stmt|;
name|BitSet
name|actual
init|=
operator|new
name|BitSet
argument_list|()
decl_stmt|;
for|for
control|(
name|ScoreDoc
name|doc
range|:
name|topDocs
operator|.
name|scoreDocs
control|)
block|{
name|actual
operator|.
name|set
argument_list|(
name|doc
operator|.
name|doc
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AssertionError
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"center: ("
operator|+
name|lat
operator|+
literal|","
operator|+
name|lon
operator|+
literal|"), radius="
operator|+
name|radius
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|doc
init|=
literal|0
init|;
name|doc
operator|<
name|reader
operator|.
name|maxDoc
argument_list|()
condition|;
name|doc
operator|++
control|)
block|{
name|double
name|docLatitude
init|=
name|reader
operator|.
name|document
argument_list|(
name|doc
argument_list|)
operator|.
name|getField
argument_list|(
literal|"lat"
argument_list|)
operator|.
name|numericValue
argument_list|()
operator|.
name|doubleValue
argument_list|()
decl_stmt|;
name|double
name|docLongitude
init|=
name|reader
operator|.
name|document
argument_list|(
name|doc
argument_list|)
operator|.
name|getField
argument_list|(
literal|"lon"
argument_list|)
operator|.
name|numericValue
argument_list|()
operator|.
name|doubleValue
argument_list|()
decl_stmt|;
name|double
name|distance
init|=
name|SloppyMath
operator|.
name|haversinMeters
argument_list|(
name|lat
argument_list|,
name|lon
argument_list|,
name|docLatitude
argument_list|,
name|docLongitude
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|""
operator|+
name|doc
operator|+
literal|": ("
operator|+
name|docLatitude
operator|+
literal|","
operator|+
name|docLongitude
operator|+
literal|"), distance="
operator|+
name|distance
argument_list|)
expr_stmt|;
block|}
throw|throw
name|e
throw|;
block|}
block|}
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|method|testEquals
specifier|public
name|void
name|testEquals
parameter_list|()
throws|throws
name|Exception
block|{
name|Query
name|q1
decl_stmt|,
name|q2
decl_stmt|;
name|GeoRect
name|rect
init|=
name|randomRect
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|q1
operator|=
name|newRectQuery
argument_list|(
literal|"field"
argument_list|,
name|rect
operator|.
name|minLat
argument_list|,
name|rect
operator|.
name|maxLat
argument_list|,
name|rect
operator|.
name|minLon
argument_list|,
name|rect
operator|.
name|maxLon
argument_list|)
expr_stmt|;
name|q2
operator|=
name|newRectQuery
argument_list|(
literal|"field"
argument_list|,
name|rect
operator|.
name|minLat
argument_list|,
name|rect
operator|.
name|maxLat
argument_list|,
name|rect
operator|.
name|minLon
argument_list|,
name|rect
operator|.
name|maxLon
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|q1
argument_list|,
name|q2
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|q1
operator|.
name|equals
argument_list|(
name|newRectQuery
argument_list|(
literal|"field2"
argument_list|,
name|rect
operator|.
name|minLat
argument_list|,
name|rect
operator|.
name|maxLat
argument_list|,
name|rect
operator|.
name|minLon
argument_list|,
name|rect
operator|.
name|maxLon
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|double
name|lat
init|=
name|randomLat
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|double
name|lon
init|=
name|randomLon
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|q1
operator|=
name|newDistanceQuery
argument_list|(
literal|"field"
argument_list|,
name|lat
argument_list|,
name|lon
argument_list|,
literal|10000.0
argument_list|)
expr_stmt|;
name|q2
operator|=
name|newDistanceQuery
argument_list|(
literal|"field"
argument_list|,
name|lat
argument_list|,
name|lon
argument_list|,
literal|10000.0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|q1
argument_list|,
name|q2
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|q1
operator|.
name|equals
argument_list|(
name|newDistanceQuery
argument_list|(
literal|"field2"
argument_list|,
name|lat
argument_list|,
name|lon
argument_list|,
literal|10000.0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|double
index|[]
name|lats
init|=
operator|new
name|double
index|[
literal|5
index|]
decl_stmt|;
name|double
index|[]
name|lons
init|=
operator|new
name|double
index|[
literal|5
index|]
decl_stmt|;
name|lats
index|[
literal|0
index|]
operator|=
name|rect
operator|.
name|minLat
expr_stmt|;
name|lons
index|[
literal|0
index|]
operator|=
name|rect
operator|.
name|minLon
expr_stmt|;
name|lats
index|[
literal|1
index|]
operator|=
name|rect
operator|.
name|maxLat
expr_stmt|;
name|lons
index|[
literal|1
index|]
operator|=
name|rect
operator|.
name|minLon
expr_stmt|;
name|lats
index|[
literal|2
index|]
operator|=
name|rect
operator|.
name|maxLat
expr_stmt|;
name|lons
index|[
literal|2
index|]
operator|=
name|rect
operator|.
name|maxLon
expr_stmt|;
name|lats
index|[
literal|3
index|]
operator|=
name|rect
operator|.
name|minLat
expr_stmt|;
name|lons
index|[
literal|3
index|]
operator|=
name|rect
operator|.
name|maxLon
expr_stmt|;
name|lats
index|[
literal|4
index|]
operator|=
name|rect
operator|.
name|minLat
expr_stmt|;
name|lons
index|[
literal|4
index|]
operator|=
name|rect
operator|.
name|minLon
expr_stmt|;
name|q1
operator|=
name|newPolygonQuery
argument_list|(
literal|"field"
argument_list|,
operator|new
name|Polygon
argument_list|(
name|lats
argument_list|,
name|lons
argument_list|)
argument_list|)
expr_stmt|;
name|q2
operator|=
name|newPolygonQuery
argument_list|(
literal|"field"
argument_list|,
operator|new
name|Polygon
argument_list|(
name|lats
argument_list|,
name|lons
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|q1
argument_list|,
name|q2
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|q1
operator|.
name|equals
argument_list|(
name|newPolygonQuery
argument_list|(
literal|"field2"
argument_list|,
operator|new
name|Polygon
argument_list|(
name|lats
argument_list|,
name|lons
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/** return topdocs over a small set of points in field "point" */
end_comment
begin_function
DECL|method|searchSmallSet
specifier|private
name|TopDocs
name|searchSmallSet
parameter_list|(
name|Query
name|query
parameter_list|,
name|int
name|size
parameter_list|)
throws|throws
name|Exception
block|{
comment|// this is a simple systematic test, indexing these points
name|double
index|[]
index|[]
name|pts
init|=
operator|new
name|double
index|[]
index|[]
block|{
block|{
literal|32.763420
block|,
operator|-
literal|96.774
block|}
block|,
block|{
literal|32.7559529921407
block|,
operator|-
literal|96.7759895324707
block|}
block|,
block|{
literal|32.77866942010977
block|,
operator|-
literal|96.77701950073242
block|}
block|,
block|{
literal|32.7756745755423
block|,
operator|-
literal|96.7706036567688
block|}
block|,
block|{
literal|27.703618681345585
block|,
operator|-
literal|139.73458170890808
block|}
block|,
block|{
literal|32.94823588839368
block|,
operator|-
literal|96.4538113027811
block|}
block|,
block|{
literal|33.06047141970814
block|,
operator|-
literal|96.65084838867188
block|}
block|,
block|{
literal|32.778650
block|,
operator|-
literal|96.7772
block|}
block|,
block|{
operator|-
literal|88.56029371730983
block|,
operator|-
literal|177.23537676036358
block|}
block|,
block|{
literal|33.541429799076354
block|,
operator|-
literal|26.779373834241003
block|}
block|,
block|{
literal|26.774024500421728
block|,
operator|-
literal|77.35379276106497
block|}
block|,
block|{
operator|-
literal|90.0
block|,
operator|-
literal|14.796283808944777
block|}
block|,
block|{
literal|32.94823588839368
block|,
operator|-
literal|178.8538113027811
block|}
block|,
block|{
literal|32.94823588839368
block|,
literal|178.8538113027811
block|}
block|,
block|{
literal|40.720611
block|,
operator|-
literal|73.998776
block|}
block|,
block|{
operator|-
literal|44.5
block|,
operator|-
literal|179.5
block|}
block|}
decl_stmt|;
name|Directory
name|directory
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|RandomIndexWriter
name|writer
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|directory
argument_list|,
name|newIndexWriterConfig
argument_list|(
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setMaxBufferedDocs
argument_list|(
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|100
argument_list|,
literal|1000
argument_list|)
argument_list|)
operator|.
name|setMergePolicy
argument_list|(
name|newLogMergePolicy
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|double
name|p
index|[]
range|:
name|pts
control|)
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|addPointToDoc
argument_list|(
literal|"point"
argument_list|,
name|doc
argument_list|,
name|p
index|[
literal|0
index|]
argument_list|,
name|p
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
comment|// add explicit multi-valued docs
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|pts
operator|.
name|length
condition|;
name|i
operator|+=
literal|2
control|)
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|addPointToDoc
argument_list|(
literal|"point"
argument_list|,
name|doc
argument_list|,
name|pts
index|[
name|i
index|]
index|[
literal|0
index|]
argument_list|,
name|pts
index|[
name|i
index|]
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|addPointToDoc
argument_list|(
literal|"point"
argument_list|,
name|doc
argument_list|,
name|pts
index|[
name|i
operator|+
literal|1
index|]
index|[
literal|0
index|]
argument_list|,
name|pts
index|[
name|i
operator|+
literal|1
index|]
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
comment|// index random string documents
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
condition|;
operator|++
name|i
control|)
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|StringField
argument_list|(
literal|"string"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
name|IndexReader
name|reader
init|=
name|writer
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|IndexSearcher
name|searcher
init|=
name|newSearcher
argument_list|(
name|reader
argument_list|)
decl_stmt|;
name|TopDocs
name|topDocs
init|=
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
name|size
argument_list|)
decl_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|directory
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|topDocs
return|;
block|}
end_function
begin_function
DECL|method|testSmallSetRect
specifier|public
name|void
name|testSmallSetRect
parameter_list|()
throws|throws
name|Exception
block|{
name|TopDocs
name|td
init|=
name|searchSmallSet
argument_list|(
name|newRectQuery
argument_list|(
literal|"point"
argument_list|,
literal|32.778650
argument_list|,
literal|32.778950
argument_list|,
operator|-
literal|96.7772
argument_list|,
operator|-
literal|96.77690000
argument_list|)
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|td
operator|.
name|totalHits
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|method|testSmallSetDateline
specifier|public
name|void
name|testSmallSetDateline
parameter_list|()
throws|throws
name|Exception
block|{
name|TopDocs
name|td
init|=
name|searchSmallSet
argument_list|(
name|newRectQuery
argument_list|(
literal|"point"
argument_list|,
operator|-
literal|45.0
argument_list|,
operator|-
literal|44.0
argument_list|,
literal|179.0
argument_list|,
operator|-
literal|179.0
argument_list|)
argument_list|,
literal|20
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|td
operator|.
name|totalHits
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|method|testSmallSetMultiValued
specifier|public
name|void
name|testSmallSetMultiValued
parameter_list|()
throws|throws
name|Exception
block|{
name|TopDocs
name|td
init|=
name|searchSmallSet
argument_list|(
name|newRectQuery
argument_list|(
literal|"point"
argument_list|,
literal|32.7559529921407
argument_list|,
literal|32.7756745755423
argument_list|,
operator|-
literal|96.4538113027811
argument_list|,
operator|-
literal|96.7706036567688
argument_list|)
argument_list|,
literal|20
argument_list|)
decl_stmt|;
comment|// 3 single valued docs + 2 multi-valued docs
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|td
operator|.
name|totalHits
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|method|testSmallSetWholeMap
specifier|public
name|void
name|testSmallSetWholeMap
parameter_list|()
throws|throws
name|Exception
block|{
name|TopDocs
name|td
init|=
name|searchSmallSet
argument_list|(
name|newRectQuery
argument_list|(
literal|"point"
argument_list|,
name|GeoUtils
operator|.
name|MIN_LAT_INCL
argument_list|,
name|GeoUtils
operator|.
name|MAX_LAT_INCL
argument_list|,
name|GeoUtils
operator|.
name|MIN_LON_INCL
argument_list|,
name|GeoUtils
operator|.
name|MAX_LON_INCL
argument_list|)
argument_list|,
literal|20
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|24
argument_list|,
name|td
operator|.
name|totalHits
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|method|testSmallSetPoly
specifier|public
name|void
name|testSmallSetPoly
parameter_list|()
throws|throws
name|Exception
block|{
name|TopDocs
name|td
init|=
name|searchSmallSet
argument_list|(
name|newPolygonQuery
argument_list|(
literal|"point"
argument_list|,
operator|new
name|Polygon
argument_list|(
operator|new
name|double
index|[]
block|{
literal|33.073130
block|,
literal|32.9942669
block|,
literal|32.938386
block|,
literal|33.0374494
block|,
literal|33.1369762
block|,
literal|33.1162747
block|,
literal|33.073130
block|,
literal|33.073130
block|}
argument_list|,
operator|new
name|double
index|[]
block|{
operator|-
literal|96.7682647
block|,
operator|-
literal|96.8280029
block|,
operator|-
literal|96.6288757
block|,
operator|-
literal|96.4929199
block|,
operator|-
literal|96.6041564
block|,
operator|-
literal|96.7449188
block|,
operator|-
literal|96.76826477
block|,
operator|-
literal|96.7682647
block|}
argument_list|)
argument_list|)
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|td
operator|.
name|totalHits
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|method|testSmallSetPolyWholeMap
specifier|public
name|void
name|testSmallSetPolyWholeMap
parameter_list|()
throws|throws
name|Exception
block|{
name|TopDocs
name|td
init|=
name|searchSmallSet
argument_list|(
name|newPolygonQuery
argument_list|(
literal|"point"
argument_list|,
operator|new
name|Polygon
argument_list|(
operator|new
name|double
index|[]
block|{
name|GeoUtils
operator|.
name|MIN_LAT_INCL
block|,
name|GeoUtils
operator|.
name|MAX_LAT_INCL
block|,
name|GeoUtils
operator|.
name|MAX_LAT_INCL
block|,
name|GeoUtils
operator|.
name|MIN_LAT_INCL
block|,
name|GeoUtils
operator|.
name|MIN_LAT_INCL
block|}
argument_list|,
operator|new
name|double
index|[]
block|{
name|GeoUtils
operator|.
name|MIN_LON_INCL
block|,
name|GeoUtils
operator|.
name|MIN_LON_INCL
block|,
name|GeoUtils
operator|.
name|MAX_LON_INCL
block|,
name|GeoUtils
operator|.
name|MAX_LON_INCL
block|,
name|GeoUtils
operator|.
name|MIN_LON_INCL
block|}
argument_list|)
argument_list|)
argument_list|,
literal|20
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"testWholeMap failed"
argument_list|,
literal|24
argument_list|,
name|td
operator|.
name|totalHits
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|method|testSmallSetDistance
specifier|public
name|void
name|testSmallSetDistance
parameter_list|()
throws|throws
name|Exception
block|{
name|TopDocs
name|td
init|=
name|searchSmallSet
argument_list|(
name|newDistanceQuery
argument_list|(
literal|"point"
argument_list|,
literal|32.94823588839368
argument_list|,
operator|-
literal|96.4538113027811
argument_list|,
literal|6000
argument_list|)
argument_list|,
literal|20
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|td
operator|.
name|totalHits
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|method|testSmallSetTinyDistance
specifier|public
name|void
name|testSmallSetTinyDistance
parameter_list|()
throws|throws
name|Exception
block|{
name|TopDocs
name|td
init|=
name|searchSmallSet
argument_list|(
name|newDistanceQuery
argument_list|(
literal|"point"
argument_list|,
literal|40.720611
argument_list|,
operator|-
literal|73.998776
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|20
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|td
operator|.
name|totalHits
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/** see https://issues.apache.org/jira/browse/LUCENE-6905 */
end_comment
begin_function
DECL|method|testSmallSetDistanceNotEmpty
specifier|public
name|void
name|testSmallSetDistanceNotEmpty
parameter_list|()
throws|throws
name|Exception
block|{
name|TopDocs
name|td
init|=
name|searchSmallSet
argument_list|(
name|newDistanceQuery
argument_list|(
literal|"point"
argument_list|,
operator|-
literal|88.56029371730983
argument_list|,
operator|-
literal|177.23537676036358
argument_list|,
literal|7757.999232959935
argument_list|)
argument_list|,
literal|20
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|td
operator|.
name|totalHits
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/**    * Explicitly large    */
end_comment
begin_function
DECL|method|testSmallSetHugeDistance
specifier|public
name|void
name|testSmallSetHugeDistance
parameter_list|()
throws|throws
name|Exception
block|{
name|TopDocs
name|td
init|=
name|searchSmallSet
argument_list|(
name|newDistanceQuery
argument_list|(
literal|"point"
argument_list|,
literal|32.94823588839368
argument_list|,
operator|-
literal|96.4538113027811
argument_list|,
literal|6000000
argument_list|)
argument_list|,
literal|20
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|16
argument_list|,
name|td
operator|.
name|totalHits
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|method|testSmallSetDistanceDateline
specifier|public
name|void
name|testSmallSetDistanceDateline
parameter_list|()
throws|throws
name|Exception
block|{
name|TopDocs
name|td
init|=
name|searchSmallSet
argument_list|(
name|newDistanceQuery
argument_list|(
literal|"point"
argument_list|,
literal|32.94823588839368
argument_list|,
operator|-
literal|179.9538113027811
argument_list|,
literal|120000
argument_list|)
argument_list|,
literal|20
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|td
operator|.
name|totalHits
argument_list|)
expr_stmt|;
block|}
end_function
unit|}
end_unit
