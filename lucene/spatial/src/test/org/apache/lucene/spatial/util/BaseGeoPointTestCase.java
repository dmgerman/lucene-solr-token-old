begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.spatial.util
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|util
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DecimalFormat
import|;
end_import
begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DecimalFormatSymbols
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|BitSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|FilterCodec
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|PointsFormat
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|PointsReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|PointsWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|lucene60
operator|.
name|Lucene60PointsReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|lucene60
operator|.
name|Lucene60PointsWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|NumericDocValuesField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|StoredField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DirectoryReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriterConfig
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReaderContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|MultiDocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|NumericDocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|RandomIndexWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SegmentReadState
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SegmentWriteState
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|ScoreDoc
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|SimpleCollector
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Sort
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TopDocs
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|FixedBitSet
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|SloppyMath
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|TestUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|bkd
operator|.
name|BKDWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import
begin_comment
comment|// TODO: cutover TestGeoUtils too?
end_comment
begin_class
DECL|class|BaseGeoPointTestCase
specifier|public
specifier|abstract
class|class
name|BaseGeoPointTestCase
extends|extends
name|LuceneTestCase
block|{
DECL|field|FIELD_NAME
specifier|protected
specifier|static
specifier|final
name|String
name|FIELD_NAME
init|=
literal|"point"
decl_stmt|;
DECL|field|originLat
specifier|private
specifier|static
name|double
name|originLat
decl_stmt|;
DECL|field|originLon
specifier|private
specifier|static
name|double
name|originLon
decl_stmt|;
DECL|field|lonRange
specifier|private
specifier|static
name|double
name|lonRange
decl_stmt|;
DECL|field|latRange
specifier|private
specifier|static
name|double
name|latRange
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|beforeClassBase
specifier|public
specifier|static
name|void
name|beforeClassBase
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Between 1.0 and 3.0:
name|lonRange
operator|=
literal|2
operator|*
operator|(
name|random
argument_list|()
operator|.
name|nextDouble
argument_list|()
operator|+
literal|0.5
operator|)
expr_stmt|;
name|latRange
operator|=
literal|2
operator|*
operator|(
name|random
argument_list|()
operator|.
name|nextDouble
argument_list|()
operator|+
literal|0.5
operator|)
expr_stmt|;
name|originLon
operator|=
name|normalizeLon
argument_list|(
name|GeoUtils
operator|.
name|MIN_LON_INCL
operator|+
name|lonRange
operator|+
operator|(
name|GeoUtils
operator|.
name|MAX_LON_INCL
operator|-
name|GeoUtils
operator|.
name|MIN_LON_INCL
operator|-
literal|2
operator|*
name|lonRange
operator|)
operator|*
name|random
argument_list|()
operator|.
name|nextDouble
argument_list|()
argument_list|)
expr_stmt|;
name|originLat
operator|=
name|normalizeLat
argument_list|(
name|GeoUtils
operator|.
name|MIN_LAT_INCL
operator|+
name|latRange
operator|+
operator|(
name|GeoUtils
operator|.
name|MAX_LAT_INCL
operator|-
name|GeoUtils
operator|.
name|MIN_LAT_INCL
operator|-
literal|2
operator|*
name|latRange
operator|)
operator|*
name|random
argument_list|()
operator|.
name|nextDouble
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/** Puts longitude in range of -180 to +180. */
DECL|method|normalizeLon
specifier|public
specifier|static
name|double
name|normalizeLon
parameter_list|(
name|double
name|lon_deg
parameter_list|)
block|{
if|if
condition|(
name|lon_deg
operator|>=
operator|-
literal|180
operator|&&
name|lon_deg
operator|<=
literal|180
condition|)
block|{
return|return
name|lon_deg
return|;
comment|//common case, and avoids slight double precision shifting
block|}
name|double
name|off
init|=
operator|(
name|lon_deg
operator|+
literal|180
operator|)
operator|%
literal|360
decl_stmt|;
if|if
condition|(
name|off
operator|<
literal|0
condition|)
block|{
return|return
literal|180
operator|+
name|off
return|;
block|}
elseif|else
if|if
condition|(
name|off
operator|==
literal|0
operator|&&
name|lon_deg
operator|>
literal|0
condition|)
block|{
return|return
literal|180
return|;
block|}
else|else
block|{
return|return
operator|-
literal|180
operator|+
name|off
return|;
block|}
block|}
comment|/** Puts latitude in range of -90 to 90. */
DECL|method|normalizeLat
specifier|public
specifier|static
name|double
name|normalizeLat
parameter_list|(
name|double
name|lat_deg
parameter_list|)
block|{
if|if
condition|(
name|lat_deg
operator|>=
operator|-
literal|90
operator|&&
name|lat_deg
operator|<=
literal|90
condition|)
block|{
return|return
name|lat_deg
return|;
comment|//common case, and avoids slight double precision shifting
block|}
name|double
name|off
init|=
name|Math
operator|.
name|abs
argument_list|(
operator|(
name|lat_deg
operator|+
literal|90
operator|)
operator|%
literal|360
argument_list|)
decl_stmt|;
return|return
operator|(
name|off
operator|<=
literal|180
condition|?
name|off
else|:
literal|360
operator|-
name|off
operator|)
operator|-
literal|90
return|;
block|}
comment|// A particularly tricky adversary for BKD tree:
DECL|method|testSamePointManyTimes
specifier|public
name|void
name|testSamePointManyTimes
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|numPoints
init|=
name|atLeast
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
name|boolean
name|small
init|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
decl_stmt|;
comment|// Every doc has 2 points:
name|double
name|theLat
init|=
name|randomLat
argument_list|(
name|small
argument_list|)
decl_stmt|;
name|double
name|theLon
init|=
name|randomLon
argument_list|(
name|small
argument_list|)
decl_stmt|;
name|double
index|[]
name|lats
init|=
operator|new
name|double
index|[
name|numPoints
index|]
decl_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|lats
argument_list|,
name|theLat
argument_list|)
expr_stmt|;
name|double
index|[]
name|lons
init|=
operator|new
name|double
index|[
name|numPoints
index|]
decl_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|lons
argument_list|,
name|theLon
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|small
argument_list|,
name|lats
argument_list|,
name|lons
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|testAllLatEqual
specifier|public
name|void
name|testAllLatEqual
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|numPoints
init|=
name|atLeast
argument_list|(
literal|10000
argument_list|)
decl_stmt|;
name|boolean
name|small
init|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
decl_stmt|;
name|double
name|lat
init|=
name|randomLat
argument_list|(
name|small
argument_list|)
decl_stmt|;
name|double
index|[]
name|lats
init|=
operator|new
name|double
index|[
name|numPoints
index|]
decl_stmt|;
name|double
index|[]
name|lons
init|=
operator|new
name|double
index|[
name|numPoints
index|]
decl_stmt|;
name|boolean
name|haveRealDoc
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|docID
init|=
literal|0
init|;
name|docID
operator|<
name|numPoints
condition|;
name|docID
operator|++
control|)
block|{
name|int
name|x
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|20
argument_list|)
decl_stmt|;
if|if
condition|(
name|x
operator|==
literal|17
condition|)
block|{
comment|// Some docs don't have a point:
name|lats
index|[
name|docID
index|]
operator|=
name|Double
operator|.
name|NaN
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  doc="
operator|+
name|docID
operator|+
literal|" is missing"
argument_list|)
expr_stmt|;
block|}
continue|continue;
block|}
if|if
condition|(
name|docID
operator|>
literal|0
operator|&&
name|x
operator|==
literal|14
operator|&&
name|haveRealDoc
condition|)
block|{
name|int
name|oldDocID
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|oldDocID
operator|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|docID
argument_list|)
expr_stmt|;
if|if
condition|(
name|Double
operator|.
name|isNaN
argument_list|(
name|lats
index|[
name|oldDocID
index|]
argument_list|)
operator|==
literal|false
condition|)
block|{
break|break;
block|}
block|}
comment|// Fully identical point:
name|lons
index|[
name|docID
index|]
operator|=
name|lons
index|[
name|oldDocID
index|]
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  doc="
operator|+
name|docID
operator|+
literal|" lat="
operator|+
name|lat
operator|+
literal|" lon="
operator|+
name|lons
index|[
name|docID
index|]
operator|+
literal|" (same lat/lon as doc="
operator|+
name|oldDocID
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|lons
index|[
name|docID
index|]
operator|=
name|randomLon
argument_list|(
name|small
argument_list|)
expr_stmt|;
name|haveRealDoc
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  doc="
operator|+
name|docID
operator|+
literal|" lat="
operator|+
name|lat
operator|+
literal|" lon="
operator|+
name|lons
index|[
name|docID
index|]
argument_list|)
expr_stmt|;
block|}
block|}
name|lats
index|[
name|docID
index|]
operator|=
name|lat
expr_stmt|;
block|}
name|verify
argument_list|(
name|small
argument_list|,
name|lats
argument_list|,
name|lons
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|testAllLonEqual
specifier|public
name|void
name|testAllLonEqual
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|numPoints
init|=
name|atLeast
argument_list|(
literal|10000
argument_list|)
decl_stmt|;
name|boolean
name|small
init|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
decl_stmt|;
name|double
name|theLon
init|=
name|randomLon
argument_list|(
name|small
argument_list|)
decl_stmt|;
name|double
index|[]
name|lats
init|=
operator|new
name|double
index|[
name|numPoints
index|]
decl_stmt|;
name|double
index|[]
name|lons
init|=
operator|new
name|double
index|[
name|numPoints
index|]
decl_stmt|;
name|boolean
name|haveRealDoc
init|=
literal|false
decl_stmt|;
comment|//System.out.println("theLon=" + theLon);
for|for
control|(
name|int
name|docID
init|=
literal|0
init|;
name|docID
operator|<
name|numPoints
condition|;
name|docID
operator|++
control|)
block|{
name|int
name|x
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|20
argument_list|)
decl_stmt|;
if|if
condition|(
name|x
operator|==
literal|17
condition|)
block|{
comment|// Some docs don't have a point:
name|lats
index|[
name|docID
index|]
operator|=
name|Double
operator|.
name|NaN
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  doc="
operator|+
name|docID
operator|+
literal|" is missing"
argument_list|)
expr_stmt|;
block|}
continue|continue;
block|}
if|if
condition|(
name|docID
operator|>
literal|0
operator|&&
name|x
operator|==
literal|14
operator|&&
name|haveRealDoc
condition|)
block|{
name|int
name|oldDocID
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|oldDocID
operator|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|docID
argument_list|)
expr_stmt|;
if|if
condition|(
name|Double
operator|.
name|isNaN
argument_list|(
name|lats
index|[
name|oldDocID
index|]
argument_list|)
operator|==
literal|false
condition|)
block|{
break|break;
block|}
block|}
comment|// Fully identical point:
name|lats
index|[
name|docID
index|]
operator|=
name|lats
index|[
name|oldDocID
index|]
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  doc="
operator|+
name|docID
operator|+
literal|" lat="
operator|+
name|lats
index|[
name|docID
index|]
operator|+
literal|" lon="
operator|+
name|theLon
operator|+
literal|" (same lat/lon as doc="
operator|+
name|oldDocID
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|lats
index|[
name|docID
index|]
operator|=
name|randomLat
argument_list|(
name|small
argument_list|)
expr_stmt|;
name|haveRealDoc
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  doc="
operator|+
name|docID
operator|+
literal|" lat="
operator|+
name|lats
index|[
name|docID
index|]
operator|+
literal|" lon="
operator|+
name|theLon
argument_list|)
expr_stmt|;
block|}
block|}
name|lons
index|[
name|docID
index|]
operator|=
name|theLon
expr_stmt|;
block|}
name|verify
argument_list|(
name|small
argument_list|,
name|lats
argument_list|,
name|lons
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|testMultiValued
specifier|public
name|void
name|testMultiValued
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|numPoints
init|=
name|atLeast
argument_list|(
literal|10000
argument_list|)
decl_stmt|;
comment|// Every doc has 2 points:
name|double
index|[]
name|lats
init|=
operator|new
name|double
index|[
literal|2
operator|*
name|numPoints
index|]
decl_stmt|;
name|double
index|[]
name|lons
init|=
operator|new
name|double
index|[
literal|2
operator|*
name|numPoints
index|]
decl_stmt|;
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriterConfig
name|iwc
init|=
name|newIndexWriterConfig
argument_list|()
decl_stmt|;
name|initIndexWriterConfig
argument_list|(
name|FIELD_NAME
argument_list|,
name|iwc
argument_list|)
expr_stmt|;
comment|// We rely on docID order:
name|iwc
operator|.
name|setMergePolicy
argument_list|(
name|newLogMergePolicy
argument_list|()
argument_list|)
expr_stmt|;
name|RandomIndexWriter
name|w
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|,
name|iwc
argument_list|)
decl_stmt|;
name|boolean
name|small
init|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|id
init|=
literal|0
init|;
name|id
operator|<
name|numPoints
condition|;
name|id
operator|++
control|)
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|lats
index|[
literal|2
operator|*
name|id
index|]
operator|=
name|randomLat
argument_list|(
name|small
argument_list|)
expr_stmt|;
name|lons
index|[
literal|2
operator|*
name|id
index|]
operator|=
name|randomLon
argument_list|(
name|small
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newStringField
argument_list|(
literal|"id"
argument_list|,
literal|""
operator|+
name|id
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|)
argument_list|)
expr_stmt|;
name|addPointToDoc
argument_list|(
name|FIELD_NAME
argument_list|,
name|doc
argument_list|,
name|lats
index|[
literal|2
operator|*
name|id
index|]
argument_list|,
name|lons
index|[
literal|2
operator|*
name|id
index|]
argument_list|)
expr_stmt|;
name|lats
index|[
literal|2
operator|*
name|id
operator|+
literal|1
index|]
operator|=
name|randomLat
argument_list|(
name|small
argument_list|)
expr_stmt|;
name|lons
index|[
literal|2
operator|*
name|id
operator|+
literal|1
index|]
operator|=
name|randomLon
argument_list|(
name|small
argument_list|)
expr_stmt|;
name|addPointToDoc
argument_list|(
name|FIELD_NAME
argument_list|,
name|doc
argument_list|,
name|lats
index|[
literal|2
operator|*
name|id
operator|+
literal|1
index|]
argument_list|,
name|lons
index|[
literal|2
operator|*
name|id
operator|+
literal|1
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"id="
operator|+
name|id
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  lat="
operator|+
name|lats
index|[
literal|2
operator|*
name|id
index|]
operator|+
literal|" lon="
operator|+
name|lons
index|[
literal|2
operator|*
name|id
index|]
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  lat="
operator|+
name|lats
index|[
literal|2
operator|*
name|id
operator|+
literal|1
index|]
operator|+
literal|" lon="
operator|+
name|lons
index|[
literal|2
operator|*
name|id
operator|+
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
comment|// TODO: share w/ verify; just need parallel array of the expected ids
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|w
operator|.
name|forceMerge
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|IndexReader
name|r
init|=
name|w
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// We can't wrap with "exotic" readers because the BKD query must see the BKDDVFormat:
name|IndexSearcher
name|s
init|=
name|newSearcher
argument_list|(
name|r
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|int
name|iters
init|=
name|atLeast
argument_list|(
literal|75
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|iter
init|=
literal|0
init|;
name|iter
operator|<
name|iters
condition|;
name|iter
operator|++
control|)
block|{
name|GeoRect
name|rect
init|=
name|randomRect
argument_list|(
name|small
argument_list|,
name|small
operator|==
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\nTEST: iter="
operator|+
name|iter
operator|+
literal|" rect="
operator|+
name|rect
argument_list|)
expr_stmt|;
block|}
name|Query
name|query
init|=
name|newRectQuery
argument_list|(
name|FIELD_NAME
argument_list|,
name|rect
argument_list|)
decl_stmt|;
specifier|final
name|FixedBitSet
name|hits
init|=
operator|new
name|FixedBitSet
argument_list|(
name|r
operator|.
name|maxDoc
argument_list|()
argument_list|)
decl_stmt|;
name|s
operator|.
name|search
argument_list|(
name|query
argument_list|,
operator|new
name|SimpleCollector
argument_list|()
block|{
specifier|private
name|int
name|docBase
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|needsScores
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|doSetNextReader
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|docBase
operator|=
name|context
operator|.
name|docBase
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|collect
parameter_list|(
name|int
name|doc
parameter_list|)
block|{
name|hits
operator|.
name|set
argument_list|(
name|docBase
operator|+
name|doc
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|boolean
name|fail
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|docID
init|=
literal|0
init|;
name|docID
operator|<
name|lats
operator|.
name|length
operator|/
literal|2
condition|;
name|docID
operator|++
control|)
block|{
name|double
name|latDoc1
init|=
name|lats
index|[
literal|2
operator|*
name|docID
index|]
decl_stmt|;
name|double
name|lonDoc1
init|=
name|lons
index|[
literal|2
operator|*
name|docID
index|]
decl_stmt|;
name|double
name|latDoc2
init|=
name|lats
index|[
literal|2
operator|*
name|docID
operator|+
literal|1
index|]
decl_stmt|;
name|double
name|lonDoc2
init|=
name|lons
index|[
literal|2
operator|*
name|docID
operator|+
literal|1
index|]
decl_stmt|;
name|boolean
name|result1
init|=
name|rectContainsPoint
argument_list|(
name|rect
argument_list|,
name|latDoc1
argument_list|,
name|lonDoc1
argument_list|)
decl_stmt|;
name|boolean
name|result2
init|=
name|rectContainsPoint
argument_list|(
name|rect
argument_list|,
name|latDoc2
argument_list|,
name|lonDoc2
argument_list|)
decl_stmt|;
name|boolean
name|expected
init|=
name|result1
operator|||
name|result2
decl_stmt|;
if|if
condition|(
name|hits
operator|.
name|get
argument_list|(
name|docID
argument_list|)
operator|!=
name|expected
condition|)
block|{
name|String
name|id
init|=
name|s
operator|.
name|doc
argument_list|(
name|docID
argument_list|)
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
decl_stmt|;
if|if
condition|(
name|expected
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|": id="
operator|+
name|id
operator|+
literal|" docID="
operator|+
name|docID
operator|+
literal|" should match but did not"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|": id="
operator|+
name|id
operator|+
literal|" docID="
operator|+
name|docID
operator|+
literal|" should not match but did"
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  rect="
operator|+
name|rect
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  lat="
operator|+
name|latDoc1
operator|+
literal|" lon="
operator|+
name|lonDoc1
operator|+
literal|"\n  lat="
operator|+
name|latDoc2
operator|+
literal|" lon="
operator|+
name|lonDoc2
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  result1="
operator|+
name|result1
operator|+
literal|" result2="
operator|+
name|result2
argument_list|)
expr_stmt|;
name|fail
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|fail
condition|)
block|{
name|fail
argument_list|(
literal|"some hits were wrong"
argument_list|)
expr_stmt|;
block|}
block|}
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testRandomTiny
specifier|public
name|void
name|testRandomTiny
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Make sure single-leaf-node case is OK:
name|doTestRandom
argument_list|(
literal|10
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|testRandomMedium
specifier|public
name|void
name|testRandomMedium
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestRandom
argument_list|(
literal|10000
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|testRandomWithThreads
specifier|public
name|void
name|testRandomWithThreads
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestRandom
argument_list|(
literal|10000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Nightly
DECL|method|testRandomBig
specifier|public
name|void
name|testRandomBig
parameter_list|()
throws|throws
name|Exception
block|{
name|assumeFalse
argument_list|(
literal|"Direct codec can OOME on this test"
argument_list|,
name|TestUtil
operator|.
name|getDocValuesFormat
argument_list|(
name|FIELD_NAME
argument_list|)
operator|.
name|equals
argument_list|(
literal|"Direct"
argument_list|)
argument_list|)
expr_stmt|;
name|assumeFalse
argument_list|(
literal|"Memory codec can OOME on this test"
argument_list|,
name|TestUtil
operator|.
name|getDocValuesFormat
argument_list|(
name|FIELD_NAME
argument_list|)
operator|.
name|equals
argument_list|(
literal|"Memory"
argument_list|)
argument_list|)
expr_stmt|;
name|doTestRandom
argument_list|(
literal|200000
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|doTestRandom
specifier|private
name|void
name|doTestRandom
parameter_list|(
name|int
name|count
parameter_list|,
name|boolean
name|useThreads
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|numPoints
init|=
name|atLeast
argument_list|(
name|count
argument_list|)
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TEST: numPoints="
operator|+
name|numPoints
argument_list|)
expr_stmt|;
block|}
name|double
index|[]
name|lats
init|=
operator|new
name|double
index|[
name|numPoints
index|]
decl_stmt|;
name|double
index|[]
name|lons
init|=
operator|new
name|double
index|[
name|numPoints
index|]
decl_stmt|;
name|boolean
name|small
init|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
decl_stmt|;
name|boolean
name|haveRealDoc
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|id
init|=
literal|0
init|;
name|id
operator|<
name|numPoints
condition|;
name|id
operator|++
control|)
block|{
name|int
name|x
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|20
argument_list|)
decl_stmt|;
if|if
condition|(
name|x
operator|==
literal|17
condition|)
block|{
comment|// Some docs don't have a point:
name|lats
index|[
name|id
index|]
operator|=
name|Double
operator|.
name|NaN
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  id="
operator|+
name|id
operator|+
literal|" is missing"
argument_list|)
expr_stmt|;
block|}
continue|continue;
block|}
if|if
condition|(
name|id
operator|>
literal|0
operator|&&
name|x
operator|<
literal|3
operator|&&
name|haveRealDoc
condition|)
block|{
name|int
name|oldID
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|oldID
operator|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|id
argument_list|)
expr_stmt|;
if|if
condition|(
name|Double
operator|.
name|isNaN
argument_list|(
name|lats
index|[
name|oldID
index|]
argument_list|)
operator|==
literal|false
condition|)
block|{
break|break;
block|}
block|}
if|if
condition|(
name|x
operator|==
literal|0
condition|)
block|{
comment|// Identical lat to old point
name|lats
index|[
name|id
index|]
operator|=
name|lats
index|[
name|oldID
index|]
expr_stmt|;
name|lons
index|[
name|id
index|]
operator|=
name|randomLon
argument_list|(
name|small
argument_list|)
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  id="
operator|+
name|id
operator|+
literal|" lat="
operator|+
name|lats
index|[
name|id
index|]
operator|+
literal|" lon="
operator|+
name|lons
index|[
name|id
index|]
operator|+
literal|" (same lat as doc="
operator|+
name|oldID
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|x
operator|==
literal|1
condition|)
block|{
comment|// Identical lon to old point
name|lats
index|[
name|id
index|]
operator|=
name|randomLat
argument_list|(
name|small
argument_list|)
expr_stmt|;
name|lons
index|[
name|id
index|]
operator|=
name|lons
index|[
name|oldID
index|]
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  id="
operator|+
name|id
operator|+
literal|" lat="
operator|+
name|lats
index|[
name|id
index|]
operator|+
literal|" lon="
operator|+
name|lons
index|[
name|id
index|]
operator|+
literal|" (same lon as doc="
operator|+
name|oldID
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
assert|assert
name|x
operator|==
literal|2
assert|;
comment|// Fully identical point:
name|lats
index|[
name|id
index|]
operator|=
name|lats
index|[
name|oldID
index|]
expr_stmt|;
name|lons
index|[
name|id
index|]
operator|=
name|lons
index|[
name|oldID
index|]
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  id="
operator|+
name|id
operator|+
literal|" lat="
operator|+
name|lats
index|[
name|id
index|]
operator|+
literal|" lon="
operator|+
name|lons
index|[
name|id
index|]
operator|+
literal|" (same lat/lon as doc="
operator|+
name|oldID
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|lats
index|[
name|id
index|]
operator|=
name|randomLat
argument_list|(
name|small
argument_list|)
expr_stmt|;
name|lons
index|[
name|id
index|]
operator|=
name|randomLon
argument_list|(
name|small
argument_list|)
expr_stmt|;
name|haveRealDoc
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  id="
operator|+
name|id
operator|+
literal|" lat="
operator|+
name|lats
index|[
name|id
index|]
operator|+
literal|" lon="
operator|+
name|lons
index|[
name|id
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|verify
argument_list|(
name|small
argument_list|,
name|lats
argument_list|,
name|lons
argument_list|,
name|useThreads
argument_list|)
expr_stmt|;
block|}
DECL|method|randomLat
specifier|public
name|double
name|randomLat
parameter_list|(
name|boolean
name|small
parameter_list|)
block|{
name|double
name|result
decl_stmt|;
if|if
condition|(
name|small
condition|)
block|{
name|result
operator|=
name|normalizeLat
argument_list|(
name|originLat
operator|+
name|latRange
operator|*
operator|(
name|random
argument_list|()
operator|.
name|nextDouble
argument_list|()
operator|-
literal|0.5
operator|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
operator|-
literal|90
operator|+
literal|180.0
operator|*
name|random
argument_list|()
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
return|return
name|quantizeLat
argument_list|(
name|result
argument_list|)
return|;
block|}
DECL|method|randomLon
specifier|public
name|double
name|randomLon
parameter_list|(
name|boolean
name|small
parameter_list|)
block|{
name|double
name|result
decl_stmt|;
if|if
condition|(
name|small
condition|)
block|{
name|result
operator|=
name|normalizeLon
argument_list|(
name|originLon
operator|+
name|lonRange
operator|*
operator|(
name|random
argument_list|()
operator|.
name|nextDouble
argument_list|()
operator|-
literal|0.5
operator|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
operator|-
literal|180
operator|+
literal|360.0
operator|*
name|random
argument_list|()
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
return|return
name|quantizeLon
argument_list|(
name|result
argument_list|)
return|;
block|}
comment|/** Override this to quantize randomly generated lat, so the test won't fail due to quantization errors, which are 1) annoying to debug,    *  and 2) should never affect "real" usage terribly. */
DECL|method|quantizeLat
specifier|protected
name|double
name|quantizeLat
parameter_list|(
name|double
name|lat
parameter_list|)
block|{
return|return
name|lat
return|;
block|}
comment|/** Override this to quantize randomly generated lon, so the test won't fail due to quantization errors, which are 1) annoying to debug,    *  and 2) should never affect "real" usage terribly. */
DECL|method|quantizeLon
specifier|protected
name|double
name|quantizeLon
parameter_list|(
name|double
name|lon
parameter_list|)
block|{
return|return
name|lon
return|;
block|}
DECL|method|maxRadius
specifier|protected
name|double
name|maxRadius
parameter_list|(
name|double
name|latitude
parameter_list|,
name|double
name|longitude
parameter_list|)
block|{
return|return
literal|50000000D
return|;
comment|// bigger than earth, shouldnt matter
block|}
DECL|method|randomRect
specifier|protected
name|GeoRect
name|randomRect
parameter_list|(
name|boolean
name|small
parameter_list|,
name|boolean
name|canCrossDateLine
parameter_list|)
block|{
name|double
name|lat0
init|=
name|randomLat
argument_list|(
name|small
argument_list|)
decl_stmt|;
name|double
name|lat1
init|=
name|randomLat
argument_list|(
name|small
argument_list|)
decl_stmt|;
name|double
name|lon0
init|=
name|randomLon
argument_list|(
name|small
argument_list|)
decl_stmt|;
name|double
name|lon1
init|=
name|randomLon
argument_list|(
name|small
argument_list|)
decl_stmt|;
if|if
condition|(
name|lat1
operator|<
name|lat0
condition|)
block|{
name|double
name|x
init|=
name|lat0
decl_stmt|;
name|lat0
operator|=
name|lat1
expr_stmt|;
name|lat1
operator|=
name|x
expr_stmt|;
block|}
if|if
condition|(
name|canCrossDateLine
operator|==
literal|false
operator|&&
name|lon1
operator|<
name|lon0
condition|)
block|{
name|double
name|x
init|=
name|lon0
decl_stmt|;
name|lon0
operator|=
name|lon1
expr_stmt|;
name|lon1
operator|=
name|x
expr_stmt|;
block|}
return|return
operator|new
name|GeoRect
argument_list|(
name|lat0
argument_list|,
name|lat1
argument_list|,
name|lon0
argument_list|,
name|lon1
argument_list|)
return|;
block|}
DECL|method|initIndexWriterConfig
specifier|protected
name|void
name|initIndexWriterConfig
parameter_list|(
name|String
name|field
parameter_list|,
name|IndexWriterConfig
name|iwc
parameter_list|)
block|{   }
DECL|method|addPointToDoc
specifier|protected
specifier|abstract
name|void
name|addPointToDoc
parameter_list|(
name|String
name|field
parameter_list|,
name|Document
name|doc
parameter_list|,
name|double
name|lat
parameter_list|,
name|double
name|lon
parameter_list|)
function_decl|;
DECL|method|newRectQuery
specifier|protected
specifier|abstract
name|Query
name|newRectQuery
parameter_list|(
name|String
name|field
parameter_list|,
name|GeoRect
name|bbox
parameter_list|)
function_decl|;
DECL|method|newDistanceQuery
specifier|protected
specifier|abstract
name|Query
name|newDistanceQuery
parameter_list|(
name|String
name|field
parameter_list|,
name|double
name|centerLat
parameter_list|,
name|double
name|centerLon
parameter_list|,
name|double
name|radiusMeters
parameter_list|)
function_decl|;
DECL|method|newDistanceRangeQuery
specifier|protected
specifier|abstract
name|Query
name|newDistanceRangeQuery
parameter_list|(
name|String
name|field
parameter_list|,
name|double
name|centerLat
parameter_list|,
name|double
name|centerLon
parameter_list|,
name|double
name|minRadiusMeters
parameter_list|,
name|double
name|radiusMeters
parameter_list|)
function_decl|;
DECL|method|newPolygonQuery
specifier|protected
specifier|abstract
name|Query
name|newPolygonQuery
parameter_list|(
name|String
name|field
parameter_list|,
name|double
index|[]
name|lats
parameter_list|,
name|double
index|[]
name|lons
parameter_list|)
function_decl|;
DECL|method|rectContainsPoint
specifier|static
specifier|final
name|boolean
name|rectContainsPoint
parameter_list|(
name|GeoRect
name|rect
parameter_list|,
name|double
name|pointLat
parameter_list|,
name|double
name|pointLon
parameter_list|)
block|{
assert|assert
name|Double
operator|.
name|isNaN
argument_list|(
name|pointLat
argument_list|)
operator|==
literal|false
assert|;
if|if
condition|(
name|rect
operator|.
name|minLon
operator|<
name|rect
operator|.
name|maxLon
condition|)
block|{
return|return
name|GeoRelationUtils
operator|.
name|pointInRectPrecise
argument_list|(
name|pointLat
argument_list|,
name|pointLon
argument_list|,
name|rect
operator|.
name|minLat
argument_list|,
name|rect
operator|.
name|maxLat
argument_list|,
name|rect
operator|.
name|minLon
argument_list|,
name|rect
operator|.
name|maxLon
argument_list|)
return|;
block|}
else|else
block|{
comment|// Rect crosses dateline:
return|return
name|GeoRelationUtils
operator|.
name|pointInRectPrecise
argument_list|(
name|pointLat
argument_list|,
name|pointLon
argument_list|,
name|rect
operator|.
name|minLat
argument_list|,
name|rect
operator|.
name|maxLat
argument_list|,
operator|-
literal|180.0
argument_list|,
name|rect
operator|.
name|maxLon
argument_list|)
operator|||
name|GeoRelationUtils
operator|.
name|pointInRectPrecise
argument_list|(
name|pointLat
argument_list|,
name|pointLon
argument_list|,
name|rect
operator|.
name|minLat
argument_list|,
name|rect
operator|.
name|maxLat
argument_list|,
name|rect
operator|.
name|minLon
argument_list|,
literal|180.0
argument_list|)
return|;
block|}
block|}
DECL|method|polyRectContainsPoint
specifier|static
specifier|final
name|boolean
name|polyRectContainsPoint
parameter_list|(
name|GeoRect
name|rect
parameter_list|,
name|double
name|pointLat
parameter_list|,
name|double
name|pointLon
parameter_list|)
block|{
comment|// TODO write better random polygon tests
comment|// note: logic must be slightly different than rectContainsPoint, to satisfy
comment|// insideness for cases exactly on boundaries.
assert|assert
name|Double
operator|.
name|isNaN
argument_list|(
name|pointLat
argument_list|)
operator|==
literal|false
assert|;
assert|assert
name|rect
operator|.
name|crossesDateline
argument_list|()
operator|==
literal|false
assert|;
name|double
name|polyLats
index|[]
init|=
operator|new
name|double
index|[]
block|{
name|rect
operator|.
name|minLat
block|,
name|rect
operator|.
name|maxLat
block|,
name|rect
operator|.
name|maxLat
block|,
name|rect
operator|.
name|minLat
block|,
name|rect
operator|.
name|minLat
block|}
decl_stmt|;
name|double
name|polyLons
index|[]
init|=
operator|new
name|double
index|[]
block|{
name|rect
operator|.
name|minLon
block|,
name|rect
operator|.
name|minLon
block|,
name|rect
operator|.
name|maxLon
block|,
name|rect
operator|.
name|maxLon
block|,
name|rect
operator|.
name|minLon
block|}
decl_stmt|;
comment|// TODO: separately test this method is 100% correct, here treat it like a black box (like haversin)
return|return
name|GeoRelationUtils
operator|.
name|pointInPolygon
argument_list|(
name|polyLats
argument_list|,
name|polyLons
argument_list|,
name|pointLat
argument_list|,
name|pointLon
argument_list|)
return|;
block|}
DECL|method|circleContainsPoint
specifier|static
specifier|final
name|boolean
name|circleContainsPoint
parameter_list|(
name|double
name|centerLat
parameter_list|,
name|double
name|centerLon
parameter_list|,
name|double
name|radiusMeters
parameter_list|,
name|double
name|pointLat
parameter_list|,
name|double
name|pointLon
parameter_list|)
block|{
name|double
name|distanceMeters
init|=
name|SloppyMath
operator|.
name|haversinMeters
argument_list|(
name|centerLat
argument_list|,
name|centerLon
argument_list|,
name|pointLat
argument_list|,
name|pointLon
argument_list|)
decl_stmt|;
name|boolean
name|result
init|=
name|distanceMeters
operator|<=
name|radiusMeters
decl_stmt|;
comment|//System.out.println("  shouldMatch?  centerLon=" + centerLon + " centerLat=" + centerLat + " pointLon=" + pointLon + " pointLat=" + pointLat + " result=" + result + " distanceMeters=" + (distanceKM * 1000));
return|return
name|result
return|;
block|}
DECL|method|distanceRangeContainsPoint
specifier|static
specifier|final
name|boolean
name|distanceRangeContainsPoint
parameter_list|(
name|double
name|centerLat
parameter_list|,
name|double
name|centerLon
parameter_list|,
name|double
name|minRadiusMeters
parameter_list|,
name|double
name|radiusMeters
parameter_list|,
name|double
name|pointLat
parameter_list|,
name|double
name|pointLon
parameter_list|)
block|{
specifier|final
name|double
name|d
init|=
name|SloppyMath
operator|.
name|haversinMeters
argument_list|(
name|centerLat
argument_list|,
name|centerLon
argument_list|,
name|pointLat
argument_list|,
name|pointLon
argument_list|)
decl_stmt|;
return|return
name|d
operator|>=
name|minRadiusMeters
operator|&&
name|d
operator|<=
name|radiusMeters
return|;
block|}
DECL|class|VerifyHits
specifier|private
specifier|static
specifier|abstract
class|class
name|VerifyHits
block|{
DECL|method|test
specifier|public
name|void
name|test
parameter_list|(
name|AtomicBoolean
name|failed
parameter_list|,
name|boolean
name|small
parameter_list|,
name|IndexSearcher
name|s
parameter_list|,
name|NumericDocValues
name|docIDToID
parameter_list|,
name|Set
argument_list|<
name|Integer
argument_list|>
name|deleted
parameter_list|,
name|Query
name|query
parameter_list|,
name|double
index|[]
name|lats
parameter_list|,
name|double
index|[]
name|lons
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|maxDoc
init|=
name|s
operator|.
name|getIndexReader
argument_list|()
operator|.
name|maxDoc
argument_list|()
decl_stmt|;
specifier|final
name|FixedBitSet
name|hits
init|=
operator|new
name|FixedBitSet
argument_list|(
name|maxDoc
argument_list|)
decl_stmt|;
name|s
operator|.
name|search
argument_list|(
name|query
argument_list|,
operator|new
name|SimpleCollector
argument_list|()
block|{
specifier|private
name|int
name|docBase
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|needsScores
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|doSetNextReader
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|docBase
operator|=
name|context
operator|.
name|docBase
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|collect
parameter_list|(
name|int
name|doc
parameter_list|)
block|{
name|hits
operator|.
name|set
argument_list|(
name|docBase
operator|+
name|doc
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|boolean
name|fail
init|=
literal|false
decl_stmt|;
comment|// Change to false to see all wrong hits:
name|boolean
name|failFast
init|=
literal|true
decl_stmt|;
for|for
control|(
name|int
name|docID
init|=
literal|0
init|;
name|docID
operator|<
name|maxDoc
condition|;
name|docID
operator|++
control|)
block|{
name|int
name|id
init|=
operator|(
name|int
operator|)
name|docIDToID
operator|.
name|get
argument_list|(
name|docID
argument_list|)
decl_stmt|;
name|boolean
name|expected
decl_stmt|;
if|if
condition|(
name|deleted
operator|.
name|contains
argument_list|(
name|id
argument_list|)
condition|)
block|{
name|expected
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|Double
operator|.
name|isNaN
argument_list|(
name|lats
index|[
name|id
index|]
argument_list|)
condition|)
block|{
name|expected
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|expected
operator|=
name|shouldMatch
argument_list|(
name|lats
index|[
name|id
index|]
argument_list|,
name|lons
index|[
name|id
index|]
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|hits
operator|.
name|get
argument_list|(
name|docID
argument_list|)
operator|!=
name|expected
condition|)
block|{
comment|// Print only one failed hit; add a true || in here to see all failures:
if|if
condition|(
name|failFast
operator|==
literal|false
operator|||
name|failed
operator|.
name|getAndSet
argument_list|(
literal|true
argument_list|)
operator|==
literal|false
condition|)
block|{
if|if
condition|(
name|expected
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|": id="
operator|+
name|id
operator|+
literal|" should match but did not"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|": id="
operator|+
name|id
operator|+
literal|" should not match but did"
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  small="
operator|+
name|small
operator|+
literal|" query="
operator|+
name|query
operator|+
literal|" docID="
operator|+
name|docID
operator|+
literal|"\n  lat="
operator|+
name|lats
index|[
name|id
index|]
operator|+
literal|" lon="
operator|+
name|lons
index|[
name|id
index|]
operator|+
literal|"\n  deleted?="
operator|+
name|deleted
operator|.
name|contains
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|Double
operator|.
name|isNaN
argument_list|(
name|lats
index|[
name|id
index|]
argument_list|)
operator|==
literal|false
condition|)
block|{
name|describe
argument_list|(
name|docID
argument_list|,
name|lats
index|[
name|id
index|]
argument_list|,
name|lons
index|[
name|id
index|]
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|failFast
condition|)
block|{
name|fail
argument_list|(
literal|"wrong hit (first of possibly more)"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fail
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|fail
condition|)
block|{
name|failed
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"some hits were wrong"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Return true if we definitely should match, false if we definitely      *  should not match, and null if it's a borderline case which might      *  go either way. */
DECL|method|shouldMatch
specifier|protected
specifier|abstract
name|boolean
name|shouldMatch
parameter_list|(
name|double
name|lat
parameter_list|,
name|double
name|lon
parameter_list|)
function_decl|;
DECL|method|describe
specifier|protected
specifier|abstract
name|void
name|describe
parameter_list|(
name|int
name|docID
parameter_list|,
name|double
name|lat
parameter_list|,
name|double
name|lon
parameter_list|)
function_decl|;
block|}
DECL|method|verify
specifier|protected
name|void
name|verify
parameter_list|(
name|boolean
name|small
parameter_list|,
name|double
index|[]
name|lats
parameter_list|,
name|double
index|[]
name|lons
parameter_list|,
name|boolean
name|useThreads
parameter_list|)
throws|throws
name|Exception
block|{
name|IndexWriterConfig
name|iwc
init|=
name|newIndexWriterConfig
argument_list|()
decl_stmt|;
comment|// Else we can get O(N^2) merging:
name|int
name|mbd
init|=
name|iwc
operator|.
name|getMaxBufferedDocs
argument_list|()
decl_stmt|;
if|if
condition|(
name|mbd
operator|!=
operator|-
literal|1
operator|&&
name|mbd
operator|<
name|lats
operator|.
name|length
operator|/
literal|100
condition|)
block|{
name|iwc
operator|.
name|setMaxBufferedDocs
argument_list|(
name|lats
operator|.
name|length
operator|/
literal|100
argument_list|)
expr_stmt|;
block|}
name|Directory
name|dir
decl_stmt|;
if|if
condition|(
name|lats
operator|.
name|length
operator|>
literal|100000
condition|)
block|{
name|dir
operator|=
name|newFSDirectory
argument_list|(
name|createTempDir
argument_list|(
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|dir
operator|=
name|newDirectory
argument_list|()
expr_stmt|;
block|}
name|Set
argument_list|<
name|Integer
argument_list|>
name|deleted
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
comment|// RandomIndexWriter is too slow here:
name|IndexWriter
name|w
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|iwc
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|id
init|=
literal|0
init|;
name|id
operator|<
name|lats
operator|.
name|length
condition|;
name|id
operator|++
control|)
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newStringField
argument_list|(
literal|"id"
argument_list|,
literal|""
operator|+
name|id
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|NumericDocValuesField
argument_list|(
literal|"id"
argument_list|,
name|id
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|Double
operator|.
name|isNaN
argument_list|(
name|lats
index|[
name|id
index|]
argument_list|)
operator|==
literal|false
condition|)
block|{
name|addPointToDoc
argument_list|(
name|FIELD_NAME
argument_list|,
name|doc
argument_list|,
name|lats
index|[
name|id
index|]
argument_list|,
name|lons
index|[
name|id
index|]
argument_list|)
expr_stmt|;
block|}
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
if|if
condition|(
name|id
operator|>
literal|0
operator|&&
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
operator|==
literal|42
condition|)
block|{
name|int
name|idToDelete
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|w
operator|.
name|deleteDocuments
argument_list|(
operator|new
name|Term
argument_list|(
literal|"id"
argument_list|,
literal|""
operator|+
name|idToDelete
argument_list|)
argument_list|)
expr_stmt|;
name|deleted
operator|.
name|add
argument_list|(
name|idToDelete
argument_list|)
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  delete id="
operator|+
name|idToDelete
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|w
operator|.
name|forceMerge
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
specifier|final
name|IndexReader
name|r
init|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|w
argument_list|)
decl_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// We can't wrap with "exotic" readers because the BKD query must see the BKDDVFormat:
name|IndexSearcher
name|s
init|=
name|newSearcher
argument_list|(
name|r
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|useThreads
condition|)
block|{
comment|// We must disable query cache otherwise test seed may not reproduce since different
comment|// threads may or may not get a cache hit or miss depending on order the JVM
comment|// schedules the threads:
name|s
operator|.
name|setQueryCache
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
comment|// Make sure queries are thread safe:
name|int
name|numThreads
decl_stmt|;
if|if
condition|(
name|useThreads
condition|)
block|{
name|numThreads
operator|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|2
argument_list|,
literal|5
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|numThreads
operator|=
literal|1
expr_stmt|;
block|}
name|List
argument_list|<
name|Thread
argument_list|>
name|threads
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|int
name|iters
init|=
name|atLeast
argument_list|(
literal|75
argument_list|)
decl_stmt|;
specifier|final
name|CountDownLatch
name|startingGun
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|AtomicBoolean
name|failed
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numThreads
condition|;
name|i
operator|++
control|)
block|{
name|Thread
name|thread
init|=
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|_run
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|failed
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|_run
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|useThreads
condition|)
block|{
name|startingGun
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
name|NumericDocValues
name|docIDToID
init|=
name|MultiDocValues
operator|.
name|getNumericValues
argument_list|(
name|r
argument_list|,
literal|"id"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|iter
init|=
literal|0
init|;
name|iter
operator|<
name|iters
operator|&&
name|failed
operator|.
name|get
argument_list|()
operator|==
literal|false
condition|;
name|iter
operator|++
control|)
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\n"
operator|+
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|": TEST: iter="
operator|+
name|iter
operator|+
literal|" s="
operator|+
name|s
argument_list|)
expr_stmt|;
block|}
name|Query
name|query
decl_stmt|;
name|VerifyHits
name|verifyHits
decl_stmt|;
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
comment|// Rect: don't allow dateline crossing when testing small:
specifier|final
name|GeoRect
name|rect
init|=
name|randomRect
argument_list|(
name|small
argument_list|,
name|small
operator|==
literal|false
argument_list|)
decl_stmt|;
name|query
operator|=
name|newRectQuery
argument_list|(
name|FIELD_NAME
argument_list|,
name|rect
argument_list|)
expr_stmt|;
name|verifyHits
operator|=
operator|new
name|VerifyHits
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|boolean
name|shouldMatch
parameter_list|(
name|double
name|pointLat
parameter_list|,
name|double
name|pointLon
parameter_list|)
block|{
return|return
name|rectContainsPoint
argument_list|(
name|rect
argument_list|,
name|pointLat
argument_list|,
name|pointLon
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|describe
parameter_list|(
name|int
name|docID
parameter_list|,
name|double
name|lat
parameter_list|,
name|double
name|lon
parameter_list|)
block|{                     }
block|}
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
comment|// Distance
specifier|final
name|boolean
name|rangeQuery
init|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
decl_stmt|;
specifier|final
name|double
name|centerLat
init|=
name|randomLat
argument_list|(
name|small
argument_list|)
decl_stmt|;
specifier|final
name|double
name|centerLon
init|=
name|randomLon
argument_list|(
name|small
argument_list|)
decl_stmt|;
name|double
name|radiusMeters
decl_stmt|;
name|double
name|minRadiusMeters
decl_stmt|;
if|if
condition|(
name|small
condition|)
block|{
comment|// Approx 3 degrees lon at the equator:
name|radiusMeters
operator|=
name|random
argument_list|()
operator|.
name|nextDouble
argument_list|()
operator|*
literal|333000
operator|+
literal|1.0
expr_stmt|;
block|}
else|else
block|{
comment|// So the query can cover at most 50% of the earth's surface:
name|radiusMeters
operator|=
name|random
argument_list|()
operator|.
name|nextDouble
argument_list|()
operator|*
name|GeoUtils
operator|.
name|SEMIMAJOR_AXIS
operator|*
name|Math
operator|.
name|PI
operator|/
literal|2.0
operator|+
literal|1.0
expr_stmt|;
block|}
comment|// generate a random minimum radius between 1% and 95% the max radius
name|minRadiusMeters
operator|=
operator|(
literal|0.01
operator|+
literal|0.94
operator|*
name|random
argument_list|()
operator|.
name|nextDouble
argument_list|()
operator|)
operator|*
name|radiusMeters
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
specifier|final
name|DecimalFormat
name|df
init|=
operator|new
name|DecimalFormat
argument_list|(
literal|"#,###.00"
argument_list|,
name|DecimalFormatSymbols
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|ENGLISH
argument_list|)
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  radiusMeters = "
operator|+
name|df
operator|.
name|format
argument_list|(
name|radiusMeters
argument_list|)
operator|+
operator|(
operator|(
name|rangeQuery
operator|==
literal|true
operator|)
condition|?
literal|" minRadiusMeters = "
operator|+
name|df
operator|.
name|format
argument_list|(
name|minRadiusMeters
argument_list|)
else|:
literal|""
operator|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
if|if
condition|(
name|rangeQuery
operator|==
literal|true
condition|)
block|{
name|query
operator|=
name|newDistanceRangeQuery
argument_list|(
name|FIELD_NAME
argument_list|,
name|centerLat
argument_list|,
name|centerLon
argument_list|,
name|minRadiusMeters
argument_list|,
name|radiusMeters
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|query
operator|=
name|newDistanceQuery
argument_list|(
name|FIELD_NAME
argument_list|,
name|centerLat
argument_list|,
name|centerLon
argument_list|,
name|radiusMeters
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"exceeds maxRadius"
argument_list|)
condition|)
block|{
continue|continue;
block|}
throw|throw
name|e
throw|;
block|}
name|verifyHits
operator|=
operator|new
name|VerifyHits
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|boolean
name|shouldMatch
parameter_list|(
name|double
name|pointLat
parameter_list|,
name|double
name|pointLon
parameter_list|)
block|{
if|if
condition|(
name|rangeQuery
operator|==
literal|false
condition|)
block|{
return|return
name|circleContainsPoint
argument_list|(
name|centerLat
argument_list|,
name|centerLon
argument_list|,
name|radiusMeters
argument_list|,
name|pointLat
argument_list|,
name|pointLon
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|distanceRangeContainsPoint
argument_list|(
name|centerLat
argument_list|,
name|centerLon
argument_list|,
name|minRadiusMeters
argument_list|,
name|radiusMeters
argument_list|,
name|pointLat
argument_list|,
name|pointLon
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|describe
parameter_list|(
name|int
name|docID
parameter_list|,
name|double
name|pointLat
parameter_list|,
name|double
name|pointLon
parameter_list|)
block|{
name|double
name|distanceMeters
init|=
name|SloppyMath
operator|.
name|haversinMeters
argument_list|(
name|centerLat
argument_list|,
name|centerLon
argument_list|,
name|pointLat
argument_list|,
name|pointLon
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  docID="
operator|+
name|docID
operator|+
literal|" centerLat="
operator|+
name|centerLat
operator|+
literal|" centerLon="
operator|+
name|centerLon
operator|+
literal|" pointLat="
operator|+
name|pointLat
operator|+
literal|" pointLon="
operator|+
name|pointLon
operator|+
literal|" distanceMeters="
operator|+
name|distanceMeters
operator|+
literal|" vs"
operator|+
operator|(
operator|(
name|rangeQuery
operator|==
literal|true
operator|)
condition|?
literal|" minRadiusMeters="
operator|+
name|minRadiusMeters
else|:
literal|""
operator|)
operator|+
literal|" radiusMeters="
operator|+
name|radiusMeters
argument_list|)
expr_stmt|;
block|}
block|}
expr_stmt|;
comment|// TODO: get poly query working with dateline crossing too (how?)!
block|}
else|else
block|{
comment|// TODO: poly query can't handle dateline crossing yet:
specifier|final
name|GeoRect
name|bbox
init|=
name|randomRect
argument_list|(
name|small
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// Polygon
name|double
index|[]
name|lats
init|=
operator|new
name|double
index|[
literal|5
index|]
decl_stmt|;
name|double
index|[]
name|lons
init|=
operator|new
name|double
index|[
literal|5
index|]
decl_stmt|;
name|lats
index|[
literal|0
index|]
operator|=
name|bbox
operator|.
name|minLat
expr_stmt|;
name|lons
index|[
literal|0
index|]
operator|=
name|bbox
operator|.
name|minLon
expr_stmt|;
name|lats
index|[
literal|1
index|]
operator|=
name|bbox
operator|.
name|maxLat
expr_stmt|;
name|lons
index|[
literal|1
index|]
operator|=
name|bbox
operator|.
name|minLon
expr_stmt|;
name|lats
index|[
literal|2
index|]
operator|=
name|bbox
operator|.
name|maxLat
expr_stmt|;
name|lons
index|[
literal|2
index|]
operator|=
name|bbox
operator|.
name|maxLon
expr_stmt|;
name|lats
index|[
literal|3
index|]
operator|=
name|bbox
operator|.
name|minLat
expr_stmt|;
name|lons
index|[
literal|3
index|]
operator|=
name|bbox
operator|.
name|maxLon
expr_stmt|;
name|lats
index|[
literal|4
index|]
operator|=
name|bbox
operator|.
name|minLat
expr_stmt|;
name|lons
index|[
literal|4
index|]
operator|=
name|bbox
operator|.
name|minLon
expr_stmt|;
name|query
operator|=
name|newPolygonQuery
argument_list|(
name|FIELD_NAME
argument_list|,
name|lats
argument_list|,
name|lons
argument_list|)
expr_stmt|;
name|verifyHits
operator|=
operator|new
name|VerifyHits
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|boolean
name|shouldMatch
parameter_list|(
name|double
name|pointLat
parameter_list|,
name|double
name|pointLon
parameter_list|)
block|{
return|return
name|polyRectContainsPoint
argument_list|(
name|bbox
argument_list|,
name|pointLat
argument_list|,
name|pointLon
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|describe
parameter_list|(
name|int
name|docID
parameter_list|,
name|double
name|lat
parameter_list|,
name|double
name|lon
parameter_list|)
block|{                     }
block|}
expr_stmt|;
block|}
if|if
condition|(
name|query
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  query="
operator|+
name|query
argument_list|)
expr_stmt|;
block|}
name|verifyHits
operator|.
name|test
argument_list|(
name|failed
argument_list|,
name|small
argument_list|,
name|s
argument_list|,
name|docIDToID
argument_list|,
name|deleted
argument_list|,
name|query
argument_list|,
name|lats
argument_list|,
name|lons
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
decl_stmt|;
name|thread
operator|.
name|setName
argument_list|(
literal|"T"
operator|+
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|useThreads
condition|)
block|{
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// Just run with main thread:
name|thread
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
name|threads
operator|.
name|add
argument_list|(
name|thread
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|useThreads
condition|)
block|{
name|startingGun
operator|.
name|countDown
argument_list|()
expr_stmt|;
for|for
control|(
name|Thread
name|thread
range|:
name|threads
control|)
block|{
name|thread
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
block|}
name|IOUtils
operator|.
name|close
argument_list|(
name|r
argument_list|,
name|dir
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|failed
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testRectBoundariesAreInclusive
specifier|public
name|void
name|testRectBoundariesAreInclusive
parameter_list|()
throws|throws
name|Exception
block|{
name|GeoRect
name|rect
init|=
name|randomRect
argument_list|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriterConfig
name|iwc
init|=
name|newIndexWriterConfig
argument_list|()
decl_stmt|;
name|RandomIndexWriter
name|w
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|,
name|iwc
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
literal|3
condition|;
name|x
operator|++
control|)
block|{
name|double
name|lat
decl_stmt|;
if|if
condition|(
name|x
operator|==
literal|0
condition|)
block|{
name|lat
operator|=
name|rect
operator|.
name|minLat
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|x
operator|==
literal|1
condition|)
block|{
name|lat
operator|=
name|quantizeLat
argument_list|(
operator|(
name|rect
operator|.
name|minLat
operator|+
name|rect
operator|.
name|maxLat
operator|)
operator|/
literal|2.0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|lat
operator|=
name|rect
operator|.
name|maxLat
expr_stmt|;
block|}
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
literal|3
condition|;
name|y
operator|++
control|)
block|{
name|double
name|lon
decl_stmt|;
if|if
condition|(
name|y
operator|==
literal|0
condition|)
block|{
name|lon
operator|=
name|rect
operator|.
name|minLon
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|y
operator|==
literal|1
condition|)
block|{
if|if
condition|(
name|x
operator|==
literal|1
condition|)
block|{
continue|continue;
block|}
name|lon
operator|=
name|quantizeLon
argument_list|(
operator|(
name|rect
operator|.
name|minLon
operator|+
name|rect
operator|.
name|maxLon
operator|)
operator|/
literal|2.0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|lon
operator|=
name|rect
operator|.
name|maxLon
expr_stmt|;
block|}
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|addPointToDoc
argument_list|(
name|FIELD_NAME
argument_list|,
name|doc
argument_list|,
name|lat
argument_list|,
name|lon
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
block|}
name|IndexReader
name|r
init|=
name|w
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|IndexSearcher
name|s
init|=
name|newSearcher
argument_list|(
name|r
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|8
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|newRectQuery
argument_list|(
name|FIELD_NAME
argument_list|,
name|rect
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/** Run a few iterations with just 10 docs, hopefully easy to debug */
DECL|method|testRandomDistance
specifier|public
name|void
name|testRandomDistance
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|iters
init|=
literal|0
init|;
name|iters
operator|<
literal|100
condition|;
name|iters
operator|++
control|)
block|{
name|doRandomDistanceTest
argument_list|(
literal|10
argument_list|,
literal|100
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Runs with thousands of docs */
annotation|@
name|Nightly
DECL|method|testRandomDistanceHuge
specifier|public
name|void
name|testRandomDistanceHuge
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|iters
init|=
literal|0
init|;
name|iters
operator|<
literal|10
condition|;
name|iters
operator|++
control|)
block|{
name|doRandomDistanceTest
argument_list|(
literal|2000
argument_list|,
literal|100
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|doRandomDistanceTest
specifier|private
name|void
name|doRandomDistanceTest
parameter_list|(
name|int
name|numDocs
parameter_list|,
name|int
name|numQueries
parameter_list|)
throws|throws
name|IOException
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriterConfig
name|iwc
init|=
name|newIndexWriterConfig
argument_list|()
decl_stmt|;
name|int
name|pointsInLeaf
init|=
literal|2
operator|+
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|iwc
operator|.
name|setCodec
argument_list|(
operator|new
name|FilterCodec
argument_list|(
literal|"Lucene60"
argument_list|,
name|TestUtil
operator|.
name|getDefaultCodec
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|PointsFormat
name|pointsFormat
parameter_list|()
block|{
return|return
operator|new
name|PointsFormat
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|PointsWriter
name|fieldsWriter
parameter_list|(
name|SegmentWriteState
name|writeState
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|Lucene60PointsWriter
argument_list|(
name|writeState
argument_list|,
name|pointsInLeaf
argument_list|,
name|BKDWriter
operator|.
name|DEFAULT_MAX_MB_SORT_IN_HEAP
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|PointsReader
name|fieldsReader
parameter_list|(
name|SegmentReadState
name|readState
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|Lucene60PointsReader
argument_list|(
name|readState
argument_list|)
return|;
block|}
block|}
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|RandomIndexWriter
name|writer
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|,
name|iwc
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
name|i
operator|++
control|)
block|{
name|double
name|latRaw
init|=
operator|-
literal|90
operator|+
literal|180.0
operator|*
name|random
argument_list|()
operator|.
name|nextDouble
argument_list|()
decl_stmt|;
name|double
name|lonRaw
init|=
operator|-
literal|180
operator|+
literal|360.0
operator|*
name|random
argument_list|()
operator|.
name|nextDouble
argument_list|()
decl_stmt|;
comment|// pre-normalize up front, so we can just use quantized value for testing and do simple exact comparisons
name|double
name|lat
init|=
name|quantizeLat
argument_list|(
name|latRaw
argument_list|)
decl_stmt|;
name|double
name|lon
init|=
name|quantizeLon
argument_list|(
name|lonRaw
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|addPointToDoc
argument_list|(
literal|"field"
argument_list|,
name|doc
argument_list|,
name|lat
argument_list|,
name|lon
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|StoredField
argument_list|(
literal|"lat"
argument_list|,
name|lat
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|StoredField
argument_list|(
literal|"lon"
argument_list|,
name|lon
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
name|IndexReader
name|reader
init|=
name|writer
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|IndexSearcher
name|searcher
init|=
name|newSearcher
argument_list|(
name|reader
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numQueries
condition|;
name|i
operator|++
control|)
block|{
name|double
name|lat
init|=
operator|-
literal|90
operator|+
literal|180.0
operator|*
name|random
argument_list|()
operator|.
name|nextDouble
argument_list|()
decl_stmt|;
name|double
name|lon
init|=
operator|-
literal|180
operator|+
literal|360.0
operator|*
name|random
argument_list|()
operator|.
name|nextDouble
argument_list|()
decl_stmt|;
name|double
name|radius
init|=
name|maxRadius
argument_list|(
name|lat
argument_list|,
name|lon
argument_list|)
operator|*
name|random
argument_list|()
operator|.
name|nextDouble
argument_list|()
decl_stmt|;
name|BitSet
name|expected
init|=
operator|new
name|BitSet
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|doc
init|=
literal|0
init|;
name|doc
operator|<
name|reader
operator|.
name|maxDoc
argument_list|()
condition|;
name|doc
operator|++
control|)
block|{
name|double
name|docLatitude
init|=
name|reader
operator|.
name|document
argument_list|(
name|doc
argument_list|)
operator|.
name|getField
argument_list|(
literal|"lat"
argument_list|)
operator|.
name|numericValue
argument_list|()
operator|.
name|doubleValue
argument_list|()
decl_stmt|;
name|double
name|docLongitude
init|=
name|reader
operator|.
name|document
argument_list|(
name|doc
argument_list|)
operator|.
name|getField
argument_list|(
literal|"lon"
argument_list|)
operator|.
name|numericValue
argument_list|()
operator|.
name|doubleValue
argument_list|()
decl_stmt|;
name|double
name|distance
init|=
name|SloppyMath
operator|.
name|haversinMeters
argument_list|(
name|lat
argument_list|,
name|lon
argument_list|,
name|docLatitude
argument_list|,
name|docLongitude
argument_list|)
decl_stmt|;
if|if
condition|(
name|distance
operator|<=
name|radius
condition|)
block|{
name|expected
operator|.
name|set
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
block|}
name|TopDocs
name|topDocs
init|=
name|searcher
operator|.
name|search
argument_list|(
name|newDistanceQuery
argument_list|(
literal|"field"
argument_list|,
name|lat
argument_list|,
name|lon
argument_list|,
name|radius
argument_list|)
argument_list|,
name|reader
operator|.
name|maxDoc
argument_list|()
argument_list|,
name|Sort
operator|.
name|INDEXORDER
argument_list|)
decl_stmt|;
name|BitSet
name|actual
init|=
operator|new
name|BitSet
argument_list|()
decl_stmt|;
for|for
control|(
name|ScoreDoc
name|doc
range|:
name|topDocs
operator|.
name|scoreDocs
control|)
block|{
name|actual
operator|.
name|set
argument_list|(
name|doc
operator|.
name|doc
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AssertionError
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"center: ("
operator|+
name|lat
operator|+
literal|","
operator|+
name|lon
operator|+
literal|"), radius="
operator|+
name|radius
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|doc
init|=
literal|0
init|;
name|doc
operator|<
name|reader
operator|.
name|maxDoc
argument_list|()
condition|;
name|doc
operator|++
control|)
block|{
name|double
name|docLatitude
init|=
name|reader
operator|.
name|document
argument_list|(
name|doc
argument_list|)
operator|.
name|getField
argument_list|(
literal|"lat"
argument_list|)
operator|.
name|numericValue
argument_list|()
operator|.
name|doubleValue
argument_list|()
decl_stmt|;
name|double
name|docLongitude
init|=
name|reader
operator|.
name|document
argument_list|(
name|doc
argument_list|)
operator|.
name|getField
argument_list|(
literal|"lon"
argument_list|)
operator|.
name|numericValue
argument_list|()
operator|.
name|doubleValue
argument_list|()
decl_stmt|;
name|double
name|distance
init|=
name|SloppyMath
operator|.
name|haversinMeters
argument_list|(
name|lat
argument_list|,
name|lon
argument_list|,
name|docLatitude
argument_list|,
name|docLongitude
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|""
operator|+
name|doc
operator|+
literal|": ("
operator|+
name|docLatitude
operator|+
literal|","
operator|+
name|docLongitude
operator|+
literal|"), distance="
operator|+
name|distance
argument_list|)
expr_stmt|;
block|}
throw|throw
name|e
throw|;
block|}
block|}
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class
end_unit
