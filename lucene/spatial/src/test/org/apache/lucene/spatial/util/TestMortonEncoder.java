begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.spatial.util
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|util
package|;
end_package
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|NumericUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|TestUtil
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|geo
operator|.
name|GeoEncodingUtils
operator|.
name|decodeLatitude
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|geo
operator|.
name|GeoEncodingUtils
operator|.
name|decodeLongitude
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|util
operator|.
name|MortonEncoder
operator|.
name|decodeLatitude
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|util
operator|.
name|MortonEncoder
operator|.
name|decodeLongitude
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|util
operator|.
name|MortonEncoder
operator|.
name|encode
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|util
operator|.
name|MortonEncoder
operator|.
name|encodeCeil
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BitUtil
operator|.
name|deinterleave
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BitUtil
operator|.
name|interleave
import|;
end_import
begin_comment
comment|/**  * Tests methods in {@link MortonEncoder}  */
end_comment
begin_class
DECL|class|TestMortonEncoder
specifier|public
class|class
name|TestMortonEncoder
extends|extends
name|LuceneTestCase
block|{
DECL|method|testMortonEncoding
specifier|public
name|void
name|testMortonEncoding
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|long
name|TRANSLATE
init|=
literal|1L
operator|<<
literal|31
decl_stmt|;
specifier|final
name|double
name|LATITUDE_DECODE
init|=
literal|180.0D
operator|/
operator|(
literal|0x1L
operator|<<
literal|32
operator|)
decl_stmt|;
specifier|final
name|double
name|LONGITUDE_DECODE
init|=
literal|360.0D
operator|/
operator|(
literal|0x1L
operator|<<
literal|32
operator|)
decl_stmt|;
name|Random
name|random
init|=
name|random
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10000
condition|;
operator|++
name|i
control|)
block|{
name|long
name|encoded
init|=
name|random
argument_list|()
operator|.
name|nextLong
argument_list|()
decl_stmt|;
name|long
name|encodedLat
init|=
name|deinterleave
argument_list|(
name|encoded
operator|>>>
literal|1
argument_list|)
decl_stmt|;
name|long
name|encodedLon
init|=
name|deinterleave
argument_list|(
name|encoded
argument_list|)
decl_stmt|;
name|double
name|expectedLat
init|=
name|decodeLatitude
argument_list|(
call|(
name|int
call|)
argument_list|(
name|encodedLat
operator|-
name|TRANSLATE
argument_list|)
argument_list|)
decl_stmt|;
name|double
name|decodedLat
init|=
name|decodeLatitude
argument_list|(
name|encoded
argument_list|)
decl_stmt|;
name|double
name|expectedLon
init|=
name|decodeLongitude
argument_list|(
call|(
name|int
call|)
argument_list|(
name|encodedLon
operator|-
name|TRANSLATE
argument_list|)
argument_list|)
decl_stmt|;
name|double
name|decodedLon
init|=
name|decodeLongitude
argument_list|(
name|encoded
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedLat
argument_list|,
name|decodedLat
argument_list|,
literal|0.0D
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedLon
argument_list|,
name|decodedLon
argument_list|,
literal|0.0D
argument_list|)
expr_stmt|;
comment|// should round-trip
name|assertEquals
argument_list|(
name|encoded
argument_list|,
name|encode
argument_list|(
name|decodedLat
argument_list|,
name|decodedLon
argument_list|)
argument_list|)
expr_stmt|;
comment|// test within the range
if|if
condition|(
name|encoded
operator|!=
literal|0xFFFFFFFFFFFFFFFFL
condition|)
block|{
comment|// this is the next representable value
comment|// all double values between [min .. max) should encode to the current integer
comment|// all double values between (min .. max] should encodeCeil to the next integer.
name|double
name|maxLat
init|=
name|expectedLat
operator|+
name|LATITUDE_DECODE
decl_stmt|;
name|encodedLat
operator|+=
literal|1
expr_stmt|;
name|assertEquals
argument_list|(
name|maxLat
argument_list|,
name|decodeLatitude
argument_list|(
call|(
name|int
call|)
argument_list|(
name|encodedLat
operator|-
name|TRANSLATE
argument_list|)
argument_list|)
argument_list|,
literal|0.0D
argument_list|)
expr_stmt|;
name|double
name|maxLon
init|=
name|expectedLon
operator|+
name|LONGITUDE_DECODE
decl_stmt|;
name|encodedLon
operator|+=
literal|1
expr_stmt|;
name|assertEquals
argument_list|(
name|maxLon
argument_list|,
name|decodeLongitude
argument_list|(
call|(
name|int
call|)
argument_list|(
name|encodedLon
operator|-
name|TRANSLATE
argument_list|)
argument_list|)
argument_list|,
literal|0.0D
argument_list|)
expr_stmt|;
name|long
name|encodedNext
init|=
name|encode
argument_list|(
name|maxLat
argument_list|,
name|maxLon
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|interleave
argument_list|(
operator|(
name|int
operator|)
name|encodedLon
argument_list|,
operator|(
name|int
operator|)
name|encodedLat
argument_list|)
argument_list|,
name|encodedNext
argument_list|)
expr_stmt|;
comment|// first and last doubles in range that will be quantized
name|double
name|minEdgeLat
init|=
name|Math
operator|.
name|nextUp
argument_list|(
name|expectedLat
argument_list|)
decl_stmt|;
name|double
name|minEdgeLon
init|=
name|Math
operator|.
name|nextUp
argument_list|(
name|expectedLon
argument_list|)
decl_stmt|;
name|long
name|encodedMinEdge
init|=
name|encode
argument_list|(
name|minEdgeLat
argument_list|,
name|minEdgeLon
argument_list|)
decl_stmt|;
name|long
name|encodedMinEdgeCeil
init|=
name|encodeCeil
argument_list|(
name|minEdgeLat
argument_list|,
name|minEdgeLon
argument_list|)
decl_stmt|;
name|double
name|maxEdgeLat
init|=
name|Math
operator|.
name|nextDown
argument_list|(
name|maxLat
argument_list|)
decl_stmt|;
name|double
name|maxEdgeLon
init|=
name|Math
operator|.
name|nextDown
argument_list|(
name|maxLon
argument_list|)
decl_stmt|;
name|long
name|encodedMaxEdge
init|=
name|encode
argument_list|(
name|maxEdgeLat
argument_list|,
name|maxEdgeLon
argument_list|)
decl_stmt|;
name|long
name|encodedMaxEdgeCeil
init|=
name|encodeCeil
argument_list|(
name|maxEdgeLat
argument_list|,
name|maxEdgeLon
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|encodedLat
operator|-
literal|1
argument_list|,
name|deinterleave
argument_list|(
name|encodedMinEdge
operator|>>>
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|encodedLat
argument_list|,
name|deinterleave
argument_list|(
name|encodedMinEdgeCeil
operator|>>>
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|encodedLon
operator|-
literal|1
argument_list|,
name|deinterleave
argument_list|(
name|encodedMinEdge
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|encodedLon
argument_list|,
name|deinterleave
argument_list|(
name|encodedMinEdgeCeil
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|encodedLat
operator|-
literal|1
argument_list|,
name|deinterleave
argument_list|(
name|encodedMaxEdge
operator|>>>
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|encodedLat
argument_list|,
name|deinterleave
argument_list|(
name|encodedMaxEdgeCeil
operator|>>>
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|encodedLon
operator|-
literal|1
argument_list|,
name|deinterleave
argument_list|(
name|encodedMaxEdge
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|encodedLon
argument_list|,
name|deinterleave
argument_list|(
name|encodedMaxEdgeCeil
argument_list|)
argument_list|)
expr_stmt|;
comment|// check random values within the double range
name|long
name|minBitsLat
init|=
name|NumericUtils
operator|.
name|doubleToSortableLong
argument_list|(
name|minEdgeLat
argument_list|)
decl_stmt|;
name|long
name|maxBitsLat
init|=
name|NumericUtils
operator|.
name|doubleToSortableLong
argument_list|(
name|maxEdgeLat
argument_list|)
decl_stmt|;
name|long
name|minBitsLon
init|=
name|NumericUtils
operator|.
name|doubleToSortableLong
argument_list|(
name|minEdgeLon
argument_list|)
decl_stmt|;
name|long
name|maxBitsLon
init|=
name|NumericUtils
operator|.
name|doubleToSortableLong
argument_list|(
name|maxEdgeLon
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|100
condition|;
name|j
operator|++
control|)
block|{
name|double
name|valueLat
init|=
name|NumericUtils
operator|.
name|sortableLongToDouble
argument_list|(
name|TestUtil
operator|.
name|nextLong
argument_list|(
name|random
argument_list|,
name|minBitsLat
argument_list|,
name|maxBitsLat
argument_list|)
argument_list|)
decl_stmt|;
name|double
name|valueLon
init|=
name|NumericUtils
operator|.
name|sortableLongToDouble
argument_list|(
name|TestUtil
operator|.
name|nextLong
argument_list|(
name|random
argument_list|,
name|minBitsLon
argument_list|,
name|maxBitsLon
argument_list|)
argument_list|)
decl_stmt|;
comment|// round down
name|assertEquals
argument_list|(
name|encoded
argument_list|,
name|encode
argument_list|(
name|valueLat
argument_list|,
name|valueLon
argument_list|)
argument_list|)
expr_stmt|;
comment|// round up
name|assertEquals
argument_list|(
name|interleave
argument_list|(
operator|(
name|int
operator|)
name|encodedLon
argument_list|,
operator|(
name|int
operator|)
name|encodedLat
argument_list|)
argument_list|,
name|encodeCeil
argument_list|(
name|valueLat
argument_list|,
name|valueLon
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class
end_unit
