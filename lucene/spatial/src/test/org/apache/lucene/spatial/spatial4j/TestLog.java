begin_unit
begin_package
DECL|package|org.apache.lucene.spatial.spatial4j
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|spatial4j
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|rules
operator|.
name|TestRuleAdapter
import|;
end_import
begin_comment
comment|/**  * A utility logger for tests in which log statements are logged following  * test failure only.  Add this to a JUnit based test class with a {@link org.junit.Rule}  * annotation.  */
end_comment
begin_class
DECL|class|TestLog
specifier|public
class|class
name|TestLog
extends|extends
name|TestRuleAdapter
block|{
comment|//TODO does this need to be threadsafe (such as via thread-local state)?
DECL|field|logStack
specifier|private
specifier|static
name|ArrayList
argument_list|<
name|LogEntry
argument_list|>
name|logStack
init|=
operator|new
name|ArrayList
argument_list|<
name|LogEntry
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|MAX_LOGS
specifier|private
specifier|static
specifier|final
name|int
name|MAX_LOGS
init|=
literal|1000
decl_stmt|;
DECL|field|instance
specifier|public
specifier|static
specifier|final
name|TestLog
name|instance
init|=
operator|new
name|TestLog
argument_list|()
decl_stmt|;
DECL|method|TestLog
specifier|private
name|TestLog
parameter_list|()
block|{}
annotation|@
name|Override
DECL|method|before
specifier|protected
name|void
name|before
parameter_list|()
throws|throws
name|Throwable
block|{
name|logStack
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|afterAlways
specifier|protected
name|void
name|afterAlways
parameter_list|(
name|List
argument_list|<
name|Throwable
argument_list|>
name|errors
parameter_list|)
throws|throws
name|Throwable
block|{
if|if
condition|(
operator|!
name|errors
operator|.
name|isEmpty
argument_list|()
condition|)
name|logThenClear
argument_list|()
expr_stmt|;
block|}
DECL|method|logThenClear
specifier|private
name|void
name|logThenClear
parameter_list|()
block|{
for|for
control|(
name|LogEntry
name|entry
range|:
name|logStack
control|)
block|{
comment|//no SLF4J in Lucene... fallback to this
if|if
condition|(
name|entry
operator|.
name|args
operator|!=
literal|null
operator|&&
name|entry
operator|.
name|args
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|entry
operator|.
name|msg
operator|+
literal|" "
operator|+
name|Arrays
operator|.
name|asList
argument_list|(
name|entry
operator|.
name|args
argument_list|)
operator|+
literal|"(no slf4j subst; sorry)"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|entry
operator|.
name|msg
argument_list|)
expr_stmt|;
block|}
block|}
name|logStack
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
DECL|method|clear
specifier|public
specifier|static
name|void
name|clear
parameter_list|()
block|{
name|logStack
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
comment|/**    * Enqueues a log message with substitution arguments ala SLF4J (i.e. {} syntax).    * If the test fails then it'll be logged then, otherwise it'll be forgotten.    */
DECL|method|log
specifier|public
specifier|static
name|void
name|log
parameter_list|(
name|String
name|msg
parameter_list|,
name|Object
modifier|...
name|args
parameter_list|)
block|{
if|if
condition|(
name|logStack
operator|.
name|size
argument_list|()
operator|>
name|MAX_LOGS
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Too many log statements: "
operator|+
name|logStack
operator|.
name|size
argument_list|()
operator|+
literal|"> "
operator|+
name|MAX_LOGS
argument_list|)
throw|;
block|}
name|LogEntry
name|entry
init|=
operator|new
name|LogEntry
argument_list|()
decl_stmt|;
name|entry
operator|.
name|msg
operator|=
name|msg
expr_stmt|;
name|entry
operator|.
name|args
operator|=
name|args
expr_stmt|;
name|logStack
operator|.
name|add
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
DECL|class|LogEntry
DECL|field|msg
DECL|field|args
specifier|private
specifier|static
class|class
name|LogEntry
block|{
name|String
name|msg
decl_stmt|;
name|Object
index|[]
name|args
decl_stmt|;
block|}
block|}
end_class
end_unit
