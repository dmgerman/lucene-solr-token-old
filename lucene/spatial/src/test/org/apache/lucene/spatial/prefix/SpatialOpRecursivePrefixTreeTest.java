begin_unit
begin_package
DECL|package|org.apache.lucene.spatial.prefix
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|prefix
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|annotations
operator|.
name|Repeat
import|;
end_import
begin_import
import|import
name|com
operator|.
name|spatial4j
operator|.
name|core
operator|.
name|context
operator|.
name|SpatialContext
import|;
end_import
begin_import
import|import
name|com
operator|.
name|spatial4j
operator|.
name|core
operator|.
name|shape
operator|.
name|Point
import|;
end_import
begin_import
import|import
name|com
operator|.
name|spatial4j
operator|.
name|core
operator|.
name|shape
operator|.
name|Rectangle
import|;
end_import
begin_import
import|import
name|com
operator|.
name|spatial4j
operator|.
name|core
operator|.
name|shape
operator|.
name|Shape
import|;
end_import
begin_import
import|import
name|com
operator|.
name|spatial4j
operator|.
name|core
operator|.
name|shape
operator|.
name|SpatialRelation
import|;
end_import
begin_import
import|import
name|com
operator|.
name|spatial4j
operator|.
name|core
operator|.
name|shape
operator|.
name|impl
operator|.
name|RectangleImpl
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|StrategyTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|prefix
operator|.
name|tree
operator|.
name|Cell
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|prefix
operator|.
name|tree
operator|.
name|QuadPrefixTree
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|prefix
operator|.
name|tree
operator|.
name|SpatialPrefixTree
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|query
operator|.
name|SpatialArgs
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|query
operator|.
name|SpatialOperation
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import
begin_import
import|import static
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|RandomizedTest
operator|.
name|randomInt
import|;
end_import
begin_import
import|import static
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|RandomizedTest
operator|.
name|randomIntBetween
import|;
end_import
begin_class
DECL|class|SpatialOpRecursivePrefixTreeTest
specifier|public
class|class
name|SpatialOpRecursivePrefixTreeTest
extends|extends
name|StrategyTestCase
block|{
DECL|field|grid
specifier|private
name|SpatialPrefixTree
name|grid
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|deleteAll
argument_list|()
expr_stmt|;
block|}
DECL|method|mySetup
specifier|public
name|void
name|mySetup
parameter_list|()
throws|throws
name|IOException
block|{
comment|//non-geospatial makes this test a little easier (in gridSnap), and using boundary values 2^X raises
comment|// the prospect of edge conditions we want to test, plus makes for simpler numbers (no decimals).
name|this
operator|.
name|ctx
operator|=
operator|new
name|SpatialContext
argument_list|(
literal|false
argument_list|,
literal|null
argument_list|,
operator|new
name|RectangleImpl
argument_list|(
literal|0
argument_list|,
literal|256
argument_list|,
operator|-
literal|128
argument_list|,
literal|128
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
comment|//A fairly shallow grid, and default 2.5% distErrPct
name|this
operator|.
name|grid
operator|=
operator|new
name|QuadPrefixTree
argument_list|(
name|ctx
argument_list|,
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|8
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|strategy
operator|=
operator|new
name|RecursivePrefixTreeStrategy
argument_list|(
name|grid
argument_list|,
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
comment|//((PrefixTreeStrategy) strategy).setDistErrPct(0);//fully precise to grid
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Strategy: "
operator|+
name|strategy
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|Repeat
argument_list|(
name|iterations
operator|=
literal|10
argument_list|)
DECL|method|testIntersects
specifier|public
name|void
name|testIntersects
parameter_list|()
throws|throws
name|IOException
block|{
name|mySetup
argument_list|()
expr_stmt|;
name|doTest
argument_list|(
name|SpatialOperation
operator|.
name|Intersects
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|Repeat
argument_list|(
name|iterations
operator|=
literal|10
argument_list|)
DECL|method|testWithin
specifier|public
name|void
name|testWithin
parameter_list|()
throws|throws
name|IOException
block|{
name|mySetup
argument_list|()
expr_stmt|;
name|doTest
argument_list|(
name|SpatialOperation
operator|.
name|IsWithin
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|Repeat
argument_list|(
name|iterations
operator|=
literal|10
argument_list|)
DECL|method|testContains
specifier|public
name|void
name|testContains
parameter_list|()
throws|throws
name|IOException
block|{
name|mySetup
argument_list|()
expr_stmt|;
name|doTest
argument_list|(
name|SpatialOperation
operator|.
name|Contains
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testWithinDisjointParts
specifier|public
name|void
name|testWithinDisjointParts
parameter_list|()
throws|throws
name|IOException
block|{
name|this
operator|.
name|ctx
operator|=
operator|new
name|SpatialContext
argument_list|(
literal|false
argument_list|,
literal|null
argument_list|,
operator|new
name|RectangleImpl
argument_list|(
literal|0
argument_list|,
literal|256
argument_list|,
operator|-
literal|128
argument_list|,
literal|128
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
comment|//A fairly shallow grid, and default 2.5% distErrPct
name|this
operator|.
name|grid
operator|=
operator|new
name|QuadPrefixTree
argument_list|(
name|ctx
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|this
operator|.
name|strategy
operator|=
operator|new
name|RecursivePrefixTreeStrategy
argument_list|(
name|grid
argument_list|,
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
comment|//one shape comprised of two parts, quite separated apart
name|adoc
argument_list|(
literal|"0"
argument_list|,
operator|new
name|ShapePair
argument_list|(
name|ctx
operator|.
name|makeRectangle
argument_list|(
literal|0
argument_list|,
literal|10
argument_list|,
operator|-
literal|120
argument_list|,
operator|-
literal|100
argument_list|)
argument_list|,
name|ctx
operator|.
name|makeRectangle
argument_list|(
literal|220
argument_list|,
literal|240
argument_list|,
literal|110
argument_list|,
literal|125
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
comment|//query surrounds only the second part of the indexed shape
name|Query
name|query
init|=
name|strategy
operator|.
name|makeQuery
argument_list|(
operator|new
name|SpatialArgs
argument_list|(
name|SpatialOperation
operator|.
name|IsWithin
argument_list|,
name|ctx
operator|.
name|makeRectangle
argument_list|(
literal|210
argument_list|,
literal|245
argument_list|,
literal|105
argument_list|,
literal|128
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|SearchResults
name|searchResults
init|=
name|executeQuery
argument_list|(
name|query
argument_list|,
literal|1
argument_list|)
decl_stmt|;
comment|//we shouldn't find it because it's not completely within
name|assertTrue
argument_list|(
name|searchResults
operator|.
name|numFound
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|doTest
specifier|private
name|void
name|doTest
parameter_list|(
specifier|final
name|SpatialOperation
name|operation
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Shape
argument_list|>
name|indexedShapes
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|Shape
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|int
name|numIndexedShapes
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|6
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numIndexedShapes
condition|;
name|i
operator|++
control|)
block|{
name|String
name|id
init|=
literal|""
operator|+
name|i
decl_stmt|;
name|Shape
name|indexedShape
decl_stmt|;
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|4
argument_list|)
operator|==
literal|0
condition|)
block|{
name|indexedShape
operator|=
operator|new
name|ShapePair
argument_list|(
name|gridSnapp
argument_list|(
name|randomRectangle
argument_list|()
argument_list|)
argument_list|,
name|gridSnapp
argument_list|(
name|randomRectangle
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|indexedShape
operator|=
name|gridSnapp
argument_list|(
name|randomRectangle
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|indexedShapes
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|indexedShape
argument_list|)
expr_stmt|;
name|adoc
argument_list|(
name|id
argument_list|,
name|indexedShape
argument_list|)
expr_stmt|;
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
operator|==
literal|0
condition|)
name|commit
argument_list|()
expr_stmt|;
block|}
comment|//delete some
name|Iterator
argument_list|<
name|String
argument_list|>
name|idIter
init|=
name|indexedShapes
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|idIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|id
init|=
name|idIter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
operator|==
literal|0
condition|)
block|{
name|deleteDoc
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|idIter
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
name|commit
argument_list|()
expr_stmt|;
specifier|final
name|int
name|numQueryShapes
init|=
name|atLeast
argument_list|(
literal|20
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numQueryShapes
condition|;
name|i
operator|++
control|)
block|{
name|int
name|scanLevel
init|=
name|randomInt
argument_list|(
name|grid
operator|.
name|getMaxLevels
argument_list|()
argument_list|)
decl_stmt|;
operator|(
operator|(
name|RecursivePrefixTreeStrategy
operator|)
name|strategy
operator|)
operator|.
name|setPrefixGridScanLevel
argument_list|(
name|scanLevel
argument_list|)
expr_stmt|;
name|Shape
name|queryShape
init|=
name|gridSnapp
argument_list|(
name|randomRectangle
argument_list|()
argument_list|)
decl_stmt|;
comment|//Generate truth via brute force
name|Set
argument_list|<
name|String
argument_list|>
name|expectedIds
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Shape
argument_list|>
name|entry
range|:
name|indexedShapes
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|operation
operator|.
name|evaluate
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
name|queryShape
argument_list|)
condition|)
name|expectedIds
operator|.
name|add
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//Search and verify results
name|Query
name|query
init|=
name|strategy
operator|.
name|makeQuery
argument_list|(
operator|new
name|SpatialArgs
argument_list|(
name|operation
argument_list|,
name|queryShape
argument_list|)
argument_list|)
decl_stmt|;
name|SearchResults
name|got
init|=
name|executeQuery
argument_list|(
name|query
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|remainingExpectedIds
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|expectedIds
argument_list|)
decl_stmt|;
name|String
name|msg
init|=
name|queryShape
operator|.
name|toString
argument_list|()
operator|+
literal|" Expect: "
operator|+
name|expectedIds
decl_stmt|;
for|for
control|(
name|SearchResult
name|result
range|:
name|got
operator|.
name|results
control|)
block|{
name|String
name|id
init|=
name|result
operator|.
name|getId
argument_list|()
decl_stmt|;
name|Object
name|removed
init|=
name|remainingExpectedIds
operator|.
name|remove
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|removed
operator|==
literal|null
condition|)
block|{
name|fail
argument_list|(
literal|"Shouldn't match "
operator|+
name|id
operator|+
literal|" ("
operator|+
name|indexedShapes
operator|.
name|get
argument_list|(
name|id
argument_list|)
operator|+
literal|") in "
operator|+
name|msg
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|remainingExpectedIds
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Shape
name|firstFailedMatch
init|=
name|indexedShapes
operator|.
name|get
argument_list|(
name|remainingExpectedIds
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"Didn't match "
operator|+
name|firstFailedMatch
operator|+
literal|" in "
operator|+
name|msg
operator|+
literal|" (of "
operator|+
name|remainingExpectedIds
operator|.
name|size
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|gridSnapp
specifier|protected
name|Rectangle
name|gridSnapp
parameter_list|(
name|Shape
name|snapMe
parameter_list|)
block|{
comment|//The next 4 lines mimic PrefixTreeStrategy.createIndexableFields()
name|double
name|distErrPct
init|=
operator|(
operator|(
name|PrefixTreeStrategy
operator|)
name|strategy
operator|)
operator|.
name|getDistErrPct
argument_list|()
decl_stmt|;
name|double
name|distErr
init|=
name|SpatialArgs
operator|.
name|calcDistanceFromErrPct
argument_list|(
name|snapMe
argument_list|,
name|distErrPct
argument_list|,
name|ctx
argument_list|)
decl_stmt|;
name|int
name|detailLevel
init|=
name|grid
operator|.
name|getLevelForDistance
argument_list|(
name|distErr
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Cell
argument_list|>
name|cells
init|=
name|grid
operator|.
name|getCells
argument_list|(
name|snapMe
argument_list|,
name|detailLevel
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
comment|//calc bounding box of cells.
name|double
name|minX
init|=
name|Double
operator|.
name|POSITIVE_INFINITY
decl_stmt|,
name|maxX
init|=
name|Double
operator|.
name|NEGATIVE_INFINITY
decl_stmt|;
name|double
name|minY
init|=
name|Double
operator|.
name|POSITIVE_INFINITY
decl_stmt|,
name|maxY
init|=
name|Double
operator|.
name|NEGATIVE_INFINITY
decl_stmt|;
for|for
control|(
name|Cell
name|cell
range|:
name|cells
control|)
block|{
assert|assert
name|cell
operator|.
name|getLevel
argument_list|()
operator|<=
name|detailLevel
assert|;
name|Rectangle
name|cellR
init|=
name|cell
operator|.
name|getShape
argument_list|()
operator|.
name|getBoundingBox
argument_list|()
decl_stmt|;
name|minX
operator|=
name|Math
operator|.
name|min
argument_list|(
name|minX
argument_list|,
name|cellR
operator|.
name|getMinX
argument_list|()
argument_list|)
expr_stmt|;
name|maxX
operator|=
name|Math
operator|.
name|max
argument_list|(
name|maxX
argument_list|,
name|cellR
operator|.
name|getMaxX
argument_list|()
argument_list|)
expr_stmt|;
name|minY
operator|=
name|Math
operator|.
name|min
argument_list|(
name|minY
argument_list|,
name|cellR
operator|.
name|getMinY
argument_list|()
argument_list|)
expr_stmt|;
name|maxY
operator|=
name|Math
operator|.
name|max
argument_list|(
name|maxY
argument_list|,
name|cellR
operator|.
name|getMaxY
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|ctx
operator|.
name|makeRectangle
argument_list|(
name|minX
argument_list|,
name|maxX
argument_list|,
name|minY
argument_list|,
name|maxY
argument_list|)
return|;
block|}
comment|/** An aggregate of 2 shapes. Only implements what's necessary for the test here.    * TODO replace with Spatial4j trunk ShapeCollection. */
DECL|class|ShapePair
specifier|private
class|class
name|ShapePair
implements|implements
name|Shape
block|{
DECL|field|shape1
DECL|field|shape2
name|Shape
name|shape1
decl_stmt|,
name|shape2
decl_stmt|;
DECL|method|ShapePair
specifier|public
name|ShapePair
parameter_list|(
name|Shape
name|shape1
parameter_list|,
name|Shape
name|shape2
parameter_list|)
block|{
name|this
operator|.
name|shape1
operator|=
name|shape1
expr_stmt|;
name|this
operator|.
name|shape2
operator|=
name|shape2
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|relate
specifier|public
name|SpatialRelation
name|relate
parameter_list|(
name|Shape
name|other
parameter_list|)
block|{
comment|//easy to observe is correct; not an optimal code path but this is a test
if|if
condition|(
name|shape1
operator|.
name|relate
argument_list|(
name|other
argument_list|)
operator|==
name|SpatialRelation
operator|.
name|CONTAINS
operator|||
name|shape2
operator|.
name|relate
argument_list|(
name|other
argument_list|)
operator|==
name|SpatialRelation
operator|.
name|CONTAINS
condition|)
return|return
name|SpatialRelation
operator|.
name|CONTAINS
return|;
if|if
condition|(
name|shape1
operator|.
name|relate
argument_list|(
name|other
argument_list|)
operator|==
name|SpatialRelation
operator|.
name|WITHIN
operator|&&
name|shape2
operator|.
name|relate
argument_list|(
name|other
argument_list|)
operator|==
name|SpatialRelation
operator|.
name|WITHIN
condition|)
return|return
name|SpatialRelation
operator|.
name|WITHIN
return|;
if|if
condition|(
name|shape1
operator|.
name|relate
argument_list|(
name|other
argument_list|)
operator|.
name|intersects
argument_list|()
operator|||
name|shape2
operator|.
name|relate
argument_list|(
name|other
argument_list|)
operator|.
name|intersects
argument_list|()
condition|)
return|return
name|SpatialRelation
operator|.
name|INTERSECTS
return|;
return|return
name|SpatialRelation
operator|.
name|DISJOINT
return|;
block|}
annotation|@
name|Override
DECL|method|getBoundingBox
specifier|public
name|Rectangle
name|getBoundingBox
parameter_list|()
block|{
return|return
name|ctx
operator|.
name|getWorldBounds
argument_list|()
return|;
comment|//good enough
block|}
annotation|@
name|Override
DECL|method|hasArea
specifier|public
name|boolean
name|hasArea
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|getArea
specifier|public
name|double
name|getArea
parameter_list|(
name|SpatialContext
name|ctx
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"TODO unimplemented"
argument_list|)
throw|;
comment|//TODO
block|}
annotation|@
name|Override
DECL|method|getCenter
specifier|public
name|Point
name|getCenter
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"TODO unimplemented"
argument_list|)
throw|;
comment|//TODO
block|}
block|}
block|}
end_class
end_unit
