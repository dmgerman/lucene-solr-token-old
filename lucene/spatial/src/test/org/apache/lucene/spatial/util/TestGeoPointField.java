begin_unit
begin_package
DECL|package|org.apache.lucene.spatial.util
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|util
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|geopoint
operator|.
name|document
operator|.
name|GeoPointField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRefBuilder
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|geo
operator|.
name|GeoTestUtil
operator|.
name|nextLatitude
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|geo
operator|.
name|GeoTestUtil
operator|.
name|nextLongitude
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|geopoint
operator|.
name|document
operator|.
name|GeoPointField
operator|.
name|encodeLatLon
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|geopoint
operator|.
name|document
operator|.
name|GeoPointField
operator|.
name|geoCodedToPrefixCoded
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|geopoint
operator|.
name|document
operator|.
name|GeoPointField
operator|.
name|prefixCodedToGeoCoded
import|;
end_import
begin_comment
comment|/**  * Tests encoding methods in {@link GeoPointField}  */
end_comment
begin_class
DECL|class|TestGeoPointField
specifier|public
class|class
name|TestGeoPointField
extends|extends
name|LuceneTestCase
block|{
comment|/**    * Tests stability of {@link GeoPointField#geoCodedToPrefixCoded}    */
DECL|method|testGeoPrefixCoding
specifier|public
name|void
name|testGeoPrefixCoding
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|numIters
init|=
name|atLeast
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
name|long
name|hash
decl_stmt|;
name|long
name|decodedHash
decl_stmt|;
name|BytesRefBuilder
name|brb
init|=
operator|new
name|BytesRefBuilder
argument_list|()
decl_stmt|;
while|while
condition|(
name|numIters
operator|--
operator|>=
literal|0
condition|)
block|{
name|hash
operator|=
name|encodeLatLon
argument_list|(
name|nextLatitude
argument_list|()
argument_list|,
name|nextLongitude
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|32
init|;
name|i
operator|<
literal|64
condition|;
operator|++
name|i
control|)
block|{
name|geoCodedToPrefixCoded
argument_list|(
name|hash
argument_list|,
name|i
argument_list|,
name|brb
argument_list|)
expr_stmt|;
name|decodedHash
operator|=
name|prefixCodedToGeoCoded
argument_list|(
name|brb
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|hash
operator|>>>
name|i
operator|)
operator|<<
name|i
argument_list|,
name|decodedHash
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class
end_unit
