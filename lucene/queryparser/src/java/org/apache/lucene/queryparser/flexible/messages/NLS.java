begin_unit
begin_package
DECL|package|org.apache.lucene.queryparser.flexible.messages
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryparser
operator|.
name|flexible
operator|.
name|messages
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import
begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Modifier
import|;
end_import
begin_import
import|import
name|java
operator|.
name|security
operator|.
name|AccessController
import|;
end_import
begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedAction
import|;
end_import
begin_import
import|import
name|java
operator|.
name|text
operator|.
name|MessageFormat
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|MissingResourceException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ResourceBundle
import|;
end_import
begin_comment
comment|/**  * MessageBundles classes extend this class, to implement a bundle.  *   * For Native Language Support (NLS), system of software internationalization.  *   * This interface is similar to the NLS class in eclipse.osgi.util.NLS class -  * initializeMessages() method resets the values of all static strings, should  * only be called by classes that extend from NLS (see TestMessages.java for  * reference) - performs validation of all message in a bundle, at class load  * time - performs per message validation at runtime - see NLSTest.java for  * usage reference  *   * MessageBundle classes may subclass this type.  */
end_comment
begin_class
DECL|class|NLS
specifier|public
class|class
name|NLS
block|{
DECL|field|bundles
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Class
argument_list|<
name|?
extends|extends
name|NLS
argument_list|>
argument_list|>
name|bundles
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Class
argument_list|<
name|?
extends|extends
name|NLS
argument_list|>
argument_list|>
argument_list|(
literal|0
argument_list|)
decl_stmt|;
DECL|method|NLS
specifier|protected
name|NLS
parameter_list|()
block|{
comment|// Do not instantiate
block|}
DECL|method|getLocalizedMessage
specifier|public
specifier|static
name|String
name|getLocalizedMessage
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
name|getLocalizedMessage
argument_list|(
name|key
argument_list|,
name|Locale
operator|.
name|getDefault
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getLocalizedMessage
specifier|public
specifier|static
name|String
name|getLocalizedMessage
parameter_list|(
name|String
name|key
parameter_list|,
name|Locale
name|locale
parameter_list|)
block|{
name|Object
name|message
init|=
name|getResourceBundleObject
argument_list|(
name|key
argument_list|,
name|locale
argument_list|)
decl_stmt|;
if|if
condition|(
name|message
operator|==
literal|null
condition|)
block|{
return|return
literal|"Message with key:"
operator|+
name|key
operator|+
literal|" and locale: "
operator|+
name|locale
operator|+
literal|" not found."
return|;
block|}
return|return
name|message
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|getLocalizedMessage
specifier|public
specifier|static
name|String
name|getLocalizedMessage
parameter_list|(
name|String
name|key
parameter_list|,
name|Locale
name|locale
parameter_list|,
name|Object
modifier|...
name|args
parameter_list|)
block|{
name|String
name|str
init|=
name|getLocalizedMessage
argument_list|(
name|key
argument_list|,
name|locale
argument_list|)
decl_stmt|;
if|if
condition|(
name|args
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|str
operator|=
name|MessageFormat
operator|.
name|format
argument_list|(
name|str
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
return|return
name|str
return|;
block|}
DECL|method|getLocalizedMessage
specifier|public
specifier|static
name|String
name|getLocalizedMessage
parameter_list|(
name|String
name|key
parameter_list|,
name|Object
modifier|...
name|args
parameter_list|)
block|{
return|return
name|getLocalizedMessage
argument_list|(
name|key
argument_list|,
name|Locale
operator|.
name|getDefault
argument_list|()
argument_list|,
name|args
argument_list|)
return|;
block|}
comment|/**    * Initialize a given class with the message bundle Keys Should be called from    * a class that extends NLS in a static block at class load time.    *     * @param bundleName    *          Property file with that contains the message bundle    * @param clazz    *          where constants will reside    */
DECL|method|initializeMessages
specifier|protected
specifier|static
name|void
name|initializeMessages
parameter_list|(
name|String
name|bundleName
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|NLS
argument_list|>
name|clazz
parameter_list|)
block|{
try|try
block|{
name|load
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|bundles
operator|.
name|containsKey
argument_list|(
name|bundleName
argument_list|)
condition|)
name|bundles
operator|.
name|put
argument_list|(
name|bundleName
argument_list|,
name|clazz
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
comment|// ignore all errors and exceptions
comment|// because this function is supposed to be called at class load time.
block|}
block|}
DECL|method|getResourceBundleObject
specifier|private
specifier|static
name|Object
name|getResourceBundleObject
parameter_list|(
name|String
name|messageKey
parameter_list|,
name|Locale
name|locale
parameter_list|)
block|{
comment|// slow resource checking
comment|// need to loop thru all registered resource bundles
for|for
control|(
name|Iterator
argument_list|<
name|String
argument_list|>
name|it
init|=
name|bundles
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Class
argument_list|<
name|?
extends|extends
name|NLS
argument_list|>
name|clazz
init|=
name|bundles
operator|.
name|get
argument_list|(
name|it
operator|.
name|next
argument_list|()
argument_list|)
decl_stmt|;
name|ResourceBundle
name|resourceBundle
init|=
name|ResourceBundle
operator|.
name|getBundle
argument_list|(
name|clazz
operator|.
name|getName
argument_list|()
argument_list|,
name|locale
argument_list|)
decl_stmt|;
if|if
condition|(
name|resourceBundle
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|Object
name|obj
init|=
name|resourceBundle
operator|.
name|getObject
argument_list|(
name|messageKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|obj
operator|!=
literal|null
condition|)
return|return
name|obj
return|;
block|}
catch|catch
parameter_list|(
name|MissingResourceException
name|e
parameter_list|)
block|{
comment|// just continue it might be on the next resource bundle
block|}
block|}
block|}
comment|// if resource is not found
return|return
literal|null
return|;
block|}
comment|/**    * @param clazz    */
DECL|method|load
specifier|private
specifier|static
name|void
name|load
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|NLS
argument_list|>
name|clazz
parameter_list|)
block|{
specifier|final
name|Field
index|[]
name|fieldArray
init|=
name|clazz
operator|.
name|getDeclaredFields
argument_list|()
decl_stmt|;
name|boolean
name|isFieldAccessible
init|=
operator|(
name|clazz
operator|.
name|getModifiers
argument_list|()
operator|&
name|Modifier
operator|.
name|PUBLIC
operator|)
operator|!=
literal|0
decl_stmt|;
comment|// build a map of field names to Field objects
specifier|final
name|int
name|len
init|=
name|fieldArray
operator|.
name|length
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Field
argument_list|>
name|fields
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Field
argument_list|>
argument_list|(
name|len
operator|*
literal|2
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
name|fields
operator|.
name|put
argument_list|(
name|fieldArray
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
argument_list|,
name|fieldArray
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|loadfieldValue
argument_list|(
name|fieldArray
index|[
name|i
index|]
argument_list|,
name|isFieldAccessible
argument_list|,
name|clazz
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * @param field    * @param isFieldAccessible    */
DECL|method|loadfieldValue
specifier|private
specifier|static
name|void
name|loadfieldValue
parameter_list|(
name|Field
name|field
parameter_list|,
name|boolean
name|isFieldAccessible
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|NLS
argument_list|>
name|clazz
parameter_list|)
block|{
name|int
name|MOD_EXPECTED
init|=
name|Modifier
operator|.
name|PUBLIC
operator||
name|Modifier
operator|.
name|STATIC
decl_stmt|;
name|int
name|MOD_MASK
init|=
name|MOD_EXPECTED
operator||
name|Modifier
operator|.
name|FINAL
decl_stmt|;
if|if
condition|(
operator|(
name|field
operator|.
name|getModifiers
argument_list|()
operator|&
name|MOD_MASK
operator|)
operator|!=
name|MOD_EXPECTED
condition|)
return|return;
comment|// Set a value for this empty field.
if|if
condition|(
operator|!
name|isFieldAccessible
condition|)
name|makeAccessible
argument_list|(
name|field
argument_list|)
expr_stmt|;
try|try
block|{
name|field
operator|.
name|set
argument_list|(
literal|null
argument_list|,
name|field
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|validateMessage
argument_list|(
name|field
operator|.
name|getName
argument_list|()
argument_list|,
name|clazz
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|// should not happen
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
comment|// should not happen
block|}
block|}
comment|/**    * @param key    *          - Message Key    */
DECL|method|validateMessage
specifier|private
specifier|static
name|void
name|validateMessage
parameter_list|(
name|String
name|key
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|NLS
argument_list|>
name|clazz
parameter_list|)
block|{
comment|// Test if the message is present in the resource bundle
try|try
block|{
name|ResourceBundle
name|resourceBundle
init|=
name|ResourceBundle
operator|.
name|getBundle
argument_list|(
name|clazz
operator|.
name|getName
argument_list|()
argument_list|,
name|Locale
operator|.
name|getDefault
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|resourceBundle
operator|!=
literal|null
condition|)
block|{
name|Object
name|obj
init|=
name|resourceBundle
operator|.
name|getObject
argument_list|(
name|key
argument_list|)
decl_stmt|;
comment|//if (obj == null)
comment|//  System.err.println("WARN: Message with key:" + key + " and locale: "
comment|//      + Locale.getDefault() + " not found.");
block|}
block|}
catch|catch
parameter_list|(
name|MissingResourceException
name|e
parameter_list|)
block|{
comment|//System.err.println("WARN: Message with key:" + key + " and locale: "
comment|//    + Locale.getDefault() + " not found.");
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
comment|// ignore all other errors and exceptions
comment|// since this code is just a test to see if the message is present on the
comment|// system
block|}
block|}
comment|/*    * Make a class field accessible    */
DECL|method|makeAccessible
specifier|private
specifier|static
name|void
name|makeAccessible
parameter_list|(
specifier|final
name|Field
name|field
parameter_list|)
block|{
if|if
condition|(
name|System
operator|.
name|getSecurityManager
argument_list|()
operator|==
literal|null
condition|)
block|{
name|field
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|AccessController
operator|.
name|doPrivileged
argument_list|(
operator|new
name|PrivilegedAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
specifier|public
name|Void
name|run
parameter_list|()
block|{
name|field
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class
end_unit
