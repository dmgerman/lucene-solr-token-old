begin_unit
begin_package
DECL|package|org.apache.lucene.queryparser.surround.query
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryparser
operator|.
name|surround
operator|.
name|query
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import
begin_class
DECL|class|RewriteQuery
specifier|abstract
class|class
name|RewriteQuery
parameter_list|<
name|SQ
extends|extends
name|SrndQuery
parameter_list|>
extends|extends
name|Query
block|{
DECL|field|srndQuery
specifier|protected
specifier|final
name|SQ
name|srndQuery
decl_stmt|;
DECL|field|fieldName
specifier|protected
specifier|final
name|String
name|fieldName
decl_stmt|;
DECL|field|qf
specifier|protected
specifier|final
name|BasicQueryFactory
name|qf
decl_stmt|;
DECL|method|RewriteQuery
name|RewriteQuery
parameter_list|(
name|SQ
name|srndQuery
parameter_list|,
name|String
name|fieldName
parameter_list|,
name|BasicQueryFactory
name|qf
parameter_list|)
block|{
name|this
operator|.
name|srndQuery
operator|=
name|srndQuery
expr_stmt|;
name|this
operator|.
name|fieldName
operator|=
name|fieldName
expr_stmt|;
name|this
operator|.
name|qf
operator|=
name|qf
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|rewrite
specifier|abstract
specifier|public
name|Query
name|rewrite
parameter_list|(
name|IndexReader
name|reader
parameter_list|)
throws|throws
name|IOException
function_decl|;
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|(
name|String
name|field
parameter_list|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
operator|(
name|field
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|"(unused: "
operator|+
name|field
operator|+
literal|")"
operator|)
operator|+
literal|"("
operator|+
name|fieldName
operator|+
literal|", "
operator|+
name|srndQuery
operator|.
name|toString
argument_list|()
operator|+
literal|", "
operator|+
name|qf
operator|.
name|toString
argument_list|()
operator|+
literal|")"
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|getClass
argument_list|()
operator|.
name|hashCode
argument_list|()
operator|^
name|fieldName
operator|.
name|hashCode
argument_list|()
operator|^
name|qf
operator|.
name|hashCode
argument_list|()
operator|^
name|srndQuery
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|obj
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
return|return
literal|false
return|;
name|RewriteQuery
name|other
init|=
operator|(
name|RewriteQuery
operator|)
name|obj
decl_stmt|;
return|return
name|fieldName
operator|.
name|equals
argument_list|(
name|other
operator|.
name|fieldName
argument_list|)
operator|&&
name|qf
operator|.
name|equals
argument_list|(
name|other
operator|.
name|qf
argument_list|)
operator|&&
name|srndQuery
operator|.
name|equals
argument_list|(
name|other
operator|.
name|srndQuery
argument_list|)
return|;
block|}
comment|/**     * Not supported by this query.    * @throws UnsupportedOperationException always: clone is not supported. */
annotation|@
name|Override
DECL|method|clone
specifier|public
name|RewriteQuery
name|clone
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
end_class
end_unit
