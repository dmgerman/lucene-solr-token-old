begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.queryparser.flexible.precedence
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryparser
operator|.
name|flexible
operator|.
name|precedence
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Analyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryparser
operator|.
name|flexible
operator|.
name|standard
operator|.
name|StandardQueryParser
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryparser
operator|.
name|flexible
operator|.
name|standard
operator|.
name|processors
operator|.
name|StandardQueryNodeProcessorPipeline
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryparser
operator|.
name|flexible
operator|.
name|precedence
operator|.
name|processors
operator|.
name|PrecedenceQueryNodeProcessorPipeline
import|;
end_import
begin_comment
comment|/**  *<p>  * This query parser works exactly as the standard query parser ( {@link StandardQueryParser} ),   * except that it respect the boolean precedence, so&lt;a AND b OR c AND d&gt; is parsed to&lt;(+a +b) (+c +d)&gt;  * instead of&lt;+a +b +c +d&gt;.  *</p>  *<p>  * EXPERT: This class extends {@link StandardQueryParser}, but uses {@link PrecedenceQueryNodeProcessorPipeline}  * instead of {@link StandardQueryNodeProcessorPipeline} to process the query tree.  *</p>  *   * @see StandardQueryParser  */
end_comment
begin_class
DECL|class|PrecedenceQueryParser
specifier|public
class|class
name|PrecedenceQueryParser
extends|extends
name|StandardQueryParser
block|{
comment|/**    * @see StandardQueryParser#StandardQueryParser()    */
DECL|method|PrecedenceQueryParser
specifier|public
name|PrecedenceQueryParser
parameter_list|()
block|{
name|setQueryNodeProcessor
argument_list|(
operator|new
name|PrecedenceQueryNodeProcessorPipeline
argument_list|(
name|getQueryConfigHandler
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * @see StandardQueryParser#StandardQueryParser(Analyzer)    */
DECL|method|PrecedenceQueryParser
specifier|public
name|PrecedenceQueryParser
parameter_list|(
name|Analyzer
name|analyer
parameter_list|)
block|{
name|super
argument_list|(
name|analyer
argument_list|)
expr_stmt|;
name|setQueryNodeProcessor
argument_list|(
operator|new
name|PrecedenceQueryNodeProcessorPipeline
argument_list|(
name|getQueryConfigHandler
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
