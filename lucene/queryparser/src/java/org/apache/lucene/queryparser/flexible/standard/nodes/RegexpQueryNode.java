begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.queryparser.flexible.standard.nodes
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryparser
operator|.
name|flexible
operator|.
name|standard
operator|.
name|nodes
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryparser
operator|.
name|flexible
operator|.
name|core
operator|.
name|nodes
operator|.
name|FieldableNode
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryparser
operator|.
name|flexible
operator|.
name|core
operator|.
name|nodes
operator|.
name|QueryNodeImpl
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryparser
operator|.
name|flexible
operator|.
name|core
operator|.
name|nodes
operator|.
name|TextableQueryNode
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryparser
operator|.
name|flexible
operator|.
name|core
operator|.
name|parser
operator|.
name|EscapeQuerySyntax
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|RegexpQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_comment
comment|/**  * A {@link RegexpQueryNode} represents {@link RegexpQuery} query Examples: /[a-z]|[0-9]/  */
end_comment
begin_class
DECL|class|RegexpQueryNode
specifier|public
class|class
name|RegexpQueryNode
extends|extends
name|QueryNodeImpl
implements|implements
name|TextableQueryNode
implements|,
name|FieldableNode
block|{
DECL|field|text
specifier|private
name|CharSequence
name|text
decl_stmt|;
DECL|field|field
specifier|private
name|CharSequence
name|field
decl_stmt|;
comment|/**    * @param field    *          - field name    * @param text    *          - value that contains a regular expression    * @param begin    *          - position in the query string    * @param end    *          - position in the query string    */
DECL|method|RegexpQueryNode
specifier|public
name|RegexpQueryNode
parameter_list|(
name|CharSequence
name|field
parameter_list|,
name|CharSequence
name|text
parameter_list|,
name|int
name|begin
parameter_list|,
name|int
name|end
parameter_list|)
block|{
name|this
operator|.
name|field
operator|=
name|field
expr_stmt|;
name|this
operator|.
name|text
operator|=
name|text
operator|.
name|subSequence
argument_list|(
name|begin
argument_list|,
name|end
argument_list|)
expr_stmt|;
block|}
DECL|method|textToBytesRef
specifier|public
name|BytesRef
name|textToBytesRef
parameter_list|()
block|{
return|return
operator|new
name|BytesRef
argument_list|(
name|text
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"<regexp field='"
operator|+
name|this
operator|.
name|field
operator|+
literal|"' term='"
operator|+
name|this
operator|.
name|text
operator|+
literal|"'/>"
return|;
block|}
annotation|@
name|Override
DECL|method|cloneTree
specifier|public
name|RegexpQueryNode
name|cloneTree
parameter_list|()
throws|throws
name|CloneNotSupportedException
block|{
name|RegexpQueryNode
name|clone
init|=
operator|(
name|RegexpQueryNode
operator|)
name|super
operator|.
name|cloneTree
argument_list|()
decl_stmt|;
name|clone
operator|.
name|field
operator|=
name|this
operator|.
name|field
expr_stmt|;
name|clone
operator|.
name|text
operator|=
name|this
operator|.
name|text
expr_stmt|;
return|return
name|clone
return|;
block|}
annotation|@
name|Override
DECL|method|getText
specifier|public
name|CharSequence
name|getText
parameter_list|()
block|{
return|return
name|text
return|;
block|}
annotation|@
name|Override
DECL|method|setText
specifier|public
name|void
name|setText
parameter_list|(
name|CharSequence
name|text
parameter_list|)
block|{
name|this
operator|.
name|text
operator|=
name|text
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getField
specifier|public
name|CharSequence
name|getField
parameter_list|()
block|{
return|return
name|field
return|;
block|}
DECL|method|getFieldAsString
specifier|public
name|String
name|getFieldAsString
parameter_list|()
block|{
return|return
name|field
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|setField
specifier|public
name|void
name|setField
parameter_list|(
name|CharSequence
name|field
parameter_list|)
block|{
name|this
operator|.
name|field
operator|=
name|field
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toQueryString
specifier|public
name|CharSequence
name|toQueryString
parameter_list|(
name|EscapeQuerySyntax
name|escapeSyntaxParser
parameter_list|)
block|{
return|return
name|isDefaultField
argument_list|(
name|field
argument_list|)
condition|?
literal|"/"
operator|+
name|text
operator|+
literal|"/"
else|:
name|field
operator|+
literal|":/"
operator|+
name|text
operator|+
literal|"/"
return|;
block|}
block|}
end_class
end_unit
