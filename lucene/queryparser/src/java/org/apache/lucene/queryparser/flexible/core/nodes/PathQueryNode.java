begin_unit
begin_package
DECL|package|org.apache.lucene.queryparser.flexible.core.nodes
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryparser
operator|.
name|flexible
operator|.
name|core
operator|.
name|nodes
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryparser
operator|.
name|flexible
operator|.
name|core
operator|.
name|parser
operator|.
name|EscapeQuerySyntax
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryparser
operator|.
name|flexible
operator|.
name|core
operator|.
name|parser
operator|.
name|EscapeQuerySyntax
operator|.
name|Type
import|;
end_import
begin_comment
comment|/**  * A {@link PathQueryNode} is used to store queries like  * /company/USA/California /product/shoes/brown. QueryText are objects that  * contain the text, begin position and end position in the query.  *<p>  * Example how the text parser creates these objects:  *</p>  *<pre class="prettyprint">  * List values = ArrayList();   * values.add(new PathQueryNode.QueryText("company", 1, 7));   * values.add(new PathQueryNode.QueryText("USA", 9, 12));   * values.add(new PathQueryNode.QueryText("California", 14, 23));   * QueryNode q = new PathQueryNode(values);  *</pre>  */
end_comment
begin_class
DECL|class|PathQueryNode
specifier|public
class|class
name|PathQueryNode
extends|extends
name|QueryNodeImpl
block|{
comment|/**    * Term text with a beginning and end position    */
DECL|class|QueryText
specifier|public
specifier|static
class|class
name|QueryText
implements|implements
name|Cloneable
block|{
DECL|field|value
name|CharSequence
name|value
init|=
literal|null
decl_stmt|;
comment|/**      * != null The term's begin position.      */
DECL|field|begin
name|int
name|begin
decl_stmt|;
comment|/**      * The term's end position.      */
DECL|field|end
name|int
name|end
decl_stmt|;
comment|/**      * @param value      *          - text value      * @param begin      *          - position in the query string      * @param end      *          - position in the query string      */
DECL|method|QueryText
specifier|public
name|QueryText
parameter_list|(
name|CharSequence
name|value
parameter_list|,
name|int
name|begin
parameter_list|,
name|int
name|end
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
name|this
operator|.
name|begin
operator|=
name|begin
expr_stmt|;
name|this
operator|.
name|end
operator|=
name|end
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|clone
specifier|public
name|QueryText
name|clone
parameter_list|()
throws|throws
name|CloneNotSupportedException
block|{
name|QueryText
name|clone
init|=
operator|(
name|QueryText
operator|)
name|super
operator|.
name|clone
argument_list|()
decl_stmt|;
name|clone
operator|.
name|value
operator|=
name|this
operator|.
name|value
expr_stmt|;
name|clone
operator|.
name|begin
operator|=
name|this
operator|.
name|begin
expr_stmt|;
name|clone
operator|.
name|end
operator|=
name|this
operator|.
name|end
expr_stmt|;
return|return
name|clone
return|;
block|}
comment|/**      * @return the value      */
DECL|method|getValue
specifier|public
name|CharSequence
name|getValue
parameter_list|()
block|{
return|return
name|value
return|;
block|}
comment|/**      * @return the begin      */
DECL|method|getBegin
specifier|public
name|int
name|getBegin
parameter_list|()
block|{
return|return
name|begin
return|;
block|}
comment|/**      * @return the end      */
DECL|method|getEnd
specifier|public
name|int
name|getEnd
parameter_list|()
block|{
return|return
name|end
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|value
operator|+
literal|", "
operator|+
name|begin
operator|+
literal|", "
operator|+
name|end
return|;
block|}
block|}
DECL|field|values
specifier|private
name|List
argument_list|<
name|QueryText
argument_list|>
name|values
init|=
literal|null
decl_stmt|;
comment|/**    * @param pathElements    *          - List of QueryText objects    */
DECL|method|PathQueryNode
specifier|public
name|PathQueryNode
parameter_list|(
name|List
argument_list|<
name|QueryText
argument_list|>
name|pathElements
parameter_list|)
block|{
name|this
operator|.
name|values
operator|=
name|pathElements
expr_stmt|;
if|if
condition|(
name|pathElements
operator|.
name|size
argument_list|()
operator|<=
literal|1
condition|)
block|{
comment|// this should not happen
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"PathQuerynode requires more 2 or more path elements."
argument_list|)
throw|;
block|}
block|}
comment|/**    * Returns the a List with all QueryText elements    *     * @return QueryText List size    */
DECL|method|getPathElements
specifier|public
name|List
argument_list|<
name|QueryText
argument_list|>
name|getPathElements
parameter_list|()
block|{
return|return
name|values
return|;
block|}
comment|/**    * Returns the a List with all QueryText elements    */
DECL|method|setPathElements
specifier|public
name|void
name|setPathElements
parameter_list|(
name|List
argument_list|<
name|QueryText
argument_list|>
name|elements
parameter_list|)
block|{
name|this
operator|.
name|values
operator|=
name|elements
expr_stmt|;
block|}
comment|/**    * Returns the a specific QueryText element    *     * @return QueryText List size    */
DECL|method|getPathElement
specifier|public
name|QueryText
name|getPathElement
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|values
operator|.
name|get
argument_list|(
name|index
argument_list|)
return|;
block|}
comment|/**    * Returns the CharSequence value of a specific QueryText element    *     * @return the CharSequence for a specific QueryText element    */
DECL|method|getFirstPathElement
specifier|public
name|CharSequence
name|getFirstPathElement
parameter_list|()
block|{
return|return
name|values
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|value
return|;
block|}
comment|/**    * Returns a List QueryText element from position startIndex    *     * @return a List QueryText element from position startIndex    */
DECL|method|getPathElements
specifier|public
name|List
argument_list|<
name|QueryText
argument_list|>
name|getPathElements
parameter_list|(
name|int
name|startIndex
parameter_list|)
block|{
name|List
argument_list|<
name|PathQueryNode
operator|.
name|QueryText
argument_list|>
name|rValues
init|=
operator|new
name|ArrayList
argument_list|<
name|PathQueryNode
operator|.
name|QueryText
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|startIndex
init|;
name|i
operator|<
name|this
operator|.
name|values
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|rValues
operator|.
name|add
argument_list|(
name|this
operator|.
name|values
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|clone
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CloneNotSupportedException
name|e
parameter_list|)
block|{
comment|// this will not happen
block|}
block|}
return|return
name|rValues
return|;
block|}
DECL|method|getPathString
specifier|private
name|CharSequence
name|getPathString
parameter_list|()
block|{
name|StringBuilder
name|path
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|QueryText
name|pathelement
range|:
name|values
control|)
block|{
name|path
operator|.
name|append
argument_list|(
literal|"/"
argument_list|)
operator|.
name|append
argument_list|(
name|pathelement
operator|.
name|value
argument_list|)
expr_stmt|;
block|}
return|return
name|path
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|toQueryString
specifier|public
name|CharSequence
name|toQueryString
parameter_list|(
name|EscapeQuerySyntax
name|escaper
parameter_list|)
block|{
name|StringBuilder
name|path
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|path
operator|.
name|append
argument_list|(
literal|"/"
argument_list|)
operator|.
name|append
argument_list|(
name|getFirstPathElement
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|QueryText
name|pathelement
range|:
name|getPathElements
argument_list|(
literal|1
argument_list|)
control|)
block|{
name|CharSequence
name|value
init|=
name|escaper
operator|.
name|escape
argument_list|(
name|pathelement
operator|.
name|value
argument_list|,
name|Locale
operator|.
name|getDefault
argument_list|()
argument_list|,
name|Type
operator|.
name|STRING
argument_list|)
decl_stmt|;
name|path
operator|.
name|append
argument_list|(
literal|"/\""
argument_list|)
operator|.
name|append
argument_list|(
name|value
argument_list|)
operator|.
name|append
argument_list|(
literal|"\""
argument_list|)
expr_stmt|;
block|}
return|return
name|path
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|QueryText
name|text
init|=
name|this
operator|.
name|values
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
return|return
literal|"<path start='"
operator|+
name|text
operator|.
name|begin
operator|+
literal|"' end='"
operator|+
name|text
operator|.
name|end
operator|+
literal|"' path='"
operator|+
name|getPathString
argument_list|()
operator|+
literal|"'/>"
return|;
block|}
annotation|@
name|Override
DECL|method|cloneTree
specifier|public
name|QueryNode
name|cloneTree
parameter_list|()
throws|throws
name|CloneNotSupportedException
block|{
name|PathQueryNode
name|clone
init|=
operator|(
name|PathQueryNode
operator|)
name|super
operator|.
name|cloneTree
argument_list|()
decl_stmt|;
comment|// copy children
if|if
condition|(
name|this
operator|.
name|values
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|QueryText
argument_list|>
name|localValues
init|=
operator|new
name|ArrayList
argument_list|<
name|QueryText
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|QueryText
name|value
range|:
name|this
operator|.
name|values
control|)
block|{
name|localValues
operator|.
name|add
argument_list|(
name|value
operator|.
name|clone
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|clone
operator|.
name|values
operator|=
name|localValues
expr_stmt|;
block|}
return|return
name|clone
return|;
block|}
block|}
end_class
end_unit
