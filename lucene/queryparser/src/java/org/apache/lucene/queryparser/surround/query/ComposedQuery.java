begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.queryparser.surround.query
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryparser
operator|.
name|surround
operator|.
name|query
package|;
end_package
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import
begin_comment
comment|/** Base class for composite queries (such as AND/OR/NOT) */
end_comment
begin_class
DECL|class|ComposedQuery
specifier|public
specifier|abstract
class|class
name|ComposedQuery
extends|extends
name|SrndQuery
block|{
DECL|method|ComposedQuery
specifier|public
name|ComposedQuery
parameter_list|(
name|List
argument_list|<
name|SrndQuery
argument_list|>
name|qs
parameter_list|,
name|boolean
name|operatorInfix
parameter_list|,
name|String
name|opName
parameter_list|)
block|{
name|recompose
argument_list|(
name|qs
argument_list|)
expr_stmt|;
name|this
operator|.
name|operatorInfix
operator|=
name|operatorInfix
expr_stmt|;
name|this
operator|.
name|opName
operator|=
name|opName
expr_stmt|;
block|}
DECL|method|recompose
specifier|protected
name|void
name|recompose
parameter_list|(
name|List
argument_list|<
name|SrndQuery
argument_list|>
name|queries
parameter_list|)
block|{
if|if
condition|(
name|queries
operator|.
name|size
argument_list|()
operator|<
literal|2
condition|)
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Too few subqueries"
argument_list|)
throw|;
name|this
operator|.
name|queries
operator|=
name|queries
expr_stmt|;
block|}
DECL|field|opName
specifier|protected
name|String
name|opName
decl_stmt|;
DECL|method|getOperatorName
specifier|public
name|String
name|getOperatorName
parameter_list|()
block|{
return|return
name|opName
return|;
block|}
DECL|field|queries
specifier|protected
name|List
argument_list|<
name|SrndQuery
argument_list|>
name|queries
decl_stmt|;
DECL|method|getSubQueriesIterator
specifier|public
name|Iterator
argument_list|<
name|SrndQuery
argument_list|>
name|getSubQueriesIterator
parameter_list|()
block|{
return|return
name|queries
operator|.
name|listIterator
argument_list|()
return|;
block|}
DECL|method|getNrSubQueries
specifier|public
name|int
name|getNrSubQueries
parameter_list|()
block|{
return|return
name|queries
operator|.
name|size
argument_list|()
return|;
block|}
DECL|method|getSubQuery
specifier|public
name|SrndQuery
name|getSubQuery
parameter_list|(
name|int
name|qn
parameter_list|)
block|{
return|return
name|queries
operator|.
name|get
argument_list|(
name|qn
argument_list|)
return|;
block|}
DECL|field|operatorInfix
specifier|private
name|boolean
name|operatorInfix
decl_stmt|;
DECL|method|isOperatorInfix
specifier|public
name|boolean
name|isOperatorInfix
parameter_list|()
block|{
return|return
name|operatorInfix
return|;
block|}
comment|/* else prefix operator */
DECL|method|makeLuceneSubQueriesField
specifier|public
name|List
argument_list|<
name|Query
argument_list|>
name|makeLuceneSubQueriesField
parameter_list|(
name|String
name|fn
parameter_list|,
name|BasicQueryFactory
name|qf
parameter_list|)
block|{
name|List
argument_list|<
name|Query
argument_list|>
name|luceneSubQueries
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|SrndQuery
argument_list|>
name|sqi
init|=
name|getSubQueriesIterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|sqi
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|luceneSubQueries
operator|.
name|add
argument_list|(
operator|(
name|sqi
operator|.
name|next
argument_list|()
operator|)
operator|.
name|makeLuceneQueryField
argument_list|(
name|fn
argument_list|,
name|qf
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|luceneSubQueries
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|r
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|isOperatorInfix
argument_list|()
condition|)
block|{
name|infixToString
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|prefixToString
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
name|weightToString
argument_list|(
name|r
argument_list|)
expr_stmt|;
return|return
name|r
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/* Override for different spacing */
DECL|method|getPrefixSeparator
specifier|protected
name|String
name|getPrefixSeparator
parameter_list|()
block|{
return|return
literal|", "
return|;
block|}
DECL|method|getBracketOpen
specifier|protected
name|String
name|getBracketOpen
parameter_list|()
block|{
return|return
literal|"("
return|;
block|}
DECL|method|getBracketClose
specifier|protected
name|String
name|getBracketClose
parameter_list|()
block|{
return|return
literal|")"
return|;
block|}
DECL|method|infixToString
specifier|protected
name|void
name|infixToString
parameter_list|(
name|StringBuilder
name|r
parameter_list|)
block|{
comment|/* Brackets are possibly redundant in the result. */
name|Iterator
argument_list|<
name|SrndQuery
argument_list|>
name|sqi
init|=
name|getSubQueriesIterator
argument_list|()
decl_stmt|;
name|r
operator|.
name|append
argument_list|(
name|getBracketOpen
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|sqi
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|r
operator|.
name|append
argument_list|(
name|sqi
operator|.
name|next
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
while|while
condition|(
name|sqi
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|r
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
name|r
operator|.
name|append
argument_list|(
name|getOperatorName
argument_list|()
argument_list|)
expr_stmt|;
comment|/* infix operator */
name|r
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
name|r
operator|.
name|append
argument_list|(
name|sqi
operator|.
name|next
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|r
operator|.
name|append
argument_list|(
name|getBracketClose
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|prefixToString
specifier|protected
name|void
name|prefixToString
parameter_list|(
name|StringBuilder
name|r
parameter_list|)
block|{
name|Iterator
argument_list|<
name|SrndQuery
argument_list|>
name|sqi
init|=
name|getSubQueriesIterator
argument_list|()
decl_stmt|;
name|r
operator|.
name|append
argument_list|(
name|getOperatorName
argument_list|()
argument_list|)
expr_stmt|;
comment|/* prefix operator */
name|r
operator|.
name|append
argument_list|(
name|getBracketOpen
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|sqi
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|r
operator|.
name|append
argument_list|(
name|sqi
operator|.
name|next
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
while|while
condition|(
name|sqi
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|r
operator|.
name|append
argument_list|(
name|getPrefixSeparator
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|append
argument_list|(
name|sqi
operator|.
name|next
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|r
operator|.
name|append
argument_list|(
name|getBracketClose
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|isFieldsSubQueryAcceptable
specifier|public
name|boolean
name|isFieldsSubQueryAcceptable
parameter_list|()
block|{
comment|/* at least one subquery should be acceptable */
name|Iterator
argument_list|<
name|SrndQuery
argument_list|>
name|sqi
init|=
name|getSubQueriesIterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|sqi
operator|.
name|hasNext
argument_list|()
condition|)
block|{
if|if
condition|(
operator|(
name|sqi
operator|.
name|next
argument_list|()
operator|)
operator|.
name|isFieldsSubQueryAcceptable
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
block|}
end_class
end_unit
