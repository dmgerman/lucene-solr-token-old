begin_unit
begin_comment
comment|/* Generated By:JavaCC: Do not edit this line. QueryParser.java */
end_comment
begin_package
DECL|package|org.apache.lucene.queryparser.surround.parser
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryparser
operator|.
name|surround
operator|.
name|parser
package|;
end_package
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryparser
operator|.
name|surround
operator|.
name|query
operator|.
name|SrndQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryparser
operator|.
name|surround
operator|.
name|query
operator|.
name|FieldsQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryparser
operator|.
name|surround
operator|.
name|query
operator|.
name|OrQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryparser
operator|.
name|surround
operator|.
name|query
operator|.
name|AndQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryparser
operator|.
name|surround
operator|.
name|query
operator|.
name|NotQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryparser
operator|.
name|surround
operator|.
name|query
operator|.
name|DistanceQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryparser
operator|.
name|surround
operator|.
name|query
operator|.
name|SrndTermQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryparser
operator|.
name|surround
operator|.
name|query
operator|.
name|SrndPrefixQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryparser
operator|.
name|surround
operator|.
name|query
operator|.
name|SrndTruncQuery
import|;
end_import
begin_comment
comment|/**  * This class is generated by JavaCC.  The only method that clients should need  * to call is {@link #parse parse()}.  *   *<p>This parser generates queries that make use of position information  *   (Span queries). It provides positional operators (<code>w</code> and  *<code>n</code>) that accept a numeric distance, as well as boolean  *   operators (<code>and</code>,<code>or</code>, and<code>not</code>,  *   wildcards (<code>*</code> and<code>?</code>), quoting (with  *<code>"</code>), and boosting (via<code>^</code>).</p>   *<p>The operators (W, N, AND, OR, NOT) can be expressed lower-cased or  *   upper-cased, and the non-unary operators (everything but NOT) support  *   both infix<code>(a AND b AND c)</code> and prefix<code>AND(a, b,  *   c)</code> notation.</p>    *<p>The W and N operators express a positional relationship among their  *  operands.  N is ordered, and W is unordered.  The distance is 1 by  *  default, meaning the operands are adjacent, or may be provided as a  *  prefix from 2-99.  So, for example, 3W(a, b) means that terms a and b  *  must appear within three positions of each other, or in other words, up  *  to two terms may appear between a and b.</p>  */
end_comment
begin_class
DECL|class|QueryParser
specifier|public
class|class
name|QueryParser
implements|implements
name|QueryParserConstants
block|{
DECL|field|minimumPrefixLength
specifier|final
name|int
name|minimumPrefixLength
init|=
literal|3
decl_stmt|;
DECL|field|minimumCharsInTrunc
specifier|final
name|int
name|minimumCharsInTrunc
init|=
literal|3
decl_stmt|;
DECL|field|truncationErrorMessage
specifier|final
name|String
name|truncationErrorMessage
init|=
literal|"Too unrestrictive truncation: "
decl_stmt|;
DECL|field|boostErrorMessage
specifier|final
name|String
name|boostErrorMessage
init|=
literal|"Cannot handle boost value: "
decl_stmt|;
comment|/* CHECKME: These should be the same as for the tokenizer. How? */
DECL|field|truncator
specifier|final
name|char
name|truncator
init|=
literal|'*'
decl_stmt|;
DECL|field|anyChar
specifier|final
name|char
name|anyChar
init|=
literal|'?'
decl_stmt|;
DECL|field|quote
specifier|final
name|char
name|quote
init|=
literal|'"'
decl_stmt|;
DECL|field|fieldOperator
specifier|final
name|char
name|fieldOperator
init|=
literal|':'
decl_stmt|;
DECL|field|comma
specifier|final
name|char
name|comma
init|=
literal|','
decl_stmt|;
comment|/* prefix list separator */
DECL|field|carat
specifier|final
name|char
name|carat
init|=
literal|'^'
decl_stmt|;
comment|/* weight operator */
DECL|method|parse
specifier|static
specifier|public
name|SrndQuery
name|parse
parameter_list|(
name|String
name|query
parameter_list|)
throws|throws
name|ParseException
block|{
name|QueryParser
name|parser
init|=
operator|new
name|QueryParser
argument_list|()
decl_stmt|;
return|return
name|parser
operator|.
name|parse2
argument_list|(
name|query
argument_list|)
return|;
block|}
DECL|method|QueryParser
specifier|public
name|QueryParser
parameter_list|()
block|{
name|this
argument_list|(
operator|new
name|FastCharStream
argument_list|(
operator|new
name|StringReader
argument_list|(
literal|""
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|parse2
specifier|public
name|SrndQuery
name|parse2
parameter_list|(
name|String
name|query
parameter_list|)
throws|throws
name|ParseException
block|{
name|ReInit
argument_list|(
operator|new
name|FastCharStream
argument_list|(
operator|new
name|StringReader
argument_list|(
name|query
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
return|return
name|TopSrndQuery
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|TokenMgrError
name|tme
parameter_list|)
block|{
throw|throw
operator|new
name|ParseException
argument_list|(
name|tme
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
DECL|method|getFieldsQuery
specifier|protected
name|SrndQuery
name|getFieldsQuery
parameter_list|(
name|SrndQuery
name|q
parameter_list|,
name|ArrayList
argument_list|<
name|String
argument_list|>
name|fieldNames
parameter_list|)
block|{
comment|/* FIXME: check acceptable subquery: at least one subquery should not be      * a fields query.      */
return|return
operator|new
name|FieldsQuery
argument_list|(
name|q
argument_list|,
name|fieldNames
argument_list|,
name|fieldOperator
argument_list|)
return|;
block|}
DECL|method|getOrQuery
specifier|protected
name|SrndQuery
name|getOrQuery
parameter_list|(
name|List
argument_list|<
name|SrndQuery
argument_list|>
name|queries
parameter_list|,
name|boolean
name|infix
parameter_list|,
name|Token
name|orToken
parameter_list|)
block|{
return|return
operator|new
name|OrQuery
argument_list|(
name|queries
argument_list|,
name|infix
argument_list|,
name|orToken
operator|.
name|image
argument_list|)
return|;
block|}
DECL|method|getAndQuery
specifier|protected
name|SrndQuery
name|getAndQuery
parameter_list|(
name|List
argument_list|<
name|SrndQuery
argument_list|>
name|queries
parameter_list|,
name|boolean
name|infix
parameter_list|,
name|Token
name|andToken
parameter_list|)
block|{
return|return
operator|new
name|AndQuery
argument_list|(
name|queries
argument_list|,
name|infix
argument_list|,
name|andToken
operator|.
name|image
argument_list|)
return|;
block|}
DECL|method|getNotQuery
specifier|protected
name|SrndQuery
name|getNotQuery
parameter_list|(
name|List
argument_list|<
name|SrndQuery
argument_list|>
name|queries
parameter_list|,
name|Token
name|notToken
parameter_list|)
block|{
return|return
operator|new
name|NotQuery
argument_list|(
name|queries
argument_list|,
name|notToken
operator|.
name|image
argument_list|)
return|;
block|}
DECL|method|getOpDistance
specifier|protected
specifier|static
name|int
name|getOpDistance
parameter_list|(
name|String
name|distanceOp
parameter_list|)
block|{
comment|/* W, 2W, 3W etc -> 1, 2 3, etc. Same for N, 2N ... */
return|return
name|distanceOp
operator|.
name|length
argument_list|()
operator|==
literal|1
condition|?
literal|1
else|:
name|Integer
operator|.
name|parseInt
argument_list|(
name|distanceOp
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|distanceOp
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
return|;
block|}
DECL|method|checkDistanceSubQueries
specifier|protected
specifier|static
name|void
name|checkDistanceSubQueries
parameter_list|(
name|DistanceQuery
name|distq
parameter_list|,
name|String
name|opName
parameter_list|)
throws|throws
name|ParseException
block|{
name|String
name|m
init|=
name|distq
operator|.
name|distanceSubQueryNotAllowed
argument_list|()
decl_stmt|;
if|if
condition|(
name|m
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|ParseException
argument_list|(
literal|"Operator "
operator|+
name|opName
operator|+
literal|": "
operator|+
name|m
argument_list|)
throw|;
block|}
block|}
DECL|method|getDistanceQuery
specifier|protected
name|SrndQuery
name|getDistanceQuery
parameter_list|(
name|List
argument_list|<
name|SrndQuery
argument_list|>
name|queries
parameter_list|,
name|boolean
name|infix
parameter_list|,
name|Token
name|dToken
parameter_list|,
name|boolean
name|ordered
parameter_list|)
throws|throws
name|ParseException
block|{
name|DistanceQuery
name|dq
init|=
operator|new
name|DistanceQuery
argument_list|(
name|queries
argument_list|,
name|infix
argument_list|,
name|getOpDistance
argument_list|(
name|dToken
operator|.
name|image
argument_list|)
argument_list|,
name|dToken
operator|.
name|image
argument_list|,
name|ordered
argument_list|)
decl_stmt|;
name|checkDistanceSubQueries
argument_list|(
name|dq
argument_list|,
name|dToken
operator|.
name|image
argument_list|)
expr_stmt|;
return|return
name|dq
return|;
block|}
DECL|method|getTermQuery
specifier|protected
name|SrndQuery
name|getTermQuery
parameter_list|(
name|String
name|term
parameter_list|,
name|boolean
name|quoted
parameter_list|)
block|{
return|return
operator|new
name|SrndTermQuery
argument_list|(
name|term
argument_list|,
name|quoted
argument_list|)
return|;
block|}
DECL|method|allowedSuffix
specifier|protected
name|boolean
name|allowedSuffix
parameter_list|(
name|String
name|suffixed
parameter_list|)
block|{
return|return
operator|(
name|suffixed
operator|.
name|length
argument_list|()
operator|-
literal|1
operator|)
operator|>=
name|minimumPrefixLength
return|;
block|}
DECL|method|getPrefixQuery
specifier|protected
name|SrndQuery
name|getPrefixQuery
parameter_list|(
name|String
name|prefix
parameter_list|,
name|boolean
name|quoted
parameter_list|)
block|{
return|return
operator|new
name|SrndPrefixQuery
argument_list|(
name|prefix
argument_list|,
name|quoted
argument_list|,
name|truncator
argument_list|)
return|;
block|}
DECL|method|allowedTruncation
specifier|protected
name|boolean
name|allowedTruncation
parameter_list|(
name|String
name|truncated
parameter_list|)
block|{
comment|/* At least 3 normal characters needed. */
name|int
name|nrNormalChars
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|truncated
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|char
name|c
init|=
name|truncated
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|c
operator|!=
name|truncator
operator|)
operator|&&
operator|(
name|c
operator|!=
name|anyChar
operator|)
condition|)
block|{
name|nrNormalChars
operator|++
expr_stmt|;
block|}
block|}
return|return
name|nrNormalChars
operator|>=
name|minimumCharsInTrunc
return|;
block|}
DECL|method|getTruncQuery
specifier|protected
name|SrndQuery
name|getTruncQuery
parameter_list|(
name|String
name|truncated
parameter_list|)
block|{
return|return
operator|new
name|SrndTruncQuery
argument_list|(
name|truncated
argument_list|,
name|truncator
argument_list|,
name|anyChar
argument_list|)
return|;
block|}
DECL|method|TopSrndQuery
specifier|final
specifier|public
name|SrndQuery
name|TopSrndQuery
parameter_list|()
throws|throws
name|ParseException
block|{
name|SrndQuery
name|q
decl_stmt|;
name|q
operator|=
name|FieldsQuery
argument_list|()
expr_stmt|;
name|jj_consume_token
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|q
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
DECL|method|FieldsQuery
specifier|final
specifier|public
name|SrndQuery
name|FieldsQuery
parameter_list|()
throws|throws
name|ParseException
block|{
name|SrndQuery
name|q
decl_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|fieldNames
decl_stmt|;
name|fieldNames
operator|=
name|OptionalFields
argument_list|()
expr_stmt|;
name|q
operator|=
name|OrQuery
argument_list|()
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
operator|(
name|fieldNames
operator|==
literal|null
operator|)
condition|?
name|q
else|:
name|getFieldsQuery
argument_list|(
name|q
argument_list|,
name|fieldNames
argument_list|)
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
DECL|method|OptionalFields
specifier|final
specifier|public
name|ArrayList
argument_list|<
name|String
argument_list|>
name|OptionalFields
parameter_list|()
throws|throws
name|ParseException
block|{
name|Token
name|fieldName
decl_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|fieldNames
init|=
literal|null
decl_stmt|;
name|label_1
label|:
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
name|jj_2_1
argument_list|(
literal|2
argument_list|)
condition|)
block|{
empty_stmt|;
block|}
else|else
block|{
break|break
name|label_1
break|;
block|}
comment|// to the colon
name|fieldName
operator|=
name|jj_consume_token
argument_list|(
name|TERM
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|COLON
argument_list|)
expr_stmt|;
if|if
condition|(
name|fieldNames
operator|==
literal|null
condition|)
block|{
name|fieldNames
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|fieldNames
operator|.
name|add
argument_list|(
name|fieldName
operator|.
name|image
argument_list|)
expr_stmt|;
block|}
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|fieldNames
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
DECL|method|OrQuery
specifier|final
specifier|public
name|SrndQuery
name|OrQuery
parameter_list|()
throws|throws
name|ParseException
block|{
name|SrndQuery
name|q
decl_stmt|;
name|ArrayList
argument_list|<
name|SrndQuery
argument_list|>
name|queries
init|=
literal|null
decl_stmt|;
name|Token
name|oprt
init|=
literal|null
decl_stmt|;
name|q
operator|=
name|AndQuery
argument_list|()
expr_stmt|;
name|label_2
label|:
while|while
condition|(
literal|true
condition|)
block|{
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|OR
case|:
empty_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|0
index|]
operator|=
name|jj_gen
expr_stmt|;
break|break
name|label_2
break|;
block|}
name|oprt
operator|=
name|jj_consume_token
argument_list|(
name|OR
argument_list|)
expr_stmt|;
comment|/* keep only last used operator */
if|if
condition|(
name|queries
operator|==
literal|null
condition|)
block|{
name|queries
operator|=
operator|new
name|ArrayList
argument_list|<
name|SrndQuery
argument_list|>
argument_list|()
expr_stmt|;
name|queries
operator|.
name|add
argument_list|(
name|q
argument_list|)
expr_stmt|;
block|}
name|q
operator|=
name|AndQuery
argument_list|()
expr_stmt|;
name|queries
operator|.
name|add
argument_list|(
name|q
argument_list|)
expr_stmt|;
block|}
block|{
if|if
condition|(
literal|true
condition|)
return|return
operator|(
name|queries
operator|==
literal|null
operator|)
condition|?
name|q
else|:
name|getOrQuery
argument_list|(
name|queries
argument_list|,
literal|true
comment|/* infix */
argument_list|,
name|oprt
argument_list|)
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
DECL|method|AndQuery
specifier|final
specifier|public
name|SrndQuery
name|AndQuery
parameter_list|()
throws|throws
name|ParseException
block|{
name|SrndQuery
name|q
decl_stmt|;
name|ArrayList
argument_list|<
name|SrndQuery
argument_list|>
name|queries
init|=
literal|null
decl_stmt|;
name|Token
name|oprt
init|=
literal|null
decl_stmt|;
name|q
operator|=
name|NotQuery
argument_list|()
expr_stmt|;
name|label_3
label|:
while|while
condition|(
literal|true
condition|)
block|{
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|AND
case|:
empty_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|1
index|]
operator|=
name|jj_gen
expr_stmt|;
break|break
name|label_3
break|;
block|}
name|oprt
operator|=
name|jj_consume_token
argument_list|(
name|AND
argument_list|)
expr_stmt|;
comment|/* keep only last used operator */
if|if
condition|(
name|queries
operator|==
literal|null
condition|)
block|{
name|queries
operator|=
operator|new
name|ArrayList
argument_list|<
name|SrndQuery
argument_list|>
argument_list|()
expr_stmt|;
name|queries
operator|.
name|add
argument_list|(
name|q
argument_list|)
expr_stmt|;
block|}
name|q
operator|=
name|NotQuery
argument_list|()
expr_stmt|;
name|queries
operator|.
name|add
argument_list|(
name|q
argument_list|)
expr_stmt|;
block|}
block|{
if|if
condition|(
literal|true
condition|)
return|return
operator|(
name|queries
operator|==
literal|null
operator|)
condition|?
name|q
else|:
name|getAndQuery
argument_list|(
name|queries
argument_list|,
literal|true
comment|/* infix */
argument_list|,
name|oprt
argument_list|)
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
DECL|method|NotQuery
specifier|final
specifier|public
name|SrndQuery
name|NotQuery
parameter_list|()
throws|throws
name|ParseException
block|{
name|SrndQuery
name|q
decl_stmt|;
name|ArrayList
argument_list|<
name|SrndQuery
argument_list|>
name|queries
init|=
literal|null
decl_stmt|;
name|Token
name|oprt
init|=
literal|null
decl_stmt|;
name|q
operator|=
name|NQuery
argument_list|()
expr_stmt|;
name|label_4
label|:
while|while
condition|(
literal|true
condition|)
block|{
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|NOT
case|:
empty_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|2
index|]
operator|=
name|jj_gen
expr_stmt|;
break|break
name|label_4
break|;
block|}
name|oprt
operator|=
name|jj_consume_token
argument_list|(
name|NOT
argument_list|)
expr_stmt|;
comment|/* keep only last used operator */
if|if
condition|(
name|queries
operator|==
literal|null
condition|)
block|{
name|queries
operator|=
operator|new
name|ArrayList
argument_list|<
name|SrndQuery
argument_list|>
argument_list|()
expr_stmt|;
name|queries
operator|.
name|add
argument_list|(
name|q
argument_list|)
expr_stmt|;
block|}
name|q
operator|=
name|NQuery
argument_list|()
expr_stmt|;
name|queries
operator|.
name|add
argument_list|(
name|q
argument_list|)
expr_stmt|;
block|}
block|{
if|if
condition|(
literal|true
condition|)
return|return
operator|(
name|queries
operator|==
literal|null
operator|)
condition|?
name|q
else|:
name|getNotQuery
argument_list|(
name|queries
argument_list|,
name|oprt
argument_list|)
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
DECL|method|NQuery
specifier|final
specifier|public
name|SrndQuery
name|NQuery
parameter_list|()
throws|throws
name|ParseException
block|{
name|SrndQuery
name|q
decl_stmt|;
name|ArrayList
argument_list|<
name|SrndQuery
argument_list|>
name|queries
decl_stmt|;
name|Token
name|dt
decl_stmt|;
name|q
operator|=
name|WQuery
argument_list|()
expr_stmt|;
name|label_5
label|:
while|while
condition|(
literal|true
condition|)
block|{
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|N
case|:
empty_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|3
index|]
operator|=
name|jj_gen
expr_stmt|;
break|break
name|label_5
break|;
block|}
name|dt
operator|=
name|jj_consume_token
argument_list|(
name|N
argument_list|)
expr_stmt|;
name|queries
operator|=
operator|new
name|ArrayList
argument_list|<
name|SrndQuery
argument_list|>
argument_list|()
expr_stmt|;
name|queries
operator|.
name|add
argument_list|(
name|q
argument_list|)
expr_stmt|;
comment|/* left associative */
name|q
operator|=
name|WQuery
argument_list|()
expr_stmt|;
name|queries
operator|.
name|add
argument_list|(
name|q
argument_list|)
expr_stmt|;
name|q
operator|=
name|getDistanceQuery
argument_list|(
name|queries
argument_list|,
literal|true
comment|/* infix */
argument_list|,
name|dt
argument_list|,
literal|false
comment|/* not ordered */
argument_list|)
expr_stmt|;
block|}
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|q
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
DECL|method|WQuery
specifier|final
specifier|public
name|SrndQuery
name|WQuery
parameter_list|()
throws|throws
name|ParseException
block|{
name|SrndQuery
name|q
decl_stmt|;
name|ArrayList
argument_list|<
name|SrndQuery
argument_list|>
name|queries
decl_stmt|;
name|Token
name|wt
decl_stmt|;
name|q
operator|=
name|PrimaryQuery
argument_list|()
expr_stmt|;
name|label_6
label|:
while|while
condition|(
literal|true
condition|)
block|{
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|W
case|:
empty_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|4
index|]
operator|=
name|jj_gen
expr_stmt|;
break|break
name|label_6
break|;
block|}
name|wt
operator|=
name|jj_consume_token
argument_list|(
name|W
argument_list|)
expr_stmt|;
name|queries
operator|=
operator|new
name|ArrayList
argument_list|<
name|SrndQuery
argument_list|>
argument_list|()
expr_stmt|;
name|queries
operator|.
name|add
argument_list|(
name|q
argument_list|)
expr_stmt|;
comment|/* left associative */
name|q
operator|=
name|PrimaryQuery
argument_list|()
expr_stmt|;
name|queries
operator|.
name|add
argument_list|(
name|q
argument_list|)
expr_stmt|;
name|q
operator|=
name|getDistanceQuery
argument_list|(
name|queries
argument_list|,
literal|true
comment|/* infix */
argument_list|,
name|wt
argument_list|,
literal|true
comment|/* ordered */
argument_list|)
expr_stmt|;
block|}
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|q
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
DECL|method|PrimaryQuery
specifier|final
specifier|public
name|SrndQuery
name|PrimaryQuery
parameter_list|()
throws|throws
name|ParseException
block|{
comment|/* bracketed weighted query or weighted term */
name|SrndQuery
name|q
decl_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|LPAREN
case|:
name|jj_consume_token
argument_list|(
name|LPAREN
argument_list|)
expr_stmt|;
name|q
operator|=
name|FieldsQuery
argument_list|()
expr_stmt|;
name|jj_consume_token
argument_list|(
name|RPAREN
argument_list|)
expr_stmt|;
break|break;
case|case
name|OR
case|:
case|case
name|AND
case|:
case|case
name|W
case|:
case|case
name|N
case|:
name|q
operator|=
name|PrefixOperatorQuery
argument_list|()
expr_stmt|;
break|break;
case|case
name|TRUNCQUOTED
case|:
case|case
name|QUOTED
case|:
case|case
name|SUFFIXTERM
case|:
case|case
name|TRUNCTERM
case|:
case|case
name|TERM
case|:
name|q
operator|=
name|SimpleTerm
argument_list|()
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|5
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
name|OptionalWeights
argument_list|(
name|q
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|q
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
DECL|method|PrefixOperatorQuery
specifier|final
specifier|public
name|SrndQuery
name|PrefixOperatorQuery
parameter_list|()
throws|throws
name|ParseException
block|{
name|Token
name|oprt
decl_stmt|;
name|List
argument_list|<
name|SrndQuery
argument_list|>
name|queries
decl_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|OR
case|:
name|oprt
operator|=
name|jj_consume_token
argument_list|(
name|OR
argument_list|)
expr_stmt|;
comment|/* prefix OR */
name|queries
operator|=
name|FieldsQueryList
argument_list|()
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|getOrQuery
argument_list|(
name|queries
argument_list|,
literal|false
comment|/* not infix */
argument_list|,
name|oprt
argument_list|)
return|;
block|}
break|break;
case|case
name|AND
case|:
name|oprt
operator|=
name|jj_consume_token
argument_list|(
name|AND
argument_list|)
expr_stmt|;
comment|/* prefix AND */
name|queries
operator|=
name|FieldsQueryList
argument_list|()
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|getAndQuery
argument_list|(
name|queries
argument_list|,
literal|false
comment|/* not infix */
argument_list|,
name|oprt
argument_list|)
return|;
block|}
break|break;
case|case
name|N
case|:
name|oprt
operator|=
name|jj_consume_token
argument_list|(
name|N
argument_list|)
expr_stmt|;
comment|/* prefix N */
name|queries
operator|=
name|FieldsQueryList
argument_list|()
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|getDistanceQuery
argument_list|(
name|queries
argument_list|,
literal|false
comment|/* not infix */
argument_list|,
name|oprt
argument_list|,
literal|false
comment|/* not ordered */
argument_list|)
return|;
block|}
break|break;
case|case
name|W
case|:
name|oprt
operator|=
name|jj_consume_token
argument_list|(
name|W
argument_list|)
expr_stmt|;
comment|/* prefix W */
name|queries
operator|=
name|FieldsQueryList
argument_list|()
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|getDistanceQuery
argument_list|(
name|queries
argument_list|,
literal|false
comment|/* not infix */
argument_list|,
name|oprt
argument_list|,
literal|true
comment|/* ordered */
argument_list|)
return|;
block|}
break|break;
default|default:
name|jj_la1
index|[
literal|6
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
DECL|method|FieldsQueryList
specifier|final
specifier|public
name|List
argument_list|<
name|SrndQuery
argument_list|>
name|FieldsQueryList
parameter_list|()
throws|throws
name|ParseException
block|{
name|SrndQuery
name|q
decl_stmt|;
name|ArrayList
argument_list|<
name|SrndQuery
argument_list|>
name|queries
init|=
operator|new
name|ArrayList
argument_list|<
name|SrndQuery
argument_list|>
argument_list|()
decl_stmt|;
name|jj_consume_token
argument_list|(
name|LPAREN
argument_list|)
expr_stmt|;
name|q
operator|=
name|FieldsQuery
argument_list|()
expr_stmt|;
name|queries
operator|.
name|add
argument_list|(
name|q
argument_list|)
expr_stmt|;
name|label_7
label|:
while|while
condition|(
literal|true
condition|)
block|{
name|jj_consume_token
argument_list|(
name|COMMA
argument_list|)
expr_stmt|;
name|q
operator|=
name|FieldsQuery
argument_list|()
expr_stmt|;
name|queries
operator|.
name|add
argument_list|(
name|q
argument_list|)
expr_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|COMMA
case|:
empty_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|7
index|]
operator|=
name|jj_gen
expr_stmt|;
break|break
name|label_7
break|;
block|}
block|}
name|jj_consume_token
argument_list|(
name|RPAREN
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|queries
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
DECL|method|SimpleTerm
specifier|final
specifier|public
name|SrndQuery
name|SimpleTerm
parameter_list|()
throws|throws
name|ParseException
block|{
name|Token
name|term
decl_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|TERM
case|:
name|term
operator|=
name|jj_consume_token
argument_list|(
name|TERM
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|getTermQuery
argument_list|(
name|term
operator|.
name|image
argument_list|,
literal|false
comment|/* not quoted */
argument_list|)
return|;
block|}
break|break;
case|case
name|QUOTED
case|:
name|term
operator|=
name|jj_consume_token
argument_list|(
name|QUOTED
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|getTermQuery
argument_list|(
name|term
operator|.
name|image
operator|.
name|substring
argument_list|(
literal|1
argument_list|,
name|term
operator|.
name|image
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|,
literal|true
comment|/* quoted */
argument_list|)
return|;
block|}
break|break;
case|case
name|SUFFIXTERM
case|:
name|term
operator|=
name|jj_consume_token
argument_list|(
name|SUFFIXTERM
argument_list|)
expr_stmt|;
comment|/* ending in * */
if|if
condition|(
operator|!
name|allowedSuffix
argument_list|(
name|term
operator|.
name|image
argument_list|)
condition|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
throw|throw
operator|new
name|ParseException
argument_list|(
name|truncationErrorMessage
operator|+
name|term
operator|.
name|image
argument_list|)
throw|;
block|}
block|}
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|getPrefixQuery
argument_list|(
name|term
operator|.
name|image
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|term
operator|.
name|image
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|,
literal|false
comment|/* not quoted */
argument_list|)
return|;
block|}
break|break;
case|case
name|TRUNCTERM
case|:
name|term
operator|=
name|jj_consume_token
argument_list|(
name|TRUNCTERM
argument_list|)
expr_stmt|;
comment|/* with at least one * or ? */
if|if
condition|(
operator|!
name|allowedTruncation
argument_list|(
name|term
operator|.
name|image
argument_list|)
condition|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
throw|throw
operator|new
name|ParseException
argument_list|(
name|truncationErrorMessage
operator|+
name|term
operator|.
name|image
argument_list|)
throw|;
block|}
block|}
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|getTruncQuery
argument_list|(
name|term
operator|.
name|image
argument_list|)
return|;
block|}
break|break;
case|case
name|TRUNCQUOTED
case|:
name|term
operator|=
name|jj_consume_token
argument_list|(
name|TRUNCQUOTED
argument_list|)
expr_stmt|;
comment|/* eg. "9b-b,m"* */
if|if
condition|(
operator|(
name|term
operator|.
name|image
operator|.
name|length
argument_list|()
operator|-
literal|3
operator|)
operator|<
name|minimumPrefixLength
condition|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
throw|throw
operator|new
name|ParseException
argument_list|(
name|truncationErrorMessage
operator|+
name|term
operator|.
name|image
argument_list|)
throw|;
block|}
block|}
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|getPrefixQuery
argument_list|(
name|term
operator|.
name|image
operator|.
name|substring
argument_list|(
literal|1
argument_list|,
name|term
operator|.
name|image
operator|.
name|length
argument_list|()
operator|-
literal|2
argument_list|)
argument_list|,
literal|true
comment|/* quoted */
argument_list|)
return|;
block|}
break|break;
default|default:
name|jj_la1
index|[
literal|8
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
DECL|method|OptionalWeights
specifier|final
specifier|public
name|void
name|OptionalWeights
parameter_list|(
name|SrndQuery
name|q
parameter_list|)
throws|throws
name|ParseException
block|{
name|Token
name|weight
init|=
literal|null
decl_stmt|;
name|label_8
label|:
while|while
condition|(
literal|true
condition|)
block|{
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|CARAT
case|:
empty_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|9
index|]
operator|=
name|jj_gen
expr_stmt|;
break|break
name|label_8
break|;
block|}
name|jj_consume_token
argument_list|(
name|CARAT
argument_list|)
expr_stmt|;
name|weight
operator|=
name|jj_consume_token
argument_list|(
name|NUMBER
argument_list|)
expr_stmt|;
name|float
name|f
decl_stmt|;
try|try
block|{
name|f
operator|=
name|Float
operator|.
name|valueOf
argument_list|(
name|weight
operator|.
name|image
argument_list|)
operator|.
name|floatValue
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|floatExc
parameter_list|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
throw|throw
operator|new
name|ParseException
argument_list|(
name|boostErrorMessage
operator|+
name|weight
operator|.
name|image
operator|+
literal|" ("
operator|+
name|floatExc
operator|+
literal|")"
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|f
operator|<=
literal|0.0
condition|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
throw|throw
operator|new
name|ParseException
argument_list|(
name|boostErrorMessage
operator|+
name|weight
operator|.
name|image
argument_list|)
throw|;
block|}
block|}
name|q
operator|.
name|setWeight
argument_list|(
name|f
operator|*
name|q
operator|.
name|getWeight
argument_list|()
argument_list|)
expr_stmt|;
comment|/* left associative, fwiw */
block|}
block|}
DECL|method|jj_2_1
specifier|private
name|boolean
name|jj_2_1
parameter_list|(
name|int
name|xla
parameter_list|)
block|{
name|jj_la
operator|=
name|xla
expr_stmt|;
name|jj_lastpos
operator|=
name|jj_scanpos
operator|=
name|token
expr_stmt|;
try|try
block|{
return|return
operator|!
name|jj_3_1
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|LookaheadSuccess
name|ls
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
finally|finally
block|{
name|jj_save
argument_list|(
literal|0
argument_list|,
name|xla
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|jj_3_1
specifier|private
name|boolean
name|jj_3_1
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|TERM
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|jj_scan_token
argument_list|(
name|COLON
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
comment|/** Generated Token Manager. */
DECL|field|token_source
specifier|public
name|QueryParserTokenManager
name|token_source
decl_stmt|;
comment|/** Current token. */
DECL|field|token
specifier|public
name|Token
name|token
decl_stmt|;
comment|/** Next token. */
DECL|field|jj_nt
specifier|public
name|Token
name|jj_nt
decl_stmt|;
DECL|field|jj_ntk
specifier|private
name|int
name|jj_ntk
decl_stmt|;
DECL|field|jj_scanpos
DECL|field|jj_lastpos
specifier|private
name|Token
name|jj_scanpos
decl_stmt|,
name|jj_lastpos
decl_stmt|;
DECL|field|jj_la
specifier|private
name|int
name|jj_la
decl_stmt|;
DECL|field|jj_gen
specifier|private
name|int
name|jj_gen
decl_stmt|;
DECL|field|jj_la1
specifier|final
specifier|private
name|int
index|[]
name|jj_la1
init|=
operator|new
name|int
index|[
literal|10
index|]
decl_stmt|;
DECL|field|jj_la1_0
specifier|static
specifier|private
name|int
index|[]
name|jj_la1_0
decl_stmt|;
static|static
block|{
name|jj_la1_init_0
argument_list|()
expr_stmt|;
block|}
DECL|method|jj_la1_init_0
specifier|private
specifier|static
name|void
name|jj_la1_init_0
parameter_list|()
block|{
name|jj_la1_0
operator|=
operator|new
name|int
index|[]
block|{
literal|0x100
block|,
literal|0x200
block|,
literal|0x400
block|,
literal|0x1000
block|,
literal|0x800
block|,
literal|0x7c3b00
block|,
literal|0x1b00
block|,
literal|0x8000
block|,
literal|0x7c0000
block|,
literal|0x20000
block|,}
expr_stmt|;
block|}
DECL|field|jj_2_rtns
specifier|final
specifier|private
name|JJCalls
index|[]
name|jj_2_rtns
init|=
operator|new
name|JJCalls
index|[
literal|1
index|]
decl_stmt|;
DECL|field|jj_rescan
specifier|private
name|boolean
name|jj_rescan
init|=
literal|false
decl_stmt|;
DECL|field|jj_gc
specifier|private
name|int
name|jj_gc
init|=
literal|0
decl_stmt|;
comment|/** Constructor with user supplied CharStream. */
DECL|method|QueryParser
specifier|public
name|QueryParser
parameter_list|(
name|CharStream
name|stream
parameter_list|)
block|{
name|token_source
operator|=
operator|new
name|QueryParserTokenManager
argument_list|(
name|stream
argument_list|)
expr_stmt|;
name|token
operator|=
operator|new
name|Token
argument_list|()
expr_stmt|;
name|jj_ntk
operator|=
operator|-
literal|1
expr_stmt|;
name|jj_gen
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
name|jj_la1
index|[
name|i
index|]
operator|=
operator|-
literal|1
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|jj_2_rtns
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|jj_2_rtns
index|[
name|i
index|]
operator|=
operator|new
name|JJCalls
argument_list|()
expr_stmt|;
block|}
comment|/** Reinitialise. */
DECL|method|ReInit
specifier|public
name|void
name|ReInit
parameter_list|(
name|CharStream
name|stream
parameter_list|)
block|{
name|token_source
operator|.
name|ReInit
argument_list|(
name|stream
argument_list|)
expr_stmt|;
name|token
operator|=
operator|new
name|Token
argument_list|()
expr_stmt|;
name|jj_ntk
operator|=
operator|-
literal|1
expr_stmt|;
name|jj_gen
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
name|jj_la1
index|[
name|i
index|]
operator|=
operator|-
literal|1
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|jj_2_rtns
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|jj_2_rtns
index|[
name|i
index|]
operator|=
operator|new
name|JJCalls
argument_list|()
expr_stmt|;
block|}
comment|/** Constructor with generated Token Manager. */
DECL|method|QueryParser
specifier|public
name|QueryParser
parameter_list|(
name|QueryParserTokenManager
name|tm
parameter_list|)
block|{
name|token_source
operator|=
name|tm
expr_stmt|;
name|token
operator|=
operator|new
name|Token
argument_list|()
expr_stmt|;
name|jj_ntk
operator|=
operator|-
literal|1
expr_stmt|;
name|jj_gen
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
name|jj_la1
index|[
name|i
index|]
operator|=
operator|-
literal|1
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|jj_2_rtns
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|jj_2_rtns
index|[
name|i
index|]
operator|=
operator|new
name|JJCalls
argument_list|()
expr_stmt|;
block|}
comment|/** Reinitialise. */
DECL|method|ReInit
specifier|public
name|void
name|ReInit
parameter_list|(
name|QueryParserTokenManager
name|tm
parameter_list|)
block|{
name|token_source
operator|=
name|tm
expr_stmt|;
name|token
operator|=
operator|new
name|Token
argument_list|()
expr_stmt|;
name|jj_ntk
operator|=
operator|-
literal|1
expr_stmt|;
name|jj_gen
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
name|jj_la1
index|[
name|i
index|]
operator|=
operator|-
literal|1
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|jj_2_rtns
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|jj_2_rtns
index|[
name|i
index|]
operator|=
operator|new
name|JJCalls
argument_list|()
expr_stmt|;
block|}
DECL|method|jj_consume_token
specifier|private
name|Token
name|jj_consume_token
parameter_list|(
name|int
name|kind
parameter_list|)
throws|throws
name|ParseException
block|{
name|Token
name|oldToken
decl_stmt|;
if|if
condition|(
operator|(
name|oldToken
operator|=
name|token
operator|)
operator|.
name|next
operator|!=
literal|null
condition|)
name|token
operator|=
name|token
operator|.
name|next
expr_stmt|;
else|else
name|token
operator|=
name|token
operator|.
name|next
operator|=
name|token_source
operator|.
name|getNextToken
argument_list|()
expr_stmt|;
name|jj_ntk
operator|=
operator|-
literal|1
expr_stmt|;
if|if
condition|(
name|token
operator|.
name|kind
operator|==
name|kind
condition|)
block|{
name|jj_gen
operator|++
expr_stmt|;
if|if
condition|(
operator|++
name|jj_gc
operator|>
literal|100
condition|)
block|{
name|jj_gc
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|jj_2_rtns
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|JJCalls
name|c
init|=
name|jj_2_rtns
index|[
name|i
index|]
decl_stmt|;
while|while
condition|(
name|c
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|c
operator|.
name|gen
operator|<
name|jj_gen
condition|)
name|c
operator|.
name|first
operator|=
literal|null
expr_stmt|;
name|c
operator|=
name|c
operator|.
name|next
expr_stmt|;
block|}
block|}
block|}
return|return
name|token
return|;
block|}
name|token
operator|=
name|oldToken
expr_stmt|;
name|jj_kind
operator|=
name|kind
expr_stmt|;
throw|throw
name|generateParseException
argument_list|()
throw|;
block|}
DECL|class|LookaheadSuccess
specifier|static
specifier|private
specifier|final
class|class
name|LookaheadSuccess
extends|extends
name|java
operator|.
name|lang
operator|.
name|Error
block|{ }
DECL|field|jj_ls
specifier|final
specifier|private
name|LookaheadSuccess
name|jj_ls
init|=
operator|new
name|LookaheadSuccess
argument_list|()
decl_stmt|;
DECL|method|jj_scan_token
specifier|private
name|boolean
name|jj_scan_token
parameter_list|(
name|int
name|kind
parameter_list|)
block|{
if|if
condition|(
name|jj_scanpos
operator|==
name|jj_lastpos
condition|)
block|{
name|jj_la
operator|--
expr_stmt|;
if|if
condition|(
name|jj_scanpos
operator|.
name|next
operator|==
literal|null
condition|)
block|{
name|jj_lastpos
operator|=
name|jj_scanpos
operator|=
name|jj_scanpos
operator|.
name|next
operator|=
name|token_source
operator|.
name|getNextToken
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|jj_lastpos
operator|=
name|jj_scanpos
operator|=
name|jj_scanpos
operator|.
name|next
expr_stmt|;
block|}
block|}
else|else
block|{
name|jj_scanpos
operator|=
name|jj_scanpos
operator|.
name|next
expr_stmt|;
block|}
if|if
condition|(
name|jj_rescan
condition|)
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
name|Token
name|tok
init|=
name|token
decl_stmt|;
while|while
condition|(
name|tok
operator|!=
literal|null
operator|&&
name|tok
operator|!=
name|jj_scanpos
condition|)
block|{
name|i
operator|++
expr_stmt|;
name|tok
operator|=
name|tok
operator|.
name|next
expr_stmt|;
block|}
if|if
condition|(
name|tok
operator|!=
literal|null
condition|)
name|jj_add_error_token
argument_list|(
name|kind
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|jj_scanpos
operator|.
name|kind
operator|!=
name|kind
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|jj_la
operator|==
literal|0
operator|&&
name|jj_scanpos
operator|==
name|jj_lastpos
condition|)
throw|throw
name|jj_ls
throw|;
return|return
literal|false
return|;
block|}
comment|/** Get the next Token. */
DECL|method|getNextToken
specifier|final
specifier|public
name|Token
name|getNextToken
parameter_list|()
block|{
if|if
condition|(
name|token
operator|.
name|next
operator|!=
literal|null
condition|)
name|token
operator|=
name|token
operator|.
name|next
expr_stmt|;
else|else
name|token
operator|=
name|token
operator|.
name|next
operator|=
name|token_source
operator|.
name|getNextToken
argument_list|()
expr_stmt|;
name|jj_ntk
operator|=
operator|-
literal|1
expr_stmt|;
name|jj_gen
operator|++
expr_stmt|;
return|return
name|token
return|;
block|}
comment|/** Get the specific Token. */
DECL|method|getToken
specifier|final
specifier|public
name|Token
name|getToken
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|Token
name|t
init|=
name|token
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|index
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|t
operator|.
name|next
operator|!=
literal|null
condition|)
name|t
operator|=
name|t
operator|.
name|next
expr_stmt|;
else|else
name|t
operator|=
name|t
operator|.
name|next
operator|=
name|token_source
operator|.
name|getNextToken
argument_list|()
expr_stmt|;
block|}
return|return
name|t
return|;
block|}
DECL|method|jj_ntk
specifier|private
name|int
name|jj_ntk
parameter_list|()
block|{
if|if
condition|(
operator|(
name|jj_nt
operator|=
name|token
operator|.
name|next
operator|)
operator|==
literal|null
condition|)
return|return
operator|(
name|jj_ntk
operator|=
operator|(
name|token
operator|.
name|next
operator|=
name|token_source
operator|.
name|getNextToken
argument_list|()
operator|)
operator|.
name|kind
operator|)
return|;
else|else
return|return
operator|(
name|jj_ntk
operator|=
name|jj_nt
operator|.
name|kind
operator|)
return|;
block|}
DECL|field|jj_expentries
specifier|private
name|java
operator|.
name|util
operator|.
name|List
argument_list|<
name|int
index|[]
argument_list|>
name|jj_expentries
init|=
operator|new
name|java
operator|.
name|util
operator|.
name|ArrayList
argument_list|<
name|int
index|[]
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|jj_expentry
specifier|private
name|int
index|[]
name|jj_expentry
decl_stmt|;
DECL|field|jj_kind
specifier|private
name|int
name|jj_kind
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|jj_lasttokens
specifier|private
name|int
index|[]
name|jj_lasttokens
init|=
operator|new
name|int
index|[
literal|100
index|]
decl_stmt|;
DECL|field|jj_endpos
specifier|private
name|int
name|jj_endpos
decl_stmt|;
DECL|method|jj_add_error_token
specifier|private
name|void
name|jj_add_error_token
parameter_list|(
name|int
name|kind
parameter_list|,
name|int
name|pos
parameter_list|)
block|{
if|if
condition|(
name|pos
operator|>=
literal|100
condition|)
return|return;
if|if
condition|(
name|pos
operator|==
name|jj_endpos
operator|+
literal|1
condition|)
block|{
name|jj_lasttokens
index|[
name|jj_endpos
operator|++
index|]
operator|=
name|kind
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|jj_endpos
operator|!=
literal|0
condition|)
block|{
name|jj_expentry
operator|=
operator|new
name|int
index|[
name|jj_endpos
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|jj_endpos
condition|;
name|i
operator|++
control|)
block|{
name|jj_expentry
index|[
name|i
index|]
operator|=
name|jj_lasttokens
index|[
name|i
index|]
expr_stmt|;
block|}
name|jj_entries_loop
label|:
for|for
control|(
name|java
operator|.
name|util
operator|.
name|Iterator
argument_list|<
name|?
argument_list|>
name|it
init|=
name|jj_expentries
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|int
index|[]
name|oldentry
init|=
operator|(
name|int
index|[]
operator|)
operator|(
name|it
operator|.
name|next
argument_list|()
operator|)
decl_stmt|;
if|if
condition|(
name|oldentry
operator|.
name|length
operator|==
name|jj_expentry
operator|.
name|length
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|jj_expentry
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|oldentry
index|[
name|i
index|]
operator|!=
name|jj_expentry
index|[
name|i
index|]
condition|)
block|{
continue|continue
name|jj_entries_loop
continue|;
block|}
block|}
name|jj_expentries
operator|.
name|add
argument_list|(
name|jj_expentry
argument_list|)
expr_stmt|;
break|break
name|jj_entries_loop
break|;
block|}
block|}
if|if
condition|(
name|pos
operator|!=
literal|0
condition|)
name|jj_lasttokens
index|[
operator|(
name|jj_endpos
operator|=
name|pos
operator|)
operator|-
literal|1
index|]
operator|=
name|kind
expr_stmt|;
block|}
block|}
comment|/** Generate ParseException. */
DECL|method|generateParseException
specifier|public
name|ParseException
name|generateParseException
parameter_list|()
block|{
name|jj_expentries
operator|.
name|clear
argument_list|()
expr_stmt|;
name|boolean
index|[]
name|la1tokens
init|=
operator|new
name|boolean
index|[
literal|24
index|]
decl_stmt|;
if|if
condition|(
name|jj_kind
operator|>=
literal|0
condition|)
block|{
name|la1tokens
index|[
name|jj_kind
index|]
operator|=
literal|true
expr_stmt|;
name|jj_kind
operator|=
operator|-
literal|1
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|jj_la1
index|[
name|i
index|]
operator|==
name|jj_gen
condition|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|32
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
operator|(
name|jj_la1_0
index|[
name|i
index|]
operator|&
operator|(
literal|1
operator|<<
name|j
operator|)
operator|)
operator|!=
literal|0
condition|)
block|{
name|la1tokens
index|[
name|j
index|]
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|24
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|la1tokens
index|[
name|i
index|]
condition|)
block|{
name|jj_expentry
operator|=
operator|new
name|int
index|[
literal|1
index|]
expr_stmt|;
name|jj_expentry
index|[
literal|0
index|]
operator|=
name|i
expr_stmt|;
name|jj_expentries
operator|.
name|add
argument_list|(
name|jj_expentry
argument_list|)
expr_stmt|;
block|}
block|}
name|jj_endpos
operator|=
literal|0
expr_stmt|;
name|jj_rescan_token
argument_list|()
expr_stmt|;
name|jj_add_error_token
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|int
index|[]
index|[]
name|exptokseq
init|=
operator|new
name|int
index|[
name|jj_expentries
operator|.
name|size
argument_list|()
index|]
index|[]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|jj_expentries
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|exptokseq
index|[
name|i
index|]
operator|=
name|jj_expentries
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|ParseException
argument_list|(
name|token
argument_list|,
name|exptokseq
argument_list|,
name|tokenImage
argument_list|)
return|;
block|}
comment|/** Enable tracing. */
DECL|method|enable_tracing
specifier|final
specifier|public
name|void
name|enable_tracing
parameter_list|()
block|{   }
comment|/** Disable tracing. */
DECL|method|disable_tracing
specifier|final
specifier|public
name|void
name|disable_tracing
parameter_list|()
block|{   }
DECL|method|jj_rescan_token
specifier|private
name|void
name|jj_rescan_token
parameter_list|()
block|{
name|jj_rescan
operator|=
literal|true
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|JJCalls
name|p
init|=
name|jj_2_rtns
index|[
name|i
index|]
decl_stmt|;
do|do
block|{
if|if
condition|(
name|p
operator|.
name|gen
operator|>
name|jj_gen
condition|)
block|{
name|jj_la
operator|=
name|p
operator|.
name|arg
expr_stmt|;
name|jj_lastpos
operator|=
name|jj_scanpos
operator|=
name|p
operator|.
name|first
expr_stmt|;
switch|switch
condition|(
name|i
condition|)
block|{
case|case
literal|0
case|:
name|jj_3_1
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
name|p
operator|=
name|p
operator|.
name|next
expr_stmt|;
block|}
do|while
condition|(
name|p
operator|!=
literal|null
condition|)
do|;
block|}
catch|catch
parameter_list|(
name|LookaheadSuccess
name|ls
parameter_list|)
block|{ }
block|}
name|jj_rescan
operator|=
literal|false
expr_stmt|;
block|}
DECL|method|jj_save
specifier|private
name|void
name|jj_save
parameter_list|(
name|int
name|index
parameter_list|,
name|int
name|xla
parameter_list|)
block|{
name|JJCalls
name|p
init|=
name|jj_2_rtns
index|[
name|index
index|]
decl_stmt|;
while|while
condition|(
name|p
operator|.
name|gen
operator|>
name|jj_gen
condition|)
block|{
if|if
condition|(
name|p
operator|.
name|next
operator|==
literal|null
condition|)
block|{
name|p
operator|=
name|p
operator|.
name|next
operator|=
operator|new
name|JJCalls
argument_list|()
expr_stmt|;
break|break;
block|}
name|p
operator|=
name|p
operator|.
name|next
expr_stmt|;
block|}
name|p
operator|.
name|gen
operator|=
name|jj_gen
operator|+
name|xla
operator|-
name|jj_la
expr_stmt|;
name|p
operator|.
name|first
operator|=
name|token
expr_stmt|;
name|p
operator|.
name|arg
operator|=
name|xla
expr_stmt|;
block|}
DECL|class|JJCalls
specifier|static
specifier|final
class|class
name|JJCalls
block|{
DECL|field|gen
name|int
name|gen
decl_stmt|;
DECL|field|first
name|Token
name|first
decl_stmt|;
DECL|field|arg
name|int
name|arg
decl_stmt|;
DECL|field|next
name|JJCalls
name|next
decl_stmt|;
block|}
block|}
end_class
end_unit
