begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.queryparser.flexible.standard.nodes
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryparser
operator|.
name|flexible
operator|.
name|standard
operator|.
name|nodes
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryparser
operator|.
name|flexible
operator|.
name|core
operator|.
name|QueryNodeException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryparser
operator|.
name|flexible
operator|.
name|standard
operator|.
name|config
operator|.
name|PointsConfig
import|;
end_import
begin_comment
comment|/**  * This query node represents a range query composed by {@link PointQueryNode}  * bounds, which means the bound values are {@link Number}s.  *   * @see PointQueryNode  * @see AbstractRangeQueryNode  */
end_comment
begin_class
DECL|class|PointRangeQueryNode
specifier|public
class|class
name|PointRangeQueryNode
extends|extends
name|AbstractRangeQueryNode
argument_list|<
name|PointQueryNode
argument_list|>
block|{
DECL|field|numericConfig
specifier|public
name|PointsConfig
name|numericConfig
decl_stmt|;
comment|/**    * Constructs a {@link PointRangeQueryNode} object using the given    * {@link PointQueryNode} as its bounds and {@link PointsConfig}.    *     * @param lower the lower bound    * @param upper the upper bound    * @param lowerInclusive<code>true</code> if the lower bound is inclusive, otherwise,<code>false</code>    * @param upperInclusive<code>true</code> if the upper bound is inclusive, otherwise,<code>false</code>    * @param numericConfig the {@link PointsConfig} that represents associated with the upper and lower bounds    *     * @see #setBounds(PointQueryNode, PointQueryNode, boolean, boolean, PointsConfig)    */
DECL|method|PointRangeQueryNode
specifier|public
name|PointRangeQueryNode
parameter_list|(
name|PointQueryNode
name|lower
parameter_list|,
name|PointQueryNode
name|upper
parameter_list|,
name|boolean
name|lowerInclusive
parameter_list|,
name|boolean
name|upperInclusive
parameter_list|,
name|PointsConfig
name|numericConfig
parameter_list|)
throws|throws
name|QueryNodeException
block|{
name|setBounds
argument_list|(
name|lower
argument_list|,
name|upper
argument_list|,
name|lowerInclusive
argument_list|,
name|upperInclusive
argument_list|,
name|numericConfig
argument_list|)
expr_stmt|;
block|}
comment|/**    * Sets the upper and lower bounds of this range query node and the    * {@link PointsConfig} associated with these bounds.    *     * @param lower the lower bound    * @param upper the upper bound    * @param lowerInclusive<code>true</code> if the lower bound is inclusive, otherwise,<code>false</code>    * @param upperInclusive<code>true</code> if the upper bound is inclusive, otherwise,<code>false</code>    * @param pointsConfig the {@link PointsConfig} that represents associated with the upper and lower bounds    *     */
DECL|method|setBounds
specifier|public
name|void
name|setBounds
parameter_list|(
name|PointQueryNode
name|lower
parameter_list|,
name|PointQueryNode
name|upper
parameter_list|,
name|boolean
name|lowerInclusive
parameter_list|,
name|boolean
name|upperInclusive
parameter_list|,
name|PointsConfig
name|pointsConfig
parameter_list|)
throws|throws
name|QueryNodeException
block|{
if|if
condition|(
name|pointsConfig
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"pointsConfig must not be null!"
argument_list|)
throw|;
block|}
name|Class
argument_list|<
name|?
extends|extends
name|Number
argument_list|>
name|lowerNumberType
decl_stmt|,
name|upperNumberType
decl_stmt|;
if|if
condition|(
name|lower
operator|!=
literal|null
operator|&&
name|lower
operator|.
name|getValue
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|lowerNumberType
operator|=
name|lower
operator|.
name|getValue
argument_list|()
operator|.
name|getClass
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|lowerNumberType
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|upper
operator|!=
literal|null
operator|&&
name|upper
operator|.
name|getValue
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|upperNumberType
operator|=
name|upper
operator|.
name|getValue
argument_list|()
operator|.
name|getClass
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|upperNumberType
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|lowerNumberType
operator|!=
literal|null
operator|&&
operator|!
name|lowerNumberType
operator|.
name|equals
argument_list|(
name|pointsConfig
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"lower value's type should be the same as numericConfig type: "
operator|+
name|lowerNumberType
operator|+
literal|" != "
operator|+
name|pointsConfig
operator|.
name|getType
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|upperNumberType
operator|!=
literal|null
operator|&&
operator|!
name|upperNumberType
operator|.
name|equals
argument_list|(
name|pointsConfig
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"upper value's type should be the same as numericConfig type: "
operator|+
name|upperNumberType
operator|+
literal|" != "
operator|+
name|pointsConfig
operator|.
name|getType
argument_list|()
argument_list|)
throw|;
block|}
name|super
operator|.
name|setBounds
argument_list|(
name|lower
argument_list|,
name|upper
argument_list|,
name|lowerInclusive
argument_list|,
name|upperInclusive
argument_list|)
expr_stmt|;
name|this
operator|.
name|numericConfig
operator|=
name|pointsConfig
expr_stmt|;
block|}
comment|/**    * Returns the {@link PointsConfig} associated with the lower and upper bounds.    *     * @return the {@link PointsConfig} associated with the lower and upper bounds    */
DECL|method|getPointsConfig
specifier|public
name|PointsConfig
name|getPointsConfig
parameter_list|()
block|{
return|return
name|this
operator|.
name|numericConfig
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<pointRange lowerInclusive='"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|isLowerInclusive
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"' upperInclusive='"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|isUpperInclusive
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"' type='"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|numericConfig
operator|.
name|getType
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"'>\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|getLowerBound
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|getUpperBound
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"</pointRange>"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class
end_unit
