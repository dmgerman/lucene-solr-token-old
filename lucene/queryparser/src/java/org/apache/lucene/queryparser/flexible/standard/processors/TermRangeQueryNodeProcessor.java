begin_unit
begin_package
DECL|package|org.apache.lucene.queryparser.flexible.standard.processors
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryparser
operator|.
name|flexible
operator|.
name|standard
operator|.
name|processors
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DateFormat
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimeZone
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|DateTools
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|DateTools
operator|.
name|Resolution
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryparser
operator|.
name|flexible
operator|.
name|core
operator|.
name|QueryNodeException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryparser
operator|.
name|flexible
operator|.
name|core
operator|.
name|config
operator|.
name|FieldConfig
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryparser
operator|.
name|flexible
operator|.
name|core
operator|.
name|config
operator|.
name|QueryConfigHandler
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryparser
operator|.
name|flexible
operator|.
name|core
operator|.
name|nodes
operator|.
name|FieldQueryNode
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryparser
operator|.
name|flexible
operator|.
name|core
operator|.
name|nodes
operator|.
name|QueryNode
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryparser
operator|.
name|flexible
operator|.
name|core
operator|.
name|processors
operator|.
name|QueryNodeProcessorImpl
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryparser
operator|.
name|flexible
operator|.
name|standard
operator|.
name|config
operator|.
name|StandardQueryConfigHandler
operator|.
name|ConfigurationKeys
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryparser
operator|.
name|flexible
operator|.
name|standard
operator|.
name|nodes
operator|.
name|TermRangeQueryNode
import|;
end_import
begin_comment
comment|/**  * This processors process {@link TermRangeQueryNode}s. It reads the lower and  * upper bounds value from the {@link TermRangeQueryNode} object and try  * to parse their values using a {@link DateFormat}. If the values cannot be  * parsed to a date value, it will only create the {@link TermRangeQueryNode}  * using the non-parsed values.<br/>  *<br/>  * If a {@link ConfigurationKeys#LOCALE} is defined in the  * {@link QueryConfigHandler} it will be used to parse the date, otherwise  * {@link Locale#getDefault()} will be used.<br/>  *<br/>  * If a {@link ConfigurationKeys#DATE_RESOLUTION} is defined and the  * {@link Resolution} is not<code>null</code> it will also be used to parse the  * date value.<br/>  *<br/>  *   * @see ConfigurationKeys#DATE_RESOLUTION  * @see ConfigurationKeys#LOCALE  * @see TermRangeQueryNode  */
end_comment
begin_class
DECL|class|TermRangeQueryNodeProcessor
specifier|public
class|class
name|TermRangeQueryNodeProcessor
extends|extends
name|QueryNodeProcessorImpl
block|{
DECL|method|TermRangeQueryNodeProcessor
specifier|public
name|TermRangeQueryNodeProcessor
parameter_list|()
block|{
comment|// empty constructor
block|}
annotation|@
name|Override
DECL|method|postProcessNode
specifier|protected
name|QueryNode
name|postProcessNode
parameter_list|(
name|QueryNode
name|node
parameter_list|)
throws|throws
name|QueryNodeException
block|{
if|if
condition|(
name|node
operator|instanceof
name|TermRangeQueryNode
condition|)
block|{
name|TermRangeQueryNode
name|termRangeNode
init|=
operator|(
name|TermRangeQueryNode
operator|)
name|node
decl_stmt|;
name|FieldQueryNode
name|upper
init|=
name|termRangeNode
operator|.
name|getUpperBound
argument_list|()
decl_stmt|;
name|FieldQueryNode
name|lower
init|=
name|termRangeNode
operator|.
name|getLowerBound
argument_list|()
decl_stmt|;
name|DateTools
operator|.
name|Resolution
name|dateRes
init|=
literal|null
decl_stmt|;
name|boolean
name|inclusive
init|=
literal|false
decl_stmt|;
name|Locale
name|locale
init|=
name|getQueryConfigHandler
argument_list|()
operator|.
name|get
argument_list|(
name|ConfigurationKeys
operator|.
name|LOCALE
argument_list|)
decl_stmt|;
if|if
condition|(
name|locale
operator|==
literal|null
condition|)
block|{
name|locale
operator|=
name|Locale
operator|.
name|getDefault
argument_list|()
expr_stmt|;
block|}
name|TimeZone
name|timeZone
init|=
name|getQueryConfigHandler
argument_list|()
operator|.
name|get
argument_list|(
name|ConfigurationKeys
operator|.
name|TIMEZONE
argument_list|)
decl_stmt|;
if|if
condition|(
name|timeZone
operator|==
literal|null
condition|)
block|{
name|timeZone
operator|=
name|TimeZone
operator|.
name|getDefault
argument_list|()
expr_stmt|;
block|}
name|CharSequence
name|field
init|=
name|termRangeNode
operator|.
name|getField
argument_list|()
decl_stmt|;
name|String
name|fieldStr
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|field
operator|!=
literal|null
condition|)
block|{
name|fieldStr
operator|=
name|field
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
name|FieldConfig
name|fieldConfig
init|=
name|getQueryConfigHandler
argument_list|()
operator|.
name|getFieldConfig
argument_list|(
name|fieldStr
argument_list|)
decl_stmt|;
if|if
condition|(
name|fieldConfig
operator|!=
literal|null
condition|)
block|{
name|dateRes
operator|=
name|fieldConfig
operator|.
name|get
argument_list|(
name|ConfigurationKeys
operator|.
name|DATE_RESOLUTION
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|termRangeNode
operator|.
name|isUpperInclusive
argument_list|()
condition|)
block|{
name|inclusive
operator|=
literal|true
expr_stmt|;
block|}
name|String
name|part1
init|=
name|lower
operator|.
name|getTextAsString
argument_list|()
decl_stmt|;
name|String
name|part2
init|=
name|upper
operator|.
name|getTextAsString
argument_list|()
decl_stmt|;
try|try
block|{
name|DateFormat
name|df
init|=
name|DateFormat
operator|.
name|getDateInstance
argument_list|(
name|DateFormat
operator|.
name|SHORT
argument_list|,
name|locale
argument_list|)
decl_stmt|;
name|df
operator|.
name|setLenient
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|part1
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Date
name|d1
init|=
name|df
operator|.
name|parse
argument_list|(
name|part1
argument_list|)
decl_stmt|;
name|part1
operator|=
name|DateTools
operator|.
name|dateToString
argument_list|(
name|d1
argument_list|,
name|dateRes
argument_list|)
expr_stmt|;
name|lower
operator|.
name|setText
argument_list|(
name|part1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|part2
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Date
name|d2
init|=
name|df
operator|.
name|parse
argument_list|(
name|part2
argument_list|)
decl_stmt|;
if|if
condition|(
name|inclusive
condition|)
block|{
comment|// The user can only specify the date, not the time, so make sure
comment|// the time is set to the latest possible time of that date to
comment|// really
comment|// include all documents:
name|Calendar
name|cal
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|timeZone
argument_list|,
name|locale
argument_list|)
decl_stmt|;
name|cal
operator|.
name|setTime
argument_list|(
name|d2
argument_list|)
expr_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|HOUR_OF_DAY
argument_list|,
literal|23
argument_list|)
expr_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|MINUTE
argument_list|,
literal|59
argument_list|)
expr_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|SECOND
argument_list|,
literal|59
argument_list|)
expr_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|MILLISECOND
argument_list|,
literal|999
argument_list|)
expr_stmt|;
name|d2
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
block|}
name|part2
operator|=
name|DateTools
operator|.
name|dateToString
argument_list|(
name|d2
argument_list|,
name|dateRes
argument_list|)
expr_stmt|;
name|upper
operator|.
name|setText
argument_list|(
name|part2
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// do nothing
block|}
block|}
return|return
name|node
return|;
block|}
annotation|@
name|Override
DECL|method|preProcessNode
specifier|protected
name|QueryNode
name|preProcessNode
parameter_list|(
name|QueryNode
name|node
parameter_list|)
throws|throws
name|QueryNodeException
block|{
return|return
name|node
return|;
block|}
annotation|@
name|Override
DECL|method|setChildrenOrder
specifier|protected
name|List
argument_list|<
name|QueryNode
argument_list|>
name|setChildrenOrder
parameter_list|(
name|List
argument_list|<
name|QueryNode
argument_list|>
name|children
parameter_list|)
throws|throws
name|QueryNodeException
block|{
return|return
name|children
return|;
block|}
block|}
end_class
end_unit
