begin_unit
begin_package
DECL|package|org.apache.lucene.queryparser.flexible.standard.config
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryparser
operator|.
name|flexible
operator|.
name|standard
operator|.
name|config
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DateFormat
import|;
end_import
begin_import
import|import
name|java
operator|.
name|text
operator|.
name|FieldPosition
import|;
end_import
begin_import
import|import
name|java
operator|.
name|text
operator|.
name|Format
import|;
end_import
begin_import
import|import
name|java
operator|.
name|text
operator|.
name|NumberFormat
import|;
end_import
begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParsePosition
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import
begin_comment
comment|/**  * This {@link Format} parses {@link Long} into date strings and vice-versa. It  * uses the given {@link DateFormat} to parse and format dates, but before, it  * converts {@link Long} to {@link Date} objects or vice-versa.  */
end_comment
begin_class
DECL|class|NumberDateFormat
specifier|public
class|class
name|NumberDateFormat
extends|extends
name|NumberFormat
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|964823936071308283L
decl_stmt|;
DECL|field|dateFormat
specifier|final
specifier|private
name|DateFormat
name|dateFormat
decl_stmt|;
comment|/**    * Constructs a {@link NumberDateFormat} object using the given {@link DateFormat}.    *     * @param dateFormat {@link DateFormat} used to parse and format dates    */
DECL|method|NumberDateFormat
specifier|public
name|NumberDateFormat
parameter_list|(
name|DateFormat
name|dateFormat
parameter_list|)
block|{
name|this
operator|.
name|dateFormat
operator|=
name|dateFormat
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|format
specifier|public
name|StringBuffer
name|format
parameter_list|(
name|double
name|number
parameter_list|,
name|StringBuffer
name|toAppendTo
parameter_list|,
name|FieldPosition
name|pos
parameter_list|)
block|{
return|return
name|dateFormat
operator|.
name|format
argument_list|(
operator|new
name|Date
argument_list|(
operator|(
name|long
operator|)
name|number
argument_list|)
argument_list|,
name|toAppendTo
argument_list|,
name|pos
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|format
specifier|public
name|StringBuffer
name|format
parameter_list|(
name|long
name|number
parameter_list|,
name|StringBuffer
name|toAppendTo
parameter_list|,
name|FieldPosition
name|pos
parameter_list|)
block|{
return|return
name|dateFormat
operator|.
name|format
argument_list|(
operator|new
name|Date
argument_list|(
name|number
argument_list|)
argument_list|,
name|toAppendTo
argument_list|,
name|pos
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|parse
specifier|public
name|Number
name|parse
parameter_list|(
name|String
name|source
parameter_list|,
name|ParsePosition
name|parsePosition
parameter_list|)
block|{
specifier|final
name|Date
name|date
init|=
name|dateFormat
operator|.
name|parse
argument_list|(
name|source
argument_list|,
name|parsePosition
argument_list|)
decl_stmt|;
return|return
operator|(
name|date
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|date
operator|.
name|getTime
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|format
specifier|public
name|StringBuffer
name|format
parameter_list|(
name|Object
name|number
parameter_list|,
name|StringBuffer
name|toAppendTo
parameter_list|,
name|FieldPosition
name|pos
parameter_list|)
block|{
return|return
name|dateFormat
operator|.
name|format
argument_list|(
name|number
argument_list|,
name|toAppendTo
argument_list|,
name|pos
argument_list|)
return|;
block|}
block|}
end_class
end_unit
