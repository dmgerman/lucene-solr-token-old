begin_unit
begin_comment
comment|// FastCharStream.java
end_comment
begin_package
DECL|package|org.apache.lucene.queryparser.flexible.standard.parser
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryparser
operator|.
name|flexible
operator|.
name|standard
operator|.
name|parser
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  *    */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import
begin_comment
comment|/** An efficient implementation of JavaCC's CharStream interface.<p>Note that  * this does not do line-number counting, but instead keeps track of the  * character position of the token in the input, as required by Lucene's {@link  * org.apache.lucene.analysis.Token} API.   * */
end_comment
begin_class
DECL|class|FastCharStream
specifier|public
specifier|final
class|class
name|FastCharStream
implements|implements
name|CharStream
block|{
DECL|field|buffer
name|char
index|[]
name|buffer
init|=
literal|null
decl_stmt|;
DECL|field|bufferLength
name|int
name|bufferLength
init|=
literal|0
decl_stmt|;
comment|// end of valid chars
DECL|field|bufferPosition
name|int
name|bufferPosition
init|=
literal|0
decl_stmt|;
comment|// next char to read
DECL|field|tokenStart
name|int
name|tokenStart
init|=
literal|0
decl_stmt|;
comment|// offset in buffer
DECL|field|bufferStart
name|int
name|bufferStart
init|=
literal|0
decl_stmt|;
comment|// position in file of buffer
DECL|field|input
name|Reader
name|input
decl_stmt|;
comment|// source of chars
comment|/** Constructs from a Reader. */
DECL|method|FastCharStream
specifier|public
name|FastCharStream
parameter_list|(
name|Reader
name|r
parameter_list|)
block|{
name|input
operator|=
name|r
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|readChar
specifier|public
specifier|final
name|char
name|readChar
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|bufferPosition
operator|>=
name|bufferLength
condition|)
name|refill
argument_list|()
expr_stmt|;
return|return
name|buffer
index|[
name|bufferPosition
operator|++
index|]
return|;
block|}
DECL|method|refill
specifier|private
specifier|final
name|void
name|refill
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|newPosition
init|=
name|bufferLength
operator|-
name|tokenStart
decl_stmt|;
if|if
condition|(
name|tokenStart
operator|==
literal|0
condition|)
block|{
comment|// token won't fit in buffer
if|if
condition|(
name|buffer
operator|==
literal|null
condition|)
block|{
comment|// first time: alloc buffer
name|buffer
operator|=
operator|new
name|char
index|[
literal|2048
index|]
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|bufferLength
operator|==
name|buffer
operator|.
name|length
condition|)
block|{
comment|// grow buffer
name|char
index|[]
name|newBuffer
init|=
operator|new
name|char
index|[
name|buffer
operator|.
name|length
operator|*
literal|2
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|newBuffer
argument_list|,
literal|0
argument_list|,
name|bufferLength
argument_list|)
expr_stmt|;
name|buffer
operator|=
name|newBuffer
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// shift token to front
name|System
operator|.
name|arraycopy
argument_list|(
name|buffer
argument_list|,
name|tokenStart
argument_list|,
name|buffer
argument_list|,
literal|0
argument_list|,
name|newPosition
argument_list|)
expr_stmt|;
block|}
name|bufferLength
operator|=
name|newPosition
expr_stmt|;
comment|// update state
name|bufferPosition
operator|=
name|newPosition
expr_stmt|;
name|bufferStart
operator|+=
name|tokenStart
expr_stmt|;
name|tokenStart
operator|=
literal|0
expr_stmt|;
name|int
name|charsRead
init|=
comment|// fill space in buffer
name|input
operator|.
name|read
argument_list|(
name|buffer
argument_list|,
name|newPosition
argument_list|,
name|buffer
operator|.
name|length
operator|-
name|newPosition
argument_list|)
decl_stmt|;
if|if
condition|(
name|charsRead
operator|==
operator|-
literal|1
condition|)
throw|throw
operator|new
name|IOException
argument_list|(
literal|"read past eof"
argument_list|)
throw|;
else|else
name|bufferLength
operator|+=
name|charsRead
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|BeginToken
specifier|public
specifier|final
name|char
name|BeginToken
parameter_list|()
throws|throws
name|IOException
block|{
name|tokenStart
operator|=
name|bufferPosition
expr_stmt|;
return|return
name|readChar
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|backup
specifier|public
specifier|final
name|void
name|backup
parameter_list|(
name|int
name|amount
parameter_list|)
block|{
name|bufferPosition
operator|-=
name|amount
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|GetImage
specifier|public
specifier|final
name|String
name|GetImage
parameter_list|()
block|{
return|return
operator|new
name|String
argument_list|(
name|buffer
argument_list|,
name|tokenStart
argument_list|,
name|bufferPosition
operator|-
name|tokenStart
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|GetSuffix
specifier|public
specifier|final
name|char
index|[]
name|GetSuffix
parameter_list|(
name|int
name|len
parameter_list|)
block|{
name|char
index|[]
name|value
init|=
operator|new
name|char
index|[
name|len
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|buffer
argument_list|,
name|bufferPosition
operator|-
name|len
argument_list|,
name|value
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
expr_stmt|;
return|return
name|value
return|;
block|}
annotation|@
name|Override
DECL|method|Done
specifier|public
specifier|final
name|void
name|Done
parameter_list|()
block|{
try|try
block|{
name|input
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{     }
block|}
annotation|@
name|Override
DECL|method|getColumn
specifier|public
specifier|final
name|int
name|getColumn
parameter_list|()
block|{
return|return
name|bufferStart
operator|+
name|bufferPosition
return|;
block|}
annotation|@
name|Override
DECL|method|getLine
specifier|public
specifier|final
name|int
name|getLine
parameter_list|()
block|{
return|return
literal|1
return|;
block|}
annotation|@
name|Override
DECL|method|getEndColumn
specifier|public
specifier|final
name|int
name|getEndColumn
parameter_list|()
block|{
return|return
name|bufferStart
operator|+
name|bufferPosition
return|;
block|}
annotation|@
name|Override
DECL|method|getEndLine
specifier|public
specifier|final
name|int
name|getEndLine
parameter_list|()
block|{
return|return
literal|1
return|;
block|}
annotation|@
name|Override
DECL|method|getBeginColumn
specifier|public
specifier|final
name|int
name|getBeginColumn
parameter_list|()
block|{
return|return
name|bufferStart
operator|+
name|tokenStart
return|;
block|}
annotation|@
name|Override
DECL|method|getBeginLine
specifier|public
specifier|final
name|int
name|getBeginLine
parameter_list|()
block|{
return|return
literal|1
return|;
block|}
block|}
end_class
end_unit
