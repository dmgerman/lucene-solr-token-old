begin_unit
begin_package
DECL|package|org.apache.lucene.queryparser.flexible.precedence
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryparser
operator|.
name|flexible
operator|.
name|precedence
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import
begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DateFormat
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|GregorianCalendar
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|*
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|OffsetAttribute
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|CharTermAttribute
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|DateTools
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryparser
operator|.
name|flexible
operator|.
name|core
operator|.
name|QueryNodeException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryparser
operator|.
name|flexible
operator|.
name|core
operator|.
name|QueryNodeParseException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryparser
operator|.
name|flexible
operator|.
name|standard
operator|.
name|config
operator|.
name|StandardQueryConfigHandler
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryparser
operator|.
name|flexible
operator|.
name|standard
operator|.
name|parser
operator|.
name|ParseException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryparser
operator|.
name|util
operator|.
name|QueryParserTestBase
import|;
end_import
begin_comment
comment|// javadocs
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|FuzzyQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|PhraseQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|PrefixQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TermQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TermRangeQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|WildcardQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|automaton
operator|.
name|BasicAutomata
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|automaton
operator|.
name|CharacterRunAutomaton
import|;
end_import
begin_comment
comment|/**  *<p>  * This test case tests {@link PrecedenceQueryParser}.  *</p>  *<p>  * It contains all tests from {@link QueryParserTestBase}  * with some adjusted to fit the precedence requirement, plus some precedence test cases.  *</p>  *   * @see QueryParserTestBase  */
end_comment
begin_comment
comment|//TODO: refactor this to actually extend that class, overriding the tests
end_comment
begin_comment
comment|//that it adjusts to fit the precedence requirement, adding its extra tests.
end_comment
begin_class
DECL|class|TestPrecedenceQueryParser
specifier|public
class|class
name|TestPrecedenceQueryParser
extends|extends
name|LuceneTestCase
block|{
DECL|field|qpAnalyzer
specifier|public
specifier|static
name|Analyzer
name|qpAnalyzer
init|=
operator|new
name|QPTestAnalyzer
argument_list|()
decl_stmt|;
DECL|class|QPTestFilter
specifier|public
specifier|static
specifier|final
class|class
name|QPTestFilter
extends|extends
name|TokenFilter
block|{
comment|/**      * Filter which discards the token 'stop' and which expands the token      * 'phrase' into 'phrase1 phrase2'      */
DECL|method|QPTestFilter
specifier|public
name|QPTestFilter
parameter_list|(
name|TokenStream
name|in
parameter_list|)
block|{
name|super
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
DECL|field|inPhrase
specifier|private
name|boolean
name|inPhrase
init|=
literal|false
decl_stmt|;
DECL|field|savedStart
specifier|private
name|int
name|savedStart
init|=
literal|0
decl_stmt|;
DECL|field|savedEnd
specifier|private
name|int
name|savedEnd
init|=
literal|0
decl_stmt|;
DECL|field|termAtt
specifier|private
specifier|final
name|CharTermAttribute
name|termAtt
init|=
name|addAttribute
argument_list|(
name|CharTermAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|offsetAtt
specifier|private
specifier|final
name|OffsetAttribute
name|offsetAtt
init|=
name|addAttribute
argument_list|(
name|OffsetAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Override
DECL|method|incrementToken
specifier|public
name|boolean
name|incrementToken
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|inPhrase
condition|)
block|{
name|inPhrase
operator|=
literal|false
expr_stmt|;
name|termAtt
operator|.
name|setEmpty
argument_list|()
operator|.
name|append
argument_list|(
literal|"phrase2"
argument_list|)
expr_stmt|;
name|offsetAtt
operator|.
name|setOffset
argument_list|(
name|savedStart
argument_list|,
name|savedEnd
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
while|while
condition|(
name|input
operator|.
name|incrementToken
argument_list|()
condition|)
if|if
condition|(
name|termAtt
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
literal|"phrase"
argument_list|)
condition|)
block|{
name|inPhrase
operator|=
literal|true
expr_stmt|;
name|savedStart
operator|=
name|offsetAtt
operator|.
name|startOffset
argument_list|()
expr_stmt|;
name|savedEnd
operator|=
name|offsetAtt
operator|.
name|endOffset
argument_list|()
expr_stmt|;
name|termAtt
operator|.
name|setEmpty
argument_list|()
operator|.
name|append
argument_list|(
literal|"phrase1"
argument_list|)
expr_stmt|;
name|offsetAtt
operator|.
name|setOffset
argument_list|(
name|savedStart
argument_list|,
name|savedEnd
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|termAtt
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
literal|"stop"
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|reset
specifier|public
name|void
name|reset
parameter_list|()
throws|throws
name|IOException
block|{
name|super
operator|.
name|reset
argument_list|()
expr_stmt|;
name|this
operator|.
name|inPhrase
operator|=
literal|false
expr_stmt|;
name|this
operator|.
name|savedStart
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|savedEnd
operator|=
literal|0
expr_stmt|;
block|}
block|}
DECL|class|QPTestAnalyzer
specifier|public
specifier|static
specifier|final
class|class
name|QPTestAnalyzer
extends|extends
name|Analyzer
block|{
comment|/** Filters MockTokenizer with StopFilter. */
annotation|@
name|Override
DECL|method|createComponents
specifier|public
specifier|final
name|TokenStreamComponents
name|createComponents
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|Reader
name|reader
parameter_list|)
block|{
name|Tokenizer
name|tokenizer
init|=
operator|new
name|MockTokenizer
argument_list|(
name|reader
argument_list|,
name|MockTokenizer
operator|.
name|SIMPLE
argument_list|,
literal|true
argument_list|)
decl_stmt|;
return|return
operator|new
name|TokenStreamComponents
argument_list|(
name|tokenizer
argument_list|,
operator|new
name|QPTestFilter
argument_list|(
name|tokenizer
argument_list|)
argument_list|)
return|;
block|}
block|}
DECL|field|originalMaxClauses
specifier|private
name|int
name|originalMaxClauses
decl_stmt|;
annotation|@
name|Override
DECL|method|setUp
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|originalMaxClauses
operator|=
name|BooleanQuery
operator|.
name|getMaxClauseCount
argument_list|()
expr_stmt|;
block|}
DECL|method|getParser
specifier|public
name|PrecedenceQueryParser
name|getParser
parameter_list|(
name|Analyzer
name|a
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|a
operator|==
literal|null
condition|)
name|a
operator|=
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|,
name|MockTokenizer
operator|.
name|SIMPLE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|PrecedenceQueryParser
name|qp
init|=
operator|new
name|PrecedenceQueryParser
argument_list|()
decl_stmt|;
name|qp
operator|.
name|setAnalyzer
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|qp
operator|.
name|setDefaultOperator
argument_list|(
name|StandardQueryConfigHandler
operator|.
name|Operator
operator|.
name|OR
argument_list|)
expr_stmt|;
return|return
name|qp
return|;
block|}
DECL|method|getQuery
specifier|public
name|Query
name|getQuery
parameter_list|(
name|String
name|query
parameter_list|,
name|Analyzer
name|a
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|getParser
argument_list|(
name|a
argument_list|)
operator|.
name|parse
argument_list|(
name|query
argument_list|,
literal|"field"
argument_list|)
return|;
block|}
DECL|method|assertQueryEquals
specifier|public
name|void
name|assertQueryEquals
parameter_list|(
name|String
name|query
parameter_list|,
name|Analyzer
name|a
parameter_list|,
name|String
name|result
parameter_list|)
throws|throws
name|Exception
block|{
name|Query
name|q
init|=
name|getQuery
argument_list|(
name|query
argument_list|,
name|a
argument_list|)
decl_stmt|;
name|String
name|s
init|=
name|q
operator|.
name|toString
argument_list|(
literal|"field"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|s
operator|.
name|equals
argument_list|(
name|result
argument_list|)
condition|)
block|{
name|fail
argument_list|(
literal|"Query /"
operator|+
name|query
operator|+
literal|"/ yielded /"
operator|+
name|s
operator|+
literal|"/, expecting /"
operator|+
name|result
operator|+
literal|"/"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|assertWildcardQueryEquals
specifier|public
name|void
name|assertWildcardQueryEquals
parameter_list|(
name|String
name|query
parameter_list|,
name|boolean
name|lowercase
parameter_list|,
name|String
name|result
parameter_list|)
throws|throws
name|Exception
block|{
name|PrecedenceQueryParser
name|qp
init|=
name|getParser
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|qp
operator|.
name|setLowercaseExpandedTerms
argument_list|(
name|lowercase
argument_list|)
expr_stmt|;
name|Query
name|q
init|=
name|qp
operator|.
name|parse
argument_list|(
name|query
argument_list|,
literal|"field"
argument_list|)
decl_stmt|;
name|String
name|s
init|=
name|q
operator|.
name|toString
argument_list|(
literal|"field"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|s
operator|.
name|equals
argument_list|(
name|result
argument_list|)
condition|)
block|{
name|fail
argument_list|(
literal|"WildcardQuery /"
operator|+
name|query
operator|+
literal|"/ yielded /"
operator|+
name|s
operator|+
literal|"/, expecting /"
operator|+
name|result
operator|+
literal|"/"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|assertWildcardQueryEquals
specifier|public
name|void
name|assertWildcardQueryEquals
parameter_list|(
name|String
name|query
parameter_list|,
name|String
name|result
parameter_list|)
throws|throws
name|Exception
block|{
name|PrecedenceQueryParser
name|qp
init|=
name|getParser
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|Query
name|q
init|=
name|qp
operator|.
name|parse
argument_list|(
name|query
argument_list|,
literal|"field"
argument_list|)
decl_stmt|;
name|String
name|s
init|=
name|q
operator|.
name|toString
argument_list|(
literal|"field"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|s
operator|.
name|equals
argument_list|(
name|result
argument_list|)
condition|)
block|{
name|fail
argument_list|(
literal|"WildcardQuery /"
operator|+
name|query
operator|+
literal|"/ yielded /"
operator|+
name|s
operator|+
literal|"/, expecting /"
operator|+
name|result
operator|+
literal|"/"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getQueryDOA
specifier|public
name|Query
name|getQueryDOA
parameter_list|(
name|String
name|query
parameter_list|,
name|Analyzer
name|a
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|a
operator|==
literal|null
condition|)
name|a
operator|=
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|,
name|MockTokenizer
operator|.
name|SIMPLE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|PrecedenceQueryParser
name|qp
init|=
operator|new
name|PrecedenceQueryParser
argument_list|()
decl_stmt|;
name|qp
operator|.
name|setAnalyzer
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|qp
operator|.
name|setDefaultOperator
argument_list|(
name|StandardQueryConfigHandler
operator|.
name|Operator
operator|.
name|AND
argument_list|)
expr_stmt|;
return|return
name|qp
operator|.
name|parse
argument_list|(
name|query
argument_list|,
literal|"field"
argument_list|)
return|;
block|}
DECL|method|assertQueryEqualsDOA
specifier|public
name|void
name|assertQueryEqualsDOA
parameter_list|(
name|String
name|query
parameter_list|,
name|Analyzer
name|a
parameter_list|,
name|String
name|result
parameter_list|)
throws|throws
name|Exception
block|{
name|Query
name|q
init|=
name|getQueryDOA
argument_list|(
name|query
argument_list|,
name|a
argument_list|)
decl_stmt|;
name|String
name|s
init|=
name|q
operator|.
name|toString
argument_list|(
literal|"field"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|s
operator|.
name|equals
argument_list|(
name|result
argument_list|)
condition|)
block|{
name|fail
argument_list|(
literal|"Query /"
operator|+
name|query
operator|+
literal|"/ yielded /"
operator|+
name|s
operator|+
literal|"/, expecting /"
operator|+
name|result
operator|+
literal|"/"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testSimple
specifier|public
name|void
name|testSimple
parameter_list|()
throws|throws
name|Exception
block|{
name|assertQueryEquals
argument_list|(
literal|"term term term"
argument_list|,
literal|null
argument_list|,
literal|"term term term"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"tÃ¼rm term term"
argument_list|,
literal|null
argument_list|,
literal|"tÃ¼rm term term"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"Ã¼mlaut"
argument_list|,
literal|null
argument_list|,
literal|"Ã¼mlaut"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"a AND b"
argument_list|,
literal|null
argument_list|,
literal|"+a +b"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"(a AND b)"
argument_list|,
literal|null
argument_list|,
literal|"+a +b"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"c OR (a AND b)"
argument_list|,
literal|null
argument_list|,
literal|"c (+a +b)"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"a AND NOT b"
argument_list|,
literal|null
argument_list|,
literal|"+a -b"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"a AND -b"
argument_list|,
literal|null
argument_list|,
literal|"+a -b"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"a AND !b"
argument_list|,
literal|null
argument_list|,
literal|"+a -b"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"a&& b"
argument_list|,
literal|null
argument_list|,
literal|"+a +b"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"a&& ! b"
argument_list|,
literal|null
argument_list|,
literal|"+a -b"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"a OR b"
argument_list|,
literal|null
argument_list|,
literal|"a b"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"a || b"
argument_list|,
literal|null
argument_list|,
literal|"a b"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"+term -term term"
argument_list|,
literal|null
argument_list|,
literal|"+term -term term"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"foo:term AND field:anotherTerm"
argument_list|,
literal|null
argument_list|,
literal|"+foo:term +anotherterm"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"term AND \"phrase phrase\""
argument_list|,
literal|null
argument_list|,
literal|"+term +\"phrase phrase\""
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"\"hello there\""
argument_list|,
literal|null
argument_list|,
literal|"\"hello there\""
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|getQuery
argument_list|(
literal|"a AND b"
argument_list|,
literal|null
argument_list|)
operator|instanceof
name|BooleanQuery
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|getQuery
argument_list|(
literal|"hello"
argument_list|,
literal|null
argument_list|)
operator|instanceof
name|TermQuery
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|getQuery
argument_list|(
literal|"\"hello there\""
argument_list|,
literal|null
argument_list|)
operator|instanceof
name|PhraseQuery
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"germ term^2.0"
argument_list|,
literal|null
argument_list|,
literal|"germ term^2.0"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"(term)^2.0"
argument_list|,
literal|null
argument_list|,
literal|"term^2.0"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"(germ term)^2.0"
argument_list|,
literal|null
argument_list|,
literal|"(germ term)^2.0"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"term^2.0"
argument_list|,
literal|null
argument_list|,
literal|"term^2.0"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"term^2"
argument_list|,
literal|null
argument_list|,
literal|"term^2.0"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"\"germ term\"^2.0"
argument_list|,
literal|null
argument_list|,
literal|"\"germ term\"^2.0"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"\"term germ\"^2"
argument_list|,
literal|null
argument_list|,
literal|"\"term germ\"^2.0"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"(foo OR bar) AND (baz OR boo)"
argument_list|,
literal|null
argument_list|,
literal|"+(foo bar) +(baz boo)"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"((a OR b) AND NOT c) OR d"
argument_list|,
literal|null
argument_list|,
literal|"(+(a b) -c) d"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"+(apple \"steve jobs\") -(foo bar baz)"
argument_list|,
literal|null
argument_list|,
literal|"+(apple \"steve jobs\") -(foo bar baz)"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"+title:(dog OR cat) -author:\"bob dole\""
argument_list|,
literal|null
argument_list|,
literal|"+(title:dog title:cat) -author:\"bob dole\""
argument_list|)
expr_stmt|;
name|PrecedenceQueryParser
name|qp
init|=
operator|new
name|PrecedenceQueryParser
argument_list|()
decl_stmt|;
name|qp
operator|.
name|setAnalyzer
argument_list|(
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// make sure OR is the default:
name|assertEquals
argument_list|(
name|StandardQueryConfigHandler
operator|.
name|Operator
operator|.
name|OR
argument_list|,
name|qp
operator|.
name|getDefaultOperator
argument_list|()
argument_list|)
expr_stmt|;
name|qp
operator|.
name|setDefaultOperator
argument_list|(
name|StandardQueryConfigHandler
operator|.
name|Operator
operator|.
name|AND
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|StandardQueryConfigHandler
operator|.
name|Operator
operator|.
name|AND
argument_list|,
name|qp
operator|.
name|getDefaultOperator
argument_list|()
argument_list|)
expr_stmt|;
name|qp
operator|.
name|setDefaultOperator
argument_list|(
name|StandardQueryConfigHandler
operator|.
name|Operator
operator|.
name|OR
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|StandardQueryConfigHandler
operator|.
name|Operator
operator|.
name|OR
argument_list|,
name|qp
operator|.
name|getDefaultOperator
argument_list|()
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"a OR !b"
argument_list|,
literal|null
argument_list|,
literal|"a -b"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"a OR ! b"
argument_list|,
literal|null
argument_list|,
literal|"a -b"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"a OR -b"
argument_list|,
literal|null
argument_list|,
literal|"a -b"
argument_list|)
expr_stmt|;
block|}
DECL|method|testPunct
specifier|public
name|void
name|testPunct
parameter_list|()
throws|throws
name|Exception
block|{
name|Analyzer
name|a
init|=
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|,
name|MockTokenizer
operator|.
name|WHITESPACE
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertQueryEquals
argument_list|(
literal|"a&b"
argument_list|,
name|a
argument_list|,
literal|"a&b"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"a&&b"
argument_list|,
name|a
argument_list|,
literal|"a&&b"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|".NET"
argument_list|,
name|a
argument_list|,
literal|".NET"
argument_list|)
expr_stmt|;
block|}
DECL|method|testSlop
specifier|public
name|void
name|testSlop
parameter_list|()
throws|throws
name|Exception
block|{
name|assertQueryEquals
argument_list|(
literal|"\"term germ\"~2"
argument_list|,
literal|null
argument_list|,
literal|"\"term germ\"~2"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"\"term germ\"~2 flork"
argument_list|,
literal|null
argument_list|,
literal|"\"term germ\"~2 flork"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"\"term\"~2"
argument_list|,
literal|null
argument_list|,
literal|"term"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"\" \"~2 germ"
argument_list|,
literal|null
argument_list|,
literal|"germ"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"\"term germ\"~2^2"
argument_list|,
literal|null
argument_list|,
literal|"\"term germ\"~2^2.0"
argument_list|)
expr_stmt|;
block|}
DECL|method|testNumber
specifier|public
name|void
name|testNumber
parameter_list|()
throws|throws
name|Exception
block|{
comment|// The numbers go away because SimpleAnalzyer ignores them
name|assertQueryEquals
argument_list|(
literal|"3"
argument_list|,
literal|null
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"term 1.0 1 2"
argument_list|,
literal|null
argument_list|,
literal|"term"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"term term1 term2"
argument_list|,
literal|null
argument_list|,
literal|"term term term"
argument_list|)
expr_stmt|;
name|Analyzer
name|a
init|=
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
decl_stmt|;
name|assertQueryEquals
argument_list|(
literal|"3"
argument_list|,
name|a
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"term 1.0 1 2"
argument_list|,
name|a
argument_list|,
literal|"term 1.0 1 2"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"term term1 term2"
argument_list|,
name|a
argument_list|,
literal|"term term1 term2"
argument_list|)
expr_stmt|;
block|}
DECL|method|testWildcard
specifier|public
name|void
name|testWildcard
parameter_list|()
throws|throws
name|Exception
block|{
name|assertQueryEquals
argument_list|(
literal|"term*"
argument_list|,
literal|null
argument_list|,
literal|"term*"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"term*^2"
argument_list|,
literal|null
argument_list|,
literal|"term*^2.0"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"term~"
argument_list|,
literal|null
argument_list|,
literal|"term~2"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"term~0.7"
argument_list|,
literal|null
argument_list|,
literal|"term~1"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"term~^3"
argument_list|,
literal|null
argument_list|,
literal|"term~2^3.0"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"term^3~"
argument_list|,
literal|null
argument_list|,
literal|"term~2^3.0"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"term*germ"
argument_list|,
literal|null
argument_list|,
literal|"term*germ"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"term*germ^3"
argument_list|,
literal|null
argument_list|,
literal|"term*germ^3.0"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|getQuery
argument_list|(
literal|"term*"
argument_list|,
literal|null
argument_list|)
operator|instanceof
name|PrefixQuery
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|getQuery
argument_list|(
literal|"term*^2"
argument_list|,
literal|null
argument_list|)
operator|instanceof
name|PrefixQuery
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|getQuery
argument_list|(
literal|"term~"
argument_list|,
literal|null
argument_list|)
operator|instanceof
name|FuzzyQuery
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|getQuery
argument_list|(
literal|"term~0.7"
argument_list|,
literal|null
argument_list|)
operator|instanceof
name|FuzzyQuery
argument_list|)
expr_stmt|;
name|FuzzyQuery
name|fq
init|=
operator|(
name|FuzzyQuery
operator|)
name|getQuery
argument_list|(
literal|"term~0.7"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|fq
operator|.
name|getMaxEdits
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|FuzzyQuery
operator|.
name|defaultPrefixLength
argument_list|,
name|fq
operator|.
name|getPrefixLength
argument_list|()
argument_list|)
expr_stmt|;
name|fq
operator|=
operator|(
name|FuzzyQuery
operator|)
name|getQuery
argument_list|(
literal|"term~"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|fq
operator|.
name|getMaxEdits
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|FuzzyQuery
operator|.
name|defaultPrefixLength
argument_list|,
name|fq
operator|.
name|getPrefixLength
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|getQuery
argument_list|(
literal|"term~1.1"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// value> 1, throws exception
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|pe
parameter_list|)
block|{
comment|// expected exception
block|}
name|assertTrue
argument_list|(
name|getQuery
argument_list|(
literal|"term*germ"
argument_list|,
literal|null
argument_list|)
operator|instanceof
name|WildcardQuery
argument_list|)
expr_stmt|;
comment|/*      * Tests to see that wild card terms are (or are not) properly lower-cased      * with propery parser configuration      */
comment|// First prefix queries:
comment|// by default, convert to lowercase:
name|assertWildcardQueryEquals
argument_list|(
literal|"Term*"
argument_list|,
literal|true
argument_list|,
literal|"term*"
argument_list|)
expr_stmt|;
comment|// explicitly set lowercase:
name|assertWildcardQueryEquals
argument_list|(
literal|"term*"
argument_list|,
literal|true
argument_list|,
literal|"term*"
argument_list|)
expr_stmt|;
name|assertWildcardQueryEquals
argument_list|(
literal|"Term*"
argument_list|,
literal|true
argument_list|,
literal|"term*"
argument_list|)
expr_stmt|;
name|assertWildcardQueryEquals
argument_list|(
literal|"TERM*"
argument_list|,
literal|true
argument_list|,
literal|"term*"
argument_list|)
expr_stmt|;
comment|// explicitly disable lowercase conversion:
name|assertWildcardQueryEquals
argument_list|(
literal|"term*"
argument_list|,
literal|false
argument_list|,
literal|"term*"
argument_list|)
expr_stmt|;
name|assertWildcardQueryEquals
argument_list|(
literal|"Term*"
argument_list|,
literal|false
argument_list|,
literal|"Term*"
argument_list|)
expr_stmt|;
name|assertWildcardQueryEquals
argument_list|(
literal|"TERM*"
argument_list|,
literal|false
argument_list|,
literal|"TERM*"
argument_list|)
expr_stmt|;
comment|// Then 'full' wildcard queries:
comment|// by default, convert to lowercase:
name|assertWildcardQueryEquals
argument_list|(
literal|"Te?m"
argument_list|,
literal|"te?m"
argument_list|)
expr_stmt|;
comment|// explicitly set lowercase:
name|assertWildcardQueryEquals
argument_list|(
literal|"te?m"
argument_list|,
literal|true
argument_list|,
literal|"te?m"
argument_list|)
expr_stmt|;
name|assertWildcardQueryEquals
argument_list|(
literal|"Te?m"
argument_list|,
literal|true
argument_list|,
literal|"te?m"
argument_list|)
expr_stmt|;
name|assertWildcardQueryEquals
argument_list|(
literal|"TE?M"
argument_list|,
literal|true
argument_list|,
literal|"te?m"
argument_list|)
expr_stmt|;
name|assertWildcardQueryEquals
argument_list|(
literal|"Te?m*gerM"
argument_list|,
literal|true
argument_list|,
literal|"te?m*germ"
argument_list|)
expr_stmt|;
comment|// explicitly disable lowercase conversion:
name|assertWildcardQueryEquals
argument_list|(
literal|"te?m"
argument_list|,
literal|false
argument_list|,
literal|"te?m"
argument_list|)
expr_stmt|;
name|assertWildcardQueryEquals
argument_list|(
literal|"Te?m"
argument_list|,
literal|false
argument_list|,
literal|"Te?m"
argument_list|)
expr_stmt|;
name|assertWildcardQueryEquals
argument_list|(
literal|"TE?M"
argument_list|,
literal|false
argument_list|,
literal|"TE?M"
argument_list|)
expr_stmt|;
name|assertWildcardQueryEquals
argument_list|(
literal|"Te?m*gerM"
argument_list|,
literal|false
argument_list|,
literal|"Te?m*gerM"
argument_list|)
expr_stmt|;
comment|// Fuzzy queries:
name|assertWildcardQueryEquals
argument_list|(
literal|"Term~"
argument_list|,
literal|"term~2"
argument_list|)
expr_stmt|;
name|assertWildcardQueryEquals
argument_list|(
literal|"Term~"
argument_list|,
literal|true
argument_list|,
literal|"term~2"
argument_list|)
expr_stmt|;
name|assertWildcardQueryEquals
argument_list|(
literal|"Term~"
argument_list|,
literal|false
argument_list|,
literal|"Term~2"
argument_list|)
expr_stmt|;
comment|// Range queries:
name|assertWildcardQueryEquals
argument_list|(
literal|"[A TO C]"
argument_list|,
literal|"[a TO c]"
argument_list|)
expr_stmt|;
name|assertWildcardQueryEquals
argument_list|(
literal|"[A TO C]"
argument_list|,
literal|true
argument_list|,
literal|"[a TO c]"
argument_list|)
expr_stmt|;
name|assertWildcardQueryEquals
argument_list|(
literal|"[A TO C]"
argument_list|,
literal|false
argument_list|,
literal|"[A TO C]"
argument_list|)
expr_stmt|;
block|}
DECL|method|testQPA
specifier|public
name|void
name|testQPA
parameter_list|()
throws|throws
name|Exception
block|{
name|assertQueryEquals
argument_list|(
literal|"term term term"
argument_list|,
name|qpAnalyzer
argument_list|,
literal|"term term term"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"term +stop term"
argument_list|,
name|qpAnalyzer
argument_list|,
literal|"term term"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"term -stop term"
argument_list|,
name|qpAnalyzer
argument_list|,
literal|"term term"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"drop AND stop AND roll"
argument_list|,
name|qpAnalyzer
argument_list|,
literal|"+drop +roll"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"term phrase term"
argument_list|,
name|qpAnalyzer
argument_list|,
literal|"term (phrase1 phrase2) term"
argument_list|)
expr_stmt|;
comment|// note the parens in this next assertion differ from the original
comment|// QueryParser behavior
name|assertQueryEquals
argument_list|(
literal|"term AND NOT phrase term"
argument_list|,
name|qpAnalyzer
argument_list|,
literal|"(+term -(phrase1 phrase2)) term"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"stop"
argument_list|,
name|qpAnalyzer
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"stop OR stop AND stop"
argument_list|,
name|qpAnalyzer
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|getQuery
argument_list|(
literal|"term term term"
argument_list|,
name|qpAnalyzer
argument_list|)
operator|instanceof
name|BooleanQuery
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|getQuery
argument_list|(
literal|"term +stop"
argument_list|,
name|qpAnalyzer
argument_list|)
operator|instanceof
name|TermQuery
argument_list|)
expr_stmt|;
block|}
DECL|method|testRange
specifier|public
name|void
name|testRange
parameter_list|()
throws|throws
name|Exception
block|{
name|assertQueryEquals
argument_list|(
literal|"[ a TO z]"
argument_list|,
literal|null
argument_list|,
literal|"[a TO z]"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|getQuery
argument_list|(
literal|"[ a TO z]"
argument_list|,
literal|null
argument_list|)
operator|instanceof
name|TermRangeQuery
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"[ a TO z ]"
argument_list|,
literal|null
argument_list|,
literal|"[a TO z]"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"{ a TO z}"
argument_list|,
literal|null
argument_list|,
literal|"{a TO z}"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"{ a TO z }"
argument_list|,
literal|null
argument_list|,
literal|"{a TO z}"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"{ a TO z }^2.0"
argument_list|,
literal|null
argument_list|,
literal|"{a TO z}^2.0"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"[ a TO z] OR bar"
argument_list|,
literal|null
argument_list|,
literal|"[a TO z] bar"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"[ a TO z] AND bar"
argument_list|,
literal|null
argument_list|,
literal|"+[a TO z] +bar"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"( bar blar { a TO z}) "
argument_list|,
literal|null
argument_list|,
literal|"bar blar {a TO z}"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"gack ( bar blar { a TO z}) "
argument_list|,
literal|null
argument_list|,
literal|"gack (bar blar {a TO z})"
argument_list|)
expr_stmt|;
block|}
DECL|method|escapeDateString
specifier|private
name|String
name|escapeDateString
parameter_list|(
name|String
name|s
parameter_list|)
block|{
if|if
condition|(
name|s
operator|.
name|contains
argument_list|(
literal|" "
argument_list|)
condition|)
block|{
return|return
literal|"\""
operator|+
name|s
operator|+
literal|"\""
return|;
block|}
else|else
block|{
return|return
name|s
return|;
block|}
block|}
DECL|method|getDate
specifier|public
name|String
name|getDate
parameter_list|(
name|String
name|s
parameter_list|)
throws|throws
name|Exception
block|{
name|DateFormat
name|df
init|=
name|DateFormat
operator|.
name|getDateInstance
argument_list|(
name|DateFormat
operator|.
name|SHORT
argument_list|)
decl_stmt|;
return|return
name|DateTools
operator|.
name|dateToString
argument_list|(
name|df
operator|.
name|parse
argument_list|(
name|s
argument_list|)
argument_list|,
name|DateTools
operator|.
name|Resolution
operator|.
name|DAY
argument_list|)
return|;
block|}
DECL|method|getLocalizedDate
specifier|private
name|String
name|getLocalizedDate
parameter_list|(
name|int
name|year
parameter_list|,
name|int
name|month
parameter_list|,
name|int
name|day
parameter_list|,
name|boolean
name|extendLastDate
parameter_list|)
block|{
name|DateFormat
name|df
init|=
name|DateFormat
operator|.
name|getDateInstance
argument_list|(
name|DateFormat
operator|.
name|SHORT
argument_list|)
decl_stmt|;
name|Calendar
name|calendar
init|=
operator|new
name|GregorianCalendar
argument_list|()
decl_stmt|;
name|calendar
operator|.
name|set
argument_list|(
name|year
argument_list|,
name|month
argument_list|,
name|day
argument_list|)
expr_stmt|;
if|if
condition|(
name|extendLastDate
condition|)
block|{
name|calendar
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|HOUR_OF_DAY
argument_list|,
literal|23
argument_list|)
expr_stmt|;
name|calendar
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|MINUTE
argument_list|,
literal|59
argument_list|)
expr_stmt|;
name|calendar
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|SECOND
argument_list|,
literal|59
argument_list|)
expr_stmt|;
name|calendar
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|MILLISECOND
argument_list|,
literal|999
argument_list|)
expr_stmt|;
block|}
return|return
name|df
operator|.
name|format
argument_list|(
name|calendar
operator|.
name|getTime
argument_list|()
argument_list|)
return|;
block|}
DECL|method|testDateRange
specifier|public
name|void
name|testDateRange
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|startDate
init|=
name|getLocalizedDate
argument_list|(
literal|2002
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|String
name|endDate
init|=
name|getLocalizedDate
argument_list|(
literal|2002
argument_list|,
literal|1
argument_list|,
literal|4
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Calendar
name|endDateExpected
init|=
operator|new
name|GregorianCalendar
argument_list|()
decl_stmt|;
name|endDateExpected
operator|.
name|set
argument_list|(
literal|2002
argument_list|,
literal|1
argument_list|,
literal|4
argument_list|,
literal|23
argument_list|,
literal|59
argument_list|,
literal|59
argument_list|)
expr_stmt|;
name|endDateExpected
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|MILLISECOND
argument_list|,
literal|999
argument_list|)
expr_stmt|;
specifier|final
name|String
name|defaultField
init|=
literal|"default"
decl_stmt|;
specifier|final
name|String
name|monthField
init|=
literal|"month"
decl_stmt|;
specifier|final
name|String
name|hourField
init|=
literal|"hour"
decl_stmt|;
name|PrecedenceQueryParser
name|qp
init|=
operator|new
name|PrecedenceQueryParser
argument_list|(
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|CharSequence
argument_list|,
name|DateTools
operator|.
name|Resolution
argument_list|>
name|fieldMap
init|=
operator|new
name|HashMap
argument_list|<
name|CharSequence
argument_list|,
name|DateTools
operator|.
name|Resolution
argument_list|>
argument_list|()
decl_stmt|;
comment|// set a field specific date resolution
name|fieldMap
operator|.
name|put
argument_list|(
name|monthField
argument_list|,
name|DateTools
operator|.
name|Resolution
operator|.
name|MONTH
argument_list|)
expr_stmt|;
name|qp
operator|.
name|setDateResolution
argument_list|(
name|fieldMap
argument_list|)
expr_stmt|;
comment|// set default date resolution to MILLISECOND
name|qp
operator|.
name|setDateResolution
argument_list|(
name|DateTools
operator|.
name|Resolution
operator|.
name|MILLISECOND
argument_list|)
expr_stmt|;
comment|// set second field specific date resolution
name|fieldMap
operator|.
name|put
argument_list|(
name|hourField
argument_list|,
name|DateTools
operator|.
name|Resolution
operator|.
name|HOUR
argument_list|)
expr_stmt|;
name|qp
operator|.
name|setDateResolution
argument_list|(
name|fieldMap
argument_list|)
expr_stmt|;
comment|// for this field no field specific date resolution has been set,
comment|// so verify if the default resolution is used
name|assertDateRangeQueryEquals
argument_list|(
name|qp
argument_list|,
name|defaultField
argument_list|,
name|startDate
argument_list|,
name|endDate
argument_list|,
name|endDateExpected
operator|.
name|getTime
argument_list|()
argument_list|,
name|DateTools
operator|.
name|Resolution
operator|.
name|MILLISECOND
argument_list|)
expr_stmt|;
comment|// verify if field specific date resolutions are used for these two fields
name|assertDateRangeQueryEquals
argument_list|(
name|qp
argument_list|,
name|monthField
argument_list|,
name|startDate
argument_list|,
name|endDate
argument_list|,
name|endDateExpected
operator|.
name|getTime
argument_list|()
argument_list|,
name|DateTools
operator|.
name|Resolution
operator|.
name|MONTH
argument_list|)
expr_stmt|;
name|assertDateRangeQueryEquals
argument_list|(
name|qp
argument_list|,
name|hourField
argument_list|,
name|startDate
argument_list|,
name|endDate
argument_list|,
name|endDateExpected
operator|.
name|getTime
argument_list|()
argument_list|,
name|DateTools
operator|.
name|Resolution
operator|.
name|HOUR
argument_list|)
expr_stmt|;
block|}
comment|/** for testing DateTools support */
DECL|method|getDate
specifier|private
name|String
name|getDate
parameter_list|(
name|String
name|s
parameter_list|,
name|DateTools
operator|.
name|Resolution
name|resolution
parameter_list|)
throws|throws
name|Exception
block|{
name|DateFormat
name|df
init|=
name|DateFormat
operator|.
name|getDateInstance
argument_list|(
name|DateFormat
operator|.
name|SHORT
argument_list|)
decl_stmt|;
return|return
name|getDate
argument_list|(
name|df
operator|.
name|parse
argument_list|(
name|s
argument_list|)
argument_list|,
name|resolution
argument_list|)
return|;
block|}
comment|/** for testing DateTools support */
DECL|method|getDate
specifier|private
name|String
name|getDate
parameter_list|(
name|Date
name|d
parameter_list|,
name|DateTools
operator|.
name|Resolution
name|resolution
parameter_list|)
block|{
return|return
name|DateTools
operator|.
name|dateToString
argument_list|(
name|d
argument_list|,
name|resolution
argument_list|)
return|;
block|}
DECL|method|assertQueryEquals
specifier|public
name|void
name|assertQueryEquals
parameter_list|(
name|PrecedenceQueryParser
name|qp
parameter_list|,
name|String
name|field
parameter_list|,
name|String
name|query
parameter_list|,
name|String
name|result
parameter_list|)
throws|throws
name|Exception
block|{
name|Query
name|q
init|=
name|qp
operator|.
name|parse
argument_list|(
name|query
argument_list|,
name|field
argument_list|)
decl_stmt|;
name|String
name|s
init|=
name|q
operator|.
name|toString
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|s
operator|.
name|equals
argument_list|(
name|result
argument_list|)
condition|)
block|{
name|fail
argument_list|(
literal|"Query /"
operator|+
name|query
operator|+
literal|"/ yielded /"
operator|+
name|s
operator|+
literal|"/, expecting /"
operator|+
name|result
operator|+
literal|"/"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|assertDateRangeQueryEquals
specifier|public
name|void
name|assertDateRangeQueryEquals
parameter_list|(
name|PrecedenceQueryParser
name|qp
parameter_list|,
name|String
name|field
parameter_list|,
name|String
name|startDate
parameter_list|,
name|String
name|endDate
parameter_list|,
name|Date
name|endDateInclusive
parameter_list|,
name|DateTools
operator|.
name|Resolution
name|resolution
parameter_list|)
throws|throws
name|Exception
block|{
name|assertQueryEquals
argument_list|(
name|qp
argument_list|,
name|field
argument_list|,
name|field
operator|+
literal|":["
operator|+
name|escapeDateString
argument_list|(
name|startDate
argument_list|)
operator|+
literal|" TO "
operator|+
name|escapeDateString
argument_list|(
name|endDate
argument_list|)
operator|+
literal|"]"
argument_list|,
literal|"["
operator|+
name|getDate
argument_list|(
name|startDate
argument_list|,
name|resolution
argument_list|)
operator|+
literal|" TO "
operator|+
name|getDate
argument_list|(
name|endDateInclusive
argument_list|,
name|resolution
argument_list|)
operator|+
literal|"]"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
name|qp
argument_list|,
name|field
argument_list|,
name|field
operator|+
literal|":{"
operator|+
name|escapeDateString
argument_list|(
name|startDate
argument_list|)
operator|+
literal|" TO "
operator|+
name|escapeDateString
argument_list|(
name|endDate
argument_list|)
operator|+
literal|"}"
argument_list|,
literal|"{"
operator|+
name|getDate
argument_list|(
name|startDate
argument_list|,
name|resolution
argument_list|)
operator|+
literal|" TO "
operator|+
name|getDate
argument_list|(
name|endDate
argument_list|,
name|resolution
argument_list|)
operator|+
literal|"}"
argument_list|)
expr_stmt|;
block|}
DECL|method|testEscaped
specifier|public
name|void
name|testEscaped
parameter_list|()
throws|throws
name|Exception
block|{
name|Analyzer
name|a
init|=
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|,
name|MockTokenizer
operator|.
name|WHITESPACE
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertQueryEquals
argument_list|(
literal|"a\\-b:c"
argument_list|,
name|a
argument_list|,
literal|"a-b:c"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"a\\+b:c"
argument_list|,
name|a
argument_list|,
literal|"a+b:c"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"a\\:b:c"
argument_list|,
name|a
argument_list|,
literal|"a:b:c"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"a\\\\b:c"
argument_list|,
name|a
argument_list|,
literal|"a\\b:c"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"a:b\\-c"
argument_list|,
name|a
argument_list|,
literal|"a:b-c"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"a:b\\+c"
argument_list|,
name|a
argument_list|,
literal|"a:b+c"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"a:b\\:c"
argument_list|,
name|a
argument_list|,
literal|"a:b:c"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"a:b\\\\c"
argument_list|,
name|a
argument_list|,
literal|"a:b\\c"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"a:b\\-c*"
argument_list|,
name|a
argument_list|,
literal|"a:b-c*"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"a:b\\+c*"
argument_list|,
name|a
argument_list|,
literal|"a:b+c*"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"a:b\\:c*"
argument_list|,
name|a
argument_list|,
literal|"a:b:c*"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"a:b\\\\c*"
argument_list|,
name|a
argument_list|,
literal|"a:b\\c*"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"a:b\\-?c"
argument_list|,
name|a
argument_list|,
literal|"a:b-?c"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"a:b\\+?c"
argument_list|,
name|a
argument_list|,
literal|"a:b+?c"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"a:b\\:?c"
argument_list|,
name|a
argument_list|,
literal|"a:b:?c"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"a:b\\\\?c"
argument_list|,
name|a
argument_list|,
literal|"a:b\\?c"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"a:b\\-c~"
argument_list|,
name|a
argument_list|,
literal|"a:b-c~2"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"a:b\\+c~"
argument_list|,
name|a
argument_list|,
literal|"a:b+c~2"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"a:b\\:c~"
argument_list|,
name|a
argument_list|,
literal|"a:b:c~2"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"a:b\\\\c~"
argument_list|,
name|a
argument_list|,
literal|"a:b\\c~2"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"[ a\\- TO a\\+ ]"
argument_list|,
literal|null
argument_list|,
literal|"[a- TO a+]"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"[ a\\: TO a\\~ ]"
argument_list|,
literal|null
argument_list|,
literal|"[a: TO a~]"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"[ a\\\\ TO a\\* ]"
argument_list|,
literal|null
argument_list|,
literal|"[a\\ TO a*]"
argument_list|)
expr_stmt|;
block|}
DECL|method|testTabNewlineCarriageReturn
specifier|public
name|void
name|testTabNewlineCarriageReturn
parameter_list|()
throws|throws
name|Exception
block|{
name|assertQueryEqualsDOA
argument_list|(
literal|"+weltbank +worlbank"
argument_list|,
literal|null
argument_list|,
literal|"+weltbank +worlbank"
argument_list|)
expr_stmt|;
name|assertQueryEqualsDOA
argument_list|(
literal|"+weltbank\n+worlbank"
argument_list|,
literal|null
argument_list|,
literal|"+weltbank +worlbank"
argument_list|)
expr_stmt|;
name|assertQueryEqualsDOA
argument_list|(
literal|"weltbank \n+worlbank"
argument_list|,
literal|null
argument_list|,
literal|"+weltbank +worlbank"
argument_list|)
expr_stmt|;
name|assertQueryEqualsDOA
argument_list|(
literal|"weltbank \n +worlbank"
argument_list|,
literal|null
argument_list|,
literal|"+weltbank +worlbank"
argument_list|)
expr_stmt|;
name|assertQueryEqualsDOA
argument_list|(
literal|"+weltbank\r+worlbank"
argument_list|,
literal|null
argument_list|,
literal|"+weltbank +worlbank"
argument_list|)
expr_stmt|;
name|assertQueryEqualsDOA
argument_list|(
literal|"weltbank \r+worlbank"
argument_list|,
literal|null
argument_list|,
literal|"+weltbank +worlbank"
argument_list|)
expr_stmt|;
name|assertQueryEqualsDOA
argument_list|(
literal|"weltbank \r +worlbank"
argument_list|,
literal|null
argument_list|,
literal|"+weltbank +worlbank"
argument_list|)
expr_stmt|;
name|assertQueryEqualsDOA
argument_list|(
literal|"+weltbank\r\n+worlbank"
argument_list|,
literal|null
argument_list|,
literal|"+weltbank +worlbank"
argument_list|)
expr_stmt|;
name|assertQueryEqualsDOA
argument_list|(
literal|"weltbank \r\n+worlbank"
argument_list|,
literal|null
argument_list|,
literal|"+weltbank +worlbank"
argument_list|)
expr_stmt|;
name|assertQueryEqualsDOA
argument_list|(
literal|"weltbank \r\n +worlbank"
argument_list|,
literal|null
argument_list|,
literal|"+weltbank +worlbank"
argument_list|)
expr_stmt|;
name|assertQueryEqualsDOA
argument_list|(
literal|"weltbank \r \n +worlbank"
argument_list|,
literal|null
argument_list|,
literal|"+weltbank +worlbank"
argument_list|)
expr_stmt|;
name|assertQueryEqualsDOA
argument_list|(
literal|"+weltbank\t+worlbank"
argument_list|,
literal|null
argument_list|,
literal|"+weltbank +worlbank"
argument_list|)
expr_stmt|;
name|assertQueryEqualsDOA
argument_list|(
literal|"weltbank \t+worlbank"
argument_list|,
literal|null
argument_list|,
literal|"+weltbank +worlbank"
argument_list|)
expr_stmt|;
name|assertQueryEqualsDOA
argument_list|(
literal|"weltbank \t +worlbank"
argument_list|,
literal|null
argument_list|,
literal|"+weltbank +worlbank"
argument_list|)
expr_stmt|;
block|}
DECL|method|testSimpleDAO
specifier|public
name|void
name|testSimpleDAO
parameter_list|()
throws|throws
name|Exception
block|{
name|assertQueryEqualsDOA
argument_list|(
literal|"term term term"
argument_list|,
literal|null
argument_list|,
literal|"+term +term +term"
argument_list|)
expr_stmt|;
name|assertQueryEqualsDOA
argument_list|(
literal|"term +term term"
argument_list|,
literal|null
argument_list|,
literal|"+term +term +term"
argument_list|)
expr_stmt|;
name|assertQueryEqualsDOA
argument_list|(
literal|"term term +term"
argument_list|,
literal|null
argument_list|,
literal|"+term +term +term"
argument_list|)
expr_stmt|;
name|assertQueryEqualsDOA
argument_list|(
literal|"term +term +term"
argument_list|,
literal|null
argument_list|,
literal|"+term +term +term"
argument_list|)
expr_stmt|;
name|assertQueryEqualsDOA
argument_list|(
literal|"-term term term"
argument_list|,
literal|null
argument_list|,
literal|"-term +term +term"
argument_list|)
expr_stmt|;
block|}
DECL|method|testBoost
specifier|public
name|void
name|testBoost
parameter_list|()
throws|throws
name|Exception
block|{
name|CharacterRunAutomaton
name|stopSet
init|=
operator|new
name|CharacterRunAutomaton
argument_list|(
name|BasicAutomata
operator|.
name|makeString
argument_list|(
literal|"on"
argument_list|)
argument_list|)
decl_stmt|;
name|Analyzer
name|oneStopAnalyzer
init|=
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|,
name|MockTokenizer
operator|.
name|SIMPLE
argument_list|,
literal|true
argument_list|,
name|stopSet
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|PrecedenceQueryParser
name|qp
init|=
operator|new
name|PrecedenceQueryParser
argument_list|()
decl_stmt|;
name|qp
operator|.
name|setAnalyzer
argument_list|(
name|oneStopAnalyzer
argument_list|)
expr_stmt|;
name|Query
name|q
init|=
name|qp
operator|.
name|parse
argument_list|(
literal|"on^1.0"
argument_list|,
literal|"field"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|q
argument_list|)
expr_stmt|;
name|q
operator|=
name|qp
operator|.
name|parse
argument_list|(
literal|"\"hello\"^2.0"
argument_list|,
literal|"field"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|q
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|q
operator|.
name|getBoost
argument_list|()
argument_list|,
operator|(
name|float
operator|)
literal|2.0
argument_list|,
operator|(
name|float
operator|)
literal|0.5
argument_list|)
expr_stmt|;
name|q
operator|=
name|qp
operator|.
name|parse
argument_list|(
literal|"hello^2.0"
argument_list|,
literal|"field"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|q
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|q
operator|.
name|getBoost
argument_list|()
argument_list|,
operator|(
name|float
operator|)
literal|2.0
argument_list|,
operator|(
name|float
operator|)
literal|0.5
argument_list|)
expr_stmt|;
name|q
operator|=
name|qp
operator|.
name|parse
argument_list|(
literal|"\"on\"^1.0"
argument_list|,
literal|"field"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|q
argument_list|)
expr_stmt|;
name|q
operator|=
name|getParser
argument_list|(
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|,
name|MockTokenizer
operator|.
name|SIMPLE
argument_list|,
literal|true
argument_list|,
name|MockTokenFilter
operator|.
name|ENGLISH_STOPSET
argument_list|,
literal|true
argument_list|)
argument_list|)
operator|.
name|parse
argument_list|(
literal|"the^3"
argument_list|,
literal|"field"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|q
argument_list|)
expr_stmt|;
block|}
DECL|method|testException
specifier|public
name|void
name|testException
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|assertQueryEquals
argument_list|(
literal|"\"some phrase"
argument_list|,
literal|null
argument_list|,
literal|"abc"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"ParseException expected, not thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|QueryNodeParseException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testBooleanQuery
specifier|public
name|void
name|testBooleanQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|BooleanQuery
operator|.
name|setMaxClauseCount
argument_list|(
literal|2
argument_list|)
expr_stmt|;
try|try
block|{
name|getParser
argument_list|(
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|,
name|MockTokenizer
operator|.
name|WHITESPACE
argument_list|,
literal|false
argument_list|)
argument_list|)
operator|.
name|parse
argument_list|(
literal|"one two three"
argument_list|,
literal|"field"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"ParseException expected due to too many boolean clauses"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|QueryNodeException
name|expected
parameter_list|)
block|{
comment|// too many boolean clauses, so ParseException is expected
block|}
block|}
comment|// LUCENE-792
DECL|method|testNOT
specifier|public
name|void
name|testNOT
parameter_list|()
throws|throws
name|Exception
block|{
name|Analyzer
name|a
init|=
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|,
name|MockTokenizer
operator|.
name|WHITESPACE
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertQueryEquals
argument_list|(
literal|"NOT foo AND bar"
argument_list|,
name|a
argument_list|,
literal|"-foo +bar"
argument_list|)
expr_stmt|;
block|}
comment|/**    * This test differs from the original QueryParser, showing how the precedence    * issue has been corrected.    */
DECL|method|testPrecedence
specifier|public
name|void
name|testPrecedence
parameter_list|()
throws|throws
name|Exception
block|{
name|PrecedenceQueryParser
name|parser
init|=
name|getParser
argument_list|(
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|,
name|MockTokenizer
operator|.
name|WHITESPACE
argument_list|,
literal|false
argument_list|)
argument_list|)
decl_stmt|;
name|Query
name|query1
init|=
name|parser
operator|.
name|parse
argument_list|(
literal|"A AND B OR C AND D"
argument_list|,
literal|"field"
argument_list|)
decl_stmt|;
name|Query
name|query2
init|=
name|parser
operator|.
name|parse
argument_list|(
literal|"(A AND B) OR (C AND D)"
argument_list|,
literal|"field"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|query1
argument_list|,
name|query2
argument_list|)
expr_stmt|;
name|query1
operator|=
name|parser
operator|.
name|parse
argument_list|(
literal|"A OR B C"
argument_list|,
literal|"field"
argument_list|)
expr_stmt|;
name|query2
operator|=
name|parser
operator|.
name|parse
argument_list|(
literal|"(A B) C"
argument_list|,
literal|"field"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|query1
argument_list|,
name|query2
argument_list|)
expr_stmt|;
name|query1
operator|=
name|parser
operator|.
name|parse
argument_list|(
literal|"A AND B C"
argument_list|,
literal|"field"
argument_list|)
expr_stmt|;
name|query2
operator|=
name|parser
operator|.
name|parse
argument_list|(
literal|"(+A +B) C"
argument_list|,
literal|"field"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|query1
argument_list|,
name|query2
argument_list|)
expr_stmt|;
name|query1
operator|=
name|parser
operator|.
name|parse
argument_list|(
literal|"A AND NOT B"
argument_list|,
literal|"field"
argument_list|)
expr_stmt|;
name|query2
operator|=
name|parser
operator|.
name|parse
argument_list|(
literal|"+A -B"
argument_list|,
literal|"field"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|query1
argument_list|,
name|query2
argument_list|)
expr_stmt|;
name|query1
operator|=
name|parser
operator|.
name|parse
argument_list|(
literal|"A OR NOT B"
argument_list|,
literal|"field"
argument_list|)
expr_stmt|;
name|query2
operator|=
name|parser
operator|.
name|parse
argument_list|(
literal|"A -B"
argument_list|,
literal|"field"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|query1
argument_list|,
name|query2
argument_list|)
expr_stmt|;
name|query1
operator|=
name|parser
operator|.
name|parse
argument_list|(
literal|"A OR NOT B AND C"
argument_list|,
literal|"field"
argument_list|)
expr_stmt|;
name|query2
operator|=
name|parser
operator|.
name|parse
argument_list|(
literal|"A (-B +C)"
argument_list|,
literal|"field"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|query1
argument_list|,
name|query2
argument_list|)
expr_stmt|;
name|parser
operator|.
name|setDefaultOperator
argument_list|(
name|StandardQueryConfigHandler
operator|.
name|Operator
operator|.
name|AND
argument_list|)
expr_stmt|;
name|query1
operator|=
name|parser
operator|.
name|parse
argument_list|(
literal|"A AND B OR C AND D"
argument_list|,
literal|"field"
argument_list|)
expr_stmt|;
name|query2
operator|=
name|parser
operator|.
name|parse
argument_list|(
literal|"(A AND B) OR (C AND D)"
argument_list|,
literal|"field"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|query1
argument_list|,
name|query2
argument_list|)
expr_stmt|;
name|query1
operator|=
name|parser
operator|.
name|parse
argument_list|(
literal|"A AND B C"
argument_list|,
literal|"field"
argument_list|)
expr_stmt|;
name|query2
operator|=
name|parser
operator|.
name|parse
argument_list|(
literal|"(A B) C"
argument_list|,
literal|"field"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|query1
argument_list|,
name|query2
argument_list|)
expr_stmt|;
name|query1
operator|=
name|parser
operator|.
name|parse
argument_list|(
literal|"A AND B C"
argument_list|,
literal|"field"
argument_list|)
expr_stmt|;
name|query2
operator|=
name|parser
operator|.
name|parse
argument_list|(
literal|"(+A +B) C"
argument_list|,
literal|"field"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|query1
argument_list|,
name|query2
argument_list|)
expr_stmt|;
name|query1
operator|=
name|parser
operator|.
name|parse
argument_list|(
literal|"A AND NOT B"
argument_list|,
literal|"field"
argument_list|)
expr_stmt|;
name|query2
operator|=
name|parser
operator|.
name|parse
argument_list|(
literal|"+A -B"
argument_list|,
literal|"field"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|query1
argument_list|,
name|query2
argument_list|)
expr_stmt|;
name|query1
operator|=
name|parser
operator|.
name|parse
argument_list|(
literal|"A AND NOT B OR C"
argument_list|,
literal|"field"
argument_list|)
expr_stmt|;
name|query2
operator|=
name|parser
operator|.
name|parse
argument_list|(
literal|"(+A -B) OR C"
argument_list|,
literal|"field"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|query1
argument_list|,
name|query2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|tearDown
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|BooleanQuery
operator|.
name|setMaxClauseCount
argument_list|(
name|originalMaxClauses
argument_list|)
expr_stmt|;
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
block|}
end_class
end_unit
