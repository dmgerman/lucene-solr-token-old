begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.queryparser.flexible.standard
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryparser
operator|.
name|flexible
operator|.
name|standard
package|;
end_package
begin_import
import|import
name|java
operator|.
name|text
operator|.
name|NumberFormat
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|DoublePoint
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|FloatPoint
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|IntPoint
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|LongPoint
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryparser
operator|.
name|flexible
operator|.
name|standard
operator|.
name|config
operator|.
name|PointsConfig
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_comment
comment|/** Simple test for point field integration into the flexible QP */
end_comment
begin_class
DECL|class|TestPointQueryParser
specifier|public
class|class
name|TestPointQueryParser
extends|extends
name|LuceneTestCase
block|{
DECL|method|testIntegers
specifier|public
name|void
name|testIntegers
parameter_list|()
throws|throws
name|Exception
block|{
name|StandardQueryParser
name|parser
init|=
operator|new
name|StandardQueryParser
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|PointsConfig
argument_list|>
name|pointsConfig
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|pointsConfig
operator|.
name|put
argument_list|(
literal|"intField"
argument_list|,
operator|new
name|PointsConfig
argument_list|(
name|NumberFormat
operator|.
name|getIntegerInstance
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|parser
operator|.
name|setPointsConfigMap
argument_list|(
name|pointsConfig
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|IntPoint
operator|.
name|newRangeQuery
argument_list|(
literal|"intField"
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|)
argument_list|,
name|parser
operator|.
name|parse
argument_list|(
literal|"intField:[1 TO 3]"
argument_list|,
literal|"body"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|IntPoint
operator|.
name|newRangeQuery
argument_list|(
literal|"intField"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|parser
operator|.
name|parse
argument_list|(
literal|"intField:1"
argument_list|,
literal|"body"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testLongs
specifier|public
name|void
name|testLongs
parameter_list|()
throws|throws
name|Exception
block|{
name|StandardQueryParser
name|parser
init|=
operator|new
name|StandardQueryParser
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|PointsConfig
argument_list|>
name|pointsConfig
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|pointsConfig
operator|.
name|put
argument_list|(
literal|"longField"
argument_list|,
operator|new
name|PointsConfig
argument_list|(
name|NumberFormat
operator|.
name|getIntegerInstance
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
argument_list|,
name|Long
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|parser
operator|.
name|setPointsConfigMap
argument_list|(
name|pointsConfig
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|LongPoint
operator|.
name|newRangeQuery
argument_list|(
literal|"longField"
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|)
argument_list|,
name|parser
operator|.
name|parse
argument_list|(
literal|"longField:[1 TO 3]"
argument_list|,
literal|"body"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|LongPoint
operator|.
name|newRangeQuery
argument_list|(
literal|"longField"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|parser
operator|.
name|parse
argument_list|(
literal|"longField:1"
argument_list|,
literal|"body"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testFloats
specifier|public
name|void
name|testFloats
parameter_list|()
throws|throws
name|Exception
block|{
name|StandardQueryParser
name|parser
init|=
operator|new
name|StandardQueryParser
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|PointsConfig
argument_list|>
name|pointsConfig
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|pointsConfig
operator|.
name|put
argument_list|(
literal|"floatField"
argument_list|,
operator|new
name|PointsConfig
argument_list|(
name|NumberFormat
operator|.
name|getNumberInstance
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
argument_list|,
name|Float
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|parser
operator|.
name|setPointsConfigMap
argument_list|(
name|pointsConfig
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|FloatPoint
operator|.
name|newRangeQuery
argument_list|(
literal|"floatField"
argument_list|,
literal|1.5F
argument_list|,
literal|3.6F
argument_list|)
argument_list|,
name|parser
operator|.
name|parse
argument_list|(
literal|"floatField:[1.5 TO 3.6]"
argument_list|,
literal|"body"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|FloatPoint
operator|.
name|newRangeQuery
argument_list|(
literal|"floatField"
argument_list|,
literal|1.5F
argument_list|,
literal|1.5F
argument_list|)
argument_list|,
name|parser
operator|.
name|parse
argument_list|(
literal|"floatField:1.5"
argument_list|,
literal|"body"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testDoubles
specifier|public
name|void
name|testDoubles
parameter_list|()
throws|throws
name|Exception
block|{
name|StandardQueryParser
name|parser
init|=
operator|new
name|StandardQueryParser
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|PointsConfig
argument_list|>
name|pointsConfig
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|pointsConfig
operator|.
name|put
argument_list|(
literal|"doubleField"
argument_list|,
operator|new
name|PointsConfig
argument_list|(
name|NumberFormat
operator|.
name|getNumberInstance
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
argument_list|,
name|Double
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|parser
operator|.
name|setPointsConfigMap
argument_list|(
name|pointsConfig
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DoublePoint
operator|.
name|newRangeQuery
argument_list|(
literal|"doubleField"
argument_list|,
literal|1.5D
argument_list|,
literal|3.6D
argument_list|)
argument_list|,
name|parser
operator|.
name|parse
argument_list|(
literal|"doubleField:[1.5 TO 3.6]"
argument_list|,
literal|"body"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DoublePoint
operator|.
name|newRangeQuery
argument_list|(
literal|"doubleField"
argument_list|,
literal|1.5D
argument_list|,
literal|1.5D
argument_list|)
argument_list|,
name|parser
operator|.
name|parse
argument_list|(
literal|"doubleField:1.5"
argument_list|,
literal|"body"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
