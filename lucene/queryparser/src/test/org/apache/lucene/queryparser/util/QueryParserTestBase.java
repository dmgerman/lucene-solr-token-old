begin_unit
begin_package
DECL|package|org.apache.lucene.queryparser.util
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryparser
operator|.
name|util
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import
begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DateFormat
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|GregorianCalendar
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimeZone
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|*
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|CharTermAttribute
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|OffsetAttribute
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|PositionIncrementAttribute
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|DateTools
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DirectoryReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import
begin_comment
comment|//import org.apache.lucene.queryparser.classic.CharStream;
end_comment
begin_comment
comment|//import org.apache.lucene.queryparser.classic.ParseException;
end_comment
begin_comment
comment|//import org.apache.lucene.queryparser.classic.QueryParser;
end_comment
begin_comment
comment|//import org.apache.lucene.queryparser.classic.QueryParserBase;
end_comment
begin_comment
comment|//import org.apache.lucene.queryparser.classic.QueryParserTokenManager;
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryparser
operator|.
name|classic
operator|.
name|QueryParserBase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryparser
operator|.
name|flexible
operator|.
name|standard
operator|.
name|CommonQueryParserConfiguration
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|*
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanClause
operator|.
name|Occur
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|automaton
operator|.
name|BasicAutomata
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|automaton
operator|.
name|CharacterRunAutomaton
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|automaton
operator|.
name|RegExp
import|;
end_import
begin_comment
comment|/**  * Base Test class for QueryParser subclasses  */
end_comment
begin_comment
comment|// TODO: it would be better to refactor the parts that are specific really
end_comment
begin_comment
comment|// to the core QP and subclass/use the parts that are not in the flexible QP
end_comment
begin_class
DECL|class|QueryParserTestBase
specifier|public
specifier|abstract
class|class
name|QueryParserTestBase
extends|extends
name|LuceneTestCase
block|{
DECL|field|qpAnalyzer
specifier|public
specifier|static
name|Analyzer
name|qpAnalyzer
init|=
operator|new
name|QPTestAnalyzer
argument_list|()
decl_stmt|;
DECL|class|QPTestFilter
specifier|public
specifier|static
specifier|final
class|class
name|QPTestFilter
extends|extends
name|TokenFilter
block|{
DECL|field|termAtt
name|CharTermAttribute
name|termAtt
decl_stmt|;
DECL|field|offsetAtt
name|OffsetAttribute
name|offsetAtt
decl_stmt|;
comment|/**      * Filter which discards the token 'stop' and which expands the      * token 'phrase' into 'phrase1 phrase2'      */
DECL|method|QPTestFilter
specifier|public
name|QPTestFilter
parameter_list|(
name|TokenStream
name|in
parameter_list|)
block|{
name|super
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|termAtt
operator|=
name|addAttribute
argument_list|(
name|CharTermAttribute
operator|.
name|class
argument_list|)
expr_stmt|;
name|offsetAtt
operator|=
name|addAttribute
argument_list|(
name|OffsetAttribute
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|field|inPhrase
name|boolean
name|inPhrase
init|=
literal|false
decl_stmt|;
DECL|field|savedStart
DECL|field|savedEnd
name|int
name|savedStart
init|=
literal|0
decl_stmt|,
name|savedEnd
init|=
literal|0
decl_stmt|;
annotation|@
name|Override
DECL|method|incrementToken
specifier|public
name|boolean
name|incrementToken
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|inPhrase
condition|)
block|{
name|inPhrase
operator|=
literal|false
expr_stmt|;
name|clearAttributes
argument_list|()
expr_stmt|;
name|termAtt
operator|.
name|append
argument_list|(
literal|"phrase2"
argument_list|)
expr_stmt|;
name|offsetAtt
operator|.
name|setOffset
argument_list|(
name|savedStart
argument_list|,
name|savedEnd
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
while|while
condition|(
name|input
operator|.
name|incrementToken
argument_list|()
condition|)
block|{
if|if
condition|(
name|termAtt
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
literal|"phrase"
argument_list|)
condition|)
block|{
name|inPhrase
operator|=
literal|true
expr_stmt|;
name|savedStart
operator|=
name|offsetAtt
operator|.
name|startOffset
argument_list|()
expr_stmt|;
name|savedEnd
operator|=
name|offsetAtt
operator|.
name|endOffset
argument_list|()
expr_stmt|;
name|termAtt
operator|.
name|setEmpty
argument_list|()
operator|.
name|append
argument_list|(
literal|"phrase1"
argument_list|)
expr_stmt|;
name|offsetAtt
operator|.
name|setOffset
argument_list|(
name|savedStart
argument_list|,
name|savedEnd
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|termAtt
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
literal|"stop"
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
DECL|class|QPTestAnalyzer
specifier|public
specifier|static
specifier|final
class|class
name|QPTestAnalyzer
extends|extends
name|Analyzer
block|{
comment|/** Filters MockTokenizer with StopFilter. */
annotation|@
name|Override
DECL|method|createComponents
specifier|public
name|TokenStreamComponents
name|createComponents
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|Reader
name|reader
parameter_list|)
block|{
name|Tokenizer
name|tokenizer
init|=
operator|new
name|MockTokenizer
argument_list|(
name|reader
argument_list|,
name|MockTokenizer
operator|.
name|SIMPLE
argument_list|,
literal|true
argument_list|)
decl_stmt|;
return|return
operator|new
name|TokenStreamComponents
argument_list|(
name|tokenizer
argument_list|,
operator|new
name|QPTestFilter
argument_list|(
name|tokenizer
argument_list|)
argument_list|)
return|;
block|}
block|}
DECL|field|originalMaxClauses
specifier|private
name|int
name|originalMaxClauses
decl_stmt|;
DECL|field|defaultField
specifier|private
name|String
name|defaultField
init|=
literal|"field"
decl_stmt|;
DECL|method|getDefaultField
specifier|protected
name|String
name|getDefaultField
parameter_list|()
block|{
return|return
name|defaultField
return|;
block|}
DECL|method|setDefaultField
specifier|protected
name|void
name|setDefaultField
parameter_list|(
name|String
name|defaultField
parameter_list|)
block|{
name|this
operator|.
name|defaultField
operator|=
name|defaultField
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setUp
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|originalMaxClauses
operator|=
name|BooleanQuery
operator|.
name|getMaxClauseCount
argument_list|()
expr_stmt|;
block|}
DECL|method|getParserConfig
specifier|public
specifier|abstract
name|CommonQueryParserConfiguration
name|getParserConfig
parameter_list|(
name|Analyzer
name|a
parameter_list|)
throws|throws
name|Exception
function_decl|;
DECL|method|setDefaultOperatorOR
specifier|public
specifier|abstract
name|void
name|setDefaultOperatorOR
parameter_list|(
name|CommonQueryParserConfiguration
name|cqpC
parameter_list|)
function_decl|;
DECL|method|setDefaultOperatorAND
specifier|public
specifier|abstract
name|void
name|setDefaultOperatorAND
parameter_list|(
name|CommonQueryParserConfiguration
name|cqpC
parameter_list|)
function_decl|;
DECL|method|setAnalyzeRangeTerms
specifier|public
specifier|abstract
name|void
name|setAnalyzeRangeTerms
parameter_list|(
name|CommonQueryParserConfiguration
name|cqpC
parameter_list|,
name|boolean
name|value
parameter_list|)
function_decl|;
DECL|method|setAutoGeneratePhraseQueries
specifier|public
specifier|abstract
name|void
name|setAutoGeneratePhraseQueries
parameter_list|(
name|CommonQueryParserConfiguration
name|cqpC
parameter_list|,
name|boolean
name|value
parameter_list|)
function_decl|;
DECL|method|setDateResolution
specifier|public
specifier|abstract
name|void
name|setDateResolution
parameter_list|(
name|CommonQueryParserConfiguration
name|cqpC
parameter_list|,
name|CharSequence
name|field
parameter_list|,
name|DateTools
operator|.
name|Resolution
name|value
parameter_list|)
function_decl|;
DECL|method|getQuery
specifier|public
specifier|abstract
name|Query
name|getQuery
parameter_list|(
name|String
name|query
parameter_list|,
name|CommonQueryParserConfiguration
name|cqpC
parameter_list|)
throws|throws
name|Exception
function_decl|;
DECL|method|getQuery
specifier|public
specifier|abstract
name|Query
name|getQuery
parameter_list|(
name|String
name|query
parameter_list|,
name|Analyzer
name|a
parameter_list|)
throws|throws
name|Exception
function_decl|;
DECL|method|isQueryParserException
specifier|public
specifier|abstract
name|boolean
name|isQueryParserException
parameter_list|(
name|Exception
name|exception
parameter_list|)
function_decl|;
DECL|method|getQuery
specifier|public
name|Query
name|getQuery
parameter_list|(
name|String
name|query
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|getQuery
argument_list|(
name|query
argument_list|,
operator|(
name|Analyzer
operator|)
literal|null
argument_list|)
return|;
block|}
DECL|method|assertQueryEquals
specifier|public
name|void
name|assertQueryEquals
parameter_list|(
name|String
name|query
parameter_list|,
name|Analyzer
name|a
parameter_list|,
name|String
name|result
parameter_list|)
throws|throws
name|Exception
block|{
name|Query
name|q
init|=
name|getQuery
argument_list|(
name|query
argument_list|,
name|a
argument_list|)
decl_stmt|;
name|String
name|s
init|=
name|q
operator|.
name|toString
argument_list|(
literal|"field"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|s
operator|.
name|equals
argument_list|(
name|result
argument_list|)
condition|)
block|{
name|fail
argument_list|(
literal|"Query /"
operator|+
name|query
operator|+
literal|"/ yielded /"
operator|+
name|s
operator|+
literal|"/, expecting /"
operator|+
name|result
operator|+
literal|"/"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|assertQueryEquals
specifier|public
name|void
name|assertQueryEquals
parameter_list|(
name|CommonQueryParserConfiguration
name|cqpC
parameter_list|,
name|String
name|field
parameter_list|,
name|String
name|query
parameter_list|,
name|String
name|result
parameter_list|)
throws|throws
name|Exception
block|{
name|Query
name|q
init|=
name|getQuery
argument_list|(
name|query
argument_list|,
name|cqpC
argument_list|)
decl_stmt|;
name|String
name|s
init|=
name|q
operator|.
name|toString
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|s
operator|.
name|equals
argument_list|(
name|result
argument_list|)
condition|)
block|{
name|fail
argument_list|(
literal|"Query /"
operator|+
name|query
operator|+
literal|"/ yielded /"
operator|+
name|s
operator|+
literal|"/, expecting /"
operator|+
name|result
operator|+
literal|"/"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|assertEscapedQueryEquals
specifier|public
name|void
name|assertEscapedQueryEquals
parameter_list|(
name|String
name|query
parameter_list|,
name|Analyzer
name|a
parameter_list|,
name|String
name|result
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|escapedQuery
init|=
name|QueryParserBase
operator|.
name|escape
argument_list|(
name|query
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|escapedQuery
operator|.
name|equals
argument_list|(
name|result
argument_list|)
condition|)
block|{
name|fail
argument_list|(
literal|"Query /"
operator|+
name|query
operator|+
literal|"/ yielded /"
operator|+
name|escapedQuery
operator|+
literal|"/, expecting /"
operator|+
name|result
operator|+
literal|"/"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|assertWildcardQueryEquals
specifier|public
name|void
name|assertWildcardQueryEquals
parameter_list|(
name|String
name|query
parameter_list|,
name|boolean
name|lowercase
parameter_list|,
name|String
name|result
parameter_list|,
name|boolean
name|allowLeadingWildcard
parameter_list|)
throws|throws
name|Exception
block|{
name|CommonQueryParserConfiguration
name|cqpC
init|=
name|getParserConfig
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|cqpC
operator|.
name|setLowercaseExpandedTerms
argument_list|(
name|lowercase
argument_list|)
expr_stmt|;
name|cqpC
operator|.
name|setAllowLeadingWildcard
argument_list|(
name|allowLeadingWildcard
argument_list|)
expr_stmt|;
name|Query
name|q
init|=
name|getQuery
argument_list|(
name|query
argument_list|,
name|cqpC
argument_list|)
decl_stmt|;
name|String
name|s
init|=
name|q
operator|.
name|toString
argument_list|(
literal|"field"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|s
operator|.
name|equals
argument_list|(
name|result
argument_list|)
condition|)
block|{
name|fail
argument_list|(
literal|"WildcardQuery /"
operator|+
name|query
operator|+
literal|"/ yielded /"
operator|+
name|s
operator|+
literal|"/, expecting /"
operator|+
name|result
operator|+
literal|"/"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|assertWildcardQueryEquals
specifier|public
name|void
name|assertWildcardQueryEquals
parameter_list|(
name|String
name|query
parameter_list|,
name|boolean
name|lowercase
parameter_list|,
name|String
name|result
parameter_list|)
throws|throws
name|Exception
block|{
name|assertWildcardQueryEquals
argument_list|(
name|query
argument_list|,
name|lowercase
argument_list|,
name|result
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|assertWildcardQueryEquals
specifier|public
name|void
name|assertWildcardQueryEquals
parameter_list|(
name|String
name|query
parameter_list|,
name|String
name|result
parameter_list|)
throws|throws
name|Exception
block|{
name|Query
name|q
init|=
name|getQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|String
name|s
init|=
name|q
operator|.
name|toString
argument_list|(
literal|"field"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|s
operator|.
name|equals
argument_list|(
name|result
argument_list|)
condition|)
block|{
name|fail
argument_list|(
literal|"WildcardQuery /"
operator|+
name|query
operator|+
literal|"/ yielded /"
operator|+
name|s
operator|+
literal|"/, expecting /"
operator|+
name|result
operator|+
literal|"/"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getQueryDOA
specifier|public
name|Query
name|getQueryDOA
parameter_list|(
name|String
name|query
parameter_list|,
name|Analyzer
name|a
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|a
operator|==
literal|null
condition|)
name|a
operator|=
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|,
name|MockTokenizer
operator|.
name|SIMPLE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|CommonQueryParserConfiguration
name|qp
init|=
name|getParserConfig
argument_list|(
name|a
argument_list|)
decl_stmt|;
name|setDefaultOperatorAND
argument_list|(
name|qp
argument_list|)
expr_stmt|;
return|return
name|getQuery
argument_list|(
name|query
argument_list|,
name|qp
argument_list|)
return|;
block|}
DECL|method|assertQueryEqualsDOA
specifier|public
name|void
name|assertQueryEqualsDOA
parameter_list|(
name|String
name|query
parameter_list|,
name|Analyzer
name|a
parameter_list|,
name|String
name|result
parameter_list|)
throws|throws
name|Exception
block|{
name|Query
name|q
init|=
name|getQueryDOA
argument_list|(
name|query
argument_list|,
name|a
argument_list|)
decl_stmt|;
name|String
name|s
init|=
name|q
operator|.
name|toString
argument_list|(
literal|"field"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|s
operator|.
name|equals
argument_list|(
name|result
argument_list|)
condition|)
block|{
name|fail
argument_list|(
literal|"Query /"
operator|+
name|query
operator|+
literal|"/ yielded /"
operator|+
name|s
operator|+
literal|"/, expecting /"
operator|+
name|result
operator|+
literal|"/"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testCJK
specifier|public
name|void
name|testCJK
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Test Ideographic Space - As wide as a CJK character cell (fullwidth)
comment|// used google to translate the word "term" to japanese -> ç¨èª
name|assertQueryEquals
argument_list|(
literal|"term\u3000term\u3000term"
argument_list|,
literal|null
argument_list|,
literal|"term\u0020term\u0020term"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"ç¨èª\u3000ç¨èª\u3000ç¨èª"
argument_list|,
literal|null
argument_list|,
literal|"ç¨èª\u0020ç¨èª\u0020ç¨èª"
argument_list|)
expr_stmt|;
block|}
comment|//individual CJK chars as terms, like StandardAnalyzer
DECL|class|SimpleCJKTokenizer
specifier|private
class|class
name|SimpleCJKTokenizer
extends|extends
name|Tokenizer
block|{
DECL|field|termAtt
specifier|private
name|CharTermAttribute
name|termAtt
init|=
name|addAttribute
argument_list|(
name|CharTermAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|SimpleCJKTokenizer
specifier|public
name|SimpleCJKTokenizer
parameter_list|(
name|Reader
name|input
parameter_list|)
block|{
name|super
argument_list|(
name|input
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|incrementToken
specifier|public
name|boolean
name|incrementToken
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|ch
init|=
name|input
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|ch
operator|<
literal|0
condition|)
return|return
literal|false
return|;
name|clearAttributes
argument_list|()
expr_stmt|;
name|termAtt
operator|.
name|setEmpty
argument_list|()
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
name|ch
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
DECL|class|SimpleCJKAnalyzer
specifier|private
class|class
name|SimpleCJKAnalyzer
extends|extends
name|Analyzer
block|{
annotation|@
name|Override
DECL|method|createComponents
specifier|public
name|TokenStreamComponents
name|createComponents
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|Reader
name|reader
parameter_list|)
block|{
return|return
operator|new
name|TokenStreamComponents
argument_list|(
operator|new
name|SimpleCJKTokenizer
argument_list|(
name|reader
argument_list|)
argument_list|)
return|;
block|}
block|}
DECL|method|testCJKTerm
specifier|public
name|void
name|testCJKTerm
parameter_list|()
throws|throws
name|Exception
block|{
comment|// individual CJK chars as terms
name|SimpleCJKAnalyzer
name|analyzer
init|=
operator|new
name|SimpleCJKAnalyzer
argument_list|()
decl_stmt|;
name|BooleanQuery
name|expected
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
name|expected
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"ä¸­"
argument_list|)
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"å½"
argument_list|)
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|getQuery
argument_list|(
literal|"ä¸­å½"
argument_list|,
name|analyzer
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testCJKBoostedTerm
specifier|public
name|void
name|testCJKBoostedTerm
parameter_list|()
throws|throws
name|Exception
block|{
comment|// individual CJK chars as terms
name|SimpleCJKAnalyzer
name|analyzer
init|=
operator|new
name|SimpleCJKAnalyzer
argument_list|()
decl_stmt|;
name|BooleanQuery
name|expected
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
name|expected
operator|.
name|setBoost
argument_list|(
literal|0.5f
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"ä¸­"
argument_list|)
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"å½"
argument_list|)
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|getQuery
argument_list|(
literal|"ä¸­å½^0.5"
argument_list|,
name|analyzer
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testCJKPhrase
specifier|public
name|void
name|testCJKPhrase
parameter_list|()
throws|throws
name|Exception
block|{
comment|// individual CJK chars as terms
name|SimpleCJKAnalyzer
name|analyzer
init|=
operator|new
name|SimpleCJKAnalyzer
argument_list|()
decl_stmt|;
name|PhraseQuery
name|expected
init|=
operator|new
name|PhraseQuery
argument_list|()
decl_stmt|;
name|expected
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"ä¸­"
argument_list|)
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"å½"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|getQuery
argument_list|(
literal|"\"ä¸­å½\""
argument_list|,
name|analyzer
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testCJKBoostedPhrase
specifier|public
name|void
name|testCJKBoostedPhrase
parameter_list|()
throws|throws
name|Exception
block|{
comment|// individual CJK chars as terms
name|SimpleCJKAnalyzer
name|analyzer
init|=
operator|new
name|SimpleCJKAnalyzer
argument_list|()
decl_stmt|;
name|PhraseQuery
name|expected
init|=
operator|new
name|PhraseQuery
argument_list|()
decl_stmt|;
name|expected
operator|.
name|setBoost
argument_list|(
literal|0.5f
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"ä¸­"
argument_list|)
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"å½"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|getQuery
argument_list|(
literal|"\"ä¸­å½\"^0.5"
argument_list|,
name|analyzer
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testCJKSloppyPhrase
specifier|public
name|void
name|testCJKSloppyPhrase
parameter_list|()
throws|throws
name|Exception
block|{
comment|// individual CJK chars as terms
name|SimpleCJKAnalyzer
name|analyzer
init|=
operator|new
name|SimpleCJKAnalyzer
argument_list|()
decl_stmt|;
name|PhraseQuery
name|expected
init|=
operator|new
name|PhraseQuery
argument_list|()
decl_stmt|;
name|expected
operator|.
name|setSlop
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"ä¸­"
argument_list|)
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"å½"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|getQuery
argument_list|(
literal|"\"ä¸­å½\"~3"
argument_list|,
name|analyzer
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testAutoGeneratePhraseQueriesOn
specifier|public
name|void
name|testAutoGeneratePhraseQueriesOn
parameter_list|()
throws|throws
name|Exception
block|{
comment|// individual CJK chars as terms
name|SimpleCJKAnalyzer
name|analyzer
init|=
operator|new
name|SimpleCJKAnalyzer
argument_list|()
decl_stmt|;
name|PhraseQuery
name|expected
init|=
operator|new
name|PhraseQuery
argument_list|()
decl_stmt|;
name|expected
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"ä¸­"
argument_list|)
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"å½"
argument_list|)
argument_list|)
expr_stmt|;
name|CommonQueryParserConfiguration
name|qp
init|=
name|getParserConfig
argument_list|(
name|analyzer
argument_list|)
decl_stmt|;
name|setAutoGeneratePhraseQueries
argument_list|(
name|qp
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|getQuery
argument_list|(
literal|"ä¸­å½"
argument_list|,
name|qp
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testSimple
specifier|public
name|void
name|testSimple
parameter_list|()
throws|throws
name|Exception
block|{
name|assertQueryEquals
argument_list|(
literal|"term term term"
argument_list|,
literal|null
argument_list|,
literal|"term term term"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"tÃ¼rm term term"
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|,
literal|"tÃ¼rm term term"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"Ã¼mlaut"
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|,
literal|"Ã¼mlaut"
argument_list|)
expr_stmt|;
comment|// FIXME: enhance MockAnalyzer to be able to support this
comment|// it must no longer extend CharTokenizer
comment|//assertQueryEquals("\"\"", new KeywordAnalyzer(), "");
comment|//assertQueryEquals("foo:\"\"", new KeywordAnalyzer(), "foo:");
name|assertQueryEquals
argument_list|(
literal|"a AND b"
argument_list|,
literal|null
argument_list|,
literal|"+a +b"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"(a AND b)"
argument_list|,
literal|null
argument_list|,
literal|"+a +b"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"c OR (a AND b)"
argument_list|,
literal|null
argument_list|,
literal|"c (+a +b)"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"a AND NOT b"
argument_list|,
literal|null
argument_list|,
literal|"+a -b"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"a AND -b"
argument_list|,
literal|null
argument_list|,
literal|"+a -b"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"a AND !b"
argument_list|,
literal|null
argument_list|,
literal|"+a -b"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"a&& b"
argument_list|,
literal|null
argument_list|,
literal|"+a +b"
argument_list|)
expr_stmt|;
comment|//    assertQueryEquals("a&& ! b", null, "+a -b");
name|assertQueryEquals
argument_list|(
literal|"a OR b"
argument_list|,
literal|null
argument_list|,
literal|"a b"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"a || b"
argument_list|,
literal|null
argument_list|,
literal|"a b"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"a OR !b"
argument_list|,
literal|null
argument_list|,
literal|"a -b"
argument_list|)
expr_stmt|;
comment|//    assertQueryEquals("a OR ! b", null, "a -b");
name|assertQueryEquals
argument_list|(
literal|"a OR -b"
argument_list|,
literal|null
argument_list|,
literal|"a -b"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"+term -term term"
argument_list|,
literal|null
argument_list|,
literal|"+term -term term"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"foo:term AND field:anotherTerm"
argument_list|,
literal|null
argument_list|,
literal|"+foo:term +anotherterm"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"term AND \"phrase phrase\""
argument_list|,
literal|null
argument_list|,
literal|"+term +\"phrase phrase\""
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"\"hello there\""
argument_list|,
literal|null
argument_list|,
literal|"\"hello there\""
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|getQuery
argument_list|(
literal|"a AND b"
argument_list|)
operator|instanceof
name|BooleanQuery
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|getQuery
argument_list|(
literal|"hello"
argument_list|)
operator|instanceof
name|TermQuery
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|getQuery
argument_list|(
literal|"\"hello there\""
argument_list|)
operator|instanceof
name|PhraseQuery
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"germ term^2.0"
argument_list|,
literal|null
argument_list|,
literal|"germ term^2.0"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"(term)^2.0"
argument_list|,
literal|null
argument_list|,
literal|"term^2.0"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"(germ term)^2.0"
argument_list|,
literal|null
argument_list|,
literal|"(germ term)^2.0"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"term^2.0"
argument_list|,
literal|null
argument_list|,
literal|"term^2.0"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"term^2"
argument_list|,
literal|null
argument_list|,
literal|"term^2.0"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"\"germ term\"^2.0"
argument_list|,
literal|null
argument_list|,
literal|"\"germ term\"^2.0"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"\"term germ\"^2"
argument_list|,
literal|null
argument_list|,
literal|"\"term germ\"^2.0"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"(foo OR bar) AND (baz OR boo)"
argument_list|,
literal|null
argument_list|,
literal|"+(foo bar) +(baz boo)"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"((a OR b) AND NOT c) OR d"
argument_list|,
literal|null
argument_list|,
literal|"(+(a b) -c) d"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"+(apple \"steve jobs\") -(foo bar baz)"
argument_list|,
literal|null
argument_list|,
literal|"+(apple \"steve jobs\") -(foo bar baz)"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"+title:(dog OR cat) -author:\"bob dole\""
argument_list|,
literal|null
argument_list|,
literal|"+(title:dog title:cat) -author:\"bob dole\""
argument_list|)
expr_stmt|;
block|}
DECL|method|testDefaultOperator
specifier|public
specifier|abstract
name|void
name|testDefaultOperator
parameter_list|()
throws|throws
name|Exception
function_decl|;
DECL|method|testOperatorVsWhitespace
specifier|public
name|void
name|testOperatorVsWhitespace
parameter_list|()
throws|throws
name|Exception
block|{
comment|//LUCENE-2566
comment|// +,-,! should be directly adjacent to operand (i.e. not separated by whitespace) to be treated as an operator
name|Analyzer
name|a
init|=
operator|new
name|Analyzer
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|TokenStreamComponents
name|createComponents
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|Reader
name|reader
parameter_list|)
block|{
return|return
operator|new
name|TokenStreamComponents
argument_list|(
operator|new
name|MockTokenizer
argument_list|(
name|reader
argument_list|,
name|MockTokenizer
operator|.
name|WHITESPACE
argument_list|,
literal|false
argument_list|)
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|assertQueryEquals
argument_list|(
literal|"a - b"
argument_list|,
name|a
argument_list|,
literal|"a - b"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"a + b"
argument_list|,
name|a
argument_list|,
literal|"a + b"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"a ! b"
argument_list|,
name|a
argument_list|,
literal|"a ! b"
argument_list|)
expr_stmt|;
block|}
DECL|method|testPunct
specifier|public
name|void
name|testPunct
parameter_list|()
throws|throws
name|Exception
block|{
name|Analyzer
name|a
init|=
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|,
name|MockTokenizer
operator|.
name|WHITESPACE
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertQueryEquals
argument_list|(
literal|"a&b"
argument_list|,
name|a
argument_list|,
literal|"a&b"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"a&&b"
argument_list|,
name|a
argument_list|,
literal|"a&&b"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|".NET"
argument_list|,
name|a
argument_list|,
literal|".NET"
argument_list|)
expr_stmt|;
block|}
DECL|method|testSlop
specifier|public
name|void
name|testSlop
parameter_list|()
throws|throws
name|Exception
block|{
name|assertQueryEquals
argument_list|(
literal|"\"term germ\"~2"
argument_list|,
literal|null
argument_list|,
literal|"\"term germ\"~2"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"\"term germ\"~2 flork"
argument_list|,
literal|null
argument_list|,
literal|"\"term germ\"~2 flork"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"\"term\"~2"
argument_list|,
literal|null
argument_list|,
literal|"term"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"\" \"~2 germ"
argument_list|,
literal|null
argument_list|,
literal|"germ"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"\"term germ\"~2^2"
argument_list|,
literal|null
argument_list|,
literal|"\"term germ\"~2^2.0"
argument_list|)
expr_stmt|;
block|}
DECL|method|testNumber
specifier|public
name|void
name|testNumber
parameter_list|()
throws|throws
name|Exception
block|{
comment|// The numbers go away because SimpleAnalzyer ignores them
name|assertQueryEquals
argument_list|(
literal|"3"
argument_list|,
literal|null
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"term 1.0 1 2"
argument_list|,
literal|null
argument_list|,
literal|"term"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"term term1 term2"
argument_list|,
literal|null
argument_list|,
literal|"term term term"
argument_list|)
expr_stmt|;
name|Analyzer
name|a
init|=
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|,
name|MockTokenizer
operator|.
name|WHITESPACE
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertQueryEquals
argument_list|(
literal|"3"
argument_list|,
name|a
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"term 1.0 1 2"
argument_list|,
name|a
argument_list|,
literal|"term 1.0 1 2"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"term term1 term2"
argument_list|,
name|a
argument_list|,
literal|"term term1 term2"
argument_list|)
expr_stmt|;
block|}
DECL|method|testWildcard
specifier|public
name|void
name|testWildcard
parameter_list|()
throws|throws
name|Exception
block|{
name|assertQueryEquals
argument_list|(
literal|"term*"
argument_list|,
literal|null
argument_list|,
literal|"term*"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"term*^2"
argument_list|,
literal|null
argument_list|,
literal|"term*^2.0"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"term~"
argument_list|,
literal|null
argument_list|,
literal|"term~2"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"term~1"
argument_list|,
literal|null
argument_list|,
literal|"term~1"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"term~0.7"
argument_list|,
literal|null
argument_list|,
literal|"term~1"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"term~^3"
argument_list|,
literal|null
argument_list|,
literal|"term~2^3.0"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"term^3~"
argument_list|,
literal|null
argument_list|,
literal|"term~2^3.0"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"term*germ"
argument_list|,
literal|null
argument_list|,
literal|"term*germ"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"term*germ^3"
argument_list|,
literal|null
argument_list|,
literal|"term*germ^3.0"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|getQuery
argument_list|(
literal|"term*"
argument_list|)
operator|instanceof
name|PrefixQuery
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|getQuery
argument_list|(
literal|"term*^2"
argument_list|)
operator|instanceof
name|PrefixQuery
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|getQuery
argument_list|(
literal|"term~"
argument_list|)
operator|instanceof
name|FuzzyQuery
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|getQuery
argument_list|(
literal|"term~0.7"
argument_list|)
operator|instanceof
name|FuzzyQuery
argument_list|)
expr_stmt|;
name|FuzzyQuery
name|fq
init|=
operator|(
name|FuzzyQuery
operator|)
name|getQuery
argument_list|(
literal|"term~0.7"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|fq
operator|.
name|getMaxEdits
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|FuzzyQuery
operator|.
name|defaultPrefixLength
argument_list|,
name|fq
operator|.
name|getPrefixLength
argument_list|()
argument_list|)
expr_stmt|;
name|fq
operator|=
operator|(
name|FuzzyQuery
operator|)
name|getQuery
argument_list|(
literal|"term~"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|fq
operator|.
name|getMaxEdits
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|FuzzyQuery
operator|.
name|defaultPrefixLength
argument_list|,
name|fq
operator|.
name|getPrefixLength
argument_list|()
argument_list|)
expr_stmt|;
name|assertParseException
argument_list|(
literal|"term~1.1"
argument_list|)
expr_stmt|;
comment|// value> 1, throws exception
name|assertTrue
argument_list|(
name|getQuery
argument_list|(
literal|"term*germ"
argument_list|)
operator|instanceof
name|WildcardQuery
argument_list|)
expr_stmt|;
comment|/* Tests to see that wild card terms are (or are not) properly    * lower-cased with propery parser configuration    */
comment|// First prefix queries:
comment|// by default, convert to lowercase:
name|assertWildcardQueryEquals
argument_list|(
literal|"Term*"
argument_list|,
literal|true
argument_list|,
literal|"term*"
argument_list|)
expr_stmt|;
comment|// explicitly set lowercase:
name|assertWildcardQueryEquals
argument_list|(
literal|"term*"
argument_list|,
literal|true
argument_list|,
literal|"term*"
argument_list|)
expr_stmt|;
name|assertWildcardQueryEquals
argument_list|(
literal|"Term*"
argument_list|,
literal|true
argument_list|,
literal|"term*"
argument_list|)
expr_stmt|;
name|assertWildcardQueryEquals
argument_list|(
literal|"TERM*"
argument_list|,
literal|true
argument_list|,
literal|"term*"
argument_list|)
expr_stmt|;
comment|// explicitly disable lowercase conversion:
name|assertWildcardQueryEquals
argument_list|(
literal|"term*"
argument_list|,
literal|false
argument_list|,
literal|"term*"
argument_list|)
expr_stmt|;
name|assertWildcardQueryEquals
argument_list|(
literal|"Term*"
argument_list|,
literal|false
argument_list|,
literal|"Term*"
argument_list|)
expr_stmt|;
name|assertWildcardQueryEquals
argument_list|(
literal|"TERM*"
argument_list|,
literal|false
argument_list|,
literal|"TERM*"
argument_list|)
expr_stmt|;
comment|// Then 'full' wildcard queries:
comment|// by default, convert to lowercase:
name|assertWildcardQueryEquals
argument_list|(
literal|"Te?m"
argument_list|,
literal|"te?m"
argument_list|)
expr_stmt|;
comment|// explicitly set lowercase:
name|assertWildcardQueryEquals
argument_list|(
literal|"te?m"
argument_list|,
literal|true
argument_list|,
literal|"te?m"
argument_list|)
expr_stmt|;
name|assertWildcardQueryEquals
argument_list|(
literal|"Te?m"
argument_list|,
literal|true
argument_list|,
literal|"te?m"
argument_list|)
expr_stmt|;
name|assertWildcardQueryEquals
argument_list|(
literal|"TE?M"
argument_list|,
literal|true
argument_list|,
literal|"te?m"
argument_list|)
expr_stmt|;
name|assertWildcardQueryEquals
argument_list|(
literal|"Te?m*gerM"
argument_list|,
literal|true
argument_list|,
literal|"te?m*germ"
argument_list|)
expr_stmt|;
comment|// explicitly disable lowercase conversion:
name|assertWildcardQueryEquals
argument_list|(
literal|"te?m"
argument_list|,
literal|false
argument_list|,
literal|"te?m"
argument_list|)
expr_stmt|;
name|assertWildcardQueryEquals
argument_list|(
literal|"Te?m"
argument_list|,
literal|false
argument_list|,
literal|"Te?m"
argument_list|)
expr_stmt|;
name|assertWildcardQueryEquals
argument_list|(
literal|"TE?M"
argument_list|,
literal|false
argument_list|,
literal|"TE?M"
argument_list|)
expr_stmt|;
name|assertWildcardQueryEquals
argument_list|(
literal|"Te?m*gerM"
argument_list|,
literal|false
argument_list|,
literal|"Te?m*gerM"
argument_list|)
expr_stmt|;
comment|//  Fuzzy queries:
name|assertWildcardQueryEquals
argument_list|(
literal|"Term~"
argument_list|,
literal|"term~2"
argument_list|)
expr_stmt|;
name|assertWildcardQueryEquals
argument_list|(
literal|"Term~"
argument_list|,
literal|true
argument_list|,
literal|"term~2"
argument_list|)
expr_stmt|;
name|assertWildcardQueryEquals
argument_list|(
literal|"Term~"
argument_list|,
literal|false
argument_list|,
literal|"Term~2"
argument_list|)
expr_stmt|;
comment|//  Range queries:
name|assertWildcardQueryEquals
argument_list|(
literal|"[A TO C]"
argument_list|,
literal|"[a TO c]"
argument_list|)
expr_stmt|;
name|assertWildcardQueryEquals
argument_list|(
literal|"[A TO C]"
argument_list|,
literal|true
argument_list|,
literal|"[a TO c]"
argument_list|)
expr_stmt|;
name|assertWildcardQueryEquals
argument_list|(
literal|"[A TO C]"
argument_list|,
literal|false
argument_list|,
literal|"[A TO C]"
argument_list|)
expr_stmt|;
comment|// Test suffix queries: first disallow
try|try
block|{
name|assertWildcardQueryEquals
argument_list|(
literal|"*Term"
argument_list|,
literal|true
argument_list|,
literal|"*term"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|pe
parameter_list|)
block|{
comment|// expected exception
if|if
condition|(
operator|!
name|isQueryParserException
argument_list|(
name|pe
argument_list|)
condition|)
block|{
name|fail
argument_list|()
expr_stmt|;
block|}
block|}
try|try
block|{
name|assertWildcardQueryEquals
argument_list|(
literal|"?Term"
argument_list|,
literal|true
argument_list|,
literal|"?term"
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|pe
parameter_list|)
block|{
comment|// expected exception
if|if
condition|(
operator|!
name|isQueryParserException
argument_list|(
name|pe
argument_list|)
condition|)
block|{
name|fail
argument_list|()
expr_stmt|;
block|}
block|}
comment|// Test suffix queries: then allow
name|assertWildcardQueryEquals
argument_list|(
literal|"*Term"
argument_list|,
literal|true
argument_list|,
literal|"*term"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertWildcardQueryEquals
argument_list|(
literal|"?Term"
argument_list|,
literal|true
argument_list|,
literal|"?term"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|testLeadingWildcardType
specifier|public
name|void
name|testLeadingWildcardType
parameter_list|()
throws|throws
name|Exception
block|{
name|CommonQueryParserConfiguration
name|cqpC
init|=
name|getParserConfig
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|cqpC
operator|.
name|setAllowLeadingWildcard
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|WildcardQuery
operator|.
name|class
argument_list|,
name|getQuery
argument_list|(
literal|"t*erm*"
argument_list|,
name|cqpC
argument_list|)
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|WildcardQuery
operator|.
name|class
argument_list|,
name|getQuery
argument_list|(
literal|"?term*"
argument_list|,
name|cqpC
argument_list|)
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|WildcardQuery
operator|.
name|class
argument_list|,
name|getQuery
argument_list|(
literal|"*term*"
argument_list|,
name|cqpC
argument_list|)
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testQPA
specifier|public
name|void
name|testQPA
parameter_list|()
throws|throws
name|Exception
block|{
name|assertQueryEquals
argument_list|(
literal|"term term^3.0 term"
argument_list|,
name|qpAnalyzer
argument_list|,
literal|"term term^3.0 term"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"term stop^3.0 term"
argument_list|,
name|qpAnalyzer
argument_list|,
literal|"term term"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"term term term"
argument_list|,
name|qpAnalyzer
argument_list|,
literal|"term term term"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"term +stop term"
argument_list|,
name|qpAnalyzer
argument_list|,
literal|"term term"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"term -stop term"
argument_list|,
name|qpAnalyzer
argument_list|,
literal|"term term"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"drop AND (stop) AND roll"
argument_list|,
name|qpAnalyzer
argument_list|,
literal|"+drop +roll"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"term +(stop) term"
argument_list|,
name|qpAnalyzer
argument_list|,
literal|"term term"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"term -(stop) term"
argument_list|,
name|qpAnalyzer
argument_list|,
literal|"term term"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"drop AND stop AND roll"
argument_list|,
name|qpAnalyzer
argument_list|,
literal|"+drop +roll"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"term phrase term"
argument_list|,
name|qpAnalyzer
argument_list|,
literal|"term (phrase1 phrase2) term"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"term AND NOT phrase term"
argument_list|,
name|qpAnalyzer
argument_list|,
literal|"+term -(phrase1 phrase2) term"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"stop^3"
argument_list|,
name|qpAnalyzer
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"stop"
argument_list|,
name|qpAnalyzer
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"(stop)^3"
argument_list|,
name|qpAnalyzer
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"((stop))^3"
argument_list|,
name|qpAnalyzer
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"(stop^3)"
argument_list|,
name|qpAnalyzer
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"((stop)^3)"
argument_list|,
name|qpAnalyzer
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"(stop)"
argument_list|,
name|qpAnalyzer
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"((stop))"
argument_list|,
name|qpAnalyzer
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|getQuery
argument_list|(
literal|"term term term"
argument_list|,
name|qpAnalyzer
argument_list|)
operator|instanceof
name|BooleanQuery
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|getQuery
argument_list|(
literal|"term +stop"
argument_list|,
name|qpAnalyzer
argument_list|)
operator|instanceof
name|TermQuery
argument_list|)
expr_stmt|;
block|}
DECL|method|testRange
specifier|public
name|void
name|testRange
parameter_list|()
throws|throws
name|Exception
block|{
name|assertQueryEquals
argument_list|(
literal|"[ a TO z]"
argument_list|,
literal|null
argument_list|,
literal|"[a TO z]"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"[ a TO z}"
argument_list|,
literal|null
argument_list|,
literal|"[a TO z}"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"{ a TO z]"
argument_list|,
literal|null
argument_list|,
literal|"{a TO z]"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MultiTermQuery
operator|.
name|CONSTANT_SCORE_AUTO_REWRITE_DEFAULT
argument_list|,
operator|(
operator|(
name|TermRangeQuery
operator|)
name|getQuery
argument_list|(
literal|"[ a TO z]"
argument_list|)
operator|)
operator|.
name|getRewriteMethod
argument_list|()
argument_list|)
expr_stmt|;
name|CommonQueryParserConfiguration
name|qp
init|=
name|getParserConfig
argument_list|(
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|,
name|MockTokenizer
operator|.
name|SIMPLE
argument_list|,
literal|true
argument_list|)
argument_list|)
decl_stmt|;
name|qp
operator|.
name|setMultiTermRewriteMethod
argument_list|(
name|MultiTermQuery
operator|.
name|SCORING_BOOLEAN_QUERY_REWRITE
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MultiTermQuery
operator|.
name|SCORING_BOOLEAN_QUERY_REWRITE
argument_list|,
operator|(
operator|(
name|TermRangeQuery
operator|)
name|getQuery
argument_list|(
literal|"[ a TO z]"
argument_list|,
name|qp
argument_list|)
operator|)
operator|.
name|getRewriteMethod
argument_list|()
argument_list|)
expr_stmt|;
comment|// test open ranges
name|assertQueryEquals
argument_list|(
literal|"[ a TO * ]"
argument_list|,
literal|null
argument_list|,
literal|"[a TO *]"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"[ * TO z ]"
argument_list|,
literal|null
argument_list|,
literal|"[* TO z]"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"[ * TO * ]"
argument_list|,
literal|null
argument_list|,
literal|"[* TO *]"
argument_list|)
expr_stmt|;
comment|// mixing exclude and include bounds
name|assertQueryEquals
argument_list|(
literal|"{ a TO z ]"
argument_list|,
literal|null
argument_list|,
literal|"{a TO z]"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"[ a TO z }"
argument_list|,
literal|null
argument_list|,
literal|"[a TO z}"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"{ a TO * ]"
argument_list|,
literal|null
argument_list|,
literal|"{a TO *]"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"[ * TO z }"
argument_list|,
literal|null
argument_list|,
literal|"[* TO z}"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"[ a TO z ]"
argument_list|,
literal|null
argument_list|,
literal|"[a TO z]"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"{ a TO z}"
argument_list|,
literal|null
argument_list|,
literal|"{a TO z}"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"{ a TO z }"
argument_list|,
literal|null
argument_list|,
literal|"{a TO z}"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"{ a TO z }^2.0"
argument_list|,
literal|null
argument_list|,
literal|"{a TO z}^2.0"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"[ a TO z] OR bar"
argument_list|,
literal|null
argument_list|,
literal|"[a TO z] bar"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"[ a TO z] AND bar"
argument_list|,
literal|null
argument_list|,
literal|"+[a TO z] +bar"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"( bar blar { a TO z}) "
argument_list|,
literal|null
argument_list|,
literal|"bar blar {a TO z}"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"gack ( bar blar { a TO z}) "
argument_list|,
literal|null
argument_list|,
literal|"gack (bar blar {a TO z})"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"[* TO Z]"
argument_list|,
literal|null
argument_list|,
literal|"[* TO z]"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"[A TO *]"
argument_list|,
literal|null
argument_list|,
literal|"[a TO *]"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"[* TO *]"
argument_list|,
literal|null
argument_list|,
literal|"[* TO *]"
argument_list|)
expr_stmt|;
block|}
DECL|method|testRangeWithPhrase
specifier|public
name|void
name|testRangeWithPhrase
parameter_list|()
throws|throws
name|Exception
block|{
name|assertQueryEquals
argument_list|(
literal|"[\\* TO \"*\"]"
argument_list|,
literal|null
argument_list|,
literal|"[\\* TO \\*]"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"[\"*\" TO *]"
argument_list|,
literal|null
argument_list|,
literal|"[\\* TO *]"
argument_list|)
expr_stmt|;
block|}
DECL|method|escapeDateString
specifier|private
name|String
name|escapeDateString
parameter_list|(
name|String
name|s
parameter_list|)
block|{
if|if
condition|(
name|s
operator|.
name|indexOf
argument_list|(
literal|" "
argument_list|)
operator|>
operator|-
literal|1
condition|)
block|{
return|return
literal|"\""
operator|+
name|s
operator|+
literal|"\""
return|;
block|}
else|else
block|{
return|return
name|s
return|;
block|}
block|}
comment|/** for testing DateTools support */
DECL|method|getDate
specifier|private
name|String
name|getDate
parameter_list|(
name|String
name|s
parameter_list|,
name|DateTools
operator|.
name|Resolution
name|resolution
parameter_list|)
throws|throws
name|Exception
block|{
comment|// we use the default Locale since LuceneTestCase randomizes it
name|DateFormat
name|df
init|=
name|DateFormat
operator|.
name|getDateInstance
argument_list|(
name|DateFormat
operator|.
name|SHORT
argument_list|,
name|Locale
operator|.
name|getDefault
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|getDate
argument_list|(
name|df
operator|.
name|parse
argument_list|(
name|s
argument_list|)
argument_list|,
name|resolution
argument_list|)
return|;
block|}
comment|/** for testing DateTools support */
DECL|method|getDate
specifier|private
name|String
name|getDate
parameter_list|(
name|Date
name|d
parameter_list|,
name|DateTools
operator|.
name|Resolution
name|resolution
parameter_list|)
block|{
return|return
name|DateTools
operator|.
name|dateToString
argument_list|(
name|d
argument_list|,
name|resolution
argument_list|)
return|;
block|}
DECL|method|getLocalizedDate
specifier|private
name|String
name|getLocalizedDate
parameter_list|(
name|int
name|year
parameter_list|,
name|int
name|month
parameter_list|,
name|int
name|day
parameter_list|)
block|{
comment|// we use the default Locale/TZ since LuceneTestCase randomizes it
name|DateFormat
name|df
init|=
name|DateFormat
operator|.
name|getDateInstance
argument_list|(
name|DateFormat
operator|.
name|SHORT
argument_list|,
name|Locale
operator|.
name|getDefault
argument_list|()
argument_list|)
decl_stmt|;
name|Calendar
name|calendar
init|=
operator|new
name|GregorianCalendar
argument_list|(
name|TimeZone
operator|.
name|getDefault
argument_list|()
argument_list|,
name|Locale
operator|.
name|getDefault
argument_list|()
argument_list|)
decl_stmt|;
name|calendar
operator|.
name|clear
argument_list|()
expr_stmt|;
name|calendar
operator|.
name|set
argument_list|(
name|year
argument_list|,
name|month
argument_list|,
name|day
argument_list|)
expr_stmt|;
name|calendar
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|HOUR_OF_DAY
argument_list|,
literal|23
argument_list|)
expr_stmt|;
name|calendar
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|MINUTE
argument_list|,
literal|59
argument_list|)
expr_stmt|;
name|calendar
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|SECOND
argument_list|,
literal|59
argument_list|)
expr_stmt|;
name|calendar
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|MILLISECOND
argument_list|,
literal|999
argument_list|)
expr_stmt|;
return|return
name|df
operator|.
name|format
argument_list|(
name|calendar
operator|.
name|getTime
argument_list|()
argument_list|)
return|;
block|}
DECL|method|testDateRange
specifier|public
name|void
name|testDateRange
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|startDate
init|=
name|getLocalizedDate
argument_list|(
literal|2002
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|String
name|endDate
init|=
name|getLocalizedDate
argument_list|(
literal|2002
argument_list|,
literal|1
argument_list|,
literal|4
argument_list|)
decl_stmt|;
comment|// we use the default Locale/TZ since LuceneTestCase randomizes it
name|Calendar
name|endDateExpected
init|=
operator|new
name|GregorianCalendar
argument_list|(
name|TimeZone
operator|.
name|getDefault
argument_list|()
argument_list|,
name|Locale
operator|.
name|getDefault
argument_list|()
argument_list|)
decl_stmt|;
name|endDateExpected
operator|.
name|clear
argument_list|()
expr_stmt|;
name|endDateExpected
operator|.
name|set
argument_list|(
literal|2002
argument_list|,
literal|1
argument_list|,
literal|4
argument_list|,
literal|23
argument_list|,
literal|59
argument_list|,
literal|59
argument_list|)
expr_stmt|;
name|endDateExpected
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|MILLISECOND
argument_list|,
literal|999
argument_list|)
expr_stmt|;
specifier|final
name|String
name|defaultField
init|=
literal|"default"
decl_stmt|;
specifier|final
name|String
name|monthField
init|=
literal|"month"
decl_stmt|;
specifier|final
name|String
name|hourField
init|=
literal|"hour"
decl_stmt|;
name|Analyzer
name|a
init|=
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|,
name|MockTokenizer
operator|.
name|SIMPLE
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|CommonQueryParserConfiguration
name|qp
init|=
name|getParserConfig
argument_list|(
name|a
argument_list|)
decl_stmt|;
comment|// set a field specific date resolution
name|setDateResolution
argument_list|(
name|qp
argument_list|,
name|monthField
argument_list|,
name|DateTools
operator|.
name|Resolution
operator|.
name|MONTH
argument_list|)
expr_stmt|;
comment|// set default date resolution to MILLISECOND
name|qp
operator|.
name|setDateResolution
argument_list|(
name|DateTools
operator|.
name|Resolution
operator|.
name|MILLISECOND
argument_list|)
expr_stmt|;
comment|// set second field specific date resolution
name|setDateResolution
argument_list|(
name|qp
argument_list|,
name|hourField
argument_list|,
name|DateTools
operator|.
name|Resolution
operator|.
name|HOUR
argument_list|)
expr_stmt|;
comment|// for this field no field specific date resolution has been set,
comment|// so verify if the default resolution is used
name|assertDateRangeQueryEquals
argument_list|(
name|qp
argument_list|,
name|defaultField
argument_list|,
name|startDate
argument_list|,
name|endDate
argument_list|,
name|endDateExpected
operator|.
name|getTime
argument_list|()
argument_list|,
name|DateTools
operator|.
name|Resolution
operator|.
name|MILLISECOND
argument_list|)
expr_stmt|;
comment|// verify if field specific date resolutions are used for these two fields
name|assertDateRangeQueryEquals
argument_list|(
name|qp
argument_list|,
name|monthField
argument_list|,
name|startDate
argument_list|,
name|endDate
argument_list|,
name|endDateExpected
operator|.
name|getTime
argument_list|()
argument_list|,
name|DateTools
operator|.
name|Resolution
operator|.
name|MONTH
argument_list|)
expr_stmt|;
name|assertDateRangeQueryEquals
argument_list|(
name|qp
argument_list|,
name|hourField
argument_list|,
name|startDate
argument_list|,
name|endDate
argument_list|,
name|endDateExpected
operator|.
name|getTime
argument_list|()
argument_list|,
name|DateTools
operator|.
name|Resolution
operator|.
name|HOUR
argument_list|)
expr_stmt|;
block|}
DECL|method|assertDateRangeQueryEquals
specifier|public
name|void
name|assertDateRangeQueryEquals
parameter_list|(
name|CommonQueryParserConfiguration
name|cqpC
parameter_list|,
name|String
name|field
parameter_list|,
name|String
name|startDate
parameter_list|,
name|String
name|endDate
parameter_list|,
name|Date
name|endDateInclusive
parameter_list|,
name|DateTools
operator|.
name|Resolution
name|resolution
parameter_list|)
throws|throws
name|Exception
block|{
name|assertQueryEquals
argument_list|(
name|cqpC
argument_list|,
name|field
argument_list|,
name|field
operator|+
literal|":["
operator|+
name|escapeDateString
argument_list|(
name|startDate
argument_list|)
operator|+
literal|" TO "
operator|+
name|escapeDateString
argument_list|(
name|endDate
argument_list|)
operator|+
literal|"]"
argument_list|,
literal|"["
operator|+
name|getDate
argument_list|(
name|startDate
argument_list|,
name|resolution
argument_list|)
operator|+
literal|" TO "
operator|+
name|getDate
argument_list|(
name|endDateInclusive
argument_list|,
name|resolution
argument_list|)
operator|+
literal|"]"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
name|cqpC
argument_list|,
name|field
argument_list|,
name|field
operator|+
literal|":{"
operator|+
name|escapeDateString
argument_list|(
name|startDate
argument_list|)
operator|+
literal|" TO "
operator|+
name|escapeDateString
argument_list|(
name|endDate
argument_list|)
operator|+
literal|"}"
argument_list|,
literal|"{"
operator|+
name|getDate
argument_list|(
name|startDate
argument_list|,
name|resolution
argument_list|)
operator|+
literal|" TO "
operator|+
name|getDate
argument_list|(
name|endDate
argument_list|,
name|resolution
argument_list|)
operator|+
literal|"}"
argument_list|)
expr_stmt|;
block|}
DECL|method|testEscaped
specifier|public
name|void
name|testEscaped
parameter_list|()
throws|throws
name|Exception
block|{
name|Analyzer
name|a
init|=
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|,
name|MockTokenizer
operator|.
name|WHITESPACE
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|/*assertQueryEquals("\\[brackets", a, "\\[brackets");     assertQueryEquals("\\[brackets", null, "brackets");     assertQueryEquals("\\\\", a, "\\\\");     assertQueryEquals("\\+blah", a, "\\+blah");     assertQueryEquals("\\(blah", a, "\\(blah");      assertQueryEquals("\\-blah", a, "\\-blah");     assertQueryEquals("\\!blah", a, "\\!blah");     assertQueryEquals("\\{blah", a, "\\{blah");     assertQueryEquals("\\}blah", a, "\\}blah");     assertQueryEquals("\\:blah", a, "\\:blah");     assertQueryEquals("\\^blah", a, "\\^blah");     assertQueryEquals("\\[blah", a, "\\[blah");     assertQueryEquals("\\]blah", a, "\\]blah");     assertQueryEquals("\\\"blah", a, "\\\"blah");     assertQueryEquals("\\(blah", a, "\\(blah");     assertQueryEquals("\\)blah", a, "\\)blah");     assertQueryEquals("\\~blah", a, "\\~blah");     assertQueryEquals("\\*blah", a, "\\*blah");     assertQueryEquals("\\?blah", a, "\\?blah");     //assertQueryEquals("foo \\&\\& bar", a, "foo \\&\\& bar");     //assertQueryEquals("foo \\|| bar", a, "foo \\|| bar");     //assertQueryEquals("foo \\AND bar", a, "foo \\AND bar");*/
name|assertQueryEquals
argument_list|(
literal|"\\a"
argument_list|,
name|a
argument_list|,
literal|"a"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"a\\-b:c"
argument_list|,
name|a
argument_list|,
literal|"a-b:c"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"a\\+b:c"
argument_list|,
name|a
argument_list|,
literal|"a+b:c"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"a\\:b:c"
argument_list|,
name|a
argument_list|,
literal|"a:b:c"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"a\\\\b:c"
argument_list|,
name|a
argument_list|,
literal|"a\\b:c"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"a:b\\-c"
argument_list|,
name|a
argument_list|,
literal|"a:b-c"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"a:b\\+c"
argument_list|,
name|a
argument_list|,
literal|"a:b+c"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"a:b\\:c"
argument_list|,
name|a
argument_list|,
literal|"a:b:c"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"a:b\\\\c"
argument_list|,
name|a
argument_list|,
literal|"a:b\\c"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"a:b\\-c*"
argument_list|,
name|a
argument_list|,
literal|"a:b-c*"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"a:b\\+c*"
argument_list|,
name|a
argument_list|,
literal|"a:b+c*"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"a:b\\:c*"
argument_list|,
name|a
argument_list|,
literal|"a:b:c*"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"a:b\\\\c*"
argument_list|,
name|a
argument_list|,
literal|"a:b\\c*"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"a:b\\-c~"
argument_list|,
name|a
argument_list|,
literal|"a:b-c~2"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"a:b\\+c~"
argument_list|,
name|a
argument_list|,
literal|"a:b+c~2"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"a:b\\:c~"
argument_list|,
name|a
argument_list|,
literal|"a:b:c~2"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"a:b\\\\c~"
argument_list|,
name|a
argument_list|,
literal|"a:b\\c~2"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"[ a\\- TO a\\+ ]"
argument_list|,
literal|null
argument_list|,
literal|"[a- TO a+]"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"[ a\\: TO a\\~ ]"
argument_list|,
literal|null
argument_list|,
literal|"[a: TO a~]"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"[ a\\\\ TO a\\* ]"
argument_list|,
literal|null
argument_list|,
literal|"[a\\ TO a*]"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"[\"c\\:\\\\temp\\\\\\~foo0.txt\" TO \"c\\:\\\\temp\\\\\\~foo9.txt\"]"
argument_list|,
name|a
argument_list|,
literal|"[c:\\temp\\~foo0.txt TO c:\\temp\\~foo9.txt]"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"a\\\\\\+b"
argument_list|,
name|a
argument_list|,
literal|"a\\+b"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"a \\\"b c\\\" d"
argument_list|,
name|a
argument_list|,
literal|"a \"b c\" d"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"\"a \\\"b c\\\" d\""
argument_list|,
name|a
argument_list|,
literal|"\"a \"b c\" d\""
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"\"a \\+b c d\""
argument_list|,
name|a
argument_list|,
literal|"\"a +b c d\""
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"c\\:\\\\temp\\\\\\~foo.txt"
argument_list|,
name|a
argument_list|,
literal|"c:\\temp\\~foo.txt"
argument_list|)
expr_stmt|;
name|assertParseException
argument_list|(
literal|"XY\\"
argument_list|)
expr_stmt|;
comment|// there must be a character after the escape char
comment|// test unicode escaping
name|assertQueryEquals
argument_list|(
literal|"a\\u0062c"
argument_list|,
name|a
argument_list|,
literal|"abc"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"XY\\u005a"
argument_list|,
name|a
argument_list|,
literal|"XYZ"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"XY\\u005A"
argument_list|,
name|a
argument_list|,
literal|"XYZ"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"\"a \\\\\\u0028\\u0062\\\" c\""
argument_list|,
name|a
argument_list|,
literal|"\"a \\(b\" c\""
argument_list|)
expr_stmt|;
name|assertParseException
argument_list|(
literal|"XY\\u005G"
argument_list|)
expr_stmt|;
comment|// test non-hex character in escaped unicode sequence
name|assertParseException
argument_list|(
literal|"XY\\u005"
argument_list|)
expr_stmt|;
comment|// test incomplete escaped unicode sequence
comment|// Tests bug LUCENE-800
name|assertQueryEquals
argument_list|(
literal|"(item:\\\\ item:ABCD\\\\)"
argument_list|,
name|a
argument_list|,
literal|"item:\\ item:ABCD\\"
argument_list|)
expr_stmt|;
name|assertParseException
argument_list|(
literal|"(item:\\\\ item:ABCD\\\\))"
argument_list|)
expr_stmt|;
comment|// unmatched closing paranthesis
name|assertQueryEquals
argument_list|(
literal|"\\*"
argument_list|,
name|a
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"\\\\"
argument_list|,
name|a
argument_list|,
literal|"\\"
argument_list|)
expr_stmt|;
comment|// escaped backslash
name|assertParseException
argument_list|(
literal|"\\"
argument_list|)
expr_stmt|;
comment|// a backslash must always be escaped
comment|// LUCENE-1189
name|assertQueryEquals
argument_list|(
literal|"(\"a\\\\\") or (\"b\")"
argument_list|,
name|a
argument_list|,
literal|"a\\ or b"
argument_list|)
expr_stmt|;
block|}
DECL|method|testEscapedVsQuestionMarkAsWildcard
specifier|public
name|void
name|testEscapedVsQuestionMarkAsWildcard
parameter_list|()
throws|throws
name|Exception
block|{
name|Analyzer
name|a
init|=
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|,
name|MockTokenizer
operator|.
name|WHITESPACE
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertQueryEquals
argument_list|(
literal|"a:b\\-?c"
argument_list|,
name|a
argument_list|,
literal|"a:b\\-?c"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"a:b\\+?c"
argument_list|,
name|a
argument_list|,
literal|"a:b\\+?c"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"a:b\\:?c"
argument_list|,
name|a
argument_list|,
literal|"a:b\\:?c"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"a:b\\\\?c"
argument_list|,
name|a
argument_list|,
literal|"a:b\\\\?c"
argument_list|)
expr_stmt|;
block|}
DECL|method|testQueryStringEscaping
specifier|public
name|void
name|testQueryStringEscaping
parameter_list|()
throws|throws
name|Exception
block|{
name|Analyzer
name|a
init|=
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|,
name|MockTokenizer
operator|.
name|WHITESPACE
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertEscapedQueryEquals
argument_list|(
literal|"a-b:c"
argument_list|,
name|a
argument_list|,
literal|"a\\-b\\:c"
argument_list|)
expr_stmt|;
name|assertEscapedQueryEquals
argument_list|(
literal|"a+b:c"
argument_list|,
name|a
argument_list|,
literal|"a\\+b\\:c"
argument_list|)
expr_stmt|;
name|assertEscapedQueryEquals
argument_list|(
literal|"a:b:c"
argument_list|,
name|a
argument_list|,
literal|"a\\:b\\:c"
argument_list|)
expr_stmt|;
name|assertEscapedQueryEquals
argument_list|(
literal|"a\\b:c"
argument_list|,
name|a
argument_list|,
literal|"a\\\\b\\:c"
argument_list|)
expr_stmt|;
name|assertEscapedQueryEquals
argument_list|(
literal|"a:b-c"
argument_list|,
name|a
argument_list|,
literal|"a\\:b\\-c"
argument_list|)
expr_stmt|;
name|assertEscapedQueryEquals
argument_list|(
literal|"a:b+c"
argument_list|,
name|a
argument_list|,
literal|"a\\:b\\+c"
argument_list|)
expr_stmt|;
name|assertEscapedQueryEquals
argument_list|(
literal|"a:b:c"
argument_list|,
name|a
argument_list|,
literal|"a\\:b\\:c"
argument_list|)
expr_stmt|;
name|assertEscapedQueryEquals
argument_list|(
literal|"a:b\\c"
argument_list|,
name|a
argument_list|,
literal|"a\\:b\\\\c"
argument_list|)
expr_stmt|;
name|assertEscapedQueryEquals
argument_list|(
literal|"a:b-c*"
argument_list|,
name|a
argument_list|,
literal|"a\\:b\\-c\\*"
argument_list|)
expr_stmt|;
name|assertEscapedQueryEquals
argument_list|(
literal|"a:b+c*"
argument_list|,
name|a
argument_list|,
literal|"a\\:b\\+c\\*"
argument_list|)
expr_stmt|;
name|assertEscapedQueryEquals
argument_list|(
literal|"a:b:c*"
argument_list|,
name|a
argument_list|,
literal|"a\\:b\\:c\\*"
argument_list|)
expr_stmt|;
name|assertEscapedQueryEquals
argument_list|(
literal|"a:b\\\\c*"
argument_list|,
name|a
argument_list|,
literal|"a\\:b\\\\\\\\c\\*"
argument_list|)
expr_stmt|;
name|assertEscapedQueryEquals
argument_list|(
literal|"a:b-?c"
argument_list|,
name|a
argument_list|,
literal|"a\\:b\\-\\?c"
argument_list|)
expr_stmt|;
name|assertEscapedQueryEquals
argument_list|(
literal|"a:b+?c"
argument_list|,
name|a
argument_list|,
literal|"a\\:b\\+\\?c"
argument_list|)
expr_stmt|;
name|assertEscapedQueryEquals
argument_list|(
literal|"a:b:?c"
argument_list|,
name|a
argument_list|,
literal|"a\\:b\\:\\?c"
argument_list|)
expr_stmt|;
name|assertEscapedQueryEquals
argument_list|(
literal|"a:b?c"
argument_list|,
name|a
argument_list|,
literal|"a\\:b\\?c"
argument_list|)
expr_stmt|;
name|assertEscapedQueryEquals
argument_list|(
literal|"a:b-c~"
argument_list|,
name|a
argument_list|,
literal|"a\\:b\\-c\\~"
argument_list|)
expr_stmt|;
name|assertEscapedQueryEquals
argument_list|(
literal|"a:b+c~"
argument_list|,
name|a
argument_list|,
literal|"a\\:b\\+c\\~"
argument_list|)
expr_stmt|;
name|assertEscapedQueryEquals
argument_list|(
literal|"a:b:c~"
argument_list|,
name|a
argument_list|,
literal|"a\\:b\\:c\\~"
argument_list|)
expr_stmt|;
name|assertEscapedQueryEquals
argument_list|(
literal|"a:b\\c~"
argument_list|,
name|a
argument_list|,
literal|"a\\:b\\\\c\\~"
argument_list|)
expr_stmt|;
name|assertEscapedQueryEquals
argument_list|(
literal|"[ a - TO a+ ]"
argument_list|,
literal|null
argument_list|,
literal|"\\[ a \\- TO a\\+ \\]"
argument_list|)
expr_stmt|;
name|assertEscapedQueryEquals
argument_list|(
literal|"[ a : TO a~ ]"
argument_list|,
literal|null
argument_list|,
literal|"\\[ a \\: TO a\\~ \\]"
argument_list|)
expr_stmt|;
name|assertEscapedQueryEquals
argument_list|(
literal|"[ a\\ TO a* ]"
argument_list|,
literal|null
argument_list|,
literal|"\\[ a\\\\ TO a\\* \\]"
argument_list|)
expr_stmt|;
comment|// LUCENE-881
name|assertEscapedQueryEquals
argument_list|(
literal|"|| abc ||"
argument_list|,
name|a
argument_list|,
literal|"\\|\\| abc \\|\\|"
argument_list|)
expr_stmt|;
name|assertEscapedQueryEquals
argument_list|(
literal|"&& abc&&"
argument_list|,
name|a
argument_list|,
literal|"\\&\\& abc \\&\\&"
argument_list|)
expr_stmt|;
block|}
DECL|method|testTabNewlineCarriageReturn
specifier|public
name|void
name|testTabNewlineCarriageReturn
parameter_list|()
throws|throws
name|Exception
block|{
name|assertQueryEqualsDOA
argument_list|(
literal|"+weltbank +worlbank"
argument_list|,
literal|null
argument_list|,
literal|"+weltbank +worlbank"
argument_list|)
expr_stmt|;
name|assertQueryEqualsDOA
argument_list|(
literal|"+weltbank\n+worlbank"
argument_list|,
literal|null
argument_list|,
literal|"+weltbank +worlbank"
argument_list|)
expr_stmt|;
name|assertQueryEqualsDOA
argument_list|(
literal|"weltbank \n+worlbank"
argument_list|,
literal|null
argument_list|,
literal|"+weltbank +worlbank"
argument_list|)
expr_stmt|;
name|assertQueryEqualsDOA
argument_list|(
literal|"weltbank \n +worlbank"
argument_list|,
literal|null
argument_list|,
literal|"+weltbank +worlbank"
argument_list|)
expr_stmt|;
name|assertQueryEqualsDOA
argument_list|(
literal|"+weltbank\r+worlbank"
argument_list|,
literal|null
argument_list|,
literal|"+weltbank +worlbank"
argument_list|)
expr_stmt|;
name|assertQueryEqualsDOA
argument_list|(
literal|"weltbank \r+worlbank"
argument_list|,
literal|null
argument_list|,
literal|"+weltbank +worlbank"
argument_list|)
expr_stmt|;
name|assertQueryEqualsDOA
argument_list|(
literal|"weltbank \r +worlbank"
argument_list|,
literal|null
argument_list|,
literal|"+weltbank +worlbank"
argument_list|)
expr_stmt|;
name|assertQueryEqualsDOA
argument_list|(
literal|"+weltbank\r\n+worlbank"
argument_list|,
literal|null
argument_list|,
literal|"+weltbank +worlbank"
argument_list|)
expr_stmt|;
name|assertQueryEqualsDOA
argument_list|(
literal|"weltbank \r\n+worlbank"
argument_list|,
literal|null
argument_list|,
literal|"+weltbank +worlbank"
argument_list|)
expr_stmt|;
name|assertQueryEqualsDOA
argument_list|(
literal|"weltbank \r\n +worlbank"
argument_list|,
literal|null
argument_list|,
literal|"+weltbank +worlbank"
argument_list|)
expr_stmt|;
name|assertQueryEqualsDOA
argument_list|(
literal|"weltbank \r \n +worlbank"
argument_list|,
literal|null
argument_list|,
literal|"+weltbank +worlbank"
argument_list|)
expr_stmt|;
name|assertQueryEqualsDOA
argument_list|(
literal|"+weltbank\t+worlbank"
argument_list|,
literal|null
argument_list|,
literal|"+weltbank +worlbank"
argument_list|)
expr_stmt|;
name|assertQueryEqualsDOA
argument_list|(
literal|"weltbank \t+worlbank"
argument_list|,
literal|null
argument_list|,
literal|"+weltbank +worlbank"
argument_list|)
expr_stmt|;
name|assertQueryEqualsDOA
argument_list|(
literal|"weltbank \t +worlbank"
argument_list|,
literal|null
argument_list|,
literal|"+weltbank +worlbank"
argument_list|)
expr_stmt|;
block|}
DECL|method|testSimpleDAO
specifier|public
name|void
name|testSimpleDAO
parameter_list|()
throws|throws
name|Exception
block|{
name|assertQueryEqualsDOA
argument_list|(
literal|"term term term"
argument_list|,
literal|null
argument_list|,
literal|"+term +term +term"
argument_list|)
expr_stmt|;
name|assertQueryEqualsDOA
argument_list|(
literal|"term +term term"
argument_list|,
literal|null
argument_list|,
literal|"+term +term +term"
argument_list|)
expr_stmt|;
name|assertQueryEqualsDOA
argument_list|(
literal|"term term +term"
argument_list|,
literal|null
argument_list|,
literal|"+term +term +term"
argument_list|)
expr_stmt|;
name|assertQueryEqualsDOA
argument_list|(
literal|"term +term +term"
argument_list|,
literal|null
argument_list|,
literal|"+term +term +term"
argument_list|)
expr_stmt|;
name|assertQueryEqualsDOA
argument_list|(
literal|"-term term term"
argument_list|,
literal|null
argument_list|,
literal|"-term +term +term"
argument_list|)
expr_stmt|;
block|}
DECL|method|testBoost
specifier|public
name|void
name|testBoost
parameter_list|()
throws|throws
name|Exception
block|{
name|CharacterRunAutomaton
name|stopWords
init|=
operator|new
name|CharacterRunAutomaton
argument_list|(
name|BasicAutomata
operator|.
name|makeString
argument_list|(
literal|"on"
argument_list|)
argument_list|)
decl_stmt|;
name|Analyzer
name|oneStopAnalyzer
init|=
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|,
name|MockTokenizer
operator|.
name|SIMPLE
argument_list|,
literal|true
argument_list|,
name|stopWords
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|CommonQueryParserConfiguration
name|qp
init|=
name|getParserConfig
argument_list|(
name|oneStopAnalyzer
argument_list|)
decl_stmt|;
name|Query
name|q
init|=
name|getQuery
argument_list|(
literal|"on^1.0"
argument_list|,
name|qp
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|q
argument_list|)
expr_stmt|;
name|q
operator|=
name|getQuery
argument_list|(
literal|"\"hello\"^2.0"
argument_list|,
name|qp
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|q
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|q
operator|.
name|getBoost
argument_list|()
argument_list|,
operator|(
name|float
operator|)
literal|2.0
argument_list|,
operator|(
name|float
operator|)
literal|0.5
argument_list|)
expr_stmt|;
name|q
operator|=
name|getQuery
argument_list|(
literal|"hello^2.0"
argument_list|,
name|qp
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|q
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|q
operator|.
name|getBoost
argument_list|()
argument_list|,
operator|(
name|float
operator|)
literal|2.0
argument_list|,
operator|(
name|float
operator|)
literal|0.5
argument_list|)
expr_stmt|;
name|q
operator|=
name|getQuery
argument_list|(
literal|"\"on\"^1.0"
argument_list|,
name|qp
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|q
argument_list|)
expr_stmt|;
name|Analyzer
name|a2
init|=
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|,
name|MockTokenizer
operator|.
name|SIMPLE
argument_list|,
literal|true
argument_list|,
name|MockTokenFilter
operator|.
name|ENGLISH_STOPSET
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|CommonQueryParserConfiguration
name|qp2
init|=
name|getParserConfig
argument_list|(
name|a2
argument_list|)
decl_stmt|;
name|q
operator|=
name|getQuery
argument_list|(
literal|"the^3"
argument_list|,
name|qp2
argument_list|)
expr_stmt|;
comment|// "the" is a stop word so the result is an empty query:
name|assertNotNull
argument_list|(
name|q
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|q
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1.0f
argument_list|,
name|q
operator|.
name|getBoost
argument_list|()
argument_list|,
literal|0.01f
argument_list|)
expr_stmt|;
block|}
DECL|method|assertParseException
specifier|public
name|void
name|assertParseException
parameter_list|(
name|String
name|queryString
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
name|getQuery
argument_list|(
name|queryString
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|expected
parameter_list|)
block|{
if|if
condition|(
name|isQueryParserException
argument_list|(
name|expected
argument_list|)
condition|)
block|{
return|return;
block|}
block|}
name|fail
argument_list|(
literal|"ParseException expected, not thrown"
argument_list|)
expr_stmt|;
block|}
DECL|method|assertParseException
specifier|public
name|void
name|assertParseException
parameter_list|(
name|String
name|queryString
parameter_list|,
name|Analyzer
name|a
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
name|getQuery
argument_list|(
name|queryString
argument_list|,
name|a
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|expected
parameter_list|)
block|{
if|if
condition|(
name|isQueryParserException
argument_list|(
name|expected
argument_list|)
condition|)
block|{
return|return;
block|}
block|}
name|fail
argument_list|(
literal|"ParseException expected, not thrown"
argument_list|)
expr_stmt|;
block|}
DECL|method|testException
specifier|public
name|void
name|testException
parameter_list|()
throws|throws
name|Exception
block|{
name|assertParseException
argument_list|(
literal|"\"some phrase"
argument_list|)
expr_stmt|;
name|assertParseException
argument_list|(
literal|"(foo bar"
argument_list|)
expr_stmt|;
name|assertParseException
argument_list|(
literal|"foo bar))"
argument_list|)
expr_stmt|;
name|assertParseException
argument_list|(
literal|"field:term:with:colon some more terms"
argument_list|)
expr_stmt|;
name|assertParseException
argument_list|(
literal|"(sub query)^5.0^2.0 plus more"
argument_list|)
expr_stmt|;
name|assertParseException
argument_list|(
literal|"secret AND illegal) AND access:confidential"
argument_list|)
expr_stmt|;
block|}
DECL|method|testBooleanQuery
specifier|public
name|void
name|testBooleanQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|BooleanQuery
operator|.
name|setMaxClauseCount
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|Analyzer
name|purWhitespaceAnalyzer
init|=
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|,
name|MockTokenizer
operator|.
name|WHITESPACE
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertParseException
argument_list|(
literal|"one two three"
argument_list|,
name|purWhitespaceAnalyzer
argument_list|)
expr_stmt|;
block|}
comment|/**    * This test differs from TestPrecedenceQueryParser    */
DECL|method|testPrecedence
specifier|public
name|void
name|testPrecedence
parameter_list|()
throws|throws
name|Exception
block|{
name|CommonQueryParserConfiguration
name|qp
init|=
name|getParserConfig
argument_list|(
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|,
name|MockTokenizer
operator|.
name|WHITESPACE
argument_list|,
literal|false
argument_list|)
argument_list|)
decl_stmt|;
name|Query
name|query1
init|=
name|getQuery
argument_list|(
literal|"A AND B OR C AND D"
argument_list|,
name|qp
argument_list|)
decl_stmt|;
name|Query
name|query2
init|=
name|getQuery
argument_list|(
literal|"+A +B +C +D"
argument_list|,
name|qp
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|query1
argument_list|,
name|query2
argument_list|)
expr_stmt|;
block|}
comment|// Todo: convert this from DateField to DateUtil
comment|//  public void testLocalDateFormat() throws IOException, ParseException {
comment|//    Directory ramDir = newDirectory();
comment|//    IndexWriter iw = new IndexWriter(ramDir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)));
comment|//    addDateDoc("a", 2005, 12, 2, 10, 15, 33, iw);
comment|//    addDateDoc("b", 2005, 12, 4, 22, 15, 00, iw);
comment|//    iw.close();
comment|//    IndexSearcher is = new IndexSearcher(ramDir, true);
comment|//    assertHits(1, "[12/1/2005 TO 12/3/2005]", is);
comment|//    assertHits(2, "[12/1/2005 TO 12/4/2005]", is);
comment|//    assertHits(1, "[12/3/2005 TO 12/4/2005]", is);
comment|//    assertHits(1, "{12/1/2005 TO 12/3/2005}", is);
comment|//    assertHits(1, "{12/1/2005 TO 12/4/2005}", is);
comment|//    assertHits(0, "{12/3/2005 TO 12/4/2005}", is);
comment|//    is.close();
comment|//    ramDir.close();
comment|//  }
comment|//
comment|//  private void addDateDoc(String content, int year, int month,
comment|//                          int day, int hour, int minute, int second, IndexWriter iw) throws IOException {
comment|//    Document d = new Document();
comment|//    d.add(newField("f", content, Field.Store.YES, Field.Index.ANALYZED));
comment|//    Calendar cal = Calendar.getInstance(Locale.ENGLISH);
comment|//    cal.set(year, month - 1, day, hour, minute, second);
comment|//    d.add(newField("date", DateField.dateToString(cal.getTime()), Field.Store.YES, Field.Index.NOT_ANALYZED));
comment|//    iw.addDocument(d);
comment|//  }
DECL|method|testStarParsing
specifier|public
specifier|abstract
name|void
name|testStarParsing
parameter_list|()
throws|throws
name|Exception
function_decl|;
DECL|method|testEscapedWildcard
specifier|public
name|void
name|testEscapedWildcard
parameter_list|()
throws|throws
name|Exception
block|{
name|CommonQueryParserConfiguration
name|qp
init|=
name|getParserConfig
argument_list|(
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|,
name|MockTokenizer
operator|.
name|WHITESPACE
argument_list|,
literal|false
argument_list|)
argument_list|)
decl_stmt|;
name|WildcardQuery
name|q
init|=
operator|new
name|WildcardQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"foo\\?ba?r"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|q
argument_list|,
name|getQuery
argument_list|(
literal|"foo\\?ba?r"
argument_list|,
name|qp
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testRegexps
specifier|public
name|void
name|testRegexps
parameter_list|()
throws|throws
name|Exception
block|{
name|CommonQueryParserConfiguration
name|qp
init|=
name|getParserConfig
argument_list|(
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|,
name|MockTokenizer
operator|.
name|WHITESPACE
argument_list|,
literal|false
argument_list|)
argument_list|)
decl_stmt|;
name|RegexpQuery
name|q
init|=
operator|new
name|RegexpQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"[a-z][123]"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|q
argument_list|,
name|getQuery
argument_list|(
literal|"/[a-z][123]/"
argument_list|,
name|qp
argument_list|)
argument_list|)
expr_stmt|;
name|qp
operator|.
name|setLowercaseExpandedTerms
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|q
argument_list|,
name|getQuery
argument_list|(
literal|"/[A-Z][123]/"
argument_list|,
name|qp
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|.
name|setBoost
argument_list|(
literal|0.5f
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|q
argument_list|,
name|getQuery
argument_list|(
literal|"/[A-Z][123]/^0.5"
argument_list|,
name|qp
argument_list|)
argument_list|)
expr_stmt|;
name|qp
operator|.
name|setMultiTermRewriteMethod
argument_list|(
name|MultiTermQuery
operator|.
name|SCORING_BOOLEAN_QUERY_REWRITE
argument_list|)
expr_stmt|;
name|q
operator|.
name|setRewriteMethod
argument_list|(
name|MultiTermQuery
operator|.
name|SCORING_BOOLEAN_QUERY_REWRITE
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|getQuery
argument_list|(
literal|"/[A-Z][123]/^0.5"
argument_list|,
name|qp
argument_list|)
operator|instanceof
name|RegexpQuery
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MultiTermQuery
operator|.
name|SCORING_BOOLEAN_QUERY_REWRITE
argument_list|,
operator|(
operator|(
name|RegexpQuery
operator|)
name|getQuery
argument_list|(
literal|"/[A-Z][123]/^0.5"
argument_list|,
name|qp
argument_list|)
operator|)
operator|.
name|getRewriteMethod
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|q
argument_list|,
name|getQuery
argument_list|(
literal|"/[A-Z][123]/^0.5"
argument_list|,
name|qp
argument_list|)
argument_list|)
expr_stmt|;
name|qp
operator|.
name|setMultiTermRewriteMethod
argument_list|(
name|MultiTermQuery
operator|.
name|CONSTANT_SCORE_AUTO_REWRITE_DEFAULT
argument_list|)
expr_stmt|;
name|Query
name|escaped
init|=
operator|new
name|RegexpQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"[a-z]\\/[123]"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|escaped
argument_list|,
name|getQuery
argument_list|(
literal|"/[a-z]\\/[123]/"
argument_list|,
name|qp
argument_list|)
argument_list|)
expr_stmt|;
name|Query
name|escaped2
init|=
operator|new
name|RegexpQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"[a-z]\\*[123]"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|escaped2
argument_list|,
name|getQuery
argument_list|(
literal|"/[a-z]\\*[123]/"
argument_list|,
name|qp
argument_list|)
argument_list|)
expr_stmt|;
name|BooleanQuery
name|complex
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
name|complex
operator|.
name|add
argument_list|(
operator|new
name|RegexpQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"[a-z]\\/[123]"
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|complex
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"path"
argument_list|,
literal|"/etc/init.d/"
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|complex
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"/etc/init[.]d/lucene/"
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|complex
argument_list|,
name|getQuery
argument_list|(
literal|"/[a-z]\\/[123]/ AND path:\"/etc/init.d/\" OR \"/etc\\/init\\[.\\]d/lucene/\" "
argument_list|,
name|qp
argument_list|)
argument_list|)
expr_stmt|;
name|Query
name|re
init|=
operator|new
name|RegexpQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"http.*"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|re
argument_list|,
name|getQuery
argument_list|(
literal|"field:/http.*/"
argument_list|,
name|qp
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|re
argument_list|,
name|getQuery
argument_list|(
literal|"/http.*/"
argument_list|,
name|qp
argument_list|)
argument_list|)
expr_stmt|;
name|re
operator|=
operator|new
name|RegexpQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"http~0.5"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|re
argument_list|,
name|getQuery
argument_list|(
literal|"field:/http~0.5/"
argument_list|,
name|qp
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|re
argument_list|,
name|getQuery
argument_list|(
literal|"/http~0.5/"
argument_list|,
name|qp
argument_list|)
argument_list|)
expr_stmt|;
name|re
operator|=
operator|new
name|RegexpQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"boo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|re
argument_list|,
name|getQuery
argument_list|(
literal|"field:/boo/"
argument_list|,
name|qp
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|re
argument_list|,
name|getQuery
argument_list|(
literal|"/boo/"
argument_list|,
name|qp
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"/boo/"
argument_list|)
argument_list|)
argument_list|,
name|getQuery
argument_list|(
literal|"\"/boo/\""
argument_list|,
name|qp
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"/boo/"
argument_list|)
argument_list|)
argument_list|,
name|getQuery
argument_list|(
literal|"\\/boo\\/"
argument_list|,
name|qp
argument_list|)
argument_list|)
expr_stmt|;
name|BooleanQuery
name|two
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
name|two
operator|.
name|add
argument_list|(
operator|new
name|RegexpQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"foo"
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|two
operator|.
name|add
argument_list|(
operator|new
name|RegexpQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|two
argument_list|,
name|getQuery
argument_list|(
literal|"field:/foo/ field:/bar/"
argument_list|,
name|qp
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|two
argument_list|,
name|getQuery
argument_list|(
literal|"/foo/ /bar/"
argument_list|,
name|qp
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testStopwords
specifier|public
name|void
name|testStopwords
parameter_list|()
throws|throws
name|Exception
block|{
name|CharacterRunAutomaton
name|stopSet
init|=
operator|new
name|CharacterRunAutomaton
argument_list|(
operator|new
name|RegExp
argument_list|(
literal|"the|foo"
argument_list|)
operator|.
name|toAutomaton
argument_list|()
argument_list|)
decl_stmt|;
name|CommonQueryParserConfiguration
name|qp
init|=
name|getParserConfig
argument_list|(
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|,
name|MockTokenizer
operator|.
name|SIMPLE
argument_list|,
literal|true
argument_list|,
name|stopSet
argument_list|,
literal|true
argument_list|)
argument_list|)
decl_stmt|;
name|Query
name|result
init|=
name|getQuery
argument_list|(
literal|"field:the OR field:foo"
argument_list|,
name|qp
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"result is null and it shouldn't be"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"result is not a BooleanQuery"
argument_list|,
name|result
operator|instanceof
name|BooleanQuery
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
operator|(
name|BooleanQuery
operator|)
name|result
operator|)
operator|.
name|clauses
argument_list|()
operator|.
name|size
argument_list|()
operator|+
literal|" does not equal: "
operator|+
literal|0
argument_list|,
operator|(
operator|(
name|BooleanQuery
operator|)
name|result
operator|)
operator|.
name|clauses
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|result
operator|=
name|getQuery
argument_list|(
literal|"field:woo OR field:the"
argument_list|,
name|qp
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"result is null and it shouldn't be"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"result is not a TermQuery"
argument_list|,
name|result
operator|instanceof
name|TermQuery
argument_list|)
expr_stmt|;
name|result
operator|=
name|getQuery
argument_list|(
literal|"(fieldX:xxxxx OR fieldy:xxxxxxxx)^2 AND (fieldx:the OR fieldy:foo)"
argument_list|,
name|qp
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"result is null and it shouldn't be"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"result is not a BooleanQuery"
argument_list|,
name|result
operator|instanceof
name|BooleanQuery
argument_list|)
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Result: "
operator|+
name|result
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
operator|(
name|BooleanQuery
operator|)
name|result
operator|)
operator|.
name|clauses
argument_list|()
operator|.
name|size
argument_list|()
operator|+
literal|" does not equal: "
operator|+
literal|2
argument_list|,
operator|(
operator|(
name|BooleanQuery
operator|)
name|result
operator|)
operator|.
name|clauses
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
block|}
DECL|method|testPositionIncrement
specifier|public
name|void
name|testPositionIncrement
parameter_list|()
throws|throws
name|Exception
block|{
name|CommonQueryParserConfiguration
name|qp
init|=
name|getParserConfig
argument_list|(
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|,
name|MockTokenizer
operator|.
name|SIMPLE
argument_list|,
literal|true
argument_list|,
name|MockTokenFilter
operator|.
name|ENGLISH_STOPSET
argument_list|,
literal|true
argument_list|)
argument_list|)
decl_stmt|;
name|qp
operator|.
name|setEnablePositionIncrements
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|String
name|qtxt
init|=
literal|"\"the words in poisitions pos02578 are stopped in this phrasequery\""
decl_stmt|;
comment|//               0         2                      5           7  8
name|int
name|expectedPositions
index|[]
init|=
block|{
literal|1
block|,
literal|3
block|,
literal|4
block|,
literal|6
block|,
literal|9
block|}
decl_stmt|;
name|PhraseQuery
name|pq
init|=
operator|(
name|PhraseQuery
operator|)
name|getQuery
argument_list|(
name|qtxt
argument_list|,
name|qp
argument_list|)
decl_stmt|;
comment|//System.out.println("Query text: "+qtxt);
comment|//System.out.println("Result: "+pq);
name|Term
name|t
index|[]
init|=
name|pq
operator|.
name|getTerms
argument_list|()
decl_stmt|;
name|int
name|pos
index|[]
init|=
name|pq
operator|.
name|getPositions
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|t
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
comment|//System.out.println(i+". "+t[i]+"  pos: "+pos[i]);
name|assertEquals
argument_list|(
literal|"term "
operator|+
name|i
operator|+
literal|" = "
operator|+
name|t
index|[
name|i
index|]
operator|+
literal|" has wrong term-position!"
argument_list|,
name|expectedPositions
index|[
name|i
index|]
argument_list|,
name|pos
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testMatchAllDocs
specifier|public
name|void
name|testMatchAllDocs
parameter_list|()
throws|throws
name|Exception
block|{
name|CommonQueryParserConfiguration
name|qp
init|=
name|getParserConfig
argument_list|(
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|,
name|MockTokenizer
operator|.
name|WHITESPACE
argument_list|,
literal|false
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
name|getQuery
argument_list|(
literal|"*:*"
argument_list|,
name|qp
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
name|getQuery
argument_list|(
literal|"(*:*)"
argument_list|,
name|qp
argument_list|)
argument_list|)
expr_stmt|;
name|BooleanQuery
name|bq
init|=
operator|(
name|BooleanQuery
operator|)
name|getQuery
argument_list|(
literal|"+*:* -*:*"
argument_list|,
name|qp
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|bq
operator|.
name|getClauses
argument_list|()
index|[
literal|0
index|]
operator|.
name|getQuery
argument_list|()
operator|instanceof
name|MatchAllDocsQuery
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bq
operator|.
name|getClauses
argument_list|()
index|[
literal|1
index|]
operator|.
name|getQuery
argument_list|()
operator|instanceof
name|MatchAllDocsQuery
argument_list|)
expr_stmt|;
block|}
DECL|method|assertHits
specifier|private
name|void
name|assertHits
parameter_list|(
name|int
name|expected
parameter_list|,
name|String
name|query
parameter_list|,
name|IndexSearcher
name|is
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|oldDefaultField
init|=
name|getDefaultField
argument_list|()
decl_stmt|;
name|setDefaultField
argument_list|(
literal|"date"
argument_list|)
expr_stmt|;
name|CommonQueryParserConfiguration
name|qp
init|=
name|getParserConfig
argument_list|(
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|,
name|MockTokenizer
operator|.
name|WHITESPACE
argument_list|,
literal|false
argument_list|)
argument_list|)
decl_stmt|;
name|qp
operator|.
name|setLocale
argument_list|(
name|Locale
operator|.
name|ENGLISH
argument_list|)
expr_stmt|;
name|Query
name|q
init|=
name|getQuery
argument_list|(
name|query
argument_list|,
name|qp
argument_list|)
decl_stmt|;
name|ScoreDoc
index|[]
name|hits
init|=
name|is
operator|.
name|search
argument_list|(
name|q
argument_list|,
literal|null
argument_list|,
literal|1000
argument_list|)
operator|.
name|scoreDocs
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|hits
operator|.
name|length
argument_list|)
expr_stmt|;
name|setDefaultField
argument_list|(
name|oldDefaultField
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|tearDown
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|BooleanQuery
operator|.
name|setMaxClauseCount
argument_list|(
name|originalMaxClauses
argument_list|)
expr_stmt|;
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
comment|// LUCENE-2002: make sure defaults for StandardAnalyzer's
comment|// enableStopPositionIncr& QueryParser's enablePosIncr
comment|// "match"
DECL|method|testPositionIncrements
specifier|public
name|void
name|testPositionIncrements
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|Analyzer
name|a
init|=
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|,
name|MockTokenizer
operator|.
name|SIMPLE
argument_list|,
literal|true
argument_list|,
name|MockTokenFilter
operator|.
name|ENGLISH_STOPSET
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|IndexWriter
name|w
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
name|a
argument_list|)
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newTextField
argument_list|(
literal|"field"
argument_list|,
literal|"the wizard of ozzy"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|IndexReader
name|r
init|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|w
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|IndexSearcher
name|s
init|=
name|newSearcher
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|Query
name|q
init|=
name|getQuery
argument_list|(
literal|"\"wizard of ozzy\""
argument_list|,
name|a
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|s
operator|.
name|search
argument_list|(
name|q
argument_list|,
literal|1
argument_list|)
operator|.
name|totalHits
argument_list|)
expr_stmt|;
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * adds synonym of "dog" for "dogs".    */
DECL|class|MockSynonymFilter
specifier|private
class|class
name|MockSynonymFilter
extends|extends
name|TokenFilter
block|{
DECL|field|termAtt
name|CharTermAttribute
name|termAtt
init|=
name|addAttribute
argument_list|(
name|CharTermAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|posIncAtt
name|PositionIncrementAttribute
name|posIncAtt
init|=
name|addAttribute
argument_list|(
name|PositionIncrementAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|addSynonym
name|boolean
name|addSynonym
init|=
literal|false
decl_stmt|;
DECL|method|MockSynonymFilter
specifier|public
name|MockSynonymFilter
parameter_list|(
name|TokenStream
name|input
parameter_list|)
block|{
name|super
argument_list|(
name|input
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|incrementToken
specifier|public
specifier|final
name|boolean
name|incrementToken
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|addSynonym
condition|)
block|{
comment|// inject our synonym
name|clearAttributes
argument_list|()
expr_stmt|;
name|termAtt
operator|.
name|setEmpty
argument_list|()
operator|.
name|append
argument_list|(
literal|"dog"
argument_list|)
expr_stmt|;
name|posIncAtt
operator|.
name|setPositionIncrement
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|addSynonym
operator|=
literal|false
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|input
operator|.
name|incrementToken
argument_list|()
condition|)
block|{
name|addSynonym
operator|=
name|termAtt
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
literal|"dogs"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
comment|/** whitespace+lowercase analyzer with synonyms */
DECL|class|Analyzer1
specifier|protected
class|class
name|Analyzer1
extends|extends
name|Analyzer
block|{
DECL|method|Analyzer1
specifier|public
name|Analyzer1
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createComponents
specifier|public
name|TokenStreamComponents
name|createComponents
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|Reader
name|reader
parameter_list|)
block|{
name|Tokenizer
name|tokenizer
init|=
operator|new
name|MockTokenizer
argument_list|(
name|reader
argument_list|,
name|MockTokenizer
operator|.
name|WHITESPACE
argument_list|,
literal|true
argument_list|)
decl_stmt|;
return|return
operator|new
name|TokenStreamComponents
argument_list|(
name|tokenizer
argument_list|,
operator|new
name|MockSynonymFilter
argument_list|(
name|tokenizer
argument_list|)
argument_list|)
return|;
block|}
block|}
comment|/** whitespace+lowercase analyzer without synonyms */
DECL|class|Analyzer2
specifier|protected
class|class
name|Analyzer2
extends|extends
name|Analyzer
block|{
DECL|method|Analyzer2
specifier|public
name|Analyzer2
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createComponents
specifier|public
name|TokenStreamComponents
name|createComponents
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|Reader
name|reader
parameter_list|)
block|{
return|return
operator|new
name|TokenStreamComponents
argument_list|(
operator|new
name|MockTokenizer
argument_list|(
name|reader
argument_list|,
name|MockTokenizer
operator|.
name|WHITESPACE
argument_list|,
literal|true
argument_list|)
argument_list|)
return|;
block|}
block|}
DECL|method|testNewFieldQuery
specifier|public
specifier|abstract
name|void
name|testNewFieldQuery
parameter_list|()
throws|throws
name|Exception
function_decl|;
comment|/**    * Mock collation analyzer: indexes terms as "collated" + term    */
DECL|class|MockCollationFilter
specifier|private
class|class
name|MockCollationFilter
extends|extends
name|TokenFilter
block|{
DECL|field|termAtt
specifier|private
specifier|final
name|CharTermAttribute
name|termAtt
init|=
name|addAttribute
argument_list|(
name|CharTermAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|MockCollationFilter
specifier|protected
name|MockCollationFilter
parameter_list|(
name|TokenStream
name|input
parameter_list|)
block|{
name|super
argument_list|(
name|input
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|incrementToken
specifier|public
name|boolean
name|incrementToken
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|input
operator|.
name|incrementToken
argument_list|()
condition|)
block|{
name|String
name|term
init|=
name|termAtt
operator|.
name|toString
argument_list|()
decl_stmt|;
name|termAtt
operator|.
name|setEmpty
argument_list|()
operator|.
name|append
argument_list|(
literal|"collated"
argument_list|)
operator|.
name|append
argument_list|(
name|term
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
DECL|class|MockCollationAnalyzer
specifier|private
class|class
name|MockCollationAnalyzer
extends|extends
name|Analyzer
block|{
annotation|@
name|Override
DECL|method|createComponents
specifier|public
name|TokenStreamComponents
name|createComponents
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|Reader
name|reader
parameter_list|)
block|{
name|Tokenizer
name|tokenizer
init|=
operator|new
name|MockTokenizer
argument_list|(
name|reader
argument_list|,
name|MockTokenizer
operator|.
name|WHITESPACE
argument_list|,
literal|true
argument_list|)
decl_stmt|;
return|return
operator|new
name|TokenStreamComponents
argument_list|(
name|tokenizer
argument_list|,
operator|new
name|MockCollationFilter
argument_list|(
name|tokenizer
argument_list|)
argument_list|)
return|;
block|}
block|}
DECL|method|testCollatedRange
specifier|public
name|void
name|testCollatedRange
parameter_list|()
throws|throws
name|Exception
block|{
name|CommonQueryParserConfiguration
name|qp
init|=
name|getParserConfig
argument_list|(
operator|new
name|MockCollationAnalyzer
argument_list|()
argument_list|)
decl_stmt|;
name|setAnalyzeRangeTerms
argument_list|(
name|qp
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Query
name|expected
init|=
name|TermRangeQuery
operator|.
name|newStringRange
argument_list|(
name|getDefaultField
argument_list|()
argument_list|,
literal|"collatedabc"
argument_list|,
literal|"collateddef"
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Query
name|actual
init|=
name|getQuery
argument_list|(
literal|"[abc TO def]"
argument_list|,
name|qp
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
DECL|method|testDistanceAsEditsParsing
specifier|public
name|void
name|testDistanceAsEditsParsing
parameter_list|()
throws|throws
name|Exception
block|{
name|FuzzyQuery
name|q
init|=
operator|(
name|FuzzyQuery
operator|)
name|getQuery
argument_list|(
literal|"foobar~2"
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|q
operator|.
name|getMaxEdits
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testPhraseQueryToString
specifier|public
name|void
name|testPhraseQueryToString
parameter_list|()
throws|throws
name|Exception
block|{
name|Analyzer
name|analyzer
init|=
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|,
name|MockTokenizer
operator|.
name|SIMPLE
argument_list|,
literal|true
argument_list|,
name|MockTokenFilter
operator|.
name|ENGLISH_STOPSET
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|CommonQueryParserConfiguration
name|qp
init|=
name|getParserConfig
argument_list|(
name|analyzer
argument_list|)
decl_stmt|;
name|qp
operator|.
name|setEnablePositionIncrements
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|PhraseQuery
name|q
init|=
operator|(
name|PhraseQuery
operator|)
name|getQuery
argument_list|(
literal|"\"this hi this is a test is\""
argument_list|,
name|qp
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"field:\"? hi ? ? ? test\""
argument_list|,
name|q
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testParseWildcardAndPhraseQueries
specifier|public
name|void
name|testParseWildcardAndPhraseQueries
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|field
init|=
literal|"content"
decl_stmt|;
name|String
name|oldDefaultField
init|=
name|getDefaultField
argument_list|()
decl_stmt|;
name|setDefaultField
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|CommonQueryParserConfiguration
name|qp
init|=
name|getParserConfig
argument_list|(
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|qp
operator|.
name|setAllowLeadingWildcard
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|String
name|prefixQueries
index|[]
index|[]
init|=
block|{
block|{
literal|"a*"
block|,
literal|"ab*"
block|,
literal|"abc*"
block|,}
block|,
block|{
literal|"h*"
block|,
literal|"hi*"
block|,
literal|"hij*"
block|,
literal|"\\\\7*"
block|}
block|,
block|{
literal|"o*"
block|,
literal|"op*"
block|,
literal|"opq*"
block|,
literal|"\\\\\\\\*"
block|}
block|,     }
decl_stmt|;
name|String
name|wildcardQueries
index|[]
index|[]
init|=
block|{
block|{
literal|"*a*"
block|,
literal|"*ab*"
block|,
literal|"*abc**"
block|,
literal|"ab*e*"
block|,
literal|"*g?"
block|,
literal|"*f?1"
block|,
literal|"abc**"
block|}
block|,
block|{
literal|"*h*"
block|,
literal|"*hi*"
block|,
literal|"*hij**"
block|,
literal|"hi*k*"
block|,
literal|"*n?"
block|,
literal|"*m?1"
block|,
literal|"hij**"
block|}
block|,
block|{
literal|"*o*"
block|,
literal|"*op*"
block|,
literal|"*opq**"
block|,
literal|"op*q*"
block|,
literal|"*u?"
block|,
literal|"*t?1"
block|,
literal|"opq**"
block|}
block|,     }
decl_stmt|;
comment|// test queries that must be prefix queries
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|prefixQueries
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|prefixQueries
index|[
name|i
index|]
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|String
name|queryString
init|=
name|prefixQueries
index|[
name|i
index|]
index|[
name|j
index|]
decl_stmt|;
name|Query
name|q
init|=
name|getQuery
argument_list|(
name|queryString
argument_list|,
name|qp
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|PrefixQuery
operator|.
name|class
argument_list|,
name|q
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// test queries that must be wildcard queries
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|wildcardQueries
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|wildcardQueries
index|[
name|i
index|]
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|String
name|qtxt
init|=
name|wildcardQueries
index|[
name|i
index|]
index|[
name|j
index|]
decl_stmt|;
name|Query
name|q
init|=
name|getQuery
argument_list|(
name|qtxt
argument_list|,
name|qp
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|WildcardQuery
operator|.
name|class
argument_list|,
name|q
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|setDefaultField
argument_list|(
name|oldDefaultField
argument_list|)
expr_stmt|;
block|}
DECL|method|testPhraseQueryPositionIncrements
specifier|public
name|void
name|testPhraseQueryPositionIncrements
parameter_list|()
throws|throws
name|Exception
block|{
name|CharacterRunAutomaton
name|stopStopList
init|=
operator|new
name|CharacterRunAutomaton
argument_list|(
operator|new
name|RegExp
argument_list|(
literal|"[sS][tT][oO][pP]"
argument_list|)
operator|.
name|toAutomaton
argument_list|()
argument_list|)
decl_stmt|;
name|CommonQueryParserConfiguration
name|qp
init|=
name|getParserConfig
argument_list|(
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|,
name|MockTokenizer
operator|.
name|WHITESPACE
argument_list|,
literal|false
argument_list|,
name|stopStopList
argument_list|,
literal|false
argument_list|)
argument_list|)
decl_stmt|;
name|PhraseQuery
name|phraseQuery
init|=
operator|new
name|PhraseQuery
argument_list|()
decl_stmt|;
name|phraseQuery
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|phraseQuery
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|phraseQuery
argument_list|,
name|getQuery
argument_list|(
literal|"\"1 2\""
argument_list|,
name|qp
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|phraseQuery
argument_list|,
name|getQuery
argument_list|(
literal|"\"1 stop 2\""
argument_list|,
name|qp
argument_list|)
argument_list|)
expr_stmt|;
name|qp
operator|.
name|setEnablePositionIncrements
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|phraseQuery
argument_list|,
name|getQuery
argument_list|(
literal|"\"1 stop 2\""
argument_list|,
name|qp
argument_list|)
argument_list|)
expr_stmt|;
name|qp
operator|.
name|setEnablePositionIncrements
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|phraseQuery
argument_list|,
name|getQuery
argument_list|(
literal|"\"1 stop 2\""
argument_list|,
name|qp
argument_list|)
argument_list|)
expr_stmt|;
name|qp
operator|=
name|getParserConfig
argument_list|(
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|,
name|MockTokenizer
operator|.
name|WHITESPACE
argument_list|,
literal|false
argument_list|,
name|stopStopList
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|qp
operator|.
name|setEnablePositionIncrements
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|phraseQuery
operator|=
operator|new
name|PhraseQuery
argument_list|()
expr_stmt|;
name|phraseQuery
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|phraseQuery
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"2"
argument_list|)
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|phraseQuery
argument_list|,
name|getQuery
argument_list|(
literal|"\"1 stop 2\""
argument_list|,
name|qp
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testMatchAllQueryParsing
specifier|public
name|void
name|testMatchAllQueryParsing
parameter_list|()
throws|throws
name|Exception
block|{
comment|// test simple parsing of MatchAllDocsQuery
name|String
name|oldDefaultField
init|=
name|getDefaultField
argument_list|()
decl_stmt|;
name|setDefaultField
argument_list|(
literal|"key"
argument_list|)
expr_stmt|;
name|CommonQueryParserConfiguration
name|qp
init|=
name|getParserConfig
argument_list|(
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
name|getQuery
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|qp
argument_list|)
argument_list|)
expr_stmt|;
comment|// test parsing with non-default boost
name|MatchAllDocsQuery
name|query
init|=
operator|new
name|MatchAllDocsQuery
argument_list|()
decl_stmt|;
name|query
operator|.
name|setBoost
argument_list|(
literal|2.3f
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|query
argument_list|,
name|getQuery
argument_list|(
name|query
operator|.
name|toString
argument_list|()
argument_list|,
name|qp
argument_list|)
argument_list|)
expr_stmt|;
name|setDefaultField
argument_list|(
name|oldDefaultField
argument_list|)
expr_stmt|;
block|}
DECL|method|testNestedAndClausesFoo
specifier|public
name|void
name|testNestedAndClausesFoo
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|query
init|=
literal|"(field1:[1 TO *] AND field1:[* TO 2]) AND field2:(z)"
decl_stmt|;
name|BooleanQuery
name|q
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
name|BooleanQuery
name|bq
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|TermRangeQuery
operator|.
name|newStringRange
argument_list|(
literal|"field1"
argument_list|,
literal|"1"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|TermRangeQuery
operator|.
name|newStringRange
argument_list|(
literal|"field1"
argument_list|,
literal|null
argument_list|,
literal|"2"
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|q
operator|.
name|add
argument_list|(
name|bq
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|q
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field2"
argument_list|,
literal|"z"
argument_list|)
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|q
argument_list|,
name|getQuery
argument_list|(
name|query
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
