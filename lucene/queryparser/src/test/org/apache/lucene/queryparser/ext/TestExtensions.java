begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.queryparser.ext
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryparser
operator|.
name|ext
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_comment
comment|/**  * Testcase for the {@link Extensions} class  */
end_comment
begin_class
DECL|class|TestExtensions
specifier|public
class|class
name|TestExtensions
extends|extends
name|LuceneTestCase
block|{
DECL|field|ext
specifier|private
name|Extensions
name|ext
decl_stmt|;
annotation|@
name|Override
DECL|method|setUp
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|this
operator|.
name|ext
operator|=
operator|new
name|Extensions
argument_list|()
expr_stmt|;
block|}
DECL|method|testBuildExtensionField
specifier|public
name|void
name|testBuildExtensionField
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"field\\:key"
argument_list|,
name|ext
operator|.
name|buildExtensionField
argument_list|(
literal|"key"
argument_list|,
literal|"field"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"\\:key"
argument_list|,
name|ext
operator|.
name|buildExtensionField
argument_list|(
literal|"key"
argument_list|)
argument_list|)
expr_stmt|;
name|ext
operator|=
operator|new
name|Extensions
argument_list|(
literal|'.'
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"field.key"
argument_list|,
name|ext
operator|.
name|buildExtensionField
argument_list|(
literal|"key"
argument_list|,
literal|"field"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|".key"
argument_list|,
name|ext
operator|.
name|buildExtensionField
argument_list|(
literal|"key"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testSplitExtensionField
specifier|public
name|void
name|testSplitExtensionField
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"field\\:key"
argument_list|,
name|ext
operator|.
name|buildExtensionField
argument_list|(
literal|"key"
argument_list|,
literal|"field"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"\\:key"
argument_list|,
name|ext
operator|.
name|buildExtensionField
argument_list|(
literal|"key"
argument_list|)
argument_list|)
expr_stmt|;
name|ext
operator|=
operator|new
name|Extensions
argument_list|(
literal|'.'
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"field.key"
argument_list|,
name|ext
operator|.
name|buildExtensionField
argument_list|(
literal|"key"
argument_list|,
literal|"field"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|".key"
argument_list|,
name|ext
operator|.
name|buildExtensionField
argument_list|(
literal|"key"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testAddGetExtension
specifier|public
name|void
name|testAddGetExtension
parameter_list|()
block|{
name|ParserExtension
name|extension
init|=
operator|new
name|ExtensionStub
argument_list|()
decl_stmt|;
name|assertNull
argument_list|(
name|ext
operator|.
name|getExtension
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|ext
operator|.
name|add
argument_list|(
literal|"foo"
argument_list|,
name|extension
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|extension
argument_list|,
name|ext
operator|.
name|getExtension
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|ext
operator|.
name|add
argument_list|(
literal|"foo"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|ext
operator|.
name|getExtension
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testGetExtDelimiter
specifier|public
name|void
name|testGetExtDelimiter
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|Extensions
operator|.
name|DEFAULT_EXTENSION_FIELD_DELIMITER
argument_list|,
name|this
operator|.
name|ext
operator|.
name|getExtensionFieldDelimiter
argument_list|()
argument_list|)
expr_stmt|;
name|ext
operator|=
operator|new
name|Extensions
argument_list|(
literal|'?'
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|'?'
argument_list|,
name|this
operator|.
name|ext
operator|.
name|getExtensionFieldDelimiter
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testEscapeExtension
specifier|public
name|void
name|testEscapeExtension
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"abc\\:\\?\\{\\}\\[\\]\\\\\\(\\)\\+\\-\\!\\~"
argument_list|,
name|ext
operator|.
name|escapeExtensionField
argument_list|(
literal|"abc:?{}[]\\()+-!~"
argument_list|)
argument_list|)
expr_stmt|;
comment|// should throw NPE - escape string is null
name|expectThrows
argument_list|(
name|NullPointerException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|ext
operator|.
name|escapeExtensionField
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
