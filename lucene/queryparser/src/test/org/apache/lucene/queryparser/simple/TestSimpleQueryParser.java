begin_unit
begin_package
DECL|package|org.apache.lucene.queryparser.simple
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryparser
operator|.
name|simple
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Analyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|MockAnalyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|MockTokenizer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanClause
operator|.
name|Occur
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|FuzzyQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|MatchAllDocsQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|PhraseQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|PrefixQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TermQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|_TestUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|automaton
operator|.
name|LevenshteinAutomata
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryparser
operator|.
name|simple
operator|.
name|SimpleQueryParser
operator|.
name|AND_OPERATOR
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryparser
operator|.
name|simple
operator|.
name|SimpleQueryParser
operator|.
name|ESCAPE_OPERATOR
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryparser
operator|.
name|simple
operator|.
name|SimpleQueryParser
operator|.
name|FUZZY_OPERATOR
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryparser
operator|.
name|simple
operator|.
name|SimpleQueryParser
operator|.
name|NOT_OPERATOR
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryparser
operator|.
name|simple
operator|.
name|SimpleQueryParser
operator|.
name|OR_OPERATOR
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryparser
operator|.
name|simple
operator|.
name|SimpleQueryParser
operator|.
name|PHRASE_OPERATOR
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryparser
operator|.
name|simple
operator|.
name|SimpleQueryParser
operator|.
name|PRECEDENCE_OPERATORS
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryparser
operator|.
name|simple
operator|.
name|SimpleQueryParser
operator|.
name|PREFIX_OPERATOR
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryparser
operator|.
name|simple
operator|.
name|SimpleQueryParser
operator|.
name|NEAR_OPERATOR
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryparser
operator|.
name|simple
operator|.
name|SimpleQueryParser
operator|.
name|WHITESPACE_OPERATOR
import|;
end_import
begin_comment
comment|/** Tests for {@link SimpleQueryParser} */
end_comment
begin_class
DECL|class|TestSimpleQueryParser
specifier|public
class|class
name|TestSimpleQueryParser
extends|extends
name|LuceneTestCase
block|{
comment|/**    * helper to parse a query with whitespace+lowercase analyzer across "field",    * with default operator of MUST    */
DECL|method|parse
specifier|private
name|Query
name|parse
parameter_list|(
name|String
name|text
parameter_list|)
block|{
name|Analyzer
name|analyzer
init|=
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
decl_stmt|;
name|SimpleQueryParser
name|parser
init|=
operator|new
name|SimpleQueryParser
argument_list|(
name|analyzer
argument_list|,
literal|"field"
argument_list|)
decl_stmt|;
name|parser
operator|.
name|setDefaultOperator
argument_list|(
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
return|return
name|parser
operator|.
name|parse
argument_list|(
name|text
argument_list|)
return|;
block|}
comment|/**    * helper to parse a query with whitespace+lowercase analyzer across "field",    * with default operator of MUST    */
DECL|method|parse
specifier|private
name|Query
name|parse
parameter_list|(
name|String
name|text
parameter_list|,
name|int
name|flags
parameter_list|)
block|{
name|Analyzer
name|analyzer
init|=
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
decl_stmt|;
name|SimpleQueryParser
name|parser
init|=
operator|new
name|SimpleQueryParser
argument_list|(
name|analyzer
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"field"
argument_list|,
literal|1f
argument_list|)
argument_list|,
name|flags
argument_list|)
decl_stmt|;
name|parser
operator|.
name|setDefaultOperator
argument_list|(
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
return|return
name|parser
operator|.
name|parse
argument_list|(
name|text
argument_list|)
return|;
block|}
comment|/** test a simple term */
DECL|method|testTerm
specifier|public
name|void
name|testTerm
parameter_list|()
throws|throws
name|Exception
block|{
name|Query
name|expected
init|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"foobar"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|parse
argument_list|(
literal|"foobar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** test a fuzzy query */
DECL|method|testFuzzy
specifier|public
name|void
name|testFuzzy
parameter_list|()
throws|throws
name|Exception
block|{
name|Query
name|regular
init|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"foobar"
argument_list|)
argument_list|)
decl_stmt|;
name|Query
name|expected
init|=
operator|new
name|FuzzyQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"foobar"
argument_list|)
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|parse
argument_list|(
literal|"foobar~2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|regular
argument_list|,
name|parse
argument_list|(
literal|"foobar~"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|regular
argument_list|,
name|parse
argument_list|(
literal|"foobar~a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|regular
argument_list|,
name|parse
argument_list|(
literal|"foobar~1a"
argument_list|)
argument_list|)
expr_stmt|;
name|BooleanQuery
name|bool
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
name|FuzzyQuery
name|fuzzy
init|=
operator|new
name|FuzzyQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"foo"
argument_list|)
argument_list|,
name|LevenshteinAutomata
operator|.
name|MAXIMUM_SUPPORTED_DISTANCE
argument_list|)
decl_stmt|;
name|bool
operator|.
name|add
argument_list|(
name|fuzzy
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|bool
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|bool
argument_list|,
name|parse
argument_list|(
literal|"foo~"
operator|+
name|LevenshteinAutomata
operator|.
name|MAXIMUM_SUPPORTED_DISTANCE
operator|+
literal|1
operator|+
literal|" bar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** test a simple phrase */
DECL|method|testPhrase
specifier|public
name|void
name|testPhrase
parameter_list|()
throws|throws
name|Exception
block|{
name|PhraseQuery
name|expected
init|=
operator|new
name|PhraseQuery
argument_list|()
decl_stmt|;
name|expected
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|parse
argument_list|(
literal|"\"foo bar\""
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** test a simple phrase with various slop settings */
DECL|method|testPhraseWithSlop
specifier|public
name|void
name|testPhraseWithSlop
parameter_list|()
throws|throws
name|Exception
block|{
name|PhraseQuery
name|expectedWithSlop
init|=
operator|new
name|PhraseQuery
argument_list|()
decl_stmt|;
name|expectedWithSlop
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|expectedWithSlop
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|expectedWithSlop
operator|.
name|setSlop
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedWithSlop
argument_list|,
name|parse
argument_list|(
literal|"\"foo bar\"~2"
argument_list|)
argument_list|)
expr_stmt|;
name|PhraseQuery
name|expectedWithMultiDigitSlop
init|=
operator|new
name|PhraseQuery
argument_list|()
decl_stmt|;
name|expectedWithMultiDigitSlop
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|expectedWithMultiDigitSlop
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|expectedWithMultiDigitSlop
operator|.
name|setSlop
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedWithMultiDigitSlop
argument_list|,
name|parse
argument_list|(
literal|"\"foo bar\"~10"
argument_list|)
argument_list|)
expr_stmt|;
name|PhraseQuery
name|expectedNoSlop
init|=
operator|new
name|PhraseQuery
argument_list|()
decl_stmt|;
name|expectedNoSlop
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|expectedNoSlop
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Ignore trailing tilde with no slop"
argument_list|,
name|expectedNoSlop
argument_list|,
name|parse
argument_list|(
literal|"\"foo bar\"~"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Ignore non-numeric trailing slop"
argument_list|,
name|expectedNoSlop
argument_list|,
name|parse
argument_list|(
literal|"\"foo bar\"~a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Ignore non-numeric trailing slop"
argument_list|,
name|expectedNoSlop
argument_list|,
name|parse
argument_list|(
literal|"\"foo bar\"~1a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Ignore negative trailing slop"
argument_list|,
name|expectedNoSlop
argument_list|,
name|parse
argument_list|(
literal|"\"foo bar\"~-1"
argument_list|)
argument_list|)
expr_stmt|;
name|PhraseQuery
name|pq
init|=
operator|new
name|PhraseQuery
argument_list|()
decl_stmt|;
name|pq
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|pq
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|pq
operator|.
name|setSlop
argument_list|(
literal|12
argument_list|)
expr_stmt|;
name|BooleanQuery
name|expectedBoolean
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
name|expectedBoolean
operator|.
name|add
argument_list|(
name|pq
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|expectedBoolean
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"baz"
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedBoolean
argument_list|,
name|parse
argument_list|(
literal|"\"foo bar\"~12 baz"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** test a simple prefix */
DECL|method|testPrefix
specifier|public
name|void
name|testPrefix
parameter_list|()
throws|throws
name|Exception
block|{
name|PrefixQuery
name|expected
init|=
operator|new
name|PrefixQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"foobar"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|parse
argument_list|(
literal|"foobar*"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** test some AND'd terms using '+' operator */
DECL|method|testAND
specifier|public
name|void
name|testAND
parameter_list|()
throws|throws
name|Exception
block|{
name|BooleanQuery
name|expected
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
name|expected
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"foo"
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|parse
argument_list|(
literal|"foo+bar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** test some AND'd phrases using '+' operator */
DECL|method|testANDPhrase
specifier|public
name|void
name|testANDPhrase
parameter_list|()
throws|throws
name|Exception
block|{
name|PhraseQuery
name|phrase1
init|=
operator|new
name|PhraseQuery
argument_list|()
decl_stmt|;
name|phrase1
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|phrase1
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|PhraseQuery
name|phrase2
init|=
operator|new
name|PhraseQuery
argument_list|()
decl_stmt|;
name|phrase2
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"star"
argument_list|)
argument_list|)
expr_stmt|;
name|phrase2
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"wars"
argument_list|)
argument_list|)
expr_stmt|;
name|BooleanQuery
name|expected
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
name|expected
operator|.
name|add
argument_list|(
name|phrase1
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
name|phrase2
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|parse
argument_list|(
literal|"\"foo bar\"+\"star wars\""
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** test some AND'd terms (just using whitespace) */
DECL|method|testANDImplicit
specifier|public
name|void
name|testANDImplicit
parameter_list|()
throws|throws
name|Exception
block|{
name|BooleanQuery
name|expected
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
name|expected
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"foo"
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|parse
argument_list|(
literal|"foo bar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** test some OR'd terms */
DECL|method|testOR
specifier|public
name|void
name|testOR
parameter_list|()
throws|throws
name|Exception
block|{
name|BooleanQuery
name|expected
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
name|expected
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"foo"
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|parse
argument_list|(
literal|"foo|bar"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|parse
argument_list|(
literal|"foo||bar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** test some OR'd terms (just using whitespace) */
DECL|method|testORImplicit
specifier|public
name|void
name|testORImplicit
parameter_list|()
throws|throws
name|Exception
block|{
name|BooleanQuery
name|expected
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
name|expected
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"foo"
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|SimpleQueryParser
name|parser
init|=
operator|new
name|SimpleQueryParser
argument_list|(
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|,
literal|"field"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|parser
operator|.
name|parse
argument_list|(
literal|"foo bar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** test some OR'd phrases using '|' operator */
DECL|method|testORPhrase
specifier|public
name|void
name|testORPhrase
parameter_list|()
throws|throws
name|Exception
block|{
name|PhraseQuery
name|phrase1
init|=
operator|new
name|PhraseQuery
argument_list|()
decl_stmt|;
name|phrase1
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|phrase1
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|PhraseQuery
name|phrase2
init|=
operator|new
name|PhraseQuery
argument_list|()
decl_stmt|;
name|phrase2
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"star"
argument_list|)
argument_list|)
expr_stmt|;
name|phrase2
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"wars"
argument_list|)
argument_list|)
expr_stmt|;
name|BooleanQuery
name|expected
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
name|expected
operator|.
name|add
argument_list|(
name|phrase1
argument_list|,
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
name|phrase2
argument_list|,
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|parse
argument_list|(
literal|"\"foo bar\"|\"star wars\""
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** test negated term */
DECL|method|testNOT
specifier|public
name|void
name|testNOT
parameter_list|()
throws|throws
name|Exception
block|{
name|BooleanQuery
name|expected
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
name|expected
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"foo"
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|MUST_NOT
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|parse
argument_list|(
literal|"-foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|parse
argument_list|(
literal|"-(foo)"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|parse
argument_list|(
literal|"---foo"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** test crazy prefixes with multiple asterisks */
DECL|method|testCrazyPrefixes1
specifier|public
name|void
name|testCrazyPrefixes1
parameter_list|()
throws|throws
name|Exception
block|{
name|Query
name|expected
init|=
operator|new
name|PrefixQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"st*ar"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|parse
argument_list|(
literal|"st*ar*"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** test prefixes with some escaping */
DECL|method|testCrazyPrefixes2
specifier|public
name|void
name|testCrazyPrefixes2
parameter_list|()
throws|throws
name|Exception
block|{
name|Query
name|expected
init|=
operator|new
name|PrefixQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"st*ar\\*"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|parse
argument_list|(
literal|"st*ar\\\\**"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** not a prefix query! the prefix operator is escaped */
DECL|method|testTermInDisguise
specifier|public
name|void
name|testTermInDisguise
parameter_list|()
throws|throws
name|Exception
block|{
name|Query
name|expected
init|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"st*ar\\*"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|parse
argument_list|(
literal|"sT*Ar\\\\\\*"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// a number of test cases here have garbage/errors in
comment|// the syntax passed in to test that the query can
comment|// still be interpreted as a guess to what the human
comment|// input was trying to be
DECL|method|testGarbageTerm
specifier|public
name|void
name|testGarbageTerm
parameter_list|()
throws|throws
name|Exception
block|{
name|Query
name|expected
init|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"star"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|parse
argument_list|(
literal|"star"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|parse
argument_list|(
literal|"star\n"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|parse
argument_list|(
literal|"star\r"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|parse
argument_list|(
literal|"star\t"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|parse
argument_list|(
literal|"star("
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|parse
argument_list|(
literal|"star)"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|parse
argument_list|(
literal|"star\""
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|parse
argument_list|(
literal|"\t \r\n\nstar   \n \r \t "
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|parse
argument_list|(
literal|"- + \"\" - star \\"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testGarbageEmpty
specifier|public
name|void
name|testGarbageEmpty
parameter_list|()
throws|throws
name|Exception
block|{
name|assertNull
argument_list|(
name|parse
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|parse
argument_list|(
literal|"  "
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|parse
argument_list|(
literal|"  "
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|parse
argument_list|(
literal|"\\ "
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|parse
argument_list|(
literal|"\\ \\ "
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|parse
argument_list|(
literal|"\"\""
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|parse
argument_list|(
literal|"\" \""
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|parse
argument_list|(
literal|"\" \"|\" \""
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|parse
argument_list|(
literal|"(\" \"|\" \")"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|parse
argument_list|(
literal|"\" \" \" \""
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|parse
argument_list|(
literal|"(\" \" \" \")"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testGarbageAND
specifier|public
name|void
name|testGarbageAND
parameter_list|()
throws|throws
name|Exception
block|{
name|BooleanQuery
name|expected
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
name|expected
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"star"
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"wars"
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|parse
argument_list|(
literal|"star wars"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|parse
argument_list|(
literal|"star+wars"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|parse
argument_list|(
literal|"     star     wars   "
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|parse
argument_list|(
literal|"     star +    wars   "
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|parse
argument_list|(
literal|"  |     star + + |   wars   "
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|parse
argument_list|(
literal|"  |     star + + |   wars   \\"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testGarbageOR
specifier|public
name|void
name|testGarbageOR
parameter_list|()
throws|throws
name|Exception
block|{
name|BooleanQuery
name|expected
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
name|expected
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"star"
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"wars"
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|parse
argument_list|(
literal|"star|wars"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|parse
argument_list|(
literal|"     star |    wars   "
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|parse
argument_list|(
literal|"  |     star | + |   wars   "
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|parse
argument_list|(
literal|"  +     star | + +   wars   \\"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testGarbageNOT
specifier|public
name|void
name|testGarbageNOT
parameter_list|()
throws|throws
name|Exception
block|{
name|BooleanQuery
name|expected
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
name|expected
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"star"
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|MUST_NOT
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|parse
argument_list|(
literal|"-star"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|parse
argument_list|(
literal|"---star"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|parse
argument_list|(
literal|"- -star -"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testGarbagePhrase
specifier|public
name|void
name|testGarbagePhrase
parameter_list|()
throws|throws
name|Exception
block|{
name|PhraseQuery
name|expected
init|=
operator|new
name|PhraseQuery
argument_list|()
decl_stmt|;
name|expected
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"star"
argument_list|)
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"wars"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|parse
argument_list|(
literal|"\"star wars\""
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|parse
argument_list|(
literal|"\"star wars\\ \""
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|parse
argument_list|(
literal|"\"\" | \"star wars\""
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|parse
argument_list|(
literal|"          \"star wars\"        \"\"\\"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testGarbageSubquery
specifier|public
name|void
name|testGarbageSubquery
parameter_list|()
throws|throws
name|Exception
block|{
name|Query
name|expected
init|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"star"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|parse
argument_list|(
literal|"(star)"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|parse
argument_list|(
literal|"(star))"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|parse
argument_list|(
literal|"((star)"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|parse
argument_list|(
literal|"     -()(star)        \n\n\r     "
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|parse
argument_list|(
literal|"| + - ( + - |      star    \n      ) \n"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testCompoundAnd
specifier|public
name|void
name|testCompoundAnd
parameter_list|()
throws|throws
name|Exception
block|{
name|BooleanQuery
name|expected
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
name|expected
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"star"
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"wars"
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"empire"
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|parse
argument_list|(
literal|"star wars empire"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|parse
argument_list|(
literal|"star+wars + empire"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|parse
argument_list|(
literal|" | --star wars empire \n\\"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testCompoundOr
specifier|public
name|void
name|testCompoundOr
parameter_list|()
throws|throws
name|Exception
block|{
name|BooleanQuery
name|expected
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
name|expected
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"star"
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"wars"
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"empire"
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|parse
argument_list|(
literal|"star|wars|empire"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|parse
argument_list|(
literal|"star|wars | empire"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|parse
argument_list|(
literal|" | --star|wars|empire \n\\"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testComplex00
specifier|public
name|void
name|testComplex00
parameter_list|()
throws|throws
name|Exception
block|{
name|BooleanQuery
name|expected
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
name|BooleanQuery
name|inner
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
name|inner
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"star"
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|inner
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"wars"
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
name|inner
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"empire"
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|parse
argument_list|(
literal|"star|wars empire"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|parse
argument_list|(
literal|"star|wars + empire"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|parse
argument_list|(
literal|"star| + wars + ----empire |"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testComplex01
specifier|public
name|void
name|testComplex01
parameter_list|()
throws|throws
name|Exception
block|{
name|BooleanQuery
name|expected
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
name|BooleanQuery
name|inner
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
name|inner
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"star"
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|inner
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"wars"
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
name|inner
argument_list|,
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"empire"
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|parse
argument_list|(
literal|"star wars | empire"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|parse
argument_list|(
literal|"star + wars|empire"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|parse
argument_list|(
literal|"star + | wars | ----empire +"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testComplex02
specifier|public
name|void
name|testComplex02
parameter_list|()
throws|throws
name|Exception
block|{
name|BooleanQuery
name|expected
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
name|BooleanQuery
name|inner
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
name|inner
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"star"
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|inner
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"wars"
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
name|inner
argument_list|,
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"empire"
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"strikes"
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|parse
argument_list|(
literal|"star wars | empire | strikes"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|parse
argument_list|(
literal|"star + wars|empire | strikes"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|parse
argument_list|(
literal|"star + | wars | ----empire | + --strikes \\"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testComplex03
specifier|public
name|void
name|testComplex03
parameter_list|()
throws|throws
name|Exception
block|{
name|BooleanQuery
name|expected
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
name|BooleanQuery
name|inner
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
name|BooleanQuery
name|inner2
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
name|inner2
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"star"
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|inner2
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"wars"
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|inner
operator|.
name|add
argument_list|(
name|inner2
argument_list|,
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|inner
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"empire"
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|inner
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"strikes"
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
name|inner
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"back"
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|parse
argument_list|(
literal|"star wars | empire | strikes back"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|parse
argument_list|(
literal|"star + wars|empire | strikes + back"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|parse
argument_list|(
literal|"star + | wars | ----empire | + --strikes + | --back \\"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testComplex04
specifier|public
name|void
name|testComplex04
parameter_list|()
throws|throws
name|Exception
block|{
name|BooleanQuery
name|expected
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
name|BooleanQuery
name|inner
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
name|BooleanQuery
name|inner2
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
name|inner
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"star"
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|inner
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"wars"
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|inner2
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"strikes"
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|inner2
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"back"
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
name|inner
argument_list|,
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"empire"
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
name|inner2
argument_list|,
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|parse
argument_list|(
literal|"(star wars) | empire | (strikes back)"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|parse
argument_list|(
literal|"(star + wars) |empire | (strikes + back)"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|parse
argument_list|(
literal|"(star + | wars |) | ----empire | + --(strikes + | --back) \\"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testComplex05
specifier|public
name|void
name|testComplex05
parameter_list|()
throws|throws
name|Exception
block|{
name|BooleanQuery
name|expected
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
name|BooleanQuery
name|inner1
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
name|BooleanQuery
name|inner2
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
name|BooleanQuery
name|inner3
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
name|BooleanQuery
name|inner4
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
name|expected
operator|.
name|add
argument_list|(
name|inner1
argument_list|,
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
name|inner2
argument_list|,
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|inner1
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"star"
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|inner1
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"wars"
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|inner2
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"empire"
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|inner2
operator|.
name|add
argument_list|(
name|inner3
argument_list|,
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|inner3
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"strikes"
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|inner3
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"back"
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|inner3
operator|.
name|add
argument_list|(
name|inner4
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|inner4
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"jarjar"
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|MUST_NOT
argument_list|)
expr_stmt|;
name|inner4
operator|.
name|add
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|parse
argument_list|(
literal|"(star wars) | (empire | (strikes back -jarjar))"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|parse
argument_list|(
literal|"(star + wars) |(empire | (strikes + back -jarjar) () )"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|parse
argument_list|(
literal|"(star + | wars |) | --(--empire | + --(strikes + | --back + -jarjar) \"\" ) \""
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testComplex06
specifier|public
name|void
name|testComplex06
parameter_list|()
throws|throws
name|Exception
block|{
name|BooleanQuery
name|expected
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
name|BooleanQuery
name|inner1
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
name|BooleanQuery
name|inner2
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
name|BooleanQuery
name|inner3
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
name|expected
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"star"
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
name|inner1
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|inner1
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"wars"
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|inner1
operator|.
name|add
argument_list|(
name|inner2
argument_list|,
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|inner2
operator|.
name|add
argument_list|(
name|inner3
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|inner3
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"empire"
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|inner3
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"strikes"
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|inner2
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"back"
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|inner2
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"jar+|jar"
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|parse
argument_list|(
literal|"star (wars | (empire | strikes back jar\\+\\|jar))"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|parse
argument_list|(
literal|"star + (wars |(empire | strikes + back jar\\+\\|jar) () )"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|parse
argument_list|(
literal|"star + (| wars | | --(--empire | + --strikes + | --back + jar\\+\\|jar) \"\" ) \""
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** test a term with field weights */
DECL|method|testWeightedTerm
specifier|public
name|void
name|testWeightedTerm
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Float
argument_list|>
name|weights
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|weights
operator|.
name|put
argument_list|(
literal|"field0"
argument_list|,
literal|5f
argument_list|)
expr_stmt|;
name|weights
operator|.
name|put
argument_list|(
literal|"field1"
argument_list|,
literal|10f
argument_list|)
expr_stmt|;
name|BooleanQuery
name|expected
init|=
operator|new
name|BooleanQuery
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|Query
name|field0
init|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field0"
argument_list|,
literal|"foo"
argument_list|)
argument_list|)
decl_stmt|;
name|field0
operator|.
name|setBoost
argument_list|(
literal|5f
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
name|field0
argument_list|,
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|Query
name|field1
init|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field1"
argument_list|,
literal|"foo"
argument_list|)
argument_list|)
decl_stmt|;
name|field1
operator|.
name|setBoost
argument_list|(
literal|10f
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
name|field1
argument_list|,
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|Analyzer
name|analyzer
init|=
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
decl_stmt|;
name|SimpleQueryParser
name|parser
init|=
operator|new
name|SimpleQueryParser
argument_list|(
name|analyzer
argument_list|,
name|weights
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|parser
operator|.
name|parse
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** test a more complex query with field weights */
DECL|method|testWeightedOR
specifier|public
name|void
name|testWeightedOR
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Float
argument_list|>
name|weights
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|weights
operator|.
name|put
argument_list|(
literal|"field0"
argument_list|,
literal|5f
argument_list|)
expr_stmt|;
name|weights
operator|.
name|put
argument_list|(
literal|"field1"
argument_list|,
literal|10f
argument_list|)
expr_stmt|;
name|BooleanQuery
name|expected
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
name|BooleanQuery
name|foo
init|=
operator|new
name|BooleanQuery
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|Query
name|field0
init|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field0"
argument_list|,
literal|"foo"
argument_list|)
argument_list|)
decl_stmt|;
name|field0
operator|.
name|setBoost
argument_list|(
literal|5f
argument_list|)
expr_stmt|;
name|foo
operator|.
name|add
argument_list|(
name|field0
argument_list|,
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|Query
name|field1
init|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field1"
argument_list|,
literal|"foo"
argument_list|)
argument_list|)
decl_stmt|;
name|field1
operator|.
name|setBoost
argument_list|(
literal|10f
argument_list|)
expr_stmt|;
name|foo
operator|.
name|add
argument_list|(
name|field1
argument_list|,
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
name|foo
argument_list|,
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|BooleanQuery
name|bar
init|=
operator|new
name|BooleanQuery
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|field0
operator|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field0"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|field0
operator|.
name|setBoost
argument_list|(
literal|5f
argument_list|)
expr_stmt|;
name|bar
operator|.
name|add
argument_list|(
name|field0
argument_list|,
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|field1
operator|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field1"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|field1
operator|.
name|setBoost
argument_list|(
literal|10f
argument_list|)
expr_stmt|;
name|bar
operator|.
name|add
argument_list|(
name|field1
argument_list|,
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
name|bar
argument_list|,
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|Analyzer
name|analyzer
init|=
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
decl_stmt|;
name|SimpleQueryParser
name|parser
init|=
operator|new
name|SimpleQueryParser
argument_list|(
name|analyzer
argument_list|,
name|weights
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|parser
operator|.
name|parse
argument_list|(
literal|"foo|bar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** helper to parse a query with keyword analyzer across "field" */
DECL|method|parseKeyword
specifier|private
name|Query
name|parseKeyword
parameter_list|(
name|String
name|text
parameter_list|,
name|int
name|flags
parameter_list|)
block|{
name|Analyzer
name|analyzer
init|=
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|,
name|MockTokenizer
operator|.
name|KEYWORD
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|SimpleQueryParser
name|parser
init|=
operator|new
name|SimpleQueryParser
argument_list|(
name|analyzer
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"field"
argument_list|,
literal|1f
argument_list|)
argument_list|,
name|flags
argument_list|)
decl_stmt|;
return|return
name|parser
operator|.
name|parse
argument_list|(
name|text
argument_list|)
return|;
block|}
comment|/** test the ability to enable/disable phrase operator */
DECL|method|testDisablePhrase
specifier|public
name|void
name|testDisablePhrase
parameter_list|()
block|{
name|Query
name|expected
init|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"\"test\""
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|parseKeyword
argument_list|(
literal|"\"test\""
argument_list|,
operator|~
name|PHRASE_OPERATOR
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** test the ability to enable/disable prefix operator */
DECL|method|testDisablePrefix
specifier|public
name|void
name|testDisablePrefix
parameter_list|()
block|{
name|Query
name|expected
init|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"test*"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|parseKeyword
argument_list|(
literal|"test*"
argument_list|,
operator|~
name|PREFIX_OPERATOR
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** test the ability to enable/disable AND operator */
DECL|method|testDisableAND
specifier|public
name|void
name|testDisableAND
parameter_list|()
block|{
name|Query
name|expected
init|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"foo+bar"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|parseKeyword
argument_list|(
literal|"foo+bar"
argument_list|,
operator|~
name|AND_OPERATOR
argument_list|)
argument_list|)
expr_stmt|;
name|expected
operator|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"+foo+bar"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|parseKeyword
argument_list|(
literal|"+foo+bar"
argument_list|,
operator|~
name|AND_OPERATOR
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** test the ability to enable/disable OR operator */
DECL|method|testDisableOR
specifier|public
name|void
name|testDisableOR
parameter_list|()
block|{
name|Query
name|expected
init|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"foo|bar"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|parseKeyword
argument_list|(
literal|"foo|bar"
argument_list|,
operator|~
name|OR_OPERATOR
argument_list|)
argument_list|)
expr_stmt|;
name|expected
operator|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"|foo|bar"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|parseKeyword
argument_list|(
literal|"|foo|bar"
argument_list|,
operator|~
name|OR_OPERATOR
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** test the ability to enable/disable NOT operator */
DECL|method|testDisableNOT
specifier|public
name|void
name|testDisableNOT
parameter_list|()
block|{
name|Query
name|expected
init|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"-foo"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|parseKeyword
argument_list|(
literal|"-foo"
argument_list|,
operator|~
name|NOT_OPERATOR
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** test the ability to enable/disable precedence operators */
DECL|method|testDisablePrecedence
specifier|public
name|void
name|testDisablePrecedence
parameter_list|()
block|{
name|Query
name|expected
init|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"(foo)"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|parseKeyword
argument_list|(
literal|"(foo)"
argument_list|,
operator|~
name|PRECEDENCE_OPERATORS
argument_list|)
argument_list|)
expr_stmt|;
name|expected
operator|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|")foo("
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|parseKeyword
argument_list|(
literal|")foo("
argument_list|,
operator|~
name|PRECEDENCE_OPERATORS
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** test the ability to enable/disable escape operators */
DECL|method|testDisableEscape
specifier|public
name|void
name|testDisableEscape
parameter_list|()
block|{
name|Query
name|expected
init|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"foo\\bar"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|parseKeyword
argument_list|(
literal|"foo\\bar"
argument_list|,
operator|~
name|ESCAPE_OPERATOR
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|parseKeyword
argument_list|(
literal|"(foo\\bar)"
argument_list|,
operator|~
name|ESCAPE_OPERATOR
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|parseKeyword
argument_list|(
literal|"\"foo\\bar\""
argument_list|,
operator|~
name|ESCAPE_OPERATOR
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testDisableWhitespace
specifier|public
name|void
name|testDisableWhitespace
parameter_list|()
block|{
name|Query
name|expected
init|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"foo foo"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|parseKeyword
argument_list|(
literal|"foo foo"
argument_list|,
operator|~
name|WHITESPACE_OPERATOR
argument_list|)
argument_list|)
expr_stmt|;
name|expected
operator|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|" foo foo\n "
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|parseKeyword
argument_list|(
literal|" foo foo\n "
argument_list|,
operator|~
name|WHITESPACE_OPERATOR
argument_list|)
argument_list|)
expr_stmt|;
name|expected
operator|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"\t\tfoo foo foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|parseKeyword
argument_list|(
literal|"\t\tfoo foo foo"
argument_list|,
operator|~
name|WHITESPACE_OPERATOR
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testDisableFuzziness
specifier|public
name|void
name|testDisableFuzziness
parameter_list|()
block|{
name|Query
name|expected
init|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"foo~1"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|parseKeyword
argument_list|(
literal|"foo~1"
argument_list|,
operator|~
name|FUZZY_OPERATOR
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testDisableSlop
specifier|public
name|void
name|testDisableSlop
parameter_list|()
block|{
name|PhraseQuery
name|expectedPhrase
init|=
operator|new
name|PhraseQuery
argument_list|()
decl_stmt|;
name|expectedPhrase
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|expectedPhrase
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|BooleanQuery
name|expected
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
name|expected
operator|.
name|add
argument_list|(
name|expectedPhrase
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"~2"
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|parse
argument_list|(
literal|"\"foo bar\"~2"
argument_list|,
operator|~
name|NEAR_OPERATOR
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// we aren't supposed to barf on any input...
DECL|method|testRandomQueries
specifier|public
name|void
name|testRandomQueries
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1000
condition|;
name|i
operator|++
control|)
block|{
name|String
name|query
init|=
name|_TestUtil
operator|.
name|randomUnicodeString
argument_list|(
name|random
argument_list|()
argument_list|)
decl_stmt|;
name|parse
argument_list|(
name|query
argument_list|)
expr_stmt|;
comment|// no exception
name|parseKeyword
argument_list|(
name|query
argument_list|,
name|_TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|1024
argument_list|)
argument_list|)
expr_stmt|;
comment|// no exception
block|}
block|}
DECL|method|testRandomQueries2
specifier|public
name|void
name|testRandomQueries2
parameter_list|()
throws|throws
name|Exception
block|{
name|char
name|chars
index|[]
init|=
operator|new
name|char
index|[]
block|{
literal|'a'
block|,
literal|'1'
block|,
literal|'|'
block|,
literal|'&'
block|,
literal|' '
block|,
literal|'('
block|,
literal|')'
block|,
literal|'"'
block|,
literal|'-'
block|,
literal|'~'
block|}
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1000
condition|;
name|i
operator|++
control|)
block|{
name|sb
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|int
name|queryLength
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|20
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|queryLength
condition|;
name|j
operator|++
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|chars
index|[
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|chars
operator|.
name|length
argument_list|)
index|]
argument_list|)
expr_stmt|;
block|}
name|parse
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// no exception
name|parseKeyword
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|,
name|_TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|1024
argument_list|)
argument_list|)
expr_stmt|;
comment|// no exception
block|}
block|}
block|}
end_class
end_unit
