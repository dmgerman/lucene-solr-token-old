begin_unit
begin_package
DECL|package|org.apache.lucene.queryparser.flexible.standard
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryparser
operator|.
name|flexible
operator|.
name|standard
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DateFormat
import|;
end_import
begin_import
import|import
name|java
operator|.
name|text
operator|.
name|NumberFormat
import|;
end_import
begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimeZone
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Analyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|MockAnalyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|DoubleField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|FieldType
operator|.
name|NumericType
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|FieldType
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|FloatField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|IntField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|LongField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|RandomIndexWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryparser
operator|.
name|flexible
operator|.
name|core
operator|.
name|QueryNodeException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryparser
operator|.
name|flexible
operator|.
name|core
operator|.
name|parser
operator|.
name|EscapeQuerySyntax
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryparser
operator|.
name|flexible
operator|.
name|standard
operator|.
name|config
operator|.
name|NumberDateFormat
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryparser
operator|.
name|flexible
operator|.
name|standard
operator|.
name|config
operator|.
name|NumericConfig
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryparser
operator|.
name|flexible
operator|.
name|standard
operator|.
name|parser
operator|.
name|EscapeQuerySyntaxImpl
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TopDocs
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|_TestUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_class
DECL|class|TestNumericQueryParser
specifier|public
class|class
name|TestNumericQueryParser
extends|extends
name|LuceneTestCase
block|{
DECL|enum|NumberType
specifier|private
specifier|static
enum|enum
name|NumberType
block|{
DECL|enum constant|NEGATIVE
DECL|enum constant|ZERO
DECL|enum constant|POSITIVE
name|NEGATIVE
block|,
name|ZERO
block|,
name|POSITIVE
block|;   }
DECL|field|DATE_STYLES
specifier|final
specifier|private
specifier|static
name|int
index|[]
name|DATE_STYLES
init|=
block|{
name|DateFormat
operator|.
name|FULL
block|,
name|DateFormat
operator|.
name|LONG
block|,
name|DateFormat
operator|.
name|MEDIUM
block|,
name|DateFormat
operator|.
name|SHORT
block|}
decl_stmt|;
DECL|field|PRECISION_STEP
specifier|final
specifier|private
specifier|static
name|int
name|PRECISION_STEP
init|=
literal|8
decl_stmt|;
DECL|field|FIELD_NAME
specifier|final
specifier|private
specifier|static
name|String
name|FIELD_NAME
init|=
literal|"field"
decl_stmt|;
DECL|field|LOCALE
specifier|private
specifier|static
name|Locale
name|LOCALE
decl_stmt|;
DECL|field|TIMEZONE
specifier|private
specifier|static
name|TimeZone
name|TIMEZONE
decl_stmt|;
DECL|field|RANDOM_NUMBER_MAP
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Number
argument_list|>
name|RANDOM_NUMBER_MAP
decl_stmt|;
DECL|field|ESCAPER
specifier|final
specifier|private
specifier|static
name|EscapeQuerySyntax
name|ESCAPER
init|=
operator|new
name|EscapeQuerySyntaxImpl
argument_list|()
decl_stmt|;
DECL|field|DATE_FIELD_NAME
specifier|final
specifier|private
specifier|static
name|String
name|DATE_FIELD_NAME
init|=
literal|"date"
decl_stmt|;
DECL|field|DATE_STYLE
specifier|private
specifier|static
name|int
name|DATE_STYLE
decl_stmt|;
DECL|field|TIME_STYLE
specifier|private
specifier|static
name|int
name|TIME_STYLE
decl_stmt|;
DECL|field|ANALYZER
specifier|private
specifier|static
name|Analyzer
name|ANALYZER
decl_stmt|;
DECL|field|NUMBER_FORMAT
specifier|private
specifier|static
name|NumberFormat
name|NUMBER_FORMAT
decl_stmt|;
DECL|field|qp
specifier|private
specifier|static
name|StandardQueryParser
name|qp
decl_stmt|;
DECL|field|DATE_FORMAT
specifier|private
specifier|static
name|NumberDateFormat
name|DATE_FORMAT
decl_stmt|;
DECL|field|directory
specifier|private
specifier|static
name|Directory
name|directory
init|=
literal|null
decl_stmt|;
DECL|field|reader
specifier|private
specifier|static
name|IndexReader
name|reader
init|=
literal|null
decl_stmt|;
DECL|field|searcher
specifier|private
specifier|static
name|IndexSearcher
name|searcher
init|=
literal|null
decl_stmt|;
DECL|method|checkDateFormatSanity
specifier|private
specifier|static
name|boolean
name|checkDateFormatSanity
parameter_list|(
name|DateFormat
name|dateFormat
parameter_list|,
name|long
name|date
parameter_list|)
throws|throws
name|ParseException
block|{
return|return
name|date
operator|==
name|dateFormat
operator|.
name|parse
argument_list|(
name|dateFormat
operator|.
name|format
argument_list|(
operator|new
name|Date
argument_list|(
name|date
argument_list|)
argument_list|)
argument_list|)
operator|.
name|getTime
argument_list|()
return|;
block|}
annotation|@
name|BeforeClass
DECL|method|beforeClass
specifier|public
specifier|static
name|void
name|beforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|ANALYZER
operator|=
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
expr_stmt|;
name|qp
operator|=
operator|new
name|StandardQueryParser
argument_list|(
name|ANALYZER
argument_list|)
expr_stmt|;
specifier|final
name|HashMap
argument_list|<
name|String
argument_list|,
name|Number
argument_list|>
name|randomNumberMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Number
argument_list|>
argument_list|()
decl_stmt|;
name|SimpleDateFormat
name|dateFormat
decl_stmt|;
name|long
name|randomDate
decl_stmt|;
name|boolean
name|dateFormatSanityCheckPass
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
do|do
block|{
if|if
condition|(
name|count
operator|>
literal|100
condition|)
block|{
name|fail
argument_list|(
literal|"This test has problems to find a sane random DateFormat/NumberFormat. Stopped trying after 100 iterations."
argument_list|)
expr_stmt|;
block|}
name|dateFormatSanityCheckPass
operator|=
literal|true
expr_stmt|;
name|LOCALE
operator|=
name|randomLocale
argument_list|(
name|random
argument_list|()
argument_list|)
expr_stmt|;
name|TIMEZONE
operator|=
name|randomTimeZone
argument_list|(
name|random
argument_list|()
argument_list|)
expr_stmt|;
name|DATE_STYLE
operator|=
name|randomDateStyle
argument_list|(
name|random
argument_list|()
argument_list|)
expr_stmt|;
name|TIME_STYLE
operator|=
name|randomDateStyle
argument_list|(
name|random
argument_list|()
argument_list|)
expr_stmt|;
comment|// assumes localized date pattern will have at least year, month, day,
comment|// hour, minute
name|dateFormat
operator|=
operator|(
name|SimpleDateFormat
operator|)
name|DateFormat
operator|.
name|getDateTimeInstance
argument_list|(
name|DATE_STYLE
argument_list|,
name|TIME_STYLE
argument_list|,
name|LOCALE
argument_list|)
expr_stmt|;
comment|// not all date patterns includes era, full year, timezone and second,
comment|// so we add them here
name|dateFormat
operator|.
name|applyPattern
argument_list|(
name|dateFormat
operator|.
name|toPattern
argument_list|()
operator|+
literal|" G s Z yyyy"
argument_list|)
expr_stmt|;
name|dateFormat
operator|.
name|setTimeZone
argument_list|(
name|TIMEZONE
argument_list|)
expr_stmt|;
name|DATE_FORMAT
operator|=
operator|new
name|NumberDateFormat
argument_list|(
name|dateFormat
argument_list|)
expr_stmt|;
do|do
block|{
name|randomDate
operator|=
name|random
argument_list|()
operator|.
name|nextLong
argument_list|()
expr_stmt|;
comment|// prune date value so it doesn't pass in insane values to some
comment|// calendars.
name|randomDate
operator|=
name|randomDate
operator|%
literal|3400000000000l
expr_stmt|;
comment|// truncate to second
name|randomDate
operator|=
operator|(
name|randomDate
operator|/
literal|1000L
operator|)
operator|*
literal|1000L
expr_stmt|;
comment|// only positive values
name|randomDate
operator|=
name|Math
operator|.
name|abs
argument_list|(
name|randomDate
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|randomDate
operator|==
literal|0L
condition|)
do|;
name|dateFormatSanityCheckPass
operator|&=
name|checkDateFormatSanity
argument_list|(
name|dateFormat
argument_list|,
name|randomDate
argument_list|)
expr_stmt|;
name|dateFormatSanityCheckPass
operator|&=
name|checkDateFormatSanity
argument_list|(
name|dateFormat
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|dateFormatSanityCheckPass
operator|&=
name|checkDateFormatSanity
argument_list|(
name|dateFormat
argument_list|,
operator|-
name|randomDate
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
do|while
condition|(
operator|!
name|dateFormatSanityCheckPass
condition|)
do|;
name|NUMBER_FORMAT
operator|=
name|NumberFormat
operator|.
name|getNumberInstance
argument_list|(
name|LOCALE
argument_list|)
expr_stmt|;
name|NUMBER_FORMAT
operator|.
name|setMaximumFractionDigits
argument_list|(
operator|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|()
operator|&
literal|20
operator|)
operator|+
literal|1
argument_list|)
expr_stmt|;
name|NUMBER_FORMAT
operator|.
name|setMinimumFractionDigits
argument_list|(
operator|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|()
operator|&
literal|20
operator|)
operator|+
literal|1
argument_list|)
expr_stmt|;
name|NUMBER_FORMAT
operator|.
name|setMaximumIntegerDigits
argument_list|(
operator|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|()
operator|&
literal|20
operator|)
operator|+
literal|1
argument_list|)
expr_stmt|;
name|NUMBER_FORMAT
operator|.
name|setMinimumIntegerDigits
argument_list|(
operator|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|()
operator|&
literal|20
operator|)
operator|+
literal|1
argument_list|)
expr_stmt|;
name|double
name|randomDouble
decl_stmt|;
name|long
name|randomLong
decl_stmt|;
name|int
name|randomInt
decl_stmt|;
name|float
name|randomFloat
decl_stmt|;
while|while
condition|(
operator|(
name|randomLong
operator|=
name|normalizeNumber
argument_list|(
name|Math
operator|.
name|abs
argument_list|(
name|random
argument_list|()
operator|.
name|nextLong
argument_list|()
argument_list|)
argument_list|)
operator|.
name|longValue
argument_list|()
operator|)
operator|==
literal|0L
condition|)
empty_stmt|;
while|while
condition|(
operator|(
name|randomDouble
operator|=
name|normalizeNumber
argument_list|(
name|Math
operator|.
name|abs
argument_list|(
name|random
argument_list|()
operator|.
name|nextDouble
argument_list|()
argument_list|)
argument_list|)
operator|.
name|doubleValue
argument_list|()
operator|)
operator|==
literal|0.0
condition|)
empty_stmt|;
while|while
condition|(
operator|(
name|randomFloat
operator|=
name|normalizeNumber
argument_list|(
name|Math
operator|.
name|abs
argument_list|(
name|random
argument_list|()
operator|.
name|nextFloat
argument_list|()
argument_list|)
argument_list|)
operator|.
name|floatValue
argument_list|()
operator|)
operator|==
literal|0.0f
condition|)
empty_stmt|;
while|while
condition|(
operator|(
name|randomInt
operator|=
name|normalizeNumber
argument_list|(
name|Math
operator|.
name|abs
argument_list|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|()
argument_list|)
argument_list|)
operator|.
name|intValue
argument_list|()
operator|)
operator|==
literal|0
condition|)
empty_stmt|;
name|randomNumberMap
operator|.
name|put
argument_list|(
name|NumericType
operator|.
name|LONG
operator|.
name|name
argument_list|()
argument_list|,
name|randomLong
argument_list|)
expr_stmt|;
name|randomNumberMap
operator|.
name|put
argument_list|(
name|NumericType
operator|.
name|INT
operator|.
name|name
argument_list|()
argument_list|,
name|randomInt
argument_list|)
expr_stmt|;
name|randomNumberMap
operator|.
name|put
argument_list|(
name|NumericType
operator|.
name|FLOAT
operator|.
name|name
argument_list|()
argument_list|,
name|randomFloat
argument_list|)
expr_stmt|;
name|randomNumberMap
operator|.
name|put
argument_list|(
name|NumericType
operator|.
name|DOUBLE
operator|.
name|name
argument_list|()
argument_list|,
name|randomDouble
argument_list|)
expr_stmt|;
name|randomNumberMap
operator|.
name|put
argument_list|(
name|DATE_FIELD_NAME
argument_list|,
name|randomDate
argument_list|)
expr_stmt|;
name|RANDOM_NUMBER_MAP
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|randomNumberMap
argument_list|)
expr_stmt|;
name|directory
operator|=
name|newDirectory
argument_list|()
expr_stmt|;
name|RandomIndexWriter
name|writer
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|directory
argument_list|,
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setMaxBufferedDocs
argument_list|(
name|_TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|50
argument_list|,
literal|1000
argument_list|)
argument_list|)
operator|.
name|setMergePolicy
argument_list|(
name|newLogMergePolicy
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|NumericConfig
argument_list|>
name|numericConfigMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|NumericConfig
argument_list|>
argument_list|()
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|Field
argument_list|>
name|numericFieldMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Field
argument_list|>
argument_list|()
decl_stmt|;
name|qp
operator|.
name|setNumericConfigMap
argument_list|(
name|numericConfigMap
argument_list|)
expr_stmt|;
for|for
control|(
name|NumericType
name|type
range|:
name|NumericType
operator|.
name|values
argument_list|()
control|)
block|{
name|numericConfigMap
operator|.
name|put
argument_list|(
name|type
operator|.
name|name
argument_list|()
argument_list|,
operator|new
name|NumericConfig
argument_list|(
name|PRECISION_STEP
argument_list|,
name|NUMBER_FORMAT
argument_list|,
name|type
argument_list|)
argument_list|)
expr_stmt|;
name|FieldType
name|ft
init|=
operator|new
name|FieldType
argument_list|(
name|IntField
operator|.
name|TYPE
argument_list|)
decl_stmt|;
name|ft
operator|.
name|setNumericType
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|ft
operator|.
name|setStored
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ft
operator|.
name|setNumericPrecisionStep
argument_list|(
name|PRECISION_STEP
argument_list|)
expr_stmt|;
name|ft
operator|.
name|freeze
argument_list|()
expr_stmt|;
specifier|final
name|Field
name|field
decl_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|INT
case|:
name|field
operator|=
operator|new
name|IntField
argument_list|(
name|type
operator|.
name|name
argument_list|()
argument_list|,
literal|0
argument_list|,
name|ft
argument_list|)
expr_stmt|;
break|break;
case|case
name|FLOAT
case|:
name|field
operator|=
operator|new
name|FloatField
argument_list|(
name|type
operator|.
name|name
argument_list|()
argument_list|,
literal|0.0f
argument_list|,
name|ft
argument_list|)
expr_stmt|;
break|break;
case|case
name|LONG
case|:
name|field
operator|=
operator|new
name|LongField
argument_list|(
name|type
operator|.
name|name
argument_list|()
argument_list|,
literal|0l
argument_list|,
name|ft
argument_list|)
expr_stmt|;
break|break;
case|case
name|DOUBLE
case|:
name|field
operator|=
operator|new
name|DoubleField
argument_list|(
name|type
operator|.
name|name
argument_list|()
argument_list|,
literal|0.0
argument_list|,
name|ft
argument_list|)
expr_stmt|;
break|break;
default|default:
assert|assert
literal|false
assert|;
name|field
operator|=
literal|null
expr_stmt|;
block|}
name|numericFieldMap
operator|.
name|put
argument_list|(
name|type
operator|.
name|name
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|}
name|numericConfigMap
operator|.
name|put
argument_list|(
name|DATE_FIELD_NAME
argument_list|,
operator|new
name|NumericConfig
argument_list|(
name|PRECISION_STEP
argument_list|,
name|DATE_FORMAT
argument_list|,
name|NumericType
operator|.
name|LONG
argument_list|)
argument_list|)
expr_stmt|;
name|FieldType
name|ft
init|=
operator|new
name|FieldType
argument_list|(
name|LongField
operator|.
name|TYPE
argument_list|)
decl_stmt|;
name|ft
operator|.
name|setStored
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ft
operator|.
name|setNumericPrecisionStep
argument_list|(
name|PRECISION_STEP
argument_list|)
expr_stmt|;
name|LongField
name|dateField
init|=
operator|new
name|LongField
argument_list|(
name|DATE_FIELD_NAME
argument_list|,
literal|0l
argument_list|,
name|ft
argument_list|)
decl_stmt|;
name|numericFieldMap
operator|.
name|put
argument_list|(
name|DATE_FIELD_NAME
argument_list|,
name|dateField
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|dateField
argument_list|)
expr_stmt|;
for|for
control|(
name|NumberType
name|numberType
range|:
name|NumberType
operator|.
name|values
argument_list|()
control|)
block|{
name|setFieldValues
argument_list|(
name|numberType
argument_list|,
name|numericFieldMap
argument_list|)
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Indexing document: "
operator|+
name|doc
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
name|reader
operator|=
name|writer
operator|.
name|getReader
argument_list|()
expr_stmt|;
name|searcher
operator|=
name|newSearcher
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|getNumberType
specifier|private
specifier|static
name|Number
name|getNumberType
parameter_list|(
name|NumberType
name|numberType
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
if|if
condition|(
name|numberType
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
switch|switch
condition|(
name|numberType
condition|)
block|{
case|case
name|POSITIVE
case|:
return|return
name|RANDOM_NUMBER_MAP
operator|.
name|get
argument_list|(
name|fieldName
argument_list|)
return|;
case|case
name|NEGATIVE
case|:
name|Number
name|number
init|=
name|RANDOM_NUMBER_MAP
operator|.
name|get
argument_list|(
name|fieldName
argument_list|)
decl_stmt|;
if|if
condition|(
name|NumericType
operator|.
name|LONG
operator|.
name|name
argument_list|()
operator|.
name|equals
argument_list|(
name|fieldName
argument_list|)
operator|||
name|DATE_FIELD_NAME
operator|.
name|equals
argument_list|(
name|fieldName
argument_list|)
condition|)
block|{
name|number
operator|=
operator|-
name|number
operator|.
name|longValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|NumericType
operator|.
name|DOUBLE
operator|.
name|name
argument_list|()
operator|.
name|equals
argument_list|(
name|fieldName
argument_list|)
condition|)
block|{
name|number
operator|=
operator|-
name|number
operator|.
name|doubleValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|NumericType
operator|.
name|FLOAT
operator|.
name|name
argument_list|()
operator|.
name|equals
argument_list|(
name|fieldName
argument_list|)
condition|)
block|{
name|number
operator|=
operator|-
name|number
operator|.
name|floatValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|NumericType
operator|.
name|INT
operator|.
name|name
argument_list|()
operator|.
name|equals
argument_list|(
name|fieldName
argument_list|)
condition|)
block|{
name|number
operator|=
operator|-
name|number
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"field name not found: "
operator|+
name|fieldName
argument_list|)
throw|;
block|}
return|return
name|number
return|;
default|default:
return|return
literal|0
return|;
block|}
block|}
DECL|method|setFieldValues
specifier|private
specifier|static
name|void
name|setFieldValues
parameter_list|(
name|NumberType
name|numberType
parameter_list|,
name|HashMap
argument_list|<
name|String
argument_list|,
name|Field
argument_list|>
name|numericFieldMap
parameter_list|)
block|{
name|Number
name|number
init|=
name|getNumberType
argument_list|(
name|numberType
argument_list|,
name|NumericType
operator|.
name|DOUBLE
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
name|numericFieldMap
operator|.
name|get
argument_list|(
name|NumericType
operator|.
name|DOUBLE
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|setDoubleValue
argument_list|(
name|number
operator|.
name|doubleValue
argument_list|()
argument_list|)
expr_stmt|;
name|number
operator|=
name|getNumberType
argument_list|(
name|numberType
argument_list|,
name|NumericType
operator|.
name|INT
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|numericFieldMap
operator|.
name|get
argument_list|(
name|NumericType
operator|.
name|INT
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|setIntValue
argument_list|(
name|number
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|number
operator|=
name|getNumberType
argument_list|(
name|numberType
argument_list|,
name|NumericType
operator|.
name|LONG
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|numericFieldMap
operator|.
name|get
argument_list|(
name|NumericType
operator|.
name|LONG
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|setLongValue
argument_list|(
name|number
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|number
operator|=
name|getNumberType
argument_list|(
name|numberType
argument_list|,
name|NumericType
operator|.
name|FLOAT
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|numericFieldMap
operator|.
name|get
argument_list|(
name|NumericType
operator|.
name|FLOAT
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|setFloatValue
argument_list|(
name|number
operator|.
name|floatValue
argument_list|()
argument_list|)
expr_stmt|;
name|number
operator|=
name|getNumberType
argument_list|(
name|numberType
argument_list|,
name|DATE_FIELD_NAME
argument_list|)
expr_stmt|;
name|numericFieldMap
operator|.
name|get
argument_list|(
name|DATE_FIELD_NAME
argument_list|)
operator|.
name|setLongValue
argument_list|(
name|number
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|randomDateStyle
specifier|private
specifier|static
name|int
name|randomDateStyle
parameter_list|(
name|Random
name|random
parameter_list|)
block|{
return|return
name|DATE_STYLES
index|[
name|random
operator|.
name|nextInt
argument_list|(
name|DATE_STYLES
operator|.
name|length
argument_list|)
index|]
return|;
block|}
annotation|@
name|Test
DECL|method|testInclusiveNumericRange
specifier|public
name|void
name|testInclusiveNumericRange
parameter_list|()
throws|throws
name|Exception
block|{
name|assertRangeQuery
argument_list|(
name|NumberType
operator|.
name|ZERO
argument_list|,
name|NumberType
operator|.
name|ZERO
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertRangeQuery
argument_list|(
name|NumberType
operator|.
name|ZERO
argument_list|,
name|NumberType
operator|.
name|POSITIVE
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertRangeQuery
argument_list|(
name|NumberType
operator|.
name|NEGATIVE
argument_list|,
name|NumberType
operator|.
name|ZERO
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertRangeQuery
argument_list|(
name|NumberType
operator|.
name|NEGATIVE
argument_list|,
name|NumberType
operator|.
name|POSITIVE
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|assertRangeQuery
argument_list|(
name|NumberType
operator|.
name|NEGATIVE
argument_list|,
name|NumberType
operator|.
name|NEGATIVE
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
comment|// test disabled since standard syntax parser does not work with inclusive and
comment|// exclusive at the same time
DECL|method|testInclusiveLowerNumericRange
specifier|public
name|void
name|testInclusiveLowerNumericRange
parameter_list|()
throws|throws
name|Exception
block|{
name|assertRangeQuery
argument_list|(
name|NumberType
operator|.
name|NEGATIVE
argument_list|,
name|NumberType
operator|.
name|ZERO
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertRangeQuery
argument_list|(
name|NumberType
operator|.
name|ZERO
argument_list|,
name|NumberType
operator|.
name|POSITIVE
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertRangeQuery
argument_list|(
name|NumberType
operator|.
name|NEGATIVE
argument_list|,
name|NumberType
operator|.
name|POSITIVE
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertRangeQuery
argument_list|(
name|NumberType
operator|.
name|NEGATIVE
argument_list|,
name|NumberType
operator|.
name|NEGATIVE
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
comment|// test disabled since standard syntax parser does not work with inclusive and
comment|// exclusive at the same time
DECL|method|testInclusiveUpperNumericRange
specifier|public
name|void
name|testInclusiveUpperNumericRange
parameter_list|()
throws|throws
name|Exception
block|{
name|assertRangeQuery
argument_list|(
name|NumberType
operator|.
name|NEGATIVE
argument_list|,
name|NumberType
operator|.
name|ZERO
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertRangeQuery
argument_list|(
name|NumberType
operator|.
name|ZERO
argument_list|,
name|NumberType
operator|.
name|POSITIVE
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertRangeQuery
argument_list|(
name|NumberType
operator|.
name|NEGATIVE
argument_list|,
name|NumberType
operator|.
name|POSITIVE
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertRangeQuery
argument_list|(
name|NumberType
operator|.
name|NEGATIVE
argument_list|,
name|NumberType
operator|.
name|NEGATIVE
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testExclusiveNumericRange
specifier|public
name|void
name|testExclusiveNumericRange
parameter_list|()
throws|throws
name|Exception
block|{
name|assertRangeQuery
argument_list|(
name|NumberType
operator|.
name|ZERO
argument_list|,
name|NumberType
operator|.
name|ZERO
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertRangeQuery
argument_list|(
name|NumberType
operator|.
name|ZERO
argument_list|,
name|NumberType
operator|.
name|POSITIVE
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertRangeQuery
argument_list|(
name|NumberType
operator|.
name|NEGATIVE
argument_list|,
name|NumberType
operator|.
name|ZERO
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertRangeQuery
argument_list|(
name|NumberType
operator|.
name|NEGATIVE
argument_list|,
name|NumberType
operator|.
name|POSITIVE
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertRangeQuery
argument_list|(
name|NumberType
operator|.
name|NEGATIVE
argument_list|,
name|NumberType
operator|.
name|NEGATIVE
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testOpenRangeNumericQuery
specifier|public
name|void
name|testOpenRangeNumericQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|assertOpenRangeQuery
argument_list|(
name|NumberType
operator|.
name|ZERO
argument_list|,
literal|"<"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertOpenRangeQuery
argument_list|(
name|NumberType
operator|.
name|POSITIVE
argument_list|,
literal|"<"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertOpenRangeQuery
argument_list|(
name|NumberType
operator|.
name|NEGATIVE
argument_list|,
literal|"<"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertOpenRangeQuery
argument_list|(
name|NumberType
operator|.
name|ZERO
argument_list|,
literal|"<="
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertOpenRangeQuery
argument_list|(
name|NumberType
operator|.
name|POSITIVE
argument_list|,
literal|"<="
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|assertOpenRangeQuery
argument_list|(
name|NumberType
operator|.
name|NEGATIVE
argument_list|,
literal|"<="
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertOpenRangeQuery
argument_list|(
name|NumberType
operator|.
name|ZERO
argument_list|,
literal|">"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertOpenRangeQuery
argument_list|(
name|NumberType
operator|.
name|POSITIVE
argument_list|,
literal|">"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertOpenRangeQuery
argument_list|(
name|NumberType
operator|.
name|NEGATIVE
argument_list|,
literal|">"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertOpenRangeQuery
argument_list|(
name|NumberType
operator|.
name|ZERO
argument_list|,
literal|">="
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertOpenRangeQuery
argument_list|(
name|NumberType
operator|.
name|POSITIVE
argument_list|,
literal|">="
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertOpenRangeQuery
argument_list|(
name|NumberType
operator|.
name|NEGATIVE
argument_list|,
literal|">="
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|assertOpenRangeQuery
argument_list|(
name|NumberType
operator|.
name|NEGATIVE
argument_list|,
literal|"="
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertOpenRangeQuery
argument_list|(
name|NumberType
operator|.
name|ZERO
argument_list|,
literal|"="
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertOpenRangeQuery
argument_list|(
name|NumberType
operator|.
name|POSITIVE
argument_list|,
literal|"="
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertRangeQuery
argument_list|(
name|NumberType
operator|.
name|NEGATIVE
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|assertRangeQuery
argument_list|(
name|NumberType
operator|.
name|NEGATIVE
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertRangeQuery
argument_list|(
name|NumberType
operator|.
name|POSITIVE
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertRangeQuery
argument_list|(
name|NumberType
operator|.
name|ZERO
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertRangeQuery
argument_list|(
literal|null
argument_list|,
name|NumberType
operator|.
name|POSITIVE
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|assertRangeQuery
argument_list|(
literal|null
argument_list|,
name|NumberType
operator|.
name|POSITIVE
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertRangeQuery
argument_list|(
literal|null
argument_list|,
name|NumberType
operator|.
name|NEGATIVE
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertRangeQuery
argument_list|(
literal|null
argument_list|,
name|NumberType
operator|.
name|ZERO
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertRangeQuery
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|assertRangeQuery
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSimpleNumericQuery
specifier|public
name|void
name|testSimpleNumericQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|assertSimpleQuery
argument_list|(
name|NumberType
operator|.
name|ZERO
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertSimpleQuery
argument_list|(
name|NumberType
operator|.
name|POSITIVE
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertSimpleQuery
argument_list|(
name|NumberType
operator|.
name|NEGATIVE
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|method|assertRangeQuery
specifier|public
name|void
name|assertRangeQuery
parameter_list|(
name|NumberType
name|lowerType
parameter_list|,
name|NumberType
name|upperType
parameter_list|,
name|boolean
name|lowerInclusive
parameter_list|,
name|boolean
name|upperInclusive
parameter_list|,
name|int
name|expectedDocCount
parameter_list|)
throws|throws
name|QueryNodeException
throws|,
name|IOException
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|String
name|lowerInclusiveStr
init|=
operator|(
name|lowerInclusive
condition|?
literal|"["
else|:
literal|"{"
operator|)
decl_stmt|;
name|String
name|upperInclusiveStr
init|=
operator|(
name|upperInclusive
condition|?
literal|"]"
else|:
literal|"}"
operator|)
decl_stmt|;
for|for
control|(
name|NumericType
name|type
range|:
name|NumericType
operator|.
name|values
argument_list|()
control|)
block|{
name|String
name|lowerStr
init|=
name|numberToString
argument_list|(
name|getNumberType
argument_list|(
name|lowerType
argument_list|,
name|type
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|upperStr
init|=
name|numberToString
argument_list|(
name|getNumberType
argument_list|(
name|upperType
argument_list|,
name|type
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"+"
argument_list|)
operator|.
name|append
argument_list|(
name|type
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|':'
argument_list|)
operator|.
name|append
argument_list|(
name|lowerInclusiveStr
argument_list|)
operator|.
name|append
argument_list|(
literal|'"'
argument_list|)
operator|.
name|append
argument_list|(
name|lowerStr
argument_list|)
operator|.
name|append
argument_list|(
literal|"\" TO \""
argument_list|)
operator|.
name|append
argument_list|(
name|upperStr
argument_list|)
operator|.
name|append
argument_list|(
literal|'"'
argument_list|)
operator|.
name|append
argument_list|(
name|upperInclusiveStr
argument_list|)
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
block|}
name|Number
name|lowerDateNumber
init|=
name|getNumberType
argument_list|(
name|lowerType
argument_list|,
name|DATE_FIELD_NAME
argument_list|)
decl_stmt|;
name|Number
name|upperDateNumber
init|=
name|getNumberType
argument_list|(
name|upperType
argument_list|,
name|DATE_FIELD_NAME
argument_list|)
decl_stmt|;
name|String
name|lowerDateStr
decl_stmt|;
name|String
name|upperDateStr
decl_stmt|;
if|if
condition|(
name|lowerDateNumber
operator|!=
literal|null
condition|)
block|{
name|lowerDateStr
operator|=
name|ESCAPER
operator|.
name|escape
argument_list|(
name|DATE_FORMAT
operator|.
name|format
argument_list|(
operator|new
name|Date
argument_list|(
name|lowerDateNumber
operator|.
name|longValue
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|LOCALE
argument_list|,
name|EscapeQuerySyntax
operator|.
name|Type
operator|.
name|STRING
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|lowerDateStr
operator|=
literal|"*"
expr_stmt|;
block|}
if|if
condition|(
name|upperDateNumber
operator|!=
literal|null
condition|)
block|{
name|upperDateStr
operator|=
name|ESCAPER
operator|.
name|escape
argument_list|(
name|DATE_FORMAT
operator|.
name|format
argument_list|(
operator|new
name|Date
argument_list|(
name|upperDateNumber
operator|.
name|longValue
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|LOCALE
argument_list|,
name|EscapeQuerySyntax
operator|.
name|Type
operator|.
name|STRING
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|upperDateStr
operator|=
literal|"*"
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"+"
argument_list|)
operator|.
name|append
argument_list|(
name|DATE_FIELD_NAME
argument_list|)
operator|.
name|append
argument_list|(
literal|':'
argument_list|)
operator|.
name|append
argument_list|(
name|lowerInclusiveStr
argument_list|)
operator|.
name|append
argument_list|(
literal|'"'
argument_list|)
operator|.
name|append
argument_list|(
name|lowerDateStr
argument_list|)
operator|.
name|append
argument_list|(
literal|"\" TO \""
argument_list|)
operator|.
name|append
argument_list|(
name|upperDateStr
argument_list|)
operator|.
name|append
argument_list|(
literal|'"'
argument_list|)
operator|.
name|append
argument_list|(
name|upperInclusiveStr
argument_list|)
expr_stmt|;
name|testQuery
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|,
name|expectedDocCount
argument_list|)
expr_stmt|;
block|}
DECL|method|assertOpenRangeQuery
specifier|public
name|void
name|assertOpenRangeQuery
parameter_list|(
name|NumberType
name|boundType
parameter_list|,
name|String
name|operator
parameter_list|,
name|int
name|expectedDocCount
parameter_list|)
throws|throws
name|QueryNodeException
throws|,
name|IOException
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|NumericType
name|type
range|:
name|NumericType
operator|.
name|values
argument_list|()
control|)
block|{
name|String
name|boundStr
init|=
name|numberToString
argument_list|(
name|getNumberType
argument_list|(
name|boundType
argument_list|,
name|type
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"+"
argument_list|)
operator|.
name|append
argument_list|(
name|type
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
name|operator
argument_list|)
operator|.
name|append
argument_list|(
literal|'"'
argument_list|)
operator|.
name|append
argument_list|(
name|boundStr
argument_list|)
operator|.
name|append
argument_list|(
literal|'"'
argument_list|)
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
block|}
name|String
name|boundDateStr
init|=
name|ESCAPER
operator|.
name|escape
argument_list|(
name|DATE_FORMAT
operator|.
name|format
argument_list|(
operator|new
name|Date
argument_list|(
name|getNumberType
argument_list|(
name|boundType
argument_list|,
name|DATE_FIELD_NAME
argument_list|)
operator|.
name|longValue
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|LOCALE
argument_list|,
name|EscapeQuerySyntax
operator|.
name|Type
operator|.
name|STRING
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"+"
argument_list|)
operator|.
name|append
argument_list|(
name|DATE_FIELD_NAME
argument_list|)
operator|.
name|append
argument_list|(
name|operator
argument_list|)
operator|.
name|append
argument_list|(
literal|'"'
argument_list|)
operator|.
name|append
argument_list|(
name|boundDateStr
argument_list|)
operator|.
name|append
argument_list|(
literal|'"'
argument_list|)
expr_stmt|;
name|testQuery
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|,
name|expectedDocCount
argument_list|)
expr_stmt|;
block|}
DECL|method|assertSimpleQuery
specifier|public
name|void
name|assertSimpleQuery
parameter_list|(
name|NumberType
name|numberType
parameter_list|,
name|int
name|expectedDocCount
parameter_list|)
throws|throws
name|QueryNodeException
throws|,
name|IOException
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|NumericType
name|type
range|:
name|NumericType
operator|.
name|values
argument_list|()
control|)
block|{
name|String
name|numberStr
init|=
name|numberToString
argument_list|(
name|getNumberType
argument_list|(
name|numberType
argument_list|,
name|type
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'+'
argument_list|)
operator|.
name|append
argument_list|(
name|type
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|":\""
argument_list|)
operator|.
name|append
argument_list|(
name|numberStr
argument_list|)
operator|.
name|append
argument_list|(
literal|"\" "
argument_list|)
expr_stmt|;
block|}
name|String
name|dateStr
init|=
name|ESCAPER
operator|.
name|escape
argument_list|(
name|DATE_FORMAT
operator|.
name|format
argument_list|(
operator|new
name|Date
argument_list|(
name|getNumberType
argument_list|(
name|numberType
argument_list|,
name|DATE_FIELD_NAME
argument_list|)
operator|.
name|longValue
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|LOCALE
argument_list|,
name|EscapeQuerySyntax
operator|.
name|Type
operator|.
name|STRING
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'+'
argument_list|)
operator|.
name|append
argument_list|(
name|DATE_FIELD_NAME
argument_list|)
operator|.
name|append
argument_list|(
literal|":\""
argument_list|)
operator|.
name|append
argument_list|(
name|dateStr
argument_list|)
operator|.
name|append
argument_list|(
literal|'"'
argument_list|)
expr_stmt|;
name|testQuery
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|,
name|expectedDocCount
argument_list|)
expr_stmt|;
block|}
DECL|method|testQuery
specifier|private
name|void
name|testQuery
parameter_list|(
name|String
name|queryStr
parameter_list|,
name|int
name|expectedDocCount
parameter_list|)
throws|throws
name|QueryNodeException
throws|,
name|IOException
block|{
if|if
condition|(
name|VERBOSE
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Parsing: "
operator|+
name|queryStr
argument_list|)
expr_stmt|;
name|Query
name|query
init|=
name|qp
operator|.
name|parse
argument_list|(
name|queryStr
argument_list|,
name|FIELD_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Querying: "
operator|+
name|query
argument_list|)
expr_stmt|;
name|TopDocs
name|topDocs
init|=
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
literal|1000
argument_list|)
decl_stmt|;
name|String
name|msg
init|=
literal|"Query<"
operator|+
name|queryStr
operator|+
literal|"> retrieved "
operator|+
name|topDocs
operator|.
name|totalHits
operator|+
literal|" document(s), "
operator|+
name|expectedDocCount
operator|+
literal|" document(s) expected."
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|msg
argument_list|,
name|expectedDocCount
argument_list|,
name|topDocs
operator|.
name|totalHits
argument_list|)
expr_stmt|;
block|}
DECL|method|numberToString
specifier|private
specifier|static
name|String
name|numberToString
parameter_list|(
name|Number
name|number
parameter_list|)
block|{
return|return
name|number
operator|==
literal|null
condition|?
literal|"*"
else|:
name|ESCAPER
operator|.
name|escape
argument_list|(
name|NUMBER_FORMAT
operator|.
name|format
argument_list|(
name|number
argument_list|)
argument_list|,
name|LOCALE
argument_list|,
name|EscapeQuerySyntax
operator|.
name|Type
operator|.
name|STRING
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|normalizeNumber
specifier|private
specifier|static
name|Number
name|normalizeNumber
parameter_list|(
name|Number
name|number
parameter_list|)
throws|throws
name|ParseException
block|{
return|return
name|NUMBER_FORMAT
operator|.
name|parse
argument_list|(
name|NUMBER_FORMAT
operator|.
name|format
argument_list|(
name|number
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|AfterClass
DECL|method|afterClass
specifier|public
specifier|static
name|void
name|afterClass
parameter_list|()
throws|throws
name|Exception
block|{
name|searcher
operator|=
literal|null
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|reader
operator|=
literal|null
expr_stmt|;
name|directory
operator|.
name|close
argument_list|()
expr_stmt|;
name|directory
operator|=
literal|null
expr_stmt|;
block|}
block|}
end_class
end_unit
