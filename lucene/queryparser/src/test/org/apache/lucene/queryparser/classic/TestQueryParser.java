begin_unit
begin_package
DECL|package|org.apache.lucene.queryparser.classic
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryparser
operator|.
name|classic
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Analyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|MockAnalyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|MockTokenizer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|DateTools
operator|.
name|Resolution
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryparser
operator|.
name|classic
operator|.
name|QueryParser
operator|.
name|Operator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryparser
operator|.
name|flexible
operator|.
name|standard
operator|.
name|CommonQueryParserConfiguration
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryparser
operator|.
name|util
operator|.
name|QueryParserTestBase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanClause
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TermQuery
import|;
end_import
begin_comment
comment|/**  * Tests QueryParser.  */
end_comment
begin_class
DECL|class|TestQueryParser
specifier|public
class|class
name|TestQueryParser
extends|extends
name|QueryParserTestBase
block|{
DECL|class|QPTestParser
specifier|public
specifier|static
class|class
name|QPTestParser
extends|extends
name|QueryParser
block|{
DECL|method|QPTestParser
specifier|public
name|QPTestParser
parameter_list|(
name|String
name|f
parameter_list|,
name|Analyzer
name|a
parameter_list|)
block|{
name|super
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
name|f
argument_list|,
name|a
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getFuzzyQuery
specifier|protected
name|Query
name|getFuzzyQuery
parameter_list|(
name|String
name|field
parameter_list|,
name|String
name|termStr
parameter_list|,
name|float
name|minSimilarity
parameter_list|)
throws|throws
name|ParseException
block|{
throw|throw
operator|new
name|ParseException
argument_list|(
literal|"Fuzzy queries not allowed"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|getWildcardQuery
specifier|protected
name|Query
name|getWildcardQuery
parameter_list|(
name|String
name|field
parameter_list|,
name|String
name|termStr
parameter_list|)
throws|throws
name|ParseException
block|{
throw|throw
operator|new
name|ParseException
argument_list|(
literal|"Wildcard queries not allowed"
argument_list|)
throw|;
block|}
block|}
DECL|method|getParser
specifier|public
name|QueryParser
name|getParser
parameter_list|(
name|Analyzer
name|a
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|a
operator|==
literal|null
condition|)
name|a
operator|=
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|,
name|MockTokenizer
operator|.
name|SIMPLE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QueryParser
name|qp
init|=
operator|new
name|QueryParser
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
name|getDefaultField
argument_list|()
argument_list|,
name|a
argument_list|)
decl_stmt|;
name|qp
operator|.
name|setDefaultOperator
argument_list|(
name|QueryParserBase
operator|.
name|OR_OPERATOR
argument_list|)
expr_stmt|;
return|return
name|qp
return|;
block|}
annotation|@
name|Override
DECL|method|getParserConfig
specifier|public
name|CommonQueryParserConfiguration
name|getParserConfig
parameter_list|(
name|Analyzer
name|a
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|getParser
argument_list|(
name|a
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getQuery
specifier|public
name|Query
name|getQuery
parameter_list|(
name|String
name|query
parameter_list|,
name|CommonQueryParserConfiguration
name|cqpC
parameter_list|)
throws|throws
name|Exception
block|{
assert|assert
name|cqpC
operator|!=
literal|null
operator|:
literal|"Parameter must not be null"
assert|;
assert|assert
operator|(
name|cqpC
operator|instanceof
name|QueryParser
operator|)
operator|:
literal|"Parameter must be instance of QueryParser"
assert|;
name|QueryParser
name|qp
init|=
operator|(
name|QueryParser
operator|)
name|cqpC
decl_stmt|;
return|return
name|qp
operator|.
name|parse
argument_list|(
name|query
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getQuery
specifier|public
name|Query
name|getQuery
parameter_list|(
name|String
name|query
parameter_list|,
name|Analyzer
name|a
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|getParser
argument_list|(
name|a
argument_list|)
operator|.
name|parse
argument_list|(
name|query
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|isQueryParserException
specifier|public
name|boolean
name|isQueryParserException
parameter_list|(
name|Exception
name|exception
parameter_list|)
block|{
return|return
name|exception
operator|instanceof
name|ParseException
return|;
block|}
annotation|@
name|Override
DECL|method|setDefaultOperatorOR
specifier|public
name|void
name|setDefaultOperatorOR
parameter_list|(
name|CommonQueryParserConfiguration
name|cqpC
parameter_list|)
block|{
assert|assert
operator|(
name|cqpC
operator|instanceof
name|QueryParser
operator|)
assert|;
name|QueryParser
name|qp
init|=
operator|(
name|QueryParser
operator|)
name|cqpC
decl_stmt|;
name|qp
operator|.
name|setDefaultOperator
argument_list|(
name|Operator
operator|.
name|OR
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setDefaultOperatorAND
specifier|public
name|void
name|setDefaultOperatorAND
parameter_list|(
name|CommonQueryParserConfiguration
name|cqpC
parameter_list|)
block|{
assert|assert
operator|(
name|cqpC
operator|instanceof
name|QueryParser
operator|)
assert|;
name|QueryParser
name|qp
init|=
operator|(
name|QueryParser
operator|)
name|cqpC
decl_stmt|;
name|qp
operator|.
name|setDefaultOperator
argument_list|(
name|Operator
operator|.
name|AND
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setAnalyzeRangeTerms
specifier|public
name|void
name|setAnalyzeRangeTerms
parameter_list|(
name|CommonQueryParserConfiguration
name|cqpC
parameter_list|,
name|boolean
name|value
parameter_list|)
block|{
assert|assert
operator|(
name|cqpC
operator|instanceof
name|QueryParser
operator|)
assert|;
name|QueryParser
name|qp
init|=
operator|(
name|QueryParser
operator|)
name|cqpC
decl_stmt|;
name|qp
operator|.
name|setAnalyzeRangeTerms
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setAutoGeneratePhraseQueries
specifier|public
name|void
name|setAutoGeneratePhraseQueries
parameter_list|(
name|CommonQueryParserConfiguration
name|cqpC
parameter_list|,
name|boolean
name|value
parameter_list|)
block|{
assert|assert
operator|(
name|cqpC
operator|instanceof
name|QueryParser
operator|)
assert|;
name|QueryParser
name|qp
init|=
operator|(
name|QueryParser
operator|)
name|cqpC
decl_stmt|;
name|qp
operator|.
name|setAutoGeneratePhraseQueries
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setDateResolution
specifier|public
name|void
name|setDateResolution
parameter_list|(
name|CommonQueryParserConfiguration
name|cqpC
parameter_list|,
name|CharSequence
name|field
parameter_list|,
name|Resolution
name|value
parameter_list|)
block|{
assert|assert
operator|(
name|cqpC
operator|instanceof
name|QueryParser
operator|)
assert|;
name|QueryParser
name|qp
init|=
operator|(
name|QueryParser
operator|)
name|cqpC
decl_stmt|;
name|qp
operator|.
name|setDateResolution
argument_list|(
name|field
operator|.
name|toString
argument_list|()
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|testDefaultOperator
specifier|public
name|void
name|testDefaultOperator
parameter_list|()
throws|throws
name|Exception
block|{
name|QueryParser
name|qp
init|=
name|getParser
argument_list|(
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
comment|// make sure OR is the default:
name|assertEquals
argument_list|(
name|QueryParserBase
operator|.
name|OR_OPERATOR
argument_list|,
name|qp
operator|.
name|getDefaultOperator
argument_list|()
argument_list|)
expr_stmt|;
name|setDefaultOperatorAND
argument_list|(
name|qp
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|QueryParserBase
operator|.
name|AND_OPERATOR
argument_list|,
name|qp
operator|.
name|getDefaultOperator
argument_list|()
argument_list|)
expr_stmt|;
name|setDefaultOperatorOR
argument_list|(
name|qp
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|QueryParserBase
operator|.
name|OR_OPERATOR
argument_list|,
name|qp
operator|.
name|getDefaultOperator
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// LUCENE-2002: when we run javacc to regen QueryParser,
comment|// we also run a replaceregexp step to fix 2 of the public
comment|// ctors (change them to protected):
comment|//
comment|// protected QueryParser(CharStream stream)
comment|//
comment|// protected QueryParser(QueryParserTokenManager tm)
comment|//
comment|// This test is here as a safety, in case that ant step
comment|// doesn't work for some reason.
DECL|method|testProtectedCtors
specifier|public
name|void
name|testProtectedCtors
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|QueryParser
operator|.
name|class
operator|.
name|getConstructor
argument_list|(
operator|new
name|Class
index|[]
block|{
name|CharStream
operator|.
name|class
block|}
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"please switch public QueryParser(CharStream) to be protected"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|nsme
parameter_list|)
block|{
comment|// expected
block|}
try|try
block|{
name|QueryParser
operator|.
name|class
operator|.
name|getConstructor
argument_list|(
operator|new
name|Class
index|[]
block|{
name|QueryParserTokenManager
operator|.
name|class
block|}
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"please switch public QueryParser(QueryParserTokenManager) to be protected"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|nsme
parameter_list|)
block|{
comment|// expected
block|}
block|}
DECL|method|testFuzzySlopeExtendability
specifier|public
name|void
name|testFuzzySlopeExtendability
parameter_list|()
throws|throws
name|ParseException
block|{
name|QueryParser
name|qp
init|=
operator|new
name|QueryParser
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
literal|"a"
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|,
name|MockTokenizer
operator|.
name|WHITESPACE
argument_list|,
literal|false
argument_list|)
argument_list|)
block|{
annotation|@
name|Override
name|Query
name|handleBareFuzzy
parameter_list|(
name|String
name|qfield
parameter_list|,
name|Token
name|fuzzySlop
parameter_list|,
name|String
name|termImage
parameter_list|)
throws|throws
name|ParseException
block|{
if|if
condition|(
name|fuzzySlop
operator|.
name|image
operator|.
name|endsWith
argument_list|(
literal|"â¬"
argument_list|)
condition|)
block|{
name|float
name|fms
init|=
name|fuzzyMinSim
decl_stmt|;
try|try
block|{
name|fms
operator|=
name|Float
operator|.
name|valueOf
argument_list|(
name|fuzzySlop
operator|.
name|image
operator|.
name|substring
argument_list|(
literal|1
argument_list|,
name|fuzzySlop
operator|.
name|image
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
operator|.
name|floatValue
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ignored
parameter_list|)
block|{ }
name|float
name|value
init|=
name|Float
operator|.
name|parseFloat
argument_list|(
name|termImage
argument_list|)
decl_stmt|;
return|return
name|getRangeQuery
argument_list|(
name|qfield
argument_list|,
name|Float
operator|.
name|toString
argument_list|(
name|value
operator|-
name|fms
operator|/
literal|2.f
argument_list|)
argument_list|,
name|Float
operator|.
name|toString
argument_list|(
name|value
operator|+
name|fms
operator|/
literal|2.f
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
return|;
block|}
return|return
name|super
operator|.
name|handleBareFuzzy
argument_list|(
name|qfield
argument_list|,
name|fuzzySlop
argument_list|,
name|termImage
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|assertEquals
argument_list|(
name|qp
operator|.
name|parse
argument_list|(
literal|"a:[11.95 TO 12.95]"
argument_list|)
argument_list|,
name|qp
operator|.
name|parse
argument_list|(
literal|"12.45~1â¬"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|testStarParsing
specifier|public
name|void
name|testStarParsing
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
index|[]
name|type
init|=
operator|new
name|int
index|[
literal|1
index|]
decl_stmt|;
name|QueryParser
name|qp
init|=
operator|new
name|QueryParser
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
literal|"field"
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|,
name|MockTokenizer
operator|.
name|WHITESPACE
argument_list|,
literal|false
argument_list|)
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|Query
name|getWildcardQuery
parameter_list|(
name|String
name|field
parameter_list|,
name|String
name|termStr
parameter_list|)
block|{
comment|// override error checking of superclass
name|type
index|[
literal|0
index|]
operator|=
literal|1
expr_stmt|;
return|return
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|field
argument_list|,
name|termStr
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|Query
name|getPrefixQuery
parameter_list|(
name|String
name|field
parameter_list|,
name|String
name|termStr
parameter_list|)
block|{
comment|// override error checking of superclass
name|type
index|[
literal|0
index|]
operator|=
literal|2
expr_stmt|;
return|return
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|field
argument_list|,
name|termStr
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|Query
name|getFieldQuery
parameter_list|(
name|String
name|field
parameter_list|,
name|String
name|queryText
parameter_list|,
name|boolean
name|quoted
parameter_list|)
throws|throws
name|ParseException
block|{
name|type
index|[
literal|0
index|]
operator|=
literal|3
expr_stmt|;
return|return
name|super
operator|.
name|getFieldQuery
argument_list|(
name|field
argument_list|,
name|queryText
argument_list|,
name|quoted
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|TermQuery
name|tq
decl_stmt|;
name|tq
operator|=
operator|(
name|TermQuery
operator|)
name|qp
operator|.
name|parse
argument_list|(
literal|"foo:zoo*"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"zoo"
argument_list|,
name|tq
operator|.
name|getTerm
argument_list|()
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|type
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|tq
operator|=
operator|(
name|TermQuery
operator|)
name|qp
operator|.
name|parse
argument_list|(
literal|"foo:zoo*^2"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"zoo"
argument_list|,
name|tq
operator|.
name|getTerm
argument_list|()
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|type
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|tq
operator|.
name|getBoost
argument_list|()
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|tq
operator|=
operator|(
name|TermQuery
operator|)
name|qp
operator|.
name|parse
argument_list|(
literal|"foo:*"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"*"
argument_list|,
name|tq
operator|.
name|getTerm
argument_list|()
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|type
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// could be a valid prefix query in the future too
name|tq
operator|=
operator|(
name|TermQuery
operator|)
name|qp
operator|.
name|parse
argument_list|(
literal|"foo:*^2"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"*"
argument_list|,
name|tq
operator|.
name|getTerm
argument_list|()
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|type
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|tq
operator|.
name|getBoost
argument_list|()
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|tq
operator|=
operator|(
name|TermQuery
operator|)
name|qp
operator|.
name|parse
argument_list|(
literal|"*:foo"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"*"
argument_list|,
name|tq
operator|.
name|getTerm
argument_list|()
operator|.
name|field
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|tq
operator|.
name|getTerm
argument_list|()
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|type
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|tq
operator|=
operator|(
name|TermQuery
operator|)
name|qp
operator|.
name|parse
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"*"
argument_list|,
name|tq
operator|.
name|getTerm
argument_list|()
operator|.
name|field
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"*"
argument_list|,
name|tq
operator|.
name|getTerm
argument_list|()
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|type
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// could be handled as a prefix query in the
comment|// future
name|tq
operator|=
operator|(
name|TermQuery
operator|)
name|qp
operator|.
name|parse
argument_list|(
literal|"(*:*)"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"*"
argument_list|,
name|tq
operator|.
name|getTerm
argument_list|()
operator|.
name|field
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"*"
argument_list|,
name|tq
operator|.
name|getTerm
argument_list|()
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|type
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
DECL|method|testCustomQueryParserWildcard
specifier|public
name|void
name|testCustomQueryParserWildcard
parameter_list|()
block|{
try|try
block|{
operator|new
name|QPTestParser
argument_list|(
literal|"contents"
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|,
name|MockTokenizer
operator|.
name|WHITESPACE
argument_list|,
literal|false
argument_list|)
argument_list|)
operator|.
name|parse
argument_list|(
literal|"a?t"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Wildcard queries should not be allowed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|expected
parameter_list|)
block|{
comment|// expected exception
block|}
block|}
DECL|method|testCustomQueryParserFuzzy
specifier|public
name|void
name|testCustomQueryParserFuzzy
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
operator|new
name|QPTestParser
argument_list|(
literal|"contents"
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|,
name|MockTokenizer
operator|.
name|WHITESPACE
argument_list|,
literal|false
argument_list|)
argument_list|)
operator|.
name|parse
argument_list|(
literal|"xunit~"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Fuzzy queries should not be allowed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|expected
parameter_list|)
block|{
comment|// expected exception
block|}
block|}
comment|/** query parser that doesn't expand synonyms when users use double quotes */
DECL|class|SmartQueryParser
specifier|private
class|class
name|SmartQueryParser
extends|extends
name|QueryParser
block|{
DECL|field|morePrecise
name|Analyzer
name|morePrecise
init|=
operator|new
name|Analyzer2
argument_list|()
decl_stmt|;
DECL|method|SmartQueryParser
specifier|public
name|SmartQueryParser
parameter_list|()
block|{
name|super
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
literal|"field"
argument_list|,
operator|new
name|Analyzer1
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getFieldQuery
specifier|protected
name|Query
name|getFieldQuery
parameter_list|(
name|String
name|field
parameter_list|,
name|String
name|queryText
parameter_list|,
name|boolean
name|quoted
parameter_list|)
throws|throws
name|ParseException
block|{
if|if
condition|(
name|quoted
condition|)
return|return
name|newFieldQuery
argument_list|(
name|morePrecise
argument_list|,
name|field
argument_list|,
name|queryText
argument_list|,
name|quoted
argument_list|)
return|;
else|else
return|return
name|super
operator|.
name|getFieldQuery
argument_list|(
name|field
argument_list|,
name|queryText
argument_list|,
name|quoted
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|testNewFieldQuery
specifier|public
name|void
name|testNewFieldQuery
parameter_list|()
throws|throws
name|Exception
block|{
comment|/** ordinary behavior, synonyms form uncoordinated boolean query */
name|QueryParser
name|dumb
init|=
operator|new
name|QueryParser
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
literal|"field"
argument_list|,
operator|new
name|Analyzer1
argument_list|()
argument_list|)
decl_stmt|;
name|BooleanQuery
name|expanded
init|=
operator|new
name|BooleanQuery
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|expanded
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"dogs"
argument_list|)
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|expanded
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"dog"
argument_list|)
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expanded
argument_list|,
name|dumb
operator|.
name|parse
argument_list|(
literal|"\"dogs\""
argument_list|)
argument_list|)
expr_stmt|;
comment|/** even with the phrase operator the behavior is the same */
name|assertEquals
argument_list|(
name|expanded
argument_list|,
name|dumb
operator|.
name|parse
argument_list|(
literal|"dogs"
argument_list|)
argument_list|)
expr_stmt|;
comment|/**      * custom behavior, the synonyms are expanded, unless you use quote operator      */
name|QueryParser
name|smart
init|=
operator|new
name|SmartQueryParser
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|expanded
argument_list|,
name|smart
operator|.
name|parse
argument_list|(
literal|"dogs"
argument_list|)
argument_list|)
expr_stmt|;
name|Query
name|unexpanded
init|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"dogs"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|unexpanded
argument_list|,
name|smart
operator|.
name|parse
argument_list|(
literal|"\"dogs\""
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
