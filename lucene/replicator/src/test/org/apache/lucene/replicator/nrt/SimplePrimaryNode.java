begin_unit
begin_package
DECL|package|org.apache.lucene.replicator.nrt
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|replicator
operator|.
name|nrt
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedOutputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|net
operator|.
name|ServerSocket
import|;
end_import
begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Socket
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|MockAnalyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|FieldType
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|StringField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|TextField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DirectoryReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexFileNames
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexOptions
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriterConfig
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LogMergePolicy
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|MergePolicy
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SegmentCommitInfo
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SegmentInfos
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|TieredMergePolicy
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|SearcherFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TermQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|DataInput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|DataOutput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IOContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexInput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|MockDirectoryWrapper
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|NIOFSDirectory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|TestUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|ThreadInterruptedException
import|;
end_import
begin_comment
comment|/** A primary node that uses simple TCP connections to send commands and copy files */
end_comment
begin_class
DECL|class|SimplePrimaryNode
class|class
name|SimplePrimaryNode
extends|extends
name|PrimaryNode
block|{
DECL|field|tcpPort
specifier|final
name|int
name|tcpPort
decl_stmt|;
comment|// These are updated by parent test process whenever replicas change:
DECL|field|replicaTCPPorts
name|int
index|[]
name|replicaTCPPorts
decl_stmt|;
DECL|field|replicaIDs
name|int
index|[]
name|replicaIDs
decl_stmt|;
comment|// So we only flip a bit once per file name:
DECL|field|bitFlipped
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|bitFlipped
init|=
name|Collections
operator|.
name|synchronizedSet
argument_list|(
operator|new
name|HashSet
argument_list|<>
argument_list|()
argument_list|)
decl_stmt|;
DECL|class|MergePreCopy
specifier|static
class|class
name|MergePreCopy
block|{
DECL|field|connections
specifier|final
name|List
argument_list|<
name|Connection
argument_list|>
name|connections
init|=
name|Collections
operator|.
name|synchronizedList
argument_list|(
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|files
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|FileMetaData
argument_list|>
name|files
decl_stmt|;
DECL|field|finished
specifier|private
name|boolean
name|finished
decl_stmt|;
DECL|method|MergePreCopy
specifier|public
name|MergePreCopy
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|FileMetaData
argument_list|>
name|files
parameter_list|)
block|{
name|this
operator|.
name|files
operator|=
name|files
expr_stmt|;
block|}
DECL|method|tryAddConnection
specifier|public
specifier|synchronized
name|boolean
name|tryAddConnection
parameter_list|(
name|Connection
name|c
parameter_list|)
block|{
if|if
condition|(
name|finished
operator|==
literal|false
condition|)
block|{
name|connections
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
DECL|method|finished
specifier|public
specifier|synchronized
name|boolean
name|finished
parameter_list|()
block|{
if|if
condition|(
name|connections
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|finished
operator|=
literal|true
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
DECL|field|warmingSegments
specifier|final
name|List
argument_list|<
name|MergePreCopy
argument_list|>
name|warmingSegments
init|=
name|Collections
operator|.
name|synchronizedList
argument_list|(
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
decl_stmt|;
DECL|method|SimplePrimaryNode
specifier|public
name|SimplePrimaryNode
parameter_list|(
name|Random
name|random
parameter_list|,
name|Path
name|indexPath
parameter_list|,
name|int
name|id
parameter_list|,
name|int
name|tcpPort
parameter_list|,
name|long
name|primaryGen
parameter_list|,
name|long
name|forcePrimaryVersion
parameter_list|,
name|SearcherFactory
name|searcherFactory
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|initWriter
argument_list|(
name|id
argument_list|,
name|random
argument_list|,
name|indexPath
argument_list|)
argument_list|,
name|id
argument_list|,
name|primaryGen
argument_list|,
name|forcePrimaryVersion
argument_list|,
name|searcherFactory
argument_list|)
expr_stmt|;
name|this
operator|.
name|tcpPort
operator|=
name|tcpPort
expr_stmt|;
block|}
comment|/** Records currently alive replicas. */
DECL|method|setReplicas
specifier|public
specifier|synchronized
name|void
name|setReplicas
parameter_list|(
name|int
index|[]
name|replicaIDs
parameter_list|,
name|int
index|[]
name|replicaTCPPorts
parameter_list|)
block|{
name|message
argument_list|(
literal|"top: set replicasIDs="
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|replicaIDs
argument_list|)
operator|+
literal|" tcpPorts="
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|replicaTCPPorts
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|replicaIDs
operator|=
name|replicaIDs
expr_stmt|;
name|this
operator|.
name|replicaTCPPorts
operator|=
name|replicaTCPPorts
expr_stmt|;
block|}
DECL|method|initWriter
specifier|private
specifier|static
name|IndexWriter
name|initWriter
parameter_list|(
name|int
name|id
parameter_list|,
name|Random
name|random
parameter_list|,
name|Path
name|indexPath
parameter_list|)
throws|throws
name|IOException
block|{
name|Directory
name|dir
init|=
name|SimpleReplicaNode
operator|.
name|getDirectory
argument_list|(
name|random
argument_list|,
name|id
argument_list|,
name|indexPath
argument_list|)
decl_stmt|;
name|MockAnalyzer
name|analyzer
init|=
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|)
decl_stmt|;
name|analyzer
operator|.
name|setMaxTokenLength
argument_list|(
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|,
literal|1
argument_list|,
name|IndexWriter
operator|.
name|MAX_TERM_LENGTH
argument_list|)
argument_list|)
expr_stmt|;
name|IndexWriterConfig
name|iwc
init|=
name|LuceneTestCase
operator|.
name|newIndexWriterConfig
argument_list|(
name|random
argument_list|,
name|analyzer
argument_list|)
decl_stmt|;
name|MergePolicy
name|mp
init|=
name|iwc
operator|.
name|getMergePolicy
argument_list|()
decl_stmt|;
comment|//iwc.setInfoStream(new PrintStreamInfoStream(System.out));
comment|// Force more frequent merging so we stress merge warming:
if|if
condition|(
name|mp
operator|instanceof
name|TieredMergePolicy
condition|)
block|{
name|TieredMergePolicy
name|tmp
init|=
operator|(
name|TieredMergePolicy
operator|)
name|mp
decl_stmt|;
name|tmp
operator|.
name|setSegmentsPerTier
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|tmp
operator|.
name|setMaxMergeAtOnce
argument_list|(
literal|3
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|mp
operator|instanceof
name|LogMergePolicy
condition|)
block|{
name|LogMergePolicy
name|lmp
init|=
operator|(
name|LogMergePolicy
operator|)
name|mp
decl_stmt|;
name|lmp
operator|.
name|setMergeFactor
argument_list|(
literal|3
argument_list|)
expr_stmt|;
block|}
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|iwc
argument_list|)
decl_stmt|;
name|TestUtil
operator|.
name|reduceOpenFiles
argument_list|(
name|writer
argument_list|)
expr_stmt|;
return|return
name|writer
return|;
block|}
annotation|@
name|Override
DECL|method|preCopyMergedSegmentFiles
specifier|protected
name|void
name|preCopyMergedSegmentFiles
parameter_list|(
name|SegmentCommitInfo
name|info
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|FileMetaData
argument_list|>
name|files
parameter_list|)
throws|throws
name|IOException
block|{
name|int
index|[]
name|replicaTCPPorts
init|=
name|this
operator|.
name|replicaTCPPorts
decl_stmt|;
if|if
condition|(
name|replicaTCPPorts
operator|==
literal|null
condition|)
block|{
name|message
argument_list|(
literal|"no replicas; skip warming "
operator|+
name|info
argument_list|)
expr_stmt|;
return|return;
block|}
name|message
argument_list|(
literal|"top: warm merge "
operator|+
name|info
operator|+
literal|" to "
operator|+
name|replicaTCPPorts
operator|.
name|length
operator|+
literal|" replicas: files="
operator|+
name|files
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
name|MergePreCopy
name|preCopy
init|=
operator|new
name|MergePreCopy
argument_list|(
name|files
argument_list|)
decl_stmt|;
name|warmingSegments
operator|.
name|add
argument_list|(
name|preCopy
argument_list|)
expr_stmt|;
try|try
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|fileNames
init|=
name|files
operator|.
name|keySet
argument_list|()
decl_stmt|;
comment|// Ask all currently known replicas to pre-copy this newly merged segment's files:
for|for
control|(
name|int
name|replicaTCPPort
range|:
name|replicaTCPPorts
control|)
block|{
try|try
block|{
name|Connection
name|c
init|=
operator|new
name|Connection
argument_list|(
name|replicaTCPPort
argument_list|)
decl_stmt|;
name|c
operator|.
name|out
operator|.
name|writeByte
argument_list|(
name|SimpleReplicaNode
operator|.
name|CMD_PRE_COPY_MERGE
argument_list|)
expr_stmt|;
name|c
operator|.
name|out
operator|.
name|writeVLong
argument_list|(
name|primaryGen
argument_list|)
expr_stmt|;
name|c
operator|.
name|out
operator|.
name|writeVInt
argument_list|(
name|tcpPort
argument_list|)
expr_stmt|;
name|SimpleServer
operator|.
name|writeFilesMetaData
argument_list|(
name|c
operator|.
name|out
argument_list|,
name|files
argument_list|)
expr_stmt|;
name|c
operator|.
name|flush
argument_list|()
expr_stmt|;
name|c
operator|.
name|s
operator|.
name|shutdownOutput
argument_list|()
expr_stmt|;
name|message
argument_list|(
literal|"warm connection "
operator|+
name|c
operator|.
name|s
argument_list|)
expr_stmt|;
name|preCopy
operator|.
name|connections
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|message
argument_list|(
literal|"top: ignore exception trying to warm to replica port "
operator|+
name|replicaTCPPort
operator|+
literal|": "
operator|+
name|t
argument_list|)
expr_stmt|;
comment|//t.printStackTrace(System.out);
block|}
block|}
name|long
name|startNS
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
name|long
name|lastWarnNS
init|=
name|startNS
decl_stmt|;
comment|// TODO: maybe ... place some sort of time limit on how long we are willing to wait for slow replicas to finish copying?
while|while
condition|(
name|preCopy
operator|.
name|finished
argument_list|()
operator|==
literal|false
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
throw|throw
operator|new
name|ThreadInterruptedException
argument_list|(
name|ie
argument_list|)
throw|;
block|}
if|if
condition|(
name|isClosed
argument_list|()
condition|)
block|{
name|message
argument_list|(
literal|"top: primary is closing: now cancel segment warming"
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|preCopy
operator|.
name|connections
init|)
block|{
name|IOUtils
operator|.
name|closeWhileHandlingException
argument_list|(
name|preCopy
operator|.
name|connections
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
name|long
name|ns
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
if|if
condition|(
name|ns
operator|-
name|lastWarnNS
operator|>
literal|1000000000L
condition|)
block|{
name|message
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"top: warning: still warming merge "
operator|+
name|info
operator|+
literal|" to "
operator|+
name|preCopy
operator|.
name|connections
operator|.
name|size
argument_list|()
operator|+
literal|" replicas for %.1f sec..."
argument_list|,
operator|(
name|ns
operator|-
name|startNS
operator|)
operator|/
literal|1000000000.0
argument_list|)
argument_list|)
expr_stmt|;
name|lastWarnNS
operator|=
name|ns
expr_stmt|;
block|}
comment|// Process keep-alives:
synchronized|synchronized
init|(
name|preCopy
operator|.
name|connections
init|)
block|{
name|Iterator
argument_list|<
name|Connection
argument_list|>
name|it
init|=
name|preCopy
operator|.
name|connections
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Connection
name|c
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
try|try
block|{
name|long
name|nowNS
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
name|boolean
name|done
init|=
literal|false
decl_stmt|;
while|while
condition|(
name|c
operator|.
name|sockIn
operator|.
name|available
argument_list|()
operator|>
literal|0
condition|)
block|{
name|byte
name|b
init|=
name|c
operator|.
name|in
operator|.
name|readByte
argument_list|()
decl_stmt|;
if|if
condition|(
name|b
operator|==
literal|0
condition|)
block|{
comment|// keep-alive
name|c
operator|.
name|lastKeepAliveNS
operator|=
name|nowNS
expr_stmt|;
name|message
argument_list|(
literal|"keep-alive for socket="
operator|+
name|c
operator|.
name|s
operator|+
literal|" merge files="
operator|+
name|files
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// merge is done pre-copying to this node
if|if
condition|(
name|b
operator|!=
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
name|message
argument_list|(
literal|"connection socket="
operator|+
name|c
operator|.
name|s
operator|+
literal|" is done warming its merge "
operator|+
name|info
operator|+
literal|" files="
operator|+
name|files
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|closeWhileHandlingException
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
name|done
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
comment|// If> 2 sec since we saw a keep-alive, assume this replica is dead:
if|if
condition|(
name|done
operator|==
literal|false
operator|&&
name|nowNS
operator|-
name|c
operator|.
name|lastKeepAliveNS
operator|>
literal|2000000000L
condition|)
block|{
name|message
argument_list|(
literal|"top: warning: replica socket="
operator|+
name|c
operator|.
name|s
operator|+
literal|" for segment="
operator|+
name|info
operator|+
literal|" seems to be dead; closing files="
operator|+
name|files
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|closeWhileHandlingException
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|message
argument_list|(
literal|"top: ignore exception trying to read byte during warm for segment="
operator|+
name|info
operator|+
literal|" to replica socket="
operator|+
name|c
operator|.
name|s
operator|+
literal|": "
operator|+
name|t
operator|+
literal|" files="
operator|+
name|files
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|closeWhileHandlingException
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
finally|finally
block|{
name|warmingSegments
operator|.
name|remove
argument_list|(
name|preCopy
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Flushes all indexing ops to disk and notifies all replicas that they should now copy */
DECL|method|handleFlush
specifier|private
name|void
name|handleFlush
parameter_list|(
name|DataInput
name|topIn
parameter_list|,
name|DataOutput
name|topOut
parameter_list|,
name|BufferedOutputStream
name|bos
parameter_list|)
throws|throws
name|IOException
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setName
argument_list|(
literal|"flush"
argument_list|)
expr_stmt|;
name|int
index|[]
name|replicaTCPPorts
decl_stmt|;
name|int
index|[]
name|replicaIDs
decl_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
name|replicaTCPPorts
operator|=
name|this
operator|.
name|replicaTCPPorts
expr_stmt|;
name|replicaIDs
operator|=
name|this
operator|.
name|replicaIDs
expr_stmt|;
block|}
name|message
argument_list|(
literal|"now flush; "
operator|+
name|replicaIDs
operator|.
name|length
operator|+
literal|" replicas"
argument_list|)
expr_stmt|;
if|if
condition|(
name|flushAndRefresh
argument_list|()
condition|)
block|{
comment|// Something did get flushed (there were indexing ops since the last flush):
comment|// Tell caller the version before pushing to replicas, so that even if we crash after this, caller will know what version we
comment|// (possibly) pushed to some replicas.  Alternatively we could make this 2 separate ops?
name|long
name|version
init|=
name|getCopyStateVersion
argument_list|()
decl_stmt|;
name|message
argument_list|(
literal|"send flushed version="
operator|+
name|version
argument_list|)
expr_stmt|;
name|topOut
operator|.
name|writeLong
argument_list|(
name|version
argument_list|)
expr_stmt|;
name|bos
operator|.
name|flush
argument_list|()
expr_stmt|;
comment|// Notify current replicas:
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|replicaIDs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|int
name|replicaID
init|=
name|replicaIDs
index|[
name|i
index|]
decl_stmt|;
try|try
init|(
name|Connection
name|c
init|=
operator|new
name|Connection
argument_list|(
name|replicaTCPPorts
index|[
name|i
index|]
argument_list|)
init|)
block|{
name|c
operator|.
name|out
operator|.
name|writeByte
argument_list|(
name|SimpleReplicaNode
operator|.
name|CMD_NEW_NRT_POINT
argument_list|)
expr_stmt|;
name|c
operator|.
name|out
operator|.
name|writeVLong
argument_list|(
name|version
argument_list|)
expr_stmt|;
name|c
operator|.
name|out
operator|.
name|writeInt
argument_list|(
name|tcpPort
argument_list|)
expr_stmt|;
name|c
operator|.
name|flush
argument_list|()
expr_stmt|;
comment|// TODO: we should use multicast to broadcast files out to replicas
comment|// TODO: ... replicas could copy from one another instead of just primary
comment|// TODO: we could also prioritize one replica at a time?
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|message
argument_list|(
literal|"top: failed to connect R"
operator|+
name|replicaID
operator|+
literal|" for newNRTPoint; skipping: "
operator|+
name|t
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
comment|// No changes flushed:
name|topOut
operator|.
name|writeLong
argument_list|(
operator|-
name|getCopyStateVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Pushes CopyState on the wire */
DECL|method|writeCopyState
specifier|private
specifier|static
name|void
name|writeCopyState
parameter_list|(
name|CopyState
name|state
parameter_list|,
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
comment|// TODO (opto): we could encode to byte[] once when we created the copyState, and then just send same byts to all replicas...
name|out
operator|.
name|writeVInt
argument_list|(
name|state
operator|.
name|infosBytes
operator|.
name|length
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBytes
argument_list|(
name|state
operator|.
name|infosBytes
argument_list|,
literal|0
argument_list|,
name|state
operator|.
name|infosBytes
operator|.
name|length
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVLong
argument_list|(
name|state
operator|.
name|gen
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVLong
argument_list|(
name|state
operator|.
name|version
argument_list|)
expr_stmt|;
name|SimpleServer
operator|.
name|writeFilesMetaData
argument_list|(
name|out
argument_list|,
name|state
operator|.
name|files
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|state
operator|.
name|completedMergeFiles
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|fileName
range|:
name|state
operator|.
name|completedMergeFiles
control|)
block|{
name|out
operator|.
name|writeString
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|writeVLong
argument_list|(
name|state
operator|.
name|primaryGen
argument_list|)
expr_stmt|;
block|}
comment|/** Called when another node (replica) wants to copy files from us */
DECL|method|handleFetchFiles
specifier|private
name|boolean
name|handleFetchFiles
parameter_list|(
name|Random
name|random
parameter_list|,
name|Socket
name|socket
parameter_list|,
name|DataInput
name|destIn
parameter_list|,
name|DataOutput
name|destOut
parameter_list|,
name|BufferedOutputStream
name|bos
parameter_list|)
throws|throws
name|IOException
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setName
argument_list|(
literal|"send"
argument_list|)
expr_stmt|;
name|int
name|replicaID
init|=
name|destIn
operator|.
name|readVInt
argument_list|()
decl_stmt|;
name|message
argument_list|(
literal|"top: start fetch for R"
operator|+
name|replicaID
operator|+
literal|" socket="
operator|+
name|socket
argument_list|)
expr_stmt|;
name|byte
name|b
init|=
name|destIn
operator|.
name|readByte
argument_list|()
decl_stmt|;
name|CopyState
name|copyState
decl_stmt|;
if|if
condition|(
name|b
operator|==
literal|0
condition|)
block|{
comment|// Caller already has CopyState
name|copyState
operator|=
literal|null
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|b
operator|==
literal|1
condition|)
block|{
comment|// Caller does not have CopyState; we pull the latest one:
name|copyState
operator|=
name|getCopyState
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setName
argument_list|(
literal|"send-R"
operator|+
name|replicaID
operator|+
literal|"-"
operator|+
name|copyState
operator|.
name|version
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Protocol error:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"invalid CopyState byte="
operator|+
name|b
argument_list|)
throw|;
block|}
try|try
block|{
if|if
condition|(
name|copyState
operator|!=
literal|null
condition|)
block|{
comment|// Serialize CopyState on the wire to the client:
name|writeCopyState
argument_list|(
name|copyState
argument_list|,
name|destOut
argument_list|)
expr_stmt|;
name|bos
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
literal|16384
index|]
decl_stmt|;
name|int
name|fileCount
init|=
literal|0
decl_stmt|;
name|long
name|totBytesSent
init|=
literal|0
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|byte
name|done
init|=
name|destIn
operator|.
name|readByte
argument_list|()
decl_stmt|;
if|if
condition|(
name|done
operator|==
literal|1
condition|)
block|{
break|break;
block|}
elseif|else
if|if
condition|(
name|done
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"expected 0 or 1 byte but got "
operator|+
name|done
argument_list|)
throw|;
block|}
comment|// Name of the file the replica wants us to send:
name|String
name|fileName
init|=
name|destIn
operator|.
name|readString
argument_list|()
decl_stmt|;
comment|// Starting offset in the file we should start sending bytes from:
name|long
name|fpStart
init|=
name|destIn
operator|.
name|readVLong
argument_list|()
decl_stmt|;
try|try
init|(
name|IndexInput
name|in
init|=
name|dir
operator|.
name|openInput
argument_list|(
name|fileName
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
init|)
block|{
name|long
name|len
init|=
name|in
operator|.
name|length
argument_list|()
decl_stmt|;
comment|//message("fetch " + fileName + ": send len=" + len);
name|destOut
operator|.
name|writeVLong
argument_list|(
name|len
argument_list|)
expr_stmt|;
name|in
operator|.
name|seek
argument_list|(
name|fpStart
argument_list|)
expr_stmt|;
name|long
name|upto
init|=
name|fpStart
decl_stmt|;
while|while
condition|(
name|upto
operator|<
name|len
condition|)
block|{
name|int
name|chunk
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|min
argument_list|(
name|buffer
operator|.
name|length
argument_list|,
operator|(
name|len
operator|-
name|upto
operator|)
argument_list|)
decl_stmt|;
name|in
operator|.
name|readBytes
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|chunk
argument_list|)
expr_stmt|;
if|if
condition|(
name|TestNRTReplication
operator|.
name|DO_BIT_FLIPS_DURING_COPY
condition|)
block|{
if|if
condition|(
name|random
operator|.
name|nextInt
argument_list|(
literal|3000
argument_list|)
operator|==
literal|17
operator|&&
name|bitFlipped
operator|.
name|contains
argument_list|(
name|fileName
argument_list|)
operator|==
literal|false
condition|)
block|{
name|bitFlipped
operator|.
name|add
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
name|message
argument_list|(
literal|"file "
operator|+
name|fileName
operator|+
literal|" to R"
operator|+
name|replicaID
operator|+
literal|": now randomly flipping a bit at byte="
operator|+
name|upto
argument_list|)
expr_stmt|;
name|int
name|x
init|=
name|random
operator|.
name|nextInt
argument_list|(
name|chunk
argument_list|)
decl_stmt|;
name|int
name|bit
init|=
name|random
operator|.
name|nextInt
argument_list|(
literal|8
argument_list|)
decl_stmt|;
name|buffer
index|[
name|x
index|]
operator|^=
literal|1
operator|<<
name|bit
expr_stmt|;
block|}
block|}
name|destOut
operator|.
name|writeBytes
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|chunk
argument_list|)
expr_stmt|;
name|upto
operator|+=
name|chunk
expr_stmt|;
name|totBytesSent
operator|+=
name|chunk
expr_stmt|;
block|}
block|}
name|fileCount
operator|++
expr_stmt|;
block|}
name|message
argument_list|(
literal|"top: done fetch files for R"
operator|+
name|replicaID
operator|+
literal|": sent "
operator|+
name|fileCount
operator|+
literal|" files; sent "
operator|+
name|totBytesSent
operator|+
literal|" bytes"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|message
argument_list|(
literal|"top: exception during fetch: "
operator|+
name|t
operator|.
name|getMessage
argument_list|()
operator|+
literal|"; now close socket"
argument_list|)
expr_stmt|;
name|socket
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|copyState
operator|!=
literal|null
condition|)
block|{
name|message
argument_list|(
literal|"top: fetch: now release CopyState"
argument_list|)
expr_stmt|;
name|releaseCopyState
argument_list|(
name|copyState
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|true
return|;
block|}
DECL|field|tokenizedWithTermVectors
specifier|static
specifier|final
name|FieldType
name|tokenizedWithTermVectors
decl_stmt|;
static|static
block|{
name|tokenizedWithTermVectors
operator|=
operator|new
name|FieldType
argument_list|(
name|TextField
operator|.
name|TYPE_STORED
argument_list|)
expr_stmt|;
name|tokenizedWithTermVectors
operator|.
name|setIndexOptions
argument_list|(
name|IndexOptions
operator|.
name|DOCS_AND_FREQS_AND_POSITIONS
argument_list|)
expr_stmt|;
name|tokenizedWithTermVectors
operator|.
name|setStoreTermVectors
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|tokenizedWithTermVectors
operator|.
name|setStoreTermVectorOffsets
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|tokenizedWithTermVectors
operator|.
name|setStoreTermVectorPositions
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|handleIndexing
specifier|private
name|void
name|handleIndexing
parameter_list|(
name|Socket
name|socket
parameter_list|,
name|DataInput
name|in
parameter_list|,
name|DataOutput
name|out
parameter_list|,
name|BufferedOutputStream
name|bos
parameter_list|)
throws|throws
name|IOException
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setName
argument_list|(
literal|"indexing"
argument_list|)
expr_stmt|;
name|message
argument_list|(
literal|"start handling indexing socket="
operator|+
name|socket
argument_list|)
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|byte
name|cmd
decl_stmt|;
try|try
block|{
name|cmd
operator|=
name|in
operator|.
name|readByte
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EOFException
name|eofe
parameter_list|)
block|{
comment|// done
return|return;
block|}
comment|//message("INDEXING OP " + cmd);
if|if
condition|(
name|cmd
operator|==
name|CMD_ADD_DOC
condition|)
block|{
name|handleAddDocument
argument_list|(
name|in
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeByte
argument_list|(
operator|(
name|byte
operator|)
literal|1
argument_list|)
expr_stmt|;
name|bos
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cmd
operator|==
name|CMD_UPDATE_DOC
condition|)
block|{
name|handleUpdateDocument
argument_list|(
name|in
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeByte
argument_list|(
operator|(
name|byte
operator|)
literal|1
argument_list|)
expr_stmt|;
name|bos
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cmd
operator|==
name|CMD_DELETE_DOC
condition|)
block|{
name|handleDeleteDocument
argument_list|(
name|in
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeByte
argument_list|(
operator|(
name|byte
operator|)
literal|1
argument_list|)
expr_stmt|;
name|bos
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cmd
operator|==
name|CMD_INDEXING_DONE
condition|)
block|{
name|out
operator|.
name|writeByte
argument_list|(
operator|(
name|byte
operator|)
literal|1
argument_list|)
expr_stmt|;
name|bos
operator|.
name|flush
argument_list|()
expr_stmt|;
break|break;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"cmd must be add, update or delete; got "
operator|+
name|cmd
argument_list|)
throw|;
block|}
block|}
block|}
DECL|method|handleAddDocument
specifier|private
name|void
name|handleAddDocument
parameter_list|(
name|DataInput
name|in
parameter_list|,
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|fieldCount
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fieldCount
condition|;
name|i
operator|++
control|)
block|{
name|String
name|name
init|=
name|in
operator|.
name|readString
argument_list|()
decl_stmt|;
name|String
name|value
init|=
name|in
operator|.
name|readString
argument_list|()
decl_stmt|;
comment|// NOTE: clearly NOT general!
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
literal|"docid"
argument_list|)
operator|||
name|name
operator|.
name|equals
argument_list|(
literal|"marker"
argument_list|)
condition|)
block|{
name|doc
operator|.
name|add
argument_list|(
operator|new
name|StringField
argument_list|(
name|name
argument_list|,
name|value
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
literal|"title"
argument_list|)
condition|)
block|{
name|doc
operator|.
name|add
argument_list|(
operator|new
name|StringField
argument_list|(
literal|"title"
argument_list|,
name|value
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"titleTokenized"
argument_list|,
name|value
argument_list|,
name|tokenizedWithTermVectors
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
literal|"body"
argument_list|)
condition|)
block|{
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"body"
argument_list|,
name|value
argument_list|,
name|tokenizedWithTermVectors
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"unhandled field name "
operator|+
name|name
argument_list|)
throw|;
block|}
block|}
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
DECL|method|handleUpdateDocument
specifier|private
name|void
name|handleUpdateDocument
parameter_list|(
name|DataInput
name|in
parameter_list|,
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|fieldCount
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|String
name|docid
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fieldCount
condition|;
name|i
operator|++
control|)
block|{
name|String
name|name
init|=
name|in
operator|.
name|readString
argument_list|()
decl_stmt|;
name|String
name|value
init|=
name|in
operator|.
name|readString
argument_list|()
decl_stmt|;
comment|// NOTE: clearly NOT general!
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
literal|"docid"
argument_list|)
condition|)
block|{
name|docid
operator|=
name|value
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|StringField
argument_list|(
literal|"docid"
argument_list|,
name|value
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
literal|"marker"
argument_list|)
condition|)
block|{
name|doc
operator|.
name|add
argument_list|(
operator|new
name|StringField
argument_list|(
literal|"marker"
argument_list|,
name|value
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
literal|"title"
argument_list|)
condition|)
block|{
name|doc
operator|.
name|add
argument_list|(
operator|new
name|StringField
argument_list|(
literal|"title"
argument_list|,
name|value
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"titleTokenized"
argument_list|,
name|value
argument_list|,
name|tokenizedWithTermVectors
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
literal|"body"
argument_list|)
condition|)
block|{
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"body"
argument_list|,
name|value
argument_list|,
name|tokenizedWithTermVectors
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"unhandled field name "
operator|+
name|name
argument_list|)
throw|;
block|}
block|}
name|writer
operator|.
name|updateDocument
argument_list|(
operator|new
name|Term
argument_list|(
literal|"docid"
argument_list|,
name|docid
argument_list|)
argument_list|,
name|doc
argument_list|)
expr_stmt|;
block|}
DECL|method|handleDeleteDocument
specifier|private
name|void
name|handleDeleteDocument
parameter_list|(
name|DataInput
name|in
parameter_list|,
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|docid
init|=
name|in
operator|.
name|readString
argument_list|()
decl_stmt|;
name|writer
operator|.
name|deleteDocuments
argument_list|(
operator|new
name|Term
argument_list|(
literal|"docid"
argument_list|,
name|docid
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Sent to primary to cutover new SIS:
DECL|field|CMD_FLUSH
specifier|static
specifier|final
name|byte
name|CMD_FLUSH
init|=
literal|10
decl_stmt|;
comment|// Sent by replica to primary asking to copy a set of files over:
DECL|field|CMD_FETCH_FILES
specifier|static
specifier|final
name|byte
name|CMD_FETCH_FILES
init|=
literal|1
decl_stmt|;
DECL|field|CMD_GET_SEARCHING_VERSION
specifier|static
specifier|final
name|byte
name|CMD_GET_SEARCHING_VERSION
init|=
literal|12
decl_stmt|;
DECL|field|CMD_SEARCH
specifier|static
specifier|final
name|byte
name|CMD_SEARCH
init|=
literal|2
decl_stmt|;
DECL|field|CMD_MARKER_SEARCH
specifier|static
specifier|final
name|byte
name|CMD_MARKER_SEARCH
init|=
literal|3
decl_stmt|;
DECL|field|CMD_COMMIT
specifier|static
specifier|final
name|byte
name|CMD_COMMIT
init|=
literal|4
decl_stmt|;
DECL|field|CMD_CLOSE
specifier|static
specifier|final
name|byte
name|CMD_CLOSE
init|=
literal|5
decl_stmt|;
comment|// Send (to primary) the list of currently running replicas:
DECL|field|CMD_SET_REPLICAS
specifier|static
specifier|final
name|byte
name|CMD_SET_REPLICAS
init|=
literal|16
decl_stmt|;
comment|// Multiple indexing ops
DECL|field|CMD_INDEXING
specifier|static
specifier|final
name|byte
name|CMD_INDEXING
init|=
literal|18
decl_stmt|;
DECL|field|CMD_ADD_DOC
specifier|static
specifier|final
name|byte
name|CMD_ADD_DOC
init|=
literal|6
decl_stmt|;
DECL|field|CMD_UPDATE_DOC
specifier|static
specifier|final
name|byte
name|CMD_UPDATE_DOC
init|=
literal|7
decl_stmt|;
DECL|field|CMD_DELETE_DOC
specifier|static
specifier|final
name|byte
name|CMD_DELETE_DOC
init|=
literal|8
decl_stmt|;
DECL|field|CMD_INDEXING_DONE
specifier|static
specifier|final
name|byte
name|CMD_INDEXING_DONE
init|=
literal|19
decl_stmt|;
comment|// Sent by replica to primary when replica first starts up, so primary can add it to any warming merges:
DECL|field|CMD_NEW_REPLICA
specifier|static
specifier|final
name|byte
name|CMD_NEW_REPLICA
init|=
literal|20
decl_stmt|;
comment|/** Handles incoming request to the naive TCP server wrapping this node */
DECL|method|handleOneConnection
name|void
name|handleOneConnection
parameter_list|(
name|Random
name|random
parameter_list|,
name|ServerSocket
name|ss
parameter_list|,
name|AtomicBoolean
name|stop
parameter_list|,
name|InputStream
name|is
parameter_list|,
name|Socket
name|socket
parameter_list|,
name|DataInput
name|in
parameter_list|,
name|DataOutput
name|out
parameter_list|,
name|BufferedOutputStream
name|bos
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|outer
label|:
while|while
condition|(
literal|true
condition|)
block|{
name|byte
name|cmd
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
name|is
operator|.
name|available
argument_list|()
operator|>
literal|0
condition|)
block|{
break|break;
block|}
if|if
condition|(
name|stop
operator|.
name|get
argument_list|()
condition|)
block|{
return|return;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|cmd
operator|=
name|in
operator|.
name|readByte
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EOFException
name|eofe
parameter_list|)
block|{
break|break;
block|}
switch|switch
condition|(
name|cmd
condition|)
block|{
case|case
name|CMD_FLUSH
case|:
name|handleFlush
argument_list|(
name|in
argument_list|,
name|out
argument_list|,
name|bos
argument_list|)
expr_stmt|;
break|break;
case|case
name|CMD_FETCH_FILES
case|:
comment|// Replica (other node) is asking us (primary node) for files to copy
name|handleFetchFiles
argument_list|(
name|random
argument_list|,
name|socket
argument_list|,
name|in
argument_list|,
name|out
argument_list|,
name|bos
argument_list|)
expr_stmt|;
break|break;
case|case
name|CMD_INDEXING
case|:
name|handleIndexing
argument_list|(
name|socket
argument_list|,
name|in
argument_list|,
name|out
argument_list|,
name|bos
argument_list|)
expr_stmt|;
break|break;
case|case
name|CMD_GET_SEARCHING_VERSION
case|:
name|out
operator|.
name|writeVLong
argument_list|(
name|getCurrentSearchingVersion
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|CMD_SEARCH
case|:
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setName
argument_list|(
literal|"search"
argument_list|)
expr_stmt|;
name|IndexSearcher
name|searcher
init|=
name|mgr
operator|.
name|acquire
argument_list|()
decl_stmt|;
try|try
block|{
name|long
name|version
init|=
operator|(
operator|(
name|DirectoryReader
operator|)
name|searcher
operator|.
name|getIndexReader
argument_list|()
operator|)
operator|.
name|getVersion
argument_list|()
decl_stmt|;
name|int
name|hitCount
init|=
name|searcher
operator|.
name|search
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"body"
argument_list|,
literal|"the"
argument_list|)
argument_list|)
argument_list|,
literal|1
argument_list|)
operator|.
name|totalHits
decl_stmt|;
comment|//message("version=" + version + " searcher=" + searcher);
name|out
operator|.
name|writeVLong
argument_list|(
name|version
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|hitCount
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|mgr
operator|.
name|release
argument_list|(
name|searcher
argument_list|)
expr_stmt|;
block|}
block|}
continue|continue
name|outer
continue|;
case|case
name|CMD_MARKER_SEARCH
case|:
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setName
argument_list|(
literal|"msearch"
argument_list|)
expr_stmt|;
name|IndexSearcher
name|searcher
init|=
name|mgr
operator|.
name|acquire
argument_list|()
decl_stmt|;
try|try
block|{
name|long
name|version
init|=
operator|(
operator|(
name|DirectoryReader
operator|)
name|searcher
operator|.
name|getIndexReader
argument_list|()
operator|)
operator|.
name|getVersion
argument_list|()
decl_stmt|;
name|int
name|hitCount
init|=
name|searcher
operator|.
name|search
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"marker"
argument_list|,
literal|"marker"
argument_list|)
argument_list|)
argument_list|,
literal|1
argument_list|)
operator|.
name|totalHits
decl_stmt|;
name|out
operator|.
name|writeVLong
argument_list|(
name|version
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|hitCount
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|mgr
operator|.
name|release
argument_list|(
name|searcher
argument_list|)
expr_stmt|;
block|}
block|}
continue|continue
name|outer
continue|;
case|case
name|CMD_COMMIT
case|:
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setName
argument_list|(
literal|"commit"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
name|out
operator|.
name|writeByte
argument_list|(
operator|(
name|byte
operator|)
literal|1
argument_list|)
expr_stmt|;
break|break;
case|case
name|CMD_CLOSE
case|:
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setName
argument_list|(
literal|"close"
argument_list|)
expr_stmt|;
name|message
argument_list|(
literal|"top close: now close server socket"
argument_list|)
expr_stmt|;
name|ss
operator|.
name|close
argument_list|()
expr_stmt|;
name|out
operator|.
name|writeByte
argument_list|(
operator|(
name|byte
operator|)
literal|1
argument_list|)
expr_stmt|;
name|message
argument_list|(
literal|"top close: done close server socket"
argument_list|)
expr_stmt|;
break|break;
case|case
name|CMD_SET_REPLICAS
case|:
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setName
argument_list|(
literal|"set repls"
argument_list|)
expr_stmt|;
name|int
name|count
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
name|int
index|[]
name|replicaIDs
init|=
operator|new
name|int
index|[
name|count
index|]
decl_stmt|;
name|int
index|[]
name|replicaTCPPorts
init|=
operator|new
name|int
index|[
name|count
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|replicaIDs
index|[
name|i
index|]
operator|=
name|in
operator|.
name|readVInt
argument_list|()
expr_stmt|;
name|replicaTCPPorts
index|[
name|i
index|]
operator|=
name|in
operator|.
name|readVInt
argument_list|()
expr_stmt|;
block|}
name|out
operator|.
name|writeByte
argument_list|(
operator|(
name|byte
operator|)
literal|1
argument_list|)
expr_stmt|;
name|setReplicas
argument_list|(
name|replicaIDs
argument_list|,
name|replicaTCPPorts
argument_list|)
expr_stmt|;
break|break;
case|case
name|CMD_NEW_REPLICA
case|:
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setName
argument_list|(
literal|"new repl"
argument_list|)
expr_stmt|;
name|int
name|replicaTCPPort
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
name|message
argument_list|(
literal|"new replica: "
operator|+
name|warmingSegments
operator|.
name|size
argument_list|()
operator|+
literal|" current warming merges"
argument_list|)
expr_stmt|;
comment|// Step through all currently warming segments and try to add this replica if it isn't there already:
for|for
control|(
name|MergePreCopy
name|preCopy
range|:
name|warmingSegments
control|)
block|{
name|message
argument_list|(
literal|"warming segment "
operator|+
name|preCopy
operator|.
name|files
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|found
init|=
literal|false
decl_stmt|;
synchronized|synchronized
init|(
name|preCopy
operator|.
name|connections
init|)
block|{
for|for
control|(
name|Connection
name|c
range|:
name|preCopy
operator|.
name|connections
control|)
block|{
if|if
condition|(
name|c
operator|.
name|destTCPPort
operator|==
name|replicaTCPPort
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
name|found
condition|)
block|{
name|message
argument_list|(
literal|"this replica is already warming this segment; skipping"
argument_list|)
expr_stmt|;
comment|// It's possible (maybe) that the replica started up, then a merge kicked off, and it warmed to this new replica, all before the
comment|// replica sent us this command:
continue|continue;
block|}
comment|// OK, this new replica is not already warming this segment, so attempt (could fail) to start warming now:
name|Connection
name|c
init|=
operator|new
name|Connection
argument_list|(
name|replicaTCPPort
argument_list|)
decl_stmt|;
if|if
condition|(
name|preCopy
operator|.
name|tryAddConnection
argument_list|(
name|c
argument_list|)
operator|==
literal|false
condition|)
block|{
comment|// This can happen, if all other replicas just now finished warming this segment, and so we were just a bit too late.  In this
comment|// case the segment will be copied over in the next nrt point sent to this replica
name|message
argument_list|(
literal|"failed to add connection to segment warmer (too late); closing"
argument_list|)
expr_stmt|;
name|c
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|c
operator|.
name|out
operator|.
name|writeByte
argument_list|(
name|SimpleReplicaNode
operator|.
name|CMD_PRE_COPY_MERGE
argument_list|)
expr_stmt|;
name|c
operator|.
name|out
operator|.
name|writeVLong
argument_list|(
name|primaryGen
argument_list|)
expr_stmt|;
name|c
operator|.
name|out
operator|.
name|writeVInt
argument_list|(
name|tcpPort
argument_list|)
expr_stmt|;
name|SimpleServer
operator|.
name|writeFilesMetaData
argument_list|(
name|c
operator|.
name|out
argument_list|,
name|preCopy
operator|.
name|files
argument_list|)
expr_stmt|;
name|c
operator|.
name|flush
argument_list|()
expr_stmt|;
name|c
operator|.
name|s
operator|.
name|shutdownOutput
argument_list|()
expr_stmt|;
name|message
argument_list|(
literal|"successfully started warming"
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"unrecognized cmd="
operator|+
name|cmd
operator|+
literal|" via socket="
operator|+
name|socket
argument_list|)
throw|;
block|}
name|bos
operator|.
name|flush
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
block|}
end_class
end_unit
