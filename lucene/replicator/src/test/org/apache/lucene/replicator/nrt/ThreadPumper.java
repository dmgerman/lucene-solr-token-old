begin_unit
begin_package
DECL|package|org.apache.lucene.replicator.nrt
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|replicator
operator|.
name|nrt
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import
begin_comment
comment|/** A pipe thread. It'd be nice to reuse guava's implementation for this... */
end_comment
begin_class
DECL|class|ThreadPumper
class|class
name|ThreadPumper
block|{
DECL|method|start
specifier|public
specifier|static
name|Thread
name|start
parameter_list|(
specifier|final
name|Runnable
name|onExit
parameter_list|,
specifier|final
name|BufferedReader
name|from
parameter_list|,
specifier|final
name|PrintStream
name|to
parameter_list|,
specifier|final
name|Writer
name|toFile
parameter_list|,
specifier|final
name|AtomicBoolean
name|nodeClosing
parameter_list|)
block|{
name|Thread
name|t
init|=
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|long
name|startTimeNS
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
name|Pattern
name|logTimeStart
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^[0-9\\.]+s .*"
argument_list|)
decl_stmt|;
name|String
name|line
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|from
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|toFile
operator|!=
literal|null
condition|)
block|{
name|toFile
operator|.
name|write
argument_list|(
name|line
argument_list|)
expr_stmt|;
name|toFile
operator|.
name|write
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|toFile
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|logTimeStart
operator|.
name|matcher
argument_list|(
name|line
argument_list|)
operator|.
name|matches
argument_list|()
condition|)
block|{
comment|// Already a well-formed log output:
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TestStressNRTReplication
operator|.
name|message
argument_list|(
name|line
argument_list|,
name|startTimeNS
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|line
operator|.
name|contains
argument_list|(
literal|"now force close server socket after"
argument_list|)
condition|)
block|{
name|nodeClosing
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Sub-process finished
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"ignore IOExc reading from forked process pipe: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|onExit
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
return|return
name|t
return|;
block|}
block|}
end_class
end_unit
