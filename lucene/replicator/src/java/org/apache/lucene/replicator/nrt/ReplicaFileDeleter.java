begin_unit
begin_package
DECL|package|org.apache.lucene.replicator.nrt
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|replicator
operator|.
name|nrt
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|NoSuchFileException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexFileNames
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IOContext
import|;
end_import
begin_comment
comment|// TODO: can we factor/share with IFD: this is doing exactly the same thing, but on the replica side
end_comment
begin_comment
comment|// TODO: once LUCENE-6835 is in, this class becomes a lot simpler?
end_comment
begin_class
DECL|class|ReplicaFileDeleter
class|class
name|ReplicaFileDeleter
block|{
DECL|field|refCounts
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|refCounts
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|pending
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|pending
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|dir
specifier|private
specifier|final
name|Directory
name|dir
decl_stmt|;
DECL|field|node
specifier|private
specifier|final
name|Node
name|node
decl_stmt|;
DECL|method|ReplicaFileDeleter
specifier|public
name|ReplicaFileDeleter
parameter_list|(
name|Node
name|node
parameter_list|,
name|Directory
name|dir
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|dir
operator|=
name|dir
expr_stmt|;
name|this
operator|.
name|node
operator|=
name|node
expr_stmt|;
block|}
comment|/** Used only by asserts: returns true if the file exists    *  (can be opened), false if it cannot be opened, and    *  (unlike Java's File.exists) throws IOException if    *  there's some unexpected error. */
DECL|method|slowFileExists
specifier|static
name|boolean
name|slowFileExists
parameter_list|(
name|Directory
name|dir
parameter_list|,
name|String
name|fileName
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|dir
operator|.
name|openInput
argument_list|(
name|fileName
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchFileException
decl||
name|FileNotFoundException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
DECL|method|incRef
specifier|public
specifier|synchronized
name|void
name|incRef
parameter_list|(
name|Collection
argument_list|<
name|String
argument_list|>
name|fileNames
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|String
name|fileName
range|:
name|fileNames
control|)
block|{
if|if
condition|(
name|pending
operator|.
name|contains
argument_list|(
name|fileName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"cannot incRef file \""
operator|+
name|fileName
operator|+
literal|"\": it is pending delete"
argument_list|)
throw|;
block|}
assert|assert
name|slowFileExists
argument_list|(
name|dir
argument_list|,
name|fileName
argument_list|)
operator|:
literal|"file "
operator|+
name|fileName
operator|+
literal|" does not exist!"
assert|;
name|Integer
name|curCount
init|=
name|refCounts
operator|.
name|get
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
if|if
condition|(
name|curCount
operator|==
literal|null
condition|)
block|{
name|refCounts
operator|.
name|put
argument_list|(
name|fileName
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|refCounts
operator|.
name|put
argument_list|(
name|fileName
argument_list|,
name|curCount
operator|.
name|intValue
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|decRef
specifier|public
specifier|synchronized
name|void
name|decRef
parameter_list|(
name|Collection
argument_list|<
name|String
argument_list|>
name|fileNames
parameter_list|)
block|{
comment|// We don't delete the files immediately when their RC drops to 0; instead, we add to the pending set, and then call deletePending in
comment|// the end:
for|for
control|(
name|String
name|fileName
range|:
name|fileNames
control|)
block|{
name|Integer
name|curCount
init|=
name|refCounts
operator|.
name|get
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
assert|assert
name|curCount
operator|!=
literal|null
operator|:
literal|"fileName="
operator|+
name|fileName
assert|;
assert|assert
name|curCount
operator|.
name|intValue
argument_list|()
operator|>
literal|0
assert|;
if|if
condition|(
name|curCount
operator|.
name|intValue
argument_list|()
operator|==
literal|1
condition|)
block|{
name|refCounts
operator|.
name|remove
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
name|pending
operator|.
name|add
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|refCounts
operator|.
name|put
argument_list|(
name|fileName
argument_list|,
name|curCount
operator|.
name|intValue
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
name|deletePending
argument_list|()
expr_stmt|;
comment|// TODO: this local IR could incRef files here, like we do now with IW ... then we can assert this again:
comment|// we can't assert this, e.g a search can be running when we switch to a new NRT point, holding a previous IndexReader still open for
comment|// a bit:
comment|/*     // We should never attempt deletion of a still-open file:     Set<String> delOpen = ((MockDirectoryWrapper) dir).getOpenDeletedFiles();     if (delOpen.isEmpty() == false) {       node.message("fail: we tried to delete these still-open files: " + delOpen);       throw new AssertionError("we tried to delete these still-open files: " + delOpen);     }     */
block|}
DECL|method|delete
specifier|private
specifier|synchronized
name|boolean
name|delete
parameter_list|(
name|String
name|fileName
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|Node
operator|.
name|VERBOSE_FILES
condition|)
block|{
name|node
operator|.
name|message
argument_list|(
literal|"file "
operator|+
name|fileName
operator|+
literal|": now delete"
argument_list|)
expr_stmt|;
block|}
name|dir
operator|.
name|deleteFile
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
name|pending
operator|.
name|remove
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
decl||
name|NoSuchFileException
name|missing
parameter_list|)
block|{
comment|// This should never happen: we should only be asked to track files that do exist
name|node
operator|.
name|message
argument_list|(
literal|"file "
operator|+
name|fileName
operator|+
literal|": delete failed: "
operator|+
name|missing
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"file "
operator|+
name|fileName
operator|+
literal|": we attempted delete but the file does not exist?"
argument_list|,
name|missing
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
comment|// nocommit remove this retry logic!  it's Directory's job now...
if|if
condition|(
name|Node
operator|.
name|VERBOSE_FILES
condition|)
block|{
name|node
operator|.
name|message
argument_list|(
literal|"file "
operator|+
name|fileName
operator|+
literal|": delete failed: "
operator|+
name|ioe
operator|+
literal|"; will retry later"
argument_list|)
expr_stmt|;
block|}
name|pending
operator|.
name|add
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
DECL|method|getRefCount
specifier|public
specifier|synchronized
name|Integer
name|getRefCount
parameter_list|(
name|String
name|fileName
parameter_list|)
block|{
return|return
name|refCounts
operator|.
name|get
argument_list|(
name|fileName
argument_list|)
return|;
block|}
DECL|method|isPending
specifier|public
specifier|synchronized
name|boolean
name|isPending
parameter_list|(
name|String
name|fileName
parameter_list|)
block|{
return|return
name|pending
operator|.
name|contains
argument_list|(
name|fileName
argument_list|)
return|;
block|}
DECL|method|deletePending
specifier|public
specifier|synchronized
name|void
name|deletePending
parameter_list|()
block|{
if|if
condition|(
name|Node
operator|.
name|VERBOSE_FILES
condition|)
block|{
name|node
operator|.
name|message
argument_list|(
literal|"now deletePending: "
operator|+
name|pending
operator|.
name|size
argument_list|()
operator|+
literal|" files to try: "
operator|+
name|pending
argument_list|)
expr_stmt|;
block|}
comment|// Clone the set because it will change as we iterate:
name|List
argument_list|<
name|String
argument_list|>
name|toDelete
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|pending
argument_list|)
decl_stmt|;
comment|// First pass: delete any segments_N files.  We do these first to be certain stale commit points are removed
comment|// before we remove any files they reference.  If any delete of segments_N fails, we leave all other files
comment|// undeleted so index is never in a corrupt state:
for|for
control|(
name|String
name|fileName
range|:
name|toDelete
control|)
block|{
name|Integer
name|rc
init|=
name|refCounts
operator|.
name|get
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
if|if
condition|(
name|rc
operator|!=
literal|null
operator|&&
name|rc
operator|>
literal|0
condition|)
block|{
comment|// Should never happen!  This means we are about to pending-delete a referenced index file
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"file \""
operator|+
name|fileName
operator|+
literal|"\" is in pending delete set but has non-zero refCount="
operator|+
name|rc
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|fileName
operator|.
name|startsWith
argument_list|(
name|IndexFileNames
operator|.
name|SEGMENTS
argument_list|)
condition|)
block|{
if|if
condition|(
name|delete
argument_list|(
name|fileName
argument_list|)
operator|==
literal|false
condition|)
block|{
if|if
condition|(
name|Node
operator|.
name|VERBOSE_FILES
condition|)
block|{
name|node
operator|.
name|message
argument_list|(
literal|"failed to remove commit point \""
operator|+
name|fileName
operator|+
literal|"\"; skipping deletion of all other pending files"
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
block|}
block|}
comment|// Only delete other files if we were able to remove the segments_N files; this way we never
comment|// leave a corrupt commit in the index even in the presense of virus checkers:
for|for
control|(
name|String
name|fileName
range|:
name|toDelete
control|)
block|{
if|if
condition|(
name|fileName
operator|.
name|startsWith
argument_list|(
name|IndexFileNames
operator|.
name|SEGMENTS
argument_list|)
operator|==
literal|false
condition|)
block|{
name|delete
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
block|}
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|copy
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|pending
argument_list|)
decl_stmt|;
name|pending
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|fileName
range|:
name|copy
control|)
block|{
name|delete
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Necessary in case we had tried to delete this fileName before, it failed, but then it was later overwritten (because primary changed    *  and new primary didn't know this segment name had been previously attempted) and now has> 0 refCount */
DECL|method|clearPending
specifier|public
specifier|synchronized
name|void
name|clearPending
parameter_list|(
name|Collection
argument_list|<
name|String
argument_list|>
name|fileNames
parameter_list|)
block|{
for|for
control|(
name|String
name|fileName
range|:
name|fileNames
control|)
block|{
if|if
condition|(
name|pending
operator|.
name|remove
argument_list|(
name|fileName
argument_list|)
condition|)
block|{
name|node
operator|.
name|message
argument_list|(
literal|"file "
operator|+
name|fileName
operator|+
literal|": deleter.clearPending now clear from pending"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|deleteIfNoRef
specifier|public
specifier|synchronized
name|void
name|deleteIfNoRef
parameter_list|(
name|String
name|fileName
parameter_list|)
block|{
if|if
condition|(
name|refCounts
operator|.
name|containsKey
argument_list|(
name|fileName
argument_list|)
operator|==
literal|false
condition|)
block|{
name|deleteNewFile
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|deleteNewFile
specifier|public
specifier|synchronized
name|void
name|deleteNewFile
parameter_list|(
name|String
name|fileName
parameter_list|)
block|{
name|delete
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
block|}
DECL|method|getPending
specifier|public
specifier|synchronized
name|Set
argument_list|<
name|String
argument_list|>
name|getPending
parameter_list|()
block|{
return|return
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|pending
argument_list|)
return|;
block|}
DECL|method|deleteUnknownFiles
specifier|public
specifier|synchronized
name|void
name|deleteUnknownFiles
parameter_list|(
name|String
name|segmentsFileName
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|String
name|fileName
range|:
name|dir
operator|.
name|listAll
argument_list|()
control|)
block|{
if|if
condition|(
name|refCounts
operator|.
name|containsKey
argument_list|(
name|fileName
argument_list|)
operator|==
literal|false
operator|&&
name|fileName
operator|.
name|equals
argument_list|(
literal|"write.lock"
argument_list|)
operator|==
literal|false
operator|&&
name|fileName
operator|.
name|equals
argument_list|(
name|segmentsFileName
argument_list|)
operator|==
literal|false
condition|)
block|{
name|node
operator|.
name|message
argument_list|(
literal|"will delete unknown file \""
operator|+
name|fileName
operator|+
literal|"\""
argument_list|)
expr_stmt|;
name|pending
operator|.
name|add
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
block|}
block|}
name|deletePending
argument_list|()
expr_stmt|;
block|}
block|}
end_class
end_unit
