begin_unit
begin_package
DECL|package|org.apache.lucene.replicator
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|replicator
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|replicator
operator|.
name|ReplicationClient
operator|.
name|SourceDirectoryFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|FSDirectory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import
begin_comment
comment|/**  * A {@link SourceDirectoryFactory} which returns {@link FSDirectory} under a  * dedicated session directory. When a session is over, the entire directory is  * deleted.  *   * @lucene.experimental  */
end_comment
begin_class
DECL|class|PerSessionDirectoryFactory
specifier|public
class|class
name|PerSessionDirectoryFactory
implements|implements
name|SourceDirectoryFactory
block|{
DECL|field|workDir
specifier|private
specifier|final
name|File
name|workDir
decl_stmt|;
comment|/** Constructor with the given sources mapping. */
DECL|method|PerSessionDirectoryFactory
specifier|public
name|PerSessionDirectoryFactory
parameter_list|(
name|File
name|workDir
parameter_list|)
block|{
name|this
operator|.
name|workDir
operator|=
name|workDir
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getDirectory
specifier|public
name|Directory
name|getDirectory
parameter_list|(
name|String
name|sessionID
parameter_list|,
name|String
name|source
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|sessionDir
init|=
operator|new
name|File
argument_list|(
name|workDir
argument_list|,
name|sessionID
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|sessionDir
operator|.
name|exists
argument_list|()
operator|&&
operator|!
name|sessionDir
operator|.
name|mkdirs
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"failed to create session directory "
operator|+
name|sessionDir
argument_list|)
throw|;
block|}
name|File
name|sourceDir
init|=
operator|new
name|File
argument_list|(
name|sessionDir
argument_list|,
name|source
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|sourceDir
operator|.
name|mkdirs
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"failed to create source directory "
operator|+
name|sourceDir
argument_list|)
throw|;
block|}
return|return
name|FSDirectory
operator|.
name|open
argument_list|(
name|sourceDir
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|cleanupSession
specifier|public
name|void
name|cleanupSession
parameter_list|(
name|String
name|sessionID
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|sessionID
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// protect against deleting workDir entirely!
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"sessionID cannot be empty"
argument_list|)
throw|;
block|}
name|IOUtils
operator|.
name|rm
argument_list|(
operator|new
name|File
argument_list|(
name|workDir
argument_list|,
name|sessionID
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
