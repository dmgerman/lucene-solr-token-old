begin_unit
begin_package
DECL|package|org.apache.lucene.replicator.nrt
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|replicator
operator|.
name|nrt
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DirectoryReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReaderContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SegmentInfos
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|StandardDirectoryReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|ReferenceManager
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|SearcherFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|SearcherManager
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|ThreadInterruptedException
import|;
end_import
begin_comment
comment|/** A SearcherManager that refreshes via an externally provided (NRT) SegmentInfos, either from {@link IndexWriter} or via  *  nrt replication to another index. */
end_comment
begin_class
DECL|class|SegmentInfosSearcherManager
class|class
name|SegmentInfosSearcherManager
extends|extends
name|ReferenceManager
argument_list|<
name|IndexSearcher
argument_list|>
block|{
DECL|field|currentInfos
specifier|private
specifier|volatile
name|SegmentInfos
name|currentInfos
decl_stmt|;
DECL|field|dir
specifier|private
specifier|final
name|Directory
name|dir
decl_stmt|;
DECL|field|node
specifier|private
specifier|final
name|Node
name|node
decl_stmt|;
DECL|field|openReaderCount
specifier|private
specifier|final
name|AtomicInteger
name|openReaderCount
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
DECL|field|searcherFactory
specifier|private
specifier|final
name|SearcherFactory
name|searcherFactory
decl_stmt|;
DECL|method|SegmentInfosSearcherManager
specifier|public
name|SegmentInfosSearcherManager
parameter_list|(
name|Directory
name|dir
parameter_list|,
name|Node
name|node
parameter_list|,
name|SegmentInfos
name|infosIn
parameter_list|,
name|SearcherFactory
name|searcherFactory
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|dir
operator|=
name|dir
expr_stmt|;
name|this
operator|.
name|node
operator|=
name|node
expr_stmt|;
if|if
condition|(
name|searcherFactory
operator|==
literal|null
condition|)
block|{
name|searcherFactory
operator|=
operator|new
name|SearcherFactory
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|searcherFactory
operator|=
name|searcherFactory
expr_stmt|;
name|currentInfos
operator|=
name|infosIn
expr_stmt|;
name|node
operator|.
name|message
argument_list|(
literal|"SegmentInfosSearcherManager.init: use incoming infos="
operator|+
name|infosIn
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|current
operator|=
name|SearcherManager
operator|.
name|getSearcher
argument_list|(
name|searcherFactory
argument_list|,
name|StandardDirectoryReader
operator|.
name|open
argument_list|(
name|dir
argument_list|,
name|currentInfos
argument_list|,
literal|null
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addReaderClosedListener
argument_list|(
name|current
operator|.
name|getIndexReader
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getRefCount
specifier|protected
name|int
name|getRefCount
parameter_list|(
name|IndexSearcher
name|s
parameter_list|)
block|{
return|return
name|s
operator|.
name|getIndexReader
argument_list|()
operator|.
name|getRefCount
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|tryIncRef
specifier|protected
name|boolean
name|tryIncRef
parameter_list|(
name|IndexSearcher
name|s
parameter_list|)
block|{
return|return
name|s
operator|.
name|getIndexReader
argument_list|()
operator|.
name|tryIncRef
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|decRef
specifier|protected
name|void
name|decRef
parameter_list|(
name|IndexSearcher
name|s
parameter_list|)
throws|throws
name|IOException
block|{
name|s
operator|.
name|getIndexReader
argument_list|()
operator|.
name|decRef
argument_list|()
expr_stmt|;
block|}
DECL|method|getCurrentInfos
specifier|public
name|SegmentInfos
name|getCurrentInfos
parameter_list|()
block|{
return|return
name|currentInfos
return|;
block|}
comment|/** Switch to new segments, refreshing if necessary.  Note that it's the caller job to ensure there's a held refCount for the    *  incoming infos, so all files exist. */
DECL|method|setCurrentInfos
specifier|public
name|void
name|setCurrentInfos
parameter_list|(
name|SegmentInfos
name|infos
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|currentInfos
operator|!=
literal|null
condition|)
block|{
comment|// So that if we commit, we will go to the next
comment|// (unwritten so far) generation:
name|infos
operator|.
name|updateGeneration
argument_list|(
name|currentInfos
argument_list|)
expr_stmt|;
name|node
operator|.
name|message
argument_list|(
literal|"mgr.setCurrentInfos: carry over infos gen="
operator|+
name|infos
operator|.
name|getSegmentsFileName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|currentInfos
operator|=
name|infos
expr_stmt|;
name|maybeRefresh
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|refreshIfNeeded
specifier|protected
name|IndexSearcher
name|refreshIfNeeded
parameter_list|(
name|IndexSearcher
name|old
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|LeafReader
argument_list|>
name|subs
decl_stmt|;
if|if
condition|(
name|old
operator|==
literal|null
condition|)
block|{
name|subs
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|subs
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
for|for
control|(
name|LeafReaderContext
name|ctx
range|:
name|old
operator|.
name|getIndexReader
argument_list|()
operator|.
name|leaves
argument_list|()
control|)
block|{
name|subs
operator|.
name|add
argument_list|(
name|ctx
operator|.
name|reader
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Open a new reader, sharing any common segment readers with the old one:
name|DirectoryReader
name|r
init|=
name|StandardDirectoryReader
operator|.
name|open
argument_list|(
name|dir
argument_list|,
name|currentInfos
argument_list|,
name|subs
argument_list|)
decl_stmt|;
name|addReaderClosedListener
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|node
operator|.
name|message
argument_list|(
literal|"refreshed to version="
operator|+
name|currentInfos
operator|.
name|getVersion
argument_list|()
operator|+
literal|" r="
operator|+
name|r
argument_list|)
expr_stmt|;
return|return
name|SearcherManager
operator|.
name|getSearcher
argument_list|(
name|searcherFactory
argument_list|,
name|r
argument_list|,
operator|(
name|DirectoryReader
operator|)
name|old
operator|.
name|getIndexReader
argument_list|()
argument_list|)
return|;
block|}
DECL|method|addReaderClosedListener
specifier|private
name|void
name|addReaderClosedListener
parameter_list|(
name|IndexReader
name|r
parameter_list|)
block|{
name|openReaderCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|r
operator|.
name|addReaderClosedListener
argument_list|(
operator|new
name|IndexReader
operator|.
name|ReaderClosedListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClose
parameter_list|(
name|IndexReader
name|reader
parameter_list|)
block|{
name|onReaderClosed
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/** Tracks how many readers are still open, so that when we are closed,    *  we can additionally wait until all in-flight searchers are    *  closed. */
DECL|method|onReaderClosed
specifier|synchronized
name|void
name|onReaderClosed
parameter_list|()
block|{
if|if
condition|(
name|openReaderCount
operator|.
name|decrementAndGet
argument_list|()
operator|==
literal|0
condition|)
block|{
name|notifyAll
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class
end_unit
