begin_unit
begin_package
DECL|package|org.apache.lucene.replicator
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|replicator
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Lock
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantLock
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|AlreadyClosedException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IOContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexOutput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|InfoStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|ThreadInterruptedException
import|;
end_import
begin_comment
comment|/**  * A client which monitors and obtains new revisions from a {@link Replicator}.  * It can be used to either periodically check for updates by invoking  * {@link #startUpdateThread}, or manually by calling {@link #updateNow()}.  *<p>  * Whenever a new revision is available, the {@link #requiredFiles(Map)} are  * copied to the {@link Directory} specified by {@link PerSessionDirectoryFactory} and  * a handler is notified.  *   * @lucene.experimental  */
end_comment
begin_class
DECL|class|ReplicationClient
specifier|public
class|class
name|ReplicationClient
implements|implements
name|Closeable
block|{
DECL|class|ReplicationThread
specifier|private
class|class
name|ReplicationThread
extends|extends
name|Thread
block|{
DECL|field|interval
specifier|private
specifier|final
name|long
name|interval
decl_stmt|;
comment|// client uses this to stop us
DECL|field|stop
specifier|final
name|CountDownLatch
name|stop
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
DECL|method|ReplicationThread
specifier|public
name|ReplicationThread
parameter_list|(
name|long
name|interval
parameter_list|)
block|{
name|this
operator|.
name|interval
operator|=
name|interval
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"synthetic-access"
argument_list|)
annotation|@
name|Override
DECL|method|run
specifier|public
name|void
name|run
parameter_list|()
block|{
while|while
condition|(
literal|true
condition|)
block|{
name|long
name|time
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|updateLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|doUpdate
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|handleUpdateException
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|updateLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
name|time
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|time
expr_stmt|;
comment|// adjust timeout to compensate the time spent doing the replication.
specifier|final
name|long
name|timeout
init|=
name|interval
operator|-
name|time
decl_stmt|;
if|if
condition|(
name|timeout
operator|>
literal|0
condition|)
block|{
try|try
block|{
comment|// this will return immediately if we were ordered to stop (count=0)
comment|// or the timeout has elapsed. if it returns true, it means count=0,
comment|// so terminate.
if|if
condition|(
name|stop
operator|.
name|await
argument_list|(
name|timeout
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
condition|)
block|{
return|return;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// if we were interruted, somebody wants to terminate us, so just
comment|// throw the exception further.
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|ThreadInterruptedException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
block|}
block|}
comment|/** Handler for revisions obtained by the client. */
DECL|interface|ReplicationHandler
specifier|public
specifier|static
interface|interface
name|ReplicationHandler
block|{
comment|/** Returns the current revision files held by the handler. */
DECL|method|currentRevisionFiles
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|RevisionFile
argument_list|>
argument_list|>
name|currentRevisionFiles
parameter_list|()
function_decl|;
comment|/** Returns the current revision version held by the handler. */
DECL|method|currentVersion
specifier|public
name|String
name|currentVersion
parameter_list|()
function_decl|;
comment|/**      * Called when a new revision was obtained and is available (i.e. all needed      * files were successfully copied).      *       * @param version      *          the version of the {@link Revision} that was copied      * @param revisionFiles      *          the files contained by this {@link Revision}      * @param copiedFiles      *          the files that were actually copied      * @param sourceDirectory      *          a mapping from a source of files to the {@link Directory} they      *          were copied into      */
DECL|method|revisionReady
specifier|public
name|void
name|revisionReady
parameter_list|(
name|String
name|version
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|RevisionFile
argument_list|>
argument_list|>
name|revisionFiles
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|copiedFiles
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Directory
argument_list|>
name|sourceDirectory
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
comment|/**    * Resolves a session and source into a {@link Directory} to use for copying    * the session files to.    */
DECL|interface|SourceDirectoryFactory
specifier|public
specifier|static
interface|interface
name|SourceDirectoryFactory
block|{
comment|/**      * Called to denote that the replication actions for this session were finished and the directory is no longer needed.       */
DECL|method|cleanupSession
specifier|public
name|void
name|cleanupSession
parameter_list|(
name|String
name|sessionID
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**      * Returns the {@link Directory} to use for the given session and source.      * Implementations may e.g. return different directories for different      * sessions, or the same directory for all sessions. In that case, it is      * advised to clean the directory before it is used for a new session.      *       * @see #cleanupSession(String)      */
DECL|method|getDirectory
specifier|public
name|Directory
name|getDirectory
parameter_list|(
name|String
name|sessionID
parameter_list|,
name|String
name|source
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
comment|/** The component name to use with {@link InfoStream#isEnabled(String)}. */
DECL|field|INFO_STREAM_COMPONENT
specifier|public
specifier|static
specifier|final
name|String
name|INFO_STREAM_COMPONENT
init|=
literal|"ReplicationThread"
decl_stmt|;
DECL|field|replicator
specifier|private
specifier|final
name|Replicator
name|replicator
decl_stmt|;
DECL|field|handler
specifier|private
specifier|final
name|ReplicationHandler
name|handler
decl_stmt|;
DECL|field|factory
specifier|private
specifier|final
name|SourceDirectoryFactory
name|factory
decl_stmt|;
DECL|field|copyBuffer
specifier|private
specifier|final
name|byte
index|[]
name|copyBuffer
init|=
operator|new
name|byte
index|[
literal|16384
index|]
decl_stmt|;
DECL|field|updateLock
specifier|private
specifier|final
name|Lock
name|updateLock
init|=
operator|new
name|ReentrantLock
argument_list|()
decl_stmt|;
DECL|field|updateThread
specifier|private
specifier|volatile
name|ReplicationThread
name|updateThread
decl_stmt|;
DECL|field|closed
specifier|private
specifier|volatile
name|boolean
name|closed
init|=
literal|false
decl_stmt|;
DECL|field|infoStream
specifier|private
specifier|volatile
name|InfoStream
name|infoStream
init|=
name|InfoStream
operator|.
name|getDefault
argument_list|()
decl_stmt|;
comment|/**    * Constructor.    *     * @param replicator the {@link Replicator} used for checking for updates    * @param handler notified when new revisions are ready    * @param factory returns a {@link Directory} for a given source and session     */
DECL|method|ReplicationClient
specifier|public
name|ReplicationClient
parameter_list|(
name|Replicator
name|replicator
parameter_list|,
name|ReplicationHandler
name|handler
parameter_list|,
name|SourceDirectoryFactory
name|factory
parameter_list|)
block|{
name|this
operator|.
name|replicator
operator|=
name|replicator
expr_stmt|;
name|this
operator|.
name|handler
operator|=
name|handler
expr_stmt|;
name|this
operator|.
name|factory
operator|=
name|factory
expr_stmt|;
block|}
DECL|method|copyBytes
specifier|private
name|void
name|copyBytes
parameter_list|(
name|IndexOutput
name|out
parameter_list|,
name|InputStream
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|numBytes
decl_stmt|;
while|while
condition|(
operator|(
name|numBytes
operator|=
name|in
operator|.
name|read
argument_list|(
name|copyBuffer
argument_list|)
operator|)
operator|>
literal|0
condition|)
block|{
name|out
operator|.
name|writeBytes
argument_list|(
name|copyBuffer
argument_list|,
literal|0
argument_list|,
name|numBytes
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|doUpdate
specifier|private
name|void
name|doUpdate
parameter_list|()
throws|throws
name|IOException
block|{
name|SessionToken
name|session
init|=
literal|null
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Directory
argument_list|>
name|sourceDirectory
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|copiedFiles
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|boolean
name|notify
init|=
literal|false
decl_stmt|;
try|try
block|{
specifier|final
name|String
name|version
init|=
name|handler
operator|.
name|currentVersion
argument_list|()
decl_stmt|;
name|session
operator|=
name|replicator
operator|.
name|checkForUpdate
argument_list|(
name|version
argument_list|)
expr_stmt|;
if|if
condition|(
name|infoStream
operator|.
name|isEnabled
argument_list|(
name|INFO_STREAM_COMPONENT
argument_list|)
condition|)
block|{
name|infoStream
operator|.
name|message
argument_list|(
name|INFO_STREAM_COMPONENT
argument_list|,
literal|"doUpdate(): handlerVersion="
operator|+
name|version
operator|+
literal|" session="
operator|+
name|session
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|session
operator|==
literal|null
condition|)
block|{
comment|// already up to date
return|return;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|RevisionFile
argument_list|>
argument_list|>
name|requiredFiles
init|=
name|requiredFiles
argument_list|(
name|session
operator|.
name|sourceFiles
argument_list|)
decl_stmt|;
if|if
condition|(
name|infoStream
operator|.
name|isEnabled
argument_list|(
name|INFO_STREAM_COMPONENT
argument_list|)
condition|)
block|{
name|infoStream
operator|.
name|message
argument_list|(
name|INFO_STREAM_COMPONENT
argument_list|,
literal|"doUpdate(): requiredFiles="
operator|+
name|requiredFiles
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|RevisionFile
argument_list|>
argument_list|>
name|e
range|:
name|requiredFiles
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|source
init|=
name|e
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Directory
name|dir
init|=
name|factory
operator|.
name|getDirectory
argument_list|(
name|session
operator|.
name|id
argument_list|,
name|source
argument_list|)
decl_stmt|;
name|sourceDirectory
operator|.
name|put
argument_list|(
name|source
argument_list|,
name|dir
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|cpFiles
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|copiedFiles
operator|.
name|put
argument_list|(
name|source
argument_list|,
name|cpFiles
argument_list|)
expr_stmt|;
for|for
control|(
name|RevisionFile
name|file
range|:
name|e
operator|.
name|getValue
argument_list|()
control|)
block|{
if|if
condition|(
name|closed
condition|)
block|{
comment|// if we're closed, abort file copy
if|if
condition|(
name|infoStream
operator|.
name|isEnabled
argument_list|(
name|INFO_STREAM_COMPONENT
argument_list|)
condition|)
block|{
name|infoStream
operator|.
name|message
argument_list|(
name|INFO_STREAM_COMPONENT
argument_list|,
literal|"doUpdate(): detected client was closed); abort file copy"
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
name|InputStream
name|in
init|=
literal|null
decl_stmt|;
name|IndexOutput
name|out
init|=
literal|null
decl_stmt|;
try|try
block|{
name|in
operator|=
name|replicator
operator|.
name|obtainFile
argument_list|(
name|session
operator|.
name|id
argument_list|,
name|source
argument_list|,
name|file
operator|.
name|fileName
argument_list|)
expr_stmt|;
name|out
operator|=
name|dir
operator|.
name|createOutput
argument_list|(
name|file
operator|.
name|fileName
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
name|copyBytes
argument_list|(
name|out
argument_list|,
name|in
argument_list|)
expr_stmt|;
name|cpFiles
operator|.
name|add
argument_list|(
name|file
operator|.
name|fileName
argument_list|)
expr_stmt|;
comment|// TODO add some validation, on size / checksum
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|close
argument_list|(
name|in
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// only notify if all required files were successfully obtained.
name|notify
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|session
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|replicator
operator|.
name|release
argument_list|(
name|session
operator|.
name|id
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|notify
condition|)
block|{
comment|// cleanup after ourselves
name|IOUtils
operator|.
name|close
argument_list|(
name|sourceDirectory
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
name|factory
operator|.
name|cleanupSession
argument_list|(
name|session
operator|.
name|id
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|// notify outside the try-finally above, so the session is released sooner.
comment|// the handler may take time to finish acting on the copied files, but the
comment|// session itself is no longer needed.
try|try
block|{
if|if
condition|(
name|notify
operator|&&
operator|!
name|closed
condition|)
block|{
comment|// no use to notify if we are closed already
name|handler
operator|.
name|revisionReady
argument_list|(
name|session
operator|.
name|version
argument_list|,
name|session
operator|.
name|sourceFiles
argument_list|,
name|copiedFiles
argument_list|,
name|sourceDirectory
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|close
argument_list|(
name|sourceDirectory
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|session
operator|!=
literal|null
condition|)
block|{
name|factory
operator|.
name|cleanupSession
argument_list|(
name|session
operator|.
name|id
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/** Throws {@link AlreadyClosedException} if the client has already been closed. */
DECL|method|ensureOpen
specifier|protected
specifier|final
name|void
name|ensureOpen
parameter_list|()
block|{
if|if
condition|(
name|closed
condition|)
block|{
throw|throw
operator|new
name|AlreadyClosedException
argument_list|(
literal|"this update client has already been closed"
argument_list|)
throw|;
block|}
block|}
comment|/**    * Called when an exception is hit by the replication thread. The default    * implementation prints the full stacktrace to the {@link InfoStream} set in    * {@link #setInfoStream(InfoStream)}, or the {@link InfoStream#getDefault()    * default} one. You can override to log the exception elswhere.    *<p>    *<b>NOTE:</b> if you override this method to throw the exception further,    * the replication thread will be terminated. The only way to restart it is to    * call {@link #stopUpdateThread()} followed by    * {@link #startUpdateThread(long, String)}.    */
DECL|method|handleUpdateException
specifier|protected
name|void
name|handleUpdateException
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
specifier|final
name|StringWriter
name|sw
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|t
operator|.
name|printStackTrace
argument_list|(
operator|new
name|PrintWriter
argument_list|(
name|sw
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|infoStream
operator|.
name|isEnabled
argument_list|(
name|INFO_STREAM_COMPONENT
argument_list|)
condition|)
block|{
name|infoStream
operator|.
name|message
argument_list|(
name|INFO_STREAM_COMPONENT
argument_list|,
literal|"an error occurred during revision update: "
operator|+
name|sw
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Returns the files required for replication. By default, this method returns    * all files that exist in the new revision, but not in the handler.    */
DECL|method|requiredFiles
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|RevisionFile
argument_list|>
argument_list|>
name|requiredFiles
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|RevisionFile
argument_list|>
argument_list|>
name|newRevisionFiles
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|RevisionFile
argument_list|>
argument_list|>
name|handlerRevisionFiles
init|=
name|handler
operator|.
name|currentRevisionFiles
argument_list|()
decl_stmt|;
if|if
condition|(
name|handlerRevisionFiles
operator|==
literal|null
condition|)
block|{
return|return
name|newRevisionFiles
return|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|RevisionFile
argument_list|>
argument_list|>
name|requiredFiles
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|RevisionFile
argument_list|>
argument_list|>
name|e
range|:
name|handlerRevisionFiles
operator|.
name|entrySet
argument_list|()
control|)
block|{
comment|// put the handler files in a Set, for faster contains() checks later
name|Set
argument_list|<
name|String
argument_list|>
name|handlerFiles
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|RevisionFile
name|file
range|:
name|e
operator|.
name|getValue
argument_list|()
control|)
block|{
name|handlerFiles
operator|.
name|add
argument_list|(
name|file
operator|.
name|fileName
argument_list|)
expr_stmt|;
block|}
comment|// make sure to preserve revisionFiles order
name|ArrayList
argument_list|<
name|RevisionFile
argument_list|>
name|res
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|String
name|source
init|=
name|e
operator|.
name|getKey
argument_list|()
decl_stmt|;
assert|assert
name|newRevisionFiles
operator|.
name|containsKey
argument_list|(
name|source
argument_list|)
operator|:
literal|"source not found in newRevisionFiles: "
operator|+
name|newRevisionFiles
assert|;
for|for
control|(
name|RevisionFile
name|file
range|:
name|newRevisionFiles
operator|.
name|get
argument_list|(
name|source
argument_list|)
control|)
block|{
if|if
condition|(
operator|!
name|handlerFiles
operator|.
name|contains
argument_list|(
name|file
operator|.
name|fileName
argument_list|)
condition|)
block|{
name|res
operator|.
name|add
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
block|}
name|requiredFiles
operator|.
name|put
argument_list|(
name|source
argument_list|,
name|res
argument_list|)
expr_stmt|;
block|}
return|return
name|requiredFiles
return|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
specifier|synchronized
name|void
name|close
parameter_list|()
block|{
if|if
condition|(
operator|!
name|closed
condition|)
block|{
name|stopUpdateThread
argument_list|()
expr_stmt|;
name|closed
operator|=
literal|true
expr_stmt|;
block|}
block|}
comment|/**    * Start the update thread with the specified interval in milliseconds. For    * debugging purposes, you can optionally set the name to set on    * {@link Thread#setName(String)}. If you pass {@code null}, a default name    * will be set.    *     * @throws IllegalStateException if the thread has already been started    */
DECL|method|startUpdateThread
specifier|public
specifier|synchronized
name|void
name|startUpdateThread
parameter_list|(
name|long
name|intervalMillis
parameter_list|,
name|String
name|threadName
parameter_list|)
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
if|if
condition|(
name|updateThread
operator|!=
literal|null
operator|&&
name|updateThread
operator|.
name|isAlive
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"cannot start an update thread when one is running, must first call 'stopUpdateThread()'"
argument_list|)
throw|;
block|}
name|threadName
operator|=
name|threadName
operator|==
literal|null
condition|?
name|INFO_STREAM_COMPONENT
else|:
literal|"ReplicationThread-"
operator|+
name|threadName
expr_stmt|;
name|updateThread
operator|=
operator|new
name|ReplicationThread
argument_list|(
name|intervalMillis
argument_list|)
expr_stmt|;
name|updateThread
operator|.
name|setName
argument_list|(
name|threadName
argument_list|)
expr_stmt|;
name|updateThread
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// we rely on isAlive to return true in isUpdateThreadAlive, assert to be on the safe side
assert|assert
name|updateThread
operator|.
name|isAlive
argument_list|()
operator|:
literal|"updateThread started but not alive?"
assert|;
block|}
comment|/**    * Stop the update thread. If the update thread is not running, silently does    * nothing. This method returns after the update thread has stopped.    */
DECL|method|stopUpdateThread
specifier|public
specifier|synchronized
name|void
name|stopUpdateThread
parameter_list|()
block|{
if|if
condition|(
name|updateThread
operator|!=
literal|null
condition|)
block|{
comment|// this will trigger the thread to terminate if it awaits the lock.
comment|// otherwise, if it's in the middle of replication, we wait for it to
comment|// stop.
name|updateThread
operator|.
name|stop
operator|.
name|countDown
argument_list|()
expr_stmt|;
try|try
block|{
name|updateThread
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|ThreadInterruptedException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|updateThread
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**    * Returns true if the update thread is alive. The update thread is alive if    * it has been {@link #startUpdateThread(long, String) started} and not    * {@link #stopUpdateThread() stopped}, as well as didn't hit an error which    * caused it to terminate (i.e. {@link #handleUpdateException(Throwable)}    * threw the exception further).    */
DECL|method|isUpdateThreadAlive
specifier|public
specifier|synchronized
name|boolean
name|isUpdateThreadAlive
parameter_list|()
block|{
return|return
name|updateThread
operator|!=
literal|null
operator|&&
name|updateThread
operator|.
name|isAlive
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|String
name|res
init|=
literal|"ReplicationClient"
decl_stmt|;
if|if
condition|(
name|updateThread
operator|!=
literal|null
condition|)
block|{
name|res
operator|+=
literal|" ("
operator|+
name|updateThread
operator|.
name|getName
argument_list|()
operator|+
literal|")"
expr_stmt|;
block|}
return|return
name|res
return|;
block|}
comment|/**    * Executes the update operation immediately, irregardess if an update thread    * is running or not.    */
DECL|method|updateNow
specifier|public
name|void
name|updateNow
parameter_list|()
throws|throws
name|IOException
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
name|updateLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|doUpdate
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|updateLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/** Sets the {@link InfoStream} to use for logging messages. */
DECL|method|setInfoStream
specifier|public
name|void
name|setInfoStream
parameter_list|(
name|InfoStream
name|infoStream
parameter_list|)
block|{
if|if
condition|(
name|infoStream
operator|==
literal|null
condition|)
block|{
name|infoStream
operator|=
name|InfoStream
operator|.
name|NO_OUTPUT
expr_stmt|;
block|}
name|this
operator|.
name|infoStream
operator|=
name|infoStream
expr_stmt|;
block|}
block|}
end_class
end_unit
