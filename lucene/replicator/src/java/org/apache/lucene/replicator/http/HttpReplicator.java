begin_unit
begin_package
DECL|package|org.apache.lucene.replicator.http
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|replicator
operator|.
name|http
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpResponse
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|conn
operator|.
name|HttpClientConnectionManager
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|replicator
operator|.
name|Replicator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|replicator
operator|.
name|Revision
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|replicator
operator|.
name|SessionToken
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|replicator
operator|.
name|http
operator|.
name|ReplicationService
operator|.
name|ReplicationAction
import|;
end_import
begin_comment
comment|/**  * An HTTP implementation of {@link Replicator}. Assumes the API supported by  * {@link ReplicationService}.  *   * @lucene.experimental  */
end_comment
begin_class
DECL|class|HttpReplicator
specifier|public
class|class
name|HttpReplicator
extends|extends
name|HttpClientBase
implements|implements
name|Replicator
block|{
comment|/** Construct with specified connection manager. */
DECL|method|HttpReplicator
specifier|public
name|HttpReplicator
parameter_list|(
name|String
name|host
parameter_list|,
name|int
name|port
parameter_list|,
name|String
name|path
parameter_list|,
name|HttpClientConnectionManager
name|conMgr
parameter_list|)
block|{
name|super
argument_list|(
name|host
argument_list|,
name|port
argument_list|,
name|path
argument_list|,
name|conMgr
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|checkForUpdate
specifier|public
name|SessionToken
name|checkForUpdate
parameter_list|(
name|String
name|currVersion
parameter_list|)
throws|throws
name|IOException
block|{
name|String
index|[]
name|params
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|currVersion
operator|!=
literal|null
condition|)
block|{
name|params
operator|=
operator|new
name|String
index|[]
block|{
name|ReplicationService
operator|.
name|REPLICATE_VERSION_PARAM
block|,
name|currVersion
block|}
expr_stmt|;
block|}
specifier|final
name|HttpResponse
name|response
init|=
name|executeGET
argument_list|(
name|ReplicationAction
operator|.
name|UPDATE
operator|.
name|name
argument_list|()
argument_list|,
name|params
argument_list|)
decl_stmt|;
return|return
name|doAction
argument_list|(
name|response
argument_list|,
operator|new
name|Callable
argument_list|<
name|SessionToken
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|SessionToken
name|call
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|DataInputStream
name|dis
init|=
operator|new
name|DataInputStream
argument_list|(
name|responseInputStream
argument_list|(
name|response
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
name|dis
operator|.
name|readByte
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
operator|new
name|SessionToken
argument_list|(
name|dis
argument_list|)
return|;
block|}
block|}
finally|finally
block|{
name|dis
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|obtainFile
specifier|public
name|InputStream
name|obtainFile
parameter_list|(
name|String
name|sessionID
parameter_list|,
name|String
name|source
parameter_list|,
name|String
name|fileName
parameter_list|)
throws|throws
name|IOException
block|{
name|String
index|[]
name|params
init|=
operator|new
name|String
index|[]
block|{
name|ReplicationService
operator|.
name|REPLICATE_SESSION_ID_PARAM
block|,
name|sessionID
block|,
name|ReplicationService
operator|.
name|REPLICATE_SOURCE_PARAM
block|,
name|source
block|,
name|ReplicationService
operator|.
name|REPLICATE_FILENAME_PARAM
block|,
name|fileName
block|,     }
decl_stmt|;
specifier|final
name|HttpResponse
name|response
init|=
name|executeGET
argument_list|(
name|ReplicationAction
operator|.
name|OBTAIN
operator|.
name|name
argument_list|()
argument_list|,
name|params
argument_list|)
decl_stmt|;
return|return
name|doAction
argument_list|(
name|response
argument_list|,
literal|false
argument_list|,
operator|new
name|Callable
argument_list|<
name|InputStream
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|InputStream
name|call
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|responseInputStream
argument_list|(
name|response
argument_list|,
literal|true
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|publish
specifier|public
name|void
name|publish
parameter_list|(
name|Revision
name|revision
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"this replicator implementation does not support remote publishing of revisions"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|release
specifier|public
name|void
name|release
parameter_list|(
name|String
name|sessionID
parameter_list|)
throws|throws
name|IOException
block|{
name|String
index|[]
name|params
init|=
operator|new
name|String
index|[]
block|{
name|ReplicationService
operator|.
name|REPLICATE_SESSION_ID_PARAM
block|,
name|sessionID
block|}
decl_stmt|;
specifier|final
name|HttpResponse
name|response
init|=
name|executeGET
argument_list|(
name|ReplicationAction
operator|.
name|RELEASE
operator|.
name|name
argument_list|()
argument_list|,
name|params
argument_list|)
decl_stmt|;
name|doAction
argument_list|(
name|response
argument_list|,
operator|new
name|Callable
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|call
parameter_list|()
throws|throws
name|Exception
block|{
return|return
literal|null
return|;
comment|// do not remove this call: as it is still validating for us!
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
