begin_unit
begin_package
DECL|package|org.apache.lucene.search.suggest.analyzing
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|suggest
operator|.
name|analyzing
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenFilter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|KeywordAttribute
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|OffsetAttribute
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|PositionIncrementAttribute
import|;
end_import
begin_comment
comment|/** Repeats the last token, if the endOffset indicates that  *  the token didn't have any characters after it (i.e. it  *  is not "done").  This is useful in analyzing  *  suggesters along with StopKeywordFilter: imagine the  *  user has typed 'a', but your stop filter would normally  *  remove that.  This token filter will repeat that last a  *  token, setting {@link KeywordAttribute}, so that the  *  {@link StopKeywordFilter} won't remove it, and then  *  suggestions starting with a will be shown.  */
end_comment
begin_class
DECL|class|ForkLastTokenFilter
specifier|final
class|class
name|ForkLastTokenFilter
extends|extends
name|TokenFilter
block|{
DECL|field|offsetAtt
specifier|private
specifier|final
name|OffsetAttribute
name|offsetAtt
init|=
name|addAttribute
argument_list|(
name|OffsetAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|keywordAtt
specifier|private
specifier|final
name|KeywordAttribute
name|keywordAtt
init|=
name|addAttribute
argument_list|(
name|KeywordAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|posIncAtt
specifier|private
specifier|final
name|PositionIncrementAttribute
name|posIncAtt
init|=
name|addAttribute
argument_list|(
name|PositionIncrementAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|lastToken
name|State
name|lastToken
decl_stmt|;
DECL|field|maxEndOffset
name|int
name|maxEndOffset
decl_stmt|;
DECL|field|stop
name|boolean
name|stop
init|=
literal|false
decl_stmt|;
DECL|method|ForkLastTokenFilter
specifier|public
name|ForkLastTokenFilter
parameter_list|(
name|TokenStream
name|in
parameter_list|)
block|{
name|super
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|incrementToken
specifier|public
name|boolean
name|incrementToken
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|stop
condition|)
block|{
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
name|input
operator|.
name|incrementToken
argument_list|()
condition|)
block|{
name|lastToken
operator|=
name|captureState
argument_list|()
expr_stmt|;
name|maxEndOffset
operator|=
name|Math
operator|.
name|max
argument_list|(
name|maxEndOffset
argument_list|,
name|offsetAtt
operator|.
name|endOffset
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|lastToken
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
comment|// TODO: this is iffy!!!  maybe somehow instead caller
comment|// could tell us endOffset up front?
name|input
operator|.
name|end
argument_list|()
expr_stmt|;
if|if
condition|(
name|offsetAtt
operator|.
name|endOffset
argument_list|()
operator|==
name|maxEndOffset
condition|)
block|{
comment|// Text did not see end of token char:
name|restoreState
argument_list|(
name|lastToken
argument_list|)
expr_stmt|;
name|keywordAtt
operator|.
name|setKeyword
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|posIncAtt
operator|.
name|setPositionIncrement
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|lastToken
operator|=
literal|null
expr_stmt|;
name|stop
operator|=
literal|true
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|reset
specifier|public
name|void
name|reset
parameter_list|()
throws|throws
name|IOException
block|{
name|super
operator|.
name|reset
argument_list|()
expr_stmt|;
name|lastToken
operator|=
literal|null
expr_stmt|;
name|maxEndOffset
operator|=
operator|-
literal|1
expr_stmt|;
name|stop
operator|=
literal|false
expr_stmt|;
block|}
block|}
end_class
end_unit
